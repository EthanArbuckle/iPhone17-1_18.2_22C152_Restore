uint64_t closure #1 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v48 = a1;
  v59 = a2;
  v3 = type metadata accessor for PopoverAttachmentAnchor();
  v57 = *(void *)(v3 - 8);
  v58 = v3;
  MEMORY[0x270FA5388](v3);
  v56 = (uint64_t *)((char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = type metadata accessor for LiftHoverEffect();
  v53 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  v51 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PlainButtonStyle();
  v50 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ButtonRole?);
  MEMORY[0x270FA5388](v9 - 8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>>);
  v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  v16 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0);
  v20 = *(void *)(v19 - 8);
  v54 = v19;
  v55 = v20;
  MEMORY[0x270FA5388](v19);
  v60 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v11, 1, 1, v22);
  outlined init with copy of MiniObjectButtons(a1, (uint64_t)&v65);
  v23 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)&v65, v23 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  Button.init(role:action:label:)();
  PlainButtonStyle.init()();
  v24 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>>);
  v25 = lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v26 = v51;
  static CustomHoverEffect<>.lift.getter();
  v65 = v12;
  v66 = (char *)v6;
  v67 = v24;
  v68 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v28 = lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, MEMORY[0x263F18DF8]);
  v29 = v26;
  v30 = v49;
  v31 = v52;
  View.hoverEffect<A>(_:isEnabled:)();
  v32 = v31;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v29, v31);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v30);
  v33 = v48;
  v34 = *(void *)(v48 + 24);
  LOBYTE(v61) = *(unsigned char *)(v48 + 16);
  v62 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  v51 = v66;
  LODWORD(v53) = v67;
  outlined init with copy of MiniObjectButtons(v33, (uint64_t)&v65);
  v35 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)&v65, v35 + 16);
  v36 = static Anchor.Source<A>.bounds.getter();
  v37 = v56;
  v38 = v57;
  *v56 = v36;
  v39 = v58;
  (*(void (**)(uint64_t *, void, uint64_t))(v38 + 104))(v37, *MEMORY[0x263F1A030], v58);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.presentationCompactAdaptation(_:)>>.0);
  v61 = v30;
  v62 = v32;
  v63 = OpaqueTypeConformance2;
  v64 = v28;
  swift_getOpaqueTypeConformance2();
  v40 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.allowsSecureDrawing()>>.0);
  v41 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<GraphableExpressionsView, _FlexFrameLayout>);
  v42 = lazy protocol witness table accessor for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
  v61 = v41;
  v62 = v42;
  v43 = swift_getOpaqueTypeConformance2();
  v61 = v40;
  v62 = v43;
  swift_getOpaqueTypeConformance2();
  v44 = v54;
  v45 = v60;
  View.popoverCore<A>(isPresented:attachmentAnchor:arrowEdges:isDetachable:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v38 + 8))(v37, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v45, v44);
}

uint64_t closure #1 in closure #1 in MiniObjectButtons.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t closure #2 in closure #1 in MiniObjectButtons.body.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v0 - 8);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = Image.init(systemName:)();
  if (one-time initialization token for buttonFontSize != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = static Font.system(size:weight:design:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v2, &demangling cache variable for type metadata for Font.Design?);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = v3;
  uint64_t v14 = KeyPath;
  uint64_t v15 = v5;
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v16._countAndFlagsBits = 0xD00000000000002ALL;
  v16._object = (void *)0x800000020C851440;
  v7._countAndFlagsBits = 0x6553206870617247;
  v7._object = (void *)0xEE0073676E697474;
  v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v8.value._object = (void *)0xEB00000000656C62;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in closure #1 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = type metadata accessor for PresentationAdaptation();
  uint64_t v3 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.allowsSecureDrawing()>>.0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  Swift::String v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 40);
  swift_getKeyPath();
  *(void *)&v36[0] = v10;
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v11 = *(void *)(v10 + 176);
  swift_retain();
  swift_release();
  *(void *)&long long v28 = v11;
  type metadata accessor for GraphableExpressionsState(0);
  State.init(wrappedValue:)();
  long long v12 = v36[0];
  uint64_t v13 = static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)&v28, 0.0, 1, 400.0, 0, v13, v14, v12, *((uint64_t *)&v12 + 1));
  swift_release();
  swift_release();
  v36[4] = v32;
  v36[5] = v33;
  v36[6] = v34;
  v36[7] = v35;
  v36[0] = v28;
  v36[1] = v29;
  v36[2] = v30;
  v36[3] = v31;
  long long v24 = v32;
  long long v25 = v33;
  long long v26 = v34;
  long long v27 = v35;
  long long v20 = v28;
  long long v21 = v29;
  long long v22 = v30;
  long long v23 = v31;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<GraphableExpressionsView, _FlexFrameLayout>);
  unint64_t v16 = lazy protocol witness table accessor for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
  View.allowsSecureDrawing()();
  outlined release of ModifiedContent<GraphableExpressionsView, _FlexFrameLayout>((uint64_t)v36);
  static PresentationAdaptation.popover.getter();
  *(void *)&long long v28 = v15;
  *((void *)&v28 + 1) = v16;
  swift_getOpaqueTypeConformance2();
  View.presentationCompactAdaptation(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t closure #3 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for LiftHoverEffect();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  uint64_t v31 = v4;
  MEMORY[0x270FA5388](v3);
  long long v29 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PlainButtonStyle();
  uint64_t v28 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ButtonRole?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v16 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.destructive.getter();
  uint64_t v19 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v11, 0, 1, v19);
  outlined init with copy of MiniObjectButtons(a1, (uint64_t)v33);
  uint64_t v20 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)v33, v20 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  Button.init(role:action:label:)();
  PlainButtonStyle.init()();
  uint64_t v21 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>>);
  uint64_t v22 = lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  long long v23 = v29;
  static CustomHoverEffect<>.lift.getter();
  v33[0] = v12;
  v33[1] = v6;
  v33[2] = v21;
  v33[3] = v22;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, MEMORY[0x263F18DF8]);
  uint64_t v24 = v27;
  uint64_t v25 = v30;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v23, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v24);
}

uint64_t closure #2 in closure #3 in MiniObjectButtons.body.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v0 - 8);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = Image.init(systemName:)();
  uint64_t v4 = static Color.red.getter();
  uint64_t KeyPath = swift_getKeyPath();
  if (one-time initialization token for buttonFontSize != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v2, 1, 1, v6);
  uint64_t v7 = static Font.system(size:weight:design:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v2, &demangling cache variable for type metadata for Font.Design?);
  uint64_t v8 = swift_getKeyPath();
  uint64_t v15 = v3;
  uint64_t v16 = KeyPath;
  uint64_t v17 = v4;
  uint64_t v18 = v8;
  uint64_t v19 = v7;
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v20._object = (void *)0x800000020C851950;
  v9._countAndFlagsBits = 0x6574656C6544;
  v9._object = (void *)0xE600000000000000;
  v10.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v10.value._object = (void *)0xEB00000000656C62;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0xD000000000000027;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, paperKitBundle, v11, v20);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #4 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v374 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ButtonRole?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v372 = (uint64_t)&v367 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  v373 = (char *)&v367 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
  MEMORY[0x270FA5388](v7 - 8);
  Swift::String v9 = (char *)&v367 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v383 = (uint64_t)&v367 - v11;
  uint64_t v370 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v369 = *(void *)(v370 - 8);
  MEMORY[0x270FA5388](v370);
  v368 = (char *)&v367 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v385 = (uint64_t)&v367 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v407 = (uint64_t)&v367 - v16;
  MEMORY[0x270FA5388](v17);
  v395 = (char *)&v367 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v406 = (uint64_t)&v367 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v371 = (uint64_t)&v367 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v375 = (uint64_t)&v367 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v393 = (uint64_t)&v367 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v411 = (uint64_t)&v367 - v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v410 = (uint64_t)&v367 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v392 = (uint64_t)&v367 - v32;
  MEMORY[0x270FA5388](v33);
  uint64_t v376 = (uint64_t)&v367 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v389 = (uint64_t)&v367 - v36;
  MEMORY[0x270FA5388](v37);
  uint64_t v388 = (uint64_t)&v367 - v38;
  MEMORY[0x270FA5388](v39);
  uint64_t v387 = (uint64_t)&v367 - v40;
  MEMORY[0x270FA5388](v41);
  uint64_t v386 = (uint64_t)&v367 - v42;
  MEMORY[0x270FA5388](v43);
  uint64_t v378 = (uint64_t)&v367 - v44;
  MEMORY[0x270FA5388](v45);
  uint64_t v404 = (uint64_t)&v367 - v46;
  MEMORY[0x270FA5388](v47);
  uint64_t v413 = (uint64_t)&v367 - v48;
  MEMORY[0x270FA5388](v49);
  uint64_t v405 = (uint64_t)&v367 - v50;
  MEMORY[0x270FA5388](v51);
  uint64_t v403 = (uint64_t)&v367 - v52;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?);
  MEMORY[0x270FA5388](v53 - 8);
  uint64_t v384 = (uint64_t)&v367 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v55);
  uint64_t v402 = (uint64_t)&v367 - v56;
  uint64_t v416 = type metadata accessor for Divider();
  uint64_t v57 = *(void *)(v416 - 8);
  MEMORY[0x270FA5388](v416);
  v377 = (char *)&v367 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v59);
  v409 = (char *)&v367 - v60;
  MEMORY[0x270FA5388](v61);
  v419 = (char *)&v367 - v62;
  uint64_t v422 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>);
  uint64_t v417 = *(void *)(v422 - 8);
  MEMORY[0x270FA5388](v422);
  v379 = (char *)&v367 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v64);
  v382 = (char *)&v367 - v65;
  MEMORY[0x270FA5388](v66);
  v381 = (ValueMetadata *)((char *)&v367 - v67);
  MEMORY[0x270FA5388](v68);
  v380 = (char *)&v367 - v69;
  MEMORY[0x270FA5388](v70);
  v400 = (char *)&v367 - v71;
  MEMORY[0x270FA5388](v72);
  v399 = (char *)&v367 - v73;
  MEMORY[0x270FA5388](v74);
  v398 = (char *)&v367 - v75;
  MEMORY[0x270FA5388](v76);
  v397 = (char *)&v367 - v77;
  MEMORY[0x270FA5388](v78);
  v408 = (char *)&v367 - v79;
  MEMORY[0x270FA5388](v80);
  v414 = (char *)&v367 - v81;
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
  MEMORY[0x270FA5388](v82 - 8);
  v391 = (char *)&v367 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v84);
  v86 = (char *)&v367 - v85;
  uint64_t v87 = *(void *)(a1 + 40);
  swift_getKeyPath();
  v423[0] = v87;
  uint64_t v396 = lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v88 = *(void *)(v87 + 40);
  swift_release();
  uint64_t v415 = v57;
  uint64_t v401 = a1;
  v390 = v86;
  v394 = v9;
  if ((v88 & 0x8000) != 0)
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v439._countAndFlagsBits = 0xD00000000000002CLL;
    v90._object = (void *)0xE90000000000006BLL;
    v454._object = (void *)0x800000020C8518D0;
    v90._countAndFlagsBits = 0x6E694C206E65704FLL;
    v91.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v91.value._object = (void *)0xEB00000000656C62;
    v92._countAndFlagsBits = 0;
    v92._object = (void *)0xE000000000000000;
    Swift::String v93 = NSLocalizedString(_:tableName:bundle:value:comment:)(v90, v91, paperKitBundle, v92, v439);
    outlined init with copy of MiniObjectButtons(a1, (uint64_t)v423);
    uint64_t v94 = swift_allocObject();
    uint64_t v95 = outlined init with take of MiniObjectButtons((uint64_t)v423, v94 + 16);
    Swift::String v437 = v93;
    MEMORY[0x270FA5388](v95);
    *(&v367 - 4) = (uint64_t)&v437;
    *(&v367 - 3) = 1802398060;
    v454._object = (void *)0xE400000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Label<Text, Image>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, &demangling cache variable for type metadata for Label<Text, Image>);
    v96 = v414;
    Button.init(action:label:)();
    swift_bridgeObjectRelease();
    v97 = v419;
    Divider.init()();
    v98 = *(void (**)(char *, char *, uint64_t))(v417 + 16);
    v99 = v408;
    uint64_t v100 = v422;
    v98(v408, v96, v422);
    v101 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
    v102 = v409;
    uint64_t v103 = v416;
    v101(v409, v97, v416);
    uint64_t v104 = (uint64_t)v391;
    v98(v391, v99, v100);
    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Button<Label<Text, Image>>, Divider));
    v101((char *)(v104 + *(int *)(v105 + 48)), v102, v103);
    v106 = *(void (**)(char *, uint64_t))(v415 + 8);
    v106(v97, v103);
    v107 = *(void (**)(char *, uint64_t))(v417 + 8);
    v107(v414, v100);
    v106(v102, v103);
    v107(v99, v100);
    uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v104, 0, 1, v108);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v104, (uint64_t)v390, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
  }
  else
  {
    uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v86, 1, 1, v89);
  }
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v454._object = (void *)0x800000020C851470;
  v109._countAndFlagsBits = 7632195;
  v109._object = (void *)0xE300000000000000;
  v110.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v110.value._object = (void *)0xEB00000000656C62;
  v111._countAndFlagsBits = 0;
  v111._object = (void *)0xE000000000000000;
  v440._countAndFlagsBits = 0xD00000000000001CLL;
  Swift::String v112 = NSLocalizedString(_:tableName:bundle:value:comment:)(v109, v110, paperKitBundle, v111, v440);
  uint64_t v113 = v401;
  outlined init with copy of MiniObjectButtons(v401, (uint64_t)v423);
  uint64_t v114 = swift_allocObject();
  uint64_t v115 = outlined init with take of MiniObjectButtons((uint64_t)v423, v114 + 16);
  Swift::String v437 = v112;
  MEMORY[0x270FA5388](v115);
  *(&v367 - 4) = (uint64_t)&v437;
  *(&v367 - 3) = 0x73726F7373696373;
  uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Label<Text, Image>);
  uint64_t v117 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, &demangling cache variable for type metadata for Label<Text, Image>);
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  v441._countAndFlagsBits = 0xD00000000000001DLL;
  v454._object = (void *)0x800000020C851490;
  v118._countAndFlagsBits = 2037411651;
  v118._object = (void *)0xE400000000000000;
  v119.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v119.value._object = (void *)0xEB00000000656C62;
  v120._countAndFlagsBits = 0;
  v120._object = (void *)0xE000000000000000;
  Swift::String v121 = NSLocalizedString(_:tableName:bundle:value:comment:)(v118, v119, paperKitBundle, v120, v441);
  outlined init with copy of MiniObjectButtons(v113, (uint64_t)v423);
  uint64_t v122 = swift_allocObject();
  uint64_t v123 = outlined init with take of MiniObjectButtons((uint64_t)v423, v122 + 16);
  Swift::String v437 = v121;
  MEMORY[0x270FA5388](v123);
  *(&v367 - 4) = (uint64_t)&v437;
  *(&v367 - 3) = 0x642E6E6F2E636F64;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  v454._object = (void *)0x800000020C8514B0;
  v124._countAndFlagsBits = 0x6574736150;
  v124._object = (void *)0xE500000000000000;
  v125.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v125.value._object = (void *)0xEB00000000656C62;
  v126._countAndFlagsBits = 0;
  v126._object = (void *)0xE000000000000000;
  v442._countAndFlagsBits = 0xD00000000000001CLL;
  Swift::String v127 = NSLocalizedString(_:tableName:bundle:value:comment:)(v124, v125, paperKitBundle, v126, v442);
  outlined init with copy of MiniObjectButtons(v113, (uint64_t)v423);
  uint64_t v128 = swift_allocObject();
  uint64_t v129 = outlined init with take of MiniObjectButtons((uint64_t)v423, v128 + 16);
  Swift::String v437 = v127;
  MEMORY[0x270FA5388](v129);
  *(&v367 - 4) = (uint64_t)&v437;
  *(&v367 - 3) = 0xD000000000000010;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  uint64_t v130 = v113;
  v443._countAndFlagsBits = 0xD000000000000022;
  v454._object = (void *)0x800000020C8514F0;
  v131._countAndFlagsBits = 0x746163696C707544;
  v131._object = (void *)0xE900000000000065;
  v132.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v132.value._object = (void *)0xEB00000000656C62;
  v133._countAndFlagsBits = 0;
  v133._object = (void *)0xE000000000000000;
  Swift::String v134 = NSLocalizedString(_:tableName:bundle:value:comment:)(v131, v132, paperKitBundle, v133, v443);
  outlined init with copy of MiniObjectButtons(v113, (uint64_t)v423);
  uint64_t v135 = swift_allocObject();
  uint64_t v136 = outlined init with take of MiniObjectButtons((uint64_t)v423, v135 + 16);
  Swift::String v437 = v134;
  MEMORY[0x270FA5388](v136);
  *(&v367 - 4) = (uint64_t)&v437;
  *(&v367 - 3) = 0xD000000000000015;
  v454._object = (void *)0x800000020C851400;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  int has_internal_ui = os_variant_has_internal_ui();
  uint64_t v412 = v116;
  uint64_t v418 = v117;
  if (has_internal_ui)
  {
    uint64_t v138 = LocalizedStringKey.init(stringLiteral:)();
    v421 = &v367;
    MEMORY[0x270FA5388](v138);
    MEMORY[0x270FA5388](v139);
    MEMORY[0x270FA5388](v140);
    *(&v367 - 6) = v141;
    *(&v367 - 5) = v142;
    *((unsigned char *)&v367 - 32) = v143 & 1;
    *(&v367 - 3) = v144;
    v454._object = v145;
    unint64_t v366 = 0x800000020C8518B0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>);
    uint64_t v146 = v402;
    Menu.init(content:label:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v147 - 8) + 56))(v146, 0, 1, v147);
  }
  else
  {
    uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v148 - 8) + 56))(v402, 1, 1, v148);
  }
  uint64_t v149 = *(void *)(v130 + 40);
  swift_getKeyPath();
  v423[0] = v149;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v150 = *(void *)(v149 + 40);
  swift_release();
  uint64_t v151 = v130;
  if ((v150 & 0x80) != 0)
  {
    v152._countAndFlagsBits = 0xD000000000000016;
    v444._countAndFlagsBits = 0xD000000000000029;
    v454._object = (void *)0x800000020C851860;
    v152._object = (void *)0x800000020C851840;
    v153.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v153.value._object = (void *)0xEB00000000656C62;
    v154._countAndFlagsBits = 0;
    v154._object = (void *)0xE000000000000000;
    Swift::String v155 = NSLocalizedString(_:tableName:bundle:value:comment:)(v152, v153, paperKitBundle, v154, v444);
    outlined init with copy of MiniObjectButtons(v130, (uint64_t)v423);
    uint64_t v156 = swift_allocObject();
    uint64_t v157 = outlined init with take of MiniObjectButtons((uint64_t)v423, v156 + 16);
    Swift::String v437 = v155;
    MEMORY[0x270FA5388](v157);
    *(&v367 - 4) = (uint64_t)&v437;
    *(&v367 - 3) = 0xD000000000000013;
    v454._object = (void *)0x800000020C851890;
    uint64_t v158 = v403;
    Button.init(action:label:)();
    swift_bridgeObjectRelease();
    v421 = *(uint64_t **)(v417 + 56);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v421)(v158, 0, 1, v422);
  }
  else
  {
    v421 = *(uint64_t **)(v417 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v421)(v403, 1, 1, v422);
  }
  uint64_t v159 = *(void *)(v130 + 40);
  swift_getKeyPath();
  v423[0] = v159;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v160 = *(void *)(v159 + 40);
  swift_release();
  if ((v160 & 0x100) != 0)
  {
    uint64_t v163 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v165 = v164;
    char v167 = v166;
    uint64_t v169 = v168;
    outlined init with copy of MiniObjectButtons(v130, (uint64_t)v423);
    uint64_t v170 = swift_allocObject();
    uint64_t v171 = outlined init with take of MiniObjectButtons((uint64_t)v423, v170 + 16);
    MEMORY[0x270FA5388](v171);
    *(&v367 - 6) = v163;
    *(&v367 - 5) = v165;
    *((unsigned char *)&v367 - 32) = v167 & 1;
    *(&v367 - 3) = v169;
    v454._object = (void *)0x6F746F6870;
    unint64_t v366 = 0xE500000000000000;
    uint64_t v162 = v405;
    uint64_t v151 = v130;
    Button.init(action:label:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v161 = 0;
  }
  else
  {
    uint64_t v161 = 1;
    uint64_t v162 = v405;
  }
  uint64_t v172 = 1;
  uint64_t v420 = v417 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v421)(v162, v161, 1, v422);
  uint64_t v173 = *(void *)(v151 + 40);
  swift_getKeyPath();
  v423[0] = v173;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v174 = *(void *)(v173 + 40);
  swift_release();
  if ((v174 & 0x40) != 0)
  {
    v445._countAndFlagsBits = 0xD000000000000020;
    v454._object = (void *)0x800000020C8517F0;
    v175._countAndFlagsBits = 0x6574616572636552;
    v175._object = (void *)0xE800000000000000;
    v176.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v176.value._object = (void *)0xEB00000000656C62;
    v177._countAndFlagsBits = 0;
    v177._object = (void *)0xE000000000000000;
    Swift::String v178 = NSLocalizedString(_:tableName:bundle:value:comment:)(v175, v176, paperKitBundle, v177, v445);
    outlined init with copy of MiniObjectButtons(v151, (uint64_t)v423);
    uint64_t v179 = swift_allocObject();
    uint64_t v180 = outlined init with take of MiniObjectButtons((uint64_t)v423, v179 + 16);
    Swift::String v437 = v178;
    MEMORY[0x270FA5388](v180);
    *(&v367 - 4) = (uint64_t)&v437;
    *(&v367 - 3) = 0xD000000000000016;
    v454._object = (void *)0x800000020C8517D0;
    Button.init(action:label:)();
    swift_bridgeObjectRelease();
    uint64_t v172 = 0;
  }
  uint64_t v181 = v422;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v421)(v413, v172, 1, v422);
  uint64_t v182 = *(void *)(v151 + 40);
  swift_getKeyPath();
  v423[0] = v182;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v183 = *(void *)(v182 + 40);
  swift_release();
  if ((v183 & 0x20000) != 0)
  {
    v186 = v419;
    Divider.init()();
    v187._countAndFlagsBits = 0xD000000000000011;
    v446._countAndFlagsBits = 0xD00000000000003BLL;
    v454._object = (void *)0x800000020C851790;
    v187._object = (void *)0x800000020C851770;
    v188.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v188.value._object = (void *)0xEB00000000656C62;
    v189._countAndFlagsBits = 0;
    v189._object = (void *)0xE000000000000000;
    Swift::String v190 = NSLocalizedString(_:tableName:bundle:value:comment:)(v187, v188, paperKitBundle, v189, v446);
    outlined init with copy of MiniObjectButtons(v151, (uint64_t)v423);
    uint64_t v191 = swift_allocObject();
    uint64_t v192 = outlined init with take of MiniObjectButtons((uint64_t)v423, v191 + 16);
    Swift::String v437 = v190;
    MEMORY[0x270FA5388](v192);
    *(&v367 - 4) = (uint64_t)&v437;
    *(&v367 - 3) = 0xD000000000000016;
    v454._object = (void *)0x800000020C8517D0;
    v193 = v414;
    Button.init(action:label:)();
    swift_bridgeObjectRelease();
    v194 = *(void (**)(char *, char *, uint64_t))(v415 + 16);
    v195 = v409;
    v194(v409, v186, v416);
    uint64_t v196 = v417;
    uint64_t v197 = v181;
    v198 = *(void (**)(char *, char *, uint64_t))(v417 + 16);
    v199 = v408;
    v198(v408, v193, v197);
    uint64_t v200 = (uint64_t)v395;
    v194(v395, v195, v416);
    uint64_t v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Divider, Button<Label<Text, Image>>));
    v198((char *)(v200 + *(int *)(v201 + 48)), v199, v197);
    uint64_t v202 = v196;
    uint64_t v203 = v416;
    v204 = *(void (**)(char *, uint64_t))(v202 + 8);
    v204(v193, v197);
    v205 = *(void (**)(char *, uint64_t))(v415 + 8);
    v205(v419, v203);
    v206 = v199;
    v185 = &unk_26ACC4000;
    uint64_t v207 = v401;
    v204(v206, v197);
    v205(v195, v203);
    uint64_t v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v208 - 8) + 56))(v200, 0, 1, v208);
    uint64_t v209 = v200;
    uint64_t v151 = v207;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v209, v406, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  }
  else
  {
    uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v184 - 8) + 56))(v406, 1, 1, v184);
    v185 = &unk_26ACC4000;
  }
  uint64_t v210 = *(void *)(v151 + 40);
  swift_getKeyPath();
  v423[0] = v210;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v211 = *(void *)(v210 + 40);
  swift_release();
  if ((v211 & 0x80000) != 0)
  {
    outlined init with copy of MiniObjectButtons(v151, (uint64_t)v423);
    uint64_t v214 = swift_allocObject();
    outlined init with take of MiniObjectButtons((uint64_t)v423, v214 + 16);
    uint64_t v213 = v404;
    Button.init(action:label:)();
    uint64_t v212 = 0;
  }
  else
  {
    uint64_t v212 = 1;
    uint64_t v213 = v404;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v421)(v213, v212, 1, v422);
  v424 = &type metadata for FeedbackFeatures;
  unint64_t v425 = lazy protocol witness table accessor for type FeedbackFeatures and conformance FeedbackFeatures();
  char v215 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v423);
  outlined init with copy of MiniObjectButtons(v151, (uint64_t)&v437);
  if (v215)
  {
    uint64_t v216 = v438;
    swift_getKeyPath();
    v423[0] = v216;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v217 = *(void *)(v216 + 40);
    swift_release();
    outlined destroy of MiniObjectButtons((uint64_t)&v437);
    if ((v217 & 0x40000) != 0)
    {
      Divider.init()();
      v218.super.isa = (Class)*((void *)v185 + 194);
      v447._countAndFlagsBits = 0xD000000000000040;
      v454._object = (void *)0x800000020C851720;
      v219._object = (void *)0x800000020C851700;
      v219._countAndFlagsBits = 0xD000000000000010;
      v220.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v220.value._object = (void *)0xEB00000000656C62;
      v221._countAndFlagsBits = 0;
      v221._object = (void *)0xE000000000000000;
      Swift::String v222 = NSLocalizedString(_:tableName:bundle:value:comment:)(v219, v220, v218, v221, v447);
      uint64_t v223 = v369;
      uint64_t v224 = (uint64_t)v368;
      uint64_t v225 = v370;
      (*(void (**)(char *, void, uint64_t))(v369 + 104))(v368, *MEMORY[0x263F3C1E8], v370);
      uint64_t v226 = specialized FeedbackManager.feedbackImageName(action:hasResponse:)(v224, 0);
      v228 = v227;
      (*(void (**)(uint64_t, uint64_t))(v223 + 8))(v224, v225);
      outlined init with copy of MiniObjectButtons(v151, (uint64_t)v423);
      uint64_t v229 = swift_allocObject();
      uint64_t v230 = outlined init with take of MiniObjectButtons((uint64_t)v423, v229 + 16);
      Swift::String v436 = v222;
      MEMORY[0x270FA5388](v230);
      *(&v367 - 4) = (uint64_t)&v436;
      *(&v367 - 3) = v226;
      v454._object = v228;
      v231 = v414;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v232 = *(void (**)(char *, char *, uint64_t))(v415 + 16);
      v233 = v409;
      uint64_t v234 = v416;
      v232(v409, v419, v416);
      uint64_t v235 = v417;
      v236 = *(void (**)(char *, char *, uint64_t))(v417 + 16);
      v237 = v408;
      v238 = v231;
      uint64_t v239 = v422;
      v236(v408, v238, v422);
      uint64_t v240 = (uint64_t)v395;
      v232(v395, v233, v234);
      uint64_t v241 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Divider, Button<Label<Text, Image>>));
      v236((char *)(v240 + *(int *)(v241 + 48)), v237, v239);
      v242 = *(void (**)(char *, uint64_t))(v235 + 8);
      v242(v414, v239);
      v243 = *(void (**)(char *, uint64_t))(v415 + 8);
      v243(v419, v234);
      v244 = v237;
      uint64_t v245 = v401;
      v242(v244, v239);
      v243(v233, v234);
      uint64_t v246 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v246 - 8) + 56))(v240, 0, 1, v246);
      uint64_t v247 = v240;
      uint64_t v151 = v245;
      v185 = &unk_26ACC4000;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v247, v407, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
      goto LABEL_30;
    }
  }
  else
  {
    outlined destroy of MiniObjectButtons((uint64_t)&v437);
  }
  uint64_t v248 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v248 - 8) + 56))(v407, 1, 1, v248);
LABEL_30:
  uint64_t v249 = v410;
  uint64_t v250 = *(void *)(v151 + 40);
  swift_getKeyPath();
  v423[0] = v250;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v251 = *(void *)(v250 + 40);
  swift_release();
  if ((v251 & 0x3E00) != 0)
  {
    Divider.init()();
    uint64_t v252 = *(void *)(v151 + 40);
    swift_getKeyPath();
    v423[0] = v252;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v253 = *(void *)(v252 + 40);
    swift_release();
    if ((v253 & 0x2000) != 0)
    {
      v259.super.isa = (Class)*((void *)v185 + 194);
      v448._countAndFlagsBits = 0xD000000000000025;
      v454._object = (void *)0x800000020C8516D0;
      v260._countAndFlagsBits = 0x656E69666552;
      v260._object = (void *)0xE600000000000000;
      v261.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v261.value._object = (void *)0xEB00000000656C62;
      v262._countAndFlagsBits = 0;
      v262._object = (void *)0xE000000000000000;
      Swift::String v263 = NSLocalizedString(_:tableName:bundle:value:comment:)(v260, v261, v259, v262, v448);
      outlined init with copy of MiniObjectButtons(v151, (uint64_t)v423);
      uint64_t v264 = swift_allocObject();
      uint64_t v265 = outlined init with take of MiniObjectButtons((uint64_t)v423, v264 + 16);
      Swift::String v436 = v263;
      MEMORY[0x270FA5388](v265);
      *(&v367 - 4) = (uint64_t)&v436;
      *(&v367 - 3) = 0x68636E657277;
      v454._object = (void *)0xE600000000000000;
      uint64_t v255 = v378;
      Button.init(action:label:)();
      uint64_t v151 = v401;
      swift_bridgeObjectRelease();
      uint64_t v254 = 0;
    }
    else
    {
      uint64_t v254 = 1;
      uint64_t v255 = v378;
    }
    uint64_t v266 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v421)(v255, v254, 1, v422);
    uint64_t v267 = *(void *)(v151 + 40);
    swift_getKeyPath();
    v423[0] = v267;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v268 = *(void *)(v267 + 40);
    swift_release();
    if ((v268 & 0x200) != 0)
    {
      v269.super.isa = (Class)*((void *)v185 + 194);
      v449._countAndFlagsBits = 0xD00000000000002BLL;
      v454._object = (void *)0x800000020C8516A0;
      v270._countAndFlagsBits = 0x2073612079706F43;
      v270._object = (void *)0xEC00000074786554;
      v271.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v271.value._object = (void *)0xEB00000000656C62;
      v272._countAndFlagsBits = 0;
      v272._object = (void *)0xE000000000000000;
      Swift::String v273 = NSLocalizedString(_:tableName:bundle:value:comment:)(v270, v271, v269, v272, v449);
      outlined init with copy of MiniObjectButtons(v151, (uint64_t)v423);
      uint64_t v274 = swift_allocObject();
      uint64_t v275 = outlined init with take of MiniObjectButtons((uint64_t)v423, v274 + 16);
      Swift::String v436 = v273;
      MEMORY[0x270FA5388](v275);
      *(&v367 - 4) = (uint64_t)&v436;
      *(&v367 - 3) = 0x6D726F6674786574;
      v454._object = (void *)0xEA00000000007461;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      uint64_t v266 = 0;
    }
    uint64_t v276 = v151;
    uint64_t v277 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v421)(v386, v266, 1, v422);
    uint64_t v278 = *(void *)(v276 + 40);
    swift_getKeyPath();
    v423[0] = v278;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v279 = *(void *)(v278 + 40);
    swift_release();
    if ((v279 & 0x400) != 0)
    {
      v280.super.isa = (Class)*((void *)v185 + 194);
      v281._countAndFlagsBits = 0xD000000000000012;
      v450._countAndFlagsBits = 0xD000000000000033;
      v454._object = (void *)0x800000020C851640;
      v281._object = (void *)0x800000020C851620;
      v282.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v282.value._object = (void *)0xEB00000000656C62;
      v283._countAndFlagsBits = 0;
      v283._object = (void *)0xE000000000000000;
      Swift::String v284 = NSLocalizedString(_:tableName:bundle:value:comment:)(v281, v282, v280, v283, v450);
      outlined init with copy of MiniObjectButtons(v276, (uint64_t)v423);
      uint64_t v285 = swift_allocObject();
      uint64_t v286 = outlined init with take of MiniObjectButtons((uint64_t)v423, v285 + 16);
      Swift::String v436 = v284;
      MEMORY[0x270FA5388](v286);
      *(&v367 - 4) = (uint64_t)&v436;
      *(&v367 - 3) = 0xD000000000000019;
      v454._object = (void *)0x800000020C851680;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      uint64_t v277 = 0;
    }
    uint64_t v287 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v421)(v387, v277, 1, v422);
    uint64_t v288 = *(void *)(v276 + 40);
    swift_getKeyPath();
    v423[0] = v288;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v289 = *(void *)(v288 + 40);
    swift_release();
    if ((v289 & 0x800) != 0)
    {
      v290.super.isa = (Class)*((void *)v185 + 194);
      v451._countAndFlagsBits = 0xD000000000000029;
      v454._object = (void *)0x800000020C8515D0;
      v291._countAndFlagsBits = 0x74616C736E617254;
      v291._object = (void *)0xE900000000000065;
      v292.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v292.value._object = (void *)0xEB00000000656C62;
      v293._countAndFlagsBits = 0;
      v293._object = (void *)0xE000000000000000;
      Swift::String v294 = NSLocalizedString(_:tableName:bundle:value:comment:)(v291, v292, v290, v293, v451);
      outlined init with copy of MiniObjectButtons(v276, (uint64_t)v423);
      uint64_t v295 = swift_allocObject();
      uint64_t v296 = outlined init with take of MiniObjectButtons((uint64_t)v423, v295 + 16);
      Swift::String v436 = v294;
      MEMORY[0x270FA5388](v296);
      *(&v367 - 4) = (uint64_t)&v436;
      *(&v367 - 3) = 0xD000000000000010;
      v454._object = (void *)0x800000020C851600;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      uint64_t v287 = 0;
    }
    uint64_t v297 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v421)(v388, v287, 1, v422);
    uint64_t v298 = *(void *)(v276 + 40);
    swift_getKeyPath();
    v423[0] = v298;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v299 = *(void *)(v298 + 40);
    swift_release();
    if ((v299 & 0x1000) != 0)
    {
      v300.super.isa = (Class)*((void *)v185 + 194);
      v452._countAndFlagsBits = 0xD00000000000002DLL;
      v301._object = (void *)0xEA00000000006E65;
      v454._object = (void *)0x800000020C851580;
      v301._countAndFlagsBits = 0x7468676961727453;
      v302.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v302.value._object = (void *)0xEB00000000656C62;
      v303._countAndFlagsBits = 0;
      v303._object = (void *)0xE000000000000000;
      Swift::String v304 = NSLocalizedString(_:tableName:bundle:value:comment:)(v301, v302, v300, v303, v452);
      outlined init with copy of MiniObjectButtons(v276, (uint64_t)v423);
      uint64_t v305 = swift_allocObject();
      uint64_t v306 = outlined init with take of MiniObjectButtons((uint64_t)v423, v305 + 16);
      Swift::String v436 = v304;
      MEMORY[0x270FA5388](v306);
      *(&v367 - 4) = (uint64_t)&v436;
      *(&v367 - 3) = 0xD000000000000011;
      v454._object = (void *)0x800000020C8515B0;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      uint64_t v297 = 0;
    }
    uint64_t v307 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v421)(v389, v297, 1, v422);
    uint64_t v308 = *(void *)(v276 + 40);
    swift_getKeyPath();
    v423[0] = v308;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v309 = *(void *)(v308 + 40);
    swift_release();
    uint64_t v310 = v392;
    if ((v309 & 0x4000) != 0)
    {
      v311.super.isa = (Class)*((void *)v185 + 194);
      v453._countAndFlagsBits = 0xD000000000000030;
      v454._object = (void *)0x800000020C851540;
      v312._countAndFlagsBits = 0x206F742070616E53;
      v312._object = (void *)0xED00006570616853;
      v313.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v313.value._object = (void *)0xEB00000000656C62;
      v314._countAndFlagsBits = 0;
      v314._object = (void *)0xE000000000000000;
      Swift::String v315 = NSLocalizedString(_:tableName:bundle:value:comment:)(v312, v313, v311, v314, v453);
      outlined init with copy of MiniObjectButtons(v401, (uint64_t)v423);
      uint64_t v316 = swift_allocObject();
      uint64_t v317 = outlined init with take of MiniObjectButtons((uint64_t)v423, v316 + 16);
      Swift::String v436 = v315;
      MEMORY[0x270FA5388](v317);
      *(&v367 - 4) = (uint64_t)&v436;
      *(&v367 - 3) = 1918989427;
      v454._object = (void *)0xE400000000000000;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      uint64_t v307 = 0;
    }
    uint64_t v318 = v376;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v421)(v376, v307, 1, v422);
    v319 = *(void (**)(char *, char *, uint64_t))(v415 + 16);
    v320 = v419;
    uint64_t v321 = v416;
    v319(v419, v377, v416);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v378, v310, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    uint64_t v322 = v410;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v386, v410, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v387, v411, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    uint64_t v323 = v393;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v388, v393, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v389, v375, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    uint64_t v324 = v371;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v318, v371, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    uint64_t v325 = (uint64_t)v394;
    v319(v394, v320, v321);
    v326 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?));
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v310, v325 + v326[12], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v322, v325 + v326[16], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    uint64_t v327 = v411;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v411, v325 + v326[20], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v323, v325 + v326[24], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    uint64_t v328 = v375;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v375, v325 + v326[28], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v324, v325 + v326[32], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v376, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v389, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v185 = &unk_26ACC4000;
    outlined destroy of StocksKitCurrencyCache.Provider?(v388, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v387, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v386, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v378, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v329 = *(void (**)(char *, uint64_t))(v415 + 8);
    uint64_t v330 = v416;
    v329(v377, v416);
    outlined destroy of StocksKitCurrencyCache.Provider?(v324, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v328, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v323, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v327, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    uint64_t v331 = v410;
    outlined destroy of StocksKitCurrencyCache.Provider?(v410, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    uint64_t v258 = v392;
    outlined destroy of StocksKitCurrencyCache.Provider?(v392, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v329(v419, v330);
    uint64_t v332 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v332 - 8) + 56))(v325, 0, 1, v332);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v325, v383, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
    uint64_t v249 = v331;
    uint64_t v257 = v422;
    uint64_t v151 = v401;
  }
  else
  {
    uint64_t v256 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v256 - 8) + 56))(v383, 1, 1, v256);
    uint64_t v257 = v422;
    uint64_t v258 = v392;
  }
  Divider.init()();
  v333.super.isa = (Class)*((void *)v185 + 194);
  v454._countAndFlagsBits = 0xD00000000000001FLL;
  v454._object = (void *)0x800000020C851520;
  v334._countAndFlagsBits = 0x6574656C6544;
  v334._object = (void *)0xE600000000000000;
  v335.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v335.value._object = (void *)0xEB00000000656C62;
  v336._countAndFlagsBits = 0;
  v336._object = (void *)0xE000000000000000;
  Swift::String v337 = NSLocalizedString(_:tableName:bundle:value:comment:)(v334, v335, v333, v336, v454);
  uint64_t v338 = (uint64_t)v373;
  static ButtonRole.destructive.getter();
  uint64_t v339 = type metadata accessor for ButtonRole();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v339 - 8) + 56))(v338, 0, 1, v339);
  outlined init with copy of MiniObjectButtons(v151, (uint64_t)v423);
  uint64_t v340 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)v423, v340 + 16);
  Swift::String v436 = v337;
  uint64_t v341 = outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v338, v372, &demangling cache variable for type metadata for ButtonRole?);
  MEMORY[0x270FA5388](v341);
  *(&v367 - 4) = (uint64_t)&v436;
  *(&v367 - 3) = 0x6873617274;
  v454._object = (void *)0xE500000000000000;
  v342 = v408;
  Button.init(role:action:label:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v338, &demangling cache variable for type metadata for ButtonRole?);
  swift_bridgeObjectRelease();
  uint64_t v343 = v417;
  uint64_t v344 = (uint64_t)v342;
  (*(void (**)(char *, char *, uint64_t))(v417 + 32))(v414, v342, v257);
  uint64_t v345 = (uint64_t)v391;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v390, (uint64_t)v391, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
  v423[0] = v345;
  v346 = *(void (**)(uint64_t, char *, uint64_t))(v343 + 16);
  v346(v344, v397, v257);
  v423[1] = v344;
  uint64_t v347 = (uint64_t)v380;
  v346((uint64_t)v380, v398, v257);
  v423[2] = v347;
  v348 = v381;
  v346((uint64_t)v381, v399, v257);
  v424 = v348;
  v349 = v382;
  v346((uint64_t)v382, v400, v257);
  unint64_t v425 = (unint64_t)v349;
  uint64_t v350 = v384;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v402, v384, &demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?);
  uint64_t v426 = v350;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v403, v258, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  uint64_t v427 = v258;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v405, v249, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  uint64_t v428 = v249;
  uint64_t v351 = v411;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v413, v411, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  uint64_t v429 = v351;
  uint64_t v352 = (uint64_t)v395;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v406, (uint64_t)v395, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  uint64_t v430 = v352;
  uint64_t v353 = v393;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v404, v393, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  uint64_t v431 = v353;
  uint64_t v354 = v385;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v407, v385, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  uint64_t v432 = v354;
  uint64_t v355 = v383;
  uint64_t v356 = (uint64_t)v394;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v383, (uint64_t)v394, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
  uint64_t v433 = v356;
  uint64_t v357 = v415;
  v358 = v409;
  v359 = v419;
  uint64_t v360 = v416;
  (*(void (**)(char *, char *, uint64_t))(v415 + 16))(v409, v419, v416);
  v434 = v358;
  v361 = v379;
  v362 = v414;
  v346((uint64_t)v379, v414, v257);
  v435 = v361;
  specialized static ViewBuilder.buildBlock<each A>(_:)(v423, v374);
  v363 = *(void (**)(char *, uint64_t))(v343 + 8);
  v363(v362, v257);
  v364 = *(void (**)(char *, uint64_t))(v357 + 8);
  v364(v359, v360);
  outlined destroy of StocksKitCurrencyCache.Provider?(v355, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v407, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v404, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v406, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v413, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v405, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v403, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v402, &demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?);
  v363(v400, v257);
  v363(v399, v257);
  v363(v398, v257);
  v363(v397, v257);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v390, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
  v363(v379, v257);
  v364(v409, v360);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v394, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v385, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v393, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v395, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v411, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v410, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v392, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v384, &demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?);
  v363(v382, v257);
  v363((char *)v381, v257);
  v363(v380, v257);
  v363(v408, v257);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v391, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
}

uint64_t closure #1 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 168))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #3 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 24))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #4 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #6 in closure #4 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v57 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v51 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v56 = (char *)&v46 - v5;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>);
  uint64_t v54 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v55 = (char *)&v46 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v46 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v17 = v16;
  char v19 = v18;
  uint64_t v21 = v20;
  outlined init with copy of MiniObjectButtons(a1, (uint64_t)v70);
  uint64_t v22 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)v70, v22 + 16);
  uint64_t v64 = v15;
  uint64_t v65 = v17;
  char v66 = v19 & 1;
  uint64_t v67 = v21;
  unint64_t v68 = 0xD000000000000010;
  unint64_t v69 = 0x800000020C8518B0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Label<Text, Image>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, &demangling cache variable for type metadata for Label<Text, Image>);
  uint64_t v48 = v14;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v25 = v24;
  LOBYTE(v17) = v26;
  uint64_t v28 = v27;
  outlined init with copy of MiniObjectButtons(a1, (uint64_t)v70);
  uint64_t v29 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)v70, v29 + 16);
  uint64_t v58 = v23;
  uint64_t v59 = v25;
  char v60 = v17 & 1;
  uint64_t v61 = v28;
  uint64_t v62 = 0x6C69662E6B636F6CLL;
  unint64_t v63 = 0xE90000000000006CLL;
  uint64_t v30 = v11;
  uint64_t v47 = v11;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LocalizedStringKey.init(stringLiteral:)();
  outlined init with copy of MiniObjectButtons(a1, (uint64_t)v70);
  uint64_t v31 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)v70, v31 + 16);
  uint64_t v32 = v56;
  Button<>.init(_:action:)();
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  uint64_t v34 = v55;
  uint64_t v35 = v50;
  v33(v55, v14, v50);
  uint64_t v36 = v49;
  v33(v49, v30, v35);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  uint64_t v38 = v51;
  uint64_t v39 = v32;
  uint64_t v40 = v52;
  v37(v51, v39, v52);
  uint64_t v41 = v53;
  v33(v53, v34, v35);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>));
  v33(&v41[*(int *)(v42 + 48)], v36, v35);
  v37(&v41[*(int *)(v42 + 64)], v38, v40);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v57 + 8);
  v43(v56, v40);
  uint64_t v44 = *(void (**)(char *, uint64_t))(v54 + 8);
  v44(v47, v35);
  v44(v48, v35);
  v43(v38, v40);
  v44(v36, v35);
  return ((uint64_t (*)(char *, uint64_t))v44)(v55, v35);
}

uint64_t closure #1 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 104))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 112))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #3 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 120))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #7 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 56))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #8 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #9 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 80))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #10 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 88))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #12 in closure #4 in MiniObjectButtons.body.getter()
{
  return Label.init(title:icon:)();
}

uint64_t closure #1 in closure #12 in closure #4 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v9._object = (void *)0x800000020C851920;
  v2._countAndFlagsBits = 0x5320657461657243;
  v2._object = (void *)0xEE0072656B636974;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0xD00000000000002FLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v9);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7 & 1;
  *(void *)(a1 + 24) = v8;
  return result;
}

uint64_t closure #2 in closure #12 in closure #4 in MiniObjectButtons.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Image.init(_internalSystemName:)();
  *a1 = result;
  return result;
}

uint64_t closure #13 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t v0 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  Swift::String_optional v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = MEMORY[0x210550400](result + 32);
    uint64_t v7 = *(void *)(v5 + 40);
    uint64_t result = swift_release();
    if (v6)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F3C1E8], v0);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 96))(v3, ObjectType, v7);
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
  }
  return result;
}

void closure #11 in closure #4 in MiniObjectButtons.body.getter(uint64_t a1, SEL *a2)
{
  Swift::String_optional v3 = (void *)MEMORY[0x210550400](*(void *)(a1 + 40) + 16);
  if (v3)
  {
    Swift::String v4 = v3;
    id v5 = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x320))();

    if (v5)
    {
      objc_msgSend(v5, *a2, 0);
    }
  }
}

void closure #14 in closure #4 in MiniObjectButtons.body.getter(uint64_t a1, SEL *a2)
{
  Swift::String_optional v3 = (void *)MEMORY[0x210550400](*(void *)(a1 + 40) + 16);
  if (v3)
  {
    Swift::String v4 = v3;
    id v5 = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x320))();

    [v5 *a2];
  }
}

uint64_t closure #1 in closure #3 in MiniObjectButtons.body.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x210550400](result + 32);
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 48))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #5 in MiniObjectButtons.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v2 - 8);
  Swift::String v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Image.init(systemName:)();
  if (one-time initialization token for buttonFontSize != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  uint64_t v7 = static Font.system(size:weight:design:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for Font.Design?);
  uint64_t result = swift_getKeyPath();
  *a1 = v5;
  a1[1] = result;
  a1[2] = v7;
  return result;
}

uint64_t outlined init with copy of MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  swift_weakTakeInit();
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  return a2;
}

uint64_t sub_20C39422C()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in miniButton(systemName:_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in miniButton(systemName:_:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #3 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #3 in MiniObjectButtons.body.getter(v1 + 16, a1);
}

uint64_t partial apply for closure #4 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #4 in MiniObjectButtons.body.getter(*(void *)(v1 + 16), a1);
}

uint64_t outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in MiniObjectButtons.body.getter(v1 + 16, a1);
}

uint64_t partial apply for closure #1 in closure #1 in MiniObjectButtons.body.getter()
{
  return closure #1 in closure #1 in MiniObjectButtons.body.getter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #3 in closure #1 in MiniObjectButtons.body.getter(v1 + 16, a1);
}

uint64_t outlined release of ModifiedContent<GraphableExpressionsView, _FlexFrameLayout>(uint64_t a1)
{
  return a1;
}

uint64_t closure #2 in Menu<>.init(_:systemImage:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MEMORY[0x270F04760](a1, a2, a3, a4, a5, a6);
}

uint64_t partial apply for closure #2 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #2 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t specialized closure #1 in Button<>.init<A>(_:systemImage:role:action:)()
{
  return Label<>.init<A>(_:systemImage:)();
}

uint64_t partial apply for closure #3 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #3 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #4 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #4 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #5 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #2 in MiniObjectButtons.body.getter();
}

unint64_t lazy protocol witness table accessor for type FeedbackFeatures and conformance FeedbackFeatures()
{
  unint64_t result = lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures;
  if (!lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures;
  if (!lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures);
  }
  return result;
}

uint64_t outlined destroy of MiniObjectButtons(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for specialized closure #1 in Button<>.init<A>(_:systemImage:role:action:)()
{
  return specialized closure #1 in Button<>.init<A>(_:systemImage:role:action:)();
}

void partial apply for closure #19 in closure #4 in MiniObjectButtons.body.getter()
{
  closure #14 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_snapToShapeSelection);
}

void partial apply for closure #18 in closure #4 in MiniObjectButtons.body.getter()
{
  closure #14 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_straightenSelection);
}

void partial apply for closure #17 in closure #4 in MiniObjectButtons.body.getter()
{
  closure #14 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_translateSelection);
}

void partial apply for closure #16 in closure #4 in MiniObjectButtons.body.getter()
{
  closure #11 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_insertSpace_);
}

void partial apply for closure #15 in closure #4 in MiniObjectButtons.body.getter()
{
  closure #14 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_copyTranscriptionOfSelection);
}

void partial apply for closure #14 in closure #4 in MiniObjectButtons.body.getter()
{
  closure #14 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_refineSelection);
}

uint64_t partial apply for closure #13 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #13 in closure #4 in MiniObjectButtons.body.getter();
}

void partial apply for closure #11 in closure #4 in MiniObjectButtons.body.getter()
{
  closure #11 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_createSticker_);
}

uint64_t partial apply for closure #10 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #10 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #9 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #9 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #8 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #8 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #7 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #7 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #6 in closure #4 in MiniObjectButtons.body.getter@<X0>(char *a1@<X8>)
{
  return closure #6 in closure #4 in MiniObjectButtons.body.getter(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for specialized closure #1 in Menu<>.init(_:systemImage:content:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in Button<>.init(_:systemImage:action:)()
{
  return closure #2 in Menu<>.init(_:systemImage:content:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t partial apply for closure #1 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #1 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #1 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #1 in closure #6 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #2 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #2 in closure #6 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #3 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #3 in closure #6 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t objectdestroyTm_1()
{
  swift_release();
  swift_release();
  swift_release();
  swift_weakDestroy();
  swift_release();
  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for closure #1 in closure #3 in MiniObjectButtons.body.getter()
{
  return closure #1 in closure #3 in MiniObjectButtons.body.getter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C394A88()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>)>);
}

void one-time initialization function for inputViewsForwardingScrollEvents(uint64_t a1)
{
}

void one-time initialization function for inputViewsConsumingScrollEvents(uint64_t a1)
{
}

void one-time initialization function for inputViewsForwardingScrollEvents(uint64_t a1, void *a2)
{
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    uint64_t v3 = MEMORY[0x263F8EE88];
  }
  *a2 = v3;
}

void closure #1 in variable initialization expression of static ScrollWheelEventSwizzler.swizzleScrollWheel()
{
  v7[4] = closure #1 in closure #1 in variable initialization expression of static ScrollWheelEventSwizzler.swizzleScrollWheel;
  v7[5] = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject & Responder, @guaranteed Event) -> ();
  v7[3] = &block_descriptor_12_0;
  uint64_t v0 = _Block_copy(v7);
  uint64_t v1 = imp_implementationWithBlock(v0);
  uint64_t v2 = (NSString *)MEMORY[0x21054D080](0x75706E49534E4955, 0xED00007765695674);
  uint64_t v3 = NSClassFromString(v2);

  if (v3)
  {
    Method InstanceMethod = class_getInstanceMethod(v3, sel_scrollWheel_);
    if (InstanceMethod)
    {
      uint64_t v5 = InstanceMethod;
      if (class_addMethod(v3, sel_swizzled_scrollWheel_, v1, "v@:@"))
      {
        uint64_t v6 = class_getInstanceMethod(v3, sel_swizzled_scrollWheel_);
        if (v6) {
          method_exchangeImplementations(v5, v6);
        }
      }
    }
  }
  _Block_release(v0);
}

void closure #1 in closure #1 in variable initialization expression of static ScrollWheelEventSwizzler.swizzleScrollWheel(void *a1, id a2)
{
  objc_msgSend(a2, sel_scrollingDeltaY);
  double v5 = fabs(v4);
  objc_msgSend(a2, sel_scrollingDeltaX);
  double v7 = fabs(v6);
  if (objc_msgSend(a2, sel_phase) != (id)1 && objc_msgSend(a2, sel_momentumPhase) != (id)1) {
    goto LABEL_8;
  }
  if (v7 >= v5)
  {
    if (one-time initialization token for inputViewsConsumingScrollEvents == -1) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
  if (one-time initialization token for inputViewsForwardingScrollEvents != -1) {
LABEL_27:
  }
    swift_once();
LABEL_7:
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(v19, a1);
  swift_endAccess();

  if (!objc_msgSend(a2, sel_phase) && v7 < v5) {
    goto LABEL_17;
  }
LABEL_8:
  if (one-time initialization token for inputViewsForwardingScrollEvents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static ScrollWheelEventSwizzler.inputViewsForwardingScrollEvents;
  id v9 = a1;
  swift_bridgeObjectRetain();
  char v10 = specialized Set.contains(_:)(v9, v8);

  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    goto LABEL_16;
  }
  if (one-time initialization token for inputViewsConsumingScrollEvents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = static ScrollWheelEventSwizzler.inputViewsConsumingScrollEvents;
  id v12 = v9;
  swift_bridgeObjectRetain();
  char v13 = specialized Set.contains(_:)(v12, v11);

  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_16:
    objc_msgSend(v9, sel_swizzled_scrollWheel_, a2);
  }
  else
  {
LABEL_17:
    id v14 = objc_msgSend(a1, sel_nextResponder);
    if (v14)
    {
      objc_msgSend(v14, sel_scrollWheel_, a2);
      swift_unknownObjectRelease();
    }
  }
  if (objc_msgSend(a2, sel_phase) == (id)8 || objc_msgSend(a2, sel_momentumPhase) == (id)8)
  {
    if (one-time initialization token for inputViewsForwardingScrollEvents != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v15 = a1;
    uint64_t v16 = (void *)specialized Set._Variant.remove(_:)(v15);
    swift_endAccess();

    if (one-time initialization token for inputViewsConsumingScrollEvents != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v17 = v15;
    char v18 = (void *)specialized Set._Variant.remove(_:)(v17);
    swift_endAccess();
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSObject & Responder, @guaranteed Event) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  double v5 = *(void (**)(id, uint64_t))(a1 + 32);
  swift_retain();
  id v6 = a2;
  swift_unknownObjectRetain();
  v5(v6, a3);
  swift_release();
  swift_unknownObjectRelease();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScrollWheelEventSwizzler.State(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t one-time initialization function for shared()
{
  type metadata accessor for ScrollWheelEventSwizzler();
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<ScrollWheelEventSwizzler.State, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 0;
  *(void *)(v0 + 16) = result;
  static ScrollWheelEventSwizzler.shared = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for SignatureManager();
  uint64_t result = swift_initStaticObject();
  static SignatureManager.shared = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for FeedbackManager();
  uint64_t result = swift_initStaticObject();
  static FeedbackManager.shared = result;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ThumbnailRenderer();
  uint64_t v0 = swift_allocObject();
  uint64_t result = ThumbnailRenderer.init()();
  static ThumbnailRenderer.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalculateResultAttributionHandler();
  inited = swift_initStaticObject();
  double v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  type metadata accessor for MainActor();
  double v5 = static MainActor.shared.getter();
  id v6 = swift_allocObject();
  double v7 = MEMORY[0x263F8F500];
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v7;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSb_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in CalculateResultAttributionHandler.init(), v6);
  uint64_t result = swift_release();
  static CalculateResultAttributionHandler.shared = inited;
  return result;
}

void closure #1 in ScrollWheelEventSwizzler.enableScrollEventForwardingIfNecessary(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*a1)
  {
    *(void *)v11.val = a2;
    *(void *)&v11.val[2] = a3;
    *(void *)&v11.val[4] = a4;
    *(void *)&v11.val[6] = a5;
    SecTaskRef v6 = SecTaskCreateWithAuditToken(0, &v11);
    if (v6)
    {
      double v7 = v6;
      uint64_t v8 = (__CFString *)MEMORY[0x21054D080](0xD000000000000038, 0x800000020C8519B0);
      CFTypeRef v9 = SecTaskCopyValueForEntitlement(v7, v8, 0);

      if (v9)
      {
        if (CFEqual(v9, (CFTypeRef)*MEMORY[0x263EFFB40]))
        {
          if (one-time initialization token for swizzleScrollWheel != -1) {
            swift_once();
          }
          if (one-time initialization token for swizzle_PDFScrollView_centerAlign != -1) {
            swift_once();
          }
          swift_unknownObjectRelease();

          char v10 = 1;
          goto LABEL_13;
        }

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
    char v10 = 2;
LABEL_13:
    *a1 = v10;
  }
}

uint64_t ScrollWheelEventSwizzler.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScrollWheelEventSwizzler()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ScrollWheelEventSwizzler.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ScrollWheelEventSwizzler.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C395444);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollWheelEventSwizzler.State()
{
  return &type metadata for ScrollWheelEventSwizzler.State;
}

unint64_t lazy protocol witness table accessor for type ScrollWheelEventSwizzler.State and conformance ScrollWheelEventSwizzler.State()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollWheelEventSwizzler.State and conformance ScrollWheelEventSwizzler.State;
  if (!lazy protocol witness table cache variable for type ScrollWheelEventSwizzler.State and conformance ScrollWheelEventSwizzler.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollWheelEventSwizzler.State and conformance ScrollWheelEventSwizzler.State);
  }
  return result;
}

void closure #1 in variable initialization expression of swizzle_PDFScrollView_centerAlign()
{
  uint64_t v0 = (NSString *)MEMORY[0x21054D080](0x6C6F726353464450, 0xED0000776569566CLL);
  uint64_t v1 = NSClassFromString(v0);

  if (v1)
  {
    int v2 = (const char *)Selector.init(_:)();
    Method InstanceMethod = class_getInstanceMethod(v1, v2);
    if (InstanceMethod)
    {
      unsigned int v4 = InstanceMethod;
      IMP Implementation = method_getImplementation(InstanceMethod);
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = Implementation;
      v9[4] = partial apply for closure #1 in closure #1 in variable initialization expression of swizzle_PDFScrollView_centerAlign;
      v9[5] = v6;
      v9[0] = MEMORY[0x263EF8330];
      v9[1] = 1107296256;
      v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIScrollView, @unowned Selector) -> ();
      v9[3] = &block_descriptor_8;
      BOOL v7 = _Block_copy(v9);
      swift_release();
      int v8 = imp_implementationWithBlock(v7);
      method_setImplementation(v4, v8);
      _Block_release(v7);
    }
  }
}

void closure #1 in closure #1 in variable initialization expression of swizzle_PDFScrollView_centerAlign(void *a1, uint64_t a2, void (*a3)(void))
{
  a3();
  id v4 = a1;
  id v5 = objc_msgSend(v4, sel_superview);
  if (!v5)
  {
    id v26 = v4;
LABEL_7:
    int v8 = v26;
    goto LABEL_15;
  }
  id v6 = v5;
  type metadata accessor for PaperDocumentView();
  id v7 = v4;
  while (1)
  {
    id v25 = v7;
    id v26 = v6;
    if (swift_dynamicCastClass()) {
      break;
    }

    id v6 = objc_msgSend(v6, sel_superview);
    id v7 = v26;
    if (!v6) {
      goto LABEL_7;
    }
  }
  id v9 = v6;
  id v10 = objc_msgSend(v4, sel_delegate);
  if (!v10)
  {
LABEL_14:

    int v8 = v25;
LABEL_15:

    return;
  }
  audit_token_t v11 = v10;
  if (objc_msgSend(v10, sel_respondsToSelector_, sel_viewForZoomingInScrollView_))
  {
    id v12 = objc_msgSend(v11, sel_viewForZoomingInScrollView_, v4);
    swift_unknownObjectRelease();
    if (v12)
    {
      objc_msgSend(v4, sel_contentSize);
      double v14 = v13;
      objc_msgSend(v4, sel_bounds);
      double v16 = v15;
      double v18 = v17;
      double v20 = v19;
      double v22 = v21;
      objc_msgSend(v4, sel_adjustedContentInset);
      v28.origin.x = UIEdgeInsetsInsetRect(v16, v18, v20, v22, v23, v24);
      if (v14 < CGRectGetWidth(v28))
      {
        objc_msgSend(v12, sel_center);
        objc_msgSend(v12, sel_setCenter_, v14 * 0.5);
      }
    }
    goto LABEL_14;
  }

  swift_unknownObjectRelease();
}

uint64_t sub_20C39584C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in closure #1 in variable initialization expression of swizzle_PDFScrollView_centerAlign(void *a1, uint64_t a2)
{
  closure #1 in closure #1 in variable initialization expression of swizzle_PDFScrollView_centerAlign(a1, a2, *(void (**)(void))(v2 + 16));
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIScrollView, @unowned Selector) -> ()(uint64_t a1, void *a2)
{
  int v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t SignatureListViewController.__allocating_init(editable:_:)(char a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v4) = a1;
  id v5 = objc_msgSend(objc_allocWithZone(v3), sel_initWithNibName_bundle_, 0, 0);
  uint64_t v6 = one-time initialization token for paperKitBundle;
  id v7 = (char *)v5;
  if (v6 != -1) {
    goto LABEL_30;
  }
  while (1)
  {
    v56._object = (void *)0x800000020C851C80;
    v8._uint64_t countAndFlagsBits = 0x727574616E676953;
    v8._object = (void *)0xEA00000000007365;
    v9.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v9.value._object = (void *)0xEB00000000656C62;
    v10._uint64_t countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v56._uint64_t countAndFlagsBits = 0xD000000000000019;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v56)._countAndFlagsBits;
    id v12 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setTitle_, v12);

    id v13 = objc_msgSend(v7, sel_tableView);
    if (!v13)
    {
      swift_release();
      __break(1u);
LABEL_37:
      swift_release();
      __break(1u);
LABEL_38:
      swift_release();
      __break(1u);
LABEL_39:
      swift_release();
      __break(1u);
LABEL_40:
      swift_release();
      __break(1u);
LABEL_41:
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    double v14 = v13;
    type metadata accessor for SignatureTableViewCell();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignatureTableViewCell.Type);
    uint64_t v16 = String.init<A>(describing:)();
    double v17 = (void *)MEMORY[0x21054D080](v16);
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_registerClass_forCellReuseIdentifier_, ObjCClassFromMetadata, v17);

    id v18 = objc_msgSend(v7, sel_tableView);
    if (!v18) {
      goto LABEL_37;
    }
    double v19 = v18;
    type metadata accessor for SignatureAndDescriptionTableViewCell();
    uint64_t v20 = swift_getObjCClassFromMetadata();
    uint64_t v21 = String.init<A>(describing:)();
    double v22 = (void *)MEMORY[0x21054D080](v21);
    swift_bridgeObjectRelease();
    objc_msgSend(v19, sel_registerClass_forCellReuseIdentifier_, v20, v22);

    id v23 = objc_msgSend(v7, sel_tableView);
    if (!v23) {
      goto LABEL_38;
    }
    double v24 = v23;
    objc_msgSend(v23, sel_setEditing_, v4 & 1);

    id v25 = objc_msgSend(v7, sel_tableView);
    if (!v25) {
      goto LABEL_39;
    }
    id v26 = v25;
    objc_msgSend(v25, sel_setAlwaysBounceVertical_, (v4 & 1) == 0);

    id v27 = objc_msgSend(v7, sel_tableView);
    if (!v27) {
      goto LABEL_40;
    }
    CGRect v28 = v27;
    uint64_t v29 = self;
    uint64_t v30 = &selRef_systemBackgroundColor;
    if ((v4 & 1) == 0) {
      uint64_t v30 = &selRef_clearColor;
    }
    id v31 = [v29 *v30];
    objc_msgSend(v28, sel_setBackgroundColor_, v31);

    id v32 = objc_msgSend(v7, sel_tableView);
    if (!v32) {
      goto LABEL_41;
    }
    uint64_t v33 = v32;
    objc_msgSend(v32, sel_setRowHeight_, 86.0);

    type metadata accessor for SignatureManager();
    swift_initStaticObject();
    uint64_t v34 = SignatureManager.signatureItems.getter();
    uint64_t v35 = v34;
    uint64_t v36 = (v4 & 1) != 0 ? 4 : 3;
    if (v34 < 0 || (v34 & 0x4000000000000000) != 0) {
      break;
    }
    unint64_t v37 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v38 = v7;
    uint64_t v39 = v38;
    if (v37 >= v36) {
      uint64_t v40 = v36;
    }
    else {
      uint64_t v40 = v37;
    }
    objc_msgSend(v38, sel_setPreferredContentSize_, 0.0, (double)v40 * 86.0 + -1.0);

    uint64_t v4 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_26;
    }
LABEL_19:
    uint64_t v41 = 4;
    while (1)
    {
      uint64_t v42 = (v35 & 0xC000000000000001) != 0
          ? (char *)MEMORY[0x21054E050](v41 - 4, v35)
          : (char *)*(id *)(v35 + 8 * v41);
      uint64_t v43 = v42;
      uint64_t v44 = v41 - 3;
      if (__OFADD__(v41 - 4, 1)) {
        break;
      }
      uint64_t v45 = &v42[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
      uint64_t v46 = *(void *)&v42[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
      unint64_t v47 = *(void *)&v42[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription + 8];
      if (v47)
      {
        outlined copy of SignatureDescription(*(void *)v45, *((void *)v45 + 1));
        outlined consume of SignatureDescription(v46, v47);
        outlined consume of SignatureDescription(0, 0);
        swift_bridgeObjectRelease_n();

        char v48 = 1;
        goto LABEL_28;
      }
      outlined consume of SignatureDescription(*(void *)v45, 0);
      outlined consume of SignatureDescription(0, 0);

      ++v41;
      if (v44 == v4) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_30:
    swift_once();
  }
  uint64_t v51 = v7;
  swift_bridgeObjectRetain();
  uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v52 >= v36) {
    uint64_t v53 = v36;
  }
  else {
    uint64_t v53 = v52;
  }
  objc_msgSend(v51, sel_setPreferredContentSize_, 0.0, (double)v53 * 86.0 + -1.0);

  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (v4) {
    goto LABEL_19;
  }
LABEL_26:
  swift_bridgeObjectRelease_n();
  char v48 = 0;
LABEL_28:
  v7[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_showDescriptions] = v48;
  uint64_t v49 = &v7[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_completion];
  *(void *)uint64_t v49 = a2;
  *((void *)v49 + 1) = a3;

  swift_release();
  return (uint64_t)v7;
}

id SignatureListViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_rowHeight] = 0x4055800000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_maximumSelectRows] = 3;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_maximumEditRows] = 4;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_signatureRowHeight] = 0x4055800000000000;
  v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_showDescriptions] = 0;
  id v5 = &v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_completion];
  *id v5 = UnknownCanvasElementView.flags.modify;
  v5[1] = 0;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x21054D080]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for SignatureListViewController();
  id v7 = objc_msgSendSuper2(&v9, sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void SignatureListViewController.tableView(_:cellForRowAt:)(void *a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit27SignatureListViewController_showDescriptions) == 1) {
    type metadata accessor for SignatureAndDescriptionTableViewCell();
  }
  else {
    type metadata accessor for SignatureTableViewCell();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignatureTableViewCell.Type);
  uint64_t v3 = String.init<A>(describing:)();
  uint64_t v4 = (void *)MEMORY[0x21054D080](v3);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(a1, sel_dequeueReusableCellWithIdentifier_, v4);

  if (v5)
  {
    type metadata accessor for SignatureTableViewCell();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    __break(1u);
  }
}

void SignatureListViewController.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v20 = a1;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)SignatureLogger);
  objc_super v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    audit_token_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)audit_token_t v11 = 0;
    _os_log_impl(&dword_20C2D7000, v9, v10, "selected signature to insert", v11, 2u);
    MEMORY[0x210550270](v11, -1, -1);
  }

  id v12 = (void *)MEMORY[0x21054D080](0xD000000000000025, 0x800000020C851CE0);
  id v25 = specialized closure #1 in static SignatureAnalytics.inserted();
  uint64_t v26 = 0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v22 = 1107296256;
  id v23 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  double v24 = &block_descriptor_9;
  id v13 = _Block_copy(&aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v13);

  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, sel_deselectRowAtIndexPath_animated_, isa, 1);

  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v5);
  unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v16 + v15, (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  id v25 = partial apply for closure #1 in SignatureListViewController.tableView(_:didSelectRowAt:);
  uint64_t v26 = v16;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v22 = 1107296256;
  id v23 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  double v24 = &block_descriptor_8_0;
  double v17 = _Block_copy(&aBlock);
  id v18 = v3;
  swift_release();
  objc_msgSend(v18, sel_dismissViewControllerAnimated_completion_, 1, v17);
  _Block_release(v17);
}

uint64_t closure #1 in SignatureListViewController.tableView(_:didSelectRowAt:)(uint64_t a1)
{
  uint64_t v1 = *(void (**)(void *))(a1 + OBJC_IVAR____TtC8PaperKit27SignatureListViewController_completion);
  type metadata accessor for SignatureManager();
  swift_retain();
  swift_initStaticObject();
  unint64_t v2 = IndexPath.row.getter();
  uint64_t result = SignatureManager.signatureItems.getter();
  if ((result & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x21054E050](v2, result);
    goto LABEL_5;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  id v4 = *(id *)(result + 8 * v2 + 32);
LABEL_5:
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  v1(v5);

  return swift_release();
}

id SignatureListViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureListViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SignatureListViewController()
{
  return self;
}

uint64_t outlined copy of SignatureDescription(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of SignatureDescription(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t sub_20C396C4C()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in SignatureListViewController.tableView(_:didSelectRowAt:)()
{
  type metadata accessor for IndexPath();
  uint64_t v1 = *(void *)(v0 + 16);
  return closure #1 in SignatureListViewController.tableView(_:didSelectRowAt:)(v1);
}

void specialized SignatureListViewController.tableView(_:willDisplay:forRowAt:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for SignatureTableViewCell();
  uint64_t v5 = (char *)swift_dynamicCastClassUnconditional();
  type metadata accessor for SignatureManager();
  id v6 = a1;
  swift_initStaticObject();
  unint64_t v7 = SignatureManager.signatureItems.getter();
  unint64_t v8 = IndexPath.row.getter();
  if ((v7 & 0xC000000000000001) == 0)
  {
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v8 < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v9 = *(id *)(v7 + 8 * v8 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_22;
  }
  id v9 = (id)MEMORY[0x21054E050](v8, v7);
LABEL_5:
  uint64_t v10 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature;
  audit_token_t v11 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature];
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature] = v9;

  uint64_t v2 = *(void **)&v5[v10];
  if (!(v7 >> 62))
  {
    uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v13 = v2;
    id v14 = v6;
    if (v12) {
      goto LABEL_7;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    double v17 = v2;
    if (v2) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }
LABEL_22:
  id v21 = v2;
  swift_bridgeObjectRetain();
  id v22 = v6;
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_23;
  }
LABEL_7:
  unint64_t v15 = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
    id v16 = (id)MEMORY[0x21054E050](v15, v7);
    goto LABEL_13;
  }
  if ((v15 & 0x8000000000000000) != 0) {
    goto LABEL_32;
  }
  if (v15 >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_33:
    __break(1u);
    return;
  }
  id v16 = *(id *)(v7 + 8 * v15 + 32);
LABEL_13:
  double v17 = v16;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v17)
    {
LABEL_24:

      BOOL v20 = 1;
      goto LABEL_26;
    }
LABEL_25:
    BOOL v20 = 0;
    goto LABEL_26;
  }
  if (!v17)
  {
    double v17 = v2;
    goto LABEL_24;
  }
  type metadata accessor for SignatureItem();
  id v18 = v2;
  char v19 = static NSObject.== infix(_:_:)();

  BOOL v20 = (v19 & 1) == 0;
LABEL_26:
  objc_msgSend(v5, sel_setSeparatorStyle_, v20);

  id v23 = v6;
  unsigned int v24 = objc_msgSend(v3, sel_isEditing);
  id v25 = self;
  uint64_t v26 = &selRef_systemBackgroundColor;
  if (!v24) {
    uint64_t v26 = &selRef_clearColor;
  }
  id v27 = [v25 *v26];
  objc_msgSend(v5, sel_setBackgroundColor_, v27);
}

void specialized SignatureListViewController.tableView(_:commit:forRowAt:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 1)
  {
    v19[12] = v3;
    v19[13] = v4;
    type metadata accessor for SignatureManager();
    swift_initStaticObject();
    Swift::Int v7 = IndexPath.row.getter();
    if (SignatureManager.removeSignature(atIndex:)(v7))
    {
      if (one-time initialization token for SignatureLogger != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)SignatureLogger);
      id v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v9, v10))
      {
        audit_token_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)audit_token_t v11 = 0;
        _os_log_impl(&dword_20C2D7000, v9, v10, "deleted signature", v11, 2u);
        MEMORY[0x210550270](v11, -1, -1);
      }

      uint64_t v12 = (void *)MEMORY[0x21054D080](0xD000000000000024, 0x800000020C851D10);
      v19[4] = specialized closure #1 in static SignatureAnalytics.inserted();
      v19[5] = 0;
      v19[0] = MEMORY[0x263EF8330];
      v19[1] = 1107296256;
      v19[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
      id v19[3] = &block_descriptor_11;
      id v13 = _Block_copy(v19);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v13);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
      uint64_t v14 = type metadata accessor for IndexPath();
      uint64_t v15 = *(void *)(v14 - 8);
      unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_20C832C20;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v17 + v16, a3, v14);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_deleteRowsAtIndexPaths_withRowAnimation_, isa, 100);
    }
  }
}

uint64_t static ImageFileSync.ImageFileSyncError.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ImageFileSync.ImageFileSyncError(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t ImageFileSync.init(encryptPrivateMetadata:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return result;
}

uint64_t ImageFileSync.ImageWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t key path getter for ImageFileSync.customCanvasSizeForImageSize : ImageFileSync@<X0>(uint64_t a1@<X0>, void (**a2)(double *a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    id v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize) -> (@unowned CGSize);
  }
  else
  {
    id v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (void (*)(double *@<X0>, uint64_t@<X8>))v5;
  return outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v3);
}

uint64_t key path setter for ImageFileSync.customCanvasSizeForImageSize : ImageFileSync(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    id v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize) -> (@out CGSize);
  }
  else
  {
    id v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v7);
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v5;
  return result;
}

uint64_t ImageFileSync.customCanvasSizeForImageSize.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v1);
  return v1;
}

uint64_t ImageFileSync.customCanvasSizeForImageSize.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(*(void *)(v2 + 8));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*ImageFileSync.customCanvasSizeForImageSize.modify())()
{
  return UnknownCanvasElementView.flags.modify;
}

void ImageFileSync.read(from:context:coordinator:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v4);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  swift_storeEnumTagMultiPayload();
  Capsule<>.init(_:)((uint64_t)v6, a2);
}

void ImageFileSync.read(from:context:coordinator:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v8 = a1;
  v8[1] = a2;
  swift_storeEnumTagMultiPayload();
  outlined copy of Data._Representation(a1, a2);
  Capsule<>.init(_:)((uint64_t)v8, a3);
}

uint64_t ImageFileSync.write(_:to:context:coordinator:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ImageFileSync.write(_:to:context:coordinator:)(a1, a2, a3);
}

uint64_t ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(a1, a2, a3, a5, a6);
}

uint64_t closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 104) = a7;
  *(void *)(v8 + 112) = a8;
  *(void *)(v8 + 96) = a6;
  *(double *)(v8 + 80) = a1;
  *(double *)(v8 + 88) = a2;
  type metadata accessor for Image();
  *(void *)(v8 + 120) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:), 0, 0);
}

uint64_t closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  type metadata accessor for ImageRenderer();
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = 0x3FF0000000000000;
  uint64_t v4 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v3);
  *(void *)(v0 + 128) = v4;
  swift_beginAccess();
  *(unsigned char *)(v4 + 72) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  lazy protocol witness table accessor for type Image and conformance Image(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(unsigned char *)(v0 + 48) = 1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                     + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 104);
  return v9(v6, v7, v0 + 16, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[12];
  uint64_t v2 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v0[18];

  OS_dispatch_semaphore.signal()();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  outlined destroy of CRAssetOrData(v2, (uint64_t (*)(void))type metadata accessor for Image);
  return MEMORY[0x270FA2498](closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:), 0, 0);
}

void protocol witness for CRCustomFileSync.read(from:context:coordinator:) in conformance ImageFileSync(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  swift_storeEnumTagMultiPayload();
  Capsule<>.init(_:)((uint64_t)v6, a2);
}

uint64_t protocol witness for CRCustomFileSync.write(_:to:context:coordinator:) in conformance ImageFileSync(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ImageFileSync.write(_:to:context:coordinator:)(a1, a2, a3);
}

uint64_t specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = v5;
  int v136 = a5;
  uint64_t v135 = a4;
  uint64_t v131 = a3;
  uint64_t v147 = a2;
  uint64_t v155 = *MEMORY[0x263EF8340];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v130 = (char *)v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for CRCodableVersion();
  uint64_t v133 = *(void *)(v134 - 8);
  MEMORY[0x270FA5388](v134);
  Swift::String_optional v132 = (char *)v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v145 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v142 = v12;
  char v143 = (char *)v126 - (((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v144 = ((char *)v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for UUID();
  Class isa = *(Class *)(v15 - 8);
  uint64_t v141 = (void (*)(char *, uint64_t))v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v139 = (char *)v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v151 = v17;
  uint64_t v152 = v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v138 = (char *)v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v150 = (char *)v126 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v149 = (char *)v126 - v23;
  uint64_t v24 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (uint64_t *)((char *)v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = type metadata accessor for CRAssetOrData();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (uint64_t *)((char *)v126 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v33 = (char *)v126 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v129 = *v6;
  swift_getKeyPath();
  uint64_t v34 = lazy protocol witness table accessor for type Image and conformance Image(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  uint64_t v146 = v11;
  uint64_t v35 = (void *)v34;
  unint64_t v148 = a1;
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v33, 1, v27) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, &demangling cache variable for type metadata for CRAssetOrData?);
LABEL_7:
    uint64_t v52 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type Image and conformance Image((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, MEMORY[0x263F32D80]);
    swift_allocError();
    strcpy(v53, "No image data.");
    v53[15] = -18;
    (*(void (**)(char *, void, uint64_t))(*(void *)(v52 - 8) + 104))(v53, *MEMORY[0x263F32D70], v52);
    return swift_willThrow();
  }
  outlined init with copy of CRAssetOrData((uint64_t)v33, (uint64_t)v30);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of CRAssetOrData((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    outlined destroy of CRAssetOrData((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    goto LABEL_7;
  }
  v126[1] = v35;
  uint64_t v36 = *v30;
  unint64_t v37 = v30[1];
  uint64_t v39 = v30[2];
  unint64_t v38 = v30[3];
  outlined destroy of CRAssetOrData((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  outlined copy of Data._Representation(v39, v38);
  outlined consume of Data._Representation(v36, v37);
  outlined consume of Data._Representation(v39, v38);
  *uint64_t v26 = v39;
  v26[1] = v38;
  swift_storeEnumTagMultiPayload();
  uint64_t v127 = v39;
  unint64_t v128 = v38;
  outlined copy of Data._Representation(v39, v38);
  double v40 = specialized static ImageLayout.imageSize(from:)((uint64_t)v26);
  uint64_t v42 = v41;
  outlined destroy of CRAssetOrData((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  uint64_t v43 = self;
  id v44 = objc_msgSend(v43, sel_defaultManager);
  URL._bridgeToObjectiveC()(v45);
  unint64_t v47 = v46;
  id v153 = 0;
  id v48 = objc_msgSend(v44, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v46, 1, &v153);

  id v49 = v153;
  v126[0] = v43;
  if (v48)
  {
    uint64_t v50 = v149;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v51 = v49;
  }
  else
  {
    id v55 = v153;
    Swift::String v56 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v57 = objc_msgSend(v43, sel_defaultManager);
    id v58 = objc_msgSend(v57, sel_temporaryDirectory);

    uint64_t v50 = v149;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v137 = 0;
  }
  uint64_t v59 = v151;
  uint64_t v60 = v152;
  uint64_t v61 = v146;
  uint64_t v62 = v138;
  (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v138, v50, v151);
  unint64_t v63 = v139;
  UUID.init()();
  UUID.uuidString.getter();
  (*((void (**)(char *, void))isa + 1))(v63, v141);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v141 = *(void (**)(char *, uint64_t))(v60 + 8);
  uint64_t v152 = v60 + 8;
  v141(v62, v59);
  dispatch_semaphore_t v64 = dispatch_semaphore_create(0);
  type metadata accessor for ImageFileSync.ImageWrapper();
  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = 0;
  char v66 = v144;
  static TaskPriority.userInitiated.getter();
  uint64_t v67 = type metadata accessor for TaskPriority();
  (*(void (**)(NSObject *, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v66, 0, 1, v67);
  uint64_t v68 = v145;
  unint64_t v69 = v143;
  (*(void (**)(char *, unint64_t, uint64_t))(v145 + 16))(v143, v148, v61);
  unint64_t v70 = (*(unsigned __int8 *)(v68 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
  unint64_t v71 = ((unint64_t)v142 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v72 = (double *)swift_allocObject();
  v72[2] = 0.0;
  v72[3] = 0.0;
  v72[4] = v40;
  *((void *)v72 + 5) = v42;
  *((void *)v72 + 6) = v65;
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))((char *)v72 + v70, v69, v61);
  *(void *)((char *)v72 + v71) = v64;
  swift_retain();
  uint64_t v73 = v64;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v66, (uint64_t)&async function pointer to partial apply for closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:), (uint64_t)v72);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v66, &demangling cache variable for type metadata for TaskPriority?);
  OS_dispatch_semaphore.wait()();
  uint64_t v74 = *(void **)(v65 + 16);
  if (!v74 || (uint64_t v75 = (char *)objc_msgSend(v74, sel_CGImage)) == 0)
  {
    uint64_t v89 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type Image and conformance Image((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, MEMORY[0x263F32D80]);
    swift_allocError();
    *Swift::String v90 = 0xD000000000000019;
    v90[1] = 0x800000020C851DA0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v89 - 8) + 104))(v90, *MEMORY[0x263F32D70], v89);
    swift_willThrow();
    swift_release();

    outlined consume of Data._Representation(v127, v128);
    uint64_t v91 = v151;
    Swift::String v92 = (uint64_t (*)(char *, uint64_t))v141;
    v141(v150, v151);
    return v92(v149, v91);
  }
  uint64_t v77 = v75;
  uint64_t v78 = v150;
  URL._bridgeToObjectiveC()(v76);
  CFURLRef v80 = v79;
  if ((v136 & 1) == 0)
  {
    uint64_t v93 = UTType.identifier.getter();
    uint64_t v94 = (__CFString *)MEMORY[0x21054D080](v93);
    swift_bridgeObjectRelease();
    uint64_t v95 = CGImageDestinationCreateWithURL(v80, v94, 1uLL, 0);

    uint64_t v96 = v151;
    if (!v95)
    {
      id v153 = 0;
      unint64_t v154 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      id v153 = (id)0xD000000000000029;
      unint64_t v154 = 0x800000020C851DC0;
      lazy protocol witness table accessor for type Image and conformance Image((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      v101._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v101);
      swift_bridgeObjectRelease();
      id v102 = v153;
      unint64_t v103 = v154;
      lazy protocol witness table accessor for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError();
      swift_allocError();
      *uint64_t v104 = v102;
      v104[1] = v103;
      swift_willThrow();
      swift_release();

      goto LABEL_29;
    }
    CGImageDestinationAddImage(v95, (CGImageRef)v77, 0);
    if (!CGImageDestinationFinalize(v95))
    {
      lazy protocol witness table accessor for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError();
      swift_allocError();
      void *v97 = 0xD000000000000015;
      v97[1] = 0x800000020C851DF0;
      swift_willThrow();
      swift_release();

      goto LABEL_29;
    }
LABEL_27:

    id v119 = objc_msgSend(v126[0], sel_defaultManager);
    uint64_t v120 = (uint64_t)v130;
    uint64_t v121 = v137;
    NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)();
    if (!v121)
    {
      swift_release();

      outlined consume of Data._Representation(v127, v128);
      outlined destroy of StocksKitCurrencyCache.Provider?(v120, &demangling cache variable for type metadata for URL?);
      goto LABEL_30;
    }
    swift_release();

LABEL_29:
    outlined consume of Data._Representation(v127, v128);
LABEL_30:
    uint64_t v122 = (uint64_t (*)(char *, uint64_t))v141;
    v141(v78, v96);
    return v122(v149, v96);
  }
  CGDataConsumerRef v81 = CGDataConsumerCreateWithURL(v79);

  uint64_t v82 = v151;
  if (!v81)
  {
    uint64_t v98 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type Image and conformance Image((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, MEMORY[0x263F32D80]);
    swift_allocError();
    void *v99 = 0xD00000000000001FLL;
    v99[1] = 0x800000020C851E10;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v98 - 8) + 104))(v99, *MEMORY[0x263F32D70], v98);
    swift_willThrow();
    swift_release();

    outlined consume of Data._Representation(v127, v128);
    goto LABEL_20;
  }
  char v143 = (char *)v81;
  uint64_t v144 = v73;
  uint64_t v145 = v65;
  uint64_t v83 = v133;
  uint64_t v84 = v132;
  uint64_t v85 = v134;
  (*(void (**)(char *, void, uint64_t))(v133 + 104))(v132, *MEMORY[0x263F32EB8], v134);
  uint64_t v86 = v137;
  uint64_t v87 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
  if (v86)
  {
    swift_release();

    outlined consume of Data._Representation(v127, v128);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
LABEL_20:
    uint64_t v100 = (uint64_t (*)(char *, uint64_t))v141;
    v141(v78, v82);
    return v100(v149, v82);
  }
  uint64_t v137 = 0;
  uint64_t v105 = v87;
  unint64_t v106 = v88;
  (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
  id v142 = objc_msgSend(objc_allocWithZone((Class)PPKImageWriter), sel_init);
  v107.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v139 = v77;
  Class isa = v107.super.isa;
  uint64_t v108 = v77;
  uint64_t v109 = UTType.identifier.getter();
  Swift::String_optional v110 = (void *)MEMORY[0x21054D080](v109);
  swift_bridgeObjectRelease();
  v111.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  unint64_t v148 = v106;
  uint64_t v146 = v105;
  if (v154)
  {
    Swift::String v112 = (void *)MEMORY[0x21054D080](v153, v154);
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::String v112 = 0;
  }
  id v153 = 0;
  uint64_t v113 = v142;
  Class v114 = isa;
  uint64_t v115 = (uint64_t)v108;
  uint64_t v116 = v108;
  uint64_t v95 = (CGImageDestination *)v143;
  unsigned int v117 = -[PPKImageWriter writeUsingBaseImageData:annotationImage:asImageOfType:toConsumer:annotationMetadata:modifiedImageDescription:encryptPrivateMetadata:error:](v142, (uint64_t)isa, v115, (uint64_t)v110, (uint64_t)v143, (uint64_t)v111.super.isa, (uint64_t)v112, v129, (uint64_t)&v153);

  id v118 = v153;
  if (v117)
  {
    outlined consume of Data._Representation(v146, v148);
    uint64_t v96 = v151;
    uint64_t v78 = v150;
    uint64_t v73 = v144;
    uint64_t v77 = v139;
    goto LABEL_27;
  }
  uint64_t v123 = v118;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  outlined consume of Data._Representation(v146, v148);
  swift_release();

  outlined consume of Data._Representation(v127, v128);
  uint64_t v124 = v151;
  Swift::String_optional v125 = (uint64_t (*)(char *, uint64_t))v141;
  v141(v150, v151);
  return v125(v149, v124);
}

uint64_t specialized ImageFileSync.write(_:to:context:coordinator:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a3;
  unint64_t v34 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UTType();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v30 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v30 - v15;
  int v33 = *v3;
  uint64_t v17 = *((void *)v3 + 1);
  uint64_t v31 = *((void *)v3 + 2);
  uint64_t v32 = v17;
  static UTType.jpeg.getter();
  uint64_t v35 = a2;
  uint64_t v18 = URL.pathExtension.getter();
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (!v20)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  static UTType.image.getter();
  UTType.init(filenameExtension:conformingTo:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for UTType?);
LABEL_11:
    LOBYTE(v36) = v33;
    uint64_t v37 = v32;
    uint64_t v38 = v31;
    specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(v34, v35, v39, (uint64_t)v16, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  }
  v30[1] = v4;
  uint64_t v21 = v8;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v22(v13, v21, v9);
  CFArrayRef v23 = CGImageDestinationCopyTypeIdentifiers();
  uint64_t v36 = 0;
  uint64_t result = static Array._forceBridgeFromObjectiveC(_:result:)();
  uint64_t v25 = v36;
  if (v36)
  {

    uint64_t v26 = UTType.identifier.getter();
    char v28 = specialized Sequence<>.contains(_:)(v26, v27, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void (**)(char *, uint64_t))(v10 + 8);
    if (v28)
    {
      v29(v16, v9);
      v22(v16, v13, v9);
    }
    else
    {
      v29(v13, v9);
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for CRCustomFileSync.Model : CRDT in ImageFileSync()
{
  return lazy protocol witness table accessor for type Image and conformance Image(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
}

uint64_t destroy for ImageFileSync(uint64_t result)
{
  if (*(void *)(result + 8)) {
    return swift_release();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ImageFileSync(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  return a1;
}

uint64_t assignWithCopy for ImageFileSync(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *uint64_t v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ImageFileSync(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v7;
      return a1;
    }
LABEL_7:
    *uint64_t v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v6;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageFileSync(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageFileSync(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageFileSync()
{
  return &type metadata for ImageFileSync;
}

void *initializeBufferWithCopyOfBuffer for ImageFileSync.ImageFileSyncError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ImageFileSync.ImageFileSyncError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ImageFileSync.ImageFileSyncError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ImageFileSync.ImageFileSyncError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageFileSync.ImageFileSyncError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageFileSync.ImageFileSyncError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageFileSync.ImageFileSyncError()
{
  return &type metadata for ImageFileSync.ImageFileSyncError;
}

uint64_t type metadata accessor for ImageFileSync.ImageWrapper()
{
  return self;
}

uint64_t sub_20C399498()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

double partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize) -> (@out CGSize)(double a1, double a2)
{
  void (*v3)(double *__return_ptr, void *);
  double v5;
  void v6[2];

  uint64_t v3 = *(void (**)(double *__return_ptr, void *))(v2 + 16);
  *(double *)uint64_t v6 = a1;
  *(double *)&v6[1] = a2;
  v3(&v5, v6);
  return v5;
}

void partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize) -> (@unowned CGSize)(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = (*(double (**)(double, double))(v2 + 16))(*a1, a1[1]);
  *(void *)(a2 + 8) = v4;
}

uint64_t outlined init with copy of CRAssetOrData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRAssetOrData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C3995B0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *((void *)v1 + 2);
  uint64_t v7 = *((void *)v1 + 3);
  double v8 = v1[4];
  double v9 = v1[5];
  uint64_t v10 = *((void *)v1 + 6);
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(v8, v9, a1, v6, v7, v10, v11, v12);
}

uint64_t lazy protocol witness table accessor for type Image and conformance Image(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError;
  if (!lazy protocol witness table cache variable for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError);
  }
  return result;
}

uint64_t outlined destroy of CRAssetOrData(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t SignatureStyleEditingView.strokeWidthControls.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView____lazy_storage___strokeWidthControls;
  if (!*(void *)(v0 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView____lazy_storage___strokeWidthControls))
  {
    uint64_t v3 = v0;
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_isCompact) == 1)
    {
      unint64_t v4 = closure #1 in closure #1 in SignatureStyleEditingView.strokeWidthControls.getter(v0);
      uint64_t v2 = v4;
      if (!(v4 >> 62))
      {
        uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIControl & SignatureStrokeWidthWidget);
        if (!swift_dynamicCastMetatype())
        {
          uint64_t v6 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v6)
          {
            uint64_t v7 = v5 + 32;
            while (swift_dynamicCastObjCProtocolConditional())
            {
              v7 += 8;
              if (!--v6) {
                goto LABEL_13;
              }
            }
LABEL_21:
            swift_bridgeObjectRelease();
            uint64_t v2 = v5 | 1;
            goto LABEL_14;
          }
        }
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v8 = closure #2 in closure #1 in SignatureStyleEditingView.strokeWidthControls.getter(v0);
      uint64_t v2 = v8;
      if (!(v8 >> 62))
      {
        uint64_t v5 = v8 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIControl & SignatureStrokeWidthWidget);
        if (!swift_dynamicCastMetatype())
        {
          uint64_t v10 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v10)
          {
            uint64_t v11 = v5 + 32;
            while (swift_dynamicCastObjCProtocolConditional())
            {
              v11 += 8;
              if (!--v10) {
                goto LABEL_13;
              }
            }
            goto LABEL_21;
          }
        }
LABEL_13:
        swift_bridgeObjectRelease();
LABEL_14:
        *(void *)(v3 + v1) = v2;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIControl & SignatureStrokeWidthWidget);
    uint64_t v12 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v2 = v12;
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView____lazy_storage___strokeWidthControls);
LABEL_15:
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t closure #1 in closure #1 in SignatureStyleEditingView.strokeWidthControls.getter(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_20C8344C0;
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_strokeWidthUnit);
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_strokeWidthUnit + 8);
  uint64_t v5 = (objc_class *)type metadata accessor for CompactSignatureStrokeWidthControl();
  id v6 = objc_allocWithZone(v5);
  swift_bridgeObjectRetain();
  *(void *)(v2 + 32) = CompactSignatureStrokeWidthControl.init(width:unit:)(1, v3, v4);
  id v7 = objc_allocWithZone(v5);
  swift_bridgeObjectRetain();
  *(void *)(v2 + 40) = CompactSignatureStrokeWidthControl.init(width:unit:)(2, v3, v4);
  id v8 = objc_allocWithZone(v5);
  swift_bridgeObjectRetain();
  *(void *)(v2 + 48) = CompactSignatureStrokeWidthControl.init(width:unit:)(4, v3, v4);
  id v9 = objc_allocWithZone(v5);
  swift_bridgeObjectRetain();
  *(void *)(v2 + 56) = CompactSignatureStrokeWidthControl.init(width:unit:)(8, v3, v4);
  specialized Array._endMutation()();
  return v2;
}

uint64_t closure #2 in closure #1 in SignatureStyleEditingView.strokeWidthControls.getter(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  char v3 = *(unsigned char *)(a1 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_isHorizontal);
  *(_OWORD *)(v2 + 16) = xmmword_20C8344C0;
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_strokeWidthUnit);
  uint64_t v5 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_strokeWidthUnit + 8);
  id v6 = (objc_class *)type metadata accessor for SignatureStrokeWidthControl();
  id v7 = objc_allocWithZone(v6);
  swift_bridgeObjectRetain();
  *(void *)(v2 + 32) = SignatureStrokeWidthControl.init(isHorizontal:width:unit:)(v3, 1, v4, v5);
  id v8 = objc_allocWithZone(v6);
  swift_bridgeObjectRetain();
  *(void *)(v2 + 40) = SignatureStrokeWidthControl.init(isHorizontal:width:unit:)(v3, 2, v4, v5);
  id v9 = objc_allocWithZone(v6);
  swift_bridgeObjectRetain();
  *(void *)(v2 + 48) = SignatureStrokeWidthControl.init(isHorizontal:width:unit:)(v3, 4, v4, v5);
  id v10 = objc_allocWithZone(v6);
  swift_bridgeObjectRetain();
  *(void *)(v2 + 56) = SignatureStrokeWidthControl.init(isHorizontal:width:unit:)(v3, 8, v4, v5);
  specialized Array._endMutation()();
  return v2;
}

uint64_t type metadata accessor for SignatureStyleEditingView()
{
  return self;
}

uint64_t type metadata accessor for HorizontalSignatureStyleEditingViewLayout()
{
  return self;
}

uint64_t VerticalSignatureStyleEditingViewLayout.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VerticalSignatureStyleEditingViewLayout()
{
  return self;
}

uint64_t CompactSignatureStyleEditingViewLayout.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CompactSignatureStyleEditingViewLayout()
{
  return self;
}

void specialized SignatureStyleEditingView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_colorSwatch] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView____lazy_storage___strokeWidthControls] = 0;
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_strokeWidthUnit;
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v5._uint64_t countAndFlagsBits = 0xD000000000000039;
  v5._object = (void *)0x800000020C852030;
  v2._uint64_t countAndFlagsBits = 29808;
  v2._object = (void *)0xE200000000000000;
  v3.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  *(Swift::String *)&v0[v1] = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v5);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t GraphableExpression.identifier.getter()
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for GraphableExpression()
{
  uint64_t result = type metadata singleton initialization cache for GraphableExpression;
  if (!type metadata singleton initialization cache for GraphableExpression) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GraphableExpression.expression.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t GraphableExpression.graphableVariable.getter()
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t GraphableExpression.color.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for GraphableExpression.expression : GraphableExpression()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphableExpression.expression.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphableExpression.expression.modify(void *a1))()
{
  Swift::String v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphableExpression.$expression.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphableExpression.$expression : GraphableExpression(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  Swift::String v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t GraphableExpression.$expression.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*GraphableExpression.$expression.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t key path getter for GraphableExpression.identifier : GraphableExpression@<X0>(void *a1@<X8>)
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for GraphableExpression.identifier : GraphableExpression()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphableExpression.identifier.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphableExpression.identifier.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphableExpression.$identifier.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphableExpression.$identifier : GraphableExpression(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for GraphableExpression();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t GraphableExpression.$identifier.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for GraphableExpression();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*GraphableExpression.$identifier.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for GraphableExpression() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path getter for GraphableExpression.color : GraphableExpression@<X0>(void *a1@<X8>)
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GraphableExpression.color : GraphableExpression(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for GraphableExpression();
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphableExpression.color.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphableExpression.color.modify(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphableExpression.$color.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphableExpression.$color : GraphableExpression(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for GraphableExpression();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t GraphableExpression.$color.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for GraphableExpression();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*GraphableExpression.$color.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for GraphableExpression() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path getter for GraphableExpression.graphableVariable : GraphableExpression@<X0>(void *a1@<X8>)
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for GraphableExpression.graphableVariable : GraphableExpression()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphableExpression.graphableVariable.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphableExpression.graphableVariable.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphableExpression.$graphableVariable.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphableExpression.$graphableVariable : GraphableExpression(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for GraphableExpression();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t GraphableExpression.$graphableVariable.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for GraphableExpression();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*GraphableExpression.$graphableVariable.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for GraphableExpression() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t GraphableExpression.init()@<X0>(uint64_t a1@<X8>)
{
  return GraphableExpression.init(expression:identifier:graphableVariable:color:)(0xE000000000000000, a1);
}

uint64_t GraphableExpression.init(expression:identifier:color:)@<X0>(uint64_t a1@<X8>)
{
  return GraphableExpression.init(expression:identifier:graphableVariable:color:)(0xE000000000000000, a1);
}

uint64_t GraphableExpression.init(expression:identifier:graphableVariable:color:)@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  CRRegister.init(wrappedValue:)();
  uint64_t v3 = type metadata accessor for GraphableExpression();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color and conformance Color);
  CRRegister.init(wrappedValue:)();
  CRRegister.init(wrappedValue:)();
  *(void *)(a2 + *(int *)(v3 + 32)) = MEMORY[0x263F8EE80];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.setter();
  CRRegister.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t result = CRRegister.wrappedValue.setter();
  if (a1) {
    return CRRegister.wrappedValue.setter();
  }
  return result;
}

uint64_t GraphableExpression.additionalFields.getter()
{
  type metadata accessor for GraphableExpression();
  return swift_bridgeObjectRetain();
}

uint64_t GraphableExpression.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for GraphableExpression() + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*GraphableExpression.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static GraphableExpression.fields.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26ACB26E0;
  uint64_t v4 = qword_26ACB26E8;
  uint64_t v3 = unk_26ACB26F0;
  uint64_t v5 = qword_26ACB26F8;
  uint64_t v6 = qword_26ACB2700;
  uint64_t v7 = qword_26ACB2708;
  uint64_t v8 = qword_26ACB2710;
  uint64_t v10 = qword_26ACB2718;
  uint64_t v9 = unk_26ACB2720;
  uint64_t v11 = qword_26ACB2728;
  uint64_t v12 = qword_26ACB2730;
  *a1 = static GraphableExpression.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

PaperKit::GraphableExpression::CodingKeys_optional __swiftcall GraphableExpression.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)(rawValue + 1) >= 5) {
    char v2 = 5;
  }
  else {
    char v2 = 0x302010004uLL >> (8 * (rawValue + 1));
  }
  *uint64_t v1 = v2;
  return (PaperKit::GraphableExpression::CodingKeys_optional)rawValue;
}

PaperKit::GraphableExpression::CodingKeys_optional __swiftcall GraphableExpression.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x6973736572707865 && stringValue._object == (void *)0xEA00000000006E6FLL;
  if (v3
    || (object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x696669746E656469 && object == (void *)0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 0x726F6C6F63 && object == (void *)0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else if (countAndFlagsBits == 0xD000000000000011 && object == (void *)0x800000020C8520A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 3;
  }
  else if (countAndFlagsBits == 0xD000000000000010 && object == (void *)0x800000020C84FB60)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 4;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 4;
    }
    else {
      char v7 = 5;
    }
  }
  char *v2 = v7;
  return result;
}

PaperKit::GraphableExpression::CodingKeys_optional __swiftcall GraphableExpression.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  if ((unint64_t)(intValue + 1) >= 5) {
    char v2 = 5;
  }
  else {
    char v2 = 0x302010004uLL >> (8 * (intValue + 1));
  }
  *uint64_t v1 = v2;
  return (PaperKit::GraphableExpression::CodingKeys_optional)intValue;
}

void *static GraphableExpression.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static GraphableExpression.CodingKeys.allCases.getter;
}

uint64_t GraphableExpression.CodingKeys.intValue.getter()
{
  return qword_20C836F10[*v0];
}

uint64_t GraphableExpression.CodingKeys.rawValue.getter()
{
  return qword_20C836F10[*v0];
}

unint64_t GraphableExpression.CodingKeys.stringValue.getter()
{
  unint64_t result = 0x6973736572707865;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 2:
      unint64_t result = 0x726F6C6F63;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GraphableExpression.CodingKeys(char *a1, char *a2)
{
  return qword_20C836F10[*a1] == qword_20C836F10[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GraphableExpression.CodingKeys()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_20C836F10[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GraphableExpression.CodingKeys()
{
  Hasher._combine(_:)(qword_20C836F10[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GraphableExpression.CodingKeys()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_20C836F10[v1]);
  return Hasher._finalize()();
}

PaperKit::GraphableExpression::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GraphableExpression.CodingKeys(Swift::Int *a1)
{
  return GraphableExpression.CodingKeys.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GraphableExpression.CodingKeys(void *a1@<X8>)
{
  *a1 = qword_20C836F10[*v1];
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GraphableExpression.CodingKeys()
{
  return qword_20C836F10[*v0];
}

void protocol witness for static CaseIterable.allCases.getter in conformance GraphableExpression.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance GraphableExpression.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance GraphableExpression.CodingKeys(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys();
  unint64_t v5 = lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys();
  return MEMORY[0x270F180C8](a1, a2, v4, v5);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GraphableExpression.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GraphableExpression.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

id GraphableExpression.itemProvider.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for GraphableExpression();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088E0]), sel_init);
  uint64_t v6 = (void *)MEMORY[0x21054D080](0xD000000000000018, 0x800000020C8520C0);
  outlined init with copy of GraphableExpression(v1, (uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  outlined init with take of GraphableExpression((uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  aBlock[4] = partial apply for closure #1 in GraphableExpression.registerFor(itemProvider:);
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  aBlock[3] = &block_descriptor_10;
  uint64_t v9 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v5, sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_, v6, 0, v9);
  _Block_release(v9);

  return v5;
}

uint64_t closure #1 in GraphableExpression.registerFor(itemProvider:)(void (*a1)(uint64_t, unint64_t, void))
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for GraphableExpression();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v4 = v3;
  swift_release();
  a1(v2, v4, 0);
  outlined consume of Data?(v2, v4);
  return 0;
}

uint64_t outlined init with copy of GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GraphableExpression();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C39C274()
{
  uint64_t v1 = (int *)(type metadata accessor for GraphableExpression() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  uint64_t v9 = v6 + v1[8];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  v8(v6 + v1[9], v7);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t outlined init with take of GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GraphableExpression();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in GraphableExpression.registerFor(itemProvider:)(void (*a1)(uint64_t, unint64_t, void))
{
  type metadata accessor for GraphableExpression();
  return closure #1 in GraphableExpression.registerFor(itemProvider:)(a1);
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ()) -> (@owned NSProgress?)(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(uint64_t (**)(void (*)(uint64_t, unint64_t, uint64_t), uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  uint64_t v5 = (void *)v2(partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSData?, @unowned NSError?) -> (), v4);
  swift_release();
  swift_release();
  return v5;
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSData?, @unowned NSError?) -> ()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
    if (a3)
    {
LABEL_3:
      uint64_t v7 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);
}

uint64_t GraphableExpression.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  CFURLRef v79 = (char *)&v66 - v10;
  MEMORY[0x270FA5388](v11);
  CFURLRef v80 = (char *)&v66 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v78 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v66 - v16;
  uint64_t v18 = type metadata accessor for UUID();
  unint64_t v19 = *(void **)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v76 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v75 = (char *)&v66 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v77 = (char *)&v66 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v66 - v26;
  MEMORY[0x270FA5388](v28);
  CGDataConsumerRef v81 = (char *)&v66 - v29;
  uint64_t result = outlined init with copy of GraphableExpression(v2, a2);
  if (a1)
  {
    uint64_t v72 = a2;
    uint64_t v74 = v6;
    uint64_t v71 = type metadata accessor for GraphableExpression();
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    CRRegister.wrappedValue.getter();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v19[6];
    if (v31((uint64_t)v17, 1, v18) == 1)
    {
      return outlined destroy of UUID?((uint64_t)v17);
    }
    else
    {
      uint64_t v73 = v5;
      uint64_t v32 = v81;
      uint64_t v67 = (void (*)(char *, char *, uint64_t))v19[4];
      v67(v81, v17, v18);
      uint64_t v68 = v19[2];
      unint64_t v69 = v19;
      ((void (*)(char *, char *, uint64_t))v68)(v27, v32, v18);
      uint64_t v33 = (uint64_t)v80;
      CRKeyPath.init(_:)();
      uint64_t v34 = v18;
      if (*(void *)(a1 + 16)
        && (v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33), uint64_t v33 = (uint64_t)v80, (v36 & 1) != 0))
      {
        uint64_t v37 = *(void *)(a1 + 56);
        uint64_t v38 = v73;
        uint64_t v39 = v74;
        (*(void (**)(char *, unint64_t, uint64_t))(v74 + 16))(v8, v37 + *(void *)(v74 + 72) * v35, v73);
        double v40 = v79;
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v79, v8, v38);
        uint64_t v41 = (uint64_t)v78;
        CRKeyPath.uuid.getter();
        if (v31(v41, 1, v34) == 1)
        {
          uint64_t v42 = *(void (**)(char *, uint64_t))(v39 + 8);
          v42(v40, v38);
          v42(v80, v38);
          ((void (*)(char *, uint64_t))v69[1])(v81, v34);
          return outlined destroy of UUID?(v41);
        }
        else
        {
          uint64_t v43 = v77;
          v67(v77, (char *)v41, v34);
          if (one-time initialization token for mathLogger != -1) {
            swift_once();
          }
          uint64_t v44 = type metadata accessor for Logger();
          __swift_project_value_buffer(v44, (uint64_t)mathLogger);
          uint64_t v45 = v75;
          os_log_t v46 = v68;
          ((void (*)(char *, char *, uint64_t))v68)(v75, v81, v34);
          unint64_t v47 = v76;
          ((void (*)(char *, char *, uint64_t))v46)(v76, v43, v34);
          id v48 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.default.getter();
          int v50 = v49;
          BOOL v51 = os_log_type_enabled(v48, v49);
          uint64_t v52 = v73;
          if (v51)
          {
            uint64_t v53 = swift_slowAlloc();
            uint64_t v68 = v48;
            uint64_t v54 = v53;
            uint64_t v78 = (char *)swift_slowAlloc();
            v83[0] = (uint64_t)v78;
            *(_DWORD *)uint64_t v54 = 136315394;
            uint64_t v66 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
            uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v83);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            LODWORD(v67) = v50;
            id v57 = (void (*)(char *, uint64_t))v69[1];
            v57(v45, v34);
            *(_WORD *)(v54 + 12) = 2080;
            id v58 = v76;
            uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v83);
            uint64_t v43 = v77;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v57(v58, v34);
            uint64_t v52 = v73;
            os_log_t v61 = v68;
            _os_log_impl(&dword_20C2D7000, v68, (os_log_type_t)v67, "Renaming expression identifier: %s to %s", (uint8_t *)v54, 0x16u);
            uint64_t v62 = v78;
            swift_arrayDestroy();
            MEMORY[0x210550270](v62, -1, -1);
            MEMORY[0x210550270](v54, -1, -1);
          }
          else
          {
            id v57 = (void (*)(char *, uint64_t))v69[1];
            v57(v45, v34);
            v57(v47, v34);
          }
          unint64_t v63 = v79;
          v83[0] = UUID.uuidString.getter();
          v83[1] = v64;
          CRRegister.wrappedValue.setter();
          v57(v43, v34);
          uint64_t v65 = *(void (**)(char *, uint64_t))(v74 + 8);
          v65(v63, v52);
          v65(v80, v52);
          return ((uint64_t (*)(char *, uint64_t))v57)(v81, v34);
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v33, v73);
        return ((uint64_t (*)(char *, uint64_t))v69[1])(v81, v18);
      }
    }
  }
  return result;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t GraphableExpression.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v76 = (char *)&v64 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v77 = (char *)&v64 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v75 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v64 - v16;
  uint64_t v18 = type metadata accessor for UUID();
  unint64_t v19 = *(void **)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v73 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v72 = (char *)&v64 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v74 = (char *)&v64 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v64 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v78 = (char *)&v64 - v29;
  uint64_t result = outlined init with copy of GraphableExpression(v2, a2);
  uint64_t v31 = *a1;
  if (*(void *)(v31 + 16))
  {
    uint64_t v69 = a2;
    uint64_t v71 = v6;
    uint64_t v68 = type metadata accessor for GraphableExpression();
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    CRRegister.wrappedValue.getter();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v19[6];
    if (v32((uint64_t)v17, 1, v18) == 1)
    {
      return outlined destroy of UUID?((uint64_t)v17);
    }
    else
    {
      uint64_t v70 = v5;
      uint64_t v33 = v78;
      uint64_t v64 = (void (*)(char *, char *, uint64_t))v19[4];
      v64(v78, v17, v18);
      uint64_t v65 = v19[2];
      uint64_t v66 = v19;
      ((void (*)(char *, char *, uint64_t))v65)(v27, v33, v18);
      uint64_t v34 = (uint64_t)v77;
      CRKeyPath.init(_:)();
      uint64_t v35 = v18;
      if (*(void *)(v31 + 16)
        && (v36 = specialized __RawDictionaryStorage.find<A>(_:)(v34), uint64_t v34 = (uint64_t)v77, (v37 & 1) != 0))
      {
        uint64_t v38 = *(void *)(v31 + 56);
        uint64_t v39 = v70;
        uint64_t v40 = v71;
        (*(void (**)(char *, unint64_t, uint64_t))(v71 + 16))(v8, v38 + *(void *)(v71 + 72) * v36, v70);
        uint64_t v41 = v76;
        (*(void (**)(void))(v40 + 32))();
        uint64_t v42 = (uint64_t)v75;
        CRKeyPath.uuid.getter();
        if (v32(v42, 1, v35) == 1)
        {
          uint64_t v43 = *(void (**)(char *, uint64_t))(v40 + 8);
          v43(v41, v39);
          v43(v77, v39);
          ((void (*)(char *, uint64_t))v66[1])(v78, v35);
          return outlined destroy of UUID?(v42);
        }
        else
        {
          uint64_t v44 = v74;
          v64(v74, (char *)v42, v35);
          if (one-time initialization token for mathLogger != -1) {
            swift_once();
          }
          uint64_t v45 = type metadata accessor for Logger();
          __swift_project_value_buffer(v45, (uint64_t)mathLogger);
          os_log_t v46 = v72;
          os_log_t v47 = v65;
          ((void (*)(char *, char *, uint64_t))v65)(v72, v78, v35);
          id v48 = v73;
          ((void (*)(char *, char *, uint64_t))v47)(v73, v44, v35);
          os_log_type_t v49 = Logger.logObject.getter();
          os_log_type_t v50 = static os_log_type_t.default.getter();
          int v51 = v50;
          BOOL v52 = os_log_type_enabled(v49, v50);
          uint64_t v53 = v70;
          if (v52)
          {
            uint64_t v54 = swift_slowAlloc();
            uint64_t v75 = (char *)swift_slowAlloc();
            v80[0] = (uint64_t)v75;
            *(_DWORD *)uint64_t v54 = 136315394;
            lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
            uint64_t v65 = v49;
            uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v80);
            LODWORD(v64) = v51;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            id v57 = (void (*)(char *, uint64_t))v66[1];
            v57(v46, v35);
            *(_WORD *)(v54 + 12) = 2080;
            uint64_t v53 = v70;
            uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v80);
            uint64_t v44 = v74;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v57(v48, v35);
            os_log_type_t v49 = v65;
            _os_log_impl(&dword_20C2D7000, v65, (os_log_type_t)v64, "Renaming expression identifier: %s to %s", (uint8_t *)v54, 0x16u);
            unint64_t v60 = v75;
            swift_arrayDestroy();
            MEMORY[0x210550270](v60, -1, -1);
            uint64_t v61 = v54;
            uint64_t v41 = v76;
            MEMORY[0x210550270](v61, -1, -1);
          }
          else
          {
            id v57 = (void (*)(char *, uint64_t))v66[1];
            v57(v46, v35);
            v57(v48, v35);
          }

          v80[0] = UUID.uuidString.getter();
          v80[1] = v62;
          CRRegister.wrappedValue.setter();
          v57(v44, v35);
          unint64_t v63 = *(void (**)(char *, uint64_t))(v71 + 8);
          v63(v41, v53);
          v63(v77, v53);
          return ((uint64_t (*)(char *, uint64_t))v57)(v78, v35);
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v34, v70);
        return ((uint64_t (*)(char *, uint64_t))v66[1])(v78, v18);
      }
    }
  }
  return result;
}

uint64_t GraphableExpression.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GraphableExpression.CodingKeys>);
  uint64_t v25 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v3 = (char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GraphableExpression();
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  id v8 = &v7[v5[7]];
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  v24[2] = v8;
  CRRegister.init(wrappedValue:)();
  uint64_t v9 = &v7[v5[8]];
  uint64_t v30 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  uint64_t v10 = v28;
  lazy protocol witness table accessor for type Color? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color and conformance Color);
  uint64_t v11 = v3;
  CRRegister.init(wrappedValue:)();
  uint64_t v12 = &v7[v5[9]];
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(void *)&v7[v5[10]] = MEMORY[0x263F8EE80];
  __swift_project_boxed_opaque_existential_1(v10, v10[3]);
  lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys();
  uint64_t v13 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
  {
    outlined destroy of GraphableExpression((uint64_t)v7);
  }
  else
  {
    uint64_t v29 = v9;
    uint64_t v15 = v25;
    uint64_t v14 = v26;
    LOBYTE(v30) = 0;
    uint64_t v16 = v27;
    uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
    v24[0] = v12;
    uint64_t v30 = v17;
    unint64_t v31 = v19;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    CRRegister.wrappedValue.setter();
    LOBYTE(v30) = 1;
    uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
    v24[1] = v20;
    uint64_t v30 = v21;
    unint64_t v31 = v22;
    CRRegister.wrappedValue.setter();
    char v32 = 2;
    lazy protocol witness table accessor for type Color and conformance Color();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.setter();
    LOBYTE(v30) = 3;
    uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t v31 = v23;
    CRRegister.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v16);
    outlined init with take of GraphableExpression((uint64_t)v7, v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance GraphableExpression()
{
  return CRStruct_4.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance GraphableExpression()
{
  return CRStruct_4.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance GraphableExpression(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F170F0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GraphableExpression@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GraphableExpression.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GraphableExpression()
{
  return CRStruct_4<>.encode(to:)();
}

uint64_t protocol witness for static CRStruct_Base_4.fields.getter in conformance GraphableExpression@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26ACB26E0;
  uint64_t v4 = qword_26ACB26E8;
  uint64_t v3 = unk_26ACB26F0;
  uint64_t v5 = qword_26ACB26F8;
  uint64_t v6 = qword_26ACB2700;
  uint64_t v7 = qword_26ACB2708;
  uint64_t v8 = qword_26ACB2710;
  uint64_t v10 = qword_26ACB2718;
  uint64_t v9 = unk_26ACB2720;
  uint64_t v11 = qword_26ACB2728;
  uint64_t v12 = qword_26ACB2730;
  *a1 = static GraphableExpression.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance GraphableExpression(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F17160](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.init() in conformance GraphableExpression@<X0>(uint64_t a1@<X8>)
{
  return GraphableExpression.init(expression:identifier:graphableVariable:color:)(0xE000000000000000, a1);
}

uint64_t protocol witness for CRDT.context.getter in conformance GraphableExpression(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F17100](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F17128](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F17158](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance GraphableExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F17130](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F17150](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F17138](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance GraphableExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F170F8](a1, a2, a3, v6);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return CRStruct_4.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F170E8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  return MEMORY[0x270F17140](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance GraphableExpression()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance GraphableExpression()
{
  return CRDT.init(serializedData:)();
}

unint64_t lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of GraphableExpression(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GraphableExpression();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in GraphableExpression.CodingKeys()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [GraphableExpression.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [GraphableExpression.CodingKeys]);
}

uint64_t base witness table accessor for CRStruct_Base_4 in GraphableExpression()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
}

uint64_t base witness table accessor for CRStruct_Base in GraphableExpression()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
}

uint64_t base witness table accessor for CRDT in GraphableExpression()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
}

uint64_t base witness table accessor for CRMergeable in GraphableExpression()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
}

uint64_t base witness table accessor for CRType in GraphableExpression()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in GraphableExpression()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_4<GraphableExpression> and conformance CRStructMergeableDelta_4<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_4<GraphableExpression>);
}

uint64_t base witness table accessor for CRCodable in GraphableExpression()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
}

uint64_t sub_20C39E970@<X0>(void *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_20C39E9BC()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C39EA00()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C39EA5C()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C39EAB8()
{
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for GraphableExpression(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    v8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for GraphableExpression(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  v5(a1 + a2[7], v4);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphableExpression(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  v7(a1 + a3[7], a2 + a3[7], v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphableExpression(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  v7(a1 + a3[7], a2 + a3[7], v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for GraphableExpression(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  v7(a1 + a3[7], a2 + a3[7], v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for GraphableExpression(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  v7(a1 + a3[7], a2 + a3[7], v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphableExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C39F208);
}

uint64_t sub_20C39F208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphableExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C39F338);
}

uint64_t sub_20C39F338(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for GraphableExpression()
{
  type metadata accessor for CRRegister<String>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<Color?>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CRRegister<String>()
{
  if (!lazy cache variable for type metadata for CRRegister<String>)
  {
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<String>);
    }
  }
}

void type metadata accessor for CRRegister<Color?>()
{
  if (!lazy cache variable for type metadata for CRRegister<Color?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Color?);
    lazy protocol witness table accessor for type Color? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color and conformance Color);
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Color?>);
    }
  }
}

uint64_t getEnumTagSinglePayload for GraphableExpression.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GraphableExpression.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C39F78CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphableExpression.CodingKeys()
{
  return &type metadata for GraphableExpression.CodingKeys;
}

unint64_t lazy protocol witness table accessor for type CRRegister<String> and conformance <> CRRegister<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CRRegister<String> and conformance <> CRRegister<A>;
  if (!lazy protocol witness table cache variable for type CRRegister<String> and conformance <> CRRegister<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRRegister<String> and conformance <> CRRegister<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Color? and conformance <A> A?(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Color? and conformance <A> A?()
{
  return lazy protocol witness table accessor for type Color? and conformance <A> A?(&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color and conformance Color);
}

uint64_t sub_20C39F92C()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSData?, @unowned NSError?) -> ()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSData?, @unowned NSError?) -> ()(a1, a2, a3, *(void *)(v3 + 16));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MagicPaperUsageReflowEvent.InvocationPath()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MagicPaperUsageReflowEvent.InvocationPath()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MagicPaperUsageReflowEvent.InvocationPath()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MagicPaperUsageReflowEvent.InvocationPath@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized MagicPaperUsageReflowEvent.InvocationPath.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MagicPaperUsageReflowEvent.InvocationPath(void *a1@<X8>)
{
  *a1 = *v1 + 1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance MagicPaperUsageReflowEvent.InvocationPath()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MagicPaperUsageReflowEvent.InvocationPath()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t MagicPaperUsageReflowEvent.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0x79636E6574616CLL;
      break;
    case 3:
      unint64_t result = 0x697461636F766E69;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 9:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 10:
      unint64_t result = 1868852853;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t MagicPaperUsageReflowEvent.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0x79636E6574616CLL;
      break;
    case 3:
      unint64_t result = 0x697461636F766E69;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 9:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 10:
      unint64_t result = 1868852853;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MagicPaperUsageReflowEvent.CodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = MagicPaperUsageReflowEvent.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == MagicPaperUsageReflowEvent.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MagicPaperUsageReflowEvent.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MagicPaperUsageReflowEvent.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MagicPaperUsageReflowEvent.CodingKeys()
{
  MagicPaperUsageReflowEvent.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MagicPaperUsageReflowEvent.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MagicPaperUsageReflowEvent.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MagicPaperUsageReflowEvent.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageReflowEvent.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MagicPaperUsageReflowEvent.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MagicPaperUsageReflowEvent.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance MagicPaperUsageReflowEvent.CodingKeys()
{
  return MagicPaperUsageReflowEvent.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance MagicPaperUsageReflowEvent.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageReflowEvent.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance MagicPaperUsageReflowEvent.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MagicPaperUsageReflowEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MagicPaperUsageReflowEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void MagicPaperUsageReflowEvent.init(invocationPath:in:reflowTextView:startDate:)(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(unsigned char *)a5 = 0;
  uint64_t v9 = (int *)type metadata accessor for MagicPaperUsageReflowEvent();
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(_DWORD *)(a5 + 24) = 0;
  uint64_t v10 = a5 + v9[7];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(void *)(a5 + v9[9]) = 0;
  *(void *)(a5 + v9[10]) = 0;
  *(void *)(a5 + v9[11]) = 0;
  *(void *)(a5 + v9[12]) = 0;
  *(void *)(a5 + v9[13]) = 0;
  *(void *)(a5 + v9[14]) = 0;
  *(unsigned char *)(a5 + v9[15]) = 0;
  *(unsigned char *)(a5 + v9[16]) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(unsigned char *)(a5 + v9[8]) = a1;
  outlined assign with take of Date?(a4, v10);
  swift_unknownObjectWeakAssign();

  swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for MagicPaperUsageReflowEvent()
{
  uint64_t result = type metadata singleton initialization cache for MagicPaperUsageReflowEvent;
  if (!type metadata singleton initialization cache for MagicPaperUsageReflowEvent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for MagicPaperUsageReflowEvent(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    uint64_t v8 = a3[7];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[9];
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *(void *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    uint64_t v17 = a3[11];
    *(void *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(void *)((char *)v4 + v17) = *(uint64_t *)((char *)a2 + v17);
    uint64_t v18 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(void *)((char *)v4 + v18) = *(uint64_t *)((char *)a2 + v18);
    uint64_t v19 = a3[15];
    *(void *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    *((unsigned char *)v4 + v19) = *((unsigned char *)a2 + v19);
    *((unsigned char *)v4 + a3[16]) = *((unsigned char *)a2 + a3[16]);
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
  }
  return v4;
}

uint64_t destroy for MagicPaperUsageReflowEvent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for MagicPaperUsageReflowEvent(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v16 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  uint64_t v17 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for MagicPaperUsageReflowEvent(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for MagicPaperUsageReflowEvent(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for MagicPaperUsageReflowEvent(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  uint64_t v17 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v18 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  uint64_t v19 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for MagicPaperUsageReflowEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C3A0DD8);
}

uint64_t sub_20C3A0DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 28);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for MagicPaperUsageReflowEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C3A0EAC);
}

uint64_t sub_20C3A0EAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 16) = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for MagicPaperUsageReflowEvent()
{
  type metadata accessor for Date?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Date?()
{
  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
    }
  }
}

uint64_t MagicPaperUsageReflowEvent.countReflownMetrics(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  swift_beginAccess();
  unint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = MEMORY[0x263F8EE78];
  unint64_t v18 = MEMORY[0x263F8EE78];
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    unint64_t v7 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  if (!v4) {
    goto LABEL_16;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_48;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      MEMORY[0x21054E050](i, v2);
    }
    else {
      swift_retain();
    }
    type metadata accessor for ReflowWord();
    if (swift_dynamicCastClass())
    {
      MEMORY[0x21054D330]();
      if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v7 = v18;
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8) {
      goto LABEL_19;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_45;
    }
LABEL_32:
    if ((v11 & 0x4000000000000000) != 0) {
      goto LABEL_45;
    }
    uint64_t v12 = *(void *)(v11 + 16);
    uint64_t result = swift_retain();
    if (!v12) {
      goto LABEL_46;
    }
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_31;
  }
LABEL_19:
  if (v8 < 1)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  for (uint64_t j = 0; j != v8; ++j)
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = MEMORY[0x21054E050](j, v7);
    }
    else
    {
      uint64_t v10 = *(void *)(v7 + 8 * j + 32);
      swift_retain();
    }
    if (CGRectEqualToRect(*(CGRect *)(v10 + 16), *(CGRect *)(v10 + 48)))
    {
      swift_release();
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = v3;
  if ((v3 & 0x8000000000000000) == 0) {
    goto LABEL_32;
  }
LABEL_45:
  swift_retain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v12 = result;
  if (!result)
  {
LABEL_46:
    swift_release_n();
    return v12;
  }
LABEL_34:
  if (v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    while (1)
    {
      if ((v11 & 0xC000000000000001) != 0)
      {
        if (*(void *)(MEMORY[0x21054E050](v13, v11) + 328)) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v16 = *(void *)(v11 + 8 * v13 + 32);
        swift_retain();
        if (*(void *)(v16 + 328))
        {
LABEL_38:
          uint64_t v15 = String.count.getter();
          goto LABEL_41;
        }
      }
      uint64_t v15 = 0;
LABEL_41:
      swift_release();
      BOOL v17 = __OFADD__(v14, v15);
      v14 += v15;
      if (v17)
      {
        __break(1u);
        goto LABEL_45;
      }
      if (v12 == ++v13) {
        goto LABEL_46;
      }
    }
  }
LABEL_49:
  __break(1u);
  return result;
}

Swift::Void __swiftcall MagicPaperUsageReflowEvent.finalize()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v30 - v10;
  uint64_t v12 = type metadata accessor for MagicPaperUsageReflowEvent();
  uint64_t v13 = *(int *)(v12 + 64);
  if ((*(unsigned char *)(v1 + v13) & 1) == 0)
  {
    uint64_t v14 = (int *)v12;
    outlined init with copy of Date?(v1 + *(int *)(v12 + 28), (uint64_t)v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of Date?((uint64_t)v4);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
      Date.init()();
      Date.timeIntervalSince(_:)();
      double v16 = v15;
      BOOL v17 = *(void (**)(char *, uint64_t))(v6 + 8);
      v17(v8, v5);
      v17(v11, v5);
      *(float *)&double v16 = v16 * 1000.0;
      *(_DWORD *)(v1 + 24) = LODWORD(v16);
    }
    uint64_t v18 = MEMORY[0x210550400](v1 + v14[18]);
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      uint64_t v20 = MagicPaperUsageReflowEvent.countReflownMetrics(from:)(v18);
      uint64_t v22 = v21;

      *(void *)(v1 + v14[14]) = v20;
      *(void *)(v1 + v14[13]) = v22;
    }
    unint64_t v23 = (void *)MEMORY[0x210550400](v1 + v14[17]);
    id v24 = objc_msgSend(self, sel_activePencil);
    unsigned __int8 v25 = objc_msgSend(v24, sel_isConnected);

    *(unsigned char *)uint64_t v1 = v25;
    v30[1] = static Locale.preferredLanguages.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 8) = v26;
    *(void *)(v1 + 16) = v28;
    if (v23)
    {
      uint64_t v29 = v23;
      specialized MagicPaperUsageAnalyticsEvent.countGroups(in:)(v29);
    }
    *(unsigned char *)(v1 + v13) = 1;
  }
}

uint64_t MagicPaperUsageReflowEvent.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MagicPaperUsageReflowEvent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v10[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = *(unsigned char *)(v3 + *(int *)(type metadata accessor for MagicPaperUsageReflowEvent() + 32));
    v10[11] = 3;
    lazy protocol witness table accessor for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[10] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[9] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[8] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[7] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[6] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[5] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[4] = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t protocol witness for static AnalyticsEvent.eventName.getter in conformance MagicPaperUsageReflowEvent()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for AnalyticsEvent.isFinalized.getter in conformance MagicPaperUsageReflowEvent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 64));
}

uint64_t protocol witness for AnalyticsEvent.undoEvent() in conformance MagicPaperUsageReflowEvent@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  v8.n128_f64[0] = MEMORY[0x270FA5388](v4);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v6 + *(int *)(v11 + 68)) == 1)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, __n128))(v7 + 56);
    return v12(a2, 1, 1, a1, v8);
  }
  else
  {
    uint64_t v18 = v7;
    outlined init with copy of MagicPaperUsageReflowEvent(v6, (uint64_t)v10);
    uint64_t v14 = (uint64_t)&v10[a1[7]];
    outlined destroy of Date?(v14);
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    uint64_t v16 = a1[16];
    v10[a1[15]] = 1;
    v10[v16] = 0;
    outlined init with copy of MagicPaperUsageReflowEvent((uint64_t)v10, a2);
    (*(void (**)(uint64_t, void, uint64_t, int *))(v18 + 56))(a2, 0, 1, a1);
    return outlined destroy of MagicPaperUsageReflowEvent((uint64_t)v10);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MagicPaperUsageReflowEvent(void *a1)
{
  return MagicPaperUsageReflowEvent.encode(to:)(a1);
}

uint64_t instantiation function for generic protocol witness table for MagicPaperUsageReflowEvent(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type MagicPaperUsageReflowEvent and conformance MagicPaperUsageReflowEvent(&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent and conformance MagicPaperUsageReflowEvent);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type MagicPaperUsageReflowEvent and conformance MagicPaperUsageReflowEvent(&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent and conformance MagicPaperUsageReflowEvent);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type MagicPaperUsageReflowEvent and conformance MagicPaperUsageReflowEvent(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for MagicPaperUsageReflowEvent();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of MagicPaperUsageReflowEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPaperUsageReflowEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of MagicPaperUsageReflowEvent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MagicPaperUsageReflowEvent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.CodingKeys and conformance MagicPaperUsageReflowEvent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent.InvocationPath and conformance MagicPaperUsageReflowEvent.InvocationPath);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MagicPaperUsageReflowEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MagicPaperUsageReflowEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C3A1FE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageReflowEvent.CodingKeys()
{
  return &type metadata for MagicPaperUsageReflowEvent.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for MagicPaperUsageReflowEvent.InvocationPath(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C3A20ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageReflowEvent.InvocationPath()
{
  return &type metadata for MagicPaperUsageReflowEvent.InvocationPath;
}

uint64_t specialized MagicPaperUsageReflowEvent.InvocationPath.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 6) {
    return 5;
  }
  else {
    return (0x40302010005uLL >> (8 * a1));
  }
}

unint64_t specialized MagicPaperUsageReflowEvent.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MagicPaperUsageReflowEvent.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return 11;
  }
  else {
    return v3;
  }
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZSo6CGRectV_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  int v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  type metadata accessor for CGRect(0);
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ10Foundation4DataV_So6CGSizeVtSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  int v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CGSize)?);
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZSi_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  int v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t CanvasElementImageRenderer.__allocating_init(size:scale:)(double a1, double a2, double a3)
{
  type metadata accessor for ImageRenderer();
  uint64_t v6 = (double *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  return specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v6);
}

void key path setter for CanvasElementRenderer.backgroundColor : CanvasElementRenderer(void **a1, uint64_t *a2)
{
  Swift::String v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  unsigned int v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = v2;
  id v5 = v2;
}

void *CanvasElementRenderer.backgroundColor.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = v1;
  return v1;
}

void CanvasElementRenderer.backgroundColor.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 56);
  *(void *)(v1 + 56) = a1;
}

uint64_t (*CanvasElementRenderer.backgroundColor.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

void key path setter for CanvasElementRenderer.tintColor : CanvasElementRenderer(void **a1, uint64_t *a2)
{
  id v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  unsigned int v4 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v2;
  id v5 = v2;
}

void *CanvasElementRenderer.tintColor.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = v1;
  return v1;
}

void CanvasElementRenderer.tintColor.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 64);
  *(void *)(v1 + 64) = a1;
}

uint64_t (*CanvasElementRenderer.tintColor.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t CanvasElementRenderer.sixChannelBlending.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t CanvasElementRenderer.sixChannelBlending.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 72) = a1;
  return result;
}

uint64_t (*CanvasElementRenderer.sixChannelBlending.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  *(void *)(v13 + 384) = v18;
  *(void *)(v13 + 392) = v12;
  *(void *)(v13 + 368) = a8;
  *(void *)(v13 + 376) = v17;
  *(void *)(v13 + 352) = a6;
  *(void *)(v13 + 360) = a7;
  *(unsigned char *)(v13 + 92) = a5;
  *(unsigned char *)(v13 + 91) = a4;
  *(double *)(v13 + 336) = a11;
  *(double *)(v13 + 344) = a12;
  *(double *)(v13 + 320) = a9;
  *(double *)(v13 + 328) = a10;
  *(void *)(v13 + 304) = a2;
  *(void *)(v13 + 312) = a3;
  *(void *)(v13 + 296) = a1;
  uint64_t v14 = type metadata accessor for CRKeyPath();
  *(void *)(v13 + 400) = v14;
  *(void *)(v13 + 408) = *(void *)(v14 - 8);
  *(void *)(v13 + 416) = swift_task_alloc();
  return MEMORY[0x270FA2498](CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

uint64_t CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)()
{
  char v1 = *(unsigned char *)(v0 + 91);
  id v2 = (unsigned __int8 *)(*(void *)(v0 + 392) + 72);
  swift_beginAccess();
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = 2;
  }
  else
  {
    int v3 = *v2;
    uint64_t v4 = 1;
  }
  uint64_t v5 = *(void *)(v0 + 392);
  id v6 = objc_msgSend(self, sel_traitCollectionWithUserInterfaceStyle_, v4);
  *(void *)(v0 + 424) = v6;
  swift_beginAccess();
  uint64_t v7 = *(void **)(v5 + 56);
  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v6);
    id v9 = objc_msgSend(v8, sel_CGColor);
  }
  else
  {
    id v9 = 0;
  }
  char v46 = v3;
  if (v9) {
    int v10 = 0;
  }
  else {
    int v10 = v3;
  }
  if (v10 == 1)
  {
    id v11 = objc_msgSend(self, sel_systemBackgroundColor);
    id v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v6);

    id v9 = objc_msgSend(v12, sel_CGColor);
  }
  *(void *)(v0 + 432) = v9;
  uint64_t v13 = *(void **)(v0 + 392);
  uint64_t v14 = *(void *)(v0 + 352);
  uint64_t v15 = v13[5];
  uint64_t v16 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v15);
  double v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  uint64_t v18 = v13[5];
  uint64_t v19 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v14, v18, v19);
  if (*(void *)(v0 + 208))
  {
    outlined init with take of FindResult((long long *)(v0 + 184), v0 + 144);
    uint64_t v20 = *(void *)(v0 + 168);
    uint64_t v21 = *(void *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 144), v20);
    uint64_t v22 = (CGContext *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    *(void *)(v0 + 440) = v22;
    uint64_t v23 = *(void *)(v0 + 168);
    uint64_t v24 = *(void *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 144), v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    if (v9)
    {
      unsigned __int8 v25 = (CGColor *)v9;
      CGContextSetFillColorWithColor(v22, v25);
      CGRect ClipBoundingBox = CGContextGetClipBoundingBox(v22);
      CGContextFillRect(v22, ClipBoundingBox);
    }
    uint64_t v26 = *(void *)(v0 + 392);
    uint64_t v48 = *(void *)(v0 + 376);
    char v27 = *(unsigned char *)(v0 + 92);
    char v28 = *(unsigned char *)(v0 + 91);
    v51.size.width = *(CGFloat *)(v0 + 336);
    v51.size.height = *(CGFloat *)(v0 + 344);
    double v30 = *(double *)(v0 + 320);
    double v29 = *(double *)(v0 + 328);
    v51.origin.x = v30;
    v51.origin.y = v29;
    double v31 = v17 / CGRectGetWidth(v51);
    *(double *)(v0 + 96) = v31;
    *(void *)(v0 + 104) = 0;
    *(void *)(v0 + 112) = 0;
    *(double *)(v0 + 120) = v31;
    *(double *)(v0 + 128) = -(v30 * v31);
    *(double *)(v0 + 136) = -(v29 * v31);
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 96));
    swift_beginAccess();
    char v32 = *(void **)(v26 + 64);
    *(void *)(v0 + 448) = v32;
    char v33 = *(unsigned char *)(v26 + 73);
    id v34 = v32;
    static CRKeyPath.unique.getter();
    *(unsigned char *)(v0 + 16) = v46;
    *(unsigned char *)(v0 + 17) = v28;
    *(unsigned char *)(v0 + 18) = v27;
    *(void *)(v0 + 24) = v32;
    *(unsigned char *)(v0 + 32) = 1;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(unsigned char *)(v0 + 72) = 1;
    *(void *)(v0 + 80) = 0;
    *(_WORD *)(v0 + 88) = 0;
    *(unsigned char *)(v0 + 90) = v33;
    os_log_t v47 = (uint64_t (*)(CGContext *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 + 16) + **(int **)(v48 + 16));
    id v35 = v34;
    unint64_t v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v36;
    *unint64_t v36 = v0;
    v36[1] = CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
    uint64_t v37 = *(void *)(v0 + 416);
    uint64_t v39 = *(void *)(v0 + 376);
    uint64_t v38 = *(void *)(v0 + 384);
    uint64_t v41 = *(void *)(v0 + 360);
    uint64_t v40 = *(void *)(v0 + 368);
    uint64_t v42 = *(void *)(v0 + 312);
    return v47(v22, v37, v42, v0 + 16, v40, v38, v41, v39);
  }
  else
  {
    uint64_t v44 = *(void *)(v0 + 296);

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 184, &demangling cache variable for type metadata for RendererContext?);
    *(_OWORD *)uint64_t v44 = 0u;
    *(_OWORD *)(v44 + 16) = 0u;
    *(void *)(v44 + 32) = 0;
    swift_task_dealloc();
    uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
    return v45();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  char v1 = *(void **)(*(void *)v0 + 448);
  id v2 = *(void *)(*(void *)v0 + 416);
  int v3 = *(void *)(*(void *)v0 + 408);
  uint64_t v4 = *(void *)(*(void *)v0 + 400);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return MEMORY[0x270FA2498](CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:), 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  id v2 = (void *)v0[55];
  char v1 = (void *)v0[56];
  uint64_t v4 = (void *)v0[53];
  int v3 = (void *)v0[54];
  uint64_t v5 = v0[37];
  id v6 = v0[21];
  uint64_t v7 = v0[22];
  __swift_project_boxed_opaque_existential_1(v0 + 18, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);

  outlined init with copy of FindResult((uint64_t)(v0 + 18), v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 18));
  swift_task_dealloc();
  id v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t CanvasElementRenderer.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return v0;
}

uint64_t CanvasElementRenderer.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t CanvasElementImageRenderer.__allocating_init(size:)(double a1, double a2)
{
  type metadata accessor for UIGraphicsImageRendererFormat();
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_defaultFormat);
  objc_msgSend(v4, sel_scale);
  uint64_t v6 = v5;
  type metadata accessor for ImageRenderer();
  uint64_t v7 = swift_allocObject();
  *(double *)(v7 + 16) = a1;
  *(double *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = v6;
  uint64_t v8 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)(v7);

  return v8;
}

uint64_t CanvasElementImageRenderer.__allocating_init(size:format:)(void *a1, double a2, double a3)
{
  objc_msgSend(a1, sel_scale);
  uint64_t v7 = v6;
  type metadata accessor for ImageRenderer();
  uint64_t v8 = swift_allocObject();
  *(double *)(v8 + 16) = a2;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 32) = v7;
  uint64_t v9 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)(v8);

  return v9;
}

uint64_t CanvasElementImageRenderer.image(from:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CanvasElementImageRenderer.image(from:bounds:completion:)(a1, a2, a3, a4, (void (*)(char *, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:));
}

uint64_t CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 176) = a2;
  *(void *)(v5 + 184) = v4;
  *(unsigned char *)(v5 + 50) = a4;
  *(unsigned char *)(v5 + 49) = a3;
  *(void *)(v5 + 168) = a1;
  outlined init with take of CGRect?(a2, v5 + 96);
  long long v6 = *(_OWORD *)(v5 + 112);
  *(_OWORD *)(v5 + 192) = *(_OWORD *)(v5 + 96);
  *(_OWORD *)(v5 + 208) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  *(void *)(v5 + 224) = v7;
  *(void *)(v5 + 232) = *(void *)(v7 - 8);
  *(void *)(v5 + 240) = swift_task_alloc();
  type metadata accessor for Paper();
  *(void *)(v5 + 248) = swift_task_alloc();
  return MEMORY[0x270FA2498](CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:), 0, 0);
}

uint64_t CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:)()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.root.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v2);
  outlined init with take of CGRect?(v4, v0 + 56);
  uint64_t v7 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v8 = *(void *)(v0 + 224);
  if (*(unsigned char *)(v0 + 88))
  {
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v10 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v12 = *(void *)(v0 + 160);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v16 = *(void *)(v0 + 192);
    uint64_t v15 = *(void *)(v0 + 200);
    (*(void (**)(void, void))(v7 + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
    *(void *)(v0 + 136) = v16;
    *(void *)(v0 + 144) = v15;
    uint64_t v9 = v16;
    uint64_t v10 = v15;
    uint64_t v11 = v14;
    uint64_t v12 = v13;
    *(void *)(v0 + 152) = v14;
    *(void *)(v0 + 160) = v13;
  }
  *(void *)(v0 + 16) = v9;
  *(void *)(v0 + 24) = v10;
  *(void *)(v0 + 32) = v11;
  *(void *)(v0 + 40) = v12;
  *(unsigned char *)(v0 + 48) = 0;
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                      + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
  double v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v17;
  *double v17 = v0;
  v17[1] = CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:);
  uint64_t v18 = *(void *)(v0 + 248);
  char v19 = *(unsigned char *)(v0 + 50);
  char v20 = *(unsigned char *)(v0 + 49);
  uint64_t v21 = *(void *)(v0 + 168);
  return v23(v18, v21, v0 + 16, v20, v19);
}

uint64_t CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 248);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v3, (uint64_t (*)(void))type metadata accessor for Paper);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v6 + 8);
  return v4(a1);
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  return CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)&unk_26C152DE0, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:));
}

uint64_t closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  *(void *)(v12 + 184) = v17;
  *(void *)(v12 + 192) = v18;
  *(_OWORD *)(v12 + 168) = v16;
  *(_OWORD *)(v12 + 152) = v15;
  *(unsigned char *)(v12 + 217) = a12;
  *(unsigned char *)(v12 + 216) = a11;
  *(double *)(v12 + 136) = a3;
  *(double *)(v12 + 144) = a4;
  *(double *)(v12 + 120) = a1;
  *(double *)(v12 + 128) = a2;
  *(void *)(v12 + 104) = a9;
  *(void *)(v12 + 112) = a10;
  *(void *)(v12 + 96) = a8;
  type metadata accessor for RendererOutput();
  *(void *)(v12 + 200) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:), 0, 0);
}

uint64_t closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)()
{
  type metadata accessor for RendererOutput();
  swift_storeEnumTagMultiPayload();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 168);
  char v5 = *(unsigned char *)(v0 + 217);
  char v6 = *(unsigned char *)(v0 + 216);
  double v7 = *(double *)(v0 + 136);
  double v8 = *(double *)(v0 + 144);
  double v9 = *(double *)(v0 + 120);
  double v10 = *(double *)(v0 + 128);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 112);
  return CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(v0 + 16, v11, v12, v6, v5, v2, v4, v3, v9, v10, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (*v4)(void);
  id v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)(v0 + 2), (uint64_t)(v0 + 7), &demangling cache variable for type metadata for RendererContext?);
  uint64_t v1 = v0[10];
  if (v1)
  {
    uint64_t v2 = v0[11];
    __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
    if (v3)
    {
      uint64_t v4 = (void (*)(void))v0[19];
      char v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v3);
      v4();

      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 7), &demangling cache variable for type metadata for RendererContext?);
  }
  ((void (*)(void))v0[19])(0);
LABEL_6:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for RendererContext?);
  swift_task_dealloc();
  char v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  *(unsigned char *)(v6 + 130) = a5;
  *(unsigned char *)(v6 + 129) = a4;
  *(void *)(v6 + 264) = a3;
  *(void *)(v6 + 272) = v5;
  *(void *)(v6 + 248) = a1;
  *(void *)(v6 + 256) = a2;
  outlined init with take of CGRect?(a3, v6 + 176);
  long long v7 = *(_OWORD *)(v6 + 192);
  *(_OWORD *)(v6 + 280) = *(_OWORD *)(v6 + 176);
  *(_OWORD *)(v6 + 296) = v7;
  *(void *)(v6 + 312) = type metadata accessor for RendererOutput();
  *(void *)(v6 + 320) = swift_task_alloc();
  *(void *)(v6 + 328) = type metadata accessor for Paper();
  *(void *)(v6 + 336) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  long long v7;
  uint64_t v9;

  *(unsigned char *)(v6 + 130) = a5;
  *(unsigned char *)(v6 + 129) = a4;
  *(void *)(v6 + 264) = a3;
  *(void *)(v6 + 272) = v5;
  *(void *)(v6 + 248) = a1;
  *(void *)(v6 + 256) = a2;
  outlined init with take of CGRect?(a3, v6 + 176);
  long long v7 = *(_OWORD *)(v6 + 192);
  *(_OWORD *)(v6 + 280) = *(_OWORD *)(v6 + 176);
  *(_OWORD *)(v6 + 296) = v7;
  *(void *)(v6 + 312) = type metadata accessor for RendererOutput();
  *(void *)(v6 + 320) = swift_task_alloc();
  *(void *)(v6 + 328) = type metadata accessor for Image();
  *(void *)(v6 + 336) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  long long v7;
  uint64_t v9;

  *(unsigned char *)(v6 + 130) = a5;
  *(unsigned char *)(v6 + 129) = a4;
  *(void *)(v6 + 264) = a3;
  *(void *)(v6 + 272) = v5;
  *(void *)(v6 + 248) = a1;
  *(void *)(v6 + 256) = a2;
  outlined init with take of CGRect?(a3, v6 + 176);
  long long v7 = *(_OWORD *)(v6 + 192);
  *(_OWORD *)(v6 + 280) = *(_OWORD *)(v6 + 176);
  *(_OWORD *)(v6 + 296) = v7;
  *(void *)(v6 + 312) = type metadata accessor for RendererOutput();
  *(void *)(v6 + 320) = swift_task_alloc();
  type metadata accessor for Shape();
  *(void *)(v6 + 328) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

uint64_t specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 16;
  uint64_t v3 = *(void *)(v1 + 336);
  uint64_t v4 = *(void *)(v1 + 264);
  uint64_t v5 = *(void *)(v1 + 248);
  outlined init with take of CGRect?(v4, v1 + 96);
  outlined init with copy of Shape(v5, v3, (uint64_t (*)(void))type metadata accessor for Paper);
  outlined init with take of CGRect?(v4, v1 + 136);
  if (*(unsigned char *)(v1 + 168))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    double v7 = *(double *)(v1 + 216);
    double v6 = *(double *)(v1 + 224);
    double v9 = *(double *)(v1 + 232);
    double v8 = *(double *)(v1 + 240);
  }
  else
  {
    double v9 = *(double *)(v1 + 296);
    double v8 = *(double *)(v1 + 304);
    double v7 = *(double *)(v1 + 280);
    double v6 = *(double *)(v1 + 288);
  }
  _s8PaperKit0A0VWOhTm_0(*(void *)(v1 + 336), (uint64_t (*)(void))type metadata accessor for Paper);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  double v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 344) = v10;
  *double v10 = v1;
  v10[1] = specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  uint64_t v11 = *(void *)(v1 + 320);
  char v12 = *(unsigned char *)(v1 + 130);
  char v13 = *(unsigned char *)(v1 + 129);
  uint64_t v14 = *(void *)(v1 + 248);
  uint64_t v15 = *(void *)(v1 + 256);
  return v17(v2, v14, v15, v13, v12, v11, v7, v6, v9, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 320);
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t (*v5)(id);
  uint64_t v7;

  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)(v0 + 2), (uint64_t)(v0 + 7), &demangling cache variable for type metadata for RendererContext?);
  uint64_t v1 = v0[10];
  if (v1)
  {
    uint64_t v2 = v0[11];
    __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
    if (v3)
    {
      uint64_t v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v3);

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for RendererContext?);
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 7), &demangling cache variable for type metadata for RendererContext?);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for RendererContext?);
  uint64_t v4 = 0;
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(id))v0[1];
  return v5(v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);
  uint64_t v18;

  outlined init with take of CGRect?(*(void *)(v0 + 264), v0 + 96);
  if (*(unsigned char *)(v0 + 128) == 1)
  {
    long long v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Image.renderedImage(in:)
                                                   + async function pointer to specialized Image.renderedImage(in:));
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 344) = v1;
    *uint64_t v1 = v0;
    v1[1] = specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    uint64_t v2 = *(void *)(v0 + 248);
    uint64_t v3 = *(void *)(v0 + 256);
    return v16(v3, v2);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 264);
    outlined init with copy of Shape(*(void *)(v0 + 248), *(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for Image);
    outlined init with take of CGRect?(v5, v0 + 136);
    if (*(unsigned char *)(v0 + 168))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      double v7 = *(double *)(v0 + 216);
      double v6 = *(double *)(v0 + 224);
      double v9 = *(double *)(v0 + 232);
      double v8 = *(double *)(v0 + 240);
    }
    else
    {
      double v9 = *(double *)(v0 + 296);
      double v8 = *(double *)(v0 + 304);
      double v7 = *(double *)(v0 + 280);
      double v6 = *(double *)(v0 + 288);
    }
    _s8PaperKit0A0VWOhTm_0(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for Image);
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
    double v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v10;
    *double v10 = v0;
    v10[1] = specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    uint64_t v11 = *(void *)(v0 + 320);
    char v12 = *(unsigned char *)(v0 + 130);
    char v13 = *(unsigned char *)(v0 + 129);
    uint64_t v14 = *(void *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 256);
    return v17(v0 + 16, v14, v15, v13, v12, v11, v7, v6, v9, v8);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t (*v3)(id);
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);
  uint64_t v17;

  uint64_t v1 = *(void **)(v0 + 352);
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v1);

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(id))(v0 + 8);
    return v3(v2);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 264);
    outlined init with copy of Shape(*(void *)(v0 + 248), *(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for Image);
    outlined init with take of CGRect?(v5, v0 + 136);
    if (*(unsigned char *)(v0 + 168))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      double v7 = *(double *)(v0 + 216);
      double v6 = *(double *)(v0 + 224);
      double v9 = *(double *)(v0 + 232);
      double v8 = *(double *)(v0 + 240);
    }
    else
    {
      double v9 = *(double *)(v0 + 296);
      double v8 = *(double *)(v0 + 304);
      double v7 = *(double *)(v0 + 280);
      double v6 = *(double *)(v0 + 288);
    }
    _s8PaperKit0A0VWOhTm_0(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for Image);
    swift_storeEnumTagMultiPayload();
    long long v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
    double v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v10;
    *double v10 = v0;
    v10[1] = specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    uint64_t v11 = *(void *)(v0 + 320);
    char v12 = *(unsigned char *)(v0 + 130);
    char v13 = *(unsigned char *)(v0 + 129);
    uint64_t v14 = *(void *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 256);
    return v16(v0 + 16, v14, v15, v13, v12, v11, v7, v6, v9, v8);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 320);
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);
  uint64_t v18;

  uint64_t v1 = v0;
  uint64_t v2 = v0 + 16;
  uint64_t v3 = *(void *)(v1 + 328);
  uint64_t v4 = *(void *)(v1 + 264);
  uint64_t v5 = *(void *)(v1 + 248);
  outlined init with take of CGRect?(v4, v1 + 96);
  outlined init with copy of Shape(v5, v3, (uint64_t (*)(void))type metadata accessor for Shape);
  outlined init with take of CGRect?(v4, v1 + 136);
  if (*(unsigned char *)(v1 + 168))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    double v7 = *(double *)(v1 + 216);
    double v6 = *(double *)(v1 + 224);
    double v9 = *(double *)(v1 + 232);
    double v8 = *(double *)(v1 + 240);
  }
  else
  {
    double v9 = *(double *)(v1 + 296);
    double v8 = *(double *)(v1 + 304);
    double v7 = *(double *)(v1 + 280);
    double v6 = *(double *)(v1 + 288);
  }
  _s8PaperKit0A0VWOhTm_0(*(void *)(v1 + 328), (uint64_t (*)(void))type metadata accessor for Shape);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  double v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 336) = v10;
  *double v10 = v1;
  v10[1] = specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  uint64_t v11 = *(void *)(v1 + 320);
  char v12 = *(unsigned char *)(v1 + 130);
  char v13 = *(unsigned char *)(v1 + 129);
  uint64_t v14 = *(void *)(v1 + 248);
  uint64_t v15 = *(void *)(v1 + 256);
  return v17(v2, v14, v15, v13, v12, v11, v7, v6, v9, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 320);
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t (*v5)(id);
  uint64_t v7;

  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)(v0 + 2), (uint64_t)(v0 + 7), &demangling cache variable for type metadata for RendererContext?);
  uint64_t v1 = v0[10];
  if (v1)
  {
    uint64_t v2 = v0[11];
    __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
    if (v3)
    {
      uint64_t v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v3);

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for RendererContext?);
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 7), &demangling cache variable for type metadata for RendererContext?);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for RendererContext?);
  uint64_t v4 = 0;
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(id))v0[1];
  return v5(v4);
}

uint64_t specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 352) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 304) = v14;
  *(void *)(v9 + 312) = v8;
  *(void *)(v9 + 288) = a7;
  *(void *)(v9 + 296) = a8;
  *(unsigned char *)(v9 + 170) = a5;
  *(unsigned char *)(v9 + 169) = a4;
  *(void *)(v9 + 272) = a3;
  *(void *)(v9 + 280) = a6;
  *(void *)(v9 + 256) = a1;
  *(void *)(v9 + 264) = a2;
  outlined init with take of CGRect?(a3, v9 + 216);
  long long v11 = *(_OWORD *)(v9 + 232);
  *(_OWORD *)(v9 + 320) = *(_OWORD *)(v9 + 216);
  *(_OWORD *)(v9 + 336) = v11;
  type metadata accessor for RendererOutput();
  *(void *)(v9 + 352) = swift_task_alloc();
  *(void *)(v9 + 360) = *(void *)(a6 - 8);
  *(void *)(v9 + 368) = swift_task_alloc();
  return MEMORY[0x270FA2498](CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)()
{
  outlined init with take of CGRect?(*(void *)(v0 + 272), v0 + 136);
  if (*(unsigned char *)(v0 + 168) == 1)
  {
    uint64_t v25 = *(void *)(v0 + 296);
    uint64_t v1 = *(void *)(v0 + 264);
    uint64_t v2 = type metadata accessor for Capsule();
    *(void *)(v0 + 40) = v2;
    *(void *)(v0 + 48) = swift_getWitnessTable();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(boxed_opaque_existential_1, v1, v2);
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 + 24) + **(int **)(v25 + 24));
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v4;
    *uint64_t v4 = v0;
    v4[1] = CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    uint64_t v5 = *(void *)(v0 + 296);
    uint64_t v6 = *(void *)(v0 + 280);
    return v24(v0 + 16, v6, v5);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 272);
    (*(void (**)(void, void, void))(*(void *)(v0 + 360) + 16))(*(void *)(v0 + 368), *(void *)(v0 + 256), *(void *)(v0 + 280));
    outlined init with take of CGRect?(v8, v0 + 176);
    if (*(unsigned char *)(v0 + 208))
    {
      double v9 = (*(double (**)(void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 280));
      double v11 = v10;
      double v13 = v12;
      double v15 = v14;
    }
    else
    {
      double v13 = *(double *)(v0 + 336);
      double v15 = *(double *)(v0 + 344);
      double v9 = *(double *)(v0 + 320);
      double v11 = *(double *)(v0 + 328);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 360) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 280));
    type metadata accessor for RendererOutput();
    swift_storeEnumTagMultiPayload();
    long long v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v16;
    *long long v16 = v0;
    v16[1] = CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    uint64_t v17 = *(void *)(v0 + 352);
    uint64_t v18 = *(void *)(v0 + 288);
    uint64_t v19 = *(void *)(v0 + 280);
    char v20 = *(unsigned char *)(v0 + 170);
    char v21 = *(unsigned char *)(v0 + 169);
    uint64_t v22 = *(void *)(v0 + 256);
    uint64_t v23 = *(void *)(v0 + 264);
    return CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(v0 + 56, v22, v23, v21, v20, v17, v19, v18, v9, v11, v13, v15);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t (*v3)(id);
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v1 = *(void **)(v0 + 384);
  if (v1)
  {
    uint64_t v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v1);

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(id))(v0 + 8);
    return v3(v2);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 272);
    (*(void (**)(void, void, void))(*(void *)(v0 + 360) + 16))(*(void *)(v0 + 368), *(void *)(v0 + 256), *(void *)(v0 + 280));
    outlined init with take of CGRect?(v5, v0 + 176);
    if (*(unsigned char *)(v0 + 208))
    {
      uint64_t v6 = (*(double (**)(void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 280));
      uint64_t v8 = v7;
      double v10 = v9;
      double v12 = v11;
    }
    else
    {
      double v10 = *(double *)(v0 + 336);
      double v12 = *(double *)(v0 + 344);
      uint64_t v6 = *(double *)(v0 + 320);
      uint64_t v8 = *(double *)(v0 + 328);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 360) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 280));
    type metadata accessor for RendererOutput();
    swift_storeEnumTagMultiPayload();
    double v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v13;
    *double v13 = v0;
    v13[1] = CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    double v14 = *(void *)(v0 + 352);
    double v15 = *(void *)(v0 + 288);
    long long v16 = *(void *)(v0 + 280);
    uint64_t v17 = *(unsigned char *)(v0 + 170);
    uint64_t v18 = *(unsigned char *)(v0 + 169);
    uint64_t v19 = *(void *)(v0 + 256);
    char v20 = *(void *)(v0 + 264);
    return CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(v0 + 56, v19, v20, v18, v17, v14, v16, v15, v6, v8, v10, v12);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 352);
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t (*v5)(id);
  uint64_t v7;

  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)(v0 + 7), (uint64_t)(v0 + 12), &demangling cache variable for type metadata for RendererContext?);
  uint64_t v1 = v0[15];
  if (v1)
  {
    uint64_t v2 = v0[16];
    __swift_project_boxed_opaque_existential_1(v0 + 12, v0[15]);
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
    if (v3)
    {
      uint64_t v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v3);

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 7), &demangling cache variable for type metadata for RendererContext?);
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 12), &demangling cache variable for type metadata for RendererContext?);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 7), &demangling cache variable for type metadata for RendererContext?);
  uint64_t v4 = 0;
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(id))v0[1];
  return v5(v4);
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1 + 16;
  *(void *)(*(void *)v1 + 384) = a1;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return MEMORY[0x270FA2498](CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  *(double *)(v11 + 24) = a9;
  *(double *)(v11 + 32) = a10;
  *(double *)(v11 + 40) = a11;
  *(unsigned char *)(v11 + 48) = 0;
  *(double *)(v11 + 16) = a8;
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v11 + 56) = v19;
  *uint64_t v19 = v11;
  v19[1] = CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(a1, a2, v11 + 16, a3, a4, a5, a6, a7);
}

uint64_t CanvasElementPDFRenderer.__allocating_init(bounds:scale:)(double a1, double a2, double a3, double a4, double a5)
{
  type metadata accessor for PDFRenderer();
  double v10 = (double *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  return specialized CanvasElementPDFRenderer.__allocating_init(renderer:)((uint64_t)v10);
}

uint64_t CanvasElementPDFRenderer.__allocating_init(bounds:format:)(void *a1, double a2, double a3, double a4, double a5)
{
  type metadata accessor for PDFRenderer();
  uint64_t v10 = swift_allocObject();
  *(double *)(v10 + 16) = a2;
  *(double *)(v10 + 24) = a3;
  *(double *)(v10 + 32) = a4;
  *(double *)(v10 + 40) = a5;
  *(void *)(v10 + 48) = 0x3FF0000000000000;
  uint64_t v11 = specialized CanvasElementPDFRenderer.__allocating_init(renderer:)(v10);

  return v11;
}

uint64_t CanvasElementPDFRenderer.pdfData(from:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CanvasElementImageRenderer.image(from:bounds:completion:)(a1, a2, a3, a4, (void (*)(char *, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:));
}

uint64_t CanvasElementImageRenderer.image(from:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t, uint64_t, uint64_t, double, double, double, double))
{
  uint64_t v22 = a5;
  outlined init with take of CGRect?(a2, (uint64_t)v27);
  double v9 = *(double *)v27;
  double v10 = *(double *)&v27[1];
  double v11 = *(double *)&v27[2];
  double v12 = *(double *)&v27[3];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  long long v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  outlined init with take of CGRect?(a2, (uint64_t)v28);
  if (v28[32])
  {
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    double v9 = v23;
    double v10 = v24;
    double v11 = v25;
    double v12 = v26;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    double v23 = v9;
    double v24 = v10;
    double v25 = v11;
    double v26 = v12;
  }
  v22(v19, a1, a3, a4, v9, v10, v11, v12);
  return _s8PaperKit0A0VWOhTm_0((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Paper);
}

uint64_t specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v43 = a2;
  uint64_t v41 = a1;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v12 = *(void *)(v42 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v42);
  uint64_t v14 = type metadata accessor for Paper();
  uint64_t v40 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v40 + 64);
  MEMORY[0x270FA5388](v14 - 8);
  long long v16 = &v36[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = &v36[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v38 = v19;
  char v20 = self;
  id v21 = objc_msgSend(v20, sel_currentTraitCollection);
  id v22 = objc_msgSend(v21, sel_layoutDirection);

  BOOL v39 = v22 == (id)1;
  id v23 = objc_msgSend(v20, sel_currentTraitCollection);
  id v24 = objc_msgSend(v23, sel_userInterfaceStyle);

  BOOL v37 = v24 == (id)2;
  uint64_t v25 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v19, 1, 1, v25);
  outlined init with copy of Shape(v41, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Paper);
  uint64_t v26 = v42;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(&v36[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)], v43, v42);
  unint64_t v27 = (*(unsigned __int8 *)(v40 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  unint64_t v28 = (v15 + *(unsigned __int8 *)(v12 + 80) + v27) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v29 = (v13 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  double v30 = (char *)swift_allocObject();
  *((void *)v30 + 2) = 0;
  *((void *)v30 + 3) = 0;
  *((void *)v30 + 4) = v44;
  outlined init with take of Paper((uint64_t)v16, (uint64_t)&v30[v27]);
  (*(void (**)(char *, unsigned char *, uint64_t))(v12 + 32))(&v30[v28], &v36[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)], v26);
  double v31 = (double *)&v30[v29];
  *double v31 = a5;
  v31[1] = a6;
  v31[2] = a7;
  v31[3] = a8;
  *((unsigned char *)v31 + 32) = v37;
  *((unsigned char *)v31 + 33) = v39;
  char v32 = &v30[(v29 + 41) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v33 = v46;
  *(void *)char v32 = v45;
  *((void *)v32 + 1) = v33;
  swift_retain();
  swift_retain();
  uint64_t v34 = (uint64_t)v38;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm((uint64_t)v38, (uint64_t)async function pointer to partial apply for specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:), (uint64_t)v30);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?(v34, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  return CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)&unk_26C152E08, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:));
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  uint64_t v64 = a7;
  uint64_t v62 = a6;
  uint64_t v63 = a8;
  uint64_t v57 = a5;
  uint64_t v66 = a3;
  uint64_t v67 = a4;
  uint64_t v59 = a1;
  uint64_t v60 = a2;
  uint64_t v68 = a14;
  uint64_t v61 = a13;
  uint64_t v58 = type metadata accessor for Capsule();
  uint64_t v19 = *(void *)(v58 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  MEMORY[0x270FA5388](v58);
  id v22 = (char *)&v52 - v21;
  BOOL v52 = (char *)&v52 - v21;
  uint64_t v23 = *(void *)(a5 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  MEMORY[0x270FA5388](v25);
  uint64_t v55 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v26 - 8);
  unint64_t v28 = (char *)&v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = v28;
  unint64_t v29 = self;
  id v30 = objc_msgSend(v29, sel_currentTraitCollection);
  id v31 = objc_msgSend(v30, sel_layoutDirection);

  BOOL v56 = v31 == (id)1;
  id v32 = objc_msgSend(v29, sel_currentTraitCollection);
  id v33 = objc_msgSend(v32, sel_userInterfaceStyle);

  BOOL v53 = v33 == (id)2;
  uint64_t v34 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v28, 1, 1, v34);
  id v35 = v55;
  uint64_t v36 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v55, v59, v57);
  BOOL v37 = v22;
  uint64_t v38 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v37, v60, v58);
  unint64_t v39 = (*(unsigned __int8 *)(v23 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  unint64_t v40 = (v24 + *(unsigned __int8 *)(v19 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v41 = (v20 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v42 = (char *)swift_allocObject();
  *((void *)v42 + 2) = 0;
  *((void *)v42 + 3) = 0;
  uint64_t v43 = v36;
  uint64_t v44 = v62;
  *((void *)v42 + 4) = v36;
  *((void *)v42 + 5) = v44;
  uint64_t v45 = v65;
  uint64_t v46 = v63;
  *((void *)v42 + 6) = v64;
  *((void *)v42 + 7) = v46;
  *((void *)v42 + 8) = v45;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v42[v39], v35, v43);
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v42[v40], v52, v38);
  os_log_t v47 = (double *)&v42[v41];
  *os_log_t v47 = a9;
  v47[1] = a10;
  v47[2] = a11;
  v47[3] = a12;
  *((unsigned char *)v47 + 32) = v53;
  *((unsigned char *)v47 + 33) = v56;
  uint64_t v48 = &v42[(v41 + 41) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v49 = v67;
  *(void *)uint64_t v48 = v66;
  *((void *)v48 + 1) = v49;
  swift_retain();
  swift_retain();
  uint64_t v50 = (uint64_t)v54;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm((uint64_t)v54, v68, (uint64_t)v42);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  v12[2] = v25;
  v12[3] = v26;
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, char, char, double, double, double, double))((char *)&async function pointer to specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                                             + async function pointer to specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:));
  uint64_t v21 = (void *)swift_task_alloc();
  v12[4] = v21;
  *uint64_t v21 = v12;
  v21[1] = specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:);
  return v23(a9, a10, a11, a12, a1, a2, a3, a4);
}

uint64_t specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = a2;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:), 0, 0);
}

uint64_t specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  unint64_t v1 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, unint64_t))(v0 + 16))(v2, v1);
  outlined consume of Data?(v2, v1);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  v12[2] = v24;
  v12[3] = v25;
  uint64_t v21 = (void *)swift_task_alloc();
  v12[4] = v21;
  *uint64_t v21 = v12;
  v21[1] = closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:);
  return CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(a9, a10, a11, a12, v26, v27, v28, v29, a1, a2, a3, a4);
}

uint64_t closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = a2;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:), 0, 0);
}

uint64_t specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, char a3, char a4, double a5, double a6, double a7, double a8)
{
  *(void *)(v9 + 152) = v8;
  *(unsigned char *)(v9 + 193) = a4;
  *(unsigned char *)(v9 + 192) = a3;
  *(double *)(v9 + 136) = a7;
  *(double *)(v9 + 144) = a8;
  *(double *)(v9 + 120) = a5;
  *(double *)(v9 + 128) = a6;
  *(void *)(v9 + 104) = a1;
  *(void *)(v9 + 112) = a2;
  *(void *)(v9 + 160) = type metadata accessor for RendererOutput();
  *(void *)(v9 + 168) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

uint64_t specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)()
{
  unint64_t v1 = *(void **)(v0 + 168);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF990]), sel_init);
  *(void *)(v0 + 176) = v2;
  *unint64_t v1 = v2;
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  id v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v4;
  *uint64_t v4 = v0;
  v4[1] = specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:);
  uint64_t v5 = *(void *)(v0 + 168);
  char v6 = *(unsigned char *)(v0 + 193);
  char v7 = *(unsigned char *)(v0 + 192);
  double v8 = *(double *)(v0 + 136);
  double v9 = *(double *)(v0 + 144);
  double v10 = *(double *)(v0 + 120);
  double v11 = *(double *)(v0 + 128);
  uint64_t v12 = *(void *)(v0 + 104);
  uint64_t v13 = *(void *)(v0 + 112);
  return v15(v0 + 16, v12, v13, v7, v6, v5, v10, v11, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  unint64_t v1 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, unint64_t);
  uint64_t v6;

  if (*(void *)(v0 + 40))
  {
    unint64_t v1 = *(void **)(v0 + 176);
    objc_msgSend(v1, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
    swift_dynamicCast();
    id v3 = *(void *)(v0 + 88);
    id v2 = *(void *)(v0 + 96);
  }
  else
  {

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
    id v3 = 0;
    id v2 = 0xF000000000000000;
  }
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  return v4(v3, v2);
}

uint64_t CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  *(void *)(v13 + 176) = a8;
  *(void *)(v13 + 184) = v12;
  *(void *)(v13 + 160) = a6;
  *(void *)(v13 + 168) = a7;
  *(void *)(v13 + 152) = a5;
  *(unsigned char *)(v13 + 225) = a4;
  *(unsigned char *)(v13 + 224) = a3;
  *(double *)(v13 + 136) = a11;
  *(double *)(v13 + 144) = a12;
  *(double *)(v13 + 120) = a9;
  *(double *)(v13 + 128) = a10;
  *(void *)(v13 + 104) = a1;
  *(void *)(v13 + 112) = a2;
  *(void *)(v13 + 192) = type metadata accessor for RendererOutput();
  *(void *)(v13 + 200) = swift_task_alloc();
  return MEMORY[0x270FA2498](CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

uint64_t CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)()
{
  unint64_t v1 = *(void **)(v0 + 200);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF990]), sel_init);
  *(void *)(v0 + 208) = v2;
  *unint64_t v1 = v2;
  swift_storeEnumTagMultiPayload();
  id v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v4;
  *uint64_t v4 = v0;
  v4[1] = CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 152);
  char v8 = *(unsigned char *)(v0 + 225);
  char v9 = *(unsigned char *)(v0 + 224);
  double v10 = *(double *)(v0 + 136);
  double v11 = *(double *)(v0 + 144);
  double v12 = *(double *)(v0 + 120);
  double v13 = *(double *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 112);
  return CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(v0 + 16, v14, v15, v9, v8, v5, v7, v6, v12, v13, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  unint64_t v1 = *(void *)(*(void *)v0 + 200);
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, unint64_t);
  uint64_t v6;

  if (*(void *)(v0 + 40))
  {
    unint64_t v1 = *(void **)(v0 + 208);
    objc_msgSend(v1, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
    swift_dynamicCast();
    id v3 = *(void *)(v0 + 88);
    id v2 = *(void *)(v0 + 96);
  }
  else
  {

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
    id v3 = 0;
    id v2 = 0xF000000000000000;
  }
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  return v4(v3, v2);
}

uint64_t CanvasElementPDFRenderer.writePDF(from:bounds:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a5;
  outlined init with take of CGRect?(a2, (uint64_t)v27);
  double v9 = *(double *)v27;
  double v10 = *(double *)&v27[1];
  double v11 = *(double *)&v27[2];
  double v12 = *(double *)&v27[3];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  outlined init with take of CGRect?(a2, (uint64_t)v28);
  if (v28[32])
  {
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    double v9 = v23;
    double v10 = v24;
    double v11 = v25;
    double v12 = v26;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    double v23 = v9;
    double v24 = v10;
    double v25 = v11;
    double v26 = v12;
  }
  specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)((uint64_t)v19, a1, a3, a4, v22, v9, v10, v11, v12);
  return _s8PaperKit0A0VWOhTm_0((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Paper);
}

uint64_t CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  *(void *)(v7 + 152) = a4;
  *(void *)(v7 + 160) = v6;
  *(unsigned char *)(v7 + 50) = a6;
  *(unsigned char *)(v7 + 49) = a5;
  *(void *)(v7 + 136) = a2;
  *(void *)(v7 + 144) = a3;
  *(void *)(v7 + 128) = a1;
  outlined init with take of CGRect?(a3, v7 + 56);
  *(_OWORD *)(v7 + 168) = *(_OWORD *)(v7 + 56);
  *(_OWORD *)(v7 + 184) = *(_OWORD *)(v7 + 72);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  *(void *)(v7 + 200) = v8;
  *(void *)(v7 + 208) = *(void *)(v8 - 8);
  *(void *)(v7 + 216) = swift_task_alloc();
  type metadata accessor for Paper();
  *(void *)(v7 + 224) = swift_task_alloc();
  return MEMORY[0x270FA2498](CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:), 0, 0);
}

uint64_t CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:)()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 144);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.root.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v2);
  outlined init with take of CGRect?(v4, v0 + 16);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 200);
  if (*(unsigned char *)(v0 + 48))
  {
    double v9 = (double *)(v0 + 96);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v10 = (double *)(v0 + 104);
    double v11 = (double *)(v0 + 112);
    double v12 = (double *)(v0 + 120);
  }
  else
  {
    double v9 = (double *)(v0 + 168);
    long long v27 = *(_OWORD *)(v0 + 168);
    double v12 = (double *)(v0 + 192);
    uint64_t v13 = *(void *)(v0 + 192);
    double v11 = (double *)(v0 + 184);
    uint64_t v14 = *(void *)(v0 + 184);
    uint64_t v10 = (double *)(v0 + 176);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    *(_OWORD *)(v0 + 96) = v27;
    *(void *)(v0 + 112) = v14;
    *(void *)(v0 + 120) = v13;
  }
  double v15 = *v9;
  double v16 = *v10;
  double v17 = *v11;
  double v18 = *v12;
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, char, double, double, double, double))((char *)&async function pointer to specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:) + async function pointer to specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:));
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v19;
  *uint64_t v19 = v0;
  v19[1] = CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:);
  uint64_t v20 = *(void *)(v0 + 224);
  char v21 = *(unsigned char *)(v0 + 50);
  char v22 = *(unsigned char *)(v0 + 49);
  uint64_t v23 = *(void *)(v0 + 152);
  uint64_t v24 = *(void *)(v0 + 128);
  uint64_t v25 = *(void *)(v0 + 136);
  return v28(v24, v20, v25, v23, v22, v21, v15, v16, v17, v18);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *(void *)(*v0 + 224);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for Paper);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v59 = a3;
  uint64_t v56 = a1;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v63 = v13;
  uint64_t v64 = v14;
  uint64_t v58 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13);
  uint64_t v55 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v48 = v16;
  uint64_t v54 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v54 + 64);
  MEMORY[0x270FA5388](v16);
  uint64_t v49 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Paper();
  uint64_t v52 = *(void *)(v18 - 8);
  uint64_t v19 = *(void *)(v52 + 64);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v47 = (uint64_t)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v20 - 8);
  char v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect v51 = v22;
  uint64_t v23 = self;
  id v24 = objc_msgSend(v23, sel_currentTraitCollection);
  id v25 = objc_msgSend(v24, sel_layoutDirection);

  BOOL v53 = v25 == (id)1;
  id v26 = objc_msgSend(v23, sel_currentTraitCollection);
  id v27 = objc_msgSend(v26, sel_userInterfaceStyle);

  BOOL v50 = v27 == (id)2;
  uint64_t v28 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v22, 1, 1, v28);
  outlined init with copy of Shape(v56, (uint64_t)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for Paper);
  uint64_t v29 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))((char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v57, v16);
  uint64_t v30 = v64;
  id v31 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v55, v59, v63);
  unint64_t v32 = (*(unsigned __int8 *)(v52 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  uint64_t v33 = v29;
  unint64_t v34 = (v19 + *(unsigned __int8 *)(v29 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v35 = (v17 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (*(unsigned __int8 *)(v30 + 80) + v35 + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v37 = v36 + v58;
  unint64_t v38 = (v36 + v58 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (char *)swift_allocObject();
  *((void *)v39 + 2) = 0;
  *((void *)v39 + 3) = 0;
  *((void *)v39 + 4) = v60;
  outlined init with take of Paper(v47, (uint64_t)&v39[v32]);
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v39[v34], v49, v48);
  unint64_t v40 = (double *)&v39[v35];
  *unint64_t v40 = a6;
  v40[1] = a7;
  v40[2] = a8;
  v40[3] = a9;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v39[v36], v31, v63);
  unint64_t v41 = &v39[v37];
  *unint64_t v41 = v50;
  v41[1] = v53;
  uint64_t v42 = &v39[v38];
  uint64_t v43 = v62;
  *(void *)uint64_t v42 = v61;
  *((void *)v42 + 1) = v43;
  swift_retain();
  swift_retain();
  uint64_t v44 = (uint64_t)v51;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm((uint64_t)v51, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:), (uint64_t)v39);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  uint64_t v68 = a8;
  uint64_t v66 = a7;
  uint64_t v58 = a6;
  uint64_t v70 = a4;
  uint64_t v71 = a5;
  uint64_t v65 = a3;
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t v67 = a13;
  uint64_t v75 = type metadata accessor for URL();
  uint64_t v73 = *(void *)(v75 - 8);
  uint64_t v64 = *(void *)(v73 + 64);
  MEMORY[0x270FA5388](v75);
  uint64_t v74 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for Capsule();
  uint64_t v72 = *(void *)(v60 - 8);
  uint64_t v19 = *(void *)(v72 + 64);
  MEMORY[0x270FA5388](v60);
  uint64_t v21 = (char *)&v55 - v20;
  uint64_t v56 = (char *)&v55 - v20;
  uint64_t v22 = *(void *)(a6 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  MEMORY[0x270FA5388](v24);
  uint64_t v55 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v25 - 8);
  id v27 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v27;
  uint64_t v28 = self;
  id v29 = objc_msgSend(v28, sel_currentTraitCollection);
  id v30 = objc_msgSend(v29, sel_layoutDirection);

  BOOL v61 = v30 == (id)1;
  id v31 = objc_msgSend(v28, sel_currentTraitCollection);
  id v32 = objc_msgSend(v31, sel_userInterfaceStyle);

  BOOL v57 = v32 == (id)2;
  uint64_t v33 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v27, 1, 1, v33);
  uint64_t v34 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))((char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v62, v58);
  uint64_t v35 = v72;
  uint64_t v36 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v21, v63, v60);
  uint64_t v37 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v74, v65, v75);
  unint64_t v38 = (*(unsigned __int8 *)(v22 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v39 = (v23 + v38 + *(unsigned __int8 *)(v35 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  unint64_t v40 = (v19 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v41 = (*(unsigned __int8 *)(v37 + 80) + v40 + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v42 = v41 + v64;
  unint64_t v43 = (v41 + v64 + 9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = (char *)swift_allocObject();
  *((void *)v44 + 2) = 0;
  *((void *)v44 + 3) = 0;
  uint64_t v45 = v34;
  uint64_t v46 = v66;
  *((void *)v44 + 4) = v34;
  *((void *)v44 + 5) = v46;
  uint64_t v47 = v69;
  uint64_t v48 = v67;
  *((void *)v44 + 6) = v68;
  *((void *)v44 + 7) = v48;
  *((void *)v44 + 8) = v47;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v44[v38], v55, v45);
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(&v44[v39], v56, v36);
  uint64_t v49 = (double *)&v44[v40];
  *uint64_t v49 = a9;
  v49[1] = a10;
  v49[2] = a11;
  v49[3] = a12;
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(&v44[v41], v74, v75);
  BOOL v50 = &v44[v42];
  *BOOL v50 = v57;
  v50[1] = v61;
  CGRect v51 = &v44[v43];
  uint64_t v52 = v71;
  *(void *)CGRect v51 = v70;
  *((void *)v51 + 1) = v52;
  swift_retain();
  swift_retain();
  uint64_t v53 = (uint64_t)v59;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm((uint64_t)v59, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:), (uint64_t)v44);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  v12[2] = v27;
  v12[3] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v21 = swift_task_alloc();
  v12[4] = v21;
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, char, double, double, double, double))((char *)&async function pointer to specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:) + async function pointer to specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:));
  uint64_t v22 = (void *)swift_task_alloc();
  v12[5] = v22;
  *uint64_t v22 = v12;
  v22[1] = specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:);
  return v24(v21, a9, a10, a11, a12, v26, a1, a2, a3, a4);
}

uint64_t specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  outlined destroy of StocksKitCurrencyCache.Provider?(v1, &demangling cache variable for type metadata for URL?);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  v12[2] = v26;
  v12[3] = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v19 = swift_task_alloc();
  v12[4] = v19;
  uint64_t v20 = (void *)swift_task_alloc();
  v12[5] = v20;
  *uint64_t v20 = v12;
  v20[1] = closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:);
  return CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)(v19, a9, a10, a11, a12, v25, v28, v29, a1, a2, a3, a4);
}

uint64_t closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:), 0, 0);
}

uint64_t specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, double a7, double a8, double a9, double a10)
{
  *(unsigned char *)(v11 + 185) = a6;
  *(unsigned char *)(v11 + 184) = a5;
  *(void *)(v11 + 112) = a4;
  *(void *)(v11 + 120) = v10;
  *(double *)(v11 + 96) = a9;
  *(double *)(v11 + 104) = a10;
  *(double *)(v11 + 80) = a7;
  *(double *)(v11 + 88) = a8;
  *(void *)(v11 + 64) = a2;
  *(void *)(v11 + 72) = a3;
  *(void *)(v11 + 56) = a1;
  *(void *)(v11 + 128) = type metadata accessor for RendererOutput();
  *(void *)(v11 + 136) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:), 0, 0);
}

uint64_t specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = type metadata accessor for URL();
  *(void *)(v0 + 144) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v0 + 152) = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 160) = v5;
  *(void *)(v0 + 168) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v2, v3);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v6;
  *uint64_t v6 = v0;
  v6[1] = specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:);
  uint64_t v7 = *(void *)(v0 + 136);
  char v8 = *(unsigned char *)(v0 + 185);
  char v9 = *(unsigned char *)(v0 + 184);
  double v10 = *(double *)(v0 + 96);
  double v11 = *(double *)(v0 + 104);
  double v12 = *(double *)(v0 + 80);
  double v13 = *(double *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 64);
  uint64_t v15 = *(void *)(v0 + 72);
  return v17(v0 + 16, v14, v15, v9, v8, v7, v12, v13, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 40);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
  if (v1)
  {
    (*(void (**)(void, void, void))(v0 + 160))(*(void *)(v0 + 56), *(void *)(v0 + 112), *(void *)(v0 + 144));
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 1;
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 152) + 56))(*(void *)(v0 + 56), v2, 1, *(void *)(v0 + 144));
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  *(void *)(v13 + 144) = v17;
  *(void *)(v13 + 152) = v12;
  *(void *)(v13 + 128) = a8;
  *(void *)(v13 + 136) = v16;
  *(unsigned char *)(v13 + 217) = a6;
  *(unsigned char *)(v13 + 216) = a5;
  *(void *)(v13 + 112) = a4;
  *(void *)(v13 + 120) = a7;
  *(double *)(v13 + 96) = a11;
  *(double *)(v13 + 104) = a12;
  *(double *)(v13 + 80) = a9;
  *(double *)(v13 + 88) = a10;
  *(void *)(v13 + 64) = a2;
  *(void *)(v13 + 72) = a3;
  *(void *)(v13 + 56) = a1;
  *(void *)(v13 + 160) = type metadata accessor for RendererOutput();
  *(void *)(v13 + 168) = swift_task_alloc();
  return MEMORY[0x270FA2498](CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:), 0, 0);
}

uint64_t CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = type metadata accessor for URL();
  *(void *)(v0 + 176) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v0 + 184) = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 192) = v5;
  *(void *)(v0 + 200) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v2, v3);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v6;
  *uint64_t v6 = v0;
  v6[1] = CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 120);
  char v10 = *(unsigned char *)(v0 + 217);
  char v11 = *(unsigned char *)(v0 + 216);
  double v12 = *(double *)(v0 + 96);
  double v13 = *(double *)(v0 + 104);
  double v14 = *(double *)(v0 + 80);
  double v15 = *(double *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 64);
  uint64_t v17 = *(void *)(v0 + 72);
  return CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(v0 + 16, v16, v17, v11, v10, v7, v9, v8, v14, v15, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for RendererOutput);
  return MEMORY[0x270FA2498](CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 40);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
  if (v1)
  {
    (*(void (**)(void, void, void))(v0 + 192))(*(void *)(v0 + 56), *(void *)(v0 + 112), *(void *)(v0 + 176));
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 1;
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 184) + 56))(*(void *)(v0 + 56), v2, 1, *(void *)(v0 + 176));
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t CanvasElementImageRenderer.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return v0;
}

uint64_t CanvasElementImageRenderer.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

unint64_t type metadata accessor for UIGraphicsImageRendererFormat()
{
  unint64_t result = lazy cache variable for type metadata for UIGraphicsImageRendererFormat;
  if (!lazy cache variable for type metadata for UIGraphicsImageRendererFormat)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIGraphicsImageRendererFormat);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Paper and conformance Paper()
{
  unint64_t result = lazy protocol witness table cache variable for type Paper and conformance Paper;
  if (!lazy protocol witness table cache variable for type Paper and conformance Paper)
  {
    type metadata accessor for Paper();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper);
  }
  return result;
}

uint64_t partial apply for closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v6 = *(void *)(type metadata accessor for Capsule() - 8);
  unint64_t v7 = (v5 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = v1[2];
  uint64_t v20 = v1[3];
  uint64_t v19 = v1[8];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (uint64_t)v1 + v7;
  double v11 = *(double *)((char *)v1 + v8);
  double v12 = *(double *)((char *)v1 + v8 + 8);
  double v13 = *(double *)((char *)v1 + v8 + 16);
  double v14 = *(double *)((char *)v1 + v8 + 24);
  char v15 = *((unsigned char *)v1 + v8 + 32);
  char v16 = *((unsigned char *)v1 + v8 + 33);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v17;
  *uint64_t v17 = v2;
  v17[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(v11, v12, v13, v14, a1, v21, v20, v19, v9, v10, v15, v16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 48) = a1;
  unint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(_OWORD **)(*v0 + 48);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  long long v3 = *(_OWORD *)(v1 + 32);
  _OWORD *v2 = *(_OWORD *)(v1 + 16);
  v2[1] = v3;
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t specialized Image.renderedImage(in:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  v2[3] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc();
  (*(void (**)(void))(v4 + 16))();
  return MEMORY[0x270FA2498](specialized Image.renderedImage(in:), 0, 0);
}

uint64_t specialized Image.renderedImage(in:)()
{
  if (specialized ContainerCanvasElement.hasMarkup(in:)(v0[6]))
  {
LABEL_4:
    (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3(0);
  }
  uint64_t v1 = v0[3];
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  uint64_t v2 = type metadata accessor for CRAssetOrData();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[3], &demangling cache variable for type metadata for CRAssetOrData?);
    goto LABEL_4;
  }
  unint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *unint64_t v5 = v0;
  v5[1] = specialized Image.renderedImage(in:);
  return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 0, 1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  void *v5;
  uint64_t v6;

  if (specialized ContainerCanvasElement.hasMarkup(in:)(v0[7], v0[2], v0[3], v0[4]))
  {
LABEL_4:
    (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[3]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3(0);
  }
  uint64_t v1 = v0[5];
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  uint64_t v2 = type metadata accessor for CRAssetOrData();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[5], &demangling cache variable for type metadata for CRAssetOrData?);
    goto LABEL_4;
  }
  unint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *unint64_t v5 = v0;
  v5[1] = specialized Image.renderedImage(in:);
  return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 0, 1);
}

uint64_t specialized Image.renderedImage(in:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 24);
  uint64_t v5 = *v1;
  swift_task_dealloc();
  _s8PaperKit0A0VWOhTm_0(v4, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  (*(void (**)(void, void))(v3[5] + 8))(v3[6], v3[4]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v6(a1);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  uint64_t v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v5 = *v1;
  swift_task_dealloc();
  _s8PaperKit13CRAssetOrDataOWOhTm_0(v4, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  (*(void (**)(void, void))(v3[6] + 8))(v3[7], v3[3]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v6(a1);
}

uint64_t specialized CanvasElementPDFRenderer.__allocating_init(renderer:)(uint64_t a1)
{
  v6[3] = type metadata accessor for PDFRenderer();
  v6[4] = &protocol witness table for PDFRenderer;
  v6[0] = a1;
  type metadata accessor for CanvasElementPDFRenderer();
  uint64_t v2 = swift_allocObject();
  outlined init with copy of FindResult((uint64_t)v6, (uint64_t)v5);
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(unsigned char *)(v2 + 72) = PKIsSixChannelBlendEnabledInPaper();
  outlined init with copy of FindResult((uint64_t)v5, v2 + 16);
  unsigned __int8 v3 = objc_msgSend(self, sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  *(unsigned char *)(v2 + 73) = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v2;
}

uint64_t objectdestroyTm_2()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 72) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 41) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();
  return MEMORY[0x270FA0238](v0, v11, v10);
}

uint64_t partial apply for closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[7];
  uint64_t v22 = v0[5];
  uint64_t v23 = v0[6];
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Capsule() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 41) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (uint64_t)v0 + v4;
  uint64_t v11 = (uint64_t)v0 + v7;
  double v12 = *(double *)((char *)v0 + v8);
  double v13 = *(double *)((char *)v0 + v8 + 8);
  double v14 = *(double *)((char *)v0 + v8 + 16);
  double v15 = *(double *)((char *)v0 + v8 + 24);
  char v16 = *((unsigned char *)v0 + v8 + 32);
  char v17 = *((unsigned char *)v0 + v8 + 33);
  uint64_t v18 = swift_task_alloc();
  long long v19 = *(_OWORD *)((char *)v0 + v9);
  *(void *)(v1 + 16) = v18;
  *(void *)uint64_t v18 = v1;
  *(void *)(v18 + 8) = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  *(_OWORD *)(v18 + 16) = v19;
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v18 + 32) = v20;
  *uint64_t v20 = v18;
  v20[1] = closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:);
  return CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(v10, v11, v16, v17, v2, v22, v23, v3, v12, v13, v14, v15);
}

uint64_t sub_20C3A9FAC()
{
  uint64_t v17 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 72) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v16 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v16 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  unint64_t v8 = (*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v8 + v11 + 32) & ~v11;
  uint64_t v15 = v2 | v11 | v6 | 7;
  unint64_t v13 = ((*(void *)(v10 + 64) + v12 + 9) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  swift_release();
  return MEMORY[0x270FA0238](v0, v13, v15);
}

uint64_t partial apply for closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v1[4] - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(type metadata accessor for Capsule() - 8);
  unint64_t v8 = (v6 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v24 = v1[2];
  uint64_t v23 = v1[3];
  uint64_t v12 = v1[8];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + v8;
  double v15 = *(double *)((char *)v1 + v9);
  double v16 = *(double *)((char *)v1 + v9 + 8);
  double v17 = *(double *)((char *)v1 + v9 + 16);
  double v18 = *(double *)((char *)v1 + v9 + 24);
  uint64_t v19 = (uint64_t)v1 + v11;
  char v20 = *((unsigned char *)v1 + v11 + *(void *)(v10 + 64));
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v21;
  *uint64_t v21 = v3;
  v21[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(v15, v16, v17, v18, a1, v24, v23, v12, v13, v14, v19, v20);
}

id sub_20C3AA438@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 56);
  *a2 = v4;
  return v4;
}

id sub_20C3AA494@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 64);
  *a2 = v4;
  return v4;
}

uint64_t sub_20C3AA4F0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 72);
  return result;
}

uint64_t sub_20C3AA538(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 72) = v2;
  return result;
}

uint64_t type metadata accessor for CanvasElementRenderer()
{
  return self;
}

uint64_t method lookup function for CanvasElementRenderer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CanvasElementRenderer);
}

uint64_t dispatch thunk of CanvasElementRenderer.backgroundColor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of CanvasElementRenderer.backgroundColor.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of CanvasElementRenderer.backgroundColor.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of CanvasElementRenderer.tintColor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of CanvasElementRenderer.tintColor.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of CanvasElementRenderer.tintColor.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of CanvasElementRenderer.sixChannelBlending.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of CanvasElementRenderer.sixChannelBlending.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of CanvasElementRenderer.sixChannelBlending.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t type metadata accessor for CanvasElementImageRenderer()
{
  return self;
}

uint64_t method lookup function for CanvasElementImageRenderer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CanvasElementImageRenderer);
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image(from:bounds:completion:)(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 208);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  char v8 = v3;
  return v4(a1, v7);
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v14 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v10 = *((void *)a2 + 3);
  char v11 = *((unsigned char *)a2 + 32);
  double v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 216)
                                                                   + **(int **)(*(void *)v4 + 216));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 56) = v12;
  *(_OWORD *)(v5 + 16) = v14;
  *(void *)(v5 + 32) = v9;
  *(void *)(v5 + 40) = v10;
  *(unsigned char *)(v5 + 48) = v11;
  *uint64_t v12 = v5;
  v12[1] = CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v15(a1, v5 + 16, a3, a4);
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v20 = *a3;
  uint64_t v15 = *((void *)a3 + 2);
  uint64_t v16 = *((void *)a3 + 3);
  char v17 = *((unsigned char *)a3 + 32);
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v9 + 232) + **(int **)(*(void *)v9 + 232));
  double v18 = (void *)swift_task_alloc();
  *(void *)(v10 + 56) = v18;
  *(_OWORD *)(v10 + 16) = v20;
  *(void *)(v10 + 32) = v15;
  *(void *)(v10 + 40) = v16;
  *(unsigned char *)(v10 + 48) = v17;
  *double v18 = v10;
  v18[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v21(a1, a2, v10 + 16, a4, a5, a6, a7, a8, a9);
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  id v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)(*(void *)v12 + 240) + **(int **)(*(void *)v12 + 240));
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v13 + 16) = v26;
  *uint64_t v26 = v13;
  v26[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  v27.n128_f64[0] = a9;
  v28.n128_f64[0] = a10;
  v29.n128_f64[0] = a11;
  v30.n128_f64[0] = a12;
  return v32(a1, a2, a3, a4, a5, a6, a7, a8, v27, v28, v29, v30);
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  char v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t type metadata accessor for CanvasElementPDFRenderer()
{
  return self;
}

uint64_t method lookup function for CanvasElementPDFRenderer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CanvasElementPDFRenderer);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.pdfData(from:bounds:completion:)(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 208);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  char v8 = v3;
  return v4(a1, v7);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  id v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)(*(void *)v12 + 224) + **(int **)(*(void *)v12 + 224));
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v13 + 16) = v26;
  *uint64_t v26 = v13;
  v26[1] = dispatch thunk of CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:);
  v27.n128_f64[0] = a9;
  v28.n128_f64[0] = a10;
  v29.n128_f64[0] = a11;
  v30.n128_f64[0] = a12;
  return v32(a1, a2, a3, a4, a5, a6, a7, a8, v27, v28, v29, v30);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.writePDF(from:bounds:to:completion:)(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 232);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  char v8 = v3;
  return v4(a1, v7);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v18 = *a3;
  uint64_t v13 = *((void *)a3 + 2);
  uint64_t v14 = *((void *)a3 + 3);
  char v15 = *((unsigned char *)a3 + 32);
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v6 + 240)
                                                                                     + **(int **)(*(void *)v6 + 240));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v7 + 56) = v16;
  *(_OWORD *)(v7 + 16) = v18;
  *(void *)(v7 + 32) = v13;
  *(void *)(v7 + 40) = v14;
  *(unsigned char *)(v7 + 48) = v15;
  *uint64_t v16 = v7;
  v16[1] = dispatch thunk of CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:);
  return v19(a1, a2, v7 + 16, a4, a5, a6);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  id v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, uint64_t, uint64_t))(*(void *)(*(void *)v14 + 256) + **(int **)(*(void *)v14 + 256));
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v15 + 16) = v26;
  *uint64_t v26 = v15;
  v26[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  v27.n128_f64[0] = a9;
  v28.n128_f64[0] = a10;
  v29.n128_f64[0] = a11;
  v30.n128_f64[0] = a12;
  return v32(a1, a2, a3, a4, a5, a6, a7, a8, v27, v28, v29, v30, a13, a14);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  long long v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  void *v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_20C3AB69C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5Tu);
  return v6(a1, v4);
}

uint64_t _s8PaperKit0A0VWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Shape(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_20C3AB9C4()
{
  uint64_t v1 = (int *)(type metadata accessor for Paper() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v5 = *(void *)(v31 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v28 = (v4 + v6) & ~v6;
  unint64_t v7 = (*(void *)(v5 + 64) + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v30 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v7 + v9 + 32) & ~v9;
  uint64_t v29 = v2 | v9 | v6 | 7;
  unint64_t v27 = ((*(void *)(v8 + 64) + v10 + 9) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v11 = v0 + v3;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v11 + v1[7], v12);
  uint64_t v14 = v11 + v1[8];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = v11 + v1[9];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = v11 + v1[10];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = v11 + v1[11];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  uint64_t v22 = v11 + v1[12];
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  uint64_t v24 = v11 + v1[13];
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v28, v31);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v10, v30);
  swift_release();
  return MEMORY[0x270FA0238](v0, v27, v29);
}

uint64_t outlined init with take of Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Paper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Paper() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v1[3];
  uint64_t v21 = v1[2];
  uint64_t v12 = v1[4];
  double v13 = *(double *)((char *)v1 + v8);
  double v14 = *(double *)((char *)v1 + v8 + 8);
  double v15 = *(double *)((char *)v1 + v8 + 16);
  double v16 = *(double *)((char *)v1 + v8 + 24);
  uint64_t v17 = (uint64_t)v1 + v10;
  char v18 = *((unsigned char *)v1 + v10 + *(void *)(v9 + 64));
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v19;
  *uint64_t v19 = v2;
  v19[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(v13, v14, v15, v16, a1, v21, v11, v12, (uint64_t)v1 + v4, (uint64_t)v1 + v7, v17, v18);
}

uint64_t sub_20C3AC080()
{
  uint64_t v1 = (int *)(type metadata accessor for Paper() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v7) & ~v7;
  unint64_t v25 = ((((*(void *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 41) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v26 = v2 | v7 | 7;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v9 = v0 + v3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v9 + v1[7], v10);
  uint64_t v12 = v9 + v1[8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = v9 + v1[9];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = v9 + v1[10];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = v9 + v1[11];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = v9 + v1[12];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  uint64_t v22 = v9 + v1[13];
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);
  swift_release();
  return MEMORY[0x270FA0238](v0, v25, v26);
}

uint64_t partial apply for specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for Paper() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 41) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v0 + v6;
  double v10 = *(double *)(v0 + v7);
  double v11 = *(double *)(v0 + v7 + 8);
  double v12 = *(double *)(v0 + v7 + 16);
  double v13 = *(double *)(v0 + v7 + 24);
  char v14 = *(unsigned char *)(v0 + v7 + 32);
  char v15 = *(unsigned char *)(v0 + v7 + 33);
  uint64_t v16 = swift_task_alloc();
  long long v17 = *(_OWORD *)(v0 + v8);
  *(void *)(v1 + 16) = v16;
  *(void *)uint64_t v16 = v1;
  *(void *)(v16 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(_OWORD *)(v16 + 16) = v17;
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, char, char, double, double, double, double))((char *)&async function pointer to specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                                             + async function pointer to specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v16 + 32) = v18;
  *uint64_t v18 = v16;
  v18[1] = specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:);
  return v20(v0 + v3, v9, v14, v15, v10, v11, v12, v13);
}

void closure #1 in variable initialization expression of CompactTextStyleView.image()
{
  uint64_t v0 = *MEMORY[0x263F83570];
  double v1 = *MEMORY[0x263F81840];
  uint64_t v2 = (void *)*MEMORY[0x263F83470];
  unint64_t v3 = self;
  id v4 = v2;
  id v5 = objc_msgSend(v3, sel_traitCollectionWithPreferredContentSizeCategory_, v4);
  id v6 = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, v0, v1);
  if (!v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v7 = v6;
  id v8 = objc_msgSend(v6, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v5);

  if (!v8)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  id v9 = objc_msgSend(self, sel_configurationWithFont_scale_, v8, 1);

  id v10 = v9;
  double v11 = (void *)MEMORY[0x21054D080](0xD000000000000015, 0x800000020C8522C0);
  id v12 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v11, v10);

  if (v12)
  {

    return;
  }
LABEL_7:
  __break(1u);
}

void CompactTextStyleView.didTapSelf()()
{
  double v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))&v0[OBJC_IVAR____TtC8PaperKit20CompactTextStyleView_viewControllerProvider])();
  if (v2)
  {
    unint64_t v3 = (void *)v2;
    id v4 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit20CompactTextStyleView_textStyleView];
    id v5 = (objc_class *)type metadata accessor for TextStyleViewController();
    id v6 = (char *)objc_allocWithZone(v5);
    *(void *)&v6[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_contentViewMargin] = 0x4028000000000000;
    *(_OWORD *)&v6[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_preferredPopoverSize] = xmmword_20C837350;
    *(void *)&v6[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_textStyleView] = v4;
    v17.receiver = v6;
    v17.super_class = v5;
    id v7 = v4;
    id v8 = objc_msgSendSuper2(&v17, sel_initWithNibName_bundle_, 0, 0);
    objc_msgSend(v8, sel_setModalPresentationStyle_, 7, v17.receiver, v17.super_class);
    id v9 = objc_msgSend(v8, sel_popoverPresentationController);
    if (v9)
    {
      id v10 = v9;
      objc_msgSend(v9, sel_setSourceView_, v1);
    }
    id v11 = objc_msgSend(v8, sel_popoverPresentationController);
    if (v11)
    {
      id v12 = v11;
      objc_msgSend(v1, sel_bounds);
      CGRect v19 = CGRectInset(v18, -2.0, -2.0);
      objc_msgSend(v12, sel_setSourceRect_, v19.origin.x, v19.origin.y, v19.size.width, v19.size.height);
    }
    id v13 = objc_msgSend(v8, sel_popoverPresentationController);
    if (v13)
    {
      char v14 = v13;
      objc_msgSend(v13, sel_setDelegate_, v1);
    }
    id v15 = objc_msgSend(v8, sel_popoverPresentationController);
    if (v15)
    {
      uint64_t v16 = v15;
      objc_msgSend(v15, sel__setIgnoresKeyboardNotifications_, 1);
    }
    objc_msgSend(v3, sel_presentViewController_animated_completion_, v8, 1, 0);
  }
}

void CompactTextStyleView.selectedTextStyles.setter(uint64_t a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)(*(void *)&v2[OBJC_IVAR____TtC8PaperKit20CompactTextStyleView_textStyleView] + *a2) = a1;
  TextStyleView.updateUI()();
  v9.receiver = v2;
  v9.super_class = ObjectType;
  LODWORD(a2) = objc_msgSendSuper2(&v9, sel_isHighlighted);
  id v6 = self;
  id v7 = &selRef_secondarySystemFillColor;
  if (!a2) {
    id v7 = &selRef_quaternarySystemFillColor;
  }
  id v8 = [v6 *v7];
  objc_msgSend(v2, sel_setBackgroundColor_, v8);
}

uint64_t type metadata accessor for CompactTextStyleView()
{
  return self;
}

uint64_t protocol witness for TextStyleWidget.selectedTextStyles.getter in conformance CompactTextStyleView()
{
  return *(void *)(*(void *)(v0 + OBJC_IVAR____TtC8PaperKit20CompactTextStyleView_textStyleView)
                   + OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles);
}

void protocol witness for TextStyleWidget.selectedTextStyles.setter in conformance CompactTextStyleView(uint64_t a1)
{
}

void protocol witness for TextStyleWidget.allowedTextStyles.setter in conformance CompactTextStyleView(uint64_t a1)
{
}

Swift::Void __swiftcall CanvasGenerationTool.generationTool(_:)(UIGestureRecognizer *a1)
{
  v28[3] = (uint64_t)&type metadata for PencilAndPaperFeatureFlags;
  v28[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v28[0]) = 2;
  char v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  if ((v3 & 1) == 0)
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)generativeLogger);
    id v5 = v1;
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      v28[0] = v9;
      *(_DWORD *)uint64_t v8 = 136315394;
      uint64_t v14 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x800000020C852330, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v12 = "%s %s: returning (feature is not enabled)";
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  if (v1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState] - 3 < 4)
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)generativeLogger);
    id v5 = v1;
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      v28[0] = v9;
      *(_DWORD *)uint64_t v8 = 136315394;
      uint64_t v10 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x800000020C852330, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v12 = "%s %s: returning (gesture recognizer has been ignored in composing state)";
LABEL_11:
      _os_log_impl(&dword_20C2D7000, v6, v7, v12, (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v9, -1, -1);
      MEMORY[0x210550270](v8, -1, -1);

      return;
    }
LABEL_12:

    return;
  }
  uint64_t v16 = (char *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
  if (v16)
  {
    objc_super v17 = v16;
    uint64_t v18 = *(void *)&v16[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    if (!v18)
    {
      __break(1u);
      JUMPOUT(0x20C3AD48CLL);
    }
    CGRect v19 = (void *)(v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    if (*(void *)(*v19 + 16) || *(void *)(v19[1] + 16))
    {
      if (one-time initialization token for generativeLogger != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)generativeLogger);
      uint64_t v21 = v1;
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        v28[0] = v25;
        *(_DWORD *)uint64_t v24 = 136315394;
        uint64_t v26 = CanvasGenerationTool.nameAndPointerDescription.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2080;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x800000020C852330, v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_20C2D7000, v22, v23, "%s %s: returning (clearing canvas selection)", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x210550270](v25, -1, -1);
        MEMORY[0x210550270](v24, -1, -1);
      }
      else
      {
      }
      AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);

      return;
    }
  }
  switch([(UIGestureRecognizer *)a1 state])
  {
    case UIGestureRecognizerStateBegan:
      objc_msgSend(v1, sel_gestureRecognizerBegan_, a1);
      break;
    case UIGestureRecognizerStateChanged:
      objc_msgSend(v1, sel_gestureRecognizerChanged_, a1);
      break;
    case UIGestureRecognizerStateEnded:
      objc_msgSend(v1, sel_gestureRecognizerEnded_, a1);
      break;
    case UIGestureRecognizerStateCancelled:
    case UIGestureRecognizerStateFailed:
      objc_msgSend(v1, sel_gestureRecognizerCanceledOrFailed_, a1);
      break;
    default:
      return;
  }
}

void CanvasGenerationTool.gestureRecognizerBegan(_:)(void *a1)
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  uint64_t v4 = v1;
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(void *)&transform.a = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000020C852310, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v5, v6, "%s - %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v8, -1, -1);
    MEMORY[0x210550270](v7, -1, -1);
  }
  else
  {
  }
  objc_msgSend(a1, sel_locationInView_, v4);
  double v12 = v11;
  double v14 = v13;
  uint64_t v15 = MEMORY[0x210550400](&v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_tiledTextView]);
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    objc_msgSend(a1, sel_locationInView_, v15);
    id v17 = objc_msgSend(v16, sel_hitAttachment_includeStandinAttachment_expandBottomAttachment_, 1, 1);
    if (v17)
    {
      uint64_t v18 = v17;
      id v19 = objc_msgSend(v17, sel_attachmentContainerView);

      type metadata accessor for AnyCanvas();
      if (swift_dynamicCastClass())
      {
        uint64_t v20 = &v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas];
        swift_unknownObjectWeakAssign();

        uint64_t v21 = (void *)MEMORY[0x210550400](v20);
        if (v21)
        {
          uint64_t v22 = v21;
          if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v21) + 0x520))())
          {
            objc_msgSend(a1, sel_setState_, 4);
            os_log_type_t v23 = v4;
            uint64_t v24 = Logger.logObject.getter();
            os_log_type_t v25 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v24, v25))
            {
              uint64_t v26 = (uint8_t *)swift_slowAlloc();
              uint64_t v27 = swift_slowAlloc();
              *(void *)&transform.a = v27;
              *(_DWORD *)uint64_t v26 = 136315138;
              uint64_t v28 = CanvasGenerationTool.nameAndPointerDescription.getter();
              uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&transform);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_20C2D7000, v24, v25, "%s AutoRefine is running, cancel magic generative playground.", v26, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x210550270](v27, -1, -1);
              MEMORY[0x210550270](v26, -1, -1);

              return;
            }

LABEL_36:
LABEL_18:

            return;
          }
        }
        uint64_t v37 = v4;
        unint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = swift_slowAlloc();
          uint64_t v41 = swift_slowAlloc();
          *(void *)&transform.a = v41;
          *(_DWORD *)uint64_t v40 = 136315394;
          uint64_t v42 = CanvasGenerationTool.nameAndPointerDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, (uint64_t *)&transform);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 12) = 2080;
          uint64_t v44 = CGPoint.debugDescription.getter();
          uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, (uint64_t *)&transform);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_20C2D7000, v38, v39, "%s gesture began at location %s", (uint8_t *)v40, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x210550270](v41, -1, -1);
          MEMORY[0x210550270](v40, -1, -1);
        }
        else
        {
        }
        CGMutablePathRef Mutable = CGPathCreateMutable();
        uint64_t v47 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath;
        uint64_t v48 = *(void **)&v37[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath];
        *(void *)&v37[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath] = Mutable;

        uint64_t v49 = *(void **)&v37[v47];
        if (v49)
        {
          transform.a = 1.0;
          transform.b = 0.0;
          transform.c = 0.0;
          transform.d = 1.0;
          transform.tx = 0.0;
          transform.ty = 0.0;
          id v50 = v49;
          CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v14, *(unint64_t *)&v12), &transform);
          CGRect v51 = (double *)&v37[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint1];
          *CGRect v51 = v12;
          v51[1] = v14;
          *((unsigned char *)v51 + 16) = 0;
          uint64_t v52 = (double *)&v37[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint2];
          *uint64_t v52 = v12;
          v52[1] = v14;
          *((unsigned char *)v52 + 16) = 0;
          objc_msgSend(v37, sel_setHidden_, 0);
          LOBYTE(v76) = 2;
          CanvasGenerationTool.placeMagicGenerativePlayground(for:)((PaperKit::MagicGenerativePlaygroundState)&v76);
          if (v53)
          {
            uint64_t v54 = v53;
          }
          else
          {
            uint64_t v73 = *(void **)&v37[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
            if (v73)
            {
              id v74 = v73;
              objc_msgSend(v74, sel_startSelectionWithPath_pencilLocation_, v50, v12, v14);

              return;
            }
            lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
            uint64_t v54 = (void *)swift_allocError();
            *(_OWORD *)uint64_t v75 = xmmword_20C837390;
            *(unsigned char *)(v75 + 16) = 2;
            swift_willThrow();
          }
          uint64_t v55 = v37;
          id v56 = v54;
          BOOL v57 = v55;
          id v58 = v54;
          uint64_t v59 = Logger.logObject.getter();
          os_log_type_t v60 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v59, v60))
          {

            return;
          }
          uint64_t v61 = swift_slowAlloc();
          uint64_t v62 = swift_slowAlloc();
          uint64_t v76 = v62;
          *(_DWORD *)uint64_t v61 = 136315394;
          uint64_t v63 = CanvasGenerationTool.nameAndPointerDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v61 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v65 = Error.localizedDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, &v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_20C2D7000, v59, v60, "%s throw an error: %s", (uint8_t *)v61, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x210550270](v62, -1, -1);
          MEMORY[0x210550270](v61, -1, -1);

          goto LABEL_18;
        }
        os_log_type_t v23 = v37;
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = (uint8_t *)swift_slowAlloc();
          uint64_t v70 = swift_slowAlloc();
          *(void *)&transform.a = v70;
          *(_DWORD *)uint64_t v69 = 136315138;
          uint64_t v71 = CanvasGenerationTool.nameAndPointerDescription.getter();
          uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, (uint64_t *)&transform);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_20C2D7000, v67, v68, "%s returning (wand path is nil)", v69, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x210550270](v70, -1, -1);
          MEMORY[0x210550270](v69, -1, -1);

          return;
        }

        goto LABEL_36;
      }
    }
    uint64_t v30 = v4;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(void *)&transform.a = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v35 = CanvasGenerationTool.nameAndPointerDescription.getter();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v31, v32, "%s Did not hit a canvas when wanding.", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v34, -1, -1);
      MEMORY[0x210550270](v33, -1, -1);
    }
    else
    {
    }
    objc_msgSend(a1, sel_setState_, 4);
    goto LABEL_18;
  }
}

void CanvasGenerationTool.gestureRecognizerChanged(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath];
  if (v3)
  {
    path = v3;
    objc_msgSend(a1, sel_locationInView_, v2);
    double v6 = v5;
    double v8 = v7;
    CGPoint CurrentPoint = CGPathGetCurrentPoint(path);
    if (CurrentPoint.x != v6 || CurrentPoint.y != v8)
    {
      double v11 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint1];
      if ((v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint1 + 16] & 1) == 0)
      {
        double v12 = *(double *)v11;
        unint64_t v13 = *((void *)v11 + 1);
        double v14 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint2];
        if (v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint2 + 16])
        {
          transform.a = 1.0;
          transform.b = 0.0;
          transform.c = 0.0;
          transform.d = 1.0;
          transform.tx = 0.0;
          transform.ty = 0.0;
          CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v8, *(unint64_t *)&v6), (CGPoint)__PAIR128__(v13, *(unint64_t *)&v12), &transform);
        }
        else
        {
          unint64_t v22 = *(void *)v14;
          unint64_t v23 = *((void *)v14 + 1);
          transform.a = 1.0;
          transform.b = 0.0;
          transform.c = 0.0;
          transform.d = 1.0;
          transform.tx = 0.0;
          transform.ty = 0.0;
          CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v8, *(unint64_t *)&v6), (CGPoint)__PAIR128__(v13, *(unint64_t *)&v12), (CGPoint)__PAIR128__(v23, v22), &transform);
        }
      }
      char v24 = v11[16];
      os_log_type_t v25 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint2];
      *(_OWORD *)os_log_type_t v25 = *(_OWORD *)v11;
      v25[16] = v24;
      *(double *)double v11 = v6;
      *((double *)v11 + 1) = v8;
      v11[16] = 0;
      id v26 = *(id *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
      objc_msgSend(v26, sel_updateSelectionWithPath_pencilLocation_, path, v6, v8);
    }
  }
  else
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)generativeLogger);
    path = v1;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(void *)&transform.a = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v20 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v16, v17, "%s returning (wandPath or magicVC is nil)", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v19, -1, -1);
      MEMORY[0x210550270](v18, -1, -1);

      return;
    }
  }
}

void CanvasGenerationTool.gestureRecognizerEnded(_:)(void *a1)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  id v142 = (char *)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for Tips.InvalidationReason();
  uint64_t v140 = *(void *)(v141 - 8);
  MEMORY[0x270FA5388](v141);
  uint64_t v139 = (char *)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v138 = type metadata accessor for Logger();
  __swift_project_value_buffer(v138, (uint64_t)generativeLogger);
  double v6 = v1;
  double v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(void *)&transform.a = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)&v145.a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    *(void *)&v145.a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000020C8522F0, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v7, v8, "%s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v10, -1, -1);
    MEMORY[0x210550270](v9, -1, -1);
  }
  else
  {
  }
  unint64_t v13 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath];
  if (!v13)
  {
    unint64_t v36 = v6;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v38))
    {

      goto LABEL_21;
    }
    os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(void *)&transform.a = v40;
    *(_DWORD *)os_log_type_t v39 = 136315138;
    uint64_t v41 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)&v145.a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v37, v38, "%s returning (wand path or canvas is nil)", v39, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v40, -1, -1);
    MEMORY[0x210550270](v39, -1, -1);
LABEL_20:

    goto LABEL_21;
  }
  double v14 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
  if (!v14)
  {
    unint64_t v36 = v6;
    uint64_t v37 = v13;
    unint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      unint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(void *)&transform.a = v46;
      *(_DWORD *)unint64_t v45 = 136315138;
      uint64_t v47 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)&v145.a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v43, v44, "%s returning (magicGenerativeVC is nil)", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v46, -1, -1);
      MEMORY[0x210550270](v45, -1, -1);

LABEL_21:
      LOBYTE(transform.a) = v36[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState];
      LOBYTE(v145.a) = 7;
      if ((specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)((unsigned __int8 *)&transform, (char *)&v145) & 1) == 0)return; {
      LOBYTE(transform.a) = 7;
      }
      p_CGAffineTransform transform = (unsigned __int8 *)&transform;
      goto LABEL_47;
    }

    goto LABEL_20;
  }
  id v15 = v13;
  id v16 = v14;
  objc_msgSend(a1, sel_locationInView_, v6);
  double v18 = v17;
  double v20 = v19;
  unint64_t v21 = &v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas];
  unint64_t v22 = (void *)MEMORY[0x210550400](&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
  if (v22)
  {
    unint64_t v23 = v22;
    if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v22) + 0x408))())
    {
      char v24 = &v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_tiledTextView];
      os_log_type_t v25 = (void *)MEMORY[0x210550400](&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_tiledTextView]);
      objc_msgSend(a1, sel_locationInView_, v25);
      double v27 = v26;
      double v29 = v28;

      uint64_t v30 = (void *)MEMORY[0x210550400](v24);
      if (v30)
      {
        uint64_t v31 = v30;
        id v32 = objc_msgSend(v30, sel_hitAttachment_includeStandinAttachment_expandBottomAttachment_, 1, 1, v27, v29);
        if (v32)
        {
          uint64_t v33 = v32;
          id v34 = objc_msgSend(v32, sel_attachmentContainerView);

          type metadata accessor for AnyCanvas();
          if (swift_dynamicCastClass())
          {

            swift_unknownObjectWeakAssign();
            uint64_t v35 = v34;
            id v34 = v23;
          }
          else
          {

            uint64_t v35 = v31;
          }
        }
        else
        {
          uint64_t v35 = v23;
          id v34 = v31;
        }

        unint64_t v23 = v34;
      }
    }
  }
  id v50 = v6;
  id v51 = v15;
  uint64_t v52 = v50;
  uint64_t v53 = (const CGPath *)v51;
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = swift_slowAlloc();
    id v137 = v16;
    uint64_t v57 = v56;
    uint64_t v135 = swift_slowAlloc();
    *(void *)&transform.a = v135;
    *(_DWORD *)uint64_t v57 = 136315650;
    uint64_t v58 = CanvasGenerationTool.nameAndPointerDescription.getter();
    int v136 = v21;
    *(void *)&v145.a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 2080;
    uint64_t v60 = CGPoint.debugDescription.getter();
    *(void *)&v145.a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 22) = 2080;
    CGPathGetBoundingBox(v53);
    uint64_t v62 = CGRect.debugDescription.getter();
    *(void *)&v145.a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    unint64_t v21 = v136;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v54, v55, "%s gesture ended (location = %s, boundingBodouble x = %s)", (uint8_t *)v57, 0x20u);
    uint64_t v64 = v135;
    swift_arrayDestroy();
    MEMORY[0x210550270](v64, -1, -1);
    uint64_t v65 = v57;
    id v16 = v137;
    MEMORY[0x210550270](v65, -1, -1);
  }
  else
  {
  }
  CGPoint CurrentPoint = CGPathGetCurrentPoint(v53);
  if (CurrentPoint.x != v18 || CurrentPoint.y != v20)
  {
    uint64_t v67 = (unint64_t *)((char *)v52 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint1);
    if ((*((unsigned char *)&v52->super.__layeringSceneIdentity
          + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint1) & 1) == 0)
    {
      unint64_t v68 = *v67;
      unint64_t v69 = v67[1];
      uint64_t v70 = (unint64_t *)((char *)v52 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint2);
      if ((*((unsigned char *)&v52->super.__layeringSceneIdentity
            + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint2) & 1) != 0)
      {
        transform.a = 1.0;
        transform.b = 0.0;
        transform.c = 0.0;
        transform.d = 1.0;
        transform.tdouble x = 0.0;
        transform.tdouble y = 0.0;
        CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v20, *(unint64_t *)&v18), (CGPoint)__PAIR128__(v69, v68), &transform);
      }
      else
      {
        unint64_t v71 = *v70;
        unint64_t v72 = v70[1];
        transform.a = 1.0;
        transform.b = 0.0;
        transform.c = 0.0;
        transform.d = 1.0;
        transform.tdouble x = 0.0;
        transform.tdouble y = 0.0;
        CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v20, *(unint64_t *)&v18), (CGPoint)__PAIR128__(v69, v68), (CGPoint)__PAIR128__(v72, v71), &transform);
      }
    }
  }
  CGPathCloseSubpath(v53);
  uint64_t v73 = (char *)v52 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint1;
  *(void *)uint64_t v73 = 0;
  *((void *)v73 + 1) = 0;
  v73[16] = 1;
  id v74 = (char *)v52 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint2;
  *(void *)id v74 = 0;
  *((void *)v74 + 1) = 0;
  v74[16] = 1;
  objc_msgSend(v16, sel_finishSelectionWithPath_pencilLocation_, v53, v18, v20);
  BoundingBodouble x = CGPathGetBoundingBox(v53);
  double x = BoundingBox.origin.x;
  double y = BoundingBox.origin.y;
  CGFloat width = BoundingBox.size.width;
  CGFloat height = BoundingBox.size.height;
  double v79 = CGRectGetWidth(BoundingBox);
  v149.origin.double x = x;
  v149.origin.double y = y;
  v149.size.CGFloat width = width;
  v149.size.CGFloat height = height;
  double v80 = CGRectGetHeight(v149);
  if (v80 < v79) {
    double v79 = v80;
  }
  v150.origin.double x = x;
  v150.origin.double y = y;
  v150.size.CGFloat width = width;
  v150.size.CGFloat height = height;
  double v81 = CGRectGetWidth(v150);
  v151.origin.double x = x;
  v151.origin.double y = y;
  v151.size.CGFloat width = width;
  v151.size.CGFloat height = height;
  double v82 = CGRectGetHeight(v151);
  if (one-time initialization token for minGenerationAreaSize != -1) {
    swift_once();
  }
  if (v79 < *(double *)&static UIConstants.minGenerationAreaSize
    || (double v83 = x + (v81 - v79) * 0.5,
        double v84 = y + (v82 - v79) * 0.5,
        v152.origin.double x = v83,
        v152.origin.double y = v84,
        v152.size.CGFloat width = v79,
        v152.size.CGFloat height = v79,
        CGRectGetHeight(v152) < *((double *)&static UIConstants.minGenerationAreaSize + 1)))
  {
    uint64_t v85 = v52;
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      unint64_t v88 = (uint8_t *)swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      *(void *)&v145.a = v89;
      *(_DWORD *)unint64_t v88 = 136315138;
      uint64_t v90 = CanvasGenerationTool.nameAndPointerDescription.getter();
      uint64_t v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v86, v87, "%s returning (generation area is too small)", v88, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v89, -1, -1);
      MEMORY[0x210550270](v88, -1, -1);
    }
    else
    {
    }
    LOBYTE(v145.a) = *((unsigned char *)&v85->super.super.isa
                     + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState);
    LOBYTE(v144) = 7;
    if (specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)((unsigned __int8 *)&v145, (char *)&v144))
    {
      LOBYTE(v145.a) = 7;
      p_CGAffineTransform transform = (unsigned __int8 *)&v145;
LABEL_47:
      CanvasGenerationTool.magicGenerativeState.setter(p_transform);
      CanvasGenerationTool.resetGenerativeTool()();
      return;
    }
    return;
  }
  v153.origin.double x = v83;
  v153.origin.double y = v84;
  v153.size.CGFloat width = v79;
  v153.size.CGFloat height = v79;
  CGFloat MidX = CGRectGetMidX(v153);
  v154.origin.double x = v83;
  v154.origin.double y = v84;
  v154.size.CGFloat width = v79;
  v154.size.CGFloat height = v79;
  *(double *)&unint64_t v93 = CGRectGetMidY(v154);
  CanvasGenerationTool.allocateGenerationFrame(for:with:)((CGSize)__PAIR128__(*(unint64_t *)&v79, *(unint64_t *)&v79), (CGPoint)__PAIR128__(v93, *(unint64_t *)&MidX));
  uint64_t v94 = MEMORY[0x210550400](v21);
  if (!v94)
  {
    uint64_t v96 = v53;
    goto LABEL_55;
  }
  uint64_t v95 = (void *)v94;
  uint64_t v96 = v53;
  UIView.transformForConvertingFromView(_:)(&v145, v52);
  v97 = (void *)MEMORY[0x21054F0D0](v96, &v145);
  if (!v97)
  {

LABEL_55:
    double v103 = *(double *)((char *)&v52->super.super.isa
                     + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame);
    double v104 = *(double *)((char *)&v52->super._responderFlags
                     + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame);
    double v105 = *(double *)((char *)&v52->super.__layeringSceneIdentity
                     + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame);
    double v106 = *(double *)((char *)&v52->_constraintsExceptingSubviewAutoresizingConstraints
                     + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame);
    [(UIView *)v52 bounds];
    double v108 = v107;
    if (CGRect.isFinite.getter(v103, v104, v105, v106))
    {
      double v109 = *(double *)((char *)&v52->super.super.isa
                       + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth);
      if (v109 > 0.0 && v108 > 0.0)
      {
        CGAffineTransformMakeScale(&v145, v108 / v109, v108 / v109);
        v155.origin.double x = v103;
        v155.origin.double y = v104;
        v155.size.CGFloat width = v105;
        v155.size.CGFloat height = v106;
        CGRect v156 = CGRectApplyAffineTransform(v155, &v145);
        double v103 = v156.origin.x;
        double v104 = v156.origin.y;
        double v105 = v156.size.width;
        double v106 = v156.size.height;
      }
    }
    id v110 = objc_msgSend(objc_allocWithZone((Class)PPKGPMagicPaperState), sel_initWithFrame_isEditing_, 1, v103, v104, v105, v106);
    objc_msgSend(v16, sel_setState_, v110);

    LOBYTE(v145.a) = 4;
    CanvasGenerationTool.magicGenerativeState.setter((unsigned __int8 *)&v145);
    CanvasGenerationTool.addMagicGenerativeBackgroundView()();
    uint64_t v111 = MEMORY[0x210550400]((char *)v52 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_tiledTextView);
    if (v111)
    {
      Swift::String v112 = (void *)v111;
      id v113 = TiledTextView.imageWandTipController.getter();
      if (one-time initialization token for imageWandTipController != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v138, (uint64_t)static Logger.imageWandTipController);
      Class v114 = Logger.logObject.getter();
      os_log_type_t v115 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v114, v115))
      {
        uint64_t v116 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v116 = 0;
        _os_log_impl(&dword_20C2D7000, v114, v115, "invalidate tip; action performed", v116, 2u);
        MEMORY[0x210550270](v116, -1, -1);
      }

      uint64_t v117 = v140;
      id v118 = v139;
      uint64_t v119 = v141;
      (*(void (**)(char *, void, uint64_t))(v140 + 104))(v139, *MEMORY[0x263F1C018], v141);
      lazy protocol witness table accessor for type ImageWandTip and conformance ImageWandTip();
      Tip.invalidate(reason:)();
      (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v119);
    }
    uint64_t v120 = type metadata accessor for TaskPriority();
    uint64_t v121 = (uint64_t)v142;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 56))(v142, 1, 1, v120);
    type metadata accessor for MainActor();
    uint64_t v122 = v52;
    uint64_t v123 = static MainActor.shared.getter();
    uint64_t v124 = (void *)swift_allocObject();
    uint64_t v125 = MEMORY[0x263F8F500];
    v124[2] = v123;
    v124[3] = v125;
    v124[4] = v122;
    v124[5] = v96;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v121, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:), (uint64_t)v124);

    swift_release();
    return;
  }
  uint64_t v98 = v53;
  v99 = v16;
  uint64_t v100 = v97;
  v101.CGPathRef value = AnyCanvas.modelSpacePathForPath(_:)(v100).value;
  if (v101.value)
  {
    CGPathRef value = v101.value;

    uint64_t v96 = value;
    id v16 = v99;
    uint64_t v53 = v98;
    goto LABEL_55;
  }
  id v142 = (char *)v96;
  Swift::String v126 = v52;
  uint64_t v127 = Logger.logObject.getter();
  os_log_type_t v128 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v127, v128))
  {
    int v129 = (uint8_t *)swift_slowAlloc();
    uint64_t v130 = swift_slowAlloc();
    uint64_t v144 = v130;
    *(_DWORD *)int v129 = 136315138;
    uint64_t v141 = (uint64_t)(v129 + 4);
    uint64_t v131 = CanvasGenerationTool.nameAndPointerDescription.getter();
    uint64_t v143 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v132, &v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v127, v128, "%s returning (modelSpacePath is nil)", v129, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v130, -1, -1);
    MEMORY[0x210550270](v129, -1, -1);

    uint64_t v133 = v142;
  }
  else
  {

    uint64_t v134 = v142;
  }
  LOBYTE(v145.a) = *((unsigned char *)&v126->super.super.isa
                   + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState);
  LOBYTE(v144) = 7;
  if (specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)((unsigned __int8 *)&v145, (char *)&v144))
  {
    LOBYTE(v145.a) = 7;
    p_CGAffineTransform transform = (unsigned __int8 *)&v145;
    goto LABEL_47;
  }
}

uint64_t specialized closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[5] = v7;
  v5[6] = v6;
  return MEMORY[0x270FA2498](specialized closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:), v7, v6);
}

uint64_t specialized closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:)()
{
  CanvasGenerationTool.hideToolPickerIfNeeded()();
  double v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *double v1 = v0;
  v1[1] = specialized closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:);
  uint64_t v2 = *(void *)(v0 + 24);
  return CanvasGenerationTool.generateImageDestructively(for:invocation:)(v2, 1);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {

    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = specialized closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = specialized closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  double v1 = *(void **)(v0 + 16);
  swift_release();
  objc_msgSend(v1, sel_setHidden_, 1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void CanvasGenerationTool.gestureRecognizerCanceledOrFailed(_:)(void *a1)
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  id v4 = v1;
  id v5 = a1;
  uint64_t v6 = (char *)v4;
  id v7 = v5;
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v27 = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v12 = CanvasGenerationTool.nameAndPointerDescription.getter();
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2048;
    id v14 = objc_msgSend(v7, sel_state, v26, v27);

    id v25 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_20C2D7000, v8, v9, "%s gesture %ld", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v11, -1, -1);
    MEMORY[0x210550270](v10, -1, -1);
  }
  else
  {
  }
  id v15 = &v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint1];
  *(void *)id v15 = 0;
  *((void *)v15 + 1) = 0;
  v15[16] = 1;
  id v16 = &v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint2];
  *(void *)id v16 = 0;
  *((void *)v16 + 1) = 0;
  v16[16] = 1;
  objc_msgSend(v6, sel_setHidden_, 1, v25);
  switch(v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState])
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    default:
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_9:
        LOBYTE(v27) = 7;
        CanvasGenerationTool.magicGenerativeState.setter((unsigned __int8 *)&v27);
        CanvasGenerationTool.resetGenerativeTool()();
      }
      else
      {
        double v18 = v6;
        double v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v20))
        {
          unint64_t v21 = (uint8_t *)swift_slowAlloc();
          uint64_t v22 = swift_slowAlloc();
          uint64_t v27 = v22;
          *(_DWORD *)unint64_t v21 = 136315138;
          uint64_t v23 = CanvasGenerationTool.nameAndPointerDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v27);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_20C2D7000, v19, v20, "%s returning (transition state is inapplicable)", v21, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x210550270](v22, -1, -1);
          MEMORY[0x210550270](v21, -1, -1);
        }
        else
        {
        }
      }
      return;
  }
}

uint64_t sub_20C3AFE84()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for specialized closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  os_log_type_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *os_log_type_t v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return specialized closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:)(a1, v4, v5, v7, v6);
}

unint64_t lazy protocol witness table accessor for type ImageWandTip and conformance ImageWandTip()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageWandTip and conformance ImageWandTip;
  if (!lazy protocol witness table cache variable for type ImageWandTip and conformance ImageWandTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageWandTip and conformance ImageWandTip);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageWandTip and conformance ImageWandTip;
  if (!lazy protocol witness table cache variable for type ImageWandTip and conformance ImageWandTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageWandTip and conformance ImageWandTip);
  }
  return result;
}

id CanvasElementDrawingView.init(frame:drawing:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v6 = v5;
  swift_unknownObjectWeakInit();
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingStartTimeInterval] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate] = 0;
  uint64_t v12 = (PKDrawing *)OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_latestEndOfStrokeTimestamp;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_latestEndOfStrokeTimestamp] = 0;
  PKDrawing._bridgeToObjectiveC()(v12);
  id v14 = v13;
  v20.receiver = v6;
  v20.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  id v15 = objc_msgSendSuper2(&v20, sel_initWithFrame_drawing_, v14, a2, a3, a4, a5);

  id v16 = v15;
  char v17 = (void *)MEMORY[0x21054D080](0xD000000000000028, 0x800000020C852730);
  objc_msgSend(v16, sel_setAccessibilityIdentifier_, v17);

  uint64_t v18 = type metadata accessor for PKDrawing();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
  return v16;
}

void __swiftcall CanvasElementDrawingView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  uint64_t v4 = v3;
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  os_log_type_t v8 = (void *)MEMORY[0x210550400](&v3[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView], *(void *)&with.is_nil);
  if (!v8) {
    goto LABEL_9;
  }
  os_log_type_t v9 = v8;
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v8) + 0x88))();
  if (v11)
  {
    uint64_t v12 = v11;
    unint64_t v13 = (void *)(*(uint64_t (**)(void))((*v10 & *v11) + 0x2F8))();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ContainerCanvasElementView<Image>);
    id v14 = (void *)swift_dynamicCastClass();
    if (v14 && (id v15 = *(void **)((char *)v14 + *(void *)((*v10 & *v14) + 0x4D0))) != 0)
    {
      id v16 = objc_msgSend(v15, sel_hitTest_withEvent_, 0, x, y);

      if (v16)
      {

        return;
      }
    }
    else
    {
    }
  }
  objc_msgSend(v4, sel_convertPoint_toCoordinateSpace_, v9, x, y);
  id v17 = objc_msgSend(v9, sel_hitTest_withEvent_, isa);

  if (!v17)
  {
LABEL_9:
    v18.receiver = v4;
    v18.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
    -[UIView_optional hitTest:withEvent:](&v18, sel_hitTest_withEvent_, isa, x, y);
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.initializeMathRecognitionIfNecessary()()
{
  void (*v29)(double *__return_ptr);
  id v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  double v36;
  double v37;
  double v38;
  ValueMetadata *v39;
  unint64_t v40;
  CGRect v41;

  double v1 = v0;
  uint64_t v2 = type metadata accessor for PKDrawing();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView], v4);
  if (v7)
  {
    os_log_type_t v8 = v7;
    os_log_type_t v9 = (void *)MEMORY[0x263F8EED0];
    uint64_t v10 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x88))();

    if (v10)
    {
      os_log_type_t v39 = &type metadata for PencilAndPaperFeatureFlags;
      uint64_t v40 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      LOBYTE(v37) = 5;
      char v11 = isFeatureEnabled(_:)();
      uint64_t v12 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
      if ((v11 & 1) == 0)
      {
LABEL_26:

        return;
      }
      uint64_t v13 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate;
      if (*(void *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate]) {
        goto LABEL_5;
      }
      id v16 = objc_msgSend(v1, sel_drawing);
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = PKDrawing.strokes.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      uint64_t v18 = *(void *)(v17 + 16);
      uint64_t v12 = swift_bridgeObjectRelease();
      if (!v18) {
        goto LABEL_5;
      }
      uint64_t v19 = (*(uint64_t (**)(uint64_t))((*v9 & *v10) + 0x738))(v12);
      uint64_t v12 = swift_unknownObjectRelease();
      if (v19)
      {
        if (one-time initialization token for mathLogger != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        __swift_project_value_buffer(v20, (uint64_t)mathLogger);
        unint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v23 = 0;
          _os_log_impl(&dword_20C2D7000, v21, v22, "Creating MathRecognitionViewControllerDelegate", v23, 2u);
          MEMORY[0x210550270](v23, -1, -1);
        }

        unint64_t v24 = v10;
        id v25 = objc_msgSend(v1, sel_recognitionController);
        objc_allocWithZone((Class)type metadata accessor for MathRecognitionViewControllerDelegate());
        id v15 = MathRecognitionViewControllerDelegate.init(canvas:view:recognitionController:)(v24, v1, v25);
      }
      else
      {
LABEL_5:
        uint64_t v14 = (*(uint64_t (**)(uint64_t))((*v9 & *v10) + 0x738))(v12);
        swift_unknownObjectRelease();
        if (v14)
        {
LABEL_15:
          uint64_t v27 = *(void *)&v1[v13];
          if (v27)
          {
            double v28 = *(void **)(v27 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
            if (v28)
            {
              double v29 = *(void (**)(double *__return_ptr))((*v9 & *v10) + 0x740);
              uint64_t v30 = v28;
              v29(&v37);
              uint64_t v31 = (id)LOBYTE(v37);
              if (objc_msgSend(v30, sel_solvingStyle) != v31)
              {
                if (one-time initialization token for mathLogger != -1) {
                  swift_once();
                }
                id v32 = type metadata accessor for Logger();
                __swift_project_value_buffer(v32, (uint64_t)mathLogger);
                uint64_t v33 = Logger.logObject.getter();
                id v34 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v33, v34))
                {
                  uint64_t v35 = (uint8_t *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v35 = 134217984;
                  uint64_t v37 = *(double *)&v31;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  _os_log_impl(&dword_20C2D7000, v33, v34, "Setting solving style: %ld", v35, 0xCu);
                  MEMORY[0x210550270](v35, -1, -1);
                }

                objc_msgSend(v30, sel_setSolvingStyle_, v31);
              }
              objc_msgSend(v1, sel_drawingTransform);
              unint64_t v36 = sqrt(v37 * v37 + v38 * v38);
              if (v36 > 0.0)
              {
                objc_msgSend(v10, sel_bounds);
                objc_msgSend(v30, sel_setCanvasWidth_, CGRectGetWidth(v41) / v36);
              }
            }
          }
          goto LABEL_26;
        }
        id v15 = 0;
      }
      uint64_t v26 = *(void **)&v1[v13];
      *(void *)&v1[v13] = v15;

      goto LABEL_15;
    }
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.didMoveToWindow()()
{
  double v1 = v0;
  v24.receiver = v0;
  v24.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  objc_msgSendSuper2(&v24, sel_didMoveToWindow);
  id v2 = objc_msgSend(v0, sel_window);

  if (v2)
  {
    uint64_t v3 = &v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView];
    double v4 = (void *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
    uint64_t v5 = (void *)MEMORY[0x263F8EED0];
    if (v4
      && (v6 = v4, uint64_t v7 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x88))(), v6, v7))
    {
      os_log_type_t v8 = &v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection];
      swift_beginAccess();
      uint64_t v9 = *v8;
    }
    else
    {
      uint64_t v9 = 1;
    }
    objc_msgSend(v1, sel_setWantsDataDetection_, v9);
    uint64_t v12 = self;
    id v13 = objc_msgSend(v12, sel_standardUserDefaults);
    uint64_t v14 = (void *)MEMORY[0x21054D080](0xD000000000000028, 0x800000020C8526D0);
    id v15 = objc_msgSend(v13, sel_BOOLForKey_, v14);

    objc_msgSend(v1, sel_setWantsHashtagDetection_, v15);
    id v16 = objc_msgSend(v12, sel_standardUserDefaults);
    uint64_t v17 = (void *)MEMORY[0x21054D080](0xD000000000000028, 0x800000020C8526D0);
    id v18 = objc_msgSend(v16, sel_BOOLForKey_, v17);

    objc_msgSend(v1, sel_setWantsMentionDetection_, v18);
    v23[3] = &type metadata for PencilAndPaperFeatureFlags;
    v23[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
    LOBYTE(v23[0]) = 7;
    LOBYTE(v16) = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    objc_msgSend(v1, sel_setWantsProofreadingDetection_, v16 & 1, v23[0]);
    uint64_t v19 = (void *)MEMORY[0x210550400](v3);
    unint64_t v20 = (unint64_t)v19;
    if (v19)
    {
      unint64_t v21 = (char *)(*(uint64_t (**)(void))((*v5 & *v19) + 0x88))();

      if (v21)
      {
        os_log_type_t v22 = &v21[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud];
        swift_beginAccess();
        unint64_t v20 = *v22;
      }
      else
      {
        unint64_t v20 = 0;
      }
    }
    objc_msgSend(v1, sel_setIsSharedViaICloud_, v20);
  }
  else
  {
    uint64_t v10 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (v10)
    {
      char v11 = *(void **)(v10 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
      if (v11) {
        objc_msgSend(v11, sel_dismissPopovers);
      }
    }
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.layoutSubviews()()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v1)
  {
    id v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v2) {
      objc_msgSend(v2, sel_layoutSubviews);
    }
  }
}

Swift::Bool __swiftcall CanvasElementDrawingView._handleSingleTap(atDrawingLocation:)(CGPoint atDrawingLocation)
{
  double y = atDrawingLocation.y;
  double x = atDrawingLocation.x;
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v4)
  {
    uint64_t v5 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v5)
    {
      if (objc_msgSend(v5, sel_handleSingleTapAtDrawingLocation_, atDrawingLocation.x, atDrawingLocation.y))return 1; {
    }
      }
  }
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  return objc_msgSendSuper2(&v7, sel__handleSingleTapAtDrawingLocation_fromTapStroke_, 0, x, y);
}

Swift::Bool __swiftcall CanvasElementDrawingView._handleSingleTap(atDrawingLocation:fromTapStroke:)(CGPoint atDrawingLocation, Swift::Bool fromTapStroke)
{
  double y = atDrawingLocation.y;
  double x = atDrawingLocation.x;
  uint64_t v6 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v6)
  {
    objc_super v7 = *(void **)(v6 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v7)
    {
      if (objc_msgSend(v7, sel_handleSingleTapAtDrawingLocation_, atDrawingLocation.x, atDrawingLocation.y))return 1; {
    }
      }
  }
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  return objc_msgSendSuper2(&v9, sel__handleSingleTapAtDrawingLocation_fromTapStroke_, fromTapStroke, x, y);
}

Swift::Void __swiftcall CanvasElementDrawingView.eraserMoved(toLocation:)(CGPoint toLocation)
{
  double y = toLocation.y;
  double x = toLocation.x;
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v4)
  {
    uint64_t v5 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v5) {
      objc_msgSend(v5, sel_eraserMovedToLocation_, toLocation.x, toLocation.y);
    }
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  objc_msgSendSuper2(&v6, sel_eraserMovedToLocation_, x, y);
}

void CanvasElementDrawingView.additionalStrokes.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PKStroke();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v32 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v6 = MEMORY[0x270FA5388](v5);
  os_log_type_t v8 = (char *)&v26 - v7;
  id v9 = objc_msgSend(v0, sel_additionalStrokes, v6);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v33 = MEMORY[0x263F8EE78];
    uint64_t v31 = *(void *)(v11 + 16);
    if (v31)
    {
      uint64_t v26 = v1;
      unint64_t v12 = 0;
      uint64_t v27 = (void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v28 = v3 + 16;
      uint64_t v29 = v2;
      uint64_t v30 = (void (**)(char *, char *, uint64_t))(v3 + 32);
      while (v12 < *(void *)(v11 + 16))
      {
        unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
        uint64_t v14 = *(void *)(v3 + 72);
        (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, v11 + v13 + v14 * v12, v2);
        Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
        unsigned int v16 = [(objc_class *)isa _isHidden];

        if (v16)
        {
          uint64_t v17 = *v30;
          (*v30)(v32, v8, v2);
          uint64_t v18 = v33;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
            uint64_t v18 = v33;
          }
          unint64_t v20 = *(void *)(v18 + 16);
          unint64_t v19 = *(void *)(v18 + 24);
          if (v20 >= v19 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            uint64_t v18 = v33;
          }
          *(void *)(v18 + 16) = v20 + 1;
          unint64_t v21 = v18 + v13 + v20 * v14;
          uint64_t v2 = v29;
          v17((char *)v21, v32, v29);
          uint64_t v33 = v18;
        }
        else
        {
          (*v27)(v8, v2);
        }
        if (v31 == ++v12)
        {
          uint64_t v1 = v26;
          goto LABEL_14;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_14:
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
      if (v22
        && (uint64_t v23 = *(void **)(v22 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController)) != 0)
      {
        id v24 = v23;
        Class v25 = Array._bridgeToObjectiveC()().super.isa;
        swift_release();
        objc_msgSend(v24, sel_didEraseStrokes_, v25);
      }
      else
      {
        swift_release();
      }
    }
  }
}

uint64_t CanvasElementDrawingView.becomeFirstResponder()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  os_log_type_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a3;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v3;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v11, v8, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v17);
  return 0;
}

void closure #1 in CanvasElementDrawingView.becomeFirstResponder()(uint64_t a1, SEL *a2)
{
  uint64_t v3 = (void *)MEMORY[0x210550400](a1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v3)
  {
    id v7 = v3;
    uint64_t v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x88))();
    if (v4)
    {
      uint64_t v5 = v4;
      [v4 *a2];

      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v6 = v7;
    }
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.drawingDidChangeVisibleStrokes(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for PKDrawing();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = &v21[-v13];
  id v15 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
  v23.receiver = v2;
  v23.super_class = v15;
  objc_msgSendSuper2(&v23, sel_drawingDidChangeVisibleStrokes_, a1);
  CanvasElementDrawingView.mergeLiveEraseDrawing()();
  uint64_t v16 = MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    id v18 = objc_msgSend(v2, sel_drawing);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v14, v11, v8);
    type metadata accessor for PKDrawingCoherence(0);
    swift_dynamicCast();
    unint64_t v19 = v22;
    unint64_t v20 = &v22[OBJC_IVAR___PKDrawingCoherence_model];
    swift_beginAccess();
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v20, v4);

    (*(void (**)(unsigned char *))((*MEMORY[0x263F8EED0] & *v17) + 0x2B0))(v7);
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
}

void __swiftcall CanvasElementDrawingView.inlineView(at:)(UIView_optional *__return_ptr retstr, CGPoint at)
{
  double y = at.y;
  double x = at.x;
  uint64_t v5 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (!v5
    || (uint64_t v6 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController)) == 0
    || !objc_msgSend(v6, sel_hitTest_, at.x, at.y))
  {
    v8.receiver = v2;
    v8.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
    id v7 = -[UIView_optional inlineViewAtPoint:](&v8, sel_inlineViewAtPoint_, x, y);
  }
}

void CanvasElementDrawingView.drawingTransform.getter(long long *a1@<X8>)
{
  uint64_t v3 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (!v3)
  {
    long long v7 = xmmword_20C8356C0;
    long long v9 = xmmword_20C835600;
    long long v8 = 0uLL;
    goto LABEL_7;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = (void *)MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v5)
  {
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EED0];
    uint64_t v11 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x88))();
    if (v11)
    {
      uint64_t v12 = v11;
      (*(void (**)(void *__return_ptr))((*v10 & *v11) + 0x5D0))(v16);

      uint64_t v6 = (CGAffineTransform *)v18;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v16, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
      if (v18[48] != 1) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v6 = &v17;
  AnyCanvasElementView.paperBoundsTransform()(&v17);
LABEL_5:
  long long v14 = *(_OWORD *)&v6->c;
  long long v15 = *(_OWORD *)&v6->a;
  long long v13 = *(_OWORD *)&v6->tx;

  long long v8 = v13;
  long long v7 = v14;
  long long v9 = v15;
LABEL_7:
  *a1 = v9;
  a1[1] = v7;
  a1[2] = v8;
}

uint64_t CanvasElementDrawingView.merge<A>(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PKDrawing();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v21 - v8;
  id v10 = objc_msgSend(v0, sel_drawing, v7);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v9, v5, v2);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  uint64_t v11 = v23;
  char v12 = PKDrawingCoherence.merge<A>(_:)();

  if (v12)
  {
    long long v13 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
    v22.receiver = v1;
    v22.super_class = v13;
    objc_msgSendSuper2(&v22, sel_drawingDidChange);
    id v14 = objc_msgSend(v1, sel_tiledView);
    if (v14)
    {
      long long v15 = v14;
      id v16 = objc_msgSend(v1, sel_drawing);
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      PKDrawing._bridgeToObjectiveC()(v17);
      unint64_t v19 = v18;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      objc_msgSend(v15, sel_updateCurrentSelectionWithNewDrawingIfNecessary_, v19);
    }
  }
  return v12 & 1;
}

Swift::Void __swiftcall CanvasElementDrawingView.didBeginDrawing()()
{
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  objc_msgSendSuper2(&v5, sel_didBeginDrawing);
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v2) {
      objc_msgSend(v2, sel_didBeginDrawing);
    }
  }
  uint64_t v3 = (void *)MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (v3)
  {
    uint64_t v4 = v3;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x2C0))();
  }
}

void CanvasElementDrawingView.beganStroke(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  objc_super v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
  double v7 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
  v31.receiver = v1;
  v31.super_class = v7;
  objc_msgSendSuper2(&v31, sel_beganStroke_, isa);

  uint64_t v8 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink], sel_invalidate);
  long long v9 = *(void **)&v1[v8];
  *(void *)&v1[v8] = 0;

  id v10 = &v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView];
  uint64_t v11 = (void *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  char v12 = (void *)MEMORY[0x263F8EED0];
  if (v11)
  {
    long long v13 = v11;
    id v14 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x88))();

    if (v14)
    {
      specialized LiveEditable.didChangeLiveEditing()();
    }
  }
  long long v15 = (void *)MEMORY[0x210550400](v10);
  if (v15)
  {
    id v16 = v15;
    CGAffineTransform v17 = (char *)(*(uint64_t (**)(void))((*v12 & *v15) + 0x88))();

    if (v17)
    {
      id v18 = &v17[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
      swift_beginAccess();
      LODWORD(v18) = *v18;

      if (v18 == 1)
      {
        id v19 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v1, sel_displayLinkUpdateLiveDrawing);
        objc_msgSend(v19, sel_setPreferredFramesPerSecond_, 60);
        id v20 = objc_msgSend(self, sel_currentRunLoop);
        objc_msgSend(v19, sel_addToRunLoop_forMode_, v20, *MEMORY[0x263EFF588]);

        uint64_t v21 = *(void **)&v1[v8];
        *(void *)&v1[v8] = v19;
        id v22 = v19;

        objc_super v23 = (void *)MEMORY[0x210550400](v10);
        id v24 = v22;
        if (v23)
        {
          Class v25 = v23;
          uint64_t v26 = (*(uint64_t (**)(void))((*v12 & *v23) + 0x88))();

          id v24 = v22;
          if (v26)
          {
            specialized LiveEditable.didChangeLiveEditing()();

            id v24 = (void *)v26;
          }
        }

        id v27 = objc_msgSend(self, sel_now);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Date.timeIntervalSinceReferenceDate.getter();
        uint64_t v29 = v28;

        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        *(void *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingStartTimeInterval] = v29;
      }
    }
  }
}

void CanvasElementDrawingView.cancelledStroke(_:)()
{
  uint64_t v1 = v0;
  Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  objc_msgSendSuper2(&v8, sel_cancelledStroke_, isa);

  uint64_t v3 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink], sel_invalidate);
  uint64_t v4 = *(void **)&v1[v3];
  *(void *)&v1[v3] = 0;

  objc_super v5 = (void *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (v5)
  {
    uint64_t v6 = v5;
    double v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x88))();

    if (v7)
    {
      specialized LiveEditable.didChangeLiveEditing()();
    }
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.displayLinkUpdateLiveDrawing()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  objc_super v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(self, sel_now);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Date.timeIntervalSinceReferenceDate.getter();
  double v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (*(double *)(v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingStartTimeInterval) + 60.0 < v11)
  {
    uint64_t v12 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink;
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink), sel_invalidate);
    long long v13 = *(void **)(v1 + v12);
    *(void *)(v1 + v12) = 0;

    id v14 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
    if (v14)
    {
      long long v15 = v14;
      id v16 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v14) + 0x88))();

      if (v16)
      {
        specialized LiveEditable.didChangeLiveEditing()();
      }
    }
  }
  uint64_t v17 = type metadata accessor for PKStroke();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 1, 1, v17);
  CanvasElementDrawingView.updateLiveDrawing(stroke:)((uint64_t)v4);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for PKStroke?);
}

void CanvasElementDrawingView.updateLiveDrawing(stroke:)(uint64_t a1)
{
  uint64_t v41 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v40 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PKStroke();
  uint64_t v42 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v11 - 8);
  long long v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v18 = v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView;
  id v19 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView, v15);
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v19) + 0x88))();

    if (v21)
    {
      id v22 = &v21[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
      swift_beginAccess();
      LODWORD(v22) = *v22;

      if (v22 == 1)
      {
        objc_super v23 = (void *)MEMORY[0x210550400](v18);
        if (v23)
        {
          id v24 = v23;
          Class v25 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v23) + 0x88))();

          if (v25)
          {
            uint64_t v26 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v25) + 0x320))();

            if (v26)
            {
              id v39 = v26;
              id v27 = objc_msgSend(v26, sel__liveDrawing);
              if (v27)
              {
                uint64_t v28 = v27;
                static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v29 = type metadata accessor for PKDrawing();
                (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v13, 0, 1, v29);
              }
              else
              {
                uint64_t v29 = type metadata accessor for PKDrawing();
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v13, 1, 1, v29);
              }
              outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PKDrawing?);
              type metadata accessor for PKDrawing();
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v17, 1, v29) == 1)
              {

                outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for PKDrawing?);
                return;
              }
              type metadata accessor for PKDrawingCoherence(0);
              if ((swift_dynamicCast() & 1) == 0)
              {

                return;
              }
              uint64_t v30 = v43;
              outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v41, (uint64_t)v7, &demangling cache variable for type metadata for PKStroke?);
              uint64_t v31 = v42;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v7, 1, v8) == 1)
              {
                outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for PKStroke?);
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v10, v7, v8);
                v32.super.Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
                uint64_t v33 = (char *)objc_msgSend(v30, sel__rootStrokesCount);
                if (__OFSUB__(v33, 1))
                {
                  __break(1u);
                  return;
                }
                objc_msgSend(v30, sel_updateStroke_indexHint_, v32.super.isa, v33 - 1);

                (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
              }
              uint64_t v34 = MEMORY[0x210550400](v18);
              id v35 = v39;
              if (v34)
              {
                unint64_t v36 = (void *)v34;
                uint64_t v37 = &v30[OBJC_IVAR___PKDrawingCoherence_model];
                swift_beginAccess();
                uint64_t v38 = v40;
                (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v4, v37, v2);
                (*(void (**)(char *))((*MEMORY[0x263F8EED0] & *v36) + 0x2B0))(v4);

                (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v2);
              }
              else
              {
              }
            }
          }
        }
      }
    }
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.mergeLiveEraseDrawing()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PKDrawing();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v24 - v10;
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing;
  long long v13 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing];
  if (v13)
  {
    uint64_t v14 = v13;
    v24[0] = v0;
    id v15 = objc_msgSend(v0, sel_drawing);
    uint64_t v16 = v1;
    uint64_t v17 = v2;
    id v18 = v15;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = v17;
    uint64_t v20 = v16;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v8, v5);
    type metadata accessor for PKDrawingCoherence(0);
    swift_dynamicCast();
    uint64_t v21 = (void *)v24[7];
    id v22 = &v14[OBJC_IVAR___PKDrawingCoherence_model];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v4, v22, v20);
    swift_beginAccess();
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    LOBYTE(v22) = Capsule.merge<A>(_:)();
    swift_endAccess();
    if (v22) {
      objc_msgSend(v21, sel_invalidateVisibleStrokes);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v20);
    objc_super v23 = *(void **)(v24[0] + v12);
    *(void *)(v24[0] + v12) = 0;
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.drawingDidEraseStrokes(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PKDrawing();
  MEMORY[0x270FA5388](v6);
  type metadata accessor for PKStroke();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v8 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
  v47.receiver = v2;
  v47.super_class = v8;
  objc_msgSendSuper2(&v47, sel_drawingDidEraseStrokes_, isa);

  uint64_t v9 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v9)
  {
    uint64_t v10 = *(void **)(v9 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v10)
    {
      id v11 = v10;
      Class v12 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v11, sel_didEraseStrokes_, v12);
    }
  }
  long long v13 = &v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView];
  uint64_t v14 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  id v15 = (void *)MEMORY[0x263F8EED0];
  if (v14)
  {
    uint64_t v16 = v14;
    uint64_t v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v14) + 0x88))();
    if (v17)
    {
      id v18 = v17;
      (*(void (**)(void *))((*v15 & *v17) + 0x5E8))(v16);

      uint64_t v16 = v18;
    }
  }
  uint64_t v19 = (void *)MEMORY[0x210550400](v13);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = (char *)(*(uint64_t (**)(void))((*v15 & *v19) + 0x88))();

    if (v21)
    {
      id v22 = &v21[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
      swift_beginAccess();
      LODWORD(v22) = *v22;

      if (v22 == 1)
      {
        id v23 = objc_msgSend(v2, sel_drawing);
        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

        id v24 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
        if (swift_dynamicCast())
        {
          Class v25 = v46;
          uint64_t v26 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing;
          id v27 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing];
          if (v27) {
            goto LABEL_14;
          }
          uint64_t v42 = v46;
          uint64_t v28 = &v46[OBJC_IVAR___PKDrawingCoherence_model];
          swift_beginAccess();
          uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
          v41(v5, v28, v44);
          uint64_t v29 = (char *)objc_allocWithZone(v24);
          v41(&v29[OBJC_IVAR___PKDrawingCoherence_model], v5, v44);
          v45.receiver = v29;
          v45.super_class = v24;
          Class v25 = v42;
          id v30 = objc_msgSendSuper2(&v45, sel_init);
          (*(void (**)(char *, uint64_t))(v43 + 8))(v5, v44);
          uint64_t v31 = *(void **)&v2[v26];
          *(void *)&v2[v26] = v30;

          id v27 = *(void **)&v2[v26];
          if (v27)
          {
LABEL_14:
            PKStroke v32 = v27;
            Class v33 = Array._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v32, sel_deleteStrokes_, v33);

            uint64_t v34 = MEMORY[0x210550400](v13);
            if (v34)
            {
              id v35 = (void *)v34;
              unint64_t v36 = &v32[OBJC_IVAR___PKDrawingCoherence_model];
              swift_beginAccess();
              uint64_t v37 = v43;
              uint64_t v38 = v36;
              uint64_t v39 = v44;
              (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v5, v38, v44);
              (*(void (**)(char *))((*v15 & *v35) + 0x2B0))(v5);

              (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v39);
            }
            else
            {
            }
          }
          else
          {
          }
        }
      }
    }
  }
}

void CanvasElementDrawingView.endedStroke(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
  uint64_t v8 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
  v29.receiver = v2;
  v29.super_class = v8;
  objc_msgSendSuper2(&v29, sel_endedStroke_, isa);

  uint64_t v9 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
  if (v9)
  {
    uint64_t v10 = *(void **)(v9 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    if (v10) {
      objc_msgSend(v10, sel_dismissPopovers);
    }
  }
  *(CFTimeInterval *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_latestEndOfStrokeTimestamp] = CACurrentMediaTime();
  uint64_t v11 = type metadata accessor for PKStroke();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v6, a1, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
  CanvasElementDrawingView.updateLiveDrawing(stroke:)((uint64_t)v6);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for PKStroke?);
  uint64_t v13 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink;
  objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink], sel_invalidate);
  uint64_t v14 = *(void **)&v2[v13];
  *(void *)&v2[v13] = 0;

  id v15 = &v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView];
  uint64_t v16 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (v16)
  {
    uint64_t v17 = v16;
    id v18 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v16) + 0x88))();

    if (v18)
    {
      specialized LiveEditable.didChangeLiveEditing()();
    }
  }
  CanvasElementDrawingView.mergeLiveEraseDrawing()();
  id v19 = objc_msgSend(v2, sel_tiledView);
  if (v19)
  {
    uint64_t v20 = v19;
    id v21 = objc_msgSend(v19, sel_canvasView);

    if (v21)
    {
      id v22 = objc_msgSend(v21, sel_drawingGestureRecognizer);

      id v23 = objc_msgSend(v22, sel_state);
      if (v23 == (id)3)
      {
        id v24 = (void *)MEMORY[0x210550400](v15);
        if (v24)
        {
          Class v25 = v24;
          uint64_t v26 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v24) + 0x88))();

          if (v26)
          {
            AnyCanvas.selectedCanvasElementIds.getter();
            uint64_t v28 = *(void *)(v27 + 16);
            swift_bridgeObjectRelease();
            if (v28) {
              AnyCanvas.selectedCanvasElementIds.setter(MEMORY[0x263F8EE78]);
            }
          }
        }
      }
    }
  }
}

uint64_t @objc CanvasElementDrawingView.beganStroke(_:)(void *a1, uint64_t a2, void *a3, void (*a4)(char *))
{
  uint64_t v7 = type metadata accessor for PKStroke();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = a3;
  id v12 = a1;
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  a4(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Void __swiftcall CanvasElementDrawingView.updateFrameForTextContainer()()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (!v1) {
    return;
  }
  uint64_t v7 = (void *)v1;
  uint64_t v2 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  uint64_t v3 = v7;
  if (!v2)
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EED0];
    uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x88))();
    if (!v5)
    {
      uint64_t v6 = v7;
      goto LABEL_6;
    }
    uint64_t v2 = (uint64_t)v5;
    (*(void (**)(void))((*v4 & *v5) + 0x580))();
    uint64_t v3 = v7;
  }

  uint64_t v6 = (void *)v2;
LABEL_6:
}

uint64_t CanvasElementDrawingView.isAtEndOfDocument.getter()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    uint64_t v3 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      char v5 = 0;
    }
    else
    {
      uint64_t v6 = (void *)MEMORY[0x263F8EED0];
      uint64_t v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x88))();
      if (!v7)
      {
        char v5 = 0;
        goto LABEL_8;
      }
      uint64_t v4 = v7;
      char v5 = (*(uint64_t (**)(void))((*v6 & *v7) + 0x588))();
    }

    uint64_t v2 = v4;
LABEL_8:

    return v5 & 1;
  }
  char v5 = 0;
  return v5 & 1;
}

Swift::Bool __swiftcall CanvasElementDrawingView.hit(byTouchLocation:bounds:)(CGPoint byTouchLocation, __C::CGRect bounds)
{
  double height = bounds.size.height;
  double width = bounds.size.width;
  double y = bounds.origin.y;
  double x = bounds.origin.x;
  double v7 = byTouchLocation.y;
  double v8 = byTouchLocation.x;
  uint64_t v9 = MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (!v9)
  {
    v30.receiver = v2;
    v30.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
    return objc_msgSendSuper2(&v30, sel_hitByTouchLocation_bounds_, v8, v7, x, y, width, height);
  }
  uint64_t v10 = (void *)v9;
  objc_msgSend(v2, sel_convertPoint_toCoordinateSpace_, v9, v8, v7);
  double v12 = v11;
  double v14 = v13;
  objc_msgSend(v2, sel_convertRect_toCoordinateSpace_, v10, x, y, width, height);
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;
  id v23 = (void *)MEMORY[0x210550400]((char *)v10 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v23)
  {

LABEL_4:
    v32.origin.double x = v16;
    v32.origin.double y = v18;
    v32.size.double width = v20;
    v32.size.double height = v22;
    v31.double x = v12;
    v31.double y = v14;
    Swift::Bool v24 = CGRectContainsPoint(v32, v31);

    return v24;
  }
  uint64_t v26 = (void *)MEMORY[0x263F8EED0];
  uint64_t v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v10) + 0x88))();
  if (!v27) {
    goto LABEL_4;
  }
  uint64_t v28 = v27;
  char v29 = (*(uint64_t (**)(double, double, double, double, double, double))((*v26 & *v27) + 0x590))(v12, v14, v16, v18, v20, v22);

  return v29 & 1;
}

void CanvasElementDrawingView.height(from:delta:)(double a1)
{
  uint64_t v3 = (void *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView]);
  if (v3)
  {
    uint64_t v4 = v3;
    char v5 = (void *)MEMORY[0x263F8EED0];
    uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x88))();
    if (v6)
    {
      double v8 = (void *)v6;
      PKDrawing._bridgeToObjectiveC()(v7);
      uint64_t v10 = v9;
      (*(void (**)(double))((*v5 & *v8) + 0x598))(a1);

      return;
    }
  }
  PKDrawing.bounds.getter();
  CGRectGetHeight(v11);
  objc_msgSend(v1, sel_drawingTransform);
}

id CanvasElementDrawingView.attachmentContainerView.getter()
{
  uint64_t v1 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (void *)MEMORY[0x263F8EED0];
    uint64_t v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))();
    if (v4)
    {
      char v5 = v4;
      uint64_t v6 = (*(uint64_t (**)(void *))((*v3 & *v4) + 0x600))(v2);

      if (v6) {
        return (id)v6;
      }
    }
    else
    {
    }
  }
  return v8;
}

void __swiftcall CanvasElementDrawingView.hitMiniMenu(_:)(UIView_optional *__return_ptr retstr, CGPoint a2)
{
  uint64_t v3 = v2;
  double y = a2.y;
  double x = a2.x;
  uint64_t v6 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v6)
  {
    double v7 = v6;
    id v8 = (void *)MEMORY[0x263F8EED0];
    uint64_t v9 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x88))();
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      objc_msgSend(v7, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
      (*(void (**)(void *))((*v8 & *v10) + 0x608))(v7);

      double v7 = v10;
    }
  }
}

Swift::Bool __swiftcall CanvasElementDrawingView.hitChrome(_:isStylus:)(CGPoint _, Swift::Bool isStylus)
{
  uint64_t v3 = v2;
  double y = _.y;
  double x = _.x;
  double v7 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = (void *)MEMORY[0x263F8EED0];
    uint64_t v10 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x88))();
    if (v10)
    {
      CGRect v11 = (void *)v10;
      objc_msgSend(v8, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
      char v12 = (*(uint64_t (**)(void *, Swift::Bool))((*v9 & *v11) + 0x610))(v8, isStylus);

      id v8 = v11;
    }
    else
    {
      char v12 = 0;
    }
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

id CanvasElementDrawingView.proofreadingView(_:willPresentStringsFor:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v54 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v53 = (char *)&v50 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v57 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v66 = (char *)&v50 - v13;
  uint64_t v67 = type metadata accessor for MagicPaperUsageProofreadingEvent();
  MEMORY[0x270FA5388](v67);
  double v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  double v18 = (float *)((char *)&v50 - v17);
  double v19 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
  v71.receiver = v2;
  v71.super_class = v19;
  objc_msgSendSuper2(&v71, sel_proofreadingView_willPresentStringsForProofreadingItem_, a1, a2);
  id result = objc_msgSend(a2, sel_resultType);
  if (result)
  {
    if (result != 1) {
      return result;
    }
    int v65 = 1;
  }
  else
  {
    int v65 = 0;
  }
  id v21 = objc_msgSend(a2, sel_replacementStrings);
  uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    unint64_t v63 = &v2[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView];
    unint64_t v61 = v15 + 8;
    uint64_t v62 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    uint64_t v60 = v15 + 80;
    uint64_t v56 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v52 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    id v51 = (void (**)(char *, uint64_t))(v6 + 8);
    os_log_type_t v55 = (char *)(v18 + 20);
    swift_bridgeObjectRetain();
    uint64_t v24 = 40;
    uint64_t v58 = v22;
    unint64_t v59 = 0x800000020C8526A0;
    uint64_t v64 = v5;
    Class v25 = v62;
    do
    {
      uint64_t v69 = v23;
      uint64_t v28 = *(void *)(v22 + v24);
      char v29 = (void *)MEMORY[0x210550400](v63);
      objc_super v30 = v29;
      uint64_t v68 = v28;
      if (v29)
      {
        CGPoint v31 = (void *)MEMORY[0x263F8EED0];
        CGRect v32 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v29) + 0x88))();
        swift_bridgeObjectRetain();

        if (v32)
        {
          objc_super v30 = (void *)(*(uint64_t (**)(void))((*v31 & *v32) + 0x320))();
        }
        else
        {
          objc_super v30 = 0;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      Class v33 = *v25;
      uint64_t v34 = (uint64_t)v66;
      (*v25)(v66, 1, 1, v5);
      v15[1] = 0;
      v15[65] = 0;
      *((_DWORD *)v15 + 17) = 0;
      v15[72] = 0;
      id v35 = v61;
      *unint64_t v61 = 0u;
      v35[1] = 0u;
      v35[2] = 0u;
      swift_unknownObjectWeakInit();
      uint64_t v36 = (uint64_t)&v15[*(int *)(v67 + 68)];
      v33((char *)v36, 1, 1, v5);
      *double v15 = v65;
      *((void *)v15 + 7) = 0;
      v15[64] = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?(v36, &demangling cache variable for type metadata for Date?);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v34, v36, &demangling cache variable for type metadata for Date?);
      swift_unknownObjectWeakAssign();

      outlined init with take of MagicPaperUsageProofreadingEvent((uint64_t)v15, (uint64_t)v18);
      if (((_BYTE)v18[18] & 1) == 0)
      {
        uint64_t v37 = v57;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v18 + *(int *)(v67 + 68), v57, &demangling cache variable for type metadata for Date?);
        if ((*v56)(v37, 1, v5) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v37, &demangling cache variable for type metadata for Date?);
        }
        else
        {
          uint64_t v38 = v53;
          (*v52)(v53, v37, v5);
          uint64_t v39 = v54;
          Date.init()();
          Date.timeIntervalSince(_:)();
          double v41 = v40;
          uint64_t v42 = *v51;
          (*v51)(v39, v5);
          *(float *)&double v41 = v41;
          v42(v38, v5);
          v18[17] = *(float *)&v41 * 1000.0;
        }
        uint64_t v43 = (void *)MEMORY[0x210550400](v55);
        id v44 = objc_msgSend(self, sel_activePencil);
        unsigned __int8 v45 = objc_msgSend(v44, sel_isConnected);

        *((unsigned char *)v18 + 1) = v45;
        uint64_t v70 = static Locale.preferredLanguages.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
        uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *((void *)v18 + 1) = v46;
        *((void *)v18 + 2) = v48;
        if (v43)
        {
          uint64_t v49 = v43;
          specialized MagicPaperUsageAnalyticsEvent.countGroups(in:)(v49);
        }
        *((unsigned char *)v18 + 72) = 1;
      }
      uint64_t v26 = (void *)MEMORY[0x21054D080](0xD000000000000026, v59);
      if (specialized AnalyticsEvent.caEventPayload.getter())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v27.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v27.super.Class isa = 0;
      }
      uint64_t v22 = v58;
      AnalyticsSendEvent();

      outlined destroy of MagicPaperUsageProofreadingEvent((uint64_t)v18);
      swift_bridgeObjectRelease();
      v24 += 16;
      uint64_t v23 = v69 - 1;
      uint64_t v5 = v64;
    }
    while (v69 != 1);
    swift_bridgeObjectRelease();
  }
  return (id)swift_bridgeObjectRelease();
}

id CanvasElementDrawingView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasElementDrawingView()
{
  return self;
}

uint64_t outlined init with take of MagicPaperUsageProofreadingEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPaperUsageProofreadingEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MagicPaperUsageProofreadingEvent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MagicPaperUsageProofreadingEvent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20C3B54E8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in CanvasElementDrawingView.resignFirstResponder()()
{
  closure #1 in CanvasElementDrawingView.becomeFirstResponder()(*(void *)(v0 + 16), (SEL *)&selRef_resignFirstResponder);
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in CanvasElementDrawingView.becomeFirstResponder()()
{
  closure #1 in CanvasElementDrawingView.becomeFirstResponder()(*(void *)(v0 + 16), (SEL *)&selRef_becomeFirstResponder);
}

void specialized CanvasElementDrawingView.init(coder:)()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingStartTimeInterval] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_latestEndOfStrokeTimestamp] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CanvasView.editingMode.setter(unsigned __int8 a1)
{
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  swift_beginAccess();
  unsigned __int8 v4 = *v3;
  *uint64_t v3 = a1;
  specialized Canvas.editingMode.didset(v4);
  uint64_t v5 = *(void **)(v1 + direct field offset for CanvasView.canvasTiledView);
  if (v5)
  {
    uint64_t v6 = *v3;
    BOOL v7 = v6 >= 2;
    if (v6 != 2) {
      uint64_t v6 = 0;
    }
    if (v7) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v7;
    id v10 = objc_msgSend(v5, sel_canvasView);
    if (v10)
    {
      uint64_t v11 = v10;
      id v12 = objc_msgSend(v10, sel_drawingGestureRecognizer);

      objc_msgSend(v12, sel_setEnabled_, v9);
    }
    objc_msgSend(v5, sel_setDrawingPolicy_, v8);
  }
  else
  {
    __break(1u);
  }
}

void *PaperViewController.imageViewController.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void PaperViewController.imageViewController.setter(void *a1)
{
}

uint64_t (*PaperViewController.imageViewController.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

void key path setter for PaperViewController.imageViewController : PaperViewController(void **a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (void **)(*a2 + *a5);
  swift_beginAccess();
  BOOL v7 = *v6;
  *uint64_t v6 = v5;
  id v8 = v5;
}

void *PaperViewController.pdfViewController.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void PaperViewController.pdfViewController.setter(void *a1)
{
}

void PaperViewController.imageViewController.setter(void *a1, void *a2)
{
  unsigned __int8 v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  uint64_t v5 = *v4;
  *unsigned __int8 v4 = a1;
}

uint64_t (*PaperViewController.pdfViewController.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t PaperViewController.display(_:readOnly:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UTType();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  double v15 = (char *)&v34 - v14;
  uint64_t v16 = (void *)(v3 + OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController);
  swift_beginAccess();
  if (*v16) {
    goto LABEL_20;
  }
  uint64_t v17 = (void *)(v3 + OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController);
  swift_beginAccess();
  if (*v17) {
    goto LABEL_20;
  }
  if (!URL.startAccessingSecurityScopedResource()()) {
    goto LABEL_20;
  }
  URL._bridgeToObjectiveC()(v18);
  CFURLRef v20 = v19;
  CGImageSourceRef v21 = CGImageSourceCreateWithURL(v19, 0);

  if (!v21) {
    goto LABEL_20;
  }
  char v22 = (char)a2;
  uint64_t v37 = a1;
  uint64_t v23 = v21;
  CFStringRef v24 = (id)CGImageSourceGetType(v23);
  if (!v24
    || (Class v25 = (__CFString *)v24,
        unint64_t v38 = 0,
        unint64_t v39 = 0,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v25,
        (a2 = (void *)v39) == 0))
  {

    goto LABEL_20;
  }
  uint64_t v36 = v3;
  unint64_t v26 = v38;
  swift_bridgeObjectRetain();
  uint64_t v35 = v26;
  UTType.init(_:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for UTType?);
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
  if (v22) {
    char v27 = 0;
  }
  else {
    char v27 = 3;
  }
  static UTType.pdf.getter();
  char v28 = UTType.conforms(to:)();
  char v29 = *(void (**)(char *, uint64_t))(v10 + 8);
  v29(v12, v9);
  if (v28)
  {
    swift_bridgeObjectRelease();
    LOBYTE(v38) = v27;
    PaperViewController.loadPDF(_:editingMode:)(v37, (char *)&v38);
  }
  else
  {
    static UTType.image.getter();
    char v30 = UTType.conforms(to:)();
    v29(v12, v9);
    if ((v30 & 1) == 0)
    {
      while (1)
      {
        unint64_t v38 = 0;
        unint64_t v39 = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        unint64_t v38 = 0xD000000000000014;
        unint64_t v39 = 0x800000020C8527F0;
        v32._uint64_t countAndFlagsBits = v35;
        v32._object = a2;
        String.append(_:)(v32);
        v33._uint64_t countAndFlagsBits = 46;
        v33._object = (void *)0xE100000000000000;
        String.append(_:)(v33);
LABEL_20:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
    swift_bridgeObjectRelease();
    LOBYTE(v38) = v27;
    PaperViewController.loadImage(_:editingMode:)(v37, &v38);
  }

  return ((uint64_t (*)(char *, uint64_t))v29)(v15, v9);
}

void PaperViewController.loadImage(_:editingMode:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v76 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit19PaperViewController_context];
  LOBYTE(a2) = *a2;
  id v16 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CanvasElementViewController<Image>));
  id v17 = v15;
  double v18 = (char *)specialized CanvasElementViewController.init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(v17, (char)a2, 1, 0, 1, 0, 0);

  id v19 = objc_msgSend(v3, sel_view);
  if (!v19)
  {
    __break(1u);
    goto LABEL_13;
  }
  CFURLRef v20 = v19;
  uint64_t v74 = v9;
  uint64_t v75 = v14;
  id v21 = objc_msgSend(v18, sel_view);
  if (!v21)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  char v22 = v21;
  objc_msgSend(v20, sel_insertSubview_atIndex_, v21, 0);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_20C8344C0;
  id v24 = objc_msgSend(v3, sel_view);
  if (!v24)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  Class v25 = v24;
  unint64_t v72 = v11;
  uint64_t v73 = a1;
  id v26 = objc_msgSend(v24, sel_topAnchor);

  id v27 = objc_msgSend(v18, sel_view);
  if (!v27)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  char v28 = v27;
  objc_super v71 = v8;
  id v29 = objc_msgSend(v27, sel_topAnchor);

  id v30 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v29);
  *(void *)(v23 + 32) = v30;
  id v31 = objc_msgSend(v3, sel_view);
  if (!v31)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  Swift::String v32 = v31;
  id v33 = objc_msgSend(v31, sel_bottomAnchor);

  id v34 = objc_msgSend(v18, sel_view);
  if (!v34)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v35 = v34;
  id v36 = objc_msgSend(v34, sel_bottomAnchor);

  id v37 = objc_msgSend(v33, sel_constraintEqualToAnchor_, v36);
  *(void *)(v23 + 40) = v37;
  id v38 = objc_msgSend(v3, sel_view);
  if (!v38)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v39 = v38;
  id v40 = objc_msgSend(v38, sel_trailingAnchor);

  id v41 = objc_msgSend(v18, sel_view);
  if (!v41)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v42 = v41;
  id v43 = objc_msgSend(v41, sel_trailingAnchor);

  id v44 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v43);
  *(void *)(v23 + 48) = v44;
  id v45 = objc_msgSend(v3, sel_view);
  if (!v45)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v46 = v45;
  id v47 = objc_msgSend(v45, sel_leadingAnchor);

  id v48 = objc_msgSend(v18, sel_view);
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = self;
    id v51 = objc_msgSend(v49, sel_leadingAnchor);

    id v52 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v51);
    *(void *)(v23 + 56) = v52;
    uint64_t v77 = v23;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v50, sel_activateConstraints_, isa);

    objc_msgSend(v3, sel_addChildViewController_, v18);
    objc_msgSend(v18, sel_didMoveToParentViewController_, v3);
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v75, 1, 1, v54);
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v72, v73, v74);
    LOBYTE(v77) = 0;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRCustomFileSyncManager<ImageFileSync>);
    swift_allocObject();
    id v55 = v17;
    uint64_t v56 = CRCustomFileSyncManager.init(_:sync:at:customSync:)();
    uint64_t v57 = type metadata accessor for TaskPriority();
    uint64_t v58 = (uint64_t)v71;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v71, 1, 1, v57);
    uint64_t v59 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for MainActor();
    swift_retain();
    swift_retain();
    uint64_t v60 = static MainActor.shared.getter();
    unint64_t v61 = (void *)swift_allocObject();
    uint64_t v62 = MEMORY[0x263F8F500];
    v61[2] = v60;
    v61[3] = v62;
    v61[4] = v56;
    v61[5] = v59;
    swift_release();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v58, (uint64_t)&async function pointer to partial apply for closure #1 in PaperViewController.loadImage(_:editingMode:), (uint64_t)v61);
    swift_release();
    uint64_t v63 = *(void *)&v18[direct field offset for CanvasElementViewController.passThroughSubject];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<Capsule<Image>, Never>>);
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = v63;
    uint64_t v77 = v64;
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = v18;
    *(void *)(v65 + 24) = v56;
    swift_retain();
    swift_retain();
    unint64_t v66 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type AnyPublisher<Capsule<Image>, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>);
    uint64_t v67 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageCancellable] = v67;
    swift_release();
    uint64_t v68 = (void **)&v3[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController];
    swift_beginAccess();
    uint64_t v69 = *v68;
    *uint64_t v68 = v18;
    swift_release();

    return;
  }
LABEL_21:
  __break(1u);
}

uint64_t closure #1 in PaperViewController.loadImage(_:editingMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v5[13] = v6;
  v5[14] = *(void *)(v6 - 8);
  v5[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Capsule<Image>>);
  v5[18] = v7;
  v5[19] = *(void *)(v7 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Capsule<Image>>.Iterator);
  v5[21] = v8;
  v5[22] = *(void *)(v8 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = type metadata accessor for MainActor();
  v5[25] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[26] = v10;
  v5[27] = v9;
  return MEMORY[0x270FA2498](closure #1 in PaperViewController.loadImage(_:editingMode:), v10, v9);
}

uint64_t closure #1 in PaperViewController.loadImage(_:editingMode:)()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  CRCustomFileSyncManager.updates.getter();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  uint64_t v4 = static MainActor.shared.getter();
  v0[28] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[29] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in PaperViewController.loadImage(_:editingMode:);
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[17];
  uint64_t v8 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA1F68](v7, v4, v8, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 216);
  uint64_t v3 = *(void *)(v1 + 208);
  return MEMORY[0x270FA2498](closure #1 in PaperViewController.loadImage(_:editingMode:), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void **v9;
  char *v10;
  void *v11;
  id v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    uint64_t v6 = v0[12] + 16;
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[15], v1, v2);
    uint64_t v7 = MEMORY[0x210550400](v6);
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      uint64_t v9 = (void **)(v7 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        uint64_t v11 = *(void **)&v10[direct field offset for Canvas.paperView];
        swift_beginAccess();
        type metadata accessor for Image();
        _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
        uint64_t v12 = v11;
        uint64_t v13 = v10;
        Capsule.merge<A>(_:)();
        swift_endAccess();

        uint64_t v14 = v13;
        specialized CanvasView.persistUIState(_:)((uint64_t)v14, v14);

        id v19 = *(unsigned char **)&v14[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
        if (!v19)
        {
          __break(1u);
          return MEMORY[0x270FA1F68](v15, v16, v17, v18);
        }
        CFURLRef v20 = MEMORY[0x210550400](&v19[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
        if (v20)
        {
          id v21 = (void *)v20;
          if (*(void *)&v19[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController])
          {
            char v22 = *(void *)&v19[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
            uint64_t v23 = *(void *)&v19[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
            id v24 = *(void *)&v19[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
            Class v25 = v19[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
            id v26 = v19;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            MiniMenuState.update(from:in:)(v22, v23, v24, v25, v21);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {

          id v21 = v14;
        }
      }
      else
      {
        id v27 = v0[16];
        char v28 = v0[13];
        id v29 = v0[14];
        (*(void (**)(uint64_t, void, uint64_t))(v29 + 16))(v27, v0[15], v28);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v28);
        specialized CanvasElementViewController.updateViewForPaper(_:)(v27);
        outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for Capsule<Image>?);
        id v21 = v8;
      }
    }
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
    id v30 = static MainActor.shared.getter();
    v0[28] = v30;
    id v31 = (void *)swift_task_alloc();
    v0[29] = v31;
    *id v31 = v0;
    v31[1] = closure #1 in PaperViewController.loadImage(_:editingMode:);
    double v18 = v0[21];
    double v15 = v0[17];
    id v17 = MEMORY[0x263F8F500];
    id v16 = v30;
    return MEMORY[0x270FA1F68](v15, v16, v17, v18);
  }
  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #2 in PaperViewController.loadImage(_:editingMode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)(a2 + direct field offset for CanvasElementViewController.editingMode);
  uint64_t result = swift_beginAccess();
  if (*v2) {
    return CRCustomFileSyncManager.sync(_:)();
  }
  return result;
}

id PaperViewController.loadPDF(_:editingMode:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v57 - v12;
  char v14 = *a2;
  static CRKeyPath.unique.getter();
  uint64_t v59 = a1;
  uint64_t v60 = v2;
  type metadata accessor for PaperDocument(0);
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.init(id:initClosure:)();
  type metadata accessor for CRContext();
  uint64_t v62 = 0;
  memset(v61, 0, sizeof(v61));
  double v15 = (void *)MEMORY[0x21054C990](0, v61);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  LOBYTE(v61[0]) = v14;
  id v16 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController(0));
  id v17 = specialized PaperDocumentViewController.init(context:paperDocument:editingMode:)(v15, (uint64_t)v10, (unsigned __int8 *)v61);

  id result = objc_msgSend(v2, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  id v19 = result;
  id result = objc_msgSend(v17, sel_view);
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  CFURLRef v20 = result;
  objc_msgSend(v19, sel_insertSubview_atIndex_, result, 0);

  id v21 = objc_msgSend(v17, sel_view);
  if (!v21) {
    goto LABEL_6;
  }
  char v22 = v21;
  id result = objc_msgSend(v3, sel_view);
  if (result)
  {
    uint64_t v23 = result;
    objc_msgSend(result, sel_bounds);
    double v25 = v24;
    double v27 = v26;
    double v29 = v28;
    double v31 = v30;

    objc_msgSend(v22, sel_setFrame_, v25, v27, v29, v31);
LABEL_6:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_20C8344C0;
    id result = objc_msgSend(v3, sel_view);
    if (result)
    {
      id v33 = result;
      uint64_t v58 = v13;
      id v34 = objc_msgSend(result, sel_topAnchor);

      id result = objc_msgSend(v17, sel_view);
      if (result)
      {
        uint64_t v35 = result;
        id v36 = objc_msgSend(result, sel_topAnchor);

        id v37 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v36);
        *(void *)(v32 + 32) = v37;
        id result = objc_msgSend(v3, sel_view);
        if (result)
        {
          id v38 = result;
          id v39 = objc_msgSend(result, sel_bottomAnchor);

          id result = objc_msgSend(v17, sel_view);
          if (result)
          {
            id v40 = result;
            id v41 = objc_msgSend(result, sel_bottomAnchor);

            id v42 = objc_msgSend(v39, sel_constraintEqualToAnchor_, v41);
            *(void *)(v32 + 40) = v42;
            id result = objc_msgSend(v3, sel_view);
            if (result)
            {
              id v43 = result;
              uint64_t v57 = v8;
              id v44 = objc_msgSend(result, sel_trailingAnchor);

              id result = objc_msgSend(v17, sel_view);
              if (result)
              {
                id v45 = result;
                id v46 = objc_msgSend(result, sel_trailingAnchor);

                id v47 = objc_msgSend(v44, sel_constraintEqualToAnchor_, v46);
                *(void *)(v32 + 48) = v47;
                id result = objc_msgSend(v3, sel_view);
                if (result)
                {
                  id v48 = result;
                  id v49 = objc_msgSend(result, sel_leadingAnchor);

                  id result = objc_msgSend(v17, sel_view);
                  if (result)
                  {
                    uint64_t v50 = result;
                    id v51 = self;
                    id v52 = objc_msgSend(v50, sel_leadingAnchor);

                    id v53 = objc_msgSend(v49, sel_constraintEqualToAnchor_, v52);
                    *(void *)(v32 + 56) = v53;
                    *(void *)&v61[0] = v32;
                    specialized Array._endMutation()();
                    type metadata accessor for NSLayoutConstraint();
                    Class isa = Array._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease();
                    objc_msgSend(v51, sel_activateConstraints_, isa);

                    objc_msgSend(v3, sel_addChildViewController_, v17);
                    objc_msgSend(v17, sel_didMoveToParentViewController_, v3);
                    id v55 = (void **)&v3[OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController];
                    swift_beginAccess();
                    uint64_t v56 = *v55;
                    *id v55 = v17;

                    return (id)(*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v58, v7);
                  }
                  goto LABEL_24;
                }
LABEL_23:
                __break(1u);
LABEL_24:
                __break(1u);
                goto LABEL_25;
              }
LABEL_22:
              __break(1u);
              goto LABEL_23;
            }
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t closure #1 in PaperViewController.loadPDF(_:editingMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v24);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  double v16 = MEMORY[0x270FA5388](v15 - 8);
  double v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a2, v11, v16);
  swift_retain();
  uint64_t v19 = CRContext.assetManager.getter();
  specialized PaperDocument.init<A>(url:in:assetManager:)((uint64_t)v14, a1, v19, (uint64_t)v18);
  uint64_t v20 = type metadata accessor for PaperDocument(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v18, 1, v20) != 1) {
    return outlined init with take of PaperDocument((uint64_t)v18, a3);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  CROrderedSet.init()();
  uint64_t v21 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 1, 1, v21);
  outlined init with copy of CRAsset?((uint64_t)v10, (uint64_t)v7);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAsset?);
  *(void *)(a3 + *(int *)(v20 + 24)) = MEMORY[0x263F8EE80];
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for PaperDocument?);
}

Swift::Void __swiftcall PaperViewController.setCanvasEditingMode(_:)(PaperKit::CanvasEditingMode a1)
{
  char v2 = *(unsigned char *)a1;
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController);
  swift_beginAccess();
  uint64_t v4 = (char *)*v3;
  if (*v3)
  {
    uint64_t v5 = &v4[direct field offset for CanvasElementViewController.editingMode];
    swift_beginAccess();
    char v6 = *v5;
    *uint64_t v5 = v2;
    uint64_t v7 = v4;
    specialized CanvasElementViewController.editingMode.didset(v6);
  }
  else
  {
    uint64_t v8 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController);
    swift_beginAccess();
    uint64_t v7 = (char *)*v8;
    if (!v7) {
      return;
    }
    uint64_t v9 = &v7[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode];
    swift_beginAccess();
    *uint64_t v9 = v2;
    uint64_t v10 = (void **)&v7[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    uint64_t v11 = (char *)*v10;
    if (*v10)
    {
      uint64_t v12 = (unsigned __int8 *)&v11[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
      swift_beginAccess();
      unsigned __int8 v13 = *v12;
      *uint64_t v12 = v2;
      unsigned __int8 v17 = v13;
      char v14 = v7;
      uint64_t v15 = v11;
      PaperDocumentView.editingMode.didset(&v17);
    }
    else
    {
      double v16 = v7;
    }
    PaperDocumentViewController.updatePlusButton()();
  }
}

Swift::Void __swiftcall PaperViewController.revertAllChanges()()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController);
  swift_beginAccess();
  char v2 = (char *)*v1;
  if (*v1)
  {
    uint64_t v3 = (void **)&v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    uint64_t v4 = *v3;
    if (*v3)
    {
      uint64_t v5 = v2;
      id v6 = v4;
      PaperDocumentView.revertAllChanges()();
    }
  }
}

id PaperViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x21054D080]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id PaperViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit19PaperViewController_context;
  type metadata accessor for CRContext();
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v9 = v3;
  uint64_t v10 = MEMORY[0x21054C990](0, v15);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(void *)&v4[v8] = v10;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController] = 0;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageFileSyncManager] = 0;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageCancellable] = 0;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController] = 0;

  if (a2)
  {
    uint64_t v11 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
  }
  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for PaperViewController();
  id v12 = objc_msgSendSuper2(&v14, sel_initWithNibName_bundle_, v11, a3);

  return v12;
}

id PaperViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id PaperViewController.init(coder:)(void *a1)
{
  char v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit19PaperViewController_context;
  type metadata accessor for CRContext();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v5 = v1;
  uint64_t v6 = MEMORY[0x21054C990](0, v10);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(void *)&v2[v4] = v6;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageFileSyncManager] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit19PaperViewController_imageCancellable] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController] = 0;

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for PaperViewController();
  id v7 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);

  return v7;
}

id PaperViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized CanvasElementViewController.editingMode.didset(char a1)
{
  uint64_t v2 = v1;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v44 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  id v48 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized CanvasElementViewController.updateToolPickerVisibility()();
  uint64_t v5 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*v5)
  {
    id v7 = (unsigned char *)(v1 + direct field offset for CanvasElementViewController.editingMode);
    swift_beginAccess();
    LOBYTE(v7) = *v7;
    id v8 = v6;
    specialized CanvasView.editingMode.setter(v7);
  }
  specialized CanvasElementViewController.updatePlusButton()();
  objc_super v9 = (unsigned char *)(v2 + direct field offset for CanvasElementViewController.editingMode);
  swift_beginAccess();
  if (*v9 == 1 && a1 != 1)
  {
    uint64_t v11 = (char *)*v5;
    if (*v5)
    {
      id v12 = *(void **)&v11[direct field offset for Canvas._editingView];
      if (v12)
      {
        unsigned __int8 v13 = *(_UNKNOWN ***)&v11[direct field offset for Canvas._editingView + 8];
        id v14 = *(id *)&v11[direct field offset for Canvas._editingView];
      }
      else
      {
        id v14 = *(id *)&v11[direct field offset for Canvas.paperView];
        unsigned __int8 v13 = &protocol witness table for ContainerCanvasElementView<A>;
      }
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v16 = (uint64_t (*)(uint64_t, _UNKNOWN **))v13[18];
      id v17 = v12;
      double v18 = (void *)v16(ObjectType, v13);

      if (v18)
      {
        unint64_t v19 = FormFillingView.formFields.getter();
        unint64_t v20 = v19;
        if (v19 >> 62) {
          goto LABEL_43;
        }
        uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        while (1)
        {
          uint64_t v43 = v2;
          id v42 = v18;
          if (!v21) {
            break;
          }
          unint64_t v47 = v20 & 0xC000000000000001;
          id v45 = (void (**)(char *, uint64_t))(v44 + 8);
          id v46 = (void (**)(char *, char *, uint64_t))(v44 + 16);
          uint64_t v2 = 4;
          char v22 = v48;
          uint64_t v23 = v49;
          while (1)
          {
            double v18 = (void *)(v2 - 4);
            id v24 = v47 ? (id)MEMORY[0x21054E050](v2 - 4, v20) : *(id *)(v20 + 8 * v2);
            double v25 = v24;
            uint64_t v26 = v2 - 3;
            if (__OFADD__(v18, 1)) {
              break;
            }
            type metadata accessor for ShapeView();
            double v27 = (void *)swift_dynamicCastClass();
            if (v27)
            {
              double v28 = (char *)v27 + *(void *)((*MEMORY[0x263F8EED0] & *v27) + 0x380);
              swift_beginAccess();
              (*v46)(v22, v28, v23);
              swift_getKeyPath();
              _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
              id v29 = v25;
              Capsule<>.subscript.getter();
              swift_release();
              (*v45)(v22, v23);

              if (v50 != 50 && v50 != 1)
              {
                swift_bridgeObjectRelease_n();
                double v18 = v42;
                double v30 = v29;
                goto LABEL_27;
              }
            }

            ++v2;
            if (v26 == v21)
            {
              swift_bridgeObjectRelease_n();
              double v30 = 0;
              double v18 = v42;
              goto LABEL_27;
            }
          }
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        }
        swift_bridgeObjectRelease_n();
        double v30 = 0;
LABEL_27:
        unint64_t v31 = FormFillingView.formFields.getter();
        unint64_t v32 = v31;
        if (v31 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
          if (v33) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v33 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v33)
          {
LABEL_29:
            id v41 = v30;
            unint64_t v47 = v32 & 0xC000000000000001;
            id v45 = (void (**)(char *, uint64_t))(v44 + 8);
            id v46 = (void (**)(char *, char *, uint64_t))(v44 + 16);
            uint64_t v2 = 4;
            id v34 = v48;
            unint64_t v20 = v49;
            while (1)
            {
              double v18 = (void *)(v2 - 4);
              if (v47) {
                id v35 = (id)MEMORY[0x21054E050](v2 - 4, v32);
              }
              else {
                id v35 = *(id *)(v32 + 8 * v2);
              }
              id v36 = v35;
              uint64_t v37 = v2 - 3;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              type metadata accessor for ShapeView();
              id v38 = (void *)swift_dynamicCastClass();
              if (!v38) {
                break;
              }
              id v39 = (char *)v38 + *(void *)((*MEMORY[0x263F8EED0] & *v38) + 0x380);
              swift_beginAccess();
              (*v46)(v34, v39, v20);
              swift_getKeyPath();
              _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
              id v40 = v36;
              Capsule<>.subscript.getter();
              swift_release();
              (*v45)(v34, v20);

              if (v51 != 50) {
                break;
              }

              ++v2;
              if (v37 == v33)
              {
                swift_bridgeObjectRelease_n();
                id v36 = 0;
                goto LABEL_39;
              }
            }
            swift_bridgeObjectRelease_n();
LABEL_39:
            double v18 = v42;
            double v30 = v41;
            if (v41) {
              goto LABEL_48;
            }
            goto LABEL_46;
          }
        }
        swift_bridgeObjectRelease_n();
        id v36 = 0;
        if (!v30)
        {
LABEL_46:
          if (!v36)
          {
            id v36 = v18;
            goto LABEL_49;
          }
          id v36 = v36;
          double v30 = v36;
        }
LABEL_48:
        objc_msgSend(v30, sel_becomeFirstResponder, v41);

LABEL_49:
      }
    }
  }
  specialized CanvasElementViewController.updateActionInfoViewVisibility()();
}

UIView *specialized CanvasElementViewController.updatePlusButton()()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[direct field offset for CanvasElementViewController.editingMode];
  swift_beginAccess();
  int v3 = *v2;
  uint64_t v4 = *(void **)&v1[direct field offset for CanvasElementViewController.plusButton];
  if (v3 != 1) {
    return (UIView *)objc_msgSend(*(id *)&v1[direct field offset for CanvasElementViewController.plusButton], sel_removeFromSuperview);
  }
  id v5 = objc_msgSend(*(id *)&v1[direct field offset for CanvasElementViewController.plusButton], sel_superview);

  if (v5) {
    objc_msgSend(v4, sel_removeFromSuperview);
  }
  uint64_t v6 = (id *)&v1[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  if (*v6) {
    objc_msgSend(*v6, sel_addSubview_, v4);
  }
  id result = (UIView *)objc_msgSend(v1, sel_view);
  if (result)
  {
    id v8 = result;
    FormPlusButtonView.setConstraintsBasedOn(_:)(result);

    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_retain();
    FormPlusButtonView.setMenuWithActions(addTextBoxHandler:addSignatureHandler:)();
    swift_release_n();
    return (UIView *)swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized closure #1 in CanvasElementViewController.updatePlusButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = (uint64_t *)(v3 + direct field offset for CanvasElementViewController.canvasView);
    uint64_t v6 = (void *)swift_beginAccess();
    uint64_t v7 = *v5;
    if (*v5
      && ((id v8 = *(void **)(v7 + direct field offset for Canvas._editingView)) == 0
        ? (v6 = *(id *)(v7 + direct field offset for Canvas.paperView), objc_super v9 = v6)
        : (objc_super v9 = *(void **)(v7 + direct field offset for Canvas._editingView)),
          uint64_t v10 = (void *)MEMORY[0x263F8EED0],
          uint64_t v11 = (void *)(*(uint64_t (**)(void *))((*MEMORY[0x263F8EED0] & *v9) + 0x88))(v6),
          id v12 = v8,
          v9,
          v11))
    {
      id v13 = objc_msgSend(v4, sel_view);
      if (!v13)
      {
LABEL_16:
        __break(1u);
        return;
      }
      id v14 = v13;
      objc_msgSend(v13, sel_center);
      double v16 = v15;
      double v18 = v17;

      if (one-time initialization token for defaultFormFieldSize != -1) {
        swift_once();
      }
      long long v19 = static FormFillingView.defaultFormFieldSize;
      double v20 = v16 - *(double *)&static FormFillingView.defaultFormFieldSize * 0.5;
      double v21 = v18 - *((double *)&static FormFillingView.defaultFormFieldSize + 1) * 0.5;
      uint64_t v58 = *(uint64_t (**)(void))((*v10 & *v11) + 0x2F8);
      char v22 = (void *)v58();
      id v23 = objc_msgSend(v4, sel_view);
      objc_msgSend(v22, sel_convertRect_fromView_, v23, v20, v21, v19);
      CGFloat v25 = v24;
      CGFloat v27 = v26;
      CGFloat v29 = v28;
      CGFloat v31 = v30;

      LOBYTE(v59) = 1;
      specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v11, 0, 0, 0, 0, 1, (unsigned __int8 *)&v59, 0x7FFFFFFFFFFFFFFFLL, v25, v27, v29, v31, 1u, 0, 0xBu, 5u);
      uint64_t v33 = v32;
      id v34 = (void *)v58();
      uint64_t v36 = v35;
      uint64_t ObjectType = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20C835790;
      *(void *)(inited + 32) = v33;
      uint64_t v59 = inited;
      specialized Array._endMutation()();
      uint64_t v39 = v59;
      id v40 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 176);
      id v41 = v33;
      v40(v39, 0, ObjectType, v36);
      swift_bridgeObjectRelease();

      id v42 = v41;
      uint64_t v43 = specialized CanvasMembers.init(_:)(v42);
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      LOBYTE(ObjectType) = v48;

      AnyCanvas.selection.setter(v43, v45, v47, ObjectType & 1);
      uint64_t v49 = (void *)v58();
      uint64_t v51 = v50;
      uint64_t v52 = swift_getObjectType();
      id v53 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v51 + 144))(v52, v51);

      if (v53)
      {
        uint64_t v54 = *(void *)&v53[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
        swift_retain();

        uint64_t v55 = *(void *)(v54 + 48);
        BOOL v56 = __OFADD__(v55, 1);
        uint64_t v57 = v55 + 1;
        if (!v56)
        {
          *(void *)(v54 + 48) = v57;
          swift_release();
          return;
        }
        __break(1u);
        goto LABEL_16;
      }
    }
    else
    {
    }
  }
}

uint64_t specialized closure #2 in CanvasElementViewController.updatePlusButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v2);
  if (result)
  {
    uint64_t v4 = (char *)result;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v5 = *(void **)&v4[direct field offset for CanvasElementViewController.plusButton];
    id v6 = v5;
    objc_msgSend(v6, sel_bounds);
    CGFloat v8 = v7;
    CGFloat v10 = v9;
    CGFloat v12 = v11;
    CGFloat v14 = v13;
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    specialized SignatureManager.showSignatures(_:_:_:_:)(v4, v5, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementViewController.updatePlusButton(), v15, v8, v10, v12, v14);

    return swift_release_n();
  }
  return result;
}

void specialized closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x210550400](a2 + 16);
  if (v8)
  {
    double v9 = (void *)v8;
    if (a1
      && (CGFloat v10 = (uint64_t *)(v8 + direct field offset for CanvasElementViewController.canvasView),
          double v11 = (void *)swift_beginAccess(),
          (uint64_t v12 = *v10) != 0))
    {
      double v13 = *(void **)(v12 + direct field offset for Canvas._editingView);
      if (v13)
      {
        CGFloat v14 = *(void **)(v12 + direct field offset for Canvas._editingView);
      }
      else
      {
        double v11 = *(id *)(v12 + direct field offset for Canvas.paperView);
        CGFloat v14 = v11;
      }
      uint64_t v15 = (void *)MEMORY[0x263F8EED0];
      double v16 = (void *)(*(uint64_t (**)(void *))((*MEMORY[0x263F8EED0] & *v14) + 0x88))(v11);
      id v17 = a1;
      id v18 = v13;

      if (v16)
      {
        type metadata accessor for SignatureManager();
        swift_initStaticObject();
        id v19 = objc_msgSend(v9, sel_view);
        if (v19)
        {
          double v20 = v19;
          objc_msgSend(v19, sel_center);
          double v22 = v21;
          double v24 = v23;

          SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)((uint64_t)v17, 0, 1, 0, 1, v22, v24);
          CGFloat v25 = *(void (**)(unsigned char *, uint64_t, void, void, uint64_t, uint64_t, _UNKNOWN **))((*v15 & *v16) + 0x490);
          uint64_t v26 = type metadata accessor for Signature();
          uint64_t v27 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
          v25(v7, 1, 0, 0, v26, v27, &protocol witness table for Signature);

          (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
        }
        else
        {
          __break(1u);
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
}

uint64_t type metadata accessor for PaperViewController()
{
  return self;
}

id sub_20C3B8F68@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit19PaperViewController_imageViewController, a2);
}

void sub_20C3B8F74(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

id sub_20C3B8F94@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController, a2);
}

id keypath_getTm@<X0>(void *a1@<X0>, void *a2@<X3>, void **a3@<X8>)
{
  uint64_t v4 = (void **)(*a1 + *a2);
  swift_beginAccess();
  uint64_t v5 = *v4;
  *a3 = *v4;
  return v5;
}

void sub_20C3B9000(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t method lookup function for PaperViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PaperViewController);
}

uint64_t dispatch thunk of PaperViewController.imageViewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of PaperViewController.imageViewController.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of PaperViewController.imageViewController.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of PaperViewController.pdfViewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of PaperViewController.pdfViewController.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PaperViewController.pdfViewController.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of PaperViewController.display(_:readOnly:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of PaperViewController.setCanvasEditingMode(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of PaperViewController.revertAllChanges()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

void specialized Canvas.editingMode.didset(unsigned __int8 a1)
{
  void (*v5)(uint64_t *__return_ptr);
  void *v6;
  uint64_t (*v7)(void);
  char v8;
  char **v9;
  void *v10;
  _UNKNOWN **v11;
  id v12;
  uint64_t ObjectType;
  void (*v14)(uint64_t, _UNKNOWN **);
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t vars8;

  uint64_t v2 = v1;
  int v3 = a1;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & *v1) + 0x2C8);
  v5((uint64_t *)((char *)&v19 + 2));
  if (BYTE2(v19) != v3)
  {
    uint64_t v6 = *(void **)((char *)v1 + direct field offset for Canvas.dropInteraction);
    if (v6)
    {
      double v7 = *(uint64_t (**)(void))((*v4 & *v1) + 0xB18);
      id v18 = v6;
      uint64_t v8 = v7();
      double v9 = &selRef_addInteraction_;
      if ((v8 & 1) == 0) {
        double v9 = &selRef_removeInteraction_;
      }
      ((void (*)(uint64_t *__return_ptr, id))v5)((uint64_t *)((char *)&v19 + 1), objc_msgSend(v1, *v9, v18));
      if (v3 == 1 || BYTE1(v19) == 1)
      {
        CGFloat v10 = *(void **)((char *)v1 + direct field offset for Canvas._editingView);
        if (v10)
        {
          double v11 = *(_UNKNOWN ***)((char *)v1 + direct field offset for Canvas._editingView + 8);
          uint64_t v12 = *(id *)((char *)v1 + direct field offset for Canvas._editingView);
        }
        else
        {
          uint64_t v12 = *(id *)((char *)v1 + direct field offset for Canvas.paperView);
          double v11 = &protocol witness table for ContainerCanvasElementView<A>;
        }
        uint64_t ObjectType = swift_getObjectType();
        CGFloat v14 = (void (*)(uint64_t, _UNKNOWN **))v11[3];
        uint64_t v15 = v10;
        v14(ObjectType, v11);
      }
      v5(&v19);
      if (!(_BYTE)v19)
      {
        double v16 = *(void *)((char *)v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
        if (!v16)
        {
          __break(1u);
          return;
        }
        id v17 = (void *)(v16 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (*(void *)(*v17 + 16) || *(void *)(v17[1] + 16)) {
          AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
        }
      }
    }
  }
}

uint64_t sub_20C3B946C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for specialized closure #1 in CanvasElementViewController.updatePlusButton()(uint64_t a1)
{
  specialized closure #1 in CanvasElementViewController.updatePlusButton()(a1, v1);
}

uint64_t partial apply for specialized closure #2 in CanvasElementViewController.updatePlusButton()(uint64_t a1)
{
  return specialized closure #2 in CanvasElementViewController.updatePlusButton()(a1, v1);
}

void partial apply for specialized closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(void *a1)
{
  specialized closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(a1, v1);
}

uint64_t partial apply for closure #1 in PaperViewController.loadPDF(_:editingMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in PaperViewController.loadPDF(_:editingMode:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type CRAsset? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRAsset?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined init with take of PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PaperDocument(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C3B9594()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in PaperViewController.loadImage(_:editingMode:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in PaperViewController.loadImage(_:editingMode:)(a1, v4, v5, v7, v6);
}

uint64_t sub_20C3B969C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in PaperViewController.loadImage(_:editingMode:)(uint64_t a1)
{
  return closure #2 in PaperViewController.loadImage(_:editingMode:)(a1, *(void *)(v1 + 16));
}

uint64_t _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall StrokeWidthViewController.viewDidLoad()()
{
  v51.receiver = v0;
  v51.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v51, sel_viewDidLoad);
  id v49 = self;
  id v50 = objc_msgSend(v49, sel_configurationWithPointSize_weight_, 3, 30.0);
  uint64_t v1 = (void *)MEMORY[0x21054D080](0x6169642E656E696CLL, 0xED00006C616E6F67);
  id v48 = self;
  id v2 = objc_msgSend(v48, sel_systemImageNamed_withConfiguration_, v1, v50);

  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v2);
  id v47 = self;
  id v4 = objc_msgSend(v47, sel_labelColor);
  objc_msgSend(v3, sel_setTintColor_, v4);

  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v5 = ValueEditingViewController.slider.getter();
  id v6 = *(id *)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  objc_msgSend(v6, sel_addSubview_, v3);
  id v46 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_20C837410;
  id v8 = objc_msgSend(v3, sel_centerYAnchor);
  double v9 = ValueEditingViewController.slider.getter();
  id v10 = objc_msgSend(v9, (SEL)&selRef_attribute_atIndex_longestEffectiveRange_inRange_ + 6);

  id v11 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v10);
  *(void *)(v7 + 32) = v11;
  id v12 = objc_msgSend(v3, sel_leadingAnchor);
  double v13 = ValueEditingViewController.slider.getter();
  id v14 = *(id *)&v13[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  id v15 = objc_msgSend(v14, sel_leadingAnchor);
  id v16 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v15);

  *(void *)(v7 + 40) = v16;
  id v17 = objc_msgSend(v3, sel_trailingAnchor);
  id v18 = ValueEditingViewController.slider.getter();
  id v19 = *(id *)&v18[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  id v20 = objc_msgSend(v19, (SEL)&selRef_setCornerCurve_ + 4);
  id v21 = objc_msgSend(v17, sel_constraintLessThanOrEqualToAnchor_, v20);

  *(void *)(v7 + 48) = v21;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v46, sel_activateConstraints_, isa);

  id v23 = objc_msgSend(v49, sel_configurationWithPointSize_weight_, 9, 30.0);
  double v24 = (void *)MEMORY[0x21054D080](0x6169642E656E696CLL, 0xED00006C616E6F67);
  id v25 = objc_msgSend(v48, sel_systemImageNamed_withConfiguration_, v24, v23);

  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v25);
  id v27 = objc_msgSend(v47, sel_labelColor);
  objc_msgSend(v26, sel_setTintColor_, v27);

  objc_msgSend(v26, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  double v28 = ValueEditingViewController.slider.getter();
  id v29 = *(id *)&v28[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

  objc_msgSend(v29, sel_addSubview_, v26);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_20C837410;
  id v31 = objc_msgSend(v26, sel_centerYAnchor);
  unint64_t v32 = ValueEditingViewController.slider.getter();
  id v33 = objc_msgSend(v32, sel_centerYAnchor);

  id v34 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v33);
  *(void *)(v30 + 32) = v34;
  id v35 = objc_msgSend(v26, sel_leadingAnchor);
  uint64_t v36 = ValueEditingViewController.slider.getter();
  id v37 = *(id *)&v36[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

  id v38 = objc_msgSend(v37, sel_leadingAnchor);
  id v39 = objc_msgSend(v35, sel_constraintGreaterThanOrEqualToAnchor_, v38);

  *(void *)(v30 + 40) = v39;
  id v40 = objc_msgSend(v26, sel_trailingAnchor);
  id v41 = ValueEditingViewController.slider.getter();
  id v42 = *(id *)&v41[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

  id v43 = objc_msgSend(v42, sel_trailingAnchor);
  id v44 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v43);

  *(void *)(v30 + 48) = v44;
  specialized Array._endMutation()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v46, sel_activateConstraints_, v45);
}

uint64_t type metadata accessor for StrokeWidthViewController()
{
  return self;
}

uint64_t one-time initialization function for SignatureLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, SignatureLogger);
  __swift_project_value_buffer(v0, (uint64_t)SignatureLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t static SignatureManager.shared.getter()
{
  type metadata accessor for SignatureManager();
  return swift_initStaticObject();
}

uint64_t type metadata accessor for SignatureManager()
{
  return self;
}

uint64_t SignatureManager.signatureItems.getter()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    uint64_t v1 = specialized SignatureManager.loadSignatures()();
    *(void *)(v0 + 16) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

BOOL SignatureManager.hasSignatures.getter()
{
  unint64_t v0 = SignatureManager.signatureItems.getter();
  if (v0 >> 62) {
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v1 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v1 != 0;
}

void closure #1 in SignatureManager.signatureViewController(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = objc_allocWithZone((Class)type metadata accessor for SignatureEditViewController());
  swift_retain();
  double v9 = (char *)objc_msgSend(v7, sel_initWithNibName_bundle_, 0, 0);
  id v8 = &v9[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion];
  *(void *)id v8 = a2;
  *((void *)v8 + 1) = a3;
  swift_release();
  if (a4) {
    objc_msgSend(a4, sel_presentViewController_animated_completion_, v9, 1, 0);
  }
}

Swift::Bool __swiftcall SignatureManager.isShowingSignatures(_:)(UIViewController *a1)
{
  uint64_t v1 = [(UIViewController *)a1 presentedViewController];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  type metadata accessor for SignatureEditViewController();
  if (swift_dynamicCastClass()
    || (type metadata accessor for SignatureCreationViewController(), swift_dynamicCastClass()))
  {
    Swift::Bool v3 = 1;
  }
  else
  {
    type metadata accessor for SignatureListController();
    Swift::Bool v3 = swift_dynamicCastClass() != 0;
  }

  return v3;
}

void SignatureManager.hideSignatures(_:_:)(void *a1, void *a2, uint64_t a3)
{
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)SignatureLogger);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    double v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v9 = 0;
    _os_log_impl(&dword_20C2D7000, v7, v8, "hide signature panel", v9, 2u);
    MEMORY[0x210550270](v9, -1, -1);
  }

  id v10 = objc_msgSend(a1, sel_presentedViewController);
  if (v10)
  {
    id v11 = v10;
    type metadata accessor for SignatureEditViewController();
    if (swift_dynamicCastClass()
      || (type metadata accessor for SignatureCreationViewController(), swift_dynamicCastClass()))
    {
    }
    else
    {
      type metadata accessor for SignatureListController();
      uint64_t v14 = swift_dynamicCastClass();

      if (!v14) {
        return;
      }
    }
    id v12 = objc_msgSend(a1, sel_presentedViewController);
    if (v12)
    {
      double v13 = v12;
      if (a2)
      {
        v15[4] = a2;
        v15[5] = a3;
        v15[0] = MEMORY[0x263EF8330];
        v15[1] = 1107296256;
        _OWORD v15[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        v15[3] = &block_descriptor_12;
        a2 = _Block_copy(v15);
        swift_retain();
        swift_release();
      }
      objc_msgSend(v13, sel_dismissViewControllerAnimated_completion_, 1, a2);
      _Block_release(a2);
    }
  }
}

uint64_t SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t v14 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v15 = type metadata accessor for Signature();
  MEMORY[0x270FA5388](v15);
  id v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a5) {
    double v18 = 72.0;
  }
  else {
    double v18 = *(double *)&a4;
  }
  double v19 = SignatureItem.size.getter();
  double v21 = 400.0 / v19;
  if (400.0 / v19 > 1.0) {
    double v21 = 1.0;
  }
  double v22 = v19 * v21;
  double v23 = v20 * v21;
  double v24 = v18 / v23;
  if (v18 / v23 > 1.0) {
    double v24 = 1.0;
  }
  v34[0] = v22 * v24;
  v34[1] = v23 * v24;
  double v25 = v23 * v24 * -0.5;
  if ((a3 & 1) == 0) {
    a7 = *(double *)&a2 + v25;
  }
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v32 = 0u;
  long long v33 = 0u;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v32 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v32 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignatureItem?);
  lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v32 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v32 = 0;
  BYTE8(v32) = 1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  lazy protocol witness table accessor for type Int? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)&v17[*(int *)(v15 + 36)] = MEMORY[0x263F8EE80];
  static CRKeyPath.unique.getter();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  Capsule<>.init(_:id:)();
  uint64_t v28 = a1;
  double v29 = a6;
  double v30 = a7;
  id v31 = v34;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  return Capsule.callAsFunction<A>(_:)();
}

uint64_t closure #1 in SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)(double a1, double a2, uint64_t a3, void *a4, double *a5)
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  double v9 = (void (*)(CGColor **, void))Capsule.Ref<>.root.modify();
  type metadata accessor for Signature();
  id v10 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  CRRegister.wrappedValue.setter();
  v9(v18, 0);
  double v11 = *a5;
  double v12 = a5[1];
  double v13 = a1 - *a5 * 0.5;
  uint64_t v14 = (void (*)(CGColor **, void))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  v14(v18, 0);
  id v15 = objc_msgSend(self, sel_blackColor, *(void *)&v13, a2 - v12 * 0.5, *(void *)&v11, *(void *)&v12);
  Color.init(cgColor:)((CGColor *)objc_msgSend(v15, sel_CGColor), v18);

  uint64_t v16 = (uint64_t (*)(CGColor **, void))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.setter();
  return v16(v18, 0);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized Array._endMutation()();
}

void SignatureManager.saveSignature(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)SignatureLogger);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl(&dword_20C2D7000, v5, v6, "saving signature", v7, 2u);
    MEMORY[0x210550270](v7, -1, -1);
  }

  uint64_t v8 = SignatureItem.dataForKeychain()();
  if (v9 >> 60 == 15)
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      double v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v11 = 0;
      _os_log_impl(&dword_20C2D7000, oslog, v10, "failed to create archive data for keychain", v11, 2u);
      MEMORY[0x210550270](v11, -1, -1);
    }
  }
  else
  {
    unint64_t v12 = v9;
    uint64_t v52 = v2;
    uint64_t v53 = v8;
    uint64_t v13 = Data.base64EncodedData(options:)();
    os_log_t osloga = v14;
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v58._uint64_t countAndFlagsBits = 0xD000000000000052;
    v15._uint64_t countAndFlagsBits = 0xD000000000000072;
    v58._object = (void *)0x800000020C852AE0;
    v15._object = (void *)0x800000020C852A60;
    v16.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v16.value._object = (void *)0xEB00000000656C62;
    v17._uint64_t countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, paperKitBundle, v17, v58);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C837450;
    double v20 = (void *)*MEMORY[0x263F171B8];
    double v21 = (void *)*MEMORY[0x263F171C8];
    *(void *)(inited + 32) = *MEMORY[0x263F171B8];
    *(void *)(inited + 40) = v21;
    double v22 = (void *)*MEMORY[0x263F17090];
    *(void *)(inited + 48) = *MEMORY[0x263F17090];
    id v23 = v20;
    id v24 = v21;
    id v25 = v22;
    uint64_t v26 = MEMORY[0x21054D080](0xD000000000000024, 0x800000020C852A10);
    id v27 = (void *)*MEMORY[0x263F17000];
    *(void *)(inited + 56) = v26;
    *(void *)(inited + 64) = v27;
    id v28 = v27;
    uint64_t v29 = MEMORY[0x21054D080](0xD00000000000001CLL, 0x800000020C852B40);
    double v30 = (void *)*MEMORY[0x263F16E80];
    *(void *)(inited + 72) = v29;
    *(void *)(inited + 80) = v30;
    id v31 = v30;
    uint64_t v32 = MEMORY[0x21054D080](0xD000000000000017, 0x800000020C852A40);
    long long v33 = (void *)*MEMORY[0x263F170B0];
    *(void *)(inited + 88) = v32;
    *(void *)(inited + 96) = v33;
    id v34 = v33;
    v35.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    uint64_t v36 = (void *)*MEMORY[0x263F175A8];
    *(NSNumber *)(inited + 104) = v35;
    *(void *)(inited + 112) = v36;
    id v37 = v36;
    v38.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v39 = (void *)*MEMORY[0x263F16ED8];
    *(NSData *)(inited + 120) = v38;
    *(void *)(inited + 128) = v39;
    id v40 = v39;
    uint64_t v41 = UUID.uuidString.getter();
    uint64_t v42 = MEMORY[0x21054D080](v41);
    swift_bridgeObjectRelease();
    id v43 = (void *)*MEMORY[0x263F16F08];
    *(void *)(inited + 136) = v42;
    *(void *)(inited + 144) = v43;
    id v44 = v43;
    uint64_t v45 = MEMORY[0x21054D080](v18._countAndFlagsBits, v18._object);
    swift_bridgeObjectRelease();
    *(void *)(inited + 152) = v45;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    v46.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (SecItemAdd(v46.super.isa, 0))
    {
      id v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        id v49 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v49 = 67109120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_20C2D7000, v47, v48, "failed to add new signature. error:%d", v49, 8u);
        MEMORY[0x210550270](v49, -1, -1);
      }
      outlined consume of Data._Representation(v13, (unint64_t)osloga);

      outlined consume of Data?(v53, v12);
    }
    else
    {
      id v50 = a1;
      unint64_t v56 = SignatureManager.signatureItems.getter();
      if (v56 >> 62
        && (swift_bridgeObjectRetain(), uint64_t v51 = _CocoaArrayWrapper.endIndex.getter(), swift_bridgeObjectRelease(), v51 < 0))
      {
        __break(1u);
      }
      else
      {
        specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v50);
        *(void *)(v52 + 16) = v56;
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v13, (unint64_t)osloga);

        outlined consume of Data?(v53, v12);
      }
    }
  }
}

Swift::Bool __swiftcall SignatureManager.removeSignature(atIndex:)(Swift::Int atIndex)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)SignatureLogger);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    double v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v11 = 0;
    _os_log_impl(&dword_20C2D7000, v9, v10, "removing signature", v11, 2u);
    MEMORY[0x210550270](v11, -1, -1);
  }

  if (atIndex < 0) {
    goto LABEL_14;
  }
  unint64_t v12 = SignatureManager.signatureItems.getter();
  Swift::Int v13 = v12 >> 62 ? _CocoaArrayWrapper.endIndex.getter() : *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  if (v13 <= atIndex) {
    goto LABEL_14;
  }
  uint64_t v14 = SignatureManager.signatureItems.getter();
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v15 = (id)MEMORY[0x21054E050](atIndex, v14);
  }
  else
  {
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)atIndex)
    {
      __break(1u);
      return v14;
    }
    id v15 = *(id *)(v14 + 8 * atIndex + 32);
  }
  Swift::String_optional v16 = v15;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v16 + OBJC_IVAR____TtC8PaperKit13SignatureItem_uniqueID, v4);

  char v17 = specialized SignatureManager.removeSignature(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v17 & 1) == 0)
  {
LABEL_14:
    LOBYTE(v14) = 0;
  }
  else
  {
    uint64_t v20 = SignatureManager.signatureItems.getter();

    *(void *)(v2 + 16) = v20;
    swift_bridgeObjectRelease();
    LOBYTE(v14) = 1;
  }
  return v14;
}

uint64_t SignatureManager.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SignatureManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id SignatureListController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureListController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **a1, void **a2, unint64_t a3, void **a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v8 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v67 = (uint64_t)&v61 - v10;
  MEMORY[0x270FA5388](v11);
  MEMORY[0x270FA5388](v12);
  uint64_t v68 = (void **)((char *)&v61 - v15);
  uint64_t v69 = a1;
  uint64_t v16 = (char *)a2 - (char *)a1;
  uint64_t v17 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0) {
    uint64_t v17 = (char *)a2 - (char *)a1;
  }
  uint64_t v18 = v17 >> 3;
  uint64_t v19 = a2;
  unint64_t v66 = a3;
  uint64_t v20 = a3 - (void)a2;
  uint64_t v21 = v20 / 8;
  uint64_t v73 = a1;
  unint64_t v72 = a4;
  if (v17 >> 3 < v20 / 8)
  {
    if (v16 < -7) {
      goto LABEL_53;
    }
    uint64_t v67 = v14;
    if (a4 != a1 || &a1[v18] <= a4) {
      memmove(a4, a1, 8 * v18);
    }
    uint64_t v65 = &a4[v18];
    objc_super v71 = v65;
    if (v16 >= 8)
    {
      double v22 = v19;
      if ((unint64_t)v19 < v66)
      {
        while (1)
        {
          uint64_t v70 = v22;
          id v23 = *v22;
          id v24 = a4;
          id v25 = *a4;
          uint64_t v26 = v68;
          outlined init with copy of Date?((uint64_t)*v22 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, (uint64_t)v68);
          uint64_t v27 = type metadata accessor for Date();
          uint64_t v28 = *(void *)(v27 - 8);
          uint64_t v29 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v28 + 48);
          if (v29(v26, 1, v27) == 1) {
            goto LABEL_50;
          }
          uint64_t v30 = v67;
          outlined init with copy of Date?((uint64_t)v25 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v67);
          if (v29((void **)v30, 1, v27) == 1) {
            goto LABEL_51;
          }
          id v31 = v23;
          id v32 = v25;
          long long v33 = v68;
          char v34 = static Date.> infix(_:_:)();
          NSNumber v35 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
          v35(v30, v27);
          v35((uint64_t)v33, v27);

          if (v34)
          {
            uint64_t v36 = v69;
            id v37 = v70 + 1;
            a4 = v24;
            if (v69 < v70 || v69 >= v37 || v69 != v70) {
              *uint64_t v69 = *v70;
            }
          }
          else
          {
            uint64_t v36 = v69;
            NSData v38 = v70;
            if (v69 != v24) {
              *uint64_t v69 = *v24;
            }
            a4 = v24 + 1;
            unint64_t v72 = v24 + 1;
            id v37 = v38;
          }
          uint64_t v69 = v36 + 1;
          uint64_t v73 = v36 + 1;
          if (a4 < v65)
          {
            double v22 = v37;
            if ((unint64_t)v37 < v66) {
              continue;
            }
          }
          break;
        }
      }
    }
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v73, &v72, &v71);
    return 1;
  }
  uint64_t v63 = v13;
  if (v20 < -7) {
    goto LABEL_53;
  }
  id v39 = v19;
  if (a4 != v19 || &v19[v21] <= a4) {
    memmove(a4, v19, 8 * v21);
  }
  id v40 = &a4[v21];
  objc_super v71 = v40;
  uint64_t v73 = v19;
  if (v20 < 8 || v69 >= v19) {
    goto LABEL_48;
  }
  uint64_t v41 = (void **)(v66 - 8);
  uint64_t v42 = v19;
  uint64_t v62 = a4;
  while (1)
  {
    uint64_t v68 = v41;
    uint64_t v70 = v39;
    unint64_t v66 = (unint64_t)v40;
    id v44 = v40 - 1;
    id v43 = *(v40 - 1);
    uint64_t v45 = *(v42 - 1);
    uint64_t v64 = v42 - 1;
    uint64_t v46 = v67;
    outlined init with copy of Date?((uint64_t)v43 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v67);
    uint64_t v47 = type metadata accessor for Date();
    uint64_t v48 = *(void *)(v47 - 8);
    id v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
    if (v49(v46, 1, v47) == 1) {
      break;
    }
    uint64_t v50 = v63;
    outlined init with copy of Date?((uint64_t)v45 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, v63);
    if (v49(v50, 1, v47) == 1) {
      goto LABEL_52;
    }
    uint64_t v51 = v68 + 1;
    uint64_t v65 = v43;
    id v52 = v45;
    uint64_t v53 = v67;
    char v54 = static Date.> infix(_:_:)();
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v55(v50, v47);
    v55(v53, v47);

    if (v54)
    {
      BOOL v56 = v51 == v70;
      id v40 = (void **)v66;
      uint64_t v57 = v68;
      uint64_t v42 = v64;
      if (!v56 || v68 >= v70) {
        *uint64_t v68 = *v64;
      }
      uint64_t v73 = v42;
LABEL_46:
      if (v40 <= v62) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }
    objc_super v71 = v44;
    Swift::String v58 = v51;
    BOOL v59 = (unint64_t)v51 >= v66;
    uint64_t v42 = v70;
    uint64_t v57 = v68;
    if (!v59 || (unint64_t)v68 >= v66)
    {
      *uint64_t v68 = *v44;
      id v40 = v44;
      goto LABEL_46;
    }
    if (v58 != (void **)v66) {
      *uint64_t v68 = *v44;
    }
    id v40 = v44;
    if (v44 <= v62) {
      goto LABEL_48;
    }
LABEL_47:
    uint64_t v41 = v57 - 1;
    id v39 = v42;
    if (v42 <= v69) {
      goto LABEL_48;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized SignatureManager.loadSignatures()()
{
  result[17] = *(CFTypeRef *)MEMORY[0x263EF8340];
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)SignatureLogger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    Swift::Bool v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::Bool v3 = 0;
    _os_log_impl(&dword_20C2D7000, v1, v2, "load signatures", v3, 2u);
    MEMORY[0x210550270](v3, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C837460;
  uint64_t v5 = (void *)*MEMORY[0x263F171B8];
  uint64_t v6 = (void *)*MEMORY[0x263F171C8];
  *(void *)(inited + 32) = *MEMORY[0x263F171B8];
  *(void *)(inited + 40) = v6;
  id v7 = (void *)*MEMORY[0x263F17518];
  *(void *)(inited + 48) = *MEMORY[0x263F17518];
  id v98 = v5;
  id v100 = v6;
  id v8 = v7;
  v9.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  uint64_t v10 = (void *)*MEMORY[0x263F16E80];
  *(NSNumber *)(inited + 56) = v9;
  *(void *)(inited + 64) = v10;
  id v99 = v10;
  uint64_t v11 = MEMORY[0x21054D080](0xD000000000000017, 0x800000020C852A40);
  uint64_t v12 = (void *)*MEMORY[0x263F170B0];
  *(void *)(inited + 72) = v11;
  *(void *)(inited + 80) = v12;
  id v13 = v12;
  v14.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  uint64_t v15 = (void *)*MEMORY[0x263F17090];
  *(NSNumber *)(inited + 88) = v14;
  *(void *)(inited + 96) = v15;
  id v16 = v15;
  uint64_t v17 = MEMORY[0x21054D080](0xD000000000000024, 0x800000020C852A10);
  uint64_t v18 = (void *)*MEMORY[0x263F17400];
  *(void *)(inited + 104) = v17;
  *(void *)(inited + 112) = v18;
  uint64_t v19 = (void *)*MEMORY[0x263F17408];
  *(void *)(inited + 120) = *MEMORY[0x263F17408];
  id v20 = v18;
  id v21 = v19;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  uint64_t v23 = v22;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  v24.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  result[0] = 0;
  Class isa = v24.super.isa;
  OSStatus v25 = SecItemCopyMatching(v24.super.isa, result);
  if (v25)
  {
    OSStatus v26 = v25;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 67109120;
      LODWORD(v107[0]) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v27, v28, "no signatures. error:%d", v29, 8u);
      MEMORY[0x210550270](v29, -1, -1);
    }

    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v101 = v23;
  uint64_t v95 = v20;
  uint64_t v96 = v16;
  v97 = v13;
  if (result[0])
  {
    *(CFTypeRef *)&v107[0] = result[0];
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [[CFStringRef : Any]]);
    swift_dynamicCast();
    uint64_t v103 = MEMORY[0x263F8EE78];
    uint64_t v31 = *(void *)(v105 + 16);
    if (!v31)
    {
LABEL_43:
      swift_bridgeObjectRelease();
      specialized MutableCollection<>.sort(by:)(&v103);

      uint64_t v30 = v103;
      swift_unknownObjectRelease();
      return v30;
    }
    id v32 = (uint64_t *)(v105 + 32);
    id v102 = (void *)*MEMORY[0x263F16ED8];
    unint64_t v93 = (void *)*MEMORY[0x263F17410];
    Swift::String v92 = (void *)*MEMORY[0x263F17520];
    long long v33 = v98;
    uint64_t v34 = v23;
    while (1)
    {
      uint64_t v35 = *v32;
      if (!*(void *)(*v32 + 16))
      {
        long long v105 = 0u;
        long long v106 = 0u;
LABEL_26:
        outlined destroy of Any?((uint64_t)&v105);
        uint64_t v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v64, v65))
        {
          unint64_t v66 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v66 = 0;
          _os_log_impl(&dword_20C2D7000, v64, v65, "entry missing kSecAttrAccount entry", v66, 2u);
          MEMORY[0x210550270](v66, -1, -1);
        }

        goto LABEL_14;
      }
      swift_bridgeObjectRetain();
      id v36 = v102;
      unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v36);
      if (v38)
      {
        outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v37, (uint64_t)&v105);
      }
      else
      {
        long long v105 = 0u;
        long long v106 = 0u;
      }

      swift_bridgeObjectRelease();
      if (!*((void *)&v106 + 1)) {
        goto LABEL_26;
      }
      outlined init with take of Any(&v105, v107);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
      uint64_t v39 = swift_initStackObject();
      *(_OWORD *)(v39 + 16) = xmmword_20C837470;
      *(void *)(v39 + 32) = v33;
      *(void *)(v39 + 40) = v100;
      *(void *)(v39 + 64) = v34;
      *(void *)(v39 + 72) = v99;
      id v40 = v33;
      id v41 = v100;
      id v42 = v99;
      uint64_t v43 = MEMORY[0x21054D080](0xD000000000000017, 0x800000020C852A40);
      uint64_t ObjectType = swift_getObjectType();
      *(void *)(v39 + 80) = v43;
      *(void *)(v39 + 104) = ObjectType;
      *(void *)(v39 + 112) = v97;
      id v45 = v97;
      Class v46 = Bool._bridgeToObjectiveC()().super.super.isa;
      uint64_t v47 = swift_getObjectType();
      *(void *)(v39 + 120) = v46;
      *(void *)(v39 + 144) = v47;
      *(void *)(v39 + 152) = v96;
      id v48 = v96;
      uint64_t v34 = v101;
      uint64_t v49 = MEMORY[0x21054D080](0xD000000000000024, 0x800000020C852A10);
      uint64_t v50 = swift_getObjectType();
      *(void *)(v39 + 160) = v49;
      *(void *)(v39 + 184) = v50;
      *(void *)(v39 + 192) = v95;
      *(void *)(v39 + 200) = v93;
      *(void *)(v39 + 224) = v101;
      *(void *)(v39 + 232) = v92;
      id v51 = v95;
      id v52 = v93;
      id v53 = v92;
      Class v54 = Bool._bridgeToObjectiveC()().super.super.isa;
      uint64_t v55 = swift_getObjectType();
      *(void *)(v39 + 240) = v54;
      *(void *)(v39 + 264) = v55;
      *(void *)(v39 + 272) = v36;
      outlined init with copy of Any((uint64_t)v107, v39 + 280);
      id v56 = v36;
      specialized Dictionary.init(dictionaryLiteral:)(v39);
      v57.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      CFTypeRef v104 = 0;
      OSStatus v58 = SecItemCopyMatching(v57.super.isa, &v104);
      if (v58)
      {
        OSStatus v59 = v58;
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = 67109120;
          *(_DWORD *)(v62 + 4) = v59;
          _os_log_impl(&dword_20C2D7000, v60, v61, "failed to load. error:%d", (uint8_t *)v62, 8u);
          uint64_t v63 = v62;
          uint64_t v34 = v101;
          MEMORY[0x210550270](v63, -1, -1);
        }
      }
      else
      {
        if (!v104)
        {

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
          goto LABEL_32;
        }
        swift_unknownObjectRetain();
        swift_dynamicCast();
        long long v67 = v105;
        uint64_t v68 = Data.init(base64Encoded:options:)();
        if (v69 >> 60 == 15)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
          outlined consume of Data._Representation(v67, *((unint64_t *)&v67 + 1));

LABEL_32:
          swift_unknownObjectRelease();
          goto LABEL_14;
        }
        unint64_t v70 = v69;
        uint64_t v71 = v68;
        id v72 = objc_allocWithZone(MEMORY[0x263F08928]);
        uint64_t v91 = v71;
        Class v73 = Data._bridgeToObjectiveC()().super.isa;
        *(void *)&long long v105 = 0;
        id v74 = objc_msgSend(v72, sel_initForReadingFromData_error_, v73, &v105);

        uint64_t v75 = (void *)v105;
        unint64_t v90 = v70;
        if (v74)
        {
          type metadata accessor for SignatureItem();
          uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          id v77 = v75;
          uint64_t v78 = v74;
          id v79 = v74;
          double v80 = (void *)MEMORY[0x21054D080](0x74616E6769534B41, 0xEB00000000657275);
          objc_msgSend(v79, sel_setClass_forClassName_, ObjCClassFromMetadata, v80);

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v81 = v79;
          double v84 = NSCoder.decodeTopLevelObject<A>(of:forKey:)();

          swift_bridgeObjectRelease();
          uint64_t v34 = v101;
        }
        else
        {
          uint64_t v78 = 0;
          id v82 = (id)v105;
          double v83 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          double v84 = 0;
        }
        objc_msgSend(v78, sel_finishDecoding);

        if (v84)
        {
          id v85 = v84;
          MEMORY[0x21054D330]();
          if (*(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          outlined consume of Data._Representation(v67, *((unint64_t *)&v67 + 1));

          outlined consume of Data?(v91, v90);
        }
        else
        {
          uint64_t v86 = Logger.logObject.getter();
          os_log_type_t v87 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v86, v87))
          {
            unint64_t v88 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v88 = 0;
            _os_log_impl(&dword_20C2D7000, v86, v87, "failed to unarchive signature", v88, 2u);
            MEMORY[0x210550270](v88, -1, -1);
          }
          outlined consume of Data._Representation(v67, *((unint64_t *)&v67 + 1));

          outlined consume of Data?(v91, v90);
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
      swift_unknownObjectRelease();
      long long v33 = v98;
LABEL_14:
      ++v32;
      if (!--v31) {
        goto LABEL_43;
      }
    }
  }

  return MEMORY[0x263F8EE78];
}

uint64_t specialized SignatureManager.removeSignature(_:)()
{
  result[19] = *(CFTypeRef *)MEMORY[0x263EF8340];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C837470;
  uint64_t v1 = (void *)*MEMORY[0x263F171B8];
  os_log_type_t v2 = (void *)*MEMORY[0x263F171C8];
  *(void *)(inited + 32) = *MEMORY[0x263F171B8];
  *(void *)(inited + 40) = v2;
  Swift::Bool v3 = (void *)*MEMORY[0x263F17528];
  *(void *)(inited + 48) = *MEMORY[0x263F17528];
  id v4 = v1;
  id v5 = v2;
  id v6 = v3;
  v7.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v8 = (void *)*MEMORY[0x263F17090];
  *(NSNumber *)(inited + 56) = v7;
  *(void *)(inited + 64) = v8;
  id v9 = v8;
  uint64_t v10 = MEMORY[0x21054D080](0xD000000000000024, 0x800000020C852A10);
  uint64_t v11 = (void *)*MEMORY[0x263F16E80];
  *(void *)(inited + 72) = v10;
  *(void *)(inited + 80) = v11;
  id v12 = v11;
  uint64_t v13 = MEMORY[0x21054D080](0xD000000000000017, 0x800000020C852A40);
  NSNumber v14 = (void *)*MEMORY[0x263F170B0];
  *(void *)(inited + 88) = v13;
  *(void *)(inited + 96) = v14;
  id v15 = v14;
  v16.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  uint64_t v17 = (void *)*MEMORY[0x263F17400];
  *(NSNumber *)(inited + 104) = v16;
  *(void *)(inited + 112) = v17;
  uint64_t v18 = (void *)*MEMORY[0x263F17410];
  uint64_t v19 = (void *)*MEMORY[0x263F16ED8];
  *(void *)(inited + 120) = *MEMORY[0x263F17410];
  *(void *)(inited + 128) = v19;
  id v20 = v17;
  id v21 = v18;
  id v22 = v19;
  uint64_t v23 = UUID.uuidString.getter();
  uint64_t v24 = MEMORY[0x21054D080](v23);
  swift_bridgeObjectRelease();
  *(void *)(inited + 136) = v24;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  v25.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  result[0] = 0;
  if (SecItemCopyMatching(v25.super.isa, result))
  {
    swift_unknownObjectRelease();
LABEL_3:

    return 0;
  }
  if (!result[0]) {
    goto LABEL_3;
  }
  swift_unknownObjectRetain();
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CFDataRef)>);
  uint64_t v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_20C832C20;
  os_log_type_t v28 = (void *)*MEMORY[0x263F175B0];
  *(void *)(v27 + 32) = *MEMORY[0x263F175B0];
  id v29 = v28;
  *(NSData *)(v27 + 40) = Data._bridgeToObjectiveC()();
  specialized Dictionary.init(dictionaryLiteral:)(v27);
  type metadata accessor for CFDataRef(0);
  v30.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (SecItemDelete(v30.super.isa))
  {
    if (one-time initialization token for SignatureLogger != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)SignatureLogger);
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v32, v33, "failed to delete signature. error:%d", v34, 8u);
      MEMORY[0x210550270](v34, -1, -1);
    }
    outlined consume of Data._Representation(v35, v36);

    swift_unknownObjectRelease();
    return 0;
  }
  outlined consume of Data._Representation(v35, v36);

  swift_unknownObjectRelease();
  return 1;
}

char *specialized SignatureManager.signatureViewController(_:_:_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  type metadata accessor for SignatureManager();
  swift_initStaticObject();
  unint64_t v16 = SignatureManager.signatureItems.getter();
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17 >= 1) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v17 >= 1)
    {
LABEL_3:
      if (one-time initialization token for SignatureLogger != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)SignatureLogger);
      swift_bridgeObjectRetain();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v19, v20))
      {
        id v21 = a1;
        uint64_t v22 = a3;
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 134217984;
        swift_bridgeObjectRelease();
        uint64_t aBlock = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20C2D7000, v19, v20, "showing list of signatures, count: %ld", v23, 0xCu);
        uint64_t v24 = v23;
        a3 = v22;
        a1 = v21;
        MEMORY[0x210550270](v24, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for SignatureListViewController();
      swift_retain();
      NSDictionary v25 = (void *)SignatureListViewController.__allocating_init(editable:_:)(0, a3, a4);
      type metadata accessor for SignatureListController();
      OSStatus v26 = (char *)objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, 0, 0, 0);
      objc_msgSend(v26, sel_setContentViewController_, v25);
      objc_msgSend(v26, sel_setModalPresentationStyle_, 7);
      id v27 = objc_msgSend(v26, sel_popoverPresentationController);
      objc_msgSend(v27, sel_setSourceView_, a2);

      id v28 = objc_msgSend(v26, sel_popoverPresentationController);
      if (v28)
      {
        id v29 = v28;
        if (a2)
        {
          v69.origin.double x = a5;
          v69.origin.double y = a6;
          v69.size.double width = a7;
          v69.size.double height = a8;
          if (CGRectIsEmpty(v69))
          {
            objc_msgSend(a2, sel_bounds);
            a5 = v30;
            a6 = v31;
            a7 = v32;
            a8 = v33;
          }
        }
        objc_msgSend(v29, sel_setSourceRect_, a5, a6, a7, a8);
      }
      id v34 = objc_msgSend(v26, sel_popoverPresentationController);
      if (v34)
      {
        uint64_t v35 = v34;
        objc_msgSend(v34, sel_setPermittedArrowDirections_, 15);
      }
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v67._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
      v67._object = (void *)0x800000020C852990;
      v36._object = (void *)0x800000020C852970;
      v36._uint64_t countAndFlagsBits = 0xD000000000000017;
      v37.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v37.value._object = (void *)0xEB00000000656C62;
      v38._uint64_t countAndFlagsBits = 0;
      v38._object = (void *)0xE000000000000000;
      Swift::String v39 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, v37, paperKitBundle, v38, v67);
      id v40 = (void *)swift_allocObject();
      v40[2] = a3;
      v40[3] = a4;
      v40[4] = a1;
      id v41 = a1;
      swift_retain();
      id v42 = (void *)MEMORY[0x21054D080](v39._countAndFlagsBits, v39._object);
      swift_bridgeObjectRelease();
      os_log_type_t v65 = partial apply for closure #1 in SignatureManager.signatureViewController(_:_:_:_:);
      unint64_t v66 = v40;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v62 = 1107296256;
      uint64_t v63 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
      uint64_t v64 = &block_descriptor_11_0;
      uint64_t v43 = _Block_copy(&aBlock);
      swift_release();
      id v44 = self;
      id v45 = objc_msgSend(v44, sel_actionWithTitle_style_handler_, v42, 0, v43);
      _Block_release(v43);

      objc_msgSend(v26, sel_addAction_, v45);
      v68._object = (void *)0x800000020C8529F0;
      v46._uint64_t countAndFlagsBits = 0x6C65636E6143;
      v46._object = (void *)0xE600000000000000;
      v47.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v47.value._object = (void *)0xEB00000000656C62;
      v48._uint64_t countAndFlagsBits = 0;
      v48._object = (void *)0xE000000000000000;
      v68._uint64_t countAndFlagsBits = 0xD000000000000017;
      Swift::String v49 = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, paperKitBundle, v48, v68);
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 16) = a3;
      *(void *)(v50 + 24) = a4;
      swift_retain();
      id v51 = (void *)MEMORY[0x21054D080](v49._countAndFlagsBits, v49._object);
      swift_bridgeObjectRelease();
      os_log_type_t v65 = partial apply for closure #2 in SignatureManager.signatureViewController(_:_:_:_:);
      unint64_t v66 = (void *)v50;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v62 = 1107296256;
      uint64_t v63 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
      uint64_t v64 = &block_descriptor_17;
      id v52 = _Block_copy(&aBlock);
      swift_release();
      id v53 = objc_msgSend(v44, sel_actionWithTitle_style_handler_, v51, 1, v52);
      _Block_release(v52);

      objc_msgSend(v26, sel_addAction_, v53);
      return v26;
    }
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  __swift_project_value_buffer(v54, (uint64_t)SignatureLogger);
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v55, v56))
  {
    NSDictionary v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSDictionary v57 = 0;
    _os_log_impl(&dword_20C2D7000, v55, v56, "no signatures. showing signature creation panel", v57, 2u);
    MEMORY[0x210550270](v57, -1, -1);
  }

  id v58 = objc_allocWithZone((Class)type metadata accessor for SignatureCreationViewController());
  swift_retain();
  OSStatus v26 = (char *)objc_msgSend(v58, sel_initWithNibName_bundle_, 0, 0);
  OSStatus v59 = (uint64_t *)&v26[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion];
  *OSStatus v59 = a3;
  v59[1] = a4;
  swift_release();
  return v26;
}

void specialized SignatureManager.showSignatures(_:_:_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)SignatureLogger);
  id v17 = a1;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
    id v21 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v20 = 138477827;
    NSDictionary v25 = a2;
    uint64_t v22 = a3;
    id v23 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v21 = v17;

    a3 = v22;
    a2 = v25;
    _os_log_impl(&dword_20C2D7000, v18, v19, "show signature panel on viewController: %{private}@", v20, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x210550270](v21, -1, -1);
    MEMORY[0x210550270](v20, -1, -1);
  }
  else
  {
  }
  uint64_t v24 = specialized SignatureManager.signatureViewController(_:_:_:_:)(v17, a2, a3, a4, a5, a6, a7, a8);
  objc_msgSend(v17, sel_presentViewController_animated_completion_, v24, 1, 0);
}

uint64_t type metadata accessor for SignatureListController()
{
  return self;
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)(uint64_t a1)
{
  return closure #1 in SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)(*(double *)(v1 + 24), *(double *)(v1 + 32), a1, *(void **)(v1 + 16), *(double **)(v1 + 40));
}

uint64_t method lookup function for SignatureManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SignatureManager);
}

uint64_t dispatch thunk of SignatureManager.hasSignatures.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SignatureManager.showSignatures(_:_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SignatureManager.isShowingSignatures(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SignatureManager.hideSignatures(_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v5 + 160))(a1, a2, a3 & 1, a4, a5 & 1);
}

uint64_t sub_20C3BE078()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in SignatureManager.signatureViewController(_:_:_:_:)(uint64_t a1)
{
  closure #1 in SignatureManager.signatureViewController(_:_:_:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_20C3BE0C4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in SignatureManager.signatureViewController(_:_:_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

BOOL specialized static SignatureManager.ownsSignature(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C837470;
  uint64_t v1 = (void *)*MEMORY[0x263F171B8];
  uint64_t v2 = (void *)*MEMORY[0x263F171C8];
  *(void *)(inited + 32) = *MEMORY[0x263F171B8];
  *(void *)(inited + 40) = v2;
  Swift::Bool v3 = (void *)*MEMORY[0x263F16E80];
  *(void *)(inited + 48) = *MEMORY[0x263F16E80];
  id v4 = v1;
  id v5 = v2;
  id v6 = v3;
  uint64_t v7 = MEMORY[0x21054D080](0xD000000000000017, 0x800000020C852A40);
  id v8 = (void *)*MEMORY[0x263F170B0];
  *(void *)(inited + 56) = v7;
  *(void *)(inited + 64) = v8;
  id v9 = v8;
  v10.super.super.CFDictionaryRef isa = Bool._bridgeToObjectiveC()().super.super.isa;
  uint64_t v11 = (void *)*MEMORY[0x263F17090];
  *(NSNumber *)(inited + 72) = v10;
  *(void *)(inited + 80) = v11;
  id v12 = v11;
  uint64_t v13 = MEMORY[0x21054D080](0xD000000000000024, 0x800000020C852A10);
  NSNumber v14 = (void *)*MEMORY[0x263F17400];
  *(void *)(inited + 88) = v13;
  *(void *)(inited + 96) = v14;
  id v15 = (void *)*MEMORY[0x263F17410];
  uint64_t v16 = (void *)*MEMORY[0x263F17520];
  *(void *)(inited + 104) = *MEMORY[0x263F17410];
  *(void *)(inited + 112) = v16;
  id v17 = v14;
  id v18 = v15;
  id v19 = v16;
  v20.super.super.CFDictionaryRef isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v21 = (void *)*MEMORY[0x263F16ED8];
  *(NSNumber *)(inited + 120) = v20;
  *(void *)(inited + 128) = v21;
  id v22 = v21;
  uint64_t v23 = UUID.uuidString.getter();
  uint64_t v24 = MEMORY[0x21054D080](v23);
  swift_bridgeObjectRelease();
  *(void *)(inited + 136) = v24;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LODWORD(inited) = SecItemCopyMatching(isa, 0);

  return inited == 0;
}

id @objc AKControllerDelegateHelper.undoManager(forAnnotationController:)(uint64_t a1, uint64_t a2, uint64_t a3, Class *a4)
{
  id v4 = objc_msgSend(objc_allocWithZone(*a4), sel_init);
  return v4;
}

id AKControllerDelegateHelper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AKControllerDelegateHelper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t static AnnotationImporter.translateStrokedAnnotation(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v396 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v386 = (char *)&v363 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v387 = (char *)&v363 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v385 = (char *)&v363 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v10 - 8);
  unint64_t v381 = (unint64_t)&v363 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v382 = (unint64_t)&v363 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v383 = (char *)&v363 - v15;
  unint64_t v390 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  unint64_t v384 = *(void *)(v390 - 8);
  MEMORY[0x270FA5388](v390);
  uint64_t v374 = (char *)&v363 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  v380 = (char *)&v363 - v18;
  MEMORY[0x270FA5388](v19);
  v373 = (char *)&v363 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v369 = (void (*)(char *, char *, unint64_t))((char *)&v363 - v22);
  MEMORY[0x270FA5388](v23);
  uint64_t v372 = (void (*)(char *, char *, unint64_t))((char *)&v363 - v24);
  MEMORY[0x270FA5388](v25);
  uint64_t v370 = (char *)&v363 - v26;
  MEMORY[0x270FA5388](v27);
  *(void *)&double v376 = (char *)&v363 - v28;
  MEMORY[0x270FA5388](v29);
  v379 = (char *)&v363 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v378 = (char *)&v363 - v32;
  MEMORY[0x270FA5388](v33);
  uint64_t v375 = (char *)&v363 - v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v35 - 8);
  Swift::String_optional v37 = (char *)&v363 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  id v40 = (char *)&v363 - v39;
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = (char *)&v363 - v42;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
  MEMORY[0x270FA5388](v44 - 8);
  v398 = (char *)&v363 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v46);
  v368 = (char *)&v363 - v47;
  MEMORY[0x270FA5388](v48);
  uint64_t v371 = (char *)&v363 - v49;
  MEMORY[0x270FA5388](v50);
  *(void *)&CGFloat v377 = (char *)&v363 - v51;
  MEMORY[0x270FA5388](v52);
  uint64_t v389 = (char *)&v363 - v53;
  MEMORY[0x270FA5388](v54);
  os_log_type_t v56 = (char *)&v363 - v55;
  uint64_t v57 = type metadata accessor for Shape();
  uint64_t v395 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  OSStatus v59 = (char *)&v363 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  Shape.init()((uint64_t)v59);
  uint64_t v394 = v4;
  uint64_t v60 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
  v399 = v56;
  uint64_t v397 = v3;
  uint64_t v392 = (void (*)(char *, char *, unint64_t))(v4 + 56);
  v391 = v60;
  v60((uint64_t)v56, 1, 1, v3);
  objc_msgSend(a1, sel_drawingBounds);
  aBlock.a = v61;
  aBlock.b = v62;
  aBlock.c = v63;
  aBlock.d = v64;
  uint64_t v393 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  id v65 = objc_msgSend(a1, sel_strokeColor);
  if (v65)
  {
    id v66 = v65;
    Color.init(cgColor:)((CGColor *)objc_msgSend(v66, sel_CGColor), (CGColor **)&aBlock);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.setter();
  }
  objc_msgSend(a1, sel_strokeWidth);
  aBlock.a = v67;
  uint64_t v388 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.setter();
  id v68 = a1;
  specialized TaggedValue_2<>.init<A>(for:)(v68);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v43, 0, 1, v69);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v43, (uint64_t)v40, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v400 = v59;
  uint64_t v401 = v57;
  unint64_t v70 = &v59[*(int *)(v57 + 52)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v40, (uint64_t)v37, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  uint64_t v71 = type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v40, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  if (objc_msgSend(v68, sel_hasShadow))
  {
    objc_msgSend(v68, sel_originalModelBaseScaleFactor);
    if (one-time initialization token for defaultShadowOffset != -1)
    {
      float64x2_t v367 = v72;
      swift_once();
      float64x2_t v72 = v367;
    }
    uint64_t v73 = (uint64_t)v400;
    if (one-time initialization token for defaultShadowColor != -1)
    {
      float64x2_t v367 = v72;
      swift_once();
      v72.f64[0] = v367.f64[0];
    }
    CGFloat v74 = *(double *)&static UIConstants.defaultShadowColor;
    float64x2_t v367 = vmulq_n_f64((float64x2_t)static UIConstants.defaultShadowOffset, v72.f64[0]);
    double v75 = v72.f64[0] * 3.0;
    id v76 = (id)static UIConstants.defaultShadowColor;
    float64x2_t v77 = v367;
  }
  else
  {
    CGFloat v74 = 0.0;
    float64x2_t v77 = 0uLL;
    double v75 = 0.0;
    uint64_t v73 = (uint64_t)v400;
  }
  *(float64x2_t *)&aBlock.a = v77;
  aBlock.c = v75;
  aBlock.d = v74;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.setter();
  uint64_t v404 = &unk_26C1F1F00;
  uint64_t v78 = swift_dynamicCastObjCProtocolConditional();
  if (v78)
  {
    id v79 = (void *)v78;
    id v80 = v68;
    objc_msgSend(v79, sel_rectangle);
    aBlock.a = v81;
    aBlock.b = v82;
    aBlock.c = v83;
    aBlock.d = v84;
    CRRegister.wrappedValue.setter();
  }
  self;
  uint64_t v85 = swift_dynamicCastObjCClass();
  if (!v85)
  {
    self;
    uint64_t v128 = swift_dynamicCastObjCClass();
    uint64_t v130 = v397;
    uint64_t v129 = (uint64_t)v398;
    uint64_t v95 = v401;
    uint64_t v131 = (uint64_t)v399;
    if (v128)
    {
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v131 = (uint64_t)v399;
      uint64_t v130 = v397;
      uint64_t v129 = (uint64_t)v398;
      uint64_t v132 = (uint64_t)v389;
      TaggedValue_9.init(_:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v131, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
      v391(v132, 0, 1, v130);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v132, v131, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
    }
    goto LABEL_112;
  }
  uint64_t v86 = (void *)v85;
  id v87 = v68;
  id v88 = objc_msgSend(v86, sel_fillColor);
  if (v88)
  {
    id v89 = v88;
    Color.init(cgColor:)((CGColor *)objc_msgSend(v89, sel_CGColor), (CGColor **)&aBlock);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.setter();
  }
  self;
  uint64_t v90 = swift_dynamicCastObjCClass();
  if (v90)
  {
    uint64_t v91 = v90;
    *(void *)&v367.f64[0] = v71;
    Swift::String v92 = (char *)v87;
    objc_msgSend((id)v91, sel_rotationAngle);
    double v94 = v93;
    uint64_t v95 = v401;
    uint64_t v96 = (char *)(v73 + *(int *)(v401 + 20));
    CRRegister.value.getter();
    if (vabdd_f64(aBlock.a, v94) > 0.01)
    {
      aBlock.a = v94;
      CRRegister.value.setter();
    }
    uint64_t v374 = v96;
    objc_msgSend(v92, sel_drawingBounds);
    double v98 = v97;
    double v100 = v99;
    objc_msgSend((id)v91, sel_rectangle);
    ShapeSecondaryProperties.appearanceStreamOffset.setter(v98 - v101, v100 - v102);
    id v103 = objc_msgSend((id)v91, sel_typingAttributes);
    unint64_t v104 = v390;
    if (!v103) {
      goto LABEL_47;
    }
    long long v105 = v103;
    uint64_t v106 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v107 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v106);
    swift_bridgeObjectRelease();
    if (!v107) {
      goto LABEL_47;
    }
    uint64_t v402 = v107;
    objc_msgSend(v92, sel_originalModelBaseScaleFactor);
    Dictionary<>.scaleBy(_:)(v108);
    id v109 = objc_msgSend((id)v91, sel_annotationText);
    v380 = v92;
    if (v109)
    {
      id v110 = v109;
      objc_msgSend(v92, sel_originalModelBaseScaleFactor);
      uint64_t v112 = v111;
      lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
      id v113 = (char *)v110;
      Class v114 = v379;
      v373 = v113;
      CRAttributedString.init(_:)();
      unint64_t v115 = v384;
      uint64_t v116 = *(void (**)(char *, char *, unint64_t))(v384 + 32);
      uint64_t v117 = v378;
      uint64_t v370 = (char *)(v384 + 32);
      uint64_t v369 = v116;
      v116(v378, v114, v104);
      id v118 = *(void (**)(char *, char *, unint64_t))(v115 + 16);
      v118(v114, v117, v104);
      uint64_t v119 = CRAttributedString.count.getter();
      uint64_t v120 = *(void (**)(char *, unint64_t))(v115 + 8);
      v120(v114, v104);
      id v366 = (id)(v115 + 8);
      v365 = v120;
      uint64_t v372 = v118;
      if (v119 < 1)
      {

        uint64_t v124 = 0;
        uint64_t v127 = v375;
        uint64_t v73 = (uint64_t)v400;
LABEL_39:
        uint64_t v213 = v117;
        unint64_t v214 = v390;
        v369(v127, v213, v390);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v124);
        (*(void (**)(char *, char *, unint64_t))(v384 + 40))(v70, v127, v214);
        double v215 = v376;
        v372(*(char **)&v376, v70, v214);
        unint64_t v216 = v214;
        uint64_t v217 = (void *)CRAttributedString.attributedString.getter();
        uint64_t v123 = objc_msgSend(v217, sel_string);

        uint64_t v218 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v220 = v219;

        if (!v218 && v220 == 0xE000000000000000)
        {
          swift_bridgeObjectRelease();
          v365(*(char **)&v215, v216);

          uint64_t v95 = v401;
LABEL_46:
          uint64_t v227 = (uint64_t)v383;
          CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v402, 0);
          uint64_t v228 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v228 - 8) + 56))(v227, 0, 1, v228);
          uint64_t v229 = v382;
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v227, v382, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v229, v381, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          CRRegister.wrappedValue.setter();
          outlined destroy of StocksKitCurrencyCache.Provider?(v229, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v227, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          Swift::String v92 = v380;
LABEL_47:
          ShapeSecondaryProperties.maximumNumberOfCharacters.setter((uint64_t)objc_msgSend((id)v91, sel_maximumNumberOfCharacters));
          self;
          uint64_t v230 = swift_dynamicCastObjCClass();
          if (v230)
          {
            v231 = (void *)v230;
            v232 = v92;
            objc_msgSend(v231, sel_cornerRadius);
            if (v233 <= 0.0)
            {
              lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
              lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
              lazy protocol witness table accessor for type Line and conformance Line();
              lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
              lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
              lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
              lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
              lazy protocol witness table accessor for type Star and conformance Star();
              lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
              uint64_t v238 = (uint64_t)v389;
              TaggedValue_9.init(_:)();
            }
            else
            {
              double v234 = v233;
              objc_msgSend((id)v91, sel_rectangle);
              double Width = CGRectGetWidth(v425);
              objc_msgSend((id)v91, sel_rectangle);
              double Height = CGRectGetHeight(v426);
              if (Height >= Width) {
                double Height = Width;
              }
              double v237 = v234 / Height;
              if (v237 > 0.5) {
                double v237 = 0.5;
              }
              if (v237 < 0.0) {
                double v237 = 0.0;
              }
              aBlock.a = v237;
              lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
              lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
              lazy protocol witness table accessor for type Line and conformance Line();
              lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
              lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
              lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
              lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
              lazy protocol witness table accessor for type Star and conformance Star();
              lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
              uint64_t v238 = *(void *)&v377;
              TaggedValue_9.init(_:)();
            }

            uint64_t v131 = (uint64_t)v399;
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v399, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
            uint64_t v130 = v397;
            v391(v238, 0, 1, v397);
            outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v238, v131, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
            goto LABEL_70;
          }
          self;
          uint64_t v239 = swift_dynamicCastObjCClass();
          if (v239)
          {
            uint64_t v240 = (void *)v239;
            unint64_t v390 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
            lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
            lazy protocol witness table accessor for type Line and conformance Line();
            lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
            uint64_t v378 = v70;
            lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
            lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
            lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
            lazy protocol witness table accessor for type Star and conformance Star();
            lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
            uint64_t v393 = v92;
            uint64_t v95 = v401;
            uint64_t v73 = (uint64_t)v400;
            uint64_t v241 = (uint64_t)v389;
            TaggedValue_9.init(_:)();
            uint64_t v131 = (uint64_t)v399;
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v399, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
            uint64_t v130 = v397;
            v391(v241, 0, 1, v397);
            outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v241, v131, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
            uint64_t v242 = unk_26C14D5E0;
            if ((unk_26C14D5E0 & ~qword_26C14D5D8) == 0) {
              uint64_t v242 = 0;
            }
            uint64_t v243 = v242 | qword_26C14D5D8;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
            v244 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
            *uint64_t v245 = v243;
            v244(&aBlock, 0);
            unsigned int v246 = objc_msgSend(v240, sel_textIsFixedWidth);
            uint64_t v129 = (uint64_t)v398;
            if (v246)
            {
              uint64_t v248 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
              if (*v247) {
                *v247 &= ~1uLL;
              }
              v248(&aBlock, 0);
            }
            if (objc_msgSend(v240, sel_textIsFixedHeight))
            {
              uint64_t v250 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
              if ((*v249 & 2) != 0) {
                *v249 &= ~2uLL;
              }
              v250(&aBlock, 0);
            }
            FormContentType.init(_:)((uint64_t)objc_msgSend(v240, sel_formContentType), &v402);
            *(void *)&aBlock.a = v402;
            LOBYTE(aBlock.b) = 0;
            ShapeSecondaryProperties.textContentType.setter((uint64_t *)&aBlock);
            uint64_t v251 = v393;
            objc_msgSend(v240, sel_setFormContentType_, objc_msgSend(v240, sel_formContentType));

            goto LABEL_112;
          }
          v380 = v92;
          self;
          if (swift_dynamicCastObjCClass())
          {
            lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
            lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
            lazy protocol witness table accessor for type Line and conformance Line();
            lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
            lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
            lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
            lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
            lazy protocol witness table accessor for type Star and conformance Star();
            lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
            uint64_t v252 = (uint64_t)v389;
            TaggedValue_9.init(_:)();
            goto LABEL_73;
          }
          self;
          uint64_t v254 = swift_dynamicCastObjCClass();
          if (v254)
          {
            uint64_t v255 = (void *)v254;
            uint64_t v393 = v380;
            uint64_t v256 = (uint64_t)objc_msgSend(v255, sel_pointCount);
            unint64_t v257 = 3;
            if (v256 > 3) {
              unint64_t v257 = v256;
            }
            if (v257 >= 0xC) {
              unint64_t v257 = 12;
            }
            *(void *)&aBlock.a = v257;
            unint64_t v258 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
            unint64_t v259 = lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
            unint64_t v260 = lazy protocol witness table accessor for type Line and conformance Line();
            unint64_t v261 = lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
            unint64_t v262 = lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
            Swift::String v263 = (char *)lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
            unint64_t v264 = lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
            lazy protocol witness table accessor for type Star and conformance Star();
            lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
            v379 = (char *)v264;
            v380 = v263;
            unint64_t v381 = v262;
            unint64_t v382 = v261;
            uint64_t v383 = (char *)v260;
            unint64_t v384 = v259;
            unint64_t v390 = v258;
            uint64_t v265 = (uint64_t)v371;
            TaggedValue_9.init(_:)();
            uint64_t v266 = (uint64_t)v399;
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v399, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
            v391(v265, 0, 1, v397);
            outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v265, v266, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
            if (objc_msgSend(v255, sel_pointCount) == (id)6)
            {
              CRRegister.value.getter();
              if (fabs(aBlock.a + -0.523598776) > 0.01)
              {
                aBlock.a = 0.523598776;
                CRRegister.value.setter();
              }
            }
            self;
            uint64_t v267 = swift_dynamicCastObjCClass();
            if (!v267)
            {
              Swift::String v334 = v393;

              uint64_t v130 = v397;
              uint64_t v95 = v401;
              uint64_t v131 = (uint64_t)v399;
              goto LABEL_70;
            }
            uint64_t v123 = (void *)v267;
            uint64_t v122 = v393;
            uint64_t v268 = (uint64_t)objc_msgSend(v123, sel_pointCount);
            unint64_t v269 = 3;
            if (v268 > 3) {
              unint64_t v269 = v268;
            }
            if (v269 >= 0xA) {
              uint64_t v91 = 10;
            }
            else {
              uint64_t v91 = v269;
            }
            if (one-time initialization token for defaultInnerRadius == -1) {
              goto LABEL_90;
            }
            goto LABEL_141;
          }
          self;
          uint64_t v323 = swift_dynamicCastObjCClass();
          if (!v323)
          {
            self;
            if (!swift_dynamicCastObjCClass())
            {
              self;
              if (!swift_dynamicCastObjCClass() || (self, (uint64_t v349 = swift_dynamicCastObjCClass()) == 0))
              {
                v362 = v380;

                uint64_t v130 = v397;
                uint64_t v129 = (uint64_t)v398;
                uint64_t v131 = (uint64_t)v399;
                goto LABEL_112;
              }
              uint64_t v350 = (void *)v349;
              uint64_t v253 = v380;
              CRRegister.wrappedValue.getter();
              CGPoint v351 = *(CGPoint *)&aBlock.a;
              CGSize v352 = *(CGSize *)&aBlock.c;
              objc_msgSend(v350, sel_pointyBitPoint);
              double v354 = v353;
              double v356 = v355;
              v429.origin = v351;
              v429.size = v352;
              double v357 = v354 - CGRectGetMinX(v429);
              v430.origin = v351;
              v430.size = v352;
              CGFloat v358 = v357 / CGRectGetWidth(v430);
              v431.origin = v351;
              v431.size = v352;
              double v359 = v356 - CGRectGetMinY(v431);
              v432.origin = v351;
              v432.size = v352;
              CGFloat v360 = 1.0 - v359 / CGRectGetHeight(v432);
              objc_msgSend(v350, sel_pointyBitBaseWidthAngle);
              aBlock.a = v358;
              aBlock.b = v360;
              aBlock.c = v361 * 3.14159265 / 180.0 * 0.5;
              lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
              lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
              lazy protocol witness table accessor for type Line and conformance Line();
              lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
              lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
              lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
              lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
              lazy protocol witness table accessor for type Star and conformance Star();
              lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
              uint64_t v95 = v401;
              uint64_t v252 = (uint64_t)v389;
              TaggedValue_9.init(_:)();

              goto LABEL_74;
            }
            lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
            lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
            lazy protocol witness table accessor for type Line and conformance Line();
            lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
            lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
            lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
            lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
            lazy protocol witness table accessor for type Star and conformance Star();
            lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
            uint64_t v252 = (uint64_t)v389;
            TaggedValue_9.init(_:)();
LABEL_73:
            uint64_t v253 = v380;
LABEL_74:

            uint64_t v131 = (uint64_t)v399;
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v399, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
            uint64_t v130 = v397;
            v391(v252, 0, 1, v397);
            outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v252, v131, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
            uint64_t v129 = (uint64_t)v398;
            goto LABEL_112;
          }
          uint64_t v324 = (void *)v323;
          uint64_t v325 = v380;
          v326 = (char *)objc_msgSend(v324, sel_path);
          if (!v326)
          {

            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v399, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
            outlined destroy of AnnotationImporter.ImportedElement(v73, (uint64_t (*)(void))type metadata accessor for Shape);
            goto LABEL_114;
          }
          uint64_t v122 = v326;
          objc_msgSend(v324, (SEL)&selRef_linedPaper);
          CGFloat v327 = 1.0 / CGRectGetWidth(v427);
          objc_msgSend(v324, (SEL)&selRef_linedPaper);
          CGFloat v328 = CGRectGetHeight(v428);
          CGAffineTransformMakeScale(&aBlock, v327, -1.0 / v328);
          objc_msgSend(v122, sel_applyTransform_, &aBlock);
          objc_msgSend(v122, sel_bounds);
          CGAffineTransformMakeTranslation(&aBlock, -v329, -v330);
          objc_msgSend(v122, sel_applyTransform_, &aBlock);
          id v331 = objc_msgSend(v324, sel_path);
          if (v331)
          {
            uint64_t v332 = v331;
            id v333 = objc_msgSend(v331, sel_CGPath);

            *(void *)&aBlock.a = v333;
            lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
            lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
            lazy protocol witness table accessor for type Line and conformance Line();
            lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
            lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
            lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
            lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
            lazy protocol witness table accessor for type Star and conformance Star();
            lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
            uint64_t v271 = (uint64_t)v368;
            TaggedValue_9.init(_:)();

            goto LABEL_121;
          }
LABEL_144:
          __break(1u);
LABEL_145:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x20C3C1CBCLL);
        }
        char v221 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v365(*(char **)&v215, v216);
        uint64_t v95 = v401;
        if (v221)
        {

          goto LABEL_46;
        }
        Swift::String v222 = (void *)CRAttributedString.attributedString.getter();
        uint64_t v122 = (char *)objc_msgSend(v222, sel_length);

        uint64_t v223 = v373;
        if (!__OFSUB__(v122, 1))
        {
          uint64_t v224 = (uint64_t)v383;
          CRAttributedString.attributes(at:effectiveRange:)();
          uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v225 - 8) + 56))(v224, 0, 1, v225);
          uint64_t v226 = v382;
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v224, v382, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v226, v381, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          CRRegister.wrappedValue.setter();
          outlined destroy of StocksKitCurrencyCache.Provider?(v226, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v224, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);

          goto LABEL_46;
        }
        goto LABEL_139;
      }
      v118(v114, v117, v104);
      uint64_t v121 = CRAttributedString.count.getter();
      v120(v114, v104);
      uint64_t v122 = (char *)swift_allocObject();
      *((void *)v122 + 2) = v112;
      *((void *)v122 + 3) = v117;
      uint64_t v123 = (void *)swift_allocObject();
      uint64_t v124 = closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)partial apply;
      v123[2] = closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)partial apply;
      v123[3] = v122;
      *(void *)&aBlock.tdouble x = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
      *(void *)&aBlock.tdouble y = v123;
      *(void *)&aBlock.a = MEMORY[0x263EF8330];
      *(void *)&aBlock.b = 1107296256;
      *(void *)&aBlock.c = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      *(void *)&aBlock.d = &block_descriptor_38;
      uint64_t v125 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      Swift::String v126 = v373;
      objc_msgSend(v373, sel_enumerateAttributesInRange_options_usingBlock_, 0, v121, 0, v125);

      _Block_release(v125);
      LOBYTE(v125) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v125 & 1) == 0)
      {
        uint64_t v73 = (uint64_t)v400;
        uint64_t v127 = v375;
        uint64_t v117 = v378;
        goto LABEL_39;
      }
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    if (!objc_msgSend((id)v91, sel_shouldUsePlaceholderText)) {
      goto LABEL_46;
    }
    if (!object_getClass(v380)) {
      goto LABEL_46;
    }
    swift_getObjCClassMetadata();
    id v154 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_defaultPlaceholderText);
    if (!v154) {
      goto LABEL_46;
    }
    CGRect v155 = v154;
    uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v158 = v157;

    swift_bridgeObjectRetain();
    objc_msgSend(v380, sel_originalModelBaseScaleFactor);
    uint64_t v160 = v159;
    id v161 = objc_allocWithZone(MEMORY[0x263F086A0]);
    uint64_t v162 = (void *)MEMORY[0x21054D080](v156, v158);
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v164 = objc_msgSend(v161, sel_initWithString_attributes_, v162, isa);

    lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
    id v165 = v164;
    char v166 = v379;
    double v376 = *(double *)&v165;
    CRAttributedString.init(_:)();
    unint64_t v167 = v384;
    uint64_t v168 = *(void (**)(char *, unint64_t))(v384 + 32);
    uint64_t v169 = (char *)v372;
    id v366 = (id)(v384 + 32);
    v365 = v168;
    ((void (*)(void, char *, unint64_t))v168)(v372, v166, v104);
    uint64_t v170 = *(void (**)(char *, char *, unint64_t))(v167 + 16);
    v170(v166, v169, v104);
    uint64_t v171 = CRAttributedString.count.getter();
    uint64_t v172 = *(void (**)(char *, unint64_t))(v167 + 8);
    v172(v166, v104);
    uint64_t v375 = (char *)v172;
    v373 = (char *)v170;
    if (v171 < 1)
    {

      Swift::String v175 = 0;
    }
    else
    {
      uint64_t v378 = v70;
      v170(v166, v169, v104);
      uint64_t v364 = CRAttributedString.count.getter();
      v172(v166, v104);
      uint64_t v173 = swift_allocObject();
      *(void *)(v173 + 16) = v160;
      *(void *)(v173 + 24) = v169;
      uint64_t v174 = swift_allocObject();
      Swift::String v175 = closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)partial apply;
      *(void *)(v174 + 16) = closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)partial apply;
      *(void *)(v174 + 24) = v173;
      *(void *)&aBlock.tdouble x = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
      *(void *)&aBlock.tdouble y = v174;
      *(void *)&aBlock.a = MEMORY[0x263EF8330];
      *(void *)&aBlock.b = 1107296256;
      *(void *)&aBlock.c = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      *(void *)&aBlock.d = &block_descriptor_27_0;
      Swift::String_optional v176 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      double v177 = v376;
      objc_msgSend(*(id *)&v376, sel_enumerateAttributesInRange_options_usingBlock_, 0, v364, 0, v176);

      _Block_release(v176);
      LOBYTE(v177) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (LOBYTE(v177))
      {
        __break(1u);
        goto LABEL_143;
      }
      unint64_t v70 = v378;
    }
    Swift::String_optional v335 = v369;
    Swift::String v336 = v370;
    unint64_t v337 = v390;
    ((void (*)(char *, void, unint64_t))v365)(v370, v372, v390);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v175);
    (*(void (**)(char *, char *, unint64_t))(v384 + 40))(v70, v336, v337);
    ((void (*)(void, char *, unint64_t))v373)(v335, v70, v337);
    uint64_t v338 = (void *)CRAttributedString.attributedString.getter();
    id v339 = objc_msgSend(v338, sel_string);

    uint64_t v340 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v342 = v341;

    if (!v340 && v342 == 0xE000000000000000)
    {
      swift_bridgeObjectRelease();
      ((void (*)(void (*)(char *, char *, unint64_t), unint64_t))v375)(v335, v337);
      uint64_t v73 = (uint64_t)v400;
      uint64_t v95 = v401;
      goto LABEL_46;
    }
    char v343 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    ((void (*)(void (*)(char *, char *, unint64_t), unint64_t))v375)(v335, v337);
    uint64_t v73 = (uint64_t)v400;
    uint64_t v95 = v401;
    if (v343) {
      goto LABEL_46;
    }
    uint64_t v344 = (void *)CRAttributedString.attributedString.getter();
    id v345 = objc_msgSend(v344, sel_length);

    if (!__OFSUB__(v345, 1))
    {
      uint64_t v346 = (uint64_t)v383;
      CRAttributedString.attributes(at:effectiveRange:)();
      uint64_t v347 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v347 - 8) + 56))(v346, 0, 1, v347);
      uint64_t v348 = v382;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v346, v382, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v348, v381, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?(v348, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v346, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      goto LABEL_46;
    }
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  self;
  uint64_t v133 = swift_dynamicCastObjCClass();
  uint64_t v131 = (uint64_t)v399;
  if (v133)
  {
    uint64_t v134 = (void *)v133;
    *(void *)&v367.f64[0] = v71;
    uint64_t v378 = v70;
    self;
    uint64_t v135 = swift_dynamicCastObjCClass();
    uint64_t v388 = (uint64_t)v134;
    id v366 = v87;
    if (!v135)
    {
      id v178 = v87;
      CRRegister.wrappedValue.getter();
      CGPoint v179 = *(CGPoint *)&aBlock.a;
      CGSize v180 = *(CGSize *)&aBlock.c;
      objc_msgSend(v134, sel_startPoint);
      double v182 = v181;
      double v184 = v183;
      v413.origin = v179;
      v413.size = v180;
      double v185 = v182 - CGRectGetMinX(v413);
      v414.origin = v179;
      v414.size = v180;
      CGFloat v377 = v185 / CGRectGetWidth(v414);
      v415.origin = v179;
      v415.size = v180;
      double v186 = v184 - CGRectGetMinY(v415);
      v416.origin = v179;
      v416.size = v180;
      double v376 = 1.0 - v186 / CGRectGetHeight(v416);
      CRRegister.wrappedValue.getter();
      CGPoint v187 = *(CGPoint *)&aBlock.a;
      CGSize v188 = *(CGSize *)&aBlock.c;
      objc_msgSend(v134, sel_midPoint);
      double v190 = v189;
      double v192 = v191;
      v417.origin = v187;
      v417.size = v188;
      double v193 = v190 - CGRectGetMinX(v417);
      v418.origin = v187;
      v418.size = v188;
      CGFloat v194 = v193 / CGRectGetWidth(v418);
      v419.origin = v187;
      v419.size = v188;
      double v195 = v192 - CGRectGetMinY(v419);
      v420.origin = v187;
      v420.size = v188;
      CGFloat v196 = 1.0 - v195 / CGRectGetHeight(v420);
      CRRegister.wrappedValue.getter();
      CGPoint v197 = *(CGPoint *)&aBlock.a;
      CGSize v198 = *(CGSize *)&aBlock.c;
      objc_msgSend(v134, sel_endPoint);
      double v200 = v199;
      double v202 = v201;
      v421.origin = v197;
      v421.size = v198;
      double v203 = v200 - CGRectGetMinX(v421);
      v422.origin = v197;
      v422.size = v198;
      CGFloat v204 = v203 / CGRectGetWidth(v422);
      v423.origin = v197;
      v423.size = v198;
      double v205 = v202 - CGRectGetMinY(v423);
      v424.origin = v197;
      v424.size = v198;
      CGFloat v206 = CGRectGetHeight(v424);
      aBlock.a = v377;
      aBlock.b = v376;
      aBlock.c = v194;
      aBlock.d = v196;
      aBlock.tdouble x = v204;
      aBlock.tdouble y = 1.0 - v205 / v206;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      CGRect v151 = (void *)v388;
      uint64_t v207 = (uint64_t)v389;
      TaggedValue_9.init(_:)();
      uint64_t v131 = (uint64_t)v399;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v399, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
      uint64_t v130 = v397;
      v391(v207, 0, 1, v397);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v207, v131, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
      objc_msgSend(v151, sel_drawingBounds);
      double v209 = v208;
      double v211 = v210;
      CRRegister.wrappedValue.getter();
      ShapeSecondaryProperties.appearanceStreamOffset.setter(v209 - aBlock.a, v211 - aBlock.b);
      id v212 = objc_msgSend(v151, sel_arrowHeadStyle);
      uint64_t v95 = v401;
      uint64_t v129 = (uint64_t)v398;
      CGRect v153 = v380;
      switch((unint64_t)v212)
      {
        case 0uLL:
          goto LABEL_95;
        case 1uLL:
          *(void *)&aBlock.a = 8;
          LOBYTE(aBlock.b) = 0;
          goto LABEL_92;
        case 2uLL:
          *(void *)&aBlock.a = 8;
          LOBYTE(aBlock.b) = 0;
LABEL_92:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
          goto LABEL_94;
        case 3uLL:
          Swift::String v272 = v380;
          *(void *)&aBlock.a = 8;
          LOBYTE(aBlock.b) = 0;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
          CRRegister.wrappedValue.setter();
          *(void *)&aBlock.a = 8;
          CGRect v153 = v272;
          LOBYTE(aBlock.b) = 0;
LABEL_94:
          CRRegister.wrappedValue.setter();
          goto LABEL_95;
        default:
          goto LABEL_145;
      }
    }
    int v136 = (void *)v135;
    objc_msgSend(v87, sel_strokeWidth);
    CGFloat v138 = v137 * 4.0;
    CRRegister.wrappedValue.getter();
    v405.origin = *(CGPoint *)&aBlock.a;
    v405.size = *(CGSize *)&aBlock.c;
    CGRect v406 = CGRectInset(v405, v138, v138);
    aBlock.a = v406.origin.x;
    aBlock.b = v406.origin.y;
    aBlock.c = v406.size.width;
    aBlock.d = v406.size.height;
    CRRegister.wrappedValue.setter();
    CRRegister.wrappedValue.getter();
    v407.origin = *(CGPoint *)&aBlock.a;
    v407.size = *(CGSize *)&aBlock.c;
    double MaxX = CGRectGetMaxX(v407);
    objc_msgSend(v136, sel_arrowHeadLength);
    double v141 = MaxX - v140;
    CRRegister.wrappedValue.getter();
    v408.origin = *(CGPoint *)&aBlock.a;
    v408.size = *(CGSize *)&aBlock.c;
    double MidY = CGRectGetMidY(v408);
    objc_msgSend(v136, sel_arrowLineWidth);
    double v144 = MidY + v143 * 0.5;
    CRRegister.wrappedValue.getter();
    CGPoint v145 = *(CGPoint *)&aBlock.a;
    CGSize v146 = *(CGSize *)&aBlock.c;
    v409.origin = *(CGPoint *)&aBlock.a;
    v409.size = *(CGSize *)&aBlock.c;
    double v147 = v141 - CGRectGetMinX(v409);
    v410.origin = v145;
    v410.size = v146;
    CGFloat v148 = v147 / CGRectGetWidth(v410);
    v411.origin = v145;
    v411.size = v146;
    double v149 = v144 - CGRectGetMinY(v411);
    v412.origin = v145;
    v412.size = v146;
    CGFloat v150 = CGRectGetHeight(v412);
    aBlock.a = v148;
    aBlock.b = 1.0 - v149 / v150;
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
    lazy protocol witness table accessor for type Line and conformance Line();
    lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
    lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
    lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
    lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
    lazy protocol witness table accessor for type Star and conformance Star();
    lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
    CGRect v151 = (void *)v388;
    uint64_t v152 = (uint64_t)v389;
    TaggedValue_9.init(_:)();
    uint64_t v131 = (uint64_t)v399;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v399, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
    uint64_t v130 = v397;
    v391(v152, 0, 1, v397);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v152, v131, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
    uint64_t v95 = v401;
    uint64_t v129 = (uint64_t)v398;
    CGRect v153 = v380;
LABEL_95:
    id v273 = objc_msgSend(v151, sel_annotationText);
    if (!v273) {
      goto LABEL_108;
    }
    id v274 = v273;
    objc_msgSend(v366, sel_originalModelBaseScaleFactor);
    uint64_t v276 = v275;
    lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
    uint64_t v393 = (char *)v274;
    uint64_t v277 = v379;
    CRAttributedString.init(_:)();
    unint64_t v278 = v384;
    uint64_t v279 = *(void (**)(char *, char *, unint64_t))(v384 + 32);
    unint64_t v280 = v390;
    uint64_t v389 = (char *)(v384 + 32);
    CGFloat v377 = *(double *)&v279;
    v279(v153, v277, v390);
    Swift::String_optional v282 = (void (*)(uint64_t, void, uint64_t, uint64_t))(v278 + 16);
    Swift::String v281 = *(void (**)(char *, char *, unint64_t))(v278 + 16);
    v281(v277, v153, v280);
    uint64_t v283 = CRAttributedString.count.getter();
    Swift::String v284 = v153;
    uint64_t v287 = *(char **)(v278 + 8);
    *(void *)&double v286 = v278 + 8;
    uint64_t v285 = v287;
    ((void (*)(char *, unint64_t))v287)(v277, v280);
    uint64_t v392 = v281;
    v391 = v282;
    if (v283 < 1)
    {

      uint64_t v123 = 0;
    }
    else
    {
      v281(v277, v284, v280);
      uint64_t v288 = CRAttributedString.count.getter();
      v379 = v285;
      double v376 = v286;
      ((void (*)(char *, unint64_t))v285)(v277, v280);
      uint64_t v122 = (char *)swift_allocObject();
      *((void *)v122 + 2) = v276;
      *((void *)v122 + 3) = v284;
      uint64_t v289 = swift_allocObject();
      uint64_t v123 = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
      *(void *)(v289 + 16) = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
      *(void *)(v289 + 24) = v122;
      *(void *)&aBlock.tdouble x = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      *(void *)&aBlock.tdouble y = v289;
      *(void *)&aBlock.a = MEMORY[0x263EF8330];
      *(void *)&aBlock.b = 1107296256;
      *(void *)&aBlock.c = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      *(void *)&aBlock.d = &block_descriptor_13;
      uint64_t v91 = (uint64_t)_Block_copy(&aBlock);
      swift_retain();
      swift_release();
      NSBundle v290 = v393;
      objc_msgSend(v393, sel_enumerateAttributesInRange_options_usingBlock_, 0, v288, 0, v91);

      _Block_release((const void *)v91);
      LOBYTE(v288) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v288) {
        goto LABEL_138;
      }
      uint64_t v130 = v397;
      uint64_t v131 = (uint64_t)v399;
      unint64_t v280 = v390;
      uint64_t v285 = v379;
    }
    Swift::String v291 = v373;
    (*(void (**)(char *, char *, unint64_t))&v377)(v373, v380, v280);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v123);
    Swift::String_optional v292 = v378;
    (*(void (**)(char *, char *, unint64_t))(v384 + 40))(v378, v291, v280);
    uint64_t v91 = (uint64_t)v374;
    v392(v374, v292, v280);
    Swift::String v293 = (void *)CRAttributedString.attributedString.getter();
    id v294 = objc_msgSend(v293, sel_string);

    uint64_t v295 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v297 = v296;

    if (v295 || v297 != 0xE000000000000000)
    {
      char v298 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, unint64_t))v285)(v91, v390);
      uint64_t v73 = (uint64_t)v400;
      uint64_t v95 = v401;
      uint64_t v129 = (uint64_t)v398;
      uint64_t v299 = v393;
      if (v298)
      {
LABEL_107:

        CGRect v151 = (void *)v388;
LABEL_108:
        id v304 = objc_msgSend(v151, sel_typingAttributes);
        if (v304
          && (uint64_t v305 = v304,
              uint64_t v306 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
              v305,
              uint64_t v307 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v306),
              swift_bridgeObjectRelease(),
              v307))
        {
          *(void *)&aBlock.a = v307;
          id v308 = v366;
          objc_msgSend(v366, sel_originalModelBaseScaleFactor);
          Dictionary<>.scaleBy(_:)(v309);
          uint64_t v310 = (uint64_t)v383;
          CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(*(uint64_t *)&aBlock.a, 0);
          uint64_t v311 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v311 - 8) + 56))(v310, 0, 1, v311);
          uint64_t v312 = v382;
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v310, v382, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v312, v381, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          CRRegister.wrappedValue.setter();
          outlined destroy of StocksKitCurrencyCache.Provider?(v312, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v310, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);

          uint64_t v95 = v401;
        }
        else
        {
          id v313 = v366;
        }
        goto LABEL_112;
      }
      uint64_t v122 = v378;
      NSBundle v300 = (void *)CRAttributedString.attributedString.getter();
      uint64_t v123 = objc_msgSend(v300, sel_length);

      if (__OFSUB__(v123, 1))
      {
LABEL_140:
        __break(1u);
LABEL_141:
        swift_once();
LABEL_90:
        objc_msgSend(v123, sel_innerRadiusFactor);
        *(void *)&aBlock.a = v91;
        aBlock.b = v270;
        uint64_t v271 = (uint64_t)v389;
        TaggedValue_9.init(_:)();

LABEL_121:
        uint64_t v131 = (uint64_t)v399;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v399, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
        uint64_t v130 = v397;
        v391(v271, 0, 1, v397);
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v271, v131, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
        uint64_t v95 = v401;
LABEL_70:
        uint64_t v73 = (uint64_t)v400;
        uint64_t v129 = (uint64_t)v398;
        goto LABEL_112;
      }
      uint64_t v301 = (uint64_t)v383;
      CRAttributedString.attributes(at:effectiveRange:)();
      uint64_t v302 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v302 - 8) + 56))(v301, 0, 1, v302);
      uint64_t v303 = v382;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v301, v382, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v303, v381, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?(v303, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v301, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    }
    else
    {
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, unint64_t))v285)(v91, v390);
      uint64_t v73 = (uint64_t)v400;
      uint64_t v95 = v401;
      uint64_t v129 = (uint64_t)v398;
    }
    uint64_t v299 = v393;
    goto LABEL_107;
  }

  uint64_t v130 = v397;
  uint64_t v129 = (uint64_t)v398;
  uint64_t v95 = v401;
LABEL_112:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v131, v129, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
  uint64_t v314 = v394;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v394 + 48))(v129, 1, v130) != 1)
  {
    uint64_t v317 = v385;
    (*(void (**)(char *, uint64_t, uint64_t))(v314 + 32))(v385, v129, v130);
    uint64_t v318 = v314;
    v319 = *(void (**)(char *, char *, uint64_t))(v314 + 16);
    v320 = v387;
    v319(v387, v317, v130);
    v319(v386, v320, v130);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    CRRegister.wrappedValue.setter();
    uint64_t v321 = *(void (**)(char *, uint64_t))(v318 + 8);
    v321(v320, v130);
    v321(v317, v130);
    outlined destroy of StocksKitCurrencyCache.Provider?(v131, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
    uint64_t v316 = v396;
    outlined init with take of AnnotationImporter.ImportedElement(v73, v396, (uint64_t (*)(void))type metadata accessor for Shape);
    uint64_t v315 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v395 + 56))(v316, v315, 1, v95);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v131, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
  outlined destroy of AnnotationImporter.ImportedElement(v73, (uint64_t (*)(void))type metadata accessor for Shape);
  outlined destroy of StocksKitCurrencyCache.Provider?(v129, &demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>?);
LABEL_114:
  uint64_t v315 = 1;
  uint64_t v316 = v396;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v395 + 56))(v316, v315, 1, v95);
}

void specialized TaggedValue_2<>.init<A>(for:)(void *a1)
{
  switch((unint64_t)objc_msgSend(a1, sel_brushStyle))
  {
    case 0uLL:
      if (objc_msgSend(a1, sel_isDashed))
      {
        objc_msgSend(a1, sel_strokeWidth);
        double v3 = v2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
        uint64_t v4 = swift_allocObject();
        *(_OWORD *)(v4 + 16) = xmmword_20C835740;
        *(double *)(v4 + 32) = (v3 + 7.0) / v3;
        *(double *)(v4 + 40) = (v3 * 3.0 + 4.0) / v3;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BrushStyle>);
      lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRExtensible<BrushStyle> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<BrushStyle>);
      TaggedValue_2.init(_:)();
      break;
    default:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BrushStyle>);
      lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRExtensible<BrushStyle> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<BrushStyle>);
      TaggedValue_2.init(_:)();
      break;
  }
}

uint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
    uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE80];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v2 = -1 << *(unsigned char *)(a1 + 32);
  if (-v2 < 64) {
    uint64_t v3 = ~(-1 << -(char)v2);
  }
  else {
    uint64_t v3 = -1;
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v2) >> 6;
  uint64_t v5 = v1 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v7 << 6);
      int64_t v11 = v7;
      goto LABEL_28;
    }
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v26) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v12);
    int64_t v11 = v7 + 1;
    if (!v13)
    {
      int64_t v11 = v7 + 2;
      if (v7 + 2 >= v26) {
        goto LABEL_39;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v11);
      if (!v13)
      {
        int64_t v11 = v7 + 3;
        if (v7 + 3 >= v26) {
          goto LABEL_39;
        }
        unint64_t v13 = *(void *)(v27 + 8 * v11);
        if (!v13)
        {
          int64_t v11 = v7 + 4;
          if (v7 + 4 >= v26) {
            goto LABEL_39;
          }
          unint64_t v13 = *(void *)(v27 + 8 * v11);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v9 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
LABEL_28:
    outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v10, (uint64_t)v37);
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    uint64_t v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    outlined init with copy of AnyHashable((uint64_t)v34, (uint64_t)v31);
    type metadata accessor for NSAttributedStringKey(0);
    if (!swift_dynamicCast())
    {
      uint64_t v30 = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      uint64_t v25 = v30;
      swift_release();

      outlined consume of [AnyHashable : Any].Iterator._Variant();
      swift_release();
      return 0;
    }
    uint64_t v15 = v30;
    outlined init with copy of Any((uint64_t)v35 + 8, (uint64_t)v31);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v31, (_OWORD *)((char *)v32 + 8));
    outlined init with take of Any((_OWORD *)((char *)v32 + 8), v29);
    uint64_t v16 = v15;
    outlined init with take of Any(v29, v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v17 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v19 = v17 & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v5 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v19) & ~*(void *)(v5 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v5 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v8 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v5 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v1 + 48) + 8 * v8) = v16;
    uint64_t result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(void *)(v1 + 56) + 32 * v8));
    ++*(void *)(v1 + 16);
    int64_t v7 = v11;
    unint64_t v4 = v9;
  }
  int64_t v14 = v7 + 5;
  if (v7 + 5 >= v26)
  {
LABEL_39:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v1;
  }
  unint64_t v13 = *(void *)(v27 + 8 * v14);
  if (v13)
  {
    int64_t v11 = v7 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v11 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v11);
    ++v14;
    if (v13) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

id static AnnotationImporter.translateDoodleAnnotation(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v61 - v8;
  MEMORY[0x270FA5388](v10);
  int64_t v12 = (char *)&v61 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Shape();
  uint64_t v70 = *(void *)(v19 - 8);
  double v20 = MEMORY[0x270FA5388](v19);
  unint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = objc_msgSend(a1, sel_path, v20);
  if (v23)
  {
    uint64_t v24 = v23;
    CGFloat v67 = v12;
    id v68 = v9;
    uint64_t v69 = v6;
    uint64_t v63 = a2;
    objc_msgSend(v23, sel_bounds);
    CGFloat v25 = 1.0 / CGRectGetWidth(v75);
    objc_msgSend(v24, sel_bounds);
    CGFloat Height = CGRectGetHeight(v76);
    CGAffineTransformMakeScale(&v73, v25, -1.0 / Height);
    objc_msgSend(v24, sel_applyTransform_, &v73);
    objc_msgSend(v24, sel_bounds);
    CGAffineTransformMakeTranslation(&v73, -v27, -v28);
    objc_msgSend(v24, sel_applyTransform_, &v73);
    id v62 = v24;
    *(void *)&v73.a = objc_msgSend(v24, sel_CGPath);
    *(void *)&long long v65 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
    lazy protocol witness table accessor for type Line and conformance Line();
    lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
    lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
    id v66 = v15;
    lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
    lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
    CGFloat v64 = v18;
    lazy protocol witness table accessor for type Star and conformance Star();
    lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
    uint64_t v29 = v64;
    TaggedValue_9.init(_:)();
    uint64_t v72 = 0;
    v73.a = 0.0;
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    uint64_t v31 = (uint64_t)v66;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v66, 1, 1, v30);
    uint64_t v71 = 0;
    Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v29, (uint64_t *)&v73, &v72, v31, &v71, (uint64_t)v22, 0.0, 0.0, 0.0, 0.0, 5.0);
    objc_msgSend(a1, sel_rectangle);
    v73.a = v32;
    v73.b = v33;
    v73.c = v34;
    v73.d = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.setter();
    objc_msgSend(a1, sel_drawingBounds);
    double v37 = v36;
    double v39 = v38;
    objc_msgSend(a1, sel_rectangle);
    ShapeSecondaryProperties.appearanceStreamOffset.setter(v37 - v40, v39 - v41);
    objc_msgSend(a1, sel_rotationAngle);
    double v43 = v42;
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.value.getter();
    if (vabdd_f64(v73.a, v43) > 0.01)
    {
      v73.a = v43;
      CRRegister.value.setter();
    }
    unsigned int v45 = objc_msgSend(a1, sel_hasShadow);
    id v66 = (char *)v44;
    if (v45)
    {
      if (one-time initialization token for defaultShadowOffset != -1) {
        swift_once();
      }
      long long v65 = static UIConstants.defaultShadowOffset;
      uint64_t v47 = (uint64_t)v68;
      uint64_t v46 = (uint64_t)v69;
      if (one-time initialization token for defaultShadowColor != -1) {
        swift_once();
      }
      CGFloat v48 = *(double *)&static UIConstants.defaultShadowColor;
      id v49 = (id)static UIConstants.defaultShadowColor;
      CGFloat v50 = 3.0;
      long long v51 = v65;
    }
    else
    {
      CGFloat v50 = 0.0;
      CGFloat v48 = 0.0;
      long long v51 = 0uLL;
      uint64_t v47 = (uint64_t)v68;
      uint64_t v46 = (uint64_t)v69;
    }
    *(_OWORD *)&v73.a = v51;
    v73.c = v50;
    v73.d = v48;
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
    CRRegister.wrappedValue.setter();
    id v54 = a1;
    uint64_t v55 = (uint64_t)v67;
    specialized TaggedValue_2<>.init<A>(for:)(v54);
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 0, 1, v56);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v55, v47, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v47, v46, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v55, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    unsigned __int8 v57 = objc_msgSend(v54, sel_pathIsPrestroked);
    id result = objc_msgSend(v54, sel_strokeColor);
    uint64_t v58 = result;
    if (v57)
    {
      if (result)
      {
        Color.init(cgColor:)((CGColor *)objc_msgSend(result, sel_CGColor), (CGColor **)&v73);

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
LABEL_19:
        CRRegister.wrappedValue.setter();

        uint64_t v60 = v63;
        outlined init with take of AnnotationImporter.ImportedElement((uint64_t)v22, v63, (uint64_t (*)(void))type metadata accessor for Shape);
        return (id)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v60, 0, 1, v19);
      }
      __break(1u);
    }
    else if (result)
    {
      Color.init(cgColor:)((CGColor *)objc_msgSend(result, sel_CGColor), (CGColor **)&v73);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.setter();
      objc_msgSend(v54, sel_strokeWidth);
      v73.a = v59;
      goto LABEL_19;
    }
    __break(1u);
  }
  else
  {
    uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
    return (id)v52(a2, 1, 1, v19);
  }
  return result;
}

uint64_t static AnnotationImporter.translateSignatureAnnotation(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v85 = (char *)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v9 - 8);
  id v89 = (char *)v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  uint64_t v13 = (char *)v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Signature();
  uint64_t v88 = *(void *)(v17 - 8);
  double v18 = MEMORY[0x270FA5388](v17);
  double v20 = (char *)v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v21 = objc_msgSend(a1, sel_signature, v18);
  if (v21)
  {
    unint64_t v22 = v21;
    id v82 = a1;
    uint64_t v83 = a2;
    id v23 = objc_msgSend(v21, sel_descriptionTag);
    id v24 = objc_msgSend(v22, sel_description);
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v87 = (int *)v17;
    unint64_t v27 = v26;

    uint64_t v28 = (uint64_t)v23;
    uint64_t v29 = v87;
    SignatureDescription.init(tag:customDescription:)(v28, v25, v27, (uint64_t *)&v94);
    long long v84 = v94;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
    long long v94 = 0u;
    long long v95 = 0u;
    CRRegister.init(wrappedValue:)();
    uint64_t v30 = &v20[v29[5]];
    *(void *)&long long v94 = 0;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    CGFloat v81 = v30;
    CRRegister.init(wrappedValue:)();
    uint64_t v31 = &v20[v29[6]];
    *(void *)&long long v94 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignatureItem?);
    lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?();
    id v80 = v31;
    CRRegister.init(wrappedValue:)();
    CGFloat v32 = &v20[v29[7]];
    *(void *)&long long v94 = 0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
    lazy protocol witness table accessor for type Color? and conformance <A> A?();
    CRRegister.init(wrappedValue:)();
    *(void *)&long long v94 = 0;
    BYTE8(v94) = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?();
    CRRegister.init(wrappedValue:)();
    *(void *)&v20[v29[9]] = MEMORY[0x263F8EE80];
    id v86 = v22;
    id v33 = objc_msgSend(v22, sel_uniqueID);
    if (v33)
    {
      CGFloat v34 = v33;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v35 = v92;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v13, v92);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v35);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v35) != 1)
      {
        id v36 = v86;
        objc_msgSend(v86, sel_baselineOffset);
        uint64_t v38 = v37;
        id v39 = objc_msgSend(v36, sel_creationDate);
        if (v39)
        {
          double v40 = v39;
          double v41 = v85;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          double v43 = v89;
          uint64_t v42 = v90;
          uint64_t v44 = v41;
          uint64_t v45 = v91;
          (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v89, v44, v91);
          uint64_t v85 = *(char **)(v42 + 56);
          ((void (*)(char *, void, uint64_t, uint64_t))v85)(v43, 0, 1, v45);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v43, 1, v45) != 1)
          {
            unsigned int v78 = objc_msgSend(v36, sel_shouldPersist);
            id v77 = objc_msgSend(v36, sel_path);
            id v46 = objc_msgSend(v36, sel_drawing);
            id v79 = v20;
            v75[1] = v32;
            CGRect v76 = v6;
            if (v46)
            {
              uint64_t v47 = v46;
              static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v48 = type metadata accessor for PKDrawing();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v6, 0, 1, v48);
            }
            else
            {
              uint64_t v51 = type metadata accessor for PKDrawing();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v6, 1, 1, v51);
            }
            uint64_t v52 = (objc_class *)type metadata accessor for SignatureItem();
            uint64_t v53 = objc_allocWithZone(v52);
            id v54 = v16;
            uint64_t v55 = v92;
            (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(&v53[OBJC_IVAR____TtC8PaperKit13SignatureItem_uniqueID], v16, v92);
            *(void *)&v53[OBJC_IVAR____TtC8PaperKit13SignatureItem_baselineOffset] = v38;
            uint64_t v56 = &v53[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate];
            uint64_t v58 = v89;
            uint64_t v57 = v90;
            uint64_t v59 = v91;
            (*(void (**)(unsigned char *, char *, uint64_t))(v90 + 16))(&v53[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate], v89, v91);
            ((void (*)(char *, void, uint64_t, uint64_t))v85)(v56, 0, 1, v59);
            v53[OBJC_IVAR____TtC8PaperKit13SignatureItem_shouldPersist] = v78;
            uint64_t v60 = &v53[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
            uint64_t v61 = *((void *)&v84 + 1);
            *uint64_t v60 = v84;
            v60[1] = v61;
            *(void *)&v53[OBJC_IVAR____TtC8PaperKit13SignatureItem_path] = v77;
            uint64_t v62 = (uint64_t)v76;
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v76, (uint64_t)&v53[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing], &demangling cache variable for type metadata for PKDrawing?);
            v53[OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned] = 1;
            v93.receiver = v53;
            v93.super_class = v52;
            id v63 = objc_msgSendSuper2(&v93, sel_init);
            outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for PKDrawing?);
            (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
            (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v55);
            *(void *)&long long v94 = v63;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
            CRRegister.wrappedValue.setter();
            id v64 = v82;
            objc_msgSend(v82, sel_drawingBounds);
            *(void *)&long long v94 = v65;
            *((void *)&v94 + 1) = v66;
            *(void *)&long long v95 = v67;
            *((void *)&v95 + 1) = v68;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
            uint64_t v69 = (uint64_t)v79;
            CRRegister.wrappedValue.setter();
            objc_msgSend(v64, sel_rotationAngle);
            *(void *)&long long v94 = v70;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
            CRRegister.wrappedValue.setter();
            id v71 = objc_msgSend(v64, sel_strokeColor);
            if (v71)
            {
              id v72 = v71;
              Color.init(cgColor:)((CGColor *)objc_msgSend(v72, sel_CGColor), (CGColor **)&v94);

              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
              CRRegister.wrappedValue.setter();
            }
            uint64_t v73 = v83;
            CGFloat v74 = v87;
            outlined init with take of AnnotationImporter.ImportedElement(v69, v83, (uint64_t (*)(void))type metadata accessor for Signature);
            return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(v88 + 56))(v73, 0, 1, v74);
          }
LABEL_18:
          uint64_t result = outlined consume of SignatureDescription(v84, *((unint64_t *)&v84 + 1));
          __break(1u);
          return result;
        }
LABEL_17:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v89, 1, 1, v91);
        goto LABEL_18;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v16, 1, 1, v92);
    }
    outlined consume of SignatureDescription(v84, *((unint64_t *)&v84 + 1));
    __break(1u);
    goto LABEL_17;
  }
  id v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
  return v49(a2, 1, 1, v17);
}

uint64_t static AnnotationImporter.addAnnotation<A>(_:from:in:id:scale:mediaBox:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, CGFloat a6@<D0>, double a7@<D2>, double a8@<D4>)
{
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v41 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v42 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  MEMORY[0x270FA5388](v18 - 8);
  double v20 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  id v23 = (char *)v40 - v22;
  MEMORY[0x270FA5388](v24);
  unint64_t v26 = (char *)v40 - v25;
  v40[1] = a3;
  static AnnotationImporter.importElement<A>(_:from:in:id:scale:mediaBox:)(a1, a2, a3, a4, (uint64_t)v40 - v25, a6, a7, a8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v26, (uint64_t)v23, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  uint64_t v27 = type metadata accessor for AnnotationImporter.ImportedElement();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v23, 1, v27) != 1)
  {
    v40[0] = a5;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v23, (uint64_t)v20, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AnnotationImporter.ImportedElement((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
    }
    else
    {
      uint64_t v28 = v42;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v42, v20, v16);
      self;
      if (swift_dynamicCastObjCClass()
        || (self, swift_dynamicCastObjCClass())
        || (self, swift_dynamicCastObjCClass())
        || (self, swift_dynamicCastObjCClass()))
      {
        BOOL v29 = 0;
      }
      else
      {
        self;
        BOOL v29 = swift_dynamicCastObjCClass() == 0;
      }
      self;
      if (swift_dynamicCastObjCClass()
        || ((self, swift_dynamicCastObjCClass()) ? (char v30 = 1) : (char v30 = v29), (v30 & 1) != 0))
      {
        uint64_t v31 = qword_26C14D6A8;
        if ((unk_26C14D6B0 & ~qword_26C14D6A8) != 0) {
          uint64_t v32 = unk_26C14D6B0;
        }
        else {
          uint64_t v32 = 0;
        }
        id v33 = (void (*)(char *, void))SharedTagged_9.subscript.modify();
        uint64_t v35 = *(void *)(v34 + 24);
        uint64_t v36 = *(void *)(v34 + 32);
        __swift_mutable_project_boxed_opaque_existential_1(v34, v35);
        uint64_t v37 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v36 + 80))(v43, v35, v36);
        uint64_t v28 = v42;
        *v38 |= v32 | v31;
        v37(v43, 0);
        v33(v44, 0);
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v16);
    }
    a5 = v40[0];
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v26, a5, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
}

uint64_t static AnnotationImporter.importElement<A>(_:from:in:id:scale:mediaBox:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, CGFloat a6@<D0>, double a7@<D2>, double a8@<D4>)
{
  uint64_t v190 = a4;
  uint64_t v191 = a3;
  uint64_t v193 = a5;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v13 - 8);
  CGSize v180 = (char *)&v170 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x270FA5388](v15 - 8);
  CGPoint v179 = (char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Signature?);
  MEMORY[0x270FA5388](v17 - 8);
  double v182 = (char *)&v170 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v183 = type metadata accessor for Signature();
  uint64_t v181 = *(void *)(v183 - 8);
  MEMORY[0x270FA5388](v183);
  uint64_t v171 = (uint64_t)&v170 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v172 = (uint64_t)&v170 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v175 = *(void *)(v22 - 8);
  uint64_t v176 = v22;
  MEMORY[0x270FA5388](v22);
  double v177 = (char *)&v170 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for PKDrawing();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v184 = v24;
  uint64_t v185 = v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v173 = (char *)&v170 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v174 = (char *)&v170 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v31 = (char *)&v170 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v170 - v33;
  uint64_t v35 = type metadata accessor for CRKeyPath();
  uint64_t v187 = *(void *)(v35 - 8);
  uint64_t v188 = v35;
  MEMORY[0x270FA5388](v35);
  double v189 = (char *)&v170 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v37 - 8);
  id v39 = (char *)&v170 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v170 - v41;
  uint64_t v192 = type metadata accessor for Shape();
  uint64_t v43 = *(void *)(v192 - 8);
  MEMORY[0x270FA5388](v192);
  uint64_t v178 = (uint64_t)&v170 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  uint64_t v47 = (char *)&v170 - v46;
  MEMORY[0x270FA5388](v48);
  uint64_t v186 = (uint64_t)&v170 - v49;
  MEMORY[0x270FA5388](v50);
  uint64_t v52 = (char *)&v170 - v51;
  CGAffineTransformMakeScale(&t1, a6, a6);
  double a = t1.a;
  double b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  tdouble x = t1.tx;
  tdouble y = t1.ty;
  CGAffineTransform v197 = t1;
  if (!a2)
  {
    memset(&t1, 0, 32);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    goto LABEL_19;
  }
  if (objc_msgSend(a2, sel_valueForAnnotationKey_, *MEMORY[0x263F14790]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(&v196, 0, 32);
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v196, (uint64_t)&t1, &demangling cache variable for type metadata for Any?);
  if (!*(void *)&t1.d)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    uint64_t v59 = 0;
    goto LABEL_14;
  }
  if ((LOBYTE(v196.a) & 2) == 0)
  {
    if ((LOBYTE(v196.a) & 0x40) != 0)
    {
      uint64_t v59 = 2;
      if ((LOBYTE(v196.a) & 0x80) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v59 = 0;
      if ((LOBYTE(v196.a) & 0x80) == 0) {
        goto LABEL_14;
      }
    }
    goto LABEL_40;
  }
  if ((LOBYTE(v196.a) & 0x40) == 0)
  {
    uint64_t v59 = 1;
    if ((LOBYTE(v196.a) & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
  uint64_t v59 = 3;
  if ((LOBYTE(v196.a) & 0x80) != 0) {
LABEL_40:
  }
    v59 |= 4uLL;
LABEL_14:
  uint64_t v60 = unk_26C14D678;
  if ((unk_26C14D678 & ~qword_26C14D670) == 0) {
    uint64_t v60 = 0;
  }
  uint64_t v61 = qword_26C14D680;
  if ((qword_26C14D680 & ~(v60 | qword_26C14D670)) == 0) {
    uint64_t v61 = 0;
  }
  a2 = (void *)(v59 | v60 | qword_26C14D670 | v61);
LABEL_19:
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v62 = type metadata accessor for AnnotationImporter.ImportedElement();
    id v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56);
    uint64_t v64 = v193;
LABEL_53:
    uint64_t v111 = 1;
    return v63(v64, v111, 1, v62);
  }
  unint64_t v170 = (unint64_t)a2;
  self;
  uint64_t v65 = swift_dynamicCastObjCClass();
  if (v65)
  {
    uint64_t v66 = (void *)v65;
    id v67 = a1;
    static AnnotationImporter.translateDoodleAnnotation(_:)(v66, (uint64_t)v42);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v42, 1, v192) == 1)
    {

      uint64_t v68 = &demangling cache variable for type metadata for Shape?;
LABEL_24:
      uint64_t v69 = (uint64_t)v42;
LABEL_52:
      outlined destroy of StocksKitCurrencyCache.Provider?(v69, v68);
      uint64_t v117 = v193;
      uint64_t v62 = type metadata accessor for AnnotationImporter.ImportedElement();
      id v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56);
      uint64_t v64 = v117;
      goto LABEL_53;
    }
    outlined init with take of AnnotationImporter.ImportedElement((uint64_t)v42, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v196);
    CGAffineTransform t1 = v196;
    v195.double a = a;
    v195.double b = b;
    v195.CGFloat c = c;
    v195.CGFloat d = d;
    v195.tdouble x = tx;
    v195.tdouble y = ty;
    CGAffineTransformConcat(&v194, &t1, &v195);
    CGAffineTransform t1 = v194;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    uint64_t v73 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    *CGFloat v74 = sqrt(a * a + b * b) * *v74;
    v73(&v195, 0);
    CRAttributedString<>.apply(_:)(&v197.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CGRect v75 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    id v77 = v76;
    CGFloat v78 = *v76;
    CGFloat v79 = v76[1];
    CGFloat v80 = v76[2];
    CGFloat v81 = v76[3];
    v199.origin.double x = *v76;
    v199.origin.double y = v79;
    v199.size.double width = v80;
    v199.size.double height = v81;
    CGFloat MinX = CGRectGetMinX(v199);
    v200.origin.double x = v78;
    v200.origin.double y = v79;
    v200.size.double width = v80;
    v200.size.double height = v81;
    double v83 = a7 + a7 + a8 - CGRectGetMaxY(v200);
    v201.origin.double x = v78;
    v201.origin.double y = v79;
    v201.size.double width = v80;
    v201.size.double height = v81;
    CGFloat Width = CGRectGetWidth(v201);
    v202.origin.double x = v78;
    v202.origin.double y = v79;
    v202.size.double width = v80;
    v202.size.double height = v81;
    CGFloat Height = CGRectGetHeight(v202);
    *id v77 = MinX;
    v77[1] = v83;
    v77[2] = Width;
    v77[3] = Height;
    v75(&v195, 0);
    CRRegister.value.getter();
    double v86 = v195.a;
    CRRegister.value.getter();
    if (fabs(v86 + v195.a) > 0.01)
    {
      v195.double a = -v86;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(void *)&v194.double a = *(void *)&v195.a | v170;
    CRRegister.wrappedValue.setter();
    outlined init with copy of AnnotationImporter.ImportedElement((uint64_t)v52, v186, (uint64_t (*)(void))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v189, v190, v188);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    uint64_t v87 = v193;
    SharedTagged_9.init<A>(_:_:id:)();

    uint64_t v88 = type metadata accessor for Shape;
    uint64_t v89 = (uint64_t)v52;
    goto LABEL_44;
  }
  self;
  uint64_t v70 = swift_dynamicCastObjCClass();
  if (v70)
  {
    id v71 = (void *)v70;
    id v72 = a1;
    static AnnotationImporter.translateStrokedAnnotation(_:)(v71, (uint64_t)v39);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v39, 1, v192) == 1)
    {

      uint64_t v68 = &demangling cache variable for type metadata for Shape?;
      uint64_t v69 = (uint64_t)v39;
      goto LABEL_52;
    }
    outlined init with take of AnnotationImporter.ImportedElement((uint64_t)v39, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v196);
    CGAffineTransform t1 = v196;
    v195.double a = a;
    v195.double b = b;
    v195.CGFloat c = c;
    v195.CGFloat d = d;
    v195.tdouble x = tx;
    v195.tdouble y = ty;
    CGAffineTransformConcat(&v194, &t1, &v195);
    CGAffineTransform t1 = v194;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    uint64_t v96 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    double *v97 = sqrt(a * a + b * b) * *v97;
    v96(&v195, 0);
    CRAttributedString<>.apply(_:)(&v197.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    double v98 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    double v100 = v99;
    CGFloat v101 = *v99;
    CGFloat v102 = v99[1];
    CGFloat v103 = v99[2];
    CGFloat v104 = v99[3];
    v203.origin.double x = *v99;
    v203.origin.double y = v102;
    v203.size.double width = v103;
    v203.size.double height = v104;
    CGFloat v105 = CGRectGetMinX(v203);
    v204.origin.double x = v101;
    v204.origin.double y = v102;
    v204.size.double width = v103;
    v204.size.double height = v104;
    double v106 = a7 + a7 + a8 - CGRectGetMaxY(v204);
    v205.origin.double x = v101;
    v205.origin.double y = v102;
    v205.size.double width = v103;
    v205.size.double height = v104;
    CGFloat v107 = CGRectGetWidth(v205);
    v206.origin.double x = v101;
    v206.origin.double y = v102;
    v206.size.double width = v103;
    v206.size.double height = v104;
    CGFloat v108 = CGRectGetHeight(v206);
    *double v100 = v105;
    v100[1] = v106;
    v100[2] = v107;
    v100[3] = v108;
    v98(&v195, 0);
    CRRegister.value.getter();
    double v109 = v195.a;
    CRRegister.value.getter();
    if (fabs(v109 + v195.a) > 0.01)
    {
      v195.double a = -v109;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(void *)&v194.double a = *(void *)&v195.a | v170;
    CRRegister.wrappedValue.setter();
    outlined init with copy of AnnotationImporter.ImportedElement((uint64_t)v47, v186, (uint64_t (*)(void))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v189, v190, v188);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    uint64_t v87 = v193;
    SharedTagged_9.init<A>(_:_:id:)();

    uint64_t v88 = type metadata accessor for Shape;
    uint64_t v89 = (uint64_t)v47;
LABEL_44:
    outlined destroy of AnnotationImporter.ImportedElement(v89, (uint64_t (*)(void))v88);
    uint64_t v110 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    id v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56);
    uint64_t v64 = v87;
    goto LABEL_45;
  }
  self;
  uint64_t v90 = swift_dynamicCastObjCClass();
  if (!v90)
  {
    self;
    uint64_t v112 = swift_dynamicCastObjCClass();
    if (!v112)
    {
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v120 = v179;
      TaggedValue_9.init(_:)();
      t1.double a = 0.0;
      v196.double a = 0.0;
      uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
      uint64_t v122 = (uint64_t)v180;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v180, 1, 1, v121);
      v195.double a = 0.0;
      uint64_t v123 = v186;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v120, (uint64_t *)&t1, (uint64_t *)&v196, v122, (uint64_t *)&v195, v186, 0.0, 0.0, 0.0, 0.0, 5.0);
      objc_msgSend(a1, sel_drawingBounds);
      t1.double a = v124;
      t1.double b = v125;
      t1.CGFloat c = v126;
      t1.CGFloat d = v127;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.setter();
      uint64_t v128 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
      CGRect v207 = *v129;
      t1.double a = a;
      t1.double b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tdouble x = tx;
      t1.tdouble y = ty;
      *uint64_t v129 = CGRectApplyAffineTransform(v207, &t1);
      v128(&v196, 0);
      uint64_t v130 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
      uint64_t v132 = v131;
      CGFloat v133 = *v131;
      CGFloat v134 = v131[1];
      CGFloat v135 = v131[2];
      CGFloat v136 = v131[3];
      v208.origin.double x = *v131;
      v208.origin.double y = v134;
      v208.size.double width = v135;
      v208.size.double height = v136;
      CGFloat v137 = CGRectGetMinX(v208);
      v209.origin.double x = v133;
      v209.origin.double y = v134;
      v209.size.double width = v135;
      v209.size.double height = v136;
      double v138 = a7 + a7 + a8 - CGRectGetMaxY(v209);
      v210.origin.double x = v133;
      v210.origin.double y = v134;
      v210.size.double width = v135;
      v210.size.double height = v136;
      CGFloat v139 = CGRectGetWidth(v210);
      v211.origin.double x = v133;
      v211.origin.double y = v134;
      v211.size.double width = v135;
      v211.size.double height = v136;
      CGFloat v140 = CGRectGetHeight(v211);
      *uint64_t v132 = v137;
      v132[1] = v138;
      v132[2] = v139;
      v132[3] = v140;
      v130(&t1, 0);
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
      CRRegister.wrappedValue.getter();
      *(void *)&v196.double a = *(void *)&t1.a | v170;
      CRRegister.wrappedValue.setter();
      outlined init with copy of AnnotationImporter.ImportedElement(v123, v178, (uint64_t (*)(void))type metadata accessor for Shape);
      (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v189, v190, v188);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      swift_retain();
      uint64_t v141 = v193;
      SharedTagged_9.init<A>(_:_:id:)();
      outlined destroy of AnnotationImporter.ImportedElement(v123, (uint64_t (*)(void))type metadata accessor for Shape);
      uint64_t v110 = type metadata accessor for AnnotationImporter.ImportedElement();
      swift_storeEnumTagMultiPayload();
      id v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56);
      uint64_t v64 = v141;
      goto LABEL_45;
    }
    id v113 = (void *)v112;
    id v114 = a1;
    uint64_t v42 = v182;
    static AnnotationImporter.translateSignatureAnnotation(_:)(v113, (uint64_t)v182);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v181 + 48))(v42, 1, v183) == 1)
    {

      uint64_t v68 = (uint64_t *)&demangling cache variable for type metadata for Signature?;
      goto LABEL_24;
    }
    uint64_t v142 = v172;
    outlined init with take of AnnotationImporter.ImportedElement((uint64_t)v42, v172, (uint64_t (*)(void))type metadata accessor for Signature);
    Signature.apply(_:)(&v197);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    double v143 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    CGPoint v145 = v144;
    CGFloat v146 = *v144;
    CGFloat v147 = v144[1];
    CGFloat v148 = v144[2];
    CGFloat v149 = v144[3];
    v212.origin.double x = *v144;
    v212.origin.double y = v147;
    v212.size.double width = v148;
    v212.size.double height = v149;
    CGFloat v150 = CGRectGetMinX(v212);
    v213.origin.double x = v146;
    v213.origin.double y = v147;
    v213.size.double width = v148;
    v213.size.double height = v149;
    double v151 = a7 + a7 + a8 - CGRectGetMaxY(v213);
    v214.origin.double x = v146;
    v214.origin.double y = v147;
    v214.size.double width = v148;
    v214.size.double height = v149;
    CGFloat v152 = CGRectGetWidth(v214);
    v215.origin.double x = v146;
    v215.origin.double y = v147;
    v215.size.double width = v148;
    v215.size.double height = v149;
    CGFloat v153 = CGRectGetHeight(v215);
    CGFloat *v145 = v150;
    v145[1] = v151;
    v145[2] = v152;
    v145[3] = v153;
    v143(&t1, 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    id v154 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
    *CGRect v155 = -*v155;
    v154(&t1, 0);
    outlined init with copy of AnnotationImporter.ImportedElement(v142, v171, (uint64_t (*)(void))type metadata accessor for Signature);
    (*(void (**)(char *, uint64_t, uint64_t))(v187 + 16))(v189, v190, v188);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    uint64_t v87 = v193;
    SharedTagged_9.init<A>(_:_:id:)();

    uint64_t v88 = type metadata accessor for Signature;
    uint64_t v89 = v142;
    goto LABEL_44;
  }
  uint64_t v91 = (void *)v90;
  id v92 = a1;
  id v93 = objc_msgSend(v91, sel_drawing);
  if (v93)
  {
    long long v94 = v93;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v95 = 0;
  }
  else
  {
    uint64_t v95 = 1;
  }
  uint64_t v116 = v184;
  uint64_t v115 = v185;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v185 + 56))(v31, v95, 1, v184);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v31, (uint64_t)v34, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v34, 1, v116) == 1)
  {

    uint64_t v68 = &demangling cache variable for type metadata for PKDrawing?;
    uint64_t v69 = (uint64_t)v34;
    goto LABEL_52;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
  swift_dynamicCast();
  id v119 = *(id *)&t1.a;
  uint64_t v156 = (void *)specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(v119);

  id v157 = v156;
  objc_msgSend(v91, sel_rectangle);
  double v158 = CGRectGetWidth(v216);
  objc_msgSend(v157, sel_bounds);
  CGFloat v159 = v158 / CGRectGetWidth(v217);
  objc_msgSend(v91, sel_rectangle);
  double v160 = CGRectGetHeight(v218);
  objc_msgSend(v157, sel_bounds);
  CGFloat v161 = CGRectGetHeight(v219);
  CGAffineTransformMakeScale(&t1, v159, v160 / v161);
  long long v162 = *(_OWORD *)&t1.a;
  long long v163 = *(_OWORD *)&t1.c;
  long long v164 = *(_OWORD *)&t1.tx;
  t1.double a = a;
  t1.double b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tdouble x = tx;
  t1.tdouble y = ty;
  *(_OWORD *)&v196.double a = v162;
  *(_OWORD *)&v196.CGFloat c = v163;
  *(_OWORD *)&v196.tdouble x = v164;
  CGAffineTransformConcat(&v195, &t1, &v196);
  CGAffineTransform t1 = v195;
  id v165 = objc_msgSend(v157, sel_drawingByApplyingTransform_, &t1);

  char v166 = v173;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v174, v166, v116);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  CGFloat v167 = t1.a;
  uint64_t v168 = *(void *)&t1.a + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v177, v168, v176);
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  swift_retain();
  uint64_t v169 = v193;
  Ref.init<A>(_:_:)();

  uint64_t v110 = type metadata accessor for AnnotationImporter.ImportedElement();
  swift_storeEnumTagMultiPayload();
  id v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56);
  uint64_t v64 = v169;
LABEL_45:
  uint64_t v111 = 0;
  uint64_t v62 = v110;
  return v63(v64, v111, 1, v62);
}

void static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(void *a1, uint64_t a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  uint64_t v83 = a3;
  uint64_t v87 = a2;
  uint64_t v12 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v71 = (uint64_t)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v66 - v18;
  uint64_t v85 = type metadata accessor for AnnotationImporter.ImportedElement();
  uint64_t v74 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  uint64_t v70 = (uint64_t)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v69 = (uint64_t)&v66 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v81 = (uint64_t)&v66 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v80 = (uint64_t)&v66 - v26;
  uint64_t v27 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v73 = (char *)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v31 = (char *)&v66 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v66 - v33;
  uint64_t v35 = type metadata accessor for CRKeyPath();
  uint64_t v36 = *(void *)(v35 - 8);
  double v37 = MEMORY[0x270FA5388](v35);
  id v39 = (char *)&v66 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v89 = MEMORY[0x263F8EE78];
  uint64_t v82 = (uint64_t)a1;
  id v40 = objc_msgSend(a1, sel_annotations, v37);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  unint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v41 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v42) {
      goto LABEL_3;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    return;
  }
  uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v42) {
    goto LABEL_34;
  }
LABEL_3:
  if (v42 >= 1)
  {
    uint64_t v43 = 0;
    unint64_t v88 = v41 & 0xC000000000000001;
    CGFloat v79 = (unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    id v72 = (void (**)(char *, char *, uint64_t))(v36 + 32);
    CGFloat v78 = (void (**)(char *, char *, uint64_t))(v36 + 16);
    id v77 = (void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
    long long v84 = (unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
    CGRect v75 = (void (**)(char *, uint64_t))(v36 + 8);
    uint64_t v68 = v16;
    unint64_t v76 = v41;
    uint64_t v86 = v42;
    id v67 = v19;
    while (1)
    {
      if (v88) {
        id v44 = (id)MEMORY[0x21054E050](v43, v41);
      }
      else {
        id v44 = *(id *)(v41 + 8 * v43 + 32);
      }
      uint64_t v45 = v44;
      type metadata accessor for CanvasElementPDFAnnotation();
      uint64_t v46 = swift_dynamicCastClass();
      if (v46)
      {
        uint64_t v47 = (PDFAnnotation *)v46;
        id v48 = v45;
        CanvasElementPDFAnnotation.decodePaperKitID()((uint64_t)v34);
        if ((*v79)(v34, 1, v35) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          id v49 = [(PDFAnnotation *)v47 pdfAnnotationUUID];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v42 = v86;
          CRKeyPath.init(_:)();
        }
        else
        {
          (*v72)(v39, v34, v35);
        }
        (*v78)(v31, v39, v35);
        (*v77)(v31, 0, 1, v35);
        uint64_t v50 = (uint64_t)v47 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
        swift_beginAccess();
        outlined assign with take of CRKeyPath?((uint64_t)v31, v50);
        swift_endAccess();
        CanvasElementPDFAnnotation.decodeImportedElement<A>(in:assetManager:from:)(v87, v83, v82, v19);
        uint64_t v51 = *v84;
        if ((*v84)(v19, 1, v85) != 1)
        {
          uint64_t v54 = v80;
          outlined init with take of AnnotationImporter.ImportedElement((uint64_t)v19, v80, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
          outlined init with copy of AnnotationImporter.ImportedElement(v54, v81, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
          swift_beginAccess();
          unint64_t v55 = v89;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v55 + 16) + 1, 1, v55);
          }
          unint64_t v57 = *(void *)(v55 + 16);
          unint64_t v56 = *(void *)(v55 + 24);
          if (v57 >= v56 >> 1) {
            unint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1, v55);
          }
          *(void *)(v55 + 16) = v57 + 1;
          outlined init with take of AnnotationImporter.ImportedElement(v81, v55+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(void *)(v74 + 72) * v57, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
          unint64_t v89 = v55;
          swift_endAccess();

          outlined destroy of AnnotationImporter.ImportedElement(v80, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
          (*v75)(v39, v35);
LABEL_22:
          unint64_t v41 = v76;
          uint64_t v42 = v86;
          goto LABEL_6;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
        if (!PDFAnnotation.shouldMirrorAsPDFAnnotationElement()())
        {
          uint64_t v58 = *(Class *)((char *)&v47->super.isa + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation);
          if (v58)
          {
            id v59 = v48;
            id v60 = v58;
            uint64_t v61 = (uint64_t)v68;
            static AnnotationImporter.addAnnotation<A>(_:from:in:id:scale:mediaBox:)(v60, v47, v87, (uint64_t)v39, (uint64_t)v68, a4, a6, a8);

            if (v51((char *)v61, 1, v85) == 1)
            {
              (*v75)(v39, v35);

              outlined destroy of StocksKitCurrencyCache.Provider?(v61, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
            }
            else
            {
              uint64_t v62 = v69;
              outlined init with take of AnnotationImporter.ImportedElement(v61, v69, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
              outlined init with copy of AnnotationImporter.ImportedElement(v62, v70, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
              swift_beginAccess();
              unint64_t v63 = v89;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v63 + 16) + 1, 1, v63);
              }
              unint64_t v65 = *(void *)(v63 + 16);
              unint64_t v64 = *(void *)(v63 + 24);
              if (v65 >= v64 >> 1) {
                unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v63);
              }
              *(void *)(v63 + 16) = v65 + 1;
              outlined init with take of AnnotationImporter.ImportedElement(v70, v63+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(void *)(v74 + 72) * v65, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
              unint64_t v89 = v63;
              swift_endAccess();

              outlined destroy of AnnotationImporter.ImportedElement(v69, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
              (*v75)(v39, v35);
            }
            unint64_t v41 = v76;
            uint64_t v42 = v86;
            uint64_t v19 = v67;
            goto LABEL_6;
          }
          (*v75)(v39, v35);

          goto LABEL_22;
        }
        id v52 = v48;
        uint64_t v53 = v71;
        PDFAnnotationElement.init(_:)(v47, v71);
        specialized addPDFAnnotationElement #1 <A>(_:) in static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(v53, v87, (uint64_t)v39, &v89);

        outlined destroy of AnnotationImporter.ImportedElement(v53, (uint64_t (*)(void))type metadata accessor for PDFAnnotationElement);
        (*v75)(v39, v35);
        unint64_t v41 = v76;
      }
      else
      {
      }
LABEL_6:
      if (v42 == ++v43) {
        goto LABEL_34;
      }
    }
  }
  __break(1u);
}

uint64_t specialized addPDFAnnotationElement #1 <A>(_:) in static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v34 = a4;
  uint64_t v32 = a2;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for AnnotationImporter.ImportedElement();
  uint64_t v35 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v30 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x270FA5388](v29);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnnotationImporter.ImportedElement(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PDFAnnotationElement);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v19(v12, a3, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  uint64_t v20 = v18;
  uint64_t v21 = v34;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
  char v36 = 8;
  uint64_t v22 = a3;
  uint64_t v23 = (uint64_t)v30;
  v19(v31, v22, v6);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  unint64_t v24 = *v21;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v21 = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1, v24);
    *uint64_t v21 = v24;
  }
  unint64_t v27 = *(void *)(v24 + 16);
  unint64_t v26 = *(void *)(v24 + 24);
  if (v27 >= v26 >> 1)
  {
    unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v24);
    *uint64_t v21 = v24;
  }
  *(void *)(v24 + 16) = v27 + 1;
  outlined init with take of AnnotationImporter.ImportedElement(v23, v24+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v27, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
  return swift_endAccess();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  char v36;

  uint64_t v34 = a4;
  uint64_t v32 = a2;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for AnnotationImporter.ImportedElement();
  uint64_t v35 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v30 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x270FA5388](v29);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s8PaperKit13CRAssetOrDataOWOcTm_0(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PDFAnnotationElement);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v19(v12, a3, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  uint64_t v20 = v18;
  uint64_t v21 = v34;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
  char v36 = 8;
  uint64_t v22 = a3;
  uint64_t v23 = (uint64_t)v30;
  v19(v31, v22, v6);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  unint64_t v24 = *v21;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v21 = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1, v24, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
    *uint64_t v21 = v24;
  }
  unint64_t v27 = *(void *)(v24 + 16);
  unint64_t v26 = *(void *)(v24 + 24);
  if (v27 >= v26 >> 1)
  {
    unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v24, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
    *uint64_t v21 = v24;
  }
  *(void *)(v24 + 16) = v27 + 1;
  outlined init with take of Image(v23, v24+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v27, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
  return swift_endAccess();
}

uint64_t ContainerCanvasElement.addImportedElement<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a1;
  v39[1] = a2;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v41 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v42 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v40);
  uint64_t v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v39 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v46 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v47 = (char *)v39 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for AnnotationImporter.ImportedElement();
  MEMORY[0x270FA5388](v22);
  unint64_t v24 = (char *)v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnnotationImporter.ImportedElement(v45, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = v46;
    unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
    v26(v47, v24, v13);
    uint64_t v27 = v44;
    (*(void (**)(uint64_t, uint64_t))(v44 + 48))(v48, v44);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v12, 1, v13) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      uint64_t v29 = v46;
      uint64_t v28 = v47;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v9, v47, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v9, 0, 1, v13);
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 56))(v9, v48, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v28, v13);
    }
    else
    {
      v26(v15, v12, v13);
      uint64_t v32 = (uint64_t)v6;
      uint64_t v33 = v47;
      Ref.subscript.getter();
      uint64_t v34 = v41;
      char v36 = v42;
      uint64_t v35 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v32 + *(int *)(v40 + 20), v43);
      outlined destroy of AnnotationImporter.ImportedElement(v32, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      double v37 = (void (*)(unsigned char *, void))Ref.subscript.modify();
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      CROrderedSet.append<A>(contentsOf:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v35);
      v37(v49, 0);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v46 + 8);
      v38(v15, v13);
      return ((uint64_t (*)(char *, uint64_t))v38)(v33, v13);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v24, v18);
    uint64_t v31 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t))(v44 + 88))(v49, v48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    CROrderedSet.append(_:)();
    v31(v49, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
}

uint64_t ContainerCanvasElement.addAnnotation<A>(_:from:in:id:scale:mediaBox:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CGFloat a7, double a8, double a9, double a10, double a11)
{
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AnnotationImporter.ImportedElement();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  unint64_t v26 = (char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnnotationImporter.addAnnotation<A>(_:from:in:id:scale:mediaBox:)(a1, a2, a3, a4, (uint64_t)v22, a7, a9, a11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  }
  outlined init with take of AnnotationImporter.ImportedElement((uint64_t)v22, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
  ContainerCanvasElement.addImportedElement<A>(_:in:)((uint64_t)v26, a3, a5, a6);
  return outlined destroy of AnnotationImporter.ImportedElement((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
}

void specialized ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(CGFloat a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v134 = a8;
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CGFloat v124 = *(void (***)(char *, uint64_t))(v112 - 8);
  MEMORY[0x270FA5388](v112);
  id v113 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v117);
  uint64_t v116 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v115 = (uint64_t)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  id v114 = (char *)&v96 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v122 = (char *)&v96 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v120 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v96 - v23;
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v25 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  id v119 = (char *)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  CGFloat v127 = (char *)&v96 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v129 = (char *)&v96 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v130 = (char *)&v96 - v32;
  MEMORY[0x270FA5388](v33);
  uint64_t v137 = (uint64_t)&v96 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v133 = (uint64_t)&v96 - v36;
  uint64_t v37 = type metadata accessor for AnnotationImporter.ImportedElement();
  CGFloat v135 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v123 = (uint64_t)&v96 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v131 = (uint64_t)&v96 - v40;
  uint64_t v132 = type metadata accessor for CRKeyPath();
  uint64_t v111 = *(void *)(v132 - 8);
  MEMORY[0x270FA5388](v132);
  CGFloat v136 = (char *)&v96 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F53FB0]), sel_init);
  id v43 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AKControllerDelegateHelper()), sel_init);
  id v44 = objc_msgSend(self, sel_controllerWithDelegate_, v43);

  if (!v44)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  unsigned int v46 = objc_msgSend(v42, sel_readAnnotationsFromArchivedModelData_toController_, isa, v44);

  if (!v46)
  {
LABEL_45:
    objc_msgSend(v44, sel_teardown);

    return;
  }
  id v47 = objc_msgSend(v44, sel_modelController);
  if (v47)
  {
    uint64_t v48 = v47;
    id v49 = objc_msgSend(v47, sel_pageModelControllerForPage_, 0);

    if (v49)
    {
      id v50 = objc_msgSend(v49, sel_annotations);
      if (v50)
      {
        uint64_t v51 = v50;
        uint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v53 = specialized _arrayConditionalCast<A, B>(_:)(v52, (unint64_t *)&lazy cache variable for type metadata for AKAnnotation);
        swift_bridgeObjectRelease();
        if (v53)
        {
          id v118 = v24;
          unint64_t v128 = v53;
          if (v53 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
          }
          else
          {
            uint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          uint64_t v55 = (uint64_t)v129;
          uint64_t v56 = (uint64_t)v130;
          if (!v54)
          {

LABEL_48:
            swift_bridgeObjectRelease_n();
            objc_msgSend(v44, sel_teardown);

            return;
          }
          uint64_t v57 = v54;
          id v97 = v49;
          id v98 = v44;
          id v99 = v42;
          if (v54 >= 1)
          {
            uint64_t v58 = 0;
            unint64_t v125 = v128 & 0xC000000000000001;
            v135 += 6;
            uint64_t v110 = (void (**)(char *, uint64_t, uint64_t))(v25 + 32);
            double v109 = (void (**)(char *, uint64_t))(v25 + 8);
            double v106 = (void (**)(char *, uint64_t, uint64_t))(v20 + 32);
            CGFloat v105 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
            CGFloat v103 = (void (**)(char *, uint64_t, uint64_t))(v124 + 2);
            CGFloat v102 = v124 + 1;
            CGFloat v104 = (void (**)(char *, uint64_t))(v20 + 8);
            CGFloat v101 = (void (**)(char *, char *, uint64_t))(v20 + 16);
            double v100 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
            CGFloat v124 = (void (**)(char *, uint64_t))(v111 + 8);
            uint64_t v59 = (uint64_t)v122;
            uint64_t v111 = v19;
            uint64_t v60 = v121;
            uint64_t v107 = v37;
            uint64_t v126 = v57;
            do
            {
              if (v125) {
                id v61 = (id)MEMORY[0x21054E050](v58, v128);
              }
              else {
                id v61 = *(id *)(v128 + 8 * v58 + 32);
              }
              uint64_t v62 = v61;
              uint64_t v63 = (uint64_t)v136;
              static CRKeyPath.unique.getter();
              uint64_t v64 = v137;
              specialized static AnnotationImporter.importElement<A>(_:from:in:id:scale:mediaBox:)(v62, 0, v134, v63, v137, a1, a3, a5);
              outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v64, v56, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
              unint64_t v65 = *v135;
              if ((*v135)(v56, 1, v37) != 1)
              {
                outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v56, v55, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
                if (swift_getEnumCaseMultiPayload() == 1)
                {
                  outlined destroy of AnnotationImporter.ImportedElement(v55, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
                }
                else
                {
                  (*v110)(v127, v55, v60);
                  self;
                  if (swift_dynamicCastObjCClass()
                    || (self, swift_dynamicCastObjCClass())
                    || (self, swift_dynamicCastObjCClass())
                    || (self, swift_dynamicCastObjCClass()))
                  {
                    BOOL v66 = 1;
                  }
                  else
                  {
                    self;
                    BOOL v66 = swift_dynamicCastObjCClass() != 0;
                  }
                  self;
                  if (swift_dynamicCastObjCClass()
                    || ((self, !swift_dynamicCastObjCClass()) ? (BOOL v67 = v66) : (BOOL v67 = 0), !v67))
                  {
                    uint64_t v68 = qword_26C14D710;
                    if ((unk_26C14D718 & ~qword_26C14D710) != 0) {
                      uint64_t v69 = unk_26C14D718;
                    }
                    else {
                      uint64_t v69 = 0;
                    }
                    CGFloat v108 = (void (*)(char *, void))SharedTagged_9.subscript.modify();
                    uint64_t v70 = v62;
                    uint64_t v72 = *(void *)(v71 + 24);
                    uint64_t v73 = *(void *)(v71 + 32);
                    __swift_mutable_project_boxed_opaque_existential_1(v71, v72);
                    uint64_t v74 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 80);
                    uint64_t v75 = v72;
                    uint64_t v60 = v121;
                    uint64_t v76 = v73;
                    uint64_t v62 = v70;
                    uint64_t v59 = (uint64_t)v122;
                    id v77 = (void (*)(char *, void))v74(v138, v75, v76);
                    uint64_t v55 = (uint64_t)v129;
                    *v78 |= v69 | v68;
                    v77(v138, 0);
                    v108(v139, 0);
                  }
                  (*v109)(v127, v60);
                  uint64_t v56 = (uint64_t)v130;
                  uint64_t v37 = v107;
                }
              }
              CGFloat v79 = v62;
              uint64_t v80 = v37;
              uint64_t v81 = v133;
              outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v137, v133, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
              outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
              if (v65(v81, 1, v80) == 1)
              {
                outlined destroy of StocksKitCurrencyCache.Provider?(v81, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
                uint64_t v37 = v80;
              }
              else
              {
                uint64_t v82 = v131;
                outlined init with take of AnnotationImporter.ImportedElement(v81, v131, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
                uint64_t v83 = v123;
                outlined init with copy of AnnotationImporter.ImportedElement(v82, v123, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
                EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
                uint64_t v85 = v111;
                uint64_t v37 = v80;
                if (EnumCaseMultiPayload == 1)
                {
                  uint64_t v86 = *v106;
                  uint64_t v87 = v118;
                  (*v106)(v118, v83, v111);
                  type metadata accessor for Image();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
                  CRRegister.wrappedValue.getter();
                  if ((*v105)(v59, 1, v85) == 1)
                  {
                    outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
                    uint64_t v88 = (uint64_t)v114;
                    (*v101)(v114, v87, v85);
                    (*v100)(v88, 0, 1, v85);
                    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v88, v115, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
                    uint64_t v59 = (uint64_t)v122;
                    CRRegister.wrappedValue.setter();
                    outlined destroy of StocksKitCurrencyCache.Provider?(v88, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
                    (*v104)(v87, v85);
                  }
                  else
                  {
                    v86(v120, v59, v85);
                    uint64_t v90 = (uint64_t)v116;
                    Ref.subscript.getter();
                    uint64_t v91 = v113;
                    uint64_t v92 = v112;
                    (*v103)(v113, v90 + *(int *)(v117 + 20), v112);
                    outlined destroy of AnnotationImporter.ImportedElement(v90, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
                    id v93 = v120;
                    long long v94 = (void (*)(char *, void))Ref.subscript.modify();
                    uint64_t v59 = (uint64_t)v122;
                    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
                    CROrderedSet.append<A>(contentsOf:)();
                    (*v102)(v91, v92);
                    v94(v139, 0);
                    uint64_t v95 = *v104;
                    (*v104)(v93, v85);
                    v95(v118, v85);
                  }
                  uint64_t v60 = v121;
                }
                else
                {
                  unint64_t v89 = v119;
                  (*v110)(v119, v83, v60);
                  type metadata accessor for Image();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
                  CROrderedSet.append(_:)();
                  (*v109)(v89, v60);
                }
                outlined destroy of AnnotationImporter.ImportedElement(v131, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
                uint64_t v55 = (uint64_t)v129;
                uint64_t v56 = (uint64_t)v130;
              }
              ++v58;
              (*v124)(v136, v132);
            }
            while (v126 != v58);

            id v42 = v99;
            id v44 = v98;
            goto LABEL_48;
          }
          __break(1u);
          goto LABEL_51;
        }
      }
    }
    goto LABEL_45;
  }
LABEL_52:
  __break(1u);
}

void ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(CGFloat a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F53FB0]), sel_init);
  id v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AKControllerDelegateHelper()), sel_init);
  id v20 = objc_msgSend(self, sel_controllerWithDelegate_, v19);

  if (!v20)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  unsigned int v22 = objc_msgSend(v18, sel_readAnnotationsFromArchivedModelData_toController_, isa, v20);

  if (!v22) {
    goto LABEL_16;
  }
  id v23 = objc_msgSend(v20, sel_modelController);
  if (v23)
  {
    uint64_t v24 = v23;
    id v25 = objc_msgSend(v23, sel_pageModelControllerForPage_, 0);

    if (v25)
    {
      id v26 = objc_msgSend(v25, sel_annotations);
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v29 = specialized _arrayConditionalCast<A, B>(_:)(v28, (unint64_t *)&lazy cache variable for type metadata for AKAnnotation);
        swift_bridgeObjectRelease();
        if (v29)
        {
          uint64_t v34 = v25;
          if (v29 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
            if (v30) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v30)
            {
LABEL_9:
              if (v30 >= 1)
              {
                uint64_t v31 = 0;
                do
                {
                  if ((v29 & 0xC000000000000001) != 0) {
                    id v32 = (id)MEMORY[0x21054E050](v31, v29);
                  }
                  else {
                    id v32 = *(id *)(v29 + 8 * v31 + 32);
                  }
                  uint64_t v33 = v32;
                  ++v31;
                  uint64_t v36 = v32;
                  closure #1 in ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(&v36, a1, a2, a3, a4, a5, v35, a8, a9, a10);
                }
                while (v30 != v31);
                goto LABEL_18;
              }
              __break(1u);
              goto LABEL_20;
            }
          }
LABEL_18:

          swift_bridgeObjectRelease_n();
          goto LABEL_16;
        }
      }
    }
LABEL_16:
    objc_msgSend(v20, sel_teardown);

    return;
  }
LABEL_21:
  __break(1u);
}

uint64_t type metadata accessor for AKControllerDelegateHelper()
{
  return self;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v28 = (char *)&v24 - v10;
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v30 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
  uint64_t v12 = v30;
  if (v11)
  {
    uint64_t v13 = a1 + 32;
    uint64_t v14 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    uint64_t v15 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v26 = v6;
    uint64_t v27 = MEMORY[0x263F8EE58] + 8;
    id v25 = v8;
    while (1)
    {
      outlined init with copy of Any(v13, (uint64_t)v29);
      int v16 = swift_dynamicCast();
      uint64_t v17 = *v14;
      if (!v16) {
        break;
      }
      v17(v4, 0, 1, v5);
      id v18 = *v15;
      id v19 = v28;
      (*v15)(v28, v4, v5);
      v18(v8, v19, v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        uint64_t v12 = v30;
      }
      unint64_t v21 = *(void *)(v12 + 16);
      unint64_t v20 = *(void *)(v12 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v12 = v30;
      }
      *(void *)(v12 + 16) = v21 + 1;
      unint64_t v22 = v12
          + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))
          + *(void *)(v26 + 72) * v21;
      uint64_t v8 = v25;
      v18((char *)v22, v25, v5);
      v13 += 32;
      if (!--v11) {
        return v12;
      }
    }
    v17(v4, 1, 1, v5);
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
    return 0;
  }
  return v12;
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v4) {
    return v8;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v7);
    type metadata accessor for NSObject(0, a2);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v4) {
      return v8;
    }
  }
  swift_release();

  return 0;
}

uint64_t closure #1 in ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(void **a1, CGFloat a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v19 = type metadata accessor for CRKeyPath();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  unint64_t v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = *a1;
  static CRKeyPath.unique.getter();
  ContainerCanvasElement.addAnnotation<A>(_:from:in:id:scale:mediaBox:)(v23, 0, a8, (uint64_t)v22, a9, a10, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
}

uint64_t Capsule<>.importAnnotations(from:scale:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  Capsule.callAsFunction<A>(_:)();
  return v1;
}

uint64_t closure #1 in Capsule<>.importAnnotations(from:scale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>, CGFloat a5@<D0>)
{
  uint64_t v10 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  Capsule.Ref<>.root.getter();
  Image.pdfContentsBounds.getter();
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  outlined destroy of AnnotationImporter.ImportedElement((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Image);
  uint64_t v21 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  specialized ContainerCanvasElement.importAnnotations<A>(from:scale:mediaBox:in:)(a5, v14, v16, v18, v20, a2, a3, a1);
  char v23 = v22;
  uint64_t result = v21(v25, 0);
  *a4 = v23 & 1;
  return result;
}

uint64_t partial apply for closure #1 in Capsule<>.importAnnotations(from:scale:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in Capsule<>.importAnnotations(from:scale:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2, *(CGFloat *)(v2 + 32));
}

ValueMetadata *type metadata accessor for AnnotationImporter()
{
  return &type metadata for AnnotationImporter;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnnotationImporter.ImportedElement(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    }
    else {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnnotationImporter.ImportedElement(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v2 = &demangling cache variable for type metadata for Ref<PKDrawingStruct>;
  }
  else {
    uint64_t v2 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>;
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(a1, v3);
}

uint64_t initializeWithCopy for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = &demangling cache variable for type metadata for Ref<PKDrawingStruct>;
  }
  else {
    uint64_t v4 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>;
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AnnotationImporter.ImportedElement(a1, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = &demangling cache variable for type metadata for Ref<PKDrawingStruct>;
    }
    else {
      uint64_t v4 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>;
    }
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for AnnotationImporter.ImportedElement()
{
  uint64_t result = type metadata singleton initialization cache for AnnotationImporter.ImportedElement;
  if (!type metadata singleton initialization cache for AnnotationImporter.ImportedElement) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t initializeWithTake for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = &demangling cache variable for type metadata for Ref<PKDrawingStruct>;
  }
  else {
    uint64_t v4 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>;
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AnnotationImporter.ImportedElement(a1, (uint64_t (*)(void))type metadata accessor for AnnotationImporter.ImportedElement);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = &demangling cache variable for type metadata for Ref<PKDrawingStruct>;
    }
    else {
      uint64_t v4 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>;
    }
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for AnnotationImporter.ImportedElement()
{
  return swift_storeEnumTagMultiPayload();
}

void type metadata completion function for AnnotationImporter.ImportedElement()
{
  type metadata accessor for SharedTagged_9<TaggedCanvasElement>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Ref<PKDrawingStruct>();
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void type metadata accessor for SharedTagged_9<TaggedCanvasElement>()
{
  if (!lazy cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>)
  {
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    unint64_t v0 = type metadata accessor for SharedTagged_9();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    }
  }
}

void type metadata accessor for Ref<PKDrawingStruct>()
{
  if (!lazy cache variable for type metadata for Ref<PKDrawingStruct>)
  {
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    unint64_t v0 = type metadata accessor for Ref();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Ref<PKDrawingStruct>);
    }
  }
}

void protocol witness for PaperPage.importAnnotations<A>(from:scale:mediaBox:in:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void protocol witness for PaperPage.importAnnotations<A>(from:scale:mediaBox:in:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void protocol witness for PaperPage.importAnnotations<A>(from:scale:mediaBox:in:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t outlined assign with take of CRKeyPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of AnnotationImporter.ImportedElement(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle and conformance PlainStrokeStyle);
  }
  return result;
}

uint64_t sub_20C3C8A60()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C3C8A70()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t sub_20C3C8A98()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C3C8AA8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C3C8AB8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C3C8AC8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t outlined destroy of AnnotationImporter.ImportedElement(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata completion function for CanvasDropDelegate()
{
  return swift_initClassMetadata2();
}

void CanvasDropDelegate.canvas.getter()
{
}

uint64_t @objc CanvasDropDelegate.dropInteraction(_:canHandle:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  swift_unknownObjectRetain();
  id v7 = a1;
  char v8 = specialized CanvasDropDelegate.dropInteraction(_:canHandle:)(a4);

  swift_unknownObjectRelease();
  return v8 & 1;
}

id @objc CanvasDropDelegate.dropInteraction(_:sessionDidUpdate:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  swift_unknownObjectRetain();
  id v7 = a1;
  id v8 = specialized CanvasDropDelegate.dropInteraction(_:sessionDidUpdate:)(a4);

  swift_unknownObjectRelease();
  return v8;
}

void @objc CanvasDropDelegate.dropInteraction(_:performDrop:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  swift_unknownObjectRetain();
  id v7 = a1;
  specialized CanvasDropDelegate.dropInteraction(_:performDrop:)(a4, (void (*)(uint64_t))specialized Canvas.dropInteraction(_:performDrop:));

  swift_unknownObjectRelease();
}

id @objc CanvasDropDelegate.dropInteraction(_:previewForDropping:withDefault:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = a1;
  uint64_t v12 = (void *)specialized CanvasDropDelegate.dropInteraction(_:previewForDropping:withDefault:)(v9, v10);

  return v12;
}

uint64_t @objc CanvasDropDelegate._dropInteraction(_:delayedPreviewProviderForDropping:previewProvider:)(void *a1, int a2, void *a3, void *a4, void *aBlock)
{
  id v8 = _Block_copy(aBlock);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  id v10 = a3;
  id v11 = a4;
  id v12 = a1;
  specialized CanvasDropDelegate._dropInteraction(_:delayedPreviewProviderForDropping:previewProvider:)(v11, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned UITargetedDragPreview) -> (), v9);

  return swift_release();
}

void @objc CanvasDropDelegate.dropInteraction(_:item:willAnimateDropWith:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  swift_unknownObjectRetain();
  id v10 = a1;
  specialized CanvasDropDelegate.dropInteraction(_:item:willAnimateDropWith:)(v9, a5);

  swift_unknownObjectRelease();
}

void @objc CanvasDropDelegate.dropInteraction(_:sessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc CanvasDropDelegate.dropInteraction(_:sessionDidEnd:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc CanvasDropDelegate.dropInteraction(_:sessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v7 = a3;
  swift_unknownObjectRetain();
  id v8 = a1;
  specialized CanvasDropDelegate.dropInteraction(_:performDrop:)((uint64_t)v7, a5);

  swift_unknownObjectRelease();
}

id @objc CanvasDropDelegate._dropInteraction(_:dataOwnerFor:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  swift_unknownObjectRetain();
  id v5 = a1;
  id v6 = specialized CanvasDropDelegate._dropInteraction(_:dataOwnerFor:)();

  swift_unknownObjectRelease();
  return v6;
}

void @objc CanvasDropDelegate.init()()
{
}

id CanvasDropDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasDropDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc CanvasDropDelegate.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasDropDelegate()
{
  return __swift_instantiateGenericMetadata();
}

id specialized CanvasDropDelegate.init(canvas:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasDropDelegate();
  return objc_msgSendSuper2(&v2, sel_init);
}

id specialized CanvasDropDelegate.__allocating_init(canvas:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for CanvasDropDelegate());
  return specialized CanvasDropDelegate.init(canvas:)();
}

uint64_t specialized CanvasDropDelegate.dropInteraction(_:canHandle:)(void *a1)
{
  uint64_t result = MEMORY[0x210550400](v1 + direct field offset for CanvasDropDelegate.canvas);
  if (result)
  {
    id v4 = (void *)result;
    char v5 = specialized Canvas.dropInteraction(_:canHandle:)(a1);

    return v5 & 1;
  }
  return result;
}

id specialized CanvasDropDelegate.dropInteraction(_:sessionDidUpdate:)(void *a1)
{
  uint64_t v3 = MEMORY[0x210550400](v1 + direct field offset for CanvasDropDelegate.canvas);
  if (v3)
  {
    id v4 = (void *)v3;
    id v5 = specialized Canvas.dropInteraction(_:sessionDidUpdate:)(a1);

    return v5;
  }
  else
  {
    id v7 = objc_allocWithZone(MEMORY[0x263F82700]);
    return objc_msgSend(v7, sel_initWithDropOperation_, 1);
  }
}

uint64_t specialized CanvasDropDelegate.dropInteraction(_:previewForDropping:withDefault:)(void *a1, void *a2)
{
  uint64_t result = MEMORY[0x210550400](v2 + direct field offset for CanvasDropDelegate.canvas);
  if (result)
  {
    id v6 = (void *)result;
    id v7 = specialized Canvas.dropInteraction(_:previewForDropping:withDefault:)(a1, a2);

    return (uint64_t)v7;
  }
  return result;
}

void specialized CanvasDropDelegate._dropInteraction(_:delayedPreviewProviderForDropping:previewProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = MEMORY[0x210550400](v3 + direct field offset for CanvasDropDelegate.canvas);
  if (v7)
  {
    id v8 = (id)v7;
    specialized Canvas._dropInteraction(_:delayedPreviewProviderForDropping:previewProvider:)(a1, a2, a3);
  }
}

void specialized CanvasDropDelegate.dropInteraction(_:item:willAnimateDropWith:)(void *a1, void *a2)
{
  uint64_t v5 = MEMORY[0x210550400](v2 + direct field offset for CanvasDropDelegate.canvas);
  if (v5)
  {
    id v6 = (id)v5;
    specialized Canvas.dropInteraction(_:item:willAnimateDropWith:)(a1, a2);
  }
}

void specialized CanvasDropDelegate.dropInteraction(_:performDrop:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v5 = MEMORY[0x210550400](v2 + direct field offset for CanvasDropDelegate.canvas);
  if (v5)
  {
    id v6 = (id)v5;
    a2(a1);
  }
}

id specialized CanvasDropDelegate._dropInteraction(_:dataOwnerFor:)()
{
  id result = (id)MEMORY[0x210550400](v0 + direct field offset for CanvasDropDelegate.canvas);
  if (result)
  {
    uint64_t v2 = result;
    id v3 = objc_msgSend(result, sel__dropDataOwner);

    return v3;
  }
  return result;
}

void specialized CanvasDropDelegate.init()()
{
}

uint64_t sub_20C3C9598()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned UITargetedDragPreview) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

id CanvasGenerationToolController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasGenerationToolController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasGenerationToolController()
{
  return self;
}

id one-time initialization function for symbolConfiguration()
{
  id result = objc_msgSend(self, sel_configurationWithScale_, 3);
  static TextToolListItemView.symbolConfiguration = (uint64_t)result;
  return result;
}

char *TextToolListItemView.init(title:image:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabel;
  id v9 = objc_allocWithZone(MEMORY[0x263F828E0]);
  id v10 = v4;
  *(void *)&v4[v8] = objc_msgSend(v9, sel_init);
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageView;
  *(void *)&v10[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_init);
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackView;
  *(void *)&v10[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_contentButton] = 0;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewMargin] = 0x4030000000000000;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewSpacing] = 0x4030000000000000;
  uint64_t v13 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabelTextColor;
  if (one-time initialization token for defaultTintColor != -1) {
    swift_once();
  }
  double v14 = (void *)static TextToolListItemView.defaultTintColor;
  *(void *)&v10[v13] = static TextToolListItemView.defaultTintColor;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageViewTintColor] = v14;
  id v15 = v14;

  v67.receiver = v10;
  v67.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v67, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v17 = objc_allocWithZone(MEMORY[0x263F82A70]);
  double v18 = (char *)v16;
  id v19 = objc_msgSend(v17, sel_initWithDelegate_, v18);
  objc_msgSend(v18, sel_addInteraction_, v19);

  uint64_t v20 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackView;
  uint64_t v21 = *(void **)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackView];
  objc_msgSend(v21, sel_setAxis_, 0);
  objc_msgSend(v21, sel_setDistribution_, 0);
  objc_msgSend(v21, sel_setAlignment_, 3);
  objc_msgSend(v21, sel_setSpacing_, *(double *)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewSpacing]);
  objc_msgSend(v21, sel_setUserInteractionEnabled_, 0);
  objc_msgSend(v21, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  char v22 = *(void **)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_contentButton];
  uint64_t v64 = a3;
  uint64_t v66 = a2;
  if (v22)
  {
    char v23 = *(char **)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_contentButton];
  }
  else
  {
    char v23 = v18;
    char v22 = 0;
  }
  id v24 = v22;
  objc_msgSend(v23, sel_addSubview_, v21);

  uint64_t v25 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_20C8344C0;
  id v27 = objc_msgSend(*(id *)&v18[v20], sel_topAnchor);
  id v28 = objc_msgSend(v18, sel_topAnchor);
  id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

  *(void *)(v26 + 32) = v29;
  id v30 = objc_msgSend(*(id *)&v18[v20], sel_leadingAnchor);
  id v31 = objc_msgSend(v18, sel_leadingAnchor);
  uint64_t v32 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewMargin;
  id v33 = objc_msgSend(v30, sel_constraintEqualToAnchor_constant_, v31, *(double *)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewMargin]);

  *(void *)(v26 + 40) = v33;
  id v34 = objc_msgSend(*(id *)&v18[v20], sel_bottomAnchor);
  id v35 = objc_msgSend(v18, sel_bottomAnchor);
  id v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v35);

  *(void *)(v26 + 48) = v36;
  id v37 = objc_msgSend(*(id *)&v18[v20], sel_trailingAnchor);
  id v38 = objc_msgSend(v18, sel_trailingAnchor);
  id v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_constant_, v38, -*(double *)&v18[v32]);

  *(void *)(v26 + 56) = v39;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v25, sel_activateConstraints_, isa);

  uint64_t v41 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabel;
  id v42 = *(id *)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabel];
  id v43 = (void *)MEMORY[0x21054D080](a1, v66);
  swift_bridgeObjectRelease();
  objc_msgSend(v42, sel_setText_, v43);

  id v44 = *(void **)&v18[v41];
  objc_msgSend(v44, sel_setTextColor_, *(void *)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabelTextColor]);
  uint64_t v45 = *MEMORY[0x263F83570];
  double v46 = *MEMORY[0x263F81838];
  id v47 = (void *)*MEMORY[0x263F83470];
  uint64_t v48 = self;
  id v49 = v44;
  id v50 = v47;
  id v51 = objc_msgSend(v48, sel_traitCollectionWithPreferredContentSizeCategory_, v50);
  id result = (char *)objc_msgSend(self, sel__preferredFontForTextStyle_weight_, v45, v46);
  if (result)
  {
    unint64_t v53 = result;
    id v54 = objc_msgSend(result, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v51);

    objc_msgSend(v49, sel_setFont_, v54);
    uint64_t v55 = *(void **)&v18[v41];
    objc_msgSend(v55, sel_setAdjustsFontForContentSizeCategory_, 0);
    objc_msgSend(v55, sel_setNumberOfLines_, 0);
    objc_msgSend(v55, sel_setLineBreakMode_, 0);
    objc_msgSend(v55, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    uint64_t v56 = *(void **)&v18[v20];
    objc_msgSend(v56, sel_addArrangedSubview_, v55);
    uint64_t v57 = *(void **)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageView];
    objc_msgSend(v57, sel_setImage_, v64);
    objc_msgSend(v57, sel_setTintColor_, *(void *)&v18[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageViewTintColor]);
    LODWORD(v58) = 1148846080;
    objc_msgSend(v57, sel_setContentHuggingPriority_forAxis_, 0, v58);
    LODWORD(v59) = 1148846080;
    objc_msgSend(v57, sel_setContentHuggingPriority_forAxis_, 1, v59);
    LODWORD(v60) = 1148846080;
    objc_msgSend(v57, sel_setContentCompressionResistancePriority_forAxis_, 0, v60);
    LODWORD(v61) = 1148846080;
    objc_msgSend(v57, sel_setContentCompressionResistancePriority_forAxis_, 1, v61);
    objc_msgSend(v57, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v62 = v56;
    id v63 = v57;
    objc_msgSend(v62, sel_addArrangedSubview_, v63);

    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id one-time initialization function for defaultTintColor()
{
  id result = objc_msgSend(self, sel_labelColor);
  static TextToolListItemView.defaultTintColor = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for TextToolListItemView()
{
  return self;
}

char *specialized static TextToolListItemView.newDescriptionListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v22._uint64_t countAndFlagsBits = 0xD000000000000035;
  v22._object = (void *)0x800000020C852F00;
  v4._object = (void *)0x800000020C852EE0;
  v4._uint64_t countAndFlagsBits = 0xD000000000000011;
  v5.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1) {
    swift_once();
  }
  id v8 = (id)static TextToolListItemView.symbolConfiguration;
  id v9 = (void *)MEMORY[0x21054D080](0x6269737365636361, 0xED00007974696C69);
  id v10 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  id v11 = v10;
  uint64_t v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  uint64_t v13 = v21;
  if (v21)
  {
    double v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v15 = *(void *)(v13 - 8);
    MEMORY[0x270FA5388](v14);
    id v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    uint64_t v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newAddStickerListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v22._object = (void *)0x800000020C852F40;
  v4._uint64_t countAndFlagsBits = 0x6369745320646441;
  v4._object = (void *)0xEB0000000072656BLL;
  v5.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0xD000000000000034;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1) {
    swift_once();
  }
  id v8 = (id)static TextToolListItemView.symbolConfiguration;
  id v9 = (void *)MEMORY[0x21054D080](0x72656B63697473, 0xE700000000000000);
  id v10 = objc_msgSend(self, sel__systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  id v11 = v10;
  uint64_t v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  uint64_t v13 = v21;
  if (v21)
  {
    double v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v15 = *(void *)(v13 - 8);
    MEMORY[0x270FA5388](v14);
    id v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    uint64_t v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newAddTextBoxListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v22._uint64_t countAndFlagsBits = 0xD000000000000035;
  v22._object = (void *)0x800000020C8530F0;
  v4._uint64_t countAndFlagsBits = 0x7478655420646441;
  v4._object = (void *)0xE800000000000000;
  v5.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1) {
    swift_once();
  }
  id v8 = (id)static TextToolListItemView.symbolConfiguration;
  id v9 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C853130);
  id v10 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  id v11 = v10;
  uint64_t v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  uint64_t v13 = v21;
  if (v21)
  {
    double v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v15 = *(void *)(v13 - 8);
    MEMORY[0x270FA5388](v14);
    id v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    uint64_t v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newAutoFillFormListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v22._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  v22._object = (void *)0x800000020C852F80;
  v4._uint64_t countAndFlagsBits = 0x6C6C69466F747541;
  v4._object = (void *)0xED00006D726F4620;
  v5.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1) {
    swift_once();
  }
  id v8 = (id)static TextToolListItemView.symbolConfiguration;
  id v9 = (void *)MEMORY[0x21054D080](0xD000000000000021, 0x800000020C852FB0);
  id v10 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  id v11 = v10;
  uint64_t v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  uint64_t v13 = v21;
  if (v21)
  {
    double v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v15 = *(void *)(v13 - 8);
    MEMORY[0x270FA5388](v14);
    id v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    uint64_t v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newAddSignatureListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v22._object = (void *)0x800000020C8530B0;
  v4._uint64_t countAndFlagsBits = 0x6E67695320646441;
  v4._object = (void *)0xED00006572757461;
  v5.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0xD000000000000036;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1) {
    swift_once();
  }
  id v8 = (id)static TextToolListItemView.symbolConfiguration;
  id v9 = (void *)MEMORY[0x21054D080](0x727574616E676973, 0xE900000000000065);
  id v10 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  id v11 = v10;
  uint64_t v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  uint64_t v13 = v21;
  if (v21)
  {
    double v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v15 = *(void *)(v13 - 8);
    MEMORY[0x270FA5388](v14);
    id v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    uint64_t v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newAddShapeListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v22._uint64_t countAndFlagsBits = 0xD000000000000032;
  v22._object = (void *)0x800000020C852FE0;
  v4._uint64_t countAndFlagsBits = 0x7061685320646441;
  v4._object = (void *)0xE900000000000065;
  v5.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1) {
    swift_once();
  }
  id v8 = (id)static TextToolListItemView.symbolConfiguration;
  id v9 = (void *)MEMORY[0x21054D080](0xD000000000000010, 0x800000020C853020);
  id v10 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  id v11 = v10;
  uint64_t v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  uint64_t v13 = v21;
  if (v21)
  {
    double v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v15 = *(void *)(v13 - 8);
    MEMORY[0x270FA5388](v14);
    id v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    uint64_t v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

char *specialized static TextToolListItemView.newOpacityListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v22._uint64_t countAndFlagsBits = 0xD000000000000035;
  v22._object = (void *)0x800000020C853040;
  v4._uint64_t countAndFlagsBits = 0x7974696361704FLL;
  v4._object = (void *)0xE700000000000000;
  v5.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v22);
  if (one-time initialization token for symbolConfiguration != -1) {
    swift_once();
  }
  id v8 = (id)static TextToolListItemView.symbolConfiguration;
  id v9 = (void *)MEMORY[0x21054D080](0xD000000000000028, 0x800000020C853080);
  id v10 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v9, v8);

  objc_allocWithZone((Class)type metadata accessor for TextToolListItemView());
  id v11 = v10;
  uint64_t v12 = TextToolListItemView.init(title:image:)(v7._countAndFlagsBits, (uint64_t)v7._object, v10);
  outlined init with copy of Any?(a1, (uint64_t)v20);
  uint64_t v13 = v21;
  if (v21)
  {
    double v14 = __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v15 = *(void *)(v13 - 8);
    MEMORY[0x270FA5388](v14);
    id v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    uint64_t v18 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v18 = 0;
  }
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v18, a2, 64);

  swift_unknownObjectRelease();
  return v12;
}

void specialized TextToolListItemView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabel;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageView;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackView;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_contentButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewMargin] = 0x4030000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_stackViewSpacing] = 0x4030000000000000;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit20TextToolListItemView_titleLabelTextColor;
  if (one-time initialization token for defaultTintColor != -1) {
    swift_once();
  }
  Swift::String_optional v5 = (void *)static TextToolListItemView.defaultTintColor;
  *(void *)&v0[v4] = static TextToolListItemView.defaultTintColor;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextToolListItemView_imageViewTintColor] = v5;
  id v6 = v5;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized TextToolListItemView.pointerInteraction(_:styleFor:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIPointerShape?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UIPointerEffect();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  id v11 = (uint64_t *)((char *)&v22 - v10);
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CC8]), sel_initWithView_, v1);
  uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UITargetedPreview, preferredTintMode: UIPointerEffect.TintMode, prefersShadow: Bool, prefersScaledContent: Bool));
  double v14 = (char *)v11 + v13[12];
  uint64_t v15 = v13[16];
  uint64_t v16 = v13[20];
  *id v11 = v12;
  uint64_t v17 = *MEMORY[0x263F81E30];
  uint64_t v18 = type metadata accessor for UIPointerEffect.TintMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v14, v17, v18);
  *((unsigned char *)v11 + v16) = 0;
  *((unsigned char *)v11 + v15) = 0;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v11, *MEMORY[0x263F81E28], v5);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerStyle);
  (*(void (**)(char *, void *, uint64_t))(v6 + 16))(v8, v11, v5);
  uint64_t v19 = type metadata accessor for UIPointerShape();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v4, 1, 1, v19);
  uint64_t v20 = UIPointerStyle.init(effect:shape:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v11, v5);
  return v20;
}

uint64_t FeedbackInput.subject.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for FBKSInteraction.FeatureDomain();
  double v11 = MEMORY[0x270FA5388](v10);
  (*(void (**)(char *, void, double))(v13 + 104))((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F3C268], v11);
  outlined init with copy of FBKSInteraction.AnnotatedContent?(v2, (uint64_t)v9);
  uint64_t v14 = v2 + *(int *)(type metadata accessor for FeedbackInput() + 20);
  uint64_t v15 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v6, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v6, 0, 1, v15);
  objc_allocWithZone((Class)type metadata accessor for FBKSDonation());
  swift_bridgeObjectRetain();
  *a1 = FBKSDonation.init(featureDomain:bundleID:prefillQuestions:originalAnnotatedContent:generatedAnnotatedContent:extraContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:)();
  uint64_t v17 = *MEMORY[0x263F3C228];
  uint64_t v18 = type metadata accessor for FBKSEvaluation.Subject();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(a1, v17, v18);
}

uint64_t closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:)(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 104) = a3;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  uint64_t v4 = type metadata accessor for FBKSEvaluation.Subject();
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = *(void *)(v4 - 8);
  *(void *)(v3 + 56) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v3 + 64) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 72) = v6;
  *(void *)(v3 + 80) = v5;
  return MEMORY[0x270FA2498](closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:), v6, v5);
}

uint64_t closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:)()
{
  FeedbackInput.subject.getter(*(uint64_t **)(v0 + 56));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 32);
  return MEMORY[0x270F28888](v3, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v5 = *(void *)(*v1 + 40);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 80);
  uint64_t v7 = *(void *)(v2 + 72);
  if (v0) {
    uint64_t v8 = closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:);
  }
  else {
    uint64_t v8 = closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:);
  }
  return MEMORY[0x270FA2498](v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  swift_release();
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[12];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[12];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    double v11 = v8;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_20C2D7000, v5, v6, "_remoteEvaluate failed with error: %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x210550270](v10, -1, -1);
    MEMORY[0x210550270](v9, -1, -1);
  }
  else
  {
  }
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t closure #2 in FeedbackManager.sendFeedback(action:feedbackInput:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  v4[2] = type metadata accessor for MainActor();
  v4[3] = static MainActor.shared.getter();
  uint64_t v8 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc();
  v4[4] = v6;
  *uint64_t v6 = v4;
  v6[1] = closure #2 in FeedbackManager.sendFeedback(action:feedbackInput:);
  return v8();
}

uint64_t closure #2 in FeedbackManager.sendFeedback(action:feedbackInput:)()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #2 in FeedbackManager.sendFeedback(action:feedbackInput:), v1, v0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static FBKSInteraction.AnnotatedContent.makeCreatedImageContent(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent.IconType?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for FBKSInteraction.Content();
  double v6 = MEMORY[0x270FA5388](v5);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v15._uint64_t countAndFlagsBits = 0xD000000000000026;
  v15._object = (void *)0x800000020C853290;
  v9._uint64_t countAndFlagsBits = 0x2064657461657243;
  v9._object = (void *)0xED00006567616D49;
  v10.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v10.value._object = (void *)0xEB00000000656C62;
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, paperKitBundle, v11, v15);
  uint64_t v12 = type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  return FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)();
}

uint64_t static FBKSInteraction.AnnotatedContent.makeDiagnosticsContent(structuredContent:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent.IconType?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FBKSInteraction.StructuredValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, a1, v9);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F3C510], v5);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v16._object = (void *)0x800000020C8532E0;
  v10._uint64_t countAndFlagsBits = 0x74736F6E67616944;
  v10._object = (void *)0xEB00000000736369;
  v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v16._uint64_t countAndFlagsBits = 0xD000000000000043;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v16);
  uint64_t v13 = type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 1, 1, v13);
  return FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)();
}

uint64_t static FBKSInteraction.AnnotatedContent.makeOriginalImageContent(imageData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent.IconType?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FBKSInteraction.Content();
  double v8 = MEMORY[0x270FA5388](v7);
  Swift::String v10 = (uint64_t *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *Swift::String v10 = a1;
  v10[1] = a2;
  (*(void (**)(uint64_t *, void, double))(v11 + 104))(v10, *MEMORY[0x263F3C578], v8);
  outlined copy of Data._Representation(a1, a2);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v18._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
  v18._object = (void *)0x800000020C8531C0;
  v12._uint64_t countAndFlagsBits = 0x6C616E696769724FLL;
  v12._object = (void *)0xEE006567616D4920;
  v13.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v13.value._object = (void *)0xEB00000000656C62;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, paperKitBundle, v14, v18);
  uint64_t v15 = type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 1, 1, v15);
  return FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)();
}

uint64_t static FBKSInteraction.AnnotatedContent.makeOriginalSketchContent(sketchData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent.IconType?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FBKSInteraction.Content();
  double v8 = MEMORY[0x270FA5388](v7);
  Swift::String v10 = (uint64_t *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *Swift::String v10 = a1;
  v10[1] = a2;
  (*(void (**)(uint64_t *, void, double))(v11 + 104))(v10, *MEMORY[0x263F3C588], v8);
  outlined copy of Data._Representation(a1, a2);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v18._uint64_t countAndFlagsBits = 0xD000000000000040;
  v18._object = (void *)0x800000020C853220;
  v12._uint64_t countAndFlagsBits = 0x6C616E696769724FLL;
  v12._object = (void *)0xEF686374656B5320;
  v13.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v13.value._object = (void *)0xEB00000000656C62;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, paperKitBundle, v14, v18);
  uint64_t v15 = type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 1, 1, v15);
  return FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)();
}

uint64_t FeedbackManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FeedbackManager()
{
  return self;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance FeedbackManager@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t specialized FeedbackManager.feedbackImageName(action:hasResponse:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v29[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10.n128_f64[0] = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v29[-1] - v9;
  if (a2) {
    uint64_t v12 = 0x6C6C69662ELL;
  }
  else {
    uint64_t v12 = 0;
  }
  if (a2) {
    Swift::String_optional v13 = (void *)0xE500000000000000;
  }
  else {
    Swift::String_optional v13 = (void *)0xE000000000000000;
  }
  Swift::String v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v14((char *)&v29[-1] - v9, a1, v4, v10);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v11, v4);
  if (v15 == *MEMORY[0x263F3C200])
  {
    strcpy((char *)v29, "hand.thumbsup");
    HIWORD(v29[1]) = -4864;
LABEL_14:
    v18._uint64_t countAndFlagsBits = v12;
    v18._object = v13;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    return v29[0];
  }
  if (v15 == *MEMORY[0x263F3C1D8])
  {
    v29[0] = 0;
    v29[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    uint64_t v16 = 0x7568742E646E6168;
    uint64_t v17 = 0xEF6E776F6473626DLL;
LABEL_13:
    v29[0] = v16;
    v29[1] = v17;
    goto LABEL_14;
  }
  if (v15 == *MEMORY[0x263F3C1E8])
  {
    v29[0] = 0;
    v29[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    uint64_t v16 = 0xD000000000000016;
    uint64_t v17 = 0x800000020C853330;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)generativeLogger);
  ((void (*)(char *, uint64_t, uint64_t))v14)(v7, a1, v4);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v29[0] = v28;
    *(_DWORD *)char v23 = 136315138;
    uint64_t v24 = FBKSEvaluation.Action.description.getter();
    v29[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v7, v4);
    _os_log_impl(&dword_20C2D7000, v21, v22, "feedbackImageName received invalid action %s", v23, 0xCu);
    uint64_t v27 = v28;
    swift_arrayDestroy();
    MEMORY[0x210550270](v27, -1, -1);
    MEMORY[0x210550270](v23, -1, -1);
  }
  else
  {
    uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v7, v4);
  }

  v26(v11, v4);
  return 0;
}

uint64_t specialized FeedbackManager.sendFeedback(action:feedbackInput:)(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[12] = swift_task_alloc();
  uint64_t v3 = *(void *)(type metadata accessor for FeedbackInput() - 8);
  v2[13] = v3;
  v2[14] = *(void *)(v3 + 64);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FBKSEvaluation.Action();
  v2[17] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[18] = v5;
  v2[19] = *(void *)(v5 + 64);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = type metadata accessor for MainActor();
  v2[26] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[27] = v7;
  v2[28] = v6;
  return MEMORY[0x270FA2498](specialized FeedbackManager.sendFeedback(action:feedbackInput:), v7, v6);
}

uint64_t specialized FeedbackManager.sendFeedback(action:feedbackInput:)()
{
  uint64_t v1 = *(void (**)(void, void, void))(v0[18] + 104);
  v1(v0[24], *MEMORY[0x263F3C1D8], v0[17]);
  lazy protocol witness table accessor for type FBKSEvaluation.Action and conformance FBKSEvaluation.Action();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v39 = v1;
  if (v0[2] == v0[4] && v0[3] == v0[5]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v4 = v0[23];
  uint64_t v3 = v0[24];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[18];
  uint64_t v7 = v0[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(void, uint64_t))(v6 + 8);
  v0[29] = v8;
  v0[30] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  id v43 = v8;
  v8(v3, v5);
  id v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v42(v4, v7, v5);
  if (v2)
  {
    char v41 = 1;
    uint64_t v9 = v43;
  }
  else
  {
    v39(v0[22], *MEMORY[0x263F3C1E8], v0[17]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v0[6] == v0[8] && v0[7] == v0[9]) {
      char v10 = 1;
    }
    else {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    char v41 = v10;
    uint64_t v11 = v0[22];
    uint64_t v12 = v0[17];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v43(v11, v12);
    uint64_t v9 = v43;
  }
  uint64_t v13 = v0[21];
  uint64_t v14 = v0[18];
  uint64_t v40 = v0[19];
  uint64_t v16 = v0[16];
  uint64_t v15 = v0[17];
  uint64_t v17 = v0[15];
  uint64_t v37 = v0[20];
  uint64_t v38 = v0[14];
  uint64_t v18 = v0[13];
  uint64_t v20 = v0[10];
  uint64_t v19 = v0[11];
  v9(v0[23], v15);
  outlined init with copy of FeedbackInput(v19, v16);
  v42(v13, v20, v15);
  outlined init with copy of FeedbackInput(v16, v17);
  v42(v37, v13, v15);
  unint64_t v21 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v22 = (v38 + *(unsigned __int8 *)(v14 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v23 = swift_allocObject();
  v0[31] = v23;
  outlined init with take of FeedbackInput(v16, v23 + v21);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 32))(v23 + v22, v13, v15);
  *(unsigned char *)(v23 + v22 + v40) = v41 & 1;
  if (v41)
  {
    uint64_t v24 = (void *)swift_task_alloc();
    v0[32] = v24;
    *uint64_t v24 = v0;
    v24[1] = specialized FeedbackManager.sendFeedback(action:feedbackInput:);
    uint64_t v25 = v0[20];
    uint64_t v26 = v0[15];
    return closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:)(v26, v25, 1);
  }
  else
  {
    uint64_t v28 = v0[20];
    uint64_t v29 = v0[17];
    uint64_t v30 = v0[15];
    uint64_t v31 = v0[12];
    swift_release();
    v43(v28, v29);
    outlined destroy of FeedbackInput(v30);
    uint64_t v32 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
    swift_retain();
    uint64_t v33 = static MainActor.shared.getter();
    id v34 = (void *)swift_allocObject();
    uint64_t v35 = MEMORY[0x263F8F500];
    _OWORD v34[2] = v33;
    v34[3] = v35;
    v34[4] = &async function pointer to partial apply for closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:);
    v34[5] = v23;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v31, (uint64_t)&async function pointer to partial apply for closure #2 in FeedbackManager.sendFeedback(action:feedbackInput:), (uint64_t)v34);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v36 = (uint64_t (*)(void))v0[1];
    return v36();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = *v0;
  char v2 = *(void (**)(uint64_t, uint64_t))(*v0 + 232);
  uint64_t v3 = *(void *)(*v0 + 160);
  uint64_t v4 = *(void *)(*v0 + 136);
  uint64_t v5 = *(void *)(*v0 + 120);
  swift_task_dealloc();
  v2(v3, v4);
  outlined destroy of FeedbackInput(v5);
  uint64_t v6 = *(void *)(v1 + 224);
  uint64_t v7 = *(void *)(v1 + 216);
  return MEMORY[0x270FA2498](specialized FeedbackManager.sendFeedback(action:feedbackInput:), v7, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for FeedbackInput()
{
  uint64_t result = type metadata singleton initialization cache for FeedbackInput;
  if (!type metadata singleton initialization cache for FeedbackInput) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FBKSEvaluation.Action and conformance FBKSEvaluation.Action()
{
  unint64_t result = lazy protocol witness table cache variable for type FBKSEvaluation.Action and conformance FBKSEvaluation.Action;
  if (!lazy protocol witness table cache variable for type FBKSEvaluation.Action and conformance FBKSEvaluation.Action)
  {
    type metadata accessor for FBKSEvaluation.Action();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FBKSEvaluation.Action and conformance FBKSEvaluation.Action);
  }
  return result;
}

uint64_t outlined init with copy of FeedbackInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeedbackInput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C3CDDC8()
{
  uint64_t v1 = type metadata accessor for FeedbackInput();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v14 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v15 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v4 = *(void *)(v15 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = *(void *)(v4 + 64);
  uint64_t v16 = v0;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v3, 1, v7);
  char v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  if (!v9) {
    v10(v0 + v3, v7);
  }
  uint64_t v11 = (v3 + v14 + v5) & ~v5;
  v10(v6 + *(int *)(v1 + 20), v7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v16 + v11, v15);
  return MEMORY[0x270FA0238](v16, v13 + v11 + 1, v2 | v5 | 7);
}

uint64_t outlined init with take of FeedbackInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeedbackInput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for FeedbackInput() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for FBKSEvaluation.Action() - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = v0 + v6;
  char v9 = *(unsigned char *)(v0 + v6 + *(void *)(v5 + 64));
  char v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *char v10 = v1;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in FeedbackManager.sendFeedback(action:feedbackInput:)(v7, v8, v9);
}

uint64_t outlined destroy of FeedbackInput(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeedbackInput();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20C3CE1D8()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #2 in FeedbackManager.sendFeedback(action:feedbackInput:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #2 in FeedbackManager.sendFeedback(action:feedbackInput:)(a1, v4, v5, v6);
}

uint64_t outlined init with copy of FBKSInteraction.AnnotatedContent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for FeedbackInput(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for FBKSInteraction.AnnotatedContent();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20), v7);
    }
    else
    {
      uint64_t v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v11(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      v11((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FeedbackInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    v7(a1, v4);
  }
  v7(a1 + *(int *)(a2 + 20), v4);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for FeedbackInput(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  }
  else
  {
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v9(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v9(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  }
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for FeedbackInput(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for FeedbackInput(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  }
  else
  {
    int v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v9(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v9(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  }
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithTake for FeedbackInput(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedbackInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C3CEC20);
}

uint64_t sub_20C3CEC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedbackInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C3CED4C);
}

uint64_t sub_20C3CED4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for FBKSInteraction.AnnotatedContent();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for FeedbackInput()
{
  type metadata accessor for FBKSInteraction.AnnotatedContent?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for FBKSInteraction.AnnotatedContent();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for FBKSInteraction.AnnotatedContent?()
{
  if (!lazy cache variable for type metadata for FBKSInteraction.AnnotatedContent?)
  {
    type metadata accessor for FBKSInteraction.AnnotatedContent();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
    }
  }
}

void CanvasElement.flags.getter(void *a1@<X8>)
{
  *a1 = 0;
}

{
  CanvasElement.flags.getter(a1);
}

__C::CGRect __swiftcall CanvasElement.renderFrame(in:)(__C::CGRect_optional *in)
{
  double v3 = specialized CanvasElement.renderFrame(in:)(v1, v2);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  __C::CGRect result;

  double v3 = specialized CanvasElement.renderFrame(in:)(v1, v2);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

CGFloat CanvasElement.coordinateSpace.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double v6 = (*(double (**)(void))(*(void *)(a2 + 8) + 8))();
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  CGFloat v13 = (*(double (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  CGFloat v36 = v8 - v12 * 0.0;
  CGFloat v37 = v6 - v10 * 0.0;
  v41.origin.double x = v6;
  v41.origin.double y = v8;
  v41.size.double width = v10;
  CGFloat v34 = v10;
  CGFloat v35 = v12;
  v41.size.double height = v12;
  double MidX = CGRectGetMidX(v41);
  v42.origin.double x = v6;
  v42.origin.double y = v8;
  v42.size.double width = v10;
  v42.size.double height = v12;
  double MidY = CGRectGetMidY(v42);
  CGAffineTransformMakeRotation(&t1, v13);
  long long v30 = *(_OWORD *)&t1.c;
  long long v32 = *(_OWORD *)&t1.a;
  CGFloat v16 = -MidY;
  tdouble x = t1.tx;
  tdouble y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v16);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v23 = t1.tx;
  CGFloat v24 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v32;
  *(_OWORD *)&t2.CGFloat c = v30;
  t2.tdouble x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v38, &t1, &t2);
  long long v31 = *(_OWORD *)&v38.c;
  long long v33 = *(_OWORD *)&v38.a;
  CGFloat v25 = v38.tx;
  CGFloat v26 = v38.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tdouble x = v23;
  t1.tdouble y = v24;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v33;
  *(_OWORD *)&t1.CGFloat c = v31;
  t1.tdouble x = v25;
  t1.tdouble y = v26;
  CGAffineTransformConcat(&v38, &t1, &t2);
  t1.CGFloat a = v34;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = v35;
  t1.tdouble x = v37;
  t1.tdouble y = v36;
  CGAffineTransform t2 = v38;
  CGAffineTransformConcat(&v38, &t1, &t2);
  CGFloat result = v38.a;
  long long v28 = *(_OWORD *)&v38.c;
  long long v29 = *(_OWORD *)&v38.tx;
  *a3 = *(_OWORD *)&v38.a;
  a3[1] = v28;
  a3[2] = v29;
  return result;
}

void CanvasElement.coordinateSpace.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(double (**)(uint64_t, uint64_t))(a3 + 32);
  double v6 = v5(a2, a3);
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v33, v6);
  double v8 = v33;
  double v7 = v34;
  *(void *)&long long v9 = v35;
  v10.n128_u64[0] = v36;
  double v11 = v37;
  double v12 = v33;
  double v13 = v34;
  long long v30 = v9;
  __n128 rect = v10;
  if (fabs(CGRectGetWidth(*(CGRect *)(&v9 - 1))) >= 1.0)
  {
    int8x16_t v17 = (int8x16_t)v30;
  }
  else
  {
    v39.origin.double x = v8;
    v39.origin.double y = v7;
    *(void *)&v39.size.double width = v30;
    *(void *)&v39.size.double height = rect.n128_u64[0];
    *(double *)v14.i64 = CGRectGetWidth(v39);
    v15.f64[0] = NAN;
    v15.f64[1] = NAN;
    v16.i64[0] = 1.0;
    int8x16_t v17 = vbslq_s8((int8x16_t)vnegq_f64(v15), v16, v14);
  }
  double v18 = v8;
  double v19 = v7;
  __n128 v31 = (__n128)v17;
  unint64_t v20 = rect.n128_u64[0];
  if (fabs(CGRectGetHeight(*(CGRect *)(&v17 - 1))) < 1.0)
  {
    v40.origin.double x = v8;
    v40.origin.double y = v7;
    *(void *)&v40.size.double width = v31.n128_u64[0];
    *(void *)&v40.size.double height = rect.n128_u64[0];
    *(double *)v21.i64 = CGRectGetHeight(v40);
    v22.i64[0] = 1.0;
    v23.f64[0] = NAN;
    v23.f64[1] = NAN;
    __n128 rect = (__n128)vbslq_s8((int8x16_t)vnegq_f64(v23), v22, v21);
  }
  CGFloat v24 = (*(double (**)(uint64_t))(*(void *)(a3 + 8) + 8))(a2);
  if (!CGRect.almostEqual(_:threshold:)(v8, v7, v31.n128_f64[0], rect.n128_f64[0], 0.1, v24, v25, v26, v27)) {
    (*(void (**)(uint64_t, uint64_t, double, double, __n128, __n128))(a3 + 16))(a2, a3, v8, v7, v31, rect);
  }
  if (vabdd_f64(v5(a2, a3), v11) > 0.00174532925)
  {
    long long v29 = *(void (**)(uint64_t, uint64_t, __n128))(a3 + 40);
    v28.n128_f64[0] = v11;
    v29(a2, a3, v28);
  }
}

uint64_t (*CanvasElement.flags.modify(void *a1))()
{
  *a1 = 0;
  return UnknownCanvasElementView.flags.modify;
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance Signature()
{
  return MEMORY[0x263F8EE78];
}

uint64_t CanvasElement.indexableTextContent<A>(in:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t Capsule<>.sharedCanvasElement.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v15[1] = a3;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  long long v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v7);
  double v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(a2 + 88))(v9, v10, a2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void protocol witness for CanvasElement.renderFrame(in:) in conformance PDFAnnotationElement()
{
  v21.origin.double x = 0.0;
  v21.origin.double y = 0.0;
  v21.size.double width = 1.0;
  v21.size.double height = 1.0;
  double MidX = CGRectGetMidX(v21);
  v22.origin.double x = 0.0;
  v22.origin.double y = 0.0;
  v22.size.double width = 1.0;
  v22.size.double height = 1.0;
  double MidY = CGRectGetMidY(v22);
  CGAffineTransformMakeRotation(&t1, 0.0);
  long long v14 = *(_OWORD *)&t1.c;
  long long v16 = *(_OWORD *)&t1.a;
  CGFloat v2 = -MidX;
  CGFloat v3 = -MidY;
  tdouble x = t1.tx;
  tdouble y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, v2, v3);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v10 = t1.tx;
  CGFloat v11 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v16;
  *(_OWORD *)&t2.CGFloat c = v14;
  t2.tdouble x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v18, &t1, &t2);
  long long v15 = *(_OWORD *)&v18.c;
  long long v17 = *(_OWORD *)&v18.a;
  CGFloat v12 = v18.tx;
  CGFloat v13 = v18.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tdouble x = v10;
  t1.tdouble y = v11;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v17;
  *(_OWORD *)&t1.CGFloat c = v15;
  t1.tdouble x = v12;
  t1.tdouble y = v13;
  CGAffineTransformConcat(&v18, &t1, &t2);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tdouble x = 0.0;
  t1.tdouble y = 0.0;
  CGAffineTransform t2 = v18;
  CGAffineTransformConcat(&v18, &t1, &t2);
  CGAffineTransform t1 = v18;
  v23.origin.double x = 0.0;
  v23.origin.double y = 0.0;
  v23.size.double width = 1.0;
  v23.size.double height = 1.0;
  CGRectApplyAffineTransform(v23, &t1);
}

BOOL protocol witness for CanvasElement.apply(_:) in conformance PDFAnnotationElement(double *a1)
{
  long long v22 = *((_OWORD *)a1 + 1);
  long long v23 = *(_OWORD *)a1;
  CGFloat v20 = a1[5];
  CGFloat v21 = a1[4];
  v27.origin.double x = 0.0;
  v27.origin.double y = 0.0;
  v27.size.double width = 1.0;
  v27.size.double height = 1.0;
  double MidX = CGRectGetMidX(v27);
  v28.origin.double x = 0.0;
  v28.origin.double y = 0.0;
  v28.size.double width = 1.0;
  v28.size.double height = 1.0;
  double MidY = CGRectGetMidY(v28);
  CGAffineTransformMakeRotation(&t1, 0.0);
  long long v16 = *(_OWORD *)&t1.c;
  long long v18 = *(_OWORD *)&t1.a;
  CGFloat v3 = -MidX;
  CGFloat v4 = -MidY;
  tdouble x = t1.tx;
  tdouble y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, v3, v4);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v11 = t1.tx;
  CGFloat v12 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v18;
  *(_OWORD *)&t2.CGFloat c = v16;
  t2.tdouble x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v24, &t1, &t2);
  long long v17 = *(_OWORD *)&v24.c;
  long long v19 = *(_OWORD *)&v24.a;
  CGFloat v13 = v24.tx;
  CGFloat v14 = v24.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tdouble x = v11;
  t1.tdouble y = v12;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v19;
  *(_OWORD *)&t1.CGFloat c = v17;
  t1.tdouble x = v13;
  t1.tdouble y = v14;
  CGAffineTransformConcat(&v24, &t1, &t2);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tdouble x = 0.0;
  t1.tdouble y = 0.0;
  CGAffineTransform t2 = v24;
  CGAffineTransformConcat(&v24, &t1, &t2);
  CGAffineTransform t1 = v24;
  *(_OWORD *)&t2.CGFloat a = v23;
  *(_OWORD *)&t2.CGFloat c = v22;
  t2.tdouble x = v21;
  t2.tdouble y = v20;
  CGAffineTransformConcat(&v24, &t1, &t2);
  CGAffineTransform t1 = v24;
  return specialized CanvasElement.coordinateSpace.setter();
}

Swift::Void __swiftcall CanvasElement.apply(_:)(CGAffineTransform *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  long long v7 = *(_OWORD *)&a1->c;
  long long v8 = *(_OWORD *)&a1->a;
  tdouble x = a1->tx;
  tdouble y = a1->ty;
  CanvasElement.coordinateSpace.getter(v1, v2, &v11);
  CGAffineTransform t1 = v11;
  *(_OWORD *)&t2.CGFloat a = v8;
  *(_OWORD *)&t2.CGFloat c = v7;
  t2.tdouble x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v9, &t1, &t2);
  CGAffineTransform t1 = v9;
  CanvasElement.coordinateSpace.setter((uint64_t)&t1, v4, v3);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance GraphElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance GraphElement(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

uint64_t SharedTagged_9<>.graph.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged3.getter();
}

void (*CanvasElement.flags.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CanvasElement.flags.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t CanvasElement.isHidden.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 64))(&v3);
  return v3 & 1;
}

uint64_t CanvasElement.isHidden.setter(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(unsigned char *))(a3 + 80);
  if (a1)
  {
    uint64_t v5 = (uint64_t (*)(unsigned char *, void))v3(v8);
    if ((*v4 & 1) == 0)
    {
      unint64_t v6 = *v4 | 1;
LABEL_6:
      *uint64_t v4 = v6;
    }
  }
  else
  {
    uint64_t v5 = (uint64_t (*)(unsigned char *, void))v3(v8);
    if (*v4)
    {
      unint64_t v6 = *v4 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_6;
    }
  }
  return v5(v8, 0);
}

uint64_t (*CanvasElement.isHidden.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 64))(&v6, a2, a3);
  *(unsigned char *)(a1 + 24) = v6 & 1;
  return CanvasElement.isHidden.modify;
}

uint64_t CanvasElement.isHidden.modify(uint64_t a1)
{
  return CanvasElement.isHidden.setter(*(unsigned char *)(a1 + 24), *(void *)a1, *(void *)(a1 + 8));
}

uint64_t CanvasElement.renderFrame.getter(uint64_t a1, uint64_t a2)
{
  memset(v3, 0, sizeof(v3));
  char v4 = 1;
  return (*(uint64_t (**)(_OWORD *, uint64_t))(a2 + 112))(v3, a1);
}

void (*CanvasElement.coordinateSpace.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  long long v7 = malloc(0xA8uLL);
  *a1 = v7;
  v7[19] = a3;
  v7[20] = v3;
  v7[18] = a2;
  CanvasElement.coordinateSpace.getter(a2, a3, (_OWORD *)v7 + 6);
  return CanvasElement.coordinateSpace.modify;
}

void CanvasElement.coordinateSpace.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(_OWORD **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 152);
  uint64_t v4 = *(void *)(*(void *)a1 + 144);
  if (a2) {
    uint64_t v5 = *(_OWORD **)a1;
  }
  else {
    uint64_t v5 = (_OWORD *)(*(void *)a1 + 48);
  }
  long long v6 = v2[7];
  *uint64_t v5 = v2[6];
  v5[1] = v6;
  v5[2] = v2[8];
  CanvasElement.coordinateSpace.setter((uint64_t)v5, v4, v3);
  free(v2);
}

uint64_t ContainerCanvasElement.pdfContentsBounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t ContainerCanvasElement.ensureHasDrawing<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v5 - 8);
  long long v29 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v7);
  uint64_t v28 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  CGAffineTransform v11 = (char *)&v25 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v12 - 8);
  CGFloat v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  long long v18 = (char *)&v25 - v17;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 48))(a2, a3, v16);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v20 = *(void *)(v19 - 8);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  uint64_t result = outlined destroy of Ref<PKDrawingStruct>?((uint64_t)v18);
  if (v21 == 1)
  {
    long long v23 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    long long v31 = *MEMORY[0x263F001A0];
    long long v32 = v23;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type Paper and conformance Paper((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
    CRRegister.init(wrappedValue:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    uint64_t v27 = a3;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    uint64_t v26 = a2;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    CROrderedSet.init()();
    *(void *)&v11[*(int *)(v7 + 24)] = MEMORY[0x263F8EE80];
    outlined init with copy of PKDrawingStruct((uint64_t)v11, v28);
    uint64_t v24 = type metadata accessor for CRKeyPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v29, 1, 1, v24);
    lazy protocol witness table accessor for type Paper and conformance Paper((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    swift_retain();
    Ref.init<A>(_:_:identity:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v14, 0, 1, v19);
    (*(void (**)(char *, uint64_t))(v27 + 56))(v14, v26);
    return outlined destroy of PKDrawingStruct((uint64_t)v11);
  }
  return result;
}

PaperKit::TaggedCanvasElement::Enum_optional __swiftcall TaggedCanvasElement.Enum.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 9;
  if ((unint64_t)rawValue < 9) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (PaperKit::TaggedCanvasElement::Enum_optional)rawValue;
}

uint64_t TaggedCanvasElement.Enum.rawValue.getter()
{
  return *v0;
}

PaperKit::TaggedCanvasElement::Enum_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TaggedCanvasElement.Enum(Swift::Int *a1)
{
  return TaggedCanvasElement.Enum.init(rawValue:)(*a1);
}

uint64_t SharedTagged_9<>.paper.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return MEMORY[0x270F17838](v0);
}

uint64_t SharedTagged_9<>.image.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged2.getter();
}

uint64_t SharedTagged_9<>.textBox.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return MEMORY[0x270F17850](v0);
}

uint64_t SharedTagged_9<>.link.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged5.getter();
}

uint64_t SharedTagged_9<>.shape.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged6.getter();
}

uint64_t SharedTagged_9<>.signature.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged7.getter();
}

uint64_t SharedTagged_9<>.documentPage.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return MEMORY[0x270F17870](v0);
}

uint64_t SharedTagged_9<>.pdfAnnotation.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return SharedTagged_9.tagged9.getter();
}

uint64_t SharedTagged_9<>.init(_:)(uint64_t a1)
{
  return SharedTagged_9<>.init(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x263F32D30], MEMORY[0x263F32D28], MEMORY[0x263F32E60]);
}

uint64_t WeakTagged_9<>.paper.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return MEMORY[0x270F175B8](v0);
}

uint64_t WeakTagged_9<>.image.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged2.getter();
}

uint64_t WeakTagged_9<>.graph.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged3.getter();
}

uint64_t WeakTagged_9<>.textBox.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged4.getter();
}

uint64_t WeakTagged_9<>.link.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged5.getter();
}

uint64_t WeakTagged_9<>.shape.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged6.getter();
}

uint64_t WeakTagged_9<>.signature.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return WeakTagged_9.tagged7.getter();
}

uint64_t WeakTagged_9<>.documentPage.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return MEMORY[0x270F175F0](v0);
}

uint64_t WeakTagged_9<>.pdfAnnotation.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  return MEMORY[0x270F175F8](v0);
}

uint64_t WeakTagged_9<>.init(_:)(uint64_t a1)
{
  return SharedTagged_9<>.init(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x263F32E50], MEMORY[0x263F32E48], MEMORY[0x263F32D50]);
}

uint64_t SharedTagged_9<>.init(_:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t *__return_ptr), void (*a4)(uint64_t), void (*a5)(uint64_t *, char *, ValueMetadata *, unint64_t))
{
  uint64_t v10 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a2);
  a3(&v18);
  uint64_t v16 = v18;
  char v17 = v19;
  a4(v13);
  unint64_t v14 = lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  a5(&v16, v12, &type metadata for TaggedCanvasElement, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance PaperDocumentPage(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance Image(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance Paper(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance Link(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter);
}

double protocol witness for CanvasElement.renderFrame(in:) in conformance Signature(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(CGAffineTransform *__return_ptr))
{
  a4(&v6);
  CGAffineTransform v5 = v6;
  v7.origin.double x = 0.0;
  v7.origin.double y = 0.0;
  v7.size.double width = 1.0;
  v7.size.double height = 1.0;
  *(void *)&double result = (unint64_t)CGRectApplyAffineTransform(v7, &v5);
  return result;
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance UnknownCanvasElement(double *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.apply(_:) in conformance GraphElement(a1, a2, a3, (void (*)(CGAffineTransform *__return_ptr))specialized CanvasElement.coordinateSpace.getter, (uint64_t (*)(CGAffineTransform *))specialized CanvasElement.coordinateSpace.setter);
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance GraphElement(double *a1, uint64_t a2, uint64_t a3, void (*a4)(CGAffineTransform *__return_ptr), uint64_t (*a5)(CGAffineTransform *))
{
  long long v9 = *((_OWORD *)a1 + 1);
  long long v10 = *(_OWORD *)a1;
  CGFloat v6 = a1[4];
  CGFloat v7 = a1[5];
  a4(&v13);
  CGAffineTransform t1 = v13;
  *(_OWORD *)&t2.CGFloat a = v10;
  *(_OWORD *)&t2.CGFloat c = v9;
  t2.tdouble x = v6;
  t2.tdouble y = v7;
  CGAffineTransformConcat(&v11, &t1, &t2);
  CGAffineTransform t1 = v11;
  return a5(&t1);
}

BOOL specialized ContainerCanvasElement.hasMarkup(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a4;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v36 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  double v37 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v35);
  CGRect v39 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v8 - 8);
  long long v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v40 = v11;
  uint64_t v41 = v12;
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a3 - 8);
  double v17 = MEMORY[0x270FA5388](v16);
  char v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v19, a1, a3, v17);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v43 == v42)
  {
    uint64_t v20 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v10, 1, v40) == 1)
    {
      outlined destroy of Ref<PKDrawingStruct>?((uint64_t)v10);
      BOOL v21 = 0;
    }
    else
    {
      uint64_t v22 = v41;
      long long v23 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      uint64_t v24 = v14;
      double v33 = v14;
      uint64_t v25 = v40;
      v23(v24, v10, v40);
      uint64_t v26 = (uint64_t)v20;
      Ref.subscript.getter();
      uint64_t v27 = &v20[*(int *)(v35 + 20)];
      uint64_t v28 = v36;
      long long v29 = v37;
      uint64_t v30 = v38;
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v37, v27, v38);
      outlined destroy of PKDrawingStruct(v26);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      BOOL v21 = v43 != v42;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v33, v25);
    }
  }
  else
  {
    BOOL v21 = 1;
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, a3);
  return v21;
}

double specialized CanvasElement.renderFrame(in:)(uint64_t a1, uint64_t a2)
{
  CanvasElement.coordinateSpace.getter(a1, a2, &v4);
  CGAffineTransform v3 = v4;
  v5.origin.double x = 0.0;
  v5.origin.double y = 0.0;
  v5.size.double width = 1.0;
  v5.size.double height = 1.0;
  *(void *)&double result = (unint64_t)CGRectApplyAffineTransform(v5, &v3);
  return result;
}

unint64_t lazy protocol witness table accessor for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum;
  if (!lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum;
  if (!lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum);
  }
  return result;
}

uint64_t associated type witness table accessor for Tagged_9.Type1 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type Paper and conformance Paper((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
}

uint64_t associated type witness table accessor for Tagged_9.Type2 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type Paper and conformance Paper(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
}

uint64_t associated type witness table accessor for Tagged_9.Type3 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type Paper and conformance Paper(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
}

uint64_t associated type witness table accessor for Tagged_9.Type4 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type Paper and conformance Paper(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
}

uint64_t associated type witness table accessor for Tagged_9.Type5 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type Paper and conformance Paper(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
}

uint64_t associated type witness table accessor for Tagged_9.Type6 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type Paper and conformance Paper((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
}

uint64_t associated type witness table accessor for Tagged_9.Type7 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type Paper and conformance Paper((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t associated type witness table accessor for Tagged_9.Type8 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type Paper and conformance Paper((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
}

uint64_t associated type witness table accessor for Tagged_9.Type9 : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type Paper and conformance Paper(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
}

uint64_t associated type witness table accessor for Tagged_9.Unknown : CRDT in TaggedCanvasElement()
{
  return lazy protocol witness table accessor for type Paper and conformance Paper((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
}

void sub_20C3D1200(void *a1@<X8>)
{
}

uint64_t sub_20C3D121C()
{
  return 16;
}

__n128 sub_20C3D1228(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_20C3D1234@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t result = CanvasElement.isHidden.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result & 1;
  return result;
}

uint64_t sub_20C3D126C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CanvasElement.isHidden.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_20C3D129C()
{
  return 16;
}

__n128 sub_20C3D12A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_20C3D12B4@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  CanvasElement.coordinateSpace.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8), v6);
  long long v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

void sub_20C3D1300(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 16);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  long long v6 = a1[1];
  v7[0] = *a1;
  v7[1] = v6;
  _OWORD v7[2] = a1[2];
  CanvasElement.coordinateSpace.setter((uint64_t)v7, v4, v5);
}

uint64_t sub_20C3D1348()
{
  return 16;
}

__n128 sub_20C3D1354(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of CanvasElement.frame.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CanvasElement.frame.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CanvasElement.rotation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CanvasElement.rotation.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CanvasElement.rotation.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CanvasElement.thumbnail.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CanvasElement.flags.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CanvasElement.flags.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of CanvasElement.flags.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of CanvasElement.shared(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of CanvasElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  long long v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(a10 + 96);
  char v11 = *(unsigned char *)(a4 + 32);
  long long v12 = *(_OWORD *)(a4 + 16);
  v14[0] = *(_OWORD *)a4;
  v14[1] = v12;
  char v15 = v11;
  return v10(a1, a2, a3, v14);
}

uint64_t dispatch thunk of CanvasElement.applyDifference<A, B>(id:in:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 104))();
}

uint64_t dispatch thunk of CanvasElement.renderFrame(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CGAffineTransform v3 = *(uint64_t (**)(_OWORD *))(a3 + 112);
  char v4 = *(unsigned char *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  char v8 = v4;
  return v3(v7);
}

uint64_t dispatch thunk of CanvasElement.indexableTextContent<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 120))();
}

uint64_t dispatch thunk of CanvasElement.apply(_:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  CGAffineTransform v3 = *(uint64_t (**)(_OWORD *))(a3 + 128);
  long long v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  _OWORD v6[2] = a1[2];
  return v3(v6);
}

uint64_t dispatch thunk of CanvasElement.finishDecode(from:assetManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of ContainerCanvasElement.bounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ContainerCanvasElement.bounds.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ContainerCanvasElement.bounds.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ContainerCanvasElement.pdfContentsBounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ContainerCanvasElement.drawing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ContainerCanvasElement.drawing.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ContainerCanvasElement.drawing.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ContainerCanvasElement.subelements.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ContainerCanvasElement.subelements.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ContainerCanvasElement.subelements.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

ValueMetadata *type metadata accessor for TaggedCanvasElement()
{
  return &type metadata for TaggedCanvasElement;
}

unsigned char *storeEnumTagSinglePayload for TaggedCanvasElement.Enum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *__n128 result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C3D16E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TaggedCanvasElement.Enum()
{
  return &type metadata for TaggedCanvasElement.Enum;
}

uint64_t outlined destroy of Ref<PKDrawingStruct>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKDrawingStruct();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Paper and conformance Paper(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of PKDrawingStruct(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PKDrawingStruct();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id PaperKitPDFDocument.init(url:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x263F8EE78];
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies] = MEMORY[0x263F8EE78];
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap;
  char v8 = v1;
  *(void *)&v1[v7] = specialized Dictionary.init(dictionaryLiteral:)(v6);
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap;
  *(void *)&v8[v9] = specialized Dictionary.init(dictionaryLiteral:)(v6);

  URL._bridgeToObjectiveC()(v10);
  long long v12 = v11;
  uint64_t v13 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
  v23.receiver = v8;
  v23.super_class = v13;
  id v14 = objc_msgSendSuper2(&v23, sel_initWithURL_, v12);

  if (v14)
  {

    uint64_t v15 = type metadata accessor for PageId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 1, 1, v15);
    uint64_t v16 = (char *)v14;
    uint64_t v17 = specialized Array.init(repeating:count:)((uint64_t)v5, (uint64_t)objc_msgSend(v16, sel_pageCount));

    uint64_t v18 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
    char v19 = (uint64_t *)&v16[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
    swift_beginAccess();
    *char v19 = v17;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
  }
  return v14;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + 16) = a2;
      uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?)
                     - 8);
      unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, v4 + v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v7 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v8 = *(void *)(v5 + 72);
        uint64_t v9 = v4 + v8 + v6;
        do
        {
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, v9, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          v9 += v8;
          --v7;
        }
        while (v7);
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x263F8EE78];
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    return v4;
  }
  return result;
}

id PaperKitPDFDocument.init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x263F8EE78];
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies] = MEMORY[0x263F8EE78];
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap;
  long long v10 = v2;
  *(void *)&v2[v9] = specialized Dictionary.init(dictionaryLiteral:)(v8);
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap;
  *(void *)&v10[v11] = specialized Dictionary.init(dictionaryLiteral:)(v8);

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v13 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
  v21.receiver = v10;
  v21.super_class = v13;
  id v14 = objc_msgSendSuper2(&v21, sel_initWithData_, isa);

  if (v14)
  {

    uint64_t v15 = type metadata accessor for PageId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
    uint64_t v16 = (char *)v14;
    uint64_t v17 = specialized Array.init(repeating:count:)((uint64_t)v7, (uint64_t)objc_msgSend(v16, sel_pageCount));
    outlined consume of Data._Representation(a1, a2);

    uint64_t v18 = (uint64_t *)&v16[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
    swift_beginAccess();
    *uint64_t v18 = v17;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
  }
  return v14;
}

uint64_t PaperKitPDFDocument.copy(with:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
  v17.receiver = v2;
  v17.super_class = v5;
  objc_msgSendSuper2(&v17, sel_copyWithZone_, a1);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  uint64_t v6 = &v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
  swift_beginAccess();
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = (void *)(v16 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies);
  swift_beginAccess();
  *uint64_t v8 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = &v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap];
  swift_beginAccess();
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = (void *)(v16 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap);
  swift_beginAccess();
  *uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v12 = &v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
  swift_beginAccess();
  uint64_t v13 = *(void *)v12;
  id v14 = (void *)(v16 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap);
  swift_beginAccess();
  *id v14 = v13;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  a2[3] = v5;
  *a2 = v16;
  return result;
}

id PaperKitPDFDocument.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  long long v12 = (char *)v27 - v11;
  if (one-time initialization token for lock != -1) {
    uint64_t v10 = swift_once();
  }
  MEMORY[0x270FA5388](v10);
  v27[-2] = v2;
  v27[-1] = a1;
  MEMORY[0x270FA5388](v13);
  v27[-2] = partial apply for closure #1 in PaperKitPDFDocument.subscript.getter;
  v27[-1] = v14;
  uint64_t v16 = v15 + 4;
  os_unfair_lock_lock(v15 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v17);
  os_unfair_lock_unlock(v16);
  uint64_t v18 = type metadata accessor for PageId(0);
  char v19 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  if (v19(v12, 1, v18) != 1)
  {
    uint64_t v26 = (uint64_t)v12;
    return (id)outlined init with take of PageId(v26, a2, type metadata accessor for PageId);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  id result = objc_msgSend(v3, sel_pageAtIndex_, a1);
  if (result)
  {
    objc_super v21 = result;
    type metadata accessor for PaperKitPDFPage(0);
    uint64_t v22 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v22, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for PageId?);

    if (v19(v8, 1, v18) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v23 = type metadata accessor for PDFPageID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a2, 1, 1, v23);
      uint64_t v24 = a2 + *(int *)(v18 + 20);
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
    }
    uint64_t v26 = (uint64_t)v8;
    return (id)outlined init with take of PageId(v26, a2, type metadata accessor for PageId);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in PaperKitPDFDocument.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies;
  uint64_t result = swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(*(void *)v10 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)v10+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * a2, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v12 = type metadata accessor for PageId(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v14 = 1;
  }
  else
  {
    outlined init with take of PageId((uint64_t)v9, a3, type metadata accessor for PageId);
    uint64_t v14 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, v14, 1, v12);
}

uint64_t PaperKitPDFDocument.subscript.setter(char *a1, unint64_t a2)
{
  uint64_t v70 = type metadata accessor for CRKeyPath();
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v68 = (Swift::UInt *)((char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v72 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v76 = (char *)&v62 - v9;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v10 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  unint64_t v65 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  id v62 = (char *)&v62 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v66 = (uint64_t)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  objc_super v67 = (Swift::UInt *)((char *)&v62 - v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v74 = (uint64_t)&v62 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v62 - v22;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v62 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v73 = (uint64_t)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  long long v31 = (char *)&v62 - v30;
  uint64_t v32 = type metadata accessor for PDFPageID();
  uint64_t v78 = *(void *)(v32 - 8);
  uint64_t v79 = v32;
  MEMORY[0x270FA5388](v32);
  id v63 = (Swift::UInt *)((char *)&v62 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v34);
  uint64_t v64 = (uint64_t)&v62 - v35;
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (Swift::UInt *)((char *)&v62 - v37);
  id v77 = (char *)v2;
  CGRect v39 = (unint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies);
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v40 = *v39;
  if (*(void *)(*v39 + 16) <= a2)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v71 = a1;
  unint64_t v82 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v83 = (char *)a2;
  unint64_t v41 = *(void *)(v15 + 72) * a2;
  uint64_t v80 = v10;
  unint64_t v81 = v41;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v40 + v82 + v41, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v15 = type metadata accessor for PageId(0);
  uint64_t v42 = *(void *)(v15 - 8);
  uint64_t v10 = v42 + 48;
  a1 = *(char **)(v42 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))a1)(v26, 1, v15))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v31, 1, 1, v79);
LABEL_6:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for PDFPageID?);
    goto LABEL_7;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v26, (uint64_t)v31, &demangling cache variable for type metadata for PDFPageID?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v31, 1, v79) == 1) {
    goto LABEL_6;
  }
  outlined init with take of PageId((uint64_t)v31, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v38);
  swift_endAccess();
  outlined destroy of PageId((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_7:
  unint64_t v2 = (unint64_t)v76;
  if (*(void *)(*v39 + 16) <= (unint64_t)v83)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*v39 + v82 + v81, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))a1)(v23, 1, v15))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v26 = (char *)v75;
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56))(v2, 1, 1, v75);
LABEL_11:
    outlined destroy of StocksKitCurrencyCache.Provider?(v2, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v23 = v77;
    goto LABEL_12;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v23[*(int *)(v15 + 20)], v2, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v26 = (char *)v75;
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v80 + 48))(v2, 1, v75) == 1) {
    goto LABEL_11;
  }
  double v60 = v62;
  (*(void (**)(char *, unint64_t, char *))(v80 + 32))(v62, v2, v26);
  uint64_t v38 = v68;
  MEMORY[0x21054B930](v26);
  long long v31 = v77;
  unint64_t v2 = (unint64_t)&v77[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v38);
  (*(void (**)(Swift::UInt *, uint64_t))(v69 + 8))(v38, v70);
  swift_endAccess();
  double v61 = v60;
  uint64_t v23 = v31;
  (*(void (**)(char *, char *))(v80 + 8))(v61, v26);
LABEL_12:
  if (*(void *)(*v39 + 16) <= (unint64_t)v83)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v43 = v74;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*v39 + v82 + v81, v74, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  unsigned int v44 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a1)(v43, 1, v15);
  outlined destroy of StocksKitCurrencyCache.Provider?(v43, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  if (v44 != 1)
  {
    long long v31 = v71;
    uint64_t v38 = v67;
    outlined init with copy of PageId((uint64_t)v71, (uint64_t)v67, type metadata accessor for PageId);
    (*(void (**)(Swift::UInt *, void, uint64_t, uint64_t))(v42 + 56))(v38, 0, 1, v15);
    swift_beginAccess();
    unint64_t v2 = *v39;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *CGRect v39 = v2;
    a1 = v83;
    uint64_t v10 = v80;
    if (result)
    {
LABEL_17:
      if (*(void *)(v2 + 16) > (unint64_t)a1)
      {
        outlined assign with take of PageId?((uint64_t)v38, v2 + v82 + v81);
        swift_endAccess();
        goto LABEL_19;
      }
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
LABEL_31:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    unint64_t v2 = result;
    *CGRect v39 = result;
    goto LABEL_17;
  }
  a1 = v83;
  uint64_t result = (uint64_t)objc_msgSend(v23, sel_pageAtIndex_, v83);
  long long v31 = v71;
  uint64_t v10 = v80;
  if (!result) {
    goto LABEL_33;
  }
  double v46 = (void *)result;
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v47 = swift_dynamicCastClassUnconditional();
  uint64_t v48 = v66;
  outlined init with copy of PageId((uint64_t)v31, v66, type metadata accessor for PageId);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v48, 0, 1, v15);
  uint64_t v49 = v47 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined assign with take of PageId?(v48, v49);
  swift_endAccess();

LABEL_19:
  uint64_t v50 = v73;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v31, v73, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v50, 1, v79) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for PDFPageID?);
  }
  else
  {
    uint64_t v51 = v64;
    outlined init with take of PageId(v50, v64, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v52 = v63;
    outlined init with copy of PageId(v51, (uint64_t)v63, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    unint64_t v53 = &v23[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap];
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = *(void *)v53;
    *(void *)unint64_t v53 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v52, isUniquelyReferenced_nonNull_native);
    *(void *)unint64_t v53 = v84;
    swift_bridgeObjectRelease();
    outlined destroy of PageId((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    swift_endAccess();
    outlined destroy of PageId(v51, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  }
  uint64_t v55 = v72;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v31[*(int *)(v15 + 20)], v72, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v10 + 48))(v55, 1, v26) == 1)
  {
    outlined destroy of PageId((uint64_t)v31, type metadata accessor for PageId);
    return outlined destroy of StocksKitCurrencyCache.Provider?(v55, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  else
  {
    uint64_t v56 = v65;
    (*(void (**)(char *, uint64_t, char *))(v10 + 32))(v65, v55, v26);
    uint64_t v57 = (uint64_t)v68;
    MEMORY[0x21054B930](v26);
    double v58 = &v23[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
    swift_beginAccess();
    char v59 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = *(void *)v58;
    *(void *)double v58 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v57, v59);
    *(void *)double v58 = v84;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v57, v70);
    swift_endAccess();
    outlined destroy of PageId((uint64_t)v31, type metadata accessor for PageId);
    return (*(uint64_t (**)(char *, char *))(v10 + 8))(v56, v26);
  }
}

uint64_t one-time initialization function for lock()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  static PaperKitPDFDocument.lock = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  static PaperKitPDFPage.lock = result;
  return result;
}

void __swiftcall PaperKitPDFDocument.page(at:)(PDFPage_optional *__return_ptr retstr, Swift::Int at)
{
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for PaperKitPDFDocument();
  id v4 = [(PDFPage_optional *)&v10 pageAtIndex:at];
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for PaperKitPDFPage(0);
    id v4 = (id)swift_dynamicCastClass();
    if (!v4) {
  }
    }
  if (one-time initialization token for lock != -1) {
    id v4 = (id)swift_once();
  }
  MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = v7 + 4;
  os_unfair_lock_lock(v7 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v9);
  os_unfair_lock_unlock(v8);
}

void closure #1 in PaperKitPDFDocument.page(at:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v28 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = type metadata accessor for PageId(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v19 = a2 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies;
    swift_beginAccess();
    if ((a3 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v20 = *(void **)v19;
      if (*(void *)(*(void *)v19 + 16) > a3)
      {
        unint64_t v27 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        uint64_t v21 = *(void *)(v7 + 72) * a3;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v20 + v27 + v21, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          return;
        }
        uint64_t v26 = v21;
        outlined init with take of PageId((uint64_t)v14, (uint64_t)v18, type metadata accessor for PageId);
        outlined init with copy of PageId((uint64_t)v18, (uint64_t)v11, type metadata accessor for PageId);
        uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
        v22(v11, 0, 1, v15);
        uint64_t v23 = (uint64_t)a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
        swift_beginAccess();
        uint64_t v25 = a1;
        outlined assign with take of PageId?((uint64_t)v11, v23);
        swift_endAccess();
        uint64_t v11 = v28;
        v22(v28, 1, 1, v15);
        swift_beginAccess();
        a1 = *(void **)v19;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v19 = a1;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_12:
    a1 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()((unint64_t)a1);
    *(void *)uint64_t v19 = a1;
LABEL_7:
    if (a1[2] <= a3)
    {
      __break(1u);
    }
    else
    {
      outlined assign with take of PageId?((uint64_t)v11, (uint64_t)a1 + v27 + v26);
      swift_endAccess();

      outlined destroy of PageId((uint64_t)v18, type metadata accessor for PageId);
    }
  }
}

Swift::Void __swiftcall PaperKitPDFDocument.removePage(at:)(Swift::Int at)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v34 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v37 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v33 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PDFPageID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (Swift::UInt *)((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for PageId(0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  PaperKitPDFDocument.subscript.getter(at, (uint64_t)v22);
  uint64_t v23 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
  v41.receiver = v1;
  v41.super_class = v23;
  objc_msgSendSuper2(&v41, sel_removePageAtIndex_, at);
  swift_beginAccess();
  Swift::Int v40 = at;
  specialized Array.remove(at:)(at, (uint64_t)v19);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  swift_endAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v22, (uint64_t)v12, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for PDFPageID?);
  }
  else
  {
    outlined init with take of PageId((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(v16);
    swift_endAccess();
    outlined destroy of PageId((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  }
  uint64_t v24 = v37;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v22[*(int *)(v20 + 20)], v37, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v26 = v38;
  uint64_t v25 = v39;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v24, 1, v39) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v24, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  else
  {
    unint64_t v27 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v33, v24, v25);
    uint64_t v28 = (uint64_t)v34;
    MEMORY[0x21054B930](v25);
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(v28);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v28, v36);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v25);
  }
  uint64_t v29 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap];
  swift_beginAccess();
  uint64_t v30 = v40;
  *uint64_t v29 = specialized _NativeDictionary.mapValues<A>(_:)(*v29, v40);
  swift_bridgeObjectRelease();
  long long v31 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
  swift_beginAccess();
  *long long v31 = specialized _NativeDictionary.mapValues<A>(_:)(*v31, v30);
  swift_bridgeObjectRelease();
  outlined destroy of PageId((uint64_t)v22, type metadata accessor for PageId);
}

Swift::Void __swiftcall PaperKitPDFDocument.insert(_:at:)(PDFPage *_, Swift::Int at)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  double v58 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v61 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v57 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v64 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PDFPageID();
  uint64_t v62 = *(void *)(v15 - 8);
  uint64_t v63 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v56 = (Swift::UInt *)((char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  uint64_t v59 = (uint64_t)&v54 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<PageId?>);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  unint64_t v27 = (char *)&v54 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v54 - v29;
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v31 = swift_dynamicCastClass();
  double v60 = v11;
  unint64_t v65 = v24;
  if (v31)
  {
    uint64_t v32 = v31 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v32, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  }
  else
  {
    uint64_t v33 = type metadata accessor for PageId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v30, 1, 1, v33);
  }
  uint64_t v34 = &v3[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
  swift_beginAccess();
  if (*(void *)(*(void *)v34 + 16) < at)
  {
    __break(1u);
  }
  else if ((at & 0x8000000000000000) == 0)
  {
    uint64_t v54 = v7;
    uint64_t v55 = v6;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v30, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    specialized Array.replaceSubrange<A>(_:with:)(at, at, (uint64_t)v21);
    swift_endAccess();
    uint64_t v35 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
    v68.receiver = v3;
    v68.super_class = v35;
    [(PDFPage *)&v68 insertPage:_ atIndex:at];
    uint64_t v36 = (uint64_t *)&v3[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap];
    swift_beginAccess();
    *uint64_t v36 = specialized _NativeDictionary.mapValues<A>(_:)(*v36, at);
    swift_bridgeObjectRelease();
    uint64_t v37 = (uint64_t *)&v3[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
    swift_beginAccess();
    *uint64_t v37 = specialized _NativeDictionary.mapValues<A>(_:)(*v37, at);
    swift_bridgeObjectRelease();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v30, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v38 = type metadata accessor for PageId(0);
    uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48);
    if (v39((uint64_t)v27, 1, v38) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v40 = v64;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v64, 1, 1, v63);
    }
    else
    {
      uint64_t v40 = v64;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v27, v64, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of PageId((uint64_t)v27, type metadata accessor for PageId);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v40, 1, v63) != 1)
      {
        uint64_t v41 = v40;
        uint64_t v42 = v59;
        outlined init with take of PageId(v41, v59, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        uint64_t v43 = v56;
        outlined init with copy of PageId(v42, (uint64_t)v56, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v67 = *v36;
        *uint64_t v36 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(at, v43, isUniquelyReferenced_nonNull_native);
        *uint64_t v36 = v67;
        swift_bridgeObjectRelease();
        outlined destroy of PageId((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        swift_endAccess();
        outlined destroy of PageId(v59, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_11:
        uint64_t v45 = v61;
        uint64_t v46 = (uint64_t)v60;
        uint64_t v47 = (uint64_t)v65;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v30, (uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        if (v39(v47, 1, v38) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v47, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v46, 1, 1, v66);
        }
        else
        {
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v47 + *(int *)(v38 + 20), v46, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          outlined destroy of PageId(v47, type metadata accessor for PageId);
          uint64_t v48 = v66;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v46, 1, v66) != 1)
          {
            uint64_t v51 = v57;
            (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v57, v46, v48);
            uint64_t v52 = (uint64_t)v58;
            MEMORY[0x21054B930](v48);
            swift_beginAccess();
            char v53 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v67 = *v37;
            *uint64_t v37 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(at, v52, v53);
            *uint64_t v37 = v67;
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v55);
            swift_endAccess();
            (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v48);
            uint64_t v49 = (uint64_t *)&demangling cache variable for type metadata for PageId?;
            uint64_t v50 = (uint64_t)v30;
            goto LABEL_16;
          }
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        uint64_t v49 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
        uint64_t v50 = v46;
LABEL_16:
        outlined destroy of StocksKitCurrencyCache.Provider?(v50, v49);
        return;
      }
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v40, &demangling cache variable for type metadata for PDFPageID?);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall PaperKitPDFDocument.exchangePage(at:withPageAt:)(Swift::Int at, Swift::Int withPageAt)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  unint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = &v19[-v12];
  uint64_t v14 = (objc_class *)type metadata accessor for PaperKitPDFDocument();
  v20.receiver = v2;
  v20.super_class = v14;
  objc_msgSendSuper2(&v20, sel_exchangePageAtIndex_withPageAtIndex_, at, withPageAt);
  uint64_t v15 = (unint64_t *)&v2[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies];
  swift_beginAccess();
  if (at < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v16 = *v15;
  unint64_t v4 = *(void *)(*v15 + 16);
  if (v4 <= at)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v2 = (char *)((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v17 = &v2[v16];
  unint64_t v8 = *(void *)(v8 + 72);
  Swift::Int v3 = v8 * at;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v2[v16 + v8 * at], (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  if (v4 > withPageAt)
  {
    unint64_t v4 = v8 * withPageAt;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v17[v8 * withPageAt], (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    swift_beginAccess();
    unint64_t v8 = *v15;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v15 = v8;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
  *uint64_t v15 = v8;
LABEL_5:
  if (*(void *)(v8 + 16) <= (unint64_t)at)
  {
    __break(1u);
  }
  else
  {
    outlined assign with take of PageId?((uint64_t)v10, (uint64_t)&v2[v8 + v3]);
    if (*(void *)(*v15 + 16) > (unint64_t)withPageAt)
    {
      outlined assign with copy of PageId?((uint64_t)v13, (uint64_t)&v2[*v15 + v4]);
      swift_endAccess();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      return;
    }
  }
  __break(1u);
}

uint64_t PaperKitPDFDocument.finishLoading(as:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v74 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v72 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v71 = (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v73 = (uint64_t)&v64 - v6;
  uint64_t v7 = type metadata accessor for PDFPageID();
  uint64_t v65 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (Swift::UInt *)((char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (unint64_t *)((char *)&v64 - v12);
  id v14 = objc_msgSend(v1, sel_isLocked, v11);
  if (!v14) {
    goto LABEL_5;
  }
  if (one-time initialization token for shared != -1) {
    goto LABEL_49;
  }
  while (1)
  {
    MEMORY[0x270FA5388](v14);
    *(&v64 - 2) = v15;
    *(&v64 - 1) = v74;
    MEMORY[0x270FA5388](v16);
    *(&v64 - 2) = (uint64_t)partial apply for closure #1 in PasswordManager.password(for:);
    *(&v64 - 1) = v17;
    uint64_t v19 = v18 + 4;
    os_unfair_lock_lock(v18 + 4);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(&v76);
    os_unfair_lock_unlock(v19);
    if (!*((void *)&v76 + 1)) {
      break;
    }
    objc_super v20 = (void *)MEMORY[0x21054D080](v76, *((void *)&v76 + 1));
    swift_bridgeObjectRelease();
    unsigned __int8 v21 = objc_msgSend(v2, sel_unlockWithPassword_, v20);

    if ((v21 & 1) == 0) {
      break;
    }
LABEL_5:
    id v22 = objc_msgSend(v2, sel_pageCount);
    uint64_t v23 = (void *)((char *)v2 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageProxies);
    swift_beginAccess();
    unint64_t v24 = *v23;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v23 = v24;
    if (!isUniquelyReferenced_nonNull_native || (uint64_t)v22 > *(void *)(v24 + 24) >> 1)
    {
      if (*(void *)(v24 + 16) <= (uint64_t)v22) {
        int64_t v26 = (int64_t)v22;
      }
      else {
        int64_t v26 = *(void *)(v24 + 16);
      }
      unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v26, 0, v24);
    }
    *uint64_t v23 = v24;
    swift_endAccess();
    unint64_t v27 = (unint64_t)objc_msgSend(v2, sel_pageCount);
    if ((v27 & 0x8000000000000000) == 0)
    {
      unint64_t v28 = v27;
      if (!v27) {
        return 1;
      }
      unint64_t v2 = (void *)((char *)v2 + OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap);
      uint64_t v70 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56);
      unint64_t v29 = 0;
      uint64_t v69 = type metadata accessor for CRAsset();
      uint64_t v30 = *(void *)(v69 - 8);
      uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
      uint64_t v67 = v30 + 16;
      objc_super v68 = v31;
      uint64_t v66 = v7;
      while (2)
      {
        if (v28 == v29)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          break;
        }
        v68((char *)v13 + *(int *)(v7 + 20), v74, v69);
        *uint64_t v13 = v29;
        if (*(void *)(*v23 + 16) >= v29)
        {
          uint64_t v40 = v71;
          outlined init with copy of PageId((uint64_t)v13, v71, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          (*v70)(v40, 0, 1, v7);
          uint64_t v41 = type metadata accessor for PageId(0);
          uint64_t v42 = v40 + *(int *)(v41 + 20);
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 1, 1, v43);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 0, 1, v41);
          swift_beginAccess();
          unint64_t v44 = *v23;
          char v45 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v23 = v44;
          if ((v45 & 1) == 0)
          {
            unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
            *uint64_t v23 = v44;
          }
          if (v29 >= *(void *)(v44 + 16)) {
            goto LABEL_46;
          }
          outlined assign with take of PageId?(v71, v44+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(void *)(v72 + 72) * v29);
        }
        else
        {
          uint64_t v32 = v73;
          outlined init with copy of PageId((uint64_t)v13, v73, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          (*v70)(v32, 0, 1, v7);
          uint64_t v33 = type metadata accessor for PageId(0);
          uint64_t v34 = v32 + *(int *)(v33 + 20);
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 0, 1, v33);
          swift_beginAccess();
          unint64_t v36 = *v23;
          char v37 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v23 = v36;
          if ((v37 & 1) == 0)
          {
            unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1, v36);
            *uint64_t v23 = v36;
          }
          unint64_t v39 = *(void *)(v36 + 16);
          unint64_t v38 = *(void *)(v36 + 24);
          if (v39 >= v38 >> 1)
          {
            unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v36);
            *uint64_t v23 = v36;
          }
          *(void *)(v36 + 16) = v39 + 1;
          outlined init with take of PageId?(v73, v36+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(void *)(v72 + 72) * v39);
        }
        swift_endAccess();
        outlined init with copy of PageId((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        swift_beginAccess();
        int v46 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v75 = (void *)*v2;
        uint64_t v47 = v75;
        void *v2 = 0x8000000000000000;
        unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
        uint64_t v50 = v47[2];
        BOOL v51 = (v48 & 1) == 0;
        uint64_t v52 = v50 + v51;
        if (__OFADD__(v50, v51)) {
          goto LABEL_45;
        }
        uint64_t v7 = v48;
        if (v47[3] >= v52)
        {
          if (v46)
          {
            uint64_t v55 = v75;
            if ((v48 & 1) == 0) {
              goto LABEL_34;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            uint64_t v55 = v75;
            if ((v7 & 1) == 0) {
              goto LABEL_34;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v46);
          unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
          if ((v7 & 1) != (v54 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v49 = v53;
          uint64_t v55 = v75;
          if ((v7 & 1) == 0)
          {
LABEL_34:
            v55[(v49 >> 6) + 8] |= 1 << v49;
            outlined init with copy of PageId((uint64_t)v9, v55[6] + *(void *)(v65 + 72) * v49, (uint64_t (*)(void))type metadata accessor for PDFPageID);
            *(void *)(v55[7] + 8 * v49) = v29;
            uint64_t v56 = v55[2];
            BOOL v57 = __OFADD__(v56, 1);
            uint64_t v58 = v56 + 1;
            if (v57) {
              goto LABEL_47;
            }
            v55[2] = v58;
            goto LABEL_15;
          }
        }
        *(void *)(v55[7] + 8 * v49) = v29;
LABEL_15:
        ++v29;
        void *v2 = v55;
        swift_bridgeObjectRelease();
        outlined destroy of PageId((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        swift_endAccess();
        outlined destroy of PageId((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        uint64_t v7 = v66;
        if (v28 == v29) {
          return 1;
        }
        continue;
      }
    }
    __break(1u);
LABEL_49:
    id v14 = (id)swift_once();
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v60 = type metadata accessor for Logger();
  __swift_project_value_buffer(v60, (uint64_t)logger);
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v63 = 0;
    _os_log_impl(&dword_20C2D7000, v61, v62, "Failed to unlock PDF file", v63, 2u);
    MEMORY[0x210550270](v63, -1, -1);
  }

  return 0;
}

uint64_t static PaperKitPDFDocument._load(_:assetManager:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRAsset();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, a1, v4, v10);
  swift_retain();
  CRAsset.init(url:coordinated:assetManager:)();
  id v13 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
  URL._bridgeToObjectiveC()(v14);
  uint64_t v16 = v15;
  id v17 = objc_msgSend(v13, sel_initWithURL_, v15);

  if (v17)
  {
    if (PaperKitPDFDocument.finishLoading(as:)((uint64_t)v12))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
      uint64_t v19 = (char *)a2 + *(int *)(v18 + 48);
      *a2 = v17;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v19, v12, v8);
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a2, 0, 1, v18);
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a2, 1, 1, v21);
}

uint64_t closure #1 in static PaperKitPDFDocument._load(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  return MEMORY[0x270FA2498](closure #1 in static PaperKitPDFDocument._load(_:), 0, 0);
}

uint64_t closure #1 in static PaperKitPDFDocument._load(_:)()
{
  CRAsset.assetManager.getter();
  CRAssetManager.encryptionDelegate.getter();
  swift_release();
  if (*(void *)(v0 + 80))
  {
    outlined init with take of FindResult((long long *)(v0 + 56), v0 + 16);
    uint64_t v5 = Data.init(contentsOf:options:)();
    unint64_t v7 = v6;
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v8 = dispatch thunk of EncryptionDelegate.decrypt(_:)();
    unint64_t v10 = v9;
    id v11 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v13 = objc_msgSend(v11, sel_initWithData_, isa);
    outlined consume of Data._Representation(v8, v10);

    outlined consume of Data._Representation(v5, v7);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
    id v1 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
    URL._bridgeToObjectiveC()(v2);
    uint64_t v4 = v3;
    id v13 = objc_msgSend(v1, sel_initWithURL_, v3);
  }
  **(void **)(v0 + 96) = v13;
  id v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

unint64_t PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  uint64_t v74 = a4;
  uint64_t v73 = a1;
  uint64_t v64 = type metadata accessor for CRKeyPath();
  uint64_t v10 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v63 = &v48[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v75 = &v48[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPage?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v52 = &v48[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = &v48[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v69 = &v48[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v21 = *(void *)(v78 - 8);
  double v22 = MEMORY[0x270FA5388](v78);
  unint64_t v24 = &v48[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v62 = *a2;
  uint64_t v61 = *a3;
  uint64_t v60 = a3[1];
  uint64_t v59 = a3[2];
  uint64_t v58 = a3[3];
  uint64_t v57 = a3[4];
  uint64_t v56 = a3[5];
  uint64_t v55 = a3[6];
  uint64_t v54 = a3[7];
  uint64_t v53 = a3[8];
  int v25 = *((unsigned __int8 *)a3 + 74);
  int v26 = *((unsigned __int16 *)a3 + 36);
  id v77 = v6;
  unint64_t result = (unint64_t)objc_msgSend(v6, sel_pageCount, v22);
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
  uint64_t v72 = a5;
  uint64_t v28 = (uint64_t)v69;
  if (result)
  {
    unint64_t v29 = 0;
    long long v76 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    uint64_t v71 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
    objc_super v68 = (void (**)(unsigned char *, uint64_t, uint64_t))(v21 + 32);
    uint64_t v67 = (void (**)(unsigned char *, uint64_t))(v21 + 8);
    uint64_t v50 = (void (**)(unsigned char *, uint64_t))(v10 + 8);
    unsigned int v51 = v26 | (v25 << 16);
    unsigned int v49 = HIWORD(v51);
    uint64_t v70 = v24;
    while (1)
    {
      if ((char *)result == v29)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      }
      unint64_t v31 = result;
      unint64_t result = (unint64_t)objc_msgSend(v77, sel_pageAtIndex_, v29);
      if (!result) {
        goto LABEL_25;
      }
      uint64_t v32 = (void *)result;
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v33 = swift_dynamicCastClassUnconditional();
      uint64_t v34 = v33 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v34, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v35 = type metadata accessor for PageId(0);
      int v36 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v18, 1, v35);
      uint64_t v37 = v78;
      if (v36) {
        break;
      }
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v18[*(int *)(v35 + 20)], v28, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      if ((*v71)(v28, 1, v37) == 1) {
        goto LABEL_12;
      }
      (*v68)(v24, v28, v37);
      unint64_t v38 = v75;
      WeakTagged_3.tagged3.getter();
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>);
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v75, &demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
LABEL_19:
        uint64_t v45 = v78;
        int v46 = v70;
        WeakTagged_3.subscript.getter();
        uint64_t v47 = v84;
        if (v84)
        {
          uint64_t v65 = v85;
          uint64_t v66 = __swift_project_boxed_opaque_existential_1(&v83, v84);
          uint64_t v30 = v63;
          MEMORY[0x21054B930](v45);
          uint64_t v82 = v62;
          v79[0] = v61;
          v79[1] = v60;
          v79[2] = v59;
          v79[3] = v58;
          v79[4] = v57;
          v79[5] = v56;
          v79[6] = v55;
          v79[7] = v54;
          v79[8] = v53;
          char v81 = v49;
          __int16 v80 = v51;
          (*(void (**)(uint64_t, unsigned char *, uint64_t *, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 128))(v33, v30, &v82, v73, v79, v74, v72, v47, v65);

          (*v50)(v30, v64);
          (*v67)(v46, v45);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
        }
        else
        {
          (*v67)(v46, v45);

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v83, &demangling cache variable for type metadata for PaperPage?);
        }
        uint64_t v28 = (uint64_t)v69;
        unint64_t result = v31;
        unint64_t v24 = v70;
        goto LABEL_6;
      }
      uint64_t v41 = (uint64_t)v52;
      uint64_t v42 = v75;
      WeakRef.subscript.getter();
      (*(void (**)(unsigned char *, uint64_t))(v40 + 8))(v42, v39);
      uint64_t v43 = type metadata accessor for PaperDocumentPage();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v41, 1, v43) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v41, &demangling cache variable for type metadata for PaperDocumentPage?);
        goto LABEL_19;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
      CRRegister.wrappedValue.getter();
      char v44 = v79[0];
      outlined destroy of PageId(v41, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
      if ((v44 & 0x20) == 0) {
        goto LABEL_19;
      }

      unint64_t v24 = v70;
      (*v67)(v70, v78);
      uint64_t v28 = (uint64_t)v69;
LABEL_13:
      unint64_t result = v31;
LABEL_6:
      if ((char *)result == ++v29) {
        return result;
      }
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    (*v76)(v28, 1, 1, v37);
LABEL_12:

    outlined destroy of StocksKitCurrencyCache.Provider?(v28, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    goto LABEL_13;
  }
  return result;
}

id PaperKitPDFDocument.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperKitPDFDocument();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PaperKitPDFDocument()
{
  return self;
}

uint64_t outlined assign with take of PageId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PageId(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of PageId(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in PaperKitPDFDocument.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PaperKitPDFDocument.subscript.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1)
{
  return specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t outlined assign with copy of PageId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in PaperKitPDFDocument.page(at:)()
{
  closure #1 in PaperKitPDFDocument.page(at:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t outlined destroy of PageId(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of PageId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PasswordManager.password(for:)@<X0>(void *a1@<X8>)
{
  return closure #1 in PasswordManager.password(for:)(*(void *)(v1 + 16), a1);
}

double partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<D0>(_OWORD *a1@<X8>)
{
  return specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(*(void (**)(long long *__return_ptr))(v1 + 16), a1);
}

uint64_t specialized static PaperKitPDFDocument._load(_:)(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return MEMORY[0x270FA2498](specialized static PaperKitPDFDocument._load(_:), 0, 0);
}

uint64_t specialized static PaperKitPDFDocument._load(_:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PaperKitPDFDocument?);
  *uint64_t v3 = v0;
  v3[1] = specialized static PaperKitPDFDocument._load(_:);
  return MEMORY[0x270F17D68](v0 + 2, 1, &async function pointer to partial apply for closure #1 in static PaperKitPDFDocument._load(_:), v2, v4);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized static PaperKitPDFDocument._load(_:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t (*v4)(void *);
  uint64_t v6;

  uint64_t v1 = (void *)v0[2];
  if ((unint64_t)v1 >= 2)
  {
    uint64_t v2 = v0[3];
    uint64_t v3 = v1;
    LOBYTE(v2) = PaperKitPDFDocument.finishLoading(as:)(v2);
    outlined consume of PaperKitPDFDocument??(v1);
    if (v2) {
      goto LABEL_5;
    }
    outlined consume of PaperKitPDFDocument??(v1);
  }
  uint64_t v1 = 0;
LABEL_5:
  uint64_t v4 = (uint64_t (*)(void *))v0[1];
  return v4(v1);
}

uint64_t partial apply for closure #1 in static PaperKitPDFDocument._load(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  v7[13] = a2;
  v7[14] = v6;
  v7[12] = a1;
  return MEMORY[0x270FA2498](closure #1 in static PaperKitPDFDocument._load(_:), 0, 0);
}

void outlined consume of PaperKitPDFDocument??(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

uint64_t one-time initialization function for multipeerLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, multipeerLogger);
  __swift_project_value_buffer(v0, (uint64_t)multipeerLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t one-time initialization function for canvasGenerationToolController()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.canvasGenerationToolController);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.canvasGenerationToolController);
  return Logger.init(subsystem:category:)();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundTokenProvider.authenticate()(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 8) + **(int **)(a2 + 8));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of MagicGenerativePlaygroundTokenProvider.authenticate();
  return v7(a1, a2);
}

{
  uint64_t *v2;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  unint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ResizeHandleType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ResizeHandleType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

id ControlHandleView.init(elementView:controlPoint:)(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = *a2;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint) = v4;
  if ((v4 - 1) > 8) {
    char v5 = 0;
  }
  else {
    char v5 = byte_20C8379FE[(char)(v4 - 1)];
  }
  id v6 = CanvasElementResizeHandle.init(_:category:enabled:)(0, v5, 1);
  uint64_t v7 = one-time initialization token for paperKitBundle;
  id v8 = v6;
  if (v7 != -1) {
    swift_once();
  }
  v21._uint64_t countAndFlagsBits = 0xD000000000000029;
  v21._object = (void *)0x800000020C8534D0;
  v9._uint64_t countAndFlagsBits = 0x206C6F72746E6F43;
  v9._object = (void *)0xEE00656C646E6148;
  v10.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v10.value._object = (void *)0xEB00000000656C62;
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, paperKitBundle, v11, v21)._countAndFlagsBits;
  uint64_t v13 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setAccessibilityLabel_, v13);

  unint64_t v14 = 0xD000000000000015;
  unint64_t v15 = 0x800000020C853620;
  switch(v4)
  {
    case 1:
      uint64_t v16 = "LineMiddleControlPoint";
      goto LABEL_17;
    case 2:
      unint64_t v14 = 0xD000000000000013;
      uint64_t v17 = "LineEndControlPoint";
      goto LABEL_13;
    case 3:
      unint64_t v14 = 0xD00000000000001FLL;
      uint64_t v17 = "CalloutTailPositionControlPoint";
      goto LABEL_13;
    case 4:
      unint64_t v14 = 0xD00000000000001BLL;
      uint64_t v17 = "CalloutTailSizeControlPoint";
      goto LABEL_13;
    case 5:
      unint64_t v14 = 0xD00000000000001DLL;
      uint64_t v17 = "RoundedRectRadiusControlPoint";
      goto LABEL_13;
    case 6:
      unint64_t v14 = 0xD000000000000018;
      uint64_t v17 = "PolygonSidesControlPoint";
LABEL_13:
      unint64_t v15 = (unint64_t)(v17 - 32) | 0x8000000000000000;
      break;
    case 7:
      uint64_t v16 = "StarPointsControlPoint";
      goto LABEL_17;
    case 8:
      uint64_t v16 = "StarRadiusControlPoint";
      goto LABEL_17;
    case 9:
      uint64_t v16 = "ArrowShapeControlPoint";
LABEL_17:
      unint64_t v15 = (unint64_t)(v16 - 32) | 0x8000000000000000;
      unint64_t v14 = 0xD000000000000016;
      break;
    default:
      break;
  }
  id v18 = v8;
  uint64_t v19 = (void *)MEMORY[0x21054D080](v14, v15);
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_setAccessibilityIdentifier_, v19);

  return v18;
}

id CanvasElementResizeHandle.init(_:category:enabled:)(char a1, char a2, char a3)
{
  v3[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] = a1;
  v3[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category] = a2;
  v3[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled] = a3;
  char v5 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
  id v6 = objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
  v6[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakInit();
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
  v35.receiver = v6;
  v35.super_class = v5;
  uint64_t v7 = v3;
  id v8 = objc_msgSendSuper2(&v35, sel_initWithTarget_action_, 0, 0);
  v8[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakAssign();
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer] = v8;

  if (one-time initialization token for resizeHandleSize != -1) {
    swift_once();
  }
  double v9 = *(double *)&static UIConstants.resizeHandleSize;
  v34.receiver = v7;
  v34.super_class = (Class)type metadata accessor for CanvasElementResizeHandle();
  id v10 = objc_msgSendSuper2(&v34, sel_initWithFrame_, 0.0, 0.0, v9, v9);
  id v11 = v10;
  if (a3)
  {
    id v12 = v10;
    id v13 = objc_msgSend(v12, sel_layer);
    LODWORD(v14) = 1045220557;
    objc_msgSend(v13, sel_setShadowOpacity_, v14);

    id v15 = objc_msgSend(v12, sel_layer);
    objc_msgSend(v15, sel_setShadowOffset_, 0.0, 0.0);

    id v16 = objc_msgSend(v12, sel_layer);
    id v17 = objc_msgSend(self, sel_mainScreen);
    objc_msgSend(v17, sel_scale);
    double v19 = v18;

    objc_msgSend(v16, sel_setShadowRadius_, 8.0 / v19);
    if (one-time initialization token for resizeHandleInset != -1) {
      swift_once();
    }
    double v20 = *(double *)&static UIConstants.resizeHandleInset;
    if (one-time initialization token for resizeHandleEdgeWidth != -1) {
      swift_once();
    }
    CGFloat v21 = v20 + *(double *)&static UIConstants.resizeHandleEdgeWidth * -0.5;
    id v22 = objc_msgSend(v12, sel_layer);
    objc_msgSend(v12, sel_bounds);
    CGRect v37 = CGRectInset(v36, v21, v21);
    id v23 = objc_msgSend(self, sel_bezierPathWithOvalInRect_, v37.origin.x, v37.origin.y, v37.size.width, v37.size.height);
    id v24 = objc_msgSend(v23, sel_CGPath);

    objc_msgSend(v22, sel_setShadowPath_, v24);
    objc_msgSend(v12, sel_setIsAccessibilityElement_, 1);
    id v25 = v12;
    int v26 = (void *)MEMORY[0x21054D080](0xD00000000000002DLL, 0x800000020C853640);
    objc_msgSend(v25, sel_setAccessibilityIdentifier_, v26);

    unint64_t v27 = (char *)v25;
    uint64_t v28 = CanvasElementResizeHandle.accessibilityLabel()();
    if (v29)
    {
      uint64_t v30 = (void *)MEMORY[0x21054D080](v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v30 = 0;
    }
    objc_msgSend(v27, sel_setAccessibilityLabel_, v30);

    objc_msgSend(v27, sel_addGestureRecognizer_, *(void *)&v27[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer]);
    id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82A70]), sel_initWithDelegate_, v27);
    objc_msgSend(v27, sel_addInteraction_, v31);
    id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82B78]), sel_initWithDelegate_, v27);
    objc_msgSend(v27, sel_addInteraction_, v32);
  }
  return v11;
}

BOOL ControlHandleView.needsRotation.getter()
{
  unint64_t v0 = ControlHandleView.pointerAccessories()();
  if (v0 >> 62) {
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v1 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v1 < 4;
}

uint64_t ControlHandleView.pointerAccessories()()
{
  uint64_t v1 = type metadata accessor for UIPointerAccessory.Position();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = MEMORY[0x270FA5388](v1);
  char v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint);
  if (v6 == 8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_20C8344D0;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
    static UIPointerAccessory.Position.bottomLeft.getter();
    uint64_t v24 = static UIPointerAccessory.arrow(_:)();
    id v25 = *(void (**)(char *, uint64_t))(v2 + 8);
    v25(v5, v1);
    *(void *)(v23 + 32) = v24;
    static UIPointerAccessory.Position.topRight.getter();
LABEL_21:
    uint64_t v27 = static UIPointerAccessory.arrow(_:)();
    v25(v5, v1);
    *(void *)(v23 + 40) = v27;
LABEL_23:
    v42[0] = v23;
    specialized Array._endMutation()();
    return v42[0];
  }
  if (v6 == 5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_20C8344D0;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
    static UIPointerAccessory.Position.left.getter();
    uint64_t v26 = static UIPointerAccessory.arrow(_:)();
    id v25 = *(void (**)(char *, uint64_t))(v2 + 8);
    v25(v5, v1);
    *(void *)(v23 + 32) = v26;
    static UIPointerAccessory.Position.right.getter();
    goto LABEL_21;
  }
  if (v6 != 4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_20C8344C0;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
    static UIPointerAccessory.Position.top.getter();
    uint64_t v28 = static UIPointerAccessory.arrow(_:)();
    uint64_t v29 = *(void (**)(char *, uint64_t))(v2 + 8);
    v29(v5, v1);
    *(void *)(v23 + 32) = v28;
    static UIPointerAccessory.Position.right.getter();
    uint64_t v30 = static UIPointerAccessory.arrow(_:)();
    v29(v5, v1);
    *(void *)(v23 + 40) = v30;
    static UIPointerAccessory.Position.bottom.getter();
    uint64_t v31 = static UIPointerAccessory.arrow(_:)();
    v29(v5, v1);
    *(void *)(v23 + 48) = v31;
    static UIPointerAccessory.Position.left.getter();
    uint64_t v32 = static UIPointerAccessory.arrow(_:)();
    v29(v5, v1);
    *(void *)(v23 + 56) = v32;
    goto LABEL_23;
  }
  uint64_t v7 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_elementView, v3);
  if (!v7) {
    return MEMORY[0x263F8EE78];
  }
  id v8 = v7;
  v42[0] = 0x3FF0000000000000;
  v42[1] = 0;
  v42[2] = 0;
  v42[3] = 0x3FF0000000000000;
  v42[4] = 0;
  v42[5] = 0;
  LOBYTE(v41) = 3;
  double v9 = (*(double (**)(uint64_t *, void *, void, uint64_t))((*MEMORY[0x263F8EED0] & *v7) + 0x158))(&v41, v42, 0, 1);
  double v11 = v10;
  v43.origin.double x = 0.0;
  v43.origin.double y = 0.0;
  v43.size.double width = 1.0;
  v43.size.double height = 1.0;
  double MinX = CGRectGetMinX(v43);
  v44.origin.double x = 0.0;
  v44.origin.double y = 0.0;
  v44.size.double width = 1.0;
  v44.size.double height = 1.0;
  double MaxX = CGRectGetMaxX(v44);
  if (MaxX >= v9) {
    double MaxX = v9;
  }
  if (MinX <= MaxX) {
    double MinX = MaxX;
  }
  v45.origin.double x = 0.0;
  v45.origin.double y = 0.0;
  v45.size.double width = 1.0;
  v45.size.double height = 1.0;
  double MinY = CGRectGetMinY(v45);
  v46.origin.double x = 0.0;
  v46.origin.double y = 0.0;
  v46.size.double width = 1.0;
  v46.size.double height = 1.0;
  double MaxY = CGRectGetMaxY(v46);
  if (MaxY >= v11) {
    double MaxY = v11;
  }
  if (MinY > MaxY) {
    double MaxY = MinY;
  }
  double v16 = round(MinX + -0.5 + MinX + -0.5) * 0.5;
  double v17 = round(MaxY + -0.5 + MaxY + -0.5) * 0.5;
  if ((v16 != -0.5 || v17 != 0.0) && (v16 != 0.5 || v17 != 0.0))
  {
    if (v16 == 0.0 && (v17 == -0.5 || v17 == 0.5))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_20C8344D0;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
      static UIPointerAccessory.Position.left.getter();
      uint64_t v35 = static UIPointerAccessory.arrow(_:)();
      double v20 = *(void (**)(char *, uint64_t))(v2 + 8);
      v20(v5, v1);
      *(void *)(v18 + 32) = v35;
      static UIPointerAccessory.Position.right.getter();
      goto LABEL_18;
    }
    if (v16 == -0.5 && v17 == -0.5)
    {
LABEL_38:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_20C8344D0;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
      static UIPointerAccessory.Position.bottomLeft.getter();
      uint64_t v37 = static UIPointerAccessory.arrow(_:)();
      double v20 = *(void (**)(char *, uint64_t))(v2 + 8);
      v20(v5, v1);
      *(void *)(v18 + 32) = v37;
      static UIPointerAccessory.Position.topRight.getter();
      goto LABEL_18;
    }
    if (v16 == 0.5)
    {
      if (v17 == 0.5) {
        goto LABEL_38;
      }
      if (v17 == -0.5)
      {
LABEL_46:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_20C8344D0;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
        static UIPointerAccessory.Position.topLeft.getter();
        uint64_t v39 = static UIPointerAccessory.arrow(_:)();
        double v20 = *(void (**)(char *, uint64_t))(v2 + 8);
        v20(v5, v1);
        *(void *)(v18 + 32) = v39;
        static UIPointerAccessory.Position.bottomRight.getter();
        goto LABEL_18;
      }
    }
    else if (v16 == -0.5 && v17 == 0.5)
    {
      goto LABEL_46;
    }

    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_20C8344D0;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
  static UIPointerAccessory.Position.top.getter();
  uint64_t v19 = static UIPointerAccessory.arrow(_:)();
  double v20 = *(void (**)(char *, uint64_t))(v2 + 8);
  v20(v5, v1);
  *(void *)(v18 + 32) = v19;
  static UIPointerAccessory.Position.bottom.getter();
LABEL_18:
  uint64_t v21 = static UIPointerAccessory.arrow(_:)();
  v20(v5, v1);
  *(void *)(v18 + 40) = v21;
  uint64_t v41 = v18;
  specialized Array._endMutation()();
  uint64_t v22 = v41;

  return v22;
}

uint64_t ControlHandleView.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

id ControlHandleView.__deallocating_deinit()
{
  return ControlHandleView.__deallocating_deinit(type metadata accessor for ControlHandleView);
}

uint64_t type metadata accessor for ControlHandleView()
{
  return self;
}

uint64_t CanvasElementResizeHandle.hitHandle(_:with:)(id a1, CGFloat a2, CGFloat a3)
{
  if (v3[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled] != 1) {
    return 0;
  }
  objc_msgSend(v3, sel_bounds);
  v21.CGFloat x = a2;
  v21.CGFloat y = a3;
  BOOL v7 = CGRectContainsPoint(v23, v21);
  if (a1)
  {
    a1 = a1;
    if (objc_msgSend(a1, sel_PK_isEventFromPencil))
    {

      LOBYTE(a1) = 1;
    }
    else
    {
      id v8 = objc_msgSend(a1, sel_buttonMask);

      LOBYTE(a1) = v8 != 0;
    }
  }
  objc_msgSend(v3, sel_bounds);
  CGFloat x = v24.origin.x;
  CGFloat y = v24.origin.y;
  CGFloat width = v24.size.width;
  CGFloat height = v24.size.height;
  double MidX = CGRectGetMidX(v24);
  v25.origin.CGFloat x = x;
  v25.origin.CGFloat y = y;
  v25.size.CGFloat width = width;
  v25.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v25);
  if (v7) {
    return sqrt((MidX - a2) * (MidX - a2) + (MidY - a3) * (MidY - a3));
  }
  if (a1) {
    return 0;
  }
  if (one-time initialization token for resizeHandleFingerHitTestSize != -1) {
    swift_once();
  }
  double v15 = *(double *)&static UIConstants.resizeHandleFingerHitTestSize;
  objc_msgSend(v3, sel_bounds);
  double v16 = v15 - CGRectGetWidth(v26);
  double v17 = v16 > 0.0 ? v16 * 0.5 : 0.0;
  objc_msgSend(v3, sel_bounds);
  double v18 = v15 - CGRectGetHeight(v27);
  double v19 = v18 > 0.0 ? v18 * 0.5 : 0.0;
  objc_msgSend(v3, sel_bounds);
  CGRect v29 = CGRectInset(v28, -v17, -v19);
  v22.CGFloat x = a2;
  v22.CGFloat y = a3;
  if (CGRectContainsPoint(v29, v22)) {
    return sqrt((MidX - a2) * (MidX - a2) + (MidY - a3) * (MidY - a3));
  }
  else {
    return 0;
  }
}

uint64_t CanvasElementResizeHandle.accessibilityLabel()()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled) != 1) {
    return 0;
  }
  switch(*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type))
  {
    case 1:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v3 = 0xD00000000000002CLL;
      unint64_t v9 = 0x800000020C853900;
      unint64_t v6 = 0x800000020C8538E0;
      unint64_t v2 = 0xD000000000000011;
      goto LABEL_29;
    case 2:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v2 = 0xD000000000000017;
      unint64_t v3 = 0xD000000000000032;
      unint64_t v9 = 0x800000020C8538A0;
      uint64_t v4 = "Resize Handle Top Right";
      goto LABEL_28;
    case 3:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v2 = 0xD000000000000013;
      unint64_t v3 = 0xD00000000000002ELL;
      unint64_t v9 = 0x800000020C853850;
      uint64_t v4 = "Resize Handle Right";
      goto LABEL_28;
    case 4:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v2 = 0xD00000000000001ALL;
      unint64_t v3 = 0xD000000000000035;
      unint64_t v9 = 0x800000020C8537F0;
      uint64_t v4 = "Resize Handle Bottom Right";
      goto LABEL_28;
    case 5:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v2 = 0xD000000000000014;
      unint64_t v3 = 0xD00000000000002FLL;
      unint64_t v9 = 0x800000020C8537A0;
      uint64_t v4 = "Resize Handle Bottom";
      goto LABEL_28;
    case 6:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v2 = 0xD000000000000019;
      unint64_t v3 = 0xD000000000000034;
      unint64_t v9 = 0x800000020C853740;
      uint64_t v4 = "Resize Handle Bottom Left";
      goto LABEL_28;
    case 7:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v2 = 0xD000000000000012;
      unint64_t v3 = 0xD00000000000002DLL;
      unint64_t v9 = 0x800000020C8536F0;
      uint64_t v4 = "Resize Handle Left";
      goto LABEL_28;
    default:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v2 = 0xD000000000000016;
      unint64_t v3 = 0xD000000000000031;
      unint64_t v9 = 0x800000020C853950;
      uint64_t v4 = "Resize Handle Top Left";
LABEL_28:
      unint64_t v6 = (unint64_t)(v4 - 32) | 0x8000000000000000;
LABEL_29:
      v7.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v7.value._object = (void *)0xEB00000000656C62;
      v8._uint64_t countAndFlagsBits = 0;
      v8._object = (void *)0xE000000000000000;
      uint64_t result = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, v7, (NSBundle)isa, v8, *(Swift::String *)&v3)._countAndFlagsBits;
      break;
  }
  return result;
}

unint64_t one-time initialization function for handleImageCache()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static CanvasElementResizeHandle.handleImageCache = result;
  return result;
}

void closure #1 in static CanvasElementResizeHandle.handleImage(color:)(CGFloat a1, CGFloat a2, uint64_t a3, void *a4)
{
  if (one-time initialization token for resizeHandleInset != -1) {
    swift_once();
  }
  v10.origin.CGFloat x = 0.0;
  v10.origin.CGFloat y = 0.0;
  v10.size.CGFloat width = a1;
  v10.size.CGFloat height = a2;
  CGRect v11 = CGRectInset(v10, *(CGFloat *)&static UIConstants.resizeHandleInset, *(CGFloat *)&static UIConstants.resizeHandleInset);
  id v8 = objc_msgSend(self, sel_bezierPathWithOvalInRect_, v11.origin.x, v11.origin.y, v11.size.width, v11.size.height);
  objc_msgSend(a4, sel_set);
  objc_msgSend(v8, sel_fill);
  id v7 = objc_msgSend(self, sel_whiteColor);
  objc_msgSend(v7, sel_set);

  if (one-time initialization token for resizeHandleEdgeWidth != -1) {
    swift_once();
  }
  objc_msgSend(v8, sel_setLineWidth_, *(double *)&static UIConstants.resizeHandleEdgeWidth);
  objc_msgSend(v8, sel_stroke);
}

uint64_t one-time initialization function for disabledImage()
{
  if (one-time initialization token for resizeHandleSize != -1) {
    swift_once();
  }
  double v0 = *(double *)&static UIConstants.resizeHandleSize;
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, v0, v0);
  uint64_t v2 = swift_allocObject();
  *(double *)(v2 + 16) = v0;
  *(double *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in closure #1 in variable initialization expression of static CanvasElementResizeHandle.disabledImage;
  *(void *)(v3 + 24) = v2;
  v7[4] = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
  v7[5] = v3;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  _OWORD v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  _OWORD v7[3] = &block_descriptor_44;
  uint64_t v4 = _Block_copy(v7);
  swift_retain();
  swift_release();
  id v5 = objc_msgSend(v1, sel_imageWithActions_, v4);

  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  else {
    static CanvasElementResizeHandle.disabledImage = (uint64_t)v5;
  }
  return result;
}

void closure #1 in closure #1 in variable initialization expression of static CanvasElementResizeHandle.disabledImage(CGFloat a1, CGFloat a2)
{
  if (one-time initialization token for resizeHandleInset != -1) {
    swift_once();
  }
  double v4 = *(double *)&static UIConstants.resizeHandleInset;
  double v5 = *(double *)&static UIConstants.resizeHandleInset;
  if (one-time initialization token for resizeHandleEdgeWidth != -1)
  {
    swift_once();
    double v5 = *(double *)&static UIConstants.resizeHandleInset;
  }
  CGFloat v6 = v5 + *(double *)&static UIConstants.resizeHandleEdgeWidth * 0.5;
  v9.origin.CGFloat x = 0.0;
  v9.origin.CGFloat y = 0.0;
  v9.size.CGFloat width = a1;
  v9.size.CGFloat height = a2;
  CGRect v10 = CGRectInset(v9, v4 + *(double *)&static UIConstants.resizeHandleEdgeWidth * 0.5, v6);
  id v7 = objc_msgSend(self, sel_bezierPathWithOvalInRect_, v10.origin.x, v10.origin.y, v10.size.width, v10.size.height);
  if (one-time initialization token for resizeHandleColorDisabled != -1) {
    swift_once();
  }
  objc_msgSend((id)static UIConstants.resizeHandleColorDisabled, sel_set);
  objc_msgSend(v7, sel_fill);
}

Swift::Void __swiftcall CanvasElementResizeHandle.didMoveToWindow()()
{
  id v1 = objc_msgSend(v0, sel_layer);
  id v2 = objc_msgSend(v1, sel_contents);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v13);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
    outlined destroy of Any?((uint64_t)v13);
    id v3 = objc_msgSend(v0, sel_window);
    if (v3)
    {
      double v4 = v3;
      if (*((unsigned char *)v0 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled) == 1)
      {
        switch(*((unsigned char *)v0 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category))
        {
          case 1:
            if (one-time initialization token for resizeHandleColorControl != -1) {
              swift_once();
            }
            CGRect v9 = (void *)static UIConstants.resizeHandleColorControl;
            goto LABEL_23;
          case 2:
            if (one-time initialization token for resizeHandleColorCrop != -1) {
              swift_once();
            }
            CGRect v9 = (void *)static UIConstants.resizeHandleColorCrop;
            goto LABEL_23;
          case 3:
            if (one-time initialization token for resizeHandleColorReflow != -1) {
              swift_once();
            }
            CGRect v9 = (void *)static UIConstants.resizeHandleColorReflow;
LABEL_23:
            id v7 = v9;
            break;
          default:
            id v5 = v3;
            id v6 = objc_msgSend(v5, sel_tintColor);
            if (!v6)
            {
              if (one-time initialization token for resizeHandleColor != -1) {
                swift_once();
              }
              id v6 = (id)static UIConstants.resizeHandleColor;
            }
            id v7 = v6;

            break;
        }
        id v10 = objc_msgSend(v0, sel_layer);
        CGRect v11 = (void *)specialized static CanvasElementResizeHandle.handleImage(color:)(v7);
        id v12 = objc_msgSend(v11, sel_CGImage);

        objc_msgSend(v10, sel_setContents_, v12);
      }
      else
      {
        id v8 = objc_msgSend(v0, sel_layer);
        if (one-time initialization token for disabledImage != -1) {
          swift_once();
        }
        id v7 = objc_msgSend((id)static CanvasElementResizeHandle.disabledImage, sel_CGImage);
        objc_msgSend(v8, sel_setContents_, v7);
      }
    }
  }
}

uint64_t CanvasElementResizeHandle.pointerAccessories()()
{
  uint64_t v1 = type metadata accessor for UIPointerAccessory.Position();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  double v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type))
  {
    case 1:
    case 5:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_20C8344D0;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
      static UIPointerAccessory.Position.top.getter();
      uint64_t v10 = static UIPointerAccessory.arrow(_:)();
      id v7 = *(void (**)(char *, uint64_t))(v2 + 8);
      v7(v4, v1);
      *(void *)(v5 + 32) = v10;
      static UIPointerAccessory.Position.bottom.getter();
      break;
    case 2:
    case 6:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_20C8344D0;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
      static UIPointerAccessory.Position.bottomLeft.getter();
      uint64_t v8 = static UIPointerAccessory.arrow(_:)();
      id v7 = *(void (**)(char *, uint64_t))(v2 + 8);
      v7(v4, v1);
      *(void *)(v5 + 32) = v8;
      static UIPointerAccessory.Position.topRight.getter();
      break;
    case 3:
    case 7:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_20C8344D0;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
      static UIPointerAccessory.Position.left.getter();
      uint64_t v9 = static UIPointerAccessory.arrow(_:)();
      id v7 = *(void (**)(char *, uint64_t))(v2 + 8);
      v7(v4, v1);
      *(void *)(v5 + 32) = v9;
      static UIPointerAccessory.Position.right.getter();
      break;
    default:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_20C8344D0;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
      static UIPointerAccessory.Position.topLeft.getter();
      uint64_t v6 = static UIPointerAccessory.arrow(_:)();
      id v7 = *(void (**)(char *, uint64_t))(v2 + 8);
      v7(v4, v1);
      *(void *)(v5 + 32) = v6;
      static UIPointerAccessory.Position.bottomRight.getter();
      break;
  }
  uint64_t v11 = static UIPointerAccessory.arrow(_:)();
  v7(v4, v1);
  *(void *)(v5 + 40) = v11;
  uint64_t v14 = v5;
  specialized Array._endMutation()();
  return v14;
}

id CanvasElementResizeHandle.__deallocating_deinit()
{
  return ControlHandleView.__deallocating_deinit(type metadata accessor for CanvasElementResizeHandle);
}

id ControlHandleView.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for CanvasElementResizeHandle()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ResizeHandleCategory(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ResizeHandleCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C3D9DE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResizeHandleCategory()
{
  return &type metadata for ResizeHandleCategory;
}

unsigned char *storeEnumTagSinglePayload for ResizeHandleType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C3D9EE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResizeHandleType()
{
  return &type metadata for ResizeHandleType;
}

unint64_t lazy protocol witness table accessor for type ResizeHandleType and conformance ResizeHandleType()
{
  unint64_t result = lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType;
  if (!lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType;
  if (!lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResizeHandleType and conformance ResizeHandleType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResizeHandleCategory and conformance ResizeHandleCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type ResizeHandleCategory and conformance ResizeHandleCategory;
  if (!lazy protocol witness table cache variable for type ResizeHandleCategory and conformance ResizeHandleCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResizeHandleCategory and conformance ResizeHandleCategory);
  }
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *int v3 = specialized _NativeDictionary.init(_:capacity:)(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v10 = *v3;
  *int v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *int v3 = v10;
  return swift_bridgeObjectRelease();
}

Swift::Int specialized _NativeDictionary.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSObject, Swift.AnyObject>);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v20 = v2;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      uint64_t v4 = v3;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v20;
        unint64_t v14 = *(void *)(v20 + 16);
        if (*(void *)(v20 + 24) <= v14)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14 + 1, 1);
          uint64_t v2 = v20;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v15 = 0;
          unint64_t v16 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v16 && (v15 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v17 = v9 == v16;
            if (v9 == v16) {
              unint64_t v9 = 0;
            }
            v15 |= v17;
            uint64_t v18 = *(void *)(v6 + 8 * v9);
          }
          while (v18 == -1);
          unint64_t v10 = __clz(__rbit64(~v18)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v19;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v12 = __CocoaDictionary.Iterator.next()();
        uint64_t v4 = v13;
      }
      while (v12);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE80];
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIColor, UIImage>);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      do
      {
        swift_dynamicCast();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
        swift_dynamicCast();
        uint64_t v2 = v18;
        uint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          uint64_t v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            char v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            unint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE80];
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PDFAnnotation, AnyCanvasElementView>);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
      do
      {
        swift_dynamicCast();
        type metadata accessor for AnyCanvasElementView();
        swift_dynamicCast();
        uint64_t v2 = v18;
        uint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          uint64_t v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            char v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            unint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE80];
  }
  return v2;
}

unint64_t specialized ResizeHandleType.init(rawValue:)(unint64_t result)
{
  if (result >= 8) {
    return 8;
  }
  return result;
}

void *specialized ControlHandleView.pointerInteraction(_:styleFor:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIPointerShape?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UIPointerEffect();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](v5);
  unint64_t v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v10 = objc_msgSend(a1, sel_view, v7);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v10;
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CC8]), sel_initWithView_, v10);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerStyle);
  *unint64_t v9 = v12;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x263F81E20], v5);
  uint64_t v13 = type metadata accessor for UIPointerShape();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 1, 1, v13);
  id v14 = v12;
  char v15 = (void *)UIPointerStyle.init(effect:shape:)();
  ControlHandleView.pointerAccessories()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_setAccessories_, isa);

  return v15;
}

uint64_t specialized static CanvasElementResizeHandle.handleImage(color:)(void *a1)
{
  if (one-time initialization token for handleImageCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static CanvasElementResizeHandle.handleImageCache;
  id v3 = a1;
  id v4 = specialized Dictionary.subscript.getter(v3, v2);

  if (v4)
  {
    swift_endAccess();
    return (uint64_t)v4;
  }
  swift_endAccess();
  if (one-time initialization token for resizeHandleSize != -1) {
    swift_once();
  }
  double v5 = *(double *)&static UIConstants.resizeHandleSize;
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, v5, v5);
  double v7 = (double *)swift_allocObject();
  _OWORD v7[2] = v5;
  _OWORD v7[3] = v5;
  *((void *)v7 + 4) = v3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in static CanvasElementResizeHandle.handleImage(color:);
  *(void *)(v8 + 24) = v7;
  v14[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v14[5] = v8;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1107296256;
  _OWORD v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v14[3] = &block_descriptor_14;
  unint64_t v9 = _Block_copy(v14);
  id v10 = v3;
  swift_retain();
  swift_release();
  id v11 = objc_msgSend(v6, sel_imageWithActions_, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v9 & 1) == 0)
  {
    swift_beginAccess();
    id v13 = v10;
    id v4 = v11;
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v4, v13);
    swift_endAccess();
    swift_release();

    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

void *specialized CanvasElementResizeHandle.pointerInteraction(_:styleFor:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIPointerShape?);
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UIPointerEffect();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  id v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = objc_msgSend(a1, sel_view, v9);
  if (!v12) {
    return 0;
  }
  id v13 = v12;
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CC8]), sel_initWithView_, v12);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerStyle);
  *id v11 = v14;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x263F81E20], v7);
  uint64_t v15 = type metadata accessor for UIPointerShape();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 1, 1, v15);
  id v16 = v14;
  BOOL v17 = (void *)UIPointerStyle.init(effect:shape:)();
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0xB0))();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerAccessory);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setAccessories_, isa);

  return v17;
}

uint64_t sub_20C3DAE98()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in static CanvasElementResizeHandle.handleImage(color:)(uint64_t a1)
{
  closure #1 in static CanvasElementResizeHandle.handleImage(color:)(*(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), a1, *(void **)(v1 + 32));
}

uint64_t sub_20C3DAEDC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t sub_20C3DAF04()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in variable initialization expression of static CanvasElementResizeHandle.disabledImage()
{
  closure #1 in closure #1 in variable initialization expression of static CanvasElementResizeHandle.disabledImage(*(CGFloat *)(v0 + 16), *(CGFloat *)(v0 + 24));
}

uint64_t sub_20C3DAF1C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9Coherence14SharedTagged_9Vy8PaperKit0f6CanvasB0VGG_ALs5NeverOTg503_s8g14Kit22Containerib128PAA9Coherence4CRDTRzrlE16_applyDifference2id2in4fromyAD9CRKeyPathV_AD7CapsuleV3RefCyqd___GAMyAA0A8DocumentVGtAD6CRTypeRd__lFAD14eF20_9VyAA0tdE0VGAYXEfU_SDyAF0uV0VALGTf1cn_n(uint64_t a1, uint64_t *a2)
{
  uint64_t v39 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  double v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  MEMORY[0x270FA5388](v12);
  uint64_t v41 = (char *)v30 - v14;
  int64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = MEMORY[0x263F8EE78];
  if (v15)
  {
    uint64_t v32 = v13;
    v30[1] = v2;
    uint64_t v50 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    unint64_t v36 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v37 = v9;
    unint64_t v17 = a1 + v36;
    uint64_t v18 = v11;
    uint64_t v19 = *(void *)(v11 + 72);
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v18 + 16);
    objc_super v34 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v35 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    uint64_t v20 = (void (**)(uint64_t, char *, uint64_t))(v18 + 32);
    uint64_t v31 = (void (**)(uint64_t, uint64_t))(v18 + 8);
    do
    {
      MEMORY[0x21054BDF0](v10);
      uint64_t v21 = *v39;
      if (*(void *)(*v39 + 16) && (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v23 & 1) != 0))
      {
        (*v40)(v6, *(void *)(v21 + 56) + v22 * v19, v10);
        uint64_t v24 = 0;
      }
      else
      {
        uint64_t v24 = 1;
      }
      (*v35)(v6, v24, 1, v10);
      (*v34)(v9, v38);
      if ((*v33)(v6, 1, v10) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      }
      else
      {
        CGRect v25 = *v20;
        CGRect v26 = v32;
        (*v20)((uint64_t)v32, v6, v10);
        SharedTagged_9.tag.getter();
        uint64_t v46 = v48;
        char v47 = v49;
        SharedTagged_9.tag.getter();
        uint64_t v42 = v44;
        char v43 = v45;
        lazy protocol witness table accessor for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum();
        if ((static CRExtensible.== infix(_:_:)() & 1) == 0)
        {
          v25((uint64_t)v41, v26, v10);
          goto LABEL_13;
        }
        (*v31)((uint64_t)v26, v10);
      }
      (*v40)(v41, v17, v10);
LABEL_13:
      uint64_t v16 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
        uint64_t v16 = v50;
      }
      unint64_t v28 = *(void *)(v16 + 16);
      unint64_t v27 = *(void *)(v16 + 24);
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        uint64_t v16 = v50;
      }
      *(void *)(v16 + 16) = v28 + 1;
      (*v20)(v16 + v36 + v28 * v19, v41, v10);
      v17 += v19;
      --v15;
      double v9 = v37;
    }
    while (v15);
  }
  return v16;
}

uint64_t specialized CRRegister<>.setIfDifferent(_:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t result = CRRegister.value.getter();
  if (!v8)
  {
    if (!a2) {
      return result;
    }
    goto LABEL_12;
  }
  if (!a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (v7 == a1 && v8 == a2) {
    return swift_bridgeObjectRelease();
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    return CRRegister.value.setter();
  }
  return result;
}

uint64_t specialized CRRegister<>.setIfDifferent(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  v25[0] = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int64_t v15 = (char *)v25 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v25 - v17;
  v25[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  uint64_t v27 = v1;
  CRRegister.value.getter();
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v18, (uint64_t)v9, &demangling cache variable for type metadata for Date?);
  uint64_t v26 = a1;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, v19, &demangling cache variable for type metadata for Date?);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) == 1)
  {
    if (v20(v19, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for Date?);
    }
  }
  else
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v9, (uint64_t)v15, &demangling cache variable for type metadata for Date?);
    if (v20(v19, 1, v3) != 1)
    {
      uint64_t v22 = v25[0];
      (*(void (**)(void, uint64_t, uint64_t))(v4 + 32))(v25[0], v19, v3);
      _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v24(v22, v3);
      v24((uint64_t)v15, v3);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for Date?);
      if (v23) {
        return result;
      }
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for Date?);
LABEL_8:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v26, (uint64_t)v12, &demangling cache variable for type metadata for Date?);
  return CRRegister.value.setter();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v22;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  void v25[2];
  uint64_t v26;
  uint64_t v27;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  v25[0] = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (WeakRef<PDFAnnotationElement>?, WeakRef<PDFAnnotationElement>?));
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int64_t v15 = (char *)v25 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v25 - v17;
  v25[1] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  uint64_t v27 = v1;
  CRRegister.value.getter();
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v18, (uint64_t)v9, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  uint64_t v26 = a1;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, v19, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) == 1)
  {
    if (v20(v19, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
    }
  }
  else
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v9, (uint64_t)v15, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
    if (v20(v19, 1, v3) != 1)
    {
      uint64_t v22 = v25[0];
      (*(void (**)(void, uint64_t, uint64_t))(v4 + 32))(v25[0], v19, v3);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v24(v22, v3);
      v24((uint64_t)v15, v3);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
      if (v23) {
        return result;
      }
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for (WeakRef<PDFAnnotationElement>?, WeakRef<PDFAnnotationElement>?));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
LABEL_8:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v26, (uint64_t)v12, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  return CRRegister.value.setter();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v22;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  void v25[2];
  uint64_t v26;
  uint64_t v27;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  v25[0] = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TaggedValue_2<CGRect, Quad>?, TaggedValue_2<CGRect, Quad>?));
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int64_t v15 = (char *)v25 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v25 - v17;
  v25[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v27 = v1;
  CRRegister.value.getter();
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v18, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  uint64_t v26 = a1;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, v19, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) == 1)
  {
    if (v20(v19, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    }
  }
  else
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v9, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    if (v20(v19, 1, v3) != 1)
    {
      uint64_t v22 = v25[0];
      (*(void (**)(void, uint64_t, uint64_t))(v4 + 32))(v25[0], v19, v3);
      lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>();
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v24(v22, v3);
      v24((uint64_t)v15, v3);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      if (v23) {
        return result;
      }
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for (TaggedValue_2<CGRect, Quad>?, TaggedValue_2<CGRect, Quad>?));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
LABEL_8:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v26, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  return CRRegister.value.setter();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v22;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  void v25[2];
  uint64_t v26;
  uint64_t v27;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  v25[0] = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int64_t v15 = (char *)v25 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v25 - v17;
  v25[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  uint64_t v27 = v1;
  CRRegister.value.getter();
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v18, (uint64_t)v9, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v26 = a1;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, v19, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) == 1)
  {
    if (v20(v19, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    }
  }
  else
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v9, (uint64_t)v15, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    if (v20(v19, 1, v3) != 1)
    {
      uint64_t v22 = v25[0];
      (*(void (**)(void, uint64_t, uint64_t))(v4 + 32))(v25[0], v19, v3);
      lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>();
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v24(v22, v3);
      v24((uint64_t)v15, v3);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      if (v23) {
        return result;
      }
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for (TaggedValue_1<CRExtensible<BasicImageFilter>>?, TaggedValue_1<CRExtensible<BasicImageFilter>>?));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
LABEL_8:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v26, (uint64_t)v12, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  return CRRegister.value.setter();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v3 = type metadata accessor for CRAssetOrData();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  CGRect v25 = (uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAssetOrData?, CRAssetOrData?));
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int64_t v15 = (char *)&v24 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v24 - v17;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  uint64_t v27 = v1;
  CRRegister.value.getter();
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v18, (uint64_t)v9, &demangling cache variable for type metadata for CRAssetOrData?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, v19, &demangling cache variable for type metadata for CRAssetOrData?);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) == 1)
  {
    if (v20(v19, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CRAssetOrData?);
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for CRAssetOrData?);
    }
  }
  else
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v9, (uint64_t)v15, &demangling cache variable for type metadata for CRAssetOrData?);
    if (v20(v19, 1, v3) != 1)
    {
      uint64_t v22 = v25;
      outlined init with take of Paper(v19, v25, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      char v23 = specialized static CRAssetOrData.== infix(_:_:)((uint64_t)v15, v22);
      _s8PaperKit0A0VWOhTm_1(v22, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      _s8PaperKit0A0VWOhTm_1((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CRAssetOrData?);
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for CRAssetOrData?);
      if (v23) {
        return result;
      }
      goto LABEL_8;
    }
    _s8PaperKit0A0VWOhTm_1((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for (CRAssetOrData?, CRAssetOrData?));
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for CRAssetOrData?);
LABEL_8:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v12, &demangling cache variable for type metadata for CRAssetOrData?);
  return CRRegister.value.setter();
}

void specialized CRRegister<>.setIfDifferent(_:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.value.getter();
  if (!v7)
  {
    if (!a1) {
      return;
    }
    id v5 = 0;
    goto LABEL_8;
  }
  if (!a1)
  {
    id v5 = v7;
LABEL_8:

    id v3 = a1;
    goto LABEL_9;
  }
  type metadata accessor for CGColorRef(0);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
  id v2 = v7;
  id v3 = a1;
  char v4 = static _CFObject.== infix(_:_:)();

  if ((v4 & 1) == 0)
  {
LABEL_9:
    id v6 = v3;
    CRRegister.value.setter();
  }
}

uint64_t Capsule<>.applyDifference(from:)()
{
  return Capsule.mutate<A>(_:)();
}

uint64_t closure #1 in Capsule<>.applyDifference(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v91 = a2;
  uint64_t v84 = type metadata accessor for CRKeyPath();
  uint64_t v67 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  long long v94 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v90 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  uint64_t v92 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v89 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  uint64_t v72 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = (void (**)(char *, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<SharedTagged_3<TaggedPaperPage>>.Change);
  MEMORY[0x270FA5388](v83);
  uint64_t v82 = (uint64_t *)((char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v81 = (uint64_t)&v67 - v11;
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_3<TaggedPaperPage>>>)
      - 8;
  MEMORY[0x270FA5388](v93);
  id v77 = (void (**)(char *, uint64_t))((char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v87 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v67 - v14);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v73 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  __int16 v80 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v67 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v70 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v22 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v95 = a1;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v23 = dispatch thunk of Sequence._copyToContiguousArray()();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v85 = (void (**)(char *, uint64_t))v22;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v69 = v21;
  uint64_t v86 = (void (*)(void, void, void))v19;
  v96[0] = dispatch thunk of Sequence._copyToContiguousArray()();
  v96[7] = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [SharedTagged_3<TaggedPaperPage>] and conformance [A], &demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  BidirectionalCollection<>.difference<A>(from:)();
  uint64_t v24 = v68;
  swift_release();
  uint64_t v25 = (uint64_t)v87;
  swift_release();
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
  uint64_t v27 = (uint64_t)v77;
  uint64_t v28 = v75;
  uint64_t v79 = v73 + 16;
  uint64_t v78 = v26;
  v26((char *)v77, (uint64_t)v18, v75);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CollectionDifference<SharedTagged_3<TaggedPaperPage>> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v71 = v18;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v29 = v93;
  *(void *)(v27 + *(int *)(v93 + 44)) = v96[0];
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v27, v25, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_3<TaggedPaperPage>>>);
  uint64_t v30 = (uint64_t *)(v25 + *(int *)(v29 + 44));
  uint64_t v31 = *v30;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v93 = (uint64_t)v8;
  if (v31 != v96[0])
  {
    uint64_t v52 = v28;
    id v77 = (void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v74 = (void (**)(char *, char *, uint64_t))(v90 + 32);
    long long v76 = (void (**)(char *, uint64_t))(v90 + 8);
    do
    {
      uint64_t v57 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v58 = v81;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v59, v81, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_3<TaggedPaperPage>>.Change);
      v57(v96, 0);
      uint64_t v60 = v80;
      v78(v80, v25, v52);
      dispatch thunk of Collection.formIndex(after:)();
      (*v77)(v60, v52);
      uint64_t v61 = v58;
      uint64_t v62 = v82;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v61, (uint64_t)v82, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_3<TaggedPaperPage>>.Change);
      LODWORD(v60) = swift_getEnumCaseMultiPayload();
      Swift::Int v63 = *v62;
      uint64_t v64 = (char *)v62
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>, associatedWith: Int?))
                   + 48);
      if (v60 == 1)
      {
        swift_getKeyPath();
        uint64_t v53 = v24;
        uint64_t v54 = (void (*)(void *, void))Capsule.Ref<>.subscript.modify();
        CROrderedSet.remove(at:)(v63);
        v54(v96, 0);
      }
      else
      {
        uint64_t v65 = v92;
        (*v74)(v92, v64, v24);
        SharedTagged_3.any.getter();
        uint64_t v53 = v24;
        __swift_project_boxed_opaque_existential_1(v96, v96[3]);
        type metadata accessor for PaperDocument(0);
        _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
        Capsule.Ref.import<A, B>(_:from:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
        swift_getKeyPath();
        uint64_t v66 = (void (*)(void *, void))Capsule.Ref<>.subscript.modify();
        CROrderedSet.insert(_:at:)();
        v66(v96, 0);
        uint64_t v64 = v65;
        uint64_t v52 = v75;
      }
      uint64_t v25 = (uint64_t)v87;
      swift_release();
      (*v76)(v64, v53);
      uint64_t v55 = *v30;
      dispatch thunk of Collection.endIndex.getter();
      BOOL v56 = v55 == v96[0];
      uint64_t v24 = v53;
      uint64_t v8 = (char *)v93;
    }
    while (!v56);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_3<TaggedPaperPage>>>);
  swift_getKeyPath();
  uint64_t v32 = v69;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  uint64_t v33 = v86;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, void (*)(void, void, void)))(v70 + 8))(v32, v33);
  uint64_t v35 = v88;
  objc_super v34 = v89;
  CROrderedSet.Iterator.next()();
  uint64_t v36 = v90;
  uint64_t v87 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48);
  int v37 = v87(v34, 1, v24);
  uint64_t v38 = v92;
  if (v37 != 1)
  {
    uint64_t v40 = *(void (**)(void, void, void))(v36 + 32);
    uint64_t v39 = v36 + 32;
    uint64_t v86 = v40;
    uint64_t v85 = (void (**)(char *, uint64_t))(v67 + 8);
    uint64_t v83 = (void (**)(char *, uint64_t))(v39 - 24);
    uint64_t v90 = v39;
    do
    {
      v86(v38, v34, v24);
      MEMORY[0x21054BD50](v24);
      uint64_t v41 = (void (*)(void *, void))SharedTagged_3.subscript.modify();
      uint64_t v44 = *(void *)(v42 + 24);
      uint64_t v43 = *(void *)(v42 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v42, v44);
      char v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 176);
      uint64_t v46 = type metadata accessor for PaperDocument(0);
      uint64_t v47 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      uint64_t v48 = v46;
      uint64_t v38 = v92;
      uint64_t v49 = v44;
      uint64_t v50 = v94;
      v45(v94, v95, v91, v48, v47, v49, v43);
      uint64_t v35 = v88;
      objc_super v34 = v89;
      (*v85)(v50, v84);
      v41(v96, 0);
      uint64_t v8 = (char *)v93;
      (*v83)(v38, v24);
      CROrderedSet.Iterator.next()();
    }
    while (v87(v34, 1, v24) != 1);
  }
  (*(void (**)(char *, uint64_t))(v72 + 8))(v8, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v71, v75);
}

uint64_t partial apply for closure #1 in Capsule<>.applyDifference(from:)(uint64_t a1)
{
  return closure #1 in Capsule<>.applyDifference(from:)(a1, *(void *)(v1 + 16));
}

uint64_t Paper.applyDifference<A>(id:in:from:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v49 = a3;
  uint64_t v50 = a1;
  uint64_t v46 = a2;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v45 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v44 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v48 = (char *)&v41 - v5;
  MEMORY[0x270FA5388](v6);
  uint64_t v42 = (char *)&v41 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Paper?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRKeyPath();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Paper>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Paper();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v50, v11, v21);
  uint64_t v24 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  WeakRef.init(id:)();
  type metadata accessor for PaperDocument(0);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  uint64_t v47 = v19;
  if (v25(v10, 1, v19) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Paper?);
  }
  uint64_t v41 = v24;
  outlined init with take of Paper((uint64_t)v10, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Paper);
  uint64_t v27 = v43;
  CRRegister.wrappedValue.getter();
  CGFloat x = v51.origin.x;
  CGFloat y = v51.origin.y;
  CGFloat width = v51.size.width;
  CGFloat height = v51.size.height;
  uint64_t v32 = v42;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v52.origin.CGFloat x = x;
  v52.origin.CGFloat y = y;
  v52.size.CGFloat width = width;
  v52.size.CGFloat height = height;
  if (!CGRectEqualToRect(v51, v52))
  {
    v51.origin.CGFloat x = x;
    v51.origin.CGFloat y = y;
    v51.size.CGFloat width = width;
    v51.size.CGFloat height = height;
    CRRegister.value.setter();
  }
  uint64_t v33 = v45;
  objc_super v34 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v34(v48, v32, v27);
  CRRegister.projectedValue.setter();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v33 + 8);
  v35(v32, v27);
  CRRegister.wrappedValue.getter();
  CGFloat v36 = v51.origin.x;
  CGFloat v37 = v51.origin.y;
  CGFloat v38 = v51.size.width;
  CGFloat v39 = v51.size.height;
  uint64_t v40 = v44;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v53.origin.CGFloat x = v36;
  v53.origin.CGFloat y = v37;
  v53.size.CGFloat width = v38;
  v53.size.CGFloat height = v39;
  if (!CGRectEqualToRect(v51, v53))
  {
    v51.origin.CGFloat x = v36;
    v51.origin.CGFloat y = v37;
    v51.size.CGFloat width = v38;
    v51.size.CGFloat height = v39;
    CRRegister.value.setter();
  }
  v34(v48, v40, v27);
  CRRegister.projectedValue.setter();
  v35(v40, v27);
  ContainerCanvasElement<>._applyDifference<A>(id:in:from:)(v50, v46, v49, v47, v41, (uint64_t)&protocol witness table for Paper);
  return _s8PaperKit0A0VWOhTm_1((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Paper);
}

uint64_t ContainerCanvasElement<>._applyDifference<A>(id:in:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v200 = a6;
  CGRect v203 = a2;
  uint64_t v204 = a3;
  uint64_t v202 = a1;
  uint64_t v191 = *a2;
  uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<SharedTagged_9<TaggedCanvasElement>>.Change);
  MEMORY[0x270FA5388](v190);
  double v189 = (Swift::Int *)((char *)&v162 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v188 = (uint64_t)&v162 - v9;
  uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_9<TaggedCanvasElement>>>);
  MEMORY[0x270FA5388](v166);
  id v165 = (char *)&v162 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v193 = (uint64_t)&v162 - v12;
  uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v172 = *(void *)(v192 - 8);
  MEMORY[0x270FA5388](v192);
  uint64_t v187 = (char *)&v162 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v170 = (char *)&v162 - v15;
  uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v173 = *(void *)(v207 - 8);
  MEMORY[0x270FA5388](v207);
  uint64_t v186 = (char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  CGRect v205 = (char *)&v162 - v18;
  MEMORY[0x270FA5388](v19);
  CGRect v201 = (char *)&v162 - v20;
  MEMORY[0x270FA5388](v21);
  CGAffineTransform v197 = (void (**)(unint64_t, char *, uint64_t))((char *)&v162 - v22);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v23 - 8);
  CGAffineTransform v196 = (void (**)(unint64_t, char *, uint64_t))((char *)&v162 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v185 = *(void *)(v198 - 8);
  MEMORY[0x270FA5388](v198);
  uint64_t v171 = (char *)&v162 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v169 = *(void *)(v195 - 8);
  MEMORY[0x270FA5388](v195);
  CGRect v199 = (char *)&v162 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v27 - 8);
  long long v162 = (char *)&v162 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  long long v163 = (char *)&v162 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v181 = (void (**)(char *, uint64_t))((char *)&v162 - v32);
  uint64_t v184 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v183 = *(v184 - 1);
  MEMORY[0x270FA5388](v184);
  double v182 = (char *)&v162 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGSize v180 = (void (**)(void (**)(unint64_t, char *, uint64_t), uint64_t))type metadata accessor for Optional();
  uint64_t v167 = (uint64_t)*(v180 - 1);
  MEMORY[0x270FA5388](v180);
  uint64_t v35 = (char *)&v162 - v34;
  uint64_t v36 = type metadata accessor for CRKeyPath();
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v206 = (uint64_t)&v162 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v41 = (char *)&v162 - v40;
  uint64_t v42 = type metadata accessor for WeakRef();
  uint64_t v43 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v45 = (char *)&v162 - v44;
  uint64_t v174 = *(void *)(a4 - 8);
  double v47 = MEMORY[0x270FA5388](v46);
  uint64_t v49 = (char *)&v162 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = v37;
  uint64_t v50 = *(void (**)(unint64_t, uint64_t, uint64_t))(v37 + 16);
  uint64_t v51 = v202;
  uint64_t v202 = v36;
  uint64_t v177 = v37 + 16;
  uint64_t v176 = v50;
  ((void (*)(char *, uint64_t, uint64_t, double))v50)(v41, v51, v36, v47);
  uint64_t v168 = v41;
  CGRect v52 = v35;
  uint64_t v53 = a4;
  WeakRef.init(id:)();
  uint64_t v54 = type metadata accessor for PaperDocument(0);
  uint64_t v55 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v178 = v54;
  uint64_t v175 = v55;
  WeakRef.subscript.getter();
  BOOL v56 = v45;
  uint64_t v57 = v174;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v56, v42);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v52, 1, a4) == 1) {
    return (*(uint64_t (**)(char *, void))(v167 + 8))(v52, v180);
  }
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v49, v52, a4);
  uint64_t v59 = v200;
  uint64_t v60 = *(void *)(v200 + 8);
  uint64_t v61 = *(double (**)(uint64_t, uint64_t))(v60 + 32);
  double v62 = v61(a4, v60);
  double v63 = v61(a4, v60);
  uint64_t v64 = v49;
  if (v62 != v63)
  {
    v61(v53, v60);
    (*(void (**)(uint64_t, uint64_t))(v60 + 40))(v53, v60);
  }
  uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v59 + 48);
  uint64_t v66 = (uint64_t)v181;
  v65(v53, v59);
  uint64_t v67 = v183;
  uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v183 + 48);
  uint64_t v69 = v184;
  int v70 = v68(v66, 1, v184);
  long long v164 = v64;
  if (v70 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v66, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    uint64_t v71 = v200;
  }
  else
  {
    (*(void (**)(char *, uint64_t, void *))(v67 + 32))(v182, v66, v69);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    Capsule.Ref.import<A, B>(_:from:)();
    uint64_t v72 = (uint64_t)v163;
    uint64_t v73 = v200;
    v65(v53, v200);
    int v74 = v68(v72, 1, v69);
    outlined destroy of StocksKitCurrencyCache.Provider?(v72, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    if (v74 == 1)
    {
      uint64_t v75 = v162;
      long long v76 = v182;
      (*(void (**)(char *, char *, void *))(v67 + 16))(v162, v182, v69);
      (*(void (**)(char *, void, uint64_t, void *))(v67 + 56))(v75, 0, 1, v69);
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 56))(v75, v53, v73);
      (*(void (**)(char *, void *))(v67 + 8))(v76, v69);
    }
    else
    {
      (*(void (**)(char *, void *))(v67 + 8))(v182, v69);
    }
    uint64_t v71 = v73;
  }
  uint64_t v77 = v207;
  uint64_t v78 = v185;
  uint64_t v79 = *(char **)(v71 + 72);
  __int16 v80 = v171;
  uint64_t v194 = v53;
  uint64_t v167 = v71 + 72;
  long long v163 = v79;
  ((void (*)(uint64_t))v79)(v53);
  uint64_t v81 = v198;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v81);
  uint64_t v82 = v196;
  uint64_t v83 = v195;
  CROrderedSet.Iterator.next()();
  uint64_t v84 = v173 + 48;
  uint64_t v85 = *(void **)(v173 + 48);
  unsigned int v86 = ((uint64_t (*)(void, uint64_t, uint64_t))v85)(v82, 1, v77);
  uint64_t v87 = v178;
  uint64_t v88 = v175;
  uint64_t v89 = v202;
  uint64_t v90 = v197;
  uint64_t v91 = v168;
  if (v86 != 1)
  {
    double v182 = *(char **)(v173 + 32);
    uint64_t v181 = (void (**)(char *, uint64_t))(v179 + 8);
    uint64_t v183 = v173 + 32;
    CGSize v180 = (void (**)(void (**)(unint64_t, char *, uint64_t), uint64_t))(v173 + 8);
    uint64_t v185 = v84;
    uint64_t v184 = v85;
    do
    {
      ((void (*)(void, void, uint64_t))v182)(v90, v82, v77);
      MEMORY[0x21054BDF0](v77);
      uint64_t v92 = v89;
      uint64_t v93 = v88;
      uint64_t v94 = v87;
      uint64_t v95 = v203;
      uint64_t v96 = (void (*)(void *, void))SharedTagged_9.subscript.modify();
      uint64_t v99 = *(void *)(v97 + 24);
      uint64_t v98 = *(void *)(v97 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v97, v99);
      double v100 = *(void (**)(char *, uint64_t *, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t))(v98 + 104);
      uint64_t v161 = v98;
      uint64_t v90 = v197;
      CGFloat v101 = v95;
      uint64_t v87 = v94;
      uint64_t v88 = v93;
      uint64_t v89 = v92;
      uint64_t v102 = v99;
      uint64_t v82 = v196;
      v100(v91, v101, v204, *(void *)(v191 + *MEMORY[0x263F33088]), v87, *(void *)(v191 + *MEMORY[0x263F33088] + 8), v88, v102, v161);
      (*v181)(v91, v92);
      v96(v209, 0);
      uint64_t v83 = v195;
      (*v180)(v90, v77);
      CROrderedSet.Iterator.next()();
    }
    while (((unsigned int (*)(void, uint64_t, uint64_t))v184)(v82, 1, v77) != 1);
  }
  (*(void (**)(char *, uint64_t))(v169 + 8))(v199, v83);
  uint64_t v103 = v194;
  uint64_t v104 = v200;
  CGFloat v105 = (void (*)(uint64_t, uint64_t))v163;
  ((void (*)(uint64_t, uint64_t))v163)(v194, v200);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v106 = dispatch thunk of Sequence._copyToContiguousArray()();
  v105(v103, v104);
  uint64_t v107 = dispatch thunk of Sequence._copyToContiguousArray()();
  unint64_t v210 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v108 = *(void *)(v106 + 16);
  if (v108)
  {
    uint64_t v191 = v107;
    CGRect v199 = *(char **)(v173 + 16);
    unint64_t v109 = v106 + ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80));
    uint64_t v110 = *(void *)(v173 + 72);
    CGAffineTransform v197 = (void (**)(unint64_t, char *, uint64_t))(v173 + 32);
    CGAffineTransform v196 = (void (**)(unint64_t, char *, uint64_t))(v173 + 40);
    uint64_t v111 = (void (**)(uint64_t, uint64_t))(v179 + 8);
    uint64_t v112 = (void (**)(char *, uint64_t))(v173 + 8);
    uint64_t v195 = v106;
    swift_retain();
    uint64_t v114 = v206;
    uint64_t v113 = v207;
    uint64_t v115 = v201;
    while (1)
    {
      uint64_t v117 = v199;
      ((void (*)(char *, unint64_t, uint64_t))v199)(v115, v109, v113);
      MEMORY[0x21054BDF0](v113);
      ((void (*)(char *, char *, uint64_t))v117)(v205, v115, v113);
      uint64_t v118 = v210;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v209[0] = v118;
      unint64_t v210 = 0x8000000000000000;
      unint64_t v121 = specialized __RawDictionaryStorage.find<A>(_:)(v114);
      uint64_t v122 = *(void *)(v118 + 16);
      BOOL v123 = (v120 & 1) == 0;
      uint64_t v124 = v122 + v123;
      if (__OFADD__(v122, v123)) {
        break;
      }
      char v125 = v120;
      if (*(void *)(v118 + 24) >= v124)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v124, isUniquelyReferenced_nonNull_native);
        unint64_t v126 = specialized __RawDictionaryStorage.find<A>(_:)(v206);
        if ((v125 & 1) != (v127 & 1)) {
          goto LABEL_41;
        }
        unint64_t v121 = v126;
      }
      uint64_t v113 = v207;
      unint64_t v128 = (void *)v209[0];
      if (v125)
      {
        (*v196)(*(void *)(v209[0] + 56) + v121 * v110, v205, v207);
        uint64_t v116 = v202;
      }
      else
      {
        *(void *)(v209[0] + 8 * (v121 >> 6) + 64) |= 1 << v121;
        uint64_t v116 = v202;
        v176(v128[6] + *(void *)(v179 + 72) * v121, v206, v202);
        (*v197)(v128[7] + v121 * v110, v205, v113);
        uint64_t v129 = v128[2];
        BOOL v130 = __OFADD__(v129, 1);
        uint64_t v131 = v129 + 1;
        if (v130) {
          goto LABEL_40;
        }
        v128[2] = v131;
        unint64_t v128 = (void *)v209[0];
      }
      unint64_t v210 = (unint64_t)v128;
      swift_bridgeObjectRelease();
      uint64_t v114 = v206;
      (*v111)(v206, v116);
      uint64_t v115 = v201;
      (*v112)(v201, v113);
      v109 += v110;
      if (!--v108)
      {
        uint64_t v106 = v195;
        swift_release();
        uint64_t v107 = v191;
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_28:
    uint64_t v132 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9Coherence14SharedTagged_9Vy8PaperKit0f6CanvasB0VGG_ALs5NeverOTg503_s8g14Kit22Containerib128PAA9Coherence4CRDTRzrlE16_applyDifference2id2in4fromyAD9CRKeyPathV_AD7CapsuleV3RefCyqd___GAMyAA0A8DocumentVGtAD6CRTypeRd__lFAD14eF20_9VyAA0tdE0VGAYXEfU_SDyAF0uV0VALGTf1cn_n(v107, (uint64_t *)&v210);
    swift_release();
    v209[0] = v132;
    uint64_t v208 = v106;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_9<TaggedCanvasElement>]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [SharedTagged_9<TaggedCanvasElement>] and conformance [A], &demangling cache variable for type metadata for [SharedTagged_9<TaggedCanvasElement>]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    uint64_t v133 = v170;
    BidirectionalCollection<>.difference<A>(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v134 = (uint64_t)v165;
    uint64_t v135 = v192;
    CGRect v205 = *(char **)(v172 + 16);
    uint64_t v206 = v172 + 16;
    ((void (*)(char *, char *, uint64_t))v205)(v165, v133, v192);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CollectionDifference<SharedTagged_9<TaggedCanvasElement>> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_9<TaggedCanvasElement>>);
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v136 = v166;
    *(void *)(v134 + *(int *)(v166 + 36)) = v209[0];
    uint64_t v137 = v193;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v134, v193, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_9<TaggedCanvasElement>>>);
    double v138 = (uint64_t *)(v137 + *(int *)(v136 + 36));
    uint64_t v139 = *v138;
    dispatch thunk of Collection.endIndex.getter();
    if (v139 != v209[0])
    {
      CGFloat v140 = (void (**)(char *, uint64_t))(v172 + 8);
      CGRect v201 = (char *)(v173 + 32);
      uint64_t v202 = v200 + 88;
      uint64_t v141 = (void (**)(char *, uint64_t))(v173 + 8);
      do
      {
        double v144 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v145 = v188;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v146, v188, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_9<TaggedCanvasElement>>.Change);
        v144(v209, 0);
        CGFloat v147 = v187;
        ((void (*)(char *, uint64_t, uint64_t))v205)(v187, v137, v135);
        dispatch thunk of Collection.formIndex(after:)();
        (*v140)(v147, v135);
        uint64_t v148 = v145;
        CGFloat v149 = v189;
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v148, (uint64_t)v189, &demangling cache variable for type metadata for CollectionDifference<SharedTagged_9<TaggedCanvasElement>>.Change);
        EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
        Swift::Int v151 = *v149;
        CGFloat v152 = (char *)v149
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_9<TaggedCanvasElement>, associatedWith: Int?))
                      + 48);
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v142 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t))(v200 + 88))(v209, v194);
          CROrderedSet.remove(at:)(v151);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))v201)(v186, v152, v207);
          SharedTagged_9.any.getter();
          __swift_project_boxed_opaque_existential_1(v209, v209[3]);
          Capsule.Ref.import<A, B>(_:from:)();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v209);
          uint64_t v153 = unk_26C14D748;
          if ((unk_26C14D748 & ~qword_26C14D740) == 0) {
            uint64_t v153 = 0;
          }
          uint64_t v154 = v153 | qword_26C14D740;
          CGRect v155 = (void (*)(void *, void))SharedTagged_9.subscript.modify();
          uint64_t v157 = *(void *)(v156 + 24);
          uint64_t v158 = *(void *)(v156 + 32);
          __swift_mutable_project_boxed_opaque_existential_1(v156, v157);
          double v160 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v158 + 80))(&v208, v157, v158);
          if ((*v159 & v154) != 0) {
            *v159 &= ~v154;
          }
          v160(&v208, 0);
          v155(v209, 0);
          uint64_t v142 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t))(v200 + 88))(v209, v194);
          CGFloat v152 = v186;
          CROrderedSet.insert(_:at:)();
        }
        v142(v209, 0);
        (*v141)(v152, v207);
        uint64_t v143 = *v138;
        uint64_t v137 = v193;
        uint64_t v135 = v192;
        dispatch thunk of Collection.endIndex.getter();
      }
      while (v143 != v209[0]);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v137, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<SharedTagged_9<TaggedCanvasElement>>>);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v170, v135);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v164, v194);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Image.applyDifference<A>(id:in:from:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v120 = a2;
  uint64_t v121 = a3;
  uint64_t v122 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  uint64_t v115 = *(void *)(v3 - 8);
  uint64_t v116 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v113 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v114 = (char *)&v94 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v112 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  uint64_t v110 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  uint64_t v108 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v109 = (char *)&v94 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v107 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  uint64_t v103 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v104 = (char *)&v94 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v17 - 8);
  CGFloat v101 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v97 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v98 = (char *)&v94 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v118 = *(void *)(v22 - 8);
  uint64_t v119 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v102 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v117 = (char *)&v94 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v96 = (char *)&v94 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for CRKeyPath();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  uint64_t v36 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)&v94 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for Image();
  uint64_t v40 = *(void *)(v39 - 8);
  double v41 = MEMORY[0x270FA5388](v39);
  uint64_t v43 = (char *)&v94 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v31;
  uint64_t v45 = v121;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v32 + 16))(v34, v122, v44, v41);
  uint64_t v46 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  WeakRef.init(id:)();
  type metadata accessor for PaperDocument(0);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v30, 1, v39) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for Image?);
  }
  uint64_t v95 = v46;
  outlined init with take of Paper((uint64_t)v30, (uint64_t)v43, (uint64_t (*)(void))type metadata accessor for Image);
  Image.pdfContentsBounds.getter();
  CGFloat v49 = v48;
  CGFloat v51 = v50;
  CGFloat v53 = v52;
  double v55 = v54;
  Image.pdfContentsBounds.getter();
  uint64_t v60 = (uint64_t)v43;
  if (CGRect.almostEqual(_:threshold:)(v56, v57, v58, v59, 1.0, v49, v51, v53, v55))
  {
    uint64_t v61 = v119;
    CRRegister.wrappedValue.getter();
    double x = v123.origin.x;
    double v63 = v96;
    CRRegister.projectedValue.getter();
    CRRegister.value.getter();
    v64.n128_u64[0] = *(void *)&v123.origin.x;
    if (v123.origin.x != x)
    {
      v123.origin.double x = x;
      CRRegister.value.setter();
    }
    uint64_t v65 = v118;
    (*(void (**)(char *, char *, uint64_t, __n128))(v118 + 16))(v117, v63, v61, v64);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v63, v61);
  }
  else
  {
    uint64_t v66 = v100;
    CRRegister.wrappedValue.getter();
    CRRegister.wrappedValue.setter();
    CRRegister.wrappedValue.getter();
    CGPoint origin = v123.origin;
    CGFloat width = v123.size.width;
    CGFloat height = v123.size.height;
    int v70 = v98;
    CRRegister.projectedValue.getter();
    CRRegister.value.getter();
    v124.CGPoint origin = origin;
    v124.size.CGFloat width = width;
    v124.size.CGFloat height = height;
    BOOL v71 = CGRectEqualToRect(v123, v124);
    uint64_t v72 = v119;
    if (!v71)
    {
      v123.CGPoint origin = origin;
      v123.size.CGFloat width = width;
      v123.size.CGFloat height = height;
      CRRegister.value.setter();
    }
    uint64_t v73 = v99;
    (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v97, v70, v66);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v70, v66);
    uint64_t v74 = (uint64_t)v101;
    uint64_t v75 = v106;
    CRRegister.wrappedValue.getter();
    long long v76 = v104;
    CRRegister.projectedValue.getter();
    specialized CRRegister<>.setIfDifferent(_:)(v74);
    outlined destroy of StocksKitCurrencyCache.Provider?(v74, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    uint64_t v77 = v105;
    (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v103, v76, v75);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v75);
    CRRegister.wrappedValue.getter();
    double v78 = v123.origin.x;
    uint64_t v79 = v102;
    CRRegister.projectedValue.getter();
    CRRegister.value.getter();
    v80.n128_u64[0] = *(void *)&v123.origin.x;
    if (v123.origin.x != v78)
    {
      v123.origin.double x = v78;
      CRRegister.value.setter();
    }
    uint64_t v81 = v118;
    (*(void (**)(char *, char *, uint64_t, __n128))(v118 + 16))(v117, v79, v72, v80);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v72);
    uint64_t v82 = (uint64_t)v107;
    uint64_t v83 = v111;
    CRRegister.wrappedValue.getter();
    uint64_t v84 = v109;
    CRRegister.projectedValue.getter();
    specialized CRRegister<>.setIfDifferent(_:)(v82);
    outlined destroy of StocksKitCurrencyCache.Provider?(v82, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    uint64_t v85 = v110;
    (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v108, v84, v83);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v83);
    uint64_t v86 = (uint64_t)v112;
    uint64_t v87 = v116;
    CRRegister.wrappedValue.getter();
    uint64_t v88 = v114;
    CRRegister.projectedValue.getter();
    specialized CRRegister<>.setIfDifferent(_:)(v86);
    outlined destroy of StocksKitCurrencyCache.Provider?(v86, &demangling cache variable for type metadata for CRAssetOrData?);
    uint64_t v89 = v115;
    (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v113, v88, v87);
    CRRegister.projectedValue.setter();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v87);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v90 = type metadata accessor for Logger();
    __swift_project_value_buffer(v90, (uint64_t)logger);
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v93 = 0;
      _os_log_impl(&dword_20C2D7000, v91, v92, "Importing Image page with different bounds, this should not happen.", v93, 2u);
      MEMORY[0x210550270](v93, -1, -1);
    }
  }
  ContainerCanvasElement<>._applyDifference<A>(id:in:from:)(v122, v120, v45, v39, v95, (uint64_t)&protocol witness table for Image);
  return _s8PaperKit0A0VWOhTm_1(v60, (uint64_t (*)(void))type metadata accessor for Image);
}

uint64_t PaperDocumentPage.applyDifference<A>(id:in:from:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v67 = a1;
  uint64_t v68 = a3;
  __n128 v64 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v62 = *(void *)(v3 - 8);
  uint64_t v63 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v60 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v61 = (char *)&v53 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v7 - 8);
  CGFloat v59 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v58 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  CGFloat v57 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v66 = (char *)&v53 - v11;
  MEMORY[0x270FA5388](v12);
  double v55 = (char *)&v53 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPage?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CRKeyPath();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for PaperDocumentPage();
  uint64_t v26 = *(void *)(v25 - 8);
  double v27 = MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v20, v67, v17, v27);
  uint64_t v30 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  WeakRef.init(id:)();
  type metadata accessor for PaperDocument(0);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  uint64_t v65 = v25;
  if (v31(v16, 1, v25) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for PaperDocumentPage?);
  }
  uint64_t v54 = v30;
  outlined init with take of Paper((uint64_t)v16, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
  uint64_t v33 = v56;
  CRRegister.wrappedValue.getter();
  CGFloat x = v69.origin.x;
  CGFloat y = v69.origin.y;
  CGFloat width = v69.size.width;
  CGFloat height = v69.size.height;
  uint64_t v38 = v55;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v70.origin.CGFloat x = x;
  v70.origin.CGFloat y = y;
  v70.size.CGFloat width = width;
  v70.size.CGFloat height = height;
  if (!CGRectEqualToRect(v69, v70))
  {
    v69.origin.CGFloat x = x;
    v69.origin.CGFloat y = y;
    v69.size.CGFloat width = width;
    v69.size.CGFloat height = height;
    CRRegister.value.setter();
  }
  uint64_t v39 = v58;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v40(v66, v38, v33);
  CRRegister.projectedValue.setter();
  double v41 = v38;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v39 + 8);
  v42(v41, v33);
  CRRegister.wrappedValue.getter();
  CGFloat v43 = v69.origin.x;
  CGFloat v44 = v69.origin.y;
  CGFloat v45 = v69.size.width;
  CGFloat v46 = v69.size.height;
  double v47 = v57;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v71.origin.CGFloat x = v43;
  v71.origin.CGFloat y = v44;
  v71.size.CGFloat width = v45;
  v71.size.CGFloat height = v46;
  if (!CGRectEqualToRect(v69, v71))
  {
    v69.origin.CGFloat x = v43;
    v69.origin.CGFloat y = v44;
    v69.size.CGFloat width = v45;
    v69.size.CGFloat height = v46;
    CRRegister.value.setter();
  }
  v40(v66, v47, v33);
  CRRegister.projectedValue.setter();
  v42(v47, v33);
  uint64_t v48 = v65;
  uint64_t v49 = (uint64_t)v59;
  uint64_t v50 = v63;
  CRRegister.wrappedValue.getter();
  CGFloat v51 = v61;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v49);
  outlined destroy of StocksKitCurrencyCache.Provider?(v49, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  uint64_t v52 = v62;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v60, v51, v50);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v50);
  ContainerCanvasElement<>._applyDifference<A>(id:in:from:)(v67, v64, v68, v48, v54, (uint64_t)&protocol witness table for PaperDocumentPage);
  return _s8PaperKit0A0VWOhTm_1((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
}

uint64_t _s8PaperKit0A0VWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of Paper(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>;
  if (!lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance <> TaggedValue_1<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>;
  if (!lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
    lazy protocol witness table accessor for type Quad and conformance Quad();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad> and conformance <> TaggedValue_2<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Quad and conformance Quad()
{
  unint64_t result = lazy protocol witness table cache variable for type Quad and conformance Quad;
  if (!lazy protocol witness table cache variable for type Quad and conformance Quad)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quad and conformance Quad);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Quad and conformance Quad;
  if (!lazy protocol witness table cache variable for type Quad and conformance Quad)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quad and conformance Quad);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Quad and conformance Quad;
  if (!lazy protocol witness table cache variable for type Quad and conformance Quad)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quad and conformance Quad);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Quad and conformance Quad;
  if (!lazy protocol witness table cache variable for type Quad and conformance Quad)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quad and conformance Quad);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Quad and conformance Quad;
  if (!lazy protocol witness table cache variable for type Quad and conformance Quad)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quad and conformance Quad);
  }
  return result;
}

uint64_t _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id ValueEditingViewController.init(minValue:maxValue:currentValue:unit:contentViewMargin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  swift_unknownObjectWeakInit();
  *(_OWORD *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentSize] = xmmword_20C837A30;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_verticalInterItemSpacing] = 0x4024000000000000;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_stepperSizeHeight] = 0x4043000000000000;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___stepper] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___slider] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_minValue] = a1;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_maxValue] = a2;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue] = a3;
  uint64_t v13 = &v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_unit];
  *(void *)uint64_t v13 = a4;
  *((void *)v13 + 1) = a5;
  *(double *)&v6[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentViewMargin] = a6;
  v15.receiver = v6;
  v15.super_class = (Class)type metadata accessor for ValueEditingViewController();
  return objc_msgSendSuper2(&v15, sel_initWithNibName_bundle_, 0, 0);
}

id ValueEditingViewController.stepper.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___stepper;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___stepper);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___stepper);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_minValue);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_maxValue);
    uint64_t v7 = *(void *)(v4 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_unit);
    uint64_t v8 = *(void *)(v4 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_unit + 8);
    objc_allocWithZone((Class)type metadata accessor for ValueStepper());
    swift_bridgeObjectRetain();
    ValueStepper.init(minValue:maxValue:unit:)(v5, v6, v7, v8);
    uint64_t v9 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v10;
    id v3 = v10;

    id v2 = 0;
  }
  id v11 = v2;
  return v3;
}

char *ValueEditingViewController.slider.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___slider;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___slider);
  if (v2)
  {
    id v3 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___slider);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_minValue);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_maxValue);
    id v7 = objc_allocWithZone((Class)type metadata accessor for ValueSlider());
    uint64_t v8 = ValueSlider.init(minValue:maxValue:)(v5, v6);
    uint64_t v9 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v8;
    id v3 = v8;

    id v2 = 0;
  }
  id v10 = v2;
  return v3;
}

void *ValueEditingViewController.didChangeStepperValue()()
{
  uint64_t v1 = v0;
  id v2 = ValueEditingViewController.stepper.getter();
  uint64_t v3 = ValueStepper.currentValue.getter();

  uint64_t v4 = OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue;
  *(void *)(v1 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue) = v3;
  uint64_t v5 = ValueEditingViewController.slider.getter();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v1 + v4);
  if (*(void *)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue] > v7) {
    uint64_t v7 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue];
  }
  if (v7 >= *(void *)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue]) {
    uint64_t v7 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue];
  }
  uint64_t v8 = &v5[OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue];
  *(void *)uint64_t v8 = v7;
  v8[8] = 0;
  uint64_t v9 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit11ValueSlider_slider];
  *(float *)&double v10 = (float)ValueSlider.currentValue.getter();
  objc_msgSend(v9, sel_setValue_, v10);

  uint64_t result = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_delegate);
  if (result)
  {
    objc_msgSend(result, sel_valueEditingViewController_didChangeValue_, v1, *(void *)(v1 + v4));
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *ValueEditingViewController.didChangeSliderValue()()
{
  uint64_t v1 = v0;
  id v2 = ValueEditingViewController.slider.getter();
  uint64_t v3 = ValueSlider.currentValue.getter();

  uint64_t v4 = OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue;
  *(void *)(v1 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue) = v3;
  uint64_t v5 = (char *)ValueEditingViewController.stepper.getter();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v1 + v4);
  if (*(void *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] > v7) {
    uint64_t v7 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue];
  }
  if (v7 >= *(void *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue]) {
    uint64_t v7 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue];
  }
  uint64_t v8 = &v5[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
  *(void *)uint64_t v8 = v7;
  v8[8] = 0;
  ValueStepper.updateUI()();

  uint64_t result = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_delegate);
  if (result)
  {
    objc_msgSend(result, sel_valueEditingViewController_didChangeValue_, v1, *(void *)(v1 + v4));
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ValueEditingViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  v59.receiver = v0;
  v59.super_class = (Class)type metadata accessor for ValueEditingViewController();
  objc_msgSendSuper2(&v59, sel_viewDidLoad);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  objc_msgSend(v2, sel_setAxis_, 1);
  objc_msgSend(v2, sel_setSpacing_, *(double *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_verticalInterItemSpacing]);
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v2);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20C8344C0;
  id v6 = objc_msgSend(v2, sel_topAnchor);
  id v7 = objc_msgSend(v1, sel_view);
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  id v10 = objc_msgSend(v9, sel_topAnchor);
  double v11 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentViewMargin];
  id v12 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v10, v11);

  *(void *)(v5 + 32) = v12;
  id v13 = objc_msgSend(v2, sel_leadingAnchor);
  id v14 = objc_msgSend(v1, sel_view);
  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_super v15 = v14;
  id v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

  id v17 = objc_msgSend(v16, sel_leadingAnchor);
  id v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v17, v11);

  *(void *)(v5 + 40) = v18;
  id v19 = objc_msgSend(v2, sel_bottomAnchor);
  id v20 = objc_msgSend(v1, sel_view);
  if (!v20)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v21 = v20;
  id v22 = objc_msgSend(v20, sel_safeAreaLayoutGuide);

  id v23 = objc_msgSend(v22, sel_bottomAnchor);
  double v24 = -v11;
  id v25 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v23, v24);

  *(void *)(v5 + 48) = v25;
  id v26 = objc_msgSend(v2, sel_trailingAnchor);
  id v27 = objc_msgSend(v1, sel_view);
  if (!v27)
  {
LABEL_19:
    __break(1u);
    return;
  }
  uint64_t v28 = v27;
  uint64_t v29 = self;
  id v30 = objc_msgSend(v28, sel_safeAreaLayoutGuide);

  id v31 = objc_msgSend(v30, sel_trailingAnchor);
  id v32 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v31, v24);

  *(void *)(v5 + 56) = v32;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_activateConstraints_, isa);

  id v34 = ValueEditingViewController.stepper.getter();
  objc_msgSend(v2, sel_addArrangedSubview_, v34);

  id v35 = ValueEditingViewController.stepper.getter();
  id v36 = objc_msgSend(v35, sel_heightAnchor);

  id v37 = objc_msgSend(v36, sel_constraintEqualToConstant_, *(double *)&v1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_stepperSizeHeight]);
  objc_msgSend(v37, sel_setActive_, 1);

  uint64_t v38 = ValueEditingViewController.slider.getter();
  objc_msgSend(v2, sel_addArrangedSubview_, v38);

  uint64_t v39 = ValueEditingViewController.slider.getter();
  id v40 = objc_msgSend(v39, sel_widthAnchor);

  id v41 = ValueEditingViewController.stepper.getter();
  id v42 = objc_msgSend(v41, sel_widthAnchor);

  id v43 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v42);
  objc_msgSend(v43, sel_setActive_, 1);

  id v44 = ValueEditingViewController.stepper.getter();
  objc_msgSend(v44, sel_addTarget_action_forControlEvents_, v1, sel_didChangeStepperValue, 4096);

  CGFloat v45 = ValueEditingViewController.slider.getter();
  objc_msgSend(v45, sel_addTarget_action_forControlEvents_, v1, sel_didStartChangingSliderValue, 1);

  CGFloat v46 = ValueEditingViewController.slider.getter();
  objc_msgSend(v46, sel_addTarget_action_forControlEvents_, v1, sel_didFinishChangingSliderValue, 448);

  double v47 = ValueEditingViewController.slider.getter();
  objc_msgSend(v47, sel_addTarget_action_forControlEvents_, v1, sel_didChangeSliderValue, 4096);

  uint64_t v48 = ValueEditingViewController.slider.getter();
  uint64_t v49 = v48;
  uint64_t v50 = OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue;
  uint64_t v51 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue];
  if (*(void *)&v48[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue] > v51) {
    uint64_t v51 = *(void *)&v48[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue];
  }
  if (v51 >= *(void *)&v48[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue]) {
    uint64_t v51 = *(void *)&v48[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue];
  }
  uint64_t v52 = &v48[OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue];
  *(void *)uint64_t v52 = v51;
  v52[8] = 0;
  uint64_t v53 = *(void **)&v48[OBJC_IVAR____TtC8PaperKit11ValueSlider_slider];
  *(float *)&double v54 = (float)ValueSlider.currentValue.getter();
  objc_msgSend(v53, sel_setValue_, v54);

  double v55 = (char *)ValueEditingViewController.stepper.getter();
  uint64_t v56 = v55;
  uint64_t v57 = *(void *)&v1[v50];
  if (*(void *)&v55[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] > v57) {
    uint64_t v57 = *(void *)&v55[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue];
  }
  if (v57 >= *(void *)&v55[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue]) {
    uint64_t v57 = *(void *)&v55[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue];
  }
  uint64_t v58 = &v55[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
  *(void *)uint64_t v58 = v57;
  v58[8] = 0;
  ValueStepper.updateUI()();

  objc_msgSend(v1, sel_setPreferredContentSize_, *(double *)&v1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentSize], *(double *)&v1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentSize + 8]);
}

void *@objc ValueEditingViewController.didStartChangingSliderValue()(char *a1, uint64_t a2, SEL *a3)
{
  uint64_t result = (void *)MEMORY[0x210550400](&a1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_delegate]);
  if (result)
  {
    id v6 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, *a3))
    {
      uint64_t v7 = *(void *)&a1[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_currentValue];
      uint64_t v8 = a1;
      objc_msgSend(v6, *a3, v8, v7);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

id ValueEditingViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ValueEditingViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ValueEditingViewController()
{
  return self;
}

void specialized ValueEditingViewController.init(coder:)()
{
  swift_unknownObjectWeakInit();
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_contentSize] = xmmword_20C837A30;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_verticalInterItemSpacing] = 0x4024000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController_stepperSizeHeight] = 0x4043000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___stepper] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit26ValueEditingViewController____lazy_storage___slider] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void one-time initialization function for linkCornerRadius()
{
  static Link.linkCornerRadius = 0x4024000000000000;
}

void specialized static Link.renderLink(synapseItem:in:frame:rotation:darkMode:isRTL:)(void *a1, CGContext *a2, char a3, char a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  id v91 = a1;
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v17 = type metadata accessor for CGPathFillRule();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  id v20 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGContextSaveGState(a2);
  v96.origin.CGFloat x = a5;
  v96.origin.CGFloat y = a6;
  v96.size.CGFloat width = a7;
  v96.size.CGFloat height = a8;
  double MidX = CGRectGetMidX(v96);
  v88.origin.CGFloat x = a5;
  v88.origin.CGFloat y = a6;
  v97.origin.CGFloat x = a5;
  v97.origin.CGFloat y = a6;
  v88.size.CGFloat width = a7;
  v88.size.CGFloat height = a8;
  v97.size.CGFloat width = a7;
  v97.size.CGFloat height = a8;
  double MidY = CGRectGetMidY(v97);
  CGAffineTransformMakeRotation(&v94, a9);
  long long v89 = *(_OWORD *)&v94.c;
  long long v90 = *(_OWORD *)&v94.a;
  CGFloat v23 = -MidX;
  tCGFloat x = v94.tx;
  tCGFloat y = v94.ty;
  CGAffineTransformMakeTranslation(&v94, v23, -MidY);
  CGFloat a = v94.a;
  CGFloat b = v94.b;
  CGFloat c = v94.c;
  CGFloat d = v94.d;
  CGFloat v30 = v94.tx;
  CGFloat v31 = v94.ty;
  *(_OWORD *)&v93.CGFloat a = v90;
  *(_OWORD *)&v93.CGFloat c = v89;
  v93.tCGFloat x = tx;
  v93.tCGFloat y = ty;
  CGAffineTransformConcat(&v92, &v94, &v93);
  long long v89 = *(_OWORD *)&v92.c;
  long long v90 = *(_OWORD *)&v92.a;
  CGFloat v32 = v92.tx;
  CGFloat v33 = v92.ty;
  v94.CGFloat a = a;
  v94.CGFloat b = b;
  v94.CGFloat c = c;
  v94.CGFloat d = d;
  v94.tCGFloat x = v30;
  v94.tCGFloat y = v31;
  CGAffineTransformInvert(&v93, &v94);
  *(_OWORD *)&v94.CGFloat a = v90;
  *(_OWORD *)&v94.CGFloat c = v89;
  v94.tCGFloat x = v32;
  v94.tCGFloat y = v33;
  CGAffineTransformConcat(&v92, &v94, &v93);
  CGAffineTransform v94 = v92;
  CGContextConcatCTM(a2, &v94);
  if (a3)
  {
    CGFloat v34 = 0.152941176;
    CGFloat v35 = 0.145098039;
    CGFloat v36 = 0.164705882;
    CGFloat v37 = 1.0;
  }
  else
  {
    CGFloat v34 = 0.894117647;
    CGFloat v36 = 0.901960784;
    CGFloat v37 = 1.0;
    CGFloat v35 = 0.894117647;
  }
  *(void *)&long long v90 = CGColorCreateSRGB(v34, v35, v36, v37);
  CGContextSetFillColorWithColor(a2, (CGColorRef)v90);
  if (one-time initialization token for linkCornerRadius != -1) {
    swift_once();
  }
  CGFloat x = v88.origin.x;
  CGFloat y = v88.origin.y;
  CGFloat width = v88.size.width;
  CGFloat height = v88.size.height;
  *(void *)&long long v89 = CGPathCreateWithRoundedRect(v88, *(CGFloat *)&static Link.linkCornerRadius, *(CGFloat *)&static Link.linkCornerRadius, 0);
  CGContextAddPath(a2, (CGPathRef)v89);
  CGContextClosePath(a2);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, *MEMORY[0x263F00040], v17);
  CGContextRef.fillPath(using:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v98.origin.CGFloat x = x;
  v98.origin.CGFloat y = y;
  v98.size.CGFloat width = width;
  v98.size.CGFloat height = height;
  double v42 = CGRectGetMidX(v98);
  v99.origin.CGFloat x = x;
  v99.origin.CGFloat y = y;
  v99.size.CGFloat width = width;
  v99.size.CGFloat height = height;
  double v43 = CGRectGetMidY(v99);
  v100.origin.CGFloat x = x;
  v100.origin.CGFloat y = y;
  v100.size.CGFloat width = width;
  v100.size.CGFloat height = height;
  double v44 = CGRectGetWidth(v100) * 0.95;
  v101.origin.CGFloat x = x;
  v101.origin.CGFloat y = y;
  v101.size.CGFloat width = width;
  v101.size.CGFloat height = height;
  double v45 = CGRectGetHeight(v101) * 0.8;
  v102.origin.CGFloat x = v42 - v44 * 0.5;
  v102.origin.CGFloat y = v43 - v45 * 0.5;
  v102.size.CGFloat width = v44;
  v102.size.CGFloat height = v45;
  CGFloat v46 = CGRectGetWidth(v102);
  memset(&v94, 0, 32);
  CGFloat v47 = v46 * 0.75;
  memset(&v93, 0, 32);
  v103.origin.CGFloat x = v42 - v44 * 0.5;
  v103.origin.CGFloat y = v43 - v45 * 0.5;
  v103.size.CGFloat width = v44;
  v103.size.CGFloat height = v45;
  CGRectDivide(v103, (CGRect *)&v94, (CGRect *)&v93, v47, CGRectMinXEdge);
  if (a4)
  {
    v104.origin.CGFloat x = v42 - v44 * 0.5;
    v104.origin.CGFloat y = v43 - v45 * 0.5;
    v104.size.CGFloat width = v44;
    v104.size.CGFloat height = v45;
    CGFloat v48 = CGRectGetWidth(v104) * 0.25;
    memset(&v94, 0, 32);
    memset(&v93, 0, 32);
    v105.origin.CGFloat x = v42 - v44 * 0.5;
    v105.origin.CGFloat y = v43 - v45 * 0.5;
    v105.size.CGFloat width = v44;
    v105.size.CGFloat height = v45;
    CGRectDivide(v105, (CGRect *)&v94, (CGRect *)&v93, v48, CGRectMinXEdge);
    CGFloat v49 = v94.a;
    CGFloat v50 = v94.b;
    CGFloat v51 = v94.c;
    CGFloat v52 = v94.d;
    double v53 = v93.c;
    v88.size.CGFloat width = v93.b;
    v88.size.CGFloat height = v93.a;
    uint64_t v54 = 1;
    double v55 = v93.d;
  }
  else
  {
    uint64_t v54 = 0;
    double v53 = v94.c;
    v88.size.CGFloat width = v94.b;
    v88.size.CGFloat height = v94.a;
    double v55 = v94.d;
    CGFloat v49 = v93.a;
    CGFloat v50 = v93.b;
    CGFloat v51 = v93.c;
    CGFloat v52 = v93.d;
  }
  uint64_t v56 = self;
  uint64_t v57 = &selRef_whiteColor;
  if ((a3 & 1) == 0) {
    uint64_t v57 = &selRef_blackColor;
  }
  id v58 = [v56 *v57];
  id v59 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x263F835D0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C837A90;
  uint64_t v61 = (void *)*MEMORY[0x263F814F0];
  *(void *)(inited + 32) = *MEMORY[0x263F814F0];
  uint64_t v62 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  *(void *)(inited + 40) = v59;
  uint64_t v63 = (void *)*MEMORY[0x263F81500];
  *(void *)(inited + 64) = v62;
  *(void *)(inited + 72) = v63;
  uint64_t v64 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(void *)(inited + 80) = v58;
  uint64_t v65 = (void *)*MEMORY[0x263F81608];
  *(void *)(inited + 104) = v64;
  *(void *)(inited + 112) = v65;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_20C832C20;
  *(void *)(v66 + 32) = v54;
  *(void *)(inited + 144) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  *(void *)(inited + 120) = v66;
  id v67 = v61;
  id v68 = v59;
  id v69 = v63;
  id v70 = v58;
  id v71 = v65;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  id v72 = v91;
  id v73 = objc_msgSend(v91, sel_displayTitle);
  if (v73
    || (id v73 = objc_msgSend(v72, sel_sourceLastKnownName)) != 0
    || (id v73 = objc_msgSend(v72, sel_webpageDisplayDomain)) != 0)
  {
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v76 = v75;
  }
  else
  {
    uint64_t v74 = 0;
    unint64_t v76 = 0xE000000000000000;
  }
  id v77 = objc_allocWithZone(MEMORY[0x263F086A0]);
  double v78 = (void *)MEMORY[0x21054D080](v74, v76);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v80 = objc_msgSend(v77, sel_initWithString_attributes_, v78, isa);

  id v81 = objc_allocWithZone((Class)type metadata accessor for SynapseLinkItem());
  id v82 = SynapseLinkItem.init(synapseItem:)(v72);
  id v83 = SynapseLinkItem.icon.getter();
  v106.origin.CGFloat x = v49;
  v106.origin.CGFloat y = v50;
  v106.size.CGFloat width = v51;
  v106.size.CGFloat height = v52;
  double v84 = CGRectGetWidth(v106);
  v107.origin.CGFloat x = v49;
  v107.origin.CGFloat y = v50;
  v107.size.CGFloat width = v51;
  v107.size.CGFloat height = v52;
  double v85 = CGRectGetHeight(v107);
  if (v85 < v84) {
    double v84 = v85;
  }
  v108.origin.CGFloat x = v49;
  v108.origin.CGFloat y = v50;
  v108.size.CGFloat width = v51;
  v108.size.CGFloat height = v52;
  double v86 = CGRectGetMidX(v108);
  v109.origin.CGFloat x = v49;
  v109.origin.CGFloat y = v50;
  v109.size.CGFloat width = v51;
  v109.size.CGFloat height = v52;
  CGFloat v87 = CGRectGetMidY(v109) - v84 * 0.5;
  UIGraphicsPushContext(a2);
  objc_msgSend(v80, sel_drawInRect_, v88.size.height, v88.size.width, v53, v55);
  objc_msgSend(v83, sel_drawInRect_, v86 - v84 * 0.5, v87, v84, v84);
  UIGraphicsPopContext();
  CGContextRestoreGState(a2);
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

char *SignatureEditViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(_OWORD *)&v3[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_panelSize] = xmmword_20C837AA0;
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_navigationBar;
  id v8 = objc_allocWithZone(MEMORY[0x263F829A0]);
  id v9 = v3;
  *(void *)&v3[v7] = objc_msgSend(v8, sel_init);
  id v10 = &v9[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion];
  *(void *)id v10 = UnknownCanvasElementView.flags.modify;
  *((void *)v10 + 1) = 0;

  if (a2)
  {
    double v11 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    double v11 = 0;
  }
  v19.receiver = v9;
  v19.super_class = (Class)type metadata accessor for SignatureEditViewController();
  id v12 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, v11, a3);

  id v13 = (char *)v12;
  objc_msgSend(v13, sel_setModalTransitionStyle_, 0);
  objc_msgSend(v13, sel_setModalPresentationStyle_, 2);
  objc_msgSend(v13, sel_setModalInPresentation_, 1);
  objc_msgSend(v13, sel_setPreferredContentSize_, *(double *)&v13[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_panelSize], *(double *)&v13[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_panelSize + 8]);
  id v14 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_navigationBar];
  objc_msgSend(v14, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_super v15 = self;
  id v16 = v14;
  id v17 = objc_msgSend(v15, sel_systemBackgroundColor);
  objc_msgSend(v16, sel_setBackgroundColor_, v17);

  return v13;
}

Swift::Void __swiftcall SignatureEditViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  v64.receiver = v0;
  v64.super_class = (Class)type metadata accessor for SignatureEditViewController();
  objc_msgSendSuper2(&v64, sel_viewDidLoad);
  id v2 = objc_msgSend(v0, sel_view);
  if (!v2)
  {
    __break(1u);
    goto LABEL_16;
  }
  id v3 = v2;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_navigationBar];
  objc_msgSend(v2, sel_addSubview_, v4);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20C8344D0;
  id v6 = objc_msgSend(v4, sel_widthAnchor);
  id v7 = objc_msgSend(v1, sel_view);
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v8 = v7;
  id v9 = objc_msgSend(v7, sel_widthAnchor);

  id v10 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v9);
  *(void *)(v5 + 32) = v10;
  id v11 = objc_msgSend(v4, sel_topAnchor);
  id v12 = objc_msgSend(v1, sel_view);
  if (!v12)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v13 = v12;
  id v14 = self;
  id v15 = objc_msgSend(v13, sel_safeAreaLayoutGuide);

  id v16 = objc_msgSend(v15, sel_topAnchor);
  id v17 = objc_msgSend(v11, sel_constraintEqualToAnchor_, v16);

  *(void *)(v5 + 40) = v17;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, isa);

  type metadata accessor for SignatureListViewController();
  uint64_t v19 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion];
  uint64_t v20 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion + 8];
  swift_retain();
  uint64_t v21 = (void *)SignatureListViewController.__allocating_init(editable:_:)(1, v19, v20);
  id v22 = objc_msgSend(v21, sel_view);
  if (!v22)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  CGFloat v23 = v22;
  objc_msgSend(v22, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  objc_msgSend(v1, sel_addChildViewController_, v21);
  id v24 = objc_msgSend(v1, sel_view);
  if (!v24)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v25 = v24;
  id v26 = objc_msgSend(v21, sel_view);
  if (!v26)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v27 = v26;
  objc_msgSend(v25, sel_addSubview_, v26);

  objc_msgSend(v21, sel_didMoveToParentViewController_, v1);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_20C8344C0;
  id v29 = objc_msgSend(v21, sel_view);
  if (!v29)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  CGFloat v30 = v29;
  id v31 = objc_msgSend(v29, sel_leadingAnchor);

  id v32 = objc_msgSend(v1, sel_view);
  if (!v32)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  CGFloat v33 = v32;
  id v34 = objc_msgSend(v32, sel_leadingAnchor);

  id v35 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v34);
  *(void *)(v28 + 32) = v35;
  id v36 = objc_msgSend(v21, sel_view);
  if (!v36)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  CGFloat v37 = v36;
  id v38 = objc_msgSend(v36, sel_trailingAnchor);

  id v39 = objc_msgSend(v1, sel_view);
  if (!v39)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  id v40 = v39;
  id v41 = objc_msgSend(v39, sel_trailingAnchor);

  id v42 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v41);
  *(void *)(v28 + 40) = v42;
  id v43 = objc_msgSend(v21, sel_view);
  if (!v43)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  double v44 = v43;
  id v45 = objc_msgSend(v43, sel_topAnchor);

  id v46 = objc_msgSend(v4, sel_bottomAnchor);
  id v47 = objc_msgSend(v45, sel_constraintEqualToAnchor_, v46);

  *(void *)(v28 + 48) = v47;
  id v48 = objc_msgSend(v21, sel_view);
  if (!v48)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  CGFloat v49 = v48;
  id v50 = objc_msgSend(v48, sel_bottomAnchor);

  id v51 = objc_msgSend(v1, sel_view);
  if (v51)
  {
    CGFloat v52 = v51;
    id v53 = objc_msgSend(v51, sel_safeAreaLayoutGuide);

    id v54 = objc_msgSend(v53, sel_bottomAnchor);
    id v55 = objc_msgSend(v50, sel_constraintEqualToAnchor_, v54);

    *(void *)(v28 + 56) = v55;
    specialized Array._endMutation()();
    Class v56 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_activateConstraints_, v56);

    id v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F829C8]), sel_init);
    id v58 = objc_msgSend(v21, sel_title);
    objc_msgSend(v57, sel_setTitle_, v58);

    id v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824A8]), sel_initWithBarButtonSystemItem_target_action_, 4, v1, sel_addAction_);
    objc_msgSend(v57, sel_setLeftBarButtonItem_, v59);

    id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824A8]), sel_initWithBarButtonSystemItem_target_action_, 0, v1, sel_doneAction_);
    objc_msgSend(v57, sel_setRightBarButtonItem_, v60);

    uint64_t v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_20C835790;
    *(void *)(v61 + 32) = v57;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UINavigationItem);
    id v62 = v57;
    Class v63 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setItems_, v63);

    return;
  }
LABEL_27:
  __break(1u);
}

id SignatureEditViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureEditViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SignatureEditViewController()
{
  return self;
}

void specialized SignatureEditViewController.addAction(_:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)SignatureLogger);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_20C2D7000, v3, v4, "showing creation panel", v5, 2u);
    MEMORY[0x210550270](v5, -1, -1);
  }

  uint64_t v7 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion];
  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion + 8];
  id v8 = objc_allocWithZone((Class)type metadata accessor for SignatureCreationViewController());
  swift_retain();
  id v9 = (char *)objc_msgSend(v8, sel_initWithNibName_bundle_, 0, 0);
  id v10 = &v9[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion];
  *(void *)id v10 = v7;
  *((void *)v10 + 1) = v6;
  swift_release();
  id v11 = objc_msgSend(v1, sel_presentingViewController);
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = v9;
    v17[4] = partial apply for closure #1 in SignatureEditViewController.addAction(_:);
    v17[5] = v13;
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 1107296256;
    v17[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v17[3] = &block_descriptor_10;
    id v14 = _Block_copy(v17);
    id v15 = v12;
    id v16 = v9;
    swift_release();
    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 1, v14);
    _Block_release(v14);
  }
  else
  {
    __break(1u);
  }
}

void specialized SignatureEditViewController.doneAction(_:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)SignatureLogger);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_20C2D7000, v3, v4, "edit panel done", v5, 2u);
    MEMORY[0x210550270](v5, -1, -1);
  }

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v1;
  v9[4] = partial apply for closure #1 in SignatureEditViewController.doneAction(_:);
  v9[5] = v6;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v9[3] = &block_descriptor_15;
  uint64_t v7 = _Block_copy(v9);
  id v8 = v1;
  swift_release();
  objc_msgSend(v8, sel_dismissViewControllerAnimated_completion_, 1, v7);
  _Block_release(v7);
}

uint64_t sub_20C3E3158()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in SignatureEditViewController.doneAction(_:)()
{
  uint64_t v1 = *(void (**)(void))(*(void *)(v0 + 16)
                                     + OBJC_IVAR____TtC8PaperKit27SignatureEditViewController_completion);
  swift_retain();
  v1(0);
  return swift_release();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t sub_20C3E3200()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id partial apply for closure #1 in SignatureEditViewController.addAction(_:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_presentViewController_animated_completion_, *(void *)(v0 + 24), 1, 0);
}

void @objc SignatureView.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = direct field offset for SignatureView.imageView;
  id v6 = objc_allocWithZone(MEMORY[0x263F82828]);
  id v7 = a3;
  *(void *)&a1[v5] = objc_msgSend(v6, sel_init);
  *(void *)&a1[direct field offset for SignatureView.defaultSignatureWidth] = 2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t SignatureView.modifiableProperties.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  os_log_type_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)&v17 - v6;
  id v8 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  id v9 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v9(v7, v8, v1);
  swift_getKeyPath();
  id v10 = (unsigned __int8 *)lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.subscript.getter();
  swift_release();
  id v11 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  uint64_t result = v11(v7, v1);
  if (v17)
  {
    int v13 = v17[OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned];

    if (v13 == 1)
    {
      uint64_t v14 = ((uint64_t (*)(char *, char *, uint64_t))v9)(v4, v8, v1);
      MEMORY[0x270FA5388](v14);
      *(&v17 - 4) = (unsigned __int8 *)type metadata accessor for Signature();
      *(&v17 - 3) = v10;
      *(&v17 - 2) = (unsigned __int8 *)&protocol witness table for Signature;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v11(v4, v1);
      uint64_t result = 0;
      if ((v17 & 4) == 0)
      {
        uint64_t v15 = 9;
        if ((v17 & 0x80) == 0) {
          uint64_t v15 = 11;
        }
        uint64_t v16 = 3;
        if ((v17 & 0x80) != 0) {
          uint64_t v16 = 1;
        }
        if ((v17 & 0x10) != 0) {
          return v16;
        }
        else {
          return v15;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SignatureView.isSelectable.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  os_log_type_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v8)
  {
    uint64_t v7 = v8[OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned];

    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SignatureView.isSelected.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected);
}

void SignatureView.isSelected.setter(char a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  specialized CanvasElementView.isSelected.didset();
  SignatureView.updateUI()();
}

uint64_t closure #1 in SignatureView.width.setter()
{
  return Capsule.Ref<>.subscript.setter();
}

uint64_t SignatureView.color.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v14 - v6;
  id v8 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  id v9 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v9(v7, v8, v1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.subscript.getter();
  swift_release();
  id v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v10(v7, v1);
  if (!v14) {
    return 0;
  }

  v9(v5, v8, v1);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v10)(v5, v1);
  id v12 = v14;
  if (v14)
  {
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v14);

    return (uint64_t)v13;
  }
  __break(1u);
  return result;
}

void @objc SignatureView.traitCollectionDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    id v8 = a3;
    id v4 = a1;
    id v5 = objc_msgSend(v8, sel_userInterfaceStyle);
    id v6 = objc_msgSend(v4, sel_traitCollection);
    id v7 = objc_msgSend(v6, sel_userInterfaceStyle);

    if (v5 != v7) {
      SignatureView.updateUI()();
    }
  }
}

Swift::Void __swiftcall SignatureView.layoutSubviews()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  id v51 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  id v6 = (char *)&v46 - v5;
  id v7 = (objc_class *)type metadata accessor for SignatureView();
  v58.receiver = v0;
  v58.super_class = v7;
  objc_msgSendSuper2(&v58, sel_layoutSubviews);
  id v8 = *(void **)((char *)v0 + direct field offset for SignatureView.imageView);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  id v54 = v8;
  objc_msgSend(v8, sel_setTransform_, &t1);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v8, sel_setFrame_);
  uint64_t v9 = *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  id v46 = v0;
  id v10 = (char *)v0 + v9;
  swift_beginAccess();
  id v11 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v11(v6, v10, v1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.subscript.getter();
  swift_release();
  id v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v12 = v2 + 8;
  id v13 = v14;
  v14(v6, v1);
  v15.n128_u64[0] = *(void *)&t1.c;
  if (t1.c >= 0.0) {
    double v16 = 1.0;
  }
  else {
    double v16 = -1.0;
  }
  ((void (*)(char *, char *, uint64_t, __n128))v11)(v6, v10, v1, v15);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v13(v6, v1);
  if (t1.d >= 0.0) {
    double v17 = 1.0;
  }
  else {
    double v17 = -1.0;
  }
  CGAffineTransformMakeScale(&t1, v16, v17);
  long long v53 = *(_OWORD *)&t1.a;
  long long v52 = *(_OWORD *)&t1.c;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  id v47 = v10;
  id v50 = v11;
  v11(v6, v10, v1);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v49 = v12;
  id v48 = v13;
  v13(v6, v1);
  CGAffineTransformMakeRotation(&t1, t2.a);
  long long v20 = *(_OWORD *)&t1.a;
  long long v21 = *(_OWORD *)&t1.c;
  long long v22 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v53;
  *(_OWORD *)&t1.CGFloat c = v52;
  t1.tCGFloat x = tx;
  t1.tCGFloat y = ty;
  *(_OWORD *)&t2.CGFloat a = v20;
  *(_OWORD *)&t2.CGFloat c = v21;
  *(_OWORD *)&t2.tCGFloat x = v22;
  CGAffineTransformConcat(&v55, &t1, &t2);
  CGAffineTransform t1 = v55;
  id v23 = v54;
  objc_msgSend(v54, sel_setTransform_, &t1);
  id v24 = objc_msgSend(v23, sel_image);

  if (!v24) {
    goto LABEL_11;
  }
  id v25 = v54;
  id v26 = objc_msgSend(v54, sel_image);
  if (!v26)
  {
    __break(1u);
    return;
  }
  id v27 = v26;
  objc_msgSend(v26, sel_size);
  double v29 = v28;
  double v31 = v30;

  objc_msgSend(v25, sel_bounds);
  if (v29 != v33 || v31 != v32)
  {
LABEL_11:
    id v34 = v51;
    id v35 = v47;
    id v36 = v50;
    v50(v51, v47, v1);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    CGFloat v37 = v48;
    v48(v34, v1);
    CGFloat a = t2.a;
    if (*(void *)&t2.a)
    {
      objc_msgSend(v46, sel_bounds);
      unint64_t v40 = v39;
      unint64_t v42 = v41;
      id v43 = (objc_class *)SignatureView.color.getter();
      v36(v6, v35, v1);
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v37(v6, v1);
      v59.is_nil = LOBYTE(t1.a);
      v60.CGPathRef value = LOBYTE(t1.b);
      v59.value.super.Class isa = v43;
      v60.is_nil = 0;
      id v45 = (void *)SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)((CGSize)__PAIR128__(v42, v40), v59, v60, v44);
    }
    else
    {
      id v45 = 0;
    }
    objc_msgSend(v54, sel_setImage_, v45);
  }
}

void @objc SignatureView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  SignatureView.layoutSubviews()();
}

Swift::Void __swiftcall SignatureView.updateUI()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for Signature();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized CanvasElementView.updateGestures()();
  specialized CanvasElementView.updateFrame()();
  uint64_t v9 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  id v10 = (void *)MEMORY[0x263F8EED0];
  if (v9)
  {
    id v11 = v9;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v9) + 0x680))();
  }
  uint64_t v12 = (char *)v1 + *(void *)((*v10 & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v12, v5);
  lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined destroy of Signature((uint64_t)v4);
  id v13 = objc_msgSend(self, sel_blackColor);
  id v26 = v13;
  uint64_t v14 = SignatureView.color.getter();
  if (v14)
  {
    __n128 v15 = (void *)v14;
    id v16 = objc_msgSend(v1, sel_traitCollection);
    objc_msgSend(v16, sel_userInterfaceStyle);

    uint64_t v17 = static PKInkingTool.convertColor(_:from:to:)();
    id v26 = (id)v17;
  }
  id v18 = objc_msgSend(v1, sel_traitCollection);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v1;
  *(void *)(v19 + 24) = &v26;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = partial apply for closure #1 in SignatureView.updateUI();
  *(void *)(v20 + 24) = v19;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_16;
  long long v21 = _Block_copy(aBlock);
  long long v22 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v18, sel_performAsCurrentTraitCollection_, v21);

  _Block_release(v21);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    id v24 = v26;
    swift_release();
  }
}

void closure #1 in SignatureView.updateUI()(void *a1, void **a2)
{
  id v24 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  id v25 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v23 - v7;
  id v26 = *(id *)((char *)a1 + direct field offset for SignatureView.imageView);
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  id v10 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v10(v8, v9, v3);
  swift_getKeyPath();
  unint64_t v11 = lazy protocol witness table accessor for type Signature and conformance Signature();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v8, v3);
  id v13 = v29;
  if (v29)
  {
    objc_msgSend(a1, sel_bounds);
    unint64_t v15 = v14;
    unint64_t v17 = v16;
    id v18 = v25;
    unint64_t v23 = v11;
    uint64_t v19 = *v24;
    v10(v25, v9, v3);
    swift_getKeyPath();
    id v20 = v19;
    Capsule<>.subscript.getter();
    swift_release();
    v12(v18, v3);
    v30.is_nil = v27;
    v31.CGPathRef value = v28;
    v30.value.super.Class isa = (Class)v19;
    v31.is_nil = 0;
    long long v22 = (void *)SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)((CGSize)__PAIR128__(v17, v15), v30, v31, v21);
  }
  else
  {
    long long v22 = 0;
  }
  objc_msgSend(v26, sel_setImage_, v22);
}

id @objc SignatureView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(uint64_t a1)
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CC8]), sel_initWithView_, *(void *)(a1 + direct field offset for SignatureView.imageView));
  return v1;
}

id SignatureView.dragInteractionPreviewForLifting(item:session:)()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for SignatureView.imageView);
  id v2 = objc_allocWithZone(MEMORY[0x263F82CB8]);
  return objc_msgSend(v2, sel_initWithView_, v1);
}

Swift::OpaquePointer_optional __swiftcall SignatureView.pasteboardRepresentation()()
{
  uint64_t v1 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v6 = objc_msgSend(*(id *)(v0 + direct field offset for SignatureView.imageView), sel_image, v3);
  if (v6)
  {
    id v8 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C832C20;
    static UTType.png.getter();
    uint64_t v10 = UTType.identifier.getter();
    uint64_t v12 = v11;
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v5, v1);
    *(void *)(inited + 32) = v10;
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 72) = type metadata accessor for UIImage();
    *(void *)(inited + 48) = v8;
    id v6 = (id)specialized Dictionary.init(dictionaryLiteral:)(inited);
  }
  result.value._rawValue = v6;
  result.is_nil = v7;
  return result;
}

void SignatureView.__ivar_destroyer()
{
}

id SignatureView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc SignatureView.__ivar_destroyer(uint64_t a1)
{
}

uint64_t type metadata accessor for SignatureView()
{
  uint64_t result = type metadata singleton initialization cache for SignatureView;
  if (!type metadata singleton initialization cache for SignatureView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SignatureView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for SignatureView()
{
  return type metadata accessor for SignatureView();
}

unint64_t lazy protocol witness table accessor for type Signature and conformance Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type Signature and conformance Signature;
  if (!lazy protocol witness table cache variable for type Signature and conformance Signature)
  {
    type metadata accessor for Signature();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature);
  }
  return result;
}

unint64_t type metadata accessor for UIImage()
{
  unint64_t result = lazy cache variable for type metadata for UIImage;
  if (!lazy cache variable for type metadata for UIImage)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  }
  return result;
}

uint64_t outlined destroy of Signature(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Signature();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20C3E4AD8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in SignatureView.updateUI()()
{
  closure #1 in SignatureView.updateUI()(*(void **)(v0 + 16), *(void ***)(v0 + 24));
}

uint64_t sub_20C3E4B18()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t sub_20C3E4B48()
{
  return 24;
}

__n128 sub_20C3E4B54(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void *specialized SignatureView.init(frame:canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  id v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = direct field offset for SignatureView.imageView;
  id v20 = objc_allocWithZone(MEMORY[0x263F82828]);
  Swift::Bool v21 = v7;
  *(void *)&v7[v19] = objc_msgSend(v20, sel_init);
  *(void *)&v21[direct field offset for SignatureView.defaultSignatureWidth] = 2;

  uint64_t v48 = v16;
  uint64_t v22 = v16;
  uint64_t v23 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v18, a1, v15);
  id v24 = a3;
  id v25 = a2;
  id v26 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v18, a2, a3, a4, a5, a6, a7);

  uint64_t v27 = *(void *)((char *)v26 + direct field offset for SignatureView.imageView);
  unsigned __int8 v28 = v26;
  objc_msgSend(v28, sel_addSubview_, v27);
  objc_msgSend(v28, sel_setIsAccessibilityElement_, 1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature();
  double v29 = v28;
  Capsule<>.subscript.getter();
  swift_release();
  UIColor_optional v30 = v49;
  if (v49)
  {
    uint64_t v31 = *(void *)&v49[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
    unint64_t v32 = *(void *)&v49[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription + 8];
    outlined copy of SignatureDescription(v31, v32);

    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v52._unint64_t object = (void *)0x800000020C853BE0;
    v33._uint64_t countAndFlagsBits = 0x727574616E676953;
    v33._unint64_t object = (void *)0xE900000000000065;
    v34.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v34.value._unint64_t object = (void *)0xEB00000000656C62;
    v35._uint64_t countAndFlagsBits = 0;
    v35._unint64_t object = (void *)0xE000000000000000;
    v52._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    Swift::String v36 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, v34, paperKitBundle, v35, v52);
    outlined consume of SignatureDescription(v31, v32);
    CGFloat v37 = (void *)MEMORY[0x21054D080](v36._countAndFlagsBits, v36._object);
    swift_bridgeObjectRelease();
  }
  else
  {
    CGFloat v37 = 0;
  }
  objc_msgSend(v29, sel_setAccessibilityLabel_, v37);

  swift_getKeyPath();
  id v38 = v29;
  Capsule<>.subscript.getter();
  swift_release();
  unint64_t v39 = v51;
  if (v51)
  {
    uint64_t v41 = *(void *)&v51[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
    unint64_t v40 = *(void *)&v51[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription + 8];
    outlined copy of SignatureDescription(v41, v40);

    if (v40 - 1 >= 5)
    {
      if (v40) {
        uint64_t countAndFlagsBits = v41;
      }
      else {
        uint64_t countAndFlagsBits = 0;
      }
      if (v40) {
        unint64_t object = v40;
      }
      else {
        unint64_t object = 0xE000000000000000;
      }
    }
    else
    {
      uint64_t v49 = (char *)v41;
      unint64_t v50 = v40;
      Swift::String v42 = SignatureDescription.localizedTitle()();
      uint64_t countAndFlagsBits = v42._countAndFlagsBits;
      unint64_t object = (unint64_t)v42._object;
      outlined consume of SignatureDescription(v41, v40);
    }
    uint64_t v46 = v48;
    id v45 = (void *)MEMORY[0x21054D080](countAndFlagsBits, object);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v45 = 0;
    uint64_t v46 = v48;
  }
  objc_msgSend(v38, sel_setAccessibilityValue_, v45);

  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(a1, v23);
  return v38;
}

uint64_t CanvasElementFlags.rawValue.getter()
{
  return *(void *)v0;
}

PaperKit::CanvasElementFlags __swiftcall CanvasElementFlags.init(rawValue:)(PaperKit::CanvasElementFlags rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static CanvasElementFlags.hidden.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static CanvasElementFlags.readOnly.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static CanvasElementFlags.locked.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static CanvasElementFlags.lockedStyle.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static CanvasElementFlags.lockedRotation.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static CanvasElementFlags.useOriginalPDFAppearance.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static CanvasElementFlags.useOriginalPDFPosition.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static CanvasElementFlags.lockedSize.getter(void *a1@<X8>)
{
  *a1 = 128;
}

void static CanvasElementFlags.shouldBurnIn.getter(void *a1@<X8>)
{
  *a1 = 256;
}

BOOL CanvasElementFlags.isDefaultState.getter()
{
  return *v0 == 0;
}

void CanvasElementFlags.init(defaultState:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CanvasElementFlags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  unint64_t v7 = lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CanvasElementFlags()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CanvasElementFlags()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CanvasElementFlags(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  unint64_t v3 = lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  uint64_t v4 = MEMORY[0x263F33180];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

ValueMetadata *type metadata accessor for CanvasElementFlags()
{
  return &type metadata for CanvasElementFlags;
}

uint64_t SharedTagged_9<>.layout()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  SharedTagged_9.tag.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRExtensible<TaggedCanvasElement.Enum>);
  CRExtensible.rawValue.getter();
  switch(v9)
  {
    case 0:
      uint64_t v3 = type metadata accessor for PaperLayout();
      uint64_t v4 = &protocol witness table for PaperLayout;
      goto LABEL_12;
    case 1:
      uint64_t v3 = type metadata accessor for ImageLayout();
      uint64_t v4 = &protocol witness table for ImageLayout;
      goto LABEL_12;
    case 2:
      uint64_t v3 = type metadata accessor for GraphLayout();
      uint64_t v4 = &protocol witness table for GraphLayout;
      goto LABEL_12;
    case 3:
      uint64_t v3 = type metadata accessor for TextBoxLayout();
      uint64_t v4 = &protocol witness table for TextBoxLayout;
      goto LABEL_12;
    case 4:
      uint64_t v3 = type metadata accessor for LinkLayout();
      uint64_t v4 = &protocol witness table for LinkLayout;
      goto LABEL_12;
    case 5:
      uint64_t v3 = type metadata accessor for ShapeLayout();
      uint64_t v4 = &protocol witness table for ShapeLayout;
      goto LABEL_12;
    case 6:
      uint64_t v3 = type metadata accessor for SignatureLayout();
      uint64_t v4 = &protocol witness table for SignatureLayout;
      goto LABEL_12;
    case 7:
      uint64_t v3 = type metadata accessor for PaperDocumentPageLayout();
      uint64_t v4 = &protocol witness table for PaperDocumentPageLayout;
      goto LABEL_12;
    case 8:
      uint64_t v3 = type metadata accessor for PDFAnnotationElementLayout();
      uint64_t v4 = &protocol witness table for PDFAnnotationElementLayout;
LABEL_12:
      a1[3] = v3;
      a1[4] = (uint64_t)v4;
      __swift_allocate_boxed_opaque_existential_1(a1);
      uint64_t result = MEMORY[0x21054BEC0](v2);
      break;
    default:
      uint64_t v5 = type metadata accessor for UnknownLayout();
      a1[3] = v5;
      a1[4] = (uint64_t)&protocol witness table for UnknownLayout;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      MEMORY[0x21054BEC0](v2);
      SharedTagged_9.tag.getter();
      uint64_t result = CRExtensible.rawValue.getter();
      *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v5 + 20)) = v8;
      break;
  }
  return result;
}

uint64_t specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v38 = a4;
  unint64_t v39 = a2;
  unint64_t v40 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String v42 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v18 = (char *)&v33 - v17;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v11, &demangling cache variable for type metadata for Capsule<Shape>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Capsule<Shape>?);
  }
  uint64_t v36 = v5;
  CGFloat v37 = v18;
  Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v33(v18, v11, v12);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v35 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
  unint64_t v20 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v21 = swift_allocObject();
  uint64_t v23 = v38;
  uint64_t v22 = v39;
  Swift::String_optional v34 = v8;
  id v24 = v40;
  *(void *)(v21 + 16) = v39;
  *(void *)(v21 + 24) = v24;
  v33((char *)(v21 + v20), v15, v12);
  *(void *)(v21 + ((v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
  aBlock[4] = partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_124;
  id v25 = _Block_copy(aBlock);
  id v26 = v23;
  id v27 = v22;
  id v28 = v24;
  swift_release();
  double v29 = v34;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  UIColor_optional v30 = v42;
  uint64_t v31 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v32 = (void *)v35;
  MEMORY[0x21054DA10](0, v29, v30, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v37, v12);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void aBlock[6];

  id v38 = a4;
  unint64_t v39 = a2;
  unint64_t v40 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String v42 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v18 = (char *)&v33 - v17;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  }
  uint64_t v36 = v5;
  CGFloat v37 = v18;
  Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v33(v18, v11, v12);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v35 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
  unint64_t v20 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v21 = swift_allocObject();
  uint64_t v23 = v38;
  uint64_t v22 = v39;
  Swift::String_optional v34 = v8;
  id v24 = v40;
  *(void *)(v21 + 16) = v39;
  *(void *)(v21 + 24) = v24;
  v33((char *)(v21 + v20), v15, v12);
  *(void *)(v21 + ((v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
  aBlock[4] = partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_218;
  id v25 = _Block_copy(aBlock);
  id v26 = v23;
  id v27 = v22;
  id v28 = v24;
  swift_release();
  double v29 = v34;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  UIColor_optional v30 = v42;
  uint64_t v31 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v32 = (void *)v35;
  MEMORY[0x21054DA10](0, v29, v30, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v37, v12);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void aBlock[6];

  id v38 = a4;
  unint64_t v39 = a2;
  unint64_t v40 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String v42 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v18 = (char *)&v33 - v17;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v11, &demangling cache variable for type metadata for Capsule<Link>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Capsule<Link>?);
  }
  uint64_t v36 = v5;
  CGFloat v37 = v18;
  Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v33(v18, v11, v12);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v35 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
  unint64_t v20 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v21 = swift_allocObject();
  uint64_t v23 = v38;
  uint64_t v22 = v39;
  Swift::String_optional v34 = v8;
  id v24 = v40;
  *(void *)(v21 + 16) = v39;
  *(void *)(v21 + 24) = v24;
  v33((char *)(v21 + v20), v15, v12);
  *(void *)(v21 + ((v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
  aBlock[4] = partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_98;
  id v25 = _Block_copy(aBlock);
  id v26 = v23;
  id v27 = v22;
  id v28 = v24;
  swift_release();
  double v29 = v34;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  UIColor_optional v30 = v42;
  uint64_t v31 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v32 = (void *)v35;
  MEMORY[0x21054DA10](0, v29, v30, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v37, v12);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void aBlock[6];

  id v38 = a4;
  unint64_t v39 = a2;
  unint64_t v40 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String v42 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphElement>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v18 = (char *)&v33 - v17;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v11, &demangling cache variable for type metadata for Capsule<GraphElement>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Capsule<GraphElement>?);
  }
  uint64_t v36 = v5;
  CGFloat v37 = v18;
  Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v33(v18, v11, v12);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v35 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
  unint64_t v20 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v21 = swift_allocObject();
  uint64_t v23 = v38;
  uint64_t v22 = v39;
  Swift::String_optional v34 = v8;
  id v24 = v40;
  *(void *)(v21 + 16) = v39;
  *(void *)(v21 + 24) = v24;
  v33((char *)(v21 + v20), v15, v12);
  *(void *)(v21 + ((v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
  aBlock[4] = partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_153;
  id v25 = _Block_copy(aBlock);
  id v26 = v23;
  id v27 = v22;
  id v28 = v24;
  swift_release();
  double v29 = v34;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  UIColor_optional v30 = v42;
  uint64_t v31 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v32 = (void *)v35;
  MEMORY[0x21054DA10](0, v29, v30, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v37, v12);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void aBlock[6];

  id v38 = a4;
  unint64_t v39 = a2;
  unint64_t v40 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String v42 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v18 = (char *)&v33 - v17;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v11, &demangling cache variable for type metadata for Capsule<Image>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Capsule<Image>?);
  }
  uint64_t v36 = v5;
  CGFloat v37 = v18;
  Swift::String v33 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v33(v18, v11, v12);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v35 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
  unint64_t v20 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v21 = swift_allocObject();
  uint64_t v23 = v38;
  uint64_t v22 = v39;
  Swift::String_optional v34 = v8;
  id v24 = v40;
  *(void *)(v21 + 16) = v39;
  *(void *)(v21 + 24) = v24;
  v33((char *)(v21 + v20), v15, v12);
  *(void *)(v21 + ((v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
  aBlock[4] = partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_182_0;
  id v25 = _Block_copy(aBlock);
  id v26 = v23;
  id v27 = v22;
  id v28 = v24;
  swift_release();
  double v29 = v34;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  UIColor_optional v30 = v42;
  uint64_t v31 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v32 = (void *)v35;
  MEMORY[0x21054DA10](0, v29, v30, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v37, v12);
}

uint64_t specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C853C60);
  id v9 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v8);

  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *a2)
                                                                                               + 0x490);
  uint64_t v11 = type metadata accessor for Shape();
  uint64_t v12 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return v10(a3, 1, a4, v9, v11, v12, &protocol witness table for Shape);
}

{
  void *v8;
  id v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v11;
  uint64_t v12;

  uint64_t v8 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C853C60);
  id v9 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v8);

  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *a2)
                                                                                               + 0x490);
  uint64_t v11 = type metadata accessor for Paper();
  uint64_t v12 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return v10(a3, 1, a4, v9, v11, v12, &protocol witness table for Paper);
}

{
  void *v8;
  id v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v11;
  uint64_t v12;

  uint64_t v8 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C853C60);
  id v9 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v8);

  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *a2)
                                                                                               + 0x490);
  uint64_t v11 = type metadata accessor for Link();
  uint64_t v12 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return v10(a3, 1, a4, v9, v11, v12, &protocol witness table for Link);
}

{
  void *v8;
  id v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v11;
  uint64_t v12;

  uint64_t v8 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C853C60);
  id v9 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v8);

  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *a2)
                                                                                               + 0x490);
  uint64_t v11 = type metadata accessor for GraphElement();
  uint64_t v12 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  return v10(a3, 1, a4, v9, v11, v12, &protocol witness table for GraphElement);
}

{
  void *v8;
  id v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v11;
  uint64_t v12;

  uint64_t v8 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C853C60);
  id v9 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v8);

  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *a2)
                                                                                               + 0x490);
  uint64_t v11 = type metadata accessor for Image();
  uint64_t v12 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return v10(a3, 1, a4, v9, v11, v12, &protocol witness table for Image);
}

uint64_t protocol witness for static Layout.canHandle(session:) in conformance SignatureLayout(void *a1)
{
  specialized static Layout.canHandle(session:)(a1);
  return v1 & 1;
}

uint64_t specialized static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(void *a1, void *a2, void *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v16 = type metadata accessor for UTType();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65, v18);
  unsigned __int8 v22 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v21);

  if ((v22 & 1) != 0
    || (uint64_t v23 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40),
        unsigned int v24 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v23),
        v23,
        v24))
  {
    id v25 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    unsigned int v26 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v25, 0);

    if (v26)
    {
      id v27 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = a2;
      *(double *)(v29 + 24) = a4;
      *(double *)(v29 + 32) = a5;
      *(double *)(v29 + 40) = a6;
      *(double *)(v29 + 48) = a7;
      *(void *)(v29 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v29 + 64) = 0;
      id v62 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v63 = v29;
      double aBlock = MEMORY[0x263EF8330];
      uint64_t v59 = 1107296256;
      UIColor_optional v30 = &block_descriptor_118;
    }
    else
    {
      uint64_t v31 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      unsigned int v32 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v31, 0);

      if (!v32) {
        return 0;
      }
      id v27 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = a2;
      *(double *)(v33 + 24) = a4;
      *(double *)(v33 + 32) = a5;
      *(double *)(v33 + 40) = a6;
      *(double *)(v33 + 48) = a7;
      *(void *)(v33 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v33 + 64) = 0;
      id v62 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v63 = v33;
      double aBlock = MEMORY[0x263EF8330];
      uint64_t v59 = 1107296256;
      UIColor_optional v30 = &block_descriptor_111;
    }
    Swift::Int_optional v60 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    double v61 = *(double *)&v30;
    Swift::String_optional v34 = _Block_copy(&aBlock);
    id v35 = a2;
    swift_release();
    objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v27, v28.super.isa, v34);
    _Block_release(v34);

    return 1;
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v57 = v43;
    double aBlock = a4;
    uint64_t v59 = *(void *)&a5;
    Swift::Int_optional v60 = *(uint64_t (**)())&a6;
    double v61 = a7;
    LOBYTE(v62) = 0;
    CRContext.assetManager.getter();
    uint64_t v44 = (void *)swift_allocObject();
    v44[2] = a1;
    v44[3] = a2;
    v44[4] = a3;
    id v45 = a3;
    id v46 = a2;
    id v47 = a1;
    static UTType.utf8PlainText.getter();
    uint64_t v48 = UTType.identifier.getter();
    uint64_t v50 = v49;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    id v51 = (void *)MEMORY[0x21054D080](v48, v50);
    swift_bridgeObjectRelease();
    uint64_t v36 = (uint64_t)objc_msgSend(v47, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v51, 0);

    if (v36)
    {
      uint64_t v52 = swift_allocObject();
      *(void *)(v52 + 16) = v38;
      *(void *)(v52 + 24) = v40;
      uint64_t v53 = v57;
      *(void *)(v52 + 32) = v42;
      *(void *)(v52 + 40) = v53;
      outlined init with take of CGRect?((uint64_t)&aBlock, v52 + 48);
      *(double *)(v52 + 88) = a8;
      *(unsigned char *)(v52 + 96) = 9;
      *(void *)(v52 + 104) = 0;
      *(void *)(v52 + 112) = 0;
      uint64_t v36 = 1;
      *(unsigned char *)(v52 + 120) = 1;
      *(void *)(v52 + 128) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
      *(void *)(v52 + 136) = v44;
      lazy protocol witness table accessor for type String and conformance String();
      swift_retain();
      id v54 = NSItemProvider.loadObject<A>(ofClass:completionHandler:)();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
    }
    swift_release();
  }
  return v36;
}

{
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  void *v27;
  NSDictionary v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t ObjCClassFromMetadata;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t aBlock;
  uint64_t v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  void v72[4];
  char v73;

  uint64_t v16 = type metadata accessor for UTType();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65, v18);
  unsigned __int8 v22 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v21);

  if ((v22 & 1) != 0
    || (uint64_t v23 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40),
        unsigned int v24 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v23),
        v23,
        v24))
  {
    id v25 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    unsigned int v26 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v25, 0);

    if (v26)
    {
      id v27 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = a2;
      *(double *)(v29 + 24) = a4;
      *(double *)(v29 + 32) = a5;
      *(double *)(v29 + 40) = a6;
      *(double *)(v29 + 48) = a7;
      *(void *)(v29 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v29 + 64) = 0;
      id v70 = (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      id v71 = v29;
      double aBlock = MEMORY[0x263EF8330];
      id v67 = 1107296256;
      UIColor_optional v30 = &block_descriptor_92;
    }
    else
    {
      uint64_t v31 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      unsigned int v32 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v31, 0);

      if (!v32) {
        return 0;
      }
      id v27 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = a2;
      *(double *)(v33 + 24) = a4;
      *(double *)(v33 + 32) = a5;
      *(double *)(v33 + 40) = a6;
      *(double *)(v33 + 48) = a7;
      *(void *)(v33 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v33 + 64) = 0;
      id v70 = (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      id v71 = v33;
      double aBlock = MEMORY[0x263EF8330];
      id v67 = 1107296256;
      UIColor_optional v30 = &block_descriptor_85;
    }
    id v68 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    id v69 = v30;
    Swift::String_optional v34 = _Block_copy(&aBlock);
    id v35 = a2;
    swift_release();
    objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v27, v28.super.isa, v34);
    _Block_release(v34);

    return 1;
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v65 = v43;
    *(double *)id v72 = a4;
    *(double *)&v72[1] = a5;
    *(double *)&v72[2] = a6;
    *(double *)&v72[3] = a7;
    id v73 = 0;
    CRContext.assetManager.getter();
    uint64_t v44 = (void *)swift_allocObject();
    v44[2] = a1;
    v44[3] = a2;
    v44[4] = a3;
    id v45 = *MEMORY[0x263F7C260];
    id v46 = a3;
    id v47 = a2;
    uint64_t v48 = a1;
    if (objc_msgSend(v48, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v45, 0))
    {
      uint64_t v49 = 1;
    }
    else
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
      uint64_t v49 = objc_msgSend(v48, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata());
    }
    static UTType.url.getter();
    uint64_t v50 = UTType.identifier.getter();
    uint64_t v52 = v51;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    uint64_t v53 = (void *)MEMORY[0x21054D080](v50, v52);
    swift_bridgeObjectRelease();
    uint64_t v36 = (uint64_t)objc_msgSend(v48, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v53, 0);

    if (v49)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      CGAffineTransform v55 = swift_allocObject();
      *(void *)(v55 + 16) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
      *(void *)(v55 + 24) = v44;
      *(void *)(v55 + 32) = v38;
      *(void *)(v55 + 40) = v40;
      uint64_t v56 = v65;
      *(void *)(v55 + 48) = v42;
      *(void *)(v55 + 56) = v56;
      outlined init with take of CGRect?((uint64_t)v72, v55 + 64);
      *(double *)(v55 + 104) = a8;
      *(unsigned char *)(v55 + 112) = 9;
      *(void *)(v55 + 120) = 0;
      *(void *)(v55 + 128) = 0;
      uint64_t v36 = 1;
      *(unsigned char *)(v55 + 136) = 1;
      id v70 = partial apply for closure #1 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
      id v71 = v55;
      double aBlock = MEMORY[0x263EF8330];
      id v67 = 1107296256;
      id v68 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      id v69 = &block_descriptor_78;
      uint64_t v57 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_super v58 = objc_msgSend(v48, sel_loadObjectOfClass_completionHandler_, ObjCClassFromMetadata, v57);
    }
    else
    {
      if (!v36)
      {
        swift_release();
        swift_release();
        return v36;
      }
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSURL);
      uint64_t v59 = swift_getObjCClassFromMetadata();
      Swift::Int_optional v60 = swift_allocObject();
      *(void *)(v60 + 16) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
      *(void *)(v60 + 24) = v44;
      *(void *)(v60 + 32) = v38;
      *(void *)(v60 + 40) = v40;
      double v61 = v65;
      *(void *)(v60 + 48) = v42;
      *(void *)(v60 + 56) = v61;
      outlined init with take of CGRect?((uint64_t)v72, v60 + 64);
      *(double *)(v60 + 104) = a8;
      *(unsigned char *)(v60 + 112) = 9;
      *(void *)(v60 + 120) = 0;
      *(void *)(v60 + 128) = 0;
      uint64_t v36 = 1;
      *(unsigned char *)(v60 + 136) = 1;
      id v70 = partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
      id v71 = v60;
      double aBlock = MEMORY[0x263EF8330];
      id v67 = 1107296256;
      id v68 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      id v69 = &block_descriptor_72;
      uint64_t v57 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_super v58 = objc_msgSend(v48, sel_loadObjectOfClass_completionHandler_, v59, v57);
    }
    id v62 = v58;
    _Block_release(v57);
    swift_release();
    swift_release();
  }
  return v36;
}

{
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  void *v27;
  NSDictionary v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v63;
  uint64_t aBlock;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, void *, void *);
  void *v67;
  void (*v68)(uint64_t, unint64_t, void *);
  uint64_t v69;
  void v70[4];
  char v71;

  uint64_t v16 = type metadata accessor for UTType();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65, v18);
  unsigned __int8 v22 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v21);

  if ((v22 & 1) != 0
    || (uint64_t v23 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40),
        unsigned int v24 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v23),
        v23,
        v24))
  {
    id v25 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    unsigned int v26 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v25, 0);

    if (v26)
    {
      id v27 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = a2;
      *(double *)(v29 + 24) = a4;
      *(double *)(v29 + 32) = a5;
      *(double *)(v29 + 40) = a6;
      *(double *)(v29 + 48) = a7;
      *(void *)(v29 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v29 + 64) = 0;
      id v68 = (void (*)(uint64_t, unint64_t, void *))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      id v69 = v29;
      double aBlock = MEMORY[0x263EF8330];
      uint64_t v65 = 1107296256;
      UIColor_optional v30 = &block_descriptor_176_0;
    }
    else
    {
      uint64_t v31 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      unsigned int v32 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v31, 0);

      if (!v32) {
        return 0;
      }
      id v27 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = a2;
      *(double *)(v33 + 24) = a4;
      *(double *)(v33 + 32) = a5;
      *(double *)(v33 + 40) = a6;
      *(double *)(v33 + 48) = a7;
      *(void *)(v33 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v33 + 64) = 0;
      id v68 = (void (*)(uint64_t, unint64_t, void *))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      id v69 = v33;
      double aBlock = MEMORY[0x263EF8330];
      uint64_t v65 = 1107296256;
      UIColor_optional v30 = &block_descriptor_169;
    }
    uint64_t v66 = (uint64_t (*)(uint64_t, void *, void *))thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    id v67 = v30;
    Swift::String_optional v34 = _Block_copy(&aBlock);
    id v35 = a2;
    swift_release();
    objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v27, v28.super.isa, v34);
    _Block_release(v34);

    return 1;
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v63 = v41;
    uint64_t v43 = v42;
    *(double *)id v70 = a4;
    *(double *)&v70[1] = a5;
    *(double *)&v70[2] = a6;
    *(double *)&v70[3] = a7;
    id v71 = 0;
    uint64_t v44 = CRContext.assetManager.getter();
    id v45 = (void *)swift_allocObject();
    v45[2] = a1;
    v45[3] = a2;
    v45[4] = a3;
    id v46 = a3;
    id v47 = a2;
    uint64_t v48 = a1;
    static UTType.image.getter();
    uint64_t v49 = UTType.identifier.getter();
    id v51 = v50;
    uint64_t v52 = *(void (**)(char *, uint64_t))(v17 + 8);
    v52(v20, v16);
    uint64_t v53 = (void *)MEMORY[0x21054D080](v49, v51);
    swift_bridgeObjectRelease();
    uint64_t v36 = (uint64_t)objc_msgSend(v48, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v53, 0);

    if (v36)
    {
      static UTType.image.getter();
      id v54 = UTType.identifier.getter();
      uint64_t v56 = v55;
      v52(v20, v16);
      uint64_t v57 = (void *)MEMORY[0x21054D080](v54, v56);
      swift_bridgeObjectRelease();
      objc_super v58 = swift_allocObject();
      *(void *)(v58 + 16) = v44;
      *(void *)(v58 + 24) = v38;
      *(void *)(v58 + 32) = v40;
      *(void *)(v58 + 40) = v63;
      *(void *)(v58 + 48) = v43;
      outlined init with take of CGRect?((uint64_t)v70, v58 + 56);
      *(double *)(v58 + 96) = a8;
      *(unsigned char *)(v58 + 104) = 9;
      *(void *)(v58 + 112) = 0;
      *(void *)(v58 + 120) = 0;
      uint64_t v36 = 1;
      *(unsigned char *)(v58 + 128) = 1;
      *(void *)(v58 + 136) = v48;
      *(void *)(v58 + 144) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
      *(void *)(v58 + 152) = v45;
      id v68 = partial apply for closure #1 in static ImageLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
      id v69 = v58;
      double aBlock = MEMORY[0x263EF8330];
      uint64_t v65 = 1107296256;
      uint64_t v66 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ();
      id v67 = &block_descriptor_162;
      uint64_t v59 = _Block_copy(&aBlock);
      Swift::Int_optional v60 = v48;
      swift_retain();
      swift_retain();
      swift_release();
      double v61 = objc_msgSend(v60, sel_loadDataRepresentationForTypeIdentifier_completionHandler_, v57, v59);
      _Block_release(v59);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  return v36;
}

uint64_t specialized static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  unsigned __int8 v13 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  if ((v13 & 1) != 0
    || (uint64_t v14 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40),
        unsigned int v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14),
        v14,
        v15))
  {
    uint64_t v16 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    unsigned int v17 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v16, 0);

    if (v17)
    {
      double v18 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = a2;
      *(double *)(v20 + 24) = a3;
      *(double *)(v20 + 32) = a4;
      *(double *)(v20 + 40) = a5;
      *(double *)(v20 + 48) = a6;
      *(void *)(v20 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v20 + 64) = 0;
      unsigned int v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v33 = v20;
      uint64_t v28 = MEMORY[0x263EF8330];
      uint64_t v29 = 1107296256;
      uint64_t v21 = &block_descriptor_35;
LABEL_7:
      UIColor_optional v30 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      uint64_t v31 = v21;
      id v25 = _Block_copy(&v28);
      id v26 = a2;
      swift_release();
      objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v18, v19.super.isa, v25, v28, v29);
      _Block_release(v25);

      return 1;
    }
    unsigned __int8 v22 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
    unsigned int v23 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v22, 0);

    if (v23)
    {
      double v18 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = a2;
      *(double *)(v24 + 24) = a3;
      *(double *)(v24 + 32) = a4;
      *(double *)(v24 + 40) = a5;
      *(double *)(v24 + 48) = a6;
      *(void *)(v24 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v24 + 64) = 0;
      unsigned int v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v33 = v24;
      uint64_t v28 = MEMORY[0x263EF8330];
      uint64_t v29 = 1107296256;
      uint64_t v21 = &block_descriptor_28_0;
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    CRContext.assetManager.getter();
    swift_release();
  }
  return 0;
}

{
  void *v12;
  unsigned __int8 v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  NSDictionary v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  uint64_t v12 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  unsigned __int8 v13 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  if ((v13 & 1) != 0
    || (uint64_t v14 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40),
        unsigned int v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14),
        v14,
        v15))
  {
    uint64_t v16 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    unsigned int v17 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v16, 0);

    if (v17)
    {
      double v18 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = a2;
      *(double *)(v20 + 24) = a3;
      *(double *)(v20 + 32) = a4;
      *(double *)(v20 + 40) = a5;
      *(double *)(v20 + 48) = a6;
      *(void *)(v20 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v20 + 64) = 0;
      unsigned int v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v33 = v20;
      uint64_t v28 = MEMORY[0x263EF8330];
      uint64_t v29 = 1107296256;
      uint64_t v21 = &block_descriptor_63;
LABEL_7:
      UIColor_optional v30 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      uint64_t v31 = v21;
      id v25 = _Block_copy(&v28);
      id v26 = a2;
      swift_release();
      objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v18, v19.super.isa, v25, v28, v29);
      _Block_release(v25);

      return 1;
    }
    unsigned __int8 v22 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
    unsigned int v23 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v22, 0);

    if (v23)
    {
      double v18 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = a2;
      *(double *)(v24 + 24) = a3;
      *(double *)(v24 + 32) = a4;
      *(double *)(v24 + 40) = a5;
      *(double *)(v24 + 48) = a6;
      *(void *)(v24 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v24 + 64) = 0;
      unsigned int v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v33 = v24;
      uint64_t v28 = MEMORY[0x263EF8330];
      uint64_t v29 = 1107296256;
      uint64_t v21 = &block_descriptor_56;
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    CRContext.assetManager.getter();
    swift_release();
  }
  return 0;
}

{
  void *v12;
  unsigned __int8 v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  NSDictionary v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  uint64_t v12 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  unsigned __int8 v13 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  if ((v13 & 1) != 0
    || (uint64_t v14 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40),
        unsigned int v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14),
        v14,
        v15))
  {
    uint64_t v16 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    unsigned int v17 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v16, 0);

    if (v17)
    {
      double v18 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = a2;
      *(double *)(v20 + 24) = a3;
      *(double *)(v20 + 32) = a4;
      *(double *)(v20 + 40) = a5;
      *(double *)(v20 + 48) = a6;
      *(void *)(v20 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v20 + 64) = 0;
      unsigned int v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v33 = v20;
      uint64_t v28 = MEMORY[0x263EF8330];
      uint64_t v29 = 1107296256;
      uint64_t v21 = &block_descriptor_7;
LABEL_7:
      UIColor_optional v30 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      uint64_t v31 = v21;
      id v25 = _Block_copy(&v28);
      id v26 = a2;
      swift_release();
      objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v18, v19.super.isa, v25, v28, v29);
      _Block_release(v25);

      return 1;
    }
    unsigned __int8 v22 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
    unsigned int v23 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v22, 0);

    if (v23)
    {
      double v18 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = a2;
      *(double *)(v24 + 24) = a3;
      *(double *)(v24 + 32) = a4;
      *(double *)(v24 + 40) = a5;
      *(double *)(v24 + 48) = a6;
      *(void *)(v24 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v24 + 64) = 0;
      unsigned int v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v33 = v24;
      uint64_t v28 = MEMORY[0x263EF8330];
      uint64_t v29 = 1107296256;
      uint64_t v21 = &block_descriptor_17;
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    CRContext.assetManager.getter();
    swift_release();
  }
  return 0;
}

{
  void *v12;
  unsigned __int8 v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  NSDictionary v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  uint64_t v12 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  unsigned __int8 v13 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  if ((v13 & 1) != 0
    || (uint64_t v14 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40),
        unsigned int v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14),
        v14,
        v15))
  {
    uint64_t v16 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    unsigned int v17 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v16, 0);

    if (v17)
    {
      double v18 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = a2;
      *(double *)(v20 + 24) = a3;
      *(double *)(v20 + 32) = a4;
      *(double *)(v20 + 40) = a5;
      *(double *)(v20 + 48) = a6;
      *(void *)(v20 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v20 + 64) = 0;
      unsigned int v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v33 = v20;
      uint64_t v28 = MEMORY[0x263EF8330];
      uint64_t v29 = 1107296256;
      uint64_t v21 = &block_descriptor_49;
LABEL_7:
      UIColor_optional v30 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      uint64_t v31 = v21;
      id v25 = _Block_copy(&v28);
      id v26 = a2;
      swift_release();
      objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v18, v19.super.isa, v25, v28, v29);
      _Block_release(v25);

      return 1;
    }
    unsigned __int8 v22 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
    unsigned int v23 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v22, 0);

    if (v23)
    {
      double v18 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = a2;
      *(double *)(v24 + 24) = a3;
      *(double *)(v24 + 32) = a4;
      *(double *)(v24 + 40) = a5;
      *(double *)(v24 + 48) = a6;
      *(void *)(v24 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v24 + 64) = 0;
      unsigned int v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v33 = v24;
      uint64_t v28 = MEMORY[0x263EF8330];
      uint64_t v29 = 1107296256;
      uint64_t v21 = &block_descriptor_42_0;
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    CRContext.assetManager.getter();
    swift_release();
  }
  return 0;
}

{
  void *v12;
  unsigned __int8 v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  NSDictionary v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  uint64_t v12 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  unsigned __int8 v13 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  if ((v13 & 1) != 0
    || (uint64_t v14 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40),
        unsigned int v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14),
        v14,
        v15))
  {
    uint64_t v16 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    unsigned int v17 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v16, 0);

    if (v17)
    {
      double v18 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = a2;
      *(double *)(v20 + 24) = a3;
      *(double *)(v20 + 32) = a4;
      *(double *)(v20 + 40) = a5;
      *(double *)(v20 + 48) = a6;
      *(void *)(v20 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v20 + 64) = 0;
      unsigned int v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v33 = v20;
      uint64_t v28 = MEMORY[0x263EF8330];
      uint64_t v29 = 1107296256;
      uint64_t v21 = &block_descriptor_21;
LABEL_7:
      UIColor_optional v30 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
      uint64_t v31 = v21;
      id v25 = _Block_copy(&v28);
      id v26 = a2;
      swift_release();
      objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v18, v19.super.isa, v25, v28, v29);
      _Block_release(v25);

      return 1;
    }
    unsigned __int8 v22 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
    unsigned int v23 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v22, 0);

    if (v23)
    {
      double v18 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = a2;
      *(double *)(v24 + 24) = a3;
      *(double *)(v24 + 32) = a4;
      *(double *)(v24 + 40) = a5;
      *(double *)(v24 + 48) = a6;
      *(void *)(v24 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v24 + 64) = 0;
      unsigned int v32 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v33 = v24;
      uint64_t v28 = MEMORY[0x263EF8330];
      uint64_t v29 = 1107296256;
      uint64_t v21 = &block_descriptor_14_0;
      goto LABEL_7;
    }
  }
  else
  {
    objc_msgSend(a2, sel_frame);
    CRContext.assetManager.getter();
    swift_release();
  }
  return 0;
}

uint64_t specialized static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(void *a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  unsigned __int8 v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14);

  if ((v15 & 1) != 0
    || (uint64_t v16 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40),
        unsigned int v17 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v16),
        v16,
        v17))
  {
    double v18 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    unsigned int v19 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v18, 0);

    if (v19)
    {
      uint64_t v20 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v21.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = a2;
      *(double *)(v22 + 24) = a4;
      *(double *)(v22 + 32) = a5;
      *(double *)(v22 + 40) = a6;
      *(double *)(v22 + 48) = a7;
      *(void *)(v22 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v22 + 64) = 0;
      uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v49 = v22;
      uint64_t v44 = MEMORY[0x263EF8330];
      uint64_t v45 = 1107296256;
      unsigned int v23 = &block_descriptor_212;
    }
    else
    {
      uint64_t v24 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      unsigned int v25 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v24, 0);

      if (!v25) {
        return 0;
      }
      uint64_t v20 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v21.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = a2;
      *(double *)(v26 + 24) = a4;
      *(double *)(v26 + 32) = a5;
      *(double *)(v26 + 40) = a6;
      *(double *)(v26 + 48) = a7;
      *(void *)(v26 + 56) = UnknownCanvasElementView.flags.modify;
      *(void *)(v26 + 64) = 0;
      uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
      uint64_t v49 = v26;
      uint64_t v44 = MEMORY[0x263EF8330];
      uint64_t v45 = 1107296256;
      unsigned int v23 = &block_descriptor_205;
    }
    id v46 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    id v47 = v23;
    id v27 = _Block_copy(&v44);
    id v28 = a2;
    swift_release();
    objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v20, v21.super.isa, v27, v44, v45);
    _Block_release(v27);

    return 1;
  }
  objc_msgSend(a2, sel_frame);
  CRContext.assetManager.getter();
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = a1;
  uint64_t v29[3] = a2;
  _OWORD v29[4] = a3;
  id v30 = a3;
  id v31 = a2;
  id v32 = a1;
  uint64_t v33 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  unsigned int v34 = objc_msgSend(v32, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v33, 0);

  if (v34)
  {
    id v35 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    v36.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
    *(void *)(v37 + 24) = v29;
    uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)partial apply;
    uint64_t v49 = v37;
    uint64_t v44 = MEMORY[0x263EF8330];
    uint64_t v45 = 1107296256;
    uint64_t v38 = &block_descriptor_198;
LABEL_13:
    id v46 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    id v47 = v38;
    uint64_t v43 = _Block_copy(&v44);
    swift_retain();
    swift_release();
    objc_msgSend(v32, sel_loadItemForTypeIdentifier_options_completionHandler_, v35, v36.super.isa, v43, v44, v45);
    _Block_release(v43);
    swift_release();
    swift_release();

    return 1;
  }
  uint64_t v40 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
  unsigned __int8 v41 = objc_msgSend(v32, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v40, 0);

  if (v41)
  {
    id v35 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    v36.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
    *(void *)(v42 + 24) = v29;
    uint64_t v48 = partial apply for closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:);
    uint64_t v49 = v42;
    uint64_t v44 = MEMORY[0x263EF8330];
    uint64_t v45 = 1107296256;
    uint64_t v38 = &block_descriptor_191;
    goto LABEL_13;
  }
  swift_release();
  swift_release();
  return 0;
}

{
  void *v14;
  unsigned __int8 v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  id v20;
  NSDictionary v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void *, void *);
  void *v47;
  uint64_t (*v48)(uint64_t, unint64_t, uint64_t);
  void *v49;

  uint64_t v14 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  unsigned __int8 v15 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v14);

  if ((v15 & 1) == 0)
  {
    uint64_t v16 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
    unsigned int v17 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v16);

    if (!v17)
    {
      objc_msgSend(a2, sel_frame);
      id v30 = v29;
      id v32 = v31;
      unsigned int v34 = v33;
      NSDictionary v36 = v35;
      CRContext.assetManager.getter();
      uint64_t v37 = (void *)swift_allocObject();
      _OWORD v37[2] = a1;
      v37[3] = a2;
      v37[4] = a3;
      uint64_t v38 = a3;
      uint64_t v39 = a2;
      uint64_t v40 = a1;
      v21.super.Class isa = (Class)MEMORY[0x21054D080](0xD000000000000018, 0x800000020C8520C0);
      unsigned __int8 v41 = (void *)swift_allocObject();
      v41[2] = v30;
      v41[3] = v32;
      v41[4] = v34;
      v41[5] = v36;
      v41[6] = partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:);
      v41[7] = v37;
      uint64_t v48 = partial apply for closure #1 in static GraphLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
      uint64_t v49 = v41;
      uint64_t v44 = MEMORY[0x263EF8330];
      uint64_t v45 = 1107296256;
      id v46 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ();
      id v47 = &block_descriptor_133;
      uint64_t v42 = _Block_copy(&v44);
      swift_retain();
      swift_release();
      uint64_t v20 = objc_msgSend(v40, sel_loadDataRepresentationForTypeIdentifier_completionHandler_, v21.super.isa, v42);
      _Block_release(v42);
      swift_release();
      swift_release();
      goto LABEL_9;
    }
  }
  double v18 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  unsigned int v19 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v18, 0);

  if (v19)
  {
    uint64_t v20 = (id)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    v21.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(double *)(v22 + 24) = a4;
    *(double *)(v22 + 32) = a5;
    *(double *)(v22 + 40) = a6;
    *(double *)(v22 + 48) = a7;
    *(void *)(v22 + 56) = UnknownCanvasElementView.flags.modify;
    *(void *)(v22 + 64) = 0;
    uint64_t v48 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
    uint64_t v49 = (void *)v22;
    uint64_t v44 = MEMORY[0x263EF8330];
    uint64_t v45 = 1107296256;
    unsigned int v23 = &block_descriptor_147;
LABEL_7:
    id v46 = (uint64_t (*)(uint64_t, void *, void *))thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
    id v47 = v23;
    id v27 = _Block_copy(&v44);
    id v28 = a2;
    swift_release();
    objc_msgSend(a1, sel_loadItemForTypeIdentifier_options_completionHandler_, v20, v21.super.isa, v27, v44, v45);
    _Block_release(v27);
LABEL_9:

    return 1;
  }
  uint64_t v24 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
  unsigned int v25 = objc_msgSend(a1, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v24, 0);

  if (v25)
  {
    uint64_t v20 = (id)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    v21.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = a2;
    *(double *)(v26 + 24) = a4;
    *(double *)(v26 + 32) = a5;
    *(double *)(v26 + 40) = a6;
    *(double *)(v26 + 48) = a7;
    *(void *)(v26 + 56) = UnknownCanvasElementView.flags.modify;
    *(void *)(v26 + 64) = 0;
    uint64_t v48 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
    uint64_t v49 = (void *)v26;
    uint64_t v44 = MEMORY[0x263EF8330];
    uint64_t v45 = 1107296256;
    unsigned int v23 = &block_descriptor_140;
    goto LABEL_7;
  }
  return 0;
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t specialized static Layout.canHandle(session:)(void *a1)
{
  uint64_t v20 = type metadata accessor for UTType();
  uint64_t v2 = *(void (***)(char *, uint64_t))(v20 - 8);
  double v3 = MEMORY[0x270FA5388](v20);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(a1, sel_items, v3);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v8)
  {
    unint64_t v19 = v7 & 0xC000000000000001;
    id v9 = v2 + 1;
    uint64_t v10 = 4;
    while (1)
    {
      uint64_t v11 = v19
          ? (void (**)(char *, uint64_t))MEMORY[0x21054E050](v10 - 4, v7)
          : (void (**)(char *, uint64_t))*(id *)(v7 + 8 * v10);
      uint64_t v2 = v11;
      uint64_t v12 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      id v13 = objc_msgSend(v11, sel_itemProvider);
      static UTType.utf8PlainText.getter();
      uint64_t v14 = UTType.identifier.getter();
      uint64_t v16 = v15;
      (*v9)(v5, v20);
      unsigned int v17 = (void *)MEMORY[0x21054D080](v14, v16);
      swift_bridgeObjectRelease();
      LODWORD(v16) = objc_msgSend(v13, sel_hasItemConformingToTypeIdentifier_, v17);

      if (v16)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      ++v10;
      if (v12 == v8) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

{
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __objc2_class **v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  __objc2_class **v11;
  unsigned __int8 v12;
  void *v13;
  unsigned int v14;

  char v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_16;
  }
  double v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v3)
  {
    uint64_t v4 = 4;
    uint64_t v5 = &off_2640D6000;
    while (1)
    {
      id v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      unint64_t v7 = v6;
      uint64_t v8 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v9 = objc_msgSend(v6, sel_itemProvider);
      uint64_t v10 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
      uint64_t v11 = v5;
      uint64_t v12 = objc_msgSend(v9, (SEL)v5[446], v10);

      if (v12)
      {
        swift_bridgeObjectRelease();

        return 1;
      }
      id v13 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
      uint64_t v5 = v11;
      uint64_t v14 = objc_msgSend(v9, (SEL)v11 + 111, v13);

      if (v14)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      ++v4;
      if (v8 == v3) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    double v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  void (**v9)(char *, uint64_t);
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  uint64_t v22 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v22 - 8);
  double v3 = MEMORY[0x270FA5388](v22);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(a1, sel_items, v3);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62) {
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v8)
  {
    NSDictionary v21 = v7 & 0xC000000000000001;
    id v9 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v20 = *MEMORY[0x263F7C260];
    uint64_t v10 = 4;
    while (1)
    {
      uint64_t v11 = v21 ? (id)MEMORY[0x21054E050](v10 - 4, v7) : *(id *)(v7 + 8 * v10);
      uint64_t v12 = v11;
      uint64_t v2 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      id v13 = objc_msgSend(v11, sel_itemProvider);
      if ((objc_msgSend(v13, sel_hasItemConformingToTypeIdentifier_, v20) & 1) != 0
        || (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem), objc_msgSend(v13, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata())))
      {

LABEL_14:
        swift_bridgeObjectRelease();
        return 1;
      }
      static UTType.url.getter();
      uint64_t v14 = UTType.identifier.getter();
      uint64_t v16 = v15;
      (*v9)(v5, v22);
      unsigned int v17 = (void *)MEMORY[0x21054D080](v14, v16);
      swift_bridgeObjectRelease();
      LODWORD(v16) = objc_msgSend(v13, sel_hasItemConformingToTypeIdentifier_, v17);

      if (v16) {
        goto LABEL_14;
      }
      ++v10;
      if (v2 == v8) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  return 0;
}

{
  unint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v22;
  void (**v23)(char *, uint64_t);
  unint64_t v24;
  uint64_t v25;

  unsigned int v25 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v25 - 8);
  double v3 = MEMORY[0x270FA5388](v25);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(a1, sel_items, v3);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v8)
  {
    unsigned int v23 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v24 = v7 & 0xC000000000000001;
    uint64_t v22 = *MEMORY[0x263F14C60];
    id v9 = 4;
    uint64_t v10 = 0x1F72D9000uLL;
    while (1)
    {
      uint64_t v11 = v24 ? (id)MEMORY[0x21054E050](v9 - 4, v7) : *(id *)(v7 + 8 * v9);
      uint64_t v12 = v11;
      id v13 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      uint64_t v2 = v7;
      uint64_t v14 = objc_msgSend(v11, sel_itemProvider);
      static UTType.image.getter();
      uint64_t v15 = UTType.identifier.getter();
      uint64_t v16 = v10;
      double v18 = v17;
      (*v23)(v5, v25);
      unint64_t v19 = (void *)MEMORY[0x21054D080](v15, v18);
      swift_bridgeObjectRelease();
      LODWORD(v18) = objc_msgSend(v14, (SEL)(v16 + 111), v19);

      if (v18)
      {
        uint64_t v20 = objc_msgSend(v14, (SEL)(v16 + 111), v22);

        uint64_t v10 = v16;
        if ((v20 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {

        uint64_t v10 = v16;
      }
      ++v9;
      unint64_t v7 = v2;
      if (v13 == v8) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return 0;
}

void specialized static Layout.canHandle(session:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_10;
  }
LABEL_3:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x21054E050](i, v2);
      }
      else {
        id v5 = *(id *)(v2 + 8 * i + 32);
      }
      id v6 = v5;
    }
    goto LABEL_10;
  }
  __break(1u);
}

id specialized static Layout.canHandle(session:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v3)
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      id v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v8 = objc_msgSend(v5, sel_itemProvider);
      id v9 = (void *)MEMORY[0x21054D080](0xD000000000000018, 0x800000020C8520C0);
      id v10 = objc_msgSend(v8, sel_hasItemConformingToTypeIdentifier_, v9);

      if ((v10 & 1) == 0)
      {
        ++v4;
        if (v7 != v3) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  id v10 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t partial apply for specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(uint64_t a1)
{
  return specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(a1, v1[2], v1[3], v1[4]);
}

{
  void **v1;

  return specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(a1, v1[2], v1[3], v1[4]);
}

{
  void **v1;

  return specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(a1, v1[2], v1[3], v1[4]);
}

{
  void **v1;

  return specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(a1, v1[2], v1[3], v1[4]);
}

{
  void **v1;

  return specialized closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_20C3EB2F8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 137, 7);
}

uint64_t partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, void, void, void, double, double, double, double, double, char))closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:));
}

uint64_t partial apply for closure #1 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, void, void, void, double, double, double, double, double, char))closure #1 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:));
}

uint64_t partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, uint64_t, void, void, void, double, double, double, double, double, char))
{
  char v5 = *(unsigned char *)(v3 + 136);
  return a3(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), v3 + 64, *(unsigned __int8 *)(v3 + 112), *(void *)(v3 + 120), *(void *)(v3 + 128), *(double *)(v3 + 32), *(double *)(v3 + 40), *(double *)(v3 + 48), *(double *)(v3 + 56), *(double *)(v3 + 104), v5);
}

uint64_t sub_20C3EB3B4()
{
  return objectdestroy_94Tm(&demangling cache variable for type metadata for Capsule<Link>);
}

uint64_t partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)()
{
  return partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(&demangling cache variable for type metadata for Capsule<Link>, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t))specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:));
}

{
  return partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(&demangling cache variable for type metadata for Capsule<Shape>, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t))specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:));
}

{
  return partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t))specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:));
}

{
  return partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(&demangling cache variable for type metadata for Capsule<Image>, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t))specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:));
}

{
  return partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t))specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:));
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t sub_20C3EB44C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 144, 7);
}

uint64_t partial apply for closure #1 in static TextBoxLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, void *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  return closure #1 in static TextBoxLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(a1, a2, v10 + 48, *(unsigned char *)(v10 + 96), *(void *)(v10 + 104), *(void *)(v10 + 112), *(unsigned char *)(v10 + 120), *(void (**)(char *))(v10 + 128), *(CGFloat *)(v10 + 16), *(CGFloat *)(v10 + 24), *(CGFloat *)(v10 + 32), *(CGFloat *)(v10 + 40), *(double *)(v10 + 88), a8, a9, a10, *(double *)(v10 + 136));
}

uint64_t sub_20C3EB524()
{
  return objectdestroy_94Tm(&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t sub_20C3EB560()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in static GraphLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return closure #1 in static GraphLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(a1, a2, *(CGFloat *)(v3 + 16), *(CGFloat *)(v3 + 24), *(CGFloat *)(v3 + 32), *(CGFloat *)(v3 + 40), a3, *(void (**)(uint64_t))(v3 + 48), *(void *)(v3 + 56));
}

uint64_t sub_20C3EB5B0()
{
  return objectdestroy_94Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
}

uint64_t sub_20C3EB5EC()
{
  swift_release();

  swift_release();
  return MEMORY[0x270FA0238](v0, 160, 7);
}

void partial apply for closure #1 in static ImageLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, unint64_t a2, void *a3)
{
  closure #1 in static ImageLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(a1, a2, a3, *(double *)(v3 + 24), *(double *)(v3 + 32), *(double *)(v3 + 40), *(double *)(v3 + 48), *(double *)(v3 + 96), *(void *)(v3 + 16), v3 + 56, *(unsigned char *)(v3 + 104), *(void *)(v3 + 112), *(NSObject **)(v3 + 120), *(unsigned char *)(v3 + 128), *(void **)(v3 + 136), *(void *)(v3 + 144), *(void *)(v3 + 152));
}

uint64_t sub_20C3EB690()
{
  return objectdestroy_94Tm(&demangling cache variable for type metadata for Capsule<Image>);
}

uint64_t objectdestroy_65Tm()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_20C3EB714()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)(a1, a2, *(void (**)(char *))(v2 + 16), *(void (**)(char *))(v2 + 24));
}

uint64_t objectdestroyTm_3()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)(a1, *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40), *(double *)(v2 + 48), a2, *(void **)(v2 + 16), *(void (**)(uint64_t))(v2 + 56), *(void *)(v2 + 64));
}

uint64_t sub_20C3EB7B0()
{
  return objectdestroy_94Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
}

uint64_t objectdestroy_94Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return MEMORY[0x270FA0238](v1, v7 + 8, v6);
}

uint64_t partial apply for specialized closure #1 in closure #2 in static LayoutItemProvider.loadItemProvider(_:frame:rotation:in:dragItem:)(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(v5, v6, v2 + v4, v7);
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit13AnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit13fg4OSo8h36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5i97OIegnrzr_TR03_s8a4Kit9c34C13sendEventLazy3key7payloadyAA0C4d10O_SDyAHSo8e31CGyXAtFSDySSAJGSgycfU_P24_AJtAH_W5XEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return (id)v2;
  }
  uint64_t v30 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v30;
  id result = (id)specialized Dictionary.startIndex.getter(a1);
  uint64_t v6 = (uint64_t)result;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 64;
  int64_t v24 = v1;
  int v25 = v5;
  uint64_t v26 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v27 = v7;
    uint64_t v12 = *(void **)(*(void *)(a1 + 56) + 8 * v6);
    unint64_t v13 = AnalyticsKeys.rawValue.getter(*(unsigned char *)(*(void *)(a1 + 48) + v6));
    uint64_t v28 = v14;
    unint64_t v29 = v13;
    unint64_t v16 = *(void *)(v30 + 16);
    unint64_t v15 = *(void *)(v30 + 24);
    id result = v12;
    id v17 = result;
    if (v16 >= v15 >> 1) {
      id result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
    }
    *(void *)(v30 + 16) = v16 + 1;
    double v18 = (void *)(v30 + 24 * v16);
    v18[4] = v29;
    v18[5] = v28;
    v18[6] = v17;
    int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = a1 + 64;
    uint64_t v19 = *(void *)(v26 + 8 * v11);
    if ((v19 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v25;
    if (*(_DWORD *)(a1 + 36) != v25) {
      goto LABEL_27;
    }
    unint64_t v20 = v19 & (-2 << (v6 & 0x3F));
    if (v20)
    {
      int64_t v9 = __clz(__rbit64(v20)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v24;
    }
    else
    {
      unint64_t v21 = v11 + 1;
      unint64_t v22 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v24;
      if (v11 + 1 < v22)
      {
        unint64_t v23 = *(void *)(v26 + 8 * v21);
        if (v23)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        else
        {
          while (v22 - 2 != v11)
          {
            unint64_t v23 = *(void *)(a1 + 80 + 8 * v11++);
            if (v23)
            {
              unint64_t v21 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v27 + 1;
    uint64_t v6 = v9;
    if (v27 + 1 == v10) {
      return (id)v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t AnalyticsKeys.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000020;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 6579297;
      break;
    case 4:
      unint64_t result = 0x65766F6D6572;
      break;
    case 5:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 6:
      unint64_t result = 0x6F697463656C6573;
      break;
    case 7:
      unint64_t result = 7364980;
      break;
    case 8:
      unint64_t result = 0x6F7373616CLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000028;
      break;
    case 10:
      unint64_t result = 0x54746E65746E6F63;
      break;
    case 11:
    case 12:
      unint64_t result = 0x6C457361766E6163;
      break;
    case 13:
      unint64_t result = 0x646578696DLL;
      break;
    case 14:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 15:
      unint64_t result = 0x44646E4167617264;
      break;
    case 16:
      unint64_t result = 0x4E6564697374756FLL;
      break;
    case 17:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 18:
      unint64_t result = 0xD000000000000018;
      break;
    case 19:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 20:
      unint64_t result = 0x6E756F436E65706FLL;
      break;
    case 22:
      unint64_t result = 0x64657463656C6573;
      break;
    case 24:
      unint64_t result = 0x4C6464416D6F7266;
      break;
    case 25:
      unint64_t result = 0xD000000000000028;
      break;
    case 26:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance DragAndDropType@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnalyticsKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = AnalyticsKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == AnalyticsKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnalyticsKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  AnalyticsKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnalyticsKeys()
{
  AnalyticsKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnalyticsKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  AnalyticsKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnalyticsKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized AnalyticsKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnalyticsKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AnalyticsKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t specialized closure #1 in Analytics.sendEventLazy(key:payload:)()
{
  return specialized closure #1 in Analytics.sendEventLazy(key:payload:)(22);
}

{
  return specialized closure #1 in Analytics.sendEventLazy(key:payload:)(20);
}

{
  uint64_t inited;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(unsigned char *)(inited + 32) = 24;
  type metadata accessor for NSNumber();
  *(NSNumber *)(inited + 40) = NSNumber.init(BOOLeanLiteral:)(1);
  char v1 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  char v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit13AnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit13fg4OSo8h36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5i97OIegnrzr_TR03_s8a4Kit9c34C13sendEventLazy3key7payloadyAA0C4d10O_SDyAHSo8e31CGyXAtFSDySSAJGSgycfU_P24_AJtAH_W5XEfU_Tf3nnnpf_nTf1cn_n(v1);
  swift_bridgeObjectRelease();
  if (v2[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
    unint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v3 = MEMORY[0x263F8EE80];
  }
  uint64_t v6 = v3;
  unint64_t v4 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v6);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized closure #1 in Analytics.sendEventLazy(key:payload:)(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(unsigned char *)(inited + 32) = a1;
  type metadata accessor for NSNumber();
  *(NSNumber *)(inited + 40) = NSNumber.init(integerLiteral:)(1);
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  unint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit13AnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit13fg4OSo8h36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5i97OIegnrzr_TR03_s8a4Kit9c34C13sendEventLazy3key7payloadyAA0C4d10O_SDyAHSo8e31CGyXAtFSDySSAJGSgycfU_P24_AJtAH_W5XEfU_Tf3nnnpf_nTf1cn_n(v3);
  swift_bridgeObjectRelease();
  if (v4[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
    uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE80];
  }
  uint64_t v8 = v5;
  uint64_t v6 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v6, 1, &v8);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t closure #1 in Analytics.sendEventLazy(key:payload:)(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  char v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit13AnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit13fg4OSo8h36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5i97OIegnrzr_TR03_s8a4Kit9c34C13sendEventLazy3key7payloadyAA0C4d10O_SDyAHSo8e31CGyXAtFSDySSAJGSgycfU_P24_AJtAH_W5XEfU_Tf3nnnpf_nTf1cn_n(v1);
  swift_bridgeObjectRelease();
  if (v2[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
    uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE80];
  }
  uint64_t v6 = v3;
  unint64_t v4 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v6);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)(uint64_t a1, char a2, char a3)
{
  return implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)(a1, a2, a3, 6579297, 0xE300000000000000);
}

unint64_t implicit closure #1 in Analytics.recordRemoveCanvasElementEvent(type:)(uint64_t a1, char a2, char a3)
{
  return implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)(a1, a2, a3, 0x65766F6D6572, 0xE600000000000000);
}

unint64_t implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C835740;
  *(unsigned char *)(inited + 32) = 1;
  if (a3)
  {
    unint64_t v10 = 0xE700000000000000;
    uint64_t v11 = 0x6E776F6E6B6E75;
  }
  else
  {
    unint64_t v10 = 0xE500000000000000;
    uint64_t v11 = 0x7265706170;
    switch(a2)
    {
      case 1:
        uint64_t v11 = 0x6567616D69;
        break;
      case 2:
        uint64_t v11 = 0x6870617267;
        break;
      case 3:
        unint64_t v10 = 0xE700000000000000;
        uint64_t v11 = 0x786F4274786574;
        break;
      case 4:
        unint64_t v10 = 0xE400000000000000;
        uint64_t v11 = 1802398060;
        break;
      case 5:
        uint64_t v11 = 0x6570616873;
        break;
      case 6:
        unint64_t v10 = 0xE900000000000065;
        uint64_t v11 = 0x727574616E676973;
        break;
      case 7:
        unint64_t v10 = 0xE400000000000000;
        uint64_t v11 = 1701273968;
        break;
      case 8:
        unint64_t v10 = 0xED00006E6F697461;
        uint64_t v11 = 0x746F6E6E41666470;
        break;
      default:
        break;
    }
  }
  uint64_t v12 = MEMORY[0x21054D080](v11, v10);
  swift_bridgeObjectRelease();
  *(void *)(inited + 40) = v12;
  *(unsigned char *)(inited + 48) = 2;
  *(void *)(inited + 56) = MEMORY[0x21054D080](a4, a5);
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

void Analytics.recordDidMakeSelection(type:contentType:)(char a1, char a2)
{
  char v4 = a1 & 1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(unsigned char *)(v5 + 24) = v4;
  swift_retain();
  uint64_t v6 = (void *)MEMORY[0x21054D080](0xD00000000000002ALL, 0x800000020C84E100);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for implicit closure #1 in Analytics.recordDidMakeSelection(type:contentType:);
  *(void *)(v7 + 24) = v5;
  id v17 = partial apply for closure #1 in Analytics.sendEventLazy(key:payload:);
  uint64_t v18 = v7;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  unint64_t v15 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  unint64_t v16 = &block_descriptor_18;
  uint64_t v8 = _Block_copy(&v13);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v8);
  swift_release();

  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v2;
  *(unsigned char *)(v9 + 24) = a2;
  swift_retain();
  unint64_t v10 = (void *)MEMORY[0x21054D080](0xD000000000000028, 0x800000020C84E150);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = partial apply for implicit closure #2 in Analytics.recordDidMakeSelection(type:contentType:);
  *(void *)(v11 + 24) = v9;
  id v17 = closure #1 in Analytics.sendEventLazy(key:payload:)partial apply;
  uint64_t v18 = v11;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  unint64_t v15 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  unint64_t v16 = &block_descriptor_28_1;
  uint64_t v12 = _Block_copy(&v13);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v12);
  swift_release();
}

unint64_t implicit closure #1 in Analytics.recordDidMakeSelection(type:contentType:)(uint64_t a1, char a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(unsigned char *)(inited + 32) = 6;
  if (a2) {
    uint64_t v4 = 0x6F7373616CLL;
  }
  else {
    uint64_t v4 = 7364980;
  }
  if (a2) {
    unint64_t v5 = 0xE500000000000000;
  }
  else {
    unint64_t v5 = 0xE300000000000000;
  }
  uint64_t v6 = MEMORY[0x21054D080](v4, v5);
  swift_bridgeObjectRelease();
  *(void *)(inited + 40) = v6;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

unint64_t implicit closure #2 in Analytics.recordDidMakeSelection(type:contentType:)(uint64_t a1, char a2)
{
  uint64_t v3 = 0x6C457361766E6163;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(unsigned char *)(inited + 32) = 10;
  if (a2)
  {
    if (a2 == 1)
    {
      unint64_t v5 = 0xEE0073746E656D65;
    }
    else
    {
      uint64_t v3 = 0x646578696DLL;
      unint64_t v5 = 0xE500000000000000;
    }
  }
  else
  {
    unint64_t v5 = 0xED0000746E656D65;
  }
  uint64_t v6 = MEMORY[0x21054D080](v3, v5);
  swift_bridgeObjectRelease();
  *(void *)(inited + 40) = v6;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

unint64_t implicit closure #1 in Analytics.recordDragAndDropEvent(type:)(uint64_t a1, char a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(unsigned char *)(inited + 32) = 15;
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0xD00000000000001DLL;
    }
    else {
      unint64_t v4 = 0xD000000000000018;
    }
    if (a2 == 1) {
      unint64_t v5 = 0x800000020C84E1F0;
    }
    else {
      unint64_t v5 = 0x800000020C84E210;
    }
  }
  else
  {
    unint64_t v5 = 0xEB0000000065746FLL;
    unint64_t v4 = 0x4E6564697374756FLL;
  }
  uint64_t v6 = MEMORY[0x21054D080](v4, v5);
  swift_bridgeObjectRelease();
  *(void *)(inited + 40) = v6;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

unint64_t implicit closure #1 in Analytics.recordDidPresentAddLinkMenu(linksCount:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnalyticsKeys, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(unsigned char *)(inited + 32) = 26;
  *(NSNumber *)(inited + 40) = Int._bridgeToObjectiveC()();
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

BOOL Capsule<>.hasDrawing()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  BOOL v4 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) != 1;
  outlined destroy of Ref<PKDrawingStruct>?((uint64_t)v2);
  return v4;
}

BOOL Capsule<>.hasSpatialImage()()
{
  return Capsule<>.hasSpatialImage()(1);
}

BOOL Capsule<>.hasSpatialLink()()
{
  return Capsule<>.hasSpatialImage()(4);
}

BOOL Capsule<>.hasSpatialImage()(uint64_t a1)
{
  uint64_t v23 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v21 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v7 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v22 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v13 = v20;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v13);
  uint64_t v14 = (uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  unint64_t v15 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  unint64_t v16 = (void (**)(char *, uint64_t))(v21 + 8);
  do
  {
    CROrderedSet.Iterator.next()();
    int v17 = (*v14)(v6, 1, v1);
    if (v17 == 1) {
      break;
    }
    (*v15)(v3, v6, v1);
    SharedTagged_9.tag.getter();
    uint64_t v26 = v28;
    char v27 = v29;
    uint64_t v24 = v23;
    char v25 = 0;
    lazy protocol witness table accessor for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum();
    char v18 = static CRExtensible.== infix(_:_:)();
    (*v16)(v3, v1);
  }
  while ((v18 & 1) == 0);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v10);
  return v17 != 1;
}

uint64_t Capsule<>.hasSpatialWebHighlight()()
{
  unint64_t v0 = Capsule<>.links.getter();
  unint64_t v1 = v0;
  if (v0 >> 62) {
    goto LABEL_14;
  }
  for (uint64_t i = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = objc_msgSend(v4, sel_userActivity);
      if (v7)
      {
        uint64_t v8 = v7;
        id v9 = objc_msgSend(v7, sel__linkContextInfo);

        if (v9)
        {
          swift_bridgeObjectRelease();

          return 1;
        }
      }
      else
      {
      }
      ++v3;
      if (v6 == i) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_14:
    ;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for Analytics()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for DragAndDropType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C3ED270);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DragAndDropType()
{
  return &type metadata for DragAndDropType;
}

unint64_t lazy protocol witness table accessor for type DragAndDropType and conformance DragAndDropType()
{
  unint64_t result = lazy protocol witness table cache variable for type DragAndDropType and conformance DragAndDropType;
  if (!lazy protocol witness table cache variable for type DragAndDropType and conformance DragAndDropType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragAndDropType and conformance DragAndDropType);
  }
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, char a2, void *a3)
{
  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v45 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  id v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_23;
  }
  char v16 = v11;
  if (v9[3] >= v15)
  {
    if (a2)
    {
      if (v11) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v16) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    uint64_t v22 = (uint64_t *)(v21[6] + 16 * v12);
    *uint64_t v22 = v7;
    v22[1] = v6;
    *(void *)(v21[7] + 8 * v12) = v10;
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    uint64_t v26 = v45 - 1;
    if (v45 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    char v27 = (void **)(a1 + 9);
    while (1)
    {
      uint64_t v29 = (uint64_t)*(v27 - 2);
      uint64_t v28 = (uint64_t)*(v27 - 1);
      uint64_t v30 = *v27;
      id v31 = (void *)*a3;
      swift_bridgeObjectRetain();
      id v10 = v30;
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      uint64_t v34 = v31[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v24 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v24) {
        break;
      }
      char v37 = v33;
      if (v31[3] < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      uint64_t v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      uint64_t v40 = (uint64_t *)(v39[6] + 16 * v32);
      *uint64_t v40 = v29;
      v40[1] = v28;
      *(void *)(v39[7] + 8 * v32) = v10;
      uint64_t v41 = v39[2];
      BOOL v24 = __OFADD__(v41, 1);
      uint64_t v42 = v41 + 1;
      if (v24) {
        goto LABEL_24;
      }
      void v39[2] = v42;
      v27 += 3;
      if (!--v26) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v12 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v43._unint64_t object = (void *)0x800000020C853D00;
  v43._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)();
  v44._uint64_t countAndFlagsBits = 39;
  v44._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_20C3ED690()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 25, 7);
}

unint64_t partial apply for implicit closure #1 in Analytics.recordDidMakeSelection(type:contentType:)()
{
  return implicit closure #1 in Analytics.recordDidMakeSelection(type:contentType:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_20C3ED6D4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in Analytics.sendEventLazy(key:payload:)()
{
  return closure #1 in Analytics.sendEventLazy(key:payload:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

unint64_t partial apply for implicit closure #2 in Analytics.recordDidMakeSelection(type:contentType:)()
{
  return implicit closure #2 in Analytics.recordDidMakeSelection(type:contentType:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t getEnumTagSinglePayload for AnalyticsKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE6) {
    goto LABEL_17;
  }
  if (a2 + 26 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 26) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 26;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  int v8 = v6 - 27;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AnalyticsKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE5)
  {
    unsigned int v6 = ((a2 - 230) >> 8) + 1;
    *unint64_t result = a2 + 26;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C3ED894);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 26;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsKeys()
{
  return &type metadata for AnalyticsKeys;
}

unint64_t lazy protocol witness table accessor for type AnalyticsKeys and conformance AnalyticsKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnalyticsKeys and conformance AnalyticsKeys;
  if (!lazy protocol witness table cache variable for type AnalyticsKeys and conformance AnalyticsKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsKeys and conformance AnalyticsKeys);
  }
  return result;
}

uint64_t specialized AnalyticsKeys.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1B) {
    return 27;
  }
  else {
    return v0;
  }
}

char *ShapeListItemView.init(image:symbolWeight:)(void *a1, uint64_t a2)
{
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit17ShapeListItemView_imageView;
  id v6 = objc_allocWithZone(MEMORY[0x263F82828]);
  BOOL v7 = v2;
  *(void *)&v2[v5] = objc_msgSend(v6, sel_init);
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_cornerRadius] = 0x4018000000000000;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_symbolPointSize] = 0x403E000000000000;

  v33.receiver = v7;
  v33.super_class = (Class)type metadata accessor for ShapeListItemView();
  int v8 = (char *)objc_msgSendSuper2(&v33, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v9 = objc_msgSend(v8, sel_layer);
  objc_msgSend(v9, sel_setCornerCurve_, *MEMORY[0x263F15A20]);

  id v10 = objc_msgSend(v8, sel_layer);
  objc_msgSend(v10, sel_setCornerRadius_, *(double *)&v8[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_cornerRadius]);

  id v11 = objc_allocWithZone(MEMORY[0x263F82A70]);
  unint64_t v12 = v8;
  id v13 = objc_msgSend(v11, sel_initWithDelegate_, v12);
  objc_msgSend(v12, sel_addInteraction_, v13);

  uint64_t v14 = OBJC_IVAR____TtC8PaperKit17ShapeListItemView_imageView;
  id v15 = *(id *)&v12[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_imageView];
  id v16 = objc_msgSend(a1, sel_imageWithRenderingMode_, 2);
  objc_msgSend(v15, sel_setImage_, v16);

  uint64_t v17 = *(void **)&v12[v14];
  double v18 = *(double *)&v12[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_symbolPointSize];
  uint64_t v19 = self;
  id v20 = v17;
  id v21 = objc_msgSend(v19, sel_configurationWithPointSize_weight_, a2, v18);
  objc_msgSend(v20, sel_setPreferredSymbolConfiguration_, v21);

  uint64_t v22 = *(void **)&v12[v14];
  objc_msgSend(v22, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v12, sel_addSubview_, v22);
  uint64_t v23 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_20C8344D0;
  id v25 = objc_msgSend(v22, sel_centerXAnchor);
  id v26 = objc_msgSend(v12, sel_centerXAnchor);
  id v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

  *(void *)(v24 + 32) = v27;
  id v28 = objc_msgSend(*(id *)&v12[v14], sel_centerYAnchor);
  id v29 = objc_msgSend(v12, sel_centerYAnchor);
  id v30 = objc_msgSend(v28, sel_constraintEqualToAnchor_, v29);

  *(void *)(v24 + 40) = v30;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_activateConstraints_, isa);

  objc_msgSend(v12, sel_setIsAccessibilityElement_, 1);
  ShapeListItemView.updateUI()();

  return v12;
}

id ShapeListItemView.updateUI()()
{
  unsigned int v1 = objc_msgSend(v0, sel_isHighlighted);
  int v2 = self;
  int v3 = &selRef_secondarySystemFillColor;
  if (!v1) {
    int v3 = &selRef_quaternarySystemFillColor;
  }
  id v4 = [v2 *v3];
  objc_msgSend(v0, sel_setBackgroundColor_, v4);

  id v5 = objc_msgSend(v0, sel_traitCollection);
  id v6 = objc_msgSend(v5, sel_userInterfaceStyle);

  BOOL v7 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit17ShapeListItemView_imageView];
  int v8 = self;
  if (v6 == (id)2) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 2;
  }
  id v10 = &selRef_systemGrayColor;
  if (v6 != (id)2) {
    id v10 = &selRef_systemGray3Color;
  }
  id v11 = [v8 *v10];
  objc_msgSend(v7, sel_setTintColor_, v11);

  return objc_msgSend(v7, sel_setOverrideUserInterfaceStyle_, v9);
}

id ShapeListItemView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShapeListItemView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ShapeListItemView()
{
  return self;
}

void specialized static ShapeListItemView.newAddRectangleListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x21054D080](0xD000000000000010, 0x800000020C853F90);
  id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

  if (v5)
  {
    id v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    BOOL v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    uint64_t v8 = one-time initialization token for paperKitBundle;
    uint64_t v9 = v7;
    if (v8 != -1) {
      swift_once();
    }
    v24._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v24._unint64_t object = (void *)0x800000020C853FB0;
    v10._uint64_t countAndFlagsBits = 0x6C676E6174636552;
    v10._unint64_t object = (void *)0xE900000000000065;
    v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._unint64_t object = (void *)0xEB00000000656C62;
    v12._uint64_t countAndFlagsBits = 0;
    v12._unint64_t object = (void *)0xE000000000000000;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    uint64_t v14 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    uint64_t v15 = v23;
    if (v23)
    {
      id v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      uint64_t v17 = *(void *)(v15 - 8);
      double v18 = MEMORY[0x270FA5388](v16);
      id v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      uint64_t v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddOvalListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x21054D080](0x662E656C63726963, 0xEB000000006C6C69);
  id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

  if (v5)
  {
    id v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    BOOL v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    outlined init with copy of Any?(a1, (uint64_t)v22);
    uint64_t v8 = v23;
    if (v23)
    {
      uint64_t v9 = __swift_project_boxed_opaque_existential_1(v22, v23);
      uint64_t v10 = *(void *)(v8 - 8);
      double v11 = MEMORY[0x270FA5388](v9);
      id v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v10 + 16))(v13, v11);
      uint64_t v14 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      uint64_t v14 = 0;
    }
    objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v14, a2, 64);
    swift_unknownObjectRelease();
    uint64_t v15 = one-time initialization token for paperKitBundle;
    id v16 = v7;
    if (v15 != -1) {
      swift_once();
    }
    v24._unint64_t object = (void *)0x800000020C853F00;
    v17._uint64_t countAndFlagsBits = 0x656C63726943;
    v17._unint64_t object = (void *)0xE600000000000000;
    v18.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v18.value._unint64_t object = (void *)0xEB00000000656C62;
    v19._uint64_t countAndFlagsBits = 0;
    v19._unint64_t object = (void *)0xE000000000000000;
    v24._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, paperKitBundle, v19, v24)._countAndFlagsBits;
    uint64_t v21 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_setAccessibilityLabel_, v21);
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddTriangleListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x21054D080](0x656C676E61697274, 0xED00006C6C69662ELL);
  id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

  if (v5)
  {
    id v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    BOOL v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    uint64_t v8 = one-time initialization token for paperKitBundle;
    uint64_t v9 = v7;
    if (v8 != -1) {
      swift_once();
    }
    v24._unint64_t object = (void *)0x800000020C853ED0;
    v10._uint64_t countAndFlagsBits = 0x656C676E61697254;
    v10._unint64_t object = (void *)0xE800000000000000;
    v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._unint64_t object = (void *)0xEB00000000656C62;
    v12._uint64_t countAndFlagsBits = 0;
    v12._unint64_t object = (void *)0xE000000000000000;
    v24._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    uint64_t v14 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    uint64_t v15 = v23;
    if (v23)
    {
      id v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      uint64_t v17 = *(void *)(v15 - 8);
      double v18 = MEMORY[0x270FA5388](v16);
      id v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      uint64_t v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddArrowListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x21054D080](0xD000000000000013, 0x800000020C853D60);
  id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

  if (v5)
  {
    id v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    BOOL v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 7);
    uint64_t v8 = one-time initialization token for paperKitBundle;
    uint64_t v9 = v7;
    if (v8 != -1) {
      swift_once();
    }
    v24._uint64_t countAndFlagsBits = 0xD000000000000033;
    v24._unint64_t object = (void *)0x800000020C853D80;
    v10._uint64_t countAndFlagsBits = 0x206465776F727241;
    v10._unint64_t object = (void *)0xEC000000656E694CLL;
    v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._unint64_t object = (void *)0xEB00000000656C62;
    v12._uint64_t countAndFlagsBits = 0;
    v12._unint64_t object = (void *)0xE000000000000000;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    uint64_t v14 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    uint64_t v15 = v23;
    if (v23)
    {
      id v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      uint64_t v17 = *(void *)(v15 - 8);
      double v18 = MEMORY[0x270FA5388](v16);
      id v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      uint64_t v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddChatListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x21054D080](0xD000000000000010, 0x800000020C853DC0);
  id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

  if (v5)
  {
    id v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    BOOL v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    uint64_t v8 = one-time initialization token for paperKitBundle;
    uint64_t v9 = v7;
    if (v8 != -1) {
      swift_once();
    }
    v24._uint64_t countAndFlagsBits = 0xD000000000000033;
    v24._unint64_t object = (void *)0x800000020C853DE0;
    v10._uint64_t countAndFlagsBits = 0x4220686365657053;
    v10._unint64_t object = (void *)0xED0000656C626275;
    v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._unint64_t object = (void *)0xEB00000000656C62;
    v12._uint64_t countAndFlagsBits = 0;
    v12._unint64_t object = (void *)0xE000000000000000;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    uint64_t v14 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    uint64_t v15 = v23;
    if (v23)
    {
      id v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      uint64_t v17 = *(void *)(v15 - 8);
      double v18 = MEMORY[0x270FA5388](v16);
      id v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      uint64_t v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddRoundedRectListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x21054D080](0x662E657261757173, 0xEB000000006C6C69);
  id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

  if (v5)
  {
    id v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    BOOL v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    uint64_t v8 = one-time initialization token for paperKitBundle;
    uint64_t v9 = v7;
    if (v8 != -1) {
      swift_once();
    }
    v24._uint64_t countAndFlagsBits = 0xD000000000000037;
    v24._unint64_t object = (void *)0x800000020C853F50;
    v10._unint64_t object = (void *)0x800000020C853F30;
    v10._uint64_t countAndFlagsBits = 0xD000000000000011;
    v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._unint64_t object = (void *)0xEB00000000656C62;
    v12._uint64_t countAndFlagsBits = 0;
    v12._unint64_t object = (void *)0xE000000000000000;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    uint64_t v14 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    uint64_t v15 = v23;
    if (v23)
    {
      id v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      uint64_t v17 = *(void *)(v15 - 8);
      double v18 = MEMORY[0x270FA5388](v16);
      id v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      uint64_t v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddPolygonListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x21054D080](0x2E6E6F6761786568, 0xEC0000006C6C6966);
  id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

  if (v5)
  {
    id v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    BOOL v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    uint64_t v8 = one-time initialization token for paperKitBundle;
    uint64_t v9 = v7;
    if (v8 != -1) {
      swift_once();
    }
    v24._unint64_t object = (void *)0x800000020C853EA0;
    v10._uint64_t countAndFlagsBits = 0x6E6F67796C6F50;
    v10._unint64_t object = (void *)0xE700000000000000;
    v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._unint64_t object = (void *)0xEB00000000656C62;
    v12._uint64_t countAndFlagsBits = 0;
    v12._unint64_t object = (void *)0xE000000000000000;
    v24._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    uint64_t v14 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    uint64_t v15 = v23;
    if (v23)
    {
      id v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      uint64_t v17 = *(void *)(v15 - 8);
      double v18 = MEMORY[0x270FA5388](v16);
      id v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      uint64_t v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddStarListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x21054D080](0x6C69662E72617473, 0xE90000000000006CLL);
  id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

  if (v5)
  {
    id v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    BOOL v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    uint64_t v8 = one-time initialization token for paperKitBundle;
    uint64_t v9 = v7;
    if (v8 != -1) {
      swift_once();
    }
    v24._unint64_t object = (void *)0x800000020C853E20;
    v10._uint64_t countAndFlagsBits = 1918989395;
    v10._unint64_t object = (void *)0xE400000000000000;
    v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._unint64_t object = (void *)0xEB00000000656C62;
    v12._uint64_t countAndFlagsBits = 0;
    v12._unint64_t object = (void *)0xE000000000000000;
    v24._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    uint64_t v14 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    uint64_t v15 = v23;
    if (v23)
    {
      id v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      uint64_t v17 = *(void *)(v15 - 8);
      double v18 = MEMORY[0x270FA5388](v16);
      id v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      uint64_t v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized static ShapeListItemView.newAddArrowShapeListItemView(_:action:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x21054D080](0xD000000000000015, 0x800000020C853E50);
  id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

  if (v5)
  {
    id v6 = objc_allocWithZone((Class)type metadata accessor for ShapeListItemView());
    BOOL v7 = ShapeListItemView.init(image:symbolWeight:)(v5, 5);
    uint64_t v8 = one-time initialization token for paperKitBundle;
    uint64_t v9 = v7;
    if (v8 != -1) {
      swift_once();
    }
    v24._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v24._unint64_t object = (void *)0x800000020C853E70;
    v10._uint64_t countAndFlagsBits = 0x776F727241;
    v10._unint64_t object = (void *)0xE500000000000000;
    v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._unint64_t object = (void *)0xEB00000000656C62;
    v12._uint64_t countAndFlagsBits = 0;
    v12._unint64_t object = (void *)0xE000000000000000;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v24)._countAndFlagsBits;
    uint64_t v14 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

    outlined init with copy of Any?(a1, (uint64_t)v22);
    uint64_t v15 = v23;
    if (v23)
    {
      id v16 = __swift_project_boxed_opaque_existential_1(v22, v23);
      uint64_t v17 = *(void *)(v15 - 8);
      double v18 = MEMORY[0x270FA5388](v16);
      id v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v17 + 16))(v20, v18);
      uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
    else
    {
      uint64_t v21 = 0;
    }
    objc_msgSend(v9, sel_addTarget_action_forControlEvents_, v21, a2, 64);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

id PaperDocumentViewController.__allocating_init(context:paperDocument:editingMode:)(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  id v7 = objc_allocWithZone(v3);
  id v8 = specialized PaperDocumentViewController.init(context:paperDocument:editingMode:)(a1, a2, a3);

  return v8;
}

id PaperDocumentPasswordViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_documentToUnlock] = 0;
  id v7 = &v3[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_assetToUnlock];
  uint64_t v8 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument] = 0;
  if (a2)
  {
    uint64_t v9 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = 0;
  }
  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for PaperDocumentPasswordViewController(0);
  id v10 = objc_msgSendSuper2(&v12, sel_initWithNibName_bundle_, v9, a3);

  return v10;
}

void PaperDocumentPasswordViewController.__ivar_destroyer()
{
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_assetToUnlock, &demangling cache variable for type metadata for CRAsset?);
  unsigned int v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument);
}

id PaperDocumentPasswordViewController.__deallocating_deinit()
{
  return PaperDocumentPasswordViewController.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for PaperDocumentPasswordViewController);
}

uint64_t PaperDocumentViewController.delegate.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate);
}

uint64_t PaperDocumentViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.delegate.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentViewController.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  int v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate;
  v3[6] = v1;
  v3[7] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentViewController.delegate.modify;
}

void PaperDocumentViewController.delegate.modify(uint64_t a1, char a2)
{
  int v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 48) + *(void *)(*(void *)a1 + 56) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    uint64_t v4 = v3[6];
    swift_endAccess();
    swift_unknownObjectRelease();
    uint64_t v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (MEMORY[0x210550400](v3[6] + v3[7])) {
        uint64_t v7 = *(void *)(*(void *)(v3[6] + v3[7] + 8) + 8);
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
      swift_beginAccess();
      *(void *)(v8 + 8) = v7;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
    }
  }
  free(v3);
}

void *PaperDocumentViewController.paperDocumentView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  objc_super v2 = *v1;
  id v3 = v2;
  return v2;
}

void *PaperDocumentViewController.paperDocumentThumbnailView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
  swift_beginAccess();
  objc_super v2 = *v1;
  id v3 = v2;
  return v2;
}

Swift::Void __swiftcall PaperDocumentViewController.updateGestureRecognizers()()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_screenEdgePanGestureRecognizer;
  objc_super v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_screenEdgePanGestureRecognizer];
  if (v2) {
    goto LABEL_4;
  }
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82B70]), sel_initWithTarget_action_, v0, sel_didScreenEdgePan);
  objc_msgSend(v3, sel_setEdges_, 2);
  id v4 = objc_msgSend(v0, sel_view);
  if (!v4)
  {
    __break(1u);
    return;
  }
  uint64_t v5 = v4;
  objc_msgSend(v4, sel_addGestureRecognizer_, v3);

  uint64_t v6 = *(void **)&v0[v1];
  *(void *)&v0[v1] = v3;

  objc_super v2 = *(void **)&v0[v1];
  if (v2)
  {
LABEL_4:
    uint64_t v7 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility];
    swift_beginAccess();
    uint64_t v8 = *v7;
    uint64_t v9 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
    swift_beginAccess();
    if (*v9 != 1
      || (id v10 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView],
          swift_beginAccess(),
          !*(void *)v10)
      || (Swift::String_optional v11 = (unsigned char *)(*(void *)v10 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout),
          swift_beginAccess(),
          (*v11 & 1) == 0))
    {
      uint64_t v8 = 0;
    }
    objc_msgSend(v2, sel_setEnabled_, v8);
  }
}

void key path setter for PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility : PaperDocumentViewController(unsigned __int8 *a1, void *a2)
{
  int v2 = *a1;
  id v3 = (unsigned char *)(*a2
               + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility);
  swift_beginAccess();
  int v4 = *v3;
  *id v3 = v2;
  if (v2 != v4)
  {
    PaperDocumentViewController.updateThumbnailViewConstraints()();
    PaperDocumentViewController.updateGestureRecognizers()();
  }
}

uint64_t PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility);
  swift_beginAccess();
  return *v1;
}

void PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.setter(char a1)
{
  int v3 = a1 & 1;
  int v4 = (unsigned char *)(v1
               + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility);
  swift_beginAccess();
  int v5 = *v4;
  *int v4 = a1;
  if (v5 != v3)
  {
    PaperDocumentViewController.updateThumbnailViewConstraints()();
    PaperDocumentViewController.updateGestureRecognizers()();
  }
}

void (*PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility;
  v3[3] = v1;
  v3[4] = v4;
  int v5 = (unsigned char *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 40) = *v5;
  return PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.modify;
}

void PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v2 = *(void *)(*(void *)a1 + 32);
  int v4 = *(unsigned __int8 *)(*(void *)a1 + 40);
  int v5 = *(unsigned __int8 *)(v3 + v2);
  *(unsigned char *)(v3 + v2) = v4;
  if (v4 != v5)
  {
    PaperDocumentViewController.updateThumbnailViewConstraints()();
    PaperDocumentViewController.updateGestureRecognizers()();
  }
  free(v1);
}

void PaperDocumentViewController.isThumbnailViewCollapsed.didset(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  int v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
  swift_beginAccess();
  if (*v4 != v3)
  {
    int v5 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    uint64_t v6 = *v5;
    if (*v5)
    {
      uint64_t v7 = v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate;
      swift_beginAccess();
      if (MEMORY[0x210550400](v7))
      {
        uint64_t v8 = *(void *)(v7 + 8);
        swift_getObjectType();
        uint64_t v9 = *(void (**)(void))(*(void *)(v8 + 8) + 56);
        id v10 = v6;
        v9();
        swift_unknownObjectRelease();
      }
    }
    PaperDocumentViewController.updateThumbnailViewConstraints()();
    PaperDocumentViewController.updateGestureRecognizers()();
    PaperDocumentViewController.notifyContentFrameDidChange()();
    if (*v4) {
      goto LABEL_18;
    }
    Swift::String_optional v11 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
    swift_beginAccess();
    if (*v11)
    {
      uint64_t v12 = (uint64_t)*v11 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
      swift_beginAccess();
      id v13 = (void *)MEMORY[0x210550400](v12);
      uint64_t v14 = *v5;
      if (v13)
      {
        uint64_t v15 = v13;
        if (!v14)
        {

          uint64_t v19 = *v11;
          if (!v19)
          {
LABEL_15:
            if ((*v4 & 1) == 0)
            {
              uint64_t v23 = (id *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
              swift_beginAccess();
              if (*v23) {
                objc_msgSend(*v23, sel_setHidden_, 0);
              }
            }
LABEL_18:
            Swift::String v24 = self;
            uint64_t v25 = swift_allocObject();
            swift_unknownObjectWeakInit();
            objc_super v33 = partial apply for closure #1 in PaperDocumentViewController.isThumbnailViewCollapsed.didset;
            uint64_t v34 = v25;
            uint64_t aBlock = MEMORY[0x263EF8330];
            uint64_t v30 = 1107296256;
            id v31 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            unint64_t v32 = &block_descriptor_204;
            id v26 = _Block_copy(&aBlock);
            swift_release();
            uint64_t v27 = swift_allocObject();
            swift_unknownObjectWeakInit();
            objc_super v33 = partial apply for closure #2 in PaperDocumentViewController.isThumbnailViewCollapsed.didset;
            uint64_t v34 = v27;
            uint64_t aBlock = MEMORY[0x263EF8330];
            uint64_t v30 = 1107296256;
            id v31 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
            unint64_t v32 = &block_descriptor_208;
            id v28 = _Block_copy(&aBlock);
            swift_release();
            objc_msgSend(v24, sel_animateWithDuration_delay_options_animations_completion_, 0, v26, v28, 0.15, 0.0);
            _Block_release(v28);
            _Block_release(v26);
            return;
          }
LABEL_14:
          id v20 = *v5;
          swift_beginAccess();
          swift_unknownObjectWeakAssign();
          id v21 = v19;
          id v22 = v20;
          PaperDocumentThumbnailView.documentView.didset();

          goto LABEL_15;
        }
        type metadata accessor for PaperDocumentView();
        id v16 = v14;
        id v17 = v15;
        char v18 = static NSObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_15;
        }
LABEL_13:
        uint64_t v19 = *v11;
        if (!v19) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v14 = *v5;
    }
    if (!v14) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
}

void PaperDocumentViewController.notifyContentFrameDidChange()()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    int v3 = (void *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
    swift_beginAccess();
    if (*v3)
    {
      int v4 = *(void **)(*v3 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView);
      int v5 = v2;
      uint64_t v6 = (char *)objc_msgSend(v4, sel_collectionView);
      if (!v6)
      {
        uint64_t v7 = v5;
LABEL_22:

        return;
      }
      uint64_t v7 = v6;
      uint64_t v8 = (id *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
      swift_beginAccess();
      if (!*v8) {
        goto LABEL_26;
      }
      id v9 = objc_msgSend(*v8, sel_documentScrollView);
      id v10 = (double *)MEMORY[0x263F001A0];
      if (v9)
      {
        Swift::String_optional v11 = v9;
        id v12 = objc_msgSend(v9, sel_subviews);

        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v13 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v33) {
            goto LABEL_8;
          }
        }
        else if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_8:
          if ((v13 & 0xC000000000000001) != 0)
          {
            id v14 = (id)MEMORY[0x21054E050](0, v13);
            goto LABEL_11;
          }
          if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v14 = *(id *)(v13 + 32);
LABEL_11:
            uint64_t v15 = v14;
            swift_bridgeObjectRelease();
            objc_msgSend(v15, sel_bounds);
            double v17 = v16;
            double v19 = v18;
            double v21 = v20;
            double v23 = v22;
            Swift::String v24 = v5;
            objc_msgSend(v15, sel_convertRect_toCoordinateSpace_, v24, v17, v19, v21, v23);
            CGFloat v26 = v25;
            CGFloat v28 = v27;
            CGFloat v30 = v29;
            CGFloat v32 = v31;

LABEL_16:
            uint64_t v34 = (unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
            swift_beginAccess();
            if (*v34 == 1)
            {
              double v35 = *v10;
              double v36 = v10[1];
              CGFloat v37 = v10[2];
              CGFloat v38 = v10[3];
            }
            else
            {
              objc_msgSend(v7, sel_contentOffset);
              double v35 = -v39;
              objc_msgSend(v7, sel_contentOffset);
              double v36 = -v40;
              objc_msgSend(v7, sel_contentSize);
              CGFloat v37 = v41;
              CGFloat v38 = v42;
            }
            uint64_t v43 = v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate;
            swift_beginAccess();
            if (MEMORY[0x210550400](v43))
            {
              uint64_t v44 = *(void *)(v43 + 8);
              uint64_t ObjectType = swift_getObjectType();
              v46.origin.CGFloat x = v26;
              v46.origin.CGFloat y = v28;
              v46.size.CGFloat width = v30;
              v46.size.CGFloat height = v32;
              v48.origin.CGFloat x = v35;
              v48.origin.CGFloat y = v36;
              v48.size.CGFloat width = v37;
              v48.size.CGFloat height = v38;
              CGRect v47 = CGRectUnion(v46, v48);
              (*(void (**)(char *, uint64_t, CGPoint, __n128, CGSize, __n128))(*(void *)(v44 + 8) + 88))(v5, ObjectType, v47.origin, *(__n128 *)&v47.origin.y, v47.size, *(__n128 *)&v47.size.height);

              swift_unknownObjectRelease();
            }
            else
            {
            }
            goto LABEL_22;
          }
          __break(1u);
LABEL_26:
          __break(1u);
          return;
        }
        swift_bridgeObjectRelease();
      }
      CGFloat v26 = *v10;
      CGFloat v28 = v10[1];
      CGFloat v30 = v10[2];
      CGFloat v32 = v10[3];
      goto LABEL_16;
    }
  }
}

void closure #1 in PaperDocumentViewController.isThumbnailViewCollapsed.didset(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x210550400](v1);
  if (v2)
  {
    int v3 = v2;
    id v4 = objc_msgSend(v2, sel_view);

    if (v4)
    {
      objc_msgSend(v4, sel_layoutIfNeeded);
    }
    else
    {
      __break(1u);
    }
  }
}

void closure #2 in PaperDocumentViewController.isThumbnailViewCollapsed.didset(char a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a2 + 16;
    swift_beginAccess();
    uint64_t v3 = MEMORY[0x210550400](v2);
    if (v3)
    {
      id v4 = (char *)v3;
      int v5 = (unsigned char *)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
      swift_beginAccess();
      if (*v5 == 1)
      {
        uint64_t v6 = (id *)&v4[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
        swift_beginAccess();
        if (*v6)
        {
          id v7 = *v6;
          objc_msgSend(v7, sel_setHidden_, 1);
        }
      }
    }
  }
}

uint64_t PaperDocumentViewController.isThumbnailViewCollapsed.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
  swift_beginAccess();
  return *v1;
}

void PaperDocumentViewController.isThumbnailViewCollapsed.setter(char a1)
{
  uint64_t v3 = (char *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
  swift_beginAccess();
  char v4 = *v3;
  *uint64_t v3 = a1;
  PaperDocumentViewController.isThumbnailViewCollapsed.didset(v4);
}

void (*PaperDocumentViewController.isThumbnailViewCollapsed.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed;
  v3[3] = v1;
  v3[4] = v4;
  int v5 = (unsigned char *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 40) = *v5;
  return PaperDocumentViewController.isThumbnailViewCollapsed.modify;
}

void PaperDocumentViewController.isThumbnailViewCollapsed.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v2 = *(void *)(*(void *)a1 + 32);
  char v4 = *(unsigned char *)(*(void *)a1 + 40);
  char v5 = *(unsigned char *)(v3 + v2);
  *(unsigned char *)(v3 + v2) = v4;
  PaperDocumentViewController.isThumbnailViewCollapsed.didset(v5);
  free(v1);
}

uint64_t PaperDocumentViewController.editingMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void PaperDocumentViewController.editingMode.setter(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  unsigned __int8 v3 = *a1;
  char v4 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode);
  swift_beginAccess();
  *char v4 = v3;
  char v5 = (void **)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  uint64_t v6 = (char *)*v5;
  if (*v5)
  {
    id v7 = (unsigned __int8 *)&v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
    swift_beginAccess();
    unsigned __int8 v8 = *v7;
    *id v7 = v3;
    unsigned __int8 v10 = v8;
    id v9 = v6;
    PaperDocumentView.editingMode.didset(&v10);
  }
  PaperDocumentViewController.updatePlusButton()();
}

void (*PaperDocumentViewController.editingMode.modify(void *a1))(void **a1, char a2)
{
  unsigned __int8 v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return PaperDocumentViewController.editingMode.modify;
}

void PaperDocumentViewController.editingMode.modify(void **a1, char a2)
{
  unsigned __int8 v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = (void **)(v3[6] + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    char v5 = (char *)*v4;
    if (*v4)
    {
      unsigned __int8 v6 = *(unsigned char *)(v3[6] + v3[7]);
      id v7 = (unsigned __int8 *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
      swift_beginAccess();
      unsigned __int8 v8 = *v7;
      *id v7 = v6;
      unsigned __int8 v10 = v8;
      id v9 = v5;
      PaperDocumentView.editingMode.didset(&v10);
    }
    PaperDocumentViewController.updatePlusButton()();
  }
  free(v3);
}

uint64_t key path setter for PaperDocumentViewController.participantDetailsDataSource : PaperDocumentViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void (*a7)(void))
{
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = swift_unknownObjectRetain();
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(v11, v10, a5, a6, a7);
  return swift_unknownObjectRelease();
}

uint64_t PaperDocumentViewController.pageOverlayViewProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider);
}

uint64_t PaperDocumentViewController.pageOverlayViewProvider.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, (void (*)(void))PaperDocumentView.pageOverlayViewProvider.didset);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentViewController.pageOverlayViewProvider.modify(void *a1))(uint64_t a1, char a2)
{
  unsigned __int8 v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider;
  v3[6] = v1;
  v3[7] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentViewController.pageOverlayViewProvider.modify;
}

void PaperDocumentViewController.pageOverlayViewProvider.modify(uint64_t a1, char a2)
{
}

id key path getter for PaperDocumentViewController.toolPicker : PaperDocumentViewController@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unsigned __int8 v3 = *(void **)(*a1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  if (v3)
  {
    id v4 = *(id *)(*a1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14C08]), sel_init);
    unsigned __int8 v3 = 0;
  }
  *a2 = v4;
  return v3;
}

id PaperDocumentViewController.toolPicker.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  if (v1)
  {
    id v2 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  }
  else
  {
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14C08]), sel_init);
    uint64_t v1 = 0;
  }
  id v3 = v1;
  return v2;
}

void PaperDocumentViewController.toolPicker.setter(void *a1)
{
  specialized PaperDocumentViewController.toolPicker.setter(a1);
}

void (*PaperDocumentViewController.toolPicker.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  id v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  if (v3)
  {
    id v4 = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14C08]), sel_init);
    id v3 = 0;
  }
  *a1 = v4;
  id v5 = v3;
  return PaperDocumentViewController.toolPicker.modify;
}

void PaperDocumentViewController.toolPicker.modify(void **a1, char a2)
{
  id v2 = *a1;
  id v4 = *a1;
  if (a2)
  {
    id v3 = v2;
    specialized PaperDocumentViewController.toolPicker.setter(v3);
  }
  else
  {
    specialized PaperDocumentViewController.toolPicker.setter(v2);
  }
}

Swift::Void __swiftcall PaperDocumentViewController.removeToolPicker()()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  *(void *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker) = 0;

  id v3 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  id v4 = (char *)*v3;
  if (*v3)
  {
    id v5 = *(void **)(v0 + v1);
    uint64_t v6 = (id *)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
    swift_beginAccess();
    id v7 = *v6;
    *uint64_t v6 = v5;
    id v8 = v5;
    id v9 = v4;
    if (v7)
    {
      objc_msgSend(v7, sel_removeObserver_, v9);
      id v10 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v7, sel_removeObserver_, v10);
    }
    swift_beginAccess();
    uint64_t v11 = v9;
    uint64_t v12 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v12, (uint64_t)v11);
    swift_bridgeObjectRelease();

    if (*v6)
    {
      id v13 = *v6;
      objc_msgSend(v13, sel_addObserver_, v11);
      id v14 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v13, sel_addObserver_, v14);

      PaperDocumentView.updateTiledViewInk(for:)(v13);
      PaperDocumentView.updateToolPicker()();

      uint64_t v11 = (char *)v7;
      id v7 = v8;
      id v8 = v13;
    }
  }
}

uint64_t (*PaperDocumentViewController.paperDocumentTemp.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t key path setter for PaperDocumentViewController.paperDocument : PaperDocumentViewController(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, a1, v2, v4);
  id v7 = PaperDocumentViewController.paperDocument.modify(v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 24))(v8, v6, v2);
  ((void (*)(void *, void))v7)(v10, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t PaperDocumentViewController.paperDocument.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = (void *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v6)
  {
    uint64_t v7 = *v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, v7, v8);
  }
  else
  {
    uint64_t v10 = v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v10, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, v11);
    if (result == 1) {
      __break(1u);
    }
    else {
      return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(a1, v5, v11);
    }
  }
  return result;
}

void (*PaperDocumentViewController.paperDocument.modify(void *a1))(void ***a1)
{
  uint64_t v3 = malloc(0xA0uLL);
  *a1 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v3[14] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  v3[15] = v5;
  v3[16] = malloc(*(void *)(v5 + 64));
  uint64_t v7 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  uint64_t v8 = *v7;
  v3[17] = *v7;
  if (v8)
  {
    id v9 = v8;
    v3[18] = PaperDocumentView.dataModel.modify();
    return (void (*)(void ***))PaperDocumentViewController.paperDocument.modify;
  }
  uint64_t v11 = PaperDocumentViewController.paperDocumentTemp.modify();
  uint64_t result = (void (*)(void ***))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v12, 1, v4);
  if (result != 1)
  {
    v3[19] = v11;
    return PaperDocumentViewController.paperDocument.modify;
  }
  __break(1u);
  return result;
}

void PaperDocumentViewController.paperDocument.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void))(*a1 + 144))();
  if (a2)
  {
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 128);
    uint64_t v4 = *(char **)(v3 + 136);
    uint64_t v6 = *(void *)(v3 + 112);
    uint64_t v7 = *(void *)(v3 + 120);
    uint64_t v8 = &v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v5, v8, v6);
    specialized PaperDocumentView.merge<A>(_:from:page:)(v5, 3u, 0);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  free(*(void **)(v3 + 128));
  free((void *)v3);
}

void PaperDocumentViewController.paperDocument.modify(void ***a1)
{
  uint64_t v1 = *a1;
  ((void (*)(void **, void))(*a1)[19])(*a1, 0);
  free(v1[16]);
  free(v1);
}

uint64_t PaperDocumentViewController.paperDocument.setter(uint64_t a1)
{
  uint64_t v2 = PaperDocumentViewController.paperDocument.modify(v8);
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v4, a1, v5);
  ((void (*)(void *, void))v2)(v8, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t PaperDocumentViewController.shouldShowFormFillingUIAutomatically.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically);
  swift_beginAccess();
  return *v1;
}

uint64_t PaperDocumentViewController.shouldShowFormFillingUIAutomatically.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*PaperDocumentViewController.shouldShowFormFillingUIAutomatically.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

void PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  CGFloat v37 = &type metadata for AutofillFeatureFlags;
  unint64_t v6 = lazy protocol witness table accessor for type AutofillFeatureFlags and conformance AutofillFeatureFlags();
  unint64_t v38 = v6;
  v36[0] = 0;
  char v7 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  if ((v7 & 1) != 0
    || (CGFloat v37 = &type metadata for AutofillFeatureFlags,
        unint64_t v38 = v6,
        v36[0] = 1,
        char v8 = isFeatureEnabled(_:)(),
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36),
        (v8 & 1) != 0))
  {
    id v9 = &v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically];
    swift_beginAccess();
    if (*v9 == 1)
    {
      uint64_t v10 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_defaultBannerWasDisplayed;
      if ((v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_defaultBannerWasDisplayed] & 1) == 0)
      {
        uint64_t v11 = (void *)MEMORY[0x21054D080](0xD000000000000021, 0x800000020C852FB0);
        id v35 = objc_msgSend(self, sel_systemImageNamed_, v11);

        if (one-time initialization token for paperKitBundle != -1) {
          swift_once();
        }
        v12._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
        v39._unint64_t object = (void *)0x800000020C8547A0;
        v12._unint64_t object = (void *)0x800000020C854770;
        v13.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
        v13.value._unint64_t object = (void *)0xEB00000000656C62;
        v14._uint64_t countAndFlagsBits = 0;
        v14._unint64_t object = (void *)0xE000000000000000;
        v39._uint64_t countAndFlagsBits = 0xD000000000000015;
        Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, paperKitBundle, v14, v39);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
        double v16 = (void *)swift_allocObject();
        v16[2] = v3;
        v16[3] = a1;
        void v16[4] = a2;
        double v17 = v3;
        outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(a1);
        double v18 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
        v40._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
        v40._unint64_t object = (void *)0x800000020C8547C0;
        v19._uint64_t countAndFlagsBits = 0x6C6C69466F747541;
        v19._unint64_t object = (void *)0xED00006D726F4620;
        v20.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
        v20.value._unint64_t object = (void *)0xEB00000000656C62;
        v21._uint64_t countAndFlagsBits = 0;
        v21._unint64_t object = (void *)0xE000000000000000;
        uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v40)._countAndFlagsBits;
        double v23 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v18, sel_setTitle_, v23);

        uint64_t v24 = swift_allocObject();
        *(void *)(v24 + 16) = v17;
        double v25 = v17;
        CGFloat v26 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
        id v27 = v35;
        id v28 = v18;
        id v29 = v26;
        CGFloat v30 = (void *)MEMORY[0x21054D080](v15._countAndFlagsBits, v15._object);
        swift_bridgeObjectRelease();
        double v31 = (void *)MEMORY[0x21054D080](0, 0xE000000000000000);
        id v32 = objc_msgSend(self, sel_configurationWithImage_title_subtitle_primaryAction_dismissAction_, v27, v30, v31, v28, v29, 0, 0, 0, partial apply for closure #2 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:), v24);

        v3[v10] = 1;
        uint64_t v33 = *(void **)&v25[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration];
        *(void *)&v25[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration] = v32;
        id v34 = v32;

        PaperDocumentViewController.bannerViewConfiguration.didset();
      }
    }
  }
}

void closure #1 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = (unsigned char *)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode);
  swift_beginAccess();
  *uint64_t v5 = 1;
  unint64_t v6 = (void **)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  char v7 = (char *)*v6;
  if (*v6)
  {
    char v8 = (unsigned __int8 *)&v7[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
    swift_beginAccess();
    unsigned __int8 v9 = *v8;
    *char v8 = 1;
    unsigned __int8 v12 = v9;
    uint64_t v10 = v7;
    PaperDocumentView.editingMode.didset(&v12);
  }
  PaperDocumentViewController.updatePlusButton()();
  if (a3) {
    a3();
  }
  uint64_t v11 = *(void **)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView);
  if (v11) {
    objc_msgSend(v11, sel_removeFromSuperview);
  }
  PaperDocumentViewController.constraintPageLabelViewToBannerIfNeeded()();
  if (*v6) {
    *(unsigned char *)(*(void *)((char *)*v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics) + 19) = 48;
  }
}

void closure #2 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView);
  if (v3) {
    objc_msgSend(v3, sel_removeFromSuperview);
  }
  PaperDocumentViewController.constraintPageLabelViewToBannerIfNeeded()();
  uint64_t v4 = (void *)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v4)
  {
    uint64_t v5 = *(void *)(*v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
    if (v5)
    {
      unint64_t v6 = *(char **)(v5 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
      char v7 = &v6[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
      if (MEMORY[0x210550400](&v6[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
      {
        uint64_t v8 = *((void *)v7 + 1);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 16);
        uint64_t v11 = v6;
        unsigned __int8 v12 = (void *)v10(ObjectType, v8);

        uint64_t v13 = swift_unknownObjectRelease();
        if (v12)
        {
          Swift::String v14 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v12) + 0x2F8);
          Swift::String v15 = (void *)((uint64_t (*)(uint64_t))v14)(v13);
          uint64_t v17 = v16;
          uint64_t v18 = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v17 + 208))(v18, v17);

          Swift::String v19 = (void *)v14();
          uint64_t v21 = v20;
          uint64_t v22 = swift_getObjectType();
          double v23 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 144))(v22, v21);

          if (v23)
          {
            uint64_t v24 = *(void *)&v23[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
            swift_retain();

            *(unsigned char *)(v24 + 17) = 1;
            swift_release();
          }
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void PaperDocumentViewController.bannerViewConfiguration.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
  swift_beginAccess();
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = (void **)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    uint64_t v5 = (char *)*v4;
    if (v5)
    {
      unint64_t v6 = (id *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
      swift_beginAccess();
      id v7 = *v6;
      if (*v6)
      {
        uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView];
        if (v8)
        {
          id v9 = v3;
          uint64_t v10 = v5;
          id v11 = v7;
          id v12 = v8;
          id v13 = objc_msgSend(v12, sel_superview);

          if (v13) {
            goto LABEL_10;
          }
          Swift::String v14 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration];
          if (!v14) {
            goto LABEL_10;
          }
          id v15 = v14;
          PaperDocumentViewController.constraintPageLabelViewToBannerIfNeeded()();
          if (*v6)
          {
            objc_msgSend(*v6, sel_addSubview_, v12);
            unint64_t v38 = v15;
            objc_msgSend(v12, sel_populateWithConfiguration_, v15);
            objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
            id v16 = objc_msgSend(v12, sel_bottomAnchor);
            id v17 = objc_msgSend(v11, sel_safeAreaLayoutGuide);
            id v18 = objc_msgSend(v17, sel_topAnchor);

            id v19 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v18);
            id v39 = self;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t v20 = swift_allocObject();
            *(_OWORD *)(v20 + 16) = xmmword_20C837410;
            *(void *)(v20 + 32) = v19;
            id v37 = v19;
            id v21 = objc_msgSend(v12, sel_leadingAnchor);
            id v22 = objc_msgSend(v9, sel_trailingAnchor);
            id v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

            *(void *)(v20 + 40) = v23;
            id v24 = objc_msgSend(v12, sel_trailingAnchor);
            id v25 = objc_msgSend(v11, sel_safeAreaLayoutGuide);
            id v26 = objc_msgSend(v25, sel_trailingAnchor);

            id v27 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v26);
            *(void *)(v20 + 48) = v27;
            aBlock[0] = v20;
            specialized Array._endMutation()();
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            objc_msgSend(v39, sel_activateConstraints_, isa);

            id v29 = objc_msgSend(v1, sel_view);
            if (v29)
            {
              CGFloat v30 = v29;
              objc_msgSend(v29, sel_layoutIfNeeded);

              double v31 = (void *)swift_allocObject();
              _OWORD v31[2] = v37;
              v31[3] = v12;
              v31[4] = v11;
              v31[5] = v1;
              aBlock[4] = partial apply for closure #1 in PaperDocumentViewController.bannerViewConfiguration.didset;
              aBlock[5] = v31;
              aBlock[0] = MEMORY[0x263EF8330];
              aBlock[1] = 1107296256;
              aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
              aBlock[3] = &block_descriptor_160;
              id v32 = _Block_copy(aBlock);
              id v33 = v11;
              id v34 = v12;
              id v35 = v37;
              double v36 = v1;
              swift_release();
              objc_msgSend(v34, sel_showWithAnimations_, v32);
              _Block_release(v32);

LABEL_10:
              return;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
        }
      }
    }
  }
}

void closure #1 in PaperDocumentViewController.bannerViewConfiguration.didset(void *a1, void *a2, void *a3, void *a4)
{
  objc_msgSend(a1, sel_setActive_, 0);
  id v7 = objc_msgSend(a2, sel_topAnchor);
  id v8 = objc_msgSend(a3, sel_safeAreaLayoutGuide);
  id v9 = objc_msgSend(v8, sel_topAnchor);

  id v10 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v9);
  objc_msgSend(v10, sel_setActive_, 1);

  id v11 = objc_msgSend(a4, sel_view);
  if (v11)
  {
    id v12 = v11;
    objc_msgSend(v11, sel_layoutIfNeeded);
  }
  else
  {
    __break(1u);
  }
}

id PaperDocumentViewController.__allocating_init(context:pdfURL:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  swift_storeEnumTagMultiPayload();
  unsigned __int8 v13 = 3;
  id v9 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController(0));
  id v10 = specialized PaperDocumentViewController.init(withDataOrURL:context:editingMode:)((uint64_t)v6, a1, &v13);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
  return v10;
}

id PaperDocumentViewController.__allocating_init(context:data:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v8 = a2;
  v8[1] = a3;
  swift_storeEnumTagMultiPayload();
  unsigned __int8 v13 = 3;
  id v9 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController(0));
  id v10 = specialized PaperDocumentViewController.init(withDataOrURL:context:editingMode:)((uint64_t)v8, a1, &v13);

  return v10;
}

id PaperDocumentViewController.init(context:paperDocument:editingMode:)(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  id v4 = specialized PaperDocumentViewController.init(context:paperDocument:editingMode:)(a1, a2, a3);

  return v4;
}

uint64_t closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = type metadata accessor for MainActor();
  v5[3] = static MainActor.shared.getter();
  uint64_t v7 = (void *)swift_task_alloc();
  v5[4] = v7;
  *uint64_t v7 = v5;
  v7[1] = closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:);
  return PaperDocumentViewController.setupDocumentView(context:)(a5);
}

uint64_t closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:)()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:), v1, v0);
}

uint64_t closure #1 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v2);
  id v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - v6;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  CROrderedSet.init()();
  uint64_t v8 = type metadata accessor for PaperDocument(0);
  uint64_t v9 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAsset?);
  uint64_t result = swift_release();
  *(void *)(a1 + *(int *)(v8 + 24)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  uint64_t v7 = type metadata accessor for URL();
  v6[12] = v7;
  v6[13] = *(void *)(v7 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  v6[16] = type metadata accessor for DataOrURL();
  v6[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CRAsset();
  v6[18] = v8;
  v6[19] = *(void *)(v8 - 8);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:), 0, 0);
}

uint64_t closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:)()
{
  uint64_t v1 = v0[9] + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  v0[22] = v2;
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    outlined init with copy of PaperDocument(v0[10], v0[17], (uint64_t (*)(void))type metadata accessor for DataOrURL);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    uint64_t v5 = (uint64_t *)v0[17];
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = v0[14];
      uint64_t v6 = v0[15];
      uint64_t v8 = v0[12];
      uint64_t v9 = v0[13];
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v9 + 32))(v6, v5, v8);
      id v10 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
      URL._bridgeToObjectiveC()(v11);
      unsigned __int8 v13 = v12;
      id v14 = objc_msgSend(v10, sel_initWithURL_, v12);

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
      CRContext.assetManager.getter();
      CRAsset.init(url:coordinated:assetManager:)();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
      v0[23] = v14;
      if (v14)
      {
LABEL_4:
        if (objc_msgSend(v14, sel_isLocked))
        {
          (*(void (**)(void, void, void))(v0[19] + 16))(v0[20], v0[21], v0[18]);
          type metadata accessor for MainActor();
          v0[24] = static MainActor.shared.getter();
          uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v17 = v16;
          id v18 = closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:);
          uint64_t v19 = v15;
          uint64_t v20 = v17;
        }
        else
        {
          type metadata accessor for MainActor();
          v0[26] = static MainActor.shared.getter();
          uint64_t v27 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v20 = v28;
          v0[27] = v27;
          v0[28] = v28;
          id v18 = closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:);
          uint64_t v19 = v27;
        }
        return MEMORY[0x270FA2498](v18, v19, v20);
      }
    }
    else
    {
      uint64_t v21 = *v5;
      unint64_t v22 = v5[1];
      id v23 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
      outlined copy of Data._Representation(v21, v22);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v14 = objc_msgSend(v23, sel_initWithData_, isa);
      outlined consume of Data._Representation(v21, v22);

      CRContext.assetManager.getter();
      CRAsset.init(data:assetManager:)();
      v0[23] = v14;
      if (v14) {
        goto LABEL_4;
      }
    }
    (*(void (**)(void, void))(v0[19] + 8))(v0[21], v0[18]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v8;

  uint64_t v1 = (void *)v0[23];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  id v4 = v0[18];
  uint64_t v5 = (void *)v0[11];
  swift_release();
  PaperDocumentViewController.unlock(pdfDocument:asset:context:)(v1, v2, v5);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[25] = v6;
  v6(v2, v4);
  return MEMORY[0x270FA2498](closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 184);

  (*(void (**)(void, void))(v0 + 200))(*(void *)(v0 + 168), *(void *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void ***);
  void *v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  id v4 = PaperDocumentViewController.paperDocument.modify(v0 + 2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  Capsule.callAsFunction<A>(_:)();
  swift_task_dealloc();
  ((void (*)(void *, void))v4)(v0 + 2, 0);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[29] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:);
  uint64_t v6 = v0[11];
  return PaperDocumentViewController.setupDocumentView(context:)(v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 224);
  uint64_t v3 = *(void *)(v1 + 216);
  return MEMORY[0x270FA2498](closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:), v3, v2);
}

{
  uint64_t v1;

  swift_release();
  return MEMORY[0x270FA2498](closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 152);

  (*(void (**)(void, void))(v2 + 8))(*(void *)(v0 + 168), *(void *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

id PaperDocumentViewController.__deallocating_deinit()
{
  uint64_t v1 = (uint64_t *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove];
  unint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove + 8];
  if (v2 >> 60 != 15)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = outlined copy of Data._Representation(*v1, *(void *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove + 8]);
    if (one-time initialization token for shared != -1) {
      uint64_t v4 = swift_once();
    }
    MEMORY[0x270FA5388](v4);
    MEMORY[0x270FA5388](v5);
    uint64_t v7 = v6 + 4;
    os_unfair_lock_lock(v6 + 4);
    _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_SSSg_TG5TA_0(&v10);
    os_unfair_lock_unlock(v7);
    swift_bridgeObjectRelease();
    outlined consume of Data?(v3, v2);
  }
  LOBYTE(v10) = 1;
  PassthroughSubject.send(completion:)();
  LOBYTE(v10) = 1;
  PassthroughSubject.send(completion:)();
  uint64_t v8 = (objc_class *)type metadata accessor for PaperDocumentViewController(0);
  v11.receiver = v0;
  v11.super_class = v8;
  return objc_msgSendSuper2(&v11, sel_dealloc);
}

void PaperDocumentViewController.unlock(pdfDocument:asset:context:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  double v8 = MEMORY[0x270FA5388](v7 - 8);
  long long v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(v3, sel_view, v8);
  if (v11)
  {
    id v24 = v11;
    type metadata accessor for PaperDocumentPasswordViewController(0);
    uint64_t v12 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    *(void *)&v12[OBJC_IVAR____TtC8PaperKit22PasswordViewController_delegate + 8] = &protocol witness table for PaperDocumentViewController;
    swift_unknownObjectWeakAssign();
    id v13 = objc_msgSend(v12, sel_view);
    if (v13)
    {
      id v14 = v13;
      objc_msgSend(v3, sel_addChildViewController_, v12);
      objc_msgSend(v24, sel_addSubview_, v14);
      specialized static NSLayoutConstraint.constrain(_:to:)(v14, v24);
      objc_msgSend(v12, sel_didMoveToParentViewController_, v3);
      uint64_t v15 = *(void **)&v12[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_documentToUnlock];
      *(void *)&v12[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_documentToUnlock] = a1;
      id v16 = a1;

      uint64_t v17 = type metadata accessor for CRAsset();
      uint64_t v18 = *(void *)(v17 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v10, a2, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v10, 0, 1, v17);
      uint64_t v19 = (uint64_t)&v12[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_assetToUnlock];
      swift_beginAccess();
      outlined assign with take of Date?((uint64_t)v10, v19, &demangling cache variable for type metadata for CRAsset?);
      swift_endAccess();
      uint64_t v20 = *(void **)&v12[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument];
      *(void *)&v12[OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument] = a3;
      id v21 = a3;

      unint64_t v22 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController];
      *(void *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController] = v12;
    }
    else
    {

      id v23 = v24;
    }
  }
}

void PaperDocumentViewController.updateThumbnailViewConstraints()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint];
  if (v1)
  {
    unint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
    swift_beginAccess();
    objc_msgSend(v1, sel_setActive_, (*v2 & 1) == 0);
  }
  uint64_t v3 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility];
  swift_beginAccess();
  if ((*v3 & 1) != 0
    || (uint64_t v4 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed],
        swift_beginAccess(),
        (*v4 & 1) != 0))
  {
    uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint];
    if (v5)
    {
      id v6 = v5;
      id v7 = objc_msgSend(v0, sel_traitCollection);
      id v8 = objc_msgSend(v7, sel_horizontalSizeClass);

      objc_msgSend(v6, sel_setActive_, v8 != (id)1);
    }
  }
  else
  {
    uint64_t v9 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint];
    if (v9) {
      objc_msgSend(v9, sel_setActive_, 1);
    }
  }
}

Swift::Void __swiftcall PaperDocumentViewController.updateBackgroundColor()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor];
  if (v1)
  {
    unint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    if (*(void *)v2)
    {
      uint64_t v3 = (void **)(*(void *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      uint64_t v4 = *v3;
      if (!*v3)
      {
        __break(1u);
        return;
      }
      id v5 = v1;
      id v6 = v4;
      id v7 = objc_msgSend(v0, sel_traitCollection);
      id v8 = objc_msgSend(v5, sel_resolvedColorWithTraitCollection_, v7);

      objc_msgSend(v6, sel_setBackgroundColor_, v8);
    }
  }
  id v9 = objc_msgSend(self, sel_currentDevice);
  id v10 = objc_msgSend(v9, sel_userInterfaceIdiom);

  if (v10 != (id)6)
  {
    uint64_t v11 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor];
    uint64_t v12 = (id *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
    if (v11)
    {
      swift_beginAccess();
      if (*v12) {
        objc_msgSend(*v12, sel_setBackgroundColor_, v11);
      }
    }
    else
    {
      swift_beginAccess();
      id v13 = *v12;
      if (v13)
      {
        id v14 = self;
        id v15 = v13;
        id v16 = objc_msgSend(v14, sel_tertiarySystemGroupedBackgroundColor);
        objc_msgSend(v15, sel_setBackgroundColor_, v16);
      }
    }
  }
  uint64_t v17 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView];
  if (v17)
  {
    uint64_t v18 = (id *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
    swift_beginAccess();
    id v19 = *v18;
    id v20 = v17;
    if (v19) {
      id v19 = objc_msgSend(v19, sel_backgroundColor);
    }
    objc_msgSend(v17, sel_setBackgroundColor_, v19);
  }
}

uint64_t PaperDocumentViewController.setupDocumentView(context:)(uint64_t a1)
{
  v2[87] = v1;
  v2[86] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  v2[88] = swift_task_alloc();
  v2[89] = swift_task_alloc();
  v2[90] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2[91] = v3;
  v2[92] = *(void *)(v3 - 8);
  v2[93] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[94] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[95] = v5;
  v2[96] = v4;
  return MEMORY[0x270FA2498](PaperDocumentViewController.setupDocumentView(context:), v5, v4);
}

{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  unint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 800);
  uint64_t v4 = *(void **)(*v1 + 688);
  *(void *)(*v1 + 816) = a1;
  swift_task_dealloc();

  uint64_t v5 = *(void *)(v2 + 768);
  id v6 = *(void *)(v2 + 760);
  return MEMORY[0x270FA2498](PaperDocumentViewController.setupDocumentView(context:), v6, v5);
}

uint64_t PaperDocumentViewController.setupDocumentView(context:)()
{
  uint64_t v1 = *(void *)(v0 + 696);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView;
  *(void *)(v0 + 776) = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView;
  uint64_t v3 = (uint64_t *)(v1 + v2);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = *(void *)(v0 + 744);
    uint64_t v6 = *(void *)(v0 + 736);
    uint64_t v7 = *(void *)(v0 + 728);
    uint64_t v8 = v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 736);
    uint64_t v10 = *(void *)(v0 + 728);
    uint64_t v11 = *(void *)(v0 + 720);
    uint64_t v12 = *(void *)(v0 + 696) + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v12, v11, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 736) + 32))(*(void *)(v0 + 744), *(void *)(v0 + 720), *(void *)(v0 + 728));
  }
  uint64_t v14 = *(void *)(v0 + 696);
  id v15 = *(void **)(v0 + 688);
  uint64_t v16 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode;
  *(void *)(v0 + 784) = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode;
  uint64_t v17 = (unsigned char *)(v14 + v16);
  swift_beginAccess();
  *(unsigned char *)(v0 + 848) = *v17;
  uint64_t v18 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  *(void *)(v0 + 792) = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  id v19 = *(void **)(v14 + v18);
  *(void *)(v0 + 800) = v19;
  objc_allocWithZone((Class)type metadata accessor for PaperDocumentView());
  id v25 = (uint64_t (*)(uint64_t, uint64_t, unsigned char *, uint64_t))((char *)&async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)
                                                                   + async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:));
  id v20 = v15;
  id v21 = v19;
  unint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 808) = v22;
  *unint64_t v22 = v0;
  v22[1] = PaperDocumentViewController.setupDocumentView(context:);
  uint64_t v23 = *(void *)(v0 + 744);
  uint64_t v24 = *(void *)(v0 + 688);
  return v25(v24, v23, (unsigned char *)(v0 + 848), (uint64_t)v19);
}

void PaperDocumentViewController.setupDocumentView(context:)()
{
  uint64_t v209 = v0;
  uint64_t v1 = *(void *)(v0 + 816);
  uint64_t v2 = *(char **)(v0 + 696);
  swift_release();
  uint64_t v3 = &v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider];
  swift_beginAccess();
  MEMORY[0x210550400](v3);
  uint64_t v4 = *((void *)v3 + 1);
  uint64_t v5 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
  swift_beginAccess();
  *(void *)(v5 + 8) = v4;
  swift_unknownObjectWeakAssign();
  PaperDocumentView.pageOverlayViewProvider.didset();
  swift_unknownObjectRelease();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  uint64_t v6 = v2;
  PaperDocumentView.viewControllerForPresentingUI.didset();

  id v7 = objc_msgSend(v6, sel_view);
  if (!v7)
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v0 + 816);
  objc_msgSend(v7, sel_addSubview_, v9);

  uint64_t v10 = *(void **)(v9 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (!v10)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  id v11 = v10;
  id v12 = specialized TiledPaperKitView.mostVisibleAttachment()();

  if (v12)
  {
    objc_msgSend(v12, sel_becomeFirstResponder);
  }
  id v13 = *(char **)(v0 + 696);
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker;
  id v15 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker];
  if (v15)
  {
    id v16 = v15;
    PaperDocumentView.updateTiledViewInk(for:)(v16);
    uint64_t v17 = *(void **)&v13[v14];
    *(void *)&v13[v14] = 0;

    id v13 = *(char **)(v0 + 696);
  }
  *(void *)(v0 + 40) = &type metadata for MobileQuickLookFeatureFlags;
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags();
  *(unsigned char *)(v0 + 16) = 0;
  char v18 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  id v19 = objc_msgSend(v13, sel_view);
  if (!v19) {
    goto LABEL_43;
  }
  id v20 = v19;
  objc_msgSend(v19, sel_frame);
  double v22 = v21;
  double v24 = v23;
  double v26 = v25;
  double v28 = v27;

  id v29 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentThumbnailView());
  CGFloat v30 = PaperDocumentThumbnailView.init(frame:supportsLargeThumbnails:)(v18 & 1, v22, v24, v26, v28);
  id v31 = objc_msgSend(self, sel_currentDevice);
  id v32 = objc_msgSend(v31, sel_userInterfaceIdiom);

  if (v32 == (id)6) {
    objc_msgSend(*(id *)(v0 + 816), sel_setOverrideUserInterfaceStyle_, 1);
  }
  id v33 = (unsigned __int8 *)(*(void *)(v0 + 696)
                          + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
  swift_beginAccess();
  uint64_t v191 = v33;
  if ((*v33 & 1) == 0)
  {
    id v34 = *(void **)(v0 + 816);
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    id v35 = v34;
    PaperDocumentThumbnailView.documentView.didset();
  }
  id v36 = objc_msgSend(*(id *)(v0 + 696), sel_view);
  if (!v36) {
    goto LABEL_44;
  }
  id v37 = v36;
  unint64_t v38 = *(char **)(v0 + 696);
  objc_msgSend(v36, sel_addSubview_, v30);

  id v39 = (void **)&v38[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
  swift_beginAccess();
  Swift::String v40 = *v39;
  *id v39 = v30;
  double v41 = v30;

  id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v43 = objc_msgSend(v38, sel_view);
  if (!v43)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v44 = v43;
  uint64_t v45 = *(char **)(v0 + 696);
  objc_msgSend(v43, sel_insertSubview_belowSubview_, v42, v41);

  CGRect v46 = *(void **)&v45[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView];
  *(void *)&v45[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView] = v42;
  id v47 = v42;

  id v48 = objc_msgSend(v45, sel_view);
  if (!v48)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v49 = v48;
  uint64_t v50 = *(void **)(v0 + 816);
  id v51 = *(void **)(v0 + 696);
  id v52 = objc_msgSend(v48, sel_topAnchor);

  objc_msgSend(v50, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v41, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v47, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v53 = objc_msgSend(v41, sel_leadingAnchor);
  id v54 = objc_msgSend(v51, sel_view);
  if (!v54)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  CGAffineTransform v55 = v54;
  id v203 = v47;
  uint64_t v204 = v52;
  uint64_t v56 = *(void **)(v0 + 816);
  uint64_t v57 = *(char **)(v0 + 696);
  id v58 = objc_msgSend(v54, sel_safeAreaLayoutGuide);

  id v59 = objc_msgSend(v58, sel_leadingAnchor);
  id v60 = objc_msgSend(v53, sel_constraintEqualToAnchor_, v59);

  double v61 = *(void **)&v57[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint];
  *(void *)&v57[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint] = v60;
  id v206 = v60;

  id v62 = objc_msgSend(v56, sel_leadingAnchor);
  id v63 = objc_msgSend(v41, sel_trailingAnchor);
  id v64 = objc_msgSend(v62, sel_constraintEqualToAnchor_, v63);

  id v65 = objc_msgSend(v57, sel_traitCollection);
  id v66 = objc_msgSend(v65, sel_horizontalSizeClass);

  objc_msgSend(v64, sel_setActive_, v66 != (id)1);
  id v67 = *(void **)&v57[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint];
  *(void *)&v57[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint] = v64;
  id v201 = v64;

  CGRect v205 = v41;
  id v68 = objc_msgSend(v41, sel_trailingAnchor);
  id v69 = objc_msgSend(v57, sel_view);
  if (!v69)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  id v70 = v69;
  id v71 = *(void **)(v0 + 816);
  id v72 = *(void **)(v0 + 696);
  id v73 = objc_msgSend(v69, sel_leadingAnchor);

  id v74 = objc_msgSend(v68, sel_constraintEqualToAnchor_, v73);
  type metadata accessor for UILayoutPriority(0);
  objc_msgSend(v206, sel_priority);
  *(_DWORD *)(v0 + 832) = v75;
  *(_DWORD *)(v0 + 824) = 1065353216;
  lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority((unint64_t *)&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, type metadata accessor for UILayoutPriority);
  static _UIKitNumericRawRepresentable.- infix(_:_:)();
  LODWORD(v76) = *(_DWORD *)(v0 + 844);
  uint64_t v198 = v74;
  objc_msgSend(v74, sel_setPriority_, v76);
  id v77 = objc_msgSend(v71, sel_leadingAnchor);
  id v78 = objc_msgSend(v72, sel_view);
  if (!v78)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v79 = v78;
  id v199 = *(id *)(v0 + 816);
  id v80 = *(char **)(v0 + 696);
  id v81 = objc_msgSend(v78, sel_leadingAnchor);

  id v82 = objc_msgSend(v77, sel_constraintEqualToAnchor_, v81);
  objc_msgSend(v201, sel_priority);
  *(_DWORD *)(v0 + 840) = v83;
  *(_DWORD *)(v0 + 828) = 1065353216;
  static _UIKitNumericRawRepresentable.- infix(_:_:)();
  LODWORD(v84) = *(_DWORD *)(v0 + 836);
  objc_msgSend(v82, sel_setPriority_, v84);
  id v85 = objc_msgSend(v80, sel_traitCollection);
  double v86 = PaperDocumentThumbnailView.defaultThumbnailWidth(for:)(v85);

  id v87 = objc_msgSend(v205, sel_widthAnchor);
  id v88 = objc_msgSend(v87, sel_constraintEqualToConstant_, v86);

  long long v89 = *(void **)&v80[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint];
  *(void *)&v80[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint] = v88;
  id v196 = v88;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_20C8380F0;
  *(void *)(v90 + 32) = v82;
  *(void *)(v90 + 40) = v201;
  id v202 = v201;
  id v195 = v82;
  id v91 = objc_msgSend(v199, sel_trailingAnchor);
  id v92 = objc_msgSend(v80, sel_view);
  if (!v92)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  CGAffineTransform v93 = v92;
  CGAffineTransform v94 = *(void **)(v0 + 816);
  uint64_t v95 = *(void **)(v0 + 696);
  id v96 = objc_msgSend(v92, sel_trailingAnchor);

  id v97 = objc_msgSend(v91, sel_constraintEqualToAnchor_, v96);
  *(void *)(v90 + 48) = v97;
  id v98 = objc_msgSend(v94, sel_topAnchor);
  id v99 = objc_msgSend(v98, sel_constraintEqualToAnchor_, v204);

  *(void *)(v90 + 56) = v99;
  id v100 = objc_msgSend(v94, sel_bottomAnchor);
  id v101 = objc_msgSend(v95, sel_view);
  if (!v101)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  CGRect v102 = v101;
  CGRect v103 = *(void **)(v0 + 696);
  id v104 = objc_msgSend(v101, sel_bottomAnchor);

  id v105 = objc_msgSend(v100, sel_constraintEqualToAnchor_, v104);
  *(void *)(v90 + 64) = v105;
  *(void *)(v90 + 72) = v206;
  *(void *)(v90 + 80) = v198;
  id v207 = v206;
  id v200 = v198;
  id v106 = objc_msgSend(v205, sel_topAnchor);
  id v107 = objc_msgSend(v106, sel_constraintEqualToAnchor_, v204);

  *(void *)(v90 + 88) = v107;
  id v108 = objc_msgSend(v205, sel_bottomAnchor);
  id v109 = objc_msgSend(v103, sel_view);
  if (!v109)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v110 = v109;
  uint64_t v111 = *(void **)(v0 + 696);
  id v112 = objc_msgSend(v109, sel_bottomAnchor);

  id v113 = objc_msgSend(v108, sel_constraintEqualToAnchor_, v112);
  *(void *)(v90 + 96) = v113;
  *(void *)(v90 + 104) = v196;
  id v192 = v196;
  id v114 = objc_msgSend(v203, sel_topAnchor);
  id v115 = objc_msgSend(v205, sel_topAnchor);
  id v116 = objc_msgSend(v114, sel_constraintEqualToAnchor_, v115);

  *(void *)(v90 + 112) = v116;
  id v117 = objc_msgSend(v203, sel_bottomAnchor);
  id v118 = objc_msgSend(v205, sel_bottomAnchor);
  id v119 = objc_msgSend(v117, sel_constraintEqualToAnchor_, v118);

  *(void *)(v90 + 120) = v119;
  id v120 = objc_msgSend(v203, sel_leadingAnchor);
  id v121 = objc_msgSend(v111, sel_view);
  if (!v121)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v122 = v121;
  uint64_t v193 = *(void *)(v0 + 792);
  uint64_t v194 = *(void *)(v0 + 816);
  uint64_t v123 = *(void *)(v0 + 696);
  CGRect v124 = self;
  id v125 = objc_msgSend(v122, sel_leadingAnchor);

  id v126 = objc_msgSend(v120, sel_constraintEqualToAnchor_, v125);
  *(void *)(v90 + 128) = v126;
  id v127 = objc_msgSend(v203, sel_trailingAnchor);
  id v128 = objc_msgSend(v205, sel_trailingAnchor);
  id v129 = objc_msgSend(v127, sel_constraintEqualToAnchor_, v128);

  *(void *)(v90 + 136) = v129;
  v208[0] = v90;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v124, sel_activateConstraints_, isa);

  uint64_t v131 = *(void **)(v123 + v193);
  uint64_t v132 = (id *)(v194 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker);
  swift_beginAccess();
  id v133 = *v132;
  *uint64_t v132 = v131;
  id v134 = v131;
  if (v133)
  {
    objc_msgSend(v133, sel_removeObserver_, *(void *)(v0 + 816));
    id v135 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v133, sel_removeObserver_, v135);
  }
  uint64_t v136 = *(void **)(v0 + 816);
  swift_beginAccess();
  id v137 = v136;
  uint64_t v138 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v138, (uint64_t)v137);
  swift_bridgeObjectRelease();

  if (*v132)
  {
    uint64_t v139 = *(void *)(v0 + 816);
    id v140 = *v132;
    objc_msgSend(v140, sel_addObserver_, v139);
    id v141 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v140, sel_addObserver_, v141);

    PaperDocumentView.updateTiledViewInk(for:)(v140);
    PaperDocumentView.updateToolPicker()();
  }
  uint64_t v142 = *(void **)(v0 + 816);
  uint64_t v143 = *(void *)(v0 + 776);
  double v144 = *(char **)(v0 + 696);
  uint64_t v145 = *(void **)&v144[v143];
  *(void *)&v144[v143] = v142;
  uint64_t v146 = v142;

  swift_unknownObjectWeakAssign();
  CGFloat v147 = v144;
  PaperDocumentView.viewControllerForPresentingUI.didset();

  uint64_t v148 = &v147[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger];
  swift_beginAccess();
  MEMORY[0x210550400](v148);
  uint64_t v149 = *((void *)v148 + 1);
  CGFloat v150 = &v146[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger];
  swift_beginAccess();
  *((void *)v150 + 1) = v149;
  swift_unknownObjectWeakAssign();
  PaperDocumentView.liveStreamMessenger.didset();
  swift_unknownObjectRelease();
  Swift::Int v151 = &v147[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource];
  swift_beginAccess();
  MEMORY[0x210550400](v151);
  uint64_t v152 = *((void *)v151 + 1);
  uint64_t v153 = &v146[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource];
  swift_beginAccess();
  *((void *)v153 + 1) = v152;
  swift_unknownObjectWeakAssign();
  PaperDocumentView.participantDetailsDataSource.didset();
  swift_unknownObjectRelease();
  uint64_t v154 = &v147[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors];
  swift_beginAccess();
  char v155 = *v154;
  uint64_t v156 = &v146[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
  swift_beginAccess();
  *uint64_t v156 = v155;
  PaperDocumentView.showParticipantCursors.didset();
  uint64_t v157 = &v147[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate];
  swift_beginAccess();
  CGAffineTransform v197 = v157;
  if (MEMORY[0x210550400](v157)) {
    uint64_t v158 = *(void *)(*((void *)v157 + 1) + 8);
  }
  else {
    uint64_t v158 = 0;
  }
  uint64_t v159 = *(void *)(v0 + 736);
  uint64_t v160 = *(void *)(v0 + 728);
  uint64_t v161 = *(void *)(v0 + 712);
  uint64_t v162 = *(void *)(v0 + 696);
  uint64_t v163 = *(void *)(v0 + 816) + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  swift_beginAccess();
  *(void *)(v163 + 8) = v158;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  uint64_t v164 = v162 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v164, v161, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v161, 1, v160) == 1) {
    goto LABEL_54;
  }
  uint64_t v165 = *(void *)(v0 + 816);
  uint64_t v166 = *(void *)(v0 + 784);
  uint64_t v167 = *(void *)(v0 + 736);
  uint64_t v168 = *(void *)(v0 + 728);
  uint64_t v169 = *(void *)(v0 + 712);
  uint64_t v170 = *(void *)(v0 + 704);
  uint64_t v171 = *(unsigned char **)(v0 + 696);
  specialized PaperDocumentView.merge<A>(_:from:page:)(v169, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v169, v168);
  LOBYTE(v166) = v171[v166];
  uint64_t v172 = (char *)(v165 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  char v173 = *v172;
  *uint64_t v172 = v166;
  LOBYTE(v208[0]) = v173;
  PaperDocumentView.editingMode.didset((unsigned __int8 *)v208);
  *(unsigned char *)(v165 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_nonDrawingToolMode) = v171[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_nonDrawingToolMode];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v167 + 56))(v170, 1, 1, v168);
  swift_beginAccess();
  outlined assign with take of Date?(v170, v164, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  swift_endAccess();
  *(void *)(v0 + 680) = *(void *)(v165 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_passThroughSubject);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type PassthroughSubject<Capsule<PaperDocument>, Never> and conformance PassthroughSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  *(void *)(v0 + 656) = Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  *(void *)(v0 + 672) = *(void *)(v165 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_livePassThroughSubject);
  *(void *)(v0 + 664) = Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  PaperDocumentViewController.setUpObservers()();
  PaperDocumentViewController.updateGestureRecognizers()();
  PaperDocumentViewController.updateBackgroundColor()();
  objc_msgSend(v171, sel_becomeFirstResponder);
  PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(0);
  if (MEMORY[0x210550400](v197))
  {
    uint64_t v174 = *(void *)(v0 + 816);
    uint64_t v175 = *(void *)(v0 + 696);
    uint64_t v176 = *((void *)v197 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 16))(v175, v174, ObjectType, v176);
    swift_unknownObjectRelease();
  }
  uint64_t v178 = v203;
  if (MEMORY[0x210550400](v197))
  {
    uint64_t v179 = *(void *)(v0 + 816);
    uint64_t v180 = *((void *)v197 + 1);
    uint64_t v181 = swift_getObjectType();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v180 + 8) + 56))(v179, *v191, v181);
    swift_unknownObjectRelease();
  }
  uint64_t v182 = *(void *)(v0 + 696);
  uint64_t v183 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController;
  uint64_t v184 = *(void **)(v182 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController);
  if (!v184)
  {

    goto LABEL_38;
  }
  id v185 = v184;
  objc_msgSend(v185, sel_willMoveToParentViewController_, 0);
  id v186 = objc_msgSend(v185, sel_view);
  if (!v186)
  {
LABEL_55:
    __break(1u);
    return;
  }
  uint64_t v187 = v186;
  uint64_t v188 = *(void **)(v0 + 816);
  objc_msgSend(v186, sel_removeFromSuperview);

  objc_msgSend(v185, sel_removeFromParentViewController);
  double v189 = *(void **)(v182 + v183);
  *(void *)(v182 + v183) = 0;

  uint64_t v178 = v189;
LABEL_38:

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v190 = *(void (**)(void))(v0 + 8);
  v190();
}

uint64_t closure #1 in PaperDocumentViewController.setupDocumentView(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](a2 + 16);
  if (result)
  {
    uint64_t v8 = (void *)result;
    uint64_t v9 = swift_allocObject();
    swift_unknownObjectWeakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v9;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    swift_retain();
    PaperDocumentViewController.requirePasswordIfNeeded(completion:)((void (*)(void))partial apply for closure #1 in closure #1 in PaperDocumentViewController.setupDocumentView(context:), v11);

    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in closure #1 in PaperDocumentViewController.setupDocumentView(context:)(char a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x210550400](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    if (a1)
    {
      swift_retain();
      PassthroughSubject.send(_:)();
      swift_release();
    }
    else
    {
      id v6 = objc_msgSend(v4, sel_undoManager);
      if (v6)
      {
        id v7 = v6;
        if (objc_msgSend(v6, sel_canUndo)) {
          objc_msgSend(v7, sel_undo);
        }
      }
    }
  }
}

uint64_t closure #2 in PaperDocumentViewController.setupDocumentView(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v2);
  if (result)
  {
    uint64_t v4 = (void *)result;
    swift_retain();

    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t PaperDocumentViewController.setUpObservers()()
{
  swift_getObjectType();
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v1) {
    goto LABEL_8;
  }
  uint64_t v2 = (id *)(*v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v2) {
    goto LABEL_8;
  }
  id v3 = *v2;
  id v4 = objc_msgSend(v3, sel_documentScrollView);
  if (!v4)
  {

LABEL_8:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v5 = v4;
  id v6 = self;
  id v7 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v7, sel_addObserver_selector_name_object_, v0, sel_pageDidChange_, *MEMORY[0x263F148C8], v3);

  id v8 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v8, sel_addObserver_selector_name_object_, v0, sel_pageWillScroll_, *MEMORY[0x263F148A8], v5);

  id v9 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v9, sel_addObserver_selector_name_object_, v0, sel_pageDidScroll_, *MEMORY[0x263F148A0], v5);

  uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_scrollViewObserver);
  swift_unknownObjectWeakAssign();
  uint64_t v11 = (void *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
  swift_beginAccess();
  if (*v11)
  {
    id v12 = objc_msgSend(*(id *)(*v11 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_collectionView);
    objc_msgSend(v12, sel__addScrollViewScrollObserver_, v10);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_20C832C20;
  uint64_t v14 = type metadata accessor for UITraitUserInterfaceStyle();
  uint64_t v15 = MEMORY[0x263F81EF0];
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v15;
  UIViewController.registerForTraitChanges<A>(_:handler:)();

  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

void PaperDocumentViewController.pageDidChange(_:)(void *a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v3) {
    return;
  }
  id v4 = (id *)(*v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v4) {
    return;
  }
  id v5 = *v4;
  if (objc_msgSend(a1, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
    goto LABEL_12;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PDFView);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:

    return;
  }
  id v6 = v5;
  id v7 = v9;
  char v8 = static NSObject.== infix(_:_:)();

  if (v8) {
    PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(0);
  }
}

void PaperDocumentViewController.pageWillScroll(_:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = &v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
  swift_beginAccess();
  if (*(void *)v4)
  {
    id v5 = (id *)(*(void *)v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (!*v5)
    {
      __break(1u);
      return;
    }
    id v6 = objc_msgSend(*v5, sel_documentScrollView);
    if (v6)
    {
      id v7 = v6;
      if (objc_msgSend(a1, sel_object))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v16, 0, sizeof(v16));
      }
      outlined init with take of Any?((uint64_t)v16, (uint64_t)v17);
      if (v18)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScrollView);
        if (swift_dynamicCast())
        {
          id v8 = v7;
          id v9 = v15;
          char v10 = static NSObject.== infix(_:_:)();

          if ((v10 & 1) == 0) {
            goto LABEL_13;
          }
          PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(0);
          uint64_t v11 = &v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility];
          swift_beginAccess();
          if (*v11 != 1) {
            goto LABEL_13;
          }
          id v12 = objc_msgSend(v2, sel_traitCollection);
          id v13 = objc_msgSend(v12, sel_horizontalSizeClass);

          if (v13 == (id)1
            && (uint64_t v14 = &v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed],
                swift_beginAccess(),
                *v14 != 1))
          {
            *uint64_t v14 = 1;
            PaperDocumentViewController.isThumbnailViewCollapsed.didset(0);
          }
          else
          {
LABEL_13:
          }
          return;
        }
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
      }
    }
  }
}

Swift::Void __swiftcall PaperDocumentViewController.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  uint64_t v2 = v1;
  Class isa = a1.value.super.isa;
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for PaperDocumentViewController(0);
  objc_msgSendSuper2(&v17, sel_traitCollectionDidChange_, isa);
  id v4 = (id *)&v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
  swift_beginAccess();
  if (*v4)
  {
    id v5 = (char *)*v4;
    id v6 = objc_msgSend(v2, sel_traitCollection);
    double v7 = PaperDocumentThumbnailView.defaultThumbnailWidth(for:)(v6);

    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint], sel_setConstant_, v7);
    id v8 = objc_msgSend(v2, sel_traitCollection);
    CGSize v9 = PaperDocumentThumbnailView.defaultThumbnailViewCellSize(for:)((UITraitCollection)v8);

    uint64_t v10 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
    objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView], sel_thumbnailSize);
    BOOL v14 = vabdd_f64(v9.width, v11) < 1.0;
    double v13 = vabdd_f64(v9.height, v12);
    BOOL v14 = v14 && v13 < 1.0;
    if (!v14) {
      objc_msgSend(*(id *)&v5[v10], sel_setThumbnailSize_, v9.width, v9.height);
    }
  }
  id v15 = objc_msgSend(v2, sel_view);
  if (v15)
  {
    id v16 = v15;
    objc_msgSend(v15, sel_setNeedsUpdateConstraints);
  }
  else
  {
    __break(1u);
  }
}

void PaperDocumentViewController.requirePasswordIfNeeded(completion:)(void (*a1)(void), uint64_t a2)
{
  id v3 = v2;
  uint64_t v31 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v5 - 8);
  double v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  BOOL v14 = (char *)&v30 - v13;
  uint64_t v15 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest;
  if ((v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest] & 1) == 0)
  {
    id v16 = (void **)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    objc_super v17 = (char *)*v16;
    if (*v16)
    {
      v3[v15] = 1;
      uint64_t v18 = (uint64_t)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestDate];
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v18, (uint64_t)v7, &demangling cache variable for type metadata for Date?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        id v19 = v17;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Date?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
        CGFloat v30 = v17;
        static Date.now.getter();
        Date.timeIntervalSince(_:)();
        double v21 = v20;
        double v22 = *(void (**)(char *, uint64_t))(v9 + 8);
        v22(v11, v8);
        if (v21 < 0.1)
        {
          if (a1)
          {
            a1(v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestSucceeded]);

            v22(v14, v8);
          }
          else
          {
            v22(v14, v8);
          }
          goto LABEL_10;
        }
        v22(v14, v8);
      }
      id v23 = *(id *)&v17[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument];
      id v24 = objc_msgSend(v23, sel_permissionsStatus);
      id v25 = objc_msgSend(v3, sel_firstResponder);
      uint64_t v26 = swift_allocObject();
      swift_unknownObjectWeakInit();
      double v27 = (void *)swift_allocObject();
      v27[2] = v26;
      v27[3] = v24;
      void v27[4] = v25;
      void v27[5] = a1;
      v27[6] = v31;
      aBlock[4] = partial apply for closure #1 in PaperDocumentViewController.requirePasswordIfNeeded(completion:);
      aBlock[5] = v27;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
      aBlock[3] = &block_descriptor_169_0;
      double v28 = _Block_copy(aBlock);
      id v29 = v25;
      outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?((uint64_t)a1);
      swift_release();
      objc_msgSend(v23, sel_requirePasswordsIfNeededUsingPresentingViewController_completion_, v3, v28);

      _Block_release(v28);
LABEL_10:
      v3[v15] = 0;
    }
  }
}

void closure #1 in PaperDocumentViewController.requirePasswordIfNeeded(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(BOOL))
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x210550400](a2 + 16);
  if (v13)
  {
    BOOL v14 = (unsigned char *)v13;
    uint64_t v15 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest;
    *(unsigned char *)(v13 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest) = 1;
    static Date.now.getter();
    uint64_t v16 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 0, 1, v16);
    uint64_t v17 = (uint64_t)&v14[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestDate];
    swift_beginAccess();
    outlined assign with take of Date?((uint64_t)v12, v17, &demangling cache variable for type metadata for Date?);
    swift_endAccess();
    v14[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestSucceeded] = a1 != 1;
    if (a1 != 2)
    {
      if (!a1)
      {
        id v18 = objc_msgSend(v14, sel_undoManager);
        if (v18)
        {
          id v19 = v18;
          if (objc_msgSend(v18, sel_canUndo) && a3 == 1)
          {
            objc_msgSend(v19, sel_undo);
            objc_msgSend(v19, sel_redo);
          }
        }
      }
      objc_msgSend(a4, sel_becomeFirstResponder);
    }
    if (a5) {
      a5(a1 != 1);
    }
    v14[v15] = 0;
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ()(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

Swift::Void __swiftcall PaperDocumentViewController.updatePlusButton()()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode];
  swift_beginAccess();
  int v3 = *v2;
  id v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton];
  if (v3 == 1)
  {
    id v5 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton], sel_superview);

    if (v5) {
      objc_msgSend(v4, sel_removeFromSuperview);
    }
    id v6 = objc_msgSend(v1, sel_view);
    if (v6)
    {
      double v7 = v6;
      objc_msgSend(v6, sel_addSubview_, v4);

      uint64_t v8 = (UIView *)objc_msgSend(v1, sel_view);
      if (v8)
      {
        uint64_t v9 = v8;
        FormPlusButtonView.setConstraintsBasedOn(_:)(v8);

        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        swift_retain();
        FormPlusButtonView.setMenuWithActions(addTextBoxHandler:addSignatureHandler:)();
        swift_release_n();
        swift_release_n();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton], sel_removeFromSuperview);
  }
}

void closure #1 in PaperDocumentViewController.updatePlusButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v2);
  if (v3)
  {
    id v4 = (void *)v3;
    id v5 = (void *)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (!*v5)
    {
LABEL_18:

      return;
    }
    uint64_t v6 = *(void *)(*v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
    if (v6)
    {
      double v7 = *(char **)(v6 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
      uint64_t v8 = &v7[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
      if (!MEMORY[0x210550400](&v7[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate])) {
        goto LABEL_18;
      }
      uint64_t v9 = *((void *)v8 + 1);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
      uint64_t v12 = v7;
      uint64_t v13 = (void *)v11(ObjectType, v9);

      swift_unknownObjectRelease();
      if (!v13) {
        goto LABEL_18;
      }
      if (!*v5
        || (BOOL v14 = (id *)(*v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView), swift_beginAccess(), !*v14))
      {
        uint64_t v44 = v13;
LABEL_17:

        goto LABEL_18;
      }
      id v15 = *v14;
      objc_msgSend(v15, sel_frame);
      CGFloat x = v67.origin.x;
      CGFloat y = v67.origin.y;
      CGFloat width = v67.size.width;
      CGFloat height = v67.size.height;
      double MidX = CGRectGetMidX(v67);
      v68.origin.CGFloat x = x;
      v68.origin.CGFloat y = y;
      v68.size.CGFloat width = width;
      v68.size.CGFloat height = height;
      double MidY = CGRectGetMidY(v68);
      if (one-time initialization token for defaultFormFieldSize != -1)
      {
        double v63 = MidY;
        swift_once();
        double MidY = v63;
      }
      long long v22 = static FormFillingView.defaultFormFieldSize;
      double v23 = MidX - *(double *)&static FormFillingView.defaultFormFieldSize * 0.5;
      double v24 = MidY - *((double *)&static FormFillingView.defaultFormFieldSize + 1) * 0.5;
      id v65 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x2F8);
      id v25 = (void *)v65();
      id v64 = v15;
      objc_msgSend(v25, sel_convertRect_fromCoordinateSpace_, v15, v23, v24, v22);
      CGFloat v27 = v26;
      CGFloat v29 = v28;
      CGFloat v31 = v30;
      CGFloat v33 = v32;

      LOBYTE(v66) = 1;
      specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v13, 0, 0, 0, 0, 1, (unsigned __int8 *)&v66, 0x7FFFFFFFFFFFFFFFLL, v27, v29, v31, v33, 0, 0, 0xBu, 2u);
      id v35 = v34;
      id v36 = (void *)v65();
      uint64_t v38 = v37;
      uint64_t v39 = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20C835790;
      *(void *)(inited + 32) = v35;
      uint64_t v66 = inited;
      specialized Array._endMutation()();
      uint64_t v41 = v66;
      id v42 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 176);
      id v43 = v35;
      v42(v41, 0, v39, v38);
      swift_bridgeObjectRelease();

      uint64_t v44 = v43;
      uint64_t v45 = specialized CanvasMembers.init(_:)(v44);
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      LOBYTE(v39) = v50;

      AnyCanvas.selection.setter(v45, v47, v49, v39 & 1);
      id v51 = (void *)v65();
      uint64_t v53 = v52;
      uint64_t v54 = swift_getObjectType();
      CGAffineTransform v55 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v53 + 144))(v54, v53);

      if (!v55)
      {
LABEL_13:
        uint64_t v61 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v44) + 0x2D0))(v56);
        if (v61)
        {
          id v62 = (void *)v61;
          swift_retain();

          FormTextFieldAnalytics.recordEvent()();
          swift_release();
        }

        id v4 = v64;
        goto LABEL_17;
      }
      uint64_t v57 = *(void *)&v55[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
      swift_retain();

      uint64_t v58 = *(void *)(v57 + 48);
      BOOL v59 = __OFADD__(v58, 1);
      uint64_t v60 = v58 + 1;
      if (!v59)
      {
        *(void *)(v57 + 48) = v60;
        uint64_t v56 = swift_release();
        goto LABEL_13;
      }
      __break(1u);
    }
    __break(1u);
  }
}

void closure #2 in PaperDocumentViewController.updatePlusButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v2);
  if (v3)
  {
    id v4 = (char *)v3;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v5 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton];
    id v6 = v5;
    objc_msgSend(v6, sel_bounds);
    CGFloat v8 = v7;
    CGFloat v10 = v9;
    CGFloat v12 = v11;
    CGFloat v14 = v13;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v4;
    uint64_t v16 = v4;
    specialized SignatureManager.showSignatures(_:_:_:_:)(v16, v5, (uint64_t)partial apply for closure #1 in closure #2 in PaperDocumentViewController.updatePlusButton(), v15, v8, v10, v12, v14);
    swift_release();
  }
}

void closure #1 in closure #2 in PaperDocumentViewController.updatePlusButton()(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = (void *)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (*v3)
    {
      uint64_t v4 = *(void *)(*v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
      if (v4)
      {
        id v5 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
        id v6 = a1;
        id v7 = v5;
        specialized ToolPickerControllerDelegate.addNewSignatureItem(_:)(a1);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

id @objc PaperDocumentViewController.canBecomeFirstResponder.getter(char *a1, uint64_t a2, SEL *a3)
{
  id v5 = (id *)&a1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
  swift_beginAccess();
  if (*v5) {
    return [*v5 *a3];
  }
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for PaperDocumentViewController(0);
  return objc_msgSendSuper2(&v7, *a3);
}

void PaperDocumentViewController.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for PaperDocumentViewController(0);
  objc_msgSendSuper2(&v13, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  objc_super v7 = &v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
  swift_beginAccess();
  if (!*(void *)v7) {
    goto LABEL_4;
  }
  CGFloat v8 = (id *)(*(void *)v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (*v8)
  {
    objc_msgSend(*v8, sel_beginPDFViewRotation);
LABEL_4:
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v3;
    v12[4] = partial apply for closure #1 in PaperDocumentViewController.viewWillTransition(to:with:);
    v12[5] = v9;
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 1107296256;
    v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v12[3] = &block_descriptor_19;
    CGFloat v10 = _Block_copy(v12);
    double v11 = v3;
    swift_release();
    objc_msgSend(a1, sel_animateAlongsideTransition_completion_, v10, 0);
    _Block_release(v10);
    return;
  }
  __break(1u);
}

id closure #1 in PaperDocumentViewController.viewWillTransition(to:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  id result = (id)swift_beginAccess();
  if (*v2)
  {
    uint64_t v4 = (id *)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    id result = *v4;
    if (*v4) {
      return objc_msgSend(result, sel_endPDFViewRotation);
    }
    else {
      __break(1u);
    }
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall PaperDocumentViewController.revertAllChanges()()
{
}

void PaperDocumentViewController.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_super v7 = (void **)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  CGFloat v8 = *v7;
  if (*v7)
  {
    unsigned __int8 v10 = 3;
    id v9 = v8;
    PaperDocumentView.merge<A>(_:from:page:)(a1, &v10, 0, a2, a3);
  }
}

void PaperDocumentViewController.merge<A>(_:forward:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  id v9 = (id *)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v9)
  {
    id v10 = *v9;
    PaperDocumentView.merge<A>(_:forward:)(a1, a2 & 1, a3, a4);
  }
}

uint64_t PaperDocumentViewController.publisher.getter()
{
  return PaperDocumentViewController.publisher.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject);
}

uint64_t PaperDocumentViewController.livePublisher.getter()
{
  return PaperDocumentViewController.publisher.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_livePassThroughSubject);
}

uint64_t PaperDocumentViewController.publisher.getter(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<Capsule<PaperDocument>, Never>>);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  swift_retain();
  return v3;
}

uint64_t PaperDocumentViewController.liveStreamMessenger.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger);
}

uint64_t PaperDocumentViewController.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, PaperDocumentView.liveStreamMessenger.didset);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentViewController.liveStreamMessenger.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger;
  v3[6] = v1;
  v3[7] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentViewController.liveStreamMessenger.modify;
}

void PaperDocumentViewController.liveStreamMessenger.modify(uint64_t a1, char a2)
{
}

uint64_t PaperDocumentViewController.participantDetailsDataSource.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource);
}

uint64_t PaperDocumentViewController.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, PaperDocumentView.participantDetailsDataSource.didset);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentViewController.participantDetailsDataSource.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource;
  v3[6] = v1;
  v3[7] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentViewController.participantDetailsDataSource.modify;
}

void PaperDocumentViewController.participantDetailsDataSource.modify(uint64_t a1, char a2)
{
}

void PaperDocumentViewController.pageOverlayViewProvider.modify(uint64_t a1, char a2, void *a3, void (*a4)(void))
{
  uint64_t v7 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 48) + *(void *)(*(void *)a1 + 56) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    uint64_t v8 = v7[6];
    swift_endAccess();
    swift_unknownObjectRelease();
    id v9 = (void **)(v8 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    id v10 = (char *)*v9;
    if (*v9)
    {
      uint64_t v11 = v7[6] + v7[7];
      MEMORY[0x210550400](v11);
      uint64_t v12 = *(void *)(v11 + 8);
      objc_super v13 = &v10[*a3];
      swift_beginAccess();
      *((void *)v13 + 1) = v12;
      swift_unknownObjectWeakAssign();
      CGFloat v14 = v10;
      a4();
      swift_unknownObjectRelease();
    }
  }
  free(v7);
}

Swift::Void __swiftcall PaperDocumentViewController.participantDetailsDidChange()()
{
}

void PaperDocumentViewController.revertAllChanges()(void (*a1)(void))
{
  uint64_t v3 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v3)
  {
    id v4 = *v3;
    a1();
  }
}

void key path setter for PaperDocumentViewController.showParticipantCursors : PaperDocumentViewController(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  id v4 = (char *)(*a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *id v4 = v2;
  uint64_t v5 = (void **)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  uint64_t v6 = (char *)*v5;
  if (*v5)
  {
    uint64_t v7 = &v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *uint64_t v7 = v2;
    uint64_t v8 = v6;
    PaperDocumentView.showParticipantCursors.didset();
  }
}

uint64_t PaperDocumentViewController.showParticipantCursors.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void PaperDocumentViewController.showParticipantCursors.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *uint64_t v3 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  uint64_t v5 = (char *)*v4;
  if (v5)
  {
    char v6 = a1 & 1;
    uint64_t v7 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *uint64_t v7 = v6;
    uint64_t v8 = v5;
    PaperDocumentView.showParticipantCursors.didset();
  }
}

void (*PaperDocumentViewController.showParticipantCursors.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return PaperDocumentViewController.showParticipantCursors.modify;
}

void PaperDocumentViewController.showParticipantCursors.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = (void **)(v3[6] + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    uint64_t v5 = (char *)*v4;
    if (*v4)
    {
      char v6 = *(unsigned char *)(v3[6] + v3[7]);
      uint64_t v7 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
      swift_beginAccess();
      *uint64_t v7 = v6;
      uint64_t v8 = v5;
      PaperDocumentView.showParticipantCursors.didset();
    }
  }
  free(v3);
}

uint64_t key path setter for PaperDocumentViewController.delegate : PaperDocumentViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = swift_unknownObjectRetain();
  a5(v7, v6);
  return swift_unknownObjectRelease();
}

uint64_t PaperDocumentViewController.textualContextProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider);
}

uint64_t PaperDocumentViewController.delegate.getter(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  return MEMORY[0x210550400](v2);
}

uint64_t PaperDocumentViewController.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.textualContextProvider.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentViewController.textualContextProvider.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider;
  v3[6] = v1;
  v3[7] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentViewController.textualContextProvider.modify;
}

void PaperDocumentViewController.textualContextProvider.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 48) + *(void *)(*(void *)a1 + 56) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    uint64_t v4 = v3[6];
    swift_endAccess();
    swift_unknownObjectRelease();
    uint64_t v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    uint64_t v6 = *v5;
    if (*v5)
    {
      uint64_t v7 = v3[6] + v3[7];
      MEMORY[0x210550400](v7);
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t v9 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
      swift_beginAccess();
      *(void *)(v9 + 8) = v8;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
    }
  }
  free(v3);
}

void *PaperDocumentViewController.viewControllerForPresentingUI.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void PaperDocumentViewController.viewControllerForPresentingUI.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*PaperDocumentViewController.viewControllerForPresentingUI.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

void specialized ToolPickerControllerDelegate.addNewSignatureItem(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v75 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v8 = *(void **)(v7 - 8);
  uint64_t v9 = v8[8];
  MEMORY[0x270FA5388](v7);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v67 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v67 - v15;
  if (!a1) {
    return;
  }
  id v71 = v14;
  uint64_t v69 = ObjectType;
  id v17 = a1;
  double v18 = SignatureItem.size.getter();
  double v20 = 400.0 / v18;
  if (400.0 / v18 > 1.0) {
    double v20 = 1.0;
  }
  double v21 = v18 * v20;
  double v22 = v19 * v20;
  double v23 = 72.0 / v22;
  if (72.0 / v22 > 1.0) {
    double v23 = 1.0;
  }
  double v24 = v21 * v23;
  double v25 = v22 * v23;
  uint64_t v70 = v2;
  uint64_t v26 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v26))
  {
    uint64_t v27 = *(void *)(v26 + 8);
    uint64_t v28 = swift_getObjectType();
    CGFloat v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 16))(v28, v27);
    swift_unknownObjectRelease();
    if (v29)
    {
      id v30 = objc_msgSend(v29, sel_window);
      if (v30)
      {
        CGFloat v31 = v30;
        id v32 = objc_msgSend(v30, sel_screen);

        objc_msgSend(v32, sel_scale);
        double v34 = v33;
      }
      else
      {
        double v34 = 1.0;
      }
      double v35 = AnyCanvas.scaleFactorForNewElements.getter();

      double v36 = v34 * (v24 * v35);
      double v37 = v34 * (v25 * v35);
      double v38 = floor(v36);
      double v39 = v36 - v38;
      double v40 = ceil(v36);
      if (v39 < 0.49) {
        double v40 = v38;
      }
      double v41 = floor(v37);
      double v42 = v37 - v41;
      double v43 = ceil(v37);
      if (v42 < 0.49) {
        double v43 = v41;
      }
      double v24 = v40 / v34;
      double v25 = v43 / v34;
    }
  }
  uint64_t v44 = MEMORY[0x210550400](v26);
  double v45 = 0.0;
  uint64_t v74 = v26;
  if (v44)
  {
    uint64_t v46 = *(void *)(v26 + 8);
    uint64_t v47 = swift_getObjectType();
    uint64_t v48 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v46 + 16))(v47, v46);
    uint64_t v49 = swift_unknownObjectRelease();
    double v50 = 0.0;
    uint64_t v51 = 0;
    if (v48)
    {
      double v45 = (*(double (**)(uint64_t, double, double))((*MEMORY[0x263F8EED0] & *v48) + 0x6D0))(v49, v24, v25);
      double v50 = v52;
      uint64_t v51 = v53;
    }
  }
  else
  {
    double v50 = 0.0;
    uint64_t v51 = 0;
  }
  type metadata accessor for SignatureManager();
  swift_initStaticObject();
  id v73 = v17;
  uint64_t v54 = SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)((uint64_t)v17, 0, 1, 0, 1, v45, v50);
  MEMORY[0x270FA5388](v54);
  *((double *)&v67 - 6) = v45 - v24 * 0.5;
  *((double *)&v67 - 5) = v50 - v25 * 0.5;
  *((double *)&v67 - 4) = v24;
  *((double *)&v67 - 3) = v25;
  *(&v67 - 2) = v51;
  Capsule.callAsFunction<A>(_:)();
  id v72 = (void (*)(char *, char *, uint64_t))v8[2];
  v72(v12, v16, v7);
  swift_getKeyPath();
  lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  Capsule<>.subscript.getter();
  swift_release();
  CGRect v68 = v8;
  double v76 = (void (*)(char *, uint64_t))v8[1];
  v76(v12, v7);
  if (v78 == 1)
  {
    CGAffineTransform v55 = v71;
    v72(v71, v16, v7);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v76(v55, v7);
    uint64_t v56 = v77;
    if (v77)
    {
      uint64_t v57 = v75;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v77 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, v75, &demangling cache variable for type metadata for PKDrawing?);

      uint64_t v58 = type metadata accessor for PKDrawing();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48))(v57, 1, v58) != 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for PKDrawing?);
        Capsule.callAsFunction<A>(_:)();
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v59 = type metadata accessor for PKDrawing();
      uint64_t v57 = v75;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v75, 1, 1, v59);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for PKDrawing?);
  }
LABEL_26:
  uint64_t v60 = v74;
  if (MEMORY[0x210550400](v74)
    && (uint64_t v61 = *(void *)(v60 + 8),
        uint64_t v62 = swift_getObjectType(),
        id v63 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v61 + 16))(v62, v61),
        swift_unknownObjectRelease(),
        v63))
  {
    AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
    v72(v12, v16, v7);
    id v64 = v68;
    unint64_t v65 = (*((unsigned __int8 *)v68 + 80) + 16) & ~(unint64_t)*((unsigned __int8 *)v68 + 80);
    uint64_t v66 = swift_allocObject();
    ((void (*)(unint64_t, char *, uint64_t))v64[4])(v66 + v65, v12, v7);
    *(void *)(v66 + ((v9 + v65 + 7) & 0xFFFFFFFFFFFFFFF8)) = v69;
    CanvasElementController.visibleCanvasInsertIfNeeded(completion:)((uint64_t (*)(void *))partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:), v66);

    swift_release();
  }
  else
  {
    id v63 = v73;
  }

  v76(v16, v7);
}

Swift::Void __swiftcall PaperDocumentViewController.rotateCurrentPage(left:)(Swift::Bool left)
{
  BOOL v23 = left;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = &v22[-v10];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v16);
  double v18 = &v22[-v17];
  double v19 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v19)
  {
    double v20 = (char *)*v19;
    PaperDocumentView.currentPage.getter((uint64_t)v11);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32))(v18, v11, v12);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 16))(v15, v18, v12);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      SharedTagged_3.init(_:)();
      if (v20[OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing] == 1)
      {
        if (objc_msgSend(*(id *)&v20[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument], sel_allowsDocumentAssembly))
        {
          uint64_t v21 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, 1, 1, v12);
          MEMORY[0x270FA5388](v21);
          *(void *)&v22[-32] = v20;
          *(void *)&v22[-24] = v5;
          v22[-16] = v23;
          specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(1, 0, (uint64_t)v8, (void (*)(uint64_t))partial apply for closure #1 in PaperDocumentView.rotatePage(_:left:));
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        }
      }

      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
      (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v18, v12);
    }
  }
}

Swift::Void __swiftcall PaperDocumentViewController.toolPickerSelectedToolDidChange(_:)(PKToolPicker a1)
{
  uint64_t v3 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v3)
  {
    id v4 = *v3;
    PaperDocumentView.updateTiledViewInk(for:)(a1.super.isa);
  }
  else
  {
    id v4 = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker);
    *(PKToolPicker *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker) = a1;
    uint64_t v5 = a1.super.isa;
  }
}

Swift::Void __swiftcall PaperDocumentViewController.toolPickerIsRulerActiveDidChange(_:)(PKToolPicker a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  id v4 = (char *)*v3;
  if (*v3)
  {
    uint64_t v5 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
    if (v5)
    {
      uint64_t v6 = v4;
      id v7 = v5;
      objc_msgSend(v7, sel_setRulerEnabled_, -[objc_class isRulerActive](a1.super.isa, sel_isRulerActive));
    }
    else
    {
      __break(1u);
    }
  }
}

id PaperDocumentViewController.pageLabelView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PageLabelView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v0, sel_pageLabelViewTapped_);
    objc_msgSend(v4, sel_addGestureRecognizer_, v5);

    uint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

void PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(char a1)
{
  id v3 = v1;
  id v5 = (void **)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView];
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*v5)
  {
    id v7 = (void **)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    uint64_t v8 = (char *)*v7;
    if (*v7)
    {
      uint64_t v9 = (void **)&v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
      swift_beginAccess();
      uint64_t v10 = *v9;
      if (v10)
      {
        id v11 = v6;
        uint64_t v12 = v8;
        uint64_t v13 = v10;
        id v14 = [(UIView *)v13 currentPage];
        if (!v14)
        {
LABEL_42:

          return;
        }
        uint64_t v15 = v14;
        id v80 = v11;
        uint64_t v79 = v12;
        id v16 = *(id *)&v12[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument];
        id v17 = objc_msgSend(v16, sel_pageCount);
        with_8 = v16;
        p_class_meths = (__objc2_meth_list **)objc_msgSend(v16, sel_indexForPage_, v15);
        if (one-time initialization token for paperKitBundle != -1) {
          swift_once();
        }
        v84._unint64_t object = (void *)0x800000020C8547E0;
        v19._uint64_t countAndFlagsBits = 0x2520666F20756C25;
        v19._unint64_t object = (void *)0xEA0000000000756CLL;
        v20.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
        v20.value._unint64_t object = (void *)0xEB00000000656C62;
        v21._uint64_t countAndFlagsBits = 0;
        v21._unint64_t object = (void *)0xE000000000000000;
        v84._uint64_t countAndFlagsBits = 0xD000000000000024;
        Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v84);
        uint64_t countAndFlagsBits = v22._countAndFlagsBits;
        unint64_t object = (NSLayoutYAxisAnchor *)v22._object;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_20C835740;
        if (__OFADD__(p_class_meths, 1))
        {
          __break(1u);
        }
        else
        {
          uint64_t v26 = MEMORY[0x263F8D6C8];
          uint64_t v27 = MEMORY[0x263F8D750];
          *(void *)(v25 + 56) = MEMORY[0x263F8D6C8];
          *(void *)(v25 + 64) = v27;
          *(void *)(v25 + 32) = (char *)p_class_meths + 1;
          *(void *)(v25 + 96) = v26;
          *(void *)(v25 + 104) = v27;
          *(void *)(v25 + 72) = v17;
          uint64_t with = static String.localizedStringWithFormat(_:_:)();
          CGFloat v29 = v28;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v30 = PaperDocumentViewController.pageLabelView.getter();
          id v31 = objc_msgSend(v30, sel_superview);

          p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___UIAdaptivePresentationControllerDelegate + 32);
          uint64_t countAndFlagsBits = 0x2676CA000;
          if (!v31) {
            goto LABEL_10;
          }
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
          id v32 = v13;
          char v76 = a1;
          double v33 = v29;
          id v34 = v31;
          char v35 = static NSObject.== infix(_:_:)();

          uint64_t countAndFlagsBits = (uint64_t)&OBJC_PROTOCOL___UIAdaptivePresentationControllerDelegate.class_meths;
          p_class_meths = &OBJC_PROTOCOL___UIAdaptivePresentationControllerDelegate.class_meths;

          CGFloat v29 = v33;
          a1 = v76;
          if ((v35 & 1) == 0)
          {
LABEL_10:
            uint64_t v36 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint;
            double v37 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint];
            if (v37)
            {
              objc_msgSend(v37, sel_setActive_, 0);
              double v38 = *(void **)&v3[v36];
            }
            else
            {
              double v38 = 0;
            }
            *(void *)&v3[v36] = 0;

            double v39 = p_class_meths[242];
            double v40 = *(void **)((char *)v39 + (void)v3);
            if (v40)
            {
              objc_msgSend(v40, sel_setActive_, 0);
              double v41 = *(void **)((char *)v39 + (void)v3);
            }
            else
            {
              double v41 = 0;
            }
            *(__objc2_meth_list *)((char *)v39 + (void)v3) = 0;

            uint64_t v42 = *(void *)(countAndFlagsBits + 1944);
            double v43 = *(void **)&v3[v42];
            if (v43)
            {
              objc_msgSend(v43, sel_setActive_, 0);
              uint64_t v44 = *(void **)&v3[v42];
            }
            else
            {
              uint64_t v44 = 0;
            }
            *(void *)&v3[v42] = 0;
          }
          if (a1)
          {
            double v45 = self;
            uint64_t v46 = swift_allocObject();
            swift_unknownObjectWeakInit();
            uint64_t v47 = (void *)swift_allocObject();
            v47[2] = v46;
            v47[3] = v13;
            v47[4] = with;
            v47[5] = v29;
            aBlock[4] = partial apply for closure #1 in PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:);
            aBlock[5] = v47;
            aBlock[0] = MEMORY[0x263EF8330];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            aBlock[3] = &block_descriptor_194;
            uint64_t v48 = _Block_copy(aBlock);
            uint64_t v49 = v13;
            swift_release();
            objc_msgSend(v45, sel_animateWithDuration_animations_, v48, 0.3);
            _Block_release(v48);
          }
          else
          {
            id v50 = PaperDocumentViewController.pageLabelView.getter();
            v51._uint64_t countAndFlagsBits = with;
            v51._unint64_t object = v29;
            PageLabelView.showNow(in:with:)(v13, v51);
            swift_bridgeObjectRelease();
          }
          uint64_t v2 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint;
          if (*(void *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint]) {
            goto LABEL_26;
          }
          id v52 = PaperDocumentViewController.pageLabelView.getter();
          id v17 = objc_msgSend(v52, sel_topAnchor);

          uint64_t v53 = [(UIView *)v13 safeAreaLayoutGuide];
          unint64_t object = [(UILayoutGuide *)v53 topAnchor];

          if (one-time initialization token for pageLabelViewTopOffset == -1)
          {
LABEL_25:
            id v54 = objc_msgSend(v17, sel_constraintGreaterThanOrEqualToAnchor_constant_, object, *(double *)&static UIConstants.pageLabelViewTopOffset);

            CGAffineTransform v55 = *(void **)&v3[v2];
            *(void *)&v3[v2] = v54;
            id v56 = v54;

            type metadata accessor for UILayoutPriority(0);
            int v82 = 1120403456;
            int v83 = 1148846080;
            lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority((unint64_t *)&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, type metadata accessor for UILayoutPriority);
            static _UIKitNumericRawRepresentable.- infix(_:_:)();
            LODWORD(v57) = aBlock[0];
            objc_msgSend(v56, sel_setPriority_, v57);

LABEL_26:
            uint64_t v58 = p_class_meths[242];
            if (!*(void *)((char *)v58 + (void)v3))
            {
              id v59 = PaperDocumentViewController.pageLabelView.getter();
              id v60 = objc_msgSend(v59, sel_leadingAnchor);

              id v61 = objc_msgSend(v80, sel_trailingAnchor);
              if (one-time initialization token for pageLabelViewLeftOffset != -1) {
                swift_once();
              }
              id v62 = objc_msgSend(v60, sel_constraintGreaterThanOrEqualToAnchor_constant_, v61, *(double *)&static UIConstants.pageLabelViewLeftOffset);

              id v63 = *(void **)((char *)v58 + (void)v3);
              *(__objc2_meth_list *)((char *)v58 + (void)v3) = (__objc2_meth_list)v62;
            }
            uint64_t v64 = *(void *)(countAndFlagsBits + 1944);
            if (!*(void *)&v3[v64])
            {
              id v65 = PaperDocumentViewController.pageLabelView.getter();
              id v66 = objc_msgSend(v65, sel_leadingAnchor);

              id v67 = objc_msgSend(v79, sel_safeAreaLayoutGuide);
              id v68 = objc_msgSend(v67, sel_leadingAnchor);

              if (one-time initialization token for pageLabelViewLeftOffset != -1) {
                swift_once();
              }
              id v69 = objc_msgSend(v66, sel_constraintGreaterThanOrEqualToAnchor_constant_, v68, *(double *)&static UIConstants.pageLabelViewLeftOffset);

              uint64_t v70 = *(void **)&v3[v64];
              *(void *)&v3[v64] = v69;
            }
            id v71 = *(void **)&v3[v2];
            if (v71) {
              objc_msgSend(v71, sel_setActive_, 1);
            }
            id v72 = *(void **)((char *)v58 + (void)v3);
            uint64_t v12 = v79;
            id v11 = v80;
            if (v72) {
              objc_msgSend(v72, sel_setActive_, 1);
            }
            id v73 = *(void **)&v3[v64];
            if (v73) {
              objc_msgSend(v73, sel_setActive_, 1);
            }
            PaperDocumentViewController.constraintPageLabelViewToBannerIfNeeded()();
            uint64_t v74 = (UIView *)objc_msgSend(v3, sel_view);
            if (!v74)
            {
              __break(1u);
              return;
            }
            uint64_t v75 = v74;
            [(UIView *)v74 setNeedsLayout];

            uint64_t v13 = v75;
            goto LABEL_42;
          }
        }
        swift_once();
        goto LABEL_25;
      }
    }
  }
}

void closure #1 in PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(uint64_t a1, UIView *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x210550400](v7);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    id v10 = PaperDocumentViewController.pageLabelView.getter();

    v11._uint64_t countAndFlagsBits = a3;
    v11._unint64_t object = a4;
    PageLabelView.showNow(in:with:)(a2, v11);
  }
}

void PaperDocumentViewController.constraintPageLabelViewToBannerIfNeeded()()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToBannerBottomConstraint;
  id v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToBannerBottomConstraint];
  if (v3)
  {
    objc_msgSend(v3, sel_setActive_, 0);
    id v4 = *(void **)&v0[v2];
  }
  else
  {
    id v4 = 0;
  }
  *(void *)&v0[v2] = 0;

  id v5 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView];
  if (!v5) {
    return;
  }
  id v6 = v5;
  id v7 = objc_msgSend(v6, sel_superview);

  if (v7)
  {
    id v8 = objc_msgSend(v6, sel_superview);
    id v9 = PaperDocumentViewController.pageLabelView.getter();
    id v22 = objc_msgSend(v9, sel_superview);

    if (v8)
    {
      if (!v22)
      {

        uint64_t v12 = v8;
        goto LABEL_20;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      id v10 = v8;
      char v11 = static NSObject.== infix(_:_:)();

      if ((v11 & 1) == 0) {
        goto LABEL_9;
      }
    }
    else if (v22)
    {
LABEL_18:

      uint64_t v12 = v22;
      goto LABEL_20;
    }
    id v13 = objc_msgSend(v1, sel_traitCollection);
    id v14 = objc_msgSend(v13, sel_horizontalSizeClass);

    if (v14 == (id)1
      || (id v15 = objc_msgSend(self, sel_currentDevice),
          id v16 = objc_msgSend(v15, sel_userInterfaceIdiom),
          v15,
          double v17 = 0.0,
          !v16))
    {
      if (one-time initialization token for pageLabelViewTopOffset != -1) {
        swift_once();
      }
      double v17 = *(double *)&static UIConstants.pageLabelViewTopOffset;
    }
    id v18 = PaperDocumentViewController.pageLabelView.getter();
    id v19 = objc_msgSend(v18, sel_topAnchor);

    id v20 = objc_msgSend(v6, sel_bottomAnchor);
    id v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v20, v17);

    objc_msgSend(v21, sel_setActive_, 1);
    id v22 = *(id *)&v1[v2];
    *(void *)&v1[v2] = v21;
    goto LABEL_18;
  }
LABEL_9:
  uint64_t v12 = v6;
LABEL_20:
}

void PaperDocumentViewController.pageLabelViewTapped(_:)()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  id v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v5 = (unsigned char *)(v0
               + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility);
  swift_beginAccess();
  if (*v5 == 1)
  {
    id v6 = (char *)(v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
    swift_beginAccess();
    char v7 = *v6;
    *v6 ^= 1u;
    PaperDocumentViewController.isThumbnailViewCollapsed.didset(v7);
    id v8 = (char *)PaperDocumentViewController.pageLabelView.getter();
    uint64_t v9 = OBJC_IVAR____TtC8PaperKit13PageLabelView_timer;
    id v10 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer];
    if (v10)
    {
      id v11 = v10;
      Date.init(timeIntervalSinceNow:)();
      v12.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
      objc_msgSend(v11, sel_setFireDate_, v12.super.isa);
    }
    else
    {
      id v13 = objc_msgSend(self, sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_, v8, sel_fadeOut, 0, 1, 2.0);
      v12.super.Class isa = *(Class *)&v8[v9];
      *(void *)&v8[v9] = v13;
    }
  }
}

id PaperDocumentViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x21054D080]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void PaperDocumentViewController.init(nibName:bundle:)()
{
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.textualContextProvider.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperDocumentViewController(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentViewController.textualContextProvider.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

void *protocol witness for PaperKitAttachment.viewControllerForPresentingUI.getter in conformance PaperDocumentViewController()
{
  uint64_t v1 = (void **)(*v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void protocol witness for PaperKitAttachment.viewControllerForPresentingUI.setter in conformance PaperDocumentViewController(void *a1)
{
  id v3 = (void **)(*v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
}

uint64_t (*protocol witness for PaperKitAttachment.viewControllerForPresentingUI.modify in conformance PaperDocumentViewController())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger);
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, PaperDocumentView.liveStreamMessenger.didset);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperDocumentViewController(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentViewController.liveStreamMessenger.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.getter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *v3 + *a3;
  swift_beginAccess();
  return MEMORY[0x210550400](v4);
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.setter in conformance PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentViewController.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, PaperDocumentView.participantDetailsDataSource.didset);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperDocumentViewController(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentViewController.participantDetailsDataSource.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

void protocol witness for PaperKitStreamableAttachment.participantDetailsDidChange() in conformance PaperDocumentViewController()
{
  uint64_t v1 = (id *)(*v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (*v1)
  {
    id v2 = *v1;
    PaperDocumentView.participantDetailsDidChange()();
  }
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.getter in conformance PaperDocumentViewController()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void protocol witness for PaperKitStreamableAttachment.showParticipantCursors.setter in conformance PaperDocumentViewController(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (unsigned char *)(*v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *uint64_t v4 = a1;
  id v5 = (void **)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  id v6 = (char *)*v5;
  if (v6)
  {
    char v7 = a1 & 1;
    id v8 = &v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *id v8 = v7;
    uint64_t v9 = v6;
    PaperDocumentView.showParticipantCursors.didset();
  }
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperDocumentViewController(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentViewController.showParticipantCursors.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

Swift::Void __swiftcall PaperDocumentViewController_ScrollViewObserver._observeScrollViewDidScroll(_:)(UIScrollView_optional *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit46PaperDocumentViewController_ScrollViewObserver_viewController;
  uint64_t v4 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit46PaperDocumentViewController_ScrollViewObserver_viewController);
  id v5 = (id)v4;
  if (v4)
  {
    id v6 = (void **)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
    swift_beginAccess();
    char v7 = *v6;
    id v8 = v7;

    if (!v7)
    {
      id v5 = 0;
      if (a1) {
        goto LABEL_5;
      }
LABEL_9:
      if (v5)
      {
LABEL_12:

        return;
      }
LABEL_10:
      uint64_t v12 = MEMORY[0x210550400](v3);
      if (!v12) {
        return;
      }
      id v5 = (id)v12;
      PaperDocumentViewController.notifyContentFrameDidChange()();
      goto LABEL_12;
    }
    id v9 = *(id *)&v8[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView];

    id v5 = objc_msgSend(v9, sel_collectionView);
  }
  if (!a1) {
    goto LABEL_9;
  }
LABEL_5:
  if (v5)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScrollView);
    id v10 = a1;
    char v11 = static NSObject.== infix(_:_:)();

    if (v11) {
      goto LABEL_10;
    }
  }
}

id PaperDocumentViewController_ScrollViewObserver.__deallocating_deinit(uint64_t a1)
{
  return PaperDocumentPasswordViewController.__deallocating_deinit(a1, type metadata accessor for PaperDocumentViewController_ScrollViewObserver);
}

id PaperDocumentPasswordViewController.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

Swift::Void __swiftcall PaperDocumentViewController.pageDidScroll(_:)(NSNotification_optional a1)
{
  Class isa = a1.value.super.isa;
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v3) {
    return;
  }
  objc_super v4 = (id *)(*v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v4)
  {
    __break(1u);
    goto LABEL_18;
  }
  id v5 = objc_msgSend(*v4, sel_documentScrollView);
  if (!v5) {
    return;
  }
  if (!isa)
  {
LABEL_18:
    __break(1u);
    return;
  }
  id v6 = v5;
  if ([(objc_class *)isa object])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  outlined init with take of Any?((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScrollView);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:

    return;
  }
  id v7 = v6;
  id v8 = v10;
  char v9 = static NSObject.== infix(_:_:)();

  if (v9) {
    PaperDocumentViewController.notifyContentFrameDidChange()();
  }
}

uint64_t PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(void *a1, void *a2, void *a3)
{
  id v62 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v9 - 8);
  char v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  id v14 = (char *)&v55 - v13;
  uint64_t v15 = type metadata accessor for CRAsset();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  id v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperDocumentPasswordViewController(0);
  uint64_t v19 = swift_dynamicCastClass();
  if (!v19) {
    return 0;
  }
  uint64_t v20 = v19;
  id v60 = v3;
  id v61 = a3;
  uint64_t v21 = OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_documentToUnlock;
  uint64_t v22 = *(void *)(v19 + OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_documentToUnlock);
  if (v22)
  {
    id v59 = v8;
    uint64_t v23 = v19 + OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_assetToUnlock;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v23, (uint64_t)v14, &demangling cache variable for type metadata for CRAsset?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for CRAsset?);
      return 0;
    }
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    double v24 = *(void **)(v20 + OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument);
    if (v24)
    {
      uint64_t v56 = OBJC_IVAR____TtC8PaperKit35PaperDocumentPasswordViewController_contextForLockedDocument;
      id v58 = a1;
      id v25 = (id)v22;
      id v57 = v24;
      uint64_t v26 = (void *)MEMORY[0x21054D080](v62, v61);
      unsigned __int8 v27 = objc_msgSend(v25, sel_unlockWithPassword_, v26);

      if (v27)
      {
        id v55 = v25;
        uint64_t v28 = *(void **)(v20 + v21);
        *(void *)(v20 + v21) = 0;

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v11, 1, 1, v15);
        swift_beginAccess();
        outlined assign with take of Date?((uint64_t)v11, v23, &demangling cache variable for type metadata for CRAsset?);
        swift_endAccess();
        CGFloat v29 = *(void **)(v20 + v56);
        *(void *)(v20 + v56) = 0;

        if (one-time initialization token for shared != -1) {
          uint64_t v30 = swift_once();
        }
        MEMORY[0x270FA5388](v30);
        *(&v55 - 4) = v31;
        *(&v55 - 3) = v18;
        id v32 = v61;
        *(&v55 - 2) = v62;
        *(&v55 - 1) = v32;
        MEMORY[0x270FA5388](v33);
        *(&v55 - 2) = partial apply for closure #1 in PasswordManager.add(password:for:);
        *(&v55 - 1) = v34;
        uint64_t v36 = v35 + 4;
        os_unfair_lock_lock(v35 + 4);
        partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v37);
        os_unfair_lock_unlock(v36);
        uint64_t v38 = CRAsset.digest.getter();
        double v39 = v60;
        double v40 = (uint64_t *)&v60[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove];
        uint64_t v41 = *(void *)&v60[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove];
        unint64_t v42 = *(void *)&v60[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove + 8];
        *double v40 = v38;
        v40[1] = v43;
        uint64_t v44 = outlined consume of Data?(v41, v42);
        MEMORY[0x270FA5388](v44);
        double v45 = v55;
        *(&v55 - 2) = v55;
        *(&v55 - 1) = v18;
        uint64_t v46 = PaperDocumentViewController.paperDocument.modify(v63);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
        Capsule.callAsFunction<A>(_:)();
        ((void (*)(void *, void))v46)(v63, 0);
        uint64_t v47 = type metadata accessor for TaskPriority();
        uint64_t v22 = 1;
        uint64_t v48 = (uint64_t)v59;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v59, 1, 1, v47);
        type metadata accessor for MainActor();
        id v49 = v57;
        id v50 = v39;
        uint64_t v51 = static MainActor.shared.getter();
        id v52 = (void *)swift_allocObject();
        uint64_t v53 = MEMORY[0x263F8F500];
        v52[2] = v51;
        v52[3] = v53;
        v52[4] = v50;
        v52[5] = v49;
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v48, (uint64_t)&async function pointer to partial apply for closure #2 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:), (uint64_t)v52);

        swift_release();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        return v22;
      }
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return 0;
  }
  return v22;
}

uint64_t closure #1 in PaperDocumentViewController.open(pdfDocument:asset:context:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v21 = a3;
  id v22 = a2;
  uint64_t v4 = type metadata accessor for CRAsset();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PaperDocument(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  id v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v21, v4, v16);
  id v19 = v22;
  swift_retain();
  specialized PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)(v19, (uint64_t)v7, a1, 0, 1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PaperDocument?);
  }
  outlined init with take of PaperDocument((uint64_t)v10, (uint64_t)v18, type metadata accessor for PaperDocument);
  outlined init with copy of PaperDocument((uint64_t)v18, (uint64_t)v14, type metadata accessor for PaperDocument);
  lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule.Ref<>.root.setter();
  return outlined destroy of PaperDocument((uint64_t)v18, type metadata accessor for PaperDocument);
}

uint64_t closure #2 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = type metadata accessor for MainActor();
  v5[3] = static MainActor.shared.getter();
  uint64_t v7 = (void *)swift_task_alloc();
  v5[4] = v7;
  *uint64_t v7 = v5;
  v7[1] = closure #2 in FeedbackManager.sendFeedback(action:feedbackInput:);
  return PaperDocumentViewController.setupDocumentView(context:)(a5);
}

void specialized PaperDocumentView.merge<A>(_:from:page:)(uint64_t a1, unsigned __int8 a2, void *a3)
{
  uint64_t v4 = v3;
  int v7 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v58 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v62 = v7;
  if (!v7 && *(void *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
  {
    type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    swift_retain();
    CRMulticastSyncManager.merge<A>(_:sendDelta:)();
    swift_release();
  }
  uint64_t v11 = v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  uint64_t v12 = type metadata accessor for PaperDocument(0);
  uint64_t v60 = lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v61 = v12;
  Capsule.merge<A>(_:)();
  swift_endAccess();
  uint64_t v57 = v11;
  if (a3)
  {
    uint64_t v13 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument);
    uint64_t v14 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v58, v11, v8);
    v65[0] = xmmword_20C834980;
    memset(&v65[1], 0, 59);
    id v15 = a3;
    id v16 = v13;
    specialized PaperKitPDFDocument.updatePDFPage<A>(in:use:options:page:)(v14, 0x8000000000000000, (uint64_t)v65, (uint64_t)v15);

    uint64_t v17 = (char *)v14;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v14, v8);
    if (v62 == 4)
    {

LABEL_37:
      if (*(void *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v17, v57, v8);
        swift_retain();
        CRMulticastSyncManager.sync(_:sendDelta:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
      }
      if (v62 == 4)
      {
        if (PaperDocumentView.isLiveEditing()())
        {
          uint64_t v47 = v9;
          uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
          uint64_t v49 = v57;
        }
        else
        {
          uint64_t v50 = v4;
          uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
          v48(v17, v57, v8);
          PassthroughSubject.send(_:)();
          uint64_t v56 = v9;
          uint64_t v51 = *(void (**)(char *, uint64_t))(v9 + 8);
          v51(v17, v8);
          if (*(void *)(v50 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
          {
            uint64_t v52 = v57;
            v48(v17, v57, v8);
            swift_retain();
            CRMulticastSyncManager.sync(_:sendDelta:)();
            swift_release();
            v51(v17, v8);
            uint64_t v47 = v56;
            uint64_t v49 = v52;
          }
          else
          {
            uint64_t v47 = v56;
            uint64_t v49 = v57;
          }
        }
        uint64_t v53 = v58;
        v48(v58, v49, v8);
        PassthroughSubject.send(_:)();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v53, v8);
      }
      return;
    }
    double v39 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
    swift_beginAccess();
    uint64_t v40 = *v39;
    if (*(void *)(*v39 + 16))
    {
      id v41 = v15;
      swift_bridgeObjectRetain();
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v41);
      if ((v43 & 1) == 0)
      {

        swift_bridgeObjectRelease();
LABEL_36:
        uint64_t v17 = v58;
        if ((v62 - 3) > 1) {
          return;
        }
        goto LABEL_37;
      }
      uint64_t v44 = *(void *)(v40 + 56) + 16 * v42;
      uint64_t v45 = *(void *)(v44 + 8);
      id v15 = *(id *)v44;

      swift_bridgeObjectRelease();
      uint64_t ObjectType = swift_getObjectType();
      char v63 = v62;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 88))(a1, &v63, v61, v60, ObjectType, v45);
    }
    goto LABEL_36;
  }
  uint64_t v17 = v58;
  if (v62 == 4) {
    goto LABEL_37;
  }
  uint64_t v18 = a1;
  uint64_t v56 = v9;
  uint64_t v55 = v8;
  unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v19);
  swift_bridgeObjectRelease();
  uint64_t v54 = v4;
  uint64_t v20 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  uint64_t v21 = *v20;
  uint64_t v22 = *(void *)(*v20 + 64);
  uint64_t v59 = *v20 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  int64_t v26 = (unint64_t)(v23 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v27 = 0;
  while (1)
  {
    if (v25)
    {
      unint64_t v28 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v29 = v28 | (v27 << 6);
      goto LABEL_12;
    }
    int64_t v36 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v36 >= v26) {
      goto LABEL_34;
    }
    unint64_t v37 = *(void *)(v59 + 8 * v36);
    ++v27;
    if (!v37)
    {
      int64_t v27 = v36 + 1;
      if (v36 + 1 >= v26) {
        goto LABEL_34;
      }
      unint64_t v37 = *(void *)(v59 + 8 * v27);
      if (!v37)
      {
        int64_t v27 = v36 + 2;
        if (v36 + 2 >= v26) {
          goto LABEL_34;
        }
        unint64_t v37 = *(void *)(v59 + 8 * v27);
        if (!v37)
        {
          int64_t v27 = v36 + 3;
          if (v36 + 3 >= v26) {
            goto LABEL_34;
          }
          unint64_t v37 = *(void *)(v59 + 8 * v27);
          if (!v37) {
            break;
          }
        }
      }
    }
LABEL_29:
    unint64_t v25 = (v37 - 1) & v37;
    unint64_t v29 = __clz(__rbit64(v37)) + (v27 << 6);
LABEL_12:
    uint64_t v30 = *(void *)(v21 + 56) + 16 * v29;
    id v31 = *(void **)v30;
    uint64_t v32 = *(void *)(v30 + 8);
    uint64_t v33 = swift_getObjectType();
    v64[0] = v62;
    id v34 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 88);
    id v35 = v31;
    v34(v18, v64, v61, v60, v33, v32);
  }
  int64_t v38 = v36 + 4;
  if (v38 >= v26)
  {
LABEL_34:
    swift_release();
    uint64_t v8 = v55;
    uint64_t v9 = v56;
    uint64_t v4 = v54;
    goto LABEL_36;
  }
  unint64_t v37 = *(void *)(v59 + 8 * v38);
  if (v37)
  {
    int64_t v27 = v38;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v27 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v27 >= v26) {
      goto LABEL_34;
    }
    unint64_t v37 = *(void *)(v59 + 8 * v27);
    ++v38;
    if (v37) {
      goto LABEL_29;
    }
  }
LABEL_48:
  __break(1u);
}

double specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<D0>(void (*a1)(long long *__return_ptr)@<X1>, _OWORD *a2@<X8>)
{
  a1(&v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *a2 = v5;
  }
  return result;
}

void specialized closure #1 in PaperDocumentViewController.setUpObservers()()
{
}

id specialized PaperDocumentViewController.init(context:paperDocument:editingMode:)(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v40[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = &v40[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v13 = *a3;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView] = 0;
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_scrollViewObserver;
  id v15 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController_ScrollViewObserver());
  id v16 = v3;
  *(void *)&v3[v14] = objc_msgSend(v15, sel_init);
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_screenEdgePanGestureRecognizer] = 0;
  v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility] = 1;
  v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  char v43 = v9;
  uint64_t v44 = a2;
  id v42 = a1;
  int v41 = v13;
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v17 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v17 = MEMORY[0x263F8EE88];
  }
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_cancellables] = v17;
  uint64_t v18 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  *(void *)&v16[v18] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14C08]), sel_init);
  uint64_t v19 = (uint64_t)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v22(v19, 1, 1, v20);
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController] = 0;
  *(_OWORD *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove] = xmmword_20C8352B0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor] = 0;
  v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically] = 0;
  v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_defaultBannerWasDisplayed] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration] = 0;
  uint64_t v23 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView;
  *(void *)&v16[v23] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  uint64_t v24 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton;
  type metadata accessor for FormPlusButtonView();
  *(void *)&v16[v24] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest] = 0;
  unint64_t v25 = &v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestDate];
  uint64_t v26 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestSucceeded] = 0;
  uint64_t v27 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  swift_allocObject();
  *(void *)&v16[v27] = PassthroughSubject.init()();
  uint64_t v28 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_livePassThroughSubject;
  swift_allocObject();
  *(void *)&v16[v28] = PassthroughSubject.init()();
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI] = 0;
  v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_nonDrawingToolMode] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToBannerBottomConstraint] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(void *)&v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToPaperDocumentLeadingConstraint] = 0;
  v16[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode] = v41;
  uint64_t v29 = v44;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v21 + 16))(v12, v44, v20);
  v22((uint64_t)v12, 0, 1, v20);
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v12, v19, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  swift_endAccess();

  uint64_t v30 = (objc_class *)type metadata accessor for PaperDocumentViewController(0);
  v45.receiver = v16;
  v45.super_class = v30;
  id v31 = objc_msgSendSuper2(&v45, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v32 = type metadata accessor for TaskPriority();
  uint64_t v33 = (uint64_t)v43;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v43, 1, 1, v32);
  type metadata accessor for MainActor();
  id v34 = v31;
  id v35 = v42;
  uint64_t v36 = static MainActor.shared.getter();
  unint64_t v37 = (void *)swift_allocObject();
  uint64_t v38 = MEMORY[0x263F8F500];
  _OWORD v37[2] = v36;
  v37[3] = v38;
  v37[4] = v34;
  v37[5] = v35;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v33, (uint64_t)async function pointer to partial apply for closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:), (uint64_t)v37);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v29, v20);
  return v34;
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  long long v5 = (id *)(a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v6 = 0;
  int64_t v21 = (unint64_t)(v2 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v21) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v6;
    if (!v18)
    {
      int64_t v6 = v17 + 1;
      if (v17 + 1 >= v21) {
        goto LABEL_23;
      }
      unint64_t v18 = *(void *)(v20 + 8 * v6);
      if (!v18)
      {
        int64_t v6 = v17 + 2;
        if (v17 + 2 >= v21) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v20 + 8 * v6);
        if (!v18)
        {
          int64_t v6 = v17 + 3;
          if (v17 + 3 >= v21) {
            goto LABEL_23;
          }
          unint64_t v18 = *(void *)(v20 + 8 * v6);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v4 = (v18 - 1) & v18;
    unint64_t v8 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_5:
    uint64_t v9 = *(void *)(a1 + 56) + 16 * v8;
    uint64_t v10 = *(void **)v9;
    uint64_t v11 = *(void *)(v9 + 8);
    uint64_t ObjectType = swift_getObjectType();
    id v13 = *v5;
    uint64_t v14 = *(void (**)(id, uint64_t, uint64_t))(v11 + 248);
    id v15 = *v5;
    id v16 = v10;
    v14(v13, ObjectType, v11);
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v21)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    int64_t v6 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v6 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v6 >= v21) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v6);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t ObjectType;
  void (*v14)(char *, uint64_t, uint64_t);
  id v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  int64_t v20;
  char v21;

  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v4 = -1;
  if (v3 < 64) {
    unint64_t v4 = ~(-1 << v3);
  }
  long long v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (char *)(a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  unint64_t v7 = 0;
  uint64_t v20 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      uint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    id v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v20) {
      goto LABEL_23;
    }
    int64_t v17 = *(void *)(v19 + 8 * v16);
    ++v7;
    if (!v17)
    {
      unint64_t v7 = v16 + 1;
      if (v16 + 1 >= v20) {
        goto LABEL_23;
      }
      int64_t v17 = *(void *)(v19 + 8 * v7);
      if (!v17)
      {
        unint64_t v7 = v16 + 2;
        if (v16 + 2 >= v20) {
          goto LABEL_23;
        }
        int64_t v17 = *(void *)(v19 + 8 * v7);
        if (!v17)
        {
          unint64_t v7 = v16 + 3;
          if (v16 + 3 >= v20) {
            goto LABEL_23;
          }
          int64_t v17 = *(void *)(v19 + 8 * v7);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_22:
    long long v5 = (v17 - 1) & v17;
    uint64_t v9 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_5:
    uint64_t v10 = *(void *)(a1 + 56) + 16 * v9;
    uint64_t v11 = *(void **)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t ObjectType = swift_getObjectType();
    int64_t v21 = *v6;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 40);
    id v15 = v11;
    v14(&v21, ObjectType, v12);
  }
  unint64_t v18 = v16 + 4;
  if (v18 >= v20)
  {
LABEL_23:
    swift_release();
    return;
  }
  int64_t v17 = *(void *)(v19 + 8 * v18);
  if (v17)
  {
    unint64_t v7 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v7 >= v20) {
      goto LABEL_23;
    }
    int64_t v17 = *(void *)(v19 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t specialized PaperDocumentViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  long long v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *v5;
  if (*v5)
  {
    if (MEMORY[0x210550400](v4)) {
      uint64_t v8 = *(void *)(*(void *)(v4 + 8) + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    *(void *)(v9 + 8) = v8;
    swift_unknownObjectWeakAssign();
    return swift_unknownObjectRelease();
  }
  return result;
}

void specialized PaperDocumentViewController.toolPicker.setter(void *a1)
{
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker);
  *(void *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker) = a1;
  uint64_t v4 = a1;

  long long v5 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  int64_t v6 = (char *)*v5;
  if (v6)
  {
    uint64_t v7 = *(void **)(v1 + v2);
    uint64_t v8 = (id *)&v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
    swift_beginAccess();
    id v9 = *v8;
    *uint64_t v8 = v7;
    id v10 = v7;
    uint64_t v11 = v6;
    if (v9)
    {
      objc_msgSend(v9, sel_removeObserver_, v11);
      id v12 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v9, sel_removeObserver_, v12);
    }
    swift_beginAccess();
    id v13 = v11;
    uint64_t v14 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v14, (uint64_t)v13);
    swift_bridgeObjectRelease();

    if (*v8)
    {
      id v15 = *v8;
      objc_msgSend(v15, sel_addObserver_, v13);
      id v16 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v15, sel_addObserver_, v16);

      PaperDocumentView.updateTiledViewInk(for:)(v15);
      PaperDocumentView.updateToolPicker()();

      uint64_t v4 = v13;
      id v13 = (char *)v9;
      id v9 = v10;
      id v10 = v15;
    }

    uint64_t v4 = (char *)v10;
  }
}

uint64_t type metadata accessor for PaperDocumentViewController(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperDocumentViewController);
}

id specialized PaperDocumentViewController.init(withDataOrURL:context:editingMode:)(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  uint64_t v7 = type metadata accessor for DataOrURL();
  uint64_t v47 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v48 = v8;
  id v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v10 - 8);
  id v12 = &v44[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v46 = &v44[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x270FA5388](v15 - 8);
  int64_t v17 = &v44[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v45 = *a3;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView] = 0;
  uint64_t v18 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_scrollViewObserver;
  id v19 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController_ScrollViewObserver());
  uint64_t v20 = v3;
  *(void *)&v3[v18] = objc_msgSend(v19, sel_init);
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_screenEdgePanGestureRecognizer] = 0;
  v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility] = 1;
  v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v50 = a2;
  uint64_t v51 = a1;
  uint64_t v49 = v9;
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v21 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v21 = MEMORY[0x263F8EE88];
  }
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_cancellables] = v21;
  uint64_t v22 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  *(void *)&v20[v22] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14C08]), sel_init);
  uint64_t v23 = (uint64_t)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp];
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  unint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController] = 0;
  *(_OWORD *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove] = xmmword_20C8352B0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor] = 0;
  v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically] = 0;
  v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_defaultBannerWasDisplayed] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration] = 0;
  uint64_t v26 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView;
  *(void *)&v20[v26] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  uint64_t v27 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton;
  type metadata accessor for FormPlusButtonView();
  *(void *)&v20[v27] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest] = 0;
  uint64_t v28 = &v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestDate];
  uint64_t v29 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestSucceeded] = 0;
  uint64_t v30 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  swift_allocObject();
  *(void *)&v20[v30] = PassthroughSubject.init()();
  uint64_t v31 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_livePassThroughSubject;
  swift_allocObject();
  *(void *)&v20[v31] = PassthroughSubject.init()();
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI] = 0;
  v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_nonDrawingToolMode] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToBannerBottomConstraint] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToPaperDocumentLeadingConstraint] = 0;
  v20[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode] = v45;
  static CRKeyPath.unique.getter();
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.init(id:initClosure:)();
  v25((uint64_t)v17, 0, 1, v24);
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v17, v23, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  swift_endAccess();

  uint64_t v32 = (objc_class *)type metadata accessor for PaperDocumentViewController(0);
  v52.receiver = v20;
  v52.super_class = v32;
  id v33 = objc_msgSendSuper2(&v52, sel_initWithNibName_bundle_, 0, 0);
  static TaskPriority.userInitiated.getter();
  uint64_t v34 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v12, 0, 1, v34);
  uint64_t v35 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v36 = v51;
  uint64_t v37 = (uint64_t)v49;
  outlined init with copy of PaperDocument(v51, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  unint64_t v38 = (*(unsigned __int8 *)(v47 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  unint64_t v39 = (v48 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = (void *)swift_allocObject();
  void v40[2] = 0;
  v40[3] = 0;
  v40[4] = v35;
  outlined init with take of PaperDocument(v37, (uint64_t)v40 + v38, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  int v41 = v50;
  *(void *)((char *)v40 + v39) = v50;
  id v42 = v41;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:), (uint64_t)v40);
  swift_release();

  outlined destroy of PaperDocument(v36, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for TaskPriority?);
  return v33;
}

uint64_t partial apply for closure #1 in PasswordManager.clear(for:)@<X0>(void *a1@<X8>)
{
  return closure #1 in PasswordManager.clear(for:)(v1[2], v1[3], v1[4], a1);
}

double _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_SSSg_TG5TA_0@<D0>(_OWORD *a1@<X8>)
{
  (*(void (**)(long long *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *a1 = v5;
  }
  return result;
}

uint64_t sub_20C3FD6B0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #1 in PaperDocumentViewController.viewWillTransition(to:with:)(uint64_t a1)
{
  return closure #1 in PaperDocumentViewController.viewWillTransition(to:with:)(a1, *(void *)(v1 + 16));
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

void specialized PaperDocumentViewController.init(coder:)()
{
  uint64_t v1 = v0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView] = 0;
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_scrollViewObserver;
  *(void *)&v1[v2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController_ScrollViewObserver()), sel_init);
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailBackgroundView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewLeadingToSuperviewLeadingConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewWidthConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_documentViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_screenEdgePanGestureRecognizer] = 0;
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility] = 1;
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v3 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v3 = MEMORY[0x263F8EE88];
  }
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_cancellables] = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__toolPicker;
  *(void *)&v1[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14C08]), sel_init);
  long long v5 = &v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController] = 0;
  *(_OWORD *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_assetPasswordToRemove] = xmmword_20C8352B0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor] = 0;
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically] = 0;
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_defaultBannerWasDisplayed] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration] = 0;
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView;
  *(void *)&v1[v7] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_plusButton;
  type metadata accessor for FormPlusButtonView();
  *(void *)&v1[v8] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_ignorePasswordRequest] = 0;
  id v9 = &v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestDate];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_lastPasswordRequestSucceeded] = 0;
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  swift_allocObject();
  *(void *)&v1[v11] = PassthroughSubject.init()();
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_livePassThroughSubject;
  swift_allocObject();
  *(void *)&v1[v12] = PassthroughSubject.init()();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI] = 0;
  v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_nonDrawingToolMode] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController__cachedToolPicker] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController____lazy_storage___pageLabelView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToSuperviewTopConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewTopToBannerBottomConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToThumbnailViewTrailingConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageLabelViewLeadingToPaperDocumentLeadingConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized PaperDocumentViewController.pageOverlayViewProvider.setter(uint64_t a1, uint64_t a2, void *a3, void *a4, void (*a5)(void))
{
  uint64_t v9 = v5 + *a3;
  swift_beginAccess();
  *(void *)(v9 + 8) = a2;
  swift_unknownObjectWeakAssign();
  uint64_t v10 = (void **)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  uint64_t result = swift_beginAccess();
  uint64_t v12 = (char *)*v10;
  if (*v10)
  {
    MEMORY[0x210550400](v9);
    uint64_t v13 = *(void *)(v9 + 8);
    uint64_t v14 = &v12[*a4];
    swift_beginAccess();
    *((void *)v14 + 1) = v13;
    swift_unknownObjectWeakAssign();
    uint64_t v15 = v12;
    a5();

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized PaperDocumentViewController.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *v5;
  if (*v5)
  {
    MEMORY[0x210550400](v4);
    uint64_t v8 = *(void *)(v4 + 8);
    uint64_t v9 = v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
    swift_beginAccess();
    *(void *)(v9 + 8) = v8;
    swift_unknownObjectWeakAssign();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_20C3FDCBC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate, a2);
}

uint64_t sub_20C3FDCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.delegate : PaperDocumentViewController(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized PaperDocumentViewController.delegate.setter);
}

id sub_20C3FDCF4@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView, a2);
}

void sub_20C3FDD00(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

id sub_20C3FDD20@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView, a2);
}

void sub_20C3FDD2C(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_20C3FDD4C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_allowsUserInteractionToToggleThumbnailViewVisibility, a2);
}

uint64_t sub_20C3FDD5C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed, a2);
}

void sub_20C3FDD68(char *a1, void *a2)
{
  char v2 = *a1;
  unint64_t v3 = (char *)(*a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
  swift_beginAccess();
  char v4 = *v3;
  *unint64_t v3 = v2;
  PaperDocumentViewController.isThumbnailViewCollapsed.didset(v4);
}

uint64_t sub_20C3FDDC8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void sub_20C3FDE1C(unsigned __int8 *a1)
{
  unsigned __int8 v1 = *a1;
  PaperDocumentViewController.editingMode.setter(&v1);
}

uint64_t sub_20C3FDE54@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider, a2);
}

uint64_t sub_20C3FDE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.participantDetailsDataSource : PaperDocumentViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_pageOverlayViewProvider, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, (void (*)(void))PaperDocumentView.pageOverlayViewProvider.didset);
}

void sub_20C3FDEA0(id *a1)
{
  id v1 = *a1;
  specialized PaperDocumentViewController.toolPicker.setter(v1);
}

uint64_t sub_20C3FDEEC@<X0>(uint64_t a1@<X8>)
{
  return PaperDocumentViewController.paperDocument.getter(a1);
}

uint64_t sub_20C3FDF14@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically, a2);
}

uint64_t sub_20C3FDF20(char *a1, void *a2)
{
  char v2 = *a1;
  unint64_t v3 = (unsigned char *)(*a2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_shouldShowFormFillingUIAutomatically);
  uint64_t result = swift_beginAccess();
  *unint64_t v3 = v2;
  return result;
}

uint64_t sub_20C3FDF70@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger, a2);
}

uint64_t sub_20C3FDF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.participantDetailsDataSource : PaperDocumentViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, PaperDocumentView.liveStreamMessenger.didset);
}

uint64_t sub_20C3FDFB8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource, a2);
}

uint64_t sub_20C3FDFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.participantDetailsDataSource : PaperDocumentViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, PaperDocumentView.participantDetailsDataSource.didset);
}

uint64_t sub_20C3FE000@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors, a2);
}

uint64_t keypath_get_14Tm@<X0>(void *a1@<X0>, void *a2@<X3>, unsigned char *a3@<X8>)
{
  char v4 = (unsigned char *)(*a1 + *a2);
  uint64_t result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_20C3FE060@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider, a2);
}

uint64_t keypath_getTm_0@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1 + *a2;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v4);
  uint64_t v6 = *(void *)(v4 + 8);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_20C3FE0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.delegate : PaperDocumentViewController(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized PaperDocumentViewController.textualContextProvider.setter);
}

id sub_20C3FE0F0@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_viewControllerForPresentingUI, a2);
}

void sub_20C3FE0FC(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t ObjC metadata update function for PaperDocumentPasswordViewController()
{
  return type metadata accessor for PaperDocumentPasswordViewController(0);
}

uint64_t type metadata accessor for PaperDocumentPasswordViewController(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for PaperDocumentPasswordViewController);
}

void type metadata completion function for PaperDocumentPasswordViewController()
{
  type metadata accessor for CRAsset?(319, (unint64_t *)&lazy cache variable for type metadata for CRAsset?, MEMORY[0x263F33060]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for PaperDocumentViewController()
{
  return type metadata accessor for PaperDocumentViewController(0);
}

void type metadata completion function for PaperDocumentViewController()
{
  type metadata accessor for Capsule<PaperDocument>?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRAsset?(319, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for PaperDocumentViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PaperDocumentViewController);
}

uint64_t dispatch thunk of PaperDocumentViewController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.paperDocumentView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.paperDocumentThumbnailView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x270))();
}

uint64_t dispatch thunk of PaperDocumentViewController.allowsUserInteractionToToggleThumbnailViewVisibility.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x278))();
}

uint64_t dispatch thunk of PaperDocumentViewController.isThumbnailViewCollapsed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x280))();
}

uint64_t dispatch thunk of PaperDocumentViewController.isThumbnailViewCollapsed.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of PaperDocumentViewController.isThumbnailViewCollapsed.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x290))();
}

uint64_t dispatch thunk of PaperDocumentViewController.editingMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x298))();
}

uint64_t dispatch thunk of PaperDocumentViewController.editingMode.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.editingMode.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.pageOverlayViewProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.pageOverlayViewProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.pageOverlayViewProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPicker.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPicker.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPicker.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.removeToolPicker()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x310))();
}

uint64_t dispatch thunk of PaperDocumentViewController.paperDocument.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x390))();
}

uint64_t dispatch thunk of PaperDocumentViewController.paperDocument.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x398))();
}

uint64_t dispatch thunk of PaperDocumentViewController.paperDocument.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.shouldShowFormFillingUIAutomatically.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.shouldShowFormFillingUIAutomatically.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.shouldShowFormFillingUIAutomatically.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.__allocating_init(context:paperDocument:editingMode:)()
{
  return (*(uint64_t (**)(void))(v0 + 1048))();
}

uint64_t dispatch thunk of PaperDocumentViewController.revertAllChanges()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.merge<A>(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.merge<A>(_:forward:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.publisher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4F0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.livePublisher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4F8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.liveStreamMessenger.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x500))();
}

uint64_t dispatch thunk of PaperDocumentViewController.liveStreamMessenger.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x508))();
}

uint64_t dispatch thunk of PaperDocumentViewController.liveStreamMessenger.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x510))();
}

uint64_t dispatch thunk of PaperDocumentViewController.participantDetailsDataSource.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x518))();
}

uint64_t dispatch thunk of PaperDocumentViewController.participantDetailsDataSource.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x520))();
}

uint64_t dispatch thunk of PaperDocumentViewController.participantDetailsDataSource.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x528))();
}

uint64_t dispatch thunk of PaperDocumentViewController.participantDetailsDidChange()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x530))();
}

uint64_t dispatch thunk of PaperDocumentViewController.showParticipantCursors.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x538))();
}

uint64_t dispatch thunk of PaperDocumentViewController.showParticipantCursors.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x540))();
}

uint64_t dispatch thunk of PaperDocumentViewController.showParticipantCursors.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x548))();
}

uint64_t dispatch thunk of PaperDocumentViewController.textualContextProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x550))();
}

uint64_t dispatch thunk of PaperDocumentViewController.textualContextProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x558))();
}

uint64_t dispatch thunk of PaperDocumentViewController.textualContextProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x560))();
}

uint64_t dispatch thunk of PaperDocumentViewController.viewControllerForPresentingUI.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x568))();
}

uint64_t dispatch thunk of PaperDocumentViewController.viewControllerForPresentingUI.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x570))();
}

uint64_t dispatch thunk of PaperDocumentViewController.viewControllerForPresentingUI.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x578))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPickerSelectedToolDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5D0))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPickerSelectedToolItemDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5D8))();
}

uint64_t dispatch thunk of PaperDocumentViewController.toolPickerIsRulerActiveDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5E0))();
}

void type metadata accessor for Capsule<PaperDocument>?()
{
  if (!lazy cache variable for type metadata for Capsule<PaperDocument>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Capsule<PaperDocument>?);
    }
  }
}

void type metadata accessor for CRAsset?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for PaperDocumentViewController_ScrollViewObserver()
{
  return self;
}

uint64_t sub_20C3FF090()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in PaperDocumentViewController.bannerViewConfiguration.didset()
{
  closure #1 in PaperDocumentViewController.bannerViewConfiguration.didset(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedPaperPage and conformance TaggedPaperPage;
  if (!lazy protocol witness table cache variable for type TaggedPaperPage and conformance TaggedPaperPage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedPaperPage and conformance TaggedPaperPage);
  }
  return result;
}

uint64_t partial apply for closure #1 in PaperDocumentView.rotatePage(_:left:)()
{
  return closure #1 in PaperDocumentView.rotatePage(_:left:)();
}

uint64_t sub_20C3FF1B4()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C3FF1EC()
{
  swift_release();

  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in PaperDocumentViewController.requirePasswordIfNeeded(completion:)(uint64_t a1)
{
  closure #1 in PaperDocumentViewController.requirePasswordIfNeeded(completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void (**)(BOOL))(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags;
  if (!lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags;
  if (!lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags);
  }
  return result;
}

uint64_t partial apply for closure #1 in PaperDocumentViewController.setupDocumentView(context:)(uint64_t a1)
{
  return closure #1 in PaperDocumentViewController.setupDocumentView(context:)(a1, v1);
}

uint64_t partial apply for closure #2 in PaperDocumentViewController.setupDocumentView(context:)(uint64_t a1)
{
  return closure #2 in PaperDocumentViewController.setupDocumentView(context:)(a1, v1);
}

uint64_t sub_20C3FF2B0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for closure #1 in closure #1 in PaperDocumentViewController.setupDocumentView(context:)(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v3 = *(void *)(v1 + 16);
  closure #1 in closure #1 in PaperDocumentViewController.setupDocumentView(context:)(a1, v3);
}

unint64_t lazy protocol witness table accessor for type AutofillFeatureFlags and conformance AutofillFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags;
  if (!lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags;
  if (!lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutofillFeatureFlags and conformance AutofillFeatureFlags);
  }
  return result;
}

uint64_t sub_20C3FF44C()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(uint64_t a1)
{
  closure #1 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

void partial apply for closure #2 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(uint64_t a1)
{
  closure #2 in PaperDocumentViewController.setupDefaultBannerUI(updateToolbar:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PasswordManager.add(password:for:)()
{
  return closure #1 in PasswordManager.add(password:for:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(uint64_t a1)
{
  return closure #1 in PaperDocumentViewController.open(pdfDocument:asset:context:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #2 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #2 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(a1, v4, v5, v7, v6);
}

uint64_t sub_20C3FF5A8()
{
  swift_release();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)()
{
  closure #1 in PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(*(void *)(v0 + 16), *(UIView **)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t outlined init with copy of PaperDocument(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_20C3FF664()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataOrURL() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    outlined consume of Data._Representation(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  }
  unint64_t v6 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = v6 + 8;

  return MEMORY[0x270FA0238](v0, v7, v2 | 7);
}

uint64_t outlined init with take of PaperDocument(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DataOrURL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in PaperDocumentViewController.init(withDataOrURL:context:editingMode:)(a1, v6, v7, v8, v9, v10);
}

uint64_t outlined destroy of PaperDocument(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void partial apply for closure #1 in PaperDocumentViewController.isThumbnailViewCollapsed.didset()
{
  closure #1 in PaperDocumentViewController.isThumbnailViewCollapsed.didset(v0);
}

void partial apply for closure #2 in PaperDocumentViewController.isThumbnailViewCollapsed.didset(char a1)
{
  closure #2 in PaperDocumentViewController.isThumbnailViewCollapsed.didset(a1, v1);
}

void partial apply for closure #1 in PaperDocumentViewController.updatePlusButton()(uint64_t a1)
{
  closure #1 in PaperDocumentViewController.updatePlusButton()(a1, v1);
}

void partial apply for closure #2 in PaperDocumentViewController.updatePlusButton()(uint64_t a1)
{
  closure #2 in PaperDocumentViewController.updatePlusButton()(a1, v1);
}

void partial apply for closure #1 in closure #2 in PaperDocumentViewController.updatePlusButton()(void *a1)
{
  closure #1 in closure #2 in PaperDocumentViewController.updatePlusButton()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ToolPickerControllerDelegate.addNewSignatureItem(_:)()
{
  return closure #1 in ToolPickerControllerDelegate.addNewSignatureItem(_:)();
}

uint64_t lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C3FFA20()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v6, v5);
}

void partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(void *a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>)
                 - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(a1, v4);
}

uint64_t objectdestroy_184Tm()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentViewController.init(context:paperDocument:editingMode:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in PaperDocumentViewController.open(pdfDocument:asset:context:)(uint64_t a1)
{
  return partial apply for closure #1 in PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(a1);
}

ValueMetadata *type metadata accessor for MiniDivider()
{
  return &type metadata for MiniDivider;
}

uint64_t associated type witness table accessor for View.Body : View in MiniDivider()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MiniDivider.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Divider();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Divider, _FrameLayout>);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>);
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>);
  uint64_t v15 = v14 - 8;
  MEMORY[0x270FA5388](v14);
  int64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Divider.init()();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v9, v5, v2);
  uint64_t v18 = &v9[*(int *)(v7 + 44)];
  long long v19 = v41[1];
  *(_OWORD *)uint64_t v18 = v41[0];
  *((_OWORD *)v18 + 1) = v19;
  *((_OWORD *)v18 + 2) = v41[2];
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  LOBYTE(v7) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v9, (uint64_t)v13, &demangling cache variable for type metadata for ModifiedContent<Divider, _FrameLayout>);
  uint64_t v28 = &v13[*(int *)(v11 + 44)];
  *uint64_t v28 = v7;
  *((void *)v28 + 1) = v21;
  *((void *)v28 + 2) = v23;
  *((void *)v28 + 3) = v25;
  *((void *)v28 + 4) = v27;
  v28[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for ModifiedContent<Divider, _FrameLayout>);
  LOBYTE(v11) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>);
  uint64_t v37 = &v17[*(int *)(v15 + 44)];
  *uint64_t v37 = v11;
  *((void *)v37 + 1) = v30;
  *((void *)v37 + 2) = v32;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  v37[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>);
  uint64_t v38 = static VerticalAlignment.firstTextBaseline.getter();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, a1, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>);
  unint64_t v39 = (uint64_t *)(a1
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier>)
                           + 36));
  *unint64_t v39 = v38;
  v39[1] = (uint64_t)closure #1 in MiniDivider.body.getter;
  void v39[2] = 0;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>);
}

double closure #1 in MiniDivider.body.getter()
{
  uint64_t v0 = static VerticalAlignment.center.getter();
  return MEMORY[0x210549D20](v0) + 4.0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Divider, _FrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Divider, _FrameLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Divider, _FrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<Divider, _FrameLayout>, (void (*)(void))lazy protocol witness table accessor for type Divider and conformance Divider);
}

unint64_t lazy protocol witness table accessor for type Divider and conformance Divider()
{
  unint64_t result = lazy protocol witness table cache variable for type Divider and conformance Divider;
  if (!lazy protocol witness table cache variable for type Divider and conformance Divider)
  {
    type metadata accessor for Divider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Divider and conformance Divider);
  }
  return result;
}

uint64_t type metadata completion function for CanvasViewToolPickerObserver()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall CanvasViewToolPickerObserver.updateUI(toolPicker:)(PKToolPicker toolPicker)
{
  uint64_t v3 = type metadata accessor for PKInk();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x210550400](v1 + direct field offset for CanvasViewToolPickerObserver.canvasView, v5);
  if (v8)
  {
    uint64_t v9 = (char *)v8;
    if (([(objc_class *)toolPicker.super.isa _isHandwritingToolSelected] & 1) == 0)
    {
      uint64_t v10 = v9;
      id v11 = [(objc_class *)toolPicker.super.isa selectedToolItem];
      PKToolPickerItem.ink.getter((uint64_t)v7);

      PKInk.tool.getter(v16);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      Canvas.tool.setter(v16);
    }
    uint64_t v12 = *(void **)&v9[direct field offset for CanvasView.canvasTiledView];
    if (v12)
    {
      id v13 = v12;
      if ([(objc_class *)toolPicker.super.isa isVisible]) {
        id v14 = [(objc_class *)toolPicker.super.isa isRulerActive];
      }
      else {
        id v14 = 0;
      }
      objc_msgSend(v13, sel_setRulerEnabled_, v14);
    }
    else
    {
      __break(1u);
    }
  }
}

void @objc CanvasViewToolPickerObserver.toolPickerVisibilityDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  CanvasViewToolPickerObserver.toolPickerVisibilityDidChange(_:)((PKToolPicker)v4);
}

uint64_t @objc CanvasViewToolPickerObserver._supportsCanvasElements(_:)()
{
  return 1;
}

void @objc CanvasViewToolPickerObserver._toolPickerDidInvokeDoneAction(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized CanvasViewToolPickerObserver._toolPickerDidInvokeDoneAction(_:)();
}

void @objc CanvasViewToolPickerObserver.init()()
{
}

uint64_t @objc CanvasViewToolPickerObserver.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasViewToolPickerObserver()
{
  return __swift_instantiateGenericMetadata();
}

id specialized CanvasViewToolPickerObserver.init(canvasView:)()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

id specialized CanvasViewToolPickerObserver.__allocating_init(canvasView:)()
{
  id v1 = objc_allocWithZone(v0);
  return specialized CanvasViewToolPickerObserver.init(canvasView:)();
}

void specialized CanvasViewToolPickerObserver._toolPickerDidInvokeDoneAction(_:)()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + direct field offset for CanvasViewToolPickerObserver.canvasView);
  if (v1)
  {
    id v2 = (id)v1;
    AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
  }
}

void specialized CanvasViewToolPickerObserver.init()()
{
}

uint64_t PaperDocumentPage.flags.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t type metadata accessor for PaperDocumentPage()
{
  uint64_t result = type metadata singleton initialization cache for PaperDocumentPage;
  if (!type metadata singleton initialization cache for PaperDocumentPage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double PaperDocumentPage.bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t PaperDocumentPage.$bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t PaperDocumentPage.$bounds.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

double PaperDocumentPage.frame.getter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t PaperDocumentPage.$frame.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t PaperDocumentPage.$frame.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t PaperDocumentPage.contentsBounds.getter()
{
  return PaperDocumentPage.contentsBounds.getter(MEMORY[0x263F32C30]);
}

uint64_t PaperDocumentPage.$contentsBounds.getter()
{
  return PaperDocumentPage.contentsBounds.getter(MEMORY[0x263F32C38]);
}

uint64_t PaperDocumentPage.contentsBounds.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for PaperDocumentPage();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  return a1(v2);
}

uint64_t PaperDocumentPage.$contentsBounds.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t PaperDocumentPage.bounds.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PaperDocumentPage.bounds.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for PaperDocumentPage.$bounds : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

void (*PaperDocumentPage.$bounds.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _OWORD v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double key path getter for PaperDocumentPage.frame : PaperDocumentPage@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for PaperDocumentPage.frame : PaperDocumentPage()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PaperDocumentPage.frame.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PaperDocumentPage.frame.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for PaperDocumentPage.$frame : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t (*PaperDocumentPage.$frame.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _OWORD v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path setter for PaperDocumentPage.contentsBounds : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
}

uint64_t PaperDocumentPage.contentsBounds.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
}

uint64_t (*PaperDocumentPage.contentsBounds.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for PaperDocumentPage.$contentsBounds : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t (*PaperDocumentPage.$contentsBounds.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _OWORD v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double PaperDocumentPage.rotation.getter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for PaperDocumentPage.rotation : PaperDocumentPage@<D0>(double *a1@<X8>)
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for PaperDocumentPage.rotation : PaperDocumentPage()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PaperDocumentPage.rotation.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PaperDocumentPage.rotation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocumentPage.$rotation.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PaperDocumentPage.$rotation : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PaperDocumentPage.$rotation.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PaperDocumentPage.$rotation.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _OWORD v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PaperDocumentPage.pdfPageID.getter()
{
  return PaperDocumentPage.pdfPageID.getter(MEMORY[0x263F32C30]);
}

uint64_t key path setter for PaperDocumentPage.pdfPageID : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for PDFPageID?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for PDFPageID?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for PDFPageID?);
}

uint64_t PaperDocumentPage.pdfPageID.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PDFPageID?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for PDFPageID?);
}

uint64_t (*PaperDocumentPage.pdfPageID.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocumentPage.$pdfPageID.getter()
{
  return PaperDocumentPage.pdfPageID.getter(MEMORY[0x263F32C38]);
}

uint64_t PaperDocumentPage.pdfPageID.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for PaperDocumentPage();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  return a1(v2);
}

uint64_t key path setter for PaperDocumentPage.$pdfPageID : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PaperDocumentPage.$pdfPageID.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PaperDocumentPage.$pdfPageID.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _OWORD v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PaperDocumentPage.drawing.getter()
{
  return PaperDocumentPage.drawing.getter(MEMORY[0x263F32C30]);
}

uint64_t key path setter for PaperDocumentPage.drawing : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t PaperDocumentPage.drawing.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t (*PaperDocumentPage.drawing.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocumentPage.$drawing.getter()
{
  return PaperDocumentPage.drawing.getter(MEMORY[0x263F32C38]);
}

uint64_t PaperDocumentPage.drawing.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for PaperDocumentPage();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return a1(v2);
}

uint64_t key path setter for PaperDocumentPage.$drawing : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PaperDocumentPage.$drawing.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PaperDocumentPage.$drawing.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _OWORD v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path getter for PaperDocumentPage.flags : PaperDocumentPage@<X0>(void *a1@<X8>)
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PaperDocumentPage.flags : PaperDocumentPage()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PaperDocumentPage.flags.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PaperDocumentPage.flags.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocumentPage.$flags.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PaperDocumentPage.$flags : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PaperDocumentPage.$flags.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PaperDocumentPage.$flags.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _OWORD v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PaperDocumentPage.subelements.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PaperDocumentPage() + 44);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t PaperDocumentPage.subelements.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PaperDocumentPage() + 44);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

double (*PaperDocumentPage.subelements.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperDocumentPage.initialAnnotationIDs.getter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for PaperDocumentPage.initialAnnotationIDs : PaperDocumentPage@<X0>(void *a1@<X8>)
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PaperDocumentPage.initialAnnotationIDs : PaperDocumentPage()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PaperDocumentPage.initialAnnotationIDs.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PaperDocumentPage.initialAnnotationIDs.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocumentPage.$initialAnnotationIDs.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PaperDocumentPage.$initialAnnotationIDs : PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PaperDocumentPage.$initialAnnotationIDs.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PaperDocumentPage.$initialAnnotationIDs.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _OWORD v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocumentPage() + 48);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PaperDocumentPage.additionalFields.getter()
{
  type metadata accessor for PaperDocumentPage();
  return swift_bridgeObjectRetain();
}

uint64_t PaperDocumentPage.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PaperDocumentPage() + 52);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*PaperDocumentPage.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

__n128 static PaperDocumentPage.fields.getter@<Q0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  *(_OWORD *)&unsigned char v27[16] = xmmword_2676CA938;
  long long v28 = *(_OWORD *)&qword_2676CA948;
  *(_OWORD *)uint64_t v29 = *(_OWORD *)&qword_2676CA958;
  *(void *)&v29[16] = qword_2676CA968;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&qword_2676CA8F8;
  *(_OWORD *)&v25[16] = *(_OWORD *)&qword_2676CA908;
  long long v26 = xmmword_2676CA918;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)&qword_2676CA928;
  long long v22 = xmmword_2676CA8B8;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)&qword_2676CA8C8;
  *(_OWORD *)&v23[16] = xmmword_2676CA8D8;
  long long v24 = *(_OWORD *)&qword_2676CA8E8;
  *(_OWORD *)uint64_t v21 = static PaperDocumentPage.fields;
  *(_OWORD *)&v21[16] = *(_OWORD *)&qword_2676CA8A8;
  uint64_t v2 = static PaperDocumentPage.fields;
  uint64_t v3 = unk_2676CA8B0;
  uint64_t v4 = qword_2676CA8C8;
  uint64_t v5 = *((void *)&xmmword_2676CA8D8 + 1);
  uint64_t v6 = qword_2676CA8F8;
  uint64_t v7 = unk_2676CA910;
  uint64_t v8 = qword_2676CA928;
  uint64_t v9 = *((void *)&xmmword_2676CA938 + 1);
  uint64_t v10 = qword_2676CA958;
  long long v12 = *(_OWORD *)&v21[8];
  long long v13 = xmmword_2676CA8B8;
  long long v14 = *(_OWORD *)&v23[8];
  long long v15 = *(_OWORD *)&qword_2676CA8E8;
  long long v16 = *(_OWORD *)&v25[8];
  long long v17 = xmmword_2676CA918;
  long long v18 = *(_OWORD *)&v27[8];
  long long v19 = *(_OWORD *)&qword_2676CA948;
  __n128 v20 = *(__n128 *)&v29[8];
  outlined retain of ((String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGFloat>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<PDFPageID?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<PaperDocumentPage, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<[CRKeyPath]>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CanvasElementFlags>>))((uint64_t)v21);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(void *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(void *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(void *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(void *)(a1 + 192) = v10;
  __n128 result = v20;
  *(__n128 *)(a1 + 200) = v20;
  return result;
}

uint64_t outlined retain of ((String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGFloat>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<PDFPageID?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<PaperDocumentPage, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<[CRKeyPath]>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CanvasElementFlags>>))(uint64_t a1)
{
  return a1;
}

uint64_t PaperDocumentPage.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v103 = type metadata accessor for CRKeyPath();
  uint64_t v101 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  id v98 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v96 = (char *)&v73 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v95 = (char *)&v73 - v9;
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  uint64_t v100 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  id v97 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  id v99 = (char *)&v73 - v12;
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  uint64_t v90 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  long long v89 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v93 = v14;
  uint64_t v94 = v15;
  MEMORY[0x270FA5388](v14);
  id v87 = (int *)((char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t v91 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  double v86 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v85 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  int v83 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  uint64_t v82 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  id v80 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v79 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  id v77 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v76 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v74 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PaperDocumentPage(v2, a2, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
  uint64_t v73 = MEMORY[0x263F32C60];
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<CGRect> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CGRect>);
  CRType.copy(renamingReferences:)();
  long long v26 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 40);
  v26(a2, v25, v22);
  uint64_t v27 = (int *)type metadata accessor for PaperDocumentPage();
  CRType.copy(renamingReferences:)();
  uint64_t v28 = a2;
  v26(a2 + v27[5], v25, v22);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<TaggedValue_2<CGRect, Quad>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v29 = v74;
  uint64_t v30 = v75;
  CRType.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v76 + 40))(a2 + v27[6], v29, v30);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<CGFloat> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v31 = v77;
  uint64_t v32 = v78;
  CRType.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v79 + 40))(v28 + v27[7], v31, v32);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<PDFPageID?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  uint64_t v33 = v80;
  uint64_t v34 = v81;
  CRType.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 40))(v28 + v27[8], v33, v34);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v35 = v83;
  uint64_t v36 = v84;
  CRType.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 40))(v28 + v27[9], v35, v36);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<CanvasElementFlags> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t v37 = v86;
  uint64_t v38 = v88;
  CRType.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 40))(v28 + v27[10], v37, v38);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  unint64_t v39 = (char *)v87;
  uint64_t v88 = a1;
  uint64_t v40 = v93;
  CRType.copy(renamingReferences:)();
  uint64_t v41 = v27[11];
  uint64_t v91 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v94 + 40))(v28 + v41, v39, v40);
  id v87 = v27;
  uint64_t v42 = v101;
  CRRegister.wrappedValue.getter();
  char v43 = v105;
  int64_t v44 = *((void *)v105 + 2);
  int v45 = (char *)MEMORY[0x263F8EE78];
  if (v44)
  {
    id v105 = (char *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44, 0);
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
    uint64_t v47 = v42 + 16;
    uint64_t v46 = v48;
    unint64_t v49 = (*(unsigned __int8 *)(v47 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 64);
    double v86 = v43;
    uint64_t v50 = &v43[v49];
    uint64_t v51 = *(void *)(v47 + 56);
    uint64_t v93 = v100 + 32;
    uint64_t v94 = v51;
    do
    {
      objc_super v52 = v95;
      uint64_t v53 = v103;
      v46(v95, v50, v103);
      v46(v96, v52, v53);
      type metadata accessor for PDFAnnotationElement();
      lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
      WeakRef.init(id:)();
      (*(void (**)(char *, uint64_t))(v47 - 8))(v52, v53);
      uint64_t v54 = v105;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v54 + 2) + 1, 1);
        uint64_t v54 = v105;
      }
      unint64_t v56 = *((void *)v54 + 2);
      unint64_t v55 = *((void *)v54 + 3);
      uint64_t v57 = v99;
      if (v56 >= v55 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
        uint64_t v57 = v99;
        uint64_t v54 = v105;
      }
      *((void *)v54 + 2) = v56 + 1;
      uint64_t v58 = v100;
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(&v54[((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(void *)(v58 + 72) * v56], v57, v102);
      v50 += v94;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
    int v45 = (char *)MEMORY[0x263F8EE78];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v54 = (char *)MEMORY[0x263F8EE78];
    uint64_t v58 = v100;
  }
  id v104 = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WeakRef<PDFAnnotationElement>]);
  lazy protocol witness table accessor for type [WeakRef<PDFAnnotationElement>] and conformance <A> [A]();
  CRType.copy(renamingReferences:)();
  swift_bridgeObjectRelease();
  uint64_t v59 = v105;
  int64_t v60 = *((void *)v105 + 2);
  if (v60)
  {
    id v104 = v45;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60, 0);
    uint64_t v62 = *(void *)(v58 + 16);
    uint64_t v61 = v58 + 16;
    id v99 = v59;
    uint64_t v100 = v62;
    char v63 = &v59[(*(unsigned __int8 *)(v61 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 64)];
    uint64_t v64 = *(void *)(v61 + 56);
    id v65 = (void (**)(char *, uint64_t))(v61 - 8);
    id v66 = v104;
    do
    {
      id v67 = v97;
      uint64_t v68 = v102;
      ((void (*)(char *, char *, uint64_t))v100)(v97, v63, v102);
      WeakRef.id.getter();
      (*v65)(v67, v68);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v66 + 2) + 1, 1);
        id v66 = v104;
      }
      unint64_t v70 = *((void *)v66 + 2);
      unint64_t v69 = *((void *)v66 + 3);
      if (v70 >= v69 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
        id v66 = v104;
      }
      *((void *)v66 + 2) = v70 + 1;
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(&v66[((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80))+ *(void *)(v101 + 72) * v70], v98, v103);
      id v104 = v66;
      v63 += v64;
      --v60;
    }
    while (v60);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v66 = (char *)MEMORY[0x263F8EE78];
  }
  id v105 = v66;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
  id v71 = v89;
  CRRegister.init(_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v90 + 40))(v91 + v87[12], v71, v92);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(uint64_t, char *, uint64_t);
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  unint64_t v52;
  char *v53;
  uint64_t v54;
  void (**v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (**v69)(char *, uint64_t);
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;

  uint64_t v5 = type metadata accessor for CRKeyPath();
  id v107 = *(void *)(v5 - 8);
  id v108 = v5;
  MEMORY[0x270FA5388](v5);
  id v105 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v102 = (char *)&v80 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v101 = (char *)&v80 - v10;
  id v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  id v106 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  uint64_t v103 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  id v104 = (char *)&v80 - v13;
  id v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  id v96 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v95 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v16 = *(void *)(v15 - 8);
  id v99 = v15;
  uint64_t v100 = v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v93 = (int *)((char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  id v97 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  uint64_t v92 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v90 = v19;
  uint64_t v91 = v20;
  MEMORY[0x270FA5388](v19);
  long long v89 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  uint64_t v88 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  double v86 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v85 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  int v83 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v82 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v25 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PaperDocumentPage(v2, a2, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
  CRRegister.copy(renamingReferences:)();
  uint64_t v30 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 40);
  v30(a2, v29, v26);
  uint64_t v31 = (int *)type metadata accessor for PaperDocumentPage();
  CRRegister.copy(renamingReferences:)();
  v30(a2 + v31[5], v29, v26);
  uint64_t v32 = v106;
  uint64_t v33 = a1;
  uint64_t v34 = v81;
  CRRegister.copy(renamingReferences:)();
  uint64_t v35 = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 40))(a2 + v31[6], v25, v34);
  uint64_t v36 = v83;
  uint64_t v37 = v84;
  CRRegister.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 40))(v35 + v31[7], v36, v37);
  uint64_t v38 = v107;
  unint64_t v39 = v86;
  uint64_t v40 = v87;
  CRRegister.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v88 + 40))(v35 + v31[8], v39, v40);
  uint64_t v41 = v89;
  uint64_t v42 = v90;
  CRRegister.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 40))(v35 + v31[9], v41, v42);
  char v43 = v92;
  int64_t v44 = v94;
  CRRegister.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v97 + 40))(v35 + v31[10], v43, v44);
  int v45 = (char *)v93;
  uint64_t v94 = v33;
  uint64_t v46 = v99;
  CROrderedSet.copy(renamingReferences:)();
  uint64_t v47 = v31[11];
  id v97 = v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v100 + 40))(v35 + v47, v45, v46);
  uint64_t v93 = v31;
  CRRegister.wrappedValue.getter();
  uint64_t v48 = v110;
  unint64_t v49 = *((void *)v110 + 2);
  uint64_t v50 = (char *)MEMORY[0x263F8EE78];
  if (v49)
  {
    uint64_t v110 = (char *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49, 0);
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    objc_super v52 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v92 = v48;
    uint64_t v53 = &v48[v52];
    uint64_t v54 = *(void *)(v38 + 72);
    unint64_t v55 = (void (**)(char *, uint64_t))(v38 + 8);
    id v99 = v32 + 32;
    uint64_t v100 = v54;
    unint64_t v56 = v101;
    do
    {
      uint64_t v57 = v108;
      v51(v56, v53, v108);
      v51(v102, v56, v57);
      type metadata accessor for PDFAnnotationElement();
      lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
      WeakRef.init(id:)();
      (*v55)(v56, v57);
      uint64_t v58 = v110;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v58 + 2) + 1, 1);
        uint64_t v58 = v110;
      }
      uint64_t v59 = v106;
      uint64_t v61 = *((void *)v58 + 2);
      int64_t v60 = *((void *)v58 + 3);
      uint64_t v62 = v104;
      if (v61 >= v60 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
        uint64_t v59 = v106;
        uint64_t v58 = v110;
      }
      *((void *)v58 + 2) = v61 + 1;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(&v58[((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(void *)(v59 + 72) * v61], v62, v109);
      v53 += v100;
      --v49;
    }
    while (v49);
    swift_bridgeObjectRelease();
    uint64_t v50 = (char *)MEMORY[0x263F8EE78];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  char v63 = Array<A>.copy(renamingReferences:)();
  swift_bridgeObjectRelease();
  uint64_t v64 = *(void *)(v63 + 16);
  if (v64)
  {
    uint64_t v110 = v50;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64, 0);
    id v65 = v106 + 16;
    id v106 = *(void *)(v106 + 16);
    id v66 = *(unsigned __int8 *)(v65 + 64);
    id v104 = (char *)v63;
    id v67 = v63 + ((v66 + 32) & ~v66);
    uint64_t v68 = *(void *)(v65 + 56);
    unint64_t v69 = (void (**)(char *, uint64_t))(v65 - 8);
    unint64_t v70 = v110;
    do
    {
      id v71 = v103;
      id v72 = v109;
      uint64_t v73 = v65;
      ((void (*)(char *, uint64_t, uint64_t))v106)(v103, v67, v109);
      WeakRef.id.getter();
      (*v69)(v71, v72);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1);
        unint64_t v70 = v110;
      }
      uint64_t v75 = *((void *)v70 + 2);
      uint64_t v74 = *((void *)v70 + 3);
      uint64_t v76 = v107;
      id v77 = v105;
      if (v75 >= v74 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
        id v77 = v105;
        uint64_t v76 = v107;
        unint64_t v70 = v110;
      }
      *((void *)v70 + 2) = v75 + 1;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v70[((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80))+ *(void *)(v76 + 72) * v75], v77, v108);
      uint64_t v110 = v70;
      v67 += v68;
      --v64;
      id v65 = v73;
    }
    while (v64);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v70 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v110 = v70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
  uint64_t v78 = v95;
  CRRegister.init(_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v96 + 40))(v97 + v93[12], v78, v98);
}

uint64_t PaperDocumentPage.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v25);
  uint64_t v24 = (uint64_t)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v22 - v4;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v23);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v22 - v15;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v26 = 0u;
  long long v27 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v17 = type metadata accessor for PaperDocumentPage();
  long long v26 = 0u;
  long long v27 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, 1, 1, v18);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v16, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(void *)&long long v26 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v19 = type metadata accessor for PDFPageID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 1, 1, v19);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for PDFPageID?);
  lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PDFPageID?);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v5, 1, 1, v20);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v5, v24, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)&long long v26 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  CROrderedSet.init()();
  *(void *)&long long v26 = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a1 + *(int *)(v17 + 52)) = MEMORY[0x263F8EE80];
  return result;
}

void PaperDocumentPage.init(contentsBounds:fullBounds:)(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D5>, CGFloat a7@<D7>)
{
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v36);
  uint64_t v35 = (uint64_t)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v34);
  uint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v33 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v33 - v27;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v37 = 0u;
  long long v38 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v29 = type metadata accessor for PaperDocumentPage();
  long long v37 = 0u;
  long long v38 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v28, 1, 1, v30);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v28, (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(void *)&long long v37 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v31 = type metadata accessor for PDFPageID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v22, 1, 1, v31);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v22, (uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
  lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for PDFPageID?);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v17, 1, 1, v32);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, v35, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)&long long v37 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  CROrderedSet.init()();
  *(void *)&long long v37 = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
  CRRegister.init(wrappedValue:)();
  *(void *)(a1 + *(int *)(v29 + 52)) = MEMORY[0x263F8EE80];
  v39.origin.CGFloat x = a2;
  v39.origin.CGFloat y = a3;
  v39.size.CGFloat width = a4;
  v39.size.CGFloat height = a5;
  v40.origin.CGFloat y = a6;
  v40.size.CGFloat height = a7;
  PaperDocumentPage.setContentsBounds(_:fullBounds:)(v39, v40);
}

Swift::Void __swiftcall PaperDocumentPage.setContentsBounds(_:fullBounds:)(__C::CGRect _, __C::CGRect fullBounds)
{
  double height = fullBounds.size.height;
  double y = fullBounds.origin.y;
  CGFloat v4 = _.size.height;
  CGFloat width = _.size.width;
  CGFloat v6 = _.origin.y;
  CGFloat x = _.origin.x;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v30 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32.origin.CGFloat x = x;
  v32.origin.double y = v6;
  v32.size.CGFloat width = width;
  v32.size.double height = v4;
  CGFloat MinX = CGRectGetMinX(v32);
  v33.origin.CGFloat x = x;
  v33.origin.double y = v6;
  v33.size.CGFloat width = width;
  v33.size.double height = v4;
  double v24 = y + y + height - CGRectGetMaxY(v33);
  v34.origin.CGFloat x = x;
  v34.origin.double y = v6;
  v34.size.CGFloat width = width;
  v34.size.double height = v4;
  CGFloat v25 = CGRectGetWidth(v34);
  v35.origin.CGFloat x = x;
  v35.origin.double y = v6;
  v35.size.CGFloat width = width;
  v35.size.double height = v4;
  CGFloat v26 = CGRectGetHeight(v35);
  v31.origin.CGFloat x = MinX;
  v31.origin.double y = v24;
  v31.size.CGFloat width = v25;
  v31.size.double height = v26;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  lazy protocol witness table accessor for type Quad and conformance Quad();
  TaggedValue_2.init(_:)();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v22, 0, 1, v27);
  type metadata accessor for PaperDocumentPage();
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)((uint64_t)v22);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v36.origin.CGFloat x = MinX;
  v36.origin.double y = v24;
  v36.size.CGFloat width = v25;
  v36.size.double height = v26;
  if (!CGRectEqualToRect(v31, v36))
  {
    v31.origin.CGFloat x = MinX;
    v31.origin.double y = v24;
    v31.size.CGFloat width = v25;
    v31.size.double height = v26;
    CRRegister.value.setter();
  }
  uint64_t v28 = v29;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v30, v12, v8);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v8);
}

uint64_t static PaperDocumentPage.create<A>(pdfPage:pageID:in:assetManager:importedElements:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v71 = a3;
  uint64_t v72 = a4;
  uint64_t v67 = a2;
  uint64_t v81 = a1;
  uint64_t v77 = a5;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v73 = v5;
  uint64_t v74 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v68 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v75 = (uint64_t)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v10 - 8);
  unint64_t v70 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
  uint64_t v76 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  unint64_t v69 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v64);
  char v63 = (uint64_t (*)())((char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v62 - v15;
  v62[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v62[0]);
  uint64_t v18 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v62 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v22);
  double v24 = (char *)v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v62 - v26;
  uint64_t v28 = (int *)type metadata accessor for PaperDocumentPage();
  MEMORY[0x270FA5388](v28);
  uint64_t v65 = (uint64_t)v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  CGRect v32 = (char *)v62 - v31;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v82 = 0u;
  long long v83 = 0u;
  CRRegister.init(wrappedValue:)();
  long long v82 = 0u;
  long long v83 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v27, 1, 1, v33);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v27, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(void *)&long long v82 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v62[1] = &v32[v28[8]];
  uint64_t v80 = type metadata accessor for PDFPageID();
  uint64_t v34 = *(void *)(v80 - 8);
  CGRect v35 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
  uint64_t v78 = v34 + 56;
  uint64_t v79 = v35;
  v35(v21, 1, 1, v80);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for PDFPageID?);
  lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for PDFPageID?);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v16, 1, 1, v36);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v16, (uint64_t)v63, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)&long long v82 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  CROrderedSet.init()();
  long long v37 = &v32[v28[12]];
  *(void *)&long long v82 = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
  uint64_t v64 = (uint64_t)v37;
  CRRegister.init(wrappedValue:)();
  *(void *)&v32[v28[13]] = MEMORY[0x263F8EE80];
  id v38 = v81;
  objc_msgSend(v81, sel_boundsForBox_, 1);
  CGFloat v40 = v39;
  CGFloat v42 = v41;
  CGFloat v44 = v43;
  CGFloat v46 = v45;
  objc_msgSend(v38, sel_boundsForBox_, 0);
  v85.origin.double y = v47;
  v85.size.double height = v48;
  v84.origin.CGFloat x = v40;
  v84.origin.double y = v42;
  v84.size.CGFloat width = v44;
  v84.size.double height = v46;
  PaperDocumentPage.setContentsBounds(_:fullBounds:)(v84, v85);
  specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)objc_msgSend(v38, sel_rotation));
  char v63 = type metadata accessor for PDFPageID;
  uint64_t v49 = v67;
  outlined init with copy of PaperDocumentPage(v67, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  v79(v21, 0, 1, v80);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for PDFPageID?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for PDFPageID?);
  ContainerCanvasElement.importElements<A>(_:in:)(v72, v71, (uint64_t)v28, (uint64_t)&protocol witness table for PaperDocumentPage);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v50 = v73;
  uint64_t v51 = v66;
  *(void *)&long long v82 = CROrderedSet.map<A>(_:)();
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  CRRegister.wrappedValue.setter();
  outlined init with copy of PaperDocumentPage((uint64_t)v32, v65, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v70, 1, 1, v50);
  lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  swift_retain();
  objc_super v52 = v69;
  Ref.init<A>(_:_:identity:)();
  uint64_t v53 = v49;
  uint64_t v54 = v75;
  unint64_t v55 = v52;
  outlined init with copy of PaperDocumentPage(v53, v75, (uint64_t (*)(void))v63);
  v79((char *)v54, 0, 1, v80);
  uint64_t v56 = type metadata accessor for PageId(0);
  uint64_t v57 = v54 + *(int *)(v56 + 20);
  LOBYTE(v82) = 2;
  Ref.id.getter();
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:id:)();
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 0, 1, v58);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v54, 0, 1, v56);
  uint64_t v59 = v81;
  int64_t v60 = &v81[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined assign with take of Date?(v54, (uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  swift_endAccess();
  CRRegister.wrappedValue.getter();
  if (*(void *)&v59[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState])
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)&v59[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = v82;
    outlined consume of PaperKitPDFPage.AnnotationIDState(0);
  }
  LOBYTE(v82) = 2;
  Ref.id.getter();
  SharedTagged_3.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v55, v51);
  return outlined destroy of PaperDocumentPage((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
}

uint64_t ContainerCanvasElement.importElements<A>(_:in:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void *)(type metadata accessor for AnnotationImporter.ImportedElement() - 8);
    uint64_t v10 = v8 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    do
    {
      ContainerCanvasElement.addImportedElement<A>(_:in:)(v10, a2, a3, a4);
      v10 += v11;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PaperDocumentPage.minAppFormatVersion.getter()
{
  return 4;
}

void PaperDocumentPage.update<A>(pdfPage:id:use:in:options:)(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8 = v7;
  unint64_t v59 = a7;
  uint64_t v60 = a4;
  uint64_t v62 = a6;
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  uint64_t v51 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v50 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v48);
  double v45 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  uint64_t v46 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  CGFloat v44 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PaperDocumentPage();
  MEMORY[0x270FA5388](v16);
  uint64_t v49 = (uint64_t)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = *a3;
  uint64_t v20 = *a5;
  uint64_t v19 = (uint64_t (*)())a5[1];
  uint64_t v57 = a5[2];
  uint64_t v58 = v19;
  uint64_t v21 = a5[3];
  uint64_t v22 = a5[4];
  uint64_t v55 = a5[5];
  uint64_t v56 = v21;
  uint64_t v23 = a5[6];
  uint64_t v53 = a5[7];
  uint64_t v54 = v23;
  uint64_t v52 = a5[8];
  int v24 = *((unsigned __int8 *)a5 + 74);
  int v25 = *((unsigned __int16 *)a5 + 36);
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v26 = swift_dynamicCastClass();
  if (v26)
  {
    uint64_t v27 = (char *)v26;
    uint64_t v43 = a2;
    id v28 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    if ((v63[0] & 0x20) != 0)
    {
    }
    else
    {
      id v42 = v28;
      int v29 = v25 | (v24 << 16);
      specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v27, 0);
      uint64_t v30 = v8;
      CRRegister.wrappedValue.getter();
      if (*(void *)&v27[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState])
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        *(void *)&v27[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = v63[0];
        outlined consume of PaperKitPDFPage.AnnotationIDState(0);
      }
      uint64_t v31 = v62;
      unint64_t v32 = v18;
      unint64_t v66 = v18;
      v63[0] = v20;
      v63[1] = v58;
      v63[2] = v57;
      v63[3] = v56;
      v63[4] = v22;
      void v63[5] = v55;
      v63[6] = v54;
      v63[7] = v53;
      v63[8] = v52;
      char v65 = BYTE2(v29);
      __int16 v64 = v29;
      uint64_t v33 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
      uint64_t v34 = v59;
      uint64_t v35 = v60;
      PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)(v27, &v66, v60, (uint64_t)v63, v16, v31, v33, (uint64_t)&protocol witness table for PaperDocumentPage, (uint64_t)&protocol witness table for PaperDocumentPage, v59);
      if (v32 >> 62)
      {
      }
      else
      {
        uint64_t v58 = type metadata accessor for PaperDocumentPage;
        uint64_t v36 = v49;
        outlined init with copy of PaperDocumentPage(v30, v49, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
        uint64_t v37 = type metadata accessor for PDFPageID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v45, 1, 1, v37);
        lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
        uint64_t v57 = v33;
        id v38 = (id)v32;
        double v39 = v44;
        CRRegister.init(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v46 + 40))(v36 + *(int *)(v16 + 32), v39, v47);
        v63[0] = MEMORY[0x263F8EE78];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
        lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]();
        CGFloat v40 = v50;
        CRRegister.init(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v51 + 40))(v36 + *(int *)(v16 + 48), v40, v61);
        PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)((uint64_t)v38, v36, v43, v35, v16, v62, v57, (uint64_t)&protocol witness table for PaperDocumentPage, (uint64_t)&protocol witness table for PaperDocumentPage, v34);
        outlined consume of PaperDocument.PDFDocumentUse(v32);

        outlined destroy of PaperDocumentPage(v36, (uint64_t (*)(void))v58);
      }
    }
  }
}

id specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v76 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v76 - v13;
  uint64_t v15 = type metadata accessor for PaperDocumentPage();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = v3;
  outlined init with copy of PaperDocumentPage(v3, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
  if (a2)
  {
    objc_msgSend(a1, sel_boundsForBox_, 0);
    CGFloat v19 = v18;
    CGFloat v21 = v20;
    CGFloat v23 = v22;
    double v25 = v24;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.getter();
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v78 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
    int v29 = v78(v14, 1, v27);
    uint64_t v77 = v28;
    if (v29 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      double v30 = 0.0;
      double v31 = 256.0;
      double v32 = 0.0;
      double v33 = 256.0;
    }
    else
    {
      v76[1] = v26;
      uint64_t v34 = v11;
      uint64_t v35 = a1;
      uint64_t v36 = v28;
      TaggedValue_2.tagged1.getter();
      double v37 = v80;
      double v38 = v81;
      double v39 = v82;
      double v40 = v83;
      char v41 = v84;
      uint64_t v42 = v36;
      a1 = v35;
      uint64_t v11 = v34;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v27);
      double v32 = 0.0;
      double v33 = 256.0;
      if (v41) {
        double v30 = 0.0;
      }
      else {
        double v30 = v37;
      }
      if (v41)
      {
        double v31 = 256.0;
      }
      else
      {
        double v32 = v38;
        double v31 = v39;
      }
      if ((v41 & 1) == 0) {
        double v33 = v40;
      }
    }
    BOOL v43 = CGRect.almostEqual(_:threshold:)(v30, v32, v31, v33, 1.0, v19, v21, v23, v25);
    outlined destroy of PaperDocumentPage((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
    if (!v43)
    {
      CRRegister.wrappedValue.getter();
      if (v78(v11, 1, v27) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
        double v44 = 0.0;
        double v45 = 256.0;
        double v46 = 0.0;
        double v47 = 256.0;
      }
      else
      {
        TaggedValue_2.tagged1.getter();
        double v48 = v80;
        double v49 = v81;
        double v50 = v82;
        double v51 = v83;
        char v52 = v84;
        (*(void (**)(char *, uint64_t))(v77 + 8))(v11, v27);
        double v46 = 0.0;
        double v47 = 256.0;
        if (v52) {
          double v44 = 0.0;
        }
        else {
          double v44 = v48;
        }
        if (v52)
        {
          double v45 = 256.0;
        }
        else
        {
          double v46 = v49;
          double v45 = v50;
        }
        if ((v52 & 1) == 0) {
          double v47 = v51;
        }
      }
      objc_msgSend(a1, sel_setBounds_forBox_, 0, v44, v46, v45, v47);
    }
  }
  else
  {
    outlined destroy of PaperDocumentPage((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.getter();
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  uint64_t v54 = *(void *)(v53 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v8, 1, v53) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    double v55 = 0.0;
    double v56 = 256.0;
    double v57 = 0.0;
    double v58 = 256.0;
  }
  else
  {
    TaggedValue_2.tagged1.getter();
    double v59 = v80;
    double v60 = v81;
    double v56 = v82;
    double v58 = v83;
    char v61 = v84;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v53);
    if (v61) {
      double v55 = 0.0;
    }
    else {
      double v55 = v59;
    }
    if (v61) {
      double v57 = 0.0;
    }
    else {
      double v57 = v60;
    }
    if (v61)
    {
      double v56 = 256.0;
      double v58 = 256.0;
    }
  }
  objc_msgSend(a1, sel_boundsForBox_, 0);
  double v63 = v62;
  double v65 = v64;
  v85.origin.CGFloat x = v55;
  v85.origin.double y = v57;
  v85.size.CGFloat width = v56;
  v85.size.double height = v58;
  double MinX = CGRectGetMinX(v85);
  v86.origin.CGFloat x = v55;
  v86.origin.double y = v57;
  v86.size.CGFloat width = v56;
  v86.size.double height = v58;
  double v67 = v65 + v63 + v63 - CGRectGetMaxY(v86);
  v87.origin.CGFloat x = v55;
  v87.origin.double y = v57;
  v87.size.CGFloat width = v56;
  v87.size.double height = v58;
  double Width = CGRectGetWidth(v87);
  v88.origin.CGFloat x = v55;
  v88.origin.double y = v57;
  v88.size.CGFloat width = v56;
  v88.size.double height = v58;
  double Height = CGRectGetHeight(v88);
  objc_msgSend(a1, sel_boundsForBox_, 1);
  if (!CGRect.almostEqual(_:threshold:)(MinX, v67, Width, Height, 1.0, v70, v71, v72, v73)) {
    objc_msgSend(a1, sel_setBounds_forBox_, 1, MinX, v67, Width, Height);
  }
  uint64_t v74 = specialized PaperPage.axisAlignedRotationInDegrees.getter();
  id result = objc_msgSend(a1, sel_rotation);
  if (result != (id)v74) {
    return objc_msgSend(a1, sel_setRotation_, v74);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  double v16;
  BOOL v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double MinX;
  double v27;
  double Width;
  double Height;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  double v33;
  uint64_t v34;
  id result;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PaperDocumentPage(v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Paper);
  if (a2)
  {
    objc_msgSend(a1, sel_boundsForBox_, 0);
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    uint64_t v17 = CGRect.almostEqual(_:threshold:)(v36, v37, v38, v39, 1.0, v10, v12, v14, v16);
    outlined destroy of PaperDocumentPage((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Paper);
    if (!v17)
    {
      CRRegister.wrappedValue.getter();
      objc_msgSend(a1, sel_setBounds_forBox_, 0, v36, v37, v38, v39);
    }
  }
  else
  {
    outlined destroy of PaperDocumentPage((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Paper);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double v18 = v36;
  CGFloat v19 = v37;
  double v20 = v38;
  CGFloat v21 = v39;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  CGFloat v23 = v22;
  double v25 = v24;
  v40.origin.CGFloat x = v18;
  v40.origin.double y = v19;
  v40.size.CGFloat width = v20;
  v40.size.double height = v21;
  double MinX = CGRectGetMinX(v40);
  v41.origin.CGFloat x = v18;
  v41.origin.double y = v19;
  v41.size.CGFloat width = v20;
  v41.size.double height = v21;
  uint64_t v27 = v25 + v23 + v23 - CGRectGetMaxY(v41);
  v42.origin.CGFloat x = v18;
  v42.origin.double y = v19;
  v42.size.CGFloat width = v20;
  v42.size.double height = v21;
  double Width = CGRectGetWidth(v42);
  v43.origin.CGFloat x = v18;
  v43.origin.double y = v19;
  v43.size.CGFloat width = v20;
  v43.size.double height = v21;
  double Height = CGRectGetHeight(v43);
  objc_msgSend(a1, sel_boundsForBox_, 1);
  if (!CGRect.almostEqual(_:threshold:)(MinX, v27, Width, Height, 1.0, v30, v31, v32, v33)) {
    objc_msgSend(a1, sel_setBounds_forBox_, 1, MinX, v27, Width, Height);
  }
  uint64_t v34 = specialized PaperPage.axisAlignedRotationInDegrees.getter((void (*)(void))type metadata accessor for Paper);
  id result = objc_msgSend(a1, sel_rotation);
  if (result != (id)v34) {
    return objc_msgSend(a1, sel_setRotation_, v34);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  double v16;
  BOOL v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double MinX;
  double v27;
  double Width;
  double Height;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  double v33;
  id result;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UnknownPage();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PaperDocumentPage(v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for UnknownPage);
  if (a2)
  {
    objc_msgSend(a1, sel_boundsForBox_, 0);
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    uint64_t v17 = CGRect.almostEqual(_:threshold:)(v35, v36, v37, v38, 1.0, v10, v12, v14, v16);
    outlined destroy of PaperDocumentPage((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for UnknownPage);
    if (!v17)
    {
      CRRegister.wrappedValue.getter();
      objc_msgSend(a1, sel_setBounds_forBox_, 0, v35, v36, v37, v38);
    }
  }
  else
  {
    outlined destroy of PaperDocumentPage((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for UnknownPage);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double v18 = v35;
  CGFloat v19 = v36;
  double v20 = v37;
  CGFloat v21 = v38;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  CGFloat v23 = v22;
  double v25 = v24;
  v39.origin.CGFloat x = v18;
  v39.origin.double y = v19;
  v39.size.CGFloat width = v20;
  v39.size.double height = v21;
  double MinX = CGRectGetMinX(v39);
  v40.origin.CGFloat x = v18;
  v40.origin.double y = v19;
  v40.size.CGFloat width = v20;
  v40.size.double height = v21;
  uint64_t v27 = v25 + v23 + v23 - CGRectGetMaxY(v40);
  v41.origin.CGFloat x = v18;
  v41.origin.double y = v19;
  v41.size.CGFloat width = v20;
  v41.size.double height = v21;
  double Width = CGRectGetWidth(v41);
  v42.origin.CGFloat x = v18;
  v42.origin.double y = v19;
  v42.size.CGFloat width = v20;
  v42.size.double height = v21;
  double Height = CGRectGetHeight(v42);
  objc_msgSend(a1, sel_boundsForBox_, 1);
  if (!CGRect.almostEqual(_:threshold:)(MinX, v27, Width, Height, 1.0, v30, v31, v32, v33)) {
    objc_msgSend(a1, sel_setBounds_forBox_, 1, MinX, v27, Width, Height);
  }
  id result = objc_msgSend(a1, sel_rotation);
  if (result) {
    return objc_msgSend(a1, sel_setRotation_, 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  BOOL v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double MinX;
  double v35;
  double Width;
  double Height;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  double v41;
  uint64_t v42;
  id result;
  uint64_t v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PaperDocumentPage(v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Image);
  if (a2)
  {
    objc_msgSend(a1, sel_boundsForBox_, 0);
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    Image.pdfContentsBounds.getter();
    CGFloat v21 = CGRect.almostEqual(_:threshold:)(v17, v18, v19, v20, 1.0, v10, v12, v14, v16);
    outlined destroy of PaperDocumentPage((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Image);
    if (!v21)
    {
      Image.pdfContentsBounds.getter();
      objc_msgSend(a1, sel_setBounds_forBox_, 0);
    }
  }
  else
  {
    outlined destroy of PaperDocumentPage((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Image);
  }
  Image.pdfContentsBounds.getter();
  CGFloat v23 = v22;
  double v25 = v24;
  uint64_t v27 = v26;
  int v29 = v28;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  double v31 = v30;
  double v33 = v32;
  v45.origin.CGFloat x = v23;
  v45.origin.double y = v25;
  v45.size.CGFloat width = v27;
  v45.size.double height = v29;
  double MinX = CGRectGetMinX(v45);
  v46.origin.CGFloat x = v23;
  v46.origin.double y = v25;
  v46.size.CGFloat width = v27;
  v46.size.double height = v29;
  uint64_t v35 = v33 + v31 + v31 - CGRectGetMaxY(v46);
  v47.origin.CGFloat x = v23;
  v47.origin.double y = v25;
  v47.size.CGFloat width = v27;
  v47.size.double height = v29;
  double Width = CGRectGetWidth(v47);
  v48.origin.CGFloat x = v23;
  v48.origin.double y = v25;
  v48.size.CGFloat width = v27;
  v48.size.double height = v29;
  double Height = CGRectGetHeight(v48);
  objc_msgSend(a1, sel_boundsForBox_, 1);
  if (!CGRect.almostEqual(_:threshold:)(MinX, v35, Width, Height, 1.0, v38, v39, v40, v41)) {
    objc_msgSend(a1, sel_setBounds_forBox_, 1, MinX, v35, Width, Height);
  }
  uint64_t v42 = specialized PaperPage.axisAlignedRotationInDegrees.getter((void (*)(void))type metadata accessor for Image);
  id result = objc_msgSend(a1, sel_rotation);
  if (result != (id)v42) {
    return objc_msgSend(a1, sel_setRotation_, v42);
  }
  return result;
}

uint64_t PaperDocumentPage.updateFrom<A>(pdfPage:in:)(void *a1, uint64_t a2)
{
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v5 = (void *)result;
    id v6 = a1;
    char v7 = PaperDocumentPage.updateAnnotationsFrom<A>(_:in:)(v5, a2);

    return v7 & 1;
  }
  return result;
}

uint64_t PaperDocumentPage.updateAnnotationsFrom<A>(_:in:)(void *a1, uint64_t a2)
{
  uint64_t v144 = a2;
  uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v133 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  uint64_t v142 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x270FA5388](v141);
  uint64_t v140 = (uint64_t)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
  uint64_t v132 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  uint64_t v138 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
  MEMORY[0x270FA5388](v147);
  uint64_t v157 = (char **)((char *)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v156 = (uint64_t)&v132 - v9;
  uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
  MEMORY[0x270FA5388](v136);
  id v135 = (char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v132 - v12;
  unint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>);
  uint64_t v146 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  char v155 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v145 = (char *)&v132 - v17;
  uint64_t v18 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v153 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v20 - 8);
  CGFloat v150 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  double v24 = (char *)&v132 - v23;
  uint64_t v25 = type metadata accessor for CRKeyPath();
  uint64_t v166 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  id v137 = (char *)&v132 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v158 = (char *)&v132 - v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v174 = (void (**)(char *, unint64_t))((char *)&v132 - v30);
  MEMORY[0x270FA5388](v31);
  uint64_t v170 = (PDFAnnotation *)((char *)&v132 - v32);
  MEMORY[0x270FA5388](v33);
  uint64_t v175 = (char *)&v132 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v159 = (uint64_t)&v132 - v36;
  MEMORY[0x270FA5388](v37);
  uint64_t v152 = (char *)&v132 - v38;
  MEMORY[0x270FA5388](v39);
  uint64_t v160 = (char *)&v132 - v40;
  char v41 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v42 = v2 + *(int *)(type metadata accessor for PaperDocumentPage() + 44);
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v149 = v42;
  uint64_t v134 = CROrderedSet.map<A>(_:)();
  id v43 = objc_msgSend(a1, sel_annotations);
  type metadata accessor for PDFAnnotation();
  unint64_t isUniquelyReferenced_nonNull_native = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (isUniquelyReferenced_nonNull_native >> 62) {
    goto LABEL_76;
  }
  uint64_t v45 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  unint64_t v167 = v14;
  uint64_t v171 = v13;
  uint64_t v169 = v25;
  if (!v45)
  {
    swift_bridgeObjectRelease();
    unint64_t v46 = MEMORY[0x263F8EE78];
    goto LABEL_50;
  }
  uint64_t v165 = (void (**)(char *, uint64_t))(isUniquelyReferenced_nonNull_native & 0xC000000000000001);
  Swift::Int v151 = (unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48);
  uint64_t v168 = (void (**)(char *, char *, uint64_t))(v166 + 32);
  uint64_t v176 = (void (*)(char *, char *, unint64_t))(v166 + 16);
  uint64_t v161 = (void (**)(uint64_t, uint64_t))(v166 + 8);
  uint64_t v154 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v166 + 56);
  unint64_t v46 = MEMORY[0x263F8EE78];
  uint64_t v47 = 4;
  uint64_t v164 = v24;
  unint64_t v163 = isUniquelyReferenced_nonNull_native;
  *(void *)&long long v162 = v45;
  while (1)
  {
    if (v165) {
      id v51 = (id)MEMORY[0x21054E050](v47 - 4, isUniquelyReferenced_nonNull_native);
    }
    else {
      id v51 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v47);
    }
    char v52 = v51;
    unint64_t v14 = v47 - 3;
    if (__OFADD__(v47 - 4, 1))
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
    char v173 = v41;
    type metadata accessor for CanvasElementPDFAnnotation();
    uint64_t v53 = swift_dynamicCastClass();
    uint64_t v172 = (void (**)(char *, char *, uint64_t))(v47 - 3);
    if (v53)
    {
      uint64_t v54 = v53 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v54, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      if ((*v151)(v24, 1, v25) != 1)
      {
        double v55 = *v168;
        double v56 = v160;
        (*v168)(v160, v24, v25);
        uint64_t v13 = *(char **)v176;
        (*(void (**)(char *, char *, uint64_t))v176)(v152, v56, v25);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v46 + 16) + 1, 1, v46);
        }
        char v41 = v173;
        unint64_t v58 = *(void *)(v46 + 16);
        unint64_t v57 = *(void *)(v46 + 24);
        if (v58 >= v57 >> 1) {
          unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1, v46);
        }
        *(void *)(v46 + 16) = v58 + 1;
        double v24 = (char *)v46;
        unint64_t v59 = v46 + ((*(unsigned __int8 *)(v166 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80));
        uint64_t v60 = *(void *)(v166 + 72);
        v55((char *)(v59 + v60 * v58), v152, v25);
        uint64_t v61 = v159;
        ((void (*)(uint64_t, char *, uint64_t))v13)(v159, v160, v25);
        id v62 = v52;
        unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v177 = v41;
        unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v61);
        uint64_t v64 = v41[2];
        BOOL v65 = (v63 & 1) == 0;
        uint64_t v66 = v64 + v65;
        if (__OFADD__(v64, v65)) {
          goto LABEL_74;
        }
        char v67 = v63;
        if (v41[3] < v66)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v66, isUniquelyReferenced_nonNull_native);
          unint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(v159);
          if ((v67 & 1) != (v69 & 1)) {
            goto LABEL_77;
          }
          unint64_t v14 = v68;
          char v41 = v177;
          if ((v67 & 1) == 0) {
            goto LABEL_45;
          }
LABEL_41:
          uint64_t v93 = v41[7];

          *(void *)(v93 + 8 * v14) = v62;
          uint64_t v25 = v169;
LABEL_47:
          swift_bridgeObjectRelease();
          double v49 = *v161;
          (*v161)(v159, v25);

          double v50 = v160;
          goto LABEL_7;
        }
        if (isUniquelyReferenced_nonNull_native)
        {
          char v41 = v177;
          if (v63) {
            goto LABEL_41;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          char v41 = v177;
          if (v67) {
            goto LABEL_41;
          }
        }
LABEL_45:
        v41[(v14 >> 6) + 8] |= 1 << v14;
        uint64_t v25 = v169;
        ((void (*)(unint64_t, uint64_t, uint64_t))v13)(v41[6] + v14 * v60, v159, v169);
        *(void *)(v41[7] + 8 * v14) = v62;
        uint64_t v94 = v41[2];
        BOOL v91 = __OFADD__(v94, 1);
        uint64_t v95 = v94 + 1;
        if (v91) {
          goto LABEL_75;
        }
        v41[2] = v95;
        goto LABEL_47;
      }
    }
    else
    {
      (*v154)(v24, 1, 1, v25);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    id v70 = objc_msgSend(v52, sel_pdfAnnotationUUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    CGFloat v71 = v175;
    CRKeyPath.init(_:)();
    uint64_t v72 = swift_dynamicCastClass();
    uint64_t v13 = *(char **)v176;
    if (v72)
    {
      uint64_t v73 = v72;
      uint64_t v74 = (uint64_t)v150;
      ((void (*)(char *, char *, uint64_t))v13)(v150, v71, v25);
      (*v154)((char *)v74, 0, 1, v25);
      uint64_t v75 = v73 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
      swift_beginAccess();
      id v76 = v52;
      outlined assign with take of Date?(v74, v75, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      swift_endAccess();
    }
    ((void (*)(PDFAnnotation *, char *, uint64_t))v13)(v170, v71, v25);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v46 + 16) + 1, 1, v46);
    }
    char v41 = v173;
    unint64_t v78 = *(void *)(v46 + 16);
    unint64_t v77 = *(void *)(v46 + 24);
    if (v78 >= v77 >> 1) {
      unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1, v46);
    }
    *(void *)(v46 + 16) = v78 + 1;
    double v24 = (char *)v46;
    unint64_t v79 = v46 + ((*(unsigned __int8 *)(v166 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80));
    uint64_t v80 = *(void *)(v166 + 72);
    (*(void (**)(unint64_t, PDFAnnotation *, uint64_t))(v166 + 32))(v79 + v80 * v78, v170, v25);
    double v81 = v174;
    ((void (*)(void (**)(char *, unint64_t), char *, uint64_t))v13)(v174, v175, v25);
    id v82 = v52;
    unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v177 = v41;
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v81);
    uint64_t v84 = v41[2];
    BOOL v85 = (v83 & 1) == 0;
    uint64_t v86 = v84 + v85;
    if (__OFADD__(v84, v85)) {
      goto LABEL_70;
    }
    char v87 = v83;
    if (v41[3] < v86) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      char v41 = v177;
      if ((v83 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      char v41 = v177;
      if ((v87 & 1) == 0)
      {
LABEL_37:
        v41[(v14 >> 6) + 8] |= 1 << v14;
        uint64_t v25 = v169;
        ((void (*)(unint64_t, void (**)(char *, unint64_t), uint64_t))v13)(v41[6] + v14 * v80, v174, v169);
        *(void *)(v41[7] + 8 * v14) = v82;
        uint64_t v90 = v41[2];
        BOOL v91 = __OFADD__(v90, 1);
        uint64_t v92 = v90 + 1;
        if (v91) {
          goto LABEL_73;
        }
        v41[2] = v92;
        goto LABEL_6;
      }
    }
LABEL_5:
    uint64_t v48 = v41[7];

    *(void *)(v48 + 8 * v14) = v82;
    uint64_t v25 = v169;
LABEL_6:
    swift_bridgeObjectRelease();
    double v49 = *v161;
    (*v161)((uint64_t)v174, v25);

    double v50 = v175;
LABEL_7:
    v49((uint64_t)v50, v25);
    unint64_t v14 = v167;
    unint64_t v46 = (unint64_t)v24;
    unint64_t isUniquelyReferenced_nonNull_native = v163;
    ++v47;
    uint64_t v13 = v171;
    double v24 = v164;
    if (v172 == (void (**)(char *, char *, uint64_t))v162)
    {
      swift_bridgeObjectRelease();
LABEL_50:
      unint64_t v163 = v46;
      uint64_t v177 = (void *)v46;
      uint64_t v178 = v134;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A], &demangling cache variable for type metadata for [CRKeyPath]);
      lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      id v96 = v145;
      BidirectionalCollection<>.difference<A>(from:)();
      swift_bridgeObjectRelease();
      id v97 = *(void (**)(char *, char *, unint64_t))(v146 + 16);
      uint64_t v175 = (char *)(v146 + 16);
      uint64_t v98 = (uint64_t)v135;
      uint64_t v176 = v97;
      v97(v135, v96, v14);
      unint64_t isUniquelyReferenced_nonNull_native = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CollectionDifference<CRKeyPath> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>);
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v99 = v136;
      *(void *)(v98 + *(int *)(v136 + 36)) = v177;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v98, (uint64_t)v13, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
      uint64_t v100 = &v13[*(int *)(v99 + 36)];
      uint64_t v101 = *(void **)v100;
      dispatch thunk of Collection.endIndex.getter();
      if (v101 == v177)
      {
LABEL_52:
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
        swift_bridgeObjectRelease();
        uint64_t v103 = v145;
        dispatch thunk of Collection.startIndex.getter();
        dispatch thunk of Collection.endIndex.getter();
        BOOL v104 = v177 != (void *)v178;
        (*(void (**)(char *, unint64_t))(v146 + 8))(v103, v14);
        swift_bridgeObjectRelease();
        return v104;
      }
      uint64_t v172 = (void (**)(char *, char *, uint64_t))(v166 + 32);
      char v173 = (void *)(v166 + 8);
      uint64_t v174 = (void (**)(char *, unint64_t))(v146 + 8);
      uint64_t v168 = (void (**)(char *, char *, uint64_t))(v166 + 16);
      v166 += 56;
      uint64_t v165 = (void (**)(char *, uint64_t))(v132 + 8);
      uint64_t v164 = (char *)(v133 + 8);
      double v24 = (char *)&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change;
      *(void *)&long long v102 = 138412290;
      long long v162 = v102;
      while (1)
      {
        id v107 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
        uint64_t v108 = v156;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v109, v156, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
        v107(&v177, 0);
        uint64_t v110 = v155;
        v176(v155, v13, v14);
        dispatch thunk of Collection.formIndex(after:)();
        (*v174)(v110, v14);
        uint64_t v111 = v108;
        id v112 = v157;
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v111, (uint64_t)v157, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
        LODWORD(v110) = swift_getEnumCaseMultiPayload();
        uint64_t v13 = *v112;
        id v113 = (char *)v112
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CRKeyPath, associatedWith: Int?))
                      + 48);
        if (v110 == 1)
        {
          CROrderedSet.remove(at:)((Swift::Int)v13);
          ((void (*)(char *, uint64_t))*v173)(v113, v25);
        }
        else
        {
          uint64_t v114 = (uint64_t)v158;
          (*v172)(v158, v113, v25);
          if (!v41[2]) {
            goto LABEL_71;
          }
          unint64_t v115 = specialized __RawDictionaryStorage.find<A>(_:)(v114);
          if ((v116 & 1) == 0) {
            goto LABEL_72;
          }
          id v117 = *(id *)(v41[7] + 8 * v115);
          if (objc_msgSend(v117, sel_isSynthesizedFormField))
          {
            ((void (*)(char *, uint64_t))*v173)(v158, v25);
          }
          else
          {
            if (!PDFAnnotation.shouldMirrorAsPDFAnnotationElement()())
            {
              if (one-time initialization token for logger != -1) {
                swift_once();
              }
              uint64_t v125 = type metadata accessor for Logger();
              __swift_project_value_buffer(v125, (uint64_t)logger);
              id v126 = v117;
              id v127 = Logger.logObject.getter();
              os_log_type_t v128 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v127, v128))
              {
                uint64_t v129 = swift_slowAlloc();
                BOOL v130 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v129 = v162;
                *(void *)(v129 + 4) = v126;
                *BOOL v130 = v126;

                _os_log_impl(&dword_20C2D7000, v127, v128, "PaperKit trying to update unknown annotation type: %@", (uint8_t *)v129, 0xCu);
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
                swift_arrayDestroy();
                MEMORY[0x210550270](v130, -1, -1);
                MEMORY[0x210550270](v129, -1, -1);
              }
              else
              {
              }
              unint64_t v14 = v167;
              uint64_t v13 = v171;
              uint64_t v131 = v158;

              ((void (*)(char *, uint64_t))*v173)(v131, v25);
              goto LABEL_55;
            }
            id v118 = (PDFAnnotation *)v117;
            uint64_t v170 = v118;
            swift_retain();
            PDFAnnotationElement.init(_:)(v118, v140);
            id v119 = *v168;
            id v120 = v150;
            (*v168)(v150, v158, v169);
            (*(void (**)(char *, void, uint64_t, uint64_t))v166)(v120, 0, 1, v169);
            lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (void (*)(uint64_t))type metadata accessor for PDFAnnotationElement);
            id v121 = v138;
            uint64_t v25 = v169;
            Ref.init<A>(_:_:identity:)();
            (*v165)(v121, v139);
            LOBYTE(v177) = 8;
            uint64_t v122 = v158;
            v119(v137, v158, v25);
            double v24 = (char *)&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change;
            lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
            uint64_t v123 = v142;
            SharedTagged_9.init(_:id:)();
            CROrderedSet.insert(_:at:)();

            CGRect v124 = v123;
            unint64_t v14 = v167;
            (*(void (**)(char *, uint64_t))v164)(v124, v143);
            ((void (*)(char *, uint64_t))*v173)(v122, v25);
          }
        }
        uint64_t v13 = v171;
LABEL_55:
        id v106 = *(void **)v100;
        dispatch thunk of Collection.endIndex.getter();
        if (v106 == v177) {
          goto LABEL_52;
        }
      }
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v86, isUniquelyReferenced_nonNull_native);
  unint64_t v88 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v174);
  if ((v87 & 1) == (v89 & 1))
  {
    unint64_t v14 = v88;
    char v41 = v177;
    if ((v87 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_5;
  }
LABEL_77:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PaperDocumentPage()
{
  return CRStruct_9.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PaperDocumentPage()
{
  return CRStruct_9.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F173A0](a1, v2);
}

__n128 protocol witness for static CRStruct_Base_9.fields.getter in conformance PaperDocumentPage@<Q0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  *(_OWORD *)&unsigned char v27[16] = xmmword_2676CA938;
  long long v28 = *(_OWORD *)&qword_2676CA948;
  *(_OWORD *)uint64_t v29 = *(_OWORD *)&qword_2676CA958;
  *(void *)&v29[16] = qword_2676CA968;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&qword_2676CA8F8;
  *(_OWORD *)&v25[16] = *(_OWORD *)&qword_2676CA908;
  long long v26 = xmmword_2676CA918;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)&qword_2676CA928;
  long long v22 = xmmword_2676CA8B8;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)&qword_2676CA8C8;
  *(_OWORD *)&v23[16] = xmmword_2676CA8D8;
  long long v24 = *(_OWORD *)&qword_2676CA8E8;
  *(_OWORD *)uint64_t v21 = static PaperDocumentPage.fields;
  *(_OWORD *)&v21[16] = *(_OWORD *)&qword_2676CA8A8;
  uint64_t v2 = static PaperDocumentPage.fields;
  uint64_t v3 = unk_2676CA8B0;
  uint64_t v4 = qword_2676CA8C8;
  uint64_t v5 = *((void *)&xmmword_2676CA8D8 + 1);
  uint64_t v6 = qword_2676CA8F8;
  uint64_t v7 = unk_2676CA910;
  uint64_t v8 = qword_2676CA928;
  uint64_t v9 = *((void *)&xmmword_2676CA938 + 1);
  uint64_t v10 = qword_2676CA958;
  long long v12 = *(_OWORD *)&v21[8];
  long long v13 = xmmword_2676CA8B8;
  long long v14 = *(_OWORD *)&v23[8];
  long long v15 = *(_OWORD *)&qword_2676CA8E8;
  long long v16 = *(_OWORD *)&v25[8];
  long long v17 = xmmword_2676CA918;
  long long v18 = *(_OWORD *)&v27[8];
  long long v19 = *(_OWORD *)&qword_2676CA948;
  __n128 v20 = *(__n128 *)&v29[8];
  outlined retain of ((String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGRect>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CGFloat>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<PDFPageID?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<PaperDocumentPage, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<[CRKeyPath]>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<PaperDocumentPage, CRRegister<CanvasElementFlags>>))((uint64_t)v21);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(void *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(void *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(void *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(void *)(a1 + 192) = v10;
  __n128 result = v20;
  *(__n128 *)(a1 + 200) = v20;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F17400](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance PaperDocumentPage()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 52);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance PaperDocumentPage())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRDT.context.getter in conformance PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F173B0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F173C8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F173F8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F173D0](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F173F0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F173D8](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F173A8](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F17390](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PaperDocumentPage()
{
  lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return CRStruct_9.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F17398](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  return MEMORY[0x270F173E0](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PaperDocumentPage()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PaperDocumentPage()
{
  return CRDT.init(serializedData:)();
}

uint64_t PaperDocumentPage.shared(_:)(uint64_t a1)
{
  return PaperDocumentPage.shared(_:)(a1, 7, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, MEMORY[0x263F32E58]);
}

{
  return PaperDocumentPage.shared(_:)(a1, 2, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, MEMORY[0x263F32E28]);
}

uint64_t PaperDocumentPage.pageIndex.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (uint64_t *)((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.getter();
  uint64_t v3 = type metadata accessor for PDFPageID();
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v2, &demangling cache variable for type metadata for PDFPageID?);
    return 0;
  }
  else
  {
    uint64_t v4 = *v2;
    outlined destroy of PaperDocumentPage((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  }
  return v4;
}

uint64_t PaperDocumentPage.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRAsset();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t PaperDocumentPage.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 624) = v6;
  *(void *)(v7 + 616) = a6;
  *(void *)(v7 + 608) = a5;
  *(void *)(v7 + 600) = a3;
  *(void *)(v7 + 592) = a2;
  *(void *)(v7 + 584) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  *(void *)(v7 + 632) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PDFPageID();
  *(void *)(v7 + 640) = v9;
  *(void *)(v7 + 648) = *(void *)(v9 - 8);
  *(void *)(v7 + 656) = swift_task_alloc();
  *(unsigned char *)(v7 + 91) = *(unsigned char *)a4;
  *(unsigned char *)(v7 + 92) = *(unsigned char *)(a4 + 1);
  *(unsigned char *)(v7 + 93) = *(unsigned char *)(a4 + 2);
  *(void *)(v7 + 664) = *(void *)(a4 + 8);
  *(unsigned char *)(v7 + 94) = *(unsigned char *)(a4 + 16);
  long long v10 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(v7 + 672) = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v7 + 688) = v10;
  *(unsigned char *)(v7 + 95) = *(unsigned char *)(a4 + 56);
  *(unsigned char *)(v7 + 744) = *(unsigned char *)(a4 + 72);
  *(unsigned char *)(v7 + 745) = *(unsigned char *)(a4 + 73);
  *(unsigned char *)(v7 + 746) = *(unsigned char *)(a4 + 74);
  return MEMORY[0x270FA2498](PaperDocumentPage.render<A>(in:id:capsule:options:), 0, 0);
}

uint64_t PaperDocumentPage.render<A>(in:id:capsule:options:)()
{
  uint64_t v48 = v0;
  uint64_t v1 = *(void *)(v0 + 648);
  uint64_t v2 = *(void *)(v0 + 640);
  uint64_t v3 = *(void *)(v0 + 632);
  *(void *)(v0 + 704) = type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 632), &demangling cache variable for type metadata for PDFPageID?);
    *(void *)(v0 + 728) = 0;
    char v4 = *(unsigned char *)(v0 + 94);
    CGContextSaveGState(*(CGContextRef *)(v0 + 584));
    if (v4)
    {
      uint64_t v5 = *(CGContext **)(v0 + 584);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.wrappedValue.getter();
      CGFloat v6 = *(double *)(v0 + 560);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      double v7 = *(double *)(v0 + 528);
      double v8 = *(double *)(v0 + 536);
      CGFloat v44 = *(double *)(v0 + 552);
      CGFloat v45 = *(double *)(v0 + 544);
      CGAffineTransformMakeRotation(&v47, v6);
      CGFloat a = v47.a;
      CGFloat b = v47.b;
      CGFloat c = v47.c;
      CGFloat d = v47.d;
      tCGFloat x = v47.tx;
      tdouble y = v47.ty;
      *(CGFloat *)(v0 + 480) = v47.a;
      *(CGFloat *)(v0 + 488) = b;
      *(CGFloat *)(v0 + 496) = c;
      *(CGFloat *)(v0 + 504) = d;
      *(CGFloat *)(v0 + 512) = tx;
      *(CGFloat *)(v0 + 520) = ty;
      v50.origin.CGFloat x = v7;
      v50.origin.double y = v8;
      v50.size.double height = v44;
      v50.size.CGFloat width = v45;
      CGRect v51 = CGRectApplyAffineTransform(v50, (CGAffineTransform *)(v0 + 480));
      CGAffineTransformMakeTranslation(&v47, v7 - v51.origin.x, v8 - v51.origin.y);
      long long v15 = *(_OWORD *)&v47.a;
      long long v16 = *(_OWORD *)&v47.c;
      long long v17 = *(_OWORD *)&v47.tx;
      *(CGFloat *)(v0 + 432) = a;
      *(CGFloat *)(v0 + 440) = b;
      *(CGFloat *)(v0 + 448) = c;
      *(CGFloat *)(v0 + 456) = d;
      *(CGFloat *)(v0 + 464) = tx;
      *(CGFloat *)(v0 + 472) = ty;
      *(_OWORD *)(v0 + 144) = v15;
      *(_OWORD *)(v0 + 160) = v16;
      *(_OWORD *)(v0 + 176) = v17;
      CGAffineTransformConcat(&v47, (CGAffineTransform *)(v0 + 432), (CGAffineTransform *)(v0 + 144));
      long long v18 = *(_OWORD *)&v47.c;
      long long v19 = *(_OWORD *)&v47.tx;
      *(_OWORD *)(v0 + 384) = *(_OWORD *)&v47.a;
      *(_OWORD *)(v0 + 400) = v18;
      *(_OWORD *)(v0 + 416) = v19;
      CGContextConcatCTM(v5, (CGAffineTransform *)(v0 + 384));
    }
    __n128 v20 = *(void **)(v0 + 664);
    CGContextRestoreGState(*(CGContextRef *)(v0 + 584));
    id v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned char *)(v0 + 576) & 0x20) != 0)
    {

      uint64_t v42 = *(void **)(v0 + 728);
      swift_task_dealloc();
      swift_task_dealloc();
      id v43 = *(uint64_t (**)(void))(v0 + 8);
      return v43();
    }
    else
    {
      long long v22 = *(_OWORD *)(v0 + 688);
      *(_OWORD *)(v0 + 40) = *(_OWORD *)(v0 + 672);
      char v23 = *(unsigned char *)(v0 + 746);
      char v24 = *(unsigned char *)(v0 + 745);
      char v25 = *(unsigned char *)(v0 + 744);
      char v26 = *(unsigned char *)(v0 + 95);
      char v27 = *(unsigned char *)(v0 + 94);
      uint64_t v28 = *(void *)(v0 + 664);
      char v29 = *(unsigned char *)(v0 + 93);
      char v30 = *(unsigned char *)(v0 + 92);
      *(unsigned char *)(v0 + 16) = *(unsigned char *)(v0 + 91);
      *(unsigned char *)(v0 + 17) = v30;
      *(unsigned char *)(v0 + 18) = v29;
      *(void *)(v0 + 24) = v28;
      *(unsigned char *)(v0 + 32) = v27;
      *(_OWORD *)(v0 + 56) = v22;
      *(unsigned char *)(v0 + 72) = v26;
      *(void *)(v0 + 80) = 0;
      *(unsigned char *)(v0 + 88) = v25;
      *(unsigned char *)(v0 + 89) = v24;
      *(unsigned char *)(v0 + 90) = v23;
      uint64_t v31 = (void *)swift_task_alloc();
      *(void *)(v0 + 736) = v31;
      *uint64_t v31 = v0;
      v31[1] = PaperDocumentPage.render<A>(in:id:capsule:options:);
      uint64_t v32 = *(void *)(v0 + 704);
      uint64_t v33 = *(void *)(v0 + 616);
      uint64_t v34 = *(void *)(v0 + 608);
      uint64_t v35 = *(void *)(v0 + 600);
      uint64_t v36 = *(void *)(v0 + 584);
      return ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(v36, v35, (_OWORD *)(v0 + 16), v32, v34, (uint64_t)&protocol witness table for PaperDocumentPage, v33);
    }
  }
  else
  {
    uint64_t v38 = *(void *)(v0 + 656);
    uint64_t v39 = *(void *)(v0 + 640);
    outlined init with take of PDFPageID(*(void *)(v0 + 632), v38);
    uint64_t v40 = v38 + *(int *)(v39 + 20);
    CGAffineTransform transform = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static PaperKitPDFDocument._load(_:)
                                                + async function pointer to specialized static PaperKitPDFDocument._load(_:));
    char v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 712) = v41;
    *char v41 = v0;
    v41[1] = PaperDocumentPage.render<A>(in:id:capsule:options:);
    return transform(v40);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  int v4;
  CGContext *v5;
  CGFloat v6;
  double v7;
  double v8;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CGContext *v25;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinY;
  CGFloat MaxY;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  char v42;
  char v43;
  uint64_t v44;
  void *v45;
  char v46;
  char v47;
  char v48;
  id v49;
  long long v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v58;
  uint64_t (*v59)(void);
  CGFloat v60;
  CGFloat v61;
  char v62;
  char transform;
  char v64;
  unint64_t v65;
  CGAffineTransform v66;
  unsigned char v67[27];
  uint64_t v68;
  uint64_t v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;

  unint64_t v68 = v0;
  uint64_t v1 = *(void **)(v0 + 720);
  uint64_t v2 = *(void **)(v0 + 656);
  if (v1)
  {
    uint64_t v3 = objc_msgSend(*(id *)(v0 + 720), sel_pageAtIndex_, *v2);

    outlined destroy of PaperDocumentPage((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    if (v3)
    {
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v1 = (void *)swift_dynamicCastClass();
      if (!v1) {
    }
      }
    else
    {
      uint64_t v1 = 0;
    }
  }
  else
  {
    outlined destroy of PaperDocumentPage(*(void *)(v0 + 656), (uint64_t (*)(void))type metadata accessor for PDFPageID);
  }
  *(void *)(v0 + 728) = v1;
  char v4 = *(unsigned __int8 *)(v0 + 94);
  CGContextSaveGState(*(CGContextRef *)(v0 + 584));
  if (v4 == 1)
  {
    uint64_t v5 = *(CGContext **)(v0 + 584);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    CGFloat v6 = *(double *)(v0 + 560);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    double v7 = *(double *)(v0 + 528);
    double v8 = *(double *)(v0 + 536);
    uint64_t v60 = *(double *)(v0 + 552);
    uint64_t v61 = *(double *)(v0 + 544);
    CGAffineTransformMakeRotation(&v66, v6);
    CGFloat a = v66.a;
    CGFloat b = v66.b;
    CGFloat c = v66.c;
    CGFloat d = v66.d;
    tCGFloat x = v66.tx;
    tdouble y = v66.ty;
    *(CGFloat *)(v0 + 480) = v66.a;
    *(CGFloat *)(v0 + 488) = b;
    *(CGFloat *)(v0 + 496) = c;
    *(CGFloat *)(v0 + 504) = d;
    *(CGFloat *)(v0 + 512) = tx;
    *(CGFloat *)(v0 + 520) = ty;
    v70.origin.CGFloat x = v7;
    v70.origin.double y = v8;
    v70.size.double height = v60;
    v70.size.CGFloat width = v61;
    CGFloat v71 = CGRectApplyAffineTransform(v70, (CGAffineTransform *)(v0 + 480));
    CGAffineTransformMakeTranslation(&v66, v7 - v71.origin.x, v8 - v71.origin.y);
    long long v15 = *(_OWORD *)&v66.a;
    long long v16 = *(_OWORD *)&v66.c;
    long long v17 = *(_OWORD *)&v66.tx;
    *(CGFloat *)(v0 + 432) = a;
    *(CGFloat *)(v0 + 440) = b;
    *(CGFloat *)(v0 + 448) = c;
    *(CGFloat *)(v0 + 456) = d;
    *(CGFloat *)(v0 + 464) = tx;
    *(CGFloat *)(v0 + 472) = ty;
    *(_OWORD *)(v0 + 144) = v15;
    *(_OWORD *)(v0 + 160) = v16;
    *(_OWORD *)(v0 + 176) = v17;
    CGAffineTransformConcat(&v66, (CGAffineTransform *)(v0 + 432), (CGAffineTransform *)(v0 + 144));
    long long v18 = *(_OWORD *)&v66.c;
    long long v19 = *(_OWORD *)&v66.tx;
    *(_OWORD *)(v0 + 384) = *(_OWORD *)&v66.a;
    *(_OWORD *)(v0 + 400) = v18;
    *(_OWORD *)(v0 + 416) = v19;
    CGContextConcatCTM(v5, (CGAffineTransform *)(v0 + 384));
  }
  if (v1)
  {
    __n128 v20 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned char *)(v0 + 568) & 0x20) == 0)
    {
      id v21 = *(void *)(v0 + 616);
      long long v22 = *(void *)(v0 + 608);
      char v23 = *(void *)(v0 + 600);
      char v24 = *(void *)(v0 + 592);
      BOOL v65 = 0x8000000000000000;
      *(_OWORD *)&v66.CGFloat a = xmmword_20C834980;
      memset(&v66.c, 0, 32);
      memset(v67, 0, sizeof(v67));
      PaperDocumentPage.update<A>(pdfPage:id:use:in:options:)(v20, v24, &v65, v23, (uint64_t *)&v66, v22, v21);
    }
    char v25 = *(CGContext **)(v0 + 584);
    CGContextSaveGState(v25);
    objc_msgSend(v20, sel_boundsForBox_, 0);
    CGFloat x = v72.origin.x;
    double y = v72.origin.y;
    CGFloat width = v72.size.width;
    double height = v72.size.height;
    double MinY = CGRectGetMinY(v72);
    v73.origin.CGFloat x = x;
    v73.origin.double y = y;
    v73.size.CGFloat width = width;
    v73.size.double height = height;
    double MaxY = CGRectGetMaxY(v73);
    *(void *)(v0 + 192) = 0x3FF0000000000000;
    *(void *)(v0 + 200) = 0;
    *(void *)(v0 + 208) = 0;
    *(void *)(v0 + 216) = 0x3FF0000000000000;
    *(void *)(v0 + 224) = 0;
    *(void *)(v0 + 232) = 0;
    *(void *)(v0 + 240) = 0x3FF0000000000000;
    *(void *)(v0 + 248) = 0;
    *(void *)(v0 + 256) = 0;
    *(void *)(v0 + 264) = 0xBFF0000000000000;
    *(void *)(v0 + 272) = 0;
    *(double *)(v0 + 280) = MinY + MaxY;
    CGAffineTransformConcat(&v66, (CGAffineTransform *)(v0 + 192), (CGAffineTransform *)(v0 + 240));
    uint64_t v32 = *(_OWORD *)&v66.c;
    uint64_t v33 = *(_OWORD *)&v66.tx;
    *(_OWORD *)(v0 + 288) = *(_OWORD *)&v66.a;
    *(_OWORD *)(v0 + 304) = v32;
    *(_OWORD *)(v0 + 320) = v33;
    CGContextConcatCTM(v25, (CGAffineTransform *)(v0 + 288));
    objc_msgSend(v20, sel_transformForBox_, 1);
    uint64_t v34 = *(_OWORD *)&v66.c;
    uint64_t v35 = *(_OWORD *)&v66.tx;
    *(_OWORD *)(v0 + 336) = *(_OWORD *)&v66.a;
    *(_OWORD *)(v0 + 352) = v34;
    *(_OWORD *)(v0 + 368) = v35;
    CGAffineTransformInvert(&v66, (CGAffineTransform *)(v0 + 336));
    uint64_t v36 = *(_OWORD *)&v66.c;
    uint64_t v37 = *(_OWORD *)&v66.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v66.a;
    *(_OWORD *)(v0 + 112) = v36;
    *(_OWORD *)(v0 + 128) = v37;
    CGContextConcatCTM(v25, (CGAffineTransform *)(v0 + 96));
    objc_msgSend(v20, sel_drawWithBox_inContext_, 1, v25);
    CGContextRestoreGState(v25);
  }
  uint64_t v38 = *(void **)(v0 + 664);
  CGContextRestoreGState(*(CGContextRef *)(v0 + 584));
  uint64_t v39 = v38;
  uint64_t v40 = v1;
  char v41 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  if ((*(unsigned char *)(v0 + 576) & 0x20) != 0)
  {

    unint64_t v58 = *(void **)(v0 + 728);
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v59 = *(uint64_t (**)(void))(v0 + 8);
    return v59();
  }
  else
  {
    uint64_t v64 = *(unsigned char *)(v0 + 746);
    CGAffineTransform transform = *(unsigned char *)(v0 + 745);
    id v62 = *(unsigned char *)(v0 + 744);
    uint64_t v42 = *(unsigned char *)(v0 + 95);
    id v43 = *(unsigned char *)(v0 + 94);
    CGFloat v44 = *(void *)(v0 + 664);
    CGFloat v45 = v1;
    unint64_t v46 = *(unsigned char *)(v0 + 93);
    CGAffineTransform v47 = *(unsigned char *)(v0 + 92);
    uint64_t v48 = *(unsigned char *)(v0 + 91);
    uint64_t v49 = v40;
    CGRect v50 = *(_OWORD *)(v0 + 688);
    *(_OWORD *)(v0 + 40) = *(_OWORD *)(v0 + 672);
    *(unsigned char *)(v0 + 16) = v48;
    *(unsigned char *)(v0 + 17) = v47;
    *(unsigned char *)(v0 + 18) = v46;
    *(void *)(v0 + 24) = v44;
    *(unsigned char *)(v0 + 32) = v43;
    *(_OWORD *)(v0 + 56) = v50;
    *(unsigned char *)(v0 + 72) = v42;
    *(void *)(v0 + 80) = v45;
    *(unsigned char *)(v0 + 88) = v62;
    *(unsigned char *)(v0 + 89) = transform;
    *(unsigned char *)(v0 + 90) = v64;
    CGRect v51 = (void *)swift_task_alloc();
    *(void *)(v0 + 736) = v51;
    *CGRect v51 = v0;
    v51[1] = PaperDocumentPage.render<A>(in:id:capsule:options:);
    char v52 = *(void *)(v0 + 704);
    uint64_t v53 = *(void *)(v0 + 616);
    uint64_t v54 = *(void *)(v0 + 608);
    double v55 = *(void *)(v0 + 600);
    double v56 = *(void *)(v0 + 584);
    return ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(v56, v55, (_OWORD *)(v0 + 16), v52, v54, (uint64_t)&protocol witness table for PaperDocumentPage, v53);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v4;

  uint64_t v1 = *(void **)(*(void *)v0 + 728);
  uint64_t v2 = *(void **)(*(void *)v0 + 664);
  swift_task_dealloc();

  return MEMORY[0x270FA2498](PaperDocumentPage.render<A>(in:id:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 728);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t PaperDocumentPage.render<A>(in:id:capsule:options:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 720) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](PaperDocumentPage.render<A>(in:id:capsule:options:), 0, 0);
}

uint64_t PaperDocumentPage.pdfContentsBounds.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.getter();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  }
  TaggedValue_2.tagged1.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v2, v3);
}

uint64_t protocol witness for ContainerCanvasElement.drawing.getter in conformance PaperDocumentPage()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for ContainerCanvasElement.drawing.setter in conformance PaperDocumentPage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t (*protocol witness for ContainerCanvasElement.drawing.modify in conformance PaperDocumentPage(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for ContainerCanvasElement.subelements.getter in conformance PaperDocumentPage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for ContainerCanvasElement.subelements.setter in conformance PaperDocumentPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for ContainerCanvasElement.subelements.modify in conformance PaperDocumentPage())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*protocol witness for CanvasElement.frame.modify in conformance PaperDocumentPage(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t (*protocol witness for CanvasElement.rotation.modify in conformance PaperDocumentPage(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for CanvasElement.flags.getter in conformance PaperDocumentPage()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for CanvasElement.flags.setter in conformance PaperDocumentPage()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*protocol witness for CanvasElement.flags.modify in conformance PaperDocumentPage(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance PaperDocumentPage(a1, a2, a3, 7, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, MEMORY[0x263F32E58]);
}

double protocol witness for PaperRenderable.frame.getter in conformance PaperDocumentPage()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *long long v13 = v6;
  v13[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return PaperDocumentPage.render<A>(in:id:capsule:options:)(a1, a2, a3, a4, a5, a6);
}

uint64_t PaperDocumentPage.shared(_:)(uint64_t a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v10 = type metadata accessor for CRKeyPath();
  double v11 = MEMORY[0x270FA5388](v10);
  long long v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = a2;
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, double))(v14 + 16))(v13, a1, v11);
  uint64_t v16 = a3(v15);
  return a5(&v19, v13, a4, v16);
}

uint64_t closure #1 in PaperDocumentPage.finishDecode(from:pageID:assetManager:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return MEMORY[0x21054BDF0](v0);
}

uint64_t protocol witness for CanvasElement.frame.setter in conformance PaperDocumentPage()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t protocol witness for ContainerCanvasElement.pdfContentsBounds.getter in conformance PaperDocumentPage()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.getter();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  }
  TaggedValue_2.tagged1.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v2, v3);
}

double protocol witness for CanvasElement.rotation.getter in conformance PaperDocumentPage()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for CanvasElement.rotation.setter in conformance PaperDocumentPage()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t protocol witness for PaperPage.pdfPageID.getter in conformance PaperDocumentPage()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for PaperPage.importElements<A>(_:in:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ContainerCanvasElement.importElements<A>(_:in:)(a1, a2, a5, (uint64_t)&protocol witness table for PaperDocumentPage);
}

uint64_t protocol witness for PaperPage.shared(_:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance PaperDocumentPage(a1, a2, a3, 2, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, MEMORY[0x263F32E28]);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t (*a7)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v12 = type metadata accessor for CRKeyPath();
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v21 = a4;
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, double))(v16 + 16))(v15, a1, v13);
  uint64_t v18 = a5(v17);
  return a7(&v21, v15, a6, v18);
}

void ContainerCanvasElement.importAnnotations<A>(from:in:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v8 = swift_dynamicCastClass();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    id v10 = a1;
    ContainerCanvasElement.importAnnotations<A>(from:in:assetManager:)(v9, a2, 0, a3, a4);
  }
}

void ContainerCanvasElement.importAnnotations<A>(from:in:assetManager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v10 = swift_dynamicCastClass();
  if (v10)
  {
    double v11 = (void *)v10;
    id v12 = a1;
    ContainerCanvasElement._importAnnotations<A>(from:in:assetManager:)(v11, a2, a3, a4, a5);
  }
}

uint64_t ContainerCanvasElement._importAnnotations<A>(from:in:assetManager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend(a1, sel_boundsForBox_, 0);
  static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(a1, a2, a3, 1.0, v10, v11, v12, v13);
  ContainerCanvasElement.importElements<A>(_:in:)(v14, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t specialized PaperPage.axisAlignedRotationInDegrees.getter()
{
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t result = CRRegister.wrappedValue.getter();
  double v1 = round((v3 + v3) / 3.14159265);
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v2 = (uint64_t)v1 & 3;
  if ((uint64_t)v1 <= 0) {
    uint64_t v2 = -(-(uint64_t)v1 & 3);
  }
  if (v2 >= 0) {
    return 90 * v2;
  }
  else {
    return 90 * v2 + 360;
  }
}

uint64_t specialized PaperPage.axisAlignedRotationInDegrees.getter(void (*a1)(void))
{
  a1(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t result = CRRegister.wrappedValue.getter();
  double v2 = round((v4 + v4) / 3.14159265);
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v3 = (uint64_t)v2 & 3;
  if ((uint64_t)v2 <= 0) {
    uint64_t v3 = -(-(uint64_t)v2 & 3);
  }
  if (v3 >= 0) {
    return 90 * v3;
  }
  else {
    return 90 * v3 + 360;
  }
}

uint64_t protocol witness for PaperPage.importElements<A>(_:in:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ContainerCanvasElement.importElements<A>(_:in:)(a1, a2, a5, (uint64_t)&protocol witness table for Image);
}

uint64_t protocol witness for PaperPage.importElements<A>(_:in:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ContainerCanvasElement.importElements<A>(_:in:)(a1, a2, a5, (uint64_t)&protocol witness table for Paper);
}

unint64_t lazy protocol witness table accessor for type [WeakRef<PDFAnnotationElement>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [WeakRef<PDFAnnotationElement>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [WeakRef<PDFAnnotationElement>] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [WeakRef<PDFAnnotationElement>]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [WeakRef<PDFAnnotationElement>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CRKeyPath]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad> and conformance TaggedValue_2<A, B>, &demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type PDFPageID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type PDFPageID? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PDFPageID?);
    lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (void (*)(uint64_t))type metadata accessor for PDFPageID);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID? and conformance <A> A?);
  }
  return result;
}

void outlined consume of PaperDocument.PDFDocumentUse(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1) {
      return;
    }
    a1 &= 0x3FFFFFFFFFFFFFFFuLL;
  }
}

unint64_t outlined consume of PaperKitPDFPage.AnnotationIDState(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized PaperDocumentPage.finishDecode(from:pageID:assetManager:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x270FA5388](v7);
  double v10 = (char *)v25 - v9;
  objc_msgSend(a1, sel_boundsForBox_, 1, v8);
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  v27.origin.double y = v19;
  v27.size.double height = v20;
  v26.origin.CGFloat x = v12;
  v26.origin.double y = v14;
  v26.size.CGFloat width = v16;
  v26.size.double height = v18;
  PaperDocumentPage.setContentsBounds(_:fullBounds:)(v26, v27);
  specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)objc_msgSend(a1, sel_rotation));
  outlined init with copy of PaperDocumentPage(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  uint64_t v21 = type metadata accessor for PDFPageID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 0, 1, v21);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v6, &demangling cache variable for type metadata for PDFPageID?);
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PDFPageID?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  type metadata accessor for CRKeyPath();
  v25[0] = CROrderedSet.map<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  CRRegister.wrappedValue.setter();
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v22 = swift_dynamicCastClass();
  if (v22)
  {
    uint64_t v23 = v22;
    CRRegister.wrappedValue.getter();
    if (*(void *)(v23 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)(v23 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState) = v25[0];
      outlined consume of PaperKitPDFPage.AnnotationIDState(0);
    }
  }
  return 1;
}

uint64_t base witness table accessor for CRStruct_Base_9 in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
}

uint64_t base witness table accessor for CRStruct_Base in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_4 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<PDFPageID?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<PDFPageID?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_5 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_6 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_7 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<[CRKeyPath]> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_8 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<TaggedValue_2<CGRect, Quad>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_9.Type_9 : CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<CanvasElementFlags> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
}

uint64_t base witness table accessor for CRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
}

uint64_t base witness table accessor for CRMergeable in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
}

uint64_t base witness table accessor for CRType in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_9<PaperDocumentPage> and conformance CRStructMergeableDelta_9<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_9<PaperDocumentPage>);
}

uint64_t base witness table accessor for CRCodable in PaperDocumentPage()
{
  return lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
}

uint64_t sub_20C40CAE4()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C40CB28()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C40CB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_11Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C40CB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_11Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_11Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for PaperDocumentPage();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  return a4(v5);
}

uint64_t sub_20C40CC14()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C40CC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_19Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C40CC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_19Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_19Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for PaperDocumentPage();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  return a4(v5);
}

uint64_t sub_20C40CCF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_23Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C40CD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_23Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_23Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for PaperDocumentPage();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return a4(v5);
}

uint64_t sub_20C40CD90()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C40CDEC()
{
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for PaperDocumentPage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v37 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    double v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    double v10 = (char *)a1 + v9;
    double v11 = (char *)a2 + v9;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    CGFloat v14 = (char *)a1 + v13;
    double v15 = (char *)a2 + v13;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[8];
    CGFloat v18 = (char *)a1 + v17;
    CGFloat v19 = (char *)a2 + v17;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = a3[9];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    uint64_t v25 = a3[10];
    __C::CGRect v26 = (char *)a1 + v25;
    __C::CGRect v27 = (char *)a2 + v25;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
    uint64_t v29 = a3[11];
    char v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
    uint64_t v33 = a3[12];
    uint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
    *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PaperDocumentPage(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = a1 + a2[9];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = a1 + a2[10];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = a1 + a2[11];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = a1 + a2[12];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PaperDocumentPage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
  uint64_t v32 = a3[12];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PaperDocumentPage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 24))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  uint64_t v32 = a3[12];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 24))(v33, v34, v35);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PaperDocumentPage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
  uint64_t v32 = a3[12];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for PaperDocumentPage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 40))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  uint64_t v32 = a3[12];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 40))(v33, v34, v35);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C40DEF0);
}

uint64_t sub_20C40DEF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_18:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_17:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_18;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_17;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_17;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_17;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v12 = *(void *)(v17 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_17;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a2)
  {
    uint64_t v8 = v18;
    uint64_t v12 = *(void *)(v18 - 8);
    uint64_t v13 = a3[11];
    goto LABEL_17;
  }
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a2)
  {
    uint64_t v8 = v19;
    uint64_t v12 = *(void *)(v19 - 8);
    uint64_t v13 = a3[12];
    goto LABEL_17;
  }
  unint64_t v21 = *(void *)(a1 + a3[13]);
  if (v21 >= 0xFFFFFFFF) {
    LODWORD(v21) = -1;
  }
  return (v21 + 1);
}

uint64_t storeEnumTagSinglePayload for PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C40E200);
}

uint64_t sub_20C40E200(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[6];
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[7];
      }
      else
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[8];
        }
        else
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
          if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a3)
          {
            uint64_t v10 = v18;
            uint64_t v14 = *(void *)(v18 - 8);
            uint64_t v15 = a4[9];
          }
          else
          {
            uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
            if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a3)
            {
              uint64_t v10 = v19;
              uint64_t v14 = *(void *)(v19 - 8);
              uint64_t v15 = a4[10];
            }
            else
            {
              uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
              if (*(_DWORD *)(*(void *)(v20 - 8) + 84) == a3)
              {
                uint64_t v10 = v20;
                uint64_t v14 = *(void *)(v20 - 8);
                uint64_t v15 = a4[11];
              }
              else
              {
                uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
                if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
                {
                  *(void *)(a1 + a4[13]) = (a2 - 1);
                  return result;
                }
                uint64_t v10 = result;
                uint64_t v14 = *(void *)(result - 8);
                uint64_t v15 = a4[12];
              }
            }
          }
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PaperDocumentPage()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<TaggedValue_2<CGRect, Quad>?>(319, &lazy cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?, (void (*)(void))lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<CGFloat>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<TaggedValue_2<CGRect, Quad>?>(319, &lazy cache variable for type metadata for CRRegister<PDFPageID?>, &demangling cache variable for type metadata for PDFPageID?, (void (*)(void))lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<TaggedValue_2<CGRect, Quad>?>(319, &lazy cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?, (void (*)(void))lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRRegister<CGFloat>(319, &lazy cache variable for type metadata for CRRegister<CanvasElementFlags>, (void (*)(void))lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>();
              if (v6 <= 0x3F)
              {
                type metadata accessor for CRRegister<TaggedValue_2<CGRect, Quad>?>(319, &lazy cache variable for type metadata for CRRegister<[CRKeyPath]>, &demangling cache variable for type metadata for [CRKeyPath], (void (*)(void))lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A]);
                if (v7 <= 0x3F) {
                  swift_initStructMetadata();
                }
              }
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<CGFloat>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for CRRegister();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>()
{
  if (!lazy cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    unint64_t v0 = type metadata accessor for CROrderedSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    }
  }
}

void type metadata accessor for CRRegister<TaggedValue_2<CGRect, Quad>?>(uint64_t a1, unint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    a4();
    unint64_t v6 = type metadata accessor for CRRegister();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined init with copy of PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of PaperDocumentPage(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t type metadata accessor for PDFAnnotation()
{
  unint64_t result = lazy cache variable for type metadata for PDFAnnotation;
  if (!lazy cache variable for type metadata for PDFAnnotation)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PDFAnnotationElement and conformance PDFAnnotationElement(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in static PaperDocumentPage.create<A>(pdfPage:pageID:in:assetManager:importedElements:)()
{
  return closure #1 in PaperDocumentPage.finishDecode(from:pageID:assetManager:)();
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueTypes_BezierPath(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for ValueTypes_BezierPath(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for ValueTypes_BezierPath(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for ValueTypes_BezierPath(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for ValueTypes_BezierPath(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for ValueTypes_BezierPath(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueTypes_BezierPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C40EF40);
}

uint64_t sub_20C40EF40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ValueTypes_BezierPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C40F004);
}

void *sub_20C40F004(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ValueTypes_BezierPath()
{
  uint64_t result = type metadata singleton initialization cache for ValueTypes_BezierPath;
  if (!type metadata singleton initialization cache for ValueTypes_BezierPath) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ValueTypes_BezierPath()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void protocol witness for Enum.init() in conformance ValueTypes_BezierPath.ElementType(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void protocol witness for Enum.init(rawValue:) in conformance ValueTypes_BezierPath.ElementType(uint64_t a1@<X8>)
{
  specialized ValueTypes_BezierPath.ElementType.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance ValueTypes_BezierPath.ElementType()
{
  return *(void *)v0;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance ValueTypes_BezierPath.ElementType(uint64_t a1@<X8>)
{
  specialized ValueTypes_BezierPath.ElementType.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ValueTypes_BezierPath.ElementType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ValueTypes_BezierPath.ElementType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ValueTypes_BezierPath.ElementType()
{
  return Hasher._finalize()();
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ValueTypes_BezierPath._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ValueTypes_BezierPath._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_20C835740;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "elements";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 4;
  *(void *)uint64_t v10 = "coordinates";
  *((void *)v10 + 1) = 11;
  unsigned char v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ValueTypes_BezierPath.ElementType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ValueTypes_BezierPath.ElementType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_20C8387B0;
  uint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "moveTo";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)uint64_t v10 = "lineTo";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "quadCurveTo";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "curveTo";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "closeSubpath";
  *(void *)(v15 + 8) = 12;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t ValueTypes_BezierPath.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 4)
      {
        dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType();
        dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t ValueTypes_BezierPath.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (lazy protocol witness table accessor for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType(),
        uint64_t result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for ValueTypes_BezierPath();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t ValueTypes_BezierPath._protobuf_generated_isEqualTo(other:)(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v15 - v8;
  if ((specialized static Array<A>.== infix(_:_:)(*v1, *a1) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(v1[1], a1[1]))
  {
    uint64_t v10 = type metadata accessor for ValueTypes_BezierPath();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v11(v9, (char *)v1 + *(int *)(v10 + 24), v3);
    v11(v6, (char *)a1 + *(int *)(v10 + 24), v3);
    lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
    v13(v6, v3);
    v13(v9, v3);
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t protocol witness for Message.init() in conformance ValueTypes_BezierPath@<X0>(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance ValueTypes_BezierPath()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance ValueTypes_BezierPath()
{
  return MEMORY[0x270F44C98]();
}

uint64_t protocol witness for Message.unknownFields.getter in conformance ValueTypes_BezierPath@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance ValueTypes_BezierPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance ValueTypes_BezierPath())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance ValueTypes_BezierPath()
{
  return ValueTypes_BezierPath.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance ValueTypes_BezierPath()
{
  return ValueTypes_BezierPath.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.hash(into:) in conformance ValueTypes_BezierPath()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance ValueTypes_BezierPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (void (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ValueTypes_BezierPath@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ValueTypes_BezierPath(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ValueTypes_BezierPath._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ValueTypes_BezierPath(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (void (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ValueTypes_BezierPath()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ValueTypes_BezierPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (void (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ValueTypes_BezierPath()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ValueTypes_BezierPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (void (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath);
  return MEMORY[0x270F44AE0](a1, a2, a3, v6);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ValueTypes_BezierPath.ElementType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ValueTypes_BezierPath(one-time initialization token for _protobuf_nameMap, (uint64_t)static ValueTypes_BezierPath.ElementType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ValueTypes_BezierPath@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t base witness table accessor for Equatable in ValueTypes_BezierPath()
{
  return lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (void (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath);
}

uint64_t base witness table accessor for Message in ValueTypes_BezierPath()
{
  return lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (void (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath);
}

uint64_t base witness table accessor for Hashable in ValueTypes_BezierPath()
{
  return lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (void (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ValueTypes_BezierPath()
{
  return lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (void (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath);
}

unint64_t lazy protocol witness table accessor for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType()
{
  unint64_t result = lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType;
  if (!lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType;
  if (!lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType;
  if (!lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType;
  if (!lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValueTypes_BezierPath.ElementType and conformance ValueTypes_BezierPath.ElementType);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ValueTypes_BezierPath.ElementType(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ValueTypes_BezierPath.ElementType(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for ValueTypes_BezierPath.ElementType(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for ValueTypes_BezierPath.ElementType(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ValueTypes_BezierPath.ElementType()
{
  return &type metadata for ValueTypes_BezierPath.ElementType;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v20 = type metadata accessor for PKStroke();
  uint64_t v6 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v10 = v23;
    unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v11 = a3 + v19;
    uint64_t v18 = *(void *)(v6 + 72);
    char v12 = (void (**)(unint64_t, char *, uint64_t))(v6 + 32);
    while (1)
    {
      v21(v11);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v23 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v23;
      }
      *(void *)(v10 + 16) = v14 + 1;
      uint64_t v15 = v18;
      (*v12)(v10 + v19 + v14 * v18, v8, v20);
      v11 += v15;
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
  }
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12CoreGraphics7CGFloatVG_AHs5NeverOTg5(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v16;
    for (uint64_t i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v14 = *i;
      a1(&v15, &v14);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v15;
      uint64_t v16 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v6 = v16;
      }
      *(void *)(v6 + 16) = v12 + 1;
      *(void *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = (unint64_t *)(a3 + 40);
  while (2)
  {
    uint64_t v8 = *(v7 - 1);
    unint64_t v9 = *v7;
    switch(*v7)
    {
      case 0uLL:
        if (a2) {
          goto LABEL_22;
        }
        uint64_t v12 = *(v7 - 1);
        unint64_t v13 = 0;
        goto LABEL_27;
      case 1uLL:
        if (a2 != 1) {
          goto LABEL_22;
        }
        uint64_t v12 = *(v7 - 1);
        unint64_t v13 = 1;
        goto LABEL_27;
      case 2uLL:
        if (a2 != 2) {
          goto LABEL_22;
        }
        uint64_t v12 = *(v7 - 1);
        unint64_t v13 = 2;
        goto LABEL_27;
      case 3uLL:
        if (a2 != 3) {
          goto LABEL_22;
        }
        uint64_t v12 = *(v7 - 1);
        unint64_t v13 = 3;
        goto LABEL_27;
      case 4uLL:
        if (a2 != 4) {
          goto LABEL_22;
        }
        uint64_t v12 = *(v7 - 1);
        unint64_t v13 = 4;
        goto LABEL_27;
      case 5uLL:
        if (a2 != 5) {
          goto LABEL_22;
        }
        uint64_t v12 = *(v7 - 1);
        unint64_t v13 = 5;
        goto LABEL_27;
      default:
        if (a2 < 6)
        {
LABEL_22:
          outlined copy of SignatureDescription(*(v7 - 1), *v7);
          outlined copy of SignatureDescription(a1, a2);
          outlined consume of SignatureDescription(v8, v9);
          outlined consume of SignatureDescription(a1, a2);
LABEL_23:
          v7 += 2;
          if (v3 == ++v6) {
            return 0;
          }
          continue;
        }
        if (v8 != a1 || v9 != a2)
        {
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of SignatureDescription(v8, v9);
          outlined copy of SignatureDescription(a1, a2);
          outlined consume of SignatureDescription(v8, v9);
          outlined consume of SignatureDescription(a1, a2);
          if (v11) {
            return v6;
          }
          goto LABEL_23;
        }
        outlined copy of SignatureDescription(a1, a2);
        outlined copy of SignatureDescription(a1, a2);
        uint64_t v12 = a1;
        unint64_t v13 = a2;
LABEL_27:
        outlined consume of SignatureDescription(v12, v13);
        outlined consume of SignatureDescription(a1, a2);
        return v6;
    }
  }
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a1;
  uint64_t v3 = type metadata accessor for PDFPageID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v35 = (void **)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?));
  MEMORY[0x270FA5388](v44);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v39 = (uint64_t)&v35 - v12;
  uint64_t v36 = type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  MEMORY[0x270FA5388](v36);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a2 + 16);
  if (!v16) {
    return 0;
  }
  uint64_t v45 = v3;
  uint64_t v37 = v16;
  uint64_t v38 = v10;
  uint64_t v17 = 0;
  uint64_t v18 = a2 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v19 = *(void *)(v13 + 72);
  uint64_t v20 = (uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  uint64_t v21 = v39;
  uint64_t v40 = v20;
  uint64_t v41 = v19;
  uint64_t v42 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v43 = v7;
  while (1)
  {
    uint64_t v23 = v16;
    outlined init with copy of PaperDocument.PDFPageAndPaperPage(v18, (uint64_t)v15);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v46, v21, &demangling cache variable for type metadata for PDFPageID?);
    uint64_t v24 = (uint64_t)&v7[*(int *)(v44 + 48)];
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v15, (uint64_t)v7, &demangling cache variable for type metadata for PDFPageID?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v21, v24, &demangling cache variable for type metadata for PDFPageID?);
    uint64_t v25 = *v20;
    uint64_t v26 = v45;
    if ((*v20)(v7, 1, v45) == 1) {
      break;
    }
    uint64_t v28 = v38;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v38, &demangling cache variable for type metadata for PDFPageID?);
    int v29 = v25((char *)v24, 1, v26);
    uint64_t v22 = &demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
    uint64_t v15 = v42;
    if (v29 == 1) {
      goto LABEL_4;
    }
    uint64_t v30 = v35;
    outlined init with take of PDFPageID(v24, (uint64_t)v35);
    if (*v28 != *v30)
    {
      outlined destroy of PaperDocument.PDFPageAndPaperPage((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      uint64_t v22 = &demangling cache variable for type metadata for PDFPageID?;
LABEL_4:
      uint64_t v21 = v39;
      outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of PaperDocument.PDFPageAndPaperPage((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      uint64_t v16 = v37;
LABEL_5:
      uint64_t v7 = v43;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, v22);
      goto LABEL_6;
    }
    char v31 = static CRAsset.== infix(_:_:)();
    uint64_t v32 = (uint64_t)v30;
    char v33 = v31;
    outlined destroy of PaperDocument.PDFPageAndPaperPage(v32, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v21 = v39;
    outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PaperDocument.PDFPageAndPaperPage((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v7 = v43;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, &demangling cache variable for type metadata for PDFPageID?);
    uint64_t v16 = v37;
    if (v33) {
      goto LABEL_13;
    }
LABEL_6:
    outlined destroy of PaperDocument.PDFPageAndPaperPage((uint64_t)v15, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
    ++v17;
    uint64_t v20 = v40;
    v18 += v41;
    if (v16 == v17) {
      return 0;
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v21, &demangling cache variable for type metadata for PDFPageID?);
  int v27 = v25((char *)v24, 1, v26);
  uint64_t v22 = &demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
  uint64_t v15 = v42;
  uint64_t v16 = v23;
  if (v27 != 1) {
    goto LABEL_5;
  }
  uint64_t v7 = v43;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, &demangling cache variable for type metadata for PDFPageID?);
LABEL_13:
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  if ((static WeakTagged_3.== infix(_:_:)() & 1) == 0) {
    goto LABEL_6;
  }
  outlined destroy of PaperDocument.PDFPageAndPaperPage((uint64_t)v15, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
  return v17;
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v4 = (id)MEMORY[0x21054E050](0, a2);
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v4 = *(id *)(a2 + 32);
      }
      uint64_t v5 = v4;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      char v6 = static NSObject.== infix(_:_:)();

      if ((v6 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          unint64_t v11 = i + 1;
          if (__OFADD__(i, 1)) {
            break;
          }
          if (v11 == v3) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v8 = (id)MEMORY[0x21054E050](i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if (v11 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          uint64_t v9 = v8;
          char v10 = static NSObject.== infix(_:_:)();

          if (v10) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v3) {
          continue;
        }
      }
      return;
    }
  }
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  if (a2 >> 62) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return 0;
  }
  while ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = MEMORY[0x21054E050](0, a2);
    swift_unknownObjectRelease();
    if (v9 == v3) {
      return 0;
    }
    uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
LABEL_6:
    uint64_t v6 = 0;
    uint64_t result = 1;
    do
    {
      if (v4 - 1 == v6) {
        return 0;
      }
      unint64_t v8 = v6 + 1;
      if ((a2 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x21054E050](v6 + 1, a2);
        swift_unknownObjectRelease();
        if (v7 == v3) {
          return v6 + 1;
        }
      }
      else
      {
        if (v8 >= *(void *)(v5 + 16)) {
          goto LABEL_17;
        }
        if (*(void *)(a2 + 8 * v6 + 40) == v3) {
          return result;
        }
      }
      ++v6;
      uint64_t result = v8 + 1;
    }
    while (!__OFADD__(v8, 1));
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return 0;
    }
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    if (*(void *)(a2 + 32) == v3) {
      return 0;
    }
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  dispatch thunk of Collection._customIndexOfEquatableElement(_:)();
  if ((v10 & 1) == 0) {
    return v9;
  }
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v11 == v9) {
    return 0;
  }
  uint64_t v4 = (void (**)(char *))(v1 + 16);
  uint64_t v5 = (void (**)(char *, uint64_t))(v1 + 8);
  while (1)
  {
    uint64_t v6 = dispatch thunk of Collection.subscript.read();
    (*v4)(v3);
    ((void (*)(uint64_t *, void))v6)(&v9, 0);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
    LOBYTE(v6) = dispatch thunk of static Equatable.== infix(_:_:)();
    (*v5)(v3, v0);
    if (v6) {
      break;
    }
    dispatch thunk of Collection.formIndex(after:)();
    dispatch thunk of Collection.endIndex.getter();
    if (v11 == v9) {
      return 0;
    }
  }
  return v11;
}

uint64_t SignatureItem.isOwned.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned);
}

id SignatureItem.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SignatureItem.init(coder:)(a1);
}

id SignatureItem.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v86 = (uint64_t)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v88 = (char *)&v86 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v86 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v17 = (void *)swift_dynamicCastObjCClass();
  uint64_t v18 = v1;
  uint64_t v19 = v18;
  if (v17)
  {
    char v87 = v12;
    uint64_t v20 = v18;
    uint64_t v21 = v14;
    uint64_t v22 = v13;
    id v23 = a1;
    uint64_t v24 = (void *)MEMORY[0x21054D080](0x74616E6769534B41, 0xEB00000000657275);
    id v25 = objc_msgSend(v17, sel_classForClassName_, v24);

    if (v25)
    {
      ObjCClassMetadatCGFloat a = swift_getObjCClassMetadata();
      BOOL v27 = ObjCClassMetadata == type metadata accessor for SignatureItem();
    }
    else
    {
      BOOL v27 = 0;
    }
    uint64_t v13 = v22;
    uint64_t v14 = v21;
    uint64_t v19 = v20;
    uint64_t v12 = v87;
  }
  else
  {
    BOOL v27 = 0;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUUID);
  uint64_t v28 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v28)
  {
    if (one-time initialization token for SignatureLogger != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)SignatureLogger);
    char v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_20C2D7000, v33, v34, "decode did not find UUID", v35, 2u);
      MEMORY[0x210550270](v35, -1, -1);
    }

    goto LABEL_39;
  }
  int v29 = (void *)v28;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v30 = &v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_uniqueID];
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_uniqueID], v16, v13);
  BOOL v31 = v27 || specialized static SignatureManager.ownsSignature(_:)();
  v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned] = v31;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSDate);
  uint64_t v36 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v36)
  {
    uint64_t v37 = (void *)v36;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v12, 0, 1, v38);
  }
  else
  {
    uint64_t v39 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v12, 1, 1, v39);
  }
  uint64_t v40 = (uint64_t)&v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate];
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v12, (uint64_t)&v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate], &demangling cache variable for type metadata for Date?);
  if (v27)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v40, (uint64_t)v9, &demangling cache variable for type metadata for Date?);
    uint64_t v41 = type metadata accessor for Date();
    int v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v9, 1, v41);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
    if (v42 == 1)
    {
      if (one-time initialization token for SignatureLogger != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)SignatureLogger);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v46 = 0;
        _os_log_impl(&dword_20C2D7000, v44, v45, "decode did not find creationDate", v46, 2u);
        MEMORY[0x210550270](v46, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v30, v13);
      CGAffineTransform v47 = &demangling cache variable for type metadata for Date?;
      uint64_t v48 = v40;
LABEL_38:
      outlined destroy of StocksKitCurrencyCache.Provider?(v48, v47);

LABEL_39:
      type metadata accessor for SignatureItem();
      swift_deallocPartialClassInstance();
      return 0;
    }
  }
  char v87 = (char *)v13;
  uint64_t v49 = (void *)MEMORY[0x21054D080](0x656E696C65736162, 0xEE0074657366664FLL);
  objc_msgSend(a1, sel_decodeFloatForKey_, v49);
  float v51 = v50;

  *(double *)&v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_baselineOffset] = v51;
  char v52 = (void *)MEMORY[0x21054D080](0x6550646C756F6873, 0xED00007473697372);
  unsigned __int8 v53 = objc_msgSend(a1, sel_decodeBoolForKey_, v52);

  v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_shouldPersist] = v53;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSData);
  uint64_t v54 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v54)
  {
    uint64_t v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v57 = v56;

    uint64_t v54 = specialized static SignatureItem.signaturePath(from:)(v55, v57);
    outlined consume of Data._Representation(v55, v57);
  }
  *(void *)&v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_path] = v54;
  uint64_t v58 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v58)
  {
    unint64_t v59 = (void *)v58;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v60 = (uint64_t)v88;
    PKDrawing.init(data:)();
    uint64_t v63 = type metadata accessor for PKDrawing();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v60, 0, 1, v63);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v60, (uint64_t)&v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing], &demangling cache variable for type metadata for PKDrawing?);
  }
  else
  {
    uint64_t v61 = &v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing];
    uint64_t v62 = type metadata accessor for PKDrawing();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 1, 1, v62);
  }
  if (!*(void *)&v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_path])
  {
    uint64_t v64 = v86;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing], v86, &demangling cache variable for type metadata for PKDrawing?);
    uint64_t v65 = type metadata accessor for PKDrawing();
    int v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48))(v64, 1, v65);
    outlined destroy of StocksKitCurrencyCache.Provider?(v64, &demangling cache variable for type metadata for PKDrawing?);
    if (v66 == 1)
    {
      if (one-time initialization token for SignatureLogger != -1) {
        swift_once();
      }
      uint64_t v67 = type metadata accessor for Logger();
      __swift_project_value_buffer(v67, (uint64_t)SignatureLogger);
      unint64_t v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v69))
      {
        id v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v70 = 0;
        _os_log_impl(&dword_20C2D7000, v68, v69, "decode did not find at least one of CGPath or PKDrawing", v70, 2u);
        MEMORY[0x210550270](v70, -1, -1);
      }

      (*(void (**)(char *, char *))(v14 + 8))(v30, v87);
      outlined destroy of StocksKitCurrencyCache.Provider?(v40, &demangling cache variable for type metadata for Date?);

      uint64_t v48 = (uint64_t)&v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing];
      CGAffineTransform v47 = &demangling cache variable for type metadata for PKDrawing?;
      goto LABEL_38;
    }
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSString);
  uint64_t v72 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v72)
  {
    uint64_t v73 = (void *)v72;
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v76 = v75;

    SignatureDescription.init(caption:)(v74, v76, (uint64_t *)&v90);
  }
  else
  {
    unint64_t v77 = (void *)MEMORY[0x21054D080](0x7470697263736564, 0xEE006761546E6F69);
    id v78 = objc_msgSend(a1, sel_decodeIntegerForKey_, v77);

    uint64_t v79 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v79)
    {
      uint64_t v80 = (void *)v79;
      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v83 = v82;
    }
    else
    {
      uint64_t v81 = 0;
      unint64_t v83 = 0;
    }
    SignatureDescription.init(tag:customDescription:)((uint64_t)v78, v81, v83, (uint64_t *)&v90);
  }
  *(_OWORD *)&v19[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription] = v90;

  uint64_t v84 = (objc_class *)type metadata accessor for SignatureItem();
  v89.receiver = v19;
  v89.super_class = v84;
  id v71 = objc_msgSendSuper2(&v89, sel_init);

  return v71;
}

uint64_t type metadata accessor for SignatureItem()
{
  uint64_t result = type metadata singleton initialization cache for SignatureItem;
  if (!type metadata singleton initialization cache for SignatureItem) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::Void __swiftcall SignatureItem.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v61 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (v13
    && (uint64_t v14 = (void *)v13,
        type metadata accessor for SignatureItem(),
        (id v15 = objc_msgSend(v14, sel_classNameForClass_, swift_getObjCClassFromMetadata())) != 0))
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    if (v17 == 0x74616E6769534B41 && v19 == 0xEB00000000657275)
    {
      swift_bridgeObjectRelease();
      char v21 = 1;
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    char v21 = 0;
  }
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v23 = (void *)MEMORY[0x21054D080](0x4449657571696E75, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v23];

  double v24 = *(double *)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_baselineOffset);
  id v25 = (void *)MEMORY[0x21054D080](0x656E696C65736162, 0xEE0074657366664FLL);
  [(objc_class *)with.super.isa encodeDouble:v25 forKey:v24];

  if ((v21 & 1) == 0)
  {
    char v33 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_path);
    if (!v33) {
      goto LABEL_19;
    }
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v9, &demangling cache variable for type metadata for PKDrawing?);
    uint64_t v34 = type metadata accessor for PKDrawing();
    int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v9, 1, v34);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for PKDrawing?);
    if (v35 != 1) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate, (uint64_t)v12, &demangling cache variable for type metadata for Date?);
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v12, 1, v26) == 1)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  Class v28 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v26);
  int v29 = (void *)MEMORY[0x21054D080](0x6E6F697461657263, 0xEC00000065746144);
  [(objc_class *)with.super.isa encodeObject:v28 forKey:v29];

  int v30 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_shouldPersist);
  if (v30 == 2)
  {
LABEL_30:
    __break(1u);
    return;
  }
  uint64_t v31 = v30 & 1;
  uint64_t v32 = (void *)MEMORY[0x21054D080](0x6550646C756F6873, 0xED00007473697372);
  [(objc_class *)with.super.isa encodeBool:v31 forKey:v32];

  char v33 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_path);
  if (v33)
  {
LABEL_17:
    uint64_t v36 = specialized static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:)(v33, v21 & 1);
    if (v37 >> 60 != 15)
    {
      uint64_t v38 = v36;
      unint64_t v39 = v37;
      Class v40 = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v41 = (void *)MEMORY[0x21054D080](1752457584, 0xE400000000000000);
      [(objc_class *)with.super.isa encodeObject:v40 forKey:v41];

      outlined consume of Data?(v38, v39);
    }
  }
LABEL_19:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v6, &demangling cache variable for type metadata for PKDrawing?);
  uint64_t v42 = type metadata accessor for PKDrawing();
  uint64_t v43 = *(void *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v6, 1, v42) != 1)
  {
    PKDrawing._bridgeToObjectiveC()(v44);
    uint64_t v46 = v45;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v42);
    id v47 = objc_msgSend(v46, sel_serialize);

    uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v50 = v49;

    Class v51 = Data._bridgeToObjectiveC()().super.isa;
    char v52 = (void *)MEMORY[0x21054D080](0x676E6977617264, 0xE700000000000000);
    [(objc_class *)with.super.isa encodeObject:v51 forKey:v52];

    outlined consume of Data._Representation(v48, v50);
  }
  uint64_t v53 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription);
  unint64_t v54 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription + 8);
  if (v54 - 1 < 5)
  {
    outlined copy of SignatureDescription(v53, v54);
    uint64_t v55 = specialized Collection<>.firstIndex(of:)(v53, v54, (uint64_t)&outlined read-only object #0 of static SignatureDescription.allCases.getter);
    if ((v56 & 1) == 0)
    {
      uint64_t v57 = v55;
      outlined consume of SignatureDescription(v53, v54);
      uint64_t v58 = (void *)MEMORY[0x21054D080](0x7470697263736564, 0xEE006761546E6F69);
      [(objc_class *)with.super.isa encodeInteger:v57 forKey:v58];
LABEL_24:

      return;
    }
    __break(1u);
    goto LABEL_29;
  }
  if (v54)
  {
    unint64_t v59 = (void *)MEMORY[0x21054D080](0x7470697263736564, 0xEE006761546E6F69);
    [(objc_class *)with.super.isa encodeInteger:-1 forKey:v59];

    uint64_t v60 = (void *)MEMORY[0x21054D080](v53, v54);
    uint64_t v58 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C8548B0);
    [(objc_class *)with.super.isa encodeObject:v60 forKey:v58];

    goto LABEL_24;
  }
}

uint64_t SignatureItem.dataForKeychain()()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08910]), sel_initRequiringSecureCoding_, 1);
  uint64_t v2 = (void *)MEMORY[0x21054D080](0x74616E6769534B41, 0xEB00000000657275);
  type metadata accessor for SignatureItem();
  objc_msgSend(v1, sel_setClassName_forClass_, v2, swift_getObjCClassFromMetadata());

  objc_msgSend(v1, sel_encodeObject_forKey_, v0, *MEMORY[0x263F081D0]);
  id v3 = objc_msgSend(v1, sel_encodedData);
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  objc_msgSend(v1, sel_finishEncoding);
  return v4;
}

uint64_t SignatureItem.rawValue.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08910]), sel_initRequiringSecureCoding_, 1);
  SignatureItem.encode(with:)((NSCoder)v0);
  id v1 = objc_msgSend(v0, sel_encodedData);
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  objc_msgSend(v0, sel_finishEncoding);
  return v2;
}

double SignatureItem.size.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v1 - 8);
  id v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PKDrawing();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v0 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v3, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for PKDrawing?);
    uint64_t v8 = *(const CGPath **)(v0 + OBJC_IVAR____TtC8PaperKit13SignatureItem_path);
    if (v8)
    {
      BoundingBoCGFloat x = CGPathGetBoundingBox(v8);
      return BoundingBox.size.width;
    }
    else
    {
      return 0.0;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    PKDrawing.bounds.getter();
    double v9 = v10;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v9;
}

UIImage_optional __swiftcall SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(CGSize withMaximumSize, UIColor_optional withColor, Swift::Int_optional width, Swift::Bool forPrinting)
{
  int v5 = *(_DWORD *)&width.is_nil;
  int value = width.value;
  uint64_t v88 = *(void *)&withColor.is_nil;
  Class isa = withColor.value.super.isa;
  double height = withMaximumSize.height;
  double v7 = withMaximumSize.width;
  uint64_t v8 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v89 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PKInk();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v92 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PKDrawing();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  MEMORY[0x270FA5388](v19);
  id v23 = (char *)&v84 - v22;
  if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFLL) == 0 && (*(void *)&height & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
LABEL_16:
    id v50 = 0;
    goto LABEL_23;
  }
  uint64_t v85 = v21;
  uint64_t v86 = v12;
  uint64_t v87 = v11;
  id v24 = objc_msgSend(self, sel_currentTraitCollection);
  id v25 = objc_msgSend(v24, sel_userInterfaceStyle);

  uint64_t v26 = (v25 == (id)2) & (v5 ^ 1u);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v4 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v16, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for PKDrawing?);
    uint64_t v27 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit13SignatureItem_path);
    Class v28 = isa;
    if (v27)
    {
      int v29 = v27;
      BoundingBoCGFloat x = CGPathGetBoundingBox(v29);
      CGFloat x = BoundingBox.origin.x;
      CGFloat y = BoundingBox.origin.y;
      double v32 = BoundingBox.size.width;
      double v33 = BoundingBox.size.height;
      double v34 = v7 / CGRectGetWidth(BoundingBox);
      v101.origin.CGFloat x = x;
      v101.origin.CGFloat y = y;
      v101.size.CGFloat width = v32;
      v101.size.double height = v33;
      double v35 = height / CGRectGetHeight(v101);
      if (v35 >= v34) {
        double v36 = v34;
      }
      else {
        double v36 = v35;
      }
      if (v28) {
        Class v37 = v28;
      }
      else {
        Class v37 = (Class)objc_msgSend(self, sel_blackColor);
      }
      uint64_t v75 = v28;
      uint64_t v76 = (void *)static PKInkingTool.convertColor(_:from:to:)();

      id v77 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, v32 * v36, v33 * v36);
      uint64_t v78 = swift_allocObject();
      *(double *)(v78 + 16) = v36;
      *(CGFloat *)(v78 + 24) = x;
      *(CGFloat *)(v78 + 32) = y;
      *(double *)(v78 + 40) = v32;
      *(double *)(v78 + 48) = v33;
      *(void *)(v78 + 56) = v76;
      *(void *)(v78 + 64) = v29;
      uint64_t v79 = swift_allocObject();
      *(void *)(v79 + 16) = partial apply for closure #3 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:);
      *(void *)(v79 + 24) = v78;
      id v97 = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
      uint64_t v98 = v79;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v94 = 1107296256;
      uint64_t v95 = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
      id v96 = &block_descriptor_20;
      uint64_t v80 = _Block_copy(&aBlock);
      uint64_t v81 = v29;
      id v82 = v76;
      swift_retain();
      swift_release();
      id v50 = objc_msgSend(v77, sel_imageWithActions_, v80);

      _Block_release(v80);
      LOBYTE(v77) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v77 & 1) == 0) {
        goto LABEL_23;
      }
      __break(1u);
    }
    else if (one-time initialization token for SignatureLogger == -1)
    {
LABEL_13:
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)SignatureLogger);
      id v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        unint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v49 = 0;
        _os_log_impl(&dword_20C2D7000, v47, v48, "signature image but no path or drawing", v49, 2u);
        MEMORY[0x210550270](v49, -1, -1);
      }

      goto LABEL_16;
    }
    swift_once();
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
  id v38 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v38, sel_scale);
  double v40 = v39;

  id v84 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B40]), sel_initSyncWithSize_scale_, v7, height, v40);
  objc_msgSend(v84, sel_setInvertColors_, v26);
  PKDrawing.bounds.getter();
  double v41 = (double)v88;
  double v43 = v7 / v42;
  Class v44 = isa;
  if (isa) {
    Class v45 = isa;
  }
  else {
    Class v45 = (Class)objc_msgSend(self, sel_blackColor);
  }
  (*(void (**)(char *, void, uint64_t))(v89 + 104))(v10, *MEMORY[0x263F14A48], v8);
  Class v51 = v44;
  char v52 = v45;
  uint64_t v53 = v92;
  PKInk.init(_:color:)();
  double v54 = 2.0;
  if ((value & 1) == 0) {
    double v54 = v41;
  }
  double v55 = v54 / sqrt(v43) / 10.0 + 2.1;
  uint64_t v56 = PKDrawing.strokes.getter();
  MEMORY[0x270FA5388](v56);
  *((double *)&v84 - 2) = v55;
  *(&v84 - 1) = v53;
  uint64_t v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:), (uint64_t)(&v84 - 4), v56);
  swift_bridgeObjectRelease();
  uint64_t aBlock = v57;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStroke]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [PKStroke] and conformance [A], &demangling cache variable for type metadata for [PKStroke]);
  uint64_t v58 = v85;
  PKDrawing.init<A>(strokes:)();
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = 0;
  PKDrawing._bridgeToObjectiveC()(v60);
  uint64_t v62 = v61;
  PKDrawing.bounds.getter();
  double v64 = v63;
  double v66 = v65;
  double v68 = v67;
  double v70 = v69;
  id v97 = partial apply for closure #2 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:);
  uint64_t v98 = v59;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v94 = 1107296256;
  uint64_t v95 = thunk for @escaping @callee_guaranteed (@guaranteed UIImage?) -> ();
  id v96 = &block_descriptor_9;
  id v71 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v72 = v84;
  objc_msgSend(v84, sel_renderDrawing_clippedToStrokeSpaceRect_scale_completion_, v62, v71, v64, v66, v68, v70, v43);
  _Block_release(v71);

  uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v73(v58, v17);
  v73((uint64_t)v23, v17);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v92, v87);
  swift_beginAccess();
  id v50 = *(id *)(v59 + 16);
  id v74 = v50;
  swift_release();
LABEL_23:
  unint64_t v83 = (objc_class *)v50;
  result.value.super.Class isa = v83;
  result.is_nil = v20;
  return result;
}

uint64_t closure #1 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v3 = type metadata accessor for PKStrokePoint();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  double v42 = (char *)v33 - v7;
  uint64_t v38 = type metadata accessor for PKInk();
  uint64_t v37 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  double v39 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v9 - 8);
  v33[1] = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PKStrokePath();
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  double v36 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v33 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v33 - v17;
  PKStroke.path.getter();
  lazy protocol witness table accessor for type SignatureItem and conformance SignatureItem(&lazy protocol witness table cache variable for type PKStrokePath and conformance PKStrokePath, MEMORY[0x263F14A60]);
  uint64_t v19 = dispatch thunk of Collection.count.getter();
  uint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t v40 = a2;
  double v34 = v18;
  if (!v19)
  {
    uint64_t v29 = v41;
LABEL_11:
    uint64_t v30 = v35;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v35 + 8);
    v31(v16, v11);
    v51[0] = v20;
    static Date.now.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStrokePoint]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [PKStrokePoint] and conformance [A], &demangling cache variable for type metadata for [PKStrokePoint]);
    double v32 = v34;
    PKStrokePath.init<A>(controlPoints:creationDate:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v39, v29, v38);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v36, v32, v11);
    v51[0] = 0x3FF0000000000000;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = 0x3FF0000000000000;
    v51[4] = 0;
    v51[5] = 0;
    PKStroke.init(ink:path:transform:mask:)();
    return ((uint64_t (*)(char *, uint64_t))v31)(v32, v11);
  }
  uint64_t v21 = v19;
  uint64_t v50 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 & ~(v19 >> 63), 0);
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v21 & 0x8000000000000000) == 0)
  {
    uint64_t v23 = v49;
    Class v44 = (void (**)(char *, uint64_t))(v48 + 8);
    Class v45 = (void (**)(char *))(v48 + 16);
    uint64_t v43 = v48 + 32;
    uint64_t v47 = v11;
    id v24 = v42;
    uint64_t v46 = v16;
    do
    {
      id v25 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      (*v45)(v6);
      v25(v51, 0);
      PKStrokePoint.location.getter();
      PKStrokePoint.timeOffset.getter();
      PKStrokePoint.opacity.getter();
      PKStrokePoint.force.getter();
      PKStrokePoint.azimuth.getter();
      PKStrokePoint.altitude.getter();
      PKStrokePoint.init(location:timeOffset:size:opacity:force:azimuth:altitude:)();
      (*v44)(v6, v23);
      uint64_t v20 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1);
        id v24 = v42;
        uint64_t v20 = v50;
      }
      unint64_t v27 = *(void *)(v20 + 16);
      unint64_t v26 = *(void *)(v20 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        id v24 = v42;
        uint64_t v20 = v50;
      }
      *(void *)(v20 + 16) = v27 + 1;
      uint64_t v23 = v49;
      (*(void (**)(unint64_t, char *, uint64_t))(v48 + 32))(v20+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v27, v24, v49);
      uint64_t v50 = v20;
      Class v28 = v46;
      uint64_t v11 = v47;
      dispatch thunk of Collection.formIndex(after:)();
      --v21;
    }
    while (v21);
    uint64_t v29 = v41;
    uint64_t v16 = v28;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void closure #2 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(void *a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = a1;
  id v5 = a1;
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIImage?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t closure #3 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(void *a1, void *a2, const CGPath *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t v16 = type metadata accessor for CGPathFillRule();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextScaleCTM(v20, a4, -a4);

  uint64_t v21 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v28.origin.CGFloat x = a5;
  v28.origin.CGFloat y = a6;
  v28.size.CGFloat width = a7;
  v28.size.double height = a8;
  CGFloat v22 = -CGRectGetMinX(v28);
  v29.origin.CGFloat x = a5;
  v29.origin.CGFloat y = a6;
  v29.size.CGFloat width = a7;
  v29.size.double height = a8;
  CGFloat MaxY = CGRectGetMaxY(v29);
  CGContextTranslateCTM(v21, v22, -MaxY);

  objc_msgSend(a2, sel_set);
  id v24 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextAddPath(v24, a3);

  id v25 = objc_msgSend(a1, sel_CGContext);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x263F00040], v16);
  CGContextRef.fillPath(using:)();

  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

id SignatureItem.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SignatureItem.init()()
{
}

id SignatureItem.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureItem();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id protocol witness for RawRepresentable.init(rawValue:) in conformance SignatureItem@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = specialized SignatureItem.__allocating_init(rawValue:)(*(void *)a1, *(void *)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SignatureItem(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08910]), sel_initRequiringSecureCoding_, 1);
  SignatureItem.encode(with:)((NSCoder)v2);
  id v3 = objc_msgSend(v2, sel_encodedData);
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  objc_msgSend(v2, sel_finishEncoding);
  *a1 = v4;
  a1[1] = v6;
}

id protocol witness for CRType.copy(renamingReferences:) in conformance SignatureItem@<X0>(void **a1@<X8>)
{
  id v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance SignatureItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SignatureItem();
  uint64_t v5 = lazy protocol witness table accessor for type SignatureItem and conformance SignatureItem((unint64_t *)&lazy protocol witness table cache variable for type SignatureItem and conformance SignatureItem, (void (*)(uint64_t))type metadata accessor for SignatureItem);
  uint64_t v6 = lazy protocol witness table accessor for type SignatureItem and conformance SignatureItem(&lazy protocol witness table cache variable for type SignatureItem and conformance NSObject, (void (*)(uint64_t))type metadata accessor for SignatureItem);
  return MEMORY[0x270F17D90](a1, a2, v4, v5, v6);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance SignatureItem()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance SignatureItem()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance SignatureItem(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = swift_getWitnessTable();
  uint64_t v4 = MEMORY[0x263F32BD8];
  return MEMORY[0x270F17D98](a1, WitnessTable, v3, v4);
}

unint64_t specialized SignatureItem.SignaturePathDecoder.nextItem<A>()()
{
  v23[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + 4;
  if (__OFADD__(v1, 4))
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v4 = *v0;
  unint64_t v3 = v0[1];
  unint64_t v5 = v3 >> 62;
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(v4) - v4;
      if (__OFSUB__(HIDWORD(v4), v4)) {
        goto LABEL_25;
      }
      uint64_t v6 = (int)v6;
LABEL_7:
      if (v2 < v6)
      {
        if (!v5)
        {
          LOWORD(v23[0]) = *v0;
          BYTE2(v23[0]) = BYTE2(v4);
          BYTE3(v23[0]) = BYTE3(v4);
          BYTE4(v23[0]) = BYTE4(v4);
          BYTE5(v23[0]) = BYTE5(v4);
          BYTE6(v23[0]) = BYTE6(v4);
          HIBYTE(v23[0]) = HIBYTE(v4);
          LOWORD(v23[1]) = v3;
          BYTE2(v23[1]) = BYTE2(v3);
          BYTE3(v23[1]) = BYTE3(v3);
          BYTE4(v23[1]) = BYTE4(v3);
          BYTE5(v23[1]) = BYTE5(v3);
          unsigned int v14 = *(_DWORD *)((char *)v23 + v1);
LABEL_22:
          unsigned __int8 v16 = 0;
          v0[2] = v2;
          uint64_t v15 = v14;
          goto LABEL_23;
        }
        if (v5 != 1)
        {
          uint64_t v17 = *(void *)(v4 + 16);
          outlined copy of Data._Representation(v4, v3);
          swift_retain();
          swift_retain();
          uint64_t v18 = __DataStorage._bytes.getter();
          if (!v18)
          {
            __DataStorage._length.getter();
            __break(1u);
            goto LABEL_31;
          }
          uint64_t v19 = v18;
          uint64_t v20 = __DataStorage._offset.getter();
          BOOL v9 = __OFSUB__(v17, v20);
          uint64_t v21 = v17 - v20;
          if (!v9)
          {
            __DataStorage._length.getter();
            unsigned int v14 = *(_DWORD *)(v19 + v21 + v1);
            swift_release();
            swift_release();
            goto LABEL_20;
          }
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        if ((int)v4 <= v4 >> 32)
        {
          outlined copy of Data._Representation(v4, v3);
          uint64_t v10 = __DataStorage._bytes.getter();
          if (v10)
          {
            uint64_t v11 = v10;
            uint64_t v12 = __DataStorage._offset.getter();
            uint64_t v13 = (int)v4 - v12;
            if (!__OFSUB__((int)v4, v12))
            {
              __DataStorage._length.getter();
              unsigned int v14 = *(_DWORD *)(v11 + v13 + v1);
LABEL_20:
              outlined consume of Data._Representation(v4, v3);
              goto LABEL_22;
            }
LABEL_29:
            __break(1u);
          }
LABEL_31:
          __DataStorage._length.getter();
          __break(1u);
          JUMPOUT(0x20C4143C0);
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
LABEL_15:
      uint64_t v15 = 0;
      unsigned __int8 v16 = 1;
LABEL_23:
      LOBYTE(v23[0]) = v16;
      return v15 | ((unint64_t)v16 << 32);
    case 2uLL:
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v7 = *(void *)(v4 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_7;
      }
      goto LABEL_26;
    case 3uLL:
      if ((v2 & 0x8000000000000000) == 0) {
        goto LABEL_15;
      }
      memset(v23, 0, 14);
      unsigned int v14 = *(_DWORD *)((char *)v23 + v1);
      goto LABEL_22;
    default:
      uint64_t v6 = BYTE6(v3);
      goto LABEL_7;
  }
}

uint64_t closure #1 in static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:)(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  float v16 = *(float *)a1;
  uint64_t v2 = MEMORY[0x263F8D3E8];
  uint64_t v3 = MEMORY[0x263F07B80];
  uint64_t v19 = MEMORY[0x263F8D3E8];
  uint64_t v20 = MEMORY[0x263F07B80];
  uint64_t v17 = &v16;
  uint64_t v18 = &v17;
  __swift_project_boxed_opaque_existential_1(&v17, MEMORY[0x263F8D3E8]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  switch(*(_DWORD *)a1)
  {
    case 0:
    case 1:
      LODWORD(v16) = 1;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      float v4 = **(double **)(a1 + 8);
      float v16 = v4;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      double v5 = *(double *)(*(void *)(a1 + 8) + 8);
      goto LABEL_6;
    case 2:
      LODWORD(v16) = 2;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      float v6 = **(double **)(a1 + 8);
      float v16 = v6;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      float v7 = *(double *)(*(void *)(a1 + 8) + 8);
      float v16 = v7;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      float v8 = *(double *)(*(void *)(a1 + 8) + 16);
      float v16 = v8;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      double v5 = *(double *)(*(void *)(a1 + 8) + 24);
      goto LABEL_6;
    case 3:
      LODWORD(v16) = 3;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      float v9 = **(double **)(a1 + 8);
      float v16 = v9;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      float v10 = *(double *)(*(void *)(a1 + 8) + 8);
      float v16 = v10;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      float v11 = *(double *)(*(void *)(a1 + 8) + 16);
      float v16 = v11;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      float v12 = *(double *)(*(void *)(a1 + 8) + 24);
      float v16 = v12;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      float v13 = *(double *)(*(void *)(a1 + 8) + 32);
      float v16 = v13;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      __swift_project_boxed_opaque_existential_1(&v17, v2);
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      double v5 = *(double *)(*(void *)(a1 + 8) + 40);
LABEL_6:
      float v14 = v5;
      float v16 = v14;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      break;
    case 4:
      float v16 = 0.0;
      uint64_t v19 = v2;
      uint64_t v20 = v3;
      uint64_t v17 = &v16;
      uint64_t v18 = &v17;
      break;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x20C414800);
  }
  __swift_project_boxed_opaque_existential_1(&v17, v2);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
}

uint64_t specialized static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:)(void *a1, char a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = a1;
  BoundingBoCGFloat x = CGPathGetBoundingBox(v3);
  if (CGRectIsNull(BoundingBox))
  {

    return 0;
  }
  long long v14 = xmmword_20C838A70;
  CGRect v21 = CGPathGetBoundingBox(v3);
  double MinY = CGRectGetMinY(v21);
  CGRect v22 = CGPathGetBoundingBox(v3);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0x3FF0000000000000;
  long long v18 = xmmword_20C8340F0;
  double v19 = MinY + CGRectGetMaxY(v22);
  if (a2) {
    float v6 = (const CGPath *)CGPathRef.copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:)();
  }
  else {
    float v6 = v3;
  }
  float v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &v14;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:);
  *(void *)(v9 + 24) = v8;
  v13[4] = partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  v13[5] = v9;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1107296256;
  _OWORD v13[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  v13[3] = &block_descriptor_22_0;
  float v10 = _Block_copy(v13);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v7, v10);

  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v4 = v14;
    swift_release();
    return v4;
  }
  __break(1u);
  return result;
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initForReadingFromData_error_, isa, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

CGPath *specialized static SignatureItem.signaturePath(from:)(uint64_t a1, unint64_t a2)
{
  uint64_t v154 = *MEMORY[0x263EF8340];
  path = CGPathCreateMutable();
  uint64_t v151 = a1;
  unint64_t v152 = a2;
  unint64_t v4 = a2 >> 62;
  uint64_t v153 = 0;
  outlined copy of Data._Representation(a1, a2);
  uint64_t v5 = 0;
  BOOL v6 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v144 = v6;
  uint64_t v7 = BYTE6(a2);
  uint64_t v143 = a1 >> 32;
  uint64_t v8 = 4;
  uint64_t v9 = v4;
  while (2)
  {
    uint64_t v11 = v7;
    switch(v9)
    {
      case 1:
        uint64_t v11 = HIDWORD(a1) - (int)a1;
        if (v144) {
          goto LABEL_196;
        }
        goto LABEL_13;
      case 2:
        uint64_t v13 = *(void *)(a1 + 16);
        uint64_t v12 = *(void *)(a1 + 24);
        BOOL v14 = __OFSUB__(v12, v13);
        uint64_t v11 = v12 - v13;
        if (!v14) {
          goto LABEL_13;
        }
        goto LABEL_197;
      case 3:
        if ((v8 & 0x8000000000000000) == 0) {
          goto LABEL_192;
        }
        memset(v146, 0, 14);
        goto LABEL_23;
      default:
LABEL_13:
        if (v8 >= v11) {
          goto LABEL_192;
        }
        if (v4)
        {
          if (v4 == 1)
          {
            if (v143 < (int)a1) {
              goto LABEL_198;
            }
            swift_retain();
            uint64_t v15 = __DataStorage._bytes.getter();
            if (!v15)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_244:
              __DataStorage._length.getter();
              __break(1u);
LABEL_245:
              __DataStorage._length.getter();
              __break(1u);
LABEL_246:
              __DataStorage._length.getter();
              __break(1u);
LABEL_247:
              __DataStorage._length.getter();
              __break(1u);
LABEL_248:
              __DataStorage._length.getter();
              __break(1u);
LABEL_249:
              __DataStorage._length.getter();
              __break(1u);
LABEL_250:
              __DataStorage._length.getter();
              __break(1u);
LABEL_251:
              __DataStorage._length.getter();
              __break(1u);
LABEL_252:
              __DataStorage._length.getter();
              __break(1u);
LABEL_253:
              __DataStorage._length.getter();
              __break(1u);
LABEL_254:
              __DataStorage._length.getter();
              __break(1u);
LABEL_255:
              __DataStorage._length.getter();
              __break(1u);
LABEL_256:
              __DataStorage._length.getter();
              __break(1u);
LABEL_257:
              __DataStorage._length.getter();
              __break(1u);
LABEL_258:
              __DataStorage._length.getter();
              __break(1u);
              JUMPOUT(0x20C415D98);
            }
            uint64_t v16 = v15;
            uint64_t v17 = __DataStorage._offset.getter();
            uint64_t v18 = (int)a1 - v17;
            if (__OFSUB__((int)a1, v17)) {
              goto LABEL_200;
            }
            __DataStorage._length.getter();
            unsigned int v19 = *(_DWORD *)(v16 + v18 + v5);
          }
          else
          {
            uint64_t v20 = *(void *)(a1 + 16);
            outlined copy of Data._Representation(a1, a2);
            swift_retain();
            swift_retain();
            uint64_t v21 = __DataStorage._bytes.getter();
            if (!v21) {
              goto LABEL_244;
            }
            uint64_t v22 = v21;
            uint64_t v23 = __DataStorage._offset.getter();
            uint64_t v24 = v20 - v23;
            if (__OFSUB__(v20, v23)) {
              goto LABEL_199;
            }
            __DataStorage._length.getter();
            unsigned int v19 = *(_DWORD *)(v22 + v24 + v5);
            swift_release();
            swift_release();
          }
          outlined consume of Data._Representation(a1, a2);
          uint64_t v7 = BYTE6(a2);
          uint64_t v9 = v4;
          if (v19 > 4) {
            goto LABEL_192;
          }
        }
        else
        {
          v146[0] = a1;
          LOWORD(v146[1]) = a2;
          BYTE2(v146[1]) = BYTE2(a2);
          BYTE3(v146[1]) = BYTE3(a2);
          BYTE4(v146[1]) = BYTE4(a2);
          BYTE5(v146[1]) = BYTE5(a2);
LABEL_23:
          unsigned int v19 = *(_DWORD *)((char *)v146 + v5);
          if (v19 > 4) {
            goto LABEL_192;
          }
        }
        uint64_t v25 = v8 + 4;
        if (!__OFADD__(v8, 4))
        {
          uint64_t v26 = v7;
          switch(v9)
          {
            case 1:
              uint64_t v26 = HIDWORD(a1) - (int)a1;
              if (v144) {
                goto LABEL_201;
              }
              goto LABEL_34;
            case 2:
              uint64_t v28 = *(void *)(a1 + 16);
              uint64_t v27 = *(void *)(a1 + 24);
              BOOL v14 = __OFSUB__(v27, v28);
              uint64_t v26 = v27 - v28;
              if (!v14) {
                goto LABEL_34;
              }
              goto LABEL_202;
            case 3:
              if ((v25 & 0x8000000000000000) == 0) {
                goto LABEL_187;
              }
              memset(v146, 0, 14);
              goto LABEL_44;
            default:
LABEL_34:
              if (v25 >= v26) {
                goto LABEL_187;
              }
              if (v4)
              {
                if (v4 == 1)
                {
                  if (v143 < (int)a1) {
                    goto LABEL_203;
                  }
                  swift_retain();
                  uint64_t v29 = __DataStorage._bytes.getter();
                  if (!v29) {
                    goto LABEL_245;
                  }
                  uint64_t v30 = v29;
                  uint64_t v31 = __DataStorage._offset.getter();
                  uint64_t v32 = (int)a1 - v31;
                  if (__OFSUB__((int)a1, v31)) {
                    goto LABEL_205;
                  }
                  __DataStorage._length.getter();
                  unsigned int v33 = *(_DWORD *)(v30 + v32 + v8);
                }
                else
                {
                  uint64_t v34 = *(void *)(a1 + 16);
                  outlined copy of Data._Representation(a1, a2);
                  swift_retain();
                  swift_retain();
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_246;
                  }
                  uint64_t v36 = v35;
                  uint64_t v37 = __DataStorage._offset.getter();
                  BOOL v14 = __OFSUB__(v34, v37);
                  uint64_t v38 = v34 - v37;
                  if (v14) {
                    goto LABEL_204;
                  }
                  __DataStorage._length.getter();
                  unsigned int v33 = *(_DWORD *)(v36 + v38 + v8);
                  swift_release();
                  swift_release();
                }
                outlined consume of Data._Representation(a1, a2);
                uint64_t v7 = BYTE6(a2);
                uint64_t v9 = v4;
                uint64_t v153 = v8 + 4;
                if ((v33 & 0x80000000) != 0) {
                  goto LABEL_187;
                }
              }
              else
              {
                v146[0] = a1;
                LOWORD(v146[1]) = a2;
                BYTE2(v146[1]) = BYTE2(a2);
                BYTE3(v146[1]) = BYTE3(a2);
                BYTE4(v146[1]) = BYTE4(a2);
                BYTE5(v146[1]) = BYTE5(a2);
LABEL_44:
                unsigned int v33 = *(_DWORD *)((char *)v146 + v8);
                uint64_t v153 = v8 + 4;
                if ((v33 & 0x80000000) != 0)
                {
LABEL_187:
                  uint64_t v136 = a1;
                  unint64_t v137 = a2;
                  goto LABEL_193;
                }
              }
              if (v33 >= 4) {
                goto LABEL_187;
              }
              switch(v19)
              {
                case 0u:
                  if (v33 != 1) {
                    goto LABEL_188;
                  }
                  uint64_t v39 = v8 + 8;
                  if (__OFADD__(v25, 4)) {
                    goto LABEL_206;
                  }
                  uint64_t v40 = v7;
                  switch(v9)
                  {
                    case 1:
                      uint64_t v40 = HIDWORD(a1) - (int)a1;
                      if (v144) {
                        goto LABEL_212;
                      }
                      goto LABEL_75;
                    case 2:
                      uint64_t v48 = *(void *)(a1 + 16);
                      uint64_t v47 = *(void *)(a1 + 24);
                      BOOL v14 = __OFSUB__(v47, v48);
                      uint64_t v40 = v47 - v48;
                      if (!v14) {
                        goto LABEL_75;
                      }
                      goto LABEL_216;
                    case 3:
                      if ((v39 & 0x8000000000000000) == 0) {
                        goto LABEL_187;
                      }
                      memset(v146, 0, 14);
                      goto LABEL_115;
                    default:
LABEL_75:
                      if (v39 >= v40) {
                        goto LABEL_187;
                      }
                      if (v4)
                      {
                        if (v4 == 1)
                        {
                          if (v143 < (int)a1) {
                            goto LABEL_220;
                          }
                          swift_retain();
                          uint64_t v49 = __DataStorage._bytes.getter();
                          if (!v49) {
                            goto LABEL_247;
                          }
                          uint64_t v50 = v49;
                          uint64_t v51 = __DataStorage._offset.getter();
                          uint64_t v52 = (int)a1 - v51;
                          if (__OFSUB__((int)a1, v51)) {
                            goto LABEL_228;
                          }
                          __DataStorage._length.getter();
                          float v53 = *(float *)(v50 + v52 + v25);
                        }
                        else
                        {
                          uint64_t v75 = *(void *)(a1 + 16);
                          outlined copy of Data._Representation(a1, a2);
                          swift_retain();
                          swift_retain();
                          uint64_t v76 = __DataStorage._bytes.getter();
                          if (!v76) {
                            goto LABEL_251;
                          }
                          uint64_t v77 = v76;
                          uint64_t v78 = __DataStorage._offset.getter();
                          BOOL v14 = __OFSUB__(v75, v78);
                          uint64_t v79 = v75 - v78;
                          if (v14) {
                            goto LABEL_224;
                          }
                          __DataStorage._length.getter();
                          float v53 = *(float *)(v77 + v79 + v25);
                          swift_release();
                          swift_release();
                        }
                        outlined consume of Data._Representation(a1, a2);
                        uint64_t v7 = BYTE6(a2);
                        uint64_t v9 = v4;
                      }
                      else
                      {
                        v146[0] = a1;
                        LOWORD(v146[1]) = a2;
                        BYTE2(v146[1]) = BYTE2(a2);
                        BYTE3(v146[1]) = BYTE3(a2);
                        BYTE4(v146[1]) = BYTE4(a2);
                        BYTE5(v146[1]) = BYTE5(a2);
LABEL_115:
                        float v53 = *(float *)((char *)v146 + v25);
                      }
                      uint64_t v80 = v25 + 8;
                      if (__OFADD__(v39, 4)) {
                        goto LABEL_210;
                      }
                      break;
                  }
                  uint64_t v81 = v7;
                  switch(v9)
                  {
                    case 1:
                      uint64_t v81 = HIDWORD(a1) - (int)a1;
                      if (v144) {
                        goto LABEL_232;
                      }
                      goto LABEL_157;
                    case 2:
                      uint64_t v114 = *(void *)(a1 + 16);
                      uint64_t v113 = *(void *)(a1 + 24);
                      BOOL v14 = __OFSUB__(v113, v114);
                      uint64_t v81 = v113 - v114;
                      if (!v14) {
                        goto LABEL_157;
                      }
                      goto LABEL_234;
                    case 3:
                      if ((v80 & 0x8000000000000000) == 0) {
                        goto LABEL_187;
                      }
                      memset(v146, 0, 14);
                      goto LABEL_177;
                    default:
LABEL_157:
                      if (v80 >= v81) {
                        goto LABEL_187;
                      }
                      if (v4)
                      {
                        if (v4 == 1)
                        {
                          if (v143 < (int)a1) {
                            goto LABEL_236;
                          }
                          swift_retain();
                          uint64_t v115 = __DataStorage._bytes.getter();
                          if (!v115) {
                            goto LABEL_255;
                          }
                          uint64_t v116 = v115;
                          uint64_t v117 = __DataStorage._offset.getter();
                          uint64_t v118 = (int)a1 - v117;
                          if (__OFSUB__((int)a1, v117)) {
                            goto LABEL_240;
                          }
                          __DataStorage._length.getter();
                          float v119 = *(float *)(v116 + v118 + v39);
                        }
                        else
                        {
                          uint64_t v126 = *(void *)(a1 + 16);
                          outlined copy of Data._Representation(a1, a2);
                          swift_retain();
                          swift_retain();
                          uint64_t v127 = __DataStorage._bytes.getter();
                          if (!v127) {
                            goto LABEL_257;
                          }
                          uint64_t v128 = v127;
                          uint64_t v129 = __DataStorage._offset.getter();
                          BOOL v14 = __OFSUB__(v126, v129);
                          uint64_t v130 = v126 - v129;
                          if (v14) {
                            goto LABEL_238;
                          }
                          __DataStorage._length.getter();
                          float v119 = *(float *)(v128 + v130 + v39);
                          swift_release();
                          swift_release();
                        }
                        outlined consume of Data._Representation(a1, a2);
                        uint64_t v7 = BYTE6(a2);
                        uint64_t v9 = v4;
                      }
                      else
                      {
                        v146[0] = a1;
                        LOWORD(v146[1]) = a2;
                        BYTE2(v146[1]) = BYTE2(a2);
                        BYTE3(v146[1]) = BYTE3(a2);
                        BYTE4(v146[1]) = BYTE4(a2);
                        BYTE5(v146[1]) = BYTE5(a2);
LABEL_177:
                        float v119 = *(float *)((char *)v146 + v39);
                      }
                      uint64_t v153 = v80;
                      v147.CGFloat b = 0.0;
                      v147.CGFloat c = 0.0;
                      v147.CGFloat a = 1.0;
                      v147.CGFloat d = 1.0;
                      v147.tCGFloat x = 0.0;
                      v147.tCGFloat y = 0.0;
                      CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(v119, v53), &v147);
                      break;
                  }
                  goto LABEL_8;
                case 1u:
                  if (v33 != 1) {
                    goto LABEL_188;
                  }
                  uint64_t v41 = v8 + 8;
                  if (__OFADD__(v25, 4)) {
                    goto LABEL_207;
                  }
                  uint64_t v42 = v7;
                  switch(v9)
                  {
                    case 1:
                      uint64_t v42 = HIDWORD(a1) - (int)a1;
                      if (v144) {
                        goto LABEL_213;
                      }
                      goto LABEL_85;
                    case 2:
                      uint64_t v55 = *(void *)(a1 + 16);
                      uint64_t v54 = *(void *)(a1 + 24);
                      BOOL v14 = __OFSUB__(v54, v55);
                      uint64_t v42 = v54 - v55;
                      if (!v14) {
                        goto LABEL_85;
                      }
                      goto LABEL_217;
                    case 3:
                      if ((v41 & 0x8000000000000000) == 0) {
                        goto LABEL_187;
                      }
                      memset(v146, 0, 14);
                      goto LABEL_125;
                    default:
LABEL_85:
                      if (v41 >= v42) {
                        goto LABEL_187;
                      }
                      if (v4)
                      {
                        if (v4 == 1)
                        {
                          if (v143 < (int)a1) {
                            goto LABEL_221;
                          }
                          swift_retain();
                          uint64_t v56 = __DataStorage._bytes.getter();
                          if (!v56) {
                            goto LABEL_248;
                          }
                          uint64_t v57 = v56;
                          uint64_t v58 = __DataStorage._offset.getter();
                          uint64_t v59 = (int)a1 - v58;
                          if (__OFSUB__((int)a1, v58)) {
                            goto LABEL_229;
                          }
                          __DataStorage._length.getter();
                          float v60 = *(float *)(v57 + v59 + v25);
                        }
                        else
                        {
                          uint64_t v82 = *(void *)(a1 + 16);
                          outlined copy of Data._Representation(a1, a2);
                          swift_retain();
                          swift_retain();
                          uint64_t v83 = __DataStorage._bytes.getter();
                          if (!v83) {
                            goto LABEL_252;
                          }
                          uint64_t v84 = v83;
                          uint64_t v85 = __DataStorage._offset.getter();
                          BOOL v14 = __OFSUB__(v82, v85);
                          uint64_t v86 = v82 - v85;
                          if (v14) {
                            goto LABEL_225;
                          }
                          __DataStorage._length.getter();
                          float v60 = *(float *)(v84 + v86 + v25);
                          swift_release();
                          swift_release();
                        }
                        outlined consume of Data._Representation(a1, a2);
                        uint64_t v7 = BYTE6(a2);
                        uint64_t v9 = v4;
                      }
                      else
                      {
                        v146[0] = a1;
                        LOWORD(v146[1]) = a2;
                        BYTE2(v146[1]) = BYTE2(a2);
                        BYTE3(v146[1]) = BYTE3(a2);
                        BYTE4(v146[1]) = BYTE4(a2);
                        BYTE5(v146[1]) = BYTE5(a2);
LABEL_125:
                        float v60 = *(float *)((char *)v146 + v25);
                      }
                      uint64_t v87 = v25 + 8;
                      if (__OFADD__(v41, 4)) {
                        goto LABEL_211;
                      }
                      break;
                  }
                  break;
                case 2u:
                  if (v33 != 2) {
                    goto LABEL_188;
                  }
                  uint64_t v43 = v8 + 8;
                  if (__OFADD__(v25, 4)) {
                    goto LABEL_208;
                  }
                  uint64_t v44 = v7;
                  switch(v9)
                  {
                    case 1:
                      uint64_t v44 = HIDWORD(a1) - (int)a1;
                      if (v144) {
                        goto LABEL_214;
                      }
                      goto LABEL_95;
                    case 2:
                      uint64_t v62 = *(void *)(a1 + 16);
                      uint64_t v61 = *(void *)(a1 + 24);
                      BOOL v14 = __OFSUB__(v61, v62);
                      uint64_t v44 = v61 - v62;
                      if (!v14) {
                        goto LABEL_95;
                      }
                      goto LABEL_218;
                    case 3:
                      if ((v43 & 0x8000000000000000) == 0) {
                        goto LABEL_192;
                      }
                      memset(v146, 0, 14);
                      goto LABEL_135;
                    default:
LABEL_95:
                      if (v43 >= v44) {
                        goto LABEL_192;
                      }
                      if (v4)
                      {
                        if (v4 == 1)
                        {
                          if (v143 < (int)a1) {
                            goto LABEL_222;
                          }
                          swift_retain();
                          uint64_t v63 = __DataStorage._bytes.getter();
                          if (!v63) {
                            goto LABEL_249;
                          }
                          uint64_t v64 = v63;
                          uint64_t v65 = __DataStorage._offset.getter();
                          uint64_t v66 = (int)a1 - v65;
                          if (__OFSUB__((int)a1, v65)) {
                            goto LABEL_230;
                          }
                          __DataStorage._length.getter();
                          float v67 = *(float *)(v64 + v66 + v25);
                        }
                        else
                        {
                          uint64_t v89 = *(void *)(a1 + 16);
                          outlined copy of Data._Representation(a1, a2);
                          swift_retain();
                          swift_retain();
                          uint64_t v90 = __DataStorage._bytes.getter();
                          if (!v90) {
                            goto LABEL_253;
                          }
                          uint64_t v91 = v90;
                          uint64_t v92 = __DataStorage._offset.getter();
                          BOOL v14 = __OFSUB__(v89, v92);
                          uint64_t v93 = v89 - v92;
                          if (v14) {
                            goto LABEL_226;
                          }
                          __DataStorage._length.getter();
                          float v67 = *(float *)(v91 + v93 + v25);
                          swift_release();
                          swift_release();
                        }
                        outlined consume of Data._Representation(a1, a2);
                        uint64_t v7 = BYTE6(a2);
                      }
                      else
                      {
                        v146[0] = a1;
                        LOWORD(v146[1]) = a2;
                        BYTE2(v146[1]) = BYTE2(a2);
                        BYTE3(v146[1]) = BYTE3(a2);
                        BYTE4(v146[1]) = BYTE4(a2);
                        BYTE5(v146[1]) = BYTE5(a2);
LABEL_135:
                        float v67 = *(float *)((char *)v146 + v25);
                      }
                      uint64_t v153 = v43;
                      unint64_t v94 = specialized SignatureItem.SignaturePathDecoder.nextItem<A>()();
                      if ((v94 & 0x100000000) != 0) {
                        goto LABEL_192;
                      }
                      float v95 = *(float *)&v94;
                      unint64_t v96 = specialized SignatureItem.SignaturePathDecoder.nextItem<A>()();
                      if ((v96 & 0x100000000) != 0) {
                        goto LABEL_192;
                      }
                      float v97 = *(float *)&v96;
                      unint64_t v98 = specialized SignatureItem.SignaturePathDecoder.nextItem<A>()();
                      if ((v98 & 0x100000000) != 0) {
                        goto LABEL_192;
                      }
                      v149.CGFloat b = 0.0;
                      v149.CGFloat c = 0.0;
                      v149.CGFloat a = 1.0;
                      v149.CGFloat d = 1.0;
                      v149.tCGFloat x = 0.0;
                      v149.tCGFloat y = 0.0;
                      CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(v95, v67), (CGPoint)__PAIR128__(*(float *)&v98, v97), &v149);
                      uint64_t v9 = v4;
                      break;
                  }
                  goto LABEL_8;
                case 3u:
                  if (v33 != 3) {
                    goto LABEL_188;
                  }
                  uint64_t v45 = v8 + 8;
                  if (__OFADD__(v25, 4)) {
                    goto LABEL_209;
                  }
                  uint64_t v46 = v7;
                  switch(v9)
                  {
                    case 1:
                      uint64_t v46 = HIDWORD(a1) - (int)a1;
                      if (v144) {
                        goto LABEL_215;
                      }
                      goto LABEL_105;
                    case 2:
                      uint64_t v69 = *(void *)(a1 + 16);
                      uint64_t v68 = *(void *)(a1 + 24);
                      BOOL v14 = __OFSUB__(v68, v69);
                      uint64_t v46 = v68 - v69;
                      if (!v14) {
                        goto LABEL_105;
                      }
                      goto LABEL_219;
                    case 3:
                      if ((v45 & 0x8000000000000000) == 0) {
                        goto LABEL_192;
                      }
                      memset(v146, 0, 14);
                      goto LABEL_145;
                    default:
LABEL_105:
                      if (v45 >= v46) {
                        goto LABEL_192;
                      }
                      if (v4)
                      {
                        if (v4 == 1)
                        {
                          if (v143 < (int)a1) {
                            goto LABEL_223;
                          }
                          swift_retain();
                          uint64_t v70 = __DataStorage._bytes.getter();
                          if (!v70) {
                            goto LABEL_250;
                          }
                          uint64_t v71 = v70;
                          uint64_t v72 = __DataStorage._offset.getter();
                          uint64_t v73 = (int)a1 - v72;
                          if (__OFSUB__((int)a1, v72)) {
                            goto LABEL_231;
                          }
                          __DataStorage._length.getter();
                          float v74 = *(float *)(v71 + v73 + v25);
                        }
                        else
                        {
                          uint64_t v99 = *(void *)(a1 + 16);
                          outlined copy of Data._Representation(a1, a2);
                          swift_retain();
                          swift_retain();
                          uint64_t v100 = __DataStorage._bytes.getter();
                          if (!v100) {
                            goto LABEL_254;
                          }
                          uint64_t v101 = v100;
                          uint64_t v102 = __DataStorage._offset.getter();
                          BOOL v14 = __OFSUB__(v99, v102);
                          uint64_t v103 = v99 - v102;
                          if (v14) {
                            goto LABEL_227;
                          }
                          __DataStorage._length.getter();
                          float v74 = *(float *)(v101 + v103 + v25);
                          swift_release();
                          swift_release();
                        }
                        outlined consume of Data._Representation(a1, a2);
                        uint64_t v7 = BYTE6(a2);
                      }
                      else
                      {
                        v146[0] = a1;
                        LOWORD(v146[1]) = a2;
                        BYTE2(v146[1]) = BYTE2(a2);
                        BYTE3(v146[1]) = BYTE3(a2);
                        BYTE4(v146[1]) = BYTE4(a2);
                        BYTE5(v146[1]) = BYTE5(a2);
LABEL_145:
                        float v74 = *(float *)((char *)v146 + v25);
                      }
                      uint64_t v153 = v45;
                      unint64_t v104 = specialized SignatureItem.SignaturePathDecoder.nextItem<A>()();
                      if ((v104 & 0x100000000) != 0) {
                        goto LABEL_192;
                      }
                      float v105 = *(float *)&v104;
                      unint64_t v106 = specialized SignatureItem.SignaturePathDecoder.nextItem<A>()();
                      if ((v106 & 0x100000000) != 0) {
                        goto LABEL_192;
                      }
                      float v107 = *(float *)&v106;
                      unint64_t v108 = specialized SignatureItem.SignaturePathDecoder.nextItem<A>()();
                      if ((v108 & 0x100000000) != 0) {
                        goto LABEL_192;
                      }
                      float v109 = *(float *)&v108;
                      unint64_t v110 = specialized SignatureItem.SignaturePathDecoder.nextItem<A>()();
                      if ((v110 & 0x100000000) != 0) {
                        goto LABEL_192;
                      }
                      float v111 = *(float *)&v110;
                      unint64_t v112 = specialized SignatureItem.SignaturePathDecoder.nextItem<A>()();
                      if ((v112 & 0x100000000) != 0) {
                        goto LABEL_192;
                      }
                      v150.CGFloat b = 0.0;
                      v150.CGFloat c = 0.0;
                      v150.CGFloat a = 1.0;
                      v150.CGFloat d = 1.0;
                      v150.tCGFloat x = 0.0;
                      v150.tCGFloat y = 0.0;
                      CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(*(float *)&v112, v111), (CGPoint)__PAIR128__(v105, v74), (CGPoint)__PAIR128__(v109, v107), &v150);
                      uint64_t v9 = v4;
                      break;
                  }
                  goto LABEL_8;
                case 4u:
                  if (v33) {
                    goto LABEL_188;
                  }
                  CGPathCloseSubpath(path);
                  goto LABEL_8;
                default:
LABEL_188:
                  if (one-time initialization token for SignatureLogger == -1) {
                    goto LABEL_189;
                  }
                  goto LABEL_242;
              }
              uint64_t v88 = v7;
              switch(v9)
              {
                case 1:
                  uint64_t v88 = HIDWORD(a1) - (int)a1;
                  if (v144) {
                    goto LABEL_233;
                  }
                  goto LABEL_167;
                case 2:
                  uint64_t v121 = *(void *)(a1 + 16);
                  uint64_t v120 = *(void *)(a1 + 24);
                  BOOL v14 = __OFSUB__(v120, v121);
                  uint64_t v88 = v120 - v121;
                  if (!v14) {
                    goto LABEL_167;
                  }
                  goto LABEL_235;
                case 3:
                  if ((v87 & 0x8000000000000000) == 0) {
                    goto LABEL_187;
                  }
                  memset(v146, 0, 14);
                  goto LABEL_6;
                default:
LABEL_167:
                  if (v87 >= v88) {
                    goto LABEL_187;
                  }
                  if (v4)
                  {
                    if (v4 == 1)
                    {
                      if (v143 < (int)a1) {
                        goto LABEL_237;
                      }
                      swift_retain();
                      uint64_t v122 = __DataStorage._bytes.getter();
                      if (!v122) {
                        goto LABEL_256;
                      }
                      uint64_t v123 = v122;
                      uint64_t v124 = __DataStorage._offset.getter();
                      uint64_t v125 = (int)a1 - v124;
                      if (__OFSUB__((int)a1, v124)) {
                        goto LABEL_241;
                      }
                      __DataStorage._length.getter();
                      float v10 = *(float *)(v123 + v125 + v41);
                    }
                    else
                    {
                      uint64_t v131 = *(void *)(a1 + 16);
                      outlined copy of Data._Representation(a1, a2);
                      swift_retain();
                      swift_retain();
                      uint64_t v132 = __DataStorage._bytes.getter();
                      if (!v132) {
                        goto LABEL_258;
                      }
                      uint64_t v133 = v132;
                      uint64_t v134 = __DataStorage._offset.getter();
                      BOOL v14 = __OFSUB__(v131, v134);
                      uint64_t v135 = v131 - v134;
                      if (v14) {
                        goto LABEL_239;
                      }
                      __DataStorage._length.getter();
                      float v10 = *(float *)(v133 + v135 + v41);
                      swift_release();
                      swift_release();
                    }
                    outlined consume of Data._Representation(a1, a2);
                    uint64_t v7 = BYTE6(a2);
                    uint64_t v9 = v4;
                  }
                  else
                  {
                    v146[0] = a1;
                    LOWORD(v146[1]) = a2;
                    BYTE2(v146[1]) = BYTE2(a2);
                    BYTE3(v146[1]) = BYTE3(a2);
                    BYTE4(v146[1]) = BYTE4(a2);
                    BYTE5(v146[1]) = BYTE5(a2);
LABEL_6:
                    float v10 = *(float *)((char *)v146 + v41);
                  }
                  uint64_t v153 = v87;
                  transform.CGFloat b = 0.0;
                  transform.CGFloat c = 0.0;
                  transform.CGFloat a = 1.0;
                  transform.CGFloat d = 1.0;
                  transform.tCGFloat x = 0.0;
                  transform.tCGFloat y = 0.0;
                  CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(v10, v60), &transform);
LABEL_8:
                  uint64_t v5 = v153;
                  uint64_t v8 = v153 + 4;
                  if (__OFADD__(v153, 4)) {
                    goto LABEL_195;
                  }
                  break;
              }
              break;
          }
          continue;
        }
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
LABEL_239:
        __break(1u);
LABEL_240:
        __break(1u);
LABEL_241:
        __break(1u);
LABEL_242:
        swift_once();
LABEL_189:
        uint64_t v138 = type metadata accessor for Logger();
        __swift_project_value_buffer(v138, (uint64_t)SignatureLogger);
        uint64_t v139 = Logger.logObject.getter();
        os_log_type_t v140 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v139, v140))
        {
          uint64_t v141 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v141 = 0;
          _os_log_impl(&dword_20C2D7000, v139, v140, "read element type decoding path", v141, 2u);
          MEMORY[0x210550270](v141, -1, -1);
        }

LABEL_192:
        uint64_t v136 = v151;
        unint64_t v137 = v152;
LABEL_193:
        outlined consume of Data._Representation(v136, v137);
        return path;
    }
  }
}

id specialized SignatureItem.__allocating_init(rawValue:)(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone(MEMORY[0x263F08928]);
  id v5 = specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)();
  id v7 = v5;
  if (v5)
  {
    objc_allocWithZone((Class)type metadata accessor for SignatureItem());
    id v8 = v7;
    id v7 = SignatureItem.init(coder:)(v8);
    outlined consume of Data._Representation(a1, a2);
    id v9 = v7;

    if (v7) {
  }
    }
  else
  {
    outlined consume of Data._Representation(a1, a2);
  }
  return v7;
}

uint64_t sub_20C415F08()
{
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #3 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(void *a1)
{
  return closure #3 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(a1, *(void **)(v1 + 56), *(const CGPath **)(v1 + 64), *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48));
}

uint64_t sub_20C415F5C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(*(void *)(v1 + 24), a1);
}

uint64_t sub_20C415FA8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #2 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(void *a1)
{
  closure #2 in SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(a1, v1);
}

uint64_t base witness table accessor for CRType in SignatureItem()
{
  return lazy protocol witness table accessor for type SignatureItem and conformance SignatureItem(&lazy protocol witness table cache variable for type SignatureItem and conformance SignatureItem, (void (*)(uint64_t))type metadata accessor for SignatureItem);
}

uint64_t base witness table accessor for CRCodable in SignatureItem()
{
  return lazy protocol witness table accessor for type SignatureItem and conformance SignatureItem((unint64_t *)&lazy protocol witness table cache variable for type SignatureItem and conformance SignatureItem, (void (*)(uint64_t))type metadata accessor for SignatureItem);
}

uint64_t ObjC metadata update function for SignatureItem()
{
  return type metadata accessor for SignatureItem();
}

void type metadata completion function for SignatureItem()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, (unint64_t *)&lazy cache variable for type metadata for PKDrawing?, MEMORY[0x263F14AB8]);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for SignatureItem(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SignatureItem);
}

uint64_t dispatch thunk of static SignatureItem.supportsSecureCoding.getter()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SignatureItem.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of SignatureItem.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SignatureItem.__allocating_init(rawValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of SignatureItem.rawValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SignatureItem.size.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))((*MEMORY[0x263F8EED0] & *v3) + 0xD8))(a1, a2, a3 & 1);
}

void type metadata accessor for Date?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of PaperDocument.PDFPageAndPaperPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PaperDocument.PDFPageAndPaperPage(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type SignatureItem and conformance SignatureItem(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C416474()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:)(uint64_t a1)
{
  return closure #1 in static SignatureItem.signaturePathDataRepresentation(from:toKeyChain:)(a1);
}

uint64_t sub_20C41648C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()(uint64_t a1)
{
  return thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

double specialized Sequence.reduce<A>(_:_:)(void (*a1)(void *__return_ptr, double *, char *), uint64_t a2, double a3, double a4, double a5, double a6)
{
  void (*v37)(void *__return_ptr, double *, char *);
  uint64_t v38;
  char *v39;
  void v40[4];
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;

  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v33 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v34 = *(void *)(v21 - 8);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v20, v45, v17, v22);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v25 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v39 = v24;
  uint64_t v45 = v21;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v26 = v33;
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v27(v16, 1, v11) != 1)
  {
    uint64_t v35 = v27;
    uint64_t v36 = v25;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    uint64_t v28 = v26 + 32;
    uint64_t v29 = v30;
    do
    {
      v29(v13, v16, v11);
      v37(v40, &v41, v13);
      (*(void (**)(char *, uint64_t))(v28 - 24))(v13, v11);
      if (v6) {
        break;
      }
      a3 = *(double *)v40;
      uint64_t v41 = *(double *)v40;
      uint64_t v42 = *(double *)&v40[1];
      uint64_t v43 = *(double *)&v40[2];
      uint64_t v44 = *(double *)&v40[3];
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v35(v16, 1, v11) != 1);
  }
  (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v45);
  return a3;
}

{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  void (*v37)(void *__return_ptr, double *, char *);
  uint64_t v38;
  char *v39;
  void v40[4];
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;

  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v33 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v34 = *(void *)(v21 - 8);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v20, v45, v17, v22);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CRSequence<A>, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v25 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CRSequence<A>.Iterator, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v39 = v24;
  uint64_t v45 = v21;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v26 = v33;
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v27(v16, 1, v11) != 1)
  {
    uint64_t v35 = v27;
    uint64_t v36 = v25;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    uint64_t v28 = v26 + 32;
    uint64_t v29 = v30;
    do
    {
      v29(v13, v16, v11);
      v37(v40, &v41, v13);
      (*(void (**)(char *, uint64_t))(v28 - 24))(v13, v11);
      if (v6) {
        break;
      }
      a3 = *(double *)v40;
      uint64_t v41 = *(double *)v40;
      uint64_t v42 = *(double *)&v40[1];
      uint64_t v43 = *(double *)&v40[2];
      uint64_t v44 = *(double *)&v40[3];
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v35(v16, 1, v11) != 1);
  }
  (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v45);
  return a3;
}

double specialized Sequence.reduce<A>(_:_:)(void (*a1)(void *__return_ptr, double *, id *), double a2, double a3, double a4, double a5, uint64_t a6, unint64_t a7)
{
  double v10 = a2;
  double v18 = a2;
  double v19 = a3;
  double v20 = a4;
  double v21 = a5;
  if (a7 >> 62) {
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)((a7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; uint64_t v11 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v12 = 4;
    while (1)
    {
      id v13 = (a7 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v12 - 4, a7) : *(id *)(a7 + 8 * v12);
      uint64_t v14 = v13;
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      id v22 = v13;
      a1(v17, &v18, &v22);
      if (v7)
      {
        swift_bridgeObjectRelease();

        return v10;
      }

      double v10 = *(double *)v17;
      double v18 = *(double *)v17;
      double v19 = *(double *)&v17[1];
      double v20 = *(double *)&v17[2];
      double v21 = *(double *)&v17[3];
      ++v12;
      if (v15 == v11) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Sequence.reduce<A>(_:_:)(void (*a1)(void *__return_ptr, double *, char *), double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7)
{
  void (*v36)(void *__return_ptr, double *, char *);
  void v37[4];
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;

  uint64_t v36 = a1;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  double v19 = (char *)&v31 - v18;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v20 = *(void *)(a7 + 56);
  uint64_t v32 = a7 + 56;
  uint64_t v21 = 1 << *(unsigned char *)(a7 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v35 = v14 + 16;
  int64_t v33 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v34 = v14 + 32;
  uint64_t v42 = a7;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  if (!v23) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  for (unint64_t i = v26 | (v25 << 6); ; unint64_t i = __clz(__rbit64(v29)) + (v25 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v19, *(void *)(v42 + 48) + *(void *)(v14 + 72) * i, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    v36(v37, &v38, v16);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (v7) {
      return swift_release();
    }
    uint64_t v38 = *(double *)v37;
    uint64_t v39 = *(double *)&v37[1];
    uint64_t v40 = *(double *)&v37[2];
    uint64_t v41 = *(double *)&v37[3];
    if (v23) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v25++, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v33) {
      return swift_release();
    }
    unint64_t v29 = *(void *)(v32 + 8 * v25);
    if (!v29) {
      break;
    }
LABEL_17:
    unint64_t v23 = (v29 - 1) & v29;
  }
  int64_t v30 = v25 + 1;
  if (v25 + 1 >= v33) {
    return swift_release();
  }
  unint64_t v29 = *(void *)(v32 + 8 * v30);
  if (v29) {
    goto LABEL_16;
  }
  int64_t v30 = v25 + 2;
  if (v25 + 2 >= v33) {
    return swift_release();
  }
  unint64_t v29 = *(void *)(v32 + 8 * v30);
  if (v29) {
    goto LABEL_16;
  }
  int64_t v30 = v25 + 3;
  if (v25 + 3 >= v33) {
    return swift_release();
  }
  unint64_t v29 = *(void *)(v32 + 8 * v30);
  if (v29) {
    goto LABEL_16;
  }
  int64_t v30 = v25 + 4;
  if (v25 + 4 >= v33) {
    return swift_release();
  }
  unint64_t v29 = *(void *)(v32 + 8 * v30);
  if (v29)
  {
LABEL_16:
    int64_t v25 = v30;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v25 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v25 >= v33) {
      return swift_release();
    }
    unint64_t v29 = *(void *)(v32 + 8 * v25);
    ++v30;
    if (v29) {
      goto LABEL_17;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

double Capsule<>.contentBounds(includeDrawing:)(int a1)
{
  uint64_t v2 = v1;
  LODWORD(v87) = a1;
  uint64_t v3 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v3);
  uint64_t v80 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v5 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v79 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v90 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  *(void *)&long long v92 = *(v84 - 1);
  MEMORY[0x270FA5388](v84);
  uint64_t v85 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v81 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v91 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v83 = *(uint64_t (***)(char *, uint64_t, void (**)(void, void)))(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v17 - 8);
  double v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  double x = *MEMORY[0x263F001A0];
  double y = *(double *)(MEMORY[0x263F001A0] + 8);
  double width = *(double *)(MEMORY[0x263F001A0] + 16);
  double height = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v88 = v3;
  if ((v87 & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v76 = v14;
  uint64_t v77 = v16;
  uint64_t v78 = v13;
  uint64_t v87 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = (void (**)(void, void))v11;
  uint64_t v27 = v5;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
LABEL_4:
    uint64_t v28 = v86;
    unint64_t v29 = v90;
    uint64_t v30 = v89;
    uint64_t v31 = v84;
    goto LABEL_8;
  }
  uint64_t v75 = v21;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v87, v19, v20);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v32 = (uint64_t)v77;
  uint64_t v33 = v20;
  Ref.subscript.getter();
  uint64_t v34 = v83;
  uint64_t v35 = v78;
  uint64_t v36 = v82;
  uint64_t v37 = v83[2](v78, v32 + *(int *)(v76 + 20), v82);
  MEMORY[0x270FA5388](v37);
  *(&v74 - 2) = v2;
  double v38 = specialized Sequence.reduce<A>(_:_:)((void (*)(void *__return_ptr, double *, char *))partial apply for specialized closure #1 in PKDrawingStruct.bounds<A>(in:), (uint64_t)(&v74 - 4), x, y, width, height);
  double v40 = v39;
  double v42 = v41;
  double v44 = v43;
  ((void (*)(char *, void))v34[1])(v35, v36);
  _s8PaperKit0A0VWOhTm_2(v32, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
  BOOL v45 = CGRect.isFinite.getter(v38, v40, v42, v44);
  uint64_t v5 = v27;
  uint64_t v28 = v86;
  uint64_t v30 = v89;
  uint64_t v31 = v84;
  if (v45)
  {
    v103.origin.double x = x;
    v103.origin.double y = y;
    v103.size.double width = width;
    v103.size.double height = height;
    v107.origin.double x = v38;
    v107.origin.double y = v40;
    v107.size.double width = v42;
    v107.size.double height = v44;
    CGRect v104 = CGRectUnion(v103, v107);
    double x = v104.origin.x;
    double y = v104.origin.y;
    double width = v104.size.width;
    double height = v104.size.height;
  }
  (*(void (**)(char *, uint64_t))(v75 + 8))(v87, v33);
  unint64_t v29 = v90;
LABEL_8:
  swift_getKeyPath();
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v47 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v48 = v85;
  uint64_t v87 = (char *)v46;
  uint64_t v86 = v47;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v49 = v91;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, void *))(v92 + 8))(v48, v31);
  CROrderedSet.Iterator.next()();
  uint64_t v50 = (char *)(v5 + 48);
  uint64_t v51 = *(uint64_t (***)(char *, uint64_t, void (**)(void, void)))(v5 + 48);
  uint64_t v52 = v28;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v51)(v29, 1, v28) != 1)
  {
    uint64_t v54 = *(void **)(v5 + 32);
    uint64_t v53 = v5 + 32;
    uint64_t v84 = v54;
    uint64_t v83 = v51;
    uint64_t v55 = (uint64_t)v80;
    uint64_t v56 = v79;
    uint64_t v82 = (void (**)(void, void))(v53 - 24);
    uint64_t v85 = v50;
    do
    {
      ((void (*)(char *, char *, uint64_t))v84)(v56, v29, v52);
      _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      SharedTagged_9.subscript.getter();
      uint64_t v57 = v53;
      uint64_t v58 = v97;
      uint64_t v59 = v98;
      __swift_project_boxed_opaque_existential_1(v96, v97);
      Capsule<>.root.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      long long v92 = v93;
      uint64_t v60 = v2;
      uint64_t v61 = v94;
      uint64_t v62 = v95;
      _s8PaperKit0A0VWOhTm_2(v55, (uint64_t (*)(void))type metadata accessor for Paper);
      long long v99 = v92;
      uint64_t v100 = v61;
      uint64_t v101 = v62;
      uint64_t v2 = v60;
      char v102 = 0;
      uint64_t v63 = *(double (**)(long long *, uint64_t, uint64_t))(v59 + 112);
      unint64_t v29 = v90;
      uint64_t v64 = v58;
      uint64_t v49 = v91;
      uint64_t v65 = v59;
      uint64_t v53 = v57;
      uint64_t v30 = v89;
      CGFloat v66 = v63(&v99, v64, v65);
      CGFloat v68 = v67;
      CGFloat v70 = v69;
      CGFloat v72 = v71;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
      v105.origin.double x = x;
      v105.origin.double y = y;
      v105.size.double width = width;
      v105.size.double height = height;
      v108.origin.double x = v66;
      v108.origin.double y = v68;
      v108.size.double width = v70;
      v108.size.double height = v72;
      CGRect v106 = CGRectUnion(v105, v108);
      double x = v106.origin.x;
      double y = v106.origin.y;
      double width = v106.size.width;
      double height = v106.size.height;
      (*v82)(v56, v52);
      CROrderedSet.Iterator.next()();
    }
    while (((unsigned int (*)(char *, uint64_t, uint64_t))v83)(v29, 1, v52) != 1);
  }
  (*(void (**)(char *, uint64_t))(v81 + 8))(v49, v30);
  return x;
}

uint64_t static CRDataStoreBundle<>.readPaper(_:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v15[2] = a2;
  v15[0] = a3;
  v15[1] = a1;
  FileVersionPolicdouble y = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  uint64_t v4 = *(void *)(FileVersionPolicy - 8);
  MEMORY[0x270FA5388](FileVersionPolicy);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v7 = type metadata accessor for CRCodableVersion();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_20C835740;
  unint64_t v12 = v11 + v10;
  uint64_t v13 = *(void (**)(unint64_t, void, uint64_t))(v8 + 104);
  v13(v12, *MEMORY[0x263F32EB0], v7);
  v13(v12 + v9, *MEMORY[0x263F32EB8], v7);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F32FB0], FileVersionPolicy);
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, FileVersionPolicy);
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for Paper.drawing : Paper()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for Paper.drawing : Paper(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t closure #1 in Capsule<>.transformContents(_:)(uint64_t a1, CGFloat *a2)
{
  CGFloat v3 = *a2;
  CGFloat v4 = a2[1];
  CGFloat v5 = a2[2];
  CGFloat v6 = a2[3];
  CGFloat v7 = a2[4];
  CGFloat v8 = a2[5];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v117 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v116);
  uint64_t v115 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v119 = (uint64_t)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v100 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v114 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v99 = *(void *)(v124 - 8);
  MEMORY[0x270FA5388](v124);
  uint64_t v123 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v122 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v98 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  uint64_t v120 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v97 = *(void *)(v131 - 8);
  MEMORY[0x270FA5388](v131);
  uint64_t v118 = (char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v130 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  uint64_t v126 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v125 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v104 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  CGRect v103 = (char *)&v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v101);
  char v102 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v106 = *(void *)(v129 - 8);
  MEMORY[0x270FA5388](v129);
  uint64_t v128 = (char *)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v144 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  unint64_t v29 = (char *)&v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v30 - 8);
  unint64_t v112 = (void (**)(char *, uint64_t, uint64_t))((char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v109 = *(void *)(v110 - 8);
  MEMORY[0x270FA5388](v110);
  CGRect v108 = (char *)&v96 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v35 = (char *)&v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = (void (**)(void, void))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v138 = (unsigned int (*)(char *, uint64_t, uint64_t))*(v135 - 1);
  MEMORY[0x270FA5388](v135);
  uint64_t v134 = (char *)&v96 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  float v111 = *(void (***)(char *, uint64_t))(v37 - 8);
  MEMORY[0x270FA5388](v37);
  double v39 = (void (**)(char *, uint64_t))((char *)&v96 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getKeyPath();
  uint64_t v107 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Capsule.Ref<>.subscript.getter();
  double v40 = v39;
  swift_release();
  double v41 = v135;
  double v42 = v134;
  CROrderedSet.makeIterator()();
  (*((void (**)(char *, void))v138 + 1))(v42, v41);
  CROrderedSet.Iterator.next()();
  uint64_t v43 = v144;
  double v44 = (void (**)(void, void))(v144 + 48);
  uint64_t v138 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48);
  if (v138(v35, 1, v27) != 1)
  {
    uint64_t v134 = *(char **)(v43 + 32);
    uint64_t v144 = v43 + 32;
    uint64_t v133 = (void (**)(char *, uint64_t))(v43 + 8);
    unint64_t v137 = (void (*)(char *, char *, uint64_t))v37;
    uint64_t v136 = v40;
    uint64_t v135 = v44;
    do
    {
      ((void (*)(char *, char *, uint64_t))v134)(v29, v35, v27);
      BOOL v45 = (void (*)(CGAffineTransform *, void))SharedTagged_9.subscript.modify();
      uint64_t v46 = v35;
      uint64_t v47 = v29;
      uint64_t v48 = v27;
      uint64_t v49 = a1;
      uint64_t v52 = *(void *)(v50 + 24);
      uint64_t v51 = *(void *)(v50 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v50, v52);
      uint64_t v53 = v52;
      a1 = v49;
      uint64_t v27 = v48;
      unint64_t v29 = v47;
      uint64_t v35 = v46;
      uint64_t v54 = (void (*)(CGAffineTransform *, void))(*(uint64_t (**)(CGAffineTransform *, uint64_t, uint64_t))(v51 + 24))(&v139, v53, v51);
      CGRect v145 = *v55;
      t1.CGFloat a = v3;
      t1.CGFloat b = v4;
      t1.CGFloat c = v5;
      t1.CGFloat d = v6;
      t1.tdouble x = v7;
      t1.tdouble y = v8;
      *uint64_t v55 = CGRectApplyAffineTransform(v145, &t1);
      v54(&v139, 0);
      v45(&t2, 0);
      double v40 = v136;
      uint64_t v37 = (uint64_t)v137;
      (*v133)(v29, v27);
      CROrderedSet.Iterator.next()();
    }
    while (v138(v35, 1, v27) != 1);
  }
  v111[1]((char *)v40, v37);
  swift_getKeyPath();
  uint64_t v56 = (uint64_t)v112;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  uint64_t v57 = v109;
  uint64_t v58 = v110;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v56, 1, v110) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  }
  double v60 = *(double *)&a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v108, v56, v58);
  uint64_t v61 = (uint64_t)v102;
  double v132 = v60;
  Ref.subscript.getter();
  uint64_t v62 = v104;
  uint64_t v63 = v103;
  uint64_t v64 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v103, v61 + *(int *)(v101 + 20), v105);
  _s8PaperKit0A0VWOhTm_2(v61, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
  uint64_t v65 = v125;
  CROrderedSet.Iterator.next()();
  CGFloat v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48);
  uint64_t v67 = v127;
  uint64_t v144 = v130 + 48;
  uint64_t v138 = v66;
  if (v66(v65, 1, v127) != 1)
  {
    unint64_t v137 = *(void (**)(char *, char *, uint64_t))(v130 + 32);
    uint64_t v136 = (void (**)(char *, uint64_t))(v99 + 8);
    uint64_t v135 = (void (**)(void, void))(v98 + 8);
    uint64_t v134 = (char *)(v97 + 48);
    unint64_t v112 = (void (**)(char *, uint64_t, uint64_t))(v97 + 32);
    CGFloat v68 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
    double v69 = (void (**)(char *, uint64_t))(v100 + 8);
    CGFloat v70 = (void (**)(char *, uint64_t, uint64_t))(v100 + 32);
    float v111 = (void (**)(char *, uint64_t))(v97 + 8);
    v130 += 32;
    uint64_t v133 = (void (**)(char *, uint64_t))(v130 - 24);
    uint64_t v113 = v14;
    v137(v126, v65, v67);
    while (1)
    {
      uint64_t v74 = v120;
      Ref.subscript.getter();
      uint64_t v75 = v123;
      uint64_t v76 = v121;
      CRRegister.value.getter();
      uint64_t v77 = v122;
      uint64_t v78 = v124;
      SharedTagged_2.tagged1.getter();
      uint64_t v79 = (uint64_t)v77;
      (*v136)(v75, v78);
      (*v135)(v74, v76);
      uint64_t v80 = v77;
      uint64_t v81 = v131;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v134)(v80, 1, v131) == 1)
      {
        double v71 = v126;
        uint64_t v72 = v127;
        (*v133)(v126, v127);
        outlined destroy of StocksKitCurrencyCache.Provider?(v79, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
      }
      else
      {
        (*v112)(v118, v79, v81);
        CGFloat v82 = v132;
        uint64_t v83 = (void (*)(CGAffineTransform *, void))Ref.subscript.modify();
        specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(*(uint64_t *)&v82);
        v83(&t1, 0);
        Ref.subscript.getter();
        t1.CGFloat a = v82;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
        uint64_t v84 = v114;
        CRRegister.wrappedValue.getter();
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Capsule<Paper>.Ref and conformance Capsule<A>.Ref, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>.Ref);
        uint64_t v85 = (uint64_t)v117;
        uint64_t v86 = (uint64_t)v115;
        for (uint64_t i = v113; ; (*v70)(v84, v85, i))
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>.Ref);
          Ref.subscript.getter();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
          CRRegister.wrappedValue.getter();
          _s8PaperKit0A0VWOhTm_2(v86, type metadata accessor for PKStrokeInheritedProperties);
          if ((*v68)(v85, 1, i) == 1) {
            break;
          }
          (*v69)(v84, i);
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v85, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
        _s8PaperKit0A0VWOhTm_2(v119, type metadata accessor for PKStrokeStruct);
        swift_release();
        uint64_t v88 = (void (*)(char *, void))Ref.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
        uint64_t v89 = (void (*)(char *, void))CRRegister.wrappedValue.modify();
        uint64_t v91 = v90;
        long long v92 = v90[1];
        long long v93 = v90[2];
        *(_OWORD *)&t1.CGFloat a = *v90;
        *(_OWORD *)&t1.CGFloat c = v92;
        *(_OWORD *)&t1.tdouble x = v93;
        t2.CGFloat a = v3;
        t2.CGFloat b = v4;
        t2.CGFloat c = v5;
        t2.CGFloat d = v6;
        t2.tdouble x = v7;
        t2.tdouble y = v8;
        CGAffineTransformConcat(&v139, &t1, &t2);
        long long v94 = *(_OWORD *)&v139.c;
        long long v95 = *(_OWORD *)&v139.tx;
        *uint64_t v91 = *(_OWORD *)&v139.a;
        v91[1] = v94;
        v91[2] = v95;
        v89(v142, 0);
        v88(v143, 0);
        (*v69)(v84, i);
        (*v111)(v118, v131);
        double v71 = v126;
        uint64_t v72 = v127;
        (*v133)(v126, v127);
      }
      uint64_t v73 = v125;
      CROrderedSet.Iterator.next()();
      if (v138(v73, 1, v72) == 1) {
        break;
      }
      v137(v71, v73, v72);
    }
  }
  (*(void (**)(char *, uint64_t))(v106 + 8))(v128, v129);
  return (*(uint64_t (**)(char *, uint64_t))(v109 + 8))(v108, v110);
}

void PaperKitCodingError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static PaperKitCodingError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int PaperKitCodingError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void one-time initialization function for allFileFormatVersions()
{
  allFileFormatVersions._rawValue = &outlined read-only object #0 of one-time initialization function for allFileFormatVersions;
}

uint64_t one-time initialization function for allReadableFileFormatVersions()
{
  if (one-time initialization token for allFileFormatVersions != -1) {
    swift_once();
  }
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t result = specialized Array.append<A>(contentsOf:)(v0);
  allReadableFileFormatVersions._rawValue = &outlined read-only object #0 of one-time initialization function for allReadableFileFormatVersions;
  return result;
}

uint64_t static CRDataStoreBundle<>.canDisplayPaper(at:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v0 = type metadata accessor for CRCodableVersion();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_20C835740;
  unint64_t v5 = v4 + v3;
  CGFloat v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x263F32EB0], v0);
  v6(v5 + v2, *MEMORY[0x263F32EB8], v0);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  char v7 = static CRDataStoreBundle.canRead(url:allowedEncodings:allowedAppFormats:)();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t static CRDataStoreBundle<>.canDisplayPaperOnPreSydney(at:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v0 = type metadata accessor for CRCodableVersion();
  uint64_t v1 = *(void *)(v0 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_20C832C20;
  (*(void (**)(unint64_t, void, uint64_t))(v1 + 104))(v3 + v2, *MEMORY[0x263F32EB0], v0);
  char v4 = static CRDataStoreBundle.canRead(url:allowedEncodings:allowedAppFormats:)();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t static CRDataStoreBundle<>.writePaper(_:model:url:)()
{
  return static CRDataStoreBundle<>.writePaper(_:model:url:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(unint64_t, void, uint64_t);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v0 = type metadata accessor for CRCodableVersion();
  uint64_t v1 = *(void *)(v0 - 8);
  unint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  char v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_20C835740;
  unint64_t v5 = v4 + v3;
  CGFloat v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x263F32EB0], v0);
  v6(v5 + v2, *MEMORY[0x263F32EB8], v0);
  if (one-time initialization token for allFileFormatVersions != -1) {
    swift_once();
  }
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();
  return swift_bridgeObjectRelease();
}

uint64_t static CRDataStoreBundle<>.copyPaper(from:fromContext:to:toContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a4;
  uint64_t v49 = a2;
  uint64_t v44 = a3;
  uint64_t v50 = a1;
  FileVersionPolicdouble y = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  uint64_t v4 = *(void *)(FileVersionPolicy - 8);
  MEMORY[0x270FA5388](FileVersionPolicy);
  CGFloat v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v47 = v7;
  MEMORY[0x270FA5388](v7);
  BOOL v45 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v13 = type metadata accessor for CRCodableVersion();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v42 = v12;
  uint64_t v37 = v16 | 7;
  uint64_t v38 = v17 + 2 * v15;
  uint64_t v18 = swift_allocObject();
  long long v36 = xmmword_20C835740;
  *(_OWORD *)(v18 + 16) = xmmword_20C835740;
  uint64_t v41 = v17;
  uint64_t v19 = v18 + v17;
  uint64_t v20 = *(void (**)(uint64_t))(v14 + 104);
  unsigned int v35 = *MEMORY[0x263F32EB0];
  v20(v18 + v17);
  uint64_t v43 = v15;
  unsigned int v34 = *MEMORY[0x263F32EB8];
  double v39 = v20;
  uint64_t v40 = v13;
  v20(v19 + v15);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  uint64_t v21 = FileVersionPolicy;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F32FB0], FileVersionPolicy);
  uint64_t v22 = v52;
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v21);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = v11;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v21);
    swift_bridgeObjectRelease();
    uint64_t v25 = v45;
    uint64_t v26 = v47;
    Capsule.copy()();
    uint64_t v27 = v46;
    uint64_t v28 = *(void (**)(char *, uint64_t))(v46 + 8);
    v28(v24, v26);
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    CRContext.assetManager.getter();
    Capsule.copyAssetsSync(to:)();
    uint64_t v52 = v28;
    swift_release();
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = v36;
    uint64_t v30 = v40;
    uint64_t v31 = v29 + v41;
    uint64_t v32 = v39;
    ((void (*)(uint64_t, void, uint64_t))v39)(v29 + v41, v35, v40);
    ((void (*)(uint64_t, void, uint64_t))v32)(v31 + v43, v34, v30);
    if (one-time initialization token for allFileFormatVersions != -1) {
      swift_once();
    }
    static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v52)(v24, v47);
  }
}

uint64_t static CRDataStoreBundle.canDisplayPaper(at:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v0 = type metadata accessor for CRCodableVersion();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_20C835740;
  unint64_t v5 = v4 + v3;
  CGFloat v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x263F32EB0], v0);
  v6(v5 + v2, *MEMORY[0x263F32EB8], v0);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  char v7 = static CRDataStoreBundle.canRead(url:allowedEncodings:allowedAppFormats:)();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t static CRDataStoreBundle.canDisplayPaperOnPreSydney(at:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v0 = type metadata accessor for CRCodableVersion();
  uint64_t v1 = *(void *)(v0 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_20C832C20;
  (*(void (**)(unint64_t, void, uint64_t))(v1 + 104))(v3 + v2, *MEMORY[0x263F32EB0], v0);
  char v4 = static CRDataStoreBundle.canRead(url:allowedEncodings:allowedAppFormats:)();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t static CRDataStoreBundle.paperBundle(_:sync:at:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Capsule();
  uint64_t v10 = type metadata accessor for Optional();
  double v11 = MEMORY[0x270FA5388](v10);
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)&v25 - v12, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v14 = type metadata accessor for CRCodableVersion();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_20C835740;
  unint64_t v19 = v18 + v17;
  uint64_t v20 = *(void (**)(unint64_t, void, uint64_t))(v15 + 104);
  v20(v19, *MEMORY[0x263F32EB0], v14);
  v20(v19 + v16, *MEMORY[0x263F32EB8], v14);
  uint64_t v21 = one-time initialization token for allReadableFileFormatVersions;
  id v22 = a1;
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v23 = one-time initialization token for allFileFormatVersions;
  swift_bridgeObjectRetain();
  if (v23 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return CRDataStoreBundle.__allocating_init(_:sync:at:allowedEncodings:allowedAppFormats:writableAppFormats:)();
}

uint64_t static CRDataStoreBundle.readPaper(_:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v15[2] = a2;
  v15[0] = a3;
  v15[1] = a1;
  FileVersionPolicdouble y = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  uint64_t v4 = *(void *)(FileVersionPolicy - 8);
  MEMORY[0x270FA5388](FileVersionPolicy);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v7 = type metadata accessor for CRCodableVersion();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_20C835740;
  unint64_t v12 = v11 + v10;
  uint64_t v13 = *(void (**)(unint64_t, void, uint64_t))(v8 + 104);
  v13(v12, *MEMORY[0x263F32EB0], v7);
  v13(v12 + v9, *MEMORY[0x263F32EB8], v7);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F32FB0], FileVersionPolicy);
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, FileVersionPolicy);
  return swift_bridgeObjectRelease();
}

uint64_t static CRDataStoreBundle.writePaper(_:model:url:)()
{
  return static CRDataStoreBundle<>.writePaper(_:model:url:)();
}

uint64_t static CRDataStoreBundle.copyPaper(from:fromContext:to:toContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static CRDataStoreBundle.copyPaper(from:fromContext:to:toContext:eliminateMetadata:)(a1, a2, a3, a4, 1);
}

uint64_t static CRDataStoreBundle.copyPaper(from:fromContext:to:toContext:eliminateMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v18 = a5;
  v17[1] = a4;
  uint64_t v8 = type metadata accessor for Capsule();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v17 - v13;
  uint64_t result = static CRDataStoreBundle.readPaper(_:url:)(a2, a1, (uint64_t)v17 - v13);
  if (!v5)
  {
    v17[0] = v9;
    if (v18)
    {
      Capsule.copy()();
      uint64_t v16 = v17[0];
      (*(void (**)(char *, uint64_t))(v17[0] + 8))(v14, v8);
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v14, v11, v8);
    }
    CRContext.assetManager.getter();
    Capsule.copyAssetsSync(to:)();
    swift_release();
    static CRDataStoreBundle<>.writePaper(_:model:url:)();
    return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8))(v14, v8);
  }
  return result;
}

uint64_t static CRDataStoreBundle<>.copyPaper(from:fromContext:to:toContext:forNewAttachment:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v87 = a5;
  uint64_t v88 = a4;
  uint64_t v84 = a3;
  uint64_t v92 = a2;
  long long v93 = a1;
  uint64_t v69 = type metadata accessor for CRKeyPath();
  uint64_t v68 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v67 = &v65[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v85 = &v65[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v8 - 8);
  CGFloat v70 = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v72 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  double v71 = &v65[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  FileVersionPolicCGFloat y = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  uint64_t v11 = *(void *)(FileVersionPolicy - 8);
  MEMORY[0x270FA5388](FileVersionPolicy);
  uint64_t v13 = &v65[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v89 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  uint64_t v73 = &v65[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  uint64_t v86 = &v65[-v16];
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = &v65[-v18];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v21 = type metadata accessor for CRCodableVersion();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void *)(v22 + 72);
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  uint64_t v81 = v20;
  uint64_t v79 = v25 + 2 * v23;
  uint64_t v78 = v24 | 7;
  uint64_t v26 = swift_allocObject();
  long long v77 = xmmword_20C835740;
  *(_OWORD *)(v26 + 16) = xmmword_20C835740;
  uint64_t v80 = v25;
  uint64_t v27 = v26 + v25;
  uint64_t v28 = v22 + 104;
  uint64_t v29 = *(void (**)(uint64_t))(v22 + 104);
  unsigned int v76 = *MEMORY[0x263F32EB0];
  v29(v27);
  uint64_t v82 = v23;
  uint64_t v30 = v27 + v23;
  unsigned int v31 = *MEMORY[0x263F32EB8];
  uint64_t v32 = *MEMORY[0x263F32EB8];
  uint64_t v83 = v21;
  uint64_t v75 = v28;
  ((void (*)(uint64_t, uint64_t, uint64_t))v29)(v30, v32, v21);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  uint64_t v33 = v11;
  uint64_t v34 = FileVersionPolicy;
  (*(void (**)(unsigned char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x263F32FB0], FileVersionPolicy);
  uint64_t v35 = v97;
  long long v36 = v94;
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  if (!v36)
  {
    long long v93 = v29;
    long long v94 = v19;
    (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v13, v34);
    swift_bridgeObjectRelease();
    unsigned int v66 = v31;
    if (v87)
    {
      uint64_t v37 = v94;
      v98.origin.CGFloat x = Capsule<>.contentBounds(includeDrawing:)(1);
      CGFloat x = v98.origin.x;
      CGFloat y = v98.origin.y;
      CGFloat width = v98.size.width;
      CGFloat height = v98.size.height;
      CGFloat MinY = CGRectGetMinY(v98);
      Translation = CGAffineTransformMakeTranslation(&v95, 0.0, -MinY);
      CGAffineTransform v96 = v95;
      MEMORY[0x270FA5388](Translation);
      *(void *)&v65[-16] = &v96;
      uint64_t v44 = v90;
      uint64_t v45 = Capsule.callAsFunction<A>(_:)();
      MEMORY[0x270FA5388](v45);
      *(CGFloat *)&v65[-32] = x;
      *(CGFloat *)&v65[-24] = y;
      *(CGFloat *)&v65[-16] = width;
      *(CGFloat *)&v65[-8] = height;
      Capsule.callAsFunction<A>(_:)();
    }
    else
    {
      uint64_t v44 = v90;
      uint64_t v37 = v94;
    }
    uint64_t v46 = v89;
    uint64_t v47 = v86;
    Capsule.copy()();
    uint64_t v48 = *(void (**)(unsigned char *, uint64_t))(v46 + 8);
    v48(v37, v44);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 32))(v37, v47, v44);
    CRContext.assetManager.getter();
    Capsule.copyAssetsSync(to:)();
    swift_release();
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = v77;
    uint64_t v50 = v49 + v80;
    uint64_t v51 = v83;
    uint64_t v52 = v93;
    ((void (*)(uint64_t, void, uint64_t))v93)(v49 + v80, v76, v83);
    ((void (*)(uint64_t, void, uint64_t))v52)(v50 + v82, v66, v51);
    if (one-time initialization token for allFileFormatVersions != -1) {
      swift_once();
    }
    uint64_t v53 = v94;
    static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();
    swift_bridgeObjectRelease();
    uint64_t v54 = (uint64_t)v85;
    uint64_t v55 = v90;
    uint64_t v57 = v73;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v89 + 16))(v73, v53, v90);
    swift_getKeyPath();
    _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Capsule<>.subscript.getter();
    swift_release();
    v48(v57, v55);
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    uint64_t v59 = *(void *)(v58 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v54, 1, v58) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      uint64_t v60 = (uint64_t)v70;
      uint64_t v61 = v72;
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v70, 1, 1, v72);
      uint64_t v62 = v71;
    }
    else
    {
      uint64_t v63 = v67;
      Ref.id.getter();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v54, v58);
      uint64_t v60 = (uint64_t)v70;
      CRKeyPath.uuid.getter();
      (*(void (**)(unsigned char *, uint64_t))(v68 + 8))(v63, v69);
      uint64_t v61 = v72;
      int v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v60, 1, v72);
      uint64_t v62 = v71;
      if (v64 != 1)
      {
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v74 + 32))(v71, v60, v61);
        goto LABEL_17;
      }
    }
    UUID.init()();
    outlined destroy of StocksKitCurrencyCache.Provider?(v60, &demangling cache variable for type metadata for UUID?);
LABEL_17:
    uint64_t v35 = UUID.uuidString.getter();
    (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v62, v61);
    v48(v94, v55);
    return v35;
  }
  (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v13, v34);
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t closure #1 in static CRDataStoreBundle<>.copyPaper(from:fromContext:to:toContext:forNewAttachment:)(double a1, double a2, double a3, double a4)
{
  CGFloat Height = CGRectGetHeight(*(CGRect *)&a1);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v5 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v6 = (void (*)(uint64_t *, void))CRRegister.wrappedValue.modify();
  *(CGFloat *)(v7 + 24) = Height;
  v6(&v9, 0);
  return v5(v10, 0);
}

uint64_t Capsule<>.init(_:fromPDF:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static CRKeyPath.unique.getter();
  uint64_t v14 = a2;
  uint64_t v15 = a1;
  type metadata accessor for PaperDocument(0);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.init(id:initClosure:)();

  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a2, v11);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v8 + 32))(a3, v10, v7);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a3, 0, 1, v7);
}

uint64_t closure #1 in Capsule<>.init(_:fromPDF:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  double v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a2, v6, v11);
  swift_retain();
  uint64_t v14 = CRContext.assetManager.getter();
  specialized PaperDocument.init<A>(url:in:assetManager:)((uint64_t)v9, a1, v14, (uint64_t)v13);
  uint64_t v15 = type metadata accessor for PaperDocument(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v13, 1, v15) != 1) {
    return outlined init with take of PDFPageID((uint64_t)v13, a3, type metadata accessor for PaperDocument);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for PaperDocument?);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)logger);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v19 = 0;
    _os_log_impl(&dword_20C2D7000, v17, v18, "Could not load PDF.", v19, 2u);
    MEMORY[0x210550270](v19, -1, -1);
  }

  uint64_t v20 = type metadata accessor for CRCodingError();
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, MEMORY[0x263F32D80]);
  swift_allocError();
  *uint64_t v21 = 0xD000000000000013;
  v21[1] = 0x800000020C854A30;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, *MEMORY[0x263F32D70], v20);
  return swift_willThrow();
}

uint64_t Capsule<>.exportToPDF(_:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  type metadata accessor for PaperDocument(0);
  v2[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](Capsule<>.exportToPDF(_:), 0, 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  uint64_t v3 = *(void *)(*v1 + 112);
  uint64_t v4 = *(void **)(*v1 + 96);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  _s8PaperKit0A0VWOhTm_2(v3, type metadata accessor for PaperDocument);
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  return v5(a1);
}

uint64_t Capsule<>.exportToPDF(_:)()
{
  uint64_t v1 = *(void **)(v0 + 96);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 16) = xmmword_20C834980;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  uint64_t v6 = (uint64_t (*)(void *, uint64_t, uint64_t))((char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
                                                        + async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:));
  id v2 = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v3;
  *uint64_t v3 = v0;
  v3[1] = Capsule<>.exportToPDF(_:);
  uint64_t v4 = *(void *)(v0 + 104);
  return v6(v1, v4, v0 + 16);
}

uint64_t Capsule<>.write(_:toPDF:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  type metadata accessor for PaperDocument(0);
  v3[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](Capsule<>.write(_:toPDF:), 0, 0);
}

uint64_t Capsule<>.write(_:toPDF:)()
{
  uint64_t v1 = *(void **)(v0 + 96);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 16) = xmmword_20C834980;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  uint64_t v6 = (uint64_t (*)(void *, uint64_t, uint64_t))((char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
                                                        + async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:));
  id v2 = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v3;
  *uint64_t v3 = v0;
  v3[1] = Capsule<>.write(_:toPDF:);
  uint64_t v4 = *(void *)(v0 + 112);
  return v6(v1, v4, v0 + 16);
}

uint64_t Capsule<>.write(_:toPDF:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  uint64_t v3 = *(void **)(*(void *)v1 + 96);
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();

  _s8PaperKit0A0VWOhTm_2(v2, type metadata accessor for PaperDocument);
  return MEMORY[0x270FA2498](Capsule<>.write(_:toPDF:), 0, 0);
}

uint64_t Capsule<>.write(_:toPDF:)@<X0>(NSURL *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 136);
  URL._bridgeToObjectiveC()(a1);
  uint64_t v4 = v3;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for PDFDocumentWriteOption(0);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, type metadata accessor for PDFDocumentWriteOption);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_writeToURL_withOptions_, v4, isa);

  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v1 + 8);
  return v6();
}

uint64_t specialized PaperDocument.newPDFDocument<A>(use:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[49] = a3;
  v4[50] = v3;
  v4[47] = a1;
  v4[48] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>));
  v4[51] = v5;
  v4[52] = *(void *)(v5 - 8);
  v4[53] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v4[56] = v6;
  v4[57] = *(void *)(v6 - 8);
  v4[58] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>);
  v4[59] = swift_task_alloc();
  v4[60] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  v4[61] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v4[62] = swift_task_alloc();
  v4[63] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v4[66] = swift_task_alloc();
  v4[67] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for PageId(0);
  v4[68] = v7;
  v4[69] = *(void *)(v7 - 8);
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  v4[72] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PDFPageID();
  v4[73] = v8;
  v4[74] = *(void *)(v8 - 8);
  v4[75] = swift_task_alloc();
  v4[76] = swift_task_alloc();
  v4[77] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
  v4[78] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  v4[79] = swift_task_alloc();
  v4[80] = swift_task_alloc();
  v4[81] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v4[82] = v9;
  v4[83] = *(void *)(v9 - 8);
  v4[84] = swift_task_alloc();
  v4[85] = swift_task_alloc();
  v4[86] = swift_task_alloc();
  v4[87] = swift_task_alloc();
  v4[88] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  v4[89] = swift_task_alloc();
  v4[90] = swift_task_alloc();
  v4[91] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  v4[92] = v10;
  v4[93] = *(void *)(v10 - 8);
  v4[94] = swift_task_alloc();
  v4[95] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  v4[96] = swift_task_alloc();
  v4[97] = swift_task_alloc();
  v4[98] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for CRAsset();
  v4[99] = v11;
  v4[100] = *(void *)(v11 - 8);
  v4[101] = swift_task_alloc();
  v4[102] = swift_task_alloc();
  v4[103] = swift_task_alloc();
  v4[104] = swift_task_alloc();
  v4[105] = swift_task_alloc();
  v4[106] = swift_task_alloc();
  v4[107] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized PaperDocument.newPDFDocument<A>(use:in:options:), 0, 0);
}

uint64_t specialized PaperDocument.newPDFDocument<A>(use:in:options:)()
{
  uint64_t v1 = *(void *)(v0 + 800);
  uint64_t v2 = *(void *)(v0 + 792);
  uint64_t v3 = *(void *)(v0 + 784);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 864) = v4;
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(void *)(v4 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 872) = v6;
  *(void *)(v6 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v5);
  uint64_t v7 = type metadata accessor for PaperDocument(0);
  *(void *)(v0 + 880) = v7;
  *(_DWORD *)(v0 + 92) = *(_DWORD *)(v7 + 20);
  *(void *)(v0 + 888) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.getter();
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(void *)(v0 + 896) = v8;
  *(void *)(v0 + 904) = (v1 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v8(v3, 1, v2) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 856), *(void *)(v0 + 784), *(void *)(v0 + 792));
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 912) = v21;
    *uint64_t v21 = v0;
    v21[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
    uint64_t v22 = *(void *)(v0 + 856);
    uint64_t v23 = v4;
    uint64_t v24 = v6;
LABEL_7:
    return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(v22, v23, v24);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 784), &demangling cache variable for type metadata for CRAsset?);
  uint64_t v9 = *(void *)(v0 + 728);
  uint64_t v10 = *(void *)(v0 + 664);
  uint64_t v11 = *(void *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  *(void *)(v0 + 928) = v12;
  *(void *)(v0 + 936) = (v10 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v12(v9, 1, v11) != 1)
  {
    *(void *)(v0 + 944) = *(void *)(*(void *)(v0 + 664) + 32);
    do
    {
      uint64_t v34 = *(void *)(v0 + 648);
      uint64_t v35 = *(void *)(v0 + 592);
      uint64_t v36 = *(void *)(v0 + 584);
      (*(void (**)(void, void, void))(v0 + 944))(*(void *)(v0 + 704), *(void *)(v0 + 728), *(void *)(v0 + 656));
      _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      SharedTagged_3.subscript.getter();
      uint64_t v37 = *(void *)(v0 + 120);
      uint64_t v38 = *(void *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v37);
      (*(void (**)(uint64_t, uint64_t))(v38 + 88))(v37, v38);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v34, 1, v36) == 1)
      {
        uint64_t v26 = *(void *)(v0 + 800);
        uint64_t v27 = *(void *)(v0 + 792);
        uint64_t v28 = *(void *)(v0 + 776);
        uint64_t v29 = *(void *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v29, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v28, 1, 1, v27);
      }
      else
      {
        double v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
        uint64_t v40 = *(void *)(v0 + 800);
        uint64_t v41 = *(void *)(v0 + 792);
        uint64_t v42 = *(void *)(v0 + 776);
        uint64_t v43 = *(void *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v43 + *(int *)(*(void *)(v0 + 584) + 20), v41);
        _s8PaperKit0A0VWOhTm_2(v43, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v41);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v39(v42, 1, v41) != 1)
        {
          (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 848), *(void *)(v0 + 776), *(void *)(v0 + 792));
          uint64_t v44 = (void *)swift_task_alloc();
          *(void *)(v0 + 952) = v44;
          *uint64_t v44 = v0;
          v44[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          uint64_t v24 = *(void *)(v0 + 872);
          uint64_t v23 = *(void *)(v0 + 864);
          uint64_t v22 = *(void *)(v0 + 848);
          goto LABEL_7;
        }
      }
      uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
      uint64_t v31 = *(void *)(v0 + 776);
      uint64_t v32 = *(void *)(v0 + 728);
      uint64_t v33 = *(void *)(v0 + 656);
      (*(void (**)(void, uint64_t))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 704), v33);
      outlined destroy of StocksKitCurrencyCache.Provider?(v31, &demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v30(v32, 1, v33) != 1);
  }
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
  uint64_t v14 = *(void *)(v0 + 792);
  uint64_t v15 = *(void *)(v0 + 768);
  uint64_t v238 = (void (**)(void, void))(*(void *)(v0 + 744) + 8);
  double v237 = *v238;
  (*v238)(*(void *)(v0 + 760), *(void *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  if (v13(v15, 1, v14) == 1)
  {
    uint64_t v16 = *(Swift::UInt **)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 768), &demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    uint64_t v17 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v17, (uint64_t)v16);
    unint64_t v18 = 0;
    swift_bridgeObjectRelease();
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(Swift::UInt *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v16, 1, v19) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 624), &demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      id v20 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
    }
    else
    {
      uint64_t v53 = *(void *)(v0 + 864);
      uint64_t v54 = *(void *)(v0 + 832);
      uint64_t v55 = *(void *)(v0 + 824);
      uint64_t v56 = *(void *)(v0 + 792);
      uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 800) + 32);
      v57(v55, *(void *)(v0 + 624), v56);
      v57(v54, v55, v56);
      swift_beginAccess();
      uint64_t v58 = *(void *)(v53 + 16);
      if (!*(void *)(v58 + 16)) {
        goto LABEL_132;
      }
      unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 832));
      if ((v60 & 1) == 0) {
        goto LABEL_132;
      }
      uint64_t v61 = *(void *)(v0 + 832);
      uint64_t v62 = *(void *)(v0 + 800);
      uint64_t v63 = *(void *)(v0 + 792);
      int v64 = *(void **)(*(void *)(v58 + 56) + 8 * v59);
      swift_endAccess();
      uint64_t v16 = *(Swift::UInt **)(v62 + 8);
      id v20 = v64;
      ((void (*)(uint64_t, uint64_t))v16)(v61, v63);
    }
  }
  else
  {
    uint64_t v45 = *(void *)(v0 + 864);
    (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 840), *(void *)(v0 + 768), *(void *)(v0 + 792));
    swift_beginAccess();
    uint64_t v46 = *(void *)(v45 + 16);
    if (!*(void *)(v46 + 16)) {
      goto LABEL_130;
    }
    unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 840));
    if ((v48 & 1) == 0) {
      goto LABEL_130;
    }
    uint64_t v49 = *(void *)(v0 + 840);
    uint64_t v50 = *(void *)(v0 + 800);
    uint64_t v51 = *(void *)(v0 + 792);
    uint64_t v52 = *(void **)(*(void *)(v46 + 56) + 8 * v47);
    swift_endAccess();
    uint64_t v16 = *(Swift::UInt **)(v50 + 8);
    id v20 = v52;
    ((void (*)(uint64_t, uint64_t))v16)(v49, v51);
    unint64_t v18 = 0;
  }
  *(void *)(v0 + 968) = v20;
  uint64_t v65 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v66 = (uint64_t)objc_msgSend(v20, sel_pageCount);
  if (v66 < 0) {
    goto LABEL_98;
  }
  uint64_t v16 = (Swift::UInt *)v66;
  uint64_t v253 = (char *)v20;
  if (!v66)
  {
LABEL_49:
    *(void *)(v0 + 976) = v65;
    uint64_t v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
    uint64_t v106 = *(void *)(v0 + 720);
    uint64_t v107 = *(void *)(v0 + 656);
    CROrderedSet.makeIterator()();
    CROrderedSet.Iterator.next()();
    if (v105(v106, 1, v107) == 1)
    {
LABEL_50:
      uint64_t v108 = *(void *)(v0 + 864);
      unint64_t v110 = *(void *)(v0 + 376);
      uint64_t v109 = *(void *)(v0 + 384);
      v237(*(void *)(v0 + 752), *(void *)(v0 + 736));
      swift_beginAccess();
      uint64_t v111 = *(void *)(v108 + 16);
      swift_bridgeObjectRetain();
      unint64_t v112 = specialized PaperDocument.update<A>(_:in:otherDocuments:use:)(v253, v109, v111, v110);
      *(void *)(v0 + 984) = v112;
      swift_bridgeObjectRelease();
      char v113 = v112[32];
      *(unsigned char *)(v0 + 91) = v113;
      uint64_t v114 = -1;
      uint64_t v115 = -1 << v113;
      if (-v115 < 64) {
        uint64_t v114 = ~(-1 << -(char)v115);
      }
      unint64_t v116 = v114 & *((void *)v112 + 7);
      if (v116)
      {
        uint64_t v117 = 0;
        unint64_t v118 = __clz(__rbit64(v116));
        uint64_t v119 = (v116 - 1) & v116;
        uint64_t v66 = *(void *)(v0 + 984);
      }
      else
      {
        unint64_t v69 = 63 - v115;
        uint64_t v66 = *(void *)(v0 + 984);
        if (v69 <= 0x7F) {
          goto LABEL_109;
        }
        unint64_t v178 = *(void *)(v66 + 64);
        if (v178)
        {
          uint64_t v117 = 1;
          goto LABEL_82;
        }
        if (v69 < 0xC0) {
          goto LABEL_109;
        }
        unint64_t v178 = *(void *)(v66 + 72);
        if (v178)
        {
          uint64_t v117 = 2;
          goto LABEL_82;
        }
        if (v69 < 0x100) {
          goto LABEL_109;
        }
        unint64_t v178 = *(void *)(v66 + 80);
        if (!v178) {
          goto LABEL_94;
        }
        uint64_t v117 = 3;
LABEL_82:
        uint64_t v119 = (v178 - 1) & v178;
        unint64_t v118 = __clz(__rbit64(v178)) + (v117 << 6);
      }
      *(void *)(v0 + 1000) = v119;
      *(void *)(v0 + 992) = v117;
      uint64_t v120 = *(void *)(v0 + 816);
      uint64_t v121 = *(void *)(v0 + 808);
      uint64_t v122 = *(void *)(v0 + 800);
      uint64_t v123 = *(void *)(v0 + 792);
      unint64_t v124 = *(void *)(v66 + 48) + *(void *)(v122 + 72) * v118;
      uint64_t v125 = *(void (**)(uint64_t, unint64_t, uint64_t))(v122 + 16);
      *(void *)(v0 + 1008) = v125;
      *(void *)(v0 + 1016) = (v122 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v125(v120, v124, v123);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 32))(v121, v120, v123);
      uint64_t v126 = swift_task_alloc();
      *(void *)(v0 + 1024) = v126;
      *(void *)(v126 + 16) = v121;
      uint64_t v127 = (void *)swift_task_alloc();
      *(void *)(v0 + 1032) = v127;
      uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PaperKitPDFDocument?);
      *uint64_t v127 = v0;
      v127[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
      uint64_t v129 = &async function pointer to partial apply for closure #1 in static PaperKitPDFDocument._load(_:);
      uint64_t v130 = v0 + 360;
      uint64_t v131 = 1;
      uint64_t v132 = v126;
      return MEMORY[0x270F17D68](v130, v131, v129, v132, v128);
    }
    uint64_t v252 = (void *)(v0 + 136);
    uint64_t v133 = *(void *)(v0 + 664);
    uint64_t v134 = *(void (**)(void, void, void))(v133 + 32);
    v133 += 32;
    uint64_t v135 = *(void *)(v0 + 592);
    unsigned int v246 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
    uint64_t v248 = v134;
    uint64_t v240 = *(void *)(v0 + 544);
    uint64_t v242 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
    double v234 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56);
    uint64_t v245 = (void (**)(uint64_t, uint64_t))(v133 - 24);
    uint64_t v235 = (void (**)(void, uint64_t, uint64_t))(v133 - 16);
    while (1)
    {
      uint64_t v140 = *(void *)(v0 + 640);
      uint64_t v141 = *(void *)(v0 + 584);
      v248(*(void *)(v0 + 696), *(void *)(v0 + 720), *(void *)(v0 + 656));
      _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      SharedTagged_3.subscript.getter();
      uint64_t v142 = *(void *)(v0 + 160);
      uint64_t v143 = *(void *)(v0 + 168);
      __swift_project_boxed_opaque_existential_1(v252, v142);
      (*(void (**)(uint64_t, uint64_t))(v143 + 88))(v142, v143);
      if ((*v246)(v140, 1, v141) == 1)
      {
        uint64_t v136 = *(void *)(v0 + 640);
        (*v245)(*(void *)(v0 + 696), *(void *)(v0 + 656));
        outlined destroy of StocksKitCurrencyCache.Provider?(v136, &demangling cache variable for type metadata for PDFPageID?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v252);
      }
      else
      {
        outlined init with take of PDFPageID(*(void *)(v0 + 640), *(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for PDFPageID);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v252);
        if (v65[2])
        {
          unint64_t v144 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 616));
          if (v145)
          {
            unint64_t v146 = *(void *)(v65[7] + 8 * v144);
            if (one-time initialization token for lock != -1) {
              swift_once();
            }
            CGAffineTransform v147 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
            uint64_t v148 = swift_task_alloc();
            *(void *)(v148 + 16) = v253;
            *(void *)(v148 + 24) = v146;
            uint64_t v149 = swift_task_alloc();
            *(void *)(v149 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
            *(void *)(v149 + 24) = v148;
            os_unfair_lock_lock(v147 + 4);
            closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v150);
            unint64_t v244 = v146;
            uint64_t v151 = *(void *)(v0 + 544);
            uint64_t v152 = *(void *)(v0 + 536);
            os_unfair_lock_unlock(v147 + 4);
            swift_task_dealloc();
            swift_task_dealloc();
            uint64_t v153 = *v242;
            if ((*v242)(v152, 1, v151) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 536), (uint64_t *)&demangling cache variable for type metadata for PageId?);
              id v154 = objc_msgSend(v253, sel_pageAtIndex_, v244);
              if (!v154) {
                goto LABEL_131;
              }
              char v155 = v154;
              uint64_t v156 = *(void *)(v0 + 544);
              uint64_t v157 = *(void *)(v0 + 528);
              type metadata accessor for PaperKitPDFPage(0);
              uint64_t v158 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
              swift_beginAccess();
              outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v158, v157, (uint64_t *)&demangling cache variable for type metadata for PageId?);

              if (v153(v157, 1, v156) == 1)
              {
                uint64_t v159 = *(void *)(v0 + 584);
                uint64_t v160 = *(void *)(v0 + 576);
                outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 528), (uint64_t *)&demangling cache variable for type metadata for PageId?);
                (*v234)(v160, 1, 1, v159);
                uint64_t v161 = v240;
                uint64_t v162 = v160 + *(int *)(v240 + 20);
                uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v163 - 8) + 56))(v162, 1, 1, v163);
                goto LABEL_73;
              }
              uint64_t v166 = *(void *)(v0 + 576);
              uint64_t v167 = *(void *)(v0 + 528);
            }
            else
            {
              uint64_t v166 = *(void *)(v0 + 576);
              uint64_t v167 = *(void *)(v0 + 536);
            }
            outlined init with take of PDFPageID(v167, v166, type metadata accessor for PageId);
            uint64_t v161 = v240;
LABEL_73:
            uint64_t v168 = *(void *)(v0 + 576);
            uint64_t v169 = *(void *)(v0 + 504);
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v168 + *(int *)(v161 + 20), v169, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
            _s8PaperKit0A0VWOhTm_2(v168, type metadata accessor for PageId);
            uint64_t v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
            uint64_t v171 = *(void *)(v170 - 8);
            int v172 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v171 + 48))(v169, 1, v170);
            outlined destroy of StocksKitCurrencyCache.Provider?(v169, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
            uint64_t v173 = *(void *)(v0 + 696);
            if (v172 == 1)
            {
              uint64_t v174 = *(void *)(v0 + 656);
              uint64_t v236 = *(void *)(v0 + 616);
              uint64_t v175 = *(char **)(v0 + 568);
              uint64_t v176 = *(void *)(v0 + 496);
              (*v235)(*(void *)(v0 + 688), v173, v174);
              lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
              WeakTagged_3.init(_:)();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v171 + 56))(v176, 0, 1, v170);
              PaperKitPDFDocument.subscript.getter(v244, (uint64_t)v175);
              outlined assign with take of WeakTagged_3<TaggedPaperPage>?(v176, (uint64_t)&v175[*(int *)(v240 + 20)]);
              PaperKitPDFDocument.subscript.setter(v175, v244);
              _s8PaperKit0A0VWOhTm_2(v236, (uint64_t (*)(void))type metadata accessor for PDFPageID);
              (*v245)(v173, v174);
            }
            else
            {
              uint64_t v177 = *(void *)(v0 + 656);
              _s8PaperKit0A0VWOhTm_2(*(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for PDFPageID);
              (*v245)(v173, v177);
            }
            goto LABEL_59;
          }
        }
        uint64_t v164 = *(void *)(v0 + 696);
        uint64_t v165 = *(void *)(v0 + 656);
        _s8PaperKit0A0VWOhTm_2(*(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*v245)(v164, v165);
      }
LABEL_59:
      unint64_t v137 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
      uint64_t v138 = *(void *)(v0 + 720);
      uint64_t v139 = *(void *)(v0 + 656);
      CROrderedSet.Iterator.next()();
      if (v137(v138, 1, v139) == 1) {
        goto LABEL_50;
      }
    }
  }
  if (one-time initialization token for lock != -1) {
    goto LABEL_99;
  }
LABEL_25:
  uint64_t v67 = 0;
  uint64_t v68 = *(void *)(v0 + 592);
  uint64_t v241 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56);
  uint64_t v243 = *(void *)(v0 + 544);
  uint64_t v239 = v68;
  unint64_t v69 = v68 + 48;
  uint64_t v250 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  uint64_t v251 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
  uint64_t v247 = v16;
  while (v16 != v67)
  {
    CGFloat v70 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    uint64_t v71 = swift_task_alloc();
    *(void *)(v71 + 16) = v253;
    *(void *)(v71 + 24) = v67;
    uint64_t v72 = swift_task_alloc();
    *(void *)(v72 + 16) = partial apply for closure #1 in PaperKitPDFDocument.subscript.getter;
    *(void *)(v72 + 24) = v71;
    uint64_t v73 = v70 + 4;
    os_unfair_lock_lock(v70 + 4);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v74);
    if (v18)
    {
      os_unfair_lock_unlock(v73);
      return swift_task_dealloc();
    }
    uint64_t v75 = *(void *)(v0 + 544);
    uint64_t v76 = *(void *)(v0 + 520);
    os_unfair_lock_unlock(v73);
    swift_task_dealloc();
    swift_task_dealloc();
    long long v77 = *v251;
    if ((*v251)(v76, 1, v75) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for PageId?);
      id v78 = objc_msgSend(v253, sel_pageAtIndex_, v67);
      if (!v78)
      {
LABEL_129:
        __break(1u);
LABEL_130:
        swift_endAccess();
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        uint64_t v130 = swift_endAccess();
        __break(1u);
        return MEMORY[0x270F17D68](v130, v131, v129, v132, v128);
      }
      uint64_t v79 = v78;
      uint64_t v80 = *(void *)(v0 + 544);
      uint64_t v81 = *(void *)(v0 + 512);
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v82 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v82, v81, (uint64_t *)&demangling cache variable for type metadata for PageId?);

      if (v77(v81, 1, v80) == 1)
      {
        uint64_t v83 = *(void *)(v0 + 584);
        uint64_t v84 = *(void *)(v0 + 560);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 512), (uint64_t *)&demangling cache variable for type metadata for PageId?);
        (*v241)(v84, 1, 1, v83);
        uint64_t v85 = v84 + *(int *)(v243 + 20);
        uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v85, 1, 1, v86);
      }
      else
      {
        outlined init with take of PDFPageID(*(void *)(v0 + 512), *(void *)(v0 + 560), type metadata accessor for PageId);
      }
    }
    else
    {
      outlined init with take of PDFPageID(*(void *)(v0 + 520), *(void *)(v0 + 560), type metadata accessor for PageId);
    }
    uint64_t v87 = *(void *)(v0 + 632);
    uint64_t v88 = *(void *)(v0 + 584);
    uint64_t v89 = *(void *)(v0 + 560);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v89, v87, &demangling cache variable for type metadata for PDFPageID?);
    _s8PaperKit0A0VWOhTm_2(v89, type metadata accessor for PageId);
    int v90 = (*v250)(v87, 1, v88);
    uint64_t v91 = *(void *)(v0 + 632);
    if (v90 != 1)
    {
      uint64_t v92 = *(void *)(v0 + 608);
      uint64_t v16 = *(Swift::UInt **)(v0 + 600);
      outlined init with take of PDFPageID(v91, v92, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      outlined init with copy of PDFPageID(v92, (uint64_t)v16);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
      unint64_t v69 = v65[2];
      BOOL v95 = (v94 & 1) == 0;
      uint64_t v66 = v69 + v95;
      if (__OFADD__(v69, v95)) {
        goto LABEL_93;
      }
      char v96 = v94;
      if (v65[3] >= v66)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v94 & 1) == 0) {
            goto LABEL_46;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if ((v96 & 1) == 0) {
            goto LABEL_46;
          }
        }
      }
      else
      {
        uint64_t v16 = *(Swift::UInt **)(v0 + 600);
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v66, isUniquelyReferenced_nonNull_native);
        unint64_t v97 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
        if ((v96 & 1) != (v98 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v18 = v97;
        if ((v96 & 1) == 0)
        {
LABEL_46:
          uint64_t v99 = *(void *)(v0 + 600);
          v65[(v18 >> 6) + 8] |= 1 << v18;
          outlined init with copy of PDFPageID(v99, v65[6] + *(void *)(v239 + 72) * v18);
          *(void *)(v65[7] + 8 * v18) = v67;
          uint64_t v100 = v65[2];
          BOOL v101 = __OFADD__(v100, 1);
          uint64_t v102 = v100 + 1;
          if (v101)
          {
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            uint64_t v66 = swift_once();
            goto LABEL_25;
          }
          v65[2] = v102;
          goto LABEL_48;
        }
      }
      *(void *)(v65[7] + 8 * v18) = v67;
LABEL_48:
      uint64_t v103 = *(void *)(v0 + 608);
      uint64_t v104 = *(void *)(v0 + 600);
      swift_bridgeObjectRelease();
      _s8PaperKit0A0VWOhTm_2(v104, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      uint64_t v66 = _s8PaperKit0A0VWOhTm_2(v103, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      goto LABEL_27;
    }
    uint64_t v66 = outlined destroy of StocksKitCurrencyCache.Provider?(v91, &demangling cache variable for type metadata for PDFPageID?);
LABEL_27:
    unint64_t v18 = 0;
    uint64_t v67 = (Swift::UInt *)((char *)v67 + 1);
    uint64_t v16 = v247;
    if (v247 == v67) {
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  if (v69 >= 0x140)
  {
    unint64_t v178 = *(void *)(v66 + 88);
    if (v178)
    {
      uint64_t v117 = 4;
      goto LABEL_82;
    }
    if (v69 >= 0x180)
    {
      unint64_t v178 = *(void *)(v66 + 96);
      if (v178)
      {
        uint64_t v117 = 5;
      }
      else
      {
        uint64_t v179 = 0;
        uint64_t v180 = v69 >> 6;
        if (v180 <= 6) {
          uint64_t v180 = 6;
        }
        uint64_t v181 = v180 - 6;
        do
        {
          if (v181 == v179) {
            goto LABEL_109;
          }
          unint64_t v178 = *(void *)(v66 + 104 + 8 * v179++);
        }
        while (!v178);
        uint64_t v117 = v179 + 5;
      }
      goto LABEL_82;
    }
  }
LABEL_109:
  uint64_t v183 = *(void *)(v0 + 384);
  uint64_t v182 = *(void *)(v0 + 392);
  uint64_t v184 = *(void *)(v0 + 376);
  swift_release();
  specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v183, v184, v182);
  if (v184 != 0x8000000000000000)
  {
    uint64_t v186 = *(void *)(v0 + 480);
    uint64_t v185 = *(void *)(v0 + 488);
    uint64_t v188 = *(void *)(v0 + 464);
    uint64_t v187 = *(void *)(v0 + 472);
    uint64_t v189 = *(void *)(v0 + 448);
    uint64_t v190 = *(void *)(v0 + 456);
    uint64_t v191 = *(void *)(v0 + 400);
    unint64_t v192 = *(void *)(v0 + 376);
    outlined copy of PaperDocument.PDFDocumentUse(v192);
    outlined consume of PaperDocument.PDFDocumentUse(v192);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v190 + 16))(v187, v191, v189);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v190 + 32))(v188, v187, v189);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    dispatch thunk of Sequence.makeIterator()();
    uint64_t v193 = *(int *)(v186 + 36);
    *(_DWORD *)(v0 + 1056) = v193;
    *(void *)(v185 + v193) = 0;
    uint64_t v194 = &selRef_isImageAnalysisEnabled;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
    while (1)
    {
      id v195 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
      uint64_t v196 = *(void *)(v0 + 712);
      uint64_t v197 = *(void *)(v0 + 656);
      dispatch thunk of IteratorProtocol.next()();
      if (v195(v196, 1, v197) == 1)
      {
        uint64_t v198 = *(void *)(v0 + 432);
        uint64_t v200 = *(void *)(v0 + 408);
        uint64_t v199 = *(void *)(v0 + 416);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 56))(v198, 1, 1, v200);
      }
      else
      {
        uint64_t v201 = *(int *)(v0 + 1056);
        uint64_t v202 = *(void *)(v0 + 680);
        uint64_t v203 = *(void *)(v0 + 656);
        uint64_t v204 = *(void *)(v0 + 488);
        uint64_t v205 = *(void *)(v0 + 424);
        uint64_t v206 = *(void *)(v0 + 408);
        id v207 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 664) + 32);
        v207(v202, *(void *)(v0 + 712), v203);
        uint64_t v208 = v205 + *(int *)(v206 + 48);
        uint64_t v209 = *(void *)(v204 + v201);
        v207(v208, v202, v203);
        if (__OFADD__(v209, 1))
        {
          __break(1u);
          goto LABEL_129;
        }
        uint64_t v210 = *(void *)(v0 + 656);
        CGRect v211 = *(void **)(v0 + 432);
        uint64_t v213 = *(void *)(v0 + 408);
        uint64_t v212 = *(void *)(v0 + 416);
        *(void *)(*(void *)(v0 + 488) + *(int *)(v0 + 1056)) = v209 + 1;
        CGRect v214 = (char *)v211 + *(int *)(v213 + 48);
        *CGRect v211 = v209;
        v207((uint64_t)v214, v208, v210);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v212 + 56))(v211, 0, 1, v213);
        uint64_t v194 = &selRef_isImageAnalysisEnabled;
      }
      uint64_t v215 = *(void *)(v0 + 440);
      uint64_t v217 = *(void *)(v0 + 408);
      uint64_t v216 = *(void *)(v0 + 416);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 432), v215, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48))(v215, 1, v217) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
        goto LABEL_125;
      }
      CGRect v218 = *(void **)(v0 + 968);
      CGRect v219 = *(char **)(v0 + 440);
      uint64_t v220 = *(void *)v219;
      (*(void (**)(void, char *, void))(*(void *)(v0 + 664) + 32))(*(void *)(v0 + 672), &v219[*(int *)(*(void *)(v0 + 408) + 48)], *(void *)(v0 + 656));
      id v221 = objc_msgSend(v218, v194[63], v220);
      *(void *)(v0 + 1040) = v221;
      if (v221)
      {
        Swift::String v222 = v221;
        type metadata accessor for PaperKitPDFPage(0);
        uint64_t v223 = swift_dynamicCastClass();
        if (v223)
        {
          uint64_t v224 = v223;
          uint64_t v225 = *(void *)(v0 + 392);
          uint64_t v226 = *(void *)(v0 + 376);
          uint64_t v227 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
          SharedTagged_3.subscript.getter();
          uint64_t v228 = *(void *)(v0 + 200);
          uint64_t v229 = *(void *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v228);
          *(void *)(v0 + 368) = v226;
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v225, v0 + 16, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
          uint64_t v249 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v229 + 144) + **(int **)(v229 + 144));
          uint64_t v230 = (void *)swift_task_alloc();
          *(void *)(v0 + 1048) = v230;
          *uint64_t v230 = v0;
          v230[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          uint64_t v231 = *(void *)(v0 + 880);
          uint64_t v232 = *(void *)(v0 + 384);
          return v249(v224, v0 + 368, v232, v0 + 16, v231, v227, v228, v229);
        }
      }
      (*(void (**)(void, void))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 672), *(void *)(v0 + 656));
    }
  }
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_125:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v254 = *(void *)(v0 + 968);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v233 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v233(v254);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 920) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
  }
  else {
    uint64_t v2 = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  Swift::UInt *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  Swift::UInt *v58;
  uint64_t v59;
  unint64_t v60;
  os_unfair_lock_s *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int isUniquelyReferenced_nonNull_native;
  char v84;
  BOOL v85;
  char v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  os_unfair_lock_s *v95;
  unsigned int (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned char *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void (*v116)(uint64_t, unint64_t, uint64_t);
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(void, void, void);
  uint64_t v126;
  uint64_t v127;
  unsigned int (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  os_unfair_lock_s *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int (*v144)(uint64_t, uint64_t, uint64_t);
  id v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char **v184;
  unsigned int (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void (*v197)(uint64_t, uint64_t, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  char *v209;
  uint64_t v210;
  id v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)(uint64_t);
  void (**v224)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v225)(void, uint64_t);
  uint64_t v226;
  void (*v227)(void, void);
  void (**v228)(void, void);
  uint64_t v229;
  uint64_t v230;
  void (**v231)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v232;
  uint64_t v233;
  unsigned int (**v234)(uint64_t, uint64_t, uint64_t);
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  void (**v238)(uint64_t, uint64_t);
  Swift::UInt *v239;
  unsigned int (**v240)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v241)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (**v242)(uint64_t, uint64_t, uint64_t);
  void (*v243)(void, void, void);
  unsigned int (**v244)(uint64_t, uint64_t, uint64_t);
  void *v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;

  uint64_t v248 = v0;
  (*(void (**)(void, void))(*(void *)(v0 + 800) + 8))(*(void *)(v0 + 856), *(void *)(v0 + 792));
  uint64_t v235 = *(void *)(v0 + 920);
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v0 + 664);
  uint64_t v3 = *(void *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(void *)(v0 + 928) = v4;
  *(void *)(v0 + 936) = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v1, 1, v3) != 1)
  {
    *(void *)(v0 + 944) = *(void *)(*(void *)(v0 + 664) + 32);
    do
    {
      uint64_t v21 = *(void *)(v0 + 648);
      uint64_t v22 = *(void *)(v0 + 592);
      uint64_t v23 = *(void *)(v0 + 584);
      (*(void (**)(void, void, void))(v0 + 944))(*(void *)(v0 + 704), *(void *)(v0 + 728), *(void *)(v0 + 656));
      _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      SharedTagged_3.subscript.getter();
      uint64_t v24 = *(void *)(v0 + 120);
      uint64_t v25 = *(void *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v24);
      (*(void (**)(uint64_t, uint64_t))(v25 + 88))(v24, v25);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v21, 1, v23) == 1)
      {
        uint64_t v13 = *(void *)(v0 + 800);
        uint64_t v14 = *(void *)(v0 + 792);
        uint64_t v15 = *(void *)(v0 + 776);
        uint64_t v16 = *(void *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v16, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, 1, 1, v14);
      }
      else
      {
        uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
        uint64_t v27 = *(void *)(v0 + 800);
        uint64_t v28 = *(void *)(v0 + 792);
        uint64_t v29 = *(void *)(v0 + 776);
        uint64_t v30 = *(void *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v29, v30 + *(int *)(*(void *)(v0 + 584) + 20), v28);
        _s8PaperKit0A0VWOhTm_2(v30, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v28);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v26(v29, 1, v28) != 1)
        {
          (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 848), *(void *)(v0 + 776), *(void *)(v0 + 792));
          uint64_t v31 = (void *)swift_task_alloc();
          *(void *)(v0 + 952) = v31;
          *uint64_t v31 = v0;
          v31[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          uint64_t v32 = *(void *)(v0 + 872);
          uint64_t v33 = *(void *)(v0 + 864);
          uint64_t v34 = *(void *)(v0 + 848);
          return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(v34, v33, v32);
        }
      }
      uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
      unint64_t v18 = *(void *)(v0 + 776);
      uint64_t v19 = *(void *)(v0 + 728);
      id v20 = *(void *)(v0 + 656);
      (*(void (**)(void, uint64_t))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 704), v20);
      outlined destroy of StocksKitCurrencyCache.Provider?(v18, &demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v17(v19, 1, v20) != 1);
  }
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
  uint64_t v6 = *(void *)(v0 + 792);
  uint64_t v7 = *(void *)(v0 + 768);
  uint64_t v228 = (void (**)(void, void))(*(void *)(v0 + 744) + 8);
  uint64_t v227 = *v228;
  (*v228)(*(void *)(v0 + 760), *(void *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  if (v5(v7, 1, v6) == 1)
  {
    uint64_t v8 = *(Swift::UInt **)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 768), &demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    uint64_t v9 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v9, (uint64_t)v8);
    uint64_t v10 = v235;
    swift_bridgeObjectRelease();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(Swift::UInt *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v8, 1, v11) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 624), &demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      uint64_t v12 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
    }
    else
    {
      uint64_t v44 = *(void *)(v0 + 864);
      uint64_t v45 = *(void *)(v0 + 832);
      uint64_t v46 = *(void *)(v0 + 824);
      unint64_t v47 = *(void *)(v0 + 792);
      char v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 800) + 32);
      v48(v46, *(void *)(v0 + 624), v47);
      v48(v45, v46, v47);
      swift_beginAccess();
      uint64_t v49 = *(void *)(v44 + 16);
      if (!*(void *)(v49 + 16)) {
        goto LABEL_135;
      }
      uint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 832));
      if ((v51 & 1) == 0) {
        goto LABEL_135;
      }
      uint64_t v52 = *(void *)(v0 + 832);
      uint64_t v53 = *(void *)(v0 + 800);
      uint64_t v54 = *(void *)(v0 + 792);
      uint64_t v55 = *(void **)(*(void *)(v49 + 56) + 8 * v50);
      swift_endAccess();
      uint64_t v8 = *(Swift::UInt **)(v53 + 8);
      uint64_t v12 = v55;
      ((void (*)(uint64_t, uint64_t))v8)(v52, v54);
      uint64_t v10 = v235;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(v0 + 864);
    (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 840), *(void *)(v0 + 768), *(void *)(v0 + 792));
    swift_beginAccess();
    uint64_t v37 = *(void *)(v36 + 16);
    if (!*(void *)(v37 + 16)) {
      goto LABEL_133;
    }
    uint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 840));
    if ((v39 & 1) == 0) {
      goto LABEL_133;
    }
    uint64_t v40 = *(void *)(v0 + 840);
    uint64_t v41 = *(void *)(v0 + 800);
    uint64_t v42 = *(void *)(v0 + 792);
    uint64_t v43 = *(void **)(*(void *)(v37 + 56) + 8 * v38);
    swift_endAccess();
    uint64_t v8 = *(Swift::UInt **)(v41 + 8);
    uint64_t v12 = v43;
    ((void (*)(uint64_t, uint64_t))v8)(v40, v42);
    uint64_t v10 = v235;
  }
  *(void *)(v0 + 968) = v12;
  uint64_t v56 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v57 = (uint64_t)objc_msgSend(v12, sel_pageCount);
  if (v57 < 0) {
    goto LABEL_101;
  }
  uint64_t v8 = (Swift::UInt *)v57;
  uint64_t v245 = v12;
  if (!v57)
  {
    uint64_t v236 = v10;
    goto LABEL_52;
  }
  if (one-time initialization token for lock != -1) {
    goto LABEL_102;
  }
LABEL_22:
  uint64_t v58 = 0;
  unint64_t v59 = *(void *)(v0 + 592);
  uint64_t v231 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
  double v233 = *(void *)(v0 + 544);
  uint64_t v229 = v59;
  char v60 = v59 + 48;
  uint64_t v242 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
  unint64_t v244 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
  uint64_t v239 = v8;
  do
  {
    if (v8 == v58)
    {
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      if (v60 >= 0x140)
      {
        uint64_t v168 = *(void *)(v57 + 88);
        if (v168)
        {
          uint64_t v108 = 4;
          goto LABEL_84;
        }
        if (v60 >= 0x180)
        {
          uint64_t v168 = *(void *)(v57 + 96);
          if (v168)
          {
            uint64_t v108 = 5;
          }
          else
          {
            uint64_t v169 = 0;
            uint64_t v170 = v60 >> 6;
            if (v170 <= 6) {
              uint64_t v170 = 6;
            }
            uint64_t v171 = v170 - 6;
            do
            {
              if (v171 == v169) {
                goto LABEL_112;
              }
              uint64_t v168 = *(void *)(v57 + 104 + 8 * v169++);
            }
            while (!v168);
            uint64_t v108 = v169 + 5;
          }
          goto LABEL_84;
        }
      }
LABEL_112:
      uint64_t v173 = *(void *)(v0 + 384);
      int v172 = *(void *)(v0 + 392);
      uint64_t v174 = *(void *)(v0 + 376);
      swift_release();
      specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v173, v174, v172);
      if (v174 != 0x8000000000000000)
      {
        uint64_t v176 = *(void *)(v0 + 480);
        uint64_t v175 = *(void *)(v0 + 488);
        unint64_t v178 = *(void *)(v0 + 464);
        uint64_t v177 = *(void *)(v0 + 472);
        uint64_t v179 = *(void *)(v0 + 448);
        uint64_t v180 = *(void *)(v0 + 456);
        uint64_t v181 = *(void *)(v0 + 400);
        uint64_t v182 = *(void *)(v0 + 376);
        outlined copy of PaperDocument.PDFDocumentUse(v182);
        outlined consume of PaperDocument.PDFDocumentUse(v182);
        outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v180 + 16))(v177, v181, v179);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v180 + 32))(v178, v177, v179);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
        dispatch thunk of Sequence.makeIterator()();
        uint64_t v183 = *(int *)(v176 + 36);
        *(_DWORD *)(v0 + 1056) = v183;
        *(void *)(v175 + v183) = 0;
        uint64_t v184 = &selRef_isImageAnalysisEnabled;
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
        while (1)
        {
          uint64_t v185 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
          uint64_t v186 = *(void *)(v0 + 712);
          uint64_t v187 = *(void *)(v0 + 656);
          dispatch thunk of IteratorProtocol.next()();
          if (v185(v186, 1, v187) == 1)
          {
            uint64_t v188 = *(void *)(v0 + 432);
            uint64_t v190 = *(void *)(v0 + 408);
            uint64_t v189 = *(void *)(v0 + 416);
            outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56))(v188, 1, 1, v190);
          }
          else
          {
            uint64_t v191 = *(int *)(v0 + 1056);
            unint64_t v192 = *(void *)(v0 + 680);
            uint64_t v193 = *(void *)(v0 + 656);
            uint64_t v194 = *(void *)(v0 + 488);
            id v195 = *(void *)(v0 + 424);
            uint64_t v196 = *(void *)(v0 + 408);
            uint64_t v197 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 664) + 32);
            v197(v192, *(void *)(v0 + 712), v193);
            uint64_t v198 = v195 + *(int *)(v196 + 48);
            uint64_t v199 = *(void *)(v194 + v191);
            v197(v198, v192, v193);
            if (__OFADD__(v199, 1))
            {
              __break(1u);
              goto LABEL_132;
            }
            uint64_t v200 = *(void *)(v0 + 656);
            uint64_t v201 = *(void **)(v0 + 432);
            uint64_t v203 = *(void *)(v0 + 408);
            uint64_t v202 = *(void *)(v0 + 416);
            *(void *)(*(void *)(v0 + 488) + *(int *)(v0 + 1056)) = v199 + 1;
            uint64_t v204 = (char *)v201 + *(int *)(v203 + 48);
            *uint64_t v201 = v199;
            v197((uint64_t)v204, v198, v200);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v202 + 56))(v201, 0, 1, v203);
            uint64_t v184 = &selRef_isImageAnalysisEnabled;
          }
          uint64_t v205 = *(void *)(v0 + 440);
          id v207 = *(void *)(v0 + 408);
          uint64_t v206 = *(void *)(v0 + 416);
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 432), v205, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v206 + 48))(v205, 1, v207) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
            goto LABEL_128;
          }
          uint64_t v208 = *(void **)(v0 + 968);
          uint64_t v209 = *(char **)(v0 + 440);
          uint64_t v210 = *(void *)v209;
          (*(void (**)(void, char *, void))(*(void *)(v0 + 664) + 32))(*(void *)(v0 + 672), &v209[*(int *)(*(void *)(v0 + 408) + 48)], *(void *)(v0 + 656));
          CGRect v211 = objc_msgSend(v208, v184[63], v210);
          *(void *)(v0 + 1040) = v211;
          if (v211)
          {
            uint64_t v212 = v211;
            type metadata accessor for PaperKitPDFPage(0);
            uint64_t v213 = swift_dynamicCastClass();
            if (v213)
            {
              CGRect v214 = v213;
              uint64_t v215 = *(void *)(v0 + 392);
              uint64_t v216 = *(void *)(v0 + 376);
              uint64_t v217 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
              SharedTagged_3.subscript.getter();
              CGRect v218 = *(void *)(v0 + 200);
              CGRect v219 = *(void *)(v0 + 208);
              __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v218);
              *(void *)(v0 + 368) = v216;
              outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v215, v0 + 16, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
              uint64_t v241 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v219 + 144) + **(int **)(v219 + 144));
              uint64_t v220 = (void *)swift_task_alloc();
              *(void *)(v0 + 1048) = v220;
              *uint64_t v220 = v0;
              v220[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
              id v221 = *(void *)(v0 + 880);
              Swift::String v222 = *(void *)(v0 + 384);
              return v241(v214, v0 + 368, v222, v0 + 16, v221, v217, v218, v219);
            }
          }
          (*(void (**)(void, void))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 672), *(void *)(v0 + 656));
        }
      }
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_128:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      unsigned int v246 = *(void *)(v0 + 968);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v223 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v223(v246);
    }
    uint64_t v61 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    uint64_t v62 = swift_task_alloc();
    *(void *)(v62 + 16) = v12;
    *(void *)(v62 + 24) = v58;
    uint64_t v63 = swift_task_alloc();
    *(void *)(v63 + 16) = partial apply for closure #1 in PaperKitPDFDocument.subscript.getter;
    *(void *)(v63 + 24) = v62;
    os_unfair_lock_lock(v61 + 4);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v64);
    if (v10)
    {
      BOOL v95 = v61 + 4;
      goto LABEL_48;
    }
    uint64_t v65 = *(void *)(v0 + 544);
    uint64_t v66 = *(void *)(v0 + 520);
    os_unfair_lock_unlock(v61 + 4);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v67 = *v244;
    if ((*v244)(v66, 1, v65) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v68 = objc_msgSend(v245, sel_pageAtIndex_, v58);
      if (!v68)
      {
LABEL_132:
        __break(1u);
LABEL_133:
        swift_endAccess();
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        uint64_t v121 = swift_endAccess();
        __break(1u);
        return MEMORY[0x270F17D68](v121, v122, v120, v123, v119);
      }
      unint64_t v69 = v68;
      CGFloat v70 = *(void *)(v0 + 544);
      uint64_t v71 = *(void *)(v0 + 512);
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v72 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v72, v71, (uint64_t *)&demangling cache variable for type metadata for PageId?);

      if (v67(v71, 1, v70) == 1)
      {
        uint64_t v73 = *(void *)(v0 + 584);
        uint64_t v74 = *(void *)(v0 + 560);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 512), (uint64_t *)&demangling cache variable for type metadata for PageId?);
        (*v231)(v74, 1, 1, v73);
        uint64_t v75 = v74 + *(int *)(v233 + 20);
        uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 1, 1, v76);
      }
      else
      {
        outlined init with take of PDFPageID(*(void *)(v0 + 512), *(void *)(v0 + 560), type metadata accessor for PageId);
      }
    }
    else
    {
      outlined init with take of PDFPageID(*(void *)(v0 + 520), *(void *)(v0 + 560), type metadata accessor for PageId);
    }
    long long v77 = *(void *)(v0 + 632);
    id v78 = *(void *)(v0 + 584);
    uint64_t v79 = *(void *)(v0 + 560);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v79, v77, &demangling cache variable for type metadata for PDFPageID?);
    _s8PaperKit0A0VWOhTm_2(v79, type metadata accessor for PageId);
    uint64_t v80 = (*v242)(v77, 1, v78);
    uint64_t v81 = *(void *)(v0 + 632);
    if (v80 == 1)
    {
      uint64_t v57 = outlined destroy of StocksKitCurrencyCache.Provider?(v81, &demangling cache variable for type metadata for PDFPageID?);
      goto LABEL_24;
    }
    uint64_t v82 = *(void *)(v0 + 608);
    uint64_t v8 = *(Swift::UInt **)(v0 + 600);
    outlined init with take of PDFPageID(v81, v82, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    outlined init with copy of PDFPageID(v82, (uint64_t)v8);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v247 = v56;
    uint64_t v12 = v56;
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    char v60 = v56[2];
    uint64_t v85 = (v84 & 1) == 0;
    uint64_t v57 = v60 + v85;
    if (__OFADD__(v60, v85)) {
      goto LABEL_96;
    }
    uint64_t v86 = v84;
    if (v56[3] >= v57)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v84 & 1) == 0) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v12 = &v247;
        specialized _NativeDictionary.copy()();
        uint64_t v56 = v247;
        if ((v86 & 1) == 0) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      uint64_t v8 = *(Swift::UInt **)(v0 + 600);
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
      uint64_t v56 = v247;
      uint64_t v12 = v247;
      uint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v86 & 1) != (v88 & 1))
      {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      uint64_t v10 = v87;
      if ((v86 & 1) == 0)
      {
LABEL_43:
        uint64_t v89 = *(void *)(v0 + 600);
        v56[(v10 >> 6) + 8] |= 1 << v10;
        outlined init with copy of PDFPageID(v89, v56[6] + *(void *)(v229 + 72) * v10);
        *(void *)(v56[7] + 8 * v10) = v58;
        int v90 = v56[2];
        uint64_t v91 = __OFADD__(v90, 1);
        uint64_t v92 = v90 + 1;
        if (v91)
        {
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          uint64_t v57 = swift_once();
          goto LABEL_22;
        }
        v56[2] = v92;
        goto LABEL_45;
      }
    }
    *(void *)(v56[7] + 8 * v10) = v58;
LABEL_45:
    long long v93 = *(void *)(v0 + 608);
    char v94 = *(void *)(v0 + 600);
    swift_bridgeObjectRelease();
    _s8PaperKit0A0VWOhTm_2(v94, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v57 = _s8PaperKit0A0VWOhTm_2(v93, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_24:
    uint64_t v10 = 0;
    uint64_t v58 = (Swift::UInt *)((char *)v58 + 1);
    uint64_t v8 = v239;
    uint64_t v12 = v245;
  }
  while (v239 != v58);
  uint64_t v236 = 0;
LABEL_52:
  *(void *)(v0 + 976) = v56;
  char v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
  unint64_t v97 = *(void *)(v0 + 720);
  char v98 = *(void *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  if (v96(v97, 1, v98) == 1)
  {
LABEL_53:
    uint64_t v99 = *(void *)(v0 + 864);
    BOOL v101 = *(void *)(v0 + 376);
    uint64_t v100 = *(void *)(v0 + 384);
    v227(*(void *)(v0 + 752), *(void *)(v0 + 736));
    swift_beginAccess();
    uint64_t v102 = *(void *)(v99 + 16);
    swift_bridgeObjectRetain();
    uint64_t v103 = specialized PaperDocument.update<A>(_:in:otherDocuments:use:)((char *)v245, v100, v102, v101);
    *(void *)(v0 + 984) = v103;
    swift_bridgeObjectRelease();
    uint64_t v104 = v103[32];
    *(unsigned char *)(v0 + 91) = v104;
    uint64_t v105 = -1;
    uint64_t v106 = -1 << v104;
    if (-v106 < 64) {
      uint64_t v105 = ~(-1 << -(char)v106);
    }
    uint64_t v107 = v105 & *((void *)v103 + 7);
    if (v107)
    {
      uint64_t v108 = 0;
      uint64_t v109 = __clz(__rbit64(v107));
      unint64_t v110 = (v107 - 1) & v107;
      uint64_t v57 = *(void *)(v0 + 984);
    }
    else
    {
      char v60 = 63 - v106;
      uint64_t v57 = *(void *)(v0 + 984);
      if (v60 <= 0x7F) {
        goto LABEL_112;
      }
      uint64_t v168 = *(void *)(v57 + 64);
      if (v168)
      {
        uint64_t v108 = 1;
        goto LABEL_84;
      }
      if (v60 < 0xC0) {
        goto LABEL_112;
      }
      uint64_t v168 = *(void *)(v57 + 72);
      if (v168)
      {
        uint64_t v108 = 2;
        goto LABEL_84;
      }
      if (v60 < 0x100) {
        goto LABEL_112;
      }
      uint64_t v168 = *(void *)(v57 + 80);
      if (!v168) {
        goto LABEL_97;
      }
      uint64_t v108 = 3;
LABEL_84:
      unint64_t v110 = (v168 - 1) & v168;
      uint64_t v109 = __clz(__rbit64(v168)) + (v108 << 6);
    }
    *(void *)(v0 + 1000) = v110;
    *(void *)(v0 + 992) = v108;
    uint64_t v111 = *(void *)(v0 + 816);
    unint64_t v112 = *(void *)(v0 + 808);
    char v113 = *(void *)(v0 + 800);
    uint64_t v114 = *(void *)(v0 + 792);
    uint64_t v115 = *(void *)(v57 + 48) + *(void *)(v113 + 72) * v109;
    unint64_t v116 = *(void (**)(uint64_t, unint64_t, uint64_t))(v113 + 16);
    *(void *)(v0 + 1008) = v116;
    *(void *)(v0 + 1016) = (v113 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v116(v111, v115, v114);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32))(v112, v111, v114);
    uint64_t v117 = swift_task_alloc();
    *(void *)(v0 + 1024) = v117;
    *(void *)(v117 + 16) = v112;
    unint64_t v118 = (void *)swift_task_alloc();
    *(void *)(v0 + 1032) = v118;
    uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PaperKitPDFDocument?);
    *unint64_t v118 = v0;
    v118[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
    uint64_t v120 = &async function pointer to partial apply for closure #1 in static PaperKitPDFDocument._load(_:);
    uint64_t v121 = v0 + 360;
    uint64_t v122 = 1;
    uint64_t v123 = v117;
    return MEMORY[0x270F17D68](v121, v122, v120, v123, v119);
  }
  unint64_t v124 = *(void *)(v0 + 664);
  uint64_t v125 = *(void (**)(void, void, void))(v124 + 32);
  v124 += 32;
  uint64_t v126 = *(void *)(v0 + 592);
  uint64_t v240 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48);
  uint64_t v243 = v125;
  uint64_t v232 = *(void *)(v0 + 544);
  double v234 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
  uint64_t v224 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v126 + 56);
  uint64_t v238 = (void (**)(uint64_t, uint64_t))(v124 - 24);
  uint64_t v225 = (void (**)(void, uint64_t))(v124 - 16);
  while (2)
  {
    uint64_t v131 = *(void *)(v0 + 640);
    uint64_t v132 = *(void *)(v0 + 584);
    v243(*(void *)(v0 + 696), *(void *)(v0 + 720), *(void *)(v0 + 656));
    _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    SharedTagged_3.subscript.getter();
    uint64_t v133 = *(void *)(v0 + 160);
    uint64_t v134 = *(void *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v133);
    (*(void (**)(uint64_t, uint64_t))(v134 + 88))(v133, v134);
    if ((*v240)(v131, 1, v132) == 1)
    {
      uint64_t v127 = *(void *)(v0 + 640);
      (*v238)(*(void *)(v0 + 696), *(void *)(v0 + 656));
      outlined destroy of StocksKitCurrencyCache.Provider?(v127, &demangling cache variable for type metadata for PDFPageID?);
      __swift_destroy_boxed_opaque_existential_1(v0 + 136);
      goto LABEL_62;
    }
    outlined init with take of PDFPageID(*(void *)(v0 + 640), *(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for PDFPageID);
    __swift_destroy_boxed_opaque_existential_1(v0 + 136);
    if (!v56[2]
      || (uint64_t v135 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 616)), (v136 & 1) == 0))
    {
      char v155 = *(void *)(v0 + 696);
      uint64_t v156 = *(void *)(v0 + 656);
      _s8PaperKit0A0VWOhTm_2(*(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for PDFPageID);
      (*v238)(v155, v156);
      goto LABEL_62;
    }
    unint64_t v137 = *(void *)(v56[7] + 8 * v135);
    if (one-time initialization token for lock != -1) {
      swift_once();
    }
    uint64_t v138 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    uint64_t v139 = swift_task_alloc();
    *(void *)(v139 + 16) = v245;
    *(void *)(v139 + 24) = v137;
    uint64_t v140 = swift_task_alloc();
    *(void *)(v140 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
    *(void *)(v140 + 24) = v139;
    os_unfair_lock_lock(v138 + 4);
    closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v141);
    if (!v236)
    {
      double v237 = v137;
      uint64_t v142 = *(void *)(v0 + 544);
      uint64_t v143 = *(void *)(v0 + 536);
      os_unfair_lock_unlock(v138 + 4);
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v144 = *v234;
      if ((*v234)(v143, 1, v142) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 536), (uint64_t *)&demangling cache variable for type metadata for PageId?);
        char v145 = objc_msgSend(v245, sel_pageAtIndex_, v237);
        if (!v145) {
          goto LABEL_134;
        }
        unint64_t v146 = v145;
        CGAffineTransform v147 = *(void *)(v0 + 544);
        uint64_t v148 = *(void *)(v0 + 528);
        type metadata accessor for PaperKitPDFPage(0);
        uint64_t v149 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
        swift_beginAccess();
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v149, v148, (uint64_t *)&demangling cache variable for type metadata for PageId?);

        if (v144(v148, 1, v147) == 1)
        {
          uint64_t v150 = *(void *)(v0 + 584);
          uint64_t v151 = *(void *)(v0 + 576);
          outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 528), (uint64_t *)&demangling cache variable for type metadata for PageId?);
          (*v224)(v151, 1, 1, v150);
          uint64_t v152 = v232;
          uint64_t v153 = v151 + *(int *)(v232 + 20);
          id v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v154 - 8) + 56))(v153, 1, 1, v154);
          goto LABEL_77;
        }
        uint64_t v157 = *(void *)(v0 + 576);
        uint64_t v158 = *(void *)(v0 + 528);
      }
      else
      {
        uint64_t v157 = *(void *)(v0 + 576);
        uint64_t v158 = *(void *)(v0 + 536);
      }
      outlined init with take of PDFPageID(v158, v157, type metadata accessor for PageId);
      uint64_t v152 = v232;
LABEL_77:
      uint64_t v159 = *(void *)(v0 + 576);
      uint64_t v160 = *(void *)(v0 + 504);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v159 + *(int *)(v152 + 20), v160, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      _s8PaperKit0A0VWOhTm_2(v159, type metadata accessor for PageId);
      uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      uint64_t v162 = *(void *)(v161 - 8);
      uint64_t v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161);
      outlined destroy of StocksKitCurrencyCache.Provider?(v160, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v164 = *(void *)(v0 + 696);
      if (v163 == 1)
      {
        uint64_t v226 = *(void *)(v0 + 656);
        uint64_t v230 = *(void *)(v0 + 616);
        uint64_t v165 = *(char **)(v0 + 568);
        uint64_t v166 = *(void *)(v0 + 496);
        (*v225)(*(void *)(v0 + 688), v164);
        lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
        WeakTagged_3.init(_:)();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v162 + 56))(v166, 0, 1, v161);
        PaperKitPDFDocument.subscript.getter(v237, (uint64_t)v165);
        outlined assign with take of WeakTagged_3<TaggedPaperPage>?(v166, (uint64_t)&v165[*(int *)(v232 + 20)]);
        PaperKitPDFDocument.subscript.setter(v165, v237);
        _s8PaperKit0A0VWOhTm_2(v230, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*v238)(v164, v226);
      }
      else
      {
        uint64_t v167 = *(void *)(v0 + 656);
        _s8PaperKit0A0VWOhTm_2(*(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*v238)(v164, v167);
      }
      uint64_t v236 = 0;
LABEL_62:
      uint64_t v128 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
      uint64_t v129 = *(void *)(v0 + 720);
      uint64_t v130 = *(void *)(v0 + 656);
      CROrderedSet.Iterator.next()();
      if (v128(v129, 1, v130) == 1) {
        goto LABEL_53;
      }
      continue;
    }
    break;
  }
  BOOL v95 = v138 + 4;
LABEL_48:
  os_unfair_lock_unlock(v95);
  return swift_task_dealloc();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(id);
  id v8;
  uint64_t v9;

  (*(void (**)(void, void))(v0[100] + 8))(v0[107], v0[99]);
  uint64_t v1 = (void *)v0[115];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_20C2D7000, v3, v4, "Could not create PDFDocument.", v5, 2u);
    MEMORY[0x210550270](v5, -1, -1);
  }

  uint64_t v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(id))v0[1];
  return v6(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 960) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
  }
  else {
    uint64_t v2 = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  Swift::UInt *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  Swift::UInt *v60;
  uint64_t v61;
  unint64_t v62;
  os_unfair_lock_s *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t);
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int isUniquelyReferenced_nonNull_native;
  char v86;
  BOOL v87;
  char v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  os_unfair_lock_s *v97;
  unsigned int (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned char *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void (*v118)(uint64_t, unint64_t, uint64_t);
  uint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(void, void, void);
  uint64_t v128;
  uint64_t v129;
  unsigned int (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  unint64_t v139;
  os_unfair_lock_s *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int (*v146)(uint64_t, uint64_t, uint64_t);
  id v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char **v186;
  unsigned int (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(uint64_t, uint64_t, uint64_t);
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  char *v211;
  uint64_t v212;
  id v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t (*v225)(uint64_t);
  void (**v226)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v227)(void, uint64_t);
  uint64_t v228;
  void (*v229)(void, void);
  void (**v230)(void, void);
  uint64_t v231;
  uint64_t v232;
  void (**v233)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  unsigned int (**v236)(uint64_t, uint64_t, uint64_t);
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  void (**v240)(uint64_t, uint64_t);
  Swift::UInt *v241;
  unsigned int (**v242)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v243)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (**v244)(uint64_t, uint64_t, uint64_t);
  void (*v245)(void, void, void);
  unsigned int (**v246)(uint64_t, uint64_t, uint64_t);
  void *v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;

  uint64_t v250 = v0;
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void *)(v0 + 704);
  uint64_t v4 = *(void *)(v0 + 664);
  uint64_t v5 = *(void *)(v0 + 656);
  (*(void (**)(void, void))(*(void *)(v0 + 800) + 8))(*(void *)(v0 + 848), *(void *)(v0 + 792));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  CROrderedSet.Iterator.next()();
  uint64_t v6 = v1(v2, 1, v5);
  double v237 = *(void *)(v0 + 960);
  if (v6 != 1)
  {
    do
    {
      uint64_t v23 = *(void *)(v0 + 648);
      uint64_t v24 = *(void *)(v0 + 592);
      uint64_t v25 = *(void *)(v0 + 584);
      (*(void (**)(void, void, void))(v0 + 944))(*(void *)(v0 + 704), *(void *)(v0 + 728), *(void *)(v0 + 656));
      _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
      SharedTagged_3.subscript.getter();
      uint64_t v26 = *(void *)(v0 + 120);
      uint64_t v27 = *(void *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v26);
      (*(void (**)(uint64_t, uint64_t))(v27 + 88))(v26, v27);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v25) == 1)
      {
        uint64_t v15 = *(void *)(v0 + 800);
        uint64_t v16 = *(void *)(v0 + 792);
        uint64_t v17 = *(void *)(v0 + 776);
        unint64_t v18 = *(void *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v18, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v17, 1, 1, v16);
      }
      else
      {
        uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
        uint64_t v29 = *(void *)(v0 + 800);
        uint64_t v30 = *(void *)(v0 + 792);
        uint64_t v31 = *(void *)(v0 + 776);
        uint64_t v32 = *(void *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v31, v32 + *(int *)(*(void *)(v0 + 584) + 20), v30);
        _s8PaperKit0A0VWOhTm_2(v32, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v30);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v28(v31, 1, v30) != 1)
        {
          (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 848), *(void *)(v0 + 776), *(void *)(v0 + 792));
          uint64_t v33 = (void *)swift_task_alloc();
          *(void *)(v0 + 952) = v33;
          *uint64_t v33 = v0;
          v33[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          uint64_t v34 = *(void *)(v0 + 872);
          uint64_t v35 = *(void *)(v0 + 864);
          uint64_t v36 = *(void *)(v0 + 848);
          return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(v36, v35, v34);
        }
      }
      uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
      id v20 = *(void *)(v0 + 776);
      uint64_t v21 = *(void *)(v0 + 728);
      uint64_t v22 = *(void *)(v0 + 656);
      (*(void (**)(void, uint64_t))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 704), v22);
      outlined destroy of StocksKitCurrencyCache.Provider?(v20, &demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v19(v21, 1, v22) != 1);
  }
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 896);
  uint64_t v8 = *(void *)(v0 + 792);
  uint64_t v9 = *(void *)(v0 + 768);
  uint64_t v230 = (void (**)(void, void))(*(void *)(v0 + 744) + 8);
  uint64_t v229 = *v230;
  (*v230)(*(void *)(v0 + 760), *(void *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  if (v7(v9, 1, v8) == 1)
  {
    uint64_t v10 = *(Swift::UInt **)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 768), &demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    uint64_t v11 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v11, (uint64_t)v10);
    uint64_t v12 = v237;
    swift_bridgeObjectRelease();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(Swift::UInt *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v10, 1, v13) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 624), &demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      uint64_t v14 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
    }
    else
    {
      uint64_t v46 = *(void *)(v0 + 864);
      unint64_t v47 = *(void *)(v0 + 832);
      char v48 = *(void *)(v0 + 824);
      uint64_t v49 = *(void *)(v0 + 792);
      uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 800) + 32);
      v50(v48, *(void *)(v0 + 624), v49);
      v50(v47, v48, v49);
      swift_beginAccess();
      uint64_t v51 = *(void *)(v46 + 16);
      if (!*(void *)(v51 + 16)) {
        goto LABEL_135;
      }
      uint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 832));
      if ((v53 & 1) == 0) {
        goto LABEL_135;
      }
      uint64_t v54 = *(void *)(v0 + 832);
      uint64_t v55 = *(void *)(v0 + 800);
      uint64_t v56 = *(void *)(v0 + 792);
      uint64_t v57 = *(void **)(*(void *)(v51 + 56) + 8 * v52);
      swift_endAccess();
      uint64_t v10 = *(Swift::UInt **)(v55 + 8);
      uint64_t v14 = v57;
      ((void (*)(uint64_t, uint64_t))v10)(v54, v56);
      uint64_t v12 = v237;
    }
  }
  else
  {
    uint64_t v38 = *(void *)(v0 + 864);
    (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 840), *(void *)(v0 + 768), *(void *)(v0 + 792));
    swift_beginAccess();
    double v39 = *(void *)(v38 + 16);
    if (!*(void *)(v39 + 16)) {
      goto LABEL_133;
    }
    uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 840));
    if ((v41 & 1) == 0) {
      goto LABEL_133;
    }
    uint64_t v42 = *(void *)(v0 + 840);
    uint64_t v43 = *(void *)(v0 + 800);
    uint64_t v44 = *(void *)(v0 + 792);
    uint64_t v45 = *(void **)(*(void *)(v39 + 56) + 8 * v40);
    swift_endAccess();
    uint64_t v10 = *(Swift::UInt **)(v43 + 8);
    uint64_t v14 = v45;
    ((void (*)(uint64_t, uint64_t))v10)(v42, v44);
    uint64_t v12 = v237;
  }
  *(void *)(v0 + 968) = v14;
  uint64_t v58 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v59 = (uint64_t)objc_msgSend(v14, sel_pageCount);
  if (v59 < 0) {
    goto LABEL_101;
  }
  uint64_t v10 = (Swift::UInt *)v59;
  uint64_t v247 = v14;
  if (!v59)
  {
    uint64_t v238 = v12;
    goto LABEL_52;
  }
  if (one-time initialization token for lock != -1) {
    goto LABEL_102;
  }
LABEL_22:
  char v60 = 0;
  uint64_t v61 = *(void *)(v0 + 592);
  double v233 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56);
  uint64_t v235 = *(void *)(v0 + 544);
  uint64_t v231 = v61;
  uint64_t v62 = v61 + 48;
  unint64_t v244 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  unsigned int v246 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
  uint64_t v241 = v10;
  do
  {
    if (v10 == v60)
    {
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      if (v62 >= 0x140)
      {
        uint64_t v170 = *(void *)(v59 + 88);
        if (v170)
        {
          unint64_t v110 = 4;
          goto LABEL_84;
        }
        if (v62 >= 0x180)
        {
          uint64_t v170 = *(void *)(v59 + 96);
          if (v170)
          {
            unint64_t v110 = 5;
          }
          else
          {
            uint64_t v171 = 0;
            int v172 = v62 >> 6;
            if (v172 <= 6) {
              int v172 = 6;
            }
            uint64_t v173 = v172 - 6;
            do
            {
              if (v173 == v171) {
                goto LABEL_112;
              }
              uint64_t v170 = *(void *)(v59 + 104 + 8 * v171++);
            }
            while (!v170);
            unint64_t v110 = v171 + 5;
          }
          goto LABEL_84;
        }
      }
LABEL_112:
      uint64_t v175 = *(void *)(v0 + 384);
      uint64_t v174 = *(void *)(v0 + 392);
      uint64_t v176 = *(void *)(v0 + 376);
      swift_release();
      specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v175, v176, v174);
      if (v176 != 0x8000000000000000)
      {
        unint64_t v178 = *(void *)(v0 + 480);
        uint64_t v177 = *(void *)(v0 + 488);
        uint64_t v180 = *(void *)(v0 + 464);
        uint64_t v179 = *(void *)(v0 + 472);
        uint64_t v181 = *(void *)(v0 + 448);
        uint64_t v182 = *(void *)(v0 + 456);
        uint64_t v183 = *(void *)(v0 + 400);
        uint64_t v184 = *(void *)(v0 + 376);
        outlined copy of PaperDocument.PDFDocumentUse(v184);
        outlined consume of PaperDocument.PDFDocumentUse(v184);
        outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 16))(v179, v183, v181);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 32))(v180, v179, v181);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
        dispatch thunk of Sequence.makeIterator()();
        uint64_t v185 = *(int *)(v178 + 36);
        *(_DWORD *)(v0 + 1056) = v185;
        *(void *)(v177 + v185) = 0;
        uint64_t v186 = &selRef_isImageAnalysisEnabled;
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
        while (1)
        {
          uint64_t v187 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
          uint64_t v188 = *(void *)(v0 + 712);
          uint64_t v189 = *(void *)(v0 + 656);
          dispatch thunk of IteratorProtocol.next()();
          if (v187(v188, 1, v189) == 1)
          {
            uint64_t v190 = *(void *)(v0 + 432);
            unint64_t v192 = *(void *)(v0 + 408);
            uint64_t v191 = *(void *)(v0 + 416);
            outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v191 + 56))(v190, 1, 1, v192);
          }
          else
          {
            uint64_t v193 = *(int *)(v0 + 1056);
            uint64_t v194 = *(void *)(v0 + 680);
            id v195 = *(void *)(v0 + 656);
            uint64_t v196 = *(void *)(v0 + 488);
            uint64_t v197 = *(void *)(v0 + 424);
            uint64_t v198 = *(void *)(v0 + 408);
            uint64_t v199 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 664) + 32);
            v199(v194, *(void *)(v0 + 712), v195);
            uint64_t v200 = v197 + *(int *)(v198 + 48);
            uint64_t v201 = *(void *)(v196 + v193);
            v199(v200, v194, v195);
            if (__OFADD__(v201, 1))
            {
              __break(1u);
              goto LABEL_132;
            }
            uint64_t v202 = *(void *)(v0 + 656);
            uint64_t v203 = *(void **)(v0 + 432);
            uint64_t v205 = *(void *)(v0 + 408);
            uint64_t v204 = *(void *)(v0 + 416);
            *(void *)(*(void *)(v0 + 488) + *(int *)(v0 + 1056)) = v201 + 1;
            uint64_t v206 = (char *)v203 + *(int *)(v205 + 48);
            *uint64_t v203 = v201;
            v199((uint64_t)v206, v200, v202);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v204 + 56))(v203, 0, 1, v205);
            uint64_t v186 = &selRef_isImageAnalysisEnabled;
          }
          id v207 = *(void *)(v0 + 440);
          uint64_t v209 = *(void *)(v0 + 408);
          uint64_t v208 = *(void *)(v0 + 416);
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 432), v207, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v208 + 48))(v207, 1, v209) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
            goto LABEL_128;
          }
          uint64_t v210 = *(void **)(v0 + 968);
          CGRect v211 = *(char **)(v0 + 440);
          uint64_t v212 = *(void *)v211;
          (*(void (**)(void, char *, void))(*(void *)(v0 + 664) + 32))(*(void *)(v0 + 672), &v211[*(int *)(*(void *)(v0 + 408) + 48)], *(void *)(v0 + 656));
          uint64_t v213 = objc_msgSend(v210, v186[63], v212);
          *(void *)(v0 + 1040) = v213;
          if (v213)
          {
            CGRect v214 = v213;
            type metadata accessor for PaperKitPDFPage(0);
            uint64_t v215 = swift_dynamicCastClass();
            if (v215)
            {
              uint64_t v216 = v215;
              uint64_t v217 = *(void *)(v0 + 392);
              CGRect v218 = *(void *)(v0 + 376);
              CGRect v219 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
              SharedTagged_3.subscript.getter();
              uint64_t v220 = *(void *)(v0 + 200);
              id v221 = *(void *)(v0 + 208);
              __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v220);
              *(void *)(v0 + 368) = v218;
              outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v217, v0 + 16, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
              uint64_t v243 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v221 + 144) + **(int **)(v221 + 144));
              Swift::String v222 = (void *)swift_task_alloc();
              *(void *)(v0 + 1048) = v222;
              *Swift::String v222 = v0;
              v222[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
              uint64_t v223 = *(void *)(v0 + 880);
              uint64_t v224 = *(void *)(v0 + 384);
              return v243(v216, v0 + 368, v224, v0 + 16, v223, v219, v220, v221);
            }
          }
          (*(void (**)(void, void))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 672), *(void *)(v0 + 656));
        }
      }
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_128:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v248 = *(void *)(v0 + 968);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v225 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v225(v248);
    }
    uint64_t v63 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    int v64 = swift_task_alloc();
    *(void *)(v64 + 16) = v14;
    *(void *)(v64 + 24) = v60;
    uint64_t v65 = swift_task_alloc();
    *(void *)(v65 + 16) = partial apply for closure #1 in PaperKitPDFDocument.subscript.getter;
    *(void *)(v65 + 24) = v64;
    os_unfair_lock_lock(v63 + 4);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v66);
    if (v12)
    {
      unint64_t v97 = v63 + 4;
      goto LABEL_48;
    }
    uint64_t v67 = *(void *)(v0 + 544);
    uint64_t v68 = *(void *)(v0 + 520);
    os_unfair_lock_unlock(v63 + 4);
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v69 = *v246;
    if ((*v246)(v68, 1, v67) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for PageId?);
      CGFloat v70 = objc_msgSend(v247, sel_pageAtIndex_, v60);
      if (!v70)
      {
LABEL_132:
        __break(1u);
LABEL_133:
        swift_endAccess();
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        uint64_t v123 = swift_endAccess();
        __break(1u);
        return MEMORY[0x270F17D68](v123, v124, v122, v125, v121);
      }
      uint64_t v71 = v70;
      uint64_t v72 = *(void *)(v0 + 544);
      uint64_t v73 = *(void *)(v0 + 512);
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v74 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v74, v73, (uint64_t *)&demangling cache variable for type metadata for PageId?);

      if (v69(v73, 1, v72) == 1)
      {
        uint64_t v75 = *(void *)(v0 + 584);
        uint64_t v76 = *(void *)(v0 + 560);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 512), (uint64_t *)&demangling cache variable for type metadata for PageId?);
        (*v233)(v76, 1, 1, v75);
        long long v77 = v76 + *(int *)(v235 + 20);
        id v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v77, 1, 1, v78);
      }
      else
      {
        outlined init with take of PDFPageID(*(void *)(v0 + 512), *(void *)(v0 + 560), type metadata accessor for PageId);
      }
    }
    else
    {
      outlined init with take of PDFPageID(*(void *)(v0 + 520), *(void *)(v0 + 560), type metadata accessor for PageId);
    }
    uint64_t v79 = *(void *)(v0 + 632);
    uint64_t v80 = *(void *)(v0 + 584);
    uint64_t v81 = *(void *)(v0 + 560);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v81, v79, &demangling cache variable for type metadata for PDFPageID?);
    _s8PaperKit0A0VWOhTm_2(v81, type metadata accessor for PageId);
    uint64_t v82 = (*v244)(v79, 1, v80);
    uint64_t v83 = *(void *)(v0 + 632);
    if (v82 == 1)
    {
      unint64_t v59 = outlined destroy of StocksKitCurrencyCache.Provider?(v83, &demangling cache variable for type metadata for PDFPageID?);
      goto LABEL_24;
    }
    uint64_t v84 = *(void *)(v0 + 608);
    uint64_t v10 = *(Swift::UInt **)(v0 + 600);
    outlined init with take of PDFPageID(v83, v84, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    outlined init with copy of PDFPageID(v84, (uint64_t)v10);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v249 = v58;
    uint64_t v14 = v58;
    uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
    uint64_t v62 = v58[2];
    uint64_t v87 = (v86 & 1) == 0;
    unint64_t v59 = v62 + v87;
    if (__OFADD__(v62, v87)) {
      goto LABEL_96;
    }
    uint64_t v88 = v86;
    if (v58[3] >= v59)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v86 & 1) == 0) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v14 = &v249;
        specialized _NativeDictionary.copy()();
        uint64_t v58 = v249;
        if ((v88 & 1) == 0) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      uint64_t v10 = *(Swift::UInt **)(v0 + 600);
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, isUniquelyReferenced_nonNull_native);
      uint64_t v58 = v249;
      uint64_t v14 = v249;
      uint64_t v89 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
      if ((v88 & 1) != (v90 & 1))
      {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      uint64_t v12 = v89;
      if ((v88 & 1) == 0)
      {
LABEL_43:
        uint64_t v91 = *(void *)(v0 + 600);
        v58[(v12 >> 6) + 8] |= 1 << v12;
        outlined init with copy of PDFPageID(v91, v58[6] + *(void *)(v231 + 72) * v12);
        *(void *)(v58[7] + 8 * v12) = v60;
        uint64_t v92 = v58[2];
        long long v93 = __OFADD__(v92, 1);
        char v94 = v92 + 1;
        if (v93)
        {
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          unint64_t v59 = swift_once();
          goto LABEL_22;
        }
        v58[2] = v94;
        goto LABEL_45;
      }
    }
    *(void *)(v58[7] + 8 * v12) = v60;
LABEL_45:
    BOOL v95 = *(void *)(v0 + 608);
    char v96 = *(void *)(v0 + 600);
    swift_bridgeObjectRelease();
    _s8PaperKit0A0VWOhTm_2(v96, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    unint64_t v59 = _s8PaperKit0A0VWOhTm_2(v95, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_24:
    uint64_t v12 = 0;
    char v60 = (Swift::UInt *)((char *)v60 + 1);
    uint64_t v10 = v241;
    uint64_t v14 = v247;
  }
  while (v241 != v60);
  uint64_t v238 = 0;
LABEL_52:
  *(void *)(v0 + 976) = v58;
  char v98 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
  uint64_t v99 = *(void *)(v0 + 720);
  uint64_t v100 = *(void *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  if (v98(v99, 1, v100) == 1)
  {
LABEL_53:
    BOOL v101 = *(void *)(v0 + 864);
    uint64_t v103 = *(void *)(v0 + 376);
    uint64_t v102 = *(void *)(v0 + 384);
    v229(*(void *)(v0 + 752), *(void *)(v0 + 736));
    swift_beginAccess();
    uint64_t v104 = *(void *)(v101 + 16);
    swift_bridgeObjectRetain();
    uint64_t v105 = specialized PaperDocument.update<A>(_:in:otherDocuments:use:)((char *)v247, v102, v104, v103);
    *(void *)(v0 + 984) = v105;
    swift_bridgeObjectRelease();
    uint64_t v106 = v105[32];
    *(unsigned char *)(v0 + 91) = v106;
    uint64_t v107 = -1;
    uint64_t v108 = -1 << v106;
    if (-v108 < 64) {
      uint64_t v107 = ~(-1 << -(char)v108);
    }
    uint64_t v109 = v107 & *((void *)v105 + 7);
    if (v109)
    {
      unint64_t v110 = 0;
      uint64_t v111 = __clz(__rbit64(v109));
      unint64_t v112 = (v109 - 1) & v109;
      unint64_t v59 = *(void *)(v0 + 984);
    }
    else
    {
      uint64_t v62 = 63 - v108;
      unint64_t v59 = *(void *)(v0 + 984);
      if (v62 <= 0x7F) {
        goto LABEL_112;
      }
      uint64_t v170 = *(void *)(v59 + 64);
      if (v170)
      {
        unint64_t v110 = 1;
        goto LABEL_84;
      }
      if (v62 < 0xC0) {
        goto LABEL_112;
      }
      uint64_t v170 = *(void *)(v59 + 72);
      if (v170)
      {
        unint64_t v110 = 2;
        goto LABEL_84;
      }
      if (v62 < 0x100) {
        goto LABEL_112;
      }
      uint64_t v170 = *(void *)(v59 + 80);
      if (!v170) {
        goto LABEL_97;
      }
      unint64_t v110 = 3;
LABEL_84:
      unint64_t v112 = (v170 - 1) & v170;
      uint64_t v111 = __clz(__rbit64(v170)) + (v110 << 6);
    }
    *(void *)(v0 + 1000) = v112;
    *(void *)(v0 + 992) = v110;
    char v113 = *(void *)(v0 + 816);
    uint64_t v114 = *(void *)(v0 + 808);
    uint64_t v115 = *(void *)(v0 + 800);
    unint64_t v116 = *(void *)(v0 + 792);
    uint64_t v117 = *(void *)(v59 + 48) + *(void *)(v115 + 72) * v111;
    unint64_t v118 = *(void (**)(uint64_t, unint64_t, uint64_t))(v115 + 16);
    *(void *)(v0 + 1008) = v118;
    *(void *)(v0 + 1016) = (v115 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v118(v113, v117, v116);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 32))(v114, v113, v116);
    uint64_t v119 = swift_task_alloc();
    *(void *)(v0 + 1024) = v119;
    *(void *)(v119 + 16) = v114;
    uint64_t v120 = (void *)swift_task_alloc();
    *(void *)(v0 + 1032) = v120;
    uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PaperKitPDFDocument?);
    *uint64_t v120 = v0;
    v120[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
    uint64_t v122 = &async function pointer to partial apply for closure #1 in static PaperKitPDFDocument._load(_:);
    uint64_t v123 = v0 + 360;
    unint64_t v124 = 1;
    uint64_t v125 = v119;
    return MEMORY[0x270F17D68](v123, v124, v122, v125, v121);
  }
  uint64_t v126 = *(void *)(v0 + 664);
  uint64_t v127 = *(void (**)(void, void, void))(v126 + 32);
  v126 += 32;
  uint64_t v128 = *(void *)(v0 + 592);
  uint64_t v242 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  uint64_t v245 = v127;
  double v234 = *(void *)(v0 + 544);
  uint64_t v236 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
  uint64_t v226 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56);
  uint64_t v240 = (void (**)(uint64_t, uint64_t))(v126 - 24);
  uint64_t v227 = (void (**)(void, uint64_t))(v126 - 16);
  while (2)
  {
    uint64_t v133 = *(void *)(v0 + 640);
    uint64_t v134 = *(void *)(v0 + 584);
    v245(*(void *)(v0 + 696), *(void *)(v0 + 720), *(void *)(v0 + 656));
    _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
    SharedTagged_3.subscript.getter();
    uint64_t v135 = *(void *)(v0 + 160);
    uint64_t v136 = *(void *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v135);
    (*(void (**)(uint64_t, uint64_t))(v136 + 88))(v135, v136);
    if ((*v242)(v133, 1, v134) == 1)
    {
      uint64_t v129 = *(void *)(v0 + 640);
      (*v240)(*(void *)(v0 + 696), *(void *)(v0 + 656));
      outlined destroy of StocksKitCurrencyCache.Provider?(v129, &demangling cache variable for type metadata for PDFPageID?);
      __swift_destroy_boxed_opaque_existential_1(v0 + 136);
      goto LABEL_62;
    }
    outlined init with take of PDFPageID(*(void *)(v0 + 640), *(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for PDFPageID);
    __swift_destroy_boxed_opaque_existential_1(v0 + 136);
    if (!v58[2]
      || (unint64_t v137 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 616)), (v138 & 1) == 0))
    {
      uint64_t v157 = *(void *)(v0 + 696);
      uint64_t v158 = *(void *)(v0 + 656);
      _s8PaperKit0A0VWOhTm_2(*(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for PDFPageID);
      (*v240)(v157, v158);
      goto LABEL_62;
    }
    uint64_t v139 = *(void *)(v58[7] + 8 * v137);
    if (one-time initialization token for lock != -1) {
      swift_once();
    }
    uint64_t v140 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    uint64_t v141 = swift_task_alloc();
    *(void *)(v141 + 16) = v247;
    *(void *)(v141 + 24) = v139;
    uint64_t v142 = swift_task_alloc();
    *(void *)(v142 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
    *(void *)(v142 + 24) = v141;
    os_unfair_lock_lock(v140 + 4);
    closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v143);
    if (!v238)
    {
      uint64_t v239 = v139;
      unint64_t v144 = *(void *)(v0 + 544);
      char v145 = *(void *)(v0 + 536);
      os_unfair_lock_unlock(v140 + 4);
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v146 = *v236;
      if ((*v236)(v145, 1, v144) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 536), (uint64_t *)&demangling cache variable for type metadata for PageId?);
        CGAffineTransform v147 = objc_msgSend(v247, sel_pageAtIndex_, v239);
        if (!v147) {
          goto LABEL_134;
        }
        uint64_t v148 = v147;
        uint64_t v149 = *(void *)(v0 + 544);
        uint64_t v150 = *(void *)(v0 + 528);
        type metadata accessor for PaperKitPDFPage(0);
        uint64_t v151 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
        swift_beginAccess();
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v151, v150, (uint64_t *)&demangling cache variable for type metadata for PageId?);

        if (v146(v150, 1, v149) == 1)
        {
          uint64_t v152 = *(void *)(v0 + 584);
          uint64_t v153 = *(void *)(v0 + 576);
          outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 528), (uint64_t *)&demangling cache variable for type metadata for PageId?);
          (*v226)(v153, 1, 1, v152);
          id v154 = v234;
          char v155 = v153 + *(int *)(v234 + 20);
          uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56))(v155, 1, 1, v156);
          goto LABEL_77;
        }
        uint64_t v159 = *(void *)(v0 + 576);
        uint64_t v160 = *(void *)(v0 + 528);
      }
      else
      {
        uint64_t v159 = *(void *)(v0 + 576);
        uint64_t v160 = *(void *)(v0 + 536);
      }
      outlined init with take of PDFPageID(v160, v159, type metadata accessor for PageId);
      id v154 = v234;
LABEL_77:
      uint64_t v161 = *(void *)(v0 + 576);
      uint64_t v162 = *(void *)(v0 + 504);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v161 + *(int *)(v154 + 20), v162, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      _s8PaperKit0A0VWOhTm_2(v161, type metadata accessor for PageId);
      uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      uint64_t v164 = *(void *)(v163 - 8);
      uint64_t v165 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163);
      outlined destroy of StocksKitCurrencyCache.Provider?(v162, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v166 = *(void *)(v0 + 696);
      if (v165 == 1)
      {
        uint64_t v228 = *(void *)(v0 + 656);
        uint64_t v232 = *(void *)(v0 + 616);
        uint64_t v167 = *(char **)(v0 + 568);
        uint64_t v168 = *(void *)(v0 + 496);
        (*v227)(*(void *)(v0 + 688), v166);
        lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
        WeakTagged_3.init(_:)();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v164 + 56))(v168, 0, 1, v163);
        PaperKitPDFDocument.subscript.getter(v239, (uint64_t)v167);
        outlined assign with take of WeakTagged_3<TaggedPaperPage>?(v168, (uint64_t)&v167[*(int *)(v234 + 20)]);
        PaperKitPDFDocument.subscript.setter(v167, v239);
        _s8PaperKit0A0VWOhTm_2(v232, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*v240)(v166, v228);
      }
      else
      {
        uint64_t v169 = *(void *)(v0 + 656);
        _s8PaperKit0A0VWOhTm_2(*(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*v240)(v166, v169);
      }
      uint64_t v238 = 0;
LABEL_62:
      uint64_t v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
      uint64_t v131 = *(void *)(v0 + 720);
      uint64_t v132 = *(void *)(v0 + 656);
      CROrderedSet.Iterator.next()();
      if (v130(v131, 1, v132) == 1) {
        goto LABEL_53;
      }
      continue;
    }
    break;
  }
  unint64_t v97 = v140 + 4;
LABEL_48:
  os_unfair_lock_unlock(v97);
  return swift_task_dealloc();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t (*v12)(id);
  id v14;
  uint64_t v15;

  uint64_t v1 = v0[95];
  uint64_t v2 = v0[93];
  uint64_t v3 = v0[92];
  uint64_t v4 = v0[88];
  uint64_t v5 = v0[83];
  uint64_t v6 = v0[82];
  (*(void (**)(void, void))(v0[100] + 8))(v0[106], v0[99]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = (void *)v0[120];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_20C2D7000, v9, v10, "Could not create PDFDocument.", v11, 2u);
    MEMORY[0x210550270](v11, -1, -1);
  }

  uint64_t v14 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(id))v0[1];
  return v12(v14);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized PaperDocument.newPDFDocument<A>(use:in:options:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void (*v4)(unint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, unint64_t, uint64_t);
  uint64_t v29;
  void *v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  char *v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v89)(uint64_t);
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;

  uint64_t v1 = *(void **)(v0 + 360);
  if ((unint64_t)v1 >= 2)
  {
    uint64_t v2 = *(void *)(v0 + 808);
    uint64_t v3 = v1;
    LOBYTE(v2) = PaperKitPDFDocument.finishLoading(as:)(v2);
    outlined consume of PaperKitPDFDocument??(v1);
    if (v2)
    {
      uint64_t v4 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1008);
      uint64_t v5 = *(void *)(v0 + 808);
      uint64_t v6 = *(void *)(v0 + 792);
      long long v93 = *(char **)(v0 + 968);
      int v90 = *(void *)(v0 + 384);
      uint64_t v92 = *(void *)(v0 + 376);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CRAsset, PaperKitPDFDocument)>);
      uint64_t v7 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAsset, PaperKitPDFDocument))
                 - 8);
      uint64_t v8 = (*(unsigned __int8 *)(*(void *)v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v7 + 80);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_20C832C20;
      uint64_t v10 = v9 + v8;
      uint64_t v11 = v7[14];
      v4(v10, v5, v6);
      *(void *)(v10 + v11) = v3;
      uint64_t v12 = v3;
      uint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(v9);
      specialized PaperDocument.update<A>(_:in:otherDocuments:use:)(v93, v90, v13, v92);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined consume of PaperKitPDFDocument??(v1);
  }
  uint64_t v14 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 800) + 8))(*(void *)(v0 + 808), *(void *)(v0 + 792));
  uint64_t v19 = *(void *)(v0 + 1000);
  id v20 = *(void *)(v0 + 992);
  if (v19)
  {
    uint64_t v21 = (v19 - 1) & v19;
    uint64_t v22 = __clz(__rbit64(v19)) | (v20 << 6);
    uint64_t v14 = *(void *)(v0 + 984);
    goto LABEL_7;
  }
  uint64_t v31 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v32 = (unint64_t)((1 << *(unsigned char *)(v0 + 91)) + 63) >> 6;
  uint64_t v14 = *(void *)(v0 + 984);
  if (v31 < v32)
  {
    uint64_t v33 = v14 + 56;
    uint64_t v34 = *(void *)(v14 + 56 + 8 * v31);
    ++v20;
    if (v34)
    {
LABEL_13:
      uint64_t v21 = (v34 - 1) & v34;
      uint64_t v22 = __clz(__rbit64(v34)) + (v20 << 6);
LABEL_7:
      *(void *)(v0 + 1000) = v21;
      *(void *)(v0 + 992) = v20;
      uint64_t v23 = *(void *)(v0 + 816);
      uint64_t v24 = *(void *)(v0 + 808);
      uint64_t v25 = *(void *)(v0 + 800);
      uint64_t v26 = *(void *)(v0 + 792);
      uint64_t v27 = *(void *)(v14 + 48) + *(void *)(v25 + 72) * v22;
      uint64_t v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 16);
      *(void *)(v0 + 1008) = v28;
      *(void *)(v0 + 1016) = (v25 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v28(v23, v27, v26);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v24, v23, v26);
      uint64_t v29 = swift_task_alloc();
      *(void *)(v0 + 1024) = v29;
      *(void *)(v29 + 16) = v24;
      uint64_t v30 = (void *)swift_task_alloc();
      *(void *)(v0 + 1032) = v30;
      unint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PaperKitPDFDocument?);
      *uint64_t v30 = v0;
      v30[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
      uint64_t v16 = &async function pointer to partial apply for closure #1 in static PaperKitPDFDocument._load(_:);
      uint64_t v14 = v0 + 360;
      uint64_t v15 = 1;
      uint64_t v17 = v29;
      return MEMORY[0x270F17D68](v14, v15, v16, v17, v18);
    }
    id v20 = v31 + 1;
    if (v31 + 1 < v32)
    {
      uint64_t v34 = *(void *)(v33 + 8 * v20);
      if (v34) {
        goto LABEL_13;
      }
      id v20 = v31 + 2;
      if (v31 + 2 < v32)
      {
        uint64_t v34 = *(void *)(v33 + 8 * v20);
        if (v34) {
          goto LABEL_13;
        }
        id v20 = v31 + 3;
        if (v31 + 3 < v32)
        {
          uint64_t v34 = *(void *)(v33 + 8 * v20);
          if (v34) {
            goto LABEL_13;
          }
          uint64_t v35 = v31 + 4;
          if (v35 < v32)
          {
            uint64_t v34 = *(void *)(v33 + 8 * v35);
            if (v34)
            {
              id v20 = v35;
              goto LABEL_13;
            }
            while (1)
            {
              id v20 = v35 + 1;
              if (__OFADD__(v35, 1)) {
                break;
              }
              if (v20 >= v32) {
                goto LABEL_26;
              }
              uint64_t v34 = *(void *)(v33 + 8 * v20);
              ++v35;
              if (v34) {
                goto LABEL_13;
              }
            }
LABEL_47:
            __break(1u);
            return MEMORY[0x270F17D68](v14, v15, v16, v17, v18);
          }
        }
      }
    }
  }
LABEL_26:
  uint64_t v37 = *(void *)(v0 + 384);
  uint64_t v36 = *(void *)(v0 + 392);
  uint64_t v38 = *(void *)(v0 + 376);
  swift_release();
  specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v37, v38, v36);
  if (v38 != 0x8000000000000000)
  {
    uint64_t v40 = *(void *)(v0 + 480);
    double v39 = *(void *)(v0 + 488);
    uint64_t v42 = *(void *)(v0 + 464);
    uint64_t v41 = *(void *)(v0 + 472);
    uint64_t v43 = *(void *)(v0 + 448);
    uint64_t v44 = *(void *)(v0 + 456);
    uint64_t v45 = *(void *)(v0 + 400);
    uint64_t v46 = *(void *)(v0 + 376);
    outlined copy of PaperDocument.PDFDocumentUse(v46);
    outlined consume of PaperDocument.PDFDocumentUse(v46);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v41, v45, v43);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v42, v41, v43);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    dispatch thunk of Sequence.makeIterator()();
    unint64_t v47 = *(int *)(v40 + 36);
    *(_DWORD *)(v0 + 1056) = v47;
    *(void *)(v39 + v47) = 0;
    char v48 = &selRef_isImageAnalysisEnabled;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
    while (1)
    {
      uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
      uint64_t v50 = *(void *)(v0 + 712);
      uint64_t v51 = *(void *)(v0 + 656);
      dispatch thunk of IteratorProtocol.next()();
      if (v49(v50, 1, v51) == 1)
      {
        uint64_t v52 = *(void *)(v0 + 432);
        uint64_t v54 = *(void *)(v0 + 408);
        uint64_t v53 = *(void *)(v0 + 416);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v52, 1, 1, v54);
      }
      else
      {
        uint64_t v55 = v48;
        uint64_t v56 = *(int *)(v0 + 1056);
        uint64_t v57 = *(void *)(v0 + 680);
        uint64_t v58 = *(void *)(v0 + 656);
        unint64_t v59 = *(void *)(v0 + 488);
        char v60 = *(void *)(v0 + 424);
        uint64_t v61 = *(void *)(v0 + 408);
        uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 664) + 32);
        v62(v57, *(void *)(v0 + 712), v58);
        uint64_t v63 = v60 + *(int *)(v61 + 48);
        int v64 = *(void *)(v59 + v56);
        uint64_t v14 = v62(v63, v57, v58);
        if (__OFADD__(v64, 1))
        {
          __break(1u);
          goto LABEL_46;
        }
        uint64_t v65 = *(void *)(v0 + 656);
        uint64_t v66 = *(void **)(v0 + 432);
        uint64_t v68 = *(void *)(v0 + 408);
        uint64_t v67 = *(void *)(v0 + 416);
        *(void *)(*(void *)(v0 + 488) + *(int *)(v0 + 1056)) = v64 + 1;
        unint64_t v69 = (char *)v66 + *(int *)(v68 + 48);
        *uint64_t v66 = v64;
        v62((uint64_t)v69, v63, v65);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v67 + 56))(v66, 0, 1, v68);
        char v48 = v55;
      }
      CGFloat v70 = *(void *)(v0 + 440);
      uint64_t v72 = *(void *)(v0 + 408);
      uint64_t v71 = *(void *)(v0 + 416);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 432), v70, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v70, 1, v72) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
        goto LABEL_42;
      }
      uint64_t v73 = *(void **)(v0 + 968);
      uint64_t v74 = *(char **)(v0 + 440);
      uint64_t v75 = *(void *)v74;
      (*(void (**)(void, char *, void))(*(void *)(v0 + 664) + 32))(*(void *)(v0 + 672), &v74[*(int *)(*(void *)(v0 + 408) + 48)], *(void *)(v0 + 656));
      uint64_t v76 = objc_msgSend(v73, v48[63], v75);
      *(void *)(v0 + 1040) = v76;
      if (v76)
      {
        long long v77 = v76;
        type metadata accessor for PaperKitPDFPage(0);
        id v78 = swift_dynamicCastClass();
        if (v78)
        {
          uint64_t v79 = v78;
          uint64_t v80 = *(void *)(v0 + 392);
          uint64_t v81 = *(void *)(v0 + 376);
          uint64_t v82 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
          SharedTagged_3.subscript.getter();
          uint64_t v83 = *(void *)(v0 + 200);
          uint64_t v84 = *(void *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v83);
          *(void *)(v0 + 368) = v81;
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v80, v0 + 16, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
          uint64_t v91 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v84 + 144) + **(int **)(v84 + 144));
          uint64_t v85 = (void *)swift_task_alloc();
          *(void *)(v0 + 1048) = v85;
          *uint64_t v85 = v0;
          v85[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
          uint64_t v86 = *(void *)(v0 + 880);
          uint64_t v87 = *(void *)(v0 + 384);
          return v91(v79, v0 + 368, v87, v0 + 16, v86, v82, v83, v84);
        }
      }
      (*(void (**)(void, void))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 672), *(void *)(v0 + 656));
    }
  }
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_42:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  char v94 = *(void *)(v0 + 968);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v89 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v89(v94);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized PaperDocument.newPDFDocument<A>(use:in:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char **v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  uint64_t v1 = *(void *)(v0 + 672);
  uint64_t v2 = *(void *)(v0 + 664);
  uint64_t v3 = *(void *)(v0 + 656);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  uint64_t v4 = &selRef_isImageAnalysisEnabled;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  while (1)
  {
    uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
    uint64_t v6 = *(void *)(v0 + 712);
    uint64_t v7 = *(void *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v5(v6, 1, v7) == 1)
    {
      uint64_t v8 = *(void *)(v0 + 432);
      uint64_t v10 = *(void *)(v0 + 408);
      uint64_t v9 = *(void *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, 1, 1, v10);
    }
    else
    {
      uint64_t v11 = v4;
      uint64_t v12 = *(int *)(v0 + 1056);
      uint64_t v13 = *(void *)(v0 + 680);
      uint64_t v14 = *(void *)(v0 + 656);
      uint64_t v15 = *(void *)(v0 + 488);
      uint64_t v16 = *(void *)(v0 + 424);
      uint64_t v17 = *(void *)(v0 + 408);
      unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 664) + 32);
      v18(v13, *(void *)(v0 + 712), v14);
      uint64_t v19 = v16 + *(int *)(v17 + 48);
      id v20 = *(void *)(v15 + v12);
      uint64_t result = v18(v19, v13, v14);
      if (__OFADD__(v20, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v22 = *(void *)(v0 + 656);
      uint64_t v23 = *(void **)(v0 + 432);
      uint64_t v25 = *(void *)(v0 + 408);
      uint64_t v24 = *(void *)(v0 + 416);
      *(void *)(*(void *)(v0 + 488) + *(int *)(v0 + 1056)) = v20 + 1;
      uint64_t v26 = (char *)v23 + *(int *)(v25 + 48);
      *uint64_t v23 = v20;
      v18((uint64_t)v26, v19, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v23, 0, 1, v25);
      uint64_t v4 = v11;
    }
    uint64_t v27 = *(void *)(v0 + 440);
    uint64_t v29 = *(void *)(v0 + 408);
    uint64_t v28 = *(void *)(v0 + 416);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 432), v27, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v27, 1, v29) == 1) {
      break;
    }
    uint64_t v30 = *(void **)(v0 + 968);
    uint64_t v31 = *(char **)(v0 + 440);
    uint64_t v32 = *(void *)v31;
    (*(void (**)(void, char *, void))(*(void *)(v0 + 664) + 32))(*(void *)(v0 + 672), &v31[*(int *)(*(void *)(v0 + 408) + 48)], *(void *)(v0 + 656));
    uint64_t v33 = objc_msgSend(v30, v4[63], v32);
    *(void *)(v0 + 1040) = v33;
    if (v33)
    {
      uint64_t v34 = v33;
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v35 = swift_dynamicCastClass();
      if (v35)
      {
        uint64_t v36 = v35;
        uint64_t v37 = *(void *)(v0 + 392);
        uint64_t v38 = *(void *)(v0 + 376);
        double v39 = _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
        SharedTagged_3.subscript.getter();
        uint64_t v40 = *(void *)(v0 + 200);
        uint64_t v41 = *(void *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v40);
        *(void *)(v0 + 368) = v38;
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v37, v0 + 16, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
        uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 + 144) + **(int **)(v41 + 144));
        uint64_t v42 = (void *)swift_task_alloc();
        *(void *)(v0 + 1048) = v42;
        *uint64_t v42 = v0;
        v42[1] = specialized PaperDocument.newPDFDocument<A>(use:in:options:);
        uint64_t v43 = *(void *)(v0 + 880);
        uint64_t v44 = *(void *)(v0 + 384);
        return v46(v36, v0 + 368, v44, v0 + 16, v43, v39, v40, v41);
      }
    }
    (*(void (**)(void, void))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 672), *(void *)(v0 + 656));
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v47 = *(void *)(v0 + 968);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v45(v47);
}

void specialized closure #1 in PKDrawingStruct.bounds<A>(in:)(CGFloat *a1@<X0>, objc_class *a2@<X2>, CGRect *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat v10 = *a1;
  CGFloat v11 = a1[1];
  CGFloat v12 = a1[2];
  CGFloat v13 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  type metadata accessor for Paper();
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Ref.subscript.getter();
  double v14 = specialized CRRegister<>.bounds(in:)(a2, (uint64_t)v9);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v22.origin.CGFloat x = v10;
  v22.origin.CGFloat y = v11;
  v22.size.CGFloat width = v12;
  v22.size.CGFloat height = v13;
  v23.origin.CGFloat x = v14;
  v23.origin.CGFloat y = v16;
  v23.size.CGFloat width = v18;
  v23.size.CGFloat height = v20;
  *a3 = CGRectUnion(v22, v23);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  double v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  uint64_t v21;
  CGRect v22;
  CGRect v23;

  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat v10 = *a1;
  CGFloat v11 = a1[1];
  CGFloat v12 = a1[2];
  CGFloat v13 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  type metadata accessor for PKDrawingStruct();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Ref.subscript.getter();
  double v14 = specialized CRRegister<>.bounds(in:)(a2, (uint64_t)v9);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v22.origin.CGFloat x = v10;
  v22.origin.CGFloat y = v11;
  v22.size.CGFloat width = v12;
  v22.size.CGFloat height = v13;
  v23.origin.CGFloat x = v14;
  v23.origin.CGFloat y = v16;
  v23.size.CGFloat width = v18;
  v23.size.CGFloat height = v20;
  *a3 = CGRectUnion(v22, v23);
}

uint64_t specialized static CRDataStoreBundle<>.paperBundle(_:sync:at:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v10 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a2, (uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v12 = type metadata accessor for CRCodableVersion();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_20C835740;
  unint64_t v17 = v16 + v15;
  CGFloat v18 = *(void (**)(unint64_t, void, uint64_t))(v13 + 104);
  v18(v17, *MEMORY[0x263F32EB0], v12);
  v18(v17 + v14, *MEMORY[0x263F32EB8], v12);
  uint64_t v19 = one-time initialization token for allReadableFileFormatVersions;
  id v20 = a1;
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v21 = one-time initialization token for allFileFormatVersions;
  swift_bridgeObjectRetain();
  if (v21 != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  return CRDataStoreBundle.init(_:sync:at:allowedEncodings:allowedAppFormats:writableAppFormats:)();
}

uint64_t sub_20C423F6C()
{
  return CRRegister.wrappedValue.getter();
}

void partial apply for specialized closure #1 in PKDrawingStruct.bounds<A>(in:)(CGFloat *a1@<X0>, CGRect *a2@<X8>)
{
  specialized closure #1 in PKDrawingStruct.bounds<A>(in:)(a1, *(objc_class **)(v2 + 16), a2);
}

{
  uint64_t v2;

  specialized closure #1 in PKDrawingStruct.bounds<A>(in:)(a1, *(objc_class **)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in Capsule<>.transformContents(_:)(uint64_t a1)
{
  return closure #1 in Capsule<>.transformContents(_:)(a1, *(CGFloat **)(v1 + 16));
}

uint64_t partial apply for closure #1 in static CRDataStoreBundle<>.copyPaper(from:fromContext:to:toContext:forNewAttachment:)()
{
  return closure #1 in static CRDataStoreBundle<>.copyPaper(from:fromContext:to:toContext:forNewAttachment:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in Capsule<>.init(_:fromPDF:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Capsule<>.init(_:fromPDF:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type PaperKitCodingError and conformance PaperKitCodingError()
{
  unint64_t result = lazy protocol witness table cache variable for type PaperKitCodingError and conformance PaperKitCodingError;
  if (!lazy protocol witness table cache variable for type PaperKitCodingError and conformance PaperKitCodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperKitCodingError and conformance PaperKitCodingError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PaperKitCodingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C424158);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaperKitCodingError()
{
  return &type metadata for PaperKitCodingError;
}

uint64_t sub_20C424190()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t outlined assign with take of WeakTagged_3<TaggedPaperPage>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of PDFPageID(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s8PaperKit0A0VWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(uint64_t a1)
{
  return partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1);
}

uint64_t closure #1 in PaperKitPDFDocument.subscript.getterpartial apply@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in PaperKitPDFDocument.subscript.getter(a1);
}

uint64_t FormContentType.init(_:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if ((unint64_t)(result - 2) > 0x47) {
    *a2 = 1;
  }
  else {
    *a2 = byte_20C83907A[result - 2];
  }
  return result;
}

PaperKit::FormContentType __swiftcall FormContentType.init(_:)(__C::AFTextContentType a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_15:

    char v21 = 1;
    goto LABEL_16;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
LABEL_18:

    char v21 = 2;
    goto LABEL_16;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_20:

    char v21 = 3;
    goto LABEL_16;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22) {
    goto LABEL_20;
  }
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
LABEL_25:

    char v21 = 4;
    goto LABEL_16;
  }
  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v27) {
    goto LABEL_25;
  }
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;
  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v30 == v31)
  {
    swift_bridgeObjectRelease_n();
LABEL_30:

    char v21 = 5;
    goto LABEL_16;
  }
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v32) {
    goto LABEL_30;
  }
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;
  if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v35 == v36)
  {
    swift_bridgeObjectRelease_n();
LABEL_35:

    char v21 = 6;
    goto LABEL_16;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v37) {
    goto LABEL_35;
  }
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;
  if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v40 == v41)
  {
    swift_bridgeObjectRelease_n();
LABEL_40:

    char v21 = 7;
    goto LABEL_16;
  }
  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v42) {
    goto LABEL_40;
  }
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;
  if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v45 == v46)
  {
    swift_bridgeObjectRelease_n();
LABEL_45:

    char v21 = 8;
    goto LABEL_16;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v47) {
    goto LABEL_45;
  }
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v50 = v49;
  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v50 == v51)
  {
    swift_bridgeObjectRelease_n();
LABEL_50:

    char v21 = 9;
    goto LABEL_16;
  }
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v52) {
    goto LABEL_50;
  }
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;
  if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v55 == v56)
  {
    swift_bridgeObjectRelease_n();
LABEL_55:

    char v21 = 10;
    goto LABEL_16;
  }
  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_55;
  }
  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v60 = v59;
  if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v60 == v61)
  {
    swift_bridgeObjectRelease_n();
LABEL_60:

    char v21 = 11;
    goto LABEL_16;
  }
  char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v62) {
    goto LABEL_60;
  }
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v65 = v64;
  if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v65 == v66)
  {
    swift_bridgeObjectRelease_n();
LABEL_65:

    char v21 = 12;
    goto LABEL_16;
  }
  char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v67) {
    goto LABEL_65;
  }
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v70 = v69;
  if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v70 == v71)
  {
    swift_bridgeObjectRelease_n();
LABEL_70:

    char v21 = 13;
    goto LABEL_16;
  }
  char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v72) {
    goto LABEL_70;
  }
  uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v75 = v74;
  if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v75 == v76)
  {
    swift_bridgeObjectRelease_n();
LABEL_75:

    char v21 = 14;
    goto LABEL_16;
  }
  char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v77) {
    goto LABEL_75;
  }
  uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v80 = v79;
  if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v80 == v81)
  {
    swift_bridgeObjectRelease_n();
LABEL_80:

    char v21 = 15;
    goto LABEL_16;
  }
  char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v82) {
    goto LABEL_80;
  }
  uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v85 = v84;
  if (v83 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v85 == v86)
  {
    swift_bridgeObjectRelease_n();
LABEL_85:

    char v21 = 16;
    goto LABEL_16;
  }
  char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v87) {
    goto LABEL_85;
  }
  uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v90 = v89;
  if (v88 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v90 == v91)
  {
    swift_bridgeObjectRelease_n();
LABEL_90:

    char v21 = 17;
    goto LABEL_16;
  }
  char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v92) {
    goto LABEL_90;
  }
  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v95 = v94;
  if (v93 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v95 == v96)
  {
    swift_bridgeObjectRelease_n();
LABEL_95:

    char v21 = 18;
    goto LABEL_16;
  }
  char v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v97) {
    goto LABEL_95;
  }
  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v100 = v99;
  if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v100 == v101)
  {
    swift_bridgeObjectRelease_n();
LABEL_100:

    char v21 = 19;
    goto LABEL_16;
  }
  char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v102) {
    goto LABEL_100;
  }
  uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v105 = v104;
  if (v103 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v105 == v106)
  {
    swift_bridgeObjectRelease_n();
LABEL_105:

    char v21 = 20;
    goto LABEL_16;
  }
  char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v107) {
    goto LABEL_105;
  }
  uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v110 = v109;
  if (v108 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v110 == v111)
  {
    swift_bridgeObjectRelease_n();
LABEL_110:

    char v21 = 21;
    goto LABEL_16;
  }
  char v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v112) {
    goto LABEL_110;
  }
  uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v115 = v114;
  if (v113 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v115 == v116)
  {
    swift_bridgeObjectRelease_n();
LABEL_115:

    char v21 = 22;
    goto LABEL_16;
  }
  char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v117) {
    goto LABEL_115;
  }
  uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v120 = v119;
  if (v118 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v120 == v121)
  {
    swift_bridgeObjectRelease_n();
LABEL_120:

    char v21 = 23;
    goto LABEL_16;
  }
  char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v122) {
    goto LABEL_120;
  }
  uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v125 = v124;
  if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v125 == v126)
  {
    swift_bridgeObjectRelease_n();
LABEL_125:

    char v21 = 24;
    goto LABEL_16;
  }
  char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v127) {
    goto LABEL_125;
  }
  uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v130 = v129;
  if (v128 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v130 == v131)
  {
    swift_bridgeObjectRelease_n();
LABEL_130:

    char v21 = 25;
    goto LABEL_16;
  }
  char v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v132) {
    goto LABEL_130;
  }
  uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v135 = v134;
  if (v133 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v135 == v136)
  {
    swift_bridgeObjectRelease_n();
LABEL_135:

    char v21 = 26;
    goto LABEL_16;
  }
  char v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v137) {
    goto LABEL_135;
  }
  uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v140 = v139;
  if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v140 == v141)
  {
    swift_bridgeObjectRelease_n();
LABEL_140:

    char v21 = 27;
    goto LABEL_16;
  }
  char v142 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v142) {
    goto LABEL_140;
  }
  uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v145 = v144;
  if (v143 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v145 == v146)
  {
    swift_bridgeObjectRelease_n();
LABEL_145:

    char v21 = 28;
    goto LABEL_16;
  }
  char v147 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v147) {
    goto LABEL_145;
  }
  uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v150 = v149;
  if (v148 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v150 == v151)
  {
    swift_bridgeObjectRelease_n();
LABEL_150:

    char v21 = 29;
    goto LABEL_16;
  }
  char v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v152) {
    goto LABEL_150;
  }
  uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v155 = v154;
  if (v153 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v155 == v156)
  {
    swift_bridgeObjectRelease_n();
LABEL_155:

    char v21 = 30;
    goto LABEL_16;
  }
  char v157 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v157) {
    goto LABEL_155;
  }
  uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v160 = v159;
  if (v158 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v160 == v161)
  {
    swift_bridgeObjectRelease_n();
LABEL_160:

    char v21 = 31;
    goto LABEL_16;
  }
  char v162 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v162) {
    goto LABEL_160;
  }
  uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v165 = v164;
  if (v163 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v165 == v166)
  {
    swift_bridgeObjectRelease_n();
LABEL_165:

    char v21 = 32;
    goto LABEL_16;
  }
  char v167 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v167) {
    goto LABEL_165;
  }
  uint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v170 = v169;
  if (v168 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v170 == v171)
  {
    swift_bridgeObjectRelease_n();
LABEL_170:

    char v21 = 33;
    goto LABEL_16;
  }
  char v172 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v172) {
    goto LABEL_170;
  }
  uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v175 = v174;
  if (v173 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v175 == v176)
  {
    swift_bridgeObjectRelease_n();
LABEL_175:

    char v21 = 37;
    goto LABEL_16;
  }
  char v177 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v177) {
    goto LABEL_175;
  }
  uint64_t v178 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v180 = v179;
  if (v178 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v180 == v181)
  {
    swift_bridgeObjectRelease_n();
LABEL_180:

    char v21 = 38;
    goto LABEL_16;
  }
  char v182 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v182) {
    goto LABEL_180;
  }
  uint64_t v183 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v185 = v184;
  if (v183 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v185 == v186)
  {
    swift_bridgeObjectRelease_n();
LABEL_185:

    char v21 = 39;
    goto LABEL_16;
  }
  char v187 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v187) {
    goto LABEL_185;
  }
  uint64_t v188 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v190 = v189;
  if (v188 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v190 == v191)
  {
    swift_bridgeObjectRelease_n();
LABEL_190:

    char v21 = 40;
    goto LABEL_16;
  }
  char v192 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v192) {
    goto LABEL_190;
  }
  uint64_t v193 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v195 = v194;
  if (v193 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v195 == v196)
  {
    swift_bridgeObjectRelease_n();
LABEL_195:

    char v21 = 42;
    goto LABEL_16;
  }
  char v197 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v197) {
    goto LABEL_195;
  }
  uint64_t v198 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v200 = v199;
  if (v198 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v200 == v201)
  {
    swift_bridgeObjectRelease_n();
LABEL_200:

    char v21 = 43;
    goto LABEL_16;
  }
  char v202 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v202) {
    goto LABEL_200;
  }
  uint64_t v203 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v205 = v204;
  if (v203 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v205 == v206)
  {
    swift_bridgeObjectRelease_n();
LABEL_205:

    char v21 = 44;
    goto LABEL_16;
  }
  char v207 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v207) {
    goto LABEL_205;
  }
  uint64_t v208 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v210 = v209;
  if (v208 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v210 == v211)
  {
    swift_bridgeObjectRelease_n();
LABEL_210:

    char v21 = 45;
    goto LABEL_16;
  }
  char v212 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v212) {
    goto LABEL_210;
  }
  uint64_t v213 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v215 = v214;
  char v21 = 46;
  if (v213 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v215 != v216)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      char v21 = 46;
    }
    else {
      char v21 = 1;
    }
  }
  NSString v217 = a1._rawValue;

  swift_bridgeObjectRelease();
  PaperKit::FormContentType result = swift_bridgeObjectRelease();
LABEL_16:
  *uint64_t v3 = v21;
  return result;
}

uint64_t FormContentType.crFormContentType.getter()
{
  return qword_20C8390C8[*v0];
}

PaperKit::FormContentType_optional __swiftcall FormContentType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 0;
  char v3 = 48;
  switch(rawValue)
  {
    case 0:
      goto LABEL_50;
    case 1:
      char v2 = 1;
      goto LABEL_50;
    case 2:
      char v2 = 2;
      goto LABEL_50;
    case 3:
      char v2 = 3;
      goto LABEL_50;
    case 4:
      char v2 = 4;
      goto LABEL_50;
    case 5:
      char v2 = 5;
      goto LABEL_50;
    case 6:
      char v2 = 6;
      goto LABEL_50;
    case 7:
      char v2 = 7;
      goto LABEL_50;
    case 8:
      char v2 = 8;
      goto LABEL_50;
    case 9:
      char v2 = 9;
      goto LABEL_50;
    case 10:
      char v2 = 10;
      goto LABEL_50;
    case 11:
      char v2 = 11;
      goto LABEL_50;
    case 12:
      char v2 = 12;
      goto LABEL_50;
    case 13:
      char v2 = 13;
      goto LABEL_50;
    case 14:
      char v2 = 14;
      goto LABEL_50;
    case 15:
      char v2 = 15;
      goto LABEL_50;
    case 16:
      char v2 = 16;
      goto LABEL_50;
    case 17:
      char v2 = 17;
      goto LABEL_50;
    case 18:
      char v2 = 18;
      goto LABEL_50;
    case 19:
      char v2 = 19;
      goto LABEL_50;
    case 20:
      char v2 = 20;
      goto LABEL_50;
    case 21:
      char v2 = 21;
      goto LABEL_50;
    case 22:
      char v2 = 22;
      goto LABEL_50;
    case 23:
      char v2 = 23;
      goto LABEL_50;
    case 24:
      char v2 = 24;
      goto LABEL_50;
    case 25:
      char v2 = 25;
      goto LABEL_50;
    case 26:
      char v2 = 26;
      goto LABEL_50;
    case 27:
      char v2 = 27;
      goto LABEL_50;
    case 28:
      char v2 = 28;
      goto LABEL_50;
    case 29:
      char v2 = 29;
      goto LABEL_50;
    case 30:
      char v2 = 30;
      goto LABEL_50;
    case 31:
      char v2 = 31;
      goto LABEL_50;
    case 32:
      char v2 = 32;
      goto LABEL_50;
    case 33:
      char v2 = 33;
      goto LABEL_50;
    case 34:
      char v2 = 34;
      goto LABEL_50;
    case 35:
      char v2 = 35;
      goto LABEL_50;
    case 36:
      char v2 = 36;
      goto LABEL_50;
    case 37:
      char v2 = 37;
      goto LABEL_50;
    case 38:
      char v2 = 38;
      goto LABEL_50;
    case 39:
      char v2 = 39;
      goto LABEL_50;
    case 40:
      char v2 = 40;
      goto LABEL_50;
    case 41:
      char v2 = 41;
      goto LABEL_50;
    case 42:
      char v2 = 42;
      goto LABEL_50;
    case 43:
      char v2 = 43;
      goto LABEL_50;
    case 44:
      char v2 = 44;
      goto LABEL_50;
    case 45:
      char v2 = 45;
      goto LABEL_50;
    case 46:
      char v2 = 46;
      goto LABEL_50;
    case 47:
      char v2 = 47;
LABEL_50:
      char v3 = v2;
      goto LABEL_51;
    case 48:
LABEL_51:
      *uint64_t v1 = v3;
      break;
    case 49:
      *uint64_t v1 = 49;
      break;
    case 50:
      *uint64_t v1 = 50;
      break;
    case 51:
      *uint64_t v1 = 51;
      break;
    case 52:
      *uint64_t v1 = 52;
      break;
    case 53:
      *uint64_t v1 = 53;
      break;
    case 54:
      *uint64_t v1 = 54;
      break;
    case 55:
      *uint64_t v1 = 55;
      break;
    case 56:
      *uint64_t v1 = 56;
      break;
    case 57:
      *uint64_t v1 = 57;
      break;
    case 58:
      *uint64_t v1 = 58;
      break;
    case 59:
      *uint64_t v1 = 59;
      break;
    case 60:
      *uint64_t v1 = 60;
      break;
    case 61:
      *uint64_t v1 = 61;
      break;
    case 62:
      *uint64_t v1 = 62;
      break;
    case 63:
      *uint64_t v1 = 63;
      break;
    case 64:
      *uint64_t v1 = 64;
      break;
    case 65:
      *uint64_t v1 = 65;
      break;
    default:
      *uint64_t v1 = 66;
      break;
  }
  return (PaperKit::FormContentType_optional)rawValue;
}

uint64_t FormContentType.rawValue.getter()
{
  return *v0;
}

unint64_t lazy protocol witness table accessor for type FormContentType and conformance FormContentType()
{
  unint64_t result = lazy protocol witness table cache variable for type FormContentType and conformance FormContentType;
  if (!lazy protocol witness table cache variable for type FormContentType and conformance FormContentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentType and conformance FormContentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormContentType and conformance FormContentType;
  if (!lazy protocol witness table cache variable for type FormContentType and conformance FormContentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentType and conformance FormContentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormContentType and conformance FormContentType;
  if (!lazy protocol witness table cache variable for type FormContentType and conformance FormContentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentType and conformance FormContentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormContentType and conformance FormContentType;
  if (!lazy protocol witness table cache variable for type FormContentType and conformance FormContentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentType and conformance FormContentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormContentType and conformance FormContentType;
  if (!lazy protocol witness table cache variable for type FormContentType and conformance FormContentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentType and conformance FormContentType);
  }
  return result;
}

PaperKit::FormContentType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance FormContentType(Swift::Int *a1)
{
  return FormContentType.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FormContentType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FormContentType()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance FormContentType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  uint64_t v3 = MEMORY[0x263F33170];
  return MEMORY[0x270F180A8](a1, v2, v3);
}

uint64_t protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance FormContentType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  uint64_t v3 = MEMORY[0x263F33170];
  return MEMORY[0x270F180A0](a1, v2, v3);
}

void protocol witness for CRType.copy(renamingReferences:) in conformance FormContentType(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance FormContentType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  unint64_t v7 = lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance FormContentType()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance FormContentType()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance FormContentType(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  unint64_t v3 = lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  uint64_t v4 = MEMORY[0x263F33180];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

uint64_t getEnumTagSinglePayload for FormContentType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xBF) {
    goto LABEL_17;
  }
  if (a2 + 65 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 65) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 65;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 65;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 65;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x42;
  int v8 = v6 - 66;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormContentType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 65) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xBF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xBE)
  {
    unsigned int v6 = ((a2 - 191) >> 8) + 1;
    *unint64_t result = a2 + 65;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C4261C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 65;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormContentType()
{
  return &type metadata for FormContentType;
}

uint64_t specialized FormContentType.uiTextContentType.getter()
{
  return **((void **)&unk_2640D4728 + *v0);
}

id specialized CanvasView.toolPickerObserver.getter()
{
  uint64_t v1 = direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver;
  int v2 = *(void **)(v0 + direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver);
  if (v2)
  {
    id v3 = *(id *)(v0 + direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver);
  }
  else
  {
    unsigned int v4 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasViewToolPickerObserver<Image>);
    id v5 = objc_allocWithZone(v4);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v10.receiver = v5;
    v10.super_class = v4;
    id v6 = objc_msgSendSuper2(&v10, sel_init);
    BOOL v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    int v2 = 0;
  }
  id v8 = v2;
  return v3;
}

void specialized CanvasViewToolPickerObserver.updateUI(toolPicker:)(void *a1)
{
  uint64_t v3 = type metadata accessor for PKInk();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  BOOL v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x210550400](v1 + direct field offset for CanvasViewToolPickerObserver.canvasView, v5);
  if (v8)
  {
    char v9 = (char *)v8;
    if ((objc_msgSend(a1, sel__isHandwritingToolSelected) & 1) == 0)
    {
      objc_super v10 = v9;
      id v11 = objc_msgSend(a1, sel_selectedToolItem);
      PKToolPickerItem.ink.getter((uint64_t)v7);

      PKInk.tool.getter(v16);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      specialized Canvas.tool.setter(v16);
    }
    uint64_t v12 = *(void **)&v9[direct field offset for CanvasView.canvasTiledView];
    if (v12)
    {
      id v13 = v12;
      if (objc_msgSend(a1, sel_isVisible)) {
        id v14 = objc_msgSend(a1, sel_isRulerActive);
      }
      else {
        id v14 = 0;
      }
      objc_msgSend(v13, sel_setRulerEnabled_, v14);
    }
    else
    {
      __break(1u);
    }
  }
}

void specialized CanvasView.contentInset()()
{
  objc_msgSend(v0, sel_bounds);
  CGFloat x = v12.origin.x;
  CGFloat y = v12.origin.y;
  CGFloat width = v12.size.width;
  CGFloat height = v12.size.height;
  CGRectGetWidth(v12);
  double v5 = *(void **)&v0[direct field offset for CanvasView.canvasScrollView];
  if (!v5)
  {
    __break(1u);
    return;
  }
  objc_msgSend(*(id *)&v0[direct field offset for CanvasView.canvasScrollView], sel_contentSize);
  v13.origin.CGFloat x = x;
  v13.origin.CGFloat y = y;
  v13.size.CGFloat width = width;
  v13.size.CGFloat height = height;
  CGRectGetHeight(v13);
  objc_msgSend(v5, sel_contentSize);
  CGFloat v6 = x;
  BOOL v7 = &v0[direct field offset for CanvasView.snappedContentInsets];
  if (v0[direct field offset for CanvasView.snappedContentInsets])
  {
    CGFloat v8 = x;
    if (v7[1]) {
      return;
    }
    goto LABEL_4;
  }
  CGFloat v8 = x;
  CGFloat v9 = y;
  CGFloat v10 = width;
  CGFloat v11 = height;
  CGRectGetWidth(*(CGRect *)&v6);
  if (one-time initialization token for unsnappedScrollInset != -1) {
    swift_once();
  }
  if ((v7[1] & 1) == 0)
  {
LABEL_4:
    v14.origin.CGFloat x = v8;
    v14.origin.CGFloat y = y;
    v14.size.CGFloat width = width;
    v14.size.CGFloat height = height;
    CGRectGetHeight(v14);
    if (one-time initialization token for unsnappedScrollInset != -1) {
      swift_once();
    }
  }
}

void specialized CanvasView.updateContentInsets()()
{
  objc_msgSend(v0, sel_bounds);
  double Width = CGRectGetWidth(v50);
  int v2 = *(void **)&v0[direct field offset for CanvasView.canvasScrollView];
  if (!v2)
  {
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  double v3 = Width;
  objc_msgSend(*(id *)&v0[direct field offset for CanvasView.canvasScrollView], sel_contentSize);
  double v5 = v4;
  objc_msgSend(v0, sel_bounds);
  double Height = CGRectGetHeight(v51);
  objc_msgSend(v2, sel_contentSize);
  if (v0[direct field offset for CanvasView.allowsContentSnapping] != 1) {
    goto LABEL_30;
  }
  uint64_t v8 = direct field offset for CanvasView.trackingPanGestureRecognizer;
  CGFloat v9 = *(void **)&v0[direct field offset for CanvasView.trackingPanGestureRecognizer];
  if (!v9) {
    goto LABEL_43;
  }
  double v10 = v7;
  objc_msgSend(v9, sel_translationInView_, v0);
  CGRect v13 = *(void **)&v0[v8];
  if (!v13)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  double v14 = v11;
  double v15 = v12;
  if ((uint64_t)objc_msgSend(v13, sel_numberOfTouches) >= 2)
  {
    double v17 = fabs(v14);
    if (one-time initialization token for translationThresholdToUnsnapCentering != -1) {
      swift_once();
    }
    uint64_t v16 = static UIConstants.translationThresholdToUnsnapCentering;
    if (*(double *)&static UIConstants.translationThresholdToUnsnapCentering < v17)
    {
      char v18 = 0;
LABEL_16:
      v0[direct field offset for CanvasView.snappedContentInsets] = v18;
      goto LABEL_17;
    }
  }
  double v19 = v3 - v5;
  objc_msgSend(v2, sel_contentOffset, *(double *)&v16);
  double v21 = 0.0;
  if (v19 >= 0.0) {
    double v21 = v19 * 0.5;
  }
  double v22 = fabs(v21 + v20);
  if (one-time initialization token for translationThresholdToResnapCentering != -1) {
    swift_once();
  }
  uint64_t v16 = static UIConstants.translationThresholdToResnapCentering;
  if (v22 < *(double *)&static UIConstants.translationThresholdToResnapCentering)
  {
    char v18 = 1;
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v23 = *(void **)&v0[v8];
  if (!v23)
  {
LABEL_45:
    __break(1u);
    return;
  }
  if ((uint64_t)objc_msgSend(v23, sel_numberOfTouches, *(double *)&v16) < 2) {
    goto LABEL_23;
  }
  double v25 = fabs(v15);
  if (one-time initialization token for translationThresholdToUnsnapCentering != -1) {
    swift_once();
  }
  double v24 = *(double *)&static UIConstants.translationThresholdToUnsnapCentering;
  if (*(double *)&static UIConstants.translationThresholdToUnsnapCentering >= v25)
  {
LABEL_23:
    double v27 = Height - v10;
    objc_msgSend(v2, sel_contentOffset, v24);
    double v29 = 0.0;
    if (v27 >= 0.0) {
      double v29 = v27 * 0.5;
    }
    double v30 = fabs(v29 + v28);
    if (one-time initialization token for translationThresholdToResnapCentering != -1) {
      swift_once();
    }
    if (v30 >= *(double *)&static UIConstants.translationThresholdToResnapCentering) {
      goto LABEL_30;
    }
    char v26 = 1;
  }
  else
  {
    char v26 = 0;
  }
  v0[direct field offset for CanvasView.snappedContentInsets + 1] = v26;
LABEL_30:
  specialized CanvasView.contentInset()();
  double v32 = v31;
  double v34 = v33;
  double v36 = v35;
  double v38 = v37;
  objc_msgSend(v2, sel_contentInset);
  BOOL v44 = vabdd_f64(v34, v41) < 1.5;
  double v43 = vabdd_f64(v38, v42);
  BOOL v44 = v44 && v43 < 1.5;
  double v45 = vabdd_f64(v32, v39);
  BOOL v46 = v44 && v45 < 1.5;
  double v47 = vabdd_f64(v36, v40);
  if (!v46 || v47 >= 1.5)
  {
    uint64_t v49 = direct field offset for CanvasView.adjustingInsets;
    v0[direct field offset for CanvasView.adjustingInsets] = 1;
    objc_msgSend(v2, sel_setContentInset_, v32, v34, v36, v38);
    v0[v49] = 0;
  }
}

double key path getter for Image.description : Image@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Image.description : Image()
{
  return CRRegister.wrappedValue.setter();
}

void PPKMarkupContainerViewControllerError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static PPKMarkupContainerViewControllerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int PPKMarkupContainerViewControllerError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t MUUseOriginalFileMetadata.getter()
{
  return 0xD000000000000019;
}

id MarkupContainerViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  double v4 = v3;
  if (a2)
  {
    CGFloat v6 = (void *)MEMORY[0x21054D080]();
    swift_bridgeObjectRelease();
  }
  else
  {
    CGFloat v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id MarkupContainerViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  double v4 = v3;
  uint64_t v8 = OBJC_IVAR___PPKMarkupContainerViewController_context;
  type metadata accessor for CRContext();
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  CGFloat v9 = v3;
  uint64_t v10 = MEMORY[0x21054C990](0, v22);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(void *)&v4[v8] = v10;
  uint64_t v11 = OBJC_IVAR___PPKMarkupContainerViewController_fileCoordinator;
  *(void *)&v9[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08830]), sel_init);
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView] = 0;
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController] = 0;
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController] = 0;
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_analysisDelegate] = 0;
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_imageCancellable] = 0;
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_pdfCancellable] = 0;
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_viewIsTransitioningBetweenSizes] = 0;
  double v12 = &v9[OBJC_IVAR___PPKMarkupContainerViewController_originalAsset];
  uint64_t v13 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_doubleTapGestureRecognizer] = 0;
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_loadContentTask] = 0;
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue] = 0;
  double v14 = &v9[OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets];
  long long v15 = *(_OWORD *)(MEMORY[0x263F834E8] + 16);
  *(_OWORD *)double v14 = *MEMORY[0x263F834E8];
  *((_OWORD *)v14 + 1) = v15;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled] = 1;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_editingMode] = 0;
  swift_unknownObjectWeakInit();
  v9[OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata] = 1;
  uint64_t v16 = &v9[OBJC_IVAR___PPKMarkupContainerViewController_previousViewSize];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden] = 1;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_showBannerView] = 0;
  *(void *)&v9[OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor] = 0;
  v9[OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup] = 0;

  if (a2)
  {
    double v17 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    double v17 = 0;
  }
  v21.receiver = v9;
  v21.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  id v18 = objc_msgSendSuper2(&v21, sel_initWithNibName_bundle_, v17, a3);

  id v19 = v18;
  MarkupContainerViewController.registerForNotifications()();

  return v19;
}

uint64_t type metadata accessor for MarkupContainerViewController()
{
  uint64_t result = type metadata singleton initialization cache for MarkupContainerViewController;
  if (!type metadata singleton initialization cache for MarkupContainerViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id MarkupContainerViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id MarkupContainerViewController.__deallocating_deinit()
{
  Swift::UInt v1 = *(void **)&v0[OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue];
  if (v1) {
    objc_msgSend(v1, sel_cancelAllOperations);
  }
  if (*(void *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_loadContentTask])
  {
    uint64_t v2 = swift_retain();
    MEMORY[0x21054D560](v2, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

Swift::Void __swiftcall MarkupContainerViewController.registerForNotifications()()
{
  Swift::UInt v1 = self;
  id v2 = objc_msgSend(v1, sel_defaultCenter);
  objc_msgSend(v2, sel_addObserver_selector_name_object_, v0, sel_pdfViewScaleChanged_, *MEMORY[0x263F148D8], 0);

  id v3 = objc_msgSend(v1, sel_defaultCenter);
  objc_msgSend(v3, sel_addObserver_selector_name_object_, v0, sel_didBecomeActive_, *MEMORY[0x263F83318], 0);

  id v4 = objc_msgSend(v1, sel_defaultCenter);
  objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_handleSqueezeInteractionDidChangePaletteViewVisibilityNotification_, *MEMORY[0x263F14CD0], 0);
}

double MarkupContainerViewController.minimumContentInsets.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets;
  swift_beginAccess();
  return *(double *)v1;
}

void MarkupContainerViewController.minimumContentInsets.setter(double a1, double a2, double a3, double a4)
{
  CGFloat v9 = (double *)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets);
  swift_beginAccess();
  *CGFloat v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  uint64_t v10 = *(void *)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v10)
  {
    uint64_t v11 = (void **)(v10 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    double v12 = (char *)*v11;
    if (*v11)
    {
      uint64_t v13 = (double *)&v12[direct field offset for CanvasView.minimumContentInsets];
      *uint64_t v13 = a1;
      v13[1] = a2;
      _OWORD v13[2] = a3;
      v13[3] = a4;
      double v14 = v12;
      specialized CanvasView.updateContentInsets()();
    }
  }
}

void (*MarkupContainerViewController.minimumContentInsets.modify(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return MarkupContainerViewController.minimumContentInsets.modify;
}

void MarkupContainerViewController.minimumContentInsets.modify(void **a1, char a2)
{
  id v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(v3[3] + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v4)
    {
      double v5 = (void **)(v4 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      CGFloat v6 = (char *)*v5;
      if (*v5)
      {
        id v7 = (_OWORD *)(v3[3] + v3[4]);
        uint64_t v8 = &v6[direct field offset for CanvasView.minimumContentInsets];
        long long v9 = v7[1];
        *(_OWORD *)uint64_t v8 = *v7;
        *((_OWORD *)v8 + 1) = v9;
        uint64_t v10 = v6;
        specialized CanvasView.updateContentInsets()();
      }
    }
  }
  free(v3);
}

Swift::Void __swiftcall MarkupContainerViewController.updateFirstResponderIfNecessary()()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  if (!v1
    || (id v2 = (void *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView),
        swift_beginAccess(),
        !*v2)
    || (id v3 = (void **)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker),
        swift_beginAccess(),
        (uint64_t v4 = *v3) == 0))
  {
    uint64_t v5 = *(void *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
    if (!v5) {
      return;
    }
    uint64_t v4 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker);
  }
  id v6 = v4;
  id v7 = &v0[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled];
  swift_beginAccess();
  if (*v7 == 1 && (objc_msgSend(v6, sel_isVisible) & 1) == 0) {
    objc_msgSend(v0, sel_becomeFirstResponder);
  }
}

uint64_t MarkupContainerViewController.findInteractionEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.findInteractionEnabled.setter(char a1)
{
  return MarkupContainerViewController.findInteractionEnabled.setter(a1, &OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.findInteractionEnabled.didset);
}

uint64_t MarkupContainerViewController.findInteractionEnabled.didset()
{
  uint64_t v1 = v0;
  id v2 = (char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled);
  swift_beginAccess();
  char v3 = *v2;
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 24) = v3;
  if (*(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController)
    || *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController))
  {
    uint64_t v6 = swift_retain_n();
    closure #1 in MarkupContainerViewController.findInteractionEnabled.didset(v6, v3);
  }
  else
  {
    uint64_t v8 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue);
    if (!v8)
    {
      swift_retain();
      goto LABEL_5;
    }
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = partial apply for closure #1 in MarkupContainerViewController.findInteractionEnabled.didset;
    *(void *)(v9 + 24) = v5;
    aBlock[4] = partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_292;
    uint64_t v10 = _Block_copy(aBlock);
    swift_retain_n();
    id v11 = v8;
    swift_retain();
    swift_release();
    objc_msgSend(v11, sel_addOperationWithBlock_, v10);
    _Block_release(v10);
  }
  swift_release();
LABEL_5:
  swift_release();
  return swift_release();
}

void closure #1 in MarkupContainerViewController.findInteractionEnabled.didset(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *(void **)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    id v7 = v6;

    if (v6)
    {
      uint64_t v8 = (id *)&v7[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
      swift_beginAccess();
      id v9 = *v8;
      uint64_t v10 = (char *)*v8;

      if (v9)
      {
        id v11 = (id *)&v10[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
        swift_beginAccess();
        id v12 = *v11;
        id v13 = *v11;

        if (v12)
        {
          objc_msgSend(v13, sel_setFindInteractionEnabled_, a2 & 1);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

uint64_t (*MarkupContainerViewController.findInteractionEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.findInteractionEnabled.modify;
}

uint64_t MarkupContainerViewController.findInteractionEnabled.modify(uint64_t a1, char a2)
{
  return MarkupContainerViewController.findInteractionEnabled.modify(a1, a2, (uint64_t (*)(uint64_t))MarkupContainerViewController.findInteractionEnabled.didset);
}

uint64_t MarkupContainerViewController.isImageAnalysisEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled);
  swift_beginAccess();
  return *v1;
}

void @objc MarkupContainerViewController.findInteractionEnabled.setter(char *a1, uint64_t a2, char a3, void *a4, void (*a5)(void))
{
  uint64_t v8 = &a1[*a4];
  swift_beginAccess();
  *uint64_t v8 = a3;
  id v9 = a1;
  a5();
}

uint64_t MarkupContainerViewController.isImageAnalysisEnabled.setter(char a1)
{
  return MarkupContainerViewController.findInteractionEnabled.setter(a1, &OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.isImageAnalysisEnabled.didset);
}

uint64_t MarkupContainerViewController.findInteractionEnabled.setter(char a1, void *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = (unsigned char *)(v3 + *a2);
  uint64_t v7 = swift_beginAccess();
  *uint64_t v6 = a1;
  return a3(v7);
}

uint64_t MarkupContainerViewController.isImageAnalysisEnabled.didset()
{
  uint64_t v1 = v0;
  id v2 = (char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled);
  swift_beginAccess();
  char v3 = *v2;
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 24) = v3;
  if (*(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController)
    || *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController))
  {
    swift_beginAccess();
    uint64_t v6 = MEMORY[0x210550400](v4 + 16);
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      uint64_t v8 = *(void **)(v6 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
      id v9 = v8;
      swift_retain_n();

      if (v8)
      {
        specialized CanvasElementViewController.isImageAnalysisEnabled.setter(v3);
      }
      goto LABEL_8;
    }
LABEL_9:
    swift_retain();
    goto LABEL_10;
  }
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue);
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = partial apply for closure #1 in MarkupContainerViewController.isImageAnalysisEnabled.didset;
  *(void *)(v11 + 24) = v5;
  aBlock[4] = partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_281;
  id v12 = _Block_copy(aBlock);
  swift_retain_n();
  id v13 = v10;
  swift_retain();
  swift_release();
  objc_msgSend(v13, sel_addOperationWithBlock_, v12);
  _Block_release(v12);

LABEL_8:
  swift_release();
LABEL_10:
  swift_release();
  return swift_release();
}

void closure #1 in MarkupContainerViewController.isImageAnalysisEnabled.didset(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *(void **)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    id v7 = v6;

    if (v6)
    {
      specialized CanvasElementViewController.isImageAnalysisEnabled.setter(a2 & 1);
    }
  }
}

uint64_t (*MarkupContainerViewController.isImageAnalysisEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.isImageAnalysisEnabled.modify;
}

uint64_t MarkupContainerViewController.isImageAnalysisEnabled.modify(uint64_t a1, char a2)
{
  return MarkupContainerViewController.findInteractionEnabled.modify(a1, a2, (uint64_t (*)(uint64_t))MarkupContainerViewController.isImageAnalysisEnabled.didset);
}

uint64_t MarkupContainerViewController.findInteractionEnabled.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

id MarkupContainerViewController.findInteraction.getter()
{
  return MarkupContainerViewController.findInteraction.getter((SEL *)&selRef_findInteraction);
}

uint64_t MarkupContainerViewController.documentIsLocked.getter()
{
  uint64_t v1 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passwordViewController);
  if (v3)
  {
    uint64_t result = (uint64_t)objc_msgSend(v3, sel_view);
    if (!result)
    {
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v5 = (void *)result;
    id v6 = objc_msgSend((id)result, sel_window);

    if (v6)
    {

      return 1;
    }
    uint64_t v2 = *(void *)(v0 + v1);
    if (!v2) {
      return 0;
    }
  }
  uint64_t v8 = (void *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v8) {
    return 0;
  }
  id v9 = (uint64_t *)(*v8 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  uint64_t result = *v9;
  if (*v9)
  {
    id v10 = objc_msgSend((id)result, sel_document);
    if (v10)
    {
      uint64_t v11 = v10;
      id v7 = objc_msgSend(v10, sel_isLocked);

      return (uint64_t)v7;
    }
    return 0;
  }
LABEL_14:
  __break(1u);
  return result;
}

id MarkupContainerViewController.canEncryptDocument.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v2) {
    return 0;
  }
  uint64_t v3 = (id *)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  id result = *v3;
  if (*v3)
  {
    id result = objc_msgSend(result, sel_document);
    if (result)
    {
      uint64_t v5 = result;
      unsigned int v6 = objc_msgSend(result, sel_isEncrypted);

      return (id)(v6 ^ 1);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MarkupContainerViewController.editingMode.didset()
{
  uint64_t v1 = v0;
  char v2 = *(unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode);
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(unsigned char *)(v4 + 24) = v2;
  if (*(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController)
    || *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController))
  {
    uint64_t v5 = swift_retain_n();
    closure #1 in MarkupContainerViewController.editingMode.didset(v5, v2);
  }
  else
  {
    id v7 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue);
    if (!v7)
    {
      swift_retain();
      goto LABEL_5;
    }
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = partial apply for closure #1 in MarkupContainerViewController.editingMode.didset;
    *(void *)(v8 + 24) = v4;
    v11[4] = partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
    v11[5] = v8;
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 1107296256;
    _OWORD v11[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v11[3] = &block_descriptor_194_0;
    id v9 = _Block_copy(v11);
    swift_retain_n();
    id v10 = v7;
    swift_retain();
    swift_release();
    objc_msgSend(v10, sel_addOperationWithBlock_, v9);
    _Block_release(v9);
  }
  swift_release();
LABEL_5:
  swift_release();
  return swift_release();
}

void closure #1 in MarkupContainerViewController.editingMode.didset(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    unsigned int v6 = *(char **)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v6)
    {
      id v7 = &v6[direct field offset for CanvasElementViewController.editingMode];
      swift_beginAccess();
      char v8 = *v7;
      *id v7 = a2;
      id v9 = v6;
      specialized CanvasElementViewController.editingMode.didset(v8);
    }
    id v10 = *(char **)&v5[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
    if (v10)
    {
      uint64_t v11 = &v10[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_editingMode];
      swift_beginAccess();
      *uint64_t v11 = a2;
      id v12 = (void **)&v10[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
      swift_beginAccess();
      id v13 = (char *)*v12;
      if (*v12)
      {
        double v14 = (unsigned __int8 *)&v13[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
        swift_beginAccess();
        unsigned __int8 v15 = *v14;
        *double v14 = a2;
        unsigned __int8 v19 = v15;
        uint64_t v16 = v10;
        double v17 = v13;
        PaperDocumentView.editingMode.didset(&v19);
      }
      else
      {
        id v18 = v10;
      }
      PaperDocumentViewController.updatePlusButton()();
    }
    MarkupContainerViewController.updateBackgroundColor()();
  }
}

uint64_t MarkupContainerViewController.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

uint64_t MarkupContainerViewController.delegate.setter()
{
  return swift_unknownObjectRelease();
}

uint64_t key path setter for MarkupContainerViewController.delegate : MarkupContainerViewController()
{
  return swift_unknownObjectRelease();
}

void (*MarkupContainerViewController.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v5);
  return MarkupContainerViewController.delegate.modify;
}

void MarkupContainerViewController.delegate.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    MarkupContainerViewController.delegate.didset();
  }
  free(v3);
}

uint64_t MarkupContainerViewController.encryptPrivateMetadata.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.encryptPrivateMetadata.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*MarkupContainerViewController.encryptPrivateMetadata.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t MarkupContainerViewController.imageDescription.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v8) {
    return 0;
  }
  id v9 = (void *)(v8 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v9)
  {
    uint64_t v10 = *(void *)(*v9 + direct field offset for Canvas.paperView)
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(*v9 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v10, v1);
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, v11, 1, v1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Capsule<Image>?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Capsule<Image>?);
  swift_getKeyPath();
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v13;
}

uint64_t MarkupContainerViewController.imageDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v7 = (void *)swift_allocObject();
  _OWORD v7[2] = v6;
  _OWORD v7[3] = a1;
  v7[4] = a2;
  if (*(void *)(v3 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController)
    || *(void *)(v3 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController))
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_retain_n();
    closure #1 in MarkupContainerViewController.imageDescription.setter(v8, a1, a2);
  }
  else
  {
    uint64_t v10 = *(void **)(v3 + OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue);
    if (!v10)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_5;
    }
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = partial apply for closure #1 in MarkupContainerViewController.imageDescription.setter;
    *(void *)(v11 + 24) = v7;
    v14[4] = _sIg_Ieg_TRTA_0;
    v14[5] = v11;
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 1107296256;
    _OWORD v14[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v14[3] = &block_descriptor_21;
    id v12 = _Block_copy(v14);
    swift_bridgeObjectRetain();
    id v13 = v10;
    swift_retain();
    swift_retain_n();
    swift_release();
    objc_msgSend(v13, sel_addOperationWithBlock_, v12);
    _Block_release(v12);
  }
  swift_release();
LABEL_5:
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

void closure #1 in MarkupContainerViewController.imageDescription.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v20 - v11;
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x210550400](a1 + 16);
  if (v13)
  {
    double v14 = (void *)v13;
    unsigned __int8 v15 = *(char **)(v13 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v15
      && (uint64_t v16 = &v15[direct field offset for CanvasElementViewController.canvasView], swift_beginAccess(),
                                                                                      *(void *)v16))
    {
      uint64_t v17 = *(void *)(*(void *)v16 + direct field offset for Canvas.paperView)
          + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(*(void *)v16 + direct field offset for Canvas.paperView))
                      + 0x380);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v17, v6);
      uint64_t v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
      MEMORY[0x270FA5388](v18);
      *(&v20 - 2) = a2;
      *(&v20 - 1) = a3;
      unsigned __int8 v19 = v15;
      Capsule.mutate<A>(_:)();
      specialized CanvasElementViewController.merge<A>(_:)((uint64_t)v12);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
    else
    {
    }
  }
}

uint64_t closure #1 in closure #1 in MarkupContainerViewController.imageDescription.setter()
{
  return Capsule.Ref<>.subscript.setter();
}

uint64_t (*MarkupContainerViewController.imageDescription.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MarkupContainerViewController.imageDescription.getter();
  a1[1] = v3;
  return MarkupContainerViewController.imageDescription.modify;
}

uint64_t MarkupContainerViewController.imageDescription.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if ((a2 & 1) == 0) {
    return MarkupContainerViewController.imageDescription.setter(*a1, v2);
  }
  swift_bridgeObjectRetain();
  MarkupContainerViewController.imageDescription.setter(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t MarkupContainerViewController.showThumbnailViewForMultipage.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v1)
  {
    uint64_t v2 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
    swift_beginAccess();
    LOBYTE(v1) = *v2 ^ 1;
  }
  return v1 & 1;
}

uint64_t MarkupContainerViewController.showThumbnailViewForMultipage.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 24) = a1;
  if (*(void *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController)
    || *(void *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController))
  {
    uint64_t v6 = swift_retain_n();
    closure #1 in MarkupContainerViewController.showThumbnailViewForMultipage.setter(v6, a1 & 1);
  }
  else
  {
    uint64_t v8 = *(void **)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue);
    if (!v8)
    {
      swift_retain();
      goto LABEL_5;
    }
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = partial apply for closure #1 in MarkupContainerViewController.showThumbnailViewForMultipage.setter;
    *(void *)(v9 + 24) = v5;
    v12[4] = partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
    v12[5] = v9;
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 1107296256;
    v12[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v12[3] = &block_descriptor_19;
    uint64_t v10 = _Block_copy(v12);
    swift_retain_n();
    id v11 = v8;
    swift_retain();
    swift_release();
    objc_msgSend(v11, sel_addOperationWithBlock_, v10);
    _Block_release(v10);
  }
  swift_release();
LABEL_5:
  swift_release();
  return swift_release();
}

void *key path getter for MarkupContainerViewController.showThumbnailViewForMultipage : MarkupContainerViewController@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(*result + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v3)
  {
    uint64_t v4 = (unsigned char *)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
    uint64_t result = (void *)swift_beginAccess();
    LOBYTE(v3) = *v4 ^ 1;
  }
  *a2 = v3 & 1;
  return result;
}

void closure #1 in MarkupContainerViewController.showThumbnailViewForMultipage.setter(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *(void **)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    uint64_t v7 = v6;

    if (v6)
    {
      uint64_t v8 = &v7[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
      swift_beginAccess();
      char v9 = *v8;
      *uint64_t v8 = (a2 & 1) == 0;
      PaperDocumentViewController.isThumbnailViewCollapsed.didset(v9);
    }
  }
}

void (*MarkupContainerViewController.showThumbnailViewForMultipage.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = v3 + 32;
  *((void *)v3 + 3) = v1;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v5)
  {
    uint64_t v6 = (unsigned char *)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed);
    swift_beginAccess();
    LOBYTE(v5) = *v6 ^ 1;
  }
  *uint64_t v4 = v5 & 1;
  return MarkupContainerViewController.showThumbnailViewForMultipage.modify;
}

void MarkupContainerViewController.showThumbnailViewForMultipage.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  MarkupContainerViewController.showThumbnailViewForMultipage.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

Swift::Void __swiftcall MarkupContainerViewController.viewIsAppearing(_:)(Swift::Bool a1)
{
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  objc_msgSendSuper2(&v11, sel_viewIsAppearing_, a1);
  id v3 = objc_msgSend(v1, sel_view);
  if (v3)
  {
    uint64_t v4 = v3;
    objc_msgSend(v3, sel_bounds);
    double v6 = v5;
    double v8 = v7;

    MarkupContainerViewController.updatePreviewImageZoomScale(for:animated:)((CGSize)__PAIR128__(*(unint64_t *)&v8, *(unint64_t *)&v6), a1);
    char v9 = *(void **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
    if (v9)
    {
      id v10 = v9;
      CanvasElementViewController<>.updateImageZoomScale(in:animated:zoomable:)(a1, 0, v6, v8);
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MarkupContainerViewController.viewDidLayoutSubviews()()
{
  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  objc_msgSendSuper2(&v14, sel_viewDidLayoutSubviews);
  id v1 = objc_msgSend(v0, sel_view);
  if (v1)
  {
    uint64_t v2 = v1;
    objc_msgSend(v1, sel_bounds);
    double v4 = v3;
    double v6 = v5;

    double v7 = (double *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_previousViewSize];
    if (*(double *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_previousViewSize] != v4
      || *(double *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_previousViewSize + 8] != v6)
    {
      char v9 = self;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v0;
      v13[4] = partial apply for closure #1 in MarkupContainerViewController.viewDidLayoutSubviews();
      v13[5] = v10;
      v13[0] = MEMORY[0x263EF8330];
      v13[1] = 1107296256;
      _OWORD v13[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v13[3] = &block_descriptor_26;
      objc_super v11 = _Block_copy(v13);
      id v12 = v0;
      swift_release();
      objc_msgSend(v9, sel_animateWithDuration_delay_options_animations_completion_, 4, v11, 0, 0.25, 0.0);
      _Block_release(v11);
      *double v7 = v4;
      v7[1] = v6;
    }
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in MarkupContainerViewController.viewDidLayoutSubviews()(char *a1)
{
  id v2 = objc_msgSend(a1, sel_view);
  if (v2)
  {
    double v3 = v2;
    objc_msgSend(v2, sel_bounds);
    double v5 = v4;
    double v7 = v6;

    MarkupContainerViewController.updatePreviewImageZoomScale(for:animated:)((CGSize)__PAIR128__(*(unint64_t *)&v7, *(unint64_t *)&v5), 0);
    double v8 = *(void **)&a1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
    if (v8)
    {
      id v9 = v8;
      CanvasElementViewController<>.updateImageZoomScale(in:animated:zoomable:)(0, 0, v5, v7);
    }
  }
  else
  {
    __break(1u);
  }
}

void MarkupContainerViewController.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  v17.receiver = v3;
  v17.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  objc_msgSendSuper2(&v17, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  *((unsigned char *)v3 + OBJC_IVAR___PPKMarkupContainerViewController_viewIsTransitioningBetweenSizes) = 1;
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unsigned __int8 v15 = partial apply for closure #1 in MarkupContainerViewController.viewWillTransition(to:with:);
  uint64_t v16 = v7;
  uint64_t v11 = MEMORY[0x263EF8330];
  uint64_t v12 = 1107296256;
  uint64_t v13 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  objc_super v14 = &block_descriptor_30;
  double v8 = _Block_copy(&v11);
  swift_release();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unsigned __int8 v15 = partial apply for closure #2 in MarkupContainerViewController.viewWillTransition(to:with:);
  uint64_t v16 = v9;
  uint64_t v11 = MEMORY[0x263EF8330];
  uint64_t v12 = 1107296256;
  uint64_t v13 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  objc_super v14 = &block_descriptor_34;
  uint64_t v10 = _Block_copy(&v11);
  swift_release();
  objc_msgSend(a1, sel_animateAlongsideTransition_completion_, v8, v10);
  _Block_release(v10);
  _Block_release(v8);
}

void closure #1 in MarkupContainerViewController.viewWillTransition(to:with:)(void *a1, uint64_t a2)
{
  if ((objc_msgSend(a1, sel_isCancelled) & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v4 = MEMORY[0x210550400](a2 + 16);
    if (v4)
    {
      double v5 = (char *)v4;
      unsigned __int8 v6 = objc_msgSend(a1, sel_isAnimated);
      id v7 = objc_msgSend(v5, sel_view);
      if (v7)
      {
        double v8 = v7;
        objc_msgSend(v7, sel_bounds);
        double v10 = v9;
        double v12 = v11;

        MarkupContainerViewController.updatePreviewImageZoomScale(for:animated:)((CGSize)__PAIR128__(*(unint64_t *)&v12, *(unint64_t *)&v10), v6);
        uint64_t v13 = *(void **)&v5[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
        if (v13)
        {
          objc_super v14 = v13;
          CanvasElementViewController<>.updateImageZoomScale(in:animated:zoomable:)(v6, 0, v10, v12);

          double v5 = v14;
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void closure #2 in MarkupContainerViewController.viewWillTransition(to:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  double v3 = (unsigned char *)MEMORY[0x210550400](v2);
  if (v3)
  {
    v3[OBJC_IVAR___PPKMarkupContainerViewController_viewIsTransitioningBetweenSizes] = 0;
  }
}

Swift::Void __swiftcall MarkupContainerViewController.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  uint64_t v2 = v1;
  Class isa = a1.value.super.isa;
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for MarkupContainerViewController();
  objc_msgSendSuper2(&v13, sel_traitCollectionDidChange_, isa);
  uint64_t v4 = *(void **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  if (v4)
  {
    double v5 = v4;
    if (isa) {
      id v6 = [(objc_class *)isa horizontalSizeClass];
    }
    else {
      id v6 = 0;
    }
    id v7 = objc_msgSend(v2, sel_traitCollection);
    id v8 = objc_msgSend(v7, sel_horizontalSizeClass);

    if (!isa || v6 != v8)
    {
      id v9 = objc_msgSend(v2, sel_traitCollection);
      id v10 = objc_msgSend(v9, sel_horizontalSizeClass);

      double v11 = &v5[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
      swift_beginAccess();
      char v12 = *v11;
      *double v11 = v10 == (id)1;
      PaperDocumentViewController.isThumbnailViewCollapsed.didset(v12);
    }
  }
  MarkupContainerViewController.updateBannerViewStyle()();
}

uint64_t MarkupContainerViewController.load(fromData:with:placeholderImage:completionHandler:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v12);
  objc_super v14 = (uint64_t *)((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  *objc_super v14 = a1;
  v14[1] = a2;
  swift_storeEnumTagMultiPayload();
  if (a3)
  {
    long long v17 = xmmword_20C8352B0;
    outlined copy of Data._Representation(a1, a2);
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();
    unint64_t v15 = *((void *)&v17 + 1);
    a3 = v17;
  }
  else
  {
    outlined copy of Data._Representation(a1, a2);
    unint64_t v15 = 0xF000000000000000;
  }
  MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)((uint64_t)v14, a3, v15, a4, a5, a6);
  outlined consume of Data?(a3, v15);
  return outlined destroy of DataOrURL((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DataOrURL);
}

id MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v7 = v6;
  unint64_t v86 = a3;
  uint64_t v87 = a6;
  uint64_t v92 = a2;
  uint64_t v93 = (void (*)(void *))a5;
  uint64_t v10 = type metadata accessor for DataOrURL();
  uint64_t v84 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v84 + 64);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v90 = (uint64_t)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v89 = (uint64_t)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UTType();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v88 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v94 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  objc_super v21 = (char *)&v83 - v20;
  MEMORY[0x270FA5388](v22);
  double v24 = (char *)&v83 - v23;
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08C50]), sel_init);
  char v26 = *(void **)&v6[OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager];
  *(void *)&v6[OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager] = v25;

  uint64_t v27 = OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue;
  objc_msgSend(*(id *)&v7[OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue], sel_cancelAllOperations);
  double v28 = *(void **)&v7[v27];
  *(void *)&v7[v27] = 0;

  uint64_t v29 = OBJC_IVAR___PPKMarkupContainerViewController_loadContentTask;
  if (*(void *)&v7[OBJC_IVAR___PPKMarkupContainerViewController_loadContentTask])
  {
    uint64_t v30 = swift_retain();
    MEMORY[0x21054D560](v30, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  uint64_t v85 = v29;
  *(void *)&v7[v29] = 0;
  swift_release();
  MarkupContainerViewController.removeContentViewController()();
  uint64_t v95 = v15;
  uint64_t v96 = v24;
  id v91 = a4;
  if (!a4)
  {
LABEL_7:
    MarkupContainerViewController.sourceContentType(from:)(a1, (uint64_t)v24);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v24, (uint64_t)v21, &demangling cache variable for type metadata for UTType?);
    uint64_t v53 = v15;
    uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
    int v55 = v54(v21, 1, v14);
    uint64_t v83 = a1;
    if (v55 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for UTType?);
      int v56 = 0;
    }
    else
    {
      char v57 = v88;
      static UTType.image.getter();
      int v58 = UTType.conforms(to:)();
      uint64_t v59 = *(void (**)(char *, uint64_t))(v53 + 8);
      uint64_t v60 = v57;
      int v56 = v58;
      v59(v60, v14);
      v59(v21, v14);
    }
    uint64_t v61 = v94;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v24, v94, &demangling cache variable for type metadata for UTType?);
    if (v54((char *)v61, 1, v14) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v61, &demangling cache variable for type metadata for UTType?);
      if ((v56 & 1) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v65 = v88;
      static UTType.pdf.getter();
      int v66 = UTType.conforms(to:)();
      char v67 = *(void (**)(char *, uint64_t))(v95 + 8);
      v67(v65, v14);
      v67((char *)v61, v14);
      if (((v56 | v66) & 1) == 0)
      {
LABEL_12:
        char v62 = v93;
        if (v93)
        {
          lazy protocol witness table accessor for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError();
          uint64_t v63 = (void *)swift_allocError();
          *uint64_t v64 = 0;
          v62(v63);
        }
        return (id)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for UTType?);
      }
    }
    CFTimeInterval v68 = CACurrentMediaTime();
    uint64_t v69 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v89, 1, 1, v69);
    uint64_t v70 = swift_allocObject();
    swift_unknownObjectWeakInit();
    outlined init with copy of DataOrURL(v83, v90, (uint64_t (*)(void))type metadata accessor for DataOrURL);
    type metadata accessor for MainActor();
    id v71 = v91;
    uint64_t v72 = (uint64_t)v93;
    uint64_t v73 = v87;
    outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?((uint64_t)v93);
    swift_retain();
    LODWORD(v95) = v56;
    unint64_t v74 = v86;
    outlined copy of Data?(v92, v86);
    uint64_t v75 = static MainActor.shared.getter();
    unint64_t v76 = (*(unsigned __int8 *)(v84 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    unint64_t v77 = (v11 + v76 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v78 = swift_allocObject();
    uint64_t v79 = MEMORY[0x263F8F500];
    *(void *)(v78 + 16) = v75;
    *(void *)(v78 + 24) = v79;
    *(void *)(v78 + 32) = v72;
    *(void *)(v78 + 40) = v73;
    double v24 = v96;
    id v80 = v91;
    *(void *)(v78 + 48) = v70;
    *(void *)(v78 + 56) = v80;
    *(unsigned char *)(v78 + 64) = v95 & 1;
    outlined init with take of DataOrURL(v90, v78 + v76);
    uint64_t v81 = (void *)(v78 + v77);
    *uint64_t v81 = v92;
    v81[1] = v74;
    *(CFTimeInterval *)(v78 + ((v77 + 23) & 0xFFFFFFFFFFFFFFF8)) = v68;
    swift_release();
    uint64_t v82 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v89, (uint64_t)async function pointer to partial apply for closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:), v78);
    *(void *)&v7[v85] = v82;
    swift_release();
    return (id)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for UTType?);
  }
  double v31 = a4;
  uint64_t v32 = a1;
  id v33 = v31;
  id result = objc_msgSend(v7, sel_view);
  if (result)
  {
    double v35 = result;
    objc_msgSend(result, sel_bounds);
    double v37 = v36;
    double v39 = v38;
    double v41 = v40;
    double v43 = v42;

    id v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82B88]), sel_initWithFrame_, v37, v39, v41, v43);
    objc_msgSend(v44, sel_setClipsToBounds_, 1);
    objc_msgSend(v44, sel_setDelegate_, v7);
    objc_msgSend(v44, sel_setUserInteractionEnabled_, 0);
    objc_msgSend(v44, sel_setAutoresizingMask_, 18);
    id v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v33);
    objc_msgSend(v33, sel_size);
    objc_msgSend(v45, sel_setFrame_, 0.0, 0.0, v46, v47);
    objc_msgSend(v45, sel_setContentMode_, 4);
    objc_msgSend(v45, sel_setAccessibilityIgnoresInvertColors_, 1);
    objc_msgSend(v44, sel_addSubview_, v45);
    objc_msgSend(v45, sel_bounds);
    objc_msgSend(v44, sel_setContentSize_, v48, v49);
    id result = objc_msgSend(v7, sel_view);
    if (result)
    {
      CGRect v50 = result;
      objc_msgSend(result, sel_addSubview_, v44);

      CGRect v51 = *(void **)&v7[OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView];
      *(void *)&v7[OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView] = v44;
      id v52 = v44;

      MarkupContainerViewController.updatePreviewImageZoomScale(for:animated:)((CGSize)__PAIR128__(*(unint64_t *)&v43, *(unint64_t *)&v41), 0);
      uint64_t v15 = v95;
      double v24 = v96;
      a1 = v32;
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t MarkupContainerViewController.load(fromURL:with:placeholderImage:completionHandler:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, a1, v13);
  swift_storeEnumTagMultiPayload();
  if (a2)
  {
    long long v16 = xmmword_20C8352B0;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();
    unint64_t v14 = *((void *)&v16 + 1);
    a2 = v16;
  }
  else
  {
    unint64_t v14 = 0xF000000000000000;
  }
  MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)((uint64_t)v12, a2, v14, a3, a4, a5);
  outlined consume of Data?(a2, v14);
  return outlined destroy of DataOrURL((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for DataOrURL);
}

uint64_t MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)(a1, a2, a3, a4, 0);
}

uint64_t MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  id v6 = v5;
  int v99 = a4;
  uint64_t v97 = a3;
  uint64_t v98 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v108 = type metadata accessor for UTType();
  uint64_t v95 = *(void *)(v108 - 8);
  MEMORY[0x270FA5388](v108);
  unint64_t v93 = v9;
  uint64_t v106 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for URL();
  uint64_t v94 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  uint64_t v92 = (char *)v10;
  uint64_t v103 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v107 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v102 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v105 = (uint64_t)&v84 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  unint64_t v90 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v101 = (uint64_t)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v84 = (uint64_t)&v84 - v21;
  unint64_t v91 = v22;
  MEMORY[0x270FA5388](v23);
  id v25 = (char *)&v84 - v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  unint64_t v86 = (char *)&v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  unint64_t v88 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v100 = (uint64_t)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  id v33 = (char *)&v84 - v32;
  unint64_t v89 = v34;
  MEMORY[0x270FA5388](v35);
  double v37 = (char *)&v84 - v36;
  uint64_t v109 = v6;
  uint64_t v38 = *(void *)&v6[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  if (v38
    && (double v39 = (void *)(v38 + direct field offset for CanvasElementViewController.canvasView), swift_beginAccess(),
                                                                                                *v39))
  {
    uint64_t v40 = *(void *)(*v39 + direct field offset for Canvas.paperView)
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(*v39 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v37, v40, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v37, 0, 1, v26);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v37, 1, 1, v26);
  }
  if (a5)
  {
    uint64_t v85 = (char *)v26;
    *(void *)&long long v110 = 0xD000000000000019;
    *((void *)&v110 + 1) = 0x800000020C854A50;
    id v41 = objc_msgSend(a5, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    if (v41)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v111 = 0u;
      long long v110 = 0u;
    }
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v110, (uint64_t)&v112, &demangling cache variable for type metadata for Any?);
    uint64_t v26 = (uint64_t)v85;
    if (*((void *)&v113 + 1))
    {
      double v42 = &demangling cache variable for type metadata for Any?;
      double v43 = (char *)&v112;
      goto LABEL_14;
    }
  }
  else
  {
    long long v112 = 0u;
    long long v113 = 0u;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v112, &demangling cache variable for type metadata for Any?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v37, (uint64_t)v33, &demangling cache variable for type metadata for Capsule<Image>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v33, 1, v26) != 1)
  {
    unint64_t v49 = (unint64_t)v86;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v86, v33, v26);
    CGRect v50 = v109;
    CGRect v51 = &v109[OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata];
    swift_beginAccess();
    LOBYTE(v110) = *v51;
    *(void *)&long long v111 = 0;
    *((void *)&v110 + 1) = 0;
    specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(v49, v98, *(void *)&v50[OBJC_IVAR___PPKMarkupContainerViewController_context], a2, v99 & 1);
    (*(void (**)(unint64_t, uint64_t))(v27 + 8))(v49, v26);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v37, &demangling cache variable for type metadata for Capsule<Image>?);
    return 1;
  }
  double v42 = &demangling cache variable for type metadata for Capsule<Image>?;
  double v43 = v33;
LABEL_14:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v43, v42);
  dispatch_semaphore_t v44 = dispatch_semaphore_create(0);
  uint64_t v45 = *(void *)&v109[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  uint64_t v87 = a5;
  unint64_t v86 = (char *)v44;
  if (v45)
  {
    double v46 = (void *)(v45 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (*v46)
    {
      uint64_t v47 = *v46 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
      swift_beginAccess();
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(v25, v47, v48);
    }
    else
    {
      uint64_t v54 = v45 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp;
      swift_beginAccess();
      uint64_t v55 = v84;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v54, v84, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
      uint64_t v57 = *(void *)(v56 - 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56);
      if (result == 1)
      {
        __break(1u);
        return result;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v25, v55, v56);
    }
    uint64_t v53 = v98;
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v25, 0, 1, v58);
  }
  else
  {
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v25, 1, 1, v52);
    uint64_t v53 = v98;
  }
  uint64_t v59 = v109;
  uint64_t v60 = (uint64_t)&v109[OBJC_IVAR___PPKMarkupContainerViewController_originalAsset];
  swift_beginAccess();
  uint64_t v61 = v105;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v60, v105, &demangling cache variable for type metadata for CRAsset?);
  char v62 = &v59[OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata];
  swift_beginAccess();
  LODWORD(v98) = *v62;
  type metadata accessor for ResultWrapped #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)();
  uint64_t v84 = swift_allocObject();
  *(unsigned char *)(v84 + 16) = 2;
  uint64_t v63 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v107, 1, 1, v63);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v61, v102, &demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v25, v101, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v37, v100, &demangling cache variable for type metadata for Capsule<Image>?);
  uint64_t v85 = v25;
  uint64_t v64 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v103, v53, v104);
  uint64_t v65 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v106, a2, v108);
  unint64_t v66 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v67 = (v15 + *(unsigned __int8 *)(v90 + 80) + v66) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
  unint64_t v68 = (v91 + *(unsigned __int8 *)(v88 + 80) + v67) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
  unint64_t v69 = (v89 + *(unsigned __int8 *)(v64 + 80) + v68) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
  uint64_t v70 = *(unsigned __int8 *)(v65 + 80);
  unint64_t v71 = (unint64_t)&v92[v70 + v69];
  uint64_t v92 = v37;
  unint64_t v72 = v71 & ~v70;
  unint64_t v90 = v72 + v93;
  unint64_t v93 = (v72 + v93 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v91 = (v93 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v89 = (v91 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v88 = (v89 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v73 = (char *)swift_allocObject();
  *((void *)v73 + 2) = 0;
  *((void *)v73 + 3) = 0;
  uint64_t v74 = v84;
  *((void *)v73 + 4) = v84;
  *((void *)v73 + 5) = v59;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v102, (uint64_t)&v73[v66], &demangling cache variable for type metadata for CRAsset?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v101, (uint64_t)&v73[v67], (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v100, (uint64_t)&v73[v68], &demangling cache variable for type metadata for Capsule<Image>?);
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v73[v69], v103, v104);
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(&v73[v72], v106, v108);
  uint64_t v75 = &v73[v90];
  *uint64_t v75 = v99 & 1;
  v75[1] = v98;
  unint64_t v76 = v87;
  *(void *)&v73[v93] = v87;
  *(void *)&v73[v91] = v97;
  unint64_t v77 = v86;
  *(void *)&v73[v89] = v86;
  *(void *)&v73[v88] = ObjectType;
  id v78 = v76;
  swift_retain();
  uint64_t v79 = v59;
  id v80 = v77;
  uint64_t v81 = v107;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v107, (uint64_t)&async function pointer to partial apply for closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:), (uint64_t)v73);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v81, &demangling cache variable for type metadata for TaskPriority?);
  OS_dispatch_semaphore.wait()();

  outlined destroy of StocksKitCurrencyCache.Provider?(v105, &demangling cache variable for type metadata for CRAsset?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v85, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v92, &demangling cache variable for type metadata for Capsule<Image>?);
  int v82 = *(unsigned __int8 *)(v74 + 16);
  swift_release();
  if (v82 == 2) {
    return 0;
  }
  else {
    return v82 & 1;
  }
}

uint64_t closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 88) = v13;
  *(_OWORD *)(v8 + 72) = v12;
  *(_WORD *)(v8 + 128) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  return MEMORY[0x270FA2498](closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:), 0, 0);
}

uint64_t closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  v0[12] = *(void *)(v0[3] + OBJC_IVAR___PPKMarkupContainerViewController_context);
  type metadata accessor for MainActor();
  v0[13] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:), v2, v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(unsigned char *)(*(void *)(v0 + 16) + 16) = *(unsigned char *)(v0 + 130);
  OS_dispatch_semaphore.signal()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = (void *)v0[15];
  if (v1)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    double v5 = v4;
    id v6 = objc_allocWithZone(MEMORY[0x263F087E8]);
    id v7 = (void *)MEMORY[0x21054D080](v3, v5);
    swift_bridgeObjectRelease();
    uint64_t v8 = objc_msgSend(v6, sel_initWithDomain_code_userInfo_, v7, 512, 0);

    unint64_t v9 = v8;
    *uint64_t v1 = v8;
  }

  OS_dispatch_semaphore.signal()();
  long long v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

void closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  swift_release();
  uint64_t v3 = (char *)&async function pointer to specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)
     + async function pointer to specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:);
  __asm { BR              X8 }
}

uint64_t closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    double v5 = closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:);
  }
  else
  {
    *(unsigned char *)(v4 + 130) = a1 & 1;
    double v5 = closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #1 in static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return MEMORY[0x270FA2498](closure #1 in static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:), 0, 0);
}

uint64_t closure #1 in static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)()
{
  id v1 = objc_msgSend(self, sel_defaultManager);
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  URL._bridgeToObjectiveC()(v5);
  uint64_t v7 = v6;
  *(void *)(v0 + 16) = 0;
  unsigned int v8 = objc_msgSend(v1, sel_copyItemAtURL_toURL_error_, v4, v6, v0 + 16);

  unint64_t v9 = *(void **)(v0 + 16);
  if (v8)
  {
    id v10 = v9;
  }
  else
  {
    id v11 = v9;
    long long v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  **(unsigned char **)(v0 + 24) = v8 ^ 1;
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 200) = a4;
  *(void *)(v5 + 208) = v4;
  *(unsigned char *)(v5 + 288) = a3;
  *(void *)(v5 + 184) = a1;
  *(void *)(v5 + 192) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  *(void *)(v5 + 216) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  *(void *)(v5 + 224) = swift_task_alloc();
  *(void *)(v5 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  *(void *)(v5 + 240) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v5 + 248) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 256) = v7;
  *(void *)(v5 + 264) = v6;
  return MEMORY[0x270FA2498](MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:), v7, v6);
}

uint64_t MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[26];
  uint64_t v3 = v2 + OBJC_IVAR___PPKMarkupContainerViewController_originalAsset;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v3, v1, &demangling cache variable for type metadata for CRAsset?);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v4)
  {
    uint64_t v10 = v0[29];
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    goto LABEL_8;
  }
  uint64_t v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*v5)
  {
    uint64_t v7 = v0[29];
    uint64_t v8 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
LABEL_7:
    uint64_t v17 = v0[29];
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 0, 1, v18);
LABEL_8:
    uint64_t v19 = *(void *)(v0[26] + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v19)
    {
      uint64_t v20 = (uint64_t *)(v19 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      uint64_t v21 = *v20;
      uint64_t v22 = v0[27];
      if (v21)
      {
        uint64_t v23 = *(void *)(v21 + direct field offset for Canvas.paperView)
            + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v21 + direct field offset for Canvas.paperView))
                        + 0x380);
        swift_beginAccess();
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
        uint64_t v25 = *(void *)(v24 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v22 = v0[27];
    }
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v22, 1, 1, v26);
LABEL_13:
    swift_beginAccess();
    uint64_t v29 = (char *)&async function pointer to specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)
        + async function pointer to specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:);
    uint64_t v27 = (void *)swift_task_alloc();
    v0[34] = v27;
    *uint64_t v27 = v0;
    v27[1] = MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:);
    __asm { BR              X8 }
  }
  uint64_t v12 = v0[28];
  uint64_t v13 = v4 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentTemp;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v13, v12, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  if (result != 1)
  {
    (*(void (**)(void, void, uint64_t))(v15 + 32))(v0[29], v0[28], v14);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 289);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 280) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 240);
  uint64_t v6 = *(void *)(v4 + 232);
  uint64_t v7 = *(void *)(v4 + 216);
  if (v1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v7, &demangling cache variable for type metadata for Capsule<Image>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v6, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for CRAsset?);
    uint64_t v8 = *(void *)(v4 + 256);
    uint64_t v9 = *(void *)(v4 + 264);
    uint64_t v10 = MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:);
  }
  else
  {
    *(unsigned char *)(v4 + 289) = a1 & 1;
    outlined destroy of StocksKitCurrencyCache.Provider?(v7, &demangling cache variable for type metadata for Capsule<Image>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v6, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for CRAsset?);
    uint64_t v8 = *(void *)(v4 + 256);
    uint64_t v9 = *(void *)(v4 + 264);
    uint64_t v10 = MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:);
  }
  return MEMORY[0x270FA2498](v10, v8, v9);
}

uint64_t @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = a6;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a4;
  *(unsigned char *)(v6 + 128) = a3;
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = type metadata accessor for UTType();
  *(void *)(v6 + 56) = v7;
  *(void *)(v6 + 64) = *(void *)(v7 - 8);
  *(void *)(v6 + 72) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL();
  *(void *)(v6 + 80) = v8;
  *(void *)(v6 + 88) = *(void *)(v8 - 8);
  *(void *)(v6 + 96) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v6 + 104) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](@objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:), v10, v9);
}

uint64_t @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)()
{
  uint64_t v1 = *(const void **)(v0 + 40);
  uint64_t v2 = *(void **)(v0 + 48);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = *(void **)(v0 + 32);
  swift_release();
  *(void *)(v0 + 112) = _Block_copy(v1);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = v4;
  id v6 = v2;
  id v7 = v3;
  static UTType._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v8;
  *uint64_t v8 = v0;
  v8[1] = @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:);
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 32);
  char v12 = *(unsigned char *)(v0 + 128);
  return MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(v9, v10, v12, v11);
}

uint64_t @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(char a1)
{
  uint64_t v3 = v1;
  id v6 = (void *)*v2;
  id v5 = (void *)*v2;
  id v7 = *(void **)(*v2 + 48);
  uint64_t v8 = *(void **)(*v2 + 32);
  uint64_t v9 = *v2;
  swift_task_dealloc();

  uint64_t v10 = v5[14];
  uint64_t v11 = v5[12];
  uint64_t v12 = v5[11];
  uint64_t v13 = v5[10];
  (*(void (**)(void, void))(v5[8] + 8))(v5[9], v5[7]);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  if (v3)
  {
    uint64_t v14 = (void *)_convertErrorToNSError(_:)();

    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v14);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v10 + 16))(v10, a1 & 1, 0);
  }
  _Block_release((const void *)v6[14]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v9 + 8);
  return v15();
}

void *MarkupContainerViewController.dataRepresentation(withError:)(void *a1)
{
  uint64_t v3 = type metadata accessor for CRCodingError();
  uint64_t v55 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v54 = (uint64_t *)((char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = v9[8];
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v50 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v57 = (char *)&v50 - v16;
  uint64_t v17 = *(char **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v17) {
    return 0;
  }
  uint64_t v18 = &v17[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  uint64_t v19 = *(void *)v18;
  if (!*(void *)v18) {
    return 0;
  }
  uint64_t v51 = v3;
  uint64_t v52 = a1;
  uint64_t v20 = *(void *)(v19 + direct field offset for Canvas.paperView)
      + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(v19 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  uint64_t v21 = (void (*)(char *, uint64_t, uint64_t))v9[2];
  v21(v14, v20, v8);
  uint64_t v56 = v9;
  uint64_t v53 = (void (*)(char *, char *, uint64_t))v9[4];
  v53(v57, v14, v8);
  uint64_t v22 = (void **)&v17[direct field offset for CanvasElementViewController.image];
  swift_beginAccess();
  uint64_t v23 = *v22;
  if (v23)
  {
    uint64_t v24 = v17;
    objc_msgSend(v23, sel_size);
    double v26 = v25;
    double v28 = v27;
    if (v25 != 0.0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v29 = v17;
    double v28 = 0.0;
    double v26 = 0.0;
  }
  if (v28 == 0.0)
  {
    swift_getKeyPath();
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    Capsule<>.subscript.getter();
    swift_release();
    double v26 = v58;
    double v28 = v59;
  }
LABEL_9:
  type metadata accessor for ImageWrapper #1 in MarkupContainerViewController.dataRepresentation(withError:)();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = 0;
  dispatch_semaphore_t v31 = dispatch_semaphore_create(0);
  static TaskPriority.userInitiated.getter();
  uint64_t v32 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v7, 0, 1, v32);
  v21(v11, (uint64_t)v57, v8);
  unint64_t v33 = (*((unsigned __int8 *)v56 + 80) + 56) & ~(unint64_t)*((unsigned __int8 *)v56 + 80);
  unint64_t v34 = (v10 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = 0;
  *(void *)(v35 + 24) = 0;
  *(double *)(v35 + 32) = v26;
  *(double *)(v35 + 40) = v28;
  *(void *)(v35 + 48) = v30;
  v53((char *)(v35 + v33), v11, v8);
  *(void *)(v35 + v34) = v31;
  swift_retain();
  uint64_t v36 = v31;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in MarkupContainerViewController.dataRepresentation(withError:), v35);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
  OS_dispatch_semaphore.wait()();
  double v37 = *(void **)(v30 + 16);
  if (!v37)
  {
    id v41 = v52;
    if (!v52)
    {
      ((void (*)(char *, uint64_t))v56[1])(v57, v8);

      swift_release();
      return v41;
    }
    double v43 = v54;
    uint64_t v42 = v55;
    *uint64_t v54 = 0xD000000000000014;
    v43[1] = 0x800000020C854A70;
    uint64_t v44 = v51;
    (*(void (**)(void *, void, uint64_t))(v42 + 104))(v43, *MEMORY[0x263F32D70], v51);
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, MEMORY[0x263F32D80]);
    uint64_t v45 = (void *)swift_allocError();
    (*(void (**)(uint64_t, void *, uint64_t))(v42 + 32))(v46, v43, v44);
    uint64_t v47 = (void *)_convertErrorToNSError(_:)();
    id v48 = v47;
    *id v41 = v47;

    swift_release();
    ((void (*)(char *, uint64_t))v56[1])(v57, v8);

    return 0;
  }
  uint64_t v38 = v37;
  double v39 = UIImageJPEGRepresentation(v38, 0.9);
  if (v39)
  {
    uint64_t v40 = v39;
    id v41 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();

    swift_release();
  }
  else
  {

    swift_release();
    id v41 = 0;
  }
  ((void (*)(char *, uint64_t))v56[1])(v57, v8);
  return v41;
}

uint64_t closure #1 in MarkupContainerViewController.dataRepresentation(withError:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 136) = a7;
  *(void *)(v8 + 144) = a8;
  *(void *)(v8 + 128) = a6;
  *(double *)(v8 + 112) = a1;
  *(double *)(v8 + 120) = a2;
  type metadata accessor for Image();
  *(void *)(v8 + 152) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in MarkupContainerViewController.dataRepresentation(withError:), 0, 0);
}

uint64_t closure #1 in MarkupContainerViewController.dataRepresentation(withError:)()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  type metadata accessor for ImageRenderer();
  uint64_t v3 = (void *)swift_allocObject();
  _OWORD v3[2] = v2;
  v3[3] = v1;
  v3[4] = 0x3FF0000000000000;
  uint64_t v4 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v3);
  *(void *)(v0 + 160) = v4;
  swift_beginAccess();
  *(unsigned char *)(v4 + 72) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  Capsule<>.root.getter();
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 72);
  *(unsigned char *)(v0 + 48) = 0;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                     + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in MarkupContainerViewController.dataRepresentation(withError:);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 136);
  return v9(v6, v7, v0 + 16, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[16];
  uint64_t v2 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v0[22];

  OS_dispatch_semaphore.signal()();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t closure #1 in MarkupContainerViewController.dataRepresentation(withError:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  outlined destroy of DataOrURL(v2, (uint64_t (*)(void))type metadata accessor for Image);
  return MEMORY[0x270FA2498](closure #1 in MarkupContainerViewController.dataRepresentation(withError:), 0, 0);
}

uint64_t MarkupContainerViewController.archivedModelData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRCodableVersion();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v18[-v11];
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = (void *)(v13 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v14) {
    return 0;
  }
  uint64_t v15 = *(void *)(*v14 + direct field offset for Canvas.paperView)
      + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(*v14 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v15, v6);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v12, v9, v6);
  Capsule.mutate<A>(_:)();
  (*(void (**)(unsigned char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F32EB8], v2);
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  uint64_t v16 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
  return v16;
}

uint64_t closure #1 in MarkupContainerViewController.archivedModelData()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v3 = type metadata accessor for CRAssetOrData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return Capsule.Ref<>.subscript.setter();
}

void MarkupContainerViewController.contentViewScrollView.getter()
{
  if (!*(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView))
  {
    uint64_t v1 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v1)
    {
      uint64_t v9 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
      if (!v9) {
        return;
      }
      uint64_t v10 = (void *)(v9 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
      swift_beginAccess();
      if (!*v10) {
        return;
      }
      uint64_t v11 = (id *)(*v10 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      if (*v11)
      {
        id v12 = objc_msgSend(*v11, sel_documentScrollView);
        return;
      }
LABEL_21:
      __break(1u);
      return;
    }
    id v2 = v1;
    id v3 = objc_msgSend(v2, sel_view);
    if (!v3)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    uint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_subviews);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_7;
      }
    }
    else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_7:
      if ((v6 & 0xC000000000000001) != 0)
      {
        id v7 = (id)MEMORY[0x21054E050](0, v6);
LABEL_10:
        uint64_t v8 = v7;
        swift_bridgeObjectRelease();

        self;
        if (!swift_dynamicCastObjCClass()) {

        }
        return;
      }
      if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v7 = *(id *)(v6 + 32);
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t MarkupContainerViewController.annotationEditingEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.annotationEditingEnabled.setter(char a1)
{
  return MarkupContainerViewController.findInteractionEnabled.setter(a1, &OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.annotationEditingEnabled.didset);
}

void MarkupContainerViewController.annotationEditingEnabled.didset()
{
  MarkupContainerViewController.updateEditingMode()();
  MarkupContainerViewController.updateGestures()();
  uint64_t v1 = &v0[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled];
  swift_beginAccess();
  if (*v1 == 1)
  {
    MarkupContainerViewController.updateFirstResponderIfNecessary()();
  }
  else
  {
    if (one-time initialization token for isLowJetsamLimitEnvironment != -1) {
      swift_once();
    }
    if (static NSBundle.isLowJetsamLimitEnvironment == 1)
    {
      uint64_t v2 = *(void *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
      if (v2)
      {
        id v3 = (void *)(v2 + direct field offset for CanvasElementViewController.canvasView);
        swift_beginAccess();
        if (*v3) {
          objc_msgSend(*(id *)(*v3 + direct field offset for CanvasView.canvasTiledView), sel__cancelCurrentStrokeAndReduceMemoryFootprint);
        }
      }
    }
    if (one-time initialization token for imageCache != -1) {
      swift_once();
    }
    objc_msgSend(*(id *)(static CRAsset.imageCache + 16), sel_removeAllObjects);
    id v4 = objc_msgSend(v0, sel_viewIfLoaded);
    if (v4)
    {
      id v5 = v4;
      id v6 = objc_msgSend(v4, sel_window);

      if (v6)
      {
        id v7 = objc_msgSend(v6, sel_windowScene);

        if (v7)
        {
          id v8 = objc_msgSend(self, sel__existingInteractionForWindowScene_, v7);
          if (v8)
          {
            uint64_t v9 = v8;
            if (objc_msgSend(v8, sel__paletteViewVisible))
            {
              id v10 = objc_msgSend(v0, sel_view);
              if (v10)
              {
                uint64_t v11 = v10;
                objc_msgSend(v9, sel__setMiniPaletteVisible_hoverLocation_inView_, 0, v10, 0.0, 0.0);
              }
              else
              {
                __break(1u);
              }
            }
            else
            {
            }
          }
          else
          {
          }
        }
      }
    }
  }
}

uint64_t (*MarkupContainerViewController.annotationEditingEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.annotationEditingEnabled.modify;
}

uint64_t MarkupContainerViewController.annotationEditingEnabled.modify(uint64_t a1, char a2)
{
  return MarkupContainerViewController.findInteractionEnabled.modify(a1, a2, (uint64_t (*)(uint64_t))MarkupContainerViewController.annotationEditingEnabled.didset);
}

uint64_t MarkupContainerViewController.allEditingDisabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled);
  swift_beginAccess();
  return *v1;
}

void @objc MarkupContainerViewController.formFillingEnabled.setter(char *a1, uint64_t a2, char a3, void *a4)
{
  id v6 = &a1[*a4];
  swift_beginAccess();
  *id v6 = a3;
  id v7 = a1;
  MarkupContainerViewController.delegate.didset();
}

uint64_t MarkupContainerViewController.allEditingDisabled.setter(char a1)
{
  return MarkupContainerViewController.findInteractionEnabled.setter(a1, &OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.delegate.didset);
}

uint64_t (*MarkupContainerViewController.allEditingDisabled.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.allEditingDisabled.modify;
}

uint64_t MarkupContainerViewController.formFillingEnabled.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return MarkupContainerViewController.delegate.didset();
  }
  return result;
}

uint64_t MarkupContainerViewController.pencilAlwaysDraws.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.pencilAlwaysDraws.setter(char a1)
{
  return MarkupContainerViewController.findInteractionEnabled.setter(a1, &OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws, (uint64_t (*)(uint64_t))MarkupContainerViewController.delegate.didset);
}

uint64_t (*MarkupContainerViewController.pencilAlwaysDraws.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.allEditingDisabled.modify;
}

uint64_t MarkupContainerViewController.formFillingEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.formFillingEnabled.setter(char a1)
{
  return MarkupContainerViewController.findInteractionEnabled.setter(a1, &OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.delegate.didset);
}

uint64_t MarkupContainerViewController.delegate.didset()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled);
  swift_beginAccess();
  if (*v1)
  {
    LOBYTE(v2) = 0;
  }
  else
  {
    id v3 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled);
    swift_beginAccess();
    int v2 = *v3;
    if (v2 != 1)
    {
      id v4 = (unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
      swift_beginAccess();
      if (*v4)
      {
        LOBYTE(v2) = 3;
      }
      else
      {
        id v5 = (unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws);
        swift_beginAccess();
        if (*v5) {
          LOBYTE(v2) = 2;
        }
        else {
          LOBYTE(v2) = 0;
        }
      }
    }
  }
  *(unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode) = v2;
  return MarkupContainerViewController.editingMode.didset();
}

uint64_t (*MarkupContainerViewController.formFillingEnabled.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.allEditingDisabled.modify;
}

Swift::Void __swiftcall MarkupContainerViewController.setFormFillingEnabled(_:didUseBanner:)(Swift::Bool _, Swift::Bool didUseBanner)
{
  id v5 = (Swift::Bool *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled);
  swift_beginAccess();
  *id v5 = _;
  MarkupContainerViewController.delegate.didset();
  if (_)
  {
    if (didUseBanner) {
      char v6 = 48;
    }
    else {
      char v6 = 51;
    }
    uint64_t v7 = *(void *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (v7)
    {
      id v8 = (uint64_t *)(v7 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
      swift_beginAccess();
      uint64_t v9 = *v8;
      if (!*v8) {
        return;
      }
      id v10 = &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics;
      goto LABEL_11;
    }
    uint64_t v11 = *(void *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v11)
    {
      id v12 = (uint64_t *)(v11 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      uint64_t v9 = *v12;
      if (*v12)
      {
        id v10 = &direct field offset for CanvasView.formAnalytics;
LABEL_11:
        *(unsigned char *)(*(void *)(v9 + *v10) + 19) = v6;
      }
    }
  }
}

uint64_t MarkupContainerViewController.toolbarHidden.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden);
  swift_beginAccess();
  return *v1;
}

uint64_t MarkupContainerViewController.toolbarHidden.setter(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden);
  uint64_t result = swift_beginAccess();
  *id v3 = a1;
  return result;
}

uint64_t (*MarkupContainerViewController.toolbarHidden.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

id MarkupContainerViewController.validateUndo(_:)(uint64_t a1)
{
  return MarkupContainerViewController.validateUndo(_:)(a1, (SEL *)&selRef_canUndo);
}

id MarkupContainerViewController.validateRedo(_:)(uint64_t a1)
{
  return MarkupContainerViewController.validateUndo(_:)(a1, (SEL *)&selRef_canRedo);
}

id MarkupContainerViewController.validateUndo(_:)(uint64_t a1, SEL *a2)
{
  id result = *(id *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager);
  if (result) {
    return [result *a2];
  }
  return result;
}

id @objc MarkupContainerViewController.validateUndo(_:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id result = *(id *)(a1 + OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager);
  if (result) {
    return [result *a4];
  }
  return result;
}

id MarkupContainerViewController.undo(_:)()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager), sel_undo);
}

id MarkupContainerViewController.redo(_:)()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager), sel_redo);
}

void MarkupContainerViewController.revert(_:)()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager);
  if (v1)
  {
    id v2 = v1;
    if (objc_msgSend(v2, sel_canUndo))
    {
      do
        objc_msgSend(v2, sel_undo);
      while ((objc_msgSend(v2, sel_canUndo) & 1) != 0);
    }
    objc_msgSend(v2, sel_removeAllActions);
  }
}

id MarkupContainerViewController.backgroundColor.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v1
    && (id v2 = (id *)(v1 + direct field offset for CanvasElementViewController.canvasView), swift_beginAccess(), *v2))
  {
    id v3 = *v2;
  }
  else
  {
    id v4 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (!v4)
    {
      id v5 = 0;
      goto LABEL_8;
    }
    id v3 = objc_msgSend(v4, sel_view);
  }
  id v5 = v3;
LABEL_8:
  id v6 = objc_msgSend(v5, sel_backgroundColor);

  return v6;
}

void MarkupContainerViewController.backgroundColor.setter(void *a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v3
    && (id v4 = (id *)(v3 + direct field offset for CanvasElementViewController.canvasView), swift_beginAccess(), *v4))
  {
    id v5 = *v4;
  }
  else
  {
    id v6 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (!v6)
    {
      uint64_t v7 = 0;
      goto LABEL_8;
    }
    id v5 = objc_msgSend(v6, sel_view);
  }
  uint64_t v7 = v5;
LABEL_8:
  objc_msgSend(v7, sel_setBackgroundColor_, a1);
}

void (*MarkupContainerViewController.backgroundColor.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  id v4 = v3 + 9;
  uint64_t v5 = OBJC_IVAR___PPKMarkupContainerViewController_imageViewController;
  v3[10] = v1;
  v3[11] = v5;
  uint64_t v6 = *(void *)(v1 + v5);
  if (v6
    && (uint64_t v7 = (id *)(v6 + direct field offset for CanvasElementViewController.canvasView), swift_beginAccess(), *v7))
  {
    id v8 = *v7;
  }
  else
  {
    uint64_t v9 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (!v9)
    {
      id v10 = 0;
      goto LABEL_8;
    }
    id v8 = objc_msgSend(v9, sel_view);
  }
  id v10 = v8;
LABEL_8:
  id v11 = objc_msgSend(v10, sel_backgroundColor);

  *id v4 = v11;
  return MarkupContainerViewController.backgroundColor.modify;
}

void MarkupContainerViewController.backgroundColor.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  id v4 = (void **)(*(void *)a1 + 72);
  uint64_t v3 = *v4;
  uint64_t v5 = *(void *)(*(void *)a1 + 80);
  uint64_t v6 = *(void *)(v5 + *(void *)(*(void *)a1 + 88));
  if (a2)
  {
    if (v6)
    {
      uint64_t v7 = (void **)(v6 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      id v8 = *v7;
      if (v8)
      {
        id v9 = v3;
        id v10 = v8;
LABEL_15:
        objc_msgSend(v10, sel_setBackgroundColor_, v9);

        uint64_t v14 = *v4;
        goto LABEL_18;
      }
      uint64_t v5 = v2[10];
    }
    id v10 = *(id *)(v5 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    id v9 = v3;
    if (v10) {
      id v10 = objc_msgSend(v10, sel_view);
    }
    goto LABEL_15;
  }
  if (v6)
  {
    id v11 = (id *)(v6 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    if (*v11)
    {
      id v12 = *v11;
      goto LABEL_14;
    }
    uint64_t v5 = v2[10];
  }
  uint64_t v13 = *(void **)(v5 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v13)
  {
    uint64_t v14 = 0;
    goto LABEL_17;
  }
  id v12 = objc_msgSend(v13, sel_view);
LABEL_14:
  uint64_t v14 = v12;
LABEL_17:
  objc_msgSend(v14, sel_setBackgroundColor_, v3);

LABEL_18:
  free(v2);
}

Swift::Bool __swiftcall MarkupContainerViewController.isTouchInThumbnailView(_:)(UITouch a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v2) {
    return 0;
  }
  id v4 = (id *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
  swift_beginAccess();
  if (!*v4) {
    return 0;
  }
  id v5 = *v4;
  [(objc_class *)a1.super.isa locationInView:v5];
  unsigned __int8 v6 = objc_msgSend(v5, sel_pointInside_withEvent_, 0);

  return v6;
}

Swift::Bool __swiftcall MarkupContainerViewController.isTouchInPageLabelView(_:)(UITouch a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v2) {
    return 0;
  }
  id v4 = v2;
  id v5 = PaperDocumentViewController.pageLabelView.getter();

  [(objc_class *)a1.super.isa locationInView:v5];
  unsigned __int8 v6 = objc_msgSend(v5, sel_pointInside_withEvent_, 0);

  return v6;
}

Swift::Bool __swiftcall MarkupContainerViewController.isTouchInBannerView(_:)(UITouch a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v3 && (id v4 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView)) != 0)
  {
    id v5 = v4;
  }
  else
  {
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v6) {
      return 0;
    }
    uint64_t v7 = *(void **)(v6 + direct field offset for CanvasElementViewController.bannerView);
    id v5 = v7;
    if (!v7) {
      return 0;
    }
  }
  id v8 = v5;
  [(objc_class *)a1.super.isa locationInView:v5];
  unsigned __int8 v9 = objc_msgSend(v8, sel_pointInside_withEvent_, 0);

  return v9;
}

uint64_t MarkupContainerViewController.viewAcceptSingleTouch(_:)(UITouch a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = (void *)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  uint64_t result = swift_beginAccess();
  if (!*v6) {
    goto LABEL_11;
  }
  id v8 = *(void **)(*v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v8)
  {
    id v9 = v8;
    id v10 = specialized TiledPaperKitView.mostVisibleAttachment()();

    if (v10)
    {
      uint64_t v11 = *(void *)(v2 + v4);
      if (v11)
      {
        id v12 = (void *)(v11 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
        swift_beginAccess();
        if (*v12)
        {
          uint64_t v13 = (id *)(*v12 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
          swift_beginAccess();
          if (*v13)
          {
            id v14 = *v13;
            if (AnyCanvas.acceptSingleTouch(_:)(a1))
            {

              unsigned __int8 v15 = 1;
            }
            else
            {
              unsigned __int8 v15 = objc_msgSend(v14, sel_acceptSingleTouch_, a1.super.isa);
            }
            goto LABEL_14;
          }
        }
      }
    }
LABEL_11:
    uint64_t v16 = *(void *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v16
      || (uint64_t v17 = (id *)(v16 + direct field offset for CanvasElementViewController.canvasView), swift_beginAccess(), !*v17))
    {
      unsigned __int8 v15 = 0;
      return v15 & 1;
    }
    id v10 = *v17;
    unsigned __int8 v15 = AnyCanvas.acceptSingleTouch(_:)(a1);
LABEL_14:

    return v15 & 1;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall AnyCanvas.acceptSingleTouch(_:)(UITouch a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x2F8);
  uint64_t v6 = (void *)v5();
  [(objc_class *)a1.super.isa locationInView:v6];
  double v8 = v7;
  double v10 = v9;

  uint64_t v11 = (void *)v5();
  uint64_t v13 = v12;
  uint64_t ObjectType = swift_getObjectType();
  unsigned __int8 v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 144))(ObjectType, v13);

  if (!v15
    || (id v16 = objc_msgSend(v15, sel_hitTest_withEvent_, 0, v8, v10),
        v15,
        !v16))
  {
    uint64_t v18 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
    [(objc_class *)a1.super.isa locationInView:*(void *)((char *)v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView)];
    uint64_t v17 = *(void **)((char *)v2 + v18);
    if (v17)
    {
      id v19 = objc_msgSend(v17, sel_hitTest_withEvent_, 0);
      if (v19)
      {

        LOBYTE(v17) = 1;
        return (char)v17;
      }
      (*(void (**)(uint64_t *__return_ptr))((*v4 & *v2) + 0x2C8))(&v23);
      if (v23 != 2) {
        goto LABEL_13;
      }
      LOBYTE(v17) = AnyCanvas.canvasElementExists(at:)((CGPoint)__PAIR128__(*(unint64_t *)&v10, *(unint64_t *)&v8));
      if (v17)
      {
LABEL_12:
        LOBYTE(v17) = 1;
        return (char)v17;
      }
      uint64_t v20 = *(void *)((char *)v2 + v18);
      if (v20)
      {
        uint64_t v21 = (void *)(v20 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (*(void *)(*v21 + 16) || *(void *)(v21[1] + 16)) {
          goto LABEL_12;
        }
LABEL_13:
        LOBYTE(v17) = 0;
        return (char)v17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return (char)v17;
  }

  LOBYTE(v17) = 1;
  return (char)v17;
}

Swift::Bool __swiftcall MarkupContainerViewController.acceptSingleTouch(_:)(UITouch a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v5)
  {
    uint64_t v6 = (id *)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentThumbnailView);
    swift_beginAccess();
    if (*v6)
    {
      id v7 = *v6;
      [(objc_class *)a1.super.isa locationInView:v7];
      unsigned __int8 v8 = objc_msgSend(v7, sel_pointInside_withEvent_, 0);

      if (v8) {
        goto LABEL_7;
      }
    }
    double v9 = *(void **)(v2 + v4);
    if (v9)
    {
      id v10 = v9;
      id v11 = PaperDocumentViewController.pageLabelView.getter();

      [(objc_class *)a1.super.isa locationInView:v11];
      LOBYTE(v10) = objc_msgSend(v11, sel_pointInside_withEvent_, 0);

      if (v10) {
        goto LABEL_7;
      }
    }
  }
  if (MarkupContainerViewController.isTouchInBannerView(_:)(a1))
  {
LABEL_7:
    char v12 = 1;
  }
  else
  {
    v13.super.Class isa = a1.super.isa;
    char v12 = MarkupContainerViewController.viewAcceptSingleTouch(_:)(v13);
  }
  return v12 & 1;
}

void *MarkupContainerViewController.bannerView.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v1)
  {
    uint64_t v2 = &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView;
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v1) {
      return 0;
    }
    uint64_t v2 = &direct field offset for CanvasElementViewController.bannerView;
  }
  uint64_t v3 = *(void **)(v1 + *v2);
  if (v3) {
    id v4 = v3;
  }
  return v3;
}

void MarkupContainerViewController.showBannerView(with:)(void *a1)
{
  uint64_t v2 = *(char **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v2)
  {
    uint64_t v3 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration];
    *(void *)&v2[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerViewConfiguration] = a1;
    id v9 = a1;
    id v4 = a1;
    uint64_t v5 = v2;

    PaperDocumentViewController.bannerViewConfiguration.didset();
  }
  else
  {
    uint64_t v6 = *(char **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v6) {
      return;
    }
    id v7 = *(void **)&v6[direct field offset for CanvasElementViewController.bannerViewConfiguration];
    *(void *)&v6[direct field offset for CanvasElementViewController.bannerViewConfiguration] = a1;
    id v9 = a1;
    id v8 = a1;
    uint64_t v5 = v6;

    specialized CanvasElementViewController.bannerViewConfiguration.didset();
  }
}

uint64_t MarkupContainerViewController.showBannerView.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_showBannerView);
  swift_beginAccess();
  return *v1;
}

id MarkupContainerViewController.showBannerView.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_showBannerView);
  id result = (id)swift_beginAccess();
  *uint64_t v3 = a1;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v5)
  {
    uint64_t v6 = &OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v5) {
      return result;
    }
    uint64_t v6 = &direct field offset for CanvasElementViewController.bannerView;
  }
  id result = *(id *)(v5 + *v6);
  if (result) {
    return objc_msgSend(result, sel_removeFromSuperview);
  }
  return result;
}

id (*MarkupContainerViewController.showBannerView.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.showBannerView.modify;
}

id MarkupContainerViewController.showBannerView.modify(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(v5 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (v6)
    {
      id result = *(id *)(v6 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView);
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v5 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
      if (!v7) {
        return result;
      }
      id result = *(id *)(v7 + direct field offset for CanvasElementViewController.bannerView);
      if (!result) {
        return result;
      }
    }
    return objc_msgSend(result, sel_removeFromSuperview);
  }
  return result;
}

void MarkupContainerViewController.pdfFrame.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v1)
  {
    uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (*v2)
    {
      uint64_t v3 = (id *)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      if (*v3)
      {
        id v4 = objc_msgSend(*v3, sel_documentView);
        if (v4)
        {
          uint64_t v5 = v4;
          objc_msgSend(v4, sel_frame);
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

id MarkupContainerViewController.pdfScrollView.getter()
{
  return MarkupContainerViewController.findInteraction.getter((SEL *)&selRef_documentScrollView);
}

id MarkupContainerViewController.findInteraction.getter(SEL *a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v2) {
    return 0;
  }
  id v4 = (void *)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
  swift_beginAccess();
  if (!*v4) {
    return 0;
  }
  uint64_t v5 = (id *)(*v4 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  id result = *v5;
  if (*v5) {
    return [result *a1];
  }
  __break(1u);
  return result;
}

void *MarkupContainerViewController.pdfBackgroundColor.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void MarkupContainerViewController.pdfBackgroundColor.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
  id v5 = a1;

  MarkupContainerViewController.updateBackgroundColor()();
}

void key path setter for MarkupContainerViewController.pdfBackgroundColor : MarkupContainerViewController(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = (void **)(*a2 + OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = v2;
  id v5 = v2;

  MarkupContainerViewController.updateBackgroundColor()();
}

void (*MarkupContainerViewController.pdfBackgroundColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MarkupContainerViewController.pdfBackgroundColor.modify;
}

void MarkupContainerViewController.pdfBackgroundColor.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    MarkupContainerViewController.updateBackgroundColor()();
  }
}

id MarkupContainerViewController.canBecomeFirstResponder.getter(SEL *a1)
{
  id v3 = *(void **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  if (v3)
  {
    id v4 = *(id *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  }
  else
  {
    id v5 = *(void **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
    if (!v5)
    {
      v9.receiver = v1;
      v9.super_class = (Class)type metadata accessor for MarkupContainerViewController();
      return objc_msgSendSuper2(&v9, *a1);
    }
    id v4 = v5;
    id v3 = 0;
  }
  id v6 = v3;
  id v7 = [v4 *a1];

  return v7;
}

void *MarkupContainerViewController.toolPicker.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v1
    || (uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView),
        swift_beginAccess(),
        !*v2)
    || (id v3 = (void **)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker),
        swift_beginAccess(),
        (id v4 = *v3) == 0))
  {
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (!v5) {
      return 0;
    }
    id v4 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker);
  }
  id v6 = v4;
  return v4;
}

Swift::Void __swiftcall MarkupContainerViewController.updateBackgroundColor()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_view);
  if (v2)
  {
    id v3 = v2;
    if (v1[OBJC_IVAR___PPKMarkupContainerViewController_editingMode] == 3
      || !*(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController])
    {
      id v4 = &selRef_systemBackgroundColor;
    }
    else
    {
      id v4 = &selRef_clearColor;
    }
    id v5 = [self *v4];
    objc_msgSend(v3, sel_setBackgroundColor_, v5);

    id v6 = (id *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor];
    swift_beginAccess();
    id v7 = *v6;
    if (*v6)
    {
      uint64_t v8 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
      objc_super v9 = *(char **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
      if (v9)
      {
        id v10 = *(void **)&v9[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor];
        *(void *)&v9[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor] = v7;
        id v11 = v7;
        char v12 = v9;

        PaperDocumentViewController.updateBackgroundColor()();
        UITouch v13 = *(char **)&v1[v8];
        if (v13)
        {
          id v14 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_backgroundColor];
          unsigned __int8 v15 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor];
          *(void *)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_thumbnailViewBackgroundColor] = v14;
          id v7 = v14;
          id v16 = v13;

          PaperDocumentViewController.updateBackgroundColor()();
        }
      }
      else
      {
        id v17 = v7;
      }
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MarkupContainerViewController.configureLookAndStyle()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  if (v2)
  {
    id v3 = (void **)(v2 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    id v4 = (char *)*v3;
    if (*v3)
    {
      id v5 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
      if (!v5)
      {
        __break(1u);
        goto LABEL_31;
      }
      id v6 = v4;
      id v7 = objc_msgSend(v5, sel_canvasView);
      if (v7)
      {
        id v8 = v7;
        objc_super v9 = v7;
LABEL_10:
        char v12 = self;
        id v13 = v8;
        id v14 = objc_msgSend(v12, sel_clearColor);
        objc_msgSend(v13, sel_setBackgroundColor_, v14);

        goto LABEL_12;
      }
    }
  }
  else
  {
    id v4 = 0;
  }
  uint64_t v10 = *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  if (v10)
  {
    id v11 = (void **)(v10 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    objc_super v9 = *v11;
    if (!*v11) {
      goto LABEL_12;
    }
    id v8 = v9;
    goto LABEL_10;
  }
  objc_super v9 = 0;
LABEL_12:
  MarkupContainerViewController.updateBackgroundColor()();
  uint64_t v15 = OBJC_IVAR___PPKMarkupContainerViewController_imageViewController;
  uint64_t v16 = *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  if (!v16) {
    goto LABEL_19;
  }
  id v17 = (id *)(v16 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v17)
  {
    uint64_t v18 = (char *)*v17;
    id v19 = objc_msgSend(v1, sel_view);
    uint64_t v20 = *(void **)&v18[direct field offset for CanvasView.canvasTiledView];
    if (v20)
    {
      objc_msgSend(v20, sel_setContentSnapshottingView_, v19);

      goto LABEL_16;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_16:
  uint64_t v21 = *(void **)&v1[v15];
  if (v21)
  {
    uint64_t v22 = v21;
    id v23 = objc_msgSend(v1, sel_view);
    if (v23)
    {
      uint64_t v24 = v23;
      id v25 = objc_msgSend(v23, sel_superview);

      double v26 = (void **)&v22[direct field offset for CanvasElementViewController.rulerHostView];
      swift_beginAccess();
      double v27 = *v26;
      *double v26 = v25;
      id v28 = v25;
      specialized CanvasElementViewController.rulerHostView.didset(v27);

      goto LABEL_19;
    }
LABEL_32:
    __break(1u);
    return;
  }
LABEL_19:
  if (v4) {
    objc_msgSend(v4, sel_setOverrideUserInterfaceStyle_, 1);
  }
  if (v9) {
    objc_msgSend(v9, sel_setOverrideUserInterfaceStyle_, 1);
  }
  uint64_t v29 = MarkupContainerViewController.toolPicker.getter();
  if (v29)
  {
    uint64_t v30 = v29;
    objc_msgSend(v29, sel_setColorUserInterfaceStyle_, 1);
  }
  MarkupContainerViewController.updateBannerViewStyle()();
  if (v4)
  {
    *(void *)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes] = &outlined read-only object #0 of MarkupContainerViewController.configureLookAndStyle();
    swift_bridgeObjectRelease();
  }
  dispatch_semaphore_t v31 = MarkupContainerViewController.toolPicker.getter();
  if (v31)
  {
    uint64_t v32 = v31;
    objc_msgSend(v31, sel__setShowsHandwritingTool_, 0);
  }
}

void MarkupContainerViewController.updateBannerViewStyle()()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  if (v1)
  {
    uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (*v2)
    {
      uint64_t v3 = *v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
      swift_beginAccess();
      uint64_t v4 = MEMORY[0x210550400](v3);
      if (v4)
      {
        id v5 = (void *)v4;
        type metadata accessor for PaperDocumentViewController(0);
        uint64_t v6 = swift_dynamicCastClass();
        if (v6)
        {
          id v7 = *(void **)(v6 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_bannerView);
          id v8 = v7;

          if (v7)
          {
LABEL_11:
            id v12 = v8;
            id v13 = objc_msgSend(v0, sel_traitCollection);
            id v14 = objc_msgSend(v13, sel_userInterfaceStyle);

            objc_msgSend(v12, sel_setOverrideUserInterfaceStyle_, v14);
            return;
          }
        }
        else
        {
        }
      }
    }
  }
  uint64_t v9 = *(void *)&v0[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  if (v9)
  {
    uint64_t v10 = *(void **)(v9 + direct field offset for CanvasElementViewController.bannerView);
    id v11 = v10;
    if (v10)
    {
      id v8 = v11;
      goto LABEL_11;
    }
  }
}

Swift::Void __swiftcall MarkupContainerViewController.removeContentViewController()()
{
  uint64_t v1 = OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (!v2) {
    goto LABEL_5;
  }
  id v3 = objc_msgSend(v2, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v4 = v3;
  objc_msgSend(v3, sel_removeFromSuperview);

  id v5 = *(void **)(v0 + v1);
  if (v5)
  {
    objc_msgSend(v5, sel_removeFromParentViewController);
    uint64_t v6 = *(void **)(v0 + v1);
  }
  else
  {
LABEL_5:
    uint64_t v6 = 0;
  }
  *(void *)(v0 + v1) = 0;

  uint64_t v7 = OBJC_IVAR___PPKMarkupContainerViewController_imageViewController;
  id v8 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v8)
  {
    id v9 = objc_msgSend(v8, sel_view);
    if (v9)
    {
      uint64_t v10 = v9;
      objc_msgSend(v9, sel_removeFromSuperview);

      id v8 = *(void **)(v0 + v7);
      if (v8)
      {
        objc_msgSend(v8, sel_removeFromParentViewController);
        id v8 = *(void **)(v0 + v7);
      }
      goto LABEL_10;
    }
LABEL_14:
    __break(1u);
    return;
  }
LABEL_10:
  *(void *)(v0 + v7) = 0;
}

Swift::Void __swiftcall MarkupContainerViewController.updateEditingMode()()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled);
  swift_beginAccess();
  if (*v1)
  {
    char v2 = 0;
  }
  else
  {
    id v3 = (unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled);
    swift_beginAccess();
    if (*v3)
    {
      char v2 = 1;
    }
    else
    {
      uint64_t v4 = (unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
      swift_beginAccess();
      if (*v4)
      {
        char v2 = 3;
      }
      else
      {
        id v5 = (unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws);
        swift_beginAccess();
        if (*v5) {
          char v2 = 2;
        }
        else {
          char v2 = 0;
        }
      }
    }
  }
  *(unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode) = v2;
  MarkupContainerViewController.editingMode.didset();
}

void MarkupContainerViewController.pdfViewScaleChanged(_:)()
{
  if ((*(unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_viewIsTransitioningBetweenSizes) & 1) == 0)
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
    if (v1)
    {
      char v2 = (void *)(v1 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
      swift_beginAccess();
      if (*v2)
      {
        id v3 = (id *)(*v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
        swift_beginAccess();
        if (*v3)
        {
          id v4 = *v3;
          id v5 = objc_msgSend(v4, sel_documentScrollView);
          if (v5)
          {
            uint64_t v6 = v5;
            objc_msgSend(v4, sel_autoScaleFactor);
            double v8 = v7;
            objc_msgSend(v6, sel_minimumZoomScale);
            if (v8 != v9) {
              objc_msgSend(v6, sel_setMinimumZoomScale_, v8);
            }
            objc_msgSend(v6, sel_zoomScale);
            double v11 = v10;
            id v12 = &selRef_minimumZoomScale;
            objc_msgSend(v6, sel_minimumZoomScale);
            if (v11 < v13
              || (objc_msgSend(v6, sel_zoomScale),
                  double v15 = v14,
                  id v12 = &selRef_maximumZoomScale,
                  objc_msgSend(v6, sel_maximumZoomScale),
                  v16 < v15))
            {
              [v6 *v12];
              objc_msgSend(v6, sel_setZoomScale_);
            }
          }
        }
      }
    }
  }
}

Swift::Void __swiftcall MarkupContainerViewController.updatePreviewImageZoomScale(for:animated:)(CGSize a1, Swift::Bool animated)
{
  id v3 = *(void **)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
  if (!v3) {
    return;
  }
  double height = a1.height;
  double width = a1.width;
  id v17 = v3;
  id v7 = objc_msgSend(v17, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_4;
    }
LABEL_19:

    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_19;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v9 = (id)MEMORY[0x21054E050](0, v8);
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v9 = *(id *)(v8 + 32);
  }
  double v10 = v9;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_bounds);
  double v13 = 1.0;
  if (v11 >= width || v12 >= height)
  {
    double v15 = width / v11;
    if (height / v12 < width / v11) {
      double v15 = height / v12;
    }
    double v13 = fmax(v15, 0.0001);
  }
  objc_msgSend(v17, sel_setMinimumZoomScale_, v13);
  objc_msgSend(v17, sel_setZoomScale_animated_, animated, v13);
  objc_msgSend(v17, sel_center);
  objc_msgSend(v10, sel_setCenter_);
}

Swift::Void __swiftcall MarkupContainerViewController.doubleTapped(_:)(UITapGestureRecognizer *a1)
{
  uint64_t v2 = v1;
  id v4 = &v1[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled];
  swift_beginAccess();
  if ((*v4 & 1) == 0)
  {
    id v5 = *(char **)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
    if (v5)
    {
      uint64_t v6 = (void **)&v5[direct field offset for CanvasElementViewController.canvasView];
      swift_beginAccess();
      if (*v6)
      {
        id v7 = *(void **)((char *)*v6 + direct field offset for CanvasView.canvasScrollView);
        if (v7)
        {
          unint64_t v8 = v5;
          id v9 = v7;
          id v10 = objc_msgSend(v2, sel_view);
          if (v10)
          {
            double v11 = v10;
            objc_msgSend(v10, sel_bounds);
            double v13 = v12;
            double v15 = v14;

            double v16 = CanvasElementViewController<>.preferredZoomScale(in:zoomable:)(0, v13, v15);
            objc_msgSend(v9, sel_zoomScale);
            if (vabdd_f64(v17, v16) >= 0.01)
            {
              objc_msgSend(v9, sel_setZoomScale_animated_, 1, v16);

              uint64_t v32 = *v6;
              id v9 = v32;

              if (!v32) {
                return;
              }
              *((unsigned char *)v9 + direct field offset for CanvasView.isZoomScaleAltered) = 0;
              goto LABEL_14;
            }
            specialized CanvasElementViewController.imageView.getter();
            id v19 = v18;
            [(UITapGestureRecognizer *)a1 locationInView:v18];
            double v21 = v20;
            double v23 = v22;

            objc_msgSend(v9, sel_maximumZoomScale);
            if (*v6)
            {
              id v25 = *(void **)((char *)*v6 + direct field offset for CanvasView.canvasScrollView);
              if (v25)
              {
                double v26 = v24;
                objc_msgSend(v25, sel_frame);
                if (*v6)
                {
                  id v28 = *(void **)((char *)*v6 + direct field offset for CanvasView.canvasScrollView);
                  if (v28)
                  {
                    double v29 = fmin(v26, 2.5);
                    double v30 = v27 / v29;
                    objc_msgSend(v28, sel_frame);
                    objc_msgSend(v9, sel_zoomToRect_animated_, 1, v21 - v31 / v29 * 0.5, v23 - v30 * 0.5, v31 / v29, v30);

LABEL_14:
                    return;
                  }
LABEL_22:
                  __break(1u);
                  return;
                }
LABEL_21:
                __break(1u);
                goto LABEL_22;
              }
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_18;
    }
  }
}

Swift::Void __swiftcall MarkupContainerViewController.updateGestures()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v1)
  {
    uint64_t v2 = (void *)(v1 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    if (*v2)
    {
      id v3 = *(void **)(*v2 + direct field offset for Canvas.paperView);
      id v4 = (char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
      swift_beginAccess();
      char v5 = *v4;
      uint64_t v6 = OBJC_IVAR___PPKMarkupContainerViewController_doubleTapGestureRecognizer;
      id v7 = *(void **)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_doubleTapGestureRecognizer);
      if (v5)
      {
        if (!v7) {
          return;
        }
        id v8 = v3;
        id v9 = v7;
        objc_msgSend(v8, sel_removeGestureRecognizer_, v9);
        id v10 = *(void **)(v0 + v6);
        *(void *)(v0 + v6) = 0;
      }
      else
      {
        if (v7) {
          return;
        }
        id v11 = objc_allocWithZone(MEMORY[0x263F82CB0]);
        id v10 = v3;
        id v12 = objc_msgSend(v11, sel_initWithTarget_action_, v0, sel_doubleTapped_);
        double v13 = *(void **)(v0 + v6);
        *(void *)(v0 + v6) = v12;

        double v14 = *(void **)(v0 + v6);
        if (v14)
        {
          id v15 = v14;
          objc_msgSend(v15, sel_setNumberOfTapsRequired_, 2);
          double v16 = *(void **)((char *)v10 + *(void *)((*MEMORY[0x263F8EED0] & *v10) + 0x390));
          if (v16) {
            objc_msgSend(v16, sel_requireGestureRecognizerToFail_, v15);
          }
          objc_msgSend(v10, sel_addGestureRecognizer_, v15);
        }
      }
    }
  }
}

uint64_t MarkupContainerViewControllerAnalysisDelegate.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t @objc MarkupContainerViewControllerAnalysisDelegate.contextWillPresentVisualSearchController(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  swift_unknownObjectRetain();
  swift_retain();
  a5(a4);
  swift_unknownObjectRelease();
  return swift_release();
}

char *MarkupContainerViewController.isInteractionActive.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v2) {
    return 0;
  }
  type metadata accessor for ImageElementView(0);
  id result = (char *)swift_dynamicCastClass();
  if (result)
  {
    id result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
    if (result)
    {
      unsigned int v4 = objc_msgSend(result, sel_analysisInteractionHidden);
      swift_unknownObjectRelease();
      return (char *)(v4 ^ 1);
    }
  }
  return result;
}

id MarkupContainerViewController.hasResultsForVisualSearch.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v2) {
    return 0;
  }
  type metadata accessor for ImageElementView(0);
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3) {
    return 0;
  }
  id v4 = objc_msgSend(*(id *)(v3 + direct field offset for ImageElementView.mediaView), sel_imageAnalysisContext);
  if (!v4) {
    return 0;
  }
  id v5 = objc_msgSend(v4, sel_hasResultsForAnalysisTypes_, 16);
  swift_unknownObjectRelease();
  return v5;
}

char *MarkupContainerViewController.isVisualSearchEnabled.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v2) {
    return 0;
  }
  type metadata accessor for ImageElementView(0);
  id result = (char *)swift_dynamicCastClass();
  if (result)
  {
    id result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
    if (result)
    {
      unint64_t v4 = (unint64_t)objc_msgSend(result, sel_activeInteractionTypes);
      swift_unknownObjectRelease();
      return (char *)((v4 >> 2) & 1);
    }
  }
  return result;
}

char *MarkupContainerViewController.shouldHighlightTextAndODAfterNextAnalysis.setter(char *result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v2)
  {
    char v3 = (char)result;
    unint64_t v4 = (void *)(v2 + direct field offset for CanvasElementViewController.canvasView);
    id result = (char *)swift_beginAccess();
    if (*v4)
    {
      type metadata accessor for ImageElementView(0);
      id result = (char *)swift_dynamicCastClass();
      if (result)
      {
        id result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
        if (result)
        {
          objc_msgSend(result, sel_setAutomaticallyInvokedInteraction_, v3 & 1);
          return (char *)swift_unknownObjectRelease();
        }
      }
    }
  }
  return result;
}

char *MarkupContainerViewController.shouldHighlightTextAndODAfterNextAnalysis.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v2) {
    return 0;
  }
  type metadata accessor for ImageElementView(0);
  id result = (char *)swift_dynamicCastClass();
  if (result)
  {
    id result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
    if (result)
    {
      id v4 = objc_msgSend(result, sel_automaticallyInvokedInteraction);
      swift_unknownObjectRelease();
      return (char *)(v4 == (id)1);
    }
  }
  return result;
}

char *MarkupContainerViewController.shouldEnterVisualSearchAfterNextAnalysis.setter(char *result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v2)
  {
    char v3 = (char)result;
    id v4 = (void *)(v2 + direct field offset for CanvasElementViewController.canvasView);
    id result = (char *)swift_beginAccess();
    if (*v4)
    {
      type metadata accessor for ImageElementView(0);
      id result = (char *)swift_dynamicCastClass();
      if (result)
      {
        id result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
        if (result)
        {
          if (v3) {
            uint64_t v5 = 4;
          }
          else {
            uint64_t v5 = 0;
          }
          objc_msgSend(result, sel_setAutomaticallyInvokedInteraction_, v5);
          return (char *)swift_unknownObjectRelease();
        }
      }
    }
  }
  return result;
}

char *MarkupContainerViewController.shouldUpliftSubjectAfterNextAnalysis.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v2) {
    return 0;
  }
  type metadata accessor for ImageElementView(0);
  id result = (char *)swift_dynamicCastClass();
  if (result)
  {
    id result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
    if (result)
    {
      id v4 = objc_msgSend(result, sel_automaticallyInvokedInteraction);
      swift_unknownObjectRelease();
      return (char *)(v4 == (id)8);
    }
  }
  return result;
}

char *MarkupContainerViewController.shouldUpliftSubjectAfterNextAnalysis.setter(char *result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v2)
  {
    char v3 = (char)result;
    id v4 = (void *)(v2 + direct field offset for CanvasElementViewController.canvasView);
    id result = (char *)swift_beginAccess();
    if (*v4)
    {
      type metadata accessor for ImageElementView(0);
      id result = (char *)swift_dynamicCastClass();
      if (result)
      {
        id result = (char *)objc_msgSend(*(id *)&result[direct field offset for ImageElementView.mediaView], sel_imageAnalysisContext);
        if (result)
        {
          if (v3) {
            uint64_t v5 = 8;
          }
          else {
            uint64_t v5 = 0;
          }
          objc_msgSend(result, sel_setAutomaticallyInvokedInteraction_, v5);
          return (char *)swift_unknownObjectRelease();
        }
      }
    }
  }
  return result;
}

id @objc MarkupContainerViewController.imageDescription.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  if (v7)
  {
    id v8 = (void *)MEMORY[0x21054D080](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v8 = 0;
  }
  return v8;
}

uint64_t MarkupContainerViewController.infoButtonGlyphName.getter()
{
  return MarkupContainerViewController.infoButtonGlyphName.getter((SEL *)&selRef_infoButtonGlyphName);
}

uint64_t MarkupContainerViewController.filledInfoButtonGlyphName.getter()
{
  return MarkupContainerViewController.infoButtonGlyphName.getter((SEL *)&selRef_filledInfoButtonGlyphName);
}

uint64_t MarkupContainerViewController.infoButtonGlyphName.getter(SEL *a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (!v2) {
    return 0;
  }
  id v4 = (void *)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v4) {
    return 0;
  }
  type metadata accessor for ImageElementView(0);
  uint64_t v5 = swift_dynamicCastClass();
  if (!v5) {
    return 0;
  }
  id v6 = objc_msgSend(*(id *)(v5 + direct field offset for ImageElementView.mediaView), sel_imageAnalysisContext);
  if (!v6) {
    return 0;
  }
  id v7 = [v6 *a1];
  swift_unknownObjectRelease();
  if (!v7) {
    return 0;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

Swift::Void __swiftcall MarkupContainerViewController.updateForFullscreen(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  char v3 = *(void **)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v3)
  {
    id v5 = v3;
    PaperDocumentViewController.showPageNumberOverlayIfNeeded(animated:)(animated);
  }
}

Swift::Void __swiftcall MarkupContainerViewController.setShouldHideMarkupOverlays(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v3)
  {
    id v6 = (void *)(v3 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    if (*v6)
    {
      type metadata accessor for ImageElementView(0);
      uint64_t v7 = swift_dynamicCastClass();
      if (v7)
      {
        id v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v7
                                                                   + direct field offset for ImageElementView.mediaView), sel_imageAnalysisContext));
        if (v8)
        {
          objc_msgSend(v8, sel_setAnalysisInteractionHidden_animated_, _, animated);
          swift_unknownObjectRelease();
        }
      }
    }
  }
}

Swift::Void __swiftcall MarkupContainerViewController.infoButtonTapped()()
{
}

Swift::Void __swiftcall MarkupContainerViewController.setupAndStartImageAnalysisIfNeeded()()
{
}

SEL *MarkupContainerViewController.infoButtonTapped()(SEL *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v3)
  {
    id v5 = result;
    id v6 = (void *)(v3 + direct field offset for CanvasElementViewController.canvasView);
    id result = (SEL *)swift_beginAccess();
    if (*v6)
    {
      type metadata accessor for ImageElementView(0);
      id result = (SEL *)swift_dynamicCastClass();
      if (result)
      {
        id result = (SEL *)objc_msgSend(*(id *)((char *)result + direct field offset for ImageElementView.mediaView), sel_imageAnalysisContext);
        if (result)
        {
          objc_msgSend(result, *v5, a2);
          return (SEL *)swift_unknownObjectRelease();
        }
      }
    }
  }
  return result;
}

void MarkupContainerViewController.documentView(_:detectedFormInContent:withAutofill:)(void *a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController);
  if (v5)
  {
    id v9 = (void **)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    id v10 = *v9;
    if (*v9)
    {
      type metadata accessor for PaperDocumentView();
      id v11 = a1;
      id v12 = v10;
      char v13 = static NSObject.== infix(_:_:)();

      if (v13)
      {
        uint64_t v14 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
        swift_beginAccess();
        id v15 = (void *)MEMORY[0x210550400](v14);
        if (v15)
        {
          double v16 = v15;
          if (objc_msgSend(v15, sel_respondsToSelector_, sel_markupContainerViewController_detectedFormInContent_withAutofill_))objc_msgSend(v16, sel_markupContainerViewController_detectedFormInContent_withAutofill_, v4, a2 & 1, a3 & 1); {
          swift_unknownObjectRelease();
          }
        }
      }
    }
  }
}

void MarkupContainerViewController.documentViewController(_:didSetupDocumentView:)(uint64_t a1, uint64_t a2)
{
}

void *MarkupContainerViewController.documentView(_:willPresentViewController:animated:)(uint64_t a1, uint64_t a2, char a3)
{
  return MarkupContainerViewController.documentView(_:willPresentViewController:animated:)(a1, a2, a3, (SEL *)&selRef_markupContainerViewController_willPresentViewControllerWithAnimation_);
}

void *MarkupContainerViewController.documentView(_:didDismissViewController:animated:)(uint64_t a1, uint64_t a2, char a3)
{
  return MarkupContainerViewController.documentView(_:willPresentViewController:animated:)(a1, a2, a3, (SEL *)&selRef_markupContainerViewController_didDismissViewControllerWithAnimation_);
}

void *MarkupContainerViewController.documentView(_:willPresentViewController:animated:)(uint64_t a1, uint64_t a2, char a3, SEL *a4)
{
  uint64_t v7 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  id result = (void *)MEMORY[0x210550400](v7);
  if (result)
  {
    id v9 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, *a4)) {
      objc_msgSend(v9, *a4, v4, a3 & 1);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *MarkupContainerViewController.documentView(_:thumbnailViewDidCollapse:)(uint64_t a1, char a2)
{
  return MarkupContainerViewController.documentView(_:thumbnailViewDidCollapse:)(a1, a2, (SEL *)&selRef_markupContainerViewController_thumbnailViewDidCollapse_);
}

uint64_t MarkupContainerViewController.documentView(_:drawingWillChangeIn:)()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
  uint64_t result = swift_beginAccess();
  if ((*v1 & 1) == 0) {
    *(unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup) = 1;
  }
  return result;
}

uint64_t MarkupContainerViewController.documentView(_:shouldOpenLink:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x210550400](v2);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = v3;
  if ((objc_msgSend(v3, sel_respondsToSelector_, sel_markupContainerViewController_shouldOpenLink_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    return 1;
  }
  URL._bridgeToObjectiveC()(v5);
  uint64_t v7 = v6;
  id v8 = objc_msgSend(v4, sel_markupContainerViewController_shouldOpenLink_, v1, v6);
  swift_unknownObjectRelease();

  return (uint64_t)v8;
}

void protocol witness for PaperDocumentViewControllerDelegate.documentViewController(_:didSetupDocumentView:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2)
{
}

void *protocol witness for PaperDocumentViewDelegate.documentView(_:willPresentViewController:animated:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for PaperDocumentViewDelegate.documentView(_:willPresentViewController:animated:) in conformance MarkupContainerViewController(a1, a2, a3, a4, a5, (SEL *)&selRef_markupContainerViewController_willPresentViewControllerWithAnimation_);
}

void *protocol witness for PaperDocumentViewDelegate.documentView(_:didDismissViewController:animated:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for PaperDocumentViewDelegate.documentView(_:willPresentViewController:animated:) in conformance MarkupContainerViewController(a1, a2, a3, a4, a5, (SEL *)&selRef_markupContainerViewController_didDismissViewControllerWithAnimation_);
}

void *protocol witness for PaperDocumentViewDelegate.documentView(_:willPresentViewController:animated:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v9 = v6 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x210550400](v9);
  if (result)
  {
    id v11 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, *a6)) {
      objc_msgSend(v11, *a6, v6, a3 & 1);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *protocol witness for PaperDocumentViewDelegate.documentView(_:thumbnailViewDidCollapse:) in conformance MarkupContainerViewController(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperDocumentViewDelegate.documentView(_:thumbnailViewDidCollapse:) in conformance MarkupContainerViewController(a1, a2, a3, a4, (SEL *)&selRef_markupContainerViewController_thumbnailViewDidCollapse_);
}

uint64_t protocol witness for PaperDocumentViewDelegate.documentView(_:drawingWillChangeIn:) in conformance MarkupContainerViewController()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
  uint64_t result = swift_beginAccess();
  if ((*v1 & 1) == 0) {
    *(unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup) = 1;
  }
  return result;
}

void MarkupContainerViewController.sourceContentType(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v11);
  char v13 = (uint64_t *)((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  id v15 = (void *)*MEMORY[0x263F0F600];
  *(void *)(inited + 32) = *MEMORY[0x263F0F600];
  *(unsigned char *)(inited + 40) = 0;
  id v16 = v15;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  v17.super.CFDataRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  outlined init with copy of DataOrURL(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v10, v13, v7);
    URL._bridgeToObjectiveC()(v18);
    CFURLRef v20 = v19;
    CGImageSourceRef v21 = CGImageSourceCreateWithURL(v19, v17.super.isa);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    uint64_t v22 = *v13;
    unint64_t v23 = v13[1];
    CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
    id v25 = v17.super.isa;
    CGImageSourceRef v21 = CGImageSourceCreateWithData(isa, v25);
    outlined consume of Data._Representation(v22, v23);
  }
  uint64_t v26 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a2, 1, 1, v26);
  if (v21)
  {
    double v27 = v21;
    CFStringRef v28 = (id)CGImageSourceGetType(v27);
    if (v28
      && (double v29 = (__CFString *)v28,
          uint64_t v30 = 0,
          uint64_t v31 = 0,
          static String._conditionallyBridgeFromObjectiveC(_:result:)(),
          v29,
          v31))
    {
      UTType.init(_:)();

      outlined destroy of StocksKitCurrencyCache.Provider?(a2, &demangling cache variable for type metadata for UTType?);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v6, a2, &demangling cache variable for type metadata for UTType?);
    }
    else
    {
    }
  }
  else
  {
  }
}

uint64_t closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(double *)(v9 + 232) = a1;
  *(void *)(v9 + 22MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = v15;
  *(_OWORD *)(v9 + 208) = v14;
  *(unsigned char *)(v9 + 312) = a9;
  *(void *)(v9 + 192) = a7;
  *(void *)(v9 + 200) = a8;
  *(void *)(v9 + 176) = a5;
  *(void *)(v9 + 18MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = a6;
  type metadata accessor for MainActor();
  *(void *)(v9 + 240) = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 248) = v11;
  *(void *)(v9 + 256) = v10;
  return MEMORY[0x270FA2498](closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:), v11, v10);
}

uint64_t closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)()
{
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = *(void *)(v0 + 176);
    swift_release();
    if (v1)
    {
      uint64_t v2 = *(void (**)(void))(v0 + 176);
      lazy protocol witness table accessor for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError();
      uint64_t v3 = (void *)swift_allocError();
      *uint64_t v4 = 1;
      v2();
    }
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(v0 + 192) + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  *(void *)(v0 + 26MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = v6;
  if (!v6)
  {
    swift_release();
LABEL_13:
    CFURLRef v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 176);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A48]), sel_init);
  *(void *)(v0 + 272) = v10;
  objc_msgSend(v10, sel_setMaxConcurrentOperationCount_, 1);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  objc_msgSend(v10, sel_setUnderlyingQueue_, v11);

  objc_msgSend(v10, sel_setSuspended_, 1);
  uint64_t v12 = OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue;
  *(void *)(v0 + 280) = OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue;
  uint64_t v13 = *(void **)(v7 + v12);
  *(void *)(v7 + v12) = v10;
  id v14 = v10;

  if (v8 && v9) {
    (*(void (**)(void))(v0 + 176))(0);
  }
  if (*(unsigned char *)(v0 + 312) == 1)
  {
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v15;
    *uint64_t v15 = v0;
    v15[1] = closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:);
    uint64_t v16 = *(void *)(v0 + 216);
    uint64_t v17 = *(void *)(v0 + 224);
    uint64_t v18 = *(void *)(v0 + 208);
    return specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:)(v18, v16, v17);
  }
  else
  {
    CGImageSourceRef v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 30MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = v21;
    *CGImageSourceRef v21 = v0;
    v21[1] = closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:);
    uint64_t v22 = *(void *)(v0 + 208);
    return MarkupContainerViewController.loadPDF(from:)(v22);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 256);
  uint64_t v4 = *(void *)(v2 + 248);
  if (v0) {
    uint64_t v5 = closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:);
  }
  else {
    uint64_t v5 = closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  double *v0;
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t (*v23)(void);
  uint64_t v25;

  swift_release();
  if (*((void *)v0 + 25))
  {
    if (one-time initialization token for isQuickLookUIExtension != -1) {
      swift_once();
    }
    uint64_t v1 = 0.25;
    if (static NSBundle.isQuickLookUIExtension == 1)
    {
      uint64_t v2 = v0[29];
      uint64_t v3 = v2 - CACurrentMediaTime() + 0.5;
      uint64_t v1 = v3 < 0.0 ? 0.0 : v3;
      if (v1 < 0.25) {
        uint64_t v1 = 0.25;
      }
    }
    uint64_t v4 = *((void *)v0 + 33);
    uint64_t v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v6 = *(void **)(v4 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
    if (v6)
    {
      uint64_t v7 = (void *)*((void *)v0 + 33);
      uint64_t v8 = self;
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v6;
      *((void *)v0 + 6) = partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
      *((void *)v0 + 7) = v9;
      *((void *)v0 + 2) = MEMORY[0x263EF8330];
      *((void *)v0 + 3) = 1107296256;
      *((void *)v0 + MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *((void *)v0 + 5) = &block_descriptor_251;
      id v10 = _Block_copy(v0 + 2);
      uint64_t v11 = v6;
      swift_retain();
      swift_release();
      uint64_t v12 = (void *)swift_allocObject();
      v12[2] = v11;
      v12[3] = v7;
      v12[4] = partial apply for closure #1 in closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:);
      v12[5] = v5;
      *((void *)v0 + 12) = partial apply for closure #2 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
      *((void *)v0 + 13) = v12;
      *((void *)v0 + 8) = MEMORY[0x263EF8330];
      *((void *)v0 + MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_setActiveInteractionTypes_, 9) = 1107296256;
      *((void *)v0 + 10) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      *((void *)v0 + 11) = &block_descriptor_257;
      uint64_t v13 = _Block_copy(v0 + 8);
      id v14 = v11;
      uint64_t v15 = v7;
      swift_retain();
      swift_release();
      objc_msgSend(v8, sel_animateWithDuration_delay_options_animations_completion_, 0, v10, v13, 0.25, v1);

      _Block_release(v13);
      _Block_release(v10);
      swift_release_n();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    uint64_t v16 = (void (*)(void))*((void *)v0 + 22);
    if (v16) {
      v16(0);
    }
    MarkupContainerViewController.updateFirstResponderIfNecessary()();
  }
  uint64_t v17 = *((void *)v0 + 35);
  uint64_t v18 = *((void *)v0 + 33);
  MarkupContainerViewController.updateGestures()();
  CFURLRef v19 = *(void **)(v18 + v17);
  CFURLRef v20 = (void *)*((void *)v0 + 33);
  CGImageSourceRef v21 = (void *)*((void *)v0 + 34);
  if (v19)
  {
    uint64_t v22 = v19;
    objc_msgSend(v22, sel_setSuspended_, 0);
  }
  else
  {
  }
  uint64_t v23 = (uint64_t (*)(void))*((void *)v0 + 1);
  return v23();
}

{
  double *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t (*v36)(void);
  uint64_t v38;
  double *v39;
  uint64_t v40;

  double v39 = v0;
  swift_release();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)*((void *)v0 + 37);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)*((void *)v0 + 37);
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    id v10 = swift_slowAlloc();
    uint64_t v38 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_getErrorValue();
    uint64_t v11 = Error.localizedDescription.getter();
    *((void *)v0 + 21) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20C2D7000, v5, v6, "Unable to load image: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v10, -1, -1);
    MEMORY[0x210550270](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = (void *)*((void *)v0 + 37);
  if (*((void *)v0 + 25))
  {
    if (one-time initialization token for isQuickLookUIExtension != -1) {
      swift_once();
    }
    id v14 = 0.25;
    if (static NSBundle.isQuickLookUIExtension == 1)
    {
      uint64_t v15 = v0[29];
      uint64_t v16 = v15 - CACurrentMediaTime() + 0.5;
      id v14 = v16 < 0.0 ? 0.0 : v16;
      if (v14 < 0.25) {
        id v14 = 0.25;
      }
    }
    uint64_t v17 = *((void *)v0 + 33);
    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    CFURLRef v19 = *(void **)(v17 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
    if (v19)
    {
      CFURLRef v20 = (void *)*((void *)v0 + 33);
      CGImageSourceRef v21 = self;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v19;
      *((void *)v0 + 6) = partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
      *((void *)v0 + 7) = v22;
      *((void *)v0 + 2) = MEMORY[0x263EF8330];
      *((void *)v0 + 3) = 1107296256;
      *((void *)v0 + MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *((void *)v0 + 5) = &block_descriptor_251;
      uint64_t v23 = _Block_copy(v0 + 2);
      double v24 = v19;
      swift_retain();
      swift_release();
      id v25 = (void *)swift_allocObject();
      void v25[2] = v24;
      v25[3] = v20;
      v25[4] = partial apply for closure #1 in closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:);
      v25[5] = v18;
      *((void *)v0 + 12) = partial apply for closure #2 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
      *((void *)v0 + 13) = v25;
      *((void *)v0 + 8) = MEMORY[0x263EF8330];
      *((void *)v0 + MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_setActiveInteractionTypes_, 9) = 1107296256;
      *((void *)v0 + 10) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      *((void *)v0 + 11) = &block_descriptor_257;
      uint64_t v26 = _Block_copy(v0 + 8);
      double v27 = v24;
      CFStringRef v28 = v20;
      swift_retain();
      swift_release();
      objc_msgSend(v21, sel_animateWithDuration_delay_options_animations_completion_, 0, v23, v26, 0.25, v14);

      _Block_release(v26);
      _Block_release(v23);
      swift_release_n();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    double v29 = (void (*)(void))*((void *)v0 + 22);
    if (v29) {
      v29(*((void *)v0 + 37));
    }
    MarkupContainerViewController.updateFirstResponderIfNecessary()();
  }
  uint64_t v30 = *((void *)v0 + 35);
  uint64_t v31 = *((void *)v0 + 33);
  MarkupContainerViewController.updateGestures()();
  uint64_t v32 = *(void **)(v31 + v30);
  unint64_t v33 = (void *)*((void *)v0 + 33);
  unint64_t v34 = (void *)*((void *)v0 + 34);
  if (v32)
  {
    uint64_t v35 = v32;
    objc_msgSend(v35, sel_setSuspended_, 0);
  }
  else
  {
  }
  uint64_t v36 = (uint64_t (*)(void))*((void *)v0 + 1);
  return v36();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 256);
  uint64_t v3 = *(void *)(v1 + 248);
  return MEMORY[0x270FA2498](closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:), v3, v2);
}

uint64_t MarkupContainerViewController.loadPDF(from:)(uint64_t a1)
{
  v2[23] = a1;
  v2[24] = v1;
  type metadata accessor for DataOrURL();
  v2[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  v2[26] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[27] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](MarkupContainerViewController.loadPDF(from:), v4, v3);
}

id MarkupContainerViewController.loadPDF(from:)()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v3 = *(unsigned char **)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 184);
  swift_release();
  uint64_t v5 = type metadata accessor for CRAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
  uint64_t v6 = (uint64_t)&v3[OBJC_IVAR___PPKMarkupContainerViewController_originalAsset];
  swift_beginAccess();
  outlined assign with take of CRAsset?(v1, v6);
  swift_endAccess();
  type metadata accessor for CRContext();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  uint64_t v7 = (void *)MEMORY[0x21054C990](0, v0 + 16);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined init with copy of DataOrURL(v4, v2, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  unsigned __int8 v37 = v3[OBJC_IVAR___PPKMarkupContainerViewController_editingMode];
  id v8 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController(0));
  id v9 = v7;
  id v10 = specialized PaperDocumentViewController.init(withDataOrURL:context:editingMode:)(v2, v9, &v37);

  uint64_t v11 = *(void **)&v3[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController];
  *(void *)&v3[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController] = v10;
  uint64_t v12 = (char *)v10;

  id v13 = objc_msgSend(v3, sel_traitCollection);
  id v14 = objc_msgSend(v13, sel_horizontalSizeClass);

  uint64_t v15 = &v12[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_isThumbnailViewCollapsed];
  swift_beginAccess();
  char v16 = *v15;
  *uint64_t v15 = v14 == (id)1;
  PaperDocumentViewController.isThumbnailViewCollapsed.didset(v16);
  uint64_t v17 = &v12[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_delegate];
  swift_beginAccess();
  *((void *)v17 + 1) = &protocol witness table for MarkupContainerViewController;
  swift_unknownObjectWeakAssign();
  uint64_t v18 = &v12[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
  swift_beginAccess();
  uint64_t v19 = *(void *)v18;
  if (*(void *)v18)
  {
    if (MEMORY[0x210550400](v17)) {
      uint64_t v20 = *(void *)(*((void *)v17 + 1) + 8);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = v19 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    *(void *)(v21 + 8) = v20;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  id result = objc_msgSend(v12, sel_view);
  if (!result)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v23 = result;
  uint64_t v24 = *(void *)(v0 + 192);
  objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v25 = *(void **)(v24 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
  uint64_t v26 = *(void **)(v0 + 192);
  if (v25)
  {
    id v27 = v25;
    id result = objc_msgSend(v26, sel_view);
    if (!result)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    CFStringRef v28 = result;
    id result = objc_msgSend(v12, sel_view);
    if (!result)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    double v29 = result;
    objc_msgSend(v28, sel_insertSubview_belowSubview_, result, v27);
  }
  else
  {
    id result = objc_msgSend(*(id *)(v0 + 192), sel_view);
    if (!result)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    CFStringRef v28 = result;
    id result = objc_msgSend(v12, sel_view);
    if (!result)
    {
LABEL_25:
      __break(1u);
      return result;
    }
    double v29 = result;
    objc_msgSend(v28, sel_addSubview_, result);
  }

  id result = objc_msgSend(v12, sel_view);
  if (!result) {
    goto LABEL_20;
  }
  uint64_t v30 = result;
  id result = objc_msgSend(*(id *)(v0 + 192), sel_view);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v31 = result;
  uint64_t v32 = *(char **)(v0 + 192);
  specialized static NSLayoutConstraint.constrain(_:to:)(v30, result);

  objc_msgSend(v32, sel_addChildViewController_, v12);
  objc_msgSend(v12, sel_didMoveToParentViewController_, v32);
  uint64_t v33 = *(void *)&v12[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<Capsule<PaperDocument>, Never>>);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v33;
  *(void *)(v0 + 176) = v34;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  uint64_t v35 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)&v32[OBJC_IVAR___PPKMarkupContainerViewController_pdfCancellable] = v35;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v36();
}

void closure #1 in closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    MarkupContainerViewController.updateFirstResponderIfNecessary()();
  }
}

void closure #1 in MarkupContainerViewController.loadPDF(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v11 = (void *)MEMORY[0x210550400](a2 + 16);
  if (v11)
  {
    uint64_t v12 = v11;
    if (*((unsigned char *)v11 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v18 = static OS_dispatch_queue.main.getter();
      uint64_t v13 = swift_allocObject();
      uint64_t v19 = v4;
      uint64_t v20 = v7;
      uint64_t v14 = v13;
      swift_unknownObjectWeakInit();
      aBlock[4] = partial apply for closure #1 in closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:);
      aBlock[5] = v14;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_270;
      uint64_t v15 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v21 = MEMORY[0x263F8EE78];
      _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      char v16 = (void *)v18;
      MEMORY[0x21054DA10](0, v10, v6, v15);
      _Block_release(v15);

      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v3);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

void closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v11 = (void *)MEMORY[0x210550400](a2 + 16);
  if (v11)
  {
    uint64_t v12 = v11;
    if (*((unsigned char *)v11 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v19 = static OS_dispatch_queue.main.getter();
      uint64_t v13 = swift_allocObject();
      uint64_t v20 = v4;
      uint64_t v14 = v13;
      swift_beginAccess();
      uint64_t v15 = (void *)MEMORY[0x210550400](a2 + 16);
      swift_unknownObjectWeakInit();

      aBlock[4] = partial apply for closure #1 in closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:);
      aBlock[5] = v14;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_265;
      char v16 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v21 = MEMORY[0x263F8EE78];
      _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      uint64_t v18 = v7;
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v17 = (void *)v19;
      MEMORY[0x21054DA10](0, v10, v6, v16);
      _Block_release(v16);

      (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v3);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v18);
      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

void closure #1 in closure #1 in MarkupContainerViewController.loadPDF(from:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (unsigned char *)v2;
    uint64_t v4 = v2 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
    swift_beginAccess();
    uint64_t v5 = (void *)MEMORY[0x210550400](v4);
    if (v5)
    {
      uint64_t v6 = v5;
      if (objc_msgSend(v5, sel_respondsToSelector_, sel_markupContainerViewControllerDidChangeContent_enablingMarkup_))objc_msgSend(v6, sel_markupContainerViewControllerDidChangeContent_enablingMarkup_, v3, v3[OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup]); {
      swift_unknownObjectRelease();
      }
      v3[OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup] = 0;
    }
  }
}

uint64_t PPKZeroCallbackCounter.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

void MarkupContainerViewController.canvasElement(_:detectedFormInContent:withAutofill:)(void *a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void **)(v3 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
  if (v5)
  {
    type metadata accessor for AnyCanvasElementViewController();
    id v9 = v5;
    id v10 = a1;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if (a1)
    {
      uint64_t v11 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
      swift_beginAccess();
      uint64_t v12 = (void *)MEMORY[0x210550400](v11);
      if (v12)
      {
        uint64_t v13 = v12;
        if (objc_msgSend(v12, sel_respondsToSelector_, sel_markupContainerViewController_detectedFormInContent_withAutofill_))objc_msgSend(v13, sel_markupContainerViewController_detectedFormInContent_withAutofill_, v4, a2 & 1, a3 & 1); {
        swift_unknownObjectRelease();
        }
      }
    }
  }
}

void *MarkupContainerViewController.documentView(_:openFormFilling:)()
{
  uint64_t v1 = v0 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  id result = (void *)MEMORY[0x210550400](v1);
  if (result)
  {
    uint64_t v3 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, sel_markupContainerViewController_openFormFilling_))objc_msgSend(v3, sel_markupContainerViewController_openFormFilling_, v0, 1); {
    return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

void __swiftcall MarkupContainerViewController.viewForZooming(in:)(UIView_optional *__return_ptr retstr, UIScrollView *in)
{
  id v2 = [(UIScrollView *)in subviews];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5) {
      goto LABEL_6;
    }
  }
  else if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    MEMORY[0x21054E050](0, v3);
    goto LABEL_6;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v4 = *(id *)(v3 + 32);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t MarkupContainerViewController.canvasDrawingWillChange(_:)()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled);
  uint64_t result = swift_beginAccess();
  if ((*v1 & 1) == 0) {
    *(unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup) = 1;
  }
  return result;
}

void *MarkupContainerViewController.canvas(_:wantsToEnterFullscreen:)(uint64_t a1, char a2)
{
  return MarkupContainerViewController.documentView(_:thumbnailViewDidCollapse:)(a1, a2, (SEL *)&selRef_markupContainerViewController_wantsToEnterFullscreen_);
}

void *MarkupContainerViewController.documentView(_:thumbnailViewDidCollapse:)(uint64_t a1, char a2, SEL *a3)
{
  uint64_t v6 = v3 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x210550400](v6);
  if (result)
  {
    uint64_t v8 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, *a3)) {
      objc_msgSend(v8, *a3, v3, a2 & 1);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

BOOL MarkupContainerViewController.canvasCanSnapshot(_:)()
{
  return *(unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode) == 3;
}

void *MarkupContainerViewController.documentView(_:contentFrameDidChange:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x210550400](v9);
  if (result)
  {
    uint64_t v11 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, sel_markupContainerViewController_contentFrameDidChange_))objc_msgSend(v11, sel_markupContainerViewController_contentFrameDidChange_, v4, a1, a2, a3, a4); {
    return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

void *protocol witness for CanvasDelegate.canvas(_:wantsToEnterFullscreen:) in conformance MarkupContainerViewController(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperDocumentViewDelegate.documentView(_:thumbnailViewDidCollapse:) in conformance MarkupContainerViewController(a1, a2, a3, a4, (SEL *)&selRef_markupContainerViewController_wantsToEnterFullscreen_);
}

void *protocol witness for PaperDocumentViewDelegate.documentView(_:thumbnailViewDidCollapse:) in conformance MarkupContainerViewController(uint64_t a1, char a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8 = v5 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x210550400](v8);
  if (result)
  {
    id v10 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, *a5)) {
      objc_msgSend(v10, *a5, v5, a2 & 1);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

BOOL protocol witness for CanvasDelegate.canvasCanSnapshot(_:) in conformance MarkupContainerViewController()
{
  return *(unsigned char *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode) == 3;
}

uint64_t one-time initialization function for isQuickLookUIExtension()
{
  uint64_t result = closure #1 in variable initialization expression of static NSBundle.isQuickLookUIExtension();
  static NSBundle.isQuickLookUIExtension = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of static NSBundle.isQuickLookUIExtension()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_mainBundle);
  id v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (v3 == 0xD000000000000027 && v5 == 0x800000020C855500) {
      goto LABEL_9;
    }
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
  }
  id v8 = objc_msgSend(v0, sel_mainBundle);
  id v9 = objc_msgSend(v8, sel_bundleIdentifier);

  if (!v9) {
    return 0;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (v10 == 0xD00000000000001FLL && v12 == 0x800000020C8554E0)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 1;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t one-time initialization function for isMarkupPhoteEditingExtension()
{
  uint64_t result = closure #1 in variable initialization expression of static NSBundle.isMarkupPhoteEditingExtension();
  static NSBundle.isMarkupPhoteEditingExtension = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of static NSBundle.isMarkupPhoteEditingExtension()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1) {
    return 0;
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  if (v2 == 0xD00000000000002ELL && v4 == 0x800000020C855530)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

void one-time initialization function for isLowJetsamLimitEnvironment()
{
  if (one-time initialization token for isMarkupPhoteEditingExtension != -1) {
    swift_once();
  }
  if (static NSBundle.isMarkupPhoteEditingExtension) {
    goto LABEL_7;
  }
  if (one-time initialization token for isQuickLookUIExtension != -1) {
    swift_once();
  }
  if (static NSBundle.isQuickLookUIExtension == 1)
  {
LABEL_7:
    id v0 = objc_msgSend(self, sel_currentDevice);
    id v1 = objc_msgSend(v0, sel_userInterfaceIdiom);

    BOOL v2 = v1 == 0;
  }
  else
  {
    BOOL v2 = 0;
  }
  static NSBundle.isLowJetsamLimitEnvironment = v2;
}

Swift::Bool __swiftcall AnyCanvas.canvasElementExists(at:)(CGPoint at)
{
  double y = at.y;
  double x = at.x;
  uint64_t v4 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x2F8);
  uint64_t v5 = (void *)v4();
  uint64_t v7 = v6;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(ObjectType, v7);

  if (v9 >> 62) {
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v11 = 4;
    while (1)
    {
      uint64_t v12 = (v9 & 0xC000000000000001) != 0
          ? (void *)MEMORY[0x21054E050](v11 - 4, v9)
          : *(id *)(v9 + 8 * v11);
      char v13 = v12;
      uint64_t v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1)) {
        break;
      }
      if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v12) + 0x218))())
      {
      }
      else
      {
        uint64_t v15 = (void *)v4();
        objc_msgSend(v13, sel_convertPoint_fromCoordinateSpace_, v15, x, y);
        double v17 = v16;
        double v19 = v18;

        id v20 = objc_msgSend(v13, sel_hitTest_withEvent_, 0, v17, v19);
        if (v20)
        {
          Swift::Bool v21 = 1;
          goto LABEL_16;
        }
      }
      ++v11;
      if (v14 == v10) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_15:
  Swift::Bool v21 = 0;
LABEL_16:
  swift_bridgeObjectRelease_n();
  return v21;
}

uint64_t __deallocating_deinit in ResultWrapped #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  return swift_deallocClassInstance();
}

void specialized CanvasElementViewController.updateActionInfoViewVisibility()()
{
  id v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  BOOL v2 = (char *)*v1;
  if (!*v1) {
    return;
  }
  uint64_t v3 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v3) {
    return;
  }
  uint64_t v4 = v2;
  id v5 = v3;
  id v6 = objc_msgSend(v5, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_5;
    }
LABEL_18:
    swift_bridgeObjectRelease();

    return;
  }
  if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_18;
  }
LABEL_5:
  if ((v7 & 0xC000000000000001) != 0)
  {
    id v8 = (id)MEMORY[0x21054E050](0, v7);
  }
  else
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v8 = *(id *)(v7 + 32);
  }
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();

  type metadata accessor for ImageElementView(0);
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v11 = v10;
  uint64_t v12 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.editingMode);
  swift_beginAccess();
  int v13 = *v12;
  uint64_t v14 = direct field offset for ImageElementView.mediaView;
  uint64_t v15 = *(void **)(v11 + direct field offset for ImageElementView.mediaView);
  if (v15)
  {
    id v16 = objc_msgSend(v15, sel_imageAnalysisContext);
    if (v16)
    {
      objc_msgSend(v16, sel_setActionInfoViewHidden_animated_, (v13 & 0xFFFFFFFD) == 1, 0);
      swift_unknownObjectRelease();
    }
  }
  if ((v13 | 2) == 3
    && (double v17 = *(void **)(v11 + v14)) != 0
    && (id v18 = objc_msgSend(v17, sel_imageAnalysisContext)) != 0)
  {
    objc_msgSend(v18, sel_setHighlightSelectableItemsEnabled_, 0);

    swift_unknownObjectRelease();
  }
  else
  {
LABEL_16:
  }
}

void specialized CanvasElementViewController.updateToolPickerVisibility()()
{
  uint64_t v1 = v0;
  BOOL v2 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v3 = (char *)*v2;
  if (*v2)
  {
    uint64_t v4 = &v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI];
    swift_beginAccess();
    uint64_t v5 = MEMORY[0x210550400](v4);
    if (v5)
    {
      id v6 = (void *)v5;
      type metadata accessor for AnyCanvasElementViewController();
      unint64_t v7 = (void *)swift_dynamicCastClass();
      if (!v7)
      {
LABEL_12:

        return;
      }
      id v8 = v7;
      if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x60))())
      {
        uint64_t v10 = v9;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 24);
        double v17 = v3;
        if (v12(v8, ObjectType, v10))
        {
          id v13 = (id)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 32))(v8, ObjectType, v10);

          swift_unknownObjectRelease();
          if (!v13)
          {
            id v6 = v17;
            goto LABEL_12;
          }
LABEL_11:
          uint64_t v15 = (unsigned __int8 *)(v1 + direct field offset for CanvasElementViewController.editingMode);
          swift_beginAccess();
          BOOL v16 = *v15 == 3;
          objc_msgSend(v13, sel_setVisible_forFirstResponder_, v16, v3);
          objc_msgSend(v13, sel_setVisible_forFirstResponder_, v16, v1);

          id v6 = v13;
          goto LABEL_12;
        }
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v14 = v3;
      }
      id v13 = *(id *)((char *)v8 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker);

      goto LABEL_11;
    }
  }
}

void specialized CanvasElementViewController.imageView.getter()
{
  uint64_t v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  BOOL v2 = (char *)*v1;
  if (!*v1) {
    return;
  }
  uint64_t v3 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v3) {
    return;
  }
  uint64_t v4 = v2;
  id v5 = v3;
  id v6 = objc_msgSend(v5, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();

    return;
  }
  if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v7 & 0xC000000000000001) != 0)
  {
    id v8 = (id)MEMORY[0x21054E050](0, v7);
  }
  else
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v8 = *(id *)(v7 + 32);
  }
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();

  type metadata accessor for ImageElementView(0);
  if (!swift_dynamicCastClass()) {
}
  }

void specialized CanvasElementViewController.isImageAnalysisEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for CanvasElementViewController.isImageAnalysisEnabled);
  swift_beginAccess();
  *uint64_t v3 = a1;
  uint64_t v4 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  id v5 = (char *)*v4;
  if (*v4)
  {
    id v6 = *(void **)&v5[direct field offset for CanvasView.zoomView];
    if (v6)
    {
      unint64_t v7 = v5;
      id v8 = v6;
      id v9 = objc_msgSend(v8, sel_subviews);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14) {
          goto LABEL_5;
        }
      }
      else if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_5:
        if ((v10 & 0xC000000000000001) != 0)
        {
          id v11 = (id)MEMORY[0x21054E050](0, v10);
        }
        else
        {
          if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          id v11 = *(id *)(v10 + 32);
        }
        id v12 = v11;
        swift_bridgeObjectRelease();

        type metadata accessor for ImageElementView(0);
        uint64_t v13 = swift_dynamicCastClass();
        if (v13)
        {
          *(unsigned char *)(v13 + direct field offset for ImageElementView.isImageAnalysisEnabled) = *v3;
          ImageElementView.updateMediaViewImageAnalysis()();
        }
        id v8 = v12;
        goto LABEL_13;
      }
      swift_bridgeObjectRelease();

LABEL_13:
    }
  }
}

id specialized CanvasElementViewController.updateViewForPaper(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRAssetOrData();
  uint64_t v233 = *(void *)(v3 - 8);
  uint64_t v234 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v232 = (uint64_t *)((char *)&v224 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v235 = (char *)&v224 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v242 = (char *)&v224 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v246);
  uint64_t v245 = (uint64_t)&v224 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v239 = (char *)&v224 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v240 = *(void *)(v12 - 8);
  uint64_t v241 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v238 = (char *)&v224 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v243 = *(void *)(v14 - 8);
  uint64_t v244 = v14;
  MEMORY[0x270FA5388](v14);
  BOOL v16 = (char *)&v224 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CRKeyPath();
  uint64_t v250 = *(void *)(v17 - 8);
  uint64_t v251 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v248 = (char *)&v224 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v249 = (char *)&v224 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  double v237 = (char *)&v224 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v247 = (char *)&v224 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v254 = (char *)&v224 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v224 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v224 - v32;
  uint64_t v252 = v1;
  uint64_t v34 = (void **)&v1[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  uint64_t v253 = v34;
  uint64_t v35 = *v34;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v33, &demangling cache variable for type metadata for Capsule<Image>?);
  if (v35 && (*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v33, 1, v21) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, &demangling cache variable for type metadata for Capsule<Image>?);
    id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
    unsigned __int8 v37 = v252;
    objc_msgSend(v252, sel_setView_, v36);

    uint64_t v38 = *v253;
    *uint64_t v253 = 0;

    specialized CanvasElementViewController.updateToolPickerVisibility()();
    specialized CanvasElementViewController.updateActionInfoViewVisibility()();
    uint64_t v39 = &v37[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate];
    swift_beginAccess();
    id result = (id)MEMORY[0x210550400](v39);
    if (result)
    {
      uint64_t v41 = *((void *)v39 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v37, ObjectType, v41);
      return (id)swift_unknownObjectRelease();
    }
    return result;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, &demangling cache variable for type metadata for Capsule<Image>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v30, &demangling cache variable for type metadata for Capsule<Image>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v30, 1, v21) == 1) {
    return (id)outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for Capsule<Image>?);
  }
  double v43 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v44 = v254;
  uint64_t v236 = v21;
  v43(v254, v30, v21);
  uint64_t v45 = *v253;
  uint64_t v230 = v16;
  uint64_t v231 = v22;
  if (v45)
  {
    uint64_t v227 = (char *)direct field offset for Canvas.paperView;
    uint64_t v46 = *(void *)((char *)v45 + direct field offset for Canvas.paperView)
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)((char *)v45 + direct field offset for Canvas.paperView))
                    + 0x380);
    swift_beginAccess();
    uint64_t v47 = v247;
    uint64_t v48 = v236;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v247, v46, v236);
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    id v229 = v45;
    unint64_t v49 = v249;
    Capsule<>.rootID.getter();
    uint64_t v228 = *(void (**)(char *, uint64_t))(v22 + 8);
    v228(v47, v48);
    uint64_t v50 = v248;
    Capsule<>.rootID.getter();
    LOBYTE(v46) = static CRKeyPath.== infix(_:_:)();
    uint64_t v51 = *(void (**)(char *, uint64_t))(v250 + 8);
    uint64_t v52 = v50;
    uint64_t v53 = v251;
    v51(v52, v251);
    v51(v49, v53);
    if (v46)
    {
      uint64_t v54 = *(void **)&v227[(void)v45];
      swift_beginAccess();
      _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
      id v55 = v54;
      Capsule.merge<A>(_:)();
      swift_endAccess();

      char v258 = 3;
      id v56 = v229;
      AnyCanvas.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v258);

      uint64_t v57 = v253;
    }
    else
    {
      uint64_t v57 = v253;
      double v58 = *v253;
      *uint64_t v253 = 0;

      specialized CanvasElementViewController.updateToolPickerVisibility()();
      specialized CanvasElementViewController.updateActionInfoViewVisibility()();
    }
    uint64_t v44 = v254;
    if (*v57) {
      return (id)((uint64_t (*)(char *, uint64_t))v228)(v254, v236);
    }
  }
  double v59 = v252;
  id v60 = *(id *)&v252[direct field offset for CanvasElementViewController.context];
  id result = objc_msgSend(v59, sel_view);
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v61 = result;
  objc_msgSend(result, sel_bounds);
  double v63 = v62;
  double v65 = v64;
  double v67 = v66;
  double v69 = v68;

  uint64_t v70 = v247;
  uint64_t v228 = *(void (**)(char *, uint64_t))(v231 + 16);
  id v229 = (id)(v231 + 16);
  ((void (*)(char *, char *, uint64_t))v228)(v247, v44, v236);
  unint64_t v71 = &v59[direct field offset for CanvasElementViewController.editingMode];
  swift_beginAccess();
  int v72 = v59[direct field offset for CanvasElementViewController.allowMediaCanvasElements];
  int v73 = v59[direct field offset for CanvasElementViewController.transparentBackground];
  LODWORD(v71) = *v71;
  id v74 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasView<Image>));
  uint64_t v75 = v59;
  specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(v60, v70, (int)v71, v72, v73, v59, v63, v65, v67, v69);
  unint64_t v77 = v76;
  id v78 = &v75[direct field offset for CanvasElementViewController.liveStreamDrawings];
  swift_beginAccess();
  LOBYTE(v71) = *v78;
  uint64_t v79 = (unsigned __int8 *)v77 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings;
  swift_beginAccess();
  *uint64_t v79 = v71;
  id v80 = (char *)direct field offset for CanvasView.canvasTiledView;
  uint64_t v81 = *(void **)((char *)v77 + direct field offset for CanvasView.canvasTiledView);
  if (v81)
  {
    id v82 = v77;
    id v83 = objc_msgSend(v81, sel_canvasView);
    if (v83)
    {
      id v84 = v83;
      objc_msgSend(v83, sel_setGenerateLiveDrawing_, *v79);

      id v82 = v84;
    }
  }
  uint64_t v85 = (char *)v77 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI;
  swift_beginAccess();
  uint64_t v86 = MEMORY[0x210550400](v85);
  if (v86)
  {
    id v87 = (id)v86;
    type metadata accessor for AnyCanvasElementViewController();
    unint64_t v88 = (void *)swift_dynamicCastClass();
    if (!v88)
    {
LABEL_27:

      goto LABEL_28;
    }
    unint64_t v89 = v88;
    if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v88) + 0x60))())
    {
      uint64_t v91 = v90;
      uint64_t v92 = swift_getObjectType();
      if ((*(uint64_t (**)(void *, uint64_t, uint64_t))(v91 + 24))(v89, v92, v91))
      {
        id v93 = (id)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v91 + 32))(v89, v92, v91);

        swift_unknownObjectRelease();
        if (!v93) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
      swift_unknownObjectRelease();
    }
    id v93 = *(id *)((char *)v89 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker);

LABEL_26:
    objc_msgSend(v93, sel_addObserver_, v77);
    id v94 = specialized CanvasView.toolPickerObserver.getter();
    objc_msgSend(v93, sel_addObserver_, v94);

    id v87 = specialized CanvasView.toolPickerObserver.getter();
    specialized CanvasViewToolPickerObserver.updateUI(toolPicker:)(v93);

    goto LABEL_27;
  }
LABEL_28:
  uint64_t v252 = v80;
  uint64_t v95 = &v75[direct field offset for CanvasElementViewController.liveStreamMessenger];
  swift_beginAccess();
  uint64_t v96 = *(void *)v95;
  uint64_t v97 = *((void *)v95 + 1);
  uint64_t v98 = (char *)v77 + direct field offset for Canvas.liveStreamMessenger;
  swift_beginAccess();
  *uint64_t v98 = v96;
  v98[1] = v97;
  swift_unknownObjectRetain_n();
  int v99 = v77;
  swift_unknownObjectRelease();
  specialized Canvas.liveStreamMessenger.didset();

  swift_unknownObjectRelease();
  uint64_t v100 = &v75[direct field offset for CanvasElementViewController.participantDetailsDataSource];
  swift_beginAccess();
  MEMORY[0x210550400](v100);
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v102 = &v99[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource];
  swift_beginAccess();
  *((void *)v102 + 1) = v101;
  swift_unknownObjectWeakAssign();
  uint64_t v103 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView;
  uint64_t v104 = *(void **)&v99[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView];
  uint64_t v105 = v99;
  objc_msgSend(v104, sel_setNeedsLayout);

  swift_unknownObjectRelease();
  uint64_t v106 = &v75[direct field offset for CanvasElementViewController.showParticipantCursors];
  swift_beginAccess();
  char v107 = *v106;
  uint64_t v108 = &v105[OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors];
  swift_beginAccess();
  *uint64_t v108 = v107;
  objc_msgSend(*(id *)&v99[v103], sel_setNeedsLayout);
  uint64_t v109 = &v75[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate];
  swift_beginAccess();
  uint64_t v110 = MEMORY[0x210550400](v109);
  uint64_t v247 = v109;
  if (v110) {
    uint64_t v111 = *(void *)(*((void *)v109 + 1) + 8);
  }
  else {
    uint64_t v111 = 0;
  }
  long long v112 = v252;
  long long v113 = &v105[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
  swift_beginAccess();
  *((void *)v113 + 1) = v111;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  uint64_t v114 = *(void **)&v112[(void)v77];
  if (!v114)
  {
    uint64_t v116 = (void **)&v105[direct field offset for Canvas._canvasElementController];
    char v117 = *(unsigned char **)&v105[direct field offset for Canvas._canvasElementController];
    if (!v117) {
      goto LABEL_63;
    }
    goto LABEL_42;
  }
  uint64_t v115 = (unsigned __int8 *)&v75[direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled];
  swift_beginAccess();
  objc_msgSend(v114, sel_setSixChannelBlending_, *v115);
  uint64_t v116 = (void **)&v105[direct field offset for Canvas._canvasElementController];
  char v117 = *(unsigned char **)&v105[direct field offset for Canvas._canvasElementController];
  if (v117)
  {
LABEL_42:
    uint64_t v124 = v117;
    goto LABEL_43;
  }
  swift_getObjectType();
  uint64_t v118 = swift_conformsToProtocol2();
  if (v118) {
    uint64_t v119 = v118;
  }
  else {
    uint64_t v119 = 0;
  }
  if (v118) {
    uint64_t v120 = v114;
  }
  else {
    uint64_t v120 = 0;
  }
  if (v120)
  {
    uint64_t v121 = swift_getObjectType();
    uint64_t v225 = *(uint64_t (**)(uint64_t, uint64_t))(v119 + 48);
    uint64_t v226 = v121;
    uint64_t v227 = v105;
    id v122 = v114;
    uint64_t v123 = v225(v226, v119);
    long long v112 = v252;
    uint64_t v124 = (unsigned char *)v123;

    char v117 = 0;
LABEL_43:
    uint64_t v125 = &v75[direct field offset for CanvasElementViewController.canEditDescription];
    swift_beginAccess();
    char v126 = *v125;
    v124[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditDescription] = *v125;
    char v127 = *(void **)&v124[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    uint64_t v128 = v117;
    if (v127)
    {
      id v129 = v127;
      uint64_t v130 = ToolPickerController.textToolListViewController.getter();
      v130[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible] = v126;
      TextToolListViewController.updateUI()();
    }
    else
    {
      uint64_t v130 = v124;
    }
  }
  uint64_t v131 = *v116;
  char v132 = v131;
  if (v131)
  {
LABEL_48:
    uint64_t v133 = &v75[direct field offset for CanvasElementViewController.canEditVellumOpacity];
    swift_beginAccess();
    char v134 = *v133;
    v132[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity] = *v133;
    uint64_t v135 = *(void **)&v132[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    uint64_t v136 = v131;
    if (v135)
    {
      id v137 = v135;
      uint64_t v138 = ToolPickerController.textToolListViewController.getter();
      v138[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = v134;
      TextToolListViewController.updateUI()();
    }
    else
    {
      uint64_t v138 = v132;
    }

    goto LABEL_61;
  }
  uint64_t v139 = *(void **)&v112[(void)v77];
  if (!v139) {
    goto LABEL_63;
  }
  swift_getObjectType();
  uint64_t v140 = swift_conformsToProtocol2();
  if (v140) {
    uint64_t v141 = v140;
  }
  else {
    uint64_t v141 = 0;
  }
  if (v140) {
    char v142 = v139;
  }
  else {
    char v142 = 0;
  }
  if (v142)
  {
    uint64_t v143 = swift_getObjectType();
    uint64_t v225 = *(uint64_t (**)(uint64_t, uint64_t))(v141 + 48);
    uint64_t v226 = v143;
    uint64_t v227 = v105;
    id v144 = v139;
    uint64_t v145 = v225(v226, v141);
    long long v112 = v252;
    char v132 = (unsigned char *)v145;

    goto LABEL_48;
  }
LABEL_61:
  uint64_t v146 = *(void **)&v112[(void)v77];
  if (v146) {
    objc_msgSend(v146, sel_setRulerHostingDelegate_, *(void *)&v75[direct field offset for CanvasElementViewController._rulerHostingDelegate]);
  }
LABEL_63:
  char v147 = self;
  id v148 = objc_msgSend(v147, sel_mainBundle);
  id v149 = objc_msgSend(v148, sel_bundleIdentifier);

  if (v149)
  {
    uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v152 = v151;

    if (v150 == 0xD000000000000011 && v152 == 0x800000020C8555B0) {
      goto LABEL_70;
    }
    char v153 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v153)
    {
LABEL_71:
      type metadata accessor for CanvasCalculateDocumentProxy();
      uint64_t v159 = swift_allocObject();
      *(unsigned char *)(v159 + 16) = 0;
      uint64_t v160 = MEMORY[0x263F8EE78];
      *(void *)(v159 + 2MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      unint64_t v161 = specialized Dictionary.init(dictionaryLiteral:)(v160);
      *(void *)(v159 + 40) = 0;
      *(void *)(v159 + 48) = 0;
      *(void *)(v159 + 32) = v161;
      *(void *)(v159 + 56) = specialized Dictionary.init(dictionaryLiteral:)(v160);
      *(void *)(v159 + 6MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = 0;
      char v162 = (uint64_t *)&v105[direct field offset for CanvasView.calculateDocumentForTesting];
      *char v162 = v159;
      v162[1] = (uint64_t)&protocol witness table for CanvasCalculateDocumentProxy;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v163 = *(void **)&v105[direct field offset for Canvas._editingView];
      if (v163)
      {
        uint64_t v164 = *(_UNKNOWN ***)&v105[direct field offset for Canvas._editingView + 8];
        id v165 = *(id *)&v105[direct field offset for Canvas._editingView];
      }
      else
      {
        id v165 = *(id *)&v105[direct field offset for Canvas.paperView];
        uint64_t v164 = &protocol witness table for ContainerCanvasElementView<A>;
      }
      uint64_t v166 = swift_getObjectType();
      char v167 = (uint64_t (*)(uint64_t, _UNKNOWN **))v164[2];
      id v168 = v163;
      uint64_t v169 = (void *)v167(v166, v164);

      if (v169)
      {
        CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();
        swift_release();
      }
      else
      {
        swift_release();
      }
      goto LABEL_78;
    }
  }
  id v154 = objc_msgSend(v147, sel_mainBundle);
  id v155 = objc_msgSend(v154, sel_bundleIdentifier);

  if (v155)
  {
    uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v158 = v157;

    if (v156 == 0xD000000000000019 && v158 == 0x800000020C855590)
    {
LABEL_70:
      swift_bridgeObjectRelease();
      goto LABEL_71;
    }
    char v170 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v170) {
      goto LABEL_71;
    }
  }
LABEL_78:
  if (objc_msgSend(v75, sel_isFirstResponder)) {
    objc_msgSend(v105, sel_becomeFirstResponder);
  }
  objc_msgSend(v105, sel_setAutoresizingMask_, 18);
  objc_msgSend(v105, sel_setTranslatesAutoresizingMaskIntoConstraints_, 1);
  objc_msgSend(v75, sel_setView_, v105);
  uint64_t v171 = *v253;
  *uint64_t v253 = v105;
  char v172 = v105;

  specialized CanvasElementViewController.updateToolPickerVisibility()();
  specialized CanvasElementViewController.updateActionInfoViewVisibility()();

  specialized CanvasElementViewController.imageView.getter();
  if (v173)
  {
    uint64_t v174 = v173;
    uint64_t v175 = &v75[direct field offset for CanvasElementViewController.isImageAnalysisEnabled];
    swift_beginAccess();
    v174[direct field offset for ImageElementView.isImageAnalysisEnabled] = *v175;
    ImageElementView.updateMediaViewImageAnalysis()();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementViewController<Image>.MediaAnalysisObserver);
  uint64_t v176 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  specialized CanvasElementViewController.imageView.getter();
  if (v177)
  {
    uint64_t v178 = v177;
    uint64_t v179 = *(void **)&v177[direct field offset for ImageElementView.mediaView];
    if (v179)
    {
      swift_retain();
      id v180 = v179;
      id v181 = objc_msgSend(v180, sel_imageAnalysisContext);
      if (v181)
      {
        objc_msgSend(v181, sel_addAnalysisObserver_, v176);

        swift_release();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_release();
      }
    }
    else
    {
      swift_retain();
      id v182 = ImageElementView.pendingImageAnalysisObservers.getter();
      objc_msgSend(v182, sel_addObject_, v176);

      swift_release();
    }
  }
  *(void *)&v75[direct field offset for CanvasElementViewController.mediaAnalysisObserver] = v176;
  swift_retain();
  swift_release();
  specialized CanvasElementViewController.imageView.getter();
  uint64_t v253 = (void **)v176;
  if (v183
    && (uint64_t v184 = v183,
        uint64_t v185 = *(void **)&v183[direct field offset for ImageElementView.mediaView],
        id v186 = v185,
        v184,
        v185)
    && (id v187 = objc_msgSend(v186, sel_imageAnalysisContext), v186,
                                                                                                 v187))
  {
    id v188 = objc_msgSend(v187, sel_analysis);
    swift_unknownObjectRelease();
  }
  else
  {
    id v188 = 0;
  }
  uint64_t v189 = *(void **)&v75[direct field offset for CanvasElementViewController.analysis];
  *(void *)&v75[direct field offset for CanvasElementViewController.analysis] = v188;
  id v190 = v188;
  specialized CanvasElementViewController.analysis.didset(v189);

  swift_unknownObjectWeakInit();
  char v257 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Canvas<Image>.PaperViewCanvasPublisher>);
  uint64_t v191 = swift_allocObject();
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v256, v191 + 16, &demangling cache variable for type metadata for Canvas<Image>.PaperViewCanvasPublisher);
  uint64_t v256 = v191;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Capsule<Image>, Never>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type AnyPublisher<Capsule<Image>, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<Capsule<Image>, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<Capsule<Image>, Never>);
  uint64_t v192 = Publisher.subscribe<A>(_:)();
  swift_release();
  *(void *)&v75[direct field offset for CanvasElementViewController.canvasSubscribeCancellable] = v192;
  swift_release();
  uint64_t v193 = v247;
  if (MEMORY[0x210550400](v247))
  {
    uint64_t v194 = *((void *)v193 + 1);
    uint64_t v195 = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v194 + 16))(v75, v195, v194);
    swift_unknownObjectRelease();
  }
  uint64_t v252 = v75;
  uint64_t v196 = *(void *)&v172[direct field offset for Canvas.paperView]
       + *(void *)((*MEMORY[0x263F8EED0] & **(void **)&v172[direct field offset for Canvas.paperView]) + 0x380);
  swift_beginAccess();
  char v197 = v172;
  uint64_t v198 = v236;
  uint64_t v199 = v237;
  ((void (*)(char *, uint64_t, uint64_t))v228)(v237, v196, v236);
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  uint64_t v200 = (uint64_t)v239;
  Capsule<>.root.getter();
  uint64_t v201 = v249;
  Capsule<>.rootID.getter();
  char v255 = 1;
  uint64_t v203 = v250;
  uint64_t v202 = v251;
  (*(void (**)(char *, char *, uint64_t))(v250 + 16))(v248, v201, v251);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  uint64_t v204 = v238;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v203 + 8))(v201, v202);
  outlined destroy of DataOrURL(v200, (uint64_t (*)(void))type metadata accessor for Image);
  uint64_t v205 = v231 + 8;
  uint64_t v206 = *(void (**)(char *, uint64_t))(v231 + 8);
  v206(v199, v198);
  uint64_t v208 = v241;
  uint64_t v207 = (uint64_t)v242;
  SharedTagged_9.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v240 + 8))(v204, v208);
  uint64_t v210 = v243;
  uint64_t v209 = v244;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v243 + 48))(v207, 1, v244) == 1)
  {
    v206(v254, v198);

    swift_release();
    return (id)outlined destroy of StocksKitCurrencyCache.Provider?(v207, &demangling cache variable for type metadata for Ref<Image>?);
  }
  else
  {
    uint64_t v231 = v205;
    (*(void (**)(char *, uint64_t, uint64_t))(v210 + 32))(v230, v207, v209);
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
    uint64_t v211 = (uint64_t)v235;
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v233 + 48))(v211, 1, v234) == 1)
    {

      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v211, &demangling cache variable for type metadata for CRAssetOrData?);
    }
    else
    {
      char v212 = v232;
      outlined init with copy of DataOrURL(v211, (uint64_t)v232, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v213 = *v212;
        unint64_t v214 = v212[1];
        uint64_t v215 = v212;
        uint64_t v216 = v212[2];
        uint64_t v217 = v211;
        unint64_t v218 = v215[3];
        outlined destroy of DataOrURL(v217, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
        outlined copy of Data._Representation(v216, v218);
        outlined consume of Data._Representation(v213, v214);
        outlined consume of Data._Representation(v216, v218);
        id v219 = objc_allocWithZone(MEMORY[0x263F827E8]);
        outlined copy of Data._Representation(v216, v218);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v221 = objc_msgSend(v219, sel_initWithData_, isa);
        outlined consume of Data._Representation(v216, v218);

        Swift::String v222 = (void **)&v252[direct field offset for CanvasElementViewController.image];
        swift_beginAccess();
        uint64_t v223 = *v222;
        *Swift::String v222 = v221;
        uint64_t v198 = v236;

        outlined consume of Data._Representation(v216, v218);
      }
      else
      {
        outlined destroy of DataOrURL((uint64_t)v212, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
        outlined destroy of DataOrURL(v211, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      }

      swift_release();
    }
    outlined destroy of DataOrURL(v245, (uint64_t (*)(void))type metadata accessor for Image);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v230, v209);
    return (id)((uint64_t (*)(char *, uint64_t))v206)(v254, v198);
  }
}

void specialized CanvasElementViewController.merge<A>(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v11 = (char *)*v10;
  if (v11)
  {
    uint64_t v12 = *(void **)&v11[direct field offset for Canvas.paperView];
    swift_beginAccess();
    type metadata accessor for Image();
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    uint64_t v13 = v11;
    id v14 = v12;
    Capsule.merge<A>(_:)();
    swift_endAccess();

    v16[0] = 3;
    AnyCanvas.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)v16);
  }
  else
  {
    uint64_t v15 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16);
    v15(v9, a1, v6);
    v15(v5, (uint64_t)v9, v6);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    specialized CanvasElementViewController.updateViewForPaper(_:)((uint64_t)v5);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Capsule<Image>?);
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

void specialized CanvasElementViewController.bannerViewConfiguration.didset()
{
  uint64_t v1 = *(void **)&v0[direct field offset for CanvasElementViewController.bannerViewConfiguration];
  if (!v1) {
    return;
  }
  BOOL v2 = v0;
  uint64_t v3 = direct field offset for CanvasElementViewController.bannerView;
  uint64_t v4 = *(void **)&v0[direct field offset for CanvasElementViewController.bannerView];
  id v39 = v1;
  if (!v4)
  {
    id v7 = v1;
    goto LABEL_6;
  }
  id v5 = v1;
  id v6 = objc_msgSend(v4, sel_superview);
  if (!v6)
  {
    uint64_t v8 = *(void **)&v2[v3];
    if (!v8) {
      goto LABEL_6;
    }
    uint64_t v9 = (void **)&v2[direct field offset for CanvasElementViewController.canvasView];
    swift_beginAccess();
    uint64_t v10 = *v9;
    if (v10) {
      objc_msgSend(v10, sel_addSubview_, v8);
    }
    else {
      id v11 = v8;
    }
    objc_msgSend(v8, sel_populateWithConfiguration_, v5, v39);
    objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v12 = objc_msgSend(v8, sel_bottomAnchor);
    id v13 = objc_msgSend(v2, sel_view);
    if (v13)
    {
      id v14 = v13;
      id v15 = objc_msgSend(v13, sel_safeAreaLayoutGuide);

      id v16 = objc_msgSend(v15, sel_topAnchor);
      id v17 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v16);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_20C837410;
      *(void *)(v18 + 32) = v17;
      id v40 = v17;
      id v19 = objc_msgSend(v8, sel_leadingAnchor);
      id v20 = objc_msgSend(v2, sel_view);
      if (v20)
      {
        uint64_t v21 = v20;
        id v22 = objc_msgSend(v20, sel_leadingAnchor);

        id v23 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v22);
        *(void *)(v18 + 40) = v23;
        id v24 = objc_msgSend(v8, sel_trailingAnchor);
        id v25 = objc_msgSend(v2, sel_view);
        if (v25)
        {
          uint64_t v26 = v25;
          uint64_t v27 = self;
          id v28 = objc_msgSend(v26, sel_safeAreaLayoutGuide);

          id v29 = objc_msgSend(v28, sel_trailingAnchor);
          id v30 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v29);

          *(void *)(v18 + 48) = v30;
          aBlock[0] = v18;
          specialized Array._endMutation()();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v27, sel_activateConstraints_, isa);

          id v32 = objc_msgSend(v2, sel_view);
          if (v32)
          {
            uint64_t v33 = v32;
            objc_msgSend(v32, sel_layoutIfNeeded);

            uint64_t v34 = (void *)swift_allocObject();
            _OWORD v34[2] = v40;
            v34[3] = v8;
            v34[4] = v2;
            aBlock[4] = partial apply for specialized closure #1 in CanvasElementViewController.bannerViewConfiguration.didset;
            aBlock[5] = v34;
            aBlock[0] = MEMORY[0x263EF8330];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            aBlock[3] = &block_descriptor_200;
            uint64_t v35 = _Block_copy(aBlock);
            id v36 = v8;
            id v37 = v40;
            uint64_t v38 = v2;
            swift_release();
            objc_msgSend(v36, sel_showWithAnimations_, v35);

            _Block_release(v35);
            return;
          }
LABEL_22:
          __break(1u);
          return;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
  id v39 = v6;

LABEL_6:
}

void specialized closure #1 in CanvasElementViewController.bannerViewConfiguration.didset(void *a1, void *a2, void *a3)
{
  objc_msgSend(a1, sel_setActive_, 0);
  id v5 = objc_msgSend(a2, sel_topAnchor);
  id v6 = objc_msgSend(a3, sel_view);
  if (!v6)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v7 = v6;
  id v8 = objc_msgSend(v6, sel_safeAreaLayoutGuide);

  id v9 = objc_msgSend(v8, sel_topAnchor);
  id v10 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v9);

  objc_msgSend(v10, sel_setActive_, 1);
  id v11 = objc_msgSend(a3, sel_view);
  if (!v11)
  {
LABEL_7:
    __break(1u);
    return;
  }
  id v12 = v11;
  objc_msgSend(v11, sel_layoutIfNeeded);
}

void specialized CanvasElementViewController.rulerHostView.didset(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void **)(v1 + direct field offset for CanvasElementViewController.rulerHostView);
  swift_beginAccess();
  id v5 = *v4;
  if (a1)
  {
    if (!v5) {
      goto LABEL_5;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    id v6 = v5;
    id v7 = a1;
    char v8 = static NSObject.== infix(_:_:)();

    if (v8) {
      return;
    }
    id v5 = *v4;
    if (!*v4)
    {
LABEL_5:
      id v9 = *(void **)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate);
      *(void *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = 0;
      goto LABEL_8;
    }
  }
  else if (!v5)
  {
    return;
  }
  id v10 = (objc_class *)type metadata accessor for RulerHostingDelegate();
  id v11 = objc_allocWithZone(v10);
  swift_unknownObjectWeakInit();
  v11[OBJC_IVAR____TtC8PaperKit20RulerHostingDelegate_sharedRuler] = 1;
  swift_unknownObjectWeakAssign();
  v16.receiver = v11;
  v16.super_class = v10;
  id v12 = v5;
  id v13 = objc_msgSendSuper2(&v16, sel_init);
  id v9 = *(void **)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate);
  *(void *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = v13;

LABEL_8:
  id v14 = (void *)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v14)
  {
    id v15 = *(void **)(*v14 + direct field offset for CanvasView.canvasTiledView);
    if (v15) {
      objc_msgSend(v15, sel_setRulerHostingDelegate_, *(void *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate));
    }
  }
}

void specialized CanvasElementViewController.analysis.didset(void *a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for CanvasElementViewController.analysis);
  if (!v2) {
    return;
  }
  uint64_t v3 = v1;
  if (a1)
  {
    if (v2 == a1) {
      return;
    }
  }
  uint64_t v4 = v1 + direct field offset for CanvasElementViewController.formDelegate;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x210550400](v4);
  uint64_t v6 = *(void *)(v4 + 8);
  id v7 = v2;
  char v8 = v7;
  uint64_t v9 = (uint64_t)&selRef_allowsFingerDrawing;
  if (!v5) {
    goto LABEL_33;
  }
  uint64_t v40 = v6;
  id v10 = objc_msgSend(v7, sel_formRegions);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v41 = v8;
  id v12 = objc_msgSend(v8, sel_formRegions);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v42 = MEMORY[0x263F8EE78];
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14)
    {
LABEL_9:
      uint64_t v38 = v2;
      if (v14 < 1)
      {
        __break(1u);
        return;
      }
      for (uint64_t i = 0; i != v14; ++i)
      {
        if ((v13 & 0xC000000000000001) != 0) {
          id v16 = (id)MEMORY[0x21054E050](i, v13);
        }
        else {
          id v16 = *(id *)(v13 + 8 * i + 32);
        }
        id v17 = v16;
        if (!objc_msgSend(v16, sel_contentType) || objc_msgSend(v17, sel_contentType) == (id)1)
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v18 = v42;
      uint64_t v2 = v38;
      uint64_t v9 = 0x1F91C2000;
      uint64_t v19 = v39;
      if (v42 < 0) {
        goto LABEL_41;
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v19 = v39;
  if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_26;
  }
LABEL_24:
  if ((v18 & 0x4000000000000000) != 0) {
    goto LABEL_41;
  }
  uint64_t v20 = *(void *)(v18 + 16);
LABEL_26:
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, BOOL, BOOL, uint64_t))(v40 + 8))(v3, v19 > 0, v20 != 0, ObjectType);
  swift_unknownObjectRelease();
  if (!v20)
  {
    char v8 = v41;
    if (v19 <= 0) {
      goto LABEL_33;
    }
    id v25 = (uint64_t *)(v3 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    uint64_t v23 = *v25;
    if (!*v25) {
      goto LABEL_33;
    }
    char v24 = 44;
    goto LABEL_32;
  }
  id v22 = (uint64_t *)(v3 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v23 = *v22;
  char v8 = v41;
  if (*v22)
  {
    char v24 = 45;
LABEL_32:
    *(unsigned char *)(*(void *)(v23 + direct field offset for CanvasView.formAnalytics) + 18) = v24;
  }
LABEL_33:
  specialized CanvasElementViewController.updateFormFillingIfNeeded()();
  uint64_t v26 = (uint64_t *)(v3 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v27 = *v26;
  if (*v26)
  {
    id v28 = *(void **)(v27 + direct field offset for Canvas._editingView);
    uint64_t v29 = v9;
    if (v28)
    {
      id v30 = *(_UNKNOWN ***)(v27 + direct field offset for Canvas._editingView + 8);
      id v31 = *(id *)(v27 + direct field offset for Canvas._editingView);
    }
    else
    {
      id v31 = *(id *)(v27 + direct field offset for Canvas.paperView);
      id v30 = &protocol witness table for ContainerCanvasElementView<A>;
    }
    uint64_t v32 = swift_getObjectType();
    uint64_t v33 = (uint64_t (*)(uint64_t, _UNKNOWN **))v30[18];
    id v34 = v28;
    uint64_t v35 = (char *)v33(v32, v30);

    if (v35)
    {
      id v36 = [v8 (SEL)(v29 + 3146)];
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
      uint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)&v35[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcFormRegions] = v37;
      swift_bridgeObjectRelease();
      char v8 = *(void **)&v35[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis];
      *(void *)&v35[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis] = v2;
    }
  }
}

void specialized CanvasElementViewController.updateFormFillingIfNeeded()()
{
  uint64_t v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (!*v1) {
    return;
  }
  uint64_t v3 = *(void **)(v0 + direct field offset for CanvasElementViewController.analysis);
  if (!v3) {
    return;
  }
  uint64_t v4 = v2;
  id v5 = v3;
  unint64_t v6 = AnyCanvas.formFieldElements.getter();
  unint64_t v196 = MEMORY[0x263F8EE78];
  id v176 = v5;
  id v7 = objc_msgSend(v5, sel_formRegions);
  uint64_t v8 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v178 = v9;
  if (v9 >> 62) {
    goto LABEL_171;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v189 = v4;
  if (v10)
  {
    unint64_t v12 = 0;
    uint64_t v179 = v10;
    unint64_t v190 = v6 & 0xC000000000000001;
    id v180 = (void *)MEMORY[0x263F8EE78];
    uint64_t v177 = v8;
    while (1)
    {
      if ((v178 & 0xC000000000000001) != 0)
      {
        id v17 = (id)MEMORY[0x21054E050](v12, v178);
      }
      else
      {
        if (v12 >= *(void *)((v178 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_170;
        }
        id v17 = *(id *)(v178 + 32 + 8 * v12);
      }
      uint64_t v18 = v17;
      BOOL v19 = __OFADD__(v12, 1);
      unint64_t v20 = v12 + 1;
      if (v19) {
        goto LABEL_168;
      }
      id v21 = objc_msgSend(v17, sel_quad);
      if (!v21) {
        goto LABEL_191;
      }
      id v22 = v21;
      objc_msgSend(v21, sel_boundingBox);
      CGFloat v24 = v23;
      CGFloat v26 = v25;
      CGFloat v28 = v27;
      CGFloat v30 = v29;

      uint64_t v191 = direct field offset for Canvas._editingView;
      id v31 = *(void **)&v4[direct field offset for Canvas._editingView];
      unint64_t v181 = v20;
      if (v31)
      {
        uint64_t v32 = *(void **)&v4[direct field offset for Canvas._editingView];
      }
      else
      {
        uint64_t v32 = *(id *)&v4[direct field offset for Canvas.paperView];
        id v31 = 0;
      }
      (*(void (**)(CGAffineTransform *__return_ptr, void *))((*MEMORY[0x263F8EED0] & *v32) + 0x1A8))(&v197, v31);

      CGAffineTransform v195 = v197;
      v199.origin.CGFloat x = v24;
      v199.origin.CGFloat y = v26;
      v199.size.CGFloat width = v28;
      v199.size.CGFloat height = v30;
      CGRect v200 = CGRectApplyAffineTransform(v199, &v195);
      CGFloat x = v200.origin.x;
      CGFloat y = v200.origin.y;
      CGFloat width = v200.size.width;
      CGFloat height = v200.size.height;
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
        id v184 = v18;
        if (!v37) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v37 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        id v184 = v18;
        if (!v37) {
          goto LABEL_28;
        }
      }
      if (v190) {
        uint64_t v38 = (void *)MEMORY[0x21054E050](0, v6);
      }
      else {
        uint64_t v38 = *(id *)(v6 + 32);
      }
      uint64_t v39 = v38;
      v201.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v38) + 0x178))();
      v210.origin.CGFloat x = x;
      v210.origin.CGFloat y = y;
      v210.size.CGFloat width = width;
      v210.size.CGFloat height = height;
      BOOL v40 = CGRectIntersectsRect(v201, v210);

      if (v40)
      {
LABEL_25:

LABEL_26:
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      if (v37 != 1)
      {
        if (v190) {
          long long v113 = (void *)MEMORY[0x21054E050](1, v6);
        }
        else {
          long long v113 = *(id *)(v6 + 40);
        }
        uint64_t v114 = v113;
        v208.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v113) + 0x178))();
        v214.origin.CGFloat x = x;
        v214.origin.CGFloat y = y;
        v214.size.CGFloat width = width;
        v214.size.CGFloat height = height;
        BOOL v115 = CGRectIntersectsRect(v208, v214);

        if (v115) {
          goto LABEL_25;
        }
        if (v37 != 2)
        {
          uint64_t v116 = 6;
          while (1)
          {
            if (v190) {
              char v117 = (void *)MEMORY[0x21054E050](v116 - 4, v6);
            }
            else {
              char v117 = *(id *)(v6 + 8 * v116);
            }
            uint64_t v118 = v117;
            uint64_t v119 = v116 - 3;
            if (__OFADD__(v116 - 4, 1)) {
              goto LABEL_169;
            }
            v209.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v117) + 0x178))();
            v215.origin.CGFloat x = x;
            v215.origin.CGFloat y = y;
            v215.size.CGFloat width = width;
            v215.size.CGFloat height = height;
            BOOL v120 = CGRectIntersectsRect(v209, v215);

            if (v120) {
              break;
            }
            ++v116;
            BOOL v163 = v119 == v37;
            uint64_t v18 = v184;
            if (v163) {
              goto LABEL_28;
            }
          }

          goto LABEL_26;
        }
      }
LABEL_28:
      swift_bridgeObjectRelease();
      id v41 = objc_msgSend(v18, sel_autoFillContentType);
      CGFloat v187 = height;
      if (!v41)
      {
        CGFloat v43 = width;
        CGFloat v44 = y;
        CGFloat v45 = x;
        FormContentType.init(_:)((uint64_t)objc_msgSend(v18, sel_contentType), &v195);
LABEL_33:
        char a_low = LOBYTE(v195.a);
        goto LABEL_34;
      }
      uint64_t v42 = v41;
      CGFloat v43 = width;
      CGFloat v44 = y;
      CGFloat v45 = x;
      if (objc_msgSend(v18, sel_regionType) != (id)4)
      {
        FormContentType.init(_:)((__C::AFTextContentType)v42);
        goto LABEL_33;
      }

      char a_low = 50;
LABEL_34:
      objc_msgSend(v18, sel_suggestedLineHeight);
      double v48 = v47;
      unint64_t v49 = *(void **)&v4[v191];
      if (v49)
      {
        id v50 = *(id *)&v4[v191];
      }
      else
      {
        id v50 = *(id *)&v4[direct field offset for Canvas.paperView];
        unint64_t v49 = 0;
      }
      id v51 = v49;
      objc_msgSend(v50, sel_frame);
      CGFloat v53 = v52;
      CGFloat v55 = v54;
      CGFloat v57 = v56;
      CGFloat v59 = v58;

      v202.origin.CGFloat x = v53;
      v202.origin.CGFloat y = v55;
      v202.size.CGFloat width = v57;
      v202.size.CGFloat height = v59;
      double v60 = CGRectGetHeight(v202);
      if (one-time initialization token for formFieldFont != -1) {
        swift_once();
      }
      id v61 = objc_msgSend((id)static UIConstants.formFieldFont, sel_fontWithSize_, v48 * v60 * 0.75);
      id v62 = objc_msgSend(v184, sel_children);
      if (!v62) {
        goto LABEL_192;
      }
      double v63 = v62;
      unint64_t v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v64 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v65 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v65)
      {
        uint64_t v193 = v11;
        id v66 = objc_msgSend(v184, sel_children);
        if (!v66) {
          goto LABEL_193;
        }
        double v67 = v66;
        unint64_t v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v186 = v68;
        if (!(v68 >> 62))
        {
          uint64_t v69 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v69) {
            goto LABEL_46;
          }
          goto LABEL_121;
        }
        swift_bridgeObjectRetain();
        uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v69)
        {
LABEL_121:
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v180 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v180[2] + 1, 1, v180);
          }
          uint64_t v8 = v177;
          uint64_t v11 = MEMORY[0x263F8EE78];
          uint64_t v16 = v179;
          unint64_t v122 = v180[2];
          unint64_t v121 = v180[3];
          if (v122 >= v121 >> 1) {
            id v180 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v121 > 1), v122 + 1, 1, v180);
          }
          v180[2] = v122 + 1;
          v180[v122 + 4] = v193;

          goto LABEL_10;
        }
LABEL_46:
        unint64_t v70 = 0;
        uint64_t v185 = direct field offset for Canvas.paperView;
        unint64_t v188 = v68 & 0xC000000000000001;
        unint64_t v182 = v68 + 32;
        uint64_t v183 = v68 & 0xFFFFFFFFFFFFFF8;
        while (2)
        {
          while (2)
          {
            if (v188)
            {
              id v71 = (id)MEMORY[0x21054E050](v70, v186);
            }
            else
            {
              if (v70 >= *(void *)(v183 + 16)) {
                goto LABEL_167;
              }
              id v71 = *(id *)(v182 + 8 * v70);
            }
            int v72 = v71;
            BOOL v19 = __OFADD__(v70++, 1);
            if (v19)
            {
              __break(1u);
              goto LABEL_166;
            }
            id v73 = objc_msgSend(v71, sel_quad);
            if (!v73) {
              goto LABEL_190;
            }
            id v74 = v73;
            objc_msgSend(v73, sel_boundingBox);
            CGFloat v76 = v75;
            CGFloat v78 = v77;
            CGFloat v80 = v79;
            CGFloat v82 = v81;

            id v83 = *(void **)&v4[v191];
            if (v83)
            {
              id v84 = *(void **)&v4[v191];
            }
            else
            {
              id v84 = *(id *)&v4[v185];
              id v83 = 0;
            }
            (*(void (**)(CGAffineTransform *__return_ptr, void *))((*MEMORY[0x263F8EED0] & *v84) + 0x1A8))(&v198, v83);

            CGAffineTransform v195 = v198;
            v203.origin.CGFloat x = v76;
            v203.origin.CGFloat y = v78;
            v203.size.CGFloat width = v80;
            v203.size.CGFloat height = v82;
            CGRect v204 = CGRectApplyAffineTransform(v203, &v195);
            CGFloat v85 = v204.origin.x;
            CGFloat v86 = v204.origin.y;
            CGFloat v87 = v204.size.width;
            CGFloat v88 = v204.size.height;
            if (v37)
            {
              if (v190)
              {
                swift_bridgeObjectRetain();
                uint64_t v90 = (void *)MEMORY[0x21054E050](0, v6);
              }
              else
              {
                unint64_t v89 = *(void **)(v6 + 32);
                swift_bridgeObjectRetain();
                uint64_t v90 = v89;
              }
              uint64_t v91 = v90;
              v205.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v90) + 0x178))();
              v211.origin.CGFloat x = v85;
              v211.origin.CGFloat y = v86;
              v211.size.CGFloat width = v87;
              v211.size.CGFloat height = v88;
              uint64_t v8 = CGRectIntersectsRect(v205, v211);

              if (v8)
              {

                swift_bridgeObjectRelease();
                if (v70 == v69) {
                  goto LABEL_121;
                }
                continue;
              }
              if (v37 != 1)
              {
                if (v190) {
                  uint64_t v92 = (void *)MEMORY[0x21054E050](1, v6);
                }
                else {
                  uint64_t v92 = *(id *)(v6 + 40);
                }
                id v93 = v92;
                v206.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v92) + 0x178))();
                v212.origin.CGFloat x = v85;
                v212.origin.CGFloat y = v86;
                v212.size.CGFloat width = v87;
                v212.size.CGFloat height = v88;
                uint64_t v8 = CGRectIntersectsRect(v206, v212);

                if (v8)
                {
LABEL_66:

                  swift_bridgeObjectRelease();
                  goto LABEL_92;
                }
                if (v37 != 2)
                {
                  uint64_t v94 = 6;
                  while (1)
                  {
                    uint64_t v95 = v190 ? (void *)MEMORY[0x21054E050](v94 - 4, v6) : *(id *)(v6 + 8 * v94);
                    uint64_t v96 = v95;
                    uint64_t v4 = (char *)(v94 - 3);
                    if (__OFADD__(v94 - 4, 1)) {
                      break;
                    }
                    v207.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v95) + 0x178))();
                    v213.origin.CGFloat x = v85;
                    v213.origin.CGFloat y = v86;
                    v213.size.CGFloat width = v87;
                    v213.size.CGFloat height = v88;
                    uint64_t v8 = CGRectIntersectsRect(v207, v213);

                    if (v8) {
                      goto LABEL_66;
                    }
                    ++v94;
                    if (v4 == (char *)v37) {
                      goto LABEL_75;
                    }
                  }
LABEL_166:
                  __break(1u);
LABEL_167:
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  swift_bridgeObjectRetain();
                  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  goto LABEL_5;
                }
              }
LABEL_75:
              swift_bridgeObjectRelease();
              uint64_t v4 = v189;
            }
            break;
          }
          id v97 = objc_msgSend(v72, sel_autoFillContentType);
          if (v97)
          {
            uint64_t v98 = v97;
            if (objc_msgSend(v72, sel_regionType) == (id)4)
            {

              char v99 = 50;
LABEL_82:
              LOBYTE(v195.a) = v99;
              id v100 = v61;
              specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v4, 0, 0, v61, 0, 1, (unsigned __int8 *)&v195, 0x7FFFFFFFFFFFFFFFLL, v85, v86, v87, v88, 1u, objc_msgSend(v72, sel_autofillNewContextStart), 9u, 5u);
              uint64_t v102 = v101;

              id v103 = v102;
              MEMORY[0x21054D330]();
              if (*(void *)((v196 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v196 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              id v104 = v103;
              MEMORY[0x21054D330]();
              if (*(void *)((v193 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v193 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              if (one-time initialization token for manager != -1) {
                swift_once();
              }
              uint64_t v105 = *(void **)&v189[v191];
              if (v105) {
                uint64_t v106 = *(void **)&v189[v191];
              }
              else {
                uint64_t v106 = *(id *)&v189[v185];
              }
              uint64_t v8 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v106) + 0x88))();
              id v107 = v105;

              specialized FormAnalytics.addFielde2eEvent(canvas:)((char *)v8);
LABEL_92:
              uint64_t v4 = v189;
              if (v70 == v69) {
                goto LABEL_121;
              }
              continue;
            }
            FormContentType.init(_:)((__C::AFTextContentType)v98);
          }
          else
          {
            FormContentType.init(_:)((uint64_t)objc_msgSend(v72, sel_contentType), &v195);
          }
          break;
        }
        char v99 = LOBYTE(v195.a);
        goto LABEL_82;
      }
      LOBYTE(v195.a) = a_low;
      id v108 = v61;
      specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v4, 0, 0, v61, 0, 1, (unsigned __int8 *)&v195, (uint64_t)objc_msgSend(v184, sel_maxCharacterCount), v45, v44, v43, v187, 1u, objc_msgSend(v184, sel_autofillNewContextStart), 9u, 5u);
      uint64_t v110 = v109;

      id v111 = v110;
      MEMORY[0x21054D330]();
      if (*(void *)((v196 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v196 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (one-time initialization token for manager != -1) {
        swift_once();
      }
      long long v112 = *(void **)&v4[v191];
      if (v112) {
        unint64_t v13 = *(void **)&v4[v191];
      }
      else {
        unint64_t v13 = *(id *)&v4[direct field offset for Canvas.paperView];
      }
      uint64_t v14 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x88))();
      id v15 = v112;

      specialized FormAnalytics.addFielde2eEvent(canvas:)(v14);
LABEL_9:
      uint64_t v16 = v179;
LABEL_10:
      unint64_t v12 = v181;
      if (v181 == v16) {
        goto LABEL_127;
      }
    }
  }
  id v180 = (void *)MEMORY[0x263F8EE78];
LABEL_127:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v123 = &v4[direct field offset for Canvas._editingView];
  uint64_t v124 = *(void **)&v4[direct field offset for Canvas._editingView];
  if (v124)
  {
    uint64_t v125 = (_UNKNOWN **)*((void *)v123 + 1);
    id v126 = *(id *)&v4[direct field offset for Canvas._editingView];
  }
  else
  {
    id v126 = *(id *)&v4[direct field offset for Canvas.paperView];
    uint64_t v125 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v128 = v196;
  id v129 = (void (*)(unint64_t, uint64_t, _UNKNOWN **))v125[21];
  swift_bridgeObjectRetain();
  id v130 = v124;
  v129(v128, ObjectType, v125);

  swift_bridgeObjectRelease();
  uint64_t v131 = *(void **)v123;
  if (*(void *)v123)
  {
    char v132 = (_UNKNOWN **)*((void *)v123 + 1);
    uint64_t v133 = *(void **)v123;
  }
  else
  {
    uint64_t v133 = *(id *)&v4[direct field offset for Canvas.paperView];
    char v132 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  uint64_t v134 = swift_getObjectType();
  uint64_t v135 = (void (*)(void, void, void))v132[23];
  swift_bridgeObjectRetain();
  uint64_t v136 = v131;
  v135(v180, v134, v132);

  id v137 = (void *)swift_bridgeObjectRelease();
  uint64_t v138 = *(void **)v123;
  if (*(void *)v123)
  {
    uint64_t v139 = *(void **)v123;
  }
  else
  {
    id v137 = *(id *)&v4[direct field offset for Canvas.paperView];
    uint64_t v139 = v137;
  }
  uint64_t v140 = MEMORY[0x263F8EE78];
  uint64_t v141 = (void *)(*(uint64_t (**)(void *))((*MEMORY[0x263F8EED0] & *v139) + 0x88))(v137);
  char v142 = v138;

  if (v141)
  {
    if (one-time initialization token for manager != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v143 = swift_bridgeObjectRetain();
    specialized FormAnalytics.recordLatencyEvent(timestamps:endToEnd:)(v143, 1);

    swift_bridgeObjectRelease();
  }
  id v144 = *(void **)v123;
  if (*(void *)v123)
  {
    uint64_t v145 = (_UNKNOWN **)*((void *)v123 + 1);
    uint64_t v146 = *(void **)v123;
  }
  else
  {
    uint64_t v146 = *(id *)&v4[direct field offset for Canvas.paperView];
    uint64_t v145 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  uint64_t v147 = swift_getObjectType();
  id v148 = (uint64_t (*)(uint64_t, _UNKNOWN **))v145[18];
  id v149 = v144;
  uint64_t v150 = (char *)v148(v147, v145);

  if (!v150)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  id v151 = objc_msgSend(v176, sel_formRegions);
  unint64_t v152 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v194 = v140;
  if (v152 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v153 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v153) {
      goto LABEL_146;
    }
LABEL_173:
    swift_bridgeObjectRelease();
    uint64_t v165 = MEMORY[0x263F8EE78];
    goto LABEL_174;
  }
  uint64_t v153 = *(void *)((v152 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v153) {
    goto LABEL_173;
  }
LABEL_146:
  uint64_t v192 = v150;
  if (v153 < 1)
  {
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v153; ++i)
  {
    if ((v152 & 0xC000000000000001) != 0) {
      id v155 = (id)MEMORY[0x21054E050](i, v152);
    }
    else {
      id v155 = *(id *)(v152 + 8 * i + 32);
    }
    uint64_t v156 = v155;
    id v157 = objc_msgSend(v155, sel_autoFillContentType);
    if (!v157)
    {

      continue;
    }
    uint64_t v158 = v157;
    uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v161 = v160;
    BOOL v163 = v159 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v161 == v162;
    if (v163)
    {

      swift_bridgeObjectRelease_n();
LABEL_161:

      goto LABEL_162;
    }
    char v164 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v164) {
      goto LABEL_161;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_162:
    uint64_t v4 = v189;
  }
  swift_bridgeObjectRelease();
  uint64_t v150 = v192;
  uint64_t v165 = v194;
LABEL_174:
  swift_bridgeObjectRelease();
  uint64_t v166 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  uint64_t v167 = *(void *)&v150[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
  if (v165 < 0 || (v165 & 0x4000000000000000) != 0)
  {
    swift_retain();
    swift_retain();
    uint64_t v168 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v168 = *(void *)(v165 + 16);
    swift_retain();
  }
  swift_release();
  *(void *)(v167 + 32) = v168;
  swift_release();
  uint64_t v169 = *(void *)&v150[v166];
  unint64_t v170 = v196;
  unint64_t v171 = v196 >> 62;
  if (v196 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v172 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v172 = *(void *)((v196 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  *(void *)(v169 + 2MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = v172;
  swift_release();
  uint64_t v173 = *(void *)&v4[direct field offset for CanvasView.formAnalytics];
  if (v171)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v174 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v174 = *(void *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  swift_bridgeObjectRelease();

  if (v174) {
    char v175 = 41;
  }
  else {
    char v175 = 39;
  }
  *(unsigned char *)(v173 + 17) = v175;
  swift_release();
}

BOOL specialized MarkupContainerViewController.documentViewShouldAllowEditing(_:)()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode);
  uint64_t v2 = v0 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x210550400](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (objc_msgSend(v3, sel_respondsToSelector_, sel_shouldAllowEditingContents_))
    {
      id v5 = objc_msgSend(v4, sel_shouldAllowEditingContents_, v0);
      swift_unknownObjectRelease();
      if (!v1) {
        return 0;
      }
      return (BOOL)v5;
    }
    swift_unknownObjectRelease();
  }
  return v1 != 0;
}

id specialized CanvasElementViewController.init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(void *a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)&v7[direct field offset for CanvasElementViewController.canvasView] = 0;
  unint64_t v13 = &v7[direct field offset for CanvasElementViewController.liveStreamMessenger];
  *unint64_t v13 = 0;
  v13[1] = 0;
  *(void *)&v7[direct field offset for CanvasElementViewController.participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v7[direct field offset for CanvasElementViewController.showParticipantCursors] = 0;
  *(void *)&v7[direct field offset for CanvasElementViewController.mediaAnalysisObserver] = 0;
  *(void *)&v7[direct field offset for CanvasElementViewController.canvasSubscribeCancellable] = 0;
  uint64_t v14 = direct field offset for CanvasElementViewController.passThroughSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Capsule<Image>, Never>);
  swift_allocObject();
  id v15 = v7;
  *(void *)&v7[v14] = PassthroughSubject.init()();
  *(void *)&v15[direct field offset for CanvasElementViewController.image] = 0;
  v15[direct field offset for CanvasElementViewController.liveStreamDrawings] = 0;
  v15[direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled] = 0;
  v15[direct field offset for CanvasElementViewController.canEditVellumOpacity] = 0;
  uint64_t v16 = &v15[direct field offset for CanvasElementViewController.isImageAnalysisEnabled];
  v15[direct field offset for CanvasElementViewController.isImageAnalysisEnabled] = 1;
  v15[direct field offset for CanvasElementViewController.canEditDescription] = 1;
  uint64_t v17 = direct field offset for CanvasElementViewController.plusButton;
  type metadata accessor for FormPlusButtonView();
  *(void *)&v15[v17] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  *(void *)&v15[direct field offset for CanvasElementViewController.bannerViewConfiguration] = 0;
  uint64_t v18 = direct field offset for CanvasElementViewController.bannerView;
  *(void *)&v15[v18] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  *(void *)&v15[direct field offset for CanvasElementViewController._rulerHostingDelegate] = 0;
  *(void *)&v15[direct field offset for CanvasElementViewController.rulerHostView] = 0;
  BOOL v19 = &v15[direct field offset for CanvasElementViewController.formDelegate];
  *(void *)&v15[direct field offset for CanvasElementViewController.formDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v15[direct field offset for CanvasElementViewController.analysis] = 0;
  v15[direct field offset for CanvasElementViewController.allowMediaCanvasElements] = a3;
  *(void *)&v15[direct field offset for CanvasElementViewController.context] = a1;
  v15[direct field offset for CanvasElementViewController.transparentBackground] = a4;
  v15[direct field offset for CanvasElementViewController.editingMode] = a2;
  swift_beginAccess();
  *((void *)v19 + 1) = a7;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  *uint64_t v16 = a5;
  id v20 = a1;

  v23.receiver = v15;
  v23.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CanvasElementViewController<Image>);
  return objc_msgSendSuper2(&v23, sel_initWithNibName_bundle_, 0, 0);
}

void specialized MarkupContainerViewController.documentViewController(_:didSetupDocumentView:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void **)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  id v5 = *v4;
  if (*v4)
  {
    unint64_t v6 = (unsigned __int8 *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled);
    swift_beginAccess();
    uint64_t v7 = *v6;
    id v8 = v5;
    objc_msgSend(v8, sel_setFindInteractionEnabled_, v7);
    unint64_t v9 = (unsigned char *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor);
    swift_beginAccess();
    *unint64_t v9 = 0;
    objc_msgSend(v8, sel_setAutoScales_, 1);
    id v10 = objc_msgSend(v8, sel_documentScrollView);
    if (v10)
    {
      uint64_t v11 = v10;
      if (one-time initialization token for isQuickLookUIExtension != -1) {
        swift_once();
      }
      if (static NSBundle.isQuickLookUIExtension == 1) {
        objc_msgSend(v11, sel_setContentInsetAdjustmentBehavior_, 2);
      }
    }
    else
    {
      uint64_t v11 = v8;
    }
  }
  unsigned __int8 v12 = *(unsigned char *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_editingMode);
  unint64_t v13 = (unsigned __int8 *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  unsigned __int8 v14 = *v13;
  *unint64_t v13 = v12;
  v27[0] = v14;
  PaperDocumentView.editingMode.didset(v27);
  id v15 = *v4;
  if (*v4)
  {
    uint64_t v16 = (unsigned __int8 *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled);
    swift_beginAccess();
    objc_msgSend(v15, sel_setFindInteractionEnabled_, *v16);
    MarkupContainerViewController.configureLookAndStyle()();
    uint64_t v17 = *(void *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_imageViewController);
    if (v17)
    {
      uint64_t v18 = (void **)(v17 + direct field offset for CanvasElementViewController.canvasView);
      swift_beginAccess();
      BOOL v19 = (char *)*v18;
      if (*v18)
      {
        id v20 = (_OWORD *)(v2 + OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets);
        swift_beginAccess();
        id v21 = &v19[direct field offset for CanvasView.minimumContentInsets];
        long long v22 = v20[1];
        *(_OWORD *)id v21 = *v20;
        *((_OWORD *)v21 + 1) = v22;
        objc_super v23 = v19;
        specialized CanvasView.updateContentInsets()();
      }
    }
    uint64_t v24 = v2 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
    swift_beginAccess();
    double v25 = (void *)MEMORY[0x210550400](v24);
    if (v25)
    {
      CGFloat v26 = v25;
      if (objc_msgSend(v25, sel_respondsToSelector_, sel_markupContainerViewController_updateChromeWithAnimation_))objc_msgSend(v26, sel_markupContainerViewController_updateChromeWithAnimation_, v2, 1); {
      swift_unknownObjectRelease();
      }
    }
    MarkupContainerViewController.updateFirstResponderIfNecessary()();
  }
  else
  {
    __break(1u);
  }
}

void specialized MarkupContainerViewController.init(coder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR___PPKMarkupContainerViewController_context;
  type metadata accessor for CRContext();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v3 = MEMORY[0x21054C990](0, v10);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(void *)&v1[v2] = v3;
  uint64_t v4 = OBJC_IVAR___PPKMarkupContainerViewController_fileCoordinator;
  *(void *)&v1[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08830]), sel_init);
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView] = 0;
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController] = 0;
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfViewController] = 0;
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_analysisDelegate] = 0;
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_imageCancellable] = 0;
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfCancellable] = 0;
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_contentUndoManager] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_viewIsTransitioningBetweenSizes] = 0;
  id v5 = &v1[OBJC_IVAR___PPKMarkupContainerViewController_originalAsset];
  uint64_t v6 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_doubleTapGestureRecognizer] = 0;
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_loadContentTask] = 0;
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_loadContentOperationQueue] = 0;
  uint64_t v7 = &v1[OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets];
  long long v8 = *(_OWORD *)(MEMORY[0x263F834E8] + 16);
  *uint64_t v7 = *MEMORY[0x263F834E8];
  v7[1] = v8;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled] = 1;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_editingMode] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata] = 1;
  unint64_t v9 = &v1[OBJC_IVAR___PPKMarkupContainerViewController_previousViewSize];
  *unint64_t v9 = 0;
  v9[1] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden] = 1;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_showBannerView] = 0;
  *(void *)&v1[OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor] = 0;
  v1[OBJC_IVAR___PPKMarkupContainerViewController_shouldAskDelegateToEnableMarkup] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_20C43B3FC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C43B434()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in MarkupContainerViewController.imageDescription.setter()
{
  closure #1 in MarkupContainerViewController.imageDescription.setter(v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t sub_20C43B498()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 25, 7);
}

void partial apply for closure #1 in MarkupContainerViewController.showThumbnailViewForMultipage.setter()
{
  closure #1 in MarkupContainerViewController.showThumbnailViewForMultipage.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_20C43B4DC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C43B514()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in MarkupContainerViewController.viewDidLayoutSubviews()()
{
  closure #1 in MarkupContainerViewController.viewDidLayoutSubviews()(*(char **)(v0 + 16));
}

void partial apply for closure #1 in MarkupContainerViewController.viewWillTransition(to:with:)(void *a1)
{
  closure #1 in MarkupContainerViewController.viewWillTransition(to:with:)(a1, v1);
}

void partial apply for closure #2 in MarkupContainerViewController.viewWillTransition(to:with:)(uint64_t a1)
{
  closure #2 in MarkupContainerViewController.viewWillTransition(to:with:)(a1, v1);
}

uint64_t type metadata accessor for ResultWrapped #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  return self;
}

uint64_t sub_20C43B588()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?)
                 - 8);
  uint64_t v35 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v35 + 48) & ~v35;
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?)
                 - 8);
  uint64_t v34 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v5 = (v2 + v3 + v34) & ~v34;
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?)
                 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v5 + v6 + v8;
  uint64_t v30 = *(void *)(v7 + 64);
  uint64_t v33 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v33 - 8);
  uint64_t v31 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v29 = *(void *)(v10 + 64);
  uint64_t v32 = type metadata accessor for UTType();
  uint64_t v11 = *(void *)(v32 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v28 = *(void *)(v11 + 64);
  swift_unknownObjectRelease();
  swift_release();

  uint64_t v13 = v0 + v2;
  uint64_t v14 = type metadata accessor for CRAsset();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  uint64_t v16 = v9 & ~v8;
  uint64_t v17 = v0 + v5;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v19 = *(void *)(v18 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  uint64_t v20 = v8;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v22 = *(void *)(v21 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v0 + v16, 1, v21)) {
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v0 + v16, v21);
  }
  uint64_t v23 = (v16 + v30 + v31) & ~v31;
  uint64_t v24 = (v23 + v29 + v12) & ~v12;
  unint64_t v25 = (v28 + v24 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (((v25 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v23, v33);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0 + v24, v32);

  return MEMORY[0x270FA0238](v0, ((v26 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v35 | v34 | v20 | v31 | v12 | 7);
}

uint64_t partial apply for closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?)
                 - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?)
                 - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = *(void *)(type metadata accessor for UTType() - 8);
  unint64_t v14 = (v11 + v12 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v15 = v14 + *(void *)(v13 + 64);
  unint64_t v16 = (v15 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = v0 + v2;
  uint64_t v18 = v0 + v14;
  char v19 = *(unsigned char *)(v0 + v15);
  char v20 = *(unsigned char *)(v0 + v15 + 1);
  uint64_t v21 = *(void *)(v0 + v16);
  uint64_t v22 = *(void *)(v0 + v17);
  uint64_t v23 = *(void *)(v0 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v24 = swift_task_alloc();
  long long v25 = *(_OWORD *)(v0 + 32);
  *(void *)(v28 + 16) = v24;
  *(void *)uint64_t v24 = v28;
  *(void *)(v24 + 8) = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  *(void *)(v24 + 80) = v22;
  *(void *)(v24 + 88) = v23;
  *(unsigned char *)(v24 + 12MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_setActiveInteractionTypes_, 9) = v20;
  *(unsigned char *)(v24 + 128) = v19;
  *(void *)(v24 + 6MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = v18;
  *(void *)(v24 + 72) = v21;
  *(void *)(v24 + 48) = v0 + v8;
  *(void *)(v24 + 56) = v0 + v11;
  *(void *)(v24 + 32) = v27;
  *(void *)(v24 + 40) = v0 + v5;
  *(_OWORD *)(v24 + 16) = v25;
  return MEMORY[0x270FA2498](closure #1 in MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:), 0, 0);
}

void specialized MarkupContainerViewController.handleSqueezeInteractionDidChangePaletteViewVisibilityNotification(_:)()
{
  id v1 = objc_msgSend(v0, sel_viewIfLoaded);
  if (v1)
  {
    unint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_window);

    if (v3)
    {
      id v10 = objc_msgSend(v3, sel_windowScene);

      if (v10)
      {
        id v4 = objc_msgSend(self, sel__existingInteractionForWindowScene_, v10);
        if (v4)
        {
          unint64_t v5 = v4;
          uint64_t v6 = &v0[OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled];
          swift_beginAccess();
          if (*v6 & 1) == 0 && (objc_msgSend(v5, sel__paletteViewVisible))
          {
            uint64_t v7 = &v0[OBJC_IVAR___PPKMarkupContainerViewController_delegate];
            swift_beginAccess();
            unint64_t v8 = (void *)MEMORY[0x210550400](v7);
            if (v8)
            {
              uint64_t v9 = v8;
              if ((objc_msgSend(v8, sel_respondsToSelector_, sel_markupContainerViewControllerDidChangeContent_enablingMarkup_) & 1) == 0)
              {

                swift_unknownObjectRelease();
                return;
              }
              objc_msgSend(v9, sel_markupContainerViewControllerDidChangeContent_enablingMarkup_, v0, 1);
              swift_unknownObjectRelease();
            }
          }
        }
        else
        {
        }
      }
    }
  }
}

uint64_t specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(void *)(v8 + 26MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = a6;
  *(void *)(v8 + 272) = v16;
  *(unsigned char *)(v8 + 9MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = a8;
  *(unsigned char *)(v8 + 93) = a7;
  *(void *)(v8 + 248) = a4;
  *(void *)(v8 + 256) = a5;
  *(void *)(v8 + 232) = a2;
  *(void *)(v8 + 240) = a3;
  *(void *)(v8 + 22MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = a1;
  type metadata accessor for PaperDocument(0);
  *(void *)(v8 + 280) = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(void *)(v8 + 288) = v9;
  *(void *)(v8 + 296) = *(void *)(v9 - 8);
  *(void *)(v8 + 30MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  *(void *)(v8 + 312) = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  *(void *)(v8 + 320) = v10;
  *(void *)(v8 + 328) = *(void *)(v10 - 8);
  *(void *)(v8 + 336) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v8 + 34MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = v11;
  *(void *)(v8 + 352) = *(void *)(v11 - 8);
  *(void *)(v8 + 360) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v8 + 368) = swift_task_alloc();
  *(void *)(v8 + 376) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  *(void *)(v8 + 38MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = swift_task_alloc();
  *(void *)(v8 + 392) = swift_task_alloc();
  *(void *)(v8 + 400) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  *(void *)(v8 + 408) = swift_task_alloc();
  *(void *)(v8 + 416) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for CRAsset();
  *(void *)(v8 + 42MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = v12;
  *(void *)(v8 + 432) = *(void *)(v12 - 8);
  *(void *)(v8 + 440) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for URL();
  *(void *)(v8 + 448) = v13;
  *(void *)(v8 + 456) = *(void *)(v13 - 8);
  *(void *)(v8 + 46MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = swift_task_alloc();
  *(void *)(v8 + 472) = swift_task_alloc();
  *(void *)(v8 + 480) = swift_task_alloc();
  *(void *)(v8 + 488) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:), 0, 0);
}

uint64_t specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)()
{
  id v1 = *(void **)(v0 + 272);
  if (v1)
  {
    *(void *)(v0 + 200) = 0xD000000000000019;
    *(void *)(v0 + 208) = 0x800000020C854A50;
    id v2 = objc_msgSend(v1, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    if (v2)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      *(_OWORD *)(v0 + 168) = 0u;
      *(_OWORD *)(v0 + 18MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = 0u;
    }
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v0 + 168, v0 + 136, &demangling cache variable for type metadata for Any?);
    if (*(void *)(v0 + 160))
    {
      uint64_t v3 = *(void *)(v0 + 424);
      uint64_t v4 = *(void *)(v0 + 432);
      uint64_t v6 = *(void *)(v0 + 400);
      uint64_t v5 = *(void *)(v0 + 408);
      uint64_t v8 = *(void *)(v0 + 232);
      uint64_t v7 = *(void *)(v0 + 240);
      outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 136, &demangling cache variable for type metadata for Any?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v8, v5, &demangling cache variable for type metadata for CRAsset?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v7, v6, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
      uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
      if (v9(v5, 1, v3) == 1)
      {
        uint64_t v10 = *(void *)(v0 + 392);
        uint64_t v11 = *(void *)(v0 + 288);
        uint64_t v12 = *(void *)(v0 + 296);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 400), v10, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
        {
          uint64_t v13 = *(void *)(v0 + 424);
          uint64_t v14 = *(void *)(v0 + 432);
          uint64_t v15 = *(void *)(v0 + 416);
          uint64_t v16 = *(void *)(v0 + 392);
          outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 400), (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v16, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, 1, 1, v13);
        }
        else
        {
          uint64_t v51 = *(void *)(v0 + 392);
          uint64_t v50 = *(void *)(v0 + 400);
          uint64_t v52 = *(void *)(v0 + 288);
          uint64_t v53 = *(void *)(v0 + 296);
          swift_getKeyPath();
          _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
          Capsule<>.subscript.getter();
          swift_release();
          outlined destroy of StocksKitCurrencyCache.Provider?(v50, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
          (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
        }
        uint64_t v54 = *(void *)(v0 + 416);
        uint64_t v55 = *(void *)(v0 + 424);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 408), &demangling cache variable for type metadata for CRAsset?);
        if (v9(v54, 1, v55) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 416), &demangling cache variable for type metadata for CRAsset?);
          id v56 = objc_msgSend(self, sel_defaultManager);
          URL._bridgeToObjectiveC()(v57);
          CGFloat v59 = v58;
          *(void *)(v0 + 216) = 0;
          id v60 = objc_msgSend(v56, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v58, 1, v0 + 216);

          id v61 = *(void **)(v0 + 216);
          if (v60)
          {
            uint64_t v62 = *(void *)(v0 + 472);
            uint64_t v63 = *(void *)(v0 + 448);
            uint64_t v64 = *(void *)(v0 + 456);
            uint64_t v65 = *(void *)(v0 + 376);
            static URL._unconditionallyBridgeFromObjectiveC(_:)();
            id v66 = v61;

            (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v65, v62, v63);
            uint64_t v67 = 0;
          }
          else
          {
            id v72 = v61;
            id v73 = (void *)_convertNSErrorToError(_:)();

            swift_willThrow();
            uint64_t v67 = 1;
          }
          uint64_t v75 = *(void *)(v0 + 456);
          uint64_t v74 = *(void *)(v0 + 464);
          uint64_t v76 = *(void *)(v0 + 448);
          uint64_t v77 = *(void *)(v0 + 376);
          uint64_t v78 = *(void *)(v0 + 256);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v77, v67, 1, v76);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v74, v78, v76);
          int v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v77, 1, v76);
          uint64_t v80 = *(void *)(v0 + 480);
          uint64_t v82 = *(void *)(v0 + 456);
          uint64_t v81 = *(void *)(v0 + 464);
          uint64_t v83 = *(void *)(v0 + 448);
          uint64_t v84 = *(void *)(v0 + 376);
          if (v79 == 1)
          {
            URL.deletingLastPathComponent()();
            id v93 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
            v93(v81, v83);
            outlined destroy of StocksKitCurrencyCache.Provider?(v84, &demangling cache variable for type metadata for URL?);
          }
          else
          {
            id v93 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
            v93(v81, v83);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 32))(v80, v84, v83);
          }
          uint64_t v85 = *(void *)(v0 + 480);
          uint64_t v94 = *(void *)(v0 + 488);
          uint64_t v86 = *(void *)(v0 + 472);
          uint64_t v88 = *(void *)(v0 + 448);
          uint64_t v87 = *(void *)(v0 + 456);
          uint64_t v90 = *(void *)(v0 + 352);
          uint64_t v89 = *(void *)(v0 + 360);
          uint64_t v91 = *(void *)(v0 + 344);
          UUID.init()();
          UUID.uuidString.getter();
          (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v91);
          URL.appendingPathComponent(_:)();
          swift_bridgeObjectRelease();
          v93(v85, v88);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 32))(v94, v86, v88);
          char v21 = 1;
          goto LABEL_11;
        }
        id v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 432) + 32);
      }
      else
      {
        uint64_t v37 = *(void *)(v0 + 424);
        uint64_t v38 = *(void *)(v0 + 432);
        uint64_t v40 = *(void *)(v0 + 408);
        uint64_t v39 = *(void *)(v0 + 416);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 400), (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
        id v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
        v41(v39, v40, v37);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      }
      uint64_t v68 = *(void *)(v0 + 256);
      v41(*(void *)(v0 + 440), *(void *)(v0 + 416), *(void *)(v0 + 424));
      uint64_t v69 = swift_task_alloc();
      *(void *)(v0 + 496) = v69;
      *(void *)(v69 + 16) = v68;
      unint64_t v70 = (void *)swift_task_alloc();
      *(void *)(v0 + 50MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = v70;
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ()?);
      *unint64_t v70 = v0;
      v70[1] = specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:);
      return MEMORY[0x270F17D68](v0 + 91, 0, &async function pointer to partial apply for closure #1 in static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:), v69, v71);
    }
  }
  else
  {
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
  }
  uint64_t v17 = *(void *)(v0 + 488);
  uint64_t v18 = *(void *)(v0 + 448);
  uint64_t v19 = *(void *)(v0 + 456);
  uint64_t v20 = *(void *)(v0 + 256);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 136, &demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, v20, v18);
  char v21 = 0;
LABEL_11:
  *(unsigned char *)(v0 + 95) = v21;
  *(void *)(v0 + 520) = 0;
  uint64_t v22 = *(void *)(v0 + 320);
  uint64_t v23 = *(void *)(v0 + 328);
  uint64_t v24 = *(void *)(v0 + 312);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 248), v24, &demangling cache variable for type metadata for Capsule<Image>?);
  int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22);
  if (v25 != 1)
  {
    uint64_t v26 = *(void *)(v0 + 488);
    unint64_t v27 = *(void *)(v0 + 336);
    int v28 = *(unsigned __int8 *)(v0 + 93);
    uint64_t v29 = *(void *)(v0 + 264);
    uint64_t v30 = *(void *)(v0 + 224);
    (*(void (**)(unint64_t, void, void))(*(void *)(v0 + 328) + 32))(v27, *(void *)(v0 + 312), *(void *)(v0 + 320));
    specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(v27, v26, v30, v29, v28);
    (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
    if ((v21 & 1) == 0)
    {
LABEL_22:
      (*(void (**)(void, void))(*(void *)(v0 + 456) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 448));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v49 = *(uint64_t (**)(BOOL))(v0 + 8);
      return v49(v25 != 1);
    }
    id v48 = objc_msgSend(self, sel_defaultManager);
    NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)();
    uint64_t v92 = *(void *)(v0 + 368);

    id v36 = &demangling cache variable for type metadata for URL?;
    uint64_t v35 = v92;
LABEL_15:
    outlined destroy of StocksKitCurrencyCache.Provider?(v35, v36);
    goto LABEL_22;
  }
  uint64_t v31 = *(void *)(v0 + 384);
  uint64_t v32 = *(void *)(v0 + 288);
  uint64_t v33 = *(void *)(v0 + 296);
  uint64_t v34 = *(void *)(v0 + 240);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 312), &demangling cache variable for type metadata for Capsule<Image>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v34, v31, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
  {
    uint64_t v35 = *(void *)(v0 + 384);
    id v36 = (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?;
    goto LABEL_15;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 296) + 32))(*(void *)(v0 + 304), *(void *)(v0 + 384), *(void *)(v0 + 288));
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  type metadata accessor for CRContext();
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  uint64_t v42 = MEMORY[0x21054C990](0, v0 + 96);
  *(void *)(v0 + 528) = v42;
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(_OWORD *)(v0 + 16) = xmmword_20C834980;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 6MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  uint64_t v43 = async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:);
  id v44 = (id)v42;
  CGFloat v45 = (void *)swift_task_alloc();
  *(void *)(v0 + 536) = v45;
  *CGFloat v45 = v0;
  v45[1] = specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:);
  uint64_t v46 = *(void *)(v0 + 304);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
                                                            + v43))(v42 | 0x4000000000000000, v46, v0 + 16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 512) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSURL *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  id v58;
  uint64_t (*v59)(BOOL);
  BOOL v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  (*(void (**)(void, void))(*(void *)(v0 + 432) + 8))(*(void *)(v0 + 440), *(void *)(v0 + 424));
  id v1 = *(void *)(v0 + 512);
  id v2 = objc_msgSend(self, sel_defaultManager);
  URL._bridgeToObjectiveC()(v3);
  uint64_t v5 = v4;
  *(void *)(v0 + 216) = 0;
  uint64_t v6 = objc_msgSend(v2, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v4, 1, v0 + 216);

  uint64_t v7 = *(void **)(v0 + 216);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 472);
    uint64_t v10 = *(void *)(v0 + 448);
    uint64_t v9 = *(void *)(v0 + 456);
    uint64_t v11 = *(void *)(v0 + 376);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v7;

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v11, v8, v10);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v14 = v7;
    uint64_t v15 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v1 = 0;
    uint64_t v13 = 1;
  }
  uint64_t v16 = *(void *)(v0 + 456);
  uint64_t v17 = *(void *)(v0 + 464);
  uint64_t v18 = *(void *)(v0 + 448);
  uint64_t v19 = *(void *)(v0 + 376);
  uint64_t v20 = *(void *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v19, v13, 1, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v17, v20, v18);
  char v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v19, 1, v18);
  uint64_t v22 = *(void *)(v0 + 480);
  uint64_t v23 = *(void *)(v0 + 456);
  uint64_t v24 = *(void *)(v0 + 464);
  int v25 = *(void *)(v0 + 448);
  uint64_t v26 = *(void *)(v0 + 376);
  uint64_t v64 = v1;
  if (v21 == 1)
  {
    URL.deletingLastPathComponent()();
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v62(v24, v25);
    outlined destroy of StocksKitCurrencyCache.Provider?(v26, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v62(v24, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v22, v26, v25);
  }
  unint64_t v27 = *(void *)(v0 + 480);
  uint64_t v63 = *(void *)(v0 + 488);
  int v28 = *(void *)(v0 + 472);
  uint64_t v30 = *(void *)(v0 + 448);
  uint64_t v29 = *(void *)(v0 + 456);
  uint64_t v32 = *(void *)(v0 + 352);
  uint64_t v31 = *(void *)(v0 + 360);
  uint64_t v33 = *(void *)(v0 + 344);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v62(v27, v30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v63, v28, v30);
  *(unsigned char *)(v0 + 95) = 1;
  *(void *)(v0 + 520) = v64;
  uint64_t v34 = *(void *)(v0 + 320);
  uint64_t v35 = *(void *)(v0 + 328);
  id v36 = *(void *)(v0 + 312);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 248), v36, &demangling cache variable for type metadata for Capsule<Image>?);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v36, 1, v34);
  if (v37 != 1)
  {
    uint64_t v38 = *(void *)(v0 + 488);
    uint64_t v39 = *(void *)(v0 + 336);
    uint64_t v40 = *(unsigned __int8 *)(v0 + 93);
    id v41 = *(void *)(v0 + 264);
    uint64_t v42 = *(void *)(v0 + 224);
    (*(void (**)(unint64_t, void, void))(*(void *)(v0 + 328) + 32))(v39, *(void *)(v0 + 312), *(void *)(v0 + 320));
    specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(v39, v38, v42, v41, v40);
    if (v64)
    {
      uint64_t v43 = *(void *)(v0 + 488);
      id v44 = *(void *)(v0 + 448);
      CGFloat v45 = *(void *)(v0 + 456);
      (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      CGFloat v59 = *(uint64_t (**)(BOOL))(v0 + 8);
      id v60 = 0;
LABEL_17:
      return v59(v60);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 320));
    double v58 = objc_msgSend(self, sel_defaultManager);
    NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)();
    id v61 = *(void *)(v0 + 368);

    uint64_t v51 = &demangling cache variable for type metadata for URL?;
    uint64_t v50 = v61;
LABEL_16:
    outlined destroy of StocksKitCurrencyCache.Provider?(v50, v51);
    (*(void (**)(void, void))(*(void *)(v0 + 456) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 448));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    CGFloat v59 = *(uint64_t (**)(BOOL))(v0 + 8);
    id v60 = v37 != 1;
    goto LABEL_17;
  }
  uint64_t v46 = *(void *)(v0 + 384);
  double v47 = *(void *)(v0 + 288);
  id v48 = *(void *)(v0 + 296);
  unint64_t v49 = *(void *)(v0 + 240);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 312), &demangling cache variable for type metadata for Capsule<Image>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v49, v46, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47) == 1)
  {
    uint64_t v50 = *(void *)(v0 + 384);
    uint64_t v51 = (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?;
    goto LABEL_16;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 296) + 32))(*(void *)(v0 + 304), *(void *)(v0 + 384), *(void *)(v0 + 288));
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  Capsule<>.root.getter();
  type metadata accessor for CRContext();
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  uint64_t v52 = MEMORY[0x21054C990](0, v0 + 96);
  *(void *)(v0 + 528) = v52;
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(_OWORD *)(v0 + 16) = xmmword_20C834980;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 6MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  uint64_t v53 = async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:);
  uint64_t v54 = (id)v52;
  uint64_t v55 = (void *)swift_task_alloc();
  *(void *)(v0 + 536) = v55;
  *uint64_t v55 = v0;
  v55[1] = specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:);
  id v56 = *(void *)(v0 + 304);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized PaperDocument.newPDFDocument<A>(use:in:options:)
                                                            + v53))(v52 | 0x4000000000000000, v56, v0 + 16);
}

{
  uint64_t v0;
  unint64_t v1;
  NSURL *v2;
  void *v3;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  NSURL *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSDictionary v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  id v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  if (*(void *)(v0 + 272))
  {
    type metadata accessor for PDFDocumentWriteOption(0);
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, type metadata accessor for PDFDocumentWriteOption);
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  id v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v3 = (void *)MEMORY[0x21054D080](0xD000000000000024, 0x800000020C855560);
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)isa, v3, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();

    URL._bridgeToObjectiveC()(v6);
    uint64_t v8 = v7;
    uint64_t v9 = swift_bridgeObjectRetain();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v9);
    swift_bridgeObjectRelease();
    type metadata accessor for PDFDocumentWriteOption(0);
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, type metadata accessor for PDFDocumentWriteOption);
    v10.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    URL._bridgeToObjectiveC()(v2);
    uint64_t v8 = v11;
    v10.super.Class isa = 0;
  }
  uint64_t v12 = *(void **)(v0 + 544);
  uint64_t v13 = *(unsigned __int8 *)(v0 + 95);
  uint64_t v15 = *(void *)(v0 + 296);
  uint64_t v14 = *(void *)(v0 + 304);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v17 = objc_msgSend(v12, sel_writeToURL_withOptions_, v8, v10.super.isa);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_bridgeObjectRelease();
  if (v13 == 1 && v17)
  {
    uint64_t v18 = *(void *)(v0 + 520);
    uint64_t v19 = objc_msgSend(self, sel_defaultManager);
    NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)();
    if (v18)
    {
      (*(void (**)(void, void))(*(void *)(v0 + 456) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 448));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v20 = *(uint64_t (**)(uint64_t))(v0 + 8);
      char v21 = 0;
      goto LABEL_14;
    }
    uint64_t v22 = *(void *)(v0 + 368);

    outlined destroy of StocksKitCurrencyCache.Provider?(v22, &demangling cache variable for type metadata for URL?);
    uint64_t v17 = 1;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 456) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 448));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(uint64_t))(v0 + 8);
  char v21 = v17;
LABEL_14:
  return v20(v21);
}

uint64_t specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)(uint64_t a1)
{
  id v2 = *(void **)(*(void *)v1 + 528);
  uint64_t v3 = *(void *)(*(void *)v1 + 280);
  *(void *)(*(void *)v1 + 54MarkupContainerViewController.infoButtonTapped()((SEL *)&selRef_toggleInteractionTypes_, 4) = a1;
  swift_task_dealloc();

  outlined destroy of DataOrURL(v3, type metadata accessor for PaperDocument);
  return MEMORY[0x270FA2498](specialized static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:), 0, 0);
}

uint64_t type metadata accessor for ImageWrapper #1 in MarkupContainerViewController.dataRepresentation(withError:)()
{
  return self;
}

uint64_t sub_20C43DFCC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in MarkupContainerViewController.dataRepresentation(withError:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *((void *)v1 + 2);
  uint64_t v7 = *((void *)v1 + 3);
  double v8 = v1[4];
  double v9 = v1[5];
  uint64_t v10 = *((void *)v1 + 6);
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in MarkupContainerViewController.dataRepresentation(withError:)(v8, v9, a1, v6, v7, v10, v11, v12);
}

unint64_t lazy protocol witness table accessor for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError()
{
  unint64_t result = lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError;
  if (!lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError;
  if (!lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PPKMarkupContainerViewControllerError and conformance PPKMarkupContainerViewControllerError);
  }
  return result;
}

__n128 sub_20C43E264@<Q0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets;
  swift_beginAccess();
  __n128 result = *(__n128 *)v3;
  long long v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

void sub_20C43E2B8(double *a1)
{
}

uint64_t sub_20C43E2E4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled, a2);
}

uint64_t sub_20C43E2F0(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_findInteractionEnabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.findInteractionEnabled.didset);
}

uint64_t sub_20C43E310@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled, a2);
}

uint64_t sub_20C43E31C(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.isImageAnalysisEnabled.didset);
}

uint64_t keypath_set_59Tm(char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(uint64_t))
{
  char v7 = *a1;
  double v8 = (unsigned char *)(*a2 + *a5);
  uint64_t v9 = swift_beginAccess();
  *double v8 = v7;
  return a6(v9);
}

uint64_t sub_20C43E39C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v3);
  *a2 = result;
  return result;
}

uint64_t sub_20C43E3F8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata, a2);
}

uint64_t sub_20C43E404(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_65Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_encryptPrivateMetadata);
}

uint64_t sub_20C43E410@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MarkupContainerViewController.imageDescription.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_20C43E43C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return MarkupContainerViewController.imageDescription.setter(v1, v2);
}

uint64_t sub_20C43E480(char *a1)
{
  return MarkupContainerViewController.showThumbnailViewForMultipage.setter(*a1);
}

uint64_t sub_20C43E4A8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled, a2);
}

uint64_t sub_20C43E4B4(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_annotationEditingEnabled, (uint64_t (*)(uint64_t))MarkupContainerViewController.annotationEditingEnabled.didset);
}

uint64_t sub_20C43E4D4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled, a2);
}

uint64_t sub_20C43E4E0(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_77Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_allEditingDisabled);
}

uint64_t keypath_set_77Tm(char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  char v5 = *a1;
  uint64_t v6 = (unsigned char *)(*a2 + *a5);
  swift_beginAccess();
  *uint64_t v6 = v5;
  return MarkupContainerViewController.delegate.didset();
}

uint64_t sub_20C43E544@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws, a2);
}

uint64_t sub_20C43E550(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_77Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_pencilAlwaysDraws);
}

uint64_t sub_20C43E55C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled, a2);
}

uint64_t sub_20C43E568(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_77Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_formFillingEnabled);
}

uint64_t sub_20C43E574@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden, a2);
}

uint64_t sub_20C43E580(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_65Tm(a1, a2, a3, a4, &OBJC_IVAR___PPKMarkupContainerViewController_toolbarHidden);
}

uint64_t keypath_set_65Tm(char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  char v5 = *a1;
  uint64_t v6 = (unsigned char *)(*a2 + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v6 = v5;
  return result;
}

id sub_20C43E5D8@<X0>(void *a1@<X8>)
{
  id result = MarkupContainerViewController.backgroundColor.getter();
  *a1 = result;
  return result;
}

void sub_20C43E604(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  MarkupContainerViewController.backgroundColor.setter(v1);
}

uint64_t sub_20C43E634@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR___PPKMarkupContainerViewController_showBannerView, a2);
}

id sub_20C43E640(char *a1)
{
  return MarkupContainerViewController.showBannerView.setter(*a1);
}

id sub_20C43E668@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  uint64_t v3 = (void **)(*a1 + OBJC_IVAR___PPKMarkupContainerViewController_pdfBackgroundColor);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *a2 = *v3;
  return v4;
}