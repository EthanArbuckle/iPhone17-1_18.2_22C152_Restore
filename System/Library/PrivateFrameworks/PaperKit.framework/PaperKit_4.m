void specialized TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(int a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t *v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;

  v63 = a4;
  v7 = v4;
  v64 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v8 - 8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CapsuleUndoAction();
  v65 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  v61 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v15 = (char *)&v51 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x270FA5388](v16 - 8);
  v60 = (uint64_t)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  v62 = (char *)&v51 - v19;
  MEMORY[0x270FA5388](v20);
  v22 = (char *)&v51 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  v29 = (char *)&v51 - v28;
  v66 = v7;
  v30 = *(void *)(v7 + direct field offset for TextBoxView.currentUndoAction);
  if (v30)
  {
    v57 = direct field offset for TextBoxView.currentUndoAction;
    v58 = v15;
    v31 = v30 + *(void *)(*(void *)v30 + 104);
    swift_beginAccess();
    v59 = v31;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v31, (uint64_t)v22, a2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, a2);
    }
    else
    {
      v55 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
      v56 = a2;
      v55(v29, v22, v23);
      v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 16))(v26, v29, v23);
      MEMORY[0x270FA5388](v32);
      *(&v51 - 2) = v66;
      swift_retain();
      Capsule.callAsFunction<A>(_:)();
      Capsule.actionUndoingDifference(from:)();
      v33 = v65;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v10, 1, v11) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CapsuleUndoAction?);
      }
      else
      {
        v63 = v24 + 32;
        v34 = v58;
        v53 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
        v54 = v33 + 32;
        v53(v58, v10, v11);
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v61, v34, v11);
        v35 = (unint64_t *)(v30 + *(void *)(*(void *)v30 + 112));
        swift_beginAccess();
        v36 = *v35;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v35 = v36;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1, v36);
          *v35 = v36;
        }
        v39 = *(void *)(v36 + 16);
        v38 = *(void *)(v36 + 24);
        v40 = v39 + 1;
        if (v39 >= v38 >> 1)
        {
          v52 = v39 + 1;
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v36);
          v40 = v52;
          v36 = v50;
          *v35 = v50;
        }
        *(void *)(v36 + 16) = v40;
        v41 = v65;
        v53((char *)(v36+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v39), v61, v11);
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v11);
      }
      v42 = v56;
      if (v64)
      {
        v43 = (uint64_t)v62;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v62, 1, 1, v23);
        v44 = v59;
        swift_beginAccess();
        outlined assign with take of Date?(v43, v44, v42);
        swift_endAccess();
        *(void *)(v66 + v57) = 0;
        swift_release();
        swift_release();
        v45 = *(void (**)(char *, uint64_t))(v24 + 8);
        v45(v26, v23);
        v45(v29, v23);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v29, v23);
        v46 = v62;
        v55(v62, v26, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v46, 0, 1, v23);
        v47 = (uint64_t)v46;
        v48 = v60;
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v47, v60, v42);
        v49 = v59;
        swift_beginAccess();
        outlined assign with take of Date?(v48, v49, v42);
        swift_endAccess();
        swift_release();
      }
    }
  }
}

uint64_t specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = *(void *)(a2 + direct field offset for TextBoxView.textStorage)
     + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  v8 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for TextBox();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v10 + *(int *)(v11 + 24), v6, v3);
  return v8(v14, 0);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, char *, uint64_t);
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  void *v36;
  id v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t (*v49)(unsigned char *, void);
  char *v50;
  unsigned char v51[32];

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v3 - 8);
  v46 = (uint64_t)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  v45 = (uint64_t)&v42 - v6;
  MEMORY[0x270FA5388](v7);
  v44 = (char *)&v42 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v10 = *(void **)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  v47 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v48 = (char *)&v42 - v13;
  MEMORY[0x270FA5388](v14);
  v16 = (char *)&v42 - v15;
  MEMORY[0x270FA5388](v17);
  v19 = (char *)&v42 - v18;
  v20 = *(void *)(a2 + direct field offset for TextBoxView.textStorage)
      + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  v21 = (void (*)(char *, uint64_t, uint64_t))v10[2];
  v21(v19, v20, v9);
  lazy protocol witness table accessor for type TextBox and conformance TextBox((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  v49 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  v23 = v22 + *(int *)(type metadata accessor for Shape() + 52);
  v24 = (void (*)(uint64_t, char *, uint64_t))v10[3];
  v50 = v19;
  v24(v23, v19, v9);
  v21(v16, v23, v9);
  v25 = (void *)CRAttributedString.attributedString.getter();
  v26 = objc_msgSend(v25, sel_string);

  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v29 = v28;

  if (v27) {
    v30 = 0;
  }
  else {
    v30 = v29 == 0xE000000000000000;
  }
  if (v30)
  {
    swift_bridgeObjectRelease();
    v32 = (void (*)(char *, uint64_t))v10[1];
    v32(v16, v9);
    goto LABEL_9;
  }
  v43 = v23;
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v32 = (void (*)(char *, uint64_t))v10[1];
  v32(v16, v9);
  if (v31)
  {
LABEL_9:
    v32(v50, v9);
    return v49(v51, 0);
  }
  v33 = v48;
  v34 = v43;
  v21(v48, v43, v9);
  v35 = v47;
  v21(v47, v34, v9);
  v36 = (void *)CRAttributedString.attributedString.getter();
  v32(v35, v9);
  v37 = objc_msgSend(v36, sel_length);

  result = (uint64_t)v37 - 1;
  if (!__OFSUB__(v37, 1))
  {
    v39 = (uint64_t)v44;
    CRAttributedString.attributes(at:effectiveRange:)();
    v32(v33, v9);
    v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
    v41 = v45;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v39, v45, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v41, v46, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?(v41, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

double sub_20C578E44@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  CanvasElement.coordinateSpace.getter(*(void *)(a2 + a1 - 24), *(void *)(a2 + a1 - 8), v6);
  long long v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

void sub_20C578E94(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 24);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  long long v6 = a1[1];
  v7[0] = *a1;
  v7[1] = v6;
  v7[2] = a1[2];
  CanvasElement.coordinateSpace.setter((uint64_t)v7, v4, v5);
}

uint64_t sub_20C578EE0()
{
  return 24;
}

__n128 sub_20C578EEC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C578F08()
{
  return 24;
}

__n128 sub_20C578F14(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C578F30()
{
  return 24;
}

__n128 sub_20C578F3C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C578F58()
{
  return 24;
}

__n128 sub_20C578F64(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t outlined assign with copy of Capsule<TextBox>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C578FE8()
{
  return 24;
}

__n128 sub_20C578FF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in TextBoxView.resetUndoActionIfPossible()(uint64_t a1)
{
  return specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(a1, *(void *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_20C57902C()
{
  return 24;
}

__n128 sub_20C579038(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

char *specialized TextBoxView.init(canvasElementView:delegate:shouldAddTextboxView:analytics_inputSource:analytics_documentType:)(void *a1, void *a2, char a3, int a4, int a5, unsigned char *a6)
{
  int v79 = a5;
  int v78 = a4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  MEMORY[0x270FA5388](v10 - 8);
  v76 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  v16 = &a6[direct field offset for TextBoxView.delegate];
  *(void *)&a6[direct field offset for TextBoxView.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&a6[direct field offset for TextBoxView.currentUndoAction] = 0;
  *(void *)&a6[direct field offset for TextBoxView.scribbleDebugView] = 0;
  uint64_t v17 = direct field offset for TextBoxView.shouldAddTextboxView;
  a6[direct field offset for TextBoxView.shouldAddTextboxView] = 0;
  a6[direct field offset for TextBoxView.hideText] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&a6[direct field offset for TextBoxView.cancellables] = MEMORY[0x263F8EE88];
  swift_unknownObjectWeakAssign();
  *((void *)v16 + 1) = &protocol witness table for AnyCanvasElementView;
  id v77 = a2;
  swift_unknownObjectWeakAssign();
  a6[v17] = a3;
  v74 = a1;
  v84 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  v18 = v84;
  swift_beginAccess();
  v19 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v83 = v13 + 16;
  v82 = v19;
  v19(v15, v18, v12);
  uint64_t v81 = type metadata accessor for TextBox();
  uint64_t v91 = v81;
  uint64_t v20 = lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  uint64_t v92 = v20;
  v93 = &protocol witness table for TextBox;
  swift_getKeyPath();
  v21 = a6;
  Capsule<>.subscript.getter();
  swift_release();
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v80 = v13 + 8;
  v22(v15, v12);
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81680]), sel_initWithSize_, v97, v98);
  uint64_t v24 = direct field offset for TextBoxView.textContainer;
  *(void *)&v21[direct field offset for TextBoxView.textContainer] = v23;
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F816B8]), sel_init);
  uint64_t v26 = direct field offset for TextBoxView.textLayoutManager;
  *(void *)&v21[direct field offset for TextBoxView.textLayoutManager] = v25;
  v82(v15, v84, v12);
  uint64_t v88 = v81;
  uint64_t v89 = v20;
  v90 = &protocol witness table for TextBox;
  swift_getKeyPath();
  uint64_t v27 = (uint64_t)v76;
  Capsule<>.subscript.getter();
  swift_release();
  v22(v15, v12);
  id v28 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
  id v29 = CRTextStorage.init(_:)(v27);
  uint64_t v30 = direct field offset for TextBoxView.textStorage;
  *(void *)&v21[direct field offset for TextBoxView.textStorage] = v29;
  uint64_t v31 = *(void *)&v21[v24];
  v32 = v74;
  objc_msgSend(*(id *)&v21[v26], sel_setTextContainer_, v31);
  id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81688]), sel_init);
  uint64_t v34 = direct field offset for TextBoxView.textContentStorage;
  *(void *)&v21[direct field offset for TextBoxView.textContentStorage] = v33;
  objc_msgSend(v33, sel_setTextStorage_, *(void *)&v21[v30]);
  v35 = *(void **)&v21[v34];
  v36 = *(void **)&v21[v26];
  id v37 = v35;
  id v38 = v36;
  objc_msgSend(v37, sel_addTextLayoutManager_, v38);

  v82(v15, v84, v12);
  uint64_t v85 = v81;
  uint64_t v86 = v20;
  v87 = &protocol witness table for TextBox;
  swift_getKeyPath();
  v76 = (char *)v20;
  Capsule<>.subscript.getter();
  swift_release();
  v75 = v22;
  v22(v15, v12);
  double v39 = v97;
  double v40 = v98;
  v41 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextBoxView<TextBox>);
  v95.receiver = v21;
  v95.super_class = v41;
  id v42 = objc_msgSendSuper2(&v95, sel_initWithFrame_, 0.0, 0.0, v39, v40);
  v43 = self;
  v44 = (char *)v42;
  id v45 = objc_msgSend(v43, sel_clearColor);
  objc_msgSend(v44, sel_setBackgroundColor_, v45);

  id v46 = objc_msgSend(v44, sel_layer);
  objc_msgSend(v46, sel_setAnchorPoint_, 0.0, 0.0);

  v47 = self;
  id v48 = objc_msgSend(v47, sel_defaultCenter);
  objc_msgSend(v48, sel_addObserver_selector_name_object_, v44, sel_keyboardWillShowNotification_, *MEMORY[0x263F83808], 0);

  id v49 = objc_msgSend(v47, sel_defaultCenter);
  objc_msgSend(v49, sel_addObserver_selector_name_object_, v44, sel_keyboardWillHideNotification_, *MEMORY[0x263F83800], 0);

  id v50 = objc_msgSend(v47, sel_defaultCenter);
  objc_msgSend(v50, sel_addObserver_selector_name_object_, v44, sel_breakUndoCoalescing_, *MEMORY[0x263F08628], 0);

  id v51 = objc_msgSend(v47, sel_defaultCenter);
  objc_msgSend(v51, sel_addObserver_selector_name_object_, v44, sel_breakUndoCoalescing_, *MEMORY[0x263F08650], 0);

  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v32) + 0x118))())
  {
    objc_msgSend(v32, sel_setIsAccessibilityElement_, 1);
    uint64_t v52 = one-time initialization token for paperKitBundle;
    v53 = v32;
    if (v52 != -1) {
      swift_once();
    }
    v99._object = (void *)0x800000020C859E00;
    v54._uint64_t countAndFlagsBits = 0x786F422074786554;
    v54._object = (void *)0xE800000000000000;
    v55.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v55.value._object = (void *)0xEB00000000656C62;
    v56._uint64_t countAndFlagsBits = 0;
    v56._object = (void *)0xE000000000000000;
    v99._uint64_t countAndFlagsBits = 0xD000000000000023;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, v55, paperKitBundle, v56, v99)._countAndFlagsBits;
    v58 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v53, sel_setAccessibilityLabel_, v58);
  }
  v59 = *(void **)&v44[direct field offset for TextBoxView.textStorage];
  v60 = v32;
  id v61 = objc_msgSend(v59, sel_string);
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v64 = v63;

  v65 = (void *)MEMORY[0x21054D080](v62, v64);
  swift_bridgeObjectRelease();
  objc_msgSend(v60, sel_setAccessibilityValue_, v65);

  uint64_t v66 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics;
  uint64_t v67 = *(void *)&v44[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
  uint64_t v68 = ((uint64_t (*)(char *, char *, uint64_t))v82)(v15, v84, v12);
  MEMORY[0x270FA5388](v68);
  v69 = v76;
  *(&v74 - 4) = (void *)v81;
  *(&v74 - 3) = v69;
  v99._object = &protocol witness table for TextBox;
  swift_getKeyPath();
  swift_retain();
  Capsule<>.subscript.getter();
  swift_release();
  v75(v15, v12);
  char v94 = v96;
  id v70 = (id)specialized FormContentType.uiTextContentType.getter();

  v71 = *(void **)(v67 + 24);
  *(void *)(v67 + 24) = v70;
  swift_release();

  uint64_t v72 = *(void *)&v44[v66];
  *(unsigned char *)(v72 + 17) = v78;
  *(unsigned char *)(v72 + 16) = v79;
  return v44;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void (*v38)(char *, char *, uint64_t);
  double v39;
  double v40;
  objc_class *v41;
  id v42;
  void *v43;
  char *v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  id v54;
  Swift::String v55;
  Swift::String_optional v56;
  Swift::String v57;
  uint64_t countAndFlagsBits;
  void *v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  id v71;
  void *v72;
  uint64_t v73;
  void *v75;
  char *v76;
  char *v77;
  id v78;
  int v79;
  int v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _UNKNOWN **v88;
  uint64_t v89;
  uint64_t v90;
  _UNKNOWN **v91;
  uint64_t v92;
  uint64_t v93;
  _UNKNOWN **v94;
  char v95;
  objc_super v96;
  char v97;
  double v98;
  double v99;
  Swift::String v100;

  uint64_t v80 = a5;
  int v79 = a4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  MEMORY[0x270FA5388](v10 - 8);
  id v77 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  v16 = &a6[direct field offset for TextBoxView.delegate];
  *(void *)&a6[direct field offset for TextBoxView.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&a6[direct field offset for TextBoxView.currentUndoAction] = 0;
  *(void *)&a6[direct field offset for TextBoxView.scribbleDebugView] = 0;
  uint64_t v17 = direct field offset for TextBoxView.shouldAddTextboxView;
  a6[direct field offset for TextBoxView.shouldAddTextboxView] = 0;
  a6[direct field offset for TextBoxView.hideText] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&a6[direct field offset for TextBoxView.cancellables] = MEMORY[0x263F8EE88];
  swift_unknownObjectWeakAssign();
  *((void *)v16 + 1) = &protocol witness table for AnyCanvasElementView;
  int v78 = a2;
  swift_unknownObjectWeakAssign();
  a6[v17] = a3;
  v75 = a1;
  v18 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  v19 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v84 = v13 + 16;
  uint64_t v81 = v19;
  v19(v15, v18, v12);
  uint64_t v20 = type metadata accessor for Shape();
  uint64_t v92 = v20;
  v82 = v20;
  v21 = lazy protocol witness table accessor for type Signature and conformance Signature((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  v93 = v21;
  char v94 = &protocol witness table for Shape;
  swift_getKeyPath();
  v22 = a6;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v83 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v85 = v13 + 8;
  v83(v15, v12);
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81680]), sel_initWithSize_, v98, v99);
  uint64_t v24 = direct field offset for TextBoxView.textContainer;
  *(void *)&v22[direct field offset for TextBoxView.textContainer] = v23;
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F816B8]), sel_init);
  uint64_t v26 = direct field offset for TextBoxView.textLayoutManager;
  *(void *)&v22[direct field offset for TextBoxView.textLayoutManager] = v25;
  v81(v15, v18, v12);
  uint64_t v89 = v20;
  v90 = v21;
  uint64_t v91 = &protocol witness table for Shape;
  swift_getKeyPath();
  uint64_t v27 = (uint64_t)v77;
  Capsule<>.subscript.getter();
  swift_release();
  id v28 = v83;
  v83(v15, v12);
  id v29 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
  uint64_t v30 = CRTextStorage.init(_:)(v27);
  uint64_t v31 = direct field offset for TextBoxView.textStorage;
  *(void *)&v22[direct field offset for TextBoxView.textStorage] = v30;
  objc_msgSend(*(id *)&v22[v26], sel_setTextContainer_, *(void *)&v22[v24]);
  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81688]), sel_init);
  id v33 = direct field offset for TextBoxView.textContentStorage;
  *(void *)&v22[direct field offset for TextBoxView.textContentStorage] = v32;
  objc_msgSend(v32, sel_setTextStorage_, *(void *)&v22[v31]);
  uint64_t v34 = *(void **)&v22[v33];
  v35 = *(void **)&v22[v26];
  v36 = v34;
  id v37 = v35;
  objc_msgSend(v36, sel_addTextLayoutManager_, v37);

  id v38 = v81;
  v81(v15, v18, v12);
  uint64_t v86 = v82;
  v87 = v21;
  uint64_t v88 = &protocol witness table for Shape;
  swift_getKeyPath();
  id v77 = (char *)v21;
  Capsule<>.subscript.getter();
  swift_release();
  v28(v15, v12);
  double v39 = v98;
  double v40 = v99;
  v41 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextBoxView<Shape>);
  v96.receiver = v22;
  v96.super_class = v41;
  id v42 = objc_msgSendSuper2(&v96, sel_initWithFrame_, 0.0, 0.0, v39, v40);
  v43 = self;
  v44 = (char *)v42;
  id v45 = objc_msgSend(v43, sel_clearColor);
  objc_msgSend(v44, sel_setBackgroundColor_, v45);

  id v46 = objc_msgSend(v44, sel_layer);
  objc_msgSend(v46, sel_setAnchorPoint_, 0.0, 0.0);

  v47 = self;
  id v48 = objc_msgSend(v47, sel_defaultCenter);
  objc_msgSend(v48, sel_addObserver_selector_name_object_, v44, sel_keyboardWillShowNotification_, *MEMORY[0x263F83808], 0);

  id v49 = objc_msgSend(v47, sel_defaultCenter);
  objc_msgSend(v49, sel_addObserver_selector_name_object_, v44, sel_keyboardWillHideNotification_, *MEMORY[0x263F83800], 0);

  id v50 = objc_msgSend(v47, sel_defaultCenter);
  objc_msgSend(v50, sel_addObserver_selector_name_object_, v44, sel_breakUndoCoalescing_, *MEMORY[0x263F08628], 0);

  id v51 = v75;
  uint64_t v52 = objc_msgSend(v47, sel_defaultCenter);
  objc_msgSend(v52, sel_addObserver_selector_name_object_, v44, sel_breakUndoCoalescing_, *MEMORY[0x263F08650], 0);

  v76 = v18;
  v38(v15, v18, v12);
  LOBYTE(v52) = specialized Capsule<>.isTextBox.getter();
  v83(v15, v12);
  if (v52)
  {
    objc_msgSend(v51, sel_setIsAccessibilityElement_, 1);
    v53 = one-time initialization token for paperKitBundle;
    Swift::String v54 = v51;
    if (v53 != -1) {
      swift_once();
    }
    v100._object = (void *)0x800000020C859E00;
    v55._uint64_t countAndFlagsBits = 0x786F422074786554;
    v55._object = (void *)0xE800000000000000;
    v56.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v56.value._object = (void *)0xEB00000000656C62;
    v57._uint64_t countAndFlagsBits = 0;
    v57._object = (void *)0xE000000000000000;
    v100._uint64_t countAndFlagsBits = 0xD000000000000023;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v55, v56, paperKitBundle, v57, v100)._countAndFlagsBits;
    v59 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v54, sel_setAccessibilityLabel_, v59);
  }
  v60 = *(void **)&v44[direct field offset for TextBoxView.textStorage];
  id v61 = v51;
  uint64_t v62 = objc_msgSend(v60, sel_string);
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v65 = v64;

  uint64_t v66 = (void *)MEMORY[0x21054D080](v63, v65);
  swift_bridgeObjectRelease();
  objc_msgSend(v61, sel_setAccessibilityValue_, v66);

  uint64_t v67 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics;
  uint64_t v68 = *(void *)&v44[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
  v69 = ((uint64_t (*)(char *, char *, uint64_t))v38)(v15, v76, v12);
  MEMORY[0x270FA5388](v69);
  id v70 = v77;
  *(&v75 - 4) = (void *)v82;
  *(&v75 - 3) = v70;
  v100._object = &protocol witness table for Shape;
  swift_getKeyPath();
  swift_retain();
  Capsule<>.subscript.getter();
  swift_release();
  v83(v15, v12);
  objc_super v95 = v97;
  v71 = (id)specialized FormContentType.uiTextContentType.getter();

  uint64_t v72 = *(void **)(v68 + 24);
  *(void *)(v68 + 24) = v71;
  swift_release();

  v73 = *(void *)&v44[v67];
  *(unsigned char *)(v73 + 17) = v79;
  *(unsigned char *)(v73 + 16) = v80;
  return v44;
}

void specialized TextBoxCanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v3 + direct field offset for TextBoxCanvasElementView._textBoxView) = 0;
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v11 = v32;
  CGFloat v12 = v33;
  CGFloat v13 = v34;
  CGFloat v14 = v35;
  if (a3)
  {
    id v15 = a3;
    AnyCanvasElementView.paperBoundsTransform()(&v36);

    long long v17 = *(_OWORD *)&v36.a;
    long long v16 = *(_OWORD *)&v36.c;
    long long v18 = *(_OWORD *)&v36.tx;
  }
  else
  {
    long long v16 = xmmword_20C8356C0;
    long long v17 = xmmword_20C835600;
    long long v18 = 0uLL;
  }
  *(_OWORD *)&v31.a = v17;
  *(_OWORD *)&v31.c = v16;
  *(_OWORD *)&v31.tdouble x = v18;
  v37.origin.double x = v11;
  v37.origin.double y = v12;
  v37.size.double width = v13;
  v37.size.double height = v14;
  CGRect v38 = CGRectApplyAffineTransform(v37, &v31);
  double x = v38.origin.x;
  double y = v38.origin.y;
  double width = v38.size.width;
  double height = v38.size.height;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  id v23 = a2;
  id v24 = a3;
  id v25 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v10, a2, a3, x, y, width, height);

  uint64_t v26 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextBoxView<TextBox>));
  uint64_t v27 = v25;
  id v28 = specialized TextBoxView.init(canvasElementView:delegate:shouldAddTextboxView:analytics_inputSource:analytics_documentType:)(v27, v27, 1, 68, 68, v26);
  uint64_t v29 = direct field offset for TextBoxCanvasElementView._textBoxView;
  uint64_t v30 = *(void **)((char *)v27 + direct field offset for TextBoxCanvasElementView._textBoxView);
  *(void *)((char *)v27 + direct field offset for TextBoxCanvasElementView._textBoxView) = v28;

  if (*(void *)((char *)v27 + v29))
  {
    objc_msgSend(v27, sel_addSubview_);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t outlined destroy of TextBox(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type TextBox and conformance TextBox(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C579E14()
{
  return 24;
}

__n128 sub_20C579E20(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C579E3C()
{
  return 24;
}

__n128 sub_20C579E48(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in TextBoxView.resetUndoActionIfPossible()(a1);
}

{
  return partial apply for specialized closure #1 in TextBoxView.resetUndoActionIfPossible()(a1);
}

Swift::Void __swiftcall PDFRenderer.Context.beginPage()()
{
  if (*(unsigned char *)(v0 + 40) == 1) {
    CGPDFContextEndPage(*(CGContextRef *)(v0 + 32));
  }
  *(unsigned char *)(v0 + 40) = 1;
  uint64_t v1 = *(CGContext **)(v0 + 32);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CGPDFContextBeginPage(v1, isa);

  CGFloat v3 = *(double *)(v0 + 16);
  CGFloat v4 = *(double *)(v0 + 24);
  v9.origin.double x = 0.0;
  v9.origin.double y = 0.0;
  v9.size.double width = v3;
  v9.size.double height = v4;
  double MinY = CGRectGetMinY(v9);
  v10.origin.double x = 0.0;
  v10.origin.double y = 0.0;
  v10.size.double width = v3;
  v10.size.double height = v4;
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tdouble x = 0.0;
  t1.tdouble y = 0.0;
  t2.b = 0.0;
  t2.c = 0.0;
  t2.a = 1.0;
  *(_OWORD *)&t2.d = xmmword_20C8340F0;
  t2.tdouble y = MinY + CGRectGetMaxY(v10);
  CGAffineTransformConcat(&v6, &t1, &t2);
  CGAffineTransform t1 = v6;
  CGContextConcatCTM(v1, &t1);
}

uint64_t PDFRenderer.Context.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for RendererContext.beginPage() in conformance PDFRenderer.Context()
{
}

id protocol witness for RendererContext.cgContext.getter in conformance PDFRenderer.Context()
{
  return *(id *)(*(void *)v0 + 32);
}

void protocol witness for RendererContext.endRendering() in conformance PDFRenderer.Context()
{
  uint64_t v1 = *(CGContext **)(*(void *)v0 + 32);
  CGPDFContextEndPage(v1);
  CGPDFContextClose(v1);
}

uint64_t PDFRenderer.createCGContext(output:)(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  CGAffineTransform v6 = (char *)&mediaBox - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RendererOutput();
  MEMORY[0x270FA5388](v7);
  CGRect v9 = (CFMutableDataRef *)((char *)&mediaBox - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  CGSize v10 = *(CGSize *)(v1 + 32);
  mediaBox.origin = *(CGPoint *)(v1 + 16);
  mediaBox.size = v10;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  outlined init with copy of RendererOutput(a1, (uint64_t)v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, CFMutableDataRef *, uint64_t))(v4 + 32))(v6, v9, v3);
    URL._bridgeToObjectiveC()(v12);
    CFURLRef v14 = v13;
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CGContextRef v16 = CGPDFContextCreateWithURL(v14, &mediaBox, isa);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return (uint64_t)v16;
  }
  if (EnumCaseMultiPayload == 1)
  {
    CFMutableDataRef v17 = *v9;
    CGDataConsumerRef v18 = CGDataConsumerCreateWithCFData(*v9);
    if (v18)
    {
      v19 = v18;
      CFDictionaryRef v20 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      CGContextRef v16 = CGPDFContextCreate(v19, &mediaBox, v20);
    }
    else
    {
      swift_bridgeObjectRelease();

      return 0;
    }
    return (uint64_t)v16;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PDFRenderer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PDFRenderer()
{
  return self;
}

uint64_t type metadata accessor for PDFRenderer.Context()
{
  return self;
}

double protocol witness for Renderer.size.getter in conformance PDFRenderer()
{
  return *(double *)(*(void *)v0 + 32);
}

uint64_t protocol witness for Renderer.createContext(output:) in conformance PDFRenderer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t result = PDFRenderer.createCGContext(output:)(a1);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 40);
    uint64_t v9 = type metadata accessor for PDFRenderer.Context();
    uint64_t result = swift_allocObject();
    *(unsigned char *)(result + 40) = 0;
    *(void *)(result + 16) = v7;
    *(void *)(result + 24) = v8;
    *(void *)(result + 32) = v6;
    *(void *)(a2 + 24) = v9;
    *(void *)(a2 + 32) = &protocol witness table for PDFRenderer.Context;
    *(void *)a2 = result;
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t outlined init with copy of RendererOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RendererOutput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for DataOrURL(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v9 = *a2;
      unint64_t v8 = a2[1];
      outlined copy of Data._Representation(v9, v8);
      *a1 = v9;
      a1[1] = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for DataOrURL(uint64_t *a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for URL();
    uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    return outlined consume of Data._Representation(v5, v6);
  }
}

uint64_t *initializeWithCopy for DataOrURL(uint64_t *a1, uint64_t *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v6 = *a2;
    unint64_t v5 = a2[1];
    outlined copy of Data._Representation(v6, v5);
    *a1 = v6;
    a1[1] = v5;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for DataOrURL(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of DataOrURL((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      uint64_t v6 = *a2;
      unint64_t v5 = a2[1];
      outlined copy of Data._Representation(v6, v5);
      *a1 = v6;
      a1[1] = v5;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of DataOrURL(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DataOrURL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for DataOrURL()
{
  uint64_t result = type metadata singleton initialization cache for DataOrURL;
  if (!type metadata singleton initialization cache for DataOrURL) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithTake for DataOrURL(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for DataOrURL(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DataOrURL((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for DataOrURL()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t CRAttributedString<>.init(string:attributes:scale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>, double a4@<D0>)
{
  uint64_t v30 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  unint64_t v8 = *(void **)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  CGSize v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  CFURLRef v13 = (char *)&v27 - v12;
  id v14 = objc_allocWithZone(MEMORY[0x263F086A0]);
  id v15 = (void *)MEMORY[0x21054D080](a1, a2);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  _sSo21NSAttributedStringKeyaABSHSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(v14, sel_initWithString_attributes_, v15, isa);

  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  uint64_t isEscapingClosureAtFileLocation = (uint64_t)v17;
  CRAttributedString.init(_:)();
  uint64_t v29 = (void (*)(char *, char *, uint64_t))v8[4];
  v29(v13, v10, v7);
  v19 = (void (*)(char *, char *, uint64_t))v8[2];
  v19(v10, v13, v7);
  uint64_t v20 = CRAttributedString.count.getter();
  v21 = (void (*)(char *, uint64_t))v8[1];
  v21(v10, v7);
  if (v20 < 1) {
    goto LABEL_4;
  }
  v19(v10, v13, v7);
  uint64_t v28 = CRAttributedString.count.getter();
  v21(v10, v7);
  uint64_t v22 = swift_allocObject();
  *(double *)(v22 + 16) = a4;
  *(void *)(v22 + 24) = v13;
  uint64_t v23 = swift_allocObject();
  id v24 = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
  *(void *)(v23 + 16) = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
  *(void *)(v23 + 24) = v22;
  aBlock[4] = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_42;
  id v25 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend((id)isEscapingClosureAtFileLocation, sel_enumerateAttributesInRange_options_usingBlock_, 0, v28, 0, v25);

  _Block_release(v25);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_4:

    id v24 = 0;
  }
  v29(v30, v13, v7);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v24);
}

uint64_t CRAttributedString<>.init(nsAttributedString:scale:)@<X0>(void *a1@<X0>, char *a2@<X8>, double a3@<D0>)
{
  id v24 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(void **)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - v10;
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  uint64_t isEscapingClosureAtFileLocation = a1;
  CRAttributedString.init(_:)();
  uint64_t v23 = (void (*)(char *, char *, uint64_t))v6[4];
  v23(v11, v8, v5);
  CFURLRef v13 = (void (*)(char *, char *, uint64_t))v6[2];
  v13(v8, v11, v5);
  uint64_t v14 = CRAttributedString.count.getter();
  id v15 = (void (*)(char *, uint64_t))v6[1];
  v15(v8, v5);
  if (v14 < 1) {
    goto LABEL_4;
  }
  v13(v8, v11, v5);
  uint64_t v22 = CRAttributedString.count.getter();
  v15(v8, v5);
  uint64_t v16 = swift_allocObject();
  *(double *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = v11;
  uint64_t v17 = swift_allocObject();
  CGDataConsumerRef v18 = closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)partial apply;
  *(void *)(v17 + 16) = closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)partial apply;
  *(void *)(v17 + 24) = v16;
  aBlock[4] = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_14_1;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend((id)isEscapingClosureAtFileLocation, sel_enumerateAttributesInRange_options_usingBlock_, 0, v22, 0, v19);

  _Block_release(v19);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_4:

    CGDataConsumerRef v18 = 0;
  }
  v23(v24, v11, v5);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v18);
}

void CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(uint64_t a1, char a2)
{
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.Attributes.init()();
  if (!*(void *)(a1 + 16))
  {
    memset(&v40, 0, 32);
    goto LABEL_11;
  }
  id v4 = (id)*MEMORY[0x263F814F0];
  uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v6 & 1) == 0)
  {
    memset(&v40, 0, 32);

LABEL_11:
    outlined destroy of Any?((uint64_t)&v40);
    if (*(void *)(a1 + 16)) {
      goto LABEL_7;
    }
LABEL_12:
    memset(&v40, 0, 32);
LABEL_17:
    outlined destroy of Any?((uint64_t)&v40);
    goto LABEL_18;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v40);

  if (!v40._familyName.value._object) {
    goto LABEL_11;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  if (swift_dynamicCast())
  {
    swift_getKeyPath();
    id v7 = v36[0];
    Font.init(_:)(&v40, (UIFont)v7);
    *(Swift::String_optional *)CGAffineTransform v36 = v40._name;
    Swift::String_optional familyName = v40._familyName;
    uint64_t pointSize_low = LODWORD(v40.pointSize);
    Swift::Int rawValue = v40.traits.rawValue;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
    CRAttributedString.Attributes.subscript.setter();
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_12;
  }
LABEL_7:
  id v8 = (id)*MEMORY[0x263F81500];
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if (v10) {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v9, (uint64_t)&v40);
  }
  else {
    memset(&v40, 0, 32);
  }

  if (!v40._familyName.value._object) {
    goto LABEL_17;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_18:
    if ((a2 & 1) == 0) {
      goto LABEL_25;
    }
    id v11 = objc_msgSend(self, sel_blackColor);
    if (!v11) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  id v11 = v36[0];
LABEL_20:
  swift_getKeyPath();
  id v12 = v11;
  Color.init(cgColor:)((CGColor *)objc_msgSend(v12, sel_CGColor), (CGColor **)&v40);

  uint64_t countAndFlagsBits = (void *)v40._name.value._countAndFlagsBits;
  if (v40._name.value._countAndFlagsBits && (a2 & 1) != 0)
  {
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v40._name.value._countAndFlagsBits);
    id v15 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    Color.init(cgColor:)((CGColor *)objc_msgSend(v15, sel_CGColor), (CGColor **)&v40);
    uint64_t v16 = v40._name.value._countAndFlagsBits;
    if (!v40._name.value._countAndFlagsBits)
    {
      __break(1u);
      return;
    }

    uint64_t countAndFlagsBits = (void *)v16;
  }
  v40._name.value._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  CRAttributedString.Attributes.subscript.setter();

LABEL_25:
  if (!*(void *)(a1 + 16))
  {
    memset(&v40, 0, 32);
    goto LABEL_37;
  }
  id v17 = (id)*MEMORY[0x263F815F8];
  uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
  if (v19) {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v18, (uint64_t)&v40);
  }
  else {
    memset(&v40, 0, 32);
  }

  if (!v40._familyName.value._object)
  {
LABEL_37:
    outlined destroy of Any?((uint64_t)&v40);
    if (*(void *)(a1 + 16)) {
      goto LABEL_35;
    }
LABEL_38:
    memset(&v40, 0, 32);
LABEL_44:
    outlined destroy of Any?((uint64_t)&v40);
    goto LABEL_45;
  }
  if ((swift_dynamicCast() & 1) != 0 && v36[0])
  {
    swift_getKeyPath();
    LOBYTE(v40._name.value._countAndFlagsBits) = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
    CRAttributedString.Attributes.subscript.setter();
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_38;
  }
LABEL_35:
  id v20 = (id)*MEMORY[0x263F81570];
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
  if (v22) {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v21, (uint64_t)&v40);
  }
  else {
    memset(&v40, 0, 32);
  }

  if (!v40._familyName.value._object) {
    goto LABEL_44;
  }
  if ((swift_dynamicCast() & 1) != 0 && v36[0])
  {
    swift_getKeyPath();
    LOBYTE(v40._name.value._countAndFlagsBits) = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
    CRAttributedString.Attributes.subscript.setter();
  }
LABEL_45:
  uint64_t v23 = (void *)*MEMORY[0x263F81540];
  if (!*(void *)(a1 + 16))
  {
    memset(&v40, 0, 32);
    goto LABEL_60;
  }
  id v24 = v23;
  uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v24);
  if (v26) {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v25, (uint64_t)&v40);
  }
  else {
    memset(&v40, 0, 32);
  }

  if (!v40._familyName.value._object)
  {
LABEL_60:
    outlined destroy of Any?((uint64_t)&v40);
    if (*(void *)(a1 + 16)) {
      goto LABEL_58;
    }
LABEL_61:
    memset(&v40, 0, 32);
LABEL_68:
    swift_bridgeObjectRelease();
LABEL_69:
    outlined destroy of Any?((uint64_t)&v40);
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
  if (swift_dynamicCast())
  {
    id v27 = v36[0];
    if (objc_msgSend(v36[0], sel_baseWritingDirection))
    {
      swift_getKeyPath();
      v40._name.value._uint64_t countAndFlagsBits = (uint64_t)objc_msgSend(v36[0], sel_baseWritingDirection);
      LOBYTE(v40._name.value._object) = 0;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
      lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
      CRAttributedString.Attributes.subscript.setter();
    }
    id v28 = objc_msgSend(v36[0], sel_alignment, *(_OWORD *)v36, familyName, pointSize_low, rawValue, v40._name.value._countAndFlagsBits, v40._name.value._object, v40._familyName.value._countAndFlagsBits);
    if (v28 != (id)(2 * (objc_msgSend(v27, sel_baseWritingDirection) == (id)1)))
    {
      swift_getKeyPath();
      v40._name.value._uint64_t countAndFlagsBits = (uint64_t)objc_msgSend(v27, sel_alignment);
      LOBYTE(v40._name.value._object) = 0;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
      lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
      CRAttributedString.Attributes.subscript.setter();
    }
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_61;
  }
LABEL_58:
  id v29 = v23;
  uint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
  if (v31) {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v30, (uint64_t)&v40);
  }
  else {
    memset(&v40, 0, 32);
  }

  if (!v40._familyName.value._object) {
    goto LABEL_68;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (*(void *)(a1 + 16))
  {
    id v32 = (id)*MEMORY[0x263F81510];
    uint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
    if (v34) {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v33, (uint64_t)&v40);
    }
    else {
      memset(&v40, 0, 32);
    }
  }
  else
  {
    memset(&v40, 0, 32);
  }
  swift_bridgeObjectRelease();
  if (!v40._familyName.value._object)
  {

    goto LABEL_69;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if (swift_dynamicCast())
  {
    swift_getKeyPath();
    Double.init(truncating:)();
    v40._name.value._uint64_t countAndFlagsBits = v35;
    LOBYTE(v40._name.value._object) = 0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute();
    CRAttributedString.Attributes.subscript.setter();
    objc_msgSend(v36[0], sel_setLineBreakMode_, 2);
  }
  else
  {
  }
}

uint64_t CRAttributedString<>.apply(_:)(double *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v49 = v5;
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x270FA5388](v19);
  char v22 = (char *)&v44 - v21;
  double v23 = *a1;
  double v24 = a1[1];
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  uint64_t v47 = v2;
  uint64_t v26 = v2;
  uint64_t v28 = v27;
  v25(v14, v26, v11, v20);
  CRAttributedString.runs.getter();
  id v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v46 = v11;
  v29(v14, v11);
  uint64_t v44 = v16;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v22, v18, v28);
  Swift::String v56 = v22;
  CRAttributedString.Runs.next()();
  uint64_t v30 = v49;
  uint64_t v31 = v48;
  Swift::String v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
  uint64_t v55 = v49 + 48;
  if (((unsigned int (*)(char *, uint64_t))v54)(v10, 1) != 1)
  {
    float v33 = sqrt(v23 * v23 + v24 * v24);
    char v34 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v52 = (void (**)(char *, uint64_t))(v30 + 8);
    v53 = v34;
    uint64_t v49 = v30 + 32;
    uint64_t v45 = v28;
    v34(v7, v10, v31);
    while (1)
    {
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
      CRAttributedString.Runs.Run.subscript.getter();
      swift_release();
      uint64_t v35 = v59;
      if (v59 == 1)
      {
        (*v52)(v7, v31);
      }
      else
      {
        CGAffineTransform v36 = v7;
        uint64_t v37 = v60;
        uint64_t v50 = v61;
        uint64_t v51 = v63;
        CGRect v38 = v10;
        uint64_t v39 = v58;
        *(float *)&unsigned int v40 = v33 * *(float *)&v62;
        CRAttributedString.Runs.Run.range.getter();
        swift_getKeyPath();
        uint64_t v58 = v39;
        uint64_t v59 = v35;
        char v10 = v38;
        uint64_t v60 = v37;
        uint64_t v61 = v50;
        id v7 = v36;
        uint64_t v62 = v40;
        uint64_t v63 = v51;
        v41 = (void (*)(char *, void))CRAttributedString.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
        uint64_t v42 = v48;
        CRAttributedString.Substring.subscript.setter();
        v41(v57, 0);
        uint64_t v31 = v42;
        uint64_t v43 = v42;
        uint64_t v28 = v45;
        (*v52)(v36, v43);
      }
      CRAttributedString.Runs.next()();
      if (v54(v10, 1, v31) == 1) {
        break;
      }
      v53(v7, v10, v31);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v56, v28);
}

uint64_t CRAttributedString<>.isEmpty.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v0 = (void *)CRAttributedString.attributedString.getter();
  id v1 = objc_msgSend(v0, sel_string);

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  if (v2) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0xE000000000000000;
  }
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

void CRAttributedString.Attributes<>.nsAttributes(darkMode:)(char a1)
{
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v78 = v2;
  uint64_t v3 = (void *)*MEMORY[0x263F814F0];
  swift_getKeyPath();
  id v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (*((void *)&v73 + 1) == 1)
  {
    uint64_t v75 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  }
  else
  {
    long long v66 = v73;
    uint64_t v67 = v74;
    uint64_t v68 = v75;
    int v69 = v76;
    uint64_t v70 = v77;
    id v5 = Font.platformFont.getter();
    outlined consume of Font?(v73, *((uint64_t *)&v73 + 1));
    uint64_t v75 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    if (v5)
    {
      *(void *)&long long v73 = v5;
      goto LABEL_8;
    }
  }
  if (one-time initialization token for textBoxDefaultFont != -1) {
    swift_once();
  }
  *(void *)&long long v73 = static UIConstants.textBoxDefaultFont;
  id v6 = (id)static UIConstants.textBoxDefaultFont;
LABEL_8:
  outlined init with take of Any(&v73, &v66);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v72 = v2;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v4, isUniquelyReferenced_nonNull_native);
  unint64_t v8 = v72;
  unint64_t v78 = v72;

  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)*MEMORY[0x263F81500];
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  id v10 = v9;
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  CGColorRef v11 = (CGColorRef)v73;
  if ((void)v73)
  {
    if ((a1 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if ((a1 & 1) == 0)
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v10, &v73);

    outlined destroy of Any?((uint64_t)&v73);
    goto LABEL_17;
  }
  memset(v71, 0, 24);
  v71[3] = 1.0;
  uint64_t v12 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (!v12)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v13 = v12;
  CGColorRef v11 = CGColorCreate(v12, v71);

  if (v11)
  {
LABEL_14:
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v11);
    uint64_t v15 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    Color.init(cgColor:)((CGColor *)objc_msgSend(v15, sel_CGColor), (CGColor **)&v73);
    uint64_t v16 = (CGColor *)v73;
    if ((void)v73)
    {

      CGColorRef v11 = v16;
LABEL_16:
      id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v11);

      uint64_t v75 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      *(void *)&long long v73 = v17;
      outlined init with take of Any(&v73, &v66);
      char v18 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v72 = v8;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v10, v18);
      unint64_t v78 = v72;

      swift_bridgeObjectRelease();
LABEL_17:
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if v73 != 2 && (v73)
      {
        uint64_t v19 = (void *)*MEMORY[0x263F815F8];
        id v20 = objc_allocWithZone(NSNumber);
        id v21 = v19;
        id v22 = objc_msgSend(v20, sel_initWithInteger_, 1);
        uint64_t v75 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        *(void *)&long long v73 = v22;
        outlined init with take of Any(&v73, &v66);
        unint64_t v23 = v78;
        char v24 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v72 = v23;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v21, v24);
        unint64_t v78 = v72;

        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if v73 != 2 && (v73)
      {
        uint64_t v25 = (void *)*MEMORY[0x263F81570];
        id v26 = objc_allocWithZone(NSNumber);
        id v27 = v25;
        id v28 = objc_msgSend(v26, sel_initWithInteger_, 1);
        uint64_t v75 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        *(void *)&long long v73 = v28;
        outlined init with take of Any(&v73, &v66);
        unint64_t v29 = v78;
        char v30 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v72 = v29;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v27, v30);
        unint64_t v78 = v72;

        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      uint64_t v31 = (void **)MEMORY[0x263F81510];
      uint64_t v32 = MEMORY[0x263F8D538];
      float v33 = (void **)MEMORY[0x263F81540];
      if ((BYTE8(v73) & 1) == 0)
      {
        char v34 = (void *)*MEMORY[0x263F81510];
        uint64_t v75 = MEMORY[0x263F8D538];
        outlined init with take of Any(&v73, &v66);
        id v35 = v34;
        unint64_t v36 = v78;
        char v37 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v72 = v36;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v35, v37);
        unint64_t v38 = v72;

        swift_bridgeObjectRelease();
        id v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81650]), sel_init);
        objc_msgSend(v39, sel_setLineBreakMode_, 2);
        unsigned int v40 = *v33;
        uint64_t v75 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
        *(void *)&long long v73 = v39;
        outlined init with take of Any(&v73, &v66);
        id v41 = v40;
        id v42 = v39;
        char v43 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v72 = v38;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v41, v43);
        unint64_t v78 = v72;

        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if (BYTE8(v73))
      {
        uint64_t v44 = 0;
      }
      else
      {
        uint64_t v45 = v73;
        id v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81650]), sel_init);
        uint64_t v44 = v46;
        if (v46) {
          objc_msgSend(v46, sel_setAlignment_, v45);
        }
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if ((BYTE8(v73) & 1) == 0)
      {
        uint64_t v47 = v73;
        if (v44)
        {
          uint64_t v48 = v44;
          id v49 = v44;
        }
        else
        {
          id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81650]), sel_init);
          uint64_t v44 = v50;
          if (!v50) {
            goto LABEL_38;
          }
          id v49 = v50;
          uint64_t v48 = 0;
        }
        id v51 = v48;

        if (objc_msgSend(v49, sel_alignment) == (id)4) {
          objc_msgSend(v49, sel_setAlignment_, 2 * (v47 == 1));
        }
        objc_msgSend(v49, sel_setBaseWritingDirection_, v47);
      }
LABEL_38:
      swift_getKeyPath();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if (BYTE8(v73))
      {
        if (!v44) {
          goto LABEL_48;
        }
        id v52 = v44;
        unint64_t v53 = v78;
      }
      else
      {
        Swift::String v54 = *v31;
        uint64_t v75 = v32;
        outlined init with take of Any(&v73, &v66);
        id v55 = v54;
        unint64_t v56 = v78;
        char v57 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v72 = v56;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v55, v57);
        unint64_t v53 = v72;
        unint64_t v78 = v72;

        swift_bridgeObjectRelease();
        if (v44)
        {
          uint64_t v58 = v44;
          id v59 = v44;
        }
        else
        {
          id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81650]), sel_init);
          uint64_t v44 = v60;
          if (!v60)
          {
LABEL_48:

            return;
          }
          id v59 = v60;
          uint64_t v58 = 0;
        }
        id v61 = v58;

        objc_msgSend(v59, sel_setLineBreakMode_, 2);
        id v52 = v59;
      }
      uint64_t v62 = *v33;
      uint64_t v75 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
      *(void *)&long long v73 = v52;
      outlined init with take of Any(&v73, &v66);
      id v63 = v62;
      id v64 = v52;
      char v65 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v72 = v53;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v63, v65);
      unint64_t v78 = v72;

      swift_bridgeObjectRelease();
      goto LABEL_48;
    }
    __break(1u);
    goto LABEL_50;
  }
LABEL_51:
  __break(1u);
}

void CRAttributedString<>.updateAttribute<A>(_:range:keypath:)(uint64_t a1, char *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v38 = a3;
  unint64_t v36 = a2;
  float v33 = a4;
  uint64_t v34 = a1;
  uint64_t v7 = *(void *)(*MEMORY[0x263F8DE50] + *a4 + 8);
  uint64_t v37 = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v32 = (char *)&v31 - v10;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v12);
  id v14 = (char *)&v31 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v20 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a5 + 24))(v7, a5, v17);
  uint64_t v35 = v5;
  if ((v20 & 1) == 0)
  {
    unint64_t v23 = v36;
LABEL_5:
    uint64_t v25 = v34;
    (*(void (**)(uint64_t, uint64_t))(a5 + 16))(v7, a5);
    swift_getAssociatedConformanceWitness();
    char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
    id v27 = &v23[v38];
    BOOL v28 = __OFADD__(v23, v38);
    if (v26)
    {
      if (!v28)
      {
        if ((uint64_t)v27 >= (uint64_t)v23)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v32, 1, 1, AssociatedTypeWitness);
LABEL_15:
          swift_retain();
          char v30 = (void (*)(char *, void))CRAttributedString.subscript.modify();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
          CRAttributedString.Substring.subscript.setter();
          v30(v39, 0);
          return;
        }
        goto LABEL_18;
      }
      __break(1u);
    }
    else if (!v28)
    {
      if ((uint64_t)v27 >= (uint64_t)v23)
      {
        unint64_t v29 = v32;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v32, v25, AssociatedTypeWitness);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, AssociatedTypeWitness);
        goto LABEL_15;
      }
      goto LABEL_19;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v5, v15);
  id v21 = (void *)CRAttributedString.attributedString.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  id v22 = objc_msgSend(v21, sel_string);

  if (v22)
  {
    unint64_t v23 = (char *)objc_msgSend(v22, sel_paragraphRangeForRange_, v36, v38);
    uint64_t v38 = v24;

    goto LABEL_5;
  }
LABEL_20:
  __break(1u);
}

void *CRAttributedString<>.updateAttribute<A>(in:newValue:keypath:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v81 = a4;
  v82 = a3;
  uint64_t v11 = *a5;
  uint64_t v80 = a5;
  uint64_t v12 = v11;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v13 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  char v65 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v78 = (char *)&v64 - v16;
  uint64_t v86 = a6;
  uint64_t v71 = *(void *)(*MEMORY[0x263F8DE50] + v12 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v84 = (char *)&v64 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v19 = *(char **)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  id v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v85 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  uint64_t v24 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  char v26 = (uint64_t *)((char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v72 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  BOOL v28 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  v87 = (char *)&v64 - v30;
  if (NSNotFound.getter() == a1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v69 = v13;
  uint64_t v31 = v19;
  uint64_t v19 = (char *)(a1 + a2);
  if (__OFADD__(a1, a2))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v67 = a2;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v66 = a1;
  uint64_t v68 = v32;
  CRAttributedString.subscript.getter();
  uint64_t v33 = v77;
  CRAttributedString.Substring.runs.getter();
  (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v33);
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v87, v28, v88);
  BOOL v28 = v85;
  CRAttributedString.Runs.next()();
  uint64_t v76 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v31 + 6);
  uint64_t v77 = (uint64_t)(v31 + 48);
  if (v76(v28, 1, v18) != 1)
  {
    unsigned int v40 = v31 + 32;
    id v39 = (void (*)(char *, char *, uint64_t))*((void *)v31 + 4);
    uint64_t v74 = (void (**)(char *, uint64_t))(v69 + 8);
    uint64_t v75 = v39;
    id v41 = (void (**)(uint64_t, uint64_t))(v70 + 8);
    uint64_t v24 = (uint64_t)(v31 + 8);
    char v26 = (void *)MEMORY[0x263F8EE78];
    long long v73 = v7;
    uint64_t v42 = (uint64_t)v84;
    while (1)
    {
      char v43 = v40;
      v75(v21, v28, v18);
      BOOL v28 = v78;
      CRAttributedString.Runs.Run.attributes.getter();
      v82(v28);
      (*v74)(v28, v83);
      uint64_t v19 = v21;
      uint64_t v44 = (char *)CRAttributedString.Runs.Run.range.getter();
      if (__OFSUB__(v45, v44)) {
        break;
      }
      CRAttributedString<>.updateAttribute<A>(_:range:keypath:)(v42, v44, v45 - (void)v44, v80, v86);
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      (*v41)(v42, AssociatedTypeWitness);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
      }
      unint64_t v51 = v26[2];
      unint64_t v50 = v26[3];
      if (v51 >= v50 >> 1) {
        char v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v26);
      }
      v26[2] = v51 + 1;
      id v52 = &v26[2 * v51];
      v52[4] = v47;
      v52[5] = v49;
      (*(void (**)(char *, uint64_t))v24)(v21, v18);
      BOOL v28 = v85;
      CRAttributedString.Runs.next()();
      int v53 = v76(v28, 1, v18);
      uint64_t v7 = v73;
      uint64_t v42 = (uint64_t)v84;
      unsigned int v40 = v43;
      if (v53 == 1) {
        goto LABEL_5;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  char v26 = (void *)MEMORY[0x263F8EE78];
LABEL_5:
  (*(void (**)(char *, uint64_t))(v72 + 8))(v87, v88);
  if ((*(uint64_t (**)(void))(v86 + 24))())
  {
    uint64_t v34 = (void *)CRAttributedString.attributedString.getter();
    id v35 = objc_msgSend(v34, sel_string);

    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    if (!v36 && v38 == 0xE000000000000000)
    {
      swift_bridgeObjectRelease();
      return v26;
    }
    char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v54 & 1) == 0 && !v67)
    {
      uint64_t v55 = CRAttributedString.count.getter();
      uint64_t v24 = v66;
      if (v55 >= v66)
      {
        uint64_t v19 = v7;
        uint64_t v56 = CRAttributedString.count.getter();
        if (!__OFSUB__(v56, 1))
        {
          BOOL v28 = v65;
          CRAttributedString.attributes(at:effectiveRange:)();
          uint64_t v57 = (uint64_t)v84;
          v82(v28);
          CRAttributedString<>.updateAttribute<A>(_:range:keypath:)(v57, (char *)v24, 0, v80, v86);
          uint64_t v24 = v58;
          uint64_t v19 = v59;
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v57, AssociatedTypeWitness);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
LABEL_22:
            unint64_t v61 = v26[2];
            unint64_t v60 = v26[3];
            if (v61 >= v60 >> 1) {
              char v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, v26);
            }
            v26[2] = v61 + 1;
            uint64_t v62 = &v26[2 * v61];
            v62[4] = v24;
            v62[5] = v19;
            (*(void (**)(char *, uint64_t))(v69 + 8))(v28, v83);
            return v26;
          }
LABEL_30:
          char v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
          goto LABEL_22;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
  }
  return v26;
}

uint64_t static TextAttributeScope.ColorAttribute.name.getter()
{
  return 0x726F6C6F63;
}

void one-time initialization function for defaultValue()
{
}

id static TextAttributeScope.ColorAttribute.defaultValue.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  unint64_t v2 = (void *)static TextAttributeScope.ColorAttribute.defaultValue;
  *a1 = static TextAttributeScope.ColorAttribute.defaultValue;
  return v2;
}

uint64_t static TextAttributeScope.ColorAttribute.isParagraphAttribute.getter()
{
  return 0;
}

id protocol witness for static CRDefaultedAttributeStringKey.defaultValue.getter in conformance TextAttributeScope.ColorAttribute@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  unint64_t v2 = (void *)static TextAttributeScope.ColorAttribute.defaultValue;
  *a1 = static TextAttributeScope.ColorAttribute.defaultValue;
  return v2;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.ColorAttribute()
{
  return 0x726F6C6F63;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.ColorAttribute()
{
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.FontAttribute.name.getter()
{
  return 1953394534;
}

float one-time initialization function for defaultValue()
{
  if (one-time initialization token for textBoxDefaultFont != -1) {
    swift_once();
  }
  id v0 = objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_fontName);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  id v4 = objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_familyName);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_pointSize);
  double v9 = v8;
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = 46;
  v10._object = (void *)0xE100000000000000;
  LOBYTE(v4) = String.hasPrefix(_:)(v10);
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = 0;
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  Swift::Bool v12 = String.hasPrefix(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  float result = v9;
  static TextAttributeScope.FontAttribute.defaultValue = v1;
  qword_2676CCE98 = v3;
  qword_2676CCEA0 = v5;
  qword_2676CCEA8 = v7;
  dword_2676CCEB0 = LODWORD(result);
  qword_2676CCEB8 = 0;
  return result;
}

uint64_t static TextAttributeScope.FontAttribute.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = qword_2676CCEA8;
  int v3 = dword_2676CCEB0;
  uint64_t v4 = qword_2676CCEB8;
  *(void *)a1 = static TextAttributeScope.FontAttribute.defaultValue;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&qword_2676CCE98;
  *(void *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static TextAttributeScope.FontAttribute.isParagraphAttribute.getter()
{
  return 0;
}

uint64_t protocol witness for static CRDefaultedAttributeStringKey.defaultValue.getter in conformance TextAttributeScope.FontAttribute@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = qword_2676CCEA8;
  int v3 = dword_2676CCEB0;
  uint64_t v4 = qword_2676CCEB8;
  *(void *)a1 = static TextAttributeScope.FontAttribute.defaultValue;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&qword_2676CCE98;
  *(void *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.FontAttribute()
{
  return 1953394534;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.FontAttribute()
{
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.UnderlineAttribute.name.getter()
{
  return 0x6E696C7265646E75;
}

uint64_t static TextAttributeScope.UnderlineAttribute.defaultValue.getter()
{
  return 0;
}

uint64_t static TextAttributeScope.UnderlineAttribute.isParagraphAttribute.getter()
{
  return 0;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.UnderlineAttribute()
{
  return 0x6E696C7265646E75;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.UnderlineAttribute()
{
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.StrikethroughAttribute.name.getter()
{
  return 0x6874656B69727473;
}

uint64_t static TextAttributeScope.StrikethroughAttribute.defaultValue.getter()
{
  return 0;
}

uint64_t static TextAttributeScope.StrikethroughAttribute.isParagraphAttribute.getter()
{
  return 0;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.StrikethroughAttribute()
{
  return 0x6874656B69727473;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.StrikethroughAttribute()
{
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.WritingDirectionAttribute.name.getter()
{
  return 0x6F69746365726964;
}

uint64_t static TextAttributeScope.WritingDirectionAttribute.defaultValue.getter()
{
  return 0;
}

uint64_t static TextAttributeScope.WritingDirectionAttribute.isParagraphAttribute.getter()
{
  return 1;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.WritingDirectionAttribute()
{
  return 0x6F69746365726964;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.WritingDirectionAttribute()
{
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.AlignmentAttribute.name.getter()
{
  return 0x6E656D6E67696C61;
}

uint64_t static TextAttributeScope.AlignmentAttribute.defaultValue.getter()
{
  return 4;
}

uint64_t static TextAttributeScope.AlignmentAttribute.isParagraphAttribute.getter()
{
  return 1;
}

void protocol witness for static CRDefaultedAttributeStringKey.defaultValue.getter in conformance TextAttributeScope.AlignmentAttribute(void *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.AlignmentAttribute()
{
  return 0x6E656D6E67696C61;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.AlignmentAttribute()
{
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.KernAttribute.name.getter()
{
  return 1852990827;
}

double static TextAttributeScope.KernAttribute.defaultValue.getter()
{
  return 0.0;
}

uint64_t static TextAttributeScope.KernAttribute.isParagraphAttribute.getter()
{
  return 0;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.KernAttribute()
{
  return 1852990827;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.KernAttribute()
{
  return static CRAttributeStringKey.loadAttribute(from:)();
}

unint64_t one-time initialization function for attributeTypes()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CRAttributeStringDecodingKey.Type)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C837470;
  *(void *)(inited + 32) = 0x726F6C6F63;
  *(void *)(inited + 40) = 0xE500000000000000;
  unint64_t v1 = lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  *(void *)(inited + 48) = &type metadata for TextAttributeScope.ColorAttribute;
  *(void *)(inited + 56) = v1;
  *(void *)(inited + 64) = 1953394534;
  *(void *)(inited + 72) = 0xE400000000000000;
  unint64_t v2 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  *(void *)(inited + 80) = &type metadata for TextAttributeScope.FontAttribute;
  *(void *)(inited + 88) = v2;
  *(void *)(inited + 96) = 0x6E696C7265646E75;
  *(void *)(inited + 104) = 0xE900000000000065;
  unint64_t v3 = lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
  *(void *)(inited + 112) = &type metadata for TextAttributeScope.UnderlineAttribute;
  *(void *)(inited + 120) = v3;
  strcpy((char *)(inited + 128), "strikethrough");
  *(_WORD *)(inited + 142) = -4864;
  unint64_t v4 = lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
  *(void *)(inited + 144) = &type metadata for TextAttributeScope.StrikethroughAttribute;
  *(void *)(inited + 152) = v4;
  *(void *)(inited + 160) = 0x6E656D6E67696C61;
  *(void *)(inited + 168) = 0xE900000000000074;
  unint64_t v5 = lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
  *(void *)(inited + 176) = &type metadata for TextAttributeScope.AlignmentAttribute;
  *(void *)(inited + 184) = v5;
  *(void *)(inited + 192) = 0x6F69746365726964;
  *(void *)(inited + 200) = 0xE90000000000006ELL;
  unint64_t v6 = lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
  *(void *)(inited + 208) = &type metadata for TextAttributeScope.WritingDirectionAttribute;
  *(void *)(inited + 216) = v6;
  *(void *)(inited + 224) = 1852990827;
  *(void *)(inited + 232) = 0xE400000000000000;
  unint64_t v7 = lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute();
  *(void *)(inited + 240) = &type metadata for TextAttributeScope.KernAttribute;
  *(void *)(inited + 248) = v7;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static TextAttributeScope.attributeTypes = result;
  return result;
}

uint64_t static TextAttributeScope.attributeTypes.getter()
{
  if (one-time initialization token for attributeTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static TextAttributeScope.attributeTypes.setter(uint64_t a1)
{
  if (one-time initialization token for attributeTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  static TextAttributeScope.attributeTypes = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static TextAttributeScope.attributeTypes.modify())()
{
  if (one-time initialization token for attributeTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t (*TextAttributeScope.color.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.font.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.underline.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.strikethrough.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.alignment.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.writingDirection.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.kern.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for static CRAttributeStringAttributeScope.attributeTypes.getter in conformance TextAttributeScope()
{
  if (one-time initialization token for attributeTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance NSWritingDirection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, type metadata accessor for NSWritingDirection);
  uint64_t v7 = _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, type metadata accessor for NSWritingDirection);
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance NSWritingDirection()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance NSWritingDirection()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance NSWritingDirection(uint64_t a1)
{
  uint64_t v2 = _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, type metadata accessor for NSWritingDirection);
  uint64_t v3 = _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, type metadata accessor for NSWritingDirection);
  uint64_t v4 = MEMORY[0x263F33180];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance NSTextAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, type metadata accessor for NSTextAlignment);
  uint64_t v7 = _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, type metadata accessor for NSTextAlignment);
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance NSTextAlignment()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance NSTextAlignment()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance NSTextAlignment(uint64_t a1)
{
  uint64_t v2 = _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, type metadata accessor for NSTextAlignment);
  uint64_t v3 = _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, type metadata accessor for NSTextAlignment);
  uint64_t v4 = MEMORY[0x263F33180];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

uint64_t closure #1 in CRAttributedString.Runs<>.familyNames.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v6 = v12;
  if (v12 == 1
    || (v8 = v13, unint64_t v7 = v14, v9 = v11, swift_bridgeObjectRetain(), result = outlined consume of Font?(v9, v6), !v7))
  {
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v7 = 0xE900000000000061;
    uint64_t v8 = 0x63697465766C6548;
  }
  *a1 = v8;
  a1[1] = v7;
  return result;
}

uint64_t closure #1 in CRAttributedString.Runs<>.fontSizes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v10 == 1)
  {
    if (one-time initialization token for textBoxDefaultPointSize != -1) {
      uint64_t result = swift_once();
    }
    float v7 = *(double *)&static UIConstants.textBoxDefaultPointSize;
    float v8 = v7;
  }
  else
  {
    float v8 = *(float *)&v11;
    uint64_t result = outlined consume of Font?(v9, v10);
  }
  *(float *)a1 = v8;
  *(unsigned char *)(a1 + 4) = 0;
  return result;
}

id closure #1 in CRAttributedString.Runs<>.fontColors.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v7 = v9;
  if (!v9)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v7 = static TextAttributeScope.ColorAttribute.defaultValue;
    id result = (id)static TextAttributeScope.ColorAttribute.defaultValue;
  }
  *a1 = v7;
  return result;
}

uint64_t closure #1 in CRAttributedString.Runs<>.isBold.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.isBold.getter(a1, (uint64_t (*)(uint64_t))Font.supportsBold.getter, &static Font.Traits.bold, a2);
}

uint64_t closure #1 in CRAttributedString.Runs<>.supportsBold.getter@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.supportsBold.getter((uint64_t (*)(uint64_t))Font.supportsBold.getter, a1);
}

uint64_t closure #1 in CRAttributedString.Runs<>.isItalic.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.isBold.getter(a1, (uint64_t (*)(uint64_t))Font.supportsItalic.getter, &static Font.Traits.italic, a2);
}

uint64_t closure #1 in CRAttributedString.Runs<>.isBold.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X2>, char *a4@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v32 = a2;
  uint64_t v34 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v29 - v10;
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)v29 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v33 = a1;
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v14, v5);
  uint64_t v17 = v42;
  uint64_t result = outlined consume of Font?(v41, v42);
  if (v17 == 1)
  {
    char v19 = 0;
LABEL_8:
    *uint64_t v34 = v19;
    return result;
  }
  v29[1] = v15;
  uint64_t v30 = v8;
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  v29[0] = v16;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
  uint64_t v20 = v42;
  if (v42 == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v21 = v41;
    uint64_t v35 = v41;
    uint64_t v36 = v42;
    uint64_t v37 = v43;
    uint64_t v38 = v44;
    int v39 = v45;
    uint64_t v40 = v46;
    char v22 = v32(result);
    uint64_t result = outlined consume of Font?(v21, v20);
    if ((v22 & 1) == 0)
    {
      char v19 = 2;
      goto LABEL_8;
    }
    uint64_t v23 = v30;
    CRAttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v29[0])(v23, v5);
    uint64_t v24 = v42;
    if (v42 != 1)
    {
      uint64_t v25 = v46;
      uint64_t v26 = v41;
      uint64_t v27 = v31;
      swift_beginAccess();
      uint64_t v28 = *v27;
      uint64_t result = outlined consume of Font?(v26, v24);
      char v19 = (v28 & ~v25) == 0;
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in CRAttributedString.Runs<>.supportsItalic.getter@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.supportsBold.getter((uint64_t (*)(uint64_t))Font.supportsItalic.getter, a1);
}

uint64_t closure #1 in CRAttributedString.Runs<>.supportsBold.getter@<X0>(uint64_t (*a1)(uint64_t)@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v9 = v16;
  if (v16 == 1)
  {
    char v10 = 1;
  }
  else
  {
    uint64_t v11 = v15;
    v12[0] = v15;
    v12[1] = v16;
    v12[2] = v17;
    v12[3] = v18;
    int v13 = v19;
    uint64_t v14 = v20;
    char v10 = a1(result);
    uint64_t result = outlined consume of Font?(v11, v9);
  }
  *a2 = v10 & 1;
  return result;
}

uint64_t closure #1 in CRAttributedString.Runs<>.isUndlerline.getter@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.isUndlerline.getter((void (*)(void))lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute, a1);
}

uint64_t closure #1 in CRAttributedString.Runs<>.isStrikethrough.getter@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.isUndlerline.getter((void (*)(void))lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute, a1);
}

uint64_t closure #1 in CRAttributedString.Runs<>.isUndlerline.getter@<X0>(void (*a1)(void)@<X2>, unsigned char *a2@<X8>)
{
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  a1();
  CRAttributedString.Runs.Run.subscript.getter();
  uint64_t result = swift_release();
  *a2 = v5 & 1;
  return result;
}

uint64_t closure #1 in CRAttributedString.Runs<>.alignments.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v9) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v8;
  }
  *a1 = v7;
  return result;
}

uint64_t closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v29 - v13;
  if (a4 == 1.0 || a4 == 0.0)
  {
    uint64_t result = swift_bridgeObjectRetain();
    goto LABEL_4;
  }
  if (!*(void *)(a1 + 16))
  {
    long long v34 = 0u;
    long long v35 = 0u;
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  uint64_t v19 = (void *)*MEMORY[0x263F814F0];
  swift_bridgeObjectRetain();
  id v20 = v19;
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
  if ((v22 & 1) == 0)
  {
    long long v34 = 0u;
    long long v35 = 0u;

    goto LABEL_14;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v21, (uint64_t)&v34);

  if (!*((void *)&v35 + 1))
  {
LABEL_14:
    uint64_t result = outlined destroy of Any?((uint64_t)&v34);
    goto LABEL_4;
  }
  uint64_t v23 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    id v30 = *(id *)&v33[0];
    id v31 = v20;
    id v24 = v30;
    objc_msgSend(v30, sel_pointSize);
    id v26 = objc_msgSend(v24, sel_fontWithSize_, v25 * a4);
    *((void *)&v35 + 1) = v23;
    *(void *)&long long v34 = v26;
    outlined init with take of Any(&v34, v33);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = a1;
    uint64_t v28 = v31;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v31, isUniquelyReferenced_nonNull_native);
    a1 = v32;

    uint64_t result = swift_bridgeObjectRelease();
  }
LABEL_4:
  BOOL v16 = __OFADD__(a2, a3);
  uint64_t v17 = a2 + a3;
  if (v16)
  {
    __break(1u);
  }
  else if (v17 >= a2)
  {
    CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(a1, 0);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    uint64_t v18 = (void (*)(long long *, void))CRAttributedString.subscript.modify();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
    CRAttributedString.Substring.attributes.setter();
    v18(&v34, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  __break(1u);
  return result;
}

id CRAttributedString<>.nsAttributedString.getter()
{
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v28 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  unint64_t v1 = (char *)&v27 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v36 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v27 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v11 = (void *)CRAttributedString.attributedString.getter();
  id v12 = objc_msgSend(v11, sel_string);

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  id v16 = objc_allocWithZone(MEMORY[0x263F089B8]);
  uint64_t v17 = (void *)MEMORY[0x21054D080](v13, v15);
  swift_bridgeObjectRelease();
  id v33 = objc_msgSend(v16, sel_initWithString_, v17);

  CRAttributedString.runs.getter();
  long long v34 = v10;
  uint64_t v35 = v8;
  CRAttributedString.Runs.next()();
  uint64_t v18 = v36;
  id v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  uint64_t v31 = v36 + 48;
  if (v30(v7, 1, v2) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v27 + 8))(v34, v35);
    return v33;
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v19 = (void (**)(char *, uint64_t))(v28 + 8);
    uint64_t v36 = v18 + 32;
    id v20 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v28 = MEMORY[0x263F8EE58] + 8;
    while (1)
    {
      v29(v4, v7, v2);
      CRAttributedString.Runs.Run.attributes.getter();
      CRAttributedString.Attributes<>.nsAttributes(darkMode:)(0);
      (*v19)(v1, v32);
      uint64_t v21 = CRAttributedString.Runs.Run.range.getter();
      CRAttributedString.Runs.Run.range.getter();
      uint64_t v23 = v22;
      id result = (id)CRAttributedString.Runs.Run.range.getter();
      uint64_t v25 = v23 - (void)result;
      if (__OFSUB__(v23, result)) {
        break;
      }
      type metadata accessor for NSAttributedStringKey(0);
      _sSo21NSAttributedStringKeyaABSHSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v33, sel_addAttributes_range_, isa, v21, v25);

      (*v20)(v4, v2);
      CRAttributedString.Runs.next()();
      if (v30(v7, 1, v2) == 1) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

void CRAttributedString.Attributes<>.fontWithSize(_:)(uint64_t a1@<X8>, float a2@<S0>)
{
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  object = v9;
  if (v9 == (void *)1)
  {
    if (one-time initialization token for textBoxDefaultFont != -1) {
      swift_once();
    }
    uint64_t v5 = &v12;
    Font.init(_:)(&v12, (UIFont)(id)static UIConstants.textBoxDefaultFont);
    object = v12._name.value._object;
    Swift::String_optional familyName = v12._familyName;
    Swift::Int rawValue = v12.traits.rawValue;
  }
  else
  {
    Swift::Int rawValue = v11;
    uint64_t v5 = (PaperKit::Font *)&v8;
    Swift::String_optional familyName = v10;
  }
  *(void *)a1 = v5->_name.value._countAndFlagsBits;
  *(void *)(a1 + 8) = object;
  *(Swift::String_optional *)(a1 + 16) = familyName;
  *(float *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = rawValue;
}

Swift::Float CRAttributedString.Attributes<>.fontWithFamily(_:)@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (v10 == (void *)1)
  {
    if (one-time initialization token for textBoxDefaultFont != -1) {
      swift_once();
    }
    Font.init(_:)(&v14, (UIFont)(id)static UIConstants.textBoxDefaultFont);
  }
  else
  {
    v14._name.value._uint64_t countAndFlagsBits = v9;
    v14._name.value._object = v10;
    v14._Swift::String_optional familyName = v11;
    v14.pointSize = v12;
    v14.traits.Swift::Int rawValue = v13;
  }
  swift_bridgeObjectRetain();
  Font.familyName.setter(a1, a2);
  Swift::Float result = v14.pointSize;
  Swift::Int rawValue = v14.traits.rawValue;
  Swift::String_optional familyName = v14._familyName;
  *(Swift::String_optional *)a3 = v14._name;
  *(Swift::String_optional *)(a3 + 16) = familyName;
  *(Swift::Float *)(a3 + 32) = result;
  *(void *)(a3 + 40) = rawValue;
  return result;
}

uint64_t sub_20C57FD38()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C57FD48()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_42()
{
  return swift_release();
}

uint64_t sub_20C57FD98()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C57FDA8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.ColorAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.FontAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Font and conformance Font()
{
  unint64_t result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.UnderlineAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : CRValue in TextAttributeScope.UnderlineAttribute()
{
  return MEMORY[0x263F33160];
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : Hashable in TextAttributeScope.UnderlineAttribute()
{
  return MEMORY[0x263F8D508];
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.StrikethroughAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.WritingDirectionAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute);
  }
  return result;
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : CRValue in TextAttributeScope.WritingDirectionAttribute()
{
  return _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, type metadata accessor for NSWritingDirection);
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : Hashable in TextAttributeScope.WritingDirectionAttribute()
{
  return _sSo21NSAttributedStringKeyaABSHSCWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, type metadata accessor for NSWritingDirection);
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.AlignmentAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute);
  }
  return result;
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : CRValue in TextAttributeScope.AlignmentAttribute()
{
  return _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, type metadata accessor for NSTextAlignment);
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : Hashable in TextAttributeScope.AlignmentAttribute()
{
  return _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, type metadata accessor for NSTextAlignment);
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.KernAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute);
  }
  return result;
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : CRValue in TextAttributeScope.KernAttribute()
{
  return MEMORY[0x263F33168];
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : Hashable in TextAttributeScope.KernAttribute()
{
  return MEMORY[0x263F8D558];
}

uint64_t base witness table accessor for CRType in NSWritingDirection()
{
  return _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, type metadata accessor for NSWritingDirection);
}

uint64_t base witness table accessor for CRCodable in NSWritingDirection()
{
  return _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, type metadata accessor for NSWritingDirection);
}

uint64_t base witness table accessor for CRType in NSTextAlignment()
{
  return _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, type metadata accessor for NSTextAlignment);
}

uint64_t base witness table accessor for CRCodable in NSTextAlignment()
{
  return _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, type metadata accessor for NSTextAlignment);
}

uint64_t dispatch thunk of static CRDefaultedAttributeStringKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static CRDefaultedAttributeStringKey.isParagraphAttribute.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for TextAttributeScope()
{
  return &type metadata for TextAttributeScope;
}

ValueMetadata *type metadata accessor for TextAttributeScope.ColorAttribute()
{
  return &type metadata for TextAttributeScope.ColorAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.FontAttribute()
{
  return &type metadata for TextAttributeScope.FontAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.UnderlineAttribute()
{
  return &type metadata for TextAttributeScope.UnderlineAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.StrikethroughAttribute()
{
  return &type metadata for TextAttributeScope.StrikethroughAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.WritingDirectionAttribute()
{
  return &type metadata for TextAttributeScope.WritingDirectionAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.AlignmentAttribute()
{
  return &type metadata for TextAttributeScope.AlignmentAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.KernAttribute()
{
  return &type metadata for TextAttributeScope.KernAttribute;
}

uint64_t _sSo21NSAttributedStringKeyaABSHSCWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized CRAttributedString<>.updateAttribute<A>(in:newValue:keypath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v91 = a6;
  uint64_t v89 = a5;
  uint64_t v85 = a4;
  uint64_t v83 = a3;
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v8 = *(void *)(v95 - 8);
  MEMORY[0x270FA5388](v95);
  char v94 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v10 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  Swift::Float v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  uint64_t v16 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  uint64_t v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v74 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  id v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  v87 = (char *)&v72 - v22;
  uint64_t result = NSNotFound.getter();
  if (result == a1) {
    goto LABEL_62;
  }
  if (__OFADD__(a1, a2))
  {
LABEL_63:
    __break(1u);
    return result;
  }
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  CRAttributedString.subscript.getter();
  uint64_t v24 = v84;
  CRAttributedString.Substring.runs.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v24);
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v87, v20, v88);
  CRAttributedString.Runs.next()();
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v26 = v86;
  uint64_t v82 = v10 + 48;
  uint64_t v81 = v25;
  if (v25(v15, 1, v86) != 1)
  {
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v28 = v10 + 32;
    int v79 = v29;
    unint64_t v78 = (void (**)(char *, uint64_t))(v8 + 8);
    p_Swift::String_optional familyName = &v101._familyName;
    uint64_t v27 = (void *)MEMORY[0x263F8EE78];
    uint64_t v75 = (void (**)(char *, uint64_t))(v28 - 24);
    Swift::String_optional v72 = (Swift::String_optional)xmmword_20C834980;
    uint64_t v77 = v28;
    v90 = v12;
    uint64_t v76 = v15;
    while (1)
    {
      v79(v12, v15, v26);
      CRAttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      unint64_t v30 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      unint64_t v92 = v30;
      v93 = v27;
      if (v97 == (void *)1)
      {
        if (one-time initialization token for textBoxDefaultFont != -1) {
          swift_once();
        }
        Font.init(_:)(&v101, (UIFont)(id)static UIConstants.textBoxDefaultFont);
        uint64_t countAndFlagsBits = v101._familyName.value._countAndFlagsBits;
        object = v101._familyName.value._object;
        if (v101._familyName.value._object)
        {
LABEL_13:
          if (countAndFlagsBits == v89 && object == v91 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_26;
          }
        }
      }
      else
      {
        uint64_t countAndFlagsBits = v98.value._countAndFlagsBits;
        object = v98.value._object;
        v101._name.value._uint64_t countAndFlagsBits = v96;
        v101._name.value._object = v97;
        v101._Swift::String_optional familyName = v98;
        LODWORD(v101.pointSize) = v99;
        v101.traits.Swift::Int rawValue = v100;
        if (v98.value._object) {
          goto LABEL_13;
        }
      }
      id v33 = v91;
      swift_bridgeObjectRetain();
      v34._uint64_t countAndFlagsBits = 46;
      v34._object = (void *)0xE100000000000000;
      uint64_t v35 = v89;
      if (String.hasPrefix(_:)(v34))
      {
        swift_bridgeObjectRelease();
        uint64_t v35 = 0;
        id v33 = 0;
      }
      swift_bridgeObjectRelease();
      v101._familyName.value._uint64_t countAndFlagsBits = v35;
      v101._familyName.value._object = v33;
      uint64_t v37 = v101._name.value._countAndFlagsBits;
      uint64_t v36 = v101._name.value._object;
      Swift::Float pointSize = v101.pointSize;
      Swift::Int rawValue = v101.traits.rawValue;
      uint64_t v96 = v101._name.value._countAndFlagsBits;
      double v97 = v101._name.value._object;
      v98.value._uint64_t countAndFlagsBits = v35;
      v98.value._object = v33;
      *(Swift::Float *)&uint64_t v99 = v101.pointSize;
      Swift::Int v100 = v101.traits.rawValue;
      id v40 = Font.platformFont.getter();
      id v41 = objc_msgSend(v40, sel_fontName);

      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = v43;

      if (v36 && (v42 == v37 && v36 == v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v45._uint64_t countAndFlagsBits = 46;
        v45._object = (void *)0xE100000000000000;
        Swift::Bool v46 = String.hasPrefix(_:)(v45);
        swift_bridgeObjectRelease();
        if (v46)
        {
          swift_bridgeObjectRelease();
          uint64_t v42 = 0;
          uint64_t v44 = 0;
        }
        swift_bridgeObjectRelease();
        v101._name.value._uint64_t countAndFlagsBits = v42;
        v101._name.value._object = v44;
        uint64_t v96 = v42;
        double v97 = v44;
        v98.value._uint64_t countAndFlagsBits = v35;
        v98.value._object = v33;
        *(Swift::Float *)&uint64_t v99 = pointSize;
        Swift::Int v100 = rawValue;
        id v47 = Font.platformFont.getter();
        id v48 = objc_msgSend(v47, sel_familyName);

        uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v51 = v50;

        Font.familyName.setter(v49, v51);
      }
LABEL_26:
      uint64_t v53 = v101._name.value._countAndFlagsBits;
      id v52 = v101._name.value._object;
      uint64_t v55 = v101._familyName.value._countAndFlagsBits;
      char v54 = v101._familyName.value._object;
      float v56 = v101.pointSize;
      Swift::Int v57 = v101.traits.rawValue;
      (*v78)(v94, v95);
      uint64_t result = CRAttributedString.Runs.Run.range.getter();
      uint64_t v59 = v58 - result;
      if (__OFSUB__(v58, result))
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      uint64_t v60 = result;
      if (one-time initialization token for defaultValue != -1) {
        uint64_t result = swift_once();
      }
      uint64_t v61 = qword_2676CCEA0;
      uint64_t v62 = qword_2676CCEA8;
      float v63 = *(float *)&dword_2676CCEB0;
      uint64_t v64 = qword_2676CCEB8;
      if (v52)
      {
        if (!qword_2676CCE98) {
          goto LABEL_48;
        }
        if (v53 != static TextAttributeScope.FontAttribute.defaultValue || v52 != (void *)qword_2676CCE98)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            goto LABEL_48;
          }
        }
      }
      else if (qword_2676CCE98)
      {
        goto LABEL_48;
      }
      if (v54)
      {
        if (!v62) {
          goto LABEL_48;
        }
        if (v55 != v61 || v54 != (void *)v62)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            goto LABEL_48;
          }
        }
      }
      else if (v62)
      {
        goto LABEL_48;
      }
      if (v56 == v63 && v57 == v64)
      {
        if (__OFADD__(v60, v59)) {
          goto LABEL_60;
        }
        if (v60 + v59 < v60) {
          goto LABEL_61;
        }
        v101._name = v72;
        char v65 = p_familyName;
        *p_Swift::String_optional familyName = 0u;
        v65[1] = 0u;
        swift_retain();
        uint64_t v66 = (void (*)(uint64_t *, void))CRAttributedString.subscript.modify();
        CRAttributedString.Substring.subscript.setter();
        v66(&v96, 0);
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
LABEL_48:
      if (__OFADD__(v60, v59)) {
        goto LABEL_58;
      }
      if (v60 + v59 < v60) {
        goto LABEL_59;
      }
      v101._name.value._uint64_t countAndFlagsBits = v53;
      v101._name.value._object = v52;
      v101._familyName.value._uint64_t countAndFlagsBits = v55;
      v101._familyName.value._object = v54;
      *(void *)&v101.Swift::Float pointSize = LODWORD(v56);
      v101.traits.Swift::Int rawValue = v57;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v67 = (void (*)(uint64_t *, void))CRAttributedString.subscript.modify();
      CRAttributedString.Substring.subscript.setter();
      v67(&v96, 0);
      swift_bridgeObjectRelease();
LABEL_51:
      swift_bridgeObjectRelease();
      uint64_t v27 = v93;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = v86;
      Swift::Float v12 = v90;
      uint64_t v15 = v76;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
      }
      unint64_t v70 = v27[2];
      unint64_t v69 = v27[3];
      if (v70 >= v69 >> 1) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v27);
      }
      v27[2] = v70 + 1;
      uint64_t v71 = &v27[2 * v70];
      CGFloat v71[4] = v60;
      v71[5] = v59;
      (*v75)(v12, v26);
      CRAttributedString.Runs.next()();
      if (v81(v15, 1, v26) == 1) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v27 = (void *)MEMORY[0x263F8EE78];
LABEL_5:
  (*(void (**)(char *, uint64_t))(v74 + 8))(v87, v88);
  return (uint64_t)v27;
}

uint64_t getEnumTagSinglePayload for StickerDropPreviewInfo(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for StickerDropPreviewInfo(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for StickerDropPreviewInfo()
{
  return &type metadata for StickerDropPreviewInfo;
}

id specialized Canvas.stickerDropInteraction(_:previewForDropping:withDefault:)(void *a1, void *a2)
{
  objc_msgSend(a1, sel__suggestedTransform);
  uint64_t v5 = CGAffineTransformDecompose(&v64, &transform);
  double width = v64.scale.width;
  double height = v64.scale.height;
  CGFloat rotation = v64.rotation;
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x308);
  uint64_t v11 = (void *)((uint64_t (*)(CGAffineTransformComponents *))v10)(v5);
  double v12 = 1.0;
  double v13 = 1.0;
  if (v11)
  {
    uint64_t v14 = v11;
    objc_msgSend(v11, sel_zoomScale);
    double v13 = v15;
  }
  (*(void (**)(CGAffineTransformComponents *__return_ptr))((*v9 & *v2) + 0x5D0))(&v64);
  outlined init with take of CGAffineTransform?((uint64_t)&v64, (uint64_t)&transform);
  if ((v66 & 1) == 0) {
    double v12 = sqrt(transform.a * transform.a + transform.b * transform.b);
  }
  double v16 = 1.0 / (v13 * v12);
  CGAffineTransformMakeScale(&v63, width * v16, height * v16);
  long long v57 = *(_OWORD *)&v63.c;
  long long v59 = *(_OWORD *)&v63.a;
  tdouble x = v63.tx;
  tdouble y = v63.ty;
  objc_msgSend(a2, sel_size);
  *(_OWORD *)&v63.a = v59;
  *(_OWORD *)&v63.c = v57;
  v63.tdouble x = tx;
  v63.tdouble y = ty;
  CGSize v19 = CGSizeApplyAffineTransform(v71, &v63);
  id v20 = objc_msgSend(a2, sel_target);
  id v21 = objc_msgSend(v20, sel_container);

  id v22 = objc_msgSend(a2, sel_target);
  objc_msgSend(v22, sel_center);
  double v24 = v23;
  double v26 = v25;

  objc_msgSend(v2, sel_convertPoint_fromCoordinateSpace_, v21, v24, v26);
  double v28 = v27;
  double v30 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasView<Image>);
  if (swift_dynamicCastClass())
  {
    uint64_t v31 = (void *)v10();
    if (v31)
    {
      uint64_t v32 = v31;
      objc_msgSend(v31, sel_contentOffset);
      double v34 = v33;
      double v36 = v35;

      double v28 = v28 + v34;
      double v30 = v30 + v36;
    }
    goto LABEL_9;
  }
  type metadata accessor for PaperTextAttachmentView();
  if (swift_dynamicCastClass())
  {
LABEL_9:
    double v28 = v16 * v28;
    double v30 = v16 * v30;
  }
  CGSize v67 = v19;
  double v68 = v28;
  double v69 = v30;
  CGFloat v70 = rotation;
  uint64_t v37 = (void *)((char *)v2 + direct field offset for Canvas.stickerDropPreviewInfoMap);
  swift_beginAccess();
  id v38 = a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v62 = *v37;
  *uint64_t v37 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v67, v38, isUniquelyReferenced_nonNull_native);
  *uint64_t v37 = v62;

  swift_bridgeObjectRelease();
  swift_endAccess();
  id v40 = objc_msgSend(a2, sel_target);
  id v41 = objc_msgSend(v40, sel_container);

  id v42 = objc_msgSend(a2, sel_target);
  objc_msgSend(v42, sel_center);
  double v44 = v43;
  double v46 = v45;

  objc_msgSend(v38, sel__suggestedTransform);
  long long v58 = *(_OWORD *)&v63.c;
  long long v60 = *(_OWORD *)&v63.a;
  CGFloat v47 = v63.tx;
  CGFloat v48 = v63.ty;
  id v49 = objc_allocWithZone(MEMORY[0x263F826F0]);
  *(_OWORD *)&v63.a = v60;
  *(_OWORD *)&v63.c = v58;
  v63.tdouble x = v47;
  v63.tdouble y = v48;
  id v50 = objc_msgSend(v49, sel_initWithContainer_center_transform_, v41, &v63, v44, v46);

  id v51 = objc_msgSend(a2, sel_retargetedPreviewWithTarget_, v50);
  id v52 = (objc_class *)type metadata accessor for StickerDragPreviewContainerView();
  uint64_t v53 = objc_allocWithZone(v52);
  uint64_t v54 = OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_isLifted;
  v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_isLifted] = 0;
  *(void *)&v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_meshView] = 0;
  *(void *)&v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_transformView] = 0;
  *(void *)&v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shineView] = 0;
  *(void *)&v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shadowView] = 0;
  v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_isDropAnimation] = 1;
  v53[v54] = 1;
  v61.receiver = v53;
  v61.super_class = v52;
  id v55 = objc_msgSendSuper2(&v61, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v51, sel__setPreviewContainer_, v55);

  return v51;
}

uint64_t TaggedValue_1<>.init(docCameraFilter:)@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
      uint64_t result = v4(a2, 1, 1, v3);
      break;
    case 1:
    case 2:
    case 3:
    case 4:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
      lazy protocol witness table accessor for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>();
      TaggedValue_1.init(_:)();
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 0, 1, v6);
      break;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x20C581820);
  }
  return result;
}

PaperKit::BasicImageFilter_optional __swiftcall BasicImageFilter.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 4;
  if ((unint64_t)rawValue < 4) {
    char v2 = rawValue;
  }
  *unint64_t v1 = v2;
  return (PaperKit::BasicImageFilter_optional)rawValue;
}

uint64_t BasicImageFilter.rawValue.getter()
{
  return *v0;
}

PaperKit::BasicImageFilter_optional protocol witness for RawRepresentable.init(rawValue:) in conformance BasicImageFilter(Swift::Int *a1)
{
  return BasicImageFilter.init(rawValue:)(*a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance BasicImageFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  unint64_t v7 = lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance BasicImageFilter()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance BasicImageFilter()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance BasicImageFilter(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  unint64_t v3 = lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  uint64_t v4 = MEMORY[0x263F33180];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

uint64_t TaggedValue_1<>.init(_:)()
{
  return TaggedValue_1.init(_:)();
}

unint64_t lazy protocol witness table accessor for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>;
  if (!lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter;
  if (!lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter;
  if (!lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter;
  if (!lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter;
  if (!lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter;
  if (!lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BasicImageFilter(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C581C7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BasicImageFilter()
{
  return &type metadata for BasicImageFilter;
}

void TextStyleEditingController.updateUI()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller;
  uint64_t v3 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v3)
  {
    unsigned int v4 = (void *)v3;
    unint64_t v5 = CanvasElementController.textBoxes.getter();

    if (v5)
    {
      if (v5 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14 >= 1) {
          goto LABEL_5;
        }
      }
      else if (*(uint64_t *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
      {
LABEL_5:
        Array<A>.displayAttributes.getter(v5, &v76);
        swift_bridgeObjectRelease();
        uint64_t v6 = v77;
        uint64_t v7 = v78;
        char v8 = v79;
        char v9 = v81;
        uint64_t v10 = v83;
        uint64_t v11 = v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes;
        double v12 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes + 32);
        double v13 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes + 72);
        *(void *)uint64_t v11 = v76;
        *(void *)(v11 + 8) = v6;
        *(void *)(v11 + 16) = v7;
        *(unsigned char *)(v11 + 24) = v8;
        *(_OWORD *)(v11 + 32) = v80;
        *(unsigned char *)(v11 + 48) = v9;
        *(_OWORD *)(v11 + 56) = v82;
        *(void *)(v11 + 72) = v10;

        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
  }
LABEL_8:
  uint64_t v15 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView);
  uint64_t v16 = *(void *)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_axis);
  uint64_t v17 = OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontNameControl;
  uint64_t v18 = *(char **)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontNameControl);
  uint64_t v75 = v2;
  if (v16 || (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isCompactUI) & 1) != 0)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v19 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes);
    uint64_t v20 = swift_bridgeObjectRetain();
  }
  id v21 = &v18[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title];
  *(void *)id v21 = v19;
  *((void *)v21 + 1) = v20;
  id v22 = v18;
  swift_bridgeObjectRelease();
  AttributeStylingControl.updateUI()();

  double v23 = *(char **)(v15 + v17);
  if (v16 == 1 || *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isCompactUI) == 1)
  {
    double v24 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes + 72);
    id v25 = v24;
  }
  else
  {
    double v24 = 0;
  }
  double v26 = *(void **)&v23[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image];
  *(void *)&v23[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = v24;
  double v27 = v23;
  id v28 = v24;

  AttributeStylingControl.updateUI()();
  uint64_t v29 = OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontSizeControl;
  double v30 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontSizeControl);
  if (v16) {
    char v31 = 0;
  }
  else {
    char v31 = *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isCompactUI) ^ 1;
  }
  uint64_t v32 = v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes;
  uint64_t v76 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes + 16);
  double v33 = v30;
  uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v76 = v34;
  uint64_t v77 = v35;
  if (v31)
  {
    v84._uint64_t countAndFlagsBits = 32;
    v84._object = (void *)0xE100000000000000;
    if (one-time initialization token for textBoxFontUnitString != -1) {
      swift_once();
    }
    Swift::String v36 = (Swift::String)static UIConstants.textBoxFontUnitString;
    swift_bridgeObjectRetain();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    uint64_t v34 = v76;
    uint64_t v35 = v77;
  }
  uint64_t v37 = (uint64_t *)&v33[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title];
  *uint64_t v37 = v34;
  v37[1] = v35;
  swift_bridgeObjectRelease();
  AttributeStylingControl.updateUI()();

  id v38 = *(char **)(v15 + v29);
  if (*(unsigned char *)(v32 + 24) == 1)
  {
    int v39 = self;
    id v40 = v38;
    id v41 = objc_msgSend(v39, sel_italicSystemFontOfSize_, 17.0);
  }
  else
  {
    id v42 = v38;
    id v41 = 0;
  }
  double v43 = *(void **)&v38[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font];
  *(void *)&v38[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font] = v41;
  id v44 = v41;

  AttributeStylingControl.updateUI()();
  double v45 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textAlignmentControl);
  uint64_t v46 = *(void *)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textAlignmentControl + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v48 = *(void *)(v32 + 40);
  uint64_t v49 = *(unsigned __int8 *)(v32 + 48);
  id v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 16);
  id v51 = v45;
  v50(v48, v49, ObjectType, v46);

  uint64_t v52 = v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView;
  uint64_t v53 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView);
  uint64_t v54 = *(void *)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView + 8);
  uint64_t v55 = swift_getObjectType();
  uint64_t v56 = *(void *)(v32 + 56);
  long long v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
  id v58 = v53;
  v57(v56, v55, v54);

  long long v59 = *(void **)v52;
  uint64_t v60 = *(void *)(v52 + 8);
  uint64_t v61 = swift_getObjectType();
  uint64_t v62 = *(void *)(v32 + 64);
  CGAffineTransform v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 72);
  id v64 = v59;
  v63(v62, v61, v60);

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isCompactUI) == 1)
  {
    char v65 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_colorSwatch);
    if (v65)
    {
      char v66 = (void *)MEMORY[0x210550400](v75);
      CGSize v67 = v65;
      if (v66)
      {
        CanvasElementController.selectedTextBoxColors()();
        uint64_t v69 = v68;

        if (v69)
        {
          CGFloat v70 = (void *)specialized Collection.first.getter(v69);
          swift_bridgeObjectRelease();
          if (v70)
          {
            CGSize v71 = *(void **)&v67[OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor];
            *(void *)&v67[OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor] = v70;
            id v72 = v70;

            ColorSwatch.updateUI()();
          }
        }
      }
      uint64_t v73 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isColorPickerPresented);
      uint64_t v74 = (objc_class *)type metadata accessor for ColorSwatch();
      v85.receiver = v67;
      v85.super_class = v74;
      objc_msgSendSuper2(&v85, sel_setSelected_, v73);
      ColorSwatch.updateUI()();
    }
  }
}

void TextStyleEditingController.didTapFontButton()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller;
  uint64_t v3 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v3)
  {
    uint64_t v4 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    uint64_t v18 = (UIViewController *)v3;
    if (MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    {
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);

      uint64_t v8 = swift_unknownObjectRelease();
      if (!v7) {
        return;
      }
      char v9 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x620);
      uint64_t v10 = (void *)((uint64_t (*)(uint64_t))v9)(v8);
      id v11 = objc_msgSend(v10, sel_presentedViewController);

      if (v11)
      {
      }
      else
      {
        id v11 = (id)v9();

        if (!v11) {
          return;
        }
      }
      type metadata accessor for TextStyleEditingController.SystemFontPickerViewController();
      uint64_t v18 = (UIViewController *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
      [(UIViewController *)v18 setModalPresentationStyle:7];
      double v12 = [(UIViewController *)v18 popoverPresentationController];
      if (v12)
      {
        double v13 = v12;
        [(UIPopoverPresentationController *)v12 setSourceView:*(void *)(*(void *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)+ OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontNameControl)];
      }
      uint64_t v14 = [(UIViewController *)v18 popoverPresentationController];
      if (v14)
      {
        uint64_t v15 = v14;
        [(UIPopoverPresentationController *)v14 _setIgnoresKeyboardNotifications:1];
      }
      uint64_t v16 = (void *)MEMORY[0x210550400](v2);
      uint64_t v17 = v18;
      if (v16)
      {
        CanvasElementController.configureViewControllerForPresentingAsPopover(viewController:)(v18);

        uint64_t v17 = v18;
      }
      [(UIViewController *)v17 setDelegate:v1];
      objc_msgSend(v11, sel_presentViewController_animated_completion_, v18, 1, 0);
    }
  }
}

void TextStyleEditingController.didTapFontSizeButton()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller;
  uint64_t v3 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v3)
  {
    uint64_t v4 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    id v25 = (UIViewController *)v3;
    if (MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    {
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);

      uint64_t v8 = swift_unknownObjectRelease();
      if (!v7) {
        return;
      }
      char v9 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x620);
      uint64_t v10 = (void *)((uint64_t (*)(uint64_t))v9)(v8);
      id v11 = objc_msgSend(v10, sel_presentedViewController);

      if (v11)
      {
      }
      else
      {
        id v11 = (id)v9();

        if (!v11) {
          return;
        }
      }
      uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes + 16);
      if (one-time initialization token for textBoxFontUnitString != -1) {
        swift_once();
      }
      long long v13 = static UIConstants.textBoxFontUnitString;
      objc_allocWithZone((Class)type metadata accessor for FontSizeViewController());
      swift_bridgeObjectRetain();
      id v25 = (UIViewController *)ValueEditingViewController.init(minValue:maxValue:currentValue:unit:contentViewMargin:)(5, 300, v12, v13, *((uint64_t *)&v13 + 1), 10.0);
      swift_unknownObjectWeakAssign();
      [(UIViewController *)v25 setModalPresentationStyle:7];
      uint64_t v14 = [(UIViewController *)v25 popoverPresentationController];
      uint64_t v15 = v14;
      if (v14)
      {
        [(UIPopoverPresentationController *)v14 setSourceView:*(void *)(*(void *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)+ OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontSizeControl)];
      }
      uint64_t v16 = [(UIViewController *)v25 popoverPresentationController];
      if (v16)
      {
        uint64_t v17 = v16;
        objc_msgSend(*(id *)(*(void *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)+ OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontSizeControl), sel_bounds);
        CGRect v28 = CGRectInset(v27, -2.0, -2.0);
        -[UIPopoverPresentationController setSourceRect:](v17, sel_setSourceRect_, v28.origin.x, v28.origin.y, v28.size.width, v28.size.height);
      }
      uint64_t v18 = [(UIViewController *)v25 popoverPresentationController];
      if (v18)
      {
        uint64_t v19 = v18;
        [(UIPopoverPresentationController *)v18 setDelegate:v1];
      }
      uint64_t v20 = [(UIViewController *)v25 popoverPresentationController];
      if (v20)
      {
        id v21 = v20;
        [(UIPopoverPresentationController *)v20 _setIgnoresKeyboardNotifications:1];
      }
      uint64_t v22 = MEMORY[0x210550400](v2);
      double v23 = v25;
      if (v22)
      {
        double v24 = (void *)v22;
        CanvasElementController.configureViewControllerForPresentingAsPopover(viewController:)(v25);

        double v23 = v25;
      }
      objc_msgSend(v11, sel_presentViewController_animated_completion_, v23, 1, 0);
    }
  }
}

void TextStyleEditingController.textAlignmentControlValueChanged()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)
     + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textAlignmentControl;
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  id v7 = v3;
  uint64_t v8 = v6(ObjectType, v4);
  LOBYTE(v4) = v9;

  if ((v4 & 1) == 0)
  {
    uint64_t v10 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
    if (v10)
    {
      id v11 = (void *)v10;
      CanvasElementController.setSelectionTextAlignment(_:)(v8);
    }
    TextStyleEditingController.updateUI()();
  }
}

void TextStyleEditingController.didTapBoldTextStyle()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)
     + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView;
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 40);
  id v7 = v3;
  char v8 = v6(ObjectType, v4);

  uint64_t v9 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    CanvasElementController.setSelectionBold(_:)((v8 & 1) == 0);
  }
  TextStyleEditingController.updateUI()();
}

void TextStyleEditingController.didTapItalicTextStyle()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)
     + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView;
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 40);
  id v7 = v3;
  char v8 = v6(ObjectType, v4);

  uint64_t v9 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    CanvasElementController.setSelectionItalic(_:)((v8 & 2) == 0);
  }
  TextStyleEditingController.updateUI()();
}

void TextStyleEditingController.didTapUnderlineTextStyle()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)
     + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView;
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 40);
  id v7 = v3;
  char v8 = v6(ObjectType, v4);

  uint64_t v9 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    CanvasElementController.setSelectionUnderline(_:)((v8 & 4) == 0);
  }
  TextStyleEditingController.updateUI()();
}

void TextStyleEditingController.didTapStrikethroughTextStyle()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)
     + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView;
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 40);
  id v7 = v3;
  char v8 = v6(ObjectType, v4);

  uint64_t v9 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    CanvasElementController.setSelectionStrikethrough(_:)((v8 & 8) == 0);
  }
  TextStyleEditingController.updateUI()();
}

void TextStyleEditingController.didTapColorSwatch(sender:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView);
  id v5 = objc_msgSend(v4, sel_window);
  if (v5)
  {
    id v30 = v5;
    id v6 = objc_msgSend(v5, sel_rootViewController);
    if (v6)
    {
      id v7 = v6;
      id v8 = objc_msgSend(v4, sel_window);
      if (!v8
        || (uint64_t v9 = v8,
            id v10 = objc_msgSend(self, sel_activeToolPickerForWindow_, v8),
            v9,
            !v10)
        || (id v11 = objc_msgSend(v10, sel_colorUserInterfaceStyle), v10, !v11))
      {
        id v12 = objc_msgSend(v7, sel_traitCollection);
        id v11 = objc_msgSend(v12, sel_userInterfaceStyle);
      }
      long long v13 = (UIViewController *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F825E0]), sel_init);
      [(UIViewController *)v13 setModalPresentationStyle:7];
      uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor);
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = (void *)static PKInkingTool.convertColor(_:from:to:)();
        [(UIViewController *)v13 setSelectedColor:v16];
      }
      uint64_t v17 = [(UIViewController *)v13 popoverPresentationController];
      if (v17)
      {
        uint64_t v18 = v17;
        [(UIPopoverPresentationController *)v17 setSourceView:a1];
      }
      uint64_t v19 = [(UIViewController *)v13 popoverPresentationController];
      if (v19)
      {
        uint64_t v20 = v19;
        [(UIPopoverPresentationController *)v19 setDelegate:v2];
      }
      id v21 = [(UIViewController *)v13 popoverPresentationController];
      if (v21)
      {
        uint64_t v22 = v21;
        [(UIPopoverPresentationController *)v21 _setIgnoresKeyboardNotifications:1];
      }
      uint64_t v23 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
      if (v23)
      {
        double v24 = (void *)v23;
        CanvasElementController.configureViewControllerForPresentingAsPopover(viewController:)(v13);
      }
      [(UIViewController *)v13 setDelegate:v2];
      [(UIViewController *)v13 _setUserInterfaceStyleForGrid:v11];
      id v25 = objc_msgSend(v4, sel_window);
      if (v25
        && (double v26 = v25,
            id v27 = objc_msgSend(self, sel_activeToolPickerForWindow_, v25),
            v26,
            v27))
      {
        id v28 = objc_msgSend(v27, sel_colorUserInterfaceStyle);

        BOOL v29 = v28 == 0;
      }
      else
      {
        BOOL v29 = 0;
      }
      [(UIViewController *)v13 _setShouldUseDarkGridInDarkMode:v29];
      objc_msgSend(v7, sel_presentViewController_animated_completion_, v13, 1, 0);
      *(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isColorPickerPresented) = 1;
      TextStyleEditingController.updateUI()();
    }
  }
}

void @objc TextStyleEditingController.valueEditingViewController(_:didStartChangingValue:)(char *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8 = MEMORY[0x210550400](&a1[OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller]);
  if (v8)
  {
    id v11 = (id)v8;
    id v9 = a3;
    id v10 = a1;
    a5();
  }
}

Swift::Void __swiftcall TextStyleEditingController.fontPickerViewControllerDidPickFont(_:)(UIFontPickerViewController *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = [(UIFontPickerViewController *)a1 selectedFontDescriptor];
  if (!v4)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    goto LABEL_13;
  }
  id v5 = v4;
  id v6 = [(UIFontDescriptor *)v4 fontAttributes];

  type metadata accessor for UIFontDescriptorAttributeName(0);
  lazy protocol witness table accessor for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName();
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v7 + 16))
  {
    long long v14 = 0u;
    long long v15 = 0u;
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  id v8 = (id)*MEMORY[0x263F81738];
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v10 & 1) == 0)
  {
    long long v14 = 0u;
    long long v15 = 0u;

    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v9, (uint64_t)&v14);

  swift_bridgeObjectRelease();
  if (!*((void *)&v15 + 1))
  {
LABEL_13:
    outlined destroy of Any?((uint64_t)&v14);
    return;
  }
  if (swift_dynamicCast())
  {
    [(UIFontPickerViewController *)a1 dismissViewControllerAnimated:1 completion:0];
    uint64_t v11 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
    if (v11)
    {
      id v12 = (void *)v11;
      CanvasElementController.setSelectionFontName(_:)(v13);
    }
    swift_bridgeObjectRelease();
    TextStyleEditingController.updateUI()();
  }
}

Swift::Void __swiftcall TextStyleEditingController.colorPickerViewController(_:didSelect:continuously:)(UIColorPickerViewController *_, UIColor didSelect, Swift::Bool continuously)
{
  if (!continuously)
  {
    [(UIColorPickerViewController *)_ _userInterfaceStyleForGrid];
    id v6 = (void *)static PKInkingTool.convertColor(_:from:to:)();
    uint64_t v4 = MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
    if (v4)
    {
      id v5 = (void *)v4;
      CanvasElementController.setTextSelectionColor(_:)((UIColor)v6);
    }
    TextStyleEditingController.updateUI()();
  }
}

uint64_t type metadata accessor for TextStyleEditingController()
{
  return self;
}

uint64_t type metadata accessor for TextStyleEditingController.SystemFontPickerViewController()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName()
{
  unint64_t result = lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName;
  if (!lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName)
  {
    type metadata accessor for UIFontDescriptorAttributeName(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextStyles()
{
  return &type metadata for TextStyles;
}

unint64_t lazy protocol witness table accessor for type TextStyles and conformance TextStyles()
{
  unint64_t result = lazy protocol witness table cache variable for type TextStyles and conformance TextStyles;
  if (!lazy protocol witness table cache variable for type TextStyles and conformance TextStyles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextStyles and conformance TextStyles);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextStyles and conformance TextStyles;
  if (!lazy protocol witness table cache variable for type TextStyles and conformance TextStyles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextStyles and conformance TextStyles);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextStyles and conformance TextStyles;
  if (!lazy protocol witness table cache variable for type TextStyles and conformance TextStyles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextStyles and conformance TextStyles);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextStyles and conformance TextStyles;
  if (!lazy protocol witness table cache variable for type TextStyles and conformance TextStyles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextStyles and conformance TextStyles);
  }
  return result;
}

uint64_t PaperDocument.init<A>(url:in:assetManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?);
  MEMORY[0x270FA5388](v10 - 8);
  id v12 = (void **)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for CRAsset();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v30 - v18;
  type metadata accessor for PaperKitPDFDocument();
  static PaperKitPDFDocument._load(_:assetManager:)(a1, v12);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v12, 1, v20) == 1)
  {
    swift_release();
    swift_release();
    uint64_t v21 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?);
LABEL_5:
    uint64_t v26 = type metadata accessor for PaperDocument(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a4, 1, 1, v26);
  }
  uint64_t v30 = a4;
  uint64_t v22 = *v12;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, (char *)v12 + *(int *)(v20 + 48), v13);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
  PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)(v22, (uint64_t)v16, v31, a3, 0, (uint64_t)v9);
  uint64_t v23 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(a1, v23);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  uint64_t v24 = type metadata accessor for PaperDocument(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v9, 1, v24))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for PaperDocument?);
    a4 = v30;
    goto LABEL_5;
  }
  uint64_t v28 = (uint64_t)v9;
  uint64_t v29 = v30;
  _s8PaperKit0A8DocumentVWObTm_0(v28, v30, type metadata accessor for PaperDocument);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
}

uint64_t PaperDocument.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  CROrderedSet.init()();
  uint64_t v8 = type metadata accessor for PaperDocument(0);
  uint64_t v9 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, &demangling cache variable for type metadata for CRAsset?);
  CRRegister.init(wrappedValue:)();
  uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAsset?);
  *(void *)(a1 + *(int *)(v8 + 24)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t type metadata accessor for PaperDocument(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperDocument);
}

uint64_t PaperDocument.init<A>(in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  CROrderedSet.init()();
  uint64_t v8 = type metadata accessor for PaperDocument(0);
  uint64_t v9 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, &demangling cache variable for type metadata for CRAsset?);
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAsset?);
  uint64_t result = swift_release();
  *(void *)(a1 + *(int *)(v8 + 24)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v27 = a5;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v30 = a6;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v28);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v24 - v9;
  uint64_t v11 = type metadata accessor for PaperDocument(0);
  uint64_t v29 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  CROrderedSet.init()();
  uint64_t v14 = &v13[*(int *)(v11 + 20)];
  uint64_t v15 = type metadata accessor for CRAsset();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v17(v10, 1, 1, v15);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, &demangling cache variable for type metadata for CRAsset?);
  v24[1] = v14;
  uint64_t v18 = v26;
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAsset?);
  uint64_t v28 = v11;
  *(void *)&v13[*(int *)(v11 + 24)] = MEMORY[0x263F8EE80];
  uint64_t v19 = v25;
  if (PaperDocument.appendDocument<A>(_:asset:in:assetManager:useProxyPages:)(v25, v18, v31, v32, v27))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v10, v18, v15);
    v17(v10, 0, 1, v15);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for CRAsset?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAsset?);

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v20 = v30;
    _s8PaperKit0A8DocumentVWObTm_0((uint64_t)v13, v30, type metadata accessor for PaperDocument);
    uint64_t v21 = 0;
    uint64_t v22 = v20;
  }
  else
  {

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
    outlined destroy of PDFPageID((uint64_t)v13, type metadata accessor for PaperDocument);
    uint64_t v21 = 1;
    uint64_t v22 = v30;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v22, v21, 1, v28);
}

uint64_t PaperDocument.export<A>(_:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a3;
  long long v10 = *(_OWORD *)(a3 + 32);
  long long v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 32) = v9;
  *(_OWORD *)(v5 + 48) = v10;
  uint64_t v12 = *(void *)(a3 + 64);
  __int16 v13 = *(_WORD *)(a3 + 72);
  char v14 = *(unsigned char *)(a3 + 74);
  *(void *)(v5 + 96) = a1;
  *(_OWORD *)(v5 + 64) = v11;
  *(void *)(v5 + 80) = v12;
  *(unsigned char *)(v5 + 90) = v14;
  *(_WORD *)(v5 + 88) = v13;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v5 + 104) = v15;
  void *v15 = v5;
  v15[1] = PaperDocument.export<A>(_:in:options:);
  return PaperDocument.newPDFDocument<A>(use:in:options:)((void *)(v5 + 96), a2, v5 + 16, a4, a5);
}

uint64_t PaperDocument.pdf.getter()
{
  return PaperDocument.pdf.getter(MEMORY[0x263F32C30]);
}

uint64_t key path getter for PaperDocument.pdf : PaperDocument()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for PaperDocument.pdf : PaperDocument(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAsset?);
  type metadata accessor for PaperDocument(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAsset?);
}

uint64_t PaperDocument.pdf.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for CRAsset?);
  type metadata accessor for PaperDocument(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAsset?);
}

uint64_t PaperDocument.exportNonMergable<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a1 | 0x4000000000000000;
  *(_OWORD *)(v4 + 16) = xmmword_20C834980;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 75) = 0u;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 104) = v8;
  *uint64_t v8 = v4;
  v8[1] = PaperDocument.exportNonMergable<A>(_:in:);
  return PaperDocument.newPDFDocument<A>(use:in:options:)((void *)(v4 + 96), a2, v4 + 16, a3, a4);
}

uint64_t PaperDocument.exportNonMergable<A>(_:in:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t PaperDocument.pages.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t PaperDocument.pages.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*PaperDocument.pages.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

void (*PaperDocument.pdf.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocument(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocument.$pdf.getter()
{
  return PaperDocument.pdf.getter(MEMORY[0x263F32C38]);
}

uint64_t PaperDocument.pdf.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for PaperDocument(0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return a1(v2);
}

uint64_t key path setter for PaperDocument.$pdf : PaperDocument(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for PaperDocument(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PaperDocument.$pdf.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PaperDocument(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*PaperDocument.$pdf.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocument(0) + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PaperDocument.additionalFields.getter()
{
  type metadata accessor for PaperDocument(0);
  return swift_bridgeObjectRetain();
}

uint64_t PaperDocument.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PaperDocument(0) + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*PaperDocument.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static PaperDocument.fields.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26ACB5140;
  uint64_t v4 = qword_26ACB5148;
  uint64_t v3 = unk_26ACB5150;
  uint64_t v5 = qword_26ACB5158;
  uint64_t v6 = qword_26ACB5160;
  *a1 = static PaperDocument.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t PaperDocument.init<A>(data:in:assetManager:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v39 = a5;
  uint64_t v40 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  MEMORY[0x270FA5388](v8 - 8);
  id v38 = (void **)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (void **)((char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for CRAsset();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v37 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v37 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v37 - v20;
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  CRAsset.init(data:assetManager:)();
  id v22 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
  outlined copy of Data._Representation(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v24 = objc_msgSend(v22, sel_initWithData_, isa);
  outlined consume of Data._Representation(a1, a2);

  if (v24)
  {
    if (PaperKitPDFDocument.finishLoading(as:)((uint64_t)v18))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
      uint64_t v26 = (char *)v12 + *(int *)(v25 + 48);
      *uint64_t v12 = v24;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v26, v18, v13);
      (*(void (**)(void **, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v12, 0, 1, v25);
      uint64_t v27 = v39;
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  }
  uint64_t v27 = v39;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
  (*(void (**)(void **, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v12, 1, 1, v28);
LABEL_7:
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v12, 1, v29) == 1)
  {
    swift_release();
    swift_release();
    outlined consume of Data._Representation(a1, a2);
    uint64_t v30 = &demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?;
LABEL_11:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, v30);
    uint64_t v35 = type metadata accessor for PaperDocument(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v27, 1, 1, v35);
  }
  uint64_t v31 = *v12;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v21, (char *)v12 + *(int *)(v29 + 48), v13);
  uint64_t v32 = (uint64_t)v37;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v37, v21, v13);
  uint64_t v12 = v38;
  PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)(v31, v32, v40, a4, 0, (uint64_t)v38);
  outlined consume of Data._Representation(a1, a2);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
  uint64_t v33 = type metadata accessor for PaperDocument(0);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v34 + 48))(v12, 1, v33))
  {
    uint64_t v30 = &demangling cache variable for type metadata for PaperDocument?;
    goto LABEL_11;
  }
  _s8PaperKit0A8DocumentVWObTm_0((uint64_t)v12, v27, type metadata accessor for PaperDocument);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v27, 0, 1, v33);
}

uint64_t PaperDocument.appendDocument<A>(_:asset:in:assetManager:useProxyPages:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v10 = objc_msgSend(a1, sel_isLocked);
  if (v10)
  {
    if (one-time initialization token for shared != -1) {
      id v10 = (id)swift_once();
    }
    MEMORY[0x270FA5388](v10);
    MEMORY[0x270FA5388](v11);
    uint64_t v13 = v12 + 4;
    os_unfair_lock_lock(v12 + 4);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(&v17);
    os_unfair_lock_unlock(v13);
    if (!*((void *)&v17 + 1)) {
      return 0;
    }
    uint64_t v14 = (void *)MEMORY[0x21054D080](v17, *((void *)&v17 + 1));
    swift_bridgeObjectRelease();
    unsigned int v15 = objc_msgSend(a1, sel_unlockWithPassword_, v14);

    if (!v15) {
      return 0;
    }
  }
  PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:)(a1, a2, a3, a4, a5 & 1);
  return 1;
}

void PaperDocument.pageSizeForInserting<A>(at:in:)(uint64_t a1)
{
  PaperDocument.pageGeometryForInserting<A>(at:in:)(a1, &v3.a);
  CGPoint v1 = *(CGPoint *)&v3.a;
  CGSize v2 = *(CGSize *)&v3.c;
  CGAffineTransformMakeRotation(&v3, v3.tx);
  v4.origin = v1;
  v4.size = v2;
  CGRectApplyAffineTransform(v4, &v3);
}

uint64_t PaperDocument.pageGeometryForInserting<A>(at:in:)@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
LABEL_4:
    CROrderedSet.subscript.getter();
    SharedTagged_3.subscript.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = v23;
    uint64_t v10 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    double v11 = (*(double (**)(uint64_t, uint64_t))(v10 + 56))(v9, v10);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v18 = v23;
    uint64_t v19 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    double v20 = (*(double (**)(uint64_t, uint64_t))(v19 + 64))(v18, v19);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t result = CROrderedSet.count.getter();
  if (a1 + 1 < result) {
    goto LABEL_4;
  }
  if (one-time initialization token for defaultPageBounds != -1) {
    uint64_t result = swift_once();
  }
  double v11 = *(double *)&static UIConstants.defaultPageBounds;
  uint64_t v13 = *(void *)algn_2676E9718;
  uint64_t v17 = *((void *)&xmmword_2676E9720 + 1);
  uint64_t v15 = xmmword_2676E9720;
  double v20 = 0.0;
LABEL_5:
  *a2 = v11;
  *((void *)a2 + 1) = v13;
  *((void *)a2 + 2) = v15;
  *((void *)a2 + 3) = v17;
  a2[4] = v20;
  return result;
}

uint64_t PaperDocument.minAppFormatVersion.getter()
{
  return 4;
}

id PaperDocument.create<A>(page:fromDocument:asset:in:assetManager:useProxyPages:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, id a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  LODWORD(v88) = a6;
  uint64_t v66 = a5;
  uint64_t v83 = a4;
  uint64_t v86 = a7;
  id v87 = a3;
  uint64_t v80 = type metadata accessor for CRKeyPath();
  uint64_t v78 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  char v81 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v76 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
  uint64_t v77 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v75 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v73);
  uint64_t v71 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v69 = (char *)&v65 - v15;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v68);
  uint64_t v72 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v65 - v18;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v67);
  uint64_t v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v65 - v23;
  uint64_t v25 = type metadata accessor for PaperDocumentPage();
  MEMORY[0x270FA5388](v25);
  uint64_t v74 = (uint64_t)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v65 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v84 = *(void *)(v30 - 8);
  uint64_t v85 = v30;
  MEMORY[0x270FA5388](v30);
  uint64_t v82 = (uint64_t)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for PDFPageID();
  uint64_t v70 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (uint64_t *)((char *)&v65 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = v35;
  uint64_t v37 = (char *)v34 + *(int *)(v35 + 20);
  uint64_t v38 = type metadata accessor for CRAsset();
  (*(void (**)(char *, id, uint64_t))(*(void *)(v38 - 8) + 16))(v37, v87, v38);
  *uint64_t v34 = a1;
  if ((v88 & 1) == 0)
  {
    id v59 = objc_msgSend(a2, sel_pageAtIndex_, a1);
    if (v59)
    {
      uint64_t v60 = v59;
      type metadata accessor for PaperKitPDFPage(0);
      if (swift_dynamicCastClass())
      {
        uint64_t v57 = v82;
        PaperKitPDFPage.decodePaperPage<A>(pageID:in:assetManager:)((uint64_t)v34, v83, v66, v82);

        uint64_t v58 = (uint64_t)v34;
        goto LABEL_8;
      }
    }
    outlined destroy of PDFPageID((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v64 = 1;
    uint64_t v61 = v85;
    uint64_t v63 = v86;
    uint64_t v62 = v84;
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, v64, 1, v61);
  }
  id result = objc_msgSend(a2, sel_pageAtIndex_, 0);
  if (result)
  {
    uint64_t v40 = result;
    uint64_t v88 = (uint64_t)v34;
    id v87 = objc_msgSend(result, sel_rotation);

    id result = objc_msgSend(a2, sel_pageAtIndex_, 0);
    if (result)
    {
      id v41 = result;
      objc_msgSend(result, sel_boundsForBox_, 0);
      CGFloat v43 = v42;
      CGFloat v45 = v44;
      CGFloat v47 = v46;
      CGFloat v49 = v48;

      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
      long long v89 = 0u;
      long long v90 = 0u;
      CRRegister.init(wrappedValue:)();
      long long v89 = 0u;
      long long v90 = 0u;
      CRRegister.init(wrappedValue:)();
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v24, 1, 1, v50);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v24, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      *(void *)&long long v89 = 0;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      CRRegister.init(wrappedValue:)();
      uint64_t v67 = (uint64_t)&v29[*(int *)(v25 + 32)];
      uint64_t v70 = *(void *)(v70 + 56);
      uint64_t v65 = v36;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v70)(v19, 1, 1, v36);
      uint64_t v51 = v72;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, v72, &demangling cache variable for type metadata for PDFPageID?);
      lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      uint64_t v53 = (uint64_t)v69;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v69, 1, 1, v52);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v53, v71, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      *(void *)&long long v89 = 0;
      lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
      CRRegister.init(wrappedValue:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      CROrderedSet.init()();
      *(void *)&long long v89 = MEMORY[0x263F8EE78];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
      lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A], &demangling cache variable for type metadata for [CRKeyPath]);
      CRRegister.init(wrappedValue:)();
      *(void *)&v29[*(int *)(v25 + 52)] = MEMORY[0x263F8EE80];
      v91.origin.double x = v43;
      v91.origin.double y = v45;
      v91.size.double width = v47;
      v91.size.double height = v49;
      v92.origin.double x = v43;
      v92.origin.double y = v45;
      v92.size.double width = v47;
      v92.size.double height = v49;
      PaperDocumentPage.setContentsBounds(_:fullBounds:)(v91, v92);
      uint64_t v54 = v88;
      outlined init with copy of PDFPageID(v88, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      ((void (*)(char *, void, uint64_t, uint64_t))v70)(v19, 0, 1, v65);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, v51, &demangling cache variable for type metadata for PDFPageID?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
      specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)v87);
      *(void *)&long long v89 = qword_26C14EA50;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
      CRRegister.wrappedValue.setter();
      LOBYTE(v89) = 2;
      outlined init with copy of PDFPageID((uint64_t)v29, v74, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v76, 1, 1, v80);
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
      swift_retain();
      uint64_t v55 = v75;
      Ref.init<A>(_:_:identity:)();
      uint64_t v56 = v79;
      Ref.id.getter();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v55, v56);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      uint64_t v57 = v82;
      SharedTagged_3.init(_:id:)();
      outlined destroy of PDFPageID((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for PaperDocumentPage);
      uint64_t v58 = v54;
LABEL_8:
      outlined destroy of PDFPageID(v58, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      uint64_t v62 = v84;
      uint64_t v61 = v85;
      uint64_t v63 = v86;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 32))(v86, v57, v85);
      uint64_t v64 = 0;
      return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, v64, 1, v61);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PaperDocument.newPDFDocument<A>(use:in:options:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 392) = a5;
  *(void *)(v6 + 400) = v5;
  *(void *)(v6 + 376) = a2;
  *(void *)(v6 + 384) = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>));
  *(void *)(v6 + 408) = v9;
  *(void *)(v6 + 416) = *(void *)(v9 - 8);
  *(void *)(v6 + 424) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
  *(void *)(v6 + 432) = swift_task_alloc();
  *(void *)(v6 + 440) = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  *(void *)(v6 + 448) = v10;
  *(void *)(v6 + 456) = *(void *)(v10 - 8);
  *(void *)(v6 + 464) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>);
  *(void *)(v6 + 472) = swift_task_alloc();
  *(void *)(v6 + 480) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  *(void *)(v6 + 488) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  *(void *)(v6 + 496) = swift_task_alloc();
  *(void *)(v6 + 504) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  *(void *)(v6 + 512) = swift_task_alloc();
  *(void *)(v6 + 520) = swift_task_alloc();
  *(void *)(v6 + 528) = swift_task_alloc();
  *(void *)(v6 + 536) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for PageId(0);
  *(void *)(v6 + 544) = v11;
  *(void *)(v6 + 552) = *(void *)(v11 - 8);
  *(void *)(v6 + 560) = swift_task_alloc();
  *(void *)(v6 + 568) = swift_task_alloc();
  *(void *)(v6 + 576) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for PDFPageID();
  *(void *)(v6 + 584) = v12;
  *(void *)(v6 + 592) = *(void *)(v12 - 8);
  *(void *)(v6 + 600) = swift_task_alloc();
  *(void *)(v6 + 608) = swift_task_alloc();
  *(void *)(v6 + 616) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
  *(void *)(v6 + 624) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  *(void *)(v6 + 632) = swift_task_alloc();
  *(void *)(v6 + 640) = swift_task_alloc();
  *(void *)(v6 + 648) = swift_task_alloc();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  *(void *)(v6 + 656) = v13;
  *(void *)(v6 + 664) = *(void *)(v13 - 8);
  *(void *)(v6 + 672) = swift_task_alloc();
  *(void *)(v6 + 680) = swift_task_alloc();
  *(void *)(v6 + 688) = swift_task_alloc();
  *(void *)(v6 + 696) = swift_task_alloc();
  *(void *)(v6 + 704) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  *(void *)(v6 + 712) = swift_task_alloc();
  *(void *)(v6 + 720) = swift_task_alloc();
  *(void *)(v6 + 728) = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  *(void *)(v6 + 736) = v14;
  *(void *)(v6 + 744) = *(void *)(v14 - 8);
  *(void *)(v6 + 752) = swift_task_alloc();
  *(void *)(v6 + 760) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  *(void *)(v6 + 768) = swift_task_alloc();
  *(void *)(v6 + 776) = swift_task_alloc();
  *(void *)(v6 + 784) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for CRAsset();
  *(void *)(v6 + 792) = v15;
  *(void *)(v6 + 800) = *(void *)(v15 - 8);
  *(void *)(v6 + 808) = swift_task_alloc();
  *(void *)(v6 + 816) = swift_task_alloc();
  *(void *)(v6 + 824) = swift_task_alloc();
  *(void *)(v6 + 832) = swift_task_alloc();
  *(void *)(v6 + 840) = swift_task_alloc();
  *(void *)(v6 + 848) = swift_task_alloc();
  *(void *)(v6 + 856) = swift_task_alloc();
  *(void *)(v6 + 864) = *a1;
  long long v16 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 872) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 888) = v16;
  long long v17 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 904) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 920) = v17;
  *(void *)(v6 + 936) = *(void *)(a3 + 64);
  __int16 v18 = *(_WORD *)(a3 + 72);
  *(unsigned char *)(v6 + 94) = *(unsigned char *)(a3 + 74);
  *(_WORD *)(v6 + 92) = v18;
  return MEMORY[0x270FA2498](PaperDocument.newPDFDocument<A>(use:in:options:), 0, 0);
}

uint64_t PaperDocument.newPDFDocument<A>(use:in:options:)()
{
  uint64_t v274 = v0;
  uint64_t v1 = *(void *)(v0 + 800);
  uint64_t v2 = *(void *)(v0 + 792);
  uint64_t v3 = *(void *)(v0 + 784);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 944) = v4;
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(void *)(v4 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 952) = v6;
  *(void *)(v6 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v5);
  *(_DWORD *)(v0 + 1128) = *(_DWORD *)(type metadata accessor for PaperDocument(0) + 20);
  *(void *)(v0 + 960) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.getter();
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(void *)(v0 + 968) = v7;
  *(void *)(v0 + 976) = (v1 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v7(v3, 1, v2) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 856), *(void *)(v0 + 784), *(void *)(v0 + 792));
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 984) = v20;
    *uint64_t v20 = v0;
    v20[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
    uint64_t v21 = *(void *)(v0 + 856);
    uint64_t v22 = v4;
    uint64_t v23 = v6;
LABEL_7:
    return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(v21, v22, v23);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 784), &demangling cache variable for type metadata for CRAsset?);
  uint64_t v8 = *(void *)(v0 + 728);
  uint64_t v9 = *(void *)(v0 + 664);
  uint64_t v10 = *(void *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  *(void *)(v0 + 1000) = v11;
  *(void *)(v0 + 1008) = (v9 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v11(v8, 1, v10) != 1)
  {
    *(void *)(v0 + 1016) = *(void *)(*(void *)(v0 + 664) + 32);
    do
    {
      uint64_t v33 = *(void *)(v0 + 648);
      uint64_t v34 = *(void *)(v0 + 592);
      uint64_t v35 = *(void *)(v0 + 584);
      (*(void (**)(void, void, void))(v0 + 1016))(*(void *)(v0 + 704), *(void *)(v0 + 728), *(void *)(v0 + 656));
      SharedTagged_3.subscript.getter();
      uint64_t v36 = *(void *)(v0 + 120);
      uint64_t v37 = *(void *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v36);
      (*(void (**)(uint64_t, uint64_t))(v37 + 88))(v36, v37);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v33, 1, v35) == 1)
      {
        uint64_t v25 = *(void *)(v0 + 800);
        uint64_t v26 = *(void *)(v0 + 792);
        uint64_t v27 = *(void *)(v0 + 776);
        uint64_t v28 = *(void *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v28, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v27, 1, 1, v26);
      }
      else
      {
        uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
        uint64_t v39 = *(void *)(v0 + 800);
        uint64_t v40 = *(void *)(v0 + 792);
        uint64_t v41 = *(void *)(v0 + 776);
        uint64_t v42 = *(void *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v42 + *(int *)(*(void *)(v0 + 584) + 20), v40);
        outlined destroy of PDFPageID(v42, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v40);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v38(v41, 1, v40) != 1)
        {
          (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 848), *(void *)(v0 + 776), *(void *)(v0 + 792));
          CGFloat v43 = (void *)swift_task_alloc();
          *(void *)(v0 + 1024) = v43;
          void *v43 = v0;
          v43[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          uint64_t v23 = *(void *)(v0 + 952);
          uint64_t v22 = *(void *)(v0 + 944);
          uint64_t v21 = *(void *)(v0 + 848);
          goto LABEL_7;
        }
      }
      uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
      uint64_t v30 = *(void *)(v0 + 776);
      uint64_t v31 = *(void *)(v0 + 728);
      uint64_t v32 = *(void *)(v0 + 656);
      (*(void (**)(void, uint64_t))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 704), v32);
      outlined destroy of StocksKitCurrencyCache.Provider?(v30, &demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v29(v31, 1, v32) != 1);
  }
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
  uint64_t v13 = *(void *)(v0 + 792);
  uint64_t v14 = *(void *)(v0 + 768);
  v245 = *(void (**)(void, void))(*(void *)(v0 + 744) + 8);
  v245(*(void *)(v0 + 760), *(void *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  if (v12(v14, 1, v13) == 1)
  {
    uint64_t v15 = *(Swift::UInt **)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 768), &demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    uint64_t v16 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v16, (uint64_t)v15);
    unint64_t v17 = 0;
    swift_bridgeObjectRelease();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(Swift::UInt *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v15, 1, v18) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 624), &demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      uint64_t v19 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
    }
    else
    {
      uint64_t v52 = *(void *)(v0 + 944);
      uint64_t v53 = *(void *)(v0 + 832);
      uint64_t v54 = *(void *)(v0 + 824);
      uint64_t v55 = *(void *)(v0 + 792);
      uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 800) + 32);
      v56(v54, *(void *)(v0 + 624), v55);
      v56(v53, v54, v55);
      swift_beginAccess();
      uint64_t v57 = *(void *)(v52 + 16);
      if (!*(void *)(v57 + 16)) {
        goto LABEL_129;
      }
      unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 832));
      if ((v59 & 1) == 0) {
        goto LABEL_129;
      }
      uint64_t v60 = *(void *)(v0 + 832);
      uint64_t v61 = *(void *)(v0 + 800);
      uint64_t v62 = *(void *)(v0 + 792);
      uint64_t v63 = *(void **)(*(void *)(v57 + 56) + 8 * v58);
      swift_endAccess();
      uint64_t v15 = *(Swift::UInt **)(v61 + 8);
      uint64_t v19 = v63;
      ((void (*)(uint64_t, uint64_t))v15)(v60, v62);
    }
  }
  else
  {
    uint64_t v44 = *(void *)(v0 + 944);
    (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 840), *(void *)(v0 + 768), *(void *)(v0 + 792));
    swift_beginAccess();
    uint64_t v45 = *(void *)(v44 + 16);
    if (!*(void *)(v45 + 16)) {
      goto LABEL_127;
    }
    unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 840));
    if ((v47 & 1) == 0) {
      goto LABEL_127;
    }
    uint64_t v48 = *(void *)(v0 + 840);
    uint64_t v49 = *(void *)(v0 + 800);
    uint64_t v50 = *(void *)(v0 + 792);
    uint64_t v51 = *(void **)(*(void *)(v45 + 56) + 8 * v46);
    swift_endAccess();
    uint64_t v15 = *(Swift::UInt **)(v49 + 8);
    uint64_t v19 = v51;
    ((void (*)(uint64_t, uint64_t))v15)(v48, v50);
    unint64_t v17 = 0;
  }
  *(void *)(v0 + 1040) = v19;
  unint64_t v64 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v65 = (uint64_t)objc_msgSend(v19, sel_pageCount);
  if (v65 < 0) {
    goto LABEL_98;
  }
  uint64_t v15 = (Swift::UInt *)v65;
  v266 = v19;
  if (!v65)
  {
LABEL_49:
    unint64_t v251 = v64;
    *(void *)(v0 + 1048) = v64;
    v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
    uint64_t v106 = *(void *)(v0 + 720);
    uint64_t v107 = *(void *)(v0 + 656);
    CROrderedSet.makeIterator()();
    CROrderedSet.Iterator.next()();
    if (v105(v106, 1, v107) == 1)
    {
LABEL_50:
      uint64_t v108 = *(void *)(v0 + 944);
      uint64_t v109 = *(void *)(v0 + 864);
      uint64_t v110 = *(void *)(v0 + 392);
      uint64_t v112 = *(void *)(v0 + 376);
      uint64_t v111 = *(void *)(v0 + 384);
      v245(*(void *)(v0 + 752), *(void *)(v0 + 736));
      swift_beginAccess();
      v113 = *(char **)(v108 + 16);
      *(void *)&v270[0] = v109;
      swift_bridgeObjectRetain();
      v114 = PaperDocument.update<A>(_:in:otherDocuments:use:)(v266, v112, v113, (unint64_t *)v270, v111, v110);
      *(void *)(v0 + 1056) = v114;
      swift_bridgeObjectRelease();
      char v115 = v114[32];
      *(unsigned char *)(v0 + 91) = v115;
      uint64_t v116 = -1;
      uint64_t v117 = -1 << v115;
      if (-v117 < 64) {
        uint64_t v116 = ~(-1 << -(char)v117);
      }
      unint64_t v118 = v116 & *((void *)v114 + 7);
      if (v118)
      {
        uint64_t v119 = 0;
        unint64_t v120 = __clz(__rbit64(v118));
        uint64_t v121 = (v118 - 1) & v118;
        uint64_t v65 = *(void *)(v0 + 1056);
      }
      else
      {
        unint64_t v67 = 63 - v117;
        uint64_t v65 = *(void *)(v0 + 1056);
        if ((unint64_t)(63 - v117) <= 0x7F) {
          goto LABEL_106;
        }
        unint64_t v180 = *(void *)(v65 + 64);
        if (v180)
        {
          uint64_t v119 = 1;
          goto LABEL_82;
        }
        if (v67 < 0xC0) {
          goto LABEL_106;
        }
        unint64_t v180 = *(void *)(v65 + 72);
        if (v180)
        {
          uint64_t v119 = 2;
          goto LABEL_82;
        }
        if (v67 < 0x100) {
          goto LABEL_106;
        }
        unint64_t v180 = *(void *)(v65 + 80);
        if (!v180) {
          goto LABEL_94;
        }
        uint64_t v119 = 3;
LABEL_82:
        uint64_t v121 = (v180 - 1) & v180;
        unint64_t v120 = __clz(__rbit64(v180)) + (v119 << 6);
      }
      *(void *)(v0 + 1072) = v121;
      *(void *)(v0 + 1064) = v119;
      uint64_t v122 = *(void *)(v0 + 816);
      uint64_t v123 = *(void *)(v0 + 808);
      uint64_t v124 = *(void *)(v0 + 800);
      uint64_t v125 = *(void *)(v0 + 792);
      unint64_t v126 = *(void *)(v65 + 48) + *(void *)(v124 + 72) * v120;
      v127 = *(void (**)(uint64_t, unint64_t, uint64_t))(v124 + 16);
      *(void *)(v0 + 1080) = v127;
      *(void *)(v0 + 1088) = (v124 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v127(v122, v126, v125);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 32))(v123, v122, v125);
      uint64_t v128 = swift_task_alloc();
      *(void *)(v0 + 1096) = v128;
      *(void *)(v128 + 16) = v123;
      v129 = (void *)swift_task_alloc();
      *(void *)(v0 + 1104) = v129;
      uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PaperKitPDFDocument?);
      void *v129 = v0;
      v129[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
      v131 = &async function pointer to partial apply for closure #1 in static PaperKitPDFDocument._load(_:);
      uint64_t v132 = v0 + 360;
      uint64_t v133 = 1;
      uint64_t v134 = v128;
      return MEMORY[0x270F17D68](v132, v133, v131, v134, v130);
    }
    v263 = (void *)(v0 + 136);
    uint64_t v135 = *(void *)(v0 + 664);
    v136 = *(void (**)(void, void, void))(v135 + 32);
    v135 += 32;
    v256 = v136;
    uint64_t v137 = *(void *)(v0 + 592);
    uint64_t v246 = *(void *)(v0 + 544);
    v248 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
    v242 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56);
    v252 = (void (**)(uint64_t, uint64_t))(v135 - 24);
    v253 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48);
    v243 = (void (**)(void, uint64_t, uint64_t))(v135 - 16);
    while (1)
    {
      uint64_t v142 = *(void *)(v0 + 632);
      uint64_t v143 = *(void *)(v0 + 584);
      v256(*(void *)(v0 + 696), *(void *)(v0 + 720), *(void *)(v0 + 656));
      SharedTagged_3.subscript.getter();
      uint64_t v144 = *(void *)(v0 + 160);
      uint64_t v145 = *(void *)(v0 + 168);
      __swift_project_boxed_opaque_existential_1(v263, v144);
      (*(void (**)(uint64_t, uint64_t))(v145 + 88))(v144, v145);
      if ((*v253)(v142, 1, v143) == 1)
      {
        uint64_t v138 = *(void *)(v0 + 632);
        (*v252)(*(void *)(v0 + 696), *(void *)(v0 + 656));
        outlined destroy of StocksKitCurrencyCache.Provider?(v138, &demangling cache variable for type metadata for PDFPageID?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v263);
      }
      else
      {
        _s8PaperKit0A8DocumentVWObTm_0(*(void *)(v0 + 632), *(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for PDFPageID);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v263);
        if (*(void *)(v251 + 16))
        {
          unint64_t v146 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 600));
          if (v147)
          {
            unint64_t v148 = *(void *)(*(void *)(v251 + 56) + 8 * v146);
            if (one-time initialization token for lock != -1) {
              swift_once();
            }
            v149 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
            uint64_t v150 = swift_task_alloc();
            *(void *)(v150 + 16) = v266;
            *(void *)(v150 + 24) = v148;
            uint64_t v151 = swift_task_alloc();
            *(void *)(v151 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
            *(void *)(v151 + 24) = v150;
            os_unfair_lock_lock(v149 + 4);
            closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v152);
            unint64_t v249 = v148;
            uint64_t v153 = *(void *)(v0 + 544);
            uint64_t v154 = *(void *)(v0 + 520);
            os_unfair_lock_unlock(v149 + 4);
            swift_task_dealloc();
            swift_task_dealloc();
            v155 = *v248;
            if ((*v248)(v154, 1, v153) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for PageId?);
              id v156 = objc_msgSend(v266, sel_pageAtIndex_, v249);
              if (!v156) {
                goto LABEL_128;
              }
              v157 = v156;
              uint64_t v158 = *(void *)(v0 + 544);
              uint64_t v159 = *(void *)(v0 + 512);
              type metadata accessor for PaperKitPDFPage(0);
              uint64_t v160 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
              swift_beginAccess();
              outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v160, v159, (uint64_t *)&demangling cache variable for type metadata for PageId?);

              if (v155(v159, 1, v158) == 1)
              {
                uint64_t v161 = *(void *)(v0 + 584);
                uint64_t v162 = *(void *)(v0 + 568);
                outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 512), (uint64_t *)&demangling cache variable for type metadata for PageId?);
                (*v242)(v162, 1, 1, v161);
                uint64_t v163 = v246;
                uint64_t v164 = v162 + *(int *)(v246 + 20);
                uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v165 - 8) + 56))(v164, 1, 1, v165);
                goto LABEL_73;
              }
              uint64_t v168 = *(void *)(v0 + 568);
              uint64_t v169 = *(void *)(v0 + 512);
            }
            else
            {
              uint64_t v168 = *(void *)(v0 + 568);
              uint64_t v169 = *(void *)(v0 + 520);
            }
            _s8PaperKit0A8DocumentVWObTm_0(v169, v168, type metadata accessor for PageId);
            uint64_t v163 = v246;
LABEL_73:
            uint64_t v170 = *(void *)(v0 + 568);
            uint64_t v171 = *(void *)(v0 + 504);
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v170 + *(int *)(v163 + 20), v171, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
            outlined destroy of PDFPageID(v170, type metadata accessor for PageId);
            uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
            uint64_t v173 = *(void *)(v172 - 8);
            int v174 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v173 + 48))(v171, 1, v172);
            outlined destroy of StocksKitCurrencyCache.Provider?(v171, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
            uint64_t v175 = *(void *)(v0 + 696);
            if (v174 == 1)
            {
              uint64_t v176 = *(void *)(v0 + 656);
              uint64_t v244 = *(void *)(v0 + 600);
              v177 = *(char **)(v0 + 560);
              uint64_t v178 = *(void *)(v0 + 496);
              (*v243)(*(void *)(v0 + 688), v175, v176);
              lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
              WeakTagged_3.init(_:)();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v173 + 56))(v178, 0, 1, v172);
              PaperKitPDFDocument.subscript.getter(v249, (uint64_t)v177);
              outlined assign with take of Date?(v178, (uint64_t)&v177[*(int *)(v246 + 20)], &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
              PaperKitPDFDocument.subscript.setter(v177, v249);
              outlined destroy of PDFPageID(v244, (uint64_t (*)(void))type metadata accessor for PDFPageID);
              (*v252)(v175, v176);
            }
            else
            {
              uint64_t v179 = *(void *)(v0 + 656);
              outlined destroy of PDFPageID(*(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for PDFPageID);
              (*v252)(v175, v179);
            }
            goto LABEL_59;
          }
        }
        uint64_t v166 = *(void *)(v0 + 696);
        uint64_t v167 = *(void *)(v0 + 656);
        outlined destroy of PDFPageID(*(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*v252)(v166, v167);
      }
LABEL_59:
      v139 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
      uint64_t v140 = *(void *)(v0 + 720);
      uint64_t v141 = *(void *)(v0 + 656);
      CROrderedSet.Iterator.next()();
      if (v139(v140, 1, v141) == 1) {
        goto LABEL_50;
      }
    }
  }
  if (one-time initialization token for lock != -1) {
    goto LABEL_99;
  }
LABEL_25:
  uint64_t v66 = 0;
  unint64_t v67 = *(void *)(v0 + 544);
  unint64_t v250 = v67;
  v262 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
  uint64_t v247 = *(void *)(v0 + 592);
  v255 = v15;
  while (v15 != v66)
  {
    uint64_t v68 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    uint64_t v69 = swift_task_alloc();
    *(void *)(v69 + 16) = v19;
    *(void *)(v69 + 24) = v66;
    uint64_t v70 = swift_task_alloc();
    *(void *)(v70 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
    *(void *)(v70 + 24) = v69;
    uint64_t v71 = v68 + 4;
    os_unfair_lock_lock(v68 + 4);
    closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v72);
    if (v17)
    {
      os_unfair_lock_unlock(v68 + 4);
      return swift_task_dealloc();
    }
    uint64_t v73 = *(void *)(v0 + 544);
    uint64_t v74 = *(void *)(v0 + 536);
    os_unfair_lock_unlock(v71);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v75 = *v262;
    if ((*v262)(v74, 1, v73) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 536), (uint64_t *)&demangling cache variable for type metadata for PageId?);
      id v76 = objc_msgSend(v266, sel_pageAtIndex_, v66);
      if (!v76)
      {
LABEL_126:
        __break(1u);
LABEL_127:
        swift_endAccess();
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        uint64_t v132 = swift_endAccess();
        __break(1u);
        return MEMORY[0x270F17D68](v132, v133, v131, v134, v130);
      }
      uint64_t v77 = v76;
      uint64_t v78 = *(void *)(v0 + 544);
      uint64_t v79 = *(void *)(v0 + 528);
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v80 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v80, v79, (uint64_t *)&demangling cache variable for type metadata for PageId?);

      if (v75(v79, 1, v78) == 1)
      {
        uint64_t v81 = *(void *)(v0 + 584);
        uint64_t v82 = *(void *)(v0 + 576);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 528), (uint64_t *)&demangling cache variable for type metadata for PageId?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v247 + 56))(v82, 1, 1, v81);
        uint64_t v83 = v82 + *(int *)(v250 + 20);
        uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v83, 1, 1, v84);
      }
      else
      {
        _s8PaperKit0A8DocumentVWObTm_0(*(void *)(v0 + 528), *(void *)(v0 + 576), type metadata accessor for PageId);
      }
    }
    else
    {
      _s8PaperKit0A8DocumentVWObTm_0(*(void *)(v0 + 536), *(void *)(v0 + 576), type metadata accessor for PageId);
    }
    uint64_t v85 = *(void *)(v0 + 640);
    uint64_t v86 = *(void *)(v0 + 584);
    uint64_t v87 = *(void *)(v0 + 576);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v87, v85, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PDFPageID(v87, type metadata accessor for PageId);
    int v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v247 + 48))(v85, 1, v86);
    uint64_t v89 = *(void *)(v0 + 640);
    if (v88 != 1)
    {
      uint64_t v90 = *(void *)(v0 + 616);
      uint64_t v15 = *(Swift::UInt **)(v0 + 608);
      _s8PaperKit0A8DocumentVWObTm_0(v89, v90, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      outlined init with copy of PDFPageID(v90, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v270[0] = v64;
      __C::CGRect v92 = (void *)v64;
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      uint64_t v94 = *(void *)(v64 + 16);
      BOOL v95 = (v93 & 1) == 0;
      uint64_t v65 = v94 + v95;
      if (__OFADD__(v94, v95)) {
        goto LABEL_93;
      }
      char v96 = v93;
      if (*(void *)(v64 + 24) >= v65)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v19 = v266;
          if ((v93 & 1) == 0) {
            goto LABEL_46;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          __C::CGRect v92 = *(void **)&v270[0];
          uint64_t v19 = v266;
          if ((v96 & 1) == 0) {
            goto LABEL_46;
          }
        }
      }
      else
      {
        uint64_t v15 = *(Swift::UInt **)(v0 + 608);
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v65, isUniquelyReferenced_nonNull_native);
        __C::CGRect v92 = *(void **)&v270[0];
        unint64_t v97 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
        if ((v96 & 1) != (v98 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v17 = v97;
        uint64_t v19 = v266;
        if ((v96 & 1) == 0)
        {
LABEL_46:
          uint64_t v99 = *(void *)(v0 + 608);
          v92[(v17 >> 6) + 8] |= 1 << v17;
          outlined init with copy of PDFPageID(v99, v92[6] + *(void *)(v247 + 72) * v17, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          *(void *)(v92[7] + 8 * v17) = v66;
          uint64_t v100 = v92[2];
          BOOL v101 = __OFADD__(v100, 1);
          uint64_t v102 = v100 + 1;
          if (v101)
          {
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            uint64_t v65 = swift_once();
            goto LABEL_25;
          }
          unint64_t v64 = (unint64_t)v92;
          v92[2] = v102;
          goto LABEL_48;
        }
      }
      unint64_t v64 = (unint64_t)v92;
      *(void *)(v92[7] + 8 * v17) = v66;
LABEL_48:
      uint64_t v103 = *(void *)(v0 + 616);
      uint64_t v104 = *(void *)(v0 + 608);
      swift_bridgeObjectRelease();
      outlined destroy of PDFPageID(v104, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      uint64_t v65 = outlined destroy of PDFPageID(v103, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      goto LABEL_27;
    }
    uint64_t v65 = outlined destroy of StocksKitCurrencyCache.Provider?(v89, &demangling cache variable for type metadata for PDFPageID?);
    uint64_t v19 = v266;
LABEL_27:
    unint64_t v17 = 0;
    uint64_t v66 = (Swift::UInt *)((char *)v66 + 1);
    uint64_t v15 = v255;
    if (v255 == v66) {
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  if (v67 >= 0x140)
  {
    unint64_t v180 = *(void *)(v65 + 88);
    if (v180)
    {
      uint64_t v119 = 4;
    }
    else
    {
      uint64_t v181 = 0;
      uint64_t v182 = v67 >> 6;
      if (v67 >> 6 <= 5) {
        uint64_t v182 = 5;
      }
      uint64_t v183 = v182 - 5;
      do
      {
        if (v183 == v181) {
          goto LABEL_106;
        }
        unint64_t v180 = *(void *)(v65 + 96 + 8 * v181++);
      }
      while (!v180);
      uint64_t v119 = v181 + 4;
    }
    goto LABEL_82;
  }
LABEL_106:
  __int16 v184 = *(_WORD *)(v0 + 92);
  char v185 = *(unsigned char *)(v0 + 94);
  uint64_t v186 = *(void *)(v0 + 936);
  long long v264 = *(_OWORD *)(v0 + 904);
  long long v267 = *(_OWORD *)(v0 + 920);
  long long v259 = *(_OWORD *)(v0 + 888);
  long long v257 = *(_OWORD *)(v0 + 872);
  uint64_t v187 = *(void *)(v0 + 864);
  uint64_t v189 = *(void *)(v0 + 384);
  uint64_t v188 = *(void *)(v0 + 392);
  uint64_t v190 = *(void *)(v0 + 376);
  swift_release();
  uint64_t v269 = v187;
  v270[0] = v257;
  v270[1] = v259;
  v270[2] = v264;
  v270[3] = v267;
  uint64_t v271 = v186;
  char v273 = v185;
  __int16 v272 = v184;
  PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v190, &v269, (uint64_t *)v270, v189, v188);
  if (v187 != 0x8000000000000000)
  {
    unint64_t v191 = *(void *)(v0 + 864);
    uint64_t v193 = *(void *)(v0 + 480);
    uint64_t v192 = *(void *)(v0 + 488);
    uint64_t v195 = *(void *)(v0 + 464);
    uint64_t v194 = *(void *)(v0 + 472);
    uint64_t v196 = *(void *)(v0 + 448);
    uint64_t v197 = *(void *)(v0 + 456);
    uint64_t v198 = *(void *)(v0 + 400);
    outlined copy of PaperDocument.PDFDocumentUse(v191);
    outlined consume of PaperDocument.PDFDocumentUse(v191);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v197 + 16))(v194, v198, v196);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v197 + 32))(v195, v194, v196);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    dispatch thunk of Sequence.makeIterator()();
    uint64_t v199 = *(int *)(v193 + 36);
    *(_DWORD *)(v0 + 1132) = v199;
    *(void *)(v192 + v199) = 0;
    v200 = &selRef_isImageAnalysisEnabled;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
    while (1)
    {
      v201 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
      uint64_t v202 = *(void *)(v0 + 712);
      uint64_t v203 = *(void *)(v0 + 656);
      dispatch thunk of IteratorProtocol.next()();
      if (v201(v202, 1, v203) == 1)
      {
        uint64_t v204 = *(void *)(v0 + 432);
        uint64_t v206 = *(void *)(v0 + 408);
        uint64_t v205 = *(void *)(v0 + 416);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v205 + 56))(v204, 1, 1, v206);
      }
      else
      {
        uint64_t v207 = *(int *)(v0 + 1132);
        uint64_t v208 = *(void *)(v0 + 680);
        uint64_t v209 = *(void *)(v0 + 656);
        uint64_t v210 = *(void *)(v0 + 488);
        uint64_t v211 = *(void *)(v0 + 424);
        uint64_t v212 = *(void *)(v0 + 408);
        v213 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 664) + 32);
        v213(v208, *(void *)(v0 + 712), v209);
        uint64_t v214 = v211 + *(int *)(v212 + 48);
        uint64_t v215 = *(void *)(v210 + v207);
        v213(v214, v208, v209);
        if (__OFADD__(v215, 1))
        {
          __break(1u);
          goto LABEL_126;
        }
        uint64_t v216 = *(void *)(v0 + 656);
        v217 = *(void **)(v0 + 432);
        uint64_t v219 = *(void *)(v0 + 408);
        uint64_t v218 = *(void *)(v0 + 416);
        *(void *)(*(void *)(v0 + 488) + *(int *)(v0 + 1132)) = v215 + 1;
        v220 = (char *)v217 + *(int *)(v219 + 48);
        void *v217 = v215;
        v213((uint64_t)v220, v214, v216);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v218 + 56))(v217, 0, 1, v219);
        v200 = &selRef_isImageAnalysisEnabled;
      }
      uint64_t v221 = *(void *)(v0 + 440);
      uint64_t v223 = *(void *)(v0 + 408);
      uint64_t v222 = *(void *)(v0 + 416);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 432), v221, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v222 + 48))(v221, 1, v223) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
        goto LABEL_122;
      }
      v224 = *(void **)(v0 + 1040);
      v225 = *(char **)(v0 + 440);
      uint64_t v226 = *(void *)v225;
      (*(void (**)(void, char *, void))(*(void *)(v0 + 664) + 32))(*(void *)(v0 + 672), &v225[*(int *)(*(void *)(v0 + 408) + 48)], *(void *)(v0 + 656));
      id v227 = objc_msgSend(v224, v200[63], v226);
      *(void *)(v0 + 1112) = v227;
      if (v227)
      {
        v228 = v227;
        type metadata accessor for PaperKitPDFPage(0);
        uint64_t v229 = swift_dynamicCastClass();
        if (v229)
        {
          uint64_t v230 = v229;
          __int16 v231 = *(_WORD *)(v0 + 92);
          char v232 = *(unsigned char *)(v0 + 94);
          uint64_t v233 = *(void *)(v0 + 936);
          long long v260 = *(_OWORD *)(v0 + 904);
          long long v265 = *(_OWORD *)(v0 + 920);
          long long v254 = *(_OWORD *)(v0 + 872);
          long long v258 = *(_OWORD *)(v0 + 888);
          uint64_t v234 = *(void *)(v0 + 864);
          SharedTagged_3.subscript.getter();
          uint64_t v235 = *(void *)(v0 + 200);
          uint64_t v236 = *(void *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v235);
          *(void *)(v0 + 368) = v234;
          *(_OWORD *)(v0 + 16) = v254;
          *(_OWORD *)(v0 + 32) = v258;
          *(_OWORD *)(v0 + 48) = v260;
          *(_OWORD *)(v0 + 64) = v265;
          *(void *)(v0 + 80) = v233;
          *(unsigned char *)(v0 + 90) = v232;
          *(_WORD *)(v0 + 88) = v231;
          v261 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v236 + 144) + **(int **)(v236 + 144));
          v237 = (void *)swift_task_alloc();
          *(void *)(v0 + 1120) = v237;
          void *v237 = v0;
          v237[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          uint64_t v238 = *(void *)(v0 + 384);
          uint64_t v239 = *(void *)(v0 + 392);
          uint64_t v240 = *(void *)(v0 + 376);
          return v261(v230, v0 + 368, v240, v0 + 16, v238, v239, v235, v236);
        }
      }
      (*(void (**)(void, void))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 672), *(void *)(v0 + 656));
    }
  }
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_122:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v268 = *(void *)(v0 + 1040);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v241 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v241(v268);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 992) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PaperDocument.newPDFDocument<A>(use:in:options:);
  }
  else {
    uint64_t v2 = PaperDocument.newPDFDocument<A>(use:in:options:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  Swift::UInt *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  Swift::UInt *v58;
  unint64_t v59;
  os_unfair_lock_s *v60;
  uint64_t v61;
  uint64_t v62;
  os_unfair_lock_s *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int isUniquelyReferenced_nonNull_native;
  char v84;
  uint64_t v85;
  BOOL v86;
  char v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  os_unfair_lock_s *v96;
  unsigned int (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unsigned char *v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void (*v119)(uint64_t, unint64_t, uint64_t);
  uint64_t v120;
  void *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(void, void, void);
  uint64_t v129;
  uint64_t v130;
  unsigned int (*v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  unint64_t v140;
  os_unfair_lock_s *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int (*v147)(uint64_t, uint64_t, uint64_t);
  id v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char **v191;
  unsigned int (*v192)(uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(uint64_t, uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  char *v216;
  uint64_t v217;
  id v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  __int16 v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t (*v232)(uint64_t);
  void (**v233)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v234)(void, uint64_t);
  uint64_t v235;
  uint64_t v236;
  void (*v237)(void, void);
  uint64_t v238;
  uint64_t v239;
  unsigned int (**v240)(uint64_t, uint64_t, uint64_t);
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  void (**v245)(uint64_t, uint64_t);
  unsigned int (**v246)(uint64_t, uint64_t, uint64_t);
  long long v247;
  Swift::UInt *v248;
  void (*v249)(void, void, void);
  long long v250;
  long long v251;
  long long v252;
  long long v253;
  uint64_t (*v254)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (**v255)(uint64_t, uint64_t, uint64_t);
  void *v256;
  long long v257;
  long long v258;
  void *v259;
  long long v260;
  uint64_t v261;
  uint64_t v262;
  _OWORD v263[4];
  uint64_t v264;
  __int16 v265;
  char v266;
  uint64_t v267;
  uint64_t v268;

  long long v267 = v0;
  (*(void (**)(void, void))(*(void *)(v0 + 800) + 8))(*(void *)(v0 + 856), *(void *)(v0 + 792));
  v241 = *(void *)(v0 + 992);
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v0 + 664);
  uint64_t v3 = *(void *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(void *)(v0 + 1000) = v4;
  *(void *)(v0 + 1008) = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v1, 1, v3) != 1)
  {
    *(void *)(v0 + 1016) = *(void *)(*(void *)(v0 + 664) + 32);
    do
    {
      uint64_t v21 = *(void *)(v0 + 648);
      uint64_t v22 = *(void *)(v0 + 592);
      uint64_t v23 = *(void *)(v0 + 584);
      (*(void (**)(void, void, void))(v0 + 1016))(*(void *)(v0 + 704), *(void *)(v0 + 728), *(void *)(v0 + 656));
      SharedTagged_3.subscript.getter();
      uint64_t v24 = *(void *)(v0 + 120);
      uint64_t v25 = *(void *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v24);
      (*(void (**)(uint64_t, uint64_t))(v25 + 88))(v24, v25);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v21, 1, v23) == 1)
      {
        uint64_t v13 = *(void *)(v0 + 800);
        uint64_t v14 = *(void *)(v0 + 792);
        uint64_t v15 = *(void *)(v0 + 776);
        uint64_t v16 = *(void *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v16, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, 1, 1, v14);
      }
      else
      {
        uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
        uint64_t v27 = *(void *)(v0 + 800);
        uint64_t v28 = *(void *)(v0 + 792);
        uint64_t v29 = *(void *)(v0 + 776);
        uint64_t v30 = *(void *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v29, v30 + *(int *)(*(void *)(v0 + 584) + 20), v28);
        outlined destroy of PDFPageID(v30, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v28);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v26(v29, 1, v28) != 1)
        {
          (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 848), *(void *)(v0 + 776), *(void *)(v0 + 792));
          uint64_t v31 = (void *)swift_task_alloc();
          *(void *)(v0 + 1024) = v31;
          *uint64_t v31 = v0;
          v31[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          uint64_t v32 = *(void *)(v0 + 952);
          uint64_t v33 = *(void *)(v0 + 944);
          uint64_t v34 = *(void *)(v0 + 848);
          return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(v34, v33, v32);
        }
      }
      unint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
      uint64_t v18 = *(void *)(v0 + 776);
      uint64_t v19 = *(void *)(v0 + 728);
      uint64_t v20 = *(void *)(v0 + 656);
      (*(void (**)(void, uint64_t))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 704), v20);
      outlined destroy of StocksKitCurrencyCache.Provider?(v18, &demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v17(v19, 1, v20) != 1);
  }
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
  uint64_t v6 = *(void *)(v0 + 792);
  uint64_t v7 = *(void *)(v0 + 768);
  v237 = *(void (**)(void, void))(*(void *)(v0 + 744) + 8);
  v237(*(void *)(v0 + 760), *(void *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  if (v5(v7, 1, v6) == 1)
  {
    uint64_t v8 = *(Swift::UInt **)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 768), &demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    uint64_t v9 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v9, (uint64_t)v8);
    uint64_t v10 = v241;
    swift_bridgeObjectRelease();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(Swift::UInt *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v8, 1, v11) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 624), &demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      uint64_t v12 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
    }
    else
    {
      uint64_t v44 = *(void *)(v0 + 944);
      uint64_t v45 = *(void *)(v0 + 832);
      unint64_t v46 = *(void *)(v0 + 824);
      char v47 = *(void *)(v0 + 792);
      uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 800) + 32);
      v48(v46, *(void *)(v0 + 624), v47);
      v48(v45, v46, v47);
      swift_beginAccess();
      uint64_t v49 = *(void *)(v44 + 16);
      if (!*(void *)(v49 + 16)) {
        goto LABEL_132;
      }
      uint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 832));
      if ((v51 & 1) == 0) {
        goto LABEL_132;
      }
      uint64_t v52 = *(void *)(v0 + 832);
      uint64_t v53 = *(void *)(v0 + 800);
      uint64_t v54 = *(void *)(v0 + 792);
      uint64_t v55 = *(void **)(*(void *)(v49 + 56) + 8 * v50);
      swift_endAccess();
      uint64_t v8 = *(Swift::UInt **)(v53 + 8);
      uint64_t v12 = v55;
      ((void (*)(uint64_t, uint64_t))v8)(v52, v54);
      uint64_t v10 = v241;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(v0 + 944);
    (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 840), *(void *)(v0 + 768), *(void *)(v0 + 792));
    swift_beginAccess();
    uint64_t v37 = *(void *)(v36 + 16);
    if (!*(void *)(v37 + 16)) {
      goto LABEL_130;
    }
    uint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 840));
    if ((v39 & 1) == 0) {
      goto LABEL_130;
    }
    uint64_t v40 = *(void *)(v0 + 840);
    uint64_t v41 = *(void *)(v0 + 800);
    uint64_t v42 = *(void *)(v0 + 792);
    CGFloat v43 = *(void **)(*(void *)(v37 + 56) + 8 * v38);
    swift_endAccess();
    uint64_t v8 = *(Swift::UInt **)(v41 + 8);
    uint64_t v12 = v43;
    ((void (*)(uint64_t, uint64_t))v8)(v40, v42);
    uint64_t v10 = v241;
  }
  *(void *)(v0 + 1040) = v12;
  uint64_t v56 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v57 = (uint64_t)objc_msgSend(v12, sel_pageCount);
  if (v57 < 0) {
    goto LABEL_101;
  }
  uint64_t v8 = (Swift::UInt *)v57;
  long long v259 = v12;
  if (!v57)
  {
    v243 = v10;
    goto LABEL_52;
  }
  if (one-time initialization token for lock != -1) {
    goto LABEL_102;
  }
LABEL_22:
  unint64_t v58 = 0;
  char v59 = *(void *)(v0 + 544);
  v242 = v59;
  v255 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
  uint64_t v238 = *(void *)(v0 + 592);
  v248 = v8;
  do
  {
    if (v8 == v58)
    {
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      if (v59 >= 0x140)
      {
        uint64_t v171 = *(void *)(v57 + 88);
        if (v171)
        {
          uint64_t v111 = 4;
        }
        else
        {
          uint64_t v172 = 0;
          uint64_t v173 = v59 >> 6;
          if (v59 >> 6 <= 5) {
            uint64_t v173 = 5;
          }
          int v174 = v173 - 5;
          do
          {
            if (v174 == v172) {
              goto LABEL_109;
            }
            uint64_t v171 = *(void *)(v57 + 96 + 8 * v172++);
          }
          while (!v171);
          uint64_t v111 = v172 + 4;
        }
        goto LABEL_84;
      }
LABEL_109:
      uint64_t v175 = *(_WORD *)(v0 + 92);
      uint64_t v176 = *(unsigned char *)(v0 + 94);
      v177 = *(void *)(v0 + 936);
      long long v257 = *(_OWORD *)(v0 + 904);
      long long v260 = *(_OWORD *)(v0 + 920);
      v252 = *(_OWORD *)(v0 + 888);
      unint64_t v250 = *(_OWORD *)(v0 + 872);
      uint64_t v178 = *(void *)(v0 + 864);
      unint64_t v180 = *(void *)(v0 + 384);
      uint64_t v179 = *(void *)(v0 + 392);
      uint64_t v181 = *(void *)(v0 + 376);
      swift_release();
      v262 = v178;
      v263[0] = v250;
      v263[1] = v252;
      v263[2] = v257;
      v263[3] = v260;
      long long v264 = v177;
      v266 = v176;
      long long v265 = v175;
      PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v181, &v262, (uint64_t *)v263, v180, v179);
      if (v178 != 0x8000000000000000)
      {
        uint64_t v182 = *(void *)(v0 + 864);
        __int16 v184 = *(void *)(v0 + 480);
        uint64_t v183 = *(void *)(v0 + 488);
        uint64_t v186 = *(void *)(v0 + 464);
        char v185 = *(void *)(v0 + 472);
        uint64_t v187 = *(void *)(v0 + 448);
        uint64_t v188 = *(void *)(v0 + 456);
        uint64_t v189 = *(void *)(v0 + 400);
        outlined copy of PaperDocument.PDFDocumentUse(v182);
        outlined consume of PaperDocument.PDFDocumentUse(v182);
        outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v188 + 16))(v185, v189, v187);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v188 + 32))(v186, v185, v187);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
        dispatch thunk of Sequence.makeIterator()();
        uint64_t v190 = *(int *)(v184 + 36);
        *(_DWORD *)(v0 + 1132) = v190;
        *(void *)(v183 + v190) = 0;
        unint64_t v191 = &selRef_isImageAnalysisEnabled;
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
        while (1)
        {
          uint64_t v192 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
          uint64_t v193 = *(void *)(v0 + 712);
          uint64_t v194 = *(void *)(v0 + 656);
          dispatch thunk of IteratorProtocol.next()();
          if (v192(v193, 1, v194) == 1)
          {
            uint64_t v195 = *(void *)(v0 + 432);
            uint64_t v197 = *(void *)(v0 + 408);
            uint64_t v196 = *(void *)(v0 + 416);
            outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v196 + 56))(v195, 1, 1, v197);
          }
          else
          {
            uint64_t v198 = *(int *)(v0 + 1132);
            uint64_t v199 = *(void *)(v0 + 680);
            v200 = *(void *)(v0 + 656);
            v201 = *(void *)(v0 + 488);
            uint64_t v202 = *(void *)(v0 + 424);
            uint64_t v203 = *(void *)(v0 + 408);
            uint64_t v204 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 664) + 32);
            v204(v199, *(void *)(v0 + 712), v200);
            uint64_t v205 = v202 + *(int *)(v203 + 48);
            uint64_t v206 = *(void *)(v201 + v198);
            v204(v205, v199, v200);
            if (__OFADD__(v206, 1))
            {
              __break(1u);
              goto LABEL_129;
            }
            uint64_t v207 = *(void *)(v0 + 656);
            uint64_t v208 = *(void **)(v0 + 432);
            uint64_t v210 = *(void *)(v0 + 408);
            uint64_t v209 = *(void *)(v0 + 416);
            *(void *)(*(void *)(v0 + 488) + *(int *)(v0 + 1132)) = v206 + 1;
            uint64_t v211 = (char *)v208 + *(int *)(v210 + 48);
            *uint64_t v208 = v206;
            v204((uint64_t)v211, v205, v207);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v209 + 56))(v208, 0, 1, v210);
            unint64_t v191 = &selRef_isImageAnalysisEnabled;
          }
          uint64_t v212 = *(void *)(v0 + 440);
          uint64_t v214 = *(void *)(v0 + 408);
          v213 = *(void *)(v0 + 416);
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 432), v212, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v213 + 48))(v212, 1, v214) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
            goto LABEL_125;
          }
          uint64_t v215 = *(void **)(v0 + 1040);
          uint64_t v216 = *(char **)(v0 + 440);
          v217 = *(void *)v216;
          (*(void (**)(void, char *, void))(*(void *)(v0 + 664) + 32))(*(void *)(v0 + 672), &v216[*(int *)(*(void *)(v0 + 408) + 48)], *(void *)(v0 + 656));
          uint64_t v218 = objc_msgSend(v215, v191[63], v217);
          *(void *)(v0 + 1112) = v218;
          if (v218)
          {
            uint64_t v219 = v218;
            type metadata accessor for PaperKitPDFPage(0);
            v220 = swift_dynamicCastClass();
            if (v220)
            {
              uint64_t v221 = v220;
              uint64_t v222 = *(_WORD *)(v0 + 92);
              uint64_t v223 = *(unsigned char *)(v0 + 94);
              v224 = *(void *)(v0 + 936);
              v253 = *(_OWORD *)(v0 + 904);
              long long v258 = *(_OWORD *)(v0 + 920);
              uint64_t v247 = *(_OWORD *)(v0 + 872);
              unint64_t v251 = *(_OWORD *)(v0 + 888);
              v225 = *(void *)(v0 + 864);
              SharedTagged_3.subscript.getter();
              uint64_t v226 = *(void *)(v0 + 200);
              id v227 = *(void *)(v0 + 208);
              __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v226);
              *(void *)(v0 + 368) = v225;
              *(_OWORD *)(v0 + 16) = v247;
              *(_OWORD *)(v0 + 32) = v251;
              *(_OWORD *)(v0 + 48) = v253;
              *(_OWORD *)(v0 + 64) = v258;
              *(void *)(v0 + 80) = v224;
              *(unsigned char *)(v0 + 90) = v223;
              *(_WORD *)(v0 + 88) = v222;
              long long v254 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v227 + 144) + **(int **)(v227 + 144));
              v228 = (void *)swift_task_alloc();
              *(void *)(v0 + 1120) = v228;
              void *v228 = v0;
              v228[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
              uint64_t v229 = *(void *)(v0 + 384);
              uint64_t v230 = *(void *)(v0 + 392);
              __int16 v231 = *(void *)(v0 + 376);
              return v254(v221, v0 + 368, v231, v0 + 16, v229, v230, v226, v227);
            }
          }
          (*(void (**)(void, void))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 672), *(void *)(v0 + 656));
        }
      }
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_125:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v261 = *(void *)(v0 + 1040);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v232 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v232(v261);
    }
    uint64_t v60 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    uint64_t v61 = swift_task_alloc();
    *(void *)(v61 + 16) = v259;
    *(void *)(v61 + 24) = v58;
    uint64_t v62 = swift_task_alloc();
    *(void *)(v62 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
    *(void *)(v62 + 24) = v61;
    uint64_t v63 = v60 + 4;
    os_unfair_lock_lock(v60 + 4);
    closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v64);
    if (v10)
    {
      char v96 = v60 + 4;
      goto LABEL_48;
    }
    uint64_t v65 = *(void *)(v0 + 544);
    uint64_t v66 = *(void *)(v0 + 536);
    os_unfair_lock_unlock(v63);
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v67 = *v255;
    if ((*v255)(v66, 1, v65) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 536), (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v68 = objc_msgSend(v259, sel_pageAtIndex_, v58);
      if (!v68)
      {
LABEL_129:
        __break(1u);
LABEL_130:
        swift_endAccess();
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        uint64_t v124 = swift_endAccess();
        __break(1u);
        return MEMORY[0x270F17D68](v124, v125, v123, v126, v122);
      }
      uint64_t v69 = v68;
      uint64_t v70 = *(void *)(v0 + 544);
      uint64_t v71 = *(void *)(v0 + 528);
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v72 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v72, v71, (uint64_t *)&demangling cache variable for type metadata for PageId?);

      if (v67(v71, 1, v70) == 1)
      {
        uint64_t v73 = *(void *)(v0 + 584);
        uint64_t v74 = *(void *)(v0 + 576);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 528), (uint64_t *)&demangling cache variable for type metadata for PageId?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v238 + 56))(v74, 1, 1, v73);
        uint64_t v75 = v74 + *(int *)(v242 + 20);
        id v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 1, 1, v76);
      }
      else
      {
        _s8PaperKit0A8DocumentVWObTm_0(*(void *)(v0 + 528), *(void *)(v0 + 576), type metadata accessor for PageId);
      }
    }
    else
    {
      _s8PaperKit0A8DocumentVWObTm_0(*(void *)(v0 + 536), *(void *)(v0 + 576), type metadata accessor for PageId);
    }
    uint64_t v77 = *(void *)(v0 + 640);
    uint64_t v78 = *(void *)(v0 + 584);
    uint64_t v79 = *(void *)(v0 + 576);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v79, v77, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PDFPageID(v79, type metadata accessor for PageId);
    uint64_t v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v238 + 48))(v77, 1, v78);
    uint64_t v81 = *(void *)(v0 + 640);
    if (v80 == 1)
    {
      uint64_t v57 = outlined destroy of StocksKitCurrencyCache.Provider?(v81, &demangling cache variable for type metadata for PDFPageID?);
      goto LABEL_24;
    }
    uint64_t v82 = *(void *)(v0 + 616);
    uint64_t v8 = *(Swift::UInt **)(v0 + 608);
    _s8PaperKit0A8DocumentVWObTm_0(v81, v82, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    outlined init with copy of PDFPageID(v82, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v263[0] = v56;
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    uint64_t v85 = v56[2];
    uint64_t v86 = (v84 & 1) == 0;
    uint64_t v57 = v85 + v86;
    if (__OFADD__(v85, v86)) {
      goto LABEL_96;
    }
    uint64_t v87 = v84;
    if (v56[3] >= v57)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v84 & 1) == 0) {
          goto LABEL_43;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v56 = *(void **)&v263[0];
        if ((v87 & 1) == 0) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      uint64_t v8 = *(Swift::UInt **)(v0 + 608);
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
      uint64_t v56 = *(void **)&v263[0];
      int v88 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v87 & 1) != (v89 & 1))
      {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      uint64_t v10 = v88;
      if ((v87 & 1) == 0)
      {
LABEL_43:
        uint64_t v90 = *(void *)(v0 + 608);
        v56[(v10 >> 6) + 8] |= 1 << v10;
        outlined init with copy of PDFPageID(v90, v56[6] + *(void *)(v238 + 72) * v10, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        *(void *)(v56[7] + 8 * v10) = v58;
        __C::CGRect v91 = v56[2];
        __C::CGRect v92 = __OFADD__(v91, 1);
        char v93 = v91 + 1;
        if (v92)
        {
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          uint64_t v57 = swift_once();
          goto LABEL_22;
        }
        v56[2] = v93;
        goto LABEL_45;
      }
    }
    *(void *)(v56[7] + 8 * v10) = v58;
LABEL_45:
    uint64_t v94 = *(void *)(v0 + 616);
    BOOL v95 = *(void *)(v0 + 608);
    swift_bridgeObjectRelease();
    outlined destroy of PDFPageID(v95, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v57 = outlined destroy of PDFPageID(v94, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_24:
    uint64_t v10 = 0;
    unint64_t v58 = (Swift::UInt *)((char *)v58 + 1);
    uint64_t v8 = v248;
  }
  while (v248 != v58);
  v243 = 0;
LABEL_52:
  *(void *)(v0 + 1048) = v56;
  unint64_t v97 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
  char v98 = *(void *)(v0 + 720);
  uint64_t v99 = *(void *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  if (v97(v98, 1, v99) == 1)
  {
LABEL_53:
    uint64_t v100 = *(void *)(v0 + 944);
    BOOL v101 = *(void *)(v0 + 864);
    uint64_t v102 = *(void *)(v0 + 392);
    uint64_t v104 = *(void *)(v0 + 376);
    uint64_t v103 = *(void *)(v0 + 384);
    v237(*(void *)(v0 + 752), *(void *)(v0 + 736));
    swift_beginAccess();
    v105 = *(char **)(v100 + 16);
    *(void *)&v263[0] = v101;
    swift_bridgeObjectRetain();
    uint64_t v106 = PaperDocument.update<A>(_:in:otherDocuments:use:)((char *)v259, v104, v105, (unint64_t *)v263, v103, v102);
    *(void *)(v0 + 1056) = v106;
    swift_bridgeObjectRelease();
    uint64_t v107 = v106[32];
    *(unsigned char *)(v0 + 91) = v107;
    uint64_t v108 = -1;
    uint64_t v109 = -1 << v107;
    if (-v109 < 64) {
      uint64_t v108 = ~(-1 << -(char)v109);
    }
    uint64_t v110 = v108 & *((void *)v106 + 7);
    if (v110)
    {
      uint64_t v111 = 0;
      uint64_t v112 = __clz(__rbit64(v110));
      v113 = (v110 - 1) & v110;
      uint64_t v57 = *(void *)(v0 + 1056);
    }
    else
    {
      char v59 = 63 - v109;
      uint64_t v57 = *(void *)(v0 + 1056);
      if ((unint64_t)(63 - v109) <= 0x7F) {
        goto LABEL_109;
      }
      uint64_t v171 = *(void *)(v57 + 64);
      if (v171)
      {
        uint64_t v111 = 1;
        goto LABEL_84;
      }
      if (v59 < 0xC0) {
        goto LABEL_109;
      }
      uint64_t v171 = *(void *)(v57 + 72);
      if (v171)
      {
        uint64_t v111 = 2;
        goto LABEL_84;
      }
      if (v59 < 0x100) {
        goto LABEL_109;
      }
      uint64_t v171 = *(void *)(v57 + 80);
      if (!v171) {
        goto LABEL_97;
      }
      uint64_t v111 = 3;
LABEL_84:
      v113 = (v171 - 1) & v171;
      uint64_t v112 = __clz(__rbit64(v171)) + (v111 << 6);
    }
    *(void *)(v0 + 1072) = v113;
    *(void *)(v0 + 1064) = v111;
    v114 = *(void *)(v0 + 816);
    char v115 = *(void *)(v0 + 808);
    uint64_t v116 = *(void *)(v0 + 800);
    uint64_t v117 = *(void *)(v0 + 792);
    unint64_t v118 = *(void *)(v57 + 48) + *(void *)(v116 + 72) * v112;
    uint64_t v119 = *(void (**)(uint64_t, unint64_t, uint64_t))(v116 + 16);
    *(void *)(v0 + 1080) = v119;
    *(void *)(v0 + 1088) = (v116 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v119(v114, v118, v117);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 32))(v115, v114, v117);
    unint64_t v120 = swift_task_alloc();
    *(void *)(v0 + 1096) = v120;
    *(void *)(v120 + 16) = v115;
    uint64_t v121 = (void *)swift_task_alloc();
    *(void *)(v0 + 1104) = v121;
    uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PaperKitPDFDocument?);
    *uint64_t v121 = v0;
    v121[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
    uint64_t v123 = &async function pointer to partial apply for closure #1 in static PaperKitPDFDocument._load(_:);
    uint64_t v124 = v0 + 360;
    uint64_t v125 = 1;
    unint64_t v126 = v120;
    return MEMORY[0x270F17D68](v124, v125, v123, v126, v122);
  }
  v256 = (void *)(v0 + 136);
  v127 = *(void *)(v0 + 664);
  uint64_t v128 = *(void (**)(void, void, void))(v127 + 32);
  v127 += 32;
  unint64_t v249 = v128;
  v129 = *(void *)(v0 + 592);
  uint64_t v239 = *(void *)(v0 + 544);
  uint64_t v240 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
  uint64_t v233 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56);
  v245 = (void (**)(uint64_t, uint64_t))(v127 - 24);
  uint64_t v246 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
  uint64_t v234 = (void (**)(void, uint64_t))(v127 - 16);
  while (2)
  {
    uint64_t v134 = *(void *)(v0 + 632);
    uint64_t v135 = *(void *)(v0 + 584);
    v249(*(void *)(v0 + 696), *(void *)(v0 + 720), *(void *)(v0 + 656));
    SharedTagged_3.subscript.getter();
    v136 = *(void *)(v0 + 160);
    uint64_t v137 = *(void *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1(v256, v136);
    (*(void (**)(uint64_t, uint64_t))(v137 + 88))(v136, v137);
    if ((*v246)(v134, 1, v135) == 1)
    {
      uint64_t v130 = *(void *)(v0 + 632);
      (*v245)(*(void *)(v0 + 696), *(void *)(v0 + 656));
      outlined destroy of StocksKitCurrencyCache.Provider?(v130, &demangling cache variable for type metadata for PDFPageID?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v256);
      goto LABEL_62;
    }
    _s8PaperKit0A8DocumentVWObTm_0(*(void *)(v0 + 632), *(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for PDFPageID);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v256);
    if (!v56[2]
      || (uint64_t v138 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 600)), (v139 & 1) == 0))
    {
      uint64_t v158 = *(void *)(v0 + 696);
      uint64_t v159 = *(void *)(v0 + 656);
      outlined destroy of PDFPageID(*(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for PDFPageID);
      (*v245)(v158, v159);
      goto LABEL_62;
    }
    uint64_t v140 = *(void *)(v56[7] + 8 * v138);
    if (one-time initialization token for lock != -1) {
      swift_once();
    }
    uint64_t v141 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    uint64_t v142 = swift_task_alloc();
    *(void *)(v142 + 16) = v259;
    *(void *)(v142 + 24) = v140;
    uint64_t v143 = swift_task_alloc();
    *(void *)(v143 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
    *(void *)(v143 + 24) = v142;
    os_unfair_lock_lock(v141 + 4);
    closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v144);
    if (!v243)
    {
      uint64_t v244 = v140;
      uint64_t v145 = *(void *)(v0 + 544);
      unint64_t v146 = *(void *)(v0 + 520);
      os_unfair_lock_unlock(v141 + 4);
      swift_task_dealloc();
      swift_task_dealloc();
      char v147 = *v240;
      if ((*v240)(v146, 1, v145) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for PageId?);
        unint64_t v148 = objc_msgSend(v259, sel_pageAtIndex_, v244);
        if (!v148) {
          goto LABEL_131;
        }
        v149 = v148;
        uint64_t v150 = *(void *)(v0 + 544);
        uint64_t v151 = *(void *)(v0 + 512);
        type metadata accessor for PaperKitPDFPage(0);
        uint64_t v152 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
        swift_beginAccess();
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v152, v151, (uint64_t *)&demangling cache variable for type metadata for PageId?);

        if (v147(v151, 1, v150) == 1)
        {
          uint64_t v153 = *(void *)(v0 + 584);
          uint64_t v154 = *(void *)(v0 + 568);
          outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 512), (uint64_t *)&demangling cache variable for type metadata for PageId?);
          (*v233)(v154, 1, 1, v153);
          v155 = v239;
          id v156 = v154 + *(int *)(v239 + 20);
          v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 56))(v156, 1, 1, v157);
          goto LABEL_77;
        }
        uint64_t v160 = *(void *)(v0 + 568);
        uint64_t v161 = *(void *)(v0 + 512);
      }
      else
      {
        uint64_t v160 = *(void *)(v0 + 568);
        uint64_t v161 = *(void *)(v0 + 520);
      }
      _s8PaperKit0A8DocumentVWObTm_0(v161, v160, type metadata accessor for PageId);
      v155 = v239;
LABEL_77:
      uint64_t v162 = *(void *)(v0 + 568);
      uint64_t v163 = *(void *)(v0 + 504);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v162 + *(int *)(v155 + 20), v163, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of PDFPageID(v162, type metadata accessor for PageId);
      uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      uint64_t v165 = *(void *)(v164 - 8);
      uint64_t v166 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v165 + 48))(v163, 1, v164);
      outlined destroy of StocksKitCurrencyCache.Provider?(v163, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v167 = *(void *)(v0 + 696);
      if (v166 == 1)
      {
        uint64_t v235 = *(void *)(v0 + 656);
        uint64_t v236 = *(void *)(v0 + 600);
        uint64_t v168 = *(char **)(v0 + 560);
        uint64_t v169 = *(void *)(v0 + 496);
        (*v234)(*(void *)(v0 + 688), v167);
        lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
        WeakTagged_3.init(_:)();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v165 + 56))(v169, 0, 1, v164);
        PaperKitPDFDocument.subscript.getter(v244, (uint64_t)v168);
        outlined assign with take of Date?(v169, (uint64_t)&v168[*(int *)(v239 + 20)], &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        PaperKitPDFDocument.subscript.setter(v168, v244);
        outlined destroy of PDFPageID(v236, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*v245)(v167, v235);
      }
      else
      {
        uint64_t v170 = *(void *)(v0 + 656);
        outlined destroy of PDFPageID(*(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*v245)(v167, v170);
      }
      v243 = 0;
LABEL_62:
      v131 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
      uint64_t v132 = *(void *)(v0 + 720);
      uint64_t v133 = *(void *)(v0 + 656);
      CROrderedSet.Iterator.next()();
      if (v131(v132, 1, v133) == 1) {
        goto LABEL_53;
      }
      continue;
    }
    break;
  }
  char v96 = v141 + 4;
LABEL_48:
  os_unfair_lock_unlock(v96);
  return swift_task_dealloc();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1032) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PaperDocument.newPDFDocument<A>(use:in:options:);
  }
  else {
    uint64_t v2 = PaperDocument.newPDFDocument<A>(use:in:options:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  Swift::UInt *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  Swift::UInt *v60;
  unint64_t v61;
  os_unfair_lock_s *v62;
  uint64_t v63;
  uint64_t v64;
  os_unfair_lock_s *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t);
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int isUniquelyReferenced_nonNull_native;
  char v86;
  uint64_t v87;
  BOOL v88;
  char v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  os_unfair_lock_s *v98;
  unsigned int (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unsigned char *v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void (*v121)(uint64_t, unint64_t, uint64_t);
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(void, void, void);
  uint64_t v131;
  uint64_t v132;
  unsigned int (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  os_unfair_lock_s *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int (*v149)(uint64_t, uint64_t, uint64_t);
  id v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int16 v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char **v193;
  unsigned int (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(uint64_t, uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  char *v218;
  uint64_t v219;
  id v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  __int16 v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t (*v234)(uint64_t);
  void (**v235)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v236)(void, uint64_t);
  uint64_t v237;
  uint64_t v238;
  void (*v239)(void, void);
  uint64_t v240;
  uint64_t v241;
  unsigned int (**v242)(uint64_t, uint64_t, uint64_t);
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  void (**v247)(uint64_t, uint64_t);
  unsigned int (**v248)(uint64_t, uint64_t, uint64_t);
  long long v249;
  Swift::UInt *v250;
  void (*v251)(void, void, void);
  long long v252;
  long long v253;
  long long v254;
  long long v255;
  uint64_t (*v256)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (**v257)(uint64_t, uint64_t, uint64_t);
  void *v258;
  long long v259;
  long long v260;
  void *v261;
  long long v262;
  uint64_t v263;
  uint64_t v264;
  _OWORD v265[4];
  uint64_t v266;
  __int16 v267;
  char v268;
  uint64_t v269;
  uint64_t v270;

  uint64_t v269 = v0;
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void *)(v0 + 704);
  uint64_t v4 = *(void *)(v0 + 664);
  uint64_t v5 = *(void *)(v0 + 656);
  (*(void (**)(void, void))(*(void *)(v0 + 800) + 8))(*(void *)(v0 + 848), *(void *)(v0 + 792));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  CROrderedSet.Iterator.next()();
  uint64_t v6 = v1(v2, 1, v5);
  v243 = *(void *)(v0 + 1032);
  if (v6 != 1)
  {
    do
    {
      uint64_t v23 = *(void *)(v0 + 648);
      uint64_t v24 = *(void *)(v0 + 592);
      uint64_t v25 = *(void *)(v0 + 584);
      (*(void (**)(void, void, void))(v0 + 1016))(*(void *)(v0 + 704), *(void *)(v0 + 728), *(void *)(v0 + 656));
      SharedTagged_3.subscript.getter();
      uint64_t v26 = *(void *)(v0 + 120);
      uint64_t v27 = *(void *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v26);
      (*(void (**)(uint64_t, uint64_t))(v27 + 88))(v26, v27);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v25) == 1)
      {
        uint64_t v15 = *(void *)(v0 + 800);
        uint64_t v16 = *(void *)(v0 + 792);
        unint64_t v17 = *(void *)(v0 + 776);
        uint64_t v18 = *(void *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v18, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v17, 1, 1, v16);
      }
      else
      {
        uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
        uint64_t v29 = *(void *)(v0 + 800);
        uint64_t v30 = *(void *)(v0 + 792);
        uint64_t v31 = *(void *)(v0 + 776);
        uint64_t v32 = *(void *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v31, v32 + *(int *)(*(void *)(v0 + 584) + 20), v30);
        outlined destroy of PDFPageID(v32, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v30);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v28(v31, 1, v30) != 1)
        {
          (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 848), *(void *)(v0 + 776), *(void *)(v0 + 792));
          uint64_t v33 = (void *)swift_task_alloc();
          *(void *)(v0 + 1024) = v33;
          *uint64_t v33 = v0;
          v33[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          uint64_t v34 = *(void *)(v0 + 952);
          uint64_t v35 = *(void *)(v0 + 944);
          uint64_t v36 = *(void *)(v0 + 848);
          return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(v36, v35, v34);
        }
      }
      uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
      uint64_t v20 = *(void *)(v0 + 776);
      uint64_t v21 = *(void *)(v0 + 728);
      uint64_t v22 = *(void *)(v0 + 656);
      (*(void (**)(void, uint64_t))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 704), v22);
      outlined destroy of StocksKitCurrencyCache.Provider?(v20, &demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v19(v21, 1, v22) != 1);
  }
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
  uint64_t v8 = *(void *)(v0 + 792);
  uint64_t v9 = *(void *)(v0 + 768);
  uint64_t v239 = *(void (**)(void, void))(*(void *)(v0 + 744) + 8);
  v239(*(void *)(v0 + 760), *(void *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  if (v7(v9, 1, v8) == 1)
  {
    uint64_t v10 = *(Swift::UInt **)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 768), &demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    uint64_t v11 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v11, (uint64_t)v10);
    uint64_t v12 = v243;
    swift_bridgeObjectRelease();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(Swift::UInt *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v10, 1, v13) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 624), &demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      uint64_t v14 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
    }
    else
    {
      unint64_t v46 = *(void *)(v0 + 944);
      char v47 = *(void *)(v0 + 832);
      uint64_t v48 = *(void *)(v0 + 824);
      uint64_t v49 = *(void *)(v0 + 792);
      uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 800) + 32);
      v50(v48, *(void *)(v0 + 624), v49);
      v50(v47, v48, v49);
      swift_beginAccess();
      uint64_t v51 = *(void *)(v46 + 16);
      if (!*(void *)(v51 + 16)) {
        goto LABEL_132;
      }
      uint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 832));
      if ((v53 & 1) == 0) {
        goto LABEL_132;
      }
      uint64_t v54 = *(void *)(v0 + 832);
      uint64_t v55 = *(void *)(v0 + 800);
      uint64_t v56 = *(void *)(v0 + 792);
      uint64_t v57 = *(void **)(*(void *)(v51 + 56) + 8 * v52);
      swift_endAccess();
      uint64_t v10 = *(Swift::UInt **)(v55 + 8);
      uint64_t v14 = v57;
      ((void (*)(uint64_t, uint64_t))v10)(v54, v56);
      uint64_t v12 = v243;
    }
  }
  else
  {
    uint64_t v38 = *(void *)(v0 + 944);
    (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 32))(*(void *)(v0 + 840), *(void *)(v0 + 768), *(void *)(v0 + 792));
    swift_beginAccess();
    uint64_t v39 = *(void *)(v38 + 16);
    if (!*(void *)(v39 + 16)) {
      goto LABEL_130;
    }
    uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 840));
    if ((v41 & 1) == 0) {
      goto LABEL_130;
    }
    uint64_t v42 = *(void *)(v0 + 840);
    CGFloat v43 = *(void *)(v0 + 800);
    uint64_t v44 = *(void *)(v0 + 792);
    uint64_t v45 = *(void **)(*(void *)(v39 + 56) + 8 * v40);
    swift_endAccess();
    uint64_t v10 = *(Swift::UInt **)(v43 + 8);
    uint64_t v14 = v45;
    ((void (*)(uint64_t, uint64_t))v10)(v42, v44);
    uint64_t v12 = v243;
  }
  *(void *)(v0 + 1040) = v14;
  unint64_t v58 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  char v59 = (uint64_t)objc_msgSend(v14, sel_pageCount);
  if (v59 < 0) {
    goto LABEL_101;
  }
  uint64_t v10 = (Swift::UInt *)v59;
  v261 = v14;
  if (!v59)
  {
    v245 = v12;
    goto LABEL_52;
  }
  if (one-time initialization token for lock != -1) {
    goto LABEL_102;
  }
LABEL_22:
  uint64_t v60 = 0;
  uint64_t v61 = *(void *)(v0 + 544);
  uint64_t v244 = v61;
  long long v257 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
  uint64_t v240 = *(void *)(v0 + 592);
  unint64_t v250 = v10;
  do
  {
    if (v10 == v60)
    {
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      if (v61 >= 0x140)
      {
        uint64_t v173 = *(void *)(v59 + 88);
        if (v173)
        {
          v113 = 4;
        }
        else
        {
          int v174 = 0;
          uint64_t v175 = v61 >> 6;
          if (v61 >> 6 <= 5) {
            uint64_t v175 = 5;
          }
          uint64_t v176 = v175 - 5;
          do
          {
            if (v176 == v174) {
              goto LABEL_109;
            }
            uint64_t v173 = *(void *)(v59 + 96 + 8 * v174++);
          }
          while (!v173);
          v113 = v174 + 4;
        }
        goto LABEL_84;
      }
LABEL_109:
      v177 = *(_WORD *)(v0 + 92);
      uint64_t v178 = *(unsigned char *)(v0 + 94);
      uint64_t v179 = *(void *)(v0 + 936);
      long long v259 = *(_OWORD *)(v0 + 904);
      v262 = *(_OWORD *)(v0 + 920);
      long long v254 = *(_OWORD *)(v0 + 888);
      v252 = *(_OWORD *)(v0 + 872);
      unint64_t v180 = *(void *)(v0 + 864);
      uint64_t v182 = *(void *)(v0 + 384);
      uint64_t v181 = *(void *)(v0 + 392);
      uint64_t v183 = *(void *)(v0 + 376);
      swift_release();
      long long v264 = v180;
      v265[0] = v252;
      v265[1] = v254;
      v265[2] = v259;
      v265[3] = v262;
      v266 = v179;
      uint64_t v268 = v178;
      long long v267 = v177;
      PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v183, &v264, (uint64_t *)v265, v182, v181);
      if (v180 != 0x8000000000000000)
      {
        __int16 v184 = *(void *)(v0 + 864);
        uint64_t v186 = *(void *)(v0 + 480);
        char v185 = *(void *)(v0 + 488);
        uint64_t v188 = *(void *)(v0 + 464);
        uint64_t v187 = *(void *)(v0 + 472);
        uint64_t v189 = *(void *)(v0 + 448);
        uint64_t v190 = *(void *)(v0 + 456);
        unint64_t v191 = *(void *)(v0 + 400);
        outlined copy of PaperDocument.PDFDocumentUse(v184);
        outlined consume of PaperDocument.PDFDocumentUse(v184);
        outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v190 + 16))(v187, v191, v189);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v190 + 32))(v188, v187, v189);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
        dispatch thunk of Sequence.makeIterator()();
        uint64_t v192 = *(int *)(v186 + 36);
        *(_DWORD *)(v0 + 1132) = v192;
        *(void *)(v185 + v192) = 0;
        uint64_t v193 = &selRef_isImageAnalysisEnabled;
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
        while (1)
        {
          uint64_t v194 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
          uint64_t v195 = *(void *)(v0 + 712);
          uint64_t v196 = *(void *)(v0 + 656);
          dispatch thunk of IteratorProtocol.next()();
          if (v194(v195, 1, v196) == 1)
          {
            uint64_t v197 = *(void *)(v0 + 432);
            uint64_t v199 = *(void *)(v0 + 408);
            uint64_t v198 = *(void *)(v0 + 416);
            outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v198 + 56))(v197, 1, 1, v199);
          }
          else
          {
            v200 = *(int *)(v0 + 1132);
            v201 = *(void *)(v0 + 680);
            uint64_t v202 = *(void *)(v0 + 656);
            uint64_t v203 = *(void *)(v0 + 488);
            uint64_t v204 = *(void *)(v0 + 424);
            uint64_t v205 = *(void *)(v0 + 408);
            uint64_t v206 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 664) + 32);
            v206(v201, *(void *)(v0 + 712), v202);
            uint64_t v207 = v204 + *(int *)(v205 + 48);
            uint64_t v208 = *(void *)(v203 + v200);
            v206(v207, v201, v202);
            if (__OFADD__(v208, 1))
            {
              __break(1u);
              goto LABEL_129;
            }
            uint64_t v209 = *(void *)(v0 + 656);
            uint64_t v210 = *(void **)(v0 + 432);
            uint64_t v212 = *(void *)(v0 + 408);
            uint64_t v211 = *(void *)(v0 + 416);
            *(void *)(*(void *)(v0 + 488) + *(int *)(v0 + 1132)) = v208 + 1;
            v213 = (char *)v210 + *(int *)(v212 + 48);
            *uint64_t v210 = v208;
            v206((uint64_t)v213, v207, v209);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v211 + 56))(v210, 0, 1, v212);
            uint64_t v193 = &selRef_isImageAnalysisEnabled;
          }
          uint64_t v214 = *(void *)(v0 + 440);
          uint64_t v216 = *(void *)(v0 + 408);
          uint64_t v215 = *(void *)(v0 + 416);
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 432), v214, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v215 + 48))(v214, 1, v216) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
            goto LABEL_125;
          }
          v217 = *(void **)(v0 + 1040);
          uint64_t v218 = *(char **)(v0 + 440);
          uint64_t v219 = *(void *)v218;
          (*(void (**)(void, char *, void))(*(void *)(v0 + 664) + 32))(*(void *)(v0 + 672), &v218[*(int *)(*(void *)(v0 + 408) + 48)], *(void *)(v0 + 656));
          v220 = objc_msgSend(v217, v193[63], v219);
          *(void *)(v0 + 1112) = v220;
          if (v220)
          {
            uint64_t v221 = v220;
            type metadata accessor for PaperKitPDFPage(0);
            uint64_t v222 = swift_dynamicCastClass();
            if (v222)
            {
              uint64_t v223 = v222;
              v224 = *(_WORD *)(v0 + 92);
              v225 = *(unsigned char *)(v0 + 94);
              uint64_t v226 = *(void *)(v0 + 936);
              v255 = *(_OWORD *)(v0 + 904);
              long long v260 = *(_OWORD *)(v0 + 920);
              unint64_t v249 = *(_OWORD *)(v0 + 872);
              v253 = *(_OWORD *)(v0 + 888);
              id v227 = *(void *)(v0 + 864);
              SharedTagged_3.subscript.getter();
              v228 = *(void *)(v0 + 200);
              uint64_t v229 = *(void *)(v0 + 208);
              __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v228);
              *(void *)(v0 + 368) = v227;
              *(_OWORD *)(v0 + 16) = v249;
              *(_OWORD *)(v0 + 32) = v253;
              *(_OWORD *)(v0 + 48) = v255;
              *(_OWORD *)(v0 + 64) = v260;
              *(void *)(v0 + 80) = v226;
              *(unsigned char *)(v0 + 90) = v225;
              *(_WORD *)(v0 + 88) = v224;
              v256 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v229 + 144) + **(int **)(v229 + 144));
              uint64_t v230 = (void *)swift_task_alloc();
              *(void *)(v0 + 1120) = v230;
              *uint64_t v230 = v0;
              v230[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
              __int16 v231 = *(void *)(v0 + 384);
              char v232 = *(void *)(v0 + 392);
              uint64_t v233 = *(void *)(v0 + 376);
              return v256(v223, v0 + 368, v233, v0 + 16, v231, v232, v228, v229);
            }
          }
          (*(void (**)(void, void))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 672), *(void *)(v0 + 656));
        }
      }
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_125:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v263 = *(void *)(v0 + 1040);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v234 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v234(v263);
    }
    uint64_t v62 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    uint64_t v63 = swift_task_alloc();
    *(void *)(v63 + 16) = v261;
    *(void *)(v63 + 24) = v60;
    unint64_t v64 = swift_task_alloc();
    *(void *)(v64 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
    *(void *)(v64 + 24) = v63;
    uint64_t v65 = v62 + 4;
    os_unfair_lock_lock(v62 + 4);
    closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v66);
    if (v12)
    {
      char v98 = v62 + 4;
      goto LABEL_48;
    }
    unint64_t v67 = *(void *)(v0 + 544);
    uint64_t v68 = *(void *)(v0 + 536);
    os_unfair_lock_unlock(v65);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v69 = *v257;
    if ((*v257)(v68, 1, v67) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 536), (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v70 = objc_msgSend(v261, sel_pageAtIndex_, v60);
      if (!v70)
      {
LABEL_129:
        __break(1u);
LABEL_130:
        swift_endAccess();
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        unint64_t v126 = swift_endAccess();
        __break(1u);
        return MEMORY[0x270F17D68](v126, v127, v125, v128, v124);
      }
      uint64_t v71 = v70;
      uint64_t v72 = *(void *)(v0 + 544);
      uint64_t v73 = *(void *)(v0 + 528);
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v74 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v74, v73, (uint64_t *)&demangling cache variable for type metadata for PageId?);

      if (v69(v73, 1, v72) == 1)
      {
        uint64_t v75 = *(void *)(v0 + 584);
        id v76 = *(void *)(v0 + 576);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 528), (uint64_t *)&demangling cache variable for type metadata for PageId?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v240 + 56))(v76, 1, 1, v75);
        uint64_t v77 = v76 + *(int *)(v244 + 20);
        uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v77, 1, 1, v78);
      }
      else
      {
        _s8PaperKit0A8DocumentVWObTm_0(*(void *)(v0 + 528), *(void *)(v0 + 576), type metadata accessor for PageId);
      }
    }
    else
    {
      _s8PaperKit0A8DocumentVWObTm_0(*(void *)(v0 + 536), *(void *)(v0 + 576), type metadata accessor for PageId);
    }
    uint64_t v79 = *(void *)(v0 + 640);
    uint64_t v80 = *(void *)(v0 + 584);
    uint64_t v81 = *(void *)(v0 + 576);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v81, v79, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PDFPageID(v81, type metadata accessor for PageId);
    uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v79, 1, v80);
    uint64_t v83 = *(void *)(v0 + 640);
    if (v82 == 1)
    {
      char v59 = outlined destroy of StocksKitCurrencyCache.Provider?(v83, &demangling cache variable for type metadata for PDFPageID?);
      goto LABEL_24;
    }
    uint64_t v84 = *(void *)(v0 + 616);
    uint64_t v10 = *(Swift::UInt **)(v0 + 608);
    _s8PaperKit0A8DocumentVWObTm_0(v83, v84, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    outlined init with copy of PDFPageID(v84, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v265[0] = v58;
    uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
    uint64_t v87 = v58[2];
    int v88 = (v86 & 1) == 0;
    char v59 = v87 + v88;
    if (__OFADD__(v87, v88)) {
      goto LABEL_96;
    }
    uint64_t v89 = v86;
    if (v58[3] >= v59)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v86 & 1) == 0) {
          goto LABEL_43;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        unint64_t v58 = *(void **)&v265[0];
        if ((v89 & 1) == 0) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      uint64_t v10 = *(Swift::UInt **)(v0 + 608);
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, isUniquelyReferenced_nonNull_native);
      unint64_t v58 = *(void **)&v265[0];
      uint64_t v90 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
      if ((v89 & 1) != (v91 & 1))
      {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      uint64_t v12 = v90;
      if ((v89 & 1) == 0)
      {
LABEL_43:
        __C::CGRect v92 = *(void *)(v0 + 608);
        v58[(v12 >> 6) + 8] |= 1 << v12;
        outlined init with copy of PDFPageID(v92, v58[6] + *(void *)(v240 + 72) * v12, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        *(void *)(v58[7] + 8 * v12) = v60;
        char v93 = v58[2];
        uint64_t v94 = __OFADD__(v93, 1);
        BOOL v95 = v93 + 1;
        if (v94)
        {
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          char v59 = swift_once();
          goto LABEL_22;
        }
        v58[2] = v95;
        goto LABEL_45;
      }
    }
    *(void *)(v58[7] + 8 * v12) = v60;
LABEL_45:
    char v96 = *(void *)(v0 + 616);
    unint64_t v97 = *(void *)(v0 + 608);
    swift_bridgeObjectRelease();
    outlined destroy of PDFPageID(v97, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    char v59 = outlined destroy of PDFPageID(v96, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_24:
    uint64_t v12 = 0;
    uint64_t v60 = (Swift::UInt *)((char *)v60 + 1);
    uint64_t v10 = v250;
  }
  while (v250 != v60);
  v245 = 0;
LABEL_52:
  *(void *)(v0 + 1048) = v58;
  uint64_t v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
  uint64_t v100 = *(void *)(v0 + 720);
  BOOL v101 = *(void *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  if (v99(v100, 1, v101) == 1)
  {
LABEL_53:
    uint64_t v102 = *(void *)(v0 + 944);
    uint64_t v103 = *(void *)(v0 + 864);
    uint64_t v104 = *(void *)(v0 + 392);
    uint64_t v106 = *(void *)(v0 + 376);
    v105 = *(void *)(v0 + 384);
    v239(*(void *)(v0 + 752), *(void *)(v0 + 736));
    swift_beginAccess();
    uint64_t v107 = *(char **)(v102 + 16);
    *(void *)&v265[0] = v103;
    swift_bridgeObjectRetain();
    uint64_t v108 = PaperDocument.update<A>(_:in:otherDocuments:use:)((char *)v261, v106, v107, (unint64_t *)v265, v105, v104);
    *(void *)(v0 + 1056) = v108;
    swift_bridgeObjectRelease();
    uint64_t v109 = v108[32];
    *(unsigned char *)(v0 + 91) = v109;
    uint64_t v110 = -1;
    uint64_t v111 = -1 << v109;
    if (-v111 < 64) {
      uint64_t v110 = ~(-1 << -(char)v111);
    }
    uint64_t v112 = v110 & *((void *)v108 + 7);
    if (v112)
    {
      v113 = 0;
      v114 = __clz(__rbit64(v112));
      char v115 = (v112 - 1) & v112;
      char v59 = *(void *)(v0 + 1056);
    }
    else
    {
      uint64_t v61 = 63 - v111;
      char v59 = *(void *)(v0 + 1056);
      if ((unint64_t)(63 - v111) <= 0x7F) {
        goto LABEL_109;
      }
      uint64_t v173 = *(void *)(v59 + 64);
      if (v173)
      {
        v113 = 1;
        goto LABEL_84;
      }
      if (v61 < 0xC0) {
        goto LABEL_109;
      }
      uint64_t v173 = *(void *)(v59 + 72);
      if (v173)
      {
        v113 = 2;
        goto LABEL_84;
      }
      if (v61 < 0x100) {
        goto LABEL_109;
      }
      uint64_t v173 = *(void *)(v59 + 80);
      if (!v173) {
        goto LABEL_97;
      }
      v113 = 3;
LABEL_84:
      char v115 = (v173 - 1) & v173;
      v114 = __clz(__rbit64(v173)) + (v113 << 6);
    }
    *(void *)(v0 + 1072) = v115;
    *(void *)(v0 + 1064) = v113;
    uint64_t v116 = *(void *)(v0 + 816);
    uint64_t v117 = *(void *)(v0 + 808);
    unint64_t v118 = *(void *)(v0 + 800);
    uint64_t v119 = *(void *)(v0 + 792);
    unint64_t v120 = *(void *)(v59 + 48) + *(void *)(v118 + 72) * v114;
    uint64_t v121 = *(void (**)(uint64_t, unint64_t, uint64_t))(v118 + 16);
    *(void *)(v0 + 1080) = v121;
    *(void *)(v0 + 1088) = (v118 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v121(v116, v120, v119);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 32))(v117, v116, v119);
    uint64_t v122 = swift_task_alloc();
    *(void *)(v0 + 1096) = v122;
    *(void *)(v122 + 16) = v117;
    uint64_t v123 = (void *)swift_task_alloc();
    *(void *)(v0 + 1104) = v123;
    uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PaperKitPDFDocument?);
    *uint64_t v123 = v0;
    v123[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
    uint64_t v125 = &async function pointer to partial apply for closure #1 in static PaperKitPDFDocument._load(_:);
    unint64_t v126 = v0 + 360;
    v127 = 1;
    uint64_t v128 = v122;
    return MEMORY[0x270F17D68](v126, v127, v125, v128, v124);
  }
  long long v258 = (void *)(v0 + 136);
  v129 = *(void *)(v0 + 664);
  uint64_t v130 = *(void (**)(void, void, void))(v129 + 32);
  v129 += 32;
  unint64_t v251 = v130;
  v131 = *(void *)(v0 + 592);
  v241 = *(void *)(v0 + 544);
  v242 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 552) + 48);
  uint64_t v235 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56);
  uint64_t v247 = (void (**)(uint64_t, uint64_t))(v129 - 24);
  v248 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  uint64_t v236 = (void (**)(void, uint64_t))(v129 - 16);
  while (2)
  {
    v136 = *(void *)(v0 + 632);
    uint64_t v137 = *(void *)(v0 + 584);
    v251(*(void *)(v0 + 696), *(void *)(v0 + 720), *(void *)(v0 + 656));
    SharedTagged_3.subscript.getter();
    uint64_t v138 = *(void *)(v0 + 160);
    v139 = *(void *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1(v258, v138);
    (*(void (**)(uint64_t, uint64_t))(v139 + 88))(v138, v139);
    if ((*v248)(v136, 1, v137) == 1)
    {
      uint64_t v132 = *(void *)(v0 + 632);
      (*v247)(*(void *)(v0 + 696), *(void *)(v0 + 656));
      outlined destroy of StocksKitCurrencyCache.Provider?(v132, &demangling cache variable for type metadata for PDFPageID?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v258);
      goto LABEL_62;
    }
    _s8PaperKit0A8DocumentVWObTm_0(*(void *)(v0 + 632), *(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for PDFPageID);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v258);
    if (!v58[2]
      || (uint64_t v140 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 600)), (v141 & 1) == 0))
    {
      uint64_t v160 = *(void *)(v0 + 696);
      uint64_t v161 = *(void *)(v0 + 656);
      outlined destroy of PDFPageID(*(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for PDFPageID);
      (*v247)(v160, v161);
      goto LABEL_62;
    }
    uint64_t v142 = *(void *)(v58[7] + 8 * v140);
    if (one-time initialization token for lock != -1) {
      swift_once();
    }
    uint64_t v143 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    uint64_t v144 = swift_task_alloc();
    *(void *)(v144 + 16) = v261;
    *(void *)(v144 + 24) = v142;
    uint64_t v145 = swift_task_alloc();
    *(void *)(v145 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
    *(void *)(v145 + 24) = v144;
    os_unfair_lock_lock(v143 + 4);
    closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v146);
    if (!v245)
    {
      uint64_t v246 = v142;
      char v147 = *(void *)(v0 + 544);
      unint64_t v148 = *(void *)(v0 + 520);
      os_unfair_lock_unlock(v143 + 4);
      swift_task_dealloc();
      swift_task_dealloc();
      v149 = *v242;
      if ((*v242)(v148, 1, v147) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for PageId?);
        uint64_t v150 = objc_msgSend(v261, sel_pageAtIndex_, v246);
        if (!v150) {
          goto LABEL_131;
        }
        uint64_t v151 = v150;
        uint64_t v152 = *(void *)(v0 + 544);
        uint64_t v153 = *(void *)(v0 + 512);
        type metadata accessor for PaperKitPDFPage(0);
        uint64_t v154 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
        swift_beginAccess();
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v154, v153, (uint64_t *)&demangling cache variable for type metadata for PageId?);

        if (v149(v153, 1, v152) == 1)
        {
          v155 = *(void *)(v0 + 584);
          id v156 = *(void *)(v0 + 568);
          outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 512), (uint64_t *)&demangling cache variable for type metadata for PageId?);
          (*v235)(v156, 1, 1, v155);
          v157 = v241;
          uint64_t v158 = v156 + *(int *)(v241 + 20);
          uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 56))(v158, 1, 1, v159);
          goto LABEL_77;
        }
        uint64_t v162 = *(void *)(v0 + 568);
        uint64_t v163 = *(void *)(v0 + 512);
      }
      else
      {
        uint64_t v162 = *(void *)(v0 + 568);
        uint64_t v163 = *(void *)(v0 + 520);
      }
      _s8PaperKit0A8DocumentVWObTm_0(v163, v162, type metadata accessor for PageId);
      v157 = v241;
LABEL_77:
      uint64_t v164 = *(void *)(v0 + 568);
      uint64_t v165 = *(void *)(v0 + 504);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v164 + *(int *)(v157 + 20), v165, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of PDFPageID(v164, type metadata accessor for PageId);
      uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      uint64_t v167 = *(void *)(v166 - 8);
      uint64_t v168 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v165, 1, v166);
      outlined destroy of StocksKitCurrencyCache.Provider?(v165, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      uint64_t v169 = *(void *)(v0 + 696);
      if (v168 == 1)
      {
        v237 = *(void *)(v0 + 656);
        uint64_t v238 = *(void *)(v0 + 600);
        uint64_t v170 = *(char **)(v0 + 560);
        uint64_t v171 = *(void *)(v0 + 496);
        (*v236)(*(void *)(v0 + 688), v169);
        lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
        WeakTagged_3.init(_:)();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v167 + 56))(v171, 0, 1, v166);
        PaperKitPDFDocument.subscript.getter(v246, (uint64_t)v170);
        outlined assign with take of Date?(v171, (uint64_t)&v170[*(int *)(v241 + 20)], &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        PaperKitPDFDocument.subscript.setter(v170, v246);
        outlined destroy of PDFPageID(v238, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*v247)(v169, v237);
      }
      else
      {
        uint64_t v172 = *(void *)(v0 + 656);
        outlined destroy of PDFPageID(*(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for PDFPageID);
        (*v247)(v169, v172);
      }
      v245 = 0;
LABEL_62:
      uint64_t v133 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
      uint64_t v134 = *(void *)(v0 + 720);
      uint64_t v135 = *(void *)(v0 + 656);
      CROrderedSet.Iterator.next()();
      if (v133(v134, 1, v135) == 1) {
        goto LABEL_53;
      }
      continue;
    }
    break;
  }
  char v98 = v143 + 4;
LABEL_48:
  os_unfair_lock_unlock(v98);
  return swift_task_dealloc();
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](PaperDocument.newPDFDocument<A>(use:in:options:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void (*v4)(unint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t, unint64_t, uint64_t);
  uint64_t v30;
  void *v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  __int16 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char **v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v96)(uint64_t);
  uint64_t v97;
  uint64_t v98;
  long long v99;
  uint64_t v100;
  long long v101;
  long long v102;
  uint64_t v103;
  long long v104;
  long long v105;
  uint64_t (*v106)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  long long v107;
  long long v108;
  char *v109;
  long long v110;
  uint64_t v111;
  uint64_t v112;
  _OWORD v113[4];
  uint64_t v114;
  __int16 v115;
  char v116;
  uint64_t v117;
  uint64_t v118;

  uint64_t v117 = v0;
  uint64_t v1 = *(void **)(v0 + 360);
  if ((unint64_t)v1 >= 2)
  {
    uint64_t v2 = *(void *)(v0 + 808);
    uint64_t v3 = v1;
    LOBYTE(v2) = PaperKitPDFDocument.finishLoading(as:)(v2);
    outlined consume of PaperKitPDFDocument??(v1);
    if (v2)
    {
      uint64_t v4 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1080);
      uint64_t v109 = *(char **)(v0 + 1040);
      char v98 = *(void *)(v0 + 864);
      uint64_t v5 = *(void *)(v0 + 808);
      uint64_t v6 = *(void *)(v0 + 800);
      uint64_t v7 = *(void *)(v0 + 792);
      uint64_t v103 = *(void *)(v0 + 392);
      uint64_t v100 = *(void *)(v0 + 384);
      unint64_t v97 = *(void *)(v0 + 376);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CRAsset, PaperKitPDFDocument)>);
      uint64_t v8 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAsset, PaperKitPDFDocument))
                 - 8);
      uint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_20C832C20;
      uint64_t v11 = v10 + v9;
      uint64_t v12 = v8[14];
      v4(v11, v5, v7);
      *(void *)(v11 + v12) = v3;
      uint64_t v13 = v3;
      uint64_t v14 = (char *)specialized Dictionary.init(dictionaryLiteral:)(v10);
      *(void *)&v113[0] = v98;
      PaperDocument.update<A>(_:in:otherDocuments:use:)(v109, v97, v14, (unint64_t *)v113, v100, v103);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of PaperKitPDFDocument??(v1);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      goto LABEL_6;
    }
    outlined consume of PaperKitPDFDocument??(v1);
  }
  uint64_t v15 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 800) + 8))(*(void *)(v0 + 808), *(void *)(v0 + 792));
LABEL_6:
  uint64_t v20 = *(void *)(v0 + 1072);
  uint64_t v21 = *(void *)(v0 + 1064);
  if (v20)
  {
    uint64_t v22 = (v20 - 1) & v20;
    uint64_t v23 = __clz(__rbit64(v20)) | (v21 << 6);
    uint64_t v15 = *(void *)(v0 + 1056);
    goto LABEL_8;
  }
  uint64_t v32 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v33 = (unint64_t)((1 << *(unsigned char *)(v0 + 91)) + 63) >> 6;
  uint64_t v15 = *(void *)(v0 + 1056);
  if (v32 < v33)
  {
    uint64_t v34 = v15 + 56;
    uint64_t v35 = *(void *)(v15 + 56 + 8 * v32);
    ++v21;
    if (v35)
    {
LABEL_14:
      uint64_t v22 = (v35 - 1) & v35;
      uint64_t v23 = __clz(__rbit64(v35)) + (v21 << 6);
LABEL_8:
      *(void *)(v0 + 1072) = v22;
      *(void *)(v0 + 1064) = v21;
      uint64_t v24 = *(void *)(v0 + 816);
      uint64_t v25 = *(void *)(v0 + 808);
      uint64_t v26 = *(void *)(v0 + 800);
      uint64_t v27 = *(void *)(v0 + 792);
      uint64_t v28 = *(void *)(v15 + 48) + *(void *)(v26 + 72) * v23;
      uint64_t v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 16);
      *(void *)(v0 + 1080) = v29;
      *(void *)(v0 + 1088) = (v26 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v29(v24, v28, v27);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v25, v24, v27);
      uint64_t v30 = swift_task_alloc();
      *(void *)(v0 + 1096) = v30;
      *(void *)(v30 + 16) = v25;
      uint64_t v31 = (void *)swift_task_alloc();
      *(void *)(v0 + 1104) = v31;
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PaperKitPDFDocument?);
      *uint64_t v31 = v0;
      v31[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
      unint64_t v17 = &async function pointer to partial apply for closure #1 in static PaperKitPDFDocument._load(_:);
      uint64_t v15 = v0 + 360;
      uint64_t v16 = 1;
      uint64_t v18 = v30;
      return MEMORY[0x270F17D68](v15, v16, v17, v18, v19);
    }
    uint64_t v21 = v32 + 1;
    if (v32 + 1 < v33)
    {
      uint64_t v35 = *(void *)(v34 + 8 * v21);
      if (v35) {
        goto LABEL_14;
      }
      uint64_t v21 = v32 + 2;
      if (v32 + 2 < v33)
      {
        uint64_t v35 = *(void *)(v34 + 8 * v21);
        if (v35) {
          goto LABEL_14;
        }
        uint64_t v36 = v32 + 3;
        if (v36 < v33)
        {
          uint64_t v35 = *(void *)(v34 + 8 * v36);
          if (v35)
          {
            uint64_t v21 = v36;
            goto LABEL_14;
          }
          while (1)
          {
            uint64_t v21 = v36 + 1;
            if (__OFADD__(v36, 1)) {
              break;
            }
            if (v21 >= v33) {
              goto LABEL_25;
            }
            uint64_t v35 = *(void *)(v34 + 8 * v21);
            ++v36;
            if (v35) {
              goto LABEL_14;
            }
          }
LABEL_46:
          __break(1u);
          return MEMORY[0x270F17D68](v15, v16, v17, v18, v19);
        }
      }
    }
  }
LABEL_25:
  uint64_t v37 = *(_WORD *)(v0 + 92);
  uint64_t v38 = *(unsigned char *)(v0 + 94);
  uint64_t v39 = *(void *)(v0 + 936);
  uint64_t v107 = *(_OWORD *)(v0 + 904);
  uint64_t v110 = *(_OWORD *)(v0 + 920);
  uint64_t v104 = *(_OWORD *)(v0 + 888);
  BOOL v101 = *(_OWORD *)(v0 + 872);
  uint64_t v40 = *(void *)(v0 + 864);
  uint64_t v42 = *(void *)(v0 + 384);
  uint64_t v41 = *(void *)(v0 + 392);
  CGFloat v43 = *(void *)(v0 + 376);
  swift_release();
  uint64_t v112 = v40;
  v113[0] = v101;
  v113[1] = v104;
  v113[2] = v107;
  v113[3] = v110;
  v114 = v39;
  uint64_t v116 = v38;
  char v115 = v37;
  PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v43, &v112, (uint64_t *)v113, v42, v41);
  if (v40 != 0x8000000000000000)
  {
    uint64_t v44 = *(void *)(v0 + 864);
    unint64_t v46 = *(void *)(v0 + 480);
    uint64_t v45 = *(void *)(v0 + 488);
    uint64_t v48 = *(void *)(v0 + 464);
    char v47 = *(void *)(v0 + 472);
    uint64_t v49 = *(void *)(v0 + 448);
    uint64_t v50 = *(void *)(v0 + 456);
    uint64_t v51 = *(void *)(v0 + 400);
    outlined copy of PaperDocument.PDFDocumentUse(v44);
    outlined consume of PaperDocument.PDFDocumentUse(v44);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v47, v51, v49);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v48, v47, v49);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    dispatch thunk of Sequence.makeIterator()();
    uint64_t v52 = *(int *)(v46 + 36);
    *(_DWORD *)(v0 + 1132) = v52;
    *(void *)(v45 + v52) = 0;
    uint64_t v53 = &selRef_isImageAnalysisEnabled;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
    while (1)
    {
      uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
      uint64_t v55 = *(void *)(v0 + 712);
      uint64_t v56 = *(void *)(v0 + 656);
      dispatch thunk of IteratorProtocol.next()();
      if (v54(v55, 1, v56) == 1)
      {
        uint64_t v57 = *(void *)(v0 + 432);
        char v59 = *(void *)(v0 + 408);
        unint64_t v58 = *(void *)(v0 + 416);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v57, 1, 1, v59);
      }
      else
      {
        uint64_t v60 = v53;
        uint64_t v61 = *(int *)(v0 + 1132);
        uint64_t v62 = *(void *)(v0 + 680);
        uint64_t v63 = *(void *)(v0 + 656);
        unint64_t v64 = *(void *)(v0 + 488);
        uint64_t v65 = *(void *)(v0 + 424);
        uint64_t v66 = *(void *)(v0 + 408);
        unint64_t v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 664) + 32);
        v67(v62, *(void *)(v0 + 712), v63);
        uint64_t v68 = v65 + *(int *)(v66 + 48);
        uint64_t v69 = *(void *)(v64 + v61);
        uint64_t v15 = v67(v68, v62, v63);
        if (__OFADD__(v69, 1))
        {
          __break(1u);
          goto LABEL_45;
        }
        uint64_t v70 = *(void *)(v0 + 656);
        uint64_t v71 = *(void **)(v0 + 432);
        uint64_t v73 = *(void *)(v0 + 408);
        uint64_t v72 = *(void *)(v0 + 416);
        *(void *)(*(void *)(v0 + 488) + *(int *)(v0 + 1132)) = v69 + 1;
        uint64_t v74 = (char *)v71 + *(int *)(v73 + 48);
        os_unfair_lock_s *v71 = v69;
        v67((uint64_t)v74, v68, v70);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v72 + 56))(v71, 0, 1, v73);
        uint64_t v53 = v60;
      }
      uint64_t v75 = *(void *)(v0 + 440);
      uint64_t v77 = *(void *)(v0 + 408);
      id v76 = *(void *)(v0 + 416);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 432), v75, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v75, 1, v77) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
        goto LABEL_41;
      }
      uint64_t v78 = *(void **)(v0 + 1040);
      uint64_t v79 = *(char **)(v0 + 440);
      uint64_t v80 = *(void *)v79;
      (*(void (**)(void, char *, void))(*(void *)(v0 + 664) + 32))(*(void *)(v0 + 672), &v79[*(int *)(*(void *)(v0 + 408) + 48)], *(void *)(v0 + 656));
      uint64_t v81 = objc_msgSend(v78, v53[63], v80);
      *(void *)(v0 + 1112) = v81;
      if (v81)
      {
        uint64_t v82 = v81;
        type metadata accessor for PaperKitPDFPage(0);
        uint64_t v83 = swift_dynamicCastClass();
        if (v83)
        {
          uint64_t v84 = v83;
          uint64_t v85 = *(_WORD *)(v0 + 92);
          uint64_t v86 = *(unsigned char *)(v0 + 94);
          uint64_t v87 = *(void *)(v0 + 936);
          v105 = *(_OWORD *)(v0 + 904);
          uint64_t v108 = *(_OWORD *)(v0 + 920);
          uint64_t v99 = *(_OWORD *)(v0 + 872);
          uint64_t v102 = *(_OWORD *)(v0 + 888);
          int v88 = *(void *)(v0 + 864);
          SharedTagged_3.subscript.getter();
          uint64_t v89 = *(void *)(v0 + 200);
          uint64_t v90 = *(void *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v89);
          *(void *)(v0 + 368) = v88;
          *(_OWORD *)(v0 + 16) = v99;
          *(_OWORD *)(v0 + 32) = v102;
          *(_OWORD *)(v0 + 48) = v105;
          *(_OWORD *)(v0 + 64) = v108;
          *(void *)(v0 + 80) = v87;
          *(unsigned char *)(v0 + 90) = v86;
          *(_WORD *)(v0 + 88) = v85;
          uint64_t v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v90 + 144) + **(int **)(v90 + 144));
          __C::CGRect v91 = (void *)swift_task_alloc();
          *(void *)(v0 + 1120) = v91;
          *__C::CGRect v91 = v0;
          v91[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          __C::CGRect v92 = *(void *)(v0 + 384);
          char v93 = *(void *)(v0 + 392);
          uint64_t v94 = *(void *)(v0 + 376);
          return v106(v84, v0 + 368, v94, v0 + 16, v92, v93, v89, v90);
        }
      }
      (*(void (**)(void, void))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 672), *(void *)(v0 + 656));
    }
  }
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_41:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v111 = *(void *)(v0 + 1040);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v96 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v96(v111);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](PaperDocument.newPDFDocument<A>(use:in:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char **v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;

  uint64_t v1 = *(void *)(v0 + 672);
  uint64_t v2 = *(void *)(v0 + 664);
  uint64_t v3 = *(void *)(v0 + 656);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  uint64_t v4 = &selRef_isImageAnalysisEnabled;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  while (1)
  {
    uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
    uint64_t v6 = *(void *)(v0 + 712);
    uint64_t v7 = *(void *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v5(v6, 1, v7) == 1)
    {
      uint64_t v8 = *(void *)(v0 + 432);
      uint64_t v10 = *(void *)(v0 + 408);
      uint64_t v9 = *(void *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, 1, 1, v10);
    }
    else
    {
      uint64_t v11 = v4;
      uint64_t v12 = *(int *)(v0 + 1132);
      uint64_t v13 = *(void *)(v0 + 680);
      uint64_t v14 = *(void *)(v0 + 656);
      uint64_t v15 = *(void *)(v0 + 488);
      uint64_t v16 = *(void *)(v0 + 424);
      unint64_t v17 = *(void *)(v0 + 408);
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 664) + 32);
      v18(v13, *(void *)(v0 + 712), v14);
      uint64_t v19 = v16 + *(int *)(v17 + 48);
      uint64_t v20 = *(void *)(v15 + v12);
      id result = v18(v19, v13, v14);
      if (__OFADD__(v20, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v22 = *(void *)(v0 + 656);
      uint64_t v23 = *(void **)(v0 + 432);
      uint64_t v25 = *(void *)(v0 + 408);
      uint64_t v24 = *(void *)(v0 + 416);
      *(void *)(*(void *)(v0 + 488) + *(int *)(v0 + 1132)) = v20 + 1;
      uint64_t v26 = (char *)v23 + *(int *)(v25 + 48);
      *uint64_t v23 = v20;
      v18((uint64_t)v26, v19, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v23, 0, 1, v25);
      uint64_t v4 = v11;
    }
    uint64_t v27 = *(void *)(v0 + 440);
    uint64_t v29 = *(void *)(v0 + 408);
    uint64_t v28 = *(void *)(v0 + 416);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 432), v27, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v27, 1, v29) == 1) {
      break;
    }
    uint64_t v30 = *(void **)(v0 + 1040);
    uint64_t v31 = *(char **)(v0 + 440);
    uint64_t v32 = *(void *)v31;
    (*(void (**)(void, char *, void))(*(void *)(v0 + 664) + 32))(*(void *)(v0 + 672), &v31[*(int *)(*(void *)(v0 + 408) + 48)], *(void *)(v0 + 656));
    uint64_t v33 = objc_msgSend(v30, v4[63], v32);
    *(void *)(v0 + 1112) = v33;
    if (v33)
    {
      uint64_t v34 = v33;
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v35 = swift_dynamicCastClass();
      if (v35)
      {
        uint64_t v36 = v35;
        uint64_t v37 = *(_WORD *)(v0 + 92);
        uint64_t v38 = *(unsigned char *)(v0 + 94);
        uint64_t v39 = *(void *)(v0 + 936);
        uint64_t v50 = *(_OWORD *)(v0 + 904);
        uint64_t v51 = *(_OWORD *)(v0 + 920);
        uint64_t v48 = *(_OWORD *)(v0 + 872);
        uint64_t v49 = *(_OWORD *)(v0 + 888);
        uint64_t v40 = *(void *)(v0 + 864);
        SharedTagged_3.subscript.getter();
        uint64_t v41 = *(void *)(v0 + 200);
        uint64_t v42 = *(void *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v41);
        *(void *)(v0 + 368) = v40;
        *(_OWORD *)(v0 + 16) = v48;
        *(_OWORD *)(v0 + 32) = v49;
        *(_OWORD *)(v0 + 48) = v50;
        *(_OWORD *)(v0 + 64) = v51;
        *(void *)(v0 + 80) = v39;
        *(unsigned char *)(v0 + 90) = v38;
        *(_WORD *)(v0 + 88) = v37;
        uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 + 144) + **(int **)(v42 + 144));
        CGFloat v43 = (void *)swift_task_alloc();
        *(void *)(v0 + 1120) = v43;
        void *v43 = v0;
        v43[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
        uint64_t v44 = *(void *)(v0 + 384);
        uint64_t v45 = *(void *)(v0 + 392);
        unint64_t v46 = *(void *)(v0 + 376);
        return v52(v36, v0 + 368, v46, v0 + 16, v44, v45, v41, v42);
      }
    }
    (*(void (**)(void, void))(*(void *)(v0 + 664) + 8))(*(void *)(v0 + 672), *(void *)(v0 + 656));
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v53 = *(void *)(v0 + 1040);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v47 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v47(v53);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(id);
  id v8;
  uint64_t v9;

  (*(void (**)(void, void))(v0[100] + 8))(v0[107], v0[99]);
  uint64_t v1 = (void *)v0[124];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_20C2D7000, v3, v4, "Could not create PDFDocument.", v5, 2u);
    MEMORY[0x210550270](v5, -1, -1);
  }

  uint64_t v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(id))v0[1];
  return v6(v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t (*v12)(id);
  id v14;
  uint64_t v15;

  uint64_t v1 = v0[95];
  uint64_t v2 = v0[93];
  uint64_t v3 = v0[92];
  uint64_t v4 = v0[88];
  uint64_t v5 = v0[83];
  uint64_t v6 = v0[82];
  (*(void (**)(void, void))(v0[100] + 8))(v0[106], v0[99]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = (void *)v0[129];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_20C2D7000, v9, v10, "Could not create PDFDocument.", v11, 2u);
    MEMORY[0x210550270](v11, -1, -1);
  }

  uint64_t v14 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(id))v0[1];
  return v12(v14);
}

uint64_t loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  uint64_t v4 = type metadata accessor for CRAsset();
  v3[17] = v4;
  v3[18] = *(void *)(v4 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return MEMORY[0x270FA2498](loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:), 0, 0);
}

uint64_t loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)()
{
  uint64_t v1 = v0[15];
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 16) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v0[14]);
    if (v2)
    {
      uint64_t v4 = v0[18];
      uint64_t v3 = v0[19];
      uint64_t v6 = v0[16];
      uint64_t v5 = v0[17];
      uint64_t v7 = v0[14];
      swift_endAccess();
      uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      v8(v3, v7, v5);
      swift_beginAccess();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v10 = *(void *)(v6 + 16);
      *(void *)(v6 + 16) = 0x8000000000000000;
      unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
      uint64_t v13 = *(void *)(v10 + 16);
      BOOL v14 = (v11 & 1) == 0;
      uint64_t result = v13 + v14;
      if (__OFADD__(v13, v14))
      {
        __break(1u);
      }
      else
      {
        char v16 = v11;
        if (*(void *)(v10 + 24) >= result)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          uint64_t v17 = v0[19];
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
          unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
          if ((v16 & 1) != (v19 & 1))
          {
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          }
          unint64_t v12 = v18;
        }
        uint64_t v22 = v0[16];
        *(void *)(v22 + 16) = v10;
        swift_bridgeObjectRelease();
        uint64_t v23 = *(void **)(v22 + 16);
        uint64_t result = swift_bridgeObjectRetain();
        if ((v16 & 1) == 0)
        {
          uint64_t v24 = v0[20];
          v8(v24, v0[19], v0[17]);
          uint64_t result = specialized _NativeDictionary._insert(at:key:value:)(v12, v24, 0, v23);
        }
        uint64_t v25 = v23[7];
        uint64_t v26 = *(void *)(v25 + 8 * v12);
        BOOL v27 = __OFADD__(v26, 1);
        uint64_t v28 = v26 + 1;
        if (!v27)
        {
          uint64_t v30 = v0[18];
          uint64_t v29 = v0[19];
          uint64_t v31 = v0[17];
          *(void *)(v25 + 8 * v12) = v28;
          swift_endAccess();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v32 = (uint64_t (*)(void))v0[1];
          return v32();
        }
      }
      __break(1u);
      return result;
    }
  }
  swift_endAccess();
  uint64_t v33 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static PaperKitPDFDocument._load(_:)
                                        + async function pointer to specialized static PaperKitPDFDocument._load(_:));
  uint64_t v20 = (void *)swift_task_alloc();
  v0[21] = v20;
  *uint64_t v20 = v0;
  v20[1] = loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:);
  uint64_t v21 = v0[14];
  return v33(v21);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char isUniquelyReferenced_nonNull_native;
  void (*v8)(uint64_t, uint64_t);
  char v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  void *v12;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v1 = (void *)v0[22];
  if (v1)
  {
    char v2 = v0[20];
    uint64_t v4 = v0[17];
    uint64_t v3 = v0[18];
    uint64_t v5 = v0[15];
    char v16 = (uint64_t *)(v0[16] + 16);
    BOOL v14 = *(void (**)(uint64_t))(v3 + 16);
    uint64_t v15 = v0[14];
    v14(v2);
    swift_beginAccess();
    uint64_t v6 = v1;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *(void *)(v5 + 16);
    *(void *)(v5 + 16) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v6, v2, isUniquelyReferenced_nonNull_native);
    *(void *)(v5 + 16) = v17;
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v8(v2, v4);
    swift_endAccess();
    ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v2, v15, v4);
    swift_beginAccess();
    uint64_t v9 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v18 = *v16;
    char *v16 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, v2, v9);
    char *v16 = v18;
    swift_bridgeObjectRelease();
    v8(v2, v4);
    swift_endAccess();
  }
  else
  {
    char v11 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, MEMORY[0x263F32D80]);
    swift_allocError();
    *unint64_t v12 = 0x4620464450206F4ELL;
    v12[1] = 0xEB00000000656C69;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, *MEMORY[0x263F32D70], v11);
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:), 0, 0);
}

uint64_t specialized Sequence.max(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
  MEMORY[0x270FA5388](v53);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v45 - v8;
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)&v45 - v11;
  v15.n128_f64[0] = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v48 = a1 + 64;
  char v19 = *(unsigned char *)(a1 + 32);
  uint64_t v20 = 1 << v19;
  uint64_t v21 = -1;
  if (1 << v19 < 64) {
    uint64_t v21 = ~(-1 << (1 << v19));
  }
  unint64_t v22 = v21 & v18;
  if (v22)
  {
    uint64_t v45 = v14;
    uint64_t v46 = a2;
    uint64_t v47 = v2;
    uint64_t v23 = 0;
    unint64_t v24 = __clz(__rbit64(v22));
    unint64_t v25 = (v22 - 1) & v22;
    int64_t v49 = (unint64_t)(v20 + 63) >> 6;
    while (1)
    {
      uint64_t v26 = *(void *)(a1 + 48);
      uint64_t v27 = type metadata accessor for CRAsset();
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
      uint64_t v50 = *(void *)(v28 + 72);
      uint64_t v51 = v29;
      uint64_t v30 = v26 + v50 * v24;
      uint64_t v31 = v12;
      uint64_t v52 = v27;
      a2 = (uint64_t)v12;
      unint64_t v12 = (char *)(v28 + 16);
      ((void (*)(char *, uint64_t))v29)(v31, v30);
      *(void *)(a2 + *(int *)(v53 + 48)) = *(void *)(*(void *)(a1 + 56) + 8 * v24);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a2, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
      swift_bridgeObjectRetain();
      while (v25)
      {
        while (1)
        {
          unint64_t v33 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          unint64_t v34 = v33 | (v23 << 6);
LABEL_25:
          v51(v6, *(void *)(a1 + 48) + v34 * v50, v52);
          uint64_t v38 = *(void *)(*(void *)(a1 + 56) + 8 * v34);
          a2 = v53;
          *(void *)&v6[*(int *)(v53 + 48)] = v38;
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v6, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
          if (*(void *)&v17[*(int *)(a2 + 48)] < *(void *)&v9[*(int *)(a2 + 48)]) {
            break;
          }
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
          if (!v25) {
            goto LABEL_9;
          }
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v9, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
      }
LABEL_9:
      int64_t v35 = v23 + 1;
      if (__OFADD__(v23, 1))
      {
        __break(1u);
LABEL_39:
        if (v32 < 9) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56))(a2, 1, 1, v53, v15);
        }
        unint64_t v41 = *(void *)(a1 + 96);
        if (v41)
        {
          uint64_t v23 = 4;
          goto LABEL_32;
        }
        unint64_t v41 = *(void *)(a1 + 104);
        if (v41)
        {
          uint64_t v23 = 5;
          goto LABEL_32;
        }
      }
      else
      {
        if (v35 >= v49) {
          goto LABEL_28;
        }
        unint64_t v36 = *(void *)(v48 + 8 * v35);
        ++v23;
        if (v36) {
          goto LABEL_24;
        }
        uint64_t v23 = v35 + 1;
        if (v35 + 1 >= v49) {
          goto LABEL_28;
        }
        unint64_t v36 = *(void *)(v48 + 8 * v23);
        if (v36) {
          goto LABEL_24;
        }
        uint64_t v23 = v35 + 2;
        if (v35 + 2 >= v49) {
          goto LABEL_28;
        }
        unint64_t v36 = *(void *)(v48 + 8 * v23);
        if (v36) {
          goto LABEL_24;
        }
        uint64_t v23 = v35 + 3;
        if (v35 + 3 >= v49) {
          goto LABEL_28;
        }
        unint64_t v36 = *(void *)(v48 + 8 * v23);
        if (v36) {
          goto LABEL_24;
        }
        int64_t v37 = v35 + 4;
        if (v37 >= v49)
        {
LABEL_28:
          swift_release();
          uint64_t v39 = v46;
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v17, v46, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v39, 0, 1, v53);
        }
        unint64_t v36 = *(void *)(v48 + 8 * v37);
        if (v36)
        {
          uint64_t v23 = v37;
LABEL_24:
          unint64_t v25 = (v36 - 1) & v36;
          unint64_t v34 = __clz(__rbit64(v36)) + (v23 << 6);
          goto LABEL_25;
        }
        while (1)
        {
          uint64_t v23 = v37 + 1;
          if (__OFADD__(v37, 1)) {
            break;
          }
          if (v23 >= v49) {
            goto LABEL_28;
          }
          unint64_t v36 = *(void *)(v48 + 8 * v23);
          ++v37;
          if (v36) {
            goto LABEL_24;
          }
        }
        __break(1u);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 6;
      if (v49 > 6) {
        uint64_t v43 = v49;
      }
      uint64_t v44 = v43 - 6;
      do
      {
        if (v44 == v42) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56))(a2, 1, 1, v53, v15);
        }
        unint64_t v41 = *(void *)(a1 + 112 + 8 * v42++);
      }
      while (!v41);
      uint64_t v23 = v42 + 5;
LABEL_32:
      unint64_t v25 = (v41 - 1) & v41;
      unint64_t v24 = __clz(__rbit64(v41)) + (v23 << 6);
    }
  }
  unsigned int v32 = v19 & 0x3F;
  if (v32 > 6)
  {
    int64_t v49 = (unint64_t)(v20 + 63) >> 6;
    unint64_t v41 = *(void *)(a1 + 72);
    if (v41)
    {
      uint64_t v45 = v14;
      uint64_t v46 = a2;
      uint64_t v47 = v2;
      uint64_t v23 = 1;
      goto LABEL_32;
    }
    if (v32 >= 8)
    {
      unint64_t v41 = *(void *)(a1 + 80);
      uint64_t v46 = a2;
      uint64_t v47 = v2;
      uint64_t v45 = v14;
      if (v41)
      {
        uint64_t v23 = 2;
      }
      else
      {
        unint64_t v41 = *(void *)(a1 + 88);
        if (!v41) {
          goto LABEL_39;
        }
        uint64_t v23 = 3;
      }
      goto LABEL_32;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56))(a2, 1, 1, v53, v15);
}

id PaperDocument.update<A>(_:in:otherDocuments:use:)(char *a1, uint64_t a2, char *a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v334 = a6;
  uint64_t v333 = a5;
  v360 = a3;
  uint64_t v332 = a2;
  v356 = a1;
  uint64_t v331 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
  MEMORY[0x270FA5388](v331);
  v330 = (uint64_t *)((char *)&v277 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v329 = (uint64_t)&v277 - v10;
  uint64_t v288 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
  MEMORY[0x270FA5388](v288);
  v287 = (char *)&v277 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v347 = (char *)&v277 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
  MEMORY[0x270FA5388](v14 - 8);
  v284 = (char *)&v277 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v283 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
  MEMORY[0x270FA5388](v283);
  v285 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v277 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v17 - 8);
  v286 = (char *)&v277 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v335 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>);
  uint64_t v297 = *(void *)(v335 - 8);
  MEMORY[0x270FA5388](v335);
  v328 = (char *)&v277 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  v298 = (char *)&v277 - v21;
  uint64_t v303 = type metadata accessor for CRAsset();
  uint64_t v289 = *(void *)(v303 - 8);
  MEMORY[0x270FA5388](v303);
  v277 = (char *)&v277 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v278 = (char *)&v277 - v24;
  MEMORY[0x270FA5388](v25);
  v301 = (char *)&v277 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v300 = (uint64_t)&v277 - v28;
  uint64_t v312 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?));
  MEMORY[0x270FA5388](v312);
  uint64_t v311 = (uint64_t)&v277 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v357 = type metadata accessor for PDFPageID();
  uint64_t v294 = *(void *)(v357 - 8);
  MEMORY[0x270FA5388](v357);
  v310 = (Swift::UInt *)((char *)&v277 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v31);
  v295 = (char **)((char *)&v277 - v32);
  MEMORY[0x270FA5388](v33);
  v348 = (Swift::UInt *)((char *)&v277 - v34);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v313 = (uint64_t)&v277 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  uint64_t v307 = (uint64_t)&v277 - v38;
  MEMORY[0x270FA5388](v39);
  v302 = (char **)((char *)&v277 - v40);
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = (char *)&v277 - v42;
  MEMORY[0x270FA5388](v44);
  uint64_t v325 = (uint64_t)&v277 - v45;
  MEMORY[0x270FA5388](v46);
  v352 = (char **)((char *)&v277 - v47);
  MEMORY[0x270FA5388](v48);
  v354 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v277 - v49);
  v349 = (void (**)(void, void, void, void))__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v336 = (uint64_t)*(v349 - 1);
  MEMORY[0x270FA5388](v349);
  v317 = (char *)&v277 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v51);
  v319 = (char *)&v277 - v52;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v53 - 8);
  v350 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)&v277 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v338 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  uint64_t v282 = *(void *)(v338 - 8);
  MEMORY[0x270FA5388](v338);
  v337 = (char *)&v277 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v339 = type metadata accessor for CRKeyPath();
  uint64_t v279 = *(void *)(v339 - 8);
  MEMORY[0x270FA5388](v339);
  v299 = (char *)&v277 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v57);
  v326 = (char *)&v277 - v58;
  MEMORY[0x270FA5388](v59);
  v323 = (char *)&v277 - v60;
  uint64_t v61 = type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  uint64_t v351 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v327 = (uint64_t)&v277 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v63);
  uint64_t v314 = (uint64_t)&v277 - v64;
  MEMORY[0x270FA5388](v65);
  v346 = (void (**)(char *, char *, uint64_t))((char *)&v277 - v66);
  MEMORY[0x270FA5388](v67);
  v345 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v277 - v68);
  MEMORY[0x270FA5388](v69);
  v344 = (char *)&v277 - v70;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v71 - 8);
  v343 = (void (**)(uint64_t, uint64_t))((char *)&v277 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v293 = *(void *)(v73 - 8);
  MEMORY[0x270FA5388](v73);
  v308 = (char *)&v277 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v75);
  v342 = (void (*)(uint64_t, uint64_t))((char *)&v277 - v76);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v77 - 8);
  v309 = (char *)&v277 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v79);
  uint64_t v296 = (uint64_t)&v277 - v80;
  MEMORY[0x270FA5388](v81);
  v305 = (char *)&v277 - v82;
  MEMORY[0x270FA5388](v83);
  uint64_t v324 = (uint64_t)&v277 - v84;
  MEMORY[0x270FA5388](v85);
  v322 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v277 - v86);
  MEMORY[0x270FA5388](v87);
  uint64_t v89 = (char *)&v277 - v88;
  uint64_t v359 = type metadata accessor for PageId(0);
  uint64_t v292 = *(void *)(v359 - 8);
  MEMORY[0x270FA5388](v359);
  __C::CGRect v91 = (char *)&v277 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v93 = *(void *)(v92 - 8);
  double v94 = MEMORY[0x270FA5388](v92);
  char v96 = (Swift::UInt *)((char *)&v277 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v306 = *a4;
  unint64_t v97 = v6;
  (*(void (**)(Swift::UInt *, void (**)(uint64_t, uint64_t), uint64_t, double))(v93 + 16))(v96, v6, v92, v94);
  uint64_t v361 = v333;
  uint64_t v362 = v334;
  uint64_t v363 = v332;
  uint64_t v355 = v61;
  char v98 = v96;
  uint64_t v99 = 0;
  uint64_t v281 = CROrderedSet.map<A>(_:)();
  uint64_t v100 = *(void (**)(Swift::UInt *, uint64_t))(v93 + 8);
  v291 = (void (**)(char *, char *, uint64_t))v92;
  v100(v96, v92);
  v369 = v360;
  BOOL v101 = v356;
  swift_bridgeObjectRetain();
  uint64_t v102 = (uint64_t)objc_msgSend(v101, sel_pageCount);
  if (v102 < 0)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  char v98 = (Swift::UInt *)v102;
  uint64_t v358 = v73;
  v318 = v43;
  v290 = v97;
  if (!v102)
  {
    uint64_t v104 = (char *)MEMORY[0x263F8EE78];
LABEL_26:
    uint64_t v368 = MEMORY[0x263F8EE88];
    CROrderedSet.makeIterator()();
    v344 = &v356[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
    swift_beginAccess();
    v127 = v350;
    CROrderedSet.Iterator.next()();
    uint64_t v128 = v336;
    v129 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v336 + 48);
    uint64_t v130 = v349;
    v341 = (Swift::UInt *)(v336 + 48);
    v340 = v129;
    if (((unsigned int (*)(void, void, void))v129)(v127, 1, v349) == 1)
    {
      uint64_t v131 = (uint64_t)v347;
LABEL_28:
      (*(void (**)(char *, uint64_t))(v282 + 8))(v337, v338);
      uint64_t v364 = v281;
      v367 = v104;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PaperDocument.PDFPageAndPaperPage]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [PaperDocument.PDFPageAndPaperPage] and conformance [A], &demangling cache variable for type metadata for [PaperDocument.PDFPageAndPaperPage]);
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument.PDFPageAndPaperPage and conformance PaperDocument.PDFPageAndPaperPage, (void (*)(uint64_t))type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      uint64_t v132 = v298;
      BidirectionalCollection<>.difference<A>(from:)();
      swift_bridgeObjectRelease();
      uint64_t v133 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v297 + 16);
      uint64_t v134 = *(char ***)(v297 + 16);
      uint64_t v135 = (uint64_t)v284;
      uint64_t v136 = v335;
      ((void (*)(char *, char *, uint64_t))v134)(v284, v132, v335);
      uint64_t v137 = v285;
      v353 = v133;
      v352 = v134;
      ((void (*)(void (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))v134)(v285, v135, v136);
      uint64_t v138 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v137
                                                                      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>)
                                                                               + 44));
      *uint64_t v138 = closure #3 in PaperDocument.update<A>(_:in:otherDocuments:use:);
      v138[1] = 0;
      v139 = (BOOL (**)(uint64_t))((char *)v137
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>)
                                                    + 36));
      *v139 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      v139[1] = 0;
      uint64_t v140 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v137 + *(int *)(v283 + 44));
      *uint64_t v140 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      v140[1] = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?(v135, &demangling cache variable for type metadata for LazySequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
      uint64_t v141 = v356;
      uint64_t v142 = v286;
      v360 = v141;
      specialized Sequence.first(where:)(v137, (uint64_t *)&v369, v141, v286);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v137, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
      swift_bridgeObjectRelease();
      uint64_t v143 = v289;
      uint64_t v144 = v303;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v289 + 48))(v142, 1, v303) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v142, &demangling cache variable for type metadata for CRAsset?);
LABEL_87:
        uint64_t v232 = (uint64_t)v287;
        uint64_t v233 = (void (*)(char *, uint64_t, uint64_t))v352;
        ((void (*)(char *, char *, uint64_t))v352)(v287, v298, v136);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CollectionDifference<PaperDocument.PDFPageAndPaperPage> and conformance CollectionDifference<A>, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>);
        dispatch thunk of Collection.startIndex.getter();
        uint64_t v234 = v288;
        *(void *)(v232 + *(int *)(v288 + 36)) = v364;
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v232, v131, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
        uint64_t v235 = (uint64_t *)(v131 + *(int *)(v234 + 36));
        uint64_t v236 = *v235;
        dispatch thunk of Collection.endIndex.getter();
        uint64_t v237 = v136;
        unint64_t v238 = v306;
        if (v236 == v364)
        {
LABEL_89:
          outlined destroy of StocksKitCurrencyCache.Provider?(v131, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
          (*(void (**)(char *, uint64_t))(v297 + 8))(v298, v237);
          uint64_t v239 = v368;
          swift_bridgeObjectRelease();
          return (id)v239;
        }
        uint64_t v240 = v233;
        v356 = (char *)(v297 + 8);
        v354 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v294 + 48);
        uint64_t v351 = v294 + 56;
        v350 = (void (**)(uint64_t, uint64_t, uint64_t))(v293 + 16);
        v349 = (void (**)(void, void, void, void))(v293 + 56);
        v348 = (Swift::UInt *)(v292 + 56);
        v346 = (void (**)(char *, char *, uint64_t))(v143 + 16);
        v345 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v143 + 8);
        while (1)
        {
          v242 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v243 = v329;
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v244, v329, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
          v242(&v364, 0);
          v245 = v328;
          v240(v328, v131, v237);
          dispatch thunk of Collection.formIndex(after:)();
          (*(void (**)(char *, uint64_t))v356)(v245, v237);
          uint64_t v246 = v330;
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v243, (uint64_t)v330, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v248 = *v246;
          uint64_t v249 = (uint64_t)v246
               + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: PaperDocument.PDFPageAndPaperPage, associatedWith: Int?))
                        + 48);
          if (EnumCaseMultiPayload != 1) {
            break;
          }
          objc_msgSend(v360, sel_removePageAtIndex_, v248);
LABEL_91:
          outlined destroy of PDFPageID(v249, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
          uint64_t v241 = *v235;
          uint64_t v237 = v335;
          dispatch thunk of Collection.endIndex.getter();
          if (v241 == v364) {
            goto LABEL_89;
          }
        }
        uint64_t v250 = v249;
        uint64_t v251 = v327;
        _s8PaperKit0A8DocumentVWObTm_0(v250, v327, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
        uint64_t v252 = v313;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v251, v313, &demangling cache variable for type metadata for PDFPageID?);
        if ((*v354)(v252, 1, v357) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v252, &demangling cache variable for type metadata for PDFPageID?);
          if (v238 == 0x8000000000000000)
          {
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            type metadata accessor for PaperKitPDFPage(0);
            if (one-time initialization token for blankPageImage != -1) {
              swift_once();
            }
            id result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithImage_, static PaperKitPDFPage.blankPageImage);
            uint64_t v131 = (uint64_t)v347;
            if (!result) {
              goto LABEL_123;
            }
          }
          else
          {
            outlined copy of PaperDocument.PDFDocumentUse(v238);
            outlined consume of PaperDocument.PDFDocumentUse(v238);
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFPage(0)), sel_init);
          }
          uint64_t v259 = one-time initialization token for defaultPageBounds;
          long long v257 = (char *)result;
          if (v259 != -1) {
            swift_once();
          }
          objc_msgSend(v257, sel_setBounds_forBox_, 0, *(double *)&static UIConstants.defaultPageBounds, *(double *)algn_2676E9718, xmmword_2676E9720);
          uint64_t v260 = (uint64_t)v309;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v351)(v309, 1, 1, v357);
          uint64_t v261 = v359;
          uint64_t v262 = v260 + *(int *)(v359 + 20);
          uint64_t v258 = v327;
          uint64_t v263 = v358;
          (*v350)(v262, v327 + *(int *)(v355 + 20), v358);
          (*v349)(v262, 0, 1, v263);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))*v348)(v260, 0, 1, v261);
          uint64_t v264 = (uint64_t)&v257[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
          swift_beginAccess();
          outlined assign with take of Date?(v260, v264, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          swift_endAccess();

          unint64_t v238 = v306;
        }
        else
        {
          uint64_t v253 = v252;
          long long v254 = v310;
          _s8PaperKit0A8DocumentVWObTm_0(v253, (uint64_t)v310, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          uint64_t v255 = v251 + *(int *)(v355 + 20);
          v256 = specialized closure #2 in PaperDocument.update<A>(_:in:otherDocuments:use:)(v254, v255, v360, (uint64_t *)&v369);
          if (v256)
          {
            long long v257 = v256;
            outlined destroy of PDFPageID((uint64_t)v254, (uint64_t (*)(void))type metadata accessor for PDFPageID);
            uint64_t v258 = v327;
LABEL_115:
            objc_msgSend(v360, sel_insertPage_atIndex_, v257, v248);

            uint64_t v249 = v258;
            goto LABEL_91;
          }
          if (v238 == 0x8000000000000000)
          {
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            type metadata accessor for PaperKitPDFPage(0);
            if (one-time initialization token for blankPageImage != -1) {
              swift_once();
            }
            id result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithImage_, static PaperKitPDFPage.blankPageImage);
            if (!result) {
              goto LABEL_124;
            }
          }
          else
          {
            outlined copy of PaperDocument.PDFDocumentUse(v238);
            outlined consume of PaperDocument.PDFDocumentUse(v238);
            outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
            id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFPage(0)), sel_init);
          }
          uint64_t v265 = one-time initialization token for defaultPageBounds;
          long long v257 = (char *)result;
          if (v265 != -1) {
            swift_once();
          }
          objc_msgSend(v257, sel_setBounds_forBox_, 0, *(double *)&static UIConstants.defaultPageBounds, *(double *)algn_2676E9718, xmmword_2676E9720);
          uint64_t v266 = (uint64_t)v309;
          uint64_t v267 = v357;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v351)(v309, 1, 1, v357);
          uint64_t v268 = v359;
          uint64_t v269 = v266 + *(int *)(v359 + 20);
          uint64_t v270 = v255;
          uint64_t v271 = v358;
          (*v350)(v269, v270, v358);
          (*v349)(v269, 0, 1, v271);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))*v348)(v266, 0, 1, v268);
          uint64_t v272 = (uint64_t)&v257[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
          swift_beginAccess();
          outlined assign with take of Date?(v266, v272, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          swift_endAccess();

          char v273 = (char *)v310 + *(int *)(v267 + 20);
          uint64_t v274 = v301;
          uint64_t v275 = v303;
          (*v346)(v301, v273, v303);
          uint64_t v276 = v300;
          specialized Set._Variant.insert(_:)(v300, v274);
          ((void (*)(uint64_t, uint64_t))*v345)(v276, v275);
          outlined destroy of PDFPageID((uint64_t)v310, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          uint64_t v131 = (uint64_t)v347;
          uint64_t v258 = v327;
        }
        uint64_t v240 = (void (*)(char *, uint64_t, uint64_t))v352;
        goto LABEL_115;
      }
      uint64_t v222 = (uint64_t)v278;
      (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v278, v142, v144);
      uint64_t v223 = (uint64_t)v277;
      (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v277, v222, v144);
      swift_beginAccess();
      v224 = v369;
      if (*((void *)v369 + 2) && (unint64_t v225 = specialized __RawDictionaryStorage.find<A>(_:)(v222), (v226 & 1) != 0))
      {
        id v227 = *(void **)(*((void *)v224 + 7) + 8 * v225);
        swift_endAccess();
        objc_msgSend(v227, sel_copy);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        type metadata accessor for PaperKitPDFDocument();
        if (swift_dynamicCast())
        {
          uint64_t v228 = (uint64_t)v367;
          swift_beginAccess();
          if (v228)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v367 = v369;
            v369 = (char *)0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v228, v223, isUniquelyReferenced_nonNull_native);
            v369 = v367;
            swift_bridgeObjectRelease();
            uint64_t v230 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
            v230(v223, v144);
LABEL_86:
            swift_endAccess();
            v230(v222, v144);
            goto LABEL_87;
          }
LABEL_85:
          __int16 v231 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v223);
          uint64_t v230 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
          v230(v223, v144);

          goto LABEL_86;
        }
      }
      else
      {
        swift_endAccess();
      }
      swift_beginAccess();
      goto LABEL_85;
    }
    unint64_t v146 = *(char **)(v128 + 32);
    uint64_t v145 = v128 + 32;
    v323 = v146;
    v353 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v292 + 48);
    v345 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v294 + 56);
    v280 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v293 + 56);
    v322 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v292 + 56);
    v343 = (void (**)(uint64_t, uint64_t))(v279 + 8);
    v321 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v294 + 48);
    v316 = (void (**)(char *, uint64_t))(v145 - 16);
    v304 = (void (**)(uint64_t, uint64_t))(v293 + 8);
    v291 = (void (**)(char *, char *, uint64_t))(v289 + 16);
    v290 = (void (**)(uint64_t, uint64_t))(v289 + 8);
    v320 = (void (**)(void, void))(v145 - 24);
    uint64_t v147 = v359;
    uint64_t v89 = (char *)v354;
    __C::CGRect v91 = v319;
    uint64_t v336 = v145;
    ((void (*)(char *, void, void (**)(void, void, void, void)))v146)(v319, v127, v130);
    while (1)
    {
      uint64_t v150 = (uint64_t)v326;
      MEMORY[0x21054BD50](v130);
      uint64_t v151 = *(void *)v344;
      uint64_t v152 = *(void *)(*(void *)v344 + 16);
      v360 = v104;
      if (!v152) {
        goto LABEL_43;
      }
      swift_bridgeObjectRetain();
      unint64_t v153 = specialized __RawDictionaryStorage.find<A>(_:)(v150);
      if ((v154 & 1) == 0) {
        break;
      }
      v155 = *(char **)(*(void *)(v151 + 56) + 8 * v153);
      uint64_t v156 = swift_bridgeObjectRelease();
      if (one-time initialization token for lock != -1) {
        uint64_t v156 = swift_once();
      }
      MEMORY[0x270FA5388](v156);
      v157 = v356;
      *(&v277 - 2) = v356;
      *(&v277 - 1) = v155;
      MEMORY[0x270FA5388](v158);
      *(&v277 - 2) = (char *)closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
      *(&v277 - 1) = v159;
      uint64_t v161 = v160 + 4;
      os_unfair_lock_lock(v160 + 4);
      uint64_t v162 = (uint64_t)v305;
      closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v163);
      os_unfair_lock_unlock(v161);
      uint64_t v164 = *v353;
      if ((*v353)(v162, 1, v147) == 1)
      {
        v346 = v99;
        outlined destroy of StocksKitCurrencyCache.Provider?(v162, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        id result = objc_msgSend(v157, sel_pageAtIndex_, v155);
        uint64_t v165 = v358;
        if (!result) {
          goto LABEL_122;
        }
        uint64_t v166 = result;
        type metadata accessor for PaperKitPDFPage(0);
        uint64_t v167 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
        swift_beginAccess();
        uint64_t v168 = v167;
        uint64_t v169 = v296;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v168, v296, (uint64_t *)&demangling cache variable for type metadata for PageId?);

        if (v164(v169, 1, v147) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v169, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          uint64_t v170 = v324;
          (*v345)(v324, 1, 1, v357);
          (*v280)(v170 + *(int *)(v147 + 20), 1, 1, v165);
        }
        else
        {
          uint64_t v195 = v169;
          uint64_t v170 = v324;
          _s8PaperKit0A8DocumentVWObTm_0(v195, v324, type metadata accessor for PageId);
        }
        uint64_t v171 = 0;
        uint64_t v89 = (char *)v354;
        uint64_t v130 = v349;
        uint64_t v99 = v346;
      }
      else
      {
        uint64_t v170 = v324;
        _s8PaperKit0A8DocumentVWObTm_0(v162, v324, type metadata accessor for PageId);
        uint64_t v171 = 0;
        uint64_t v89 = (char *)v354;
        uint64_t v130 = v349;
      }
LABEL_44:
      (*v322)(v170, v171, 1, v147);
      v342 = *v343;
      v342(v150, v339);
      if ((*v353)(v170, 1, v147) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v170, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        uint64_t v172 = v357;
        (*v345)((uint64_t)v89, 1, 1, v357);
      }
      else
      {
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v170, (uint64_t)v89, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PDFPageID(v170, type metadata accessor for PageId);
        uint64_t v172 = v357;
      }
      SharedTagged_3.subscript.getter();
      uint64_t v173 = v91;
      int v174 = v130;
      uint64_t v175 = v365;
      uint64_t v176 = v366;
      __swift_project_boxed_opaque_existential_1(&v364, v365);
      uint64_t v177 = v175;
      uint64_t v178 = (void (*)(void, void, void))v352;
      (*(void (**)(uint64_t, uint64_t))(v176 + 88))(v177, v176);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v364);
      uint64_t v179 = v325;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v178, v325, &demangling cache variable for type metadata for PDFPageID?);
      unint64_t v180 = *v321;
      if ((*v321)(v179, 1, v172) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v178, &demangling cache variable for type metadata for PDFPageID?);
        uint64_t v148 = v179;
        uint64_t v89 = (char *)v354;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v354, &demangling cache variable for type metadata for PDFPageID?);
        (*v320)(v173, v174);
        outlined destroy of StocksKitCurrencyCache.Provider?(v148, &demangling cache variable for type metadata for PDFPageID?);
        uint64_t v131 = (uint64_t)v347;
        uint64_t v130 = v174;
        __C::CGRect v91 = v173;
        v149 = v350;
        uint64_t v104 = v360;
        goto LABEL_32;
      }
      v346 = v99;
      uint64_t v181 = v348;
      _s8PaperKit0A8DocumentVWObTm_0(v179, (uint64_t)v348, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      uint64_t v182 = (uint64_t)v318;
      outlined init with copy of PDFPageID((uint64_t)v181, (uint64_t)v318, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      v315 = *v345;
      v315(v182, 0, 1, v172);
      uint64_t v183 = v311;
      uint64_t v184 = v311 + *(int *)(v312 + 48);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v182, v311, &demangling cache variable for type metadata for PDFPageID?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v354, v184, &demangling cache variable for type metadata for PDFPageID?);
      uint64_t v185 = v172;
      if (v180(v183, 1, v172) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v182, &demangling cache variable for type metadata for PDFPageID?);
        int v186 = v180(v184, 1, v172);
        uint64_t v187 = &demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
        __C::CGRect v91 = v319;
        v149 = v350;
        uint64_t v104 = v360;
        if (v186 == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v183, &demangling cache variable for type metadata for PDFPageID?);
LABEL_51:
          outlined destroy of PDFPageID((uint64_t)v348, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v352, &demangling cache variable for type metadata for PDFPageID?);
          uint64_t v89 = (char *)v354;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v354, &demangling cache variable for type metadata for PDFPageID?);
          uint64_t v130 = v349;
          (*v320)(v91, v349);
          uint64_t v131 = (uint64_t)v347;
          uint64_t v147 = v359;
LABEL_77:
          uint64_t v99 = v346;
          goto LABEL_32;
        }
        goto LABEL_61;
      }
      uint64_t v188 = v302;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v183, (uint64_t)v302, &demangling cache variable for type metadata for PDFPageID?);
      int v189 = v180(v184, 1, v185);
      uint64_t v187 = &demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
      __C::CGRect v91 = v319;
      v149 = v350;
      uint64_t v104 = v360;
      if (v189 == 1) {
        goto LABEL_60;
      }
      uint64_t v190 = v184;
      unint64_t v191 = v295;
      _s8PaperKit0A8DocumentVWObTm_0(v190, (uint64_t)v295, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      if (*v188 != *v191)
      {
        outlined destroy of PDFPageID((uint64_t)v191, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        uint64_t v187 = &demangling cache variable for type metadata for PDFPageID?;
LABEL_60:
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v318, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PDFPageID((uint64_t)v188, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_61:
        outlined destroy of StocksKitCurrencyCache.Provider?(v183, v187);
        goto LABEL_62;
      }
      char v192 = static CRAsset.== infix(_:_:)();
      uint64_t v193 = (uint64_t)v191;
      char v194 = v192;
      outlined destroy of PDFPageID(v193, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v318, &demangling cache variable for type metadata for PDFPageID?);
      __C::CGRect v91 = v319;
      outlined destroy of PDFPageID((uint64_t)v188, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v183, &demangling cache variable for type metadata for PDFPageID?);
      if (v194) {
        goto LABEL_51;
      }
LABEL_62:
      unint64_t v196 = (unint64_t)v104;
      uint64_t v197 = *v316;
      uint64_t v198 = v91;
      uint64_t v199 = v91;
      v200 = v349;
      ((void (*)(char *, char *, void (**)(void, void, void, void)))*v316)(v317, v198, v349);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      uint64_t v201 = (uint64_t)v308;
      WeakTagged_3.init(_:)();
      uint64_t v202 = v348;
      uint64_t v203 = specialized closure #2 in PaperDocument.update<A>(_:in:otherDocuments:use:)(v348, v201, v356, (uint64_t *)&v369);
      (*v304)(v201, v358);
      if (!v203)
      {
        uint64_t v212 = v301;
        uint64_t v213 = v303;
        (*v291)(v301, (char *)v202 + *(int *)(v357 + 20), v303);
        uint64_t v214 = v300;
        specialized Set._Variant.insert(_:)(v300, v212);
        (*v290)(v214, v213);
        uint64_t v206 = v199;
        uint64_t v207 = v314;
        goto LABEL_70;
      }
      uint64_t v204 = (uint64_t)v299;
      MEMORY[0x21054BD50](v200);
      uint64_t v205 = *(void *)v344;
      uint64_t v206 = v199;
      uint64_t v207 = v314;
      if (!*(void *)(*(void *)v344 + 16)) {
        goto LABEL_68;
      }
      swift_bridgeObjectRetain();
      unint64_t v208 = specialized __RawDictionaryStorage.find<A>(_:)(v204);
      if ((v209 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_68:
        v342(v204, v339);
        goto LABEL_69;
      }
      uint64_t v210 = *(void *)(*(void *)(v205 + 56) + 8 * v208);
      swift_bridgeObjectRelease();
      v342(v204, v339);
      uint64_t v211 = v356;
      objc_msgSend(v356, sel_removePageAtIndex_, v210);
      objc_msgSend(v211, sel_insertPage_atIndex_, v203, v210);
LABEL_69:

LABEL_70:
      uint64_t v89 = (char *)v354;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v354, v207, &demangling cache variable for type metadata for PDFPageID?);
      uint64_t v215 = v206;
      uint64_t v216 = v206;
      v217 = v349;
      ((void (*)(char *, char *, void (**)(void, void, void, void)))v197)(v317, v215, v349);
      WeakTagged_3.init(_:)();
      uint64_t v104 = (char *)v196;
      swift_bridgeObjectRetain();
      unint64_t v218 = specialized Collection<>.firstIndex(of:)(v207, v196);
      char v220 = v219;
      swift_bridgeObjectRelease();
      uint64_t v131 = (uint64_t)v347;
      if (v220)
      {
        outlined destroy of PDFPageID(v207, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
        outlined destroy of PDFPageID((uint64_t)v348, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v352, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v89, &demangling cache variable for type metadata for PDFPageID?);
        (*v320)(v216, v217);
        uint64_t v147 = v359;
        uint64_t v130 = v217;
        __C::CGRect v91 = v216;
        v149 = v350;
        goto LABEL_77;
      }
      char v98 = v348;
      uint64_t v221 = v307;
      outlined init with copy of PDFPageID((uint64_t)v348, v307, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      v315(v221, 0, 1, v357);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v104 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v196);
      }
      __C::CGRect v91 = v319;
      v149 = v350;
      uint64_t v147 = v359;
      uint64_t v89 = (char *)v354;
      uint64_t v99 = v346;
      if ((v218 & 0x8000000000000000) != 0) {
        goto LABEL_117;
      }
      if (v218 >= *((void *)v104 + 2)) {
        goto LABEL_118;
      }
      outlined assign with take of Date?(v307, (uint64_t)&v104[((*(unsigned __int8 *)(v351 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v351 + 80))+ *(void *)(v351 + 72) * v218], &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of PDFPageID(v314, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      outlined destroy of PDFPageID((uint64_t)v98, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v352, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v89, &demangling cache variable for type metadata for PDFPageID?);
      uint64_t v130 = v349;
      (*v320)(v91, v349);
LABEL_32:
      CROrderedSet.Iterator.next()();
      if (((unsigned int (*)(void, void, void))v340)(v149, 1, v130) == 1) {
        goto LABEL_28;
      }
      ((void (*)(char *, void, void (**)(void, void, void, void)))v323)(v91, v149, v130);
    }
    swift_bridgeObjectRelease();
LABEL_43:
    uint64_t v171 = 1;
    uint64_t v170 = v324;
    goto LABEL_44;
  }
  if (one-time initialization token for lock != -1) {
LABEL_120:
  }
    uint64_t v102 = swift_once();
  uint64_t v103 = 0;
  v353 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v292 + 48);
  v315 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v294 + 56);
  v304 = (void (**)(uint64_t, uint64_t))(v293 + 56);
  v340 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v293 + 48);
  v321 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v293 + 32);
  v320 = (void (**)(void, void))(v293 + 16);
  uint64_t v104 = (char *)MEMORY[0x263F8EE78];
  v316 = (void (**)(char *, uint64_t))(v293 + 8);
  v341 = v98;
  while (1)
  {
    if (v98 == v103)
    {
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    v360 = v104;
    MEMORY[0x270FA5388](v102);
    v105 = v356;
    *(&v277 - 2) = v356;
    *(&v277 - 1) = (char *)v103;
    MEMORY[0x270FA5388](v106);
    *(&v277 - 2) = (char *)partial apply for closure #1 in PaperKitPDFDocument.subscript.getter;
    *(&v277 - 1) = v107;
    uint64_t v109 = v108 + 4;
    os_unfair_lock_lock(v108 + 4);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v110);
    os_unfair_lock_unlock(v109);
    uint64_t v111 = *v353;
    if ((*v353)((uint64_t)v89, 1, v359) == 1) {
      break;
    }
    _s8PaperKit0A8DocumentVWObTm_0((uint64_t)v89, (uint64_t)v91, type metadata accessor for PageId);
    uint64_t v120 = v358;
    uint64_t v104 = v360;
    uint64_t v118 = (uint64_t)v343;
LABEL_15:
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v91[*(int *)(v359 + 20)], v118, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if ((*v340)(v118, 1, v120) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v118, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v91, (uint64_t)v346, &demangling cache variable for type metadata for PDFPageID?);
      LOBYTE(v364) = 2;
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:id:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v104 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v104 + 2) + 1, 1, (unint64_t)v104);
      }
      unint64_t v122 = *((void *)v104 + 2);
      unint64_t v121 = *((void *)v104 + 3);
      if (v122 >= v121 >> 1) {
        uint64_t v104 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v121 > 1, v122 + 1, 1, (unint64_t)v104);
      }
      *((void *)v104 + 2) = v122 + 1;
      _s8PaperKit0A8DocumentVWObTm_0((uint64_t)v346, (uint64_t)&v104[((*(unsigned __int8 *)(v351 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v351 + 80))+ *(void *)(v351 + 72) * v122], type metadata accessor for PaperDocument.PDFPageAndPaperPage);
    }
    else
    {
      uint64_t v123 = v342;
      (*v321)((uint64_t)v342, v118, v120);
      uint64_t v124 = v344;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v91, (uint64_t)v344, &demangling cache variable for type metadata for PDFPageID?);
      ((void (*)(char *, void (*)(uint64_t, uint64_t), uint64_t))*v320)(&v124[*(int *)(v355 + 20)], v123, v120);
      outlined init with copy of PDFPageID((uint64_t)v124, (uint64_t)v345, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v104 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v104 + 2) + 1, 1, (unint64_t)v104);
      }
      unint64_t v126 = *((void *)v104 + 2);
      unint64_t v125 = *((void *)v104 + 3);
      if (v126 >= v125 >> 1) {
        uint64_t v104 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v125 > 1, v126 + 1, 1, (unint64_t)v104);
      }
      *((void *)v104 + 2) = v126 + 1;
      _s8PaperKit0A8DocumentVWObTm_0((uint64_t)v345, (uint64_t)&v104[((*(unsigned __int8 *)(v351 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v351 + 80))+ *(void *)(v351 + 72) * v126], type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      outlined destroy of PDFPageID((uint64_t)v344, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      (*v316)((char *)v342, v358);
    }
    uint64_t v103 = (Swift::UInt *)((char *)v103 + 1);
    uint64_t v102 = outlined destroy of PDFPageID((uint64_t)v91, type metadata accessor for PageId);
    char v98 = v341;
    if (v341 == v103) {
      goto LABEL_26;
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  id result = objc_msgSend(v105, sel_pageAtIndex_, v103);
  if (result)
  {
    v113 = result;
    type metadata accessor for PaperKitPDFPage(0);
    uint64_t v114 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    char v115 = v322;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v114, (uint64_t)v322, (uint64_t *)&demangling cache variable for type metadata for PageId?);

    uint64_t v116 = v359;
    unsigned int v117 = v111((uint64_t)v115, 1, v359);
    uint64_t v118 = (uint64_t)v343;
    if (v117 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v115, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v315)(v91, 1, 1, v357);
      uint64_t v119 = &v91[*(int *)(v116 + 20)];
      uint64_t v120 = v358;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v304)(v119, 1, 1, v358);
    }
    else
    {
      _s8PaperKit0A8DocumentVWObTm_0((uint64_t)v115, (uint64_t)v91, type metadata accessor for PageId);
      uint64_t v120 = v358;
    }
    uint64_t v104 = v360;
    goto LABEL_15;
  }
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
  return result;
}

uint64_t PaperDocument.PDFPageAndPaperPage.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PDFPageID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v1, (uint64_t)v4, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for PDFPageID?);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v9._object = (void *)0x800000020C85A010;
    v9._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v9);
    type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    _print_unlocked<A, B>(_:_:)();
    v10._uint64_t countAndFlagsBits = 125;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    return v25;
  }
  else
  {
    _s8PaperKit0A8DocumentVWObTm_0((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    v12._uint64_t countAndFlagsBits = 0x3A6664707BLL;
    v12._object = (void *)0xE500000000000000;
    String.append(_:)(v12);
    v24._uint64_t countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 979857531;
    v24._object = (void *)0xE400000000000000;
    v23[1] = *v8;
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 0x3A7465737361202CLL;
    v14._object = (void *)0xE800000000000000;
    String.append(_:)(v14);
    uint64_t v15 = CRAsset.digest.getter();
    unint64_t v17 = v16;
    Swift::String v18 = Data.base64EncodedString(options:)(0);
    outlined consume of Data._Representation(v15, v17);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 125;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0x3A7265706170202CLL;
    v20._object = (void *)0xE800000000000000;
    String.append(_:)(v20);
    type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    _print_unlocked<A, B>(_:_:)();
    v21._uint64_t countAndFlagsBits = 125;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    uint64_t v11 = v25;
    outlined destroy of PDFPageID((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  }
  return v11;
}

Swift::Int PaperDocument.PDFPageAndPaperPage.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PDFPageID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (Swift::UInt *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v1, (uint64_t)v8, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    _s8PaperKit0A8DocumentVWObTm_0((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*v5);
    type metadata accessor for CRAsset();
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of PDFPageID((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  }
  type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PaperDocument.PDFPageAndPaperPage()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PDFPageID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (Swift::UInt *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v1, (uint64_t)v8, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    _s8PaperKit0A8DocumentVWObTm_0((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*v5);
    type metadata accessor for CRAsset();
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of PDFPageID((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PaperDocument.PDFPageAndPaperPage()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PDFPageID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (Swift::UInt *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v1, (uint64_t)v8, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    _s8PaperKit0A8DocumentVWObTm_0((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*v5);
    type metadata accessor for CRAsset();
    lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of PDFPageID((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  SharedTagged_3.subscript.getter();
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 88))(v6, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

char *specialized closure #2 in PaperDocument.update<A>(_:in:otherDocuments:use:)(Swift::UInt *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  BOOL v101 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v97 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v92 = (char *)&v88 - v10;
  uint64_t v11 = type metadata accessor for PDFPageID();
  uint64_t v100 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v90 = (uint64_t *)((char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?));
  MEMORY[0x270FA5388](v93);
  double v94 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v14 - 8);
  unint64_t v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v96 = (uint64_t)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  __C::CGRect v91 = (uint64_t *)((char *)&v88 - v20);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v88 - v22;
  MEMORY[0x270FA5388](v24);
  uint64_t v95 = (uint64_t)&v88 - v25;
  uint64_t v26 = type metadata accessor for CRKeyPath();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  MEMORY[0x21054B930]();
  uint64_t v102 = a3;
  uint64_t v30 = &a3[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
  swift_beginAccess();
  uint64_t v31 = *(void *)v30;
  uint64_t v32 = *(void *)(v31 + 16);
  uint64_t v99 = a2;
  if (!v32) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29);
  if ((v34 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    uint64_t v37 = a1;
    goto LABEL_9;
  }
  uint64_t v35 = *(void *)(*(void *)(v31 + 56) + 8 * v33);
  swift_bridgeObjectRelease();
  id v36 = objc_msgSend(v102, sel_pageAtIndex_, v35);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  uint64_t v37 = a1;
  if (v36)
  {
    type metadata accessor for PaperKitPDFPage(0);
    uint64_t v38 = swift_dynamicCastClass();
    if (v38)
    {
      uint64_t v39 = (char *)v38;
      id v89 = v36;
      uint64_t v40 = v38 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v40, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for PageId?);
      uint64_t v41 = type metadata accessor for PageId(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v16, 1, v41))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        uint64_t v42 = v100;
        uint64_t v43 = v95;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v100 + 56))(v95, 1, 1, v11);
      }
      else
      {
        uint64_t v43 = v95;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v16, v95, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        uint64_t v42 = v100;
      }
      uint64_t v78 = (uint64_t)v94;
      uint64_t v79 = v93;
      outlined init with copy of PDFPageID((uint64_t)v37, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v23, 0, 1, v11);
      uint64_t v80 = v78 + *(int *)(v79 + 48);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v43, v78, &demangling cache variable for type metadata for PDFPageID?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v23, v80, &demangling cache variable for type metadata for PDFPageID?);
      uint64_t v81 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
      if (v81(v78, 1, v11) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v43, &demangling cache variable for type metadata for PDFPageID?);
        if (v81(v80, 1, v11) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v78, &demangling cache variable for type metadata for PDFPageID?);
          return v39;
        }
      }
      else
      {
        uint64_t v82 = v91;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v78, (uint64_t)v91, &demangling cache variable for type metadata for PDFPageID?);
        if (v81(v80, 1, v11) != 1)
        {
          uint64_t v85 = v90;
          _s8PaperKit0A8DocumentVWObTm_0(v80, (uint64_t)v90, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          uint64_t v86 = v95;
          if (*v82 == *v85)
          {
            char v87 = static CRAsset.== infix(_:_:)();
            outlined destroy of PDFPageID((uint64_t)v85, (uint64_t (*)(void))type metadata accessor for PDFPageID);
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for PDFPageID?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v86, &demangling cache variable for type metadata for PDFPageID?);
            outlined destroy of PDFPageID((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for PDFPageID);
            outlined destroy of StocksKitCurrencyCache.Provider?(v78, &demangling cache variable for type metadata for PDFPageID?);
            if (v87) {
              return v39;
            }
            goto LABEL_39;
          }
          outlined destroy of PDFPageID((uint64_t)v85, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for PDFPageID?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v86, &demangling cache variable for type metadata for PDFPageID?);
          outlined destroy of PDFPageID((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for PDFPageID);
          uint64_t v84 = v78;
          uint64_t v83 = &demangling cache variable for type metadata for PDFPageID?;
LABEL_38:
          outlined destroy of StocksKitCurrencyCache.Provider?(v84, v83);
LABEL_39:

          goto LABEL_9;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v95, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PDFPageID((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      }
      uint64_t v83 = &demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
      uint64_t v84 = v78;
      goto LABEL_38;
    }
  }
LABEL_9:
  uint64_t v44 = &v102[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap];
  swift_beginAccess();
  uint64_t v45 = *(void *)v44;
  if (!*(void *)(*(void *)v44 + 16)) {
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
  if ((v47 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v48 = *(void *)(*(void *)(v45 + 56) + 8 * v46);
  swift_bridgeObjectRelease();
  id v49 = objc_msgSend(v102, sel_pageAtIndex_, v48);
  if (!v49)
  {
LABEL_16:
    uint64_t v62 = v101;
    swift_beginAccess();
    uint64_t v63 = *v62;
    if (!*(void *)(*v62 + 16)
      || (unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37 + *(int *)(v11 + 20)), (v65 & 1) == 0))
    {
      swift_endAccess();
      return 0;
    }
    uint64_t v66 = *(void **)(*(void *)(v63 + 56) + 8 * v64);
    swift_endAccess();
    Swift::UInt v67 = *v37;
    id v50 = v66;
    id result = (char *)objc_msgSend(v50, sel_pageAtIndex_, v67);
    if (result)
    {
      uint64_t v68 = result;
      objc_msgSend(result, sel_copy);

      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for PaperKitPDFPage(0);
      swift_dynamicCast();
      uint64_t v69 = v103;
      uint64_t v70 = (uint64_t)v37;
      uint64_t v71 = v96;
      outlined init with copy of PDFPageID(v70, v96, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v100 + 56))(v71, 0, 1, v11);
      uint64_t v72 = (uint64_t)v69 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      uint64_t v73 = type metadata accessor for PageId(0);
      uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 48);
      id result = (char *)v74(v72, 1, v73);
      uint64_t v75 = v97;
      if (result != 1)
      {
        uint64_t v39 = v69;
        outlined assign with take of Date?(v71, v72, &demangling cache variable for type metadata for PDFPageID?);
        swift_endAccess();
        uint64_t v76 = v98;
        uint64_t v77 = *(void *)(v98 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v75, v99, v98);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v75, 0, 1, v76);
        swift_beginAccess();
        id result = (char *)v74(v72, 1, v73);
        if (result != 1)
        {
          uint64_t v61 = v72 + *(int *)(v73 + 20);
          uint64_t v60 = (uint64_t)v75;
          goto LABEL_22;
        }
        goto LABEL_42;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  id v50 = v49;
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v51 = (void *)swift_dynamicCastClass();
  if (!v51)
  {

    goto LABEL_16;
  }
  objc_msgSend(v51, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  uint64_t v52 = v103;
  uint64_t v53 = v98;
  uint64_t v54 = *(void *)(v98 - 8);
  uint64_t v55 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v92, v99, v98);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v53);
  uint64_t v56 = &v52[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  uint64_t v57 = type metadata accessor for PageId(0);
  id result = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48))(v56, 1, v57);
  if (result != 1)
  {
    uint64_t v59 = (uint64_t)&v56[*(int *)(v57 + 20)];
    uint64_t v39 = v52;
    uint64_t v60 = (uint64_t)v55;
    uint64_t v61 = v59;
LABEL_22:
    outlined assign with take of Date?(v60, v61, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    swift_endAccess();

    return v39;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t closure #3 in PaperDocument.update<A>(_:in:otherDocuments:use:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v9, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change;
    uint64_t v14 = (uint64_t)v9;
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?(v14, v13);
    uint64_t v17 = type metadata accessor for CRAsset();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: PaperDocument.PDFPageAndPaperPage, associatedWith: Int?));
  _s8PaperKit0A8DocumentVWObTm_0((uint64_t)&v9[*(int *)(v15 + 48)], (uint64_t)v12, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, (uint64_t)v6, &demangling cache variable for type metadata for PDFPageID?);
  outlined destroy of PDFPageID((uint64_t)v12, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
  uint64_t v16 = type metadata accessor for PDFPageID();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v6, 1, v16) == 1)
  {
    uint64_t v13 = &demangling cache variable for type metadata for PDFPageID?;
    uint64_t v14 = (uint64_t)v6;
    goto LABEL_5;
  }
  uint64_t v19 = &v6[*(int *)(v16 + 20)];
  uint64_t v20 = type metadata accessor for CRAsset();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(a2, v19, v20);
  outlined destroy of PDFPageID((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(a2, 0, 1, v20);
}

BOOL closure #4 in PaperDocument.update<A>(_:in:otherDocuments:use:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v6 = *a2;
  if (*(void *)(v6 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
    swift_endAccess();
    return v9 == a3;
  }
  else
  {
    swift_endAccess();
    return 0;
  }
}

uint64_t PaperDocument.renderPDFDocument<A>(capsule:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *char v8 = v4;
  v8[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  v8[20] = a3;
  v8[21] = v3;
  v8[18] = a1;
  v8[19] = a2;
  return MEMORY[0x270FA2498](PaperDocument.export<A>(in:), 0, 0);
}

uint64_t PaperDocument.export<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  return MEMORY[0x270FA2498](PaperDocument.export<A>(in:), 0, 0);
}

uint64_t PaperDocument.export<A>(in:)()
{
  type metadata accessor for CRContext();
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  uint64_t v1 = MEMORY[0x21054C990](0, v0 + 96);
  *(void *)(v0 + 176) = v1;
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(void *)(v0 + 136) = v1;
  *(_OWORD *)(v0 + 16) = xmmword_20C834980;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v2;
  void *v2 = v0;
  v2[1] = PaperDocument.export<A>(in:);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  return PaperDocument.newPDFDocument<A>(use:in:options:)((void *)(v0 + 136), v4, v0 + 16, v5, v3);
}

uint64_t PaperDocument.export<A>(in:)(uint64_t a1)
{
  uint64_t v3 = *(void **)(*v1 + 176);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  uint64_t v4 = *(uint64_t (**)(uint64_t))(v6 + 8);
  return v4(a1);
}

uint64_t PaperDocument.export<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a1;
  *(_OWORD *)(v4 + 16) = xmmword_20C834980;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 75) = 0u;
  char v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 104) = v8;
  *char v8 = v4;
  v8[1] = PaperDocument.export<A>(_:in:options:);
  return PaperDocument.newPDFDocument<A>(use:in:options:)((void *)(v4 + 96), a2, v4 + 16, a3, a4);
}

uint64_t PaperDocument.update<A>(pdfDocument:in:use:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 96) = *a3;
  *(_OWORD *)(v5 + 16) = xmmword_20C834980;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 75) = 0u;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 104) = v10;
  *uint64_t v10 = v5;
  v10[1] = PaperDocument.update<A>(pdfDocument:in:use:);
  return PaperDocument.update<A>(pdfDocument:in:use:options:)(a1, a2, (uint64_t *)(v5 + 96), v5 + 16, a4, a5);
}

uint64_t PaperDocument.update<A>(pdfDocument:in:use:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t PaperDocument.update<A>(pdfDocument:in:use:options:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 168) = a6;
  *(void *)(v7 + 176) = v6;
  *(void *)(v7 + 152) = a2;
  *(void *)(v7 + 160) = a5;
  *(void *)(v7 + 144) = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>));
  *(void *)(v7 + 184) = v10;
  *(void *)(v7 + 192) = *(void *)(v10 - 8);
  *(void *)(v7 + 200) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  *(void *)(v7 + 208) = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  *(void *)(v7 + 216) = v11;
  *(void *)(v7 + 224) = *(void *)(v11 - 8);
  *(void *)(v7 + 232) = swift_task_alloc();
  *(void *)(v7 + 240) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
  *(void *)(v7 + 248) = swift_task_alloc();
  *(void *)(v7 + 256) = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  *(void *)(v7 + 264) = v12;
  *(void *)(v7 + 272) = *(void *)(v12 - 8);
  *(void *)(v7 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>);
  *(void *)(v7 + 288) = swift_task_alloc();
  *(void *)(v7 + 296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  uint64_t v13 = swift_task_alloc();
  uint64_t v14 = *a3;
  *(void *)(v7 + 304) = v13;
  *(void *)(v7 + 312) = v14;
  long long v15 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v7 + 320) = *(_OWORD *)a4;
  *(_OWORD *)(v7 + 336) = v15;
  long long v16 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v7 + 352) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v7 + 368) = v16;
  *(void *)(v7 + 384) = *(void *)(a4 + 64);
  LOWORD(v14) = *(_WORD *)(a4 + 72);
  *(unsigned char *)(v7 + 94) = *(unsigned char *)(a4 + 74);
  *(_WORD *)(v7 + 92) = v14;
  return MEMORY[0x270FA2498](PaperDocument.update<A>(pdfDocument:in:use:options:), 0, 0);
}

uint64_t PaperDocument.update<A>(pdfDocument:in:use:options:)()
{
  uint64_t v78 = v0;
  uint64_t v1 = *(void **)(v0 + 144);
  type metadata accessor for PaperKitPDFDocument();
  uint64_t v2 = swift_dynamicCastClass();
  *(void *)(v0 + 392) = v2;
  if (!v2)
  {
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::UInt v67 = *(uint64_t (**)(void))(v0 + 8);
    return v67();
  }
  __int16 v3 = *(_WORD *)(v0 + 92);
  char v4 = *(unsigned char *)(v0 + 94);
  uint64_t v5 = *(void *)(v0 + 384);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v73 = *(void *)(v0 + 312);
  uint64_t v6 = v73;
  long long v10 = *(_OWORD *)(v0 + 336);
  v74[0] = *(_OWORD *)(v0 + 320);
  v74[1] = v10;
  long long v11 = *(_OWORD *)(v0 + 368);
  v74[2] = *(_OWORD *)(v0 + 352);
  v74[3] = v11;
  uint64_t v75 = v5;
  char v77 = v4;
  __int16 v76 = v3;
  id v12 = v1;
  PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v9, &v73, (uint64_t *)v74, v8, v7);
  if (v6 == 0x8000000000000000)
  {
    uint64_t v13 = *(void **)(v0 + 144);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_18:

    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(v0 + 304);
  unint64_t v15 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v17 = *(void *)(v0 + 296);
  uint64_t v19 = *(void *)(v0 + 272);
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v20 = *(void *)(v0 + 264);
  uint64_t v21 = *(void *)(v0 + 176);
  outlined copy of PaperDocument.PDFDocumentUse(v15);
  outlined consume of PaperDocument.PDFDocumentUse(v15);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v16, v21, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v18, v16, v20);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v22 = *(int *)(v17 + 36);
  *(_DWORD *)(v0 + 416) = v22;
  *(void *)(v14 + v22) = 0;
  uint64_t v23 = &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator;
  uint64_t v24 = &selRef_isImageAnalysisEnabled;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  while (1)
  {
    uint64_t v26 = *(void *)(v0 + 216);
    uint64_t v25 = *(void *)(v0 + 224);
    uint64_t v27 = *(void *)(v0 + 208);
    __swift_instantiateConcreteTypeFromMangledName(v23);
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v27, 1, v26) == 1)
    {
      uint64_t v28 = *(void *)(v0 + 248);
      uint64_t v30 = *(void *)(v0 + 184);
      uint64_t v29 = *(void *)(v0 + 192);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 208), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v28, 1, 1, v30);
    }
    else
    {
      uint64_t v31 = v23;
      uint64_t v32 = *(int *)(v0 + 416);
      uint64_t v33 = *(void *)(v0 + 304);
      uint64_t v34 = *(void *)(v0 + 240);
      uint64_t v35 = *(void *)(v0 + 216);
      uint64_t v36 = *(void *)(v0 + 200);
      uint64_t v37 = *(void *)(v0 + 184);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 224) + 32);
      v38(v34, *(void *)(v0 + 208), v35);
      uint64_t v39 = v36 + *(int *)(v37 + 48);
      uint64_t v40 = *(void *)(v33 + v32);
      uint64_t result = v38(v39, v34, v35);
      if (__OFADD__(v40, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v42 = *(void **)(v0 + 248);
      uint64_t v43 = *(void *)(v0 + 216);
      uint64_t v45 = *(void *)(v0 + 184);
      uint64_t v44 = *(void *)(v0 + 192);
      *(void *)(*(void *)(v0 + 304) + *(int *)(v0 + 416)) = v40 + 1;
      unint64_t v46 = (char *)v42 + *(int *)(v45 + 48);
      *uint64_t v42 = v40;
      v38((uint64_t)v46, v39, v43);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v42, 0, 1, v45);
      uint64_t v23 = v31;
      uint64_t v24 = &selRef_isImageAnalysisEnabled;
    }
    uint64_t v47 = *(void *)(v0 + 256);
    uint64_t v49 = *(void *)(v0 + 184);
    uint64_t v48 = *(void *)(v0 + 192);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 248), v47, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v47, 1, v49) == 1)
    {
      uint64_t v13 = *(void **)(v0 + 144);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 304), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
      goto LABEL_18;
    }
    id v50 = *(void **)(v0 + 392);
    uint64_t v51 = *(char **)(v0 + 256);
    uint64_t v52 = *(void *)v51;
    (*(void (**)(void, char *, void))(*(void *)(v0 + 224) + 32))(*(void *)(v0 + 232), &v51[*(int *)(*(void *)(v0 + 184) + 48)], *(void *)(v0 + 216));
    id v53 = objc_msgSend(v50, v24[63], v52);
    *(void *)(v0 + 400) = v53;
    if (v53) {
      break;
    }
LABEL_6:
    (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));
  }
  uint64_t v54 = v53;
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v55 = swift_dynamicCastClass();
  if (!v55)
  {

    goto LABEL_6;
  }
  uint64_t v56 = v55;
  __int16 v57 = *(_WORD *)(v0 + 92);
  char v58 = *(unsigned char *)(v0 + 94);
  uint64_t v59 = *(void *)(v0 + 384);
  long long v70 = *(_OWORD *)(v0 + 352);
  long long v72 = *(_OWORD *)(v0 + 368);
  long long v68 = *(_OWORD *)(v0 + 320);
  long long v69 = *(_OWORD *)(v0 + 336);
  uint64_t v60 = *(void *)(v0 + 312);
  SharedTagged_3.subscript.getter();
  uint64_t v61 = *(void *)(v0 + 120);
  uint64_t v62 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v61);
  *(void *)(v0 + 136) = v60;
  *(_OWORD *)(v0 + 16) = v68;
  *(_OWORD *)(v0 + 32) = v69;
  *(_OWORD *)(v0 + 48) = v70;
  *(_OWORD *)(v0 + 64) = v72;
  *(void *)(v0 + 80) = v59;
  *(unsigned char *)(v0 + 90) = v58;
  *(_WORD *)(v0 + 88) = v57;
  uint64_t v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 + 144) + **(int **)(v62 + 144));
  uint64_t v63 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v63;
  *uint64_t v63 = v0;
  v63[1] = PaperDocument.update<A>(pdfDocument:in:use:options:);
  uint64_t v64 = *(void *)(v0 + 160);
  uint64_t v65 = *(void *)(v0 + 168);
  uint64_t v66 = *(void *)(v0 + 152);
  return v71(v56, v0 + 136, v66, v0 + 16, v64, v65, v61, v62);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](PaperDocument.update<A>(pdfDocument:in:use:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t (*v49)(void);
  long long v50;
  long long v51;
  long long v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  long long v54;
  uint64_t v55;

  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  __int16 v3 = *(void *)(v0 + 216);

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  char v4 = &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator;
  uint64_t v5 = &selRef_isImageAnalysisEnabled;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  while (1)
  {
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v8 = *(void *)(v0 + 208);
    __swift_instantiateConcreteTypeFromMangledName(v4);
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7) == 1)
    {
      uint64_t v9 = *(void *)(v0 + 248);
      long long v11 = *(void *)(v0 + 184);
      long long v10 = *(void *)(v0 + 192);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 208), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, v11);
    }
    else
    {
      id v12 = v4;
      uint64_t v13 = *(int *)(v0 + 416);
      uint64_t v14 = *(void *)(v0 + 304);
      unint64_t v15 = *(void *)(v0 + 240);
      uint64_t v16 = *(void *)(v0 + 216);
      uint64_t v17 = *(void *)(v0 + 200);
      uint64_t v18 = *(void *)(v0 + 184);
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 224) + 32);
      v19(v15, *(void *)(v0 + 208), v16);
      uint64_t v20 = v17 + *(int *)(v18 + 48);
      uint64_t v21 = *(void *)(v14 + v13);
      uint64_t result = v19(v20, v15, v16);
      if (__OFADD__(v21, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v23 = *(void **)(v0 + 248);
      uint64_t v24 = *(void *)(v0 + 216);
      uint64_t v26 = *(void *)(v0 + 184);
      uint64_t v25 = *(void *)(v0 + 192);
      *(void *)(*(void *)(v0 + 304) + *(int *)(v0 + 416)) = v21 + 1;
      uint64_t v27 = (char *)v23 + *(int *)(v26 + 48);
      *uint64_t v23 = v21;
      v19((uint64_t)v27, v20, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v26);
      char v4 = v12;
      uint64_t v5 = &selRef_isImageAnalysisEnabled;
    }
    uint64_t v28 = *(void *)(v0 + 256);
    uint64_t v30 = *(void *)(v0 + 184);
    uint64_t v29 = *(void *)(v0 + 192);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 248), v28, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v28, 1, v30) == 1) {
      break;
    }
    uint64_t v31 = *(void **)(v0 + 392);
    uint64_t v32 = *(char **)(v0 + 256);
    uint64_t v33 = *(void *)v32;
    (*(void (**)(void, char *, void))(*(void *)(v0 + 224) + 32))(*(void *)(v0 + 232), &v32[*(int *)(*(void *)(v0 + 184) + 48)], *(void *)(v0 + 216));
    uint64_t v34 = objc_msgSend(v31, v5[63], v33);
    *(void *)(v0 + 400) = v34;
    if (v34)
    {
      uint64_t v35 = v34;
      type metadata accessor for PaperKitPDFPage(0);
      uint64_t v36 = swift_dynamicCastClass();
      if (v36)
      {
        uint64_t v37 = v36;
        uint64_t v38 = *(_WORD *)(v0 + 92);
        uint64_t v39 = *(unsigned char *)(v0 + 94);
        uint64_t v40 = *(void *)(v0 + 384);
        uint64_t v54 = *(_OWORD *)(v0 + 368);
        uint64_t v51 = *(_OWORD *)(v0 + 336);
        uint64_t v52 = *(_OWORD *)(v0 + 352);
        id v50 = *(_OWORD *)(v0 + 320);
        uint64_t v41 = *(void *)(v0 + 312);
        SharedTagged_3.subscript.getter();
        uint64_t v42 = *(void *)(v0 + 120);
        uint64_t v43 = *(void *)(v0 + 128);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v42);
        *(void *)(v0 + 136) = v41;
        *(_OWORD *)(v0 + 16) = v50;
        *(_OWORD *)(v0 + 32) = v51;
        *(_OWORD *)(v0 + 48) = v52;
        *(_OWORD *)(v0 + 64) = v54;
        *(void *)(v0 + 80) = v40;
        *(unsigned char *)(v0 + 90) = v39;
        *(_WORD *)(v0 + 88) = v38;
        id v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 + 144) + **(int **)(v43 + 144));
        uint64_t v44 = (void *)swift_task_alloc();
        *(void *)(v0 + 408) = v44;
        char *v44 = v0;
        v44[1] = PaperDocument.update<A>(pdfDocument:in:use:options:);
        uint64_t v45 = *(void *)(v0 + 160);
        unint64_t v46 = *(void *)(v0 + 168);
        uint64_t v47 = *(void *)(v0 + 152);
        return v53(v37, v0 + 136, v47, v0 + 16, v45, v46, v42, v43);
      }
    }
    (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));
  }
  uint64_t v48 = *(void **)(v0 + 144);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 304), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v49 = *(uint64_t (**)(void))(v0 + 8);
  return v49();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PaperDocument()
{
  return CRStruct_2.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PaperDocument()
{
  return CRStruct_2.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PaperDocument(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F16FE0](a1, v2);
}

uint64_t protocol witness for static CRStruct_Base_2.fields.getter in conformance PaperDocument@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26ACB5140;
  uint64_t v4 = qword_26ACB5148;
  uint64_t v3 = unk_26ACB5150;
  uint64_t v5 = qword_26ACB5158;
  uint64_t v6 = qword_26ACB5160;
  *a1 = static PaperDocument.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PaperDocument(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F17050](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t protocol witness for CRStruct_Base.init() in conformance PaperDocument@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v12 - v8;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  CROrderedSet.init()();
  uint64_t v10 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v9, (uint64_t)v6, &demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, &demangling cache variable for type metadata for CRAsset?);
  CRRegister.init(wrappedValue:)();
  uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CRAsset?);
  *(void *)(a2 + *(int *)(a1 + 24)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance PaperDocument(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F16FF0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F17018](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F17048](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F17020](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F17040](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F17028](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F17008](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F17000](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F16FE8](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F16FD0](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PaperDocument()
{
  lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return CRStruct_2.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F16FD8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  return MEMORY[0x270F17030](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PaperDocument()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PaperDocument()
{
  return CRDT.init(serializedData:)();
}

uint64_t PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_pageCount);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x270FA5388](result);
    v14[2] = v5;
    v14[3] = a1;
    v14[4] = a2;
    v14[5] = a3;
    v14[6] = a4;
    char v15 = a5 & 1;
    specialized Sequence.compactMap<A>(_:)((void (*)(void, __n128))partial apply for closure #1 in PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:), (uint64_t)v14, 0, v12);
    uint64_t v16 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [SharedTagged_3<TaggedPaperPage>] and conformance [A], &demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>]);
    CROrderedSet.append<A>(contentsOf:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized static PaperDocument.PDFPageAndPaperPage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PDFPageID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (void *)((char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?));
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  long long v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v29 = (void *)((char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v28 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v28 - v18;
  v28[1] = a1;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v28 - v18, &demangling cache variable for type metadata for PDFPageID?);
  v28[2] = a2;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a2, (uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
  uint64_t v20 = (uint64_t)&v11[*(int *)(v9 + 56)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, (uint64_t)v11, &demangling cache variable for type metadata for PDFPageID?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v16, v20, &demangling cache variable for type metadata for PDFPageID?);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v11, 1, v4) != 1)
  {
    uint64_t v23 = v29;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v11, (uint64_t)v29, &demangling cache variable for type metadata for PDFPageID?);
    if (v21(v20, 1, v4) != 1)
    {
      _s8PaperKit0A8DocumentVWObTm_0(v20, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      if (*v23 == *v7)
      {
        char v27 = static CRAsset.== infix(_:_:)();
        outlined destroy of PDFPageID((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PDFPageID((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for PDFPageID?);
        if (v27) {
          goto LABEL_4;
        }
LABEL_9:
        char v22 = 0;
        return v22 & 1;
      }
      outlined destroy of PDFPageID((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of PDFPageID((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PDFPageID);
      uint64_t v25 = (uint64_t)v11;
      uint64_t v24 = &demangling cache variable for type metadata for PDFPageID?;
LABEL_8:
      outlined destroy of StocksKitCurrencyCache.Provider?(v25, v24);
      goto LABEL_9;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PDFPageID((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_7:
    uint64_t v24 = &demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
    uint64_t v25 = (uint64_t)v11;
    goto LABEL_8;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
  if (v21(v20, 1, v4) != 1) {
    goto LABEL_7;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for PDFPageID?);
LABEL_4:
  type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  char v22 = static WeakTagged_3.== infix(_:_:)();
  return v22 & 1;
}

uint64_t specialized static PaperDocument.PDFDocumentUse.== infix(_:_:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  unint64_t v4 = *a1 >> 62;
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 >> 62 == 1) {
        goto LABEL_6;
      }
    }
    else if (v2 == 0x8000000000000000)
    {
      if (v3 == 0x8000000000000000)
      {
        char v5 = 1;
        unint64_t v2 = 0x8000000000000000;
        unint64_t v3 = 0x8000000000000000;
        goto LABEL_13;
      }
    }
    else if (v3 == 0x8000000000000008)
    {
      char v5 = 1;
      unint64_t v2 = 0x8000000000000008;
      unint64_t v3 = 0x8000000000000008;
      goto LABEL_13;
    }
LABEL_12:
    outlined copy of PaperDocument.PDFDocumentUse(*a2);
    outlined copy of PaperDocument.PDFDocumentUse(v2);
    char v5 = 0;
    goto LABEL_13;
  }
  if (v3 >> 62) {
    goto LABEL_12;
  }
LABEL_6:
  type metadata accessor for NSObject();
  outlined copy of PaperDocument.PDFDocumentUse(v3);
  outlined copy of PaperDocument.PDFDocumentUse(v2);
  char v5 = static NSObject.== infix(_:_:)();
LABEL_13:
  outlined consume of PaperDocument.PDFDocumentUse(v2);
  outlined consume of PaperDocument.PDFDocumentUse(v3);
  return v5 & 1;
}

uint64_t base witness table accessor for CRStruct_Base_2 in PaperDocument()
{
  return lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
}

uint64_t base witness table accessor for CRStruct_Base in PaperDocument()
{
  return lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
}

uint64_t lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for CRStruct_Base_2.Type_1 : CRDT in PaperDocument()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
}

uint64_t associated type witness table accessor for CRStruct_Base_2.Type_2 : CRDT in PaperDocument()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<CRAsset?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CRAsset?>);
}

uint64_t base witness table accessor for CRDT in PaperDocument()
{
  return lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
}

uint64_t base witness table accessor for CRMergeable in PaperDocument()
{
  return lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
}

uint64_t base witness table accessor for CRType in PaperDocument()
{
  return lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PaperDocument()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_2<PaperDocument> and conformance CRStructMergeableDelta_2<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_2<PaperDocument>);
}

uint64_t base witness table accessor for CRCodable in PaperDocument()
{
  return lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
}

uint64_t sub_20C596B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_3(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C596B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_3(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_getTm_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for PaperDocument(0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return a4(v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for PaperDocument(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C59710C);
}

uint64_t sub_20C59710C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C59723C);
}

uint64_t sub_20C59723C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PaperDocument()
{
  type metadata accessor for CROrderedSet<SharedTagged_3<TaggedPaperPage>>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CRAsset?>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CROrderedSet<SharedTagged_3<TaggedPaperPage>>()
{
  if (!lazy cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
    unint64_t v0 = type metadata accessor for CROrderedSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    }
  }
}

void type metadata accessor for CRRegister<CRAsset?>()
{
  if (!lazy cache variable for type metadata for CRRegister<CRAsset?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRAsset?);
    lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, &demangling cache variable for type metadata for CRAsset?);
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CRAsset?>);
    }
  }
}

unint64_t *initializeBufferWithCopyOfBuffer for PaperDocument.PDFDocumentUse(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of PaperDocument.PDFDocumentUse(*a2);
  *a1 = v3;
  return a1;
}

void destroy for PaperDocument.PDFDocumentUse(unint64_t *a1)
{
}

unint64_t *assignWithCopy for PaperDocument.PDFDocumentUse(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of PaperDocument.PDFDocumentUse(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of PaperDocument.PDFDocumentUse(v4);
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for PaperDocument.PDFDocumentUse(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of PaperDocument.PDFDocumentUse(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperDocument.PDFDocumentUse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PaperDocument.PDFDocumentUse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for PaperDocument.PDFDocumentUse(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *destructiveProjectEnumData for PaperDocument.PDFDocumentUse(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for PaperDocument.PDFDocumentUse(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *uint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for PaperDocument.PDFDocumentUse()
{
  return &type metadata for PaperDocument.PDFDocumentUse;
}

id partial apply for closure #1 in PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PaperDocument.create<A>(page:fromDocument:asset:in:assetManager:useProxyPages:)(*a1, *(void **)(v2 + 24), *(id *)(v2 + 32), *(void **)(v2 + 40), *(void *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), a2);
}

uint64_t lazy protocol witness table accessor for type CRAsset? and conformance <A> A?(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of PDFPageID(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of PDFPageID(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for PaperDocument.PDFPageAndPaperPage(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperDocument.PDFPageAndPaperPage);
}

uint64_t _s8PaperKit0A8DocumentVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(uint64_t a1)
{
  return closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(a1);
}

uint64_t sub_20C597958()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t *initializeBufferWithCopyOfBuffer for PaperDocument.PDFPageAndPaperPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for PDFPageID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v11 = *(int *)(v7 + 20);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v15 = *(int *)(a3 + 20);
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return a1;
}

uint64_t destroy for PaperDocument.PDFPageAndPaperPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PDFPageID();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v5 = a1 + *(int *)(v4 + 20);
    uint64_t v6 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  return v9(v7, v8);
}

void *initializeWithCopy for PaperDocument.PDFPageAndPaperPage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PDFPageID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v9 = *(int *)(v6 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

void *assignWithCopy for PaperDocument.PDFPageAndPaperPage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PDFPageID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      uint64_t v21 = *(int *)(v6 + 20);
      char v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      uint64_t v24 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
      goto LABEL_7;
    }
    outlined destroy of PDFPageID((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  uint64_t v11 = *(int *)(v6 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

void *initializeWithTake for PaperDocument.PDFPageAndPaperPage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PDFPageID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v9 = *(int *)(v6 + 20);
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

void *assignWithTake for PaperDocument.PDFPageAndPaperPage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PDFPageID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      uint64_t v21 = *(int *)(v6 + 20);
      char v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      uint64_t v24 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 40))(v22, v23, v24);
      goto LABEL_7;
    }
    outlined destroy of PDFPageID((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  uint64_t v11 = *(int *)(v6 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperDocument.PDFPageAndPaperPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C59843C);
}

uint64_t sub_20C59843C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PaperDocument.PDFPageAndPaperPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C598550);
}

uint64_t sub_20C598550(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for PaperDocument.PDFPageAndPaperPage()
{
  type metadata accessor for PDFPageID?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for WeakTagged_3<TaggedPaperPage>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for PDFPageID?()
{
  if (!lazy cache variable for type metadata for PDFPageID?)
  {
    type metadata accessor for PDFPageID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PDFPageID?);
    }
  }
}

void type metadata accessor for WeakTagged_3<TaggedPaperPage>()
{
  if (!lazy cache variable for type metadata for WeakTagged_3<TaggedPaperPage>)
  {
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    unint64_t v0 = type metadata accessor for WeakTagged_3();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    }
  }
}

uint64_t base witness table accessor for Equatable in PaperDocument.PDFPageAndPaperPage()
{
  return lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument(&lazy protocol witness table cache variable for type PaperDocument.PDFPageAndPaperPage and conformance PaperDocument.PDFPageAndPaperPage, (void (*)(uint64_t))type metadata accessor for PaperDocument.PDFPageAndPaperPage);
}

void LinkPreviewLoadingOperation.linkPreviewDidFinishLoading(notification:)()
{
  uint64_t v1 = v0;
  if (objc_msgSend(self, sel_isMainThread))
  {
    Notification.object.getter();
    if (v11)
    {
      type metadata accessor for SYContentItem();
      if (swift_dynamicCast())
      {
        uint64_t v2 = *(void **)(v0 + 16);
        if (v2)
        {
          id v3 = v9;
          id v4 = v2;
          char v5 = static NSObject.== infix(_:_:)();

          if (v5)
          {
            uint64_t v6 = *(void (**)(uint64_t))(v1 + 24);
            if (v6)
            {
              uint64_t v7 = swift_retain();
              v6(v7);

              outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v6);
            }
            else
            {
            }
            uint64_t v8 = *(void *)(v1 + 24);
            *(void *)(v1 + 24) = 0;
            *(void *)(v1 + 32) = 0;
            outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v8);
          }
          else
          {
          }
        }
        else
        {
        }
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v10);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t LinkPreviewLoadingOperation.__deallocating_deinit()
{
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(*(void *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LinkPreviewLoadingOperation()
{
  return self;
}

unint64_t type metadata accessor for SYContentItem()
{
  unint64_t result = lazy cache variable for type metadata for SYContentItem;
  if (!lazy cache variable for type metadata for SYContentItem)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
  }
  return result;
}

uint64_t LiveEditable.endedLiveEditing()(uint64_t a1, uint64_t a2)
{
  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  v3[13] = type metadata accessor for MainActor();
  v3[14] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[15] = v5;
  v3[16] = v4;
  return MEMORY[0x270FA2498](LiveEditable.endedLiveEditing(), v5, v4);
}

uint64_t LiveEditable.endedLiveEditing()()
{
  if ((*(uint64_t (**)(void))(v0[11] + 8))(v0[10]))
  {
    uint64_t v1 = static MainActor.shared.getter();
    v0[17] = v1;
    if (v1)
    {
      swift_getObjectType();
      uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v4 = v3;
    }
    else
    {
      uint64_t v2 = 0;
      uint64_t v4 = 0;
    }
    return MEMORY[0x270FA2498](LiveEditable.endedLiveEditing(), v2, v4);
  }
  else
  {
    swift_release();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  v0[2] = v0;
  v0[3] = LiveEditable.endedLiveEditing();
  uint64_t v4 = swift_continuation_init();
  closure #1 in LiveEditable.endedLiveEditing()(v4, v1, v3, v2);
  return MEMORY[0x270FA23F0](v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_release();
  uint64_t v2 = *(void *)(v1 + 128);
  uint64_t v3 = *(void *)(v1 + 120);
  return MEMORY[0x270FA2498](LiveEditable.endedLiveEditing(), v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in LiveEditable.endedLiveEditing()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 48))(v13, a3, a4);
  uint64_t v7 = v6;
  uint64_t v8 = *v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  v8[2] = v11 + 1;
  v8[v11 + 4] = a1;
  return v5(v13, 0);
}

uint64_t Capsule<>.links.getter()
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Link>?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v78 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for Link();
  uint64_t v87 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  uint64_t v79 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  *(void *)&long long v92 = (char *)&v78 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v85 = (char *)&v78 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v89 = (uint64_t)&v78 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v84 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v88 = (char *)&v78 - v15;
  MEMORY[0x270FA5388](v16);
  __C::CGRect v91 = (char *)&v78 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v90 = (char *)&v78 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v93 = (char *)&v78 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper);
  uint64_t v86 = v0;
  Capsule<>.root.getter();
  uint64_t v83 = v26;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v25, &v28[*(int *)(v26 + 44)], v22);
  _s8PaperKit0A0VWOhTm_3((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for Paper);
  lazy protocol witness table accessor for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>();
  uint64_t v81 = v25;
  uint64_t v29 = dispatch thunk of Sequence._copyToContiguousArray()();
  unint64_t v95 = v29;
  unint64_t v30 = MEMORY[0x263F8EE78];
  if (*(void *)(v29 + 16))
  {
    unint64_t v31 = v29;
    uint64_t v32 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v82 = (void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v33 = v88;
    uint64_t v80 = v12;
    do
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v39 = *(void *)(v31 + 16);
        if (!v39) {
          goto LABEL_36;
        }
      }
      else
      {
        unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
        uint64_t v39 = *(void *)(v31 + 16);
        if (!v39) {
LABEL_36:
        }
          __break(1u);
      }
      unint64_t v94 = v30;
      uint64_t v40 = v39 - 1;
      uint64_t v41 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 32);
      v41(v33, v31+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * (v39 - 1), v11);
      *(void *)(v31 + 16) = v40;
      unint64_t v95 = v31;
      uint64_t v42 = v91;
      v41(v91, (unint64_t)v33, v11);
      uint64_t v43 = v90;
      v41(v90, (unint64_t)v42, v11);
      uint64_t v44 = v93;
      v41(v93, (unint64_t)v43, v11);
      SharedTagged_9.tagged5.getter();
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Link>);
      uint64_t v46 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v3, 1, v45) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for Ref<Link>?);
        (*v82)(v84, v44, v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElement);
        if (swift_dynamicCast())
        {
          outlined init with take of FindResult(v96, (uint64_t)&v98);
          uint64_t v34 = v100;
          uint64_t v35 = v101;
          __swift_project_boxed_opaque_existential_1(&v98, v100);
          uint64_t v36 = v3;
          uint64_t v37 = (uint64_t)v81;
          (*(void (**)(uint64_t, uint64_t))(v35 + 72))(v34, v35);
          uint64_t v38 = v37;
          uint64_t v3 = v36;
          specialized Array.append<A>(contentsOf:)(v38);
          uint64_t v12 = v80;
          (*v32)(v44, v11);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
        }
        else
        {
          uint64_t v97 = 0;
          memset(v96, 0, sizeof(v96));
          (*v32)(v44, v11);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v96, &demangling cache variable for type metadata for ContainerCanvasElement?);
        }
        unint64_t v30 = v94;
      }
      else
      {
        uint64_t v47 = v12;
        _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_3(&lazy protocol witness table cache variable for type Paper and conformance Paper);
        uint64_t v48 = (uint64_t)v85;
        Ref.subscript.getter();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v3, v45);
        uint64_t v49 = v89;
        outlined init with take of Link(v48, v89);
        outlined init with copy of Link(v49, v92);
        unint64_t v30 = v94;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1, v30);
        }
        unint64_t v51 = *(void *)(v30 + 16);
        unint64_t v50 = *(void *)(v30 + 24);
        uint64_t v12 = v47;
        if (v51 >= v50 >> 1) {
          unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, v30);
        }
        uint64_t v33 = v88;
        *(void *)(v30 + 16) = v51 + 1;
        outlined init with take of Link(v92, v30+ ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))+ *(void *)(v87 + 72) * v51);
        _s8PaperKit0A0VWOhTm_3(v89, (uint64_t (*)(void))type metadata accessor for Link);
        (*v32)(v93, v11);
      }
      unint64_t v31 = v95;
    }
    while (*(void *)(v95 + 16));
  }
  *(void *)&v96[0] = MEMORY[0x263F8EE78];
  unint64_t v52 = v30;
  uint64_t v53 = *(void *)(v30 + 16);
  if (v53)
  {
    uint64_t v54 = v52 + ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
    uint64_t v55 = *(char **)(v87 + 72);
    unint64_t v94 = v52;
    swift_bridgeObjectRetain_n();
    *(void *)&long long v56 = 136315138;
    long long v92 = v56;
    __C::CGRect v91 = (char *)(MEMORY[0x263F8EE58] + 8);
    uint64_t v57 = v79;
    uint64_t v93 = v55;
    do
    {
      outlined init with copy of Link(v54, v57);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
      CRRegister.wrappedValue.getter();
      unint64_t v58 = v99;
      if (v99 >> 60 == 15)
      {
        _s8PaperKit0A0VWOhTm_3(v57, (uint64_t (*)(void))type metadata accessor for Link);
      }
      else
      {
        uint64_t v59 = (uint64_t)v98;
        id v60 = objc_allocWithZone(MEMORY[0x263F7C208]);
        outlined copy of Data._Representation(v59, v58);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v98 = 0;
        id v62 = objc_msgSend(v60, sel_initWithData_error_, isa, &v98);

        if (v62)
        {
          id v63 = v98;
          outlined consume of Data?(v59, v58);
          outlined consume of Data?(v59, v58);
          uint64_t v64 = _s8PaperKit0A0VWOhTm_3(v57, (uint64_t (*)(void))type metadata accessor for Link);
          MEMORY[0x21054D330](v64);
          if (*(void *)((*(void *)&v96[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v96[0] & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          id v65 = v98;
          uint64_t v66 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          outlined consume of Data?(v59, v58);
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v67 = type metadata accessor for Logger();
          __swift_project_value_buffer(v67, (uint64_t)logger);
          id v68 = v66;
          id v69 = v66;
          long long v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v70, v71))
          {
            uint64_t v72 = swift_slowAlloc();
            uint64_t v73 = (void *)swift_slowAlloc();
            id v98 = v73;
            *(_DWORD *)uint64_t v72 = v92;
            swift_getErrorValue();
            uint64_t v74 = Error.localizedDescription.getter();
            *(void *)(v72 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)&v98);
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_20C2D7000, v70, v71, "%s", (uint8_t *)v72, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x210550270](v73, -1, -1);
            MEMORY[0x210550270](v72, -1, -1);
            outlined consume of Data?(v59, v58);
          }
          else
          {
            outlined consume of Data?(v59, v58);
          }
          uint64_t v57 = v79;
          _s8PaperKit0A0VWOhTm_3(v79, (uint64_t (*)(void))type metadata accessor for Link);
          uint64_t v55 = v93;
        }
      }
      v54 += (uint64_t)v55;
      --v53;
    }
    while (v53);
    swift_bridgeObjectRelease();
    uint64_t v76 = *(void *)&v96[0];
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v76 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v76;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x21054E060);
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

unint64_t lazy protocol witness table accessor for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>;
  if (!lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>);
  }
  return result;
}

uint64_t _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_3(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Paper();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Link();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Link();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s8PaperKit0A0VWOhTm_3(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

Swift::Void __swiftcall LinedPaperView.update(bounds:drawingTransform:shouldClip:)(__C::CGRect bounds, CGAffineTransform *drawingTransform, Swift::Bool shouldClip)
{
  double height = bounds.size.height;
  double width = bounds.size.width;
  double y = bounds.origin.y;
  double x = bounds.origin.x;
  objc_msgSend(v3, sel_setFrame_);
  uint64_t v10 = &v3[OBJC_IVAR____TtC8PaperKit14LinedPaperView_drawingTransform];
  long long v11 = *(_OWORD *)&drawingTransform->tx;
  long long v12 = *(_OWORD *)&drawingTransform->a;
  *((_OWORD *)v10 + 1) = *(_OWORD *)&drawingTransform->c;
  *((_OWORD *)v10 + 2) = v11;
  *(_OWORD *)uint64_t v10 = v12;
  uint64_t v13 = OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaper;
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaperLayer;
  uint64_t v15 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaperLayer];
  if (!*(void *)&v3[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaper])
  {
    if (v15)
    {
      objc_msgSend(v15, sel_removeFromSuperlayer);
      uint64_t v19 = *(void **)&v3[v14];
    }
    else
    {
      uint64_t v19 = 0;
    }
    *(void *)&v3[v14] = 0;
LABEL_9:

    goto LABEL_10;
  }
  if (!v15)
  {
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B68]), sel_initWithLinedPaperLayerDelegate_, v3);
    uint64_t v17 = *(void **)&v3[v14];
    *(void *)&v3[v14] = v16;

    id v18 = objc_msgSend(v3, sel_layer);
    if (!*(void *)&v3[v14])
    {
      __break(1u);
      return;
    }
    uint64_t v19 = v18;
    objc_msgSend(v18, sel_addSublayer_);
    goto LABEL_9;
  }
LABEL_10:
  objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaperLayer], sel_updateLinesFromAttachmentBounds_, x, y, width, height);
  uint64_t v20 = (*(void *)&v3[v13] != 0) & shouldClip;
  objc_msgSend(v3, sel_setClipsToBounds_, v20);
}

id LinedPaperView.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaperLayer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaper] = 0;
  uint64_t v3 = &v1[OBJC_IVAR____TtC8PaperKit14LinedPaperView_drawingTransform];
  *(void *)uint64_t v3 = 0x3FF0000000000000;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = 0x3FF0000000000000;
  uint64_t v4 = (objc_class *)type metadata accessor for LinedPaperView();
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  v7.receiver = v1;
  v7.super_class = v4;
  id v5 = objc_msgSendSuper2(&v7, sel_initWithCoder_, a1);

  return v5;
}

id LinedPaperView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinedPaperView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for LinedPaperView()
{
  return self;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    id v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t MiniMenuState.popoverState.getter()
{
  return swift_retain();
}

uint64_t closure #1 in MiniMenuState.popoverState.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  swift_retain();
  return swift_release();
}

uint64_t MiniMenuState.visible.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t closure #1 in MiniMenuState.visible.setter(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

uint64_t MiniMenuState.options.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + 40);
}

uint64_t key path getter for MiniMenuState.options : MiniMenuState@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + 40);
  return result;
}

uint64_t key path setter for MiniMenuState.options : MiniMenuState()
{
  return swift_release();
}

void *MiniMenuState._fillColor.didset()
{
  swift_getKeyPath();
  v9[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = (void *)swift_release();
  if ((*(unsigned char *)(v0 + 56) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      objc_super v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v9, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v10;
        uint64_t v5 = v11;
        __swift_project_boxed_opaque_existential_1(v9, v10);
        swift_getKeyPath();
        id v8 = (id)v0;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        id v8 = *(id *)(v0 + 48);
        uint64_t v6 = *(void (**)(id *, uint64_t, uint64_t))(v5 + 88);
        id v7 = v8;
        v6(&v8, v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

id MiniMenuState.fillColor.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = *(void **)(v1 + 48);
  char v4 = *(unsigned char *)(v1 + 56);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return v3;
}

id key path getter for MiniMenuState.fillColor : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v4 = *(void **)(v3 + 48);
  char v5 = *(unsigned char *)(v3 + 56);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  return v4;
}

void key path setter for MiniMenuState.fillColor : MiniMenuState(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

void *MiniMenuState._strokeColor.didset()
{
  swift_getKeyPath();
  v9[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = (void *)swift_release();
  if ((*(unsigned char *)(v0 + 72) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v9, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v10;
        uint64_t v5 = v11;
        __swift_project_boxed_opaque_existential_1(v9, v10);
        swift_getKeyPath();
        id v8 = (id)v0;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        id v8 = *(id *)(v0 + 64);
        uint64_t v6 = *(void (**)(id *, uint64_t, uint64_t))(v5 + 112);
        id v7 = v8;
        v6(&v8, v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

id MiniMenuState.strokeColor.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = *(void **)(v1 + 64);
  char v4 = *(unsigned char *)(v1 + 72);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return v3;
}

id key path getter for MiniMenuState.strokeColor : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v4 = *(void **)(v3 + 64);
  char v5 = *(unsigned char *)(v3 + 72);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  return v4;
}

void key path setter for MiniMenuState.strokeColor : MiniMenuState(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t MiniMenuState.strokeWidthIsMutable.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t key path getter for MiniMenuState.strokeWidthIsMutable : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 73);
  return result;
}

uint64_t key path setter for MiniMenuState.strokeWidthIsMutable : MiniMenuState()
{
  return swift_release();
}

void *MiniMenuState._strokeWidth.didset()
{
  swift_getKeyPath();
  v6[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = (void *)swift_release();
  if ((*(unsigned char *)(v0 + 88) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v6, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v7;
        uint64_t v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(void, void, uint64_t, uint64_t))(v5 + 136))(*(void *)(v0 + 80), 0, v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.strokeWidth.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 88);
}

double key path getter for MiniMenuState.strokeWidth : MiniMenuState@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 80);
  char v5 = *(unsigned char *)(v3 + 88);
  *(double *)a2 = result;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.strokeWidth : MiniMenuState()
{
  return swift_release();
}

uint64_t MiniMenuState.strokeIsRequired.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t key path getter for MiniMenuState.strokeIsRequired : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 89);
  return result;
}

uint64_t key path setter for MiniMenuState.strokeIsRequired : MiniMenuState()
{
  return swift_release();
}

void *MiniMenuState._fontName.didset()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  v10[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = (void *)swift_beginAccess();
  if ((*(unsigned char *)(v0 + 112) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      uint64_t v3 = result;
      uint64_t v4 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v4)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v10, *(void *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v5 = v11;
        uint64_t v6 = v12;
        __swift_project_boxed_opaque_existential_1(v10, v11);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v8 = *(void *)(v0 + 96);
        uint64_t v7 = *(void *)(v1 + 104);
        int64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 168);
        swift_bridgeObjectRetain();
        v9(v8, v7, v5, v6);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t (*MiniMenuState._fontName.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MiniMenuState._fontName.modify;
}

uint64_t MiniMenuState._fontName.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))MiniMenuState._fontName.didset);
}

uint64_t MiniMenuState.fontName.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for MiniMenuState.fontName : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 104);
  char v5 = *(unsigned char *)(v3 + 112);
  *(void *)a2 = *(void *)(v3 + 96);
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for MiniMenuState.fontName : MiniMenuState()
{
  return swift_bridgeObjectRelease();
}

void *closure #1 in MiniMenuState.fontName.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = a3;
  *(unsigned char *)(a1 + 112) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return MiniMenuState._fontName.didset();
}

void (*MiniMenuState.fontName.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC8PaperKit13MiniMenuState___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  v3[7] = MiniMenuState._fontName.modify((uint64_t)v3);
  return MiniMenuState.fontName.modify;
}

void MiniMenuState.fontName.modify(void *a1)
{
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  *uint64_t v1 = v1[4];
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  free(v1);
}

void *MiniMenuState._fontSize.didset()
{
  swift_getKeyPath();
  v6[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = (void *)swift_beginAccess();
  if ((*(unsigned char *)(v0 + 128) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v6, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v7;
        uint64_t v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(void, uint64_t, uint64_t))(v5 + 192))(*(void *)(v0 + 120), v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t (*MiniMenuState._fontSize.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MiniMenuState._fontSize.modify;
}

uint64_t MiniMenuState._fontSize.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))MiniMenuState._fontSize.didset);
}

uint64_t MiniMenuState.fontSize.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return *(void *)(v0 + 120);
}

uint64_t key path getter for MiniMenuState.fontSize : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 128);
  *(void *)a2 = *(void *)(v3 + 120);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.fontSize : MiniMenuState()
{
  return swift_release();
}

void (*MiniMenuState.fontSize.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC8PaperKit13MiniMenuState___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  v3[7] = MiniMenuState._fontSize.modify((uint64_t)v3);
  return MiniMenuState.fontSize.modify;
}

void MiniMenuState.fontSize.modify(void *a1)
{
}

void *MiniMenuState._bold.didset()
{
  swift_getKeyPath();
  v6[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = (void *)swift_beginAccess();
  if ((*(unsigned char *)(v0 + 130) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v6, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v7;
        uint64_t v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(void, uint64_t, uint64_t))(v5 + 240))(*(unsigned __int8 *)(v0 + 129), v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t (*MiniMenuState._bold.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MiniMenuState._bold.modify;
}

uint64_t MiniMenuState._bold.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))MiniMenuState._bold.didset);
}

uint64_t MiniMenuState.bold.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 130)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  return v1 | *(unsigned __int8 *)(v0 + 129);
}

uint64_t key path getter for MiniMenuState.bold : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 130);
  *a2 = *(unsigned char *)(v3 + 129);
  a2[1] = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.bold : MiniMenuState()
{
  return swift_release();
}

void (*MiniMenuState.bold.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC8PaperKit13MiniMenuState___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  v3[7] = MiniMenuState._bold.modify((uint64_t)v3);
  return MiniMenuState.bold.modify;
}

void MiniMenuState.bold.modify(void *a1)
{
}

void *MiniMenuState._italic.didset()
{
  swift_getKeyPath();
  v6[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = (void *)swift_beginAccess();
  if ((*(unsigned char *)(v0 + 132) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v6, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v7;
        uint64_t v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(void, uint64_t, uint64_t))(v5 + 264))(*(unsigned __int8 *)(v0 + 131), v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t (*MiniMenuState._italic.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return MiniMenuState._italic.modify;
}

uint64_t MiniMenuState._italic.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))MiniMenuState._italic.didset);
}

uint64_t MiniMenuState._fontName.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t MiniMenuState.italic.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 132)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  return v1 | *(unsigned __int8 *)(v0 + 131);
}

uint64_t key path getter for MiniMenuState.italic : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 132);
  *a2 = *(unsigned char *)(v3 + 131);
  a2[1] = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.italic : MiniMenuState()
{
  return swift_release();
}

void (*MiniMenuState.italic.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC8PaperKit13MiniMenuState___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  v3[7] = MiniMenuState._italic.modify((uint64_t)v3);
  return MiniMenuState.italic.modify;
}

void MiniMenuState.italic.modify(void *a1)
{
}

void *MiniMenuState._underline.didset()
{
  swift_getKeyPath();
  v6[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = (void *)swift_release();
  if ((*(unsigned char *)(v0 + 134) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v6, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v7;
        uint64_t v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(void, uint64_t, uint64_t))(v5 + 288))(*(unsigned __int8 *)(v0 + 133), v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.underline.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v0 + 134)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  return v1 | *(unsigned __int8 *)(v0 + 133);
}

uint64_t key path getter for MiniMenuState.underline : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  char v5 = *(unsigned char *)(v3 + 134);
  *a2 = *(unsigned char *)(v3 + 133);
  a2[1] = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.underline : MiniMenuState()
{
  return swift_release();
}

void *MiniMenuState._strikethrough.didset()
{
  swift_getKeyPath();
  v6[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = (void *)swift_release();
  if ((*(unsigned char *)(v0 + 136) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v6, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v7;
        uint64_t v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(void, uint64_t, uint64_t))(v5 + 312))(*(unsigned __int8 *)(v0 + 135), v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.strikethrough.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v0 + 136)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  return v1 | *(unsigned __int8 *)(v0 + 135);
}

uint64_t key path getter for MiniMenuState.strikethrough : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  char v5 = *(unsigned char *)(v3 + 136);
  *a2 = *(unsigned char *)(v3 + 135);
  a2[1] = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.strikethrough : MiniMenuState()
{
  return swift_release();
}

void *MiniMenuState._textAlignment.didset()
{
  swift_getKeyPath();
  v6[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = (void *)swift_release();
  if ((*(unsigned char *)(v0 + 152) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v6, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v7;
        uint64_t v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(void, uint64_t, uint64_t))(v5 + 216))(*(void *)(v0 + 144), v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.textAlignment.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + 144);
}

uint64_t key path getter for MiniMenuState.textAlignment : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  char v5 = *(unsigned char *)(v3 + 152);
  *(void *)a2 = *(void *)(v3 + 144);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.textAlignment : MiniMenuState()
{
  return swift_release();
}

void *MiniMenuState._fontColor.didset()
{
  swift_getKeyPath();
  v9[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = (void *)swift_beginAccess();
  if ((*(unsigned char *)(v0 + 168) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v9, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v10;
        uint64_t v5 = v11;
        __swift_project_boxed_opaque_existential_1(v9, v10);
        swift_getKeyPath();
        id v8 = (id)v0;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        id v8 = *(id *)(v0 + 160);
        uint64_t v6 = *(void (**)(id *, uint64_t, uint64_t))(v5 + 336);
        id v7 = v8;
        v6(&v8, v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

id MiniMenuState.fontColor.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 160);
  char v4 = *(unsigned char *)(v1 + 168);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return v3;
}

id key path getter for MiniMenuState.fontColor : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  char v4 = *(void **)(v3 + 160);
  char v5 = *(unsigned char *)(v3 + 168);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  return v4;
}

void key path setter for MiniMenuState.fontColor : MiniMenuState(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

void *closure #1 in MiniMenuState.fontColor.setter(uint64_t a1, void *a2, char a3)
{
  swift_beginAccess();
  uint64_t v6 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = a2;
  *(unsigned char *)(a1 + 168) = a3;
  id v7 = a2;

  return MiniMenuState._fontColor.didset();
}

uint64_t MiniMenuState.grapableExpressionsState.getter()
{
  return swift_retain();
}

uint64_t key path getter for MiniMenuState.grapableExpressionsState : MiniMenuState@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 176);
  return swift_retain();
}

uint64_t key path setter for MiniMenuState.grapableExpressionsState : MiniMenuState()
{
  return swift_release();
}

uint64_t MiniMenuState.boldAllowed.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 184);
}

uint64_t key path getter for MiniMenuState.boldAllowed : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 184);
  return result;
}

uint64_t key path setter for MiniMenuState.boldAllowed : MiniMenuState()
{
  return swift_release();
}

uint64_t MiniMenuState.italicAllowed.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 185);
}

uint64_t key path getter for MiniMenuState.italicAllowed : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 185);
  return result;
}

uint64_t key path setter for MiniMenuState.italicAllowed : MiniMenuState()
{
  return swift_release();
}

uint64_t MiniMenuState.hasMultipleFontSizes.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 186);
}

uint64_t key path getter for MiniMenuState.hasMultipleFontSizes : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 186);
  return result;
}

uint64_t key path setter for MiniMenuState.hasMultipleFontSizes : MiniMenuState()
{
  return swift_release();
}

void *MiniMenuState._opacity.didset()
{
  swift_getKeyPath();
  v6[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = (void *)swift_release();
  if ((*(unsigned char *)(v0 + 200) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v6, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v7;
        uint64_t v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(uint64_t, uint64_t, double))(v5 + 408))(v4, v5, *(double *)(v0 + 192));

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.opacity.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 200);
}

double key path getter for MiniMenuState.opacity : MiniMenuState@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 192);
  char v5 = *(unsigned char *)(v3 + 200);
  *(double *)a2 = result;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.opacity : MiniMenuState()
{
  return swift_release();
}

uint64_t MiniMenuState.hasMultipleOpacities.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 201);
}

uint64_t key path getter for MiniMenuState.hasMultipleOpacities : MiniMenuState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 201);
  return result;
}

uint64_t key path setter for MiniMenuState.hasMultipleOpacities : MiniMenuState()
{
  return swift_release();
}

void *MiniMenuState._lineEnds.didset()
{
  swift_getKeyPath();
  v13[0] = v0;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = (void *)swift_release();
  if ((*(unsigned char *)(v0 + 233) & 1) == 0)
  {
    uint64_t result = (void *)MEMORY[0x210550400](v0 + 16);
    if (result)
    {
      id v2 = result;
      uint64_t v3 = *(void *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *result)
                                                                                     + 0x440))(v13, *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        uint64_t v4 = v14;
        uint64_t v5 = v15;
        __swift_project_boxed_opaque_existential_1(v13, v14);
        swift_getKeyPath();
        uint64_t v11 = v0;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        char v6 = *(unsigned char *)(v0 + 216);
        uint64_t v7 = *(void *)(v0 + 224);
        char v8 = *(unsigned char *)(v0 + 232);
        uint64_t v11 = *(void *)(v0 + 208);
        char v12 = v6;
        uint64_t v9 = v7;
        char v10 = v8;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v5 + 384))(&v11, &v9, v4, v5);

        return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.lineEnds.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  char v4 = *(unsigned char *)(v1 + 216);
  uint64_t v5 = *(void *)(v1 + 224);
  char v6 = *(unsigned char *)(v1 + 232);
  char v7 = *(unsigned char *)(v1 + 233);
  *(void *)a1 = *(void *)(v1 + 208);
  *(unsigned char *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v7;
  return result;
}

uint64_t key path getter for MiniMenuState.lineEnds : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  char v5 = *(unsigned char *)(v3 + 216);
  uint64_t v6 = *(void *)(v3 + 224);
  char v7 = *(unsigned char *)(v3 + 232);
  char v8 = *(unsigned char *)(v3 + 233);
  *(void *)a2 = *(void *)(v3 + 208);
  *(unsigned char *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 25) = v8;
  return result;
}

uint64_t key path setter for MiniMenuState.lineEnds : MiniMenuState()
{
  return swift_release();
}

uint64_t MiniMenuState.feedbackAction.getter()
{
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 240);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in MiniMenuState.feedbackAction.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 240) = a2;
  *(void *)(a1 + 248) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void MiniMenuState.init(visible:options:)()
{
  uint64_t v1 = v0;
  swift_unknownObjectWeakInit();
  type metadata accessor for MiniPopoverState();
  id v2 = (_OWORD *)swift_allocObject();
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  *(void *)(v0 + 24) = v2;
  *(unsigned char *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  *(void *)(v0 + 64) = 0;
  *(_WORD *)(v0 + 72) = 257;
  *(void *)(v0 + 80) = 0x3FF0000000000000;
  *(_WORD *)(v0 + 88) = 1;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0xE000000000000000;
  *(unsigned char *)(v0 + 112) = 1;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0x1000100010001;
  *(unsigned char *)(v0 + 136) = 1;
  *(void *)(v0 + 144) = 0;
  *(unsigned char *)(v0 + 152) = 1;
  memset(v10, 0, 24);
  void v10[3] = 1.0;
  uint64_t v3 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (v3)
  {
    char v4 = v3;
    CGColorRef v5 = CGColorCreate(v3, v10);

    if (v5)
    {
      *(void *)(v1 + 160) = v5;
      *(unsigned char *)(v1 + 168) = 1;
      type metadata accessor for GraphableExpressionsState(0);
      uint64_t v6 = swift_allocObject();
      swift_unknownObjectWeakInit();
      *(void *)(v6 + 24) = MEMORY[0x263F8EE78];
      ObservationRegistrar.init()();
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x270FA5388](KeyPath);
      _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      GraphableExpressionsState.update()();
      *(void *)(v1 + 176) = v6;
      *(_WORD *)(v1 + 184) = 257;
      *(unsigned char *)(v1 + 186) = 1;
      *(void *)(v1 + 192) = 0x3FF0000000000000;
      *(_WORD *)(v1 + 200) = 1;
      *(void *)(v1 + 208) = 0;
      *(unsigned char *)(v1 + 216) = 0;
      *(void *)(v1 + 224) = 0;
      *(_WORD *)(v1 + 232) = 256;
      *(void *)(v1 + 240) = 0;
      *(void *)(v1 + 248) = 0;
      ObservationRegistrar.init()();
      uint64_t v8 = swift_getKeyPath();
      MEMORY[0x270FA5388](v8);
      _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      uint64_t v9 = swift_getKeyPath();
      MEMORY[0x270FA5388](v9);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void MiniMenuState.update(from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v6 = v5;
  swift_getKeyPath();
  uint64_t aBlock = v5;
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  uint64_t v8 = *(void *)((char *)a5 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v8) {
    goto LABEL_99;
  }
  uint64_t v148 = a5;
  (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *a5) + 0x440))(v157, *(void *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
  uint64_t v9 = v158;
  uint64_t v10 = v159;
  __swift_project_boxed_opaque_existential_1(v157, v158);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10))
  {
    uint64_t v11 = v158;
    uint64_t v12 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 104))(&aBlock, v11, v12);
    uint64_t v13 = aBlock;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v14 = *(void **)(v5 + 64);
    *(void *)(v5 + 64) = v13;
    *(unsigned char *)(v5 + 72) = 1;

    MiniMenuState._strokeColor.didset();
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v15 = v158;
    uint64_t v16 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 128))(v15, v16);
    if ((v18 & 1) == 0)
    {
      uint64_t v19 = v17;
      swift_getKeyPath();
      uint64_t aBlock = v5;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t aBlock = v5;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      *(void *)(v5 + 80) = v19;
      *(unsigned char *)(v5 + 88) = 1;
      MiniMenuState._strokeWidth.didset();
      uint64_t aBlock = v5;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
    }
    uint64_t v20 = v158;
    uint64_t v21 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    (*(void (**)(uint64_t, uint64_t))(v21 + 128))(v20, v21);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    uint64_t aBlock = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v23 = v158;
    uint64_t v24 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    (*(void (**)(uint64_t, uint64_t))(v24 + 152))(v23, v24);
    uint64_t v25 = swift_getKeyPath();
    MEMORY[0x270FA5388](v25);
    uint64_t aBlock = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v26 = *(void *)(v5 + 40);
    if ((v26 & 2) == 0) {
      *(void *)(v5 + 40) = v26 | 2;
    }
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  uint64_t v27 = v148;
  uint64_t v28 = v158;
  uint64_t v29 = v159;
  __swift_project_boxed_opaque_existential_1(v157, v158);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29))
  {
    uint64_t v30 = v158;
    uint64_t v31 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v31 + 80))(&aBlock, v30, v31);
    uint64_t v32 = aBlock;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v33 = *(void **)(v5 + 48);
    *(void *)(v5 + 48) = v32;
    *(unsigned char *)(v5 + 56) = 1;

    MiniMenuState._fillColor.didset();
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v34 = *(void *)(v5 + 40);
    if ((v34 & 1) == 0) {
      *(void *)(v5 + 40) = v34 | 1;
    }
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  uint64_t v35 = v158;
  uint64_t v36 = v159;
  __swift_project_boxed_opaque_existential_1(v157, v158);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36))
  {
    uint64_t v37 = v158;
    uint64_t v38 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 160))(v37, v38);
    uint64_t v41 = v40;
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    *(void *)(v5 + 96) = v39;
    *(void *)(v5 + 104) = v41;
    *(unsigned char *)(v5 + 112) = 1;
    swift_bridgeObjectRelease();
    MiniMenuState._fontName.didset();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v42 = v158;
    uint64_t v43 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 184))(v42, v43);
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    *(void *)(v5 + 120) = v44;
    *(unsigned char *)(v5 + 128) = 1;
    MiniMenuState._fontSize.didset();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v45 = v158;
    uint64_t v46 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 208))(v45, v46);
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(void *)(v5 + 144) = v47;
    *(unsigned char *)(v5 + 152) = 1;
    MiniMenuState._textAlignment.didset();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v48 = v158;
    uint64_t v49 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    LOBYTE(v48) = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 232))(v48, v49);
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    *(unsigned char *)(v5 + 129) = v48 & 1;
    *(unsigned char *)(v5 + 130) = 1;
    MiniMenuState._bold.didset();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v50 = v158;
    uint64_t v51 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    LOBYTE(v50) = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 256))(v50, v51);
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    *(unsigned char *)(v5 + 131) = v50 & 1;
    *(unsigned char *)(v5 + 132) = 1;
    MiniMenuState._italic.didset();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v52 = v158;
    uint64_t v53 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    LOBYTE(v52) = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 280))(v52, v53);
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(unsigned char *)(v5 + 133) = v52 & 1;
    *(unsigned char *)(v5 + 134) = 1;
    MiniMenuState._underline.didset();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v54 = v158;
    uint64_t v55 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    LOBYTE(v54) = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 304))(v54, v55);
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(unsigned char *)(v5 + 135) = v54 & 1;
    *(unsigned char *)(v5 + 136) = 1;
    MiniMenuState._strikethrough.didset();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v56 = v158;
    uint64_t v57 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v57 + 328))(&aBlock, v56, v57);
    uint64_t v58 = aBlock;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    uint64_t v59 = *(void **)(v5 + 160);
    *(void *)(v5 + 160) = v58;
    *(unsigned char *)(v5 + 168) = 1;

    MiniMenuState._fontColor.didset();
    uint64_t v149 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v60 = v158;
    uint64_t v61 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    (*(void (**)(uint64_t, uint64_t))(v61 + 352))(v60, v61);
    uint64_t v62 = swift_getKeyPath();
    MEMORY[0x270FA5388](v62);
    uint64_t aBlock = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v63 = v158;
    uint64_t v64 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    (*(void (**)(uint64_t, uint64_t))(v64 + 360))(v63, v64);
    uint64_t v65 = swift_getKeyPath();
    MEMORY[0x270FA5388](v65);
    uint64_t aBlock = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v66 = v158;
    uint64_t v67 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    (*(void (**)(uint64_t, uint64_t))(v67 + 368))(v66, v67);
    uint64_t v68 = swift_getKeyPath();
    MEMORY[0x270FA5388](v68);
    uint64_t aBlock = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v69 = *(void *)(v5 + 40);
    if ((v69 & 4) == 0) {
      *(void *)(v5 + 40) = v69 | 4;
    }
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v27 = v148;
  }
  uint64_t v70 = v158;
  uint64_t v71 = v159;
  __swift_project_boxed_opaque_existential_1(v157, v158);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v71 + 32))(v70, v71))
  {
    uint64_t v72 = v158;
    uint64_t v73 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v73 + 376))(&aBlock, &v149, v72, v73);
    uint64_t v74 = aBlock;
    char v75 = v152;
    uint64_t v76 = v149;
    char v77 = v150;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(void *)(v5 + 208) = v74;
    *(unsigned char *)(v5 + 216) = v75;
    *(void *)(v5 + 224) = v76;
    *(unsigned char *)(v5 + 232) = v77;
    *(unsigned char *)(v5 + 233) = 1;
    MiniMenuState._lineEnds.didset();
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v78 = *(void *)(v5 + 40);
    if ((v78 & 8) == 0) {
      *(void *)(v5 + 40) = v78 | 8;
    }
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v27 = v148;
  }
  uint64_t v79 = v158;
  uint64_t v80 = v159;
  __swift_project_boxed_opaque_existential_1(v157, v158);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v80 + 40))(v79, v80))
  {
    uint64_t v81 = v158;
    uint64_t v82 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    double v83 = (*(double (**)(uint64_t, uint64_t))(v82 + 400))(v81, v82);
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(double *)(v5 + 192) = v83;
    *(unsigned char *)(v5 + 200) = 1;
    MiniMenuState._opacity.didset();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v84 = v158;
    uint64_t v85 = v159;
    __swift_project_boxed_opaque_existential_1(v157, v158);
    (*(void (**)(uint64_t, uint64_t))(v85 + 424))(v84, v85);
    uint64_t v86 = swift_getKeyPath();
    MEMORY[0x270FA5388](v86);
    uint64_t aBlock = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v87 = *(void *)(v5 + 40);
    if ((v87 & 0x10) == 0) {
      *(void *)(v5 + 40) = v87 | 0x10;
    }
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  uint64_t v88 = v158;
  uint64_t v89 = v159;
  __swift_project_boxed_opaque_existential_1(v157, v158);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v89 + 48))(v88, v89))
  {
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v90 = *(void *)(v5 + 40);
    if ((v90 & 0x100) == 0) {
      *(void *)(v5 + 40) = v90 | 0x100;
    }
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  uint64_t v91 = v158;
  uint64_t v92 = v159;
  __swift_project_boxed_opaque_existential_1(v157, v158);
  uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 432))(v91, v92);
  if (v93)
  {
    swift_getKeyPath();
    uint64_t aBlock = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v94 = *(void *)(v5 + 40);
    if ((v94 & 0x8000) == 0) {
      *(void *)(v5 + 40) = v94 | 0x8000;
    }
    uint64_t aBlock = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    uint64_t v93 = swift_release();
  }
  if (*(void *)(a2 + 16) && !*(void *)(a1 + 16))
  {
    unint64_t v95 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v27) + 0x320);
    uint64_t v96 = (void *)((uint64_t (*)(uint64_t))v95)(v93);
    if (v96)
    {
      uint64_t v97 = v96;
      unsigned int v98 = objc_msgSend(v96, sel_insertSpaceEnabled);

      if (v98)
      {
        swift_getKeyPath();
        uint64_t aBlock = v6;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t aBlock = v6;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v99 = *(void *)(v6 + 40);
        if ((v99 & 0x400) == 0) {
          *(void *)(v6 + 40) = v99 | 0x400;
        }
        uint64_t aBlock = v6;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        uint64_t v96 = (void *)swift_release();
      }
    }
    uint64_t v100 = (void *)((uint64_t (*)(void *))v95)(v96);
    if (v100)
    {
      uint64_t v101 = v100;
      unsigned int v102 = objc_msgSend(v100, sel_selectionSupportsCopyAsText);

      if (v102)
      {
        swift_getKeyPath();
        uint64_t aBlock = v6;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t aBlock = v6;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v103 = *(void *)(v6 + 40);
        if ((v103 & 0x200) == 0) {
          *(void *)(v6 + 40) = v103 | 0x200;
        }
        uint64_t aBlock = v6;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        swift_release();
        swift_getKeyPath();
        uint64_t aBlock = v6;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t aBlock = v6;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v104 = *(void *)(v6 + 40);
        if ((v104 & 0x1000) == 0) {
          *(void *)(v6 + 40) = v104 | 0x1000;
        }
        uint64_t aBlock = v6;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        uint64_t v105 = swift_release();
        uint64_t v106 = (void *)((uint64_t (*)(uint64_t))v95)(v105);
        if (v106)
        {
          uint64_t v107 = v106;
          unsigned int v108 = objc_msgSend(v106, sel_selectionSupportsTranslate);

          if (v108)
          {
            swift_getKeyPath();
            uint64_t aBlock = v6;
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            uint64_t aBlock = v6;
            swift_getKeyPath();
            ObservationRegistrar.willSet<A, B>(_:keyPath:)();
            swift_release();
            uint64_t v109 = *(void *)(v6 + 40);
            if ((v109 & 0x800) == 0) {
              *(void *)(v6 + 40) = v109 | 0x800;
            }
            uint64_t aBlock = v6;
            swift_getKeyPath();
            ObservationRegistrar.didSet<A, B>(_:keyPath:)();
            uint64_t v106 = (void *)swift_release();
          }
        }
        uint64_t v110 = ((uint64_t (*)(void *))v95)(v106);
        if (v110)
        {
          uint64_t v111 = (void *)v110;
          uint64_t v112 = swift_allocObject();
          swift_weakInit();
          unint64_t v155 = (unint64_t)partial apply for closure #1 in MiniMenuState.update(from:in:);
          uint64_t v156 = v112;
          uint64_t aBlock = MEMORY[0x263EF8330];
          uint64_t v152 = 1107296256;
          unint64_t v153 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
          char v154 = (ValueMetadata *)&block_descriptor_43;
          v113 = _Block_copy(&aBlock);
          swift_release();
          objc_msgSend(v111, sel_selectionSupportsRefinement_, v113);
          _Block_release(v113);
        }
      }
    }
    uint64_t v114 = (void *)v95();
    if (v114)
    {
      char v115 = v114;
      unsigned int v116 = objc_msgSend(v114, sel_selectionSupportsSnapToShape);

      if (v116)
      {
        swift_getKeyPath();
        uint64_t aBlock = v6;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t aBlock = v6;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v117 = *(void *)(v6 + 40);
        if ((v117 & 0x4000) == 0) {
          *(void *)(v6 + 40) = v117 | 0x4000;
        }
        uint64_t aBlock = v6;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        swift_release();
      }
    }
    char v154 = &type metadata for PencilAndPaperFeatureFlags;
    unint64_t v155 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
    LOBYTE(aBlock) = 9;
    char v118 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    if (v118)
    {
      swift_getKeyPath();
      uint64_t aBlock = v6;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t aBlock = v6;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v119 = *(void *)(v6 + 40);
      if ((v119 & 0x80000) == 0) {
        *(void *)(v6 + 40) = v119 | 0x80000;
      }
      uint64_t aBlock = v6;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
    }
  }
  uint64_t v120 = v158;
  uint64_t v121 = v159;
  __swift_project_boxed_opaque_existential_1(v157, v158);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v121 + 56))(v120, v121))
  {
    swift_getKeyPath();
    uint64_t aBlock = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v6;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v122 = *(void *)(v6 + 40);
    if ((v122 & 0x40) == 0) {
      *(void *)(v6 + 40) = v122 | 0x40;
    }
    uint64_t aBlock = v6;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    uint64_t aBlock = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v6;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v123 = *(void *)(v6 + 40);
    if ((v123 & 0x40000) == 0) {
      *(void *)(v6 + 40) = v123 | 0x40000;
    }
    uint64_t aBlock = v6;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  uint64_t v124 = v158;
  uint64_t v125 = v159;
  __swift_project_boxed_opaque_existential_1(v157, v158);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v125 + 64))(v124, v125))
  {
    swift_getKeyPath();
    uint64_t aBlock = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t aBlock = v6;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v126 = *(void *)(v6 + 40);
    if ((v126 & 0x20) == 0) {
      *(void *)(v6 + 40) = v126 | 0x20;
    }
    uint64_t aBlock = v6;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  uint64_t v127 = v158;
  uint64_t v128 = v159;
  __swift_project_boxed_opaque_existential_1(v157, v158);
  char v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v128 + 72))(v127, v128);
  outlined init with copy of FindResult((uint64_t)v157, (uint64_t)&aBlock);
  if (v129)
  {
    uint64_t v130 = v154;
    unint64_t v131 = v155;
    __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v154);
    char v132 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v131 + 56))(v130, v131);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    if ((v132 & 1) == 0)
    {
      swift_getKeyPath();
      uint64_t v149 = v6;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v149 = v6;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v133 = *(void *)(v6 + 40);
      if ((v133 & 0x20000) == 0) {
        *(void *)(v6 + 40) = v133 | 0x20000;
      }
      uint64_t v149 = v6;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  }
  if (CHGetPersonalizedSynthesisSupportState() >= 4)
  {
    swift_getKeyPath();
    uint64_t v149 = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if ((*(unsigned char *)(v6 + 40) & 4) != 0
      && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))((*MEMORY[0x263F8EED0] & *v27) + 0x4B8))(a1, a2, a3, a4 & 1) & 1) != 0)
    {
      swift_getKeyPath();
      uint64_t v149 = v6;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v149 = v6;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v134 = *(void *)(v6 + 40);
      if ((v134 & 0x80) == 0) {
        *(void *)(v6 + 40) = v134 | 0x80;
      }
      uint64_t v149 = v6;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
    }
  }
  uint64_t v135 = v27;
  uint64_t v136 = swift_bridgeObjectRetain();
  unint64_t v137 = specialized Sequence.compactMap<A>(_:)(v136, v135);
  swift_bridgeObjectRelease();

  if (v137 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v142 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v142 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v143 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v143) {
        goto LABEL_85;
      }
    }
LABEL_95:
    swift_bridgeObjectRelease();
LABEL_96:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v157);
    return;
  }
  if (*(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1) {
    goto LABEL_95;
  }
LABEL_85:
  if ((v137 & 0xC000000000000001) != 0)
  {
    id v138 = (id)MEMORY[0x21054E050](0, v137);
LABEL_88:
    v139 = v138;
    swift_bridgeObjectRelease();
    type metadata accessor for GraphCanvasElementView(0);
    if (swift_dynamicCastClass())
    {
      swift_getKeyPath();
      uint64_t v149 = v6;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v149 = v6;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v140 = *(void *)(v6 + 40);
      if ((v140 & 0x10000) == 0) {
        *(void *)(v6 + 40) = v140 | 0x10000;
      }
      uint64_t v149 = v6;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
      GraphCanvasElementView.cachedGraphableExpressionsState.getter();
      uint64_t v141 = swift_getKeyPath();
      MEMORY[0x270FA5388](v141);
      uint64_t v149 = v6;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

      swift_release();
      swift_release();
    }
    else
    {
    }
    goto LABEL_96;
  }
  if (*(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v138 = *(id *)(v137 + 32);
    goto LABEL_88;
  }
  __break(1u);
LABEL_99:
  __break(1u);
}

uint64_t closure #1 in MiniMenuState.update(from:in:)(uint64_t result)
{
  if (result)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v1 = result;
      swift_getKeyPath();
      _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v2 = *(void *)(v1 + 40);
      if ((v2 & 0x2000) == 0) {
        *(void *)(v1 + 40) = v2 | 0x2000;
      }
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

id *MiniMenuState.deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC8PaperKit13MiniMenuState___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MiniMenuState.__deallocating_deinit()
{
  MiniMenuState.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for MiniMenuState()
{
  return type metadata accessor for MiniMenuState();
}

uint64_t type metadata accessor for MiniMenuState()
{
  uint64_t result = type metadata singleton initialization cache for MiniMenuState;
  if (!type metadata singleton initialization cache for MiniMenuState) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for MiniMenuState()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

ValueMetadata *type metadata accessor for MiniMenuOptions()
{
  return &type metadata for MiniMenuOptions;
}

unint64_t lazy protocol witness table accessor for type MiniMenuOptions and conformance MiniMenuOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions;
  if (!lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions;
  if (!lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions;
  if (!lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions;
  if (!lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions);
  }
  return result;
}

uint64_t (*protocol witness for TextFormattingState.fontName.modify in conformance MiniMenuState(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = MiniMenuState.fontName.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t (*protocol witness for TextFormattingState.fontSize.modify in conformance MiniMenuState(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = MiniMenuState.fontSize.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for TextFormattingState.textAlignment.setter in conformance MiniMenuState()
{
  return swift_release();
}

uint64_t protocol witness for TextFormattingState.bold.setter in conformance MiniMenuState()
{
  return swift_release();
}

uint64_t (*protocol witness for TextFormattingState.bold.modify in conformance MiniMenuState(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = MiniMenuState.bold.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for TextFormattingState.italic.setter in conformance MiniMenuState()
{
  return swift_release();
}

uint64_t (*protocol witness for TextFormattingState.italic.modify in conformance MiniMenuState(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = MiniMenuState.italic.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for TextFormattingState.underline.setter in conformance MiniMenuState()
{
  return swift_release();
}

uint64_t protocol witness for TextFormattingState.strikethrough.setter in conformance MiniMenuState()
{
  return swift_release();
}

void protocol witness for TextFormattingState.fontColor.setter in conformance MiniMenuState(void **a1)
{
  unint64_t v1 = *a1;
  swift_getKeyPath();
  _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance MiniMenuState@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for MiniMenuState();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for MiniMenuState(uint64_t a1)
{
  uint64_t result = _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0(&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  *(void *)(a1 + 8) = result;
  return result;
}

void partial apply for closure #1 in MiniMenuState.italicAllowed.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 185) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in MiniMenuState.boldAllowed.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 184) = *(unsigned char *)(v0 + 24);
}

void *partial apply for closure #1 in MiniMenuState.fontColor.setter()
{
  return closure #1 in MiniMenuState.fontColor.setter(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

void *partial apply for closure #1 in MiniMenuState.strikethrough.setter()
{
  return partial apply for closure #1 in MiniMenuState.strikethrough.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned char *)(v0 + 25);
  *(unsigned char *)(v1 + 135) = *(unsigned char *)(v0 + 24);
  *(unsigned char *)(v1 + 136) = v2;
  return MiniMenuState._strikethrough.didset();
}

void *partial apply for closure #1 in MiniMenuState.underline.setter()
{
  return partial apply for closure #1 in MiniMenuState.underline.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned char *)(v0 + 25);
  *(unsigned char *)(v1 + 133) = *(unsigned char *)(v0 + 24);
  *(unsigned char *)(v1 + 134) = v2;
  return MiniMenuState._underline.didset();
}

void *partial apply for closure #1 in MiniMenuState.italic.setter()
{
  return partial apply for closure #1 in MiniMenuState.italic.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned char *)(v0 + 24);
  uint64_t v3 = *(unsigned char *)(v0 + 25);
  swift_beginAccess();
  *(unsigned char *)(v1 + 131) = v2;
  *(unsigned char *)(v1 + 132) = v3;
  return MiniMenuState._italic.didset();
}

void *partial apply for closure #1 in MiniMenuState.bold.setter()
{
  return partial apply for closure #1 in MiniMenuState.bold.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned char *)(v0 + 24);
  uint64_t v3 = *(unsigned char *)(v0 + 25);
  swift_beginAccess();
  *(unsigned char *)(v1 + 129) = v2;
  *(unsigned char *)(v1 + 130) = v3;
  return MiniMenuState._bold.didset();
}

void *partial apply for closure #1 in MiniMenuState.textAlignment.setter()
{
  return partial apply for closure #1 in MiniMenuState.textAlignment.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned char *)(v0 + 32);
  *(void *)(v1 + 144) = *(void *)(v0 + 24);
  *(unsigned char *)(v1 + 152) = v2;
  return MiniMenuState._textAlignment.didset();
}

void *partial apply for closure #1 in MiniMenuState.fontSize.setter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 32);
  swift_beginAccess();
  *(void *)(v1 + 120) = v2;
  *(unsigned char *)(v1 + 128) = v3;
  return MiniMenuState._fontSize.didset();
}

void *partial apply for closure #1 in MiniMenuState.fontName.setter()
{
  return closure #1 in MiniMenuState.fontName.setter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

void partial apply for closure #1 in MiniMenuState.options.setter()
{
  *(void *)(*(void *)(v0 + 16) + 40) = *(void *)(v0 + 24);
}

uint64_t partial apply for closure #1 in MiniMenuState.grapableExpressionsState.setter()
{
  return partial apply for closure #1 in MiniMenuState.grapableExpressionsState.setter();
}

{
  uint64_t v0;

  *(void *)(*(void *)(v0 + 16) + 176) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_20C5A2D30()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in MiniMenuState.update(from:in:)(uint64_t result)
{
  return closure #1 in MiniMenuState.update(from:in:)(result);
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_43()
{
  return swift_release();
}

void partial apply for closure #1 in MiniMenuState.hasMultipleOpacities.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 201) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in MiniMenuState.hasMultipleFontSizes.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 186) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in MiniMenuState.strokeWidthIsMutable.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 73) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in MiniMenuState.strokeIsRequired.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 89) = *(unsigned char *)(v0 + 24);
}

void *partial apply for closure #1 in MiniMenuState.strokeWidth.setter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 32);
  *(void *)(v1 + 80) = *(void *)(v0 + 24);
  *(unsigned char *)(v1 + 88) = v2;
  return MiniMenuState._strokeWidth.didset();
}

void *partial apply for closure #1 in MiniMenuState.strokeColor.setter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 32);
  char v4 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = v1;
  *(unsigned char *)(v2 + 72) = v3;
  id v5 = v1;

  return MiniMenuState._strokeColor.didset();
}

void *partial apply for closure #1 in MiniMenuState.fillColor.setter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 32);
  char v4 = *(void **)(v2 + 48);
  *(void *)(v2 + 48) = v1;
  *(unsigned char *)(v2 + 56) = v3;
  id v5 = v1;

  return MiniMenuState._fillColor.didset();
}

void *partial apply for closure #1 in MiniMenuState.lineEnds.setter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  char v4 = *(unsigned char *)(v0 + 48);
  char v5 = *(unsigned char *)(v0 + 49);
  *(void *)(v1 + 208) = *(void *)(v0 + 24);
  *(unsigned char *)(v1 + 216) = v2;
  *(void *)(v1 + 224) = v3;
  *(unsigned char *)(v1 + 232) = v4;
  *(unsigned char *)(v1 + 233) = v5;
  return MiniMenuState._lineEnds.didset();
}

void *partial apply for closure #1 in MiniMenuState.opacity.setter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 32);
  *(void *)(v1 + 192) = *(void *)(v0 + 24);
  *(unsigned char *)(v1 + 200) = v2;
  return MiniMenuState._opacity.didset();
}

uint64_t partial apply for closure #1 in GraphableExpressionsState.view.setter()
{
  return closure #1 in GraphableExpressionsState.view.setter();
}

uint64_t _s8PaperKit13MiniMenuStateCAC7Combine16ObservableObjectAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in MiniMenuState.visible.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 32) = *(unsigned char *)(v0 + 24);
}

void closure #1 in MiniMenuState.boldAllowed.setterpartial apply()
{
}

void closure #1 in MiniMenuState.italicAllowed.setterpartial apply()
{
}

void closure #1 in MiniMenuState.strokeIsRequired.setterpartial apply()
{
}

void closure #1 in MiniMenuState.strokeWidthIsMutable.setterpartial apply()
{
}

void closure #1 in MiniMenuState.hasMultipleFontSizes.setterpartial apply()
{
}

void closure #1 in MiniMenuState.hasMultipleOpacities.setterpartial apply()
{
}

void *closure #1 in MiniMenuState.fontColor.setterpartial apply()
{
  return partial apply for closure #1 in MiniMenuState.fontColor.setter();
}

void closure #1 in MiniMenuState.options.setterpartial apply()
{
}

id LineEndControl.updateUI()()
{
  uint64_t v1 = v0;
  char v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14LineEndControl_noArrowButton);
  uint64_t v3 = (objc_class *)type metadata accessor for AttributeStylingButton();
  v13.receiver = v2;
  v13.super_class = v3;
  objc_msgSendSuper2(&v13, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  char v4 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14LineEndControl_oneArrowButton);
  v12.receiver = v4;
  v12.super_class = v3;
  objc_msgSendSuper2(&v12, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  char v5 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14LineEndControl_twoArrowButton);
  v11.receiver = v5;
  v11.super_class = v3;
  objc_msgSendSuper2(&v11, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds + 24) & 1) != 0
    || *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds + 16))
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds + 8) & 1 | (*(unsigned char *)(v1
                                                                                                 + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds) != 0))
    {
      uint64_t v10 = v5;
      uint64_t v6 = (objc_super *)&v10;
      goto LABEL_8;
    }
LABEL_7:
    v9.receiver = v4;
    uint64_t v6 = &v9;
    goto LABEL_8;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds + 8) & 1 | (*(unsigned char *)(v1
                                                                                               + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds) != 0))
    goto LABEL_7;
  uint64_t v8 = v2;
  uint64_t v6 = (objc_super *)&v8;
LABEL_8:
  v6->super_class = v3;
  -[objc_super setSelected:](v6, sel_setSelected_, 1, v8);
  return AttributeStylingButton.isSelected.didset();
}

Swift::Void __swiftcall LineEndControl.layoutSubviews()()
{
  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v9, sel_layoutSubviews);
  id v1 = objc_msgSend(v0, sel_layer);
  if (v0[OBJC_IVAR____TtC8PaperKit14LineEndControl_useCapsuleStyle] == 1)
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit14LineEndControl_axis];
    objc_msgSend(v0, sel_bounds);
    if (v2) {
      double Width = CGRectGetWidth(*(CGRect *)&v3);
    }
    else {
      double Width = CGRectGetHeight(*(CGRect *)&v3);
    }
    double v8 = Width * 0.5;
  }
  else
  {
    double v8 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit14LineEndControl_regularCornerRadius];
  }
  objc_msgSend(v1, sel_setCornerRadius_, v8);
}

uint64_t type metadata accessor for LineEndControl()
{
  return self;
}

uint64_t PageId.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v43 = *(void *)(v2 - 8);
  uint64_t v44 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v42 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v45 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v8 = (char *)&v41 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x270FA5388](v9 - 8);
  objc_super v11 = (uint64_t *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v49 = 0;
  unint64_t v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)0xE300000000000000;
  uint64_t v49 = 3826793;
  unint64_t v50 = 0xE300000000000000;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v0, (uint64_t)v14, &demangling cache variable for type metadata for PDFPageID?);
  uint64_t v16 = type metadata accessor for PDFPageID();
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  int v18 = v17(v14, 1, v16);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for PDFPageID?);
  uint64_t v19 = 7104878;
  if (v18 != 1)
  {
    uint64_t v41 = v1;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v1, (uint64_t)v11, &demangling cache variable for type metadata for PDFPageID?);
    uint64_t result = v17((char *)v11, 1, v16);
    if (result == 1)
    {
      __break(1u);
      goto LABEL_10;
    }
    uint64_t v47 = 0;
    unint64_t v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    uint64_t v47 = 979857531;
    unint64_t v48 = 0xE400000000000000;
    uint64_t v46 = *v11;
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0x3A7465737361202CLL;
    v22._object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    uint64_t v23 = CRAsset.digest.getter();
    unint64_t v25 = v24;
    Swift::String v26 = Data.base64EncodedString(options:)(0);
    outlined consume of Data._Representation(v23, v25);
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 125;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    uint64_t v19 = v47;
    uint64_t v15 = (void *)v48;
    _s8PaperKit9PDFPageIDVWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    uint64_t v1 = v41;
  }
  v28._uint64_t countAndFlagsBits = v19;
  v28._object = v15;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 0x6150726570617020;
  v29._object = (void *)0xEB000000003A6567;
  String.append(_:)(v29);
  uint64_t v30 = v1 + *(int *)(type metadata accessor for PageId(0) + 20);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v30, (uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v8, 1, v31);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  if (v34 == 1)
  {
    uint64_t v35 = (void *)0xE300000000000000;
    uint64_t v36 = 7104878;
LABEL_8:
    v40._uint64_t countAndFlagsBits = v36;
    v40._object = v35;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    return v49;
  }
  uint64_t v37 = v45;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v30, v45, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t result = v33((char *)v37, 1, v31);
  if (result != 1)
  {
    uint64_t v38 = v42;
    MEMORY[0x21054B930](v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v37, v31);
    uint64_t v36 = CRKeyPath.description.getter();
    uint64_t v35 = v39;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v44);
    goto LABEL_8;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t (*PaperKitPDFPage.pageId.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaperKitPDFPage.AnnotationIDState(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (!v2) {
    return !v3;
  }
  if (v2 == 1) {
    return v3 == 1;
  }
  if (v3 < 2) {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

void one-time initialization function for blankPageImage()
{
  v2.double width = 1.0;
  v2.double height = 1.0;
  UIGraphicsBeginImageContext(v2);
  uint64_t v0 = UIGraphicsGetImageFromCurrentImageContext();
  if (v0)
  {
    uint64_t v1 = (uint64_t)v0;
    UIGraphicsEndImageContext();
    static PaperKitPDFPage.blankPageImage = v1;
  }
  else
  {
    __break(1u);
  }
}

void PaperKitPDFPage.copy(with:)(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = (objc_class *)type metadata accessor for PaperKitPDFPage(0);
  v20.receiver = v2;
  v20.super_class = v8;
  objc_msgSendSuper2(&v20, sel_copyWithZone_, a1);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  uint64_t v9 = v19;
  uint64_t v10 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
  uint64_t v11 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render + 8];
  uint64_t v12 = (uint64_t *)&v19[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
  uint64_t v13 = *(void *)&v19[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
  *uint64_t v12 = v10;
  v12[1] = v11;
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v10);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v13);
  uint64_t v14 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v14, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v15 = (uint64_t)&v9[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v7, v15, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  swift_endAccess();
  unint64_t v16 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState];
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = 0;
  outlined consume of PaperKitPDFPage.AnnotationIDState(v16);
  uint64_t v17 = v9;
  objc_msgSend(v17, sel_setBookmarked_, objc_msgSend(v2, sel_isBookmarked));

  a2[3] = (char *)v8;
  *a2 = v17;
}

uint64_t PaperKitPDFPage.annotations.getter()
{
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for PaperKitPDFPage(0);
  id v1 = objc_msgSendSuper2(&v9, sel_annotations);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (one-time initialization token for lock != -1) {
    uint64_t v3 = swift_once();
  }
  MEMORY[0x270FA5388](v3);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = v5 + 4;
  os_unfair_lock_lock(v5 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v7);
  os_unfair_lock_unlock(v6);
  return v2;
}

void closure #1 in PaperKitPDFPage.annotations.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v39 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRKeyPath();
  uint64_t v51 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  objc_super v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v34 - v11;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRKeyPath, PDFAnnotation));
  MEMORY[0x270FA5388](v50);
  uint64_t v49 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState);
  uint64_t v54 = a2;
  if (v14 >= 2)
  {
    uint64_t v35 = OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState;
    uint64_t v36 = v2;
    uint64_t v37 = a1;
    a1 = *(void *)(v14 + 16);
    outlined copy of PaperKitPDFPage.AnnotationIDState(v14);
    swift_bridgeObjectRetain();
    uint64_t v48 = a1;
    if (a1)
    {
      unint64_t v15 = 0;
      uint64_t v52 = v51 + 16;
      uint64_t v16 = v54 & 0xFFFFFFFFFFFFFF8;
      if (v54 < 0) {
        uint64_t v17 = v54;
      }
      else {
        uint64_t v17 = v54 & 0xFFFFFFFFFFFFFF8;
      }
      v34[1] = v17;
      uint64_t v41 = (void (**)(char *, char *, uint64_t))(v51 + 32);
      uint64_t v42 = v54 & 0xFFFFFFFFFFFFFF8;
      uint64_t v38 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56);
      unint64_t v45 = v54 & 0xC000000000000001;
      uint64_t v46 = (void (**)(char *, uint64_t))(v51 + 8);
      unint64_t v47 = (unint64_t)v54 >> 62;
      unint64_t v43 = v14;
      uint64_t v44 = v9;
      Swift::String v40 = v12;
      uint64_t v18 = v49;
      while (v15 < *(void *)(v14 + 16))
      {
        uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v51 + 16);
        v19(v12, v14+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(void *)(v51 + 72) * v15, v7);
        if (v47)
        {
          swift_bridgeObjectRetain();
          a1 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v15 == a1)
          {
LABEL_19:
            (*v46)(v12, v7);
            goto LABEL_20;
          }
        }
        else
        {
          a1 = *(void *)(v16 + 16);
          if (v15 == a1) {
            goto LABEL_19;
          }
        }
        if (v45)
        {
          id v20 = (id)MEMORY[0x21054E050](v15, v54);
        }
        else
        {
          if (v15 >= *(void *)(v16 + 16)) {
            goto LABEL_35;
          }
          id v20 = *(id *)(v54 + 8 * v15 + 32);
        }
        Swift::String v21 = v20;
        a1 = *(int *)(v50 + 48);
        Swift::String v22 = *v41;
        (*v41)(v18, v12, v7);
        *(void *)&v18[a1] = v21;
        uint64_t v23 = v44;
        v22(v44, v18, v7);
        type metadata accessor for CanvasElementPDFAnnotation();
        uint64_t v24 = swift_dynamicCastClass();
        if (v24)
        {
          uint64_t v25 = v24;
          uint64_t v26 = (uint64_t)v39;
          v19(v39, (unint64_t)v23, v7);
          (*v38)(v26, 0, 1, v7);
          a1 = v25 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
          swift_beginAccess();
          outlined assign with take of Date?(v26, a1, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          swift_endAccess();
        }
        ++v15;

        (*v46)(v23, v7);
        uint64_t v12 = v40;
        uint64_t v16 = v42;
        unint64_t v14 = v43;
        if (v48 == v15) {
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_20:
    outlined consume of PaperKitPDFPage.AnnotationIDState(v14);
    swift_bridgeObjectRelease();
    a1 = v37;
    unint64_t v27 = *(void *)(v37 + v35);
    *(void *)(v37 + v35) = 1;
    outlined consume of PaperKitPDFPage.AnnotationIDState(v27);
  }
  uint64_t v12 = (char *)OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_appearanceStreamAnnotations;
  if (*(void *)(a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_appearanceStreamAnnotations)) {
    return;
  }
  uint64_t v53 = MEMORY[0x263F8EE78];
  uint64_t v7 = v54;
  if ((unint64_t)v54 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    if (!v28) {
      goto LABEL_37;
    }
LABEL_24:
    if (v28 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v37 = a1;
    uint64_t v29 = 0;
    unint64_t v30 = v7 & 0xC000000000000001;
    do
    {
      if (v30) {
        id v31 = (id)MEMORY[0x21054E050](v29, v7);
      }
      else {
        id v31 = *(id *)(v7 + 8 * v29 + 32);
      }
      uint64_t v32 = v31;
      if (objc_msgSend(v31, sel_hasAppearanceStream))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        uint64_t v7 = v54;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      ++v29;
    }
    while (v28 != v29);
    swift_bridgeObjectRelease();
    uint64_t v33 = v53;
    a1 = v37;
    goto LABEL_38;
  }
  uint64_t v28 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v28) {
    goto LABEL_24;
  }
LABEL_37:
  swift_bridgeObjectRelease();
  uint64_t v33 = MEMORY[0x263F8EE78];
LABEL_38:
  *(void *)&v12[a1] = v33;
  swift_bridgeObjectRelease();
}

uint64_t PaperKitPDFPage.hasFormWidgets.getter()
{
  id v1 = objc_msgSend(v0, sel_annotations);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      if (objc_msgSend(v5, sel_isTextWidget)
        && objc_msgSend(v6, sel_isActivatableTextField))
      {
        swift_bridgeObjectRelease_n();

        return 1;
      }
      type metadata accessor for CanvasElementPDFAnnotation();
      uint64_t v8 = (void *)swift_dynamicCastClassUnconditional();
      id v9 = v6;
      unsigned int v10 = 0;
      if (objc_msgSend(v8, sel_respondsToSelector_, sel_isSignature)) {
        unsigned int v10 = objc_msgSend(v8, sel_isSignature);
      }
      if (objc_msgSend(v8, sel_respondsToSelector_, sel_isAppearanceStreamEmpty))
      {
        unsigned int v11 = objc_msgSend(v8, sel_isAppearanceStreamEmpty);

        if (v10 & v11)
        {
          swift_bridgeObjectRelease_n();
          return 1;
        }
      }
      else
      {
      }
      ++v4;
      if (v7 == v3) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
LABEL_20:
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t closure #1 in PaperKitPDFPage.annotationFor(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v30 = (uint64_t)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v28 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v28 - v15;
  type metadata accessor for CanvasElementPDFAnnotation();
  uint64_t v17 = swift_dynamicCastClass();
  if (v17)
  {
    uint64_t v18 = v17 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v18, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v16, 1, 1, v3);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, a2, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
  uint64_t v19 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v16, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, v19, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  id v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v8, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    int v21 = v20(v19, 1, v3);
    if (v21 == 1) {
      Swift::String v22 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
    }
    else {
      Swift::String v22 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    if (v21 == 1) {
      char v23 = -1;
    }
    else {
      char v23 = 0;
    }
  }
  else
  {
    uint64_t v24 = v30;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v8, v30, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    if (v20(v19, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v24, v3);
      char v23 = 0;
      Swift::String v22 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    else
    {
      uint64_t v25 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v29, v19, v3);
      lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v26 = *(void (**)(char *, uint64_t))(v4 + 8);
      v26(v25, v3);
      Swift::String v22 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v26((char *)v24, v3);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, v22);
  return v23 & 1;
}

id PaperKitPDFPage.description.getter()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v28 - v6;
  uint64_t v28 = 0;
  unint64_t v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  uint64_t v31 = v28;
  unint64_t v32 = v29;
  v8._object = (void *)0x800000020C85A490;
  v8._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v8);
  uint64_t v28 = (uint64_t)v0;
  _print_unlocked<A, B>(_:_:)();
  v9._uint64_t countAndFlagsBits = 979857440;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  id v10 = objc_msgSend(v0, sel_document);

  if (v10)
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    id result = objc_msgSend(v1, sel_document);
    if (!result)
    {
      __break(1u);
      goto LABEL_11;
    }
    uint64_t v12 = result;
    id v13 = objc_msgSend(result, sel_indexForPage_, v1);

    id v30 = v13;
    v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v28;
    unint64_t v16 = v29;
  }
  else
  {
    unint64_t v16 = 0xE100000000000000;
    uint64_t v15 = 63;
  }
  unint64_t v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 32;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  uint64_t v19 = (uint64_t)v1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v19, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v20 = type metadata accessor for PageId(0);
  int v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48);
  int v22 = v21(v7, 1, v20);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  if (v22 == 1)
  {
    char v23 = (void *)0xE600000000000000;
    uint64_t v24 = 0x6C696E3A6469;
LABEL_9:
    v26._uint64_t countAndFlagsBits = v24;
    v26._object = v23;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 62;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    return (id)v31;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v19, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  id result = (id)v21(v4, 1, v20);
  if (result != 1)
  {
    uint64_t v24 = PageId.description.getter();
    char v23 = v25;
    _s8PaperKit9PDFPageIDVWOhTm_0((uint64_t)v4, type metadata accessor for PageId);
    goto LABEL_9;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t PaperKitPDFPage.candidateForOCR.getter()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x270FA5388](v8 - 8);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t)v1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v11, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v12 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v4, 1, v12))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakRef<Image>?);
    unint64_t v17 = (objc_class *)type metadata accessor for PaperKitPDFPage(0);
    v21.receiver = v1;
    v21.super_class = v17;
    return (uint64_t)objc_msgSendSuper2(&v21, sel_isCandidateForOCR);
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v4[*(int *)(v12 + 20)], (uint64_t)v7, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1, v14) == 1) {
    goto LABEL_4;
  }
  WeakTagged_3.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v14);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v10, 1, v19) == 1) {
    goto LABEL_5;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakRef<Image>?);
  return 1;
}

void PaperKitPDFPage.draw(with:in:withOptions:)(NSObject *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  dispatch_semaphore_t v78 = a1;
  uint64_t v70 = type metadata accessor for Image();
  uint64_t v72 = *(void *)(v70 - 8);
  uint64_t v7 = *(void *)(v72 + 64);
  MEMORY[0x270FA5388](v70);
  uint64_t v67 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v68 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v10 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v71 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v15 - 8);
  unint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x270FA5388](v21 - 8);
  char v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  uint64_t v76 = *(void *)(v24 - 8);
  uint64_t v77 = v24;
  MEMORY[0x270FA5388](v24);
  char v75 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = v10;
  if (!a3)
  {
    long long v83 = 0u;
    long long v84 = 0u;
LABEL_10:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v83, &demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }
  unint64_t v79 = 0xD00000000000001BLL;
  unint64_t v80 = 0x800000020C85A470;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a3 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v81), (v27 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v26, (uint64_t)&v83);
  }
  else
  {
    long long v83 = 0u;
    long long v84 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v81);
  if (!*((void *)&v84 + 1)) {
    goto LABEL_10;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    unsigned int v73 = 0;
    goto LABEL_12;
  }
  id v28 = v81[0];
  unsigned int v73 = objc_msgSend(v81[0], sel_BOOLValue);

LABEL_12:
  id v29 = objc_msgSend(v3, sel_document);
  if (v29)
  {
    id v30 = v29;
    id v31 = objc_msgSend(v29, sel_delegate);

    if (v31)
    {
      uint64_t v65 = v14;
      type metadata accessor for PaperDocumentView();
      uint64_t v32 = swift_dynamicCastClass();
      if (v32)
      {
        uint64_t v33 = v32;
        uint64_t v66 = a2;
        uint64_t v34 = (uint64_t)&v4[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
        swift_beginAccess();
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v34, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        uint64_t v35 = type metadata accessor for PageId(0);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v17, 1, v35))
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for PageId?);
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v20, 1, 1, v36);
LABEL_18:
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v23, 1, 1, v77);
          a2 = v66;
LABEL_19:
          swift_unknownObjectRelease();
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for WeakRef<Image>?);
          goto LABEL_26;
        }
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v17[*(int *)(v35 + 20)], (uint64_t)v20, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for PageId?);
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v20, 1, v37) == 1) {
          goto LABEL_18;
        }
        WeakTagged_3.tagged2.getter();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v37);
        uint64_t v40 = v76;
        uint64_t v39 = v77;
        int v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48))(v23, 1, v77);
        a2 = v66;
        if (v41 == 1) {
          goto LABEL_19;
        }
        uint64_t v42 = v75;
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v75, v23, v39);
        if (v73)
        {
          uint64_t v43 = v33 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
          swift_beginAccess();
          uint64_t v44 = v69;
          unint64_t v45 = v71;
          (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v71, v43, v74);
          type metadata accessor for PaperDocument(0);
          lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
          uint64_t v46 = (uint64_t)v65;
          unint64_t v47 = v75;
          WeakRef.subscript.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v46, 1, v70) == 1)
          {
            swift_unknownObjectRelease();
            (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v74);
            (*(void (**)(char *, uint64_t))(v40 + 8))(v47, v39);
            outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for Image?);
            return;
          }
          if (a2)
          {
            uint64_t v51 = v46;
            (*(void (**)(char *, uint64_t))(v44 + 8))(v71, v74);
            uint64_t v52 = v4;
            dispatch_semaphore_t v78 = dispatch_semaphore_create(0);
            uint64_t v53 = type metadata accessor for TaskPriority();
            uint64_t v54 = (uint64_t)v68;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v68, 1, 1, v53);
            uint64_t v55 = v51;
            uint64_t v56 = v51;
            uint64_t v57 = v67;
            outlined init with copy of Image(v56, v67);
            unint64_t v58 = (*(unsigned __int8 *)(v72 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
            uint64_t v59 = (void *)swift_allocObject();
            v59[2] = 0;
            v59[3] = 0;
            v59[4] = a2;
            v59[5] = v52;
            outlined init with take of Image(v57, (uint64_t)v59 + v58);
            dispatch_semaphore_t v60 = v78;
            *(void *)((char *)v59 + ((v7 + v58 + 7) & 0xFFFFFFFFFFFFFFF8)) = v78;
            uint64_t v61 = v52;
            id v62 = a2;
            uint64_t v63 = v60;
            _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v54, (uint64_t)&async function pointer to partial apply for closure #1 in Image.renderPage(pdfPage:box:context:), (uint64_t)v59);
            swift_release();
            OS_dispatch_semaphore.wait()();
            swift_unknownObjectRelease();

            (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v77);
            _s8PaperKit9PDFPageIDVWOhTm_0(v55, (uint64_t (*)(void))type metadata accessor for Image);
            return;
          }
          goto LABEL_36;
        }
        (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
      }
      swift_unknownObjectRelease();
    }
  }
LABEL_26:
  uint64_t v48 = *(void (**)(dispatch_semaphore_t, void *))&v4[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
  if (v48)
  {
    if (a2)
    {
      swift_retain();
      v48(v78, a2);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v48);
      return;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return;
  }
  if (a3) {
    v49.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v49.super.Class isa = 0;
  }
  uint64_t v50 = (objc_class *)type metadata accessor for PaperKitPDFPage(0);
  v82.receiver = v4;
  v82.super_class = v50;
  [&v82 drawWithBox:v78 inContext:a2 withOptions:v49.super.isa];
}

id PaperKitPDFPage.init(image:options:)(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = &v1[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  uint64_t v5 = type metadata accessor for PageId(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_appearanceStreamAnnotations] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = 0;
  type metadata accessor for PDFPageImageInitializationOption(0);
  lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, type metadata accessor for PDFPageImageInitializationOption);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for PaperKitPDFPage(0);
  id v7 = objc_msgSendSuper2(&v10, sel_initWithImage_options_, a1, isa);

  id v8 = v7;
  if (v8) {

  }
  return v8;
}

id PaperKitPDFPage.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperKitPDFPage(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for PaperKitPDFPage()
{
  return type metadata accessor for PaperKitPDFPage(0);
}

uint64_t type metadata accessor for PaperKitPDFPage(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperKitPDFPage);
}

void type metadata completion function for PaperKitPDFPage()
{
  type metadata accessor for PageId?(319, (unint64_t *)&lazy cache variable for type metadata for PageId?, (void (*)(uint64_t))type metadata accessor for PageId);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PageId(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PageId);
}

uint64_t *initializeBufferWithCopyOfBuffer for PaperKitPDFPage.AnnotationIDState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for PaperKitPDFPage.AnnotationIDState(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for PaperKitPDFPage.AnnotationIDState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for PaperKitPDFPage.AnnotationIDState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperKitPDFPage.AnnotationIDState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PaperKitPDFPage.AnnotationIDState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for PaperKitPDFPage.AnnotationIDState(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for PaperKitPDFPage.AnnotationIDState()
{
  return &type metadata for PaperKitPDFPage.AnnotationIDState;
}

uint64_t *initializeBufferWithCopyOfBuffer for PageId(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for PDFPageID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v11 = *(int *)(v7 + 20);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v15 = *(int *)(a3 + 20);
    uint64_t v16 = (char *)a1 + v15;
    unint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t destroy for PageId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PDFPageID();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v5 = a1 + *(int *)(v4 + 20);
    uint64_t v6 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

void *initializeWithCopy for PageId(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PDFPageID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v9 = *(int *)(v6 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *assignWithCopy for PageId(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PDFPageID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      uint64_t v11 = *(int *)(v6 + 20);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    _s8PaperKit9PDFPageIDVWOhTm_0((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  uint64_t v26 = *(int *)(v6 + 20);
  char v27 = (char *)a1 + v26;
  id v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

void *initializeWithTake for PageId(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PDFPageID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v9 = *(int *)(v6 + 20);
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *assignWithTake for PageId(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PDFPageID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      uint64_t v11 = *(int *)(v6 + 20);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    _s8PaperKit9PDFPageIDVWOhTm_0((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for PDFPageID);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  uint64_t v26 = *(int *)(v6 + 20);
  char v27 = (char *)a1 + v26;
  id v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C5A747C);
}

uint64_t sub_20C5A747C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PageId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C5A7590);
}

uint64_t sub_20C5A7590(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for PageId()
{
  type metadata accessor for PageId?(319, (unint64_t *)&lazy cache variable for type metadata for PDFPageID?, (void (*)(uint64_t))type metadata accessor for PDFPageID);
  if (v0 <= 0x3F)
  {
    type metadata accessor for WeakTagged_3<TaggedPaperPage>?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for PageId?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for WeakTagged_3<TaggedPaperPage>?()
{
  if (!lazy cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    }
  }
}

uint64_t lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Image();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C5A78DC()
{
  uint64_t v1 = (int *)(type metadata accessor for Image() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  uint64_t v6 = v0 + v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  uint64_t v9 = v6 + v1[8];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v6 + v1[9];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v6 + v1[10];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = v6 + v1[11];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = v6 + v1[12];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = v6 + v1[13];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = v6 + v1[14];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  uint64_t v23 = v6 + v1[15];
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v5 + 8, v4);
}

uint64_t _s8PaperKit9PDFPageIDVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void partial apply for closure #1 in PaperKitPDFPage.annotations.getter()
{
  closure #1 in PaperKitPDFPage.annotations.getter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t outlined copy of PaperKitPDFPage.AnnotationIDState(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

id RulerHostingDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RulerHostingDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for RulerHostingDelegate()
{
  return self;
}

unint64_t closure #1 in static SignatureAnalytics.created(_:)(uint64_t a1, unint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(void *)(inited + 32) = 6775156;
  *(void *)(inited + 40) = 0xE300000000000000;
  if (a2 <= 5)
  {
    specialized Collection<>.firstIndex(of:)(a1, a2, (uint64_t)&outlined read-only object #0 of static SignatureDescription.allCases.getter);
    if (v5) {
      __break(1u);
    }
  }
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

unint64_t specialized closure #1 in static SignatureAnalytics.inserted()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(void *)(inited + 32) = 0x746E756F63;
  *(void *)(inited + 40) = 0xE500000000000000;
  type metadata accessor for NSNumber();
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

id protocol witness for CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(a3);
}

id CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(a3);
}

uint64_t CanvasDelegate.canvas(_:shouldOpenLink:)()
{
  return 1;
}

uint64_t CanvasDelegate.canvasCanSnapshot(_:)()
{
  return 1;
}

UIMenu closure #1 in CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(uint64_t a1, UIMenuElementSize a2)
{
  type metadata accessor for UIMenu();
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6.value.super.Class isa = 0;
  v6.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v3, (Swift::String_optional)0, v6, 0, 0xFFFFFFFFFFFFFFFFLL, a2, v5);
}

id specialized CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  Swift::String v3 = self;
  v7[4] = partial apply for closure #1 in CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:);
  v7[5] = v2;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
  _OWORD v7[3] = &block_descriptor_44;
  uint64_t v4 = _Block_copy(v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  id v5 = objc_msgSend(v3, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v4);
  swift_release();
  _Block_release(v4);
  return v5;
}

uint64_t dispatch thunk of CanvasDelegate.canvasSelectionDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CanvasDelegate.canvasDrawingWillChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CanvasDelegate.canvasTextSelectionDidChange(_:textBox:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of CanvasDelegate.canvas(_:wantsToEnterFullscreen:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CanvasDelegate.canvas(_:shouldOpenLink:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of CanvasDelegate.canvasCanSnapshot(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of CanvasDelegate.canvas(_:contentFrameDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t sub_20C5A812C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

UIMenu partial apply for closure #1 in CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(uint64_t a1)
{
  return closure #1 in CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(a1, *(UIMenuElementSize *)(v1 + 16));
}

uint64_t block_copy_helper_44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_44()
{
  return swift_release();
}

unint64_t type metadata accessor for UIMenu()
{
  unint64_t result = lazy cache variable for type metadata for UIMenu;
  if (!lazy cache variable for type metadata for UIMenu)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  }
  return result;
}

void ShapeView.addTextBox(canvas:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v4 - 8);
  UIImage_optional v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = direct field offset for ShapeView._textBoxView;
  if (!*(void *)((char *)v2 + direct field offset for ShapeView._textBoxView))
  {
    id v31 = a1;
    uint64_t v15 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
    swift_beginAccess();
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v32(v13, v15, v7);
    swift_getKeyPath();
    lazy protocol witness table accessor for type Signature and conformance Signature((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
    v16(v13, v7);
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v6, 1, v17);
    outlined destroy of CRAttributedString<TextAttributeScope>.Attributes?((uint64_t)v6);
    if (v18 == 1)
    {
      v32(v10, v15, v7);
      char v19 = specialized Capsule<>.isFormField.getter();
      uint64_t v20 = ((uint64_t (*)(char *, uint64_t))v16)(v10, v7);
      double v21 = 1.0;
      if ((v19 & 1) == 0)
      {
        if (v31)
        {
          (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v31) + 0x278))(v20);
          if (v22) {
            double v21 = AnyCanvas.scaleFactorForNewElements.getter();
          }
        }
      }
      if (one-time initialization token for defaultTextBoxAttributes != -1) {
        swift_once();
      }
      uint64_t v33 = static UIConstants.defaultTextBoxAttributes;
      swift_bridgeObjectRetain();
      Dictionary<>.scaleBy(_:)(v21);
      MEMORY[0x270FA5388](v23);
      *(&v31 - 2) = &v33;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    char v24 = *((unsigned char *)v2 + direct field offset for ShapeView.showsSignaturePopover);
    int v25 = *((unsigned __int8 *)v2 + direct field offset for ShapeView.analytics_documentType);
    int v26 = *((unsigned __int8 *)v2 + direct field offset for ShapeView.analytics_inputSource);
    char v27 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextBoxView<Shape>));
    id v28 = v2;
    uint64_t v29 = specialized TextBoxView.init(canvasElementView:delegate:shouldAddTextboxView:analytics_inputSource:analytics_documentType:)(v28, v28, (v24 & 1) == 0, v26, v25, v27);
    id v30 = *(void **)((char *)v2 + v14);
    *(void *)((char *)v2 + v14) = v29;

    if (*(void *)((char *)v2 + v14)) {
      objc_msgSend(v28, sel_addSubview_);
    }
    else {
      __break(1u);
    }
  }
}

void ShapeView.setupTextBoxIfNeeded(canvas:)(void *a1)
{
  uint64_t v23 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v27 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  char v24 = v1;
  uint64_t v13 = (char *)v1 + v12;
  swift_beginAccess();
  int v26 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v26(v11, v13, v5);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Signature and conformance Signature((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  int v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v11, v5);
  uint64_t v28 = v2;
  uint64_t v14 = (void *)CRAttributedString.attributedString.getter();
  id v15 = objc_msgSend(v14, sel_string);

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  if (v16) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = v18 == 0xE000000000000000;
  }
  if (v19)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v28);
LABEL_8:
    v26(v8, v13, v5);
    char v21 = specialized Capsule<>.isFormField.getter();
    v25(v8, v5);
    if ((v21 & 1) == 0) {
      return;
    }
    goto LABEL_9;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v28);
  if (v20) {
    goto LABEL_8;
  }
LABEL_9:
  ShapeView.addTextBox(canvas:)(v23);
}

uint64_t closure #1 in ShapeView.addTextBox(canvas:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v3 = swift_bridgeObjectRetain();
  CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v3, 0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 0, 1, v4);
  lazy protocol witness table accessor for type Signature and conformance Signature((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return Capsule.Ref<>.subscript.setter();
}

Swift::Bool __swiftcall ShapeView.becomeFirstResponder()()
{
  uint64_t v1 = v0;
  if (v0[direct field offset for ShapeView.showsSignaturePopover] != 1)
  {
    uint64_t v6 = *(void **)&v0[direct field offset for ShapeView._textBoxView];
    if (v6) {
      return objc_msgSend(v6, sel_becomeFirstResponder);
    }
    goto LABEL_12;
  }
  uint64_t v2 = (void *)MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
  if (!v2)
  {
LABEL_12:
    v20.receiver = v1;
    v20.super_class = (Class)type metadata accessor for ShapeView();
    return objc_msgSendSuper2(&v20, sel_becomeFirstResponder);
  }
  uint64_t v3 = v2;
  uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x620))();
  if (!v4)
  {
    id v8 = objc_msgSend(v3, sel_window);
    id v5 = objc_msgSend(v8, sel_rootViewController);

    if (v5) {
      goto LABEL_8;
    }

    goto LABEL_12;
  }
  id v5 = (id)v4;
LABEL_8:
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  objc_msgSend(v1, sel_bounds);
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v1;
  *(void *)(v17 + 24) = v3;
  id v18 = v1;
  id v19 = v3;
  specialized SignatureManager.showSignatures(_:_:_:_:)(v5, v1, (uint64_t)partial apply for closure #1 in ShapeView.becomeFirstResponder(), v17, v10, v12, v14, v16);
  swift_release();

  return 1;
}

void closure #1 in ShapeView.becomeFirstResponder()(void *a1, void *a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  MEMORY[0x270FA5388](v6);
  CGFloat v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v47 = v8;
    uint64_t v48 = v7;
    type metadata accessor for SignatureManager();
    id v11 = a1;
    swift_initStaticObject();
    objc_msgSend(a2, sel_center);
    double v13 = v12;
    double v15 = v14;
    objc_msgSend(a2, sel_frame);
    uint64_t MaxY = CGRectGetMaxY(v52);
    objc_msgSend(a2, sel_frame);
    CGFloat Height = CGRectGetHeight(v53);
    id v51 = v11;
    SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)((uint64_t)v11, MaxY, 0, COERCE__INT64(Height * 1.3), 0, v13, v15);
    id v18 = (void *)MEMORY[0x263F8EED0];
    id v19 = *(uint64_t (**)(char *, uint64_t, void, void, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *a3) + 0x490);
    uint64_t v20 = type metadata accessor for Signature();
    uint64_t v21 = lazy protocol witness table accessor for type Signature and conformance Signature((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
    uint64_t v22 = v19(v10, 1, 0, 0, v20, v21, &protocol witness table for Signature);
    NSDictionary v49 = (uint64_t (**)(uint64_t))((*v18 & *a3) + 760);
    uint64_t v50 = v10;
    uint64_t v23 = *v49;
    char v24 = (void *)(*v49)(v22);
    uint64_t v26 = v25;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v28 = a2;
    uint64_t v29 = specialized CanvasMembers.init(_:)(v28);
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    LOBYTE(v18) = v34;

    (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v26 + 88))(v29, v31, v33, v18 & 1, ObjectType, v26);
    swift_bridgeObjectRelease();
    uint64_t v35 = swift_bridgeObjectRelease();
    uint64_t v36 = (void *)v23(v35);
    uint64_t v38 = v37;
    uint64_t v39 = swift_getObjectType();
    uint64_t v40 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v38 + 144))(v39, v38);

    if (v40)
    {
      int v41 = v50;
      id v42 = v51;
      uint64_t v43 = *(void *)&v40[OBJC_IVAR____TtC8PaperKit15FormFillingView_signatureFieldsSigned];
      BOOL v44 = __OFADD__(v43, 1);
      uint64_t v45 = v43 + 1;
      if (v44)
      {
        __break(1u);
      }
      else
      {
        *(void *)&v40[OBJC_IVAR____TtC8PaperKit15FormFillingView_signatureFieldsSigned] = v45;

        (*(void (**)(char *, uint64_t))(v47 + 8))(v41, v48);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v48);
    }
  }
}

Swift::Bool __swiftcall ShapeView.resignFirstResponder()()
{
  uint64_t v1 = *(char **)&v0[direct field offset for ShapeView._textBoxView];
  if (!v1) {
    goto LABEL_6;
  }
  uint64_t v2 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = v1;
  if ((objc_msgSend(v2, sel_isFirstResponder) & 1) == 0)
  {

LABEL_6:
    v6.receiver = v0;
    v6.super_class = (Class)type metadata accessor for ShapeView();
    return objc_msgSendSuper2(&v6, sel_resignFirstResponder);
  }
  unsigned __int8 v4 = objc_msgSend(v3, sel_resignFirstResponder);

  return v4;
}

uint64_t sub_20C5A948C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in ShapeView.becomeFirstResponder()(void *a1)
{
  closure #1 in ShapeView.becomeFirstResponder()(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type Signature and conformance Signature(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of CRAttributedString<TextAttributeScope>.Attributes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in ShapeView.addTextBox(canvas:)()
{
  return closure #1 in ShapeView.addTextBox(canvas:)();
}

void sub_20C5A9FF4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(double *)a3 = (*(double (**)(void))(*(void *)(*(void *)(*(void *)(a2 + a1 - 8) + 8) + 8) + 8))(*(void *)(a2 + a1 - 24));
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
}

uint64_t sub_20C5AA04C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double, double, double, double))(*(void *)(*(void *)(a4 + a3 - 8)
                                                                                               + 8)
                                                                                   + 16))(*(void *)(a4 + a3 - 24), *(void *)(*(void *)(a4 + a3 - 8) + 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_20C5AA0A0()
{
  return 24;
}

__n128 sub_20C5AA0AC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C5AA0C8()
{
  return 24;
}

__n128 sub_20C5AA0D4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C5AA0F0()
{
  return 24;
}

__n128 sub_20C5AA0FC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void specialized AnyCanvas.undoableEndLiveEdits<A>(for:)(unint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(v1, sel_undoManager);
  objc_msgSend(v4, sel_beginUndoGrouping);

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v6 = 0;
  uint64_t v7 = (void *)MEMORY[0x263F8EED0];
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      uint64_t v8 = (void *)MEMORY[0x21054E050](v6, a1);
    }
    else {
      uint64_t v8 = *(id *)(a1 + 8 * v6 + 32);
    }
    uint64_t v9 = v8;
    ++v6;
    (*(void (**)(uint64_t, void))((*v7 & *v8) + 0x1F0))(1, 0);
  }
  while (v5 != v6);
LABEL_10:
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v2, sel_undoManager);
  objc_msgSend(v10, sel_endUndoGrouping);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v2 - 8);
  dispatch_semaphore_t v60 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v4 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  id v62 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (char *)&v44 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v8 - 8);
  id v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  CGRect v52 = (char *)&v44 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v57 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v46 = (char *)&v44 - v17;
  int64_t v18 = *(void *)(a1 + 16);
  uint64_t v63 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
  uint64_t v19 = *(void *)(a1 + 56);
  int64_t v53 = v18;
  uint64_t v54 = a1 + 56;
  uint64_t v20 = -1;
  uint64_t v21 = -1 << *(unsigned char *)(a1 + 32);
  if (-v21 < 64) {
    uint64_t v20 = ~(-1 << -(char)v21);
  }
  unint64_t v22 = v20 & v19;
  int64_t v55 = (unint64_t)(63 - v21) >> 6;
  uint64_t v61 = a1;
  uint64_t v58 = v4;
  if (v18)
  {
    uint64_t v50 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    id v51 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v48 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v49 = v14 + 48;
    uint64_t v47 = v4 + 32;
    swift_bridgeObjectRetain();
    uint64_t v23 = 0;
    int64_t v18 = 0;
    while (1)
    {
      if (v22)
      {
        unint64_t v24 = __clz(__rbit64(v22));
        v22 &= v22 - 1;
        unint64_t v25 = v24 | (v18 << 6);
      }
      else
      {
        int64_t v26 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        if (v26 >= v55) {
          goto LABEL_62;
        }
        unint64_t v27 = *(void *)(v54 + 8 * v26);
        ++v18;
        if (!v27)
        {
          int64_t v18 = v26 + 1;
          if (v26 + 1 >= v55) {
            goto LABEL_62;
          }
          unint64_t v27 = *(void *)(v54 + 8 * v18);
          if (!v27)
          {
            int64_t v18 = v26 + 2;
            if (v26 + 2 >= v55) {
              goto LABEL_62;
            }
            unint64_t v27 = *(void *)(v54 + 8 * v18);
            if (!v27)
            {
              int64_t v18 = v26 + 3;
              if (v26 + 3 >= v55) {
                goto LABEL_62;
              }
              unint64_t v27 = *(void *)(v54 + 8 * v18);
              if (!v27)
              {
                int64_t v28 = v26 + 4;
                if (v28 >= v55) {
                  goto LABEL_62;
                }
                unint64_t v27 = *(void *)(v54 + 8 * v28);
                if (!v27)
                {
                  while (1)
                  {
                    int64_t v18 = v28 + 1;
                    if (__OFADD__(v28, 1)) {
                      break;
                    }
                    if (v18 >= v55) {
                      goto LABEL_62;
                    }
                    unint64_t v27 = *(void *)(v54 + 8 * v18);
                    ++v28;
                    if (v27) {
                      goto LABEL_22;
                    }
                  }
LABEL_60:
                  __break(1u);
                  goto LABEL_61;
                }
                int64_t v18 = v28;
              }
            }
          }
        }
LABEL_22:
        unint64_t v22 = (v27 - 1) & v27;
        unint64_t v25 = __clz(__rbit64(v27)) + (v18 << 6);
      }
      uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
      v29(v10, *(void *)(a1 + 48) + *(void *)(v14 + 72) * v25, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13);
      if (result == 1) {
        goto LABEL_63;
      }
      v29(v57, (unint64_t)v10, v13);
      CRKeyPath.init(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      WeakRef.init(id:)();
      (*v48)(v10, v13);
      uint64_t v31 = v63;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
        uint64_t v31 = v63;
      }
      unint64_t v33 = *(void *)(v31 + 16);
      unint64_t v32 = *(void *)(v31 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        uint64_t v31 = v63;
      }
      ++v23;
      *(void *)(v31 + 16) = v33 + 1;
      uint64_t v4 = v58;
      (*(void (**)(unint64_t, void (**)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v58 + 32))(v31+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v33, v62, v59);
      a1 = v61;
      if (v23 == v53) {
        goto LABEL_31;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_31:
  id v62 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  int64_t v53 = v14 + 48;
  uint64_t v50 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 8);
  id v51 = (void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v49 = v4 + 32;
  uint64_t v45 = v14;
  char v34 = v46;
  id v10 = v52;
  if (!v22) {
    goto LABEL_33;
  }
LABEL_32:
  unint64_t v35 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  for (unint64_t i = v35 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v38)) + (v18 << 6))
  {
    uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v40(v10, *(void *)(a1 + 48) + *(void *)(v14 + 72) * i, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1) {
      goto LABEL_57;
    }
    (*v51)(v34, v10, v13);
    v40(v57, (unint64_t)v34, v13);
    CRKeyPath.init(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    WeakRef.init(id:)();
    ((void (*)(char *, uint64_t))*v50)(v34, v13);
    uint64_t v41 = v63;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1);
      uint64_t v41 = v63;
    }
    unint64_t v43 = *(void *)(v41 + 16);
    unint64_t v42 = *(void *)(v41 + 24);
    if (v43 >= v42 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
      uint64_t v41 = v63;
    }
    *(void *)(v41 + 16) = v43 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v58 + 32))(v41+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(void *)(v58 + 72) * v43, v56, v59);
    a1 = v61;
    uint64_t v14 = v45;
    id v10 = v52;
    if (v22) {
      goto LABEL_32;
    }
LABEL_33:
    int64_t v37 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_59;
    }
    if (v37 >= v55)
    {
LABEL_56:
      (*v62)(v10, 1, 1, v13);
LABEL_57:
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
      return v63;
    }
    unint64_t v38 = *(void *)(v54 + 8 * v37);
    ++v18;
    if (!v38)
    {
      int64_t v18 = v37 + 1;
      if (v37 + 1 >= v55) {
        goto LABEL_56;
      }
      unint64_t v38 = *(void *)(v54 + 8 * v18);
      if (!v38)
      {
        int64_t v18 = v37 + 2;
        if (v37 + 2 >= v55) {
          goto LABEL_56;
        }
        unint64_t v38 = *(void *)(v54 + 8 * v18);
        if (!v38)
        {
          int64_t v18 = v37 + 3;
          if (v37 + 3 >= v55) {
            goto LABEL_56;
          }
          unint64_t v38 = *(void *)(v54 + 8 * v18);
          if (!v38) {
            break;
          }
        }
      }
    }
LABEL_48:
    unint64_t v22 = (v38 - 1) & v38;
  }
  int64_t v39 = v37 + 4;
  if (v39 >= v55) {
    goto LABEL_56;
  }
  unint64_t v38 = *(void *)(v54 + 8 * v39);
  if (v38)
  {
    int64_t v18 = v39;
    goto LABEL_48;
  }
  while (1)
  {
    int64_t v18 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v18 >= v55) {
      goto LABEL_56;
    }
    unint64_t v38 = *(void *)(v54 + 8 * v18);
    ++v39;
    if (v38) {
      goto LABEL_48;
    }
  }
LABEL_61:
  __break(1u);
LABEL_62:
  uint64_t result = (*v50)(v10, 1, 1, v13);
LABEL_63:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CanvasViewSelectionInteractionDelegate.canvasElementExistsAtPoint(_:for:)(CGPoint _, UIEvent_optional a2)
{
  Class isa = a2.value.super.isa;
  double y = _.y;
  double x = _.x;
  uint64_t v6 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v7 = MEMORY[0x210550400](v6, *(void *)&a2.is_nil);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(v6 + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(ObjectType, v9);
  unint64_t v12 = v11;
  if (v11 >> 62) {
    goto LABEL_16;
  }
  uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v13; uint64_t v13 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v14 = 4;
    uint64_t v15 = (void *)MEMORY[0x263F8EED0];
    while (1)
    {
      uint64_t v16 = (v12 & 0xC000000000000001) != 0
          ? (void *)MEMORY[0x21054E050](v14 - 4, v12)
          : *(id *)(v12 + 8 * v14);
      uint64_t v17 = v16;
      uint64_t v18 = v14 - 3;
      if (__OFADD__(v14 - 4, 1)) {
        break;
      }
      if ((*(uint64_t (**)(void))((*v15 & *v16) + 0x218))())
      {
      }
      else
      {
        objc_msgSend(v17, sel_convertPoint_fromCoordinateSpace_, v8, x, y);
        id v19 = objc_msgSend(v17, sel_hitTest_withEvent_, isa);

        if (v19)
        {
          Swift::Bool v20 = 1;
          goto LABEL_18;
        }
      }
      ++v14;
      if (v18 == v13) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  Swift::Bool v20 = 0;
LABEL_18:
  swift_bridgeObjectRelease_n();

  return v20;
}

void CanvasViewSelectionInteractionDelegate.selectionInteractionShouldBegin(_:at:for:orGestureRecognizer:)(void *a1, unint64_t a2, unint64_t a3, double a4, double a5)
{
  if (a2 | a3)
  {
    uint64_t v11 = v5 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
    unint64_t v12 = (void *)MEMORY[0x210550400](v5 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = (void *)MEMORY[0x263F8EED0];
      uint64_t v15 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v12) + 0x88))();

      if (v15)
      {
        if (a2)
        {
          id v16 = (id)a2;
          goto LABEL_9;
        }
        if (a3)
        {
          id v16 = objc_msgSend((id)a3, sel__activeEventOfType_, 0);
          if (v16)
          {
LABEL_9:
            uint64_t v17 = (void *)MEMORY[0x210550400](v11);
            if (v17)
            {
              uint64_t v18 = v17;
              id v19 = (void *)(*(uint64_t (**)(void))((*v14 & *v17) + 0x88))();
              id v20 = (id)a2;

              if (v19)
              {
                (*(void (**)(uint64_t *__return_ptr))((*v14 & *v19) + 0x2C8))(&v27);

                if (!(_BYTE)v27)
                {

                  return;
                }
                if (v27 == 2 && (objc_msgSend(v16, sel_PK_isEventFromPencil) & 1) == 0)
                {
                  id v21 = v16;
                  v28.value.super.Class isa = (Class)v16;
                  Swift::Bool v22 = CanvasViewSelectionInteractionDelegate.canvasElementExistsAtPoint(_:for:)((CGPoint)__PAIR128__(*(unint64_t *)&a5, *(unint64_t *)&a4), v28);

                  if (!v22)
                  {
                    uint64_t v23 = *(void *)&v15[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
                    if (v23)
                    {
                      unint64_t v24 = (void *)(v23 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
                      if (!*(void *)(*v24 + 16) && !*(void *)(v24[1] + 16))
                      {

                        return;
                      }
                      goto LABEL_20;
                    }
                    goto LABEL_24;
                  }
                }
              }
            }
            else
            {
              id v25 = (id)a2;
            }
LABEL_20:
            id v26 = v16;
            CanvasViewSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(a1, v16, a4, a5);

            return;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_24:
        __break(1u);
      }
    }
  }
}

uint64_t CanvasViewSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(void *a1, void *a2, double a3, double a4)
{
  uint64_t v9 = type metadata accessor for PKInk();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2
    || (uint64_t v14 = v4 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView,
        (uint64_t v15 = MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v11)) == 0))
  {
    LOBYTE(v27) = 0;
    return v27 & 1;
  }
  id v16 = (void *)v15;
  uint64_t v17 = (void *)MEMORY[0x210550400](v14);
  if (!v17)
  {
LABEL_11:

    LOBYTE(v27) = 0;
    return v27 & 1;
  }
  uint64_t v18 = v17;
  id v76 = a1;
  id v19 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v17) + 0x88))();
  id v20 = a2;

  if (!v19)
  {

    goto LABEL_11;
  }
  id v77 = v20;
  uint64_t v69 = v10;
  id v21 = *(void **)&v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  id v22 = v21;

  if (!v21)
  {

    goto LABEL_11;
  }
  objc_msgSend(v16, sel_convertPoint_toCoordinateSpace_, v22, a3, a4);
  id v23 = objc_msgSend(v22, sel_hitTest_withEvent_, v77);
  id v71 = v22;
  id v75 = v23;
  if (v23)
  {
    unint64_t v24 = v23;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    id v25 = v24;
    int v26 = static NSObject.== infix(_:_:)();

    int v27 = v26 ^ 1;
  }
  else
  {
    int v27 = 0;
  }
  UIEvent_optional v28 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v16) + 0x88);
  uint64_t v73 = (*MEMORY[0x263F8EED0] & *v16) + 136;
  uint64_t v74 = v28;
  uint64_t v29 = v28();
  if (v29
    && (uint64_t v30 = (void *)v29,
        uint64_t v31 = *(void **)(v29 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView),
        id v70 = v31,
        v30,
        (id v72 = v31) != 0))
  {
    id v32 = v70;
    objc_msgSend(v16, sel_convertPoint_toCoordinateSpace_, v32, a3, a4);
    id v33 = objc_msgSend(v32, sel_hitTest_withEvent_, v77);

    if (v33)
    {
      id v70 = (id)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      id v34 = v32;
      id v35 = v33;
      int v36 = static NSObject.== infix(_:_:)();
      id v70 = v35;

      v27 |= v36 ^ 1;
    }
    else
    {
      id v70 = 0;
    }
  }
  else
  {
    id v70 = 0;
    id v72 = 0;
  }
  id v37 = v77;
  v79.value.super.Class isa = (Class)a2;
  Swift::Bool v38 = CanvasViewSelectionInteractionDelegate.canvasElementExistsAtPoint(_:for:)((CGPoint)__PAIR128__(*(unint64_t *)&a4, *(unint64_t *)&a3), v79);

  if (v38)
  {
    if ((objc_msgSend(v37, sel_modifierFlags) & 0x20000) != 0
      || (objc_msgSend(v37, sel_modifierFlags) & 0x100000) != 0)
    {
      int v27 = 1;
    }
    if (v75) {
      v27 |= objc_msgSend(v76, sel_hasCurrentSelection) ^ 1;
    }
  }
  int64_t v39 = (void *)v74();
  if (v39)
  {
    uint64_t v40 = v39;
    (*(void (**)(char *__return_ptr))((*MEMORY[0x263F8EED0] & *v39) + 0x2C8))((char *)&v78 + 1);

    LOBYTE(v27) = (BYTE1(v78) == 1) | v27;
  }
  uint64_t v41 = MEMORY[0x210550400](v14);
  if (!v41) {
    goto LABEL_38;
  }
  unint64_t v42 = (void *)v41;
  uint64_t v43 = *(void *)(v14 + 8);
  uint64_t ObjectType = (void *)swift_getObjectType();
  uint64_t v45 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v42) + 0x88))();
  if (!v45)
  {
    id v57 = v75;
LABEL_36:
    id v58 = v72;
    id v59 = v70;

    id v60 = v37;
    id v37 = v16;
    id v16 = v42;
LABEL_39:

    return v27 & 1;
  }
  uint64_t v68 = v45;
  id v76 = ObjectType;
  id v77 = *(id *)(v43 + 144);
  id v37 = v37;
  uint64_t v46 = ((uint64_t (*)(id, uint64_t))v77)(v76, v43);
  if (!v46)
  {

    id v57 = v37;
    id v16 = v42;
    unint64_t v42 = v68;
    goto LABEL_36;
  }
  uint64_t v47 = (void *)v46;
  id v48 = v68;
  objc_msgSend(v68, sel_convertPoint_toCoordinateSpace_, v42, a3, a4);
  v80.value.super.Class isa = (Class)a2;
  id v51 = v37;
  Swift::Bool v52 = FormFillingView.hitTestIncludingHiddenFields(_:with:)((CGPoint)__PAIR128__(v50, v49), v80);

  if (!v52)
  {
    id v37 = v51;
LABEL_38:
    id v60 = v75;
    id v58 = v72;
    id v59 = v70;
    goto LABEL_39;
  }
  int64_t v53 = (void *)v74();
  if (v53)
  {
    uint64_t v54 = v53;
    Class isa = (Class)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v53) + 0x320))();

    if (isa)
    {
      id v56 = [(objc_class *)isa ink];

      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
      Class isa = PKInk._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v13, v9);
    }
  }
  else
  {
    Class isa = 0;
  }
  id v62 = v75;
  uint64_t v63 = isa;
  char v64 = [(objc_class *)v63 _isHandwritingInk];

  uint64_t v65 = (void *)v74();
  if (v65)
  {
    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & *v65) + 0x2C8))(&v78);

    if (v78 == 3) {
      char v66 = v64;
    }
    else {
      char v66 = 1;
    }
    LOBYTE(v27) = v66 | v27;
  }
  else
  {
    LOBYTE(v27) = 1;
  }
  return v27 & 1;
}

Class @objc CanvasViewSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(void))
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a1;
  uint64_t v11 = a5();

  if (v11)
  {
    v12.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12.super.Class isa = 0;
  }
  return v12.super.isa;
}

void closure #1 in CanvasViewSelectionInteractionDelegate.image(of:)(void *a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_layer);
  id v4 = objc_msgSend(a1, sel_CGContext);
  objc_msgSend(v3, sel_renderInContext_, v4);
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  if (*(void *)(result + 16))
  {
    uint64_t v9 = result;
    uint64_t v10 = a2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
    uint64_t result = MEMORY[0x210550400](a2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (result)
    {
      uint64_t v11 = (void *)result;
      uint64_t v57 = a6;
      id v58 = a5;
      uint64_t v12 = *(void *)(v10 + 8);
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 56))(ObjectType, v12);

      objc_msgSend(a3, sel_scale);
      double v16 = v15;
      id v17 = objc_msgSend(self, sel_mainScreen);
      objc_msgSend(v17, sel_scale);
      double v19 = v18;

      CGAffineTransformMakeScale(&aBlock, v16 * v19, v16 * v19);
      CGFloat a = aBlock.a;
      CGFloat b = aBlock.b;
      CGFloat c = aBlock.c;
      CGFloat d = aBlock.d;
      tCGFloat x = aBlock.tx;
      tCGFloat y = aBlock.ty;
      objc_msgSend(a3, sel_strokeBounds);
      CGFloat v70 = b;
      CGFloat v71 = a;
      aBlock.CGFloat a = a;
      aBlock.CGFloat b = b;
      CGFloat v68 = d;
      CGFloat v69 = c;
      aBlock.CGFloat c = c;
      aBlock.CGFloat d = d;
      CGFloat v66 = ty;
      CGFloat v67 = tx;
      aBlock.tCGFloat x = tx;
      aBlock.tCGFloat y = ty;
      CGRect v74 = CGRectApplyAffineTransform(v73, &aBlock);
      CGFloat x = v74.origin.x;
      CGFloat y = v74.origin.y;
      CGFloat width = v74.size.width;
      CGFloat height = v74.size.height;
      CGFloat v30 = -CGRectGetMinX(v74);
      CGFloat v65 = x;
      v75.origin.CGFloat x = x;
      v75.origin.CGFloat y = y;
      v75.size.CGFloat width = width;
      v75.size.CGFloat height = height;
      CGFloat MinY = CGRectGetMinY(v75);
      CGAffineTransformMakeTranslation(&aBlock, v30, -MinY);
      CGFloat v63 = aBlock.b;
      CGFloat v64 = aBlock.a;
      CGFloat v61 = aBlock.d;
      CGFloat v62 = aBlock.c;
      CGFloat v59 = aBlock.ty;
      CGFloat v60 = aBlock.tx;
      uint64_t v32 = specialized _arrayForceCast<A, B>(_:)(v9);
      uint64_t v33 = specialized Set.init<A>(_:)(v32);
      swift_bridgeObjectRelease();
      unint64_t v34 = specialized _ArrayProtocol.filter(_:)(v14, v33);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v34 >> 62) {
        goto LABEL_15;
      }
      uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v35)
      {
        while (v35 >= 1)
        {
          uint64_t v36 = 0;
          while (1)
          {
            id v37 = (v34 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x21054E050](v36, v34)
                : *(id *)(v34 + 8 * v36 + 32);
            Swift::Bool v38 = v37;
            objc_msgSend(v37, sel_bounds, v57, v58);
            id v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithBounds_, v39, v40, v41, v42);
            uint64_t v44 = swift_allocObject();
            *(void *)(v44 + 16) = v38;
            uint64_t v45 = swift_allocObject();
            *(void *)(v45 + 16) = partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.image(of:);
            *(void *)(v45 + 24) = v44;
            *(void *)&aBlock.tCGFloat x = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
            *(void *)&aBlock.tCGFloat y = v45;
            *(void *)&aBlock.CGFloat a = MEMORY[0x263EF8330];
            *(void *)&aBlock.CGFloat b = 1107296256;
            *(void *)&aBlock.CGFloat c = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
            *(void *)&aBlock.CGFloat d = &block_descriptor_68_0;
            uint64_t v46 = _Block_copy(&aBlock);
            uint64_t v47 = v38;
            swift_retain();
            swift_release();
            id v48 = objc_msgSend(v43, sel_imageWithActions_, v46);

            _Block_release(v46);
            LOBYTE(v43) = swift_isEscapingClosureAtFileLocation();
            swift_release();
            swift_release();
            if (v43) {
              break;
            }
            unint64_t v49 = (CGImage *)objc_msgSend(v48, sel_CGImage);

            if (v49)
            {
              v76.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v47) + 0x178))();
              aBlock.CGFloat a = v71;
              aBlock.CGFloat b = v70;
              aBlock.CGFloat c = v69;
              aBlock.CGFloat d = v68;
              aBlock.tCGFloat x = v67;
              aBlock.tCGFloat y = v66;
              CGRect v77 = CGRectApplyAffineTransform(v76, &aBlock);
              aBlock.CGFloat a = v64;
              aBlock.CGFloat b = v63;
              aBlock.CGFloat c = v62;
              aBlock.CGFloat d = v61;
              aBlock.tCGFloat x = v60;
              aBlock.tCGFloat y = v59;
              CGRect v78 = CGRectApplyAffineTransform(v77, &aBlock);
              CGFloat v50 = v78.origin.x;
              CGFloat v51 = v78.origin.y;
              CGFloat v52 = v78.size.width;
              CGFloat v53 = v78.size.height;
              v78.origin.CGFloat y = y;
              v78.origin.CGFloat x = v65;
              v78.size.CGFloat width = width;
              v78.size.CGFloat height = height;
              double v54 = CGRectGetHeight(v78);
              v79.origin.CGFloat x = v50;
              v79.origin.CGFloat y = v51;
              v79.size.CGFloat width = v52;
              v79.size.CGFloat height = v53;
              double v55 = v54 - CGRectGetMinY(v79);
              v80.origin.CGFloat x = v50;
              v80.origin.CGFloat y = v51;
              v80.size.CGFloat width = v52;
              v80.size.CGFloat height = v53;
              v81.origin.CGFloat y = v55 - CGRectGetHeight(v80);
              v81.origin.CGFloat x = v50;
              v81.size.CGFloat width = v52;
              v81.size.CGFloat height = v53;
              CGContextRef.draw(_:in:byTiling:)(v49, v81, 0);

              uint64_t v47 = v49;
            }
            ++v36;

            if (v35 == v36) {
              goto LABEL_16;
            }
          }
          __break(1u);
LABEL_15:
          uint64_t result = _CocoaArrayWrapper.endIndex.getter();
          uint64_t v35 = result;
          if (!result) {
            goto LABEL_16;
          }
        }
        __break(1u);
      }
      else
      {
LABEL_16:
        uint64_t v56 = swift_bridgeObjectRelease();
        return v58(v56);
      }
    }
  }
  return result;
}

uint64_t @objc CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(uint64_t))
{
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a5;
  id v13 = a1;
  a6(v10);

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v38 = a6;
  double v39 = a5;
  double v40 = a3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v10 - 8);
  id v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13);
  double v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  double v19 = (char *)&v33 - v18;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v12, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for URL?);
    return v40(0);
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v35(v19, v12, v13);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    dispatch_queue_t v37 = (dispatch_queue_t)static OS_dispatch_queue.main.getter();
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
    unint64_t v21 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v34 = a4;
    unint64_t v22 = (v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = swift_allocObject();
    uint64_t v36 = v19;
    uint64_t v24 = v38;
    id v25 = v39;
    *(void *)(v23 + 16) = v39;
    *(void *)(v23 + 24) = v24;
    v35((char *)(v23 + v21), v16, v13);
    int v26 = (void *)(v23 + v22);
    uint64_t v27 = v34;
    *int v26 = v40;
    v26[1] = v27;
    *(void *)(v23 + ((v22 + 23) & 0xFFFFFFFFFFFFFFF8)) = a7;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = partial apply for closure #1 in closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:);
    *(void *)(v28 + 24) = v23;
    aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_45;
    uint64_t v29 = _Block_copy(aBlock);
    id v30 = v25;
    swift_retain();
    id v31 = a7;
    swift_retain();
    swift_release();
    dispatch_queue_t v32 = v37;
    dispatch_sync(v37, v29);
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v36, v13);
    LOBYTE(v32) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v32) {
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, void, void, void, uint64_t, uint64_t, uint64_t))(a2 + 112))(a3, 0, 0, 0, 1, ObjectType, a2);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a6 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView))
  {
    uint64_t v12 = swift_bridgeObjectRetain();
    size_t v13 = specialized _copyCollectionToContiguousArray<A>(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t v14 = specialized _arrayForceCast<A, B>(_:)(v13);
    swift_release();
    a4(v14);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *CanvasViewSelectionInteractionDelegate.view(for:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v13 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v9);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = (void *)v13;
  uint64_t v25 = v3;
  uint64_t v15 = *(void *)(v12 + 8);
  uint64_t ObjectType = swift_getObjectType();
  outlined init with copy of Any(a1, (uint64_t)v26);
  swift_dynamicCast();
  MEMORY[0x21054B9C0](v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(ObjectType, v15);

  if (*(void *)(v17 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v19 & 1) != 0))
  {
    id v20 = *(void **)(*(void *)(v17 + 56) + 8 * v18);
    id v21 = v20;
  }
  else
  {
    id v20 = 0;
  }
  uint64_t v22 = v25;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
  return v20;
}

uint64_t @objc CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, SEL *a9)
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v17 = a8;
  id v18 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)((uint64_t)v15, (uint64_t)v16, a6, (uint64_t)v20, a9);

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[5] = v7;
  v5[6] = v6;
  return MEMORY[0x270FA2498](closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:), v7, v6);
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)()
{
  uint64_t v1 = (void *)MEMORY[0x210550400](v0[2] + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (v1
    && (uint64_t v2 = v1,
        uint64_t v3 = (void *)MEMORY[0x263F8EED0],
        uint64_t v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))(),
        v0[7] = v4,
        v2,
        v4))
  {
    uint64_t v5 = (*(uint64_t (**)(void))((*v3 & *v4) + 0x320))();
    v0[8] = v5;
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      type metadata accessor for TiledTextView();
      if (swift_dynamicCastClass())
      {
        uint64_t v7 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)&v7[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
        if (v9)
        {
          uint64_t v10 = v0[3];
          uint64_t v11 = *(void **)(v9 + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool);
          v0[9] = v11;
          v11;

          unint64_t v12 = specialized Sequence.compactMap<A>(_:)(v10);
          uint64_t v13 = specialized Set.init<A>(_:)(v12);
          v0[10] = v13;
          swift_bridgeObjectRelease();
          id v14 = v4;
          id v15 = (void *)swift_task_alloc();
          v0[11] = v15;
          void *v15 = v0;
          v15[1] = closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:);
          uint64_t v16 = MEMORY[0x263F8EE88];
          return CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:)(v16, v13, 6, 0, (uint64_t)v4);
        }

        swift_release();
      }
      else
      {

        swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
  id v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v3 = *v1;
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v4 = *(void **)(v2 + 56);
  if (v0)
  {

    swift_bridgeObjectRelease();
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v6 = *(void *)(v3 + 48);
    uint64_t v7 = closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:);
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v6 = *(void *)(v3 + 48);
    uint64_t v7 = closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = (void *)v0[9];
  uint64_t v3 = (void *)v0[7];
  swift_release();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:proofreadingItem:in:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, Swift::OpaquePointer a5, void *a6, uint64_t a7, uint64_t a8)
{
  CGFloat v63 = a6;
  uint64_t v64 = a7;
  uint64_t v66 = a3;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v12 - 8);
  CGFloat v65 = (char *)&rawValue - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PKDrawing();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x270FA5388](v14);
  id v18 = (void **)((char *)&rawValue - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  CGFloat v71 = (void *)MEMORY[0x263F8EE78];
  uint64_t v19 = (void *)MEMORY[0x21054D080](0xD000000000000026, 0x800000020C8526A0, v16);
  IsEventUseCGFloat d = AnalyticsIsEventUsed();

  if (!IsEventUsed || !a4) {
    goto LABEL_22;
  }
  id v21 = a4;
  unsigned int v22 = objc_msgSend(v21, sel_resultType);
  if (v22)
  {
    if (v22 != 1)
    {

      goto LABEL_22;
    }
    id v60 = v21;
    int v59 = 1;
  }
  else
  {
    id v60 = v21;
    int v59 = 0;
  }
  uint64_t v23 = v66;
  uint64_t v61 = a2;
  uint64_t v62 = a8;
  uint64_t v24 = *(void *)(v66 + 16);
  if (v24)
  {
    Swift::Int rawValue = a5._rawValue;
    uint64_t v27 = *(void (**)(void *, unint64_t, uint64_t))(v15 + 16);
    uint64_t v25 = v15 + 16;
    int v26 = v27;
    unint64_t v28 = v66 + ((*(unsigned __int8 *)(v25 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 64));
    uint64_t v29 = *(void *)(v25 + 56);
    swift_bridgeObjectRetain();
    uint64_t v30 = 0;
    while (1)
    {
      v26(v18, v28, v14);
      a5._Swift::Int rawValue = *(void **)(PKDrawing.strokes.getter() + 16);
      swift_bridgeObjectRelease();
      BOOL v31 = __OFADD__(v30, a5._rawValue);
      v30 += (uint64_t)a5._rawValue;
      if (v31) {
        break;
      }
      (*(void (**)(void *, uint64_t))(v25 - 8))(v18, v14);
      v28 += v29;
      if (!--v24)
      {
        uint64_t v23 = swift_bridgeObjectRelease();
        a5._Swift::Int rawValue = rawValue;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v30 = 0;
LABEL_14:
  uint64_t v32 = *((void *)a5._rawValue + 2);
  uint64_t v33 = v30 - v32;
  if (__OFSUB__(v30, v32))
  {
    __break(1u);
LABEL_27:
    id v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    CGFloat v71 = v18;
    goto LABEL_19;
  }
  if (v63) {
    uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v63) + 0x320))(v23);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v65, v64, v35);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56);
  v38(v37, 0, 1, v35);
  uint64_t v39 = type metadata accessor for MagicPaperUsageProofreadingEvent();
  uint64_t v68 = v39;
  uint64_t v69 = _s9Coherence9CRKeyPathVACSQAAWlTm_0(&lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent and conformance MagicPaperUsageProofreadingEvent, (void (*)(uint64_t))type metadata accessor for MagicPaperUsageProofreadingEvent);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v67);
  *((unsigned char *)boxed_opaque_existential_1 + 1) = 0;
  *((unsigned char *)boxed_opaque_existential_1 + 65) = 0;
  *((_DWORD *)boxed_opaque_existential_1 + 17) = 0;
  *((unsigned char *)boxed_opaque_existential_1 + 72) = 0;
  *(_OWORD *)(boxed_opaque_existential_1 + 1) = 0u;
  *(_OWORD *)(boxed_opaque_existential_1 + 3) = 0u;
  *(_OWORD *)(boxed_opaque_existential_1 + 5) = 0u;
  swift_unknownObjectWeakInit();
  uint64_t v41 = (uint64_t)boxed_opaque_existential_1 + *(int *)(v39 + 68);
  v38(v41, 1, 1, v35);
  *(unsigned char *)boxed_opaque_existential_1 = v59;
  boxed_opaque_existential_1[7] = v33;
  *((unsigned char *)boxed_opaque_existential_1 + 64) = 1;
  outlined assign with take of Date?(v37, v41);
  swift_unknownObjectWeakAssign();

  id v18 = v71;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_27;
  }
LABEL_19:
  double v42 = a5._rawValue;
  unint64_t v44 = v18[2];
  unint64_t v43 = v18[3];
  if (v44 >= v43 >> 1) {
    CGFloat v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v44 + 1, 1, v18);
  }
  uint64_t v45 = v68;
  uint64_t v46 = v69;
  uint64_t v47 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v67, v68);
  double v48 = MEMORY[0x270FA5388](v47);
  CGFloat v50 = (char *)&rawValue - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v51 + 16))(v50, v48);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, (uint64_t)v50, (uint64_t *)&v71, v45, v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);

  a5._Swift::Int rawValue = v42;
LABEL_22:
  if (one-time initialization token for $currentAnalyticsEvents != -1) {
LABEL_25:
  }
    swift_once();
  swift_bridgeObjectRetain();
  TaskLocal.get()();
  uint64_t v52 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v52);
  uint64_t v70 = v67[0];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnalyticsEvent]);
  swift_task_localValuePush();
  uint64_t v53 = v66;
  swift_bridgeObjectRetain();
  uint64_t v54 = swift_bridgeObjectRetain();
  specialized _copySequenceToContiguousArray<A>(_:)(v54, v53);
  v56._Swift::Int rawValue = v55;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(a5, v56, 1);
  swift_release();
  swift_task_localValuePop();
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.widget(for:)(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v39 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v41);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v13 - 8);
  double v40 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v39 - v16;
  double v19 = MEMORY[0x270FA5388](v18);
  id v21 = (char *)&v39 - v20;
  id v22 = objc_msgSend(*a1, sel_pdfAnnotationUUID, v19);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  CRKeyPath.init(_:)();
  uint64_t v42 = v5;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v23(v21, 0, 1, v4);
  outlined init with copy of Any(a2, (uint64_t)v43);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  char v25 = swift_dynamicCast();
  int v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  if (v25)
  {
    uint64_t v27 = *(void *)(v24 - 8);
    v26(v11, 0, 1, v24);
    MEMORY[0x21054BA70](v24);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v24);
    unint64_t v28 = v17;
    uint64_t v29 = 0;
  }
  else
  {
    v26(v11, 1, 1, v24);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
    unint64_t v28 = v17;
    uint64_t v29 = 1;
  }
  v23(v28, v29, 1, v4);
  uint64_t v30 = (uint64_t)&v8[*(int *)(v41 + 48)];
  BOOL v31 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v21, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v17, v30, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  uint64_t v32 = v42;
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  if (v33((uint64_t)v8, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    if (v33(v30, 1, v4) == 1)
    {
      char v34 = -1;
    }
    else
    {
      BOOL v31 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
      char v34 = 0;
    }
  }
  else
  {
    uint64_t v35 = (uint64_t)v40;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v8, (uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    if (v33(v30, 1, v4) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v4);
      char v34 = 0;
      BOOL v31 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    else
    {
      uint64_t v36 = v39;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v39, v30, v4);
      _s9Coherence9CRKeyPathVACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
      v37(v36, v4);
      BOOL v31 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v37(v40, v4);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, v31);
  return v34 & 1;
}

void *CanvasViewSelectionInteractionDelegate.activeWidget.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 144))(ObjectType, v4);

    if (v6)
    {
      uint64_t v7 = (unint64_t *)&v6[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets];
      swift_beginAccess();
      unint64_t v8 = *v7;
      swift_bridgeObjectRetain();

      if (v8 >> 62) {
        goto LABEL_18;
      }
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
      swift_bridgeObjectRelease();
      unint64_t v9 = v8;
      while (1)
      {
        uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v10) {
          break;
        }
        while (1)
        {
          uint64_t v11 = 4;
          while (1)
          {
            id v12 = (v9 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x21054E050](v11 - 4, v8)
                : *(id *)(v8 + 8 * v11);
            uint64_t v13 = v12;
            uint64_t v14 = v11 - 3;
            if (__OFADD__(v11 - 4, 1)) {
              break;
            }
            id v15 = objc_msgSend(v12, sel_uiControl);
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
            if (swift_dynamicCast())
            {
              swift_bridgeObjectRelease_n();

              return v13;
            }

            ++v11;
            if (v14 == v10) {
              goto LABEL_13;
            }
          }
          __break(1u);
LABEL_18:
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
          swift_bridgeObjectRetain();
          unint64_t v9 = _bridgeCocoaArray<A>(_:)();
          swift_bridgeObjectRelease_n();
          unint64_t v8 = v9;
          if (!(v9 >> 62)) {
            break;
          }
          swift_bridgeObjectRetain();
          uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
          if (!v10) {
            goto LABEL_13;
          }
        }
      }
LABEL_13:
      swift_bridgeObjectRelease_n();
    }
  }
  return 0;
}

id CanvasViewSelectionInteractionDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasViewSelectionInteractionDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasViewSelectionInteractionDelegate()
{
  return self;
}

unint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, const CGPath *a2)
{
  uint64_t v3 = v2;
  CGPathRef v65 = a2;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v47 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for CGPathFillRule();
  uint64_t v9 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v64 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  CGFloat v63 = (char *)v42 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v62 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v48 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  id v60 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v44 = (char *)v42 - v17;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v18; uint64_t v18 = _CocoaArrayWrapper.endIndex.getter())
  {
    v42[1] = v3;
    unint64_t v58 = a1 & 0xC000000000000001;
    unsigned int v55 = *MEMORY[0x263F00040];
    uint64_t v54 = (void (**)(char *, void, uint64_t))(v9 + 104);
    unsigned int v53 = *MEMORY[0x263F00038];
    uint64_t v52 = v9 + 8;
    uint64_t v51 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
    unint64_t v43 = (void (**)(char *, uint64_t))(v7 + 8);
    CGFloat v50 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
    uint64_t v49 = (void (**)(char *, uint64_t, uint64_t))(v48 + 32);
    unint64_t v19 = MEMORY[0x263F8EE78];
    uint64_t v3 = 4;
    uint64_t v20 = (void *)MEMORY[0x263F8EED0];
    uint64_t v56 = v18;
    unint64_t v57 = a1;
    id v21 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
    while (1)
    {
      uint64_t v7 = v3 - 4;
      uint64_t v23 = v58 ? (void *)MEMORY[0x21054E050](v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      uint64_t v24 = v23;
      if (__OFADD__(v7, 1)) {
        break;
      }
      uint64_t v66 = v3;
      uint64_t v67 = v3 - 3;
      unint64_t v72 = v19;
      char v25 = (const CGPath *)(*(uint64_t (**)(void))((*v20 & *v23) + 0x1D8))();
      int v26 = *v54;
      uint64_t v27 = v63;
      uint64_t v28 = v59;
      (*v54)(v63, v55, v59);
      uint64_t v29 = v64;
      v26(v64, v53, v28);
      _s9Coherence9CRKeyPathVACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, MEMORY[0x263F00050]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      LOBYTE(v26) = v70 == v68;
      uint64_t v30 = *v21;
      (*v21)(v29, v28);
      LODWORD(v26) = CGPathIntersectsPath(v25, v65, (BOOL)v26);

      uint64_t v31 = v30(v27, v28);
      if (v26)
      {
        uint64_t v32 = v45;
        (*(void (**)(uint64_t))((*v20 & *v24) + 0xE8))(v31);
        uint64_t v33 = v46;
        SharedTagged_9.tag.getter();
        uint64_t v68 = v70;
        char v69 = v71;
        MEMORY[0x21054BDF0](v33);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        uint64_t v34 = (uint64_t)v62;
        WeakTagged_9.init(_:id:)();
        (*v43)(v32, v33);
        uint64_t v35 = 0;
      }
      else
      {
        uint64_t v35 = 1;
        uint64_t v34 = (uint64_t)v62;
      }
      uint64_t v9 = v61;
      unint64_t v19 = v72;
      (*v51)(v34, v35, 1, v61);

      int v36 = (*v50)(v34, 1, v9);
      a1 = v57;
      if (v36 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v34, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
        uint64_t v22 = v66;
      }
      else
      {
        uint64_t v37 = *v49;
        uint64_t v38 = v44;
        (*v49)(v44, v34, v9);
        v37(v60, (uint64_t)v38, v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, v19);
        }
        uint64_t v22 = v66;
        unint64_t v40 = *(void *)(v19 + 16);
        unint64_t v39 = *(void *)(v19 + 24);
        if (v40 >= v39 >> 1) {
          unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v19);
        }
        *(void *)(v19 + 16) = v40 + 1;
        v37((char *)(v19+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v40), (uint64_t)v60, v9);
      }
      uint64_t v3 = v22 + 1;
      if (v67 == v56)
      {
        swift_bridgeObjectRelease();
        return v19;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t (**v21)(char *, uint64_t);
  uint64_t v22;
  void *v23;
  void *v24;
  const CGPath *v25;
  void (*v26)(char *, void, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  unint64_t v39;
  unint64_t v40;
  void v42[2];
  void (**v43)(char *, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (**v49)(char *, uint64_t, uint64_t);
  uint64_t (**v50)(uint64_t, uint64_t, uint64_t);
  void (**v51)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  unsigned int v53;
  void (**v54)(char *, void, uint64_t);
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  CGPathRef v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  unint64_t v72;

  uint64_t v3 = v2;
  CGPathRef v65 = a2;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v47 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for CGPathFillRule();
  uint64_t v9 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v64 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  CGFloat v63 = (char *)v42 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v62 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v48 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  id v60 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v44 = (char *)v42 - v17;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v18; uint64_t v18 = _CocoaArrayWrapper.endIndex.getter())
  {
    v42[1] = v3;
    unint64_t v58 = a1 & 0xC000000000000001;
    unsigned int v55 = *MEMORY[0x263F00040];
    uint64_t v54 = (void (**)(char *, void, uint64_t))(v9 + 104);
    unsigned int v53 = *MEMORY[0x263F00038];
    uint64_t v52 = v9 + 8;
    uint64_t v51 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
    unint64_t v43 = (void (**)(char *, uint64_t))(v7 + 8);
    CGFloat v50 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
    uint64_t v49 = (void (**)(char *, uint64_t, uint64_t))(v48 + 32);
    unint64_t v19 = MEMORY[0x263F8EE78];
    uint64_t v3 = 4;
    uint64_t v20 = (void *)MEMORY[0x263F8EED0];
    uint64_t v56 = v18;
    unint64_t v57 = a1;
    id v21 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
    while (1)
    {
      uint64_t v7 = v3 - 4;
      uint64_t v23 = v58 ? (void *)MEMORY[0x21054E050](v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      uint64_t v24 = v23;
      if (__OFADD__(v7, 1)) {
        break;
      }
      uint64_t v66 = v3;
      uint64_t v67 = v3 - 3;
      unint64_t v72 = v19;
      char v25 = (const CGPath *)(*(uint64_t (**)(void))((*v20 & *v23) + 0x1D8))();
      int v26 = *v54;
      uint64_t v27 = v63;
      uint64_t v28 = v59;
      (*v54)(v63, v55, v59);
      uint64_t v29 = v64;
      v26(v64, v53, v28);
      lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, MEMORY[0x263F00050]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      LOBYTE(v26) = v70 == v68;
      uint64_t v30 = *v21;
      (*v21)(v29, v28);
      LODWORD(v26) = CGPathIntersectsPath(v25, v65, (BOOL)v26);

      uint64_t v31 = v30(v27, v28);
      if (v26)
      {
        uint64_t v32 = v45;
        (*(void (**)(uint64_t))((*v20 & *v24) + 0xE8))(v31);
        uint64_t v33 = v46;
        SharedTagged_9.tag.getter();
        uint64_t v68 = v70;
        char v69 = v71;
        MEMORY[0x21054BDF0](v33);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        uint64_t v34 = (uint64_t)v62;
        WeakTagged_9.init(_:id:)();
        (*v43)(v32, v33);
        uint64_t v35 = 0;
      }
      else
      {
        uint64_t v35 = 1;
        uint64_t v34 = (uint64_t)v62;
      }
      uint64_t v9 = v61;
      unint64_t v19 = v72;
      (*v51)(v34, v35, 1, v61);

      int v36 = (*v50)(v34, 1, v9);
      a1 = v57;
      if (v36 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v34, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
        uint64_t v22 = v66;
      }
      else
      {
        uint64_t v37 = *v49;
        uint64_t v38 = v44;
        (*v49)(v44, v34, v9);
        v37(v60, (uint64_t)v38, v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, v19);
        }
        uint64_t v22 = v66;
        unint64_t v40 = *(void *)(v19 + 16);
        unint64_t v39 = *(void *)(v19 + 24);
        if (v40 >= v39 >> 1) {
          unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v19);
        }
        *(void *)(v19 + 16) = v40 + 1;
        v37((char *)(v19+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v40), (uint64_t)v60, v9);
      }
      uint64_t v3 = v22 + 1;
      if (v67 == v56)
      {
        swift_bridgeObjectRelease();
        return v19;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 16);
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v5, a1) : *(id *)(a1 + 32 + 8 * v5);
      uint64_t v8 = v7;
      if (__OFADD__(v5++, 1)) {
        break;
      }
      if (v6)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = a2 + 40;
        uint64_t v11 = v6;
        while (((*(uint64_t (**)(void *))(*(void *)v10 + 32))(v8) & 1) == 0)
        {
          v10 += 16;
          if (!--v11)
          {

            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
        }
        uint64_t v12 = swift_bridgeObjectRelease();
        MEMORY[0x21054D330](v12);
        if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
LABEL_17:
        if (v5 == v4)
        {
LABEL_18:
          swift_bridgeObjectRelease();
          return v14;
        }
      }
      else
      {

        if (v5 == v4) {
          goto LABEL_18;
        }
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  id v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    v22[1] = v2;
    uint64_t v14 = a1 + 32;
    uint64_t v15 = a1;
    uint64_t v16 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v17 = (void (**)(char *, uint64_t))(v5 + 8);
    v22[0] = v15;
    swift_bridgeObjectRetain();
    uint64_t v25 = MEMORY[0x263F8EE58] + 8;
    uint64_t v23 = a2;
    do
    {
      outlined init with copy of Any(v14, (uint64_t)v27);
      swift_dynamicCast();
      MEMORY[0x21054B9C0](v8);
      (*v16)(v11, v8);
      if (*(void *)(a2 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7), (v19 & 1) != 0))
      {
        uint64_t v20 = *v17;
        id v24 = *(id *)(*(void *)(a2 + 56) + 8 * v18);
        uint64_t v21 = ((uint64_t (*)(char *, uint64_t))v20)(v7, v26);
        MEMORY[0x21054D330](v21);
        if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        a2 = v23;
      }
      else
      {
        (*v17)(v7, v26);
      }
      v14 += 32;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    return v28;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  unint64_t v32;
  char v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (**v38)(char *, uint64_t);
  uint64_t v39;
  int64_t v40;
  uint64_t (**v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v46 = a2;
  unint64_t v39 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  id v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v44 = (char *)&v36 - v11;
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v37 = a1 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v48 = MEMORY[0x263F8EE78];
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  uint64_t v15 = v14 & v12;
  uint64_t v42 = v10 + 32;
  unint64_t v43 = v10 + 16;
  uint64_t v38 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v45 = v10;
  unint64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v41 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v47 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  if (v15) {
    goto LABEL_8;
  }
LABEL_9:
  while (2)
  {
    uint64_t v20 = v17 + 1;
    if (!__OFADD__(v17, 1))
    {
      if (v20 < v40)
      {
        uint64_t v21 = *(void *)(v37 + 8 * v20);
        ++v17;
        if (v21) {
          goto LABEL_24;
        }
        uint64_t v17 = v20 + 1;
        if (v20 + 1 >= v40) {
          goto LABEL_32;
        }
        uint64_t v21 = *(void *)(v37 + 8 * v17);
        if (v21) {
          goto LABEL_24;
        }
        uint64_t v17 = v20 + 2;
        if (v20 + 2 >= v40) {
          goto LABEL_32;
        }
        uint64_t v21 = *(void *)(v37 + 8 * v17);
        if (v21) {
          goto LABEL_24;
        }
        uint64_t v17 = v20 + 3;
        if (v20 + 3 >= v40) {
          goto LABEL_32;
        }
        uint64_t v21 = *(void *)(v37 + 8 * v17);
        if (v21)
        {
LABEL_24:
          uint64_t v15 = (v21 - 1) & v21;
          for (unint64_t i = __clz(__rbit64(v21)) + (v17 << 6); ; unint64_t i = v18 | (v17 << 6))
          {
            id v24 = v44;
            uint64_t v23 = v45;
            (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v44, *(void *)(v47 + 48) + *(void *)(v45 + 72) * i, v6);
            (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v9, v24, v6);
            uint64_t v25 = (void *)MEMORY[0x210550400](v46 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
            if (!v25) {
              goto LABEL_7;
            }
            uint64_t v26 = v25;
            uint64_t v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v25) + 0x2F8))();
            uint64_t v29 = v28;

            uint64_t ObjectType = swift_getObjectType();
            MEMORY[0x21054B9C0](v6);
            uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 32))(ObjectType, v29);

            if (!*(void *)(v31 + 16)) {
              break;
            }
            uint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
            if ((v33 & 1) == 0) {
              break;
            }
            uint64_t v34 = *(id *)(*(void *)(v31 + 56) + 8 * v32);
            swift_bridgeObjectRelease();
            (*v38)(v5, v39);
            uint64_t v35 = (*v41)(v9, v6);
            MEMORY[0x21054D330](v35);
            if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            uint64_t result = specialized Array._endMutation()();
            if (!v15) {
              goto LABEL_9;
            }
LABEL_8:
            unint64_t v18 = __clz(__rbit64(v15));
            v15 &= v15 - 1;
          }
          swift_bridgeObjectRelease();
          (*v38)(v5, v39);
LABEL_7:
          uint64_t result = (*v41)(v9, v6);
          if (!v15) {
            continue;
          }
          goto LABEL_8;
        }
        uint64_t v22 = v20 + 4;
        if (v22 < v40)
        {
          uint64_t v21 = *(void *)(v37 + 8 * v22);
          if (v21)
          {
            uint64_t v17 = v22;
            goto LABEL_24;
          }
          while (1)
          {
            uint64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_34;
            }
            if (v17 >= v40) {
              break;
            }
            uint64_t v21 = *(void *)(v37 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }
      }
LABEL_32:
      swift_release();
      return v48;
    }
    break;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (**v30)(char *, uint64_t, uint64_t);
  uint64_t (*v31)(char *, uint64_t);
  unint64_t i;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void v54[2];
  char *v55;
  char *v56;
  uint64_t v57;
  int64_t v58;
  void (**v59)(char *, uint64_t, uint64_t);
  uint64_t (**v60)(char *, uint64_t);
  void (**v61)(char *, uint64_t);
  void (**v62)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  void (*v74)(char *, unint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v4 - 8);
  char v71 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGPathRef v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v6 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v56 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v70 = (char *)v54 - v9;
  uint64_t v10 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v10 - 8);
  char v69 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  CGRect v78 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68 - 8);
  uint64_t v64 = (char *)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unsigned int v55 = (char *)v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v18 = (char *)v54 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v66 = (char *)v54 - v20;
  CGRect v79 = MEMORY[0x263F8EE78];
  uint64_t v21 = *(void *)(a1 + 64);
  unint64_t v57 = a1 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  id v24 = v23 & v21;
  uint64_t v25 = a2 + OBJC_IVAR___PKDrawingCoherence_model;
  unint64_t v72 = a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_beginAccess();
  uint64_t v27 = 0;
  uint64_t v28 = v22 + 63;
  uint64_t v29 = v24;
  unint64_t v58 = v28 >> 6;
  uint64_t v30 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v62 = (void (**)(char *, uint64_t))(v6 + 8);
  CGFloat v63 = v14 + 32;
  uint64_t v61 = (void (**)(char *, uint64_t))(v78 + 8);
  uint64_t v67 = v14;
  id v60 = (uint64_t (**)(char *, uint64_t))(v14 + 8);
  v54[1] = v14 + 16;
  CGRect v75 = v13;
  CGRect v76 = v18;
  uint64_t v59 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  if (v29) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v33 = v27 + 1;
  if (!__OFADD__(v27, 1))
  {
    if (v33 < v58)
    {
      uint64_t v34 = *(void *)(v57 + 8 * v33);
      uint64_t v35 = v27 + 1;
      if (v34) {
        goto LABEL_23;
      }
      uint64_t v35 = v27 + 2;
      if (v27 + 2 >= v58) {
        goto LABEL_31;
      }
      uint64_t v34 = *(void *)(v57 + 8 * v35);
      if (v34) {
        goto LABEL_23;
      }
      uint64_t v35 = v27 + 3;
      if (v27 + 3 >= v58) {
        goto LABEL_31;
      }
      uint64_t v34 = *(void *)(v57 + 8 * v35);
      if (v34) {
        goto LABEL_23;
      }
      uint64_t v35 = v27 + 4;
      if (v27 + 4 >= v58) {
        goto LABEL_31;
      }
      uint64_t v34 = *(void *)(v57 + 8 * v35);
      if (v34)
      {
LABEL_23:
        CGRect v77 = (v34 - 1) & v34;
        CGRect v78 = v35;
        for (unint64_t i = __clz(__rbit64(v34)) + (v35 << 6); ; unint64_t i = __clz(__rbit64(v29)) | (v27 << 6))
        {
          uint64_t v38 = v66;
          uint64_t v37 = v67;
          unint64_t v39 = *(void *)(v72 + 48) + *(void *)(v67 + 72) * i;
          CGRect v74 = *(void (**)(char *, unint64_t, uint64_t))(v67 + 16);
          v74(v66, v39, v13);
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v18, v38, v13);
          Ref.id.getter();
          unint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
          lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
          uint64_t v41 = v64;
          WeakRef.init(id:)();
          uint64_t v42 = v70;
          unint64_t v43 = v65;
          CGRect v73 = *v30;
          v73(v70, v25, v65);
          type metadata accessor for PKDrawingStruct();
          _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
          unint64_t v44 = v25;
          uint64_t v45 = v43;
          uint64_t v46 = (uint64_t)v71;
          uint64_t v47 = v68;
          WeakRef.subscript.getter();
          (*v62)(v42, v45);
          LODWORD(v37) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v46, 1, v40);
          outlined destroy of StocksKitCurrencyCache.Provider?(v46, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
          if (v37 == 1) {
            break;
          }
          uint64_t v48 = (uint64_t)v55;
          v74(v55, (unint64_t)v76, v75);
          uint64_t v49 = (uint64_t)v56;
          CGFloat v50 = v44;
          uint64_t v51 = v44;
          uint64_t v30 = v59;
          v73(v56, v51, v45);
          uint64_t v52 = specialized PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)(v48, v49);
          (*v61)(v41, v47);
          uint64_t v31 = *v60;
          if (!v52)
          {
            uint64_t v13 = v75;
            unint64_t v18 = v76;
            uint64_t v25 = v50;
LABEL_6:
            uint64_t v29 = v77;
            uint64_t v27 = v78;
            uint64_t result = v31(v18, v13);
            if (!v29) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
          uint64_t v13 = v75;
          unint64_t v18 = v76;
          unsigned int v53 = v31(v76, v75);
          MEMORY[0x21054D330](v53);
          if (*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t result = specialized Array._endMutation()();
          uint64_t v25 = v50;
          uint64_t v29 = v77;
          uint64_t v27 = v78;
          if (!v77) {
            goto LABEL_8;
          }
LABEL_7:
          CGRect v77 = (v29 - 1) & v29;
          CGRect v78 = v27;
        }
        (*v61)(v41, v47);
        uint64_t v31 = *v60;
        uint64_t v13 = v75;
        unint64_t v18 = v76;
        uint64_t v25 = v44;
        uint64_t v30 = v59;
        goto LABEL_6;
      }
      int v36 = v27 + 5;
      if (v27 + 5 < v58)
      {
        uint64_t v34 = *(void *)(v57 + 8 * v36);
        if (v34)
        {
          uint64_t v35 = v27 + 5;
          goto LABEL_23;
        }
        while (1)
        {
          uint64_t v35 = v36 + 1;
          if (__OFADD__(v36, 1)) {
            goto LABEL_33;
          }
          if (v35 >= v58) {
            break;
          }
          uint64_t v34 = *(void *)(v57 + 8 * v35);
          ++v36;
          if (v34) {
            goto LABEL_23;
          }
        }
      }
    }
LABEL_31:
    swift_release();
    return v79;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v10 = *(void (***)(uint64_t, uint64_t))(v26 - 8);
  v11.n128_f64[0] = MEMORY[0x270FA5388](v26);
  id v24 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x263F8EE78];
  unint64_t v27 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v13 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v13)
  {
    while (1)
    {
      unint64_t v18 = v3;
      char v19 = v9;
      unint64_t v14 = 0;
      uint64_t v22 = v27 & 0xFFFFFFFFFFFFFF8;
      unint64_t v23 = v27 & 0xC000000000000001;
      uint64_t v20 = v10 + 1;
      uint64_t v21 = (void (**)(char *, uint64_t))(v7 + 8);
      while (v23)
      {
        uint64_t v15 = (void *)MEMORY[0x21054E050](v14, v27, v11);
LABEL_9:
        uint64_t v10 = (void (**)(uint64_t, uint64_t))v15;
        unint64_t v3 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_15;
        }
        (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v15) + 0xE8))();
        SharedTagged_9.tag.getter();
        uint64_t v28 = v30;
        char v29 = v31;
        MEMORY[0x21054BDF0](v6);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        uint64_t v16 = (uint64_t)v24;
        WeakTagged_9.init(_:id:)();
        (*v21)(v9, v6);
        uint64_t v7 = specialized Set.contains(_:)(v16, v25);
        (*v20)(v16, v26);
        if (v7)
        {
          uint64_t v7 = (uint64_t)&v32;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v9 = v19;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v14;
        if (v3 == v13) {
          return v32;
        }
      }
      if (v14 < *(void *)(v22 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      if (!v13) {
        return MEMORY[0x263F8EE78];
      }
    }
    uint64_t v15 = *(id *)(v27 + 8 * v14 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x263F8EE78];
}

{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  id v6;
  void *v7;
  char v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  unint64_t j;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  unint64_t v3 = a1;
  unint64_t v27 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_27;
  }
  for (unint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; unint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v21 = v3;
    uint64_t v5 = 0;
    id v24 = v3 & 0xFFFFFFFFFFFFFF8;
    uint64_t v25 = v3 & 0xC000000000000001;
    unint64_t v23 = v3 + 32;
    uint64_t v22 = i;
    uint64_t v26 = a2 + 56;
    while (1)
    {
      if (v25)
      {
        uint64_t v6 = (id)MEMORY[0x21054E050](v5, v21);
        goto LABEL_9;
      }
      if (v5 >= *(void *)(v24 + 16)) {
        break;
      }
      uint64_t v6 = *(id *)(v23 + 8 * v5);
LABEL_9:
      uint64_t v7 = v6;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_26;
      }
      if ((a2 & 0xC000000000000001) != 0)
      {
        unint64_t v3 = (uint64_t)v6;
        uint64_t v9 = __CocoaSet.contains(_:)();

        if ((v9 & 1) == 0)
        {

          goto LABEL_5;
        }
LABEL_4:
        unint64_t v3 = (uint64_t)&v27;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_5:
        unint64_t i = v22;
        if (v5 == v22) {
          return v27;
        }
      }
      else
      {
        if (*(void *)(a2 + 16))
        {
          unint64_t v3 = (uint64_t)v6;
          uint64_t v10 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
          __n128 v11 = -1 << *(unsigned char *)(a2 + 32);
          uint64_t v12 = v10 & ~v11;
          if ((*(void *)(v26 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
          {
            unint64_t v3 = type metadata accessor for AnyCanvasElementView();
            uint64_t v13 = *(id *)(*(void *)(a2 + 48) + 8 * v12);
            unint64_t v14 = static NSObject.== infix(_:_:)();

            if ((v14 & 1) == 0)
            {
              uint64_t v15 = ~v11;
              for (j = v12 + 1; ; j = v17 + 1)
              {
                uint64_t v17 = j & v15;
                if (((*(void *)(v26 + (((j & v15) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v15)) & 1) == 0) {
                  break;
                }
                unint64_t v18 = *(id *)(*(void *)(a2 + 48) + 8 * v17);
                char v19 = static NSObject.== infix(_:_:)();

                if (v19) {
                  goto LABEL_4;
                }
              }

              goto LABEL_5;
            }
            goto LABEL_4;
          }
        }

        if (v5 == i) {
          return v27;
        }
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    ;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleLassoSelection:strokes:inAttachment:)(void *a1, uint64_t a2)
{
  uint64_t v38 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v39 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v37[0] = 0;
  char v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  if (v5)
  {
    if (a1)
    {
      id v6 = objc_msgSend(a1, sel_CGPath);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
        uint64_t v9 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
        if (v9)
        {
          uint64_t v10 = (void *)v9;
          uint64_t v11 = *(void *)(v8 + 8);
          uint64_t ObjectType = swift_getObjectType();
          unint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
          unint64_t v14 = v7;
          specialized Sequence.compactMap<A>(_:)(v13, v14);
          swift_bridgeObjectRelease();

          uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
          id v16 = a1;
          uint64_t v17 = v15(ObjectType, v11);
          if (v17)
          {
            unint64_t v18 = (void *)v17;
            uint64_t v19 = *(void *)(v17 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate);
            if (v19
              && (uint64_t v20 = *(void **)(v19 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController)) != 0)
            {
              type metadata accessor for UUID();
              _s9Coherence9CRKeyPathVACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
              id v21 = v20;
              Class isa = Set._bridgeToObjectiveC()().super.isa;
              id v23 = objc_msgSend(v21, sel_adjustedSelectedStrokes_selectionPath_, isa, v16);

              a2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
            }
            else
            {
              swift_bridgeObjectRetain();
            }
          }
          else
          {

            swift_bridgeObjectRetain();
          }
          uint64_t v29 = swift_bridgeObjectRetain();
          uint64_t v30 = specialized Set.init<A>(_:)(v29);
          swift_bridgeObjectRelease();
          uint64_t v31 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(a2);
          uint64_t v32 = specialized Set.init<A>(_:)(v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v33 = swift_bridgeObjectRelease();
          uint64_t v34 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v10) + 0x88))(v33);
          if (v34)
          {
            uint64_t v35 = (void *)v34;
            AnyCanvas.selection.setter(v30, v32, 6, 0);
          }
          else
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          goto LABEL_18;
        }
      }
    }
    id v24 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v24)
    {
      uint64_t v25 = v24;
      unint64_t v14 = (const CGPath *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v24) + 0x88))();

      if (v14)
      {
        swift_bridgeObjectRetain();
        uint64_t v26 = specialized Set.init<A>(_:)(MEMORY[0x263F8EE78]);
        uint64_t v27 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(a2);
        uint64_t v28 = specialized Set.init<A>(_:)(v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        AnyCanvas.selection.setter(v26, v28, 6, 0);
LABEL_18:
      }
    }
  }
  return v5 & 1;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v9 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v9 - 8);
  CGPathRef v65 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v11 - 8);
  CGRect v73 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  unint64_t v13 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  char v71 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v74 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  CGRect v78 = (char *)&v65 - v22;
  double v24 = MEMORY[0x270FA5388](v23);
  uint64_t v70 = (char *)&v65 - v25;
  uint64_t v26 = v4 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v27 = MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v24);
  if (v27)
  {
    uint64_t v28 = (void *)v27;
    uint64_t v29 = *(void *)(v26 + 8);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 64))(ObjectType, v29);

    uint64_t v79 = v31;
    if (v31 >> 62)
    {
      if (v79 < 0) {
        uint64_t v28 = (void *)v79;
      }
      else {
        uint64_t v28 = (void *)(v79 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v32 = *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v67 = v20;
    uint64_t v66 = v26;
    if (v32)
    {
      if (v32 < 1)
      {
        __break(1u);
LABEL_42:
        unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, v13);
        goto LABEL_29;
      }
      uint64_t v33 = 0;
      unint64_t v34 = v79 & 0xC000000000000001;
      CGRect v76 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56);
      uint64_t v68 = (void (**)(char *, uint64_t))(v13 + 8);
      CGRect v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
      CGRect v77 = (void (**)(char *, char *, uint64_t))(v74 + 32);
      unint64_t v13 = MEMORY[0x263F8EE78];
      uint64_t v35 = (void *)MEMORY[0x263F8EED0];
      unint64_t v69 = v79 & 0xC000000000000001;
      do
      {
        if (v34) {
          int v36 = (void *)MEMORY[0x21054E050](v33, v79);
        }
        else {
          int v36 = *(id *)(v79 + 8 * v33 + 32);
        }
        uint64_t v37 = v36;
        uint64_t v38 = (void *)(*(uint64_t (**)(void))((*v35 & *v36) + 0x1D8))();
        int v39 = CGPathIntersectsRect();

        if (v39)
        {
          unint64_t v40 = *(void (**)(void))((*v35 & *v37) + 0xE8);
          uint64_t v41 = v71;
          v40();
          uint64_t v42 = v32;
          uint64_t v43 = v18;
          unint64_t v44 = v13;
          uint64_t v45 = v72;
          SharedTagged_9.tag.getter();
          uint64_t v80 = v82;
          char v81 = v83;
          MEMORY[0x21054BDF0](v45);
          lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
          WeakTagged_9.init(_:id:)();
          uint64_t v46 = v45;
          unint64_t v13 = v44;
          uint64_t v18 = v43;
          uint64_t v32 = v42;
          unint64_t v34 = v69;
          (*v68)(v41, v46);
          uint64_t v47 = 0;
        }
        else
        {
          uint64_t v47 = 1;
        }
        (*v76)(v17, v47, 1, v18);

        if ((*v75)(v17, 1, v18) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
        }
        else
        {
          uint64_t v48 = *v77;
          uint64_t v49 = v70;
          (*v77)(v70, v17, v18);
          v48(v78, v49, v18);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, v13);
          }
          unint64_t v51 = *(void *)(v13 + 16);
          unint64_t v50 = *(void *)(v13 + 24);
          if (v51 >= v50 >> 1) {
            unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, v13);
          }
          *(void *)(v13 + 16) = v51 + 1;
          v48((char *)(v13+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(void *)(v74 + 72) * v51), v78, v18);
        }
        uint64_t v35 = (void *)MEMORY[0x263F8EED0];
        ++v33;
      }
      while (v32 != v33);
    }
    else
    {
      unint64_t v13 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease_n();
    uint64_t v20 = v67;
    uint64_t v26 = v66;
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t v52 = MEMORY[0x210550400](v26);
  if (!v52) {
    goto LABEL_32;
  }
  unsigned int v53 = (void *)v52;
  uint64_t v54 = *(void *)(v26 + 8);
  uint64_t v55 = swift_getObjectType();
  uint64_t v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v54 + 144))(v55, v54);

  if (!v56) {
    goto LABEL_32;
  }
  v84.origin.CGFloat x = a1;
  v84.origin.CGFloat y = a2;
  v84.size.CGFloat width = a3;
  v84.size.CGFloat height = a4;
  CGFloat MidX = CGRectGetMidX(v84);
  v85.origin.CGFloat x = a1;
  v85.origin.CGFloat y = a2;
  v85.size.CGFloat width = a3;
  v85.size.CGFloat height = a4;
  CGFloat MidY = CGRectGetMidY(v85);
  uint64_t v28 = FormFillingView.widget(at:)(MidX, MidY);

  if (!v28) {
    goto LABEL_32;
  }
  if (!v13)
  {

    return 0;
  }
  LOBYTE(v82) = 8;
  id v59 = objc_msgSend(v28, sel_pdfAnnotationUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  CRKeyPath.init(_:)();
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_42;
  }
LABEL_29:
  unint64_t v61 = *(void *)(v13 + 16);
  unint64_t v60 = *(void *)(v13 + 24);
  if (v61 >= v60 >> 1) {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1, v13);
  }
  *(void *)(v13 + 16) = v61 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v74 + 32))(v13+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(void *)(v74 + 72) * v61, v20, v18);

LABEL_32:
  if (!v13) {
    return 0;
  }
  uint64_t v62 = swift_bridgeObjectRetain();
  uint64_t v63 = specialized _arrayForceCast<A, B>(_:)(v62);
  swift_bridgeObjectRelease_n();
  return v63;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_CGPath);
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v4 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (v4)
  {
    char v5 = (void *)v4;
    uint64_t v6 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);

    uint64_t v9 = (const CGPath *)v2;
    unint64_t v10 = specialized Sequence.compactMap<A>(_:)(v8, v9);
    swift_bridgeObjectRelease();

    uint64_t v11 = specialized _arrayForceCast<A, B>(_:)(v10);
    swift_bridgeObjectRelease();
  }
  else
  {

    return 0;
  }
  return v11;
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didSelectElements:inAttachment:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71[3] = &type metadata for PencilAndPaperFeatureFlags;
  CGFloat v71[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v71[0]) = 0;
  char v9 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
  if ((v9 & 1) == 0)
  {
    unint64_t v10 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v10) + 0x88))();

      if (v12)
      {
        uint64_t v69 = v6;
        id v67 = a1;
        unint64_t v13 = specialized _arrayForceCast<A, B>(_:)(a2);
        uint64_t v68 = (char *)specialized Set.init<A>(_:)((uint64_t)v13);
        swift_bridgeObjectRelease();
        uint64_t v14 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
        uint64_t v15 = *(char **)(v12 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
        if (v15)
        {
          unint64_t v13 = *(NSObject **)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
          uint64_t v16 = *(void *)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
          uint64_t v17 = *(void *)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
          int v18 = v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          uint64_t v19 = v15;
          uint64_t v65 = v17;
          int v66 = v18;
          CanvasElementResizeView.selection.setter((uint64_t)v68, v16, v17, v18);

          uint64_t v68 = (char *)v12;
          uint64_t v20 = *(void *)(v12 + v14);
          uint64_t v70 = v14;
          if (v20)
          {
            uint64_t v21 = v20 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
            uint64_t v22 = *(void *)v21;
            uint64_t v23 = *(void *)(v21 + 8);
            uint64_t v24 = *(void *)(v21 + 16);
            int v25 = *(unsigned __int8 *)(v21 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (specialized static Set.== infix(_:_:)((uint64_t)v13, v22))
            {
              uint64_t v64 = v24;
              char v26 = specialized static Set.== infix(_:_:)(v16, v23);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v28 = v68;
              uint64_t v27 = v69;
              uint64_t v29 = (void *)MEMORY[0x263F8EED0];
              if (v26)
              {
                if (v66)
                {
                  if (v25) {
                    goto LABEL_40;
                  }
                }
                else
                {
                  if (v65 == v64) {
                    char v51 = v25;
                  }
                  else {
                    char v51 = 1;
                  }
                  if ((v51 & 1) == 0)
                  {
LABEL_40:
                    uint64_t v58 = v70;
                    uint64_t v59 = *(void *)&v28[v70];
                    if (v59)
                    {
                      unint64_t v60 = (void *)(v59 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
                      if (!*(void *)(*v60 + 16) && !*(void *)(v60[1] + 16)) {
                        goto LABEL_48;
                      }
                      if (objc_msgSend(v67, sel_currentSelectionHasStrokes))
                      {
                        char v61 = 2;
LABEL_47:
                        type metadata accessor for Analytics();
                        swift_initStaticObject();
                        Analytics.recordDidMakeSelection(type:contentType:)(1, v61);
LABEL_48:

                        return;
                      }
                      uint64_t v62 = *(void *)&v28[v58];
                      if (v62)
                      {
                        char v61 = *(void *)(*(void *)(v62 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection)
                                        + 16) > 1uLL;
                        goto LABEL_47;
                      }
LABEL_57:
                      __break(1u);
                      return;
                    }
                    goto LABEL_53;
                  }
                }
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v28 = v68;
              uint64_t v27 = v69;
              uint64_t v29 = (void *)MEMORY[0x263F8EED0];
            }
            if (one-time initialization token for miniMenuLogger != -1) {
              swift_once();
            }
            uint64_t v30 = __swift_project_value_buffer(v5, (uint64_t)miniMenuLogger);
            (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v8, v30, v5);
            unint64_t v13 = v28;
            unint64_t v31 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.info.getter();
            BOOL v33 = os_log_type_enabled(v31, v32);
            uint64_t v34 = v70;
            if (v33)
            {
              uint64_t v35 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)uint64_t v35 = 134217984;
              uint64_t v36 = *(void *)&v28[v34];
              if (!v36)
              {
LABEL_55:

                __break(1u);
                goto LABEL_56;
              }
              uint64_t v37 = v35;
              uint64_t v38 = *(void *)(*(void *)(v36 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);

              v71[0] = v38;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              _os_log_impl(&dword_20C2D7000, v31, v32, "Changing selection to have %ld elements", v37, 0xCu);
              MEMORY[0x210550270](v37, -1, -1);
              uint64_t v27 = v69;
              uint64_t v34 = v70;
            }
            else
            {

              unint64_t v31 = v13;
            }

            uint64_t v39 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v8, v5);
            MEMORY[0x270FA5388](v39);
            *(&v63 - 2) = (uint64_t)v13;
            AnyCanvas.updateCanvasState(_:)();
            if ([v13 isFirstResponder]) {
              goto LABEL_34;
            }
            unint64_t v40 = *(void **)&v28[v34];
            if (!v40)
            {
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
            id v41 = v40;
            uint64_t v42 = swift_bridgeObjectRetain();
            unint64_t v43 = specialized Sequence.compactMap<A>(_:)(v42, (uint64_t)v41);

            swift_bridgeObjectRelease();
            if (v43 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            swift_bridgeObjectRelease();
            if (!v44)
            {
LABEL_34:
              uint64_t v52 = *(Class *)((char *)&v13->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
              if (v52)
              {
                id v53 = v52;
                HandwritingReflowView.updateForNewSelection()();
              }
              uint64_t v54 = (*(uint64_t (**)(void))((*v29 & (uint64_t)v13->isa) + 0x3A8))();
              uint64_t v55 = *(void *)&v28[v34];
              if (!v55) {
                goto LABEL_54;
              }
              uint64_t v56 = (void *)(v55 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
              if (!*(void *)(*v56 + 16) && !*(void *)(v56[1] + 16))
              {
                unint64_t v57 = (void *)(*(uint64_t (**)(uint64_t))((*v29 & (uint64_t)v13->isa) + 0x320))(v54);
                objc_msgSend(v57, sel__clearSelectionIfNecessary);
              }
              goto LABEL_40;
            }
            uint64_t v45 = v13;
            id v46 = [v45 window];
            if (v46)
            {
              uint64_t v47 = v46;
              uint64_t v48 = objc_msgSend(self, sel_activeToolPickerForWindow_, v46);
              if (v48)
              {
                uint64_t v49 = v48;
                id v50 = [v48 _visibilityUpdatesEnabled];
                [v49 _setVisibilityUpdatesEnabled:0];
                [v45 becomeFirstResponder];
                [v49 _setVisibilityUpdatesEnabled:v50];

                uint64_t v45 = v49;
LABEL_33:

                goto LABEL_34;
              }
            }
            [v45 becomeFirstResponder];
            goto LABEL_33;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
    }
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDragElements:with:inAttachment:)(uint64_t a1, CGFloat *a2)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v72.CGFloat d = &type metadata for PencilAndPaperFeatureFlags;
  *(void *)&v72.tCGFloat x = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v72.a) = 0;
  char v13 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
  if (v13) {
    return;
  }
  uint64_t v14 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v15 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (!v15) {
    return;
  }
  uint64_t v16 = (void *)v15;
  uint64_t v70 = v6;
  uint64_t v17 = *(void *)(v14 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(ObjectType, v17);

  uint64_t v20 = (void *)MEMORY[0x210550400](v14);
  if (!v20
    || (uint64_t v21 = v20,
        uint64_t v22 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v20) + 0x88))(),
        v21,
        !v22))
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v71 = v5;
  uint64_t v66 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v23 = *(void *)((char *)v22 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v23)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }
  uint64_t v24 = *(void **)(v23 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
  *(void *)(v23 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = 1;
  outlined consume of ResizeView.ActiveHandle(v24);
  int v25 = v22;
  char v26 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v22) + 0x308);
  id v67 = v25;
  uint64_t v27 = (void *)v26();
  double v28 = 1.0;
  double v29 = 1.0;
  if (v27)
  {
    uint64_t v30 = v27;
    objc_msgSend(v27, sel_zoomScale);
    double v29 = v31;
  }
  double v32 = a2[4];
  BOOL v33 = (void *)v26();
  if (v33)
  {
    uint64_t v34 = v33;
    objc_msgSend(v33, sel_zoomScale);
    double v28 = v35;
  }
  double v36 = a2[5];
  uint64_t v37 = specialized _arrayForceCast<A, B>(_:)(a1);
  uint64_t v38 = *(void *)(v37 + 16);
  if (v38)
  {
    double v39 = v32 / v29;
    CGFloat v40 = *a2;
    CGFloat v41 = a2[1];
    CGFloat v42 = a2[2];
    CGFloat v43 = a2[3];
    uint64_t v45 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    uint64_t v44 = v10 + 16;
    unint64_t v46 = (*(unsigned __int8 *)(v44 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 64);
    uint64_t v65 = v37;
    unint64_t v47 = v37 + v46;
    uint64_t v48 = (uint64_t (**)(char *, uint64_t))(v70 + 8);
    uint64_t v69 = *(void *)(v44 + 56);
    uint64_t v70 = v44;
    uint64_t v49 = (void (**)(char *, uint64_t))(v44 - 8);
    id v50 = v45;
    double v51 = v36 / v28;
    uint64_t v68 = v45;
    v45(v12, v37 + v46, v9);
    while (1)
    {
      MEMORY[0x21054B9C0](v9);
      if (*(void *)(v19 + 16) && (unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v53 & 1) != 0))
      {
        uint64_t v54 = *v48;
        uint64_t v55 = *(id *)(*(void *)(v19 + 56) + 8 * v52);
        uint64_t v56 = v54(v8, v71);
        uint64_t v57 = v19;
        uint64_t v58 = (uint64_t *)MEMORY[0x263F8EED0];
        uint64_t v59 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v55) + 0x1E8))(v56);
        v73.origin.CGFloat x = (*(double (**)(uint64_t))((*v58 & *v55) + 0x170))(v59);
        v72.CGFloat a = v40;
        v72.CGFloat b = v41;
        v72.CGFloat c = v42;
        v72.CGFloat d = v43;
        v72.tCGFloat x = v39;
        v72.tCGFloat y = v51;
        CGRect v74 = CGRectApplyAffineTransform(v73, &v72);
        uint64_t v60 = *v58;
        uint64_t v19 = v57;
        id v50 = v68;
        (*(void (**)(__n128, __n128, __n128, __n128))((v60 & *v55) + 0x180))((__n128)v74.origin, *(__n128 *)&v74.origin.y, (__n128)v74.size, *(__n128 *)&v74.size.height);
      }
      else
      {
        (*v48)(v8, v71);
      }
      (*v49)(v12, v9);
      v47 += v69;
      if (!--v38) {
        break;
      }
      v50(v12, v47, v9);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v61 = swift_bridgeObjectRelease();
  uint64_t v62 = v67;
  uint64_t v63 = *(void *)((char *)v67 + v66);
  if (!v63) {
    goto LABEL_26;
  }
  uint64_t v64 = (void *)(v63 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (*(void *)(*v64 + 16) || *(void *)(v64[1] + 16)) {
    (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v67) + 0x318))(v61);
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(uint64_t a1)
{
  uint64_t v24 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v25 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v23[0] = 0;
  char v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
    uint64_t v5 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      uint64_t v7 = *(void *)(v4 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);

      uint64_t v10 = (void *)MEMORY[0x210550400](v4);
      if (!v10) {
        goto LABEL_10;
      }
      uint64_t v11 = v10;
      uint64_t v12 = (void *)MEMORY[0x263F8EED0];
      char v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v10) + 0x88))();

      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v14 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
      uint64_t v15 = *(void *)((char *)v13 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (!v15)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v16 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
      *(void *)(v15 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = 0;
      outlined consume of ResizeView.ActiveHandle(v16);
      uint64_t v17 = *(void **)((char *)v13 + v14);
      if (!v17)
      {
LABEL_25:
        __break(1u);
        return;
      }
      objc_msgSend(v17, sel_layoutSubviews);
      if (!*(void *)(a1 + 16))
      {
LABEL_11:
        swift_bridgeObjectRelease();

        return;
      }
      swift_bridgeObjectRetain();
      unint64_t v18 = specialized Sequence.compactMap<A>(_:)(a1, v9);
      swift_bridgeObjectRelease_n();
      if ((*(uint64_t (**)(unint64_t, uint64_t))((*v12 & *v13) + 0x508))(v18, 1))
      {
        specialized AnyCanvas.undoableEndLiveEdits<A>(for:)(v18);
        goto LABEL_11;
      }
      if (v18 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v19) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v19)
        {
LABEL_15:
          if (v19 >= 1)
          {
            for (uint64_t i = 0; i != v19; ++i)
            {
              if ((v18 & 0xC000000000000001) != 0) {
                uint64_t v21 = (void *)MEMORY[0x21054E050](i, v18);
              }
              else {
                uint64_t v21 = *(id *)(v18 + 8 * i + 32);
              }
              uint64_t v22 = v21;
              (*(void (**)(void, uint64_t))((*v12 & *v21) + 0x1F0))(0, 1);
            }
            goto LABEL_22;
          }
          __break(1u);
          goto LABEL_24;
        }
      }
LABEL_22:

LABEL_10:
      swift_bridgeObjectRelease();
    }
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didClearSelectionForElements:inAttachment:)()
{
  uint64_t v1 = v0;
  char v13 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v14 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v12[0] = 0;
  char v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  if ((v2 & 1) == 0)
  {
    char v3 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x88))();

      if (v5)
      {
        AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
        uint64_t v6 = CanvasViewSelectionInteractionDelegate.activeWidget.getter();

        if (!v6)
        {
LABEL_11:

          return;
        }
        id v7 = v5;
        id v8 = objc_msgSend(v7, sel_window);
        if (v8)
        {
          uint64_t v9 = v8;
          id v10 = objc_msgSend(self, sel_activeToolPickerForWindow_, v8);
          if (v10)
          {
            uint64_t v5 = v10;
            id v11 = objc_msgSend(v10, sel__visibilityUpdatesEnabled);
            objc_msgSend(v5, sel__setVisibilityUpdatesEnabled_, 0);
            objc_msgSend(v7, sel_becomeFirstResponder);
            objc_msgSend(v5, sel__setVisibilityUpdatesEnabled_, v11);

            id v7 = v9;
LABEL_10:

            goto LABEL_11;
          }
        }
        objc_msgSend(v7, sel_becomeFirstResponder);
        uint64_t v5 = v7;
        goto LABEL_10;
      }
    }
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:clearSelectionInAttachment:)()
{
  uint64_t v1 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (!v1) {
    return;
  }
  char v2 = v1;
  id v9 = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))();

  if (!v9) {
    return;
  }
  AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
  char v3 = CanvasViewSelectionInteractionDelegate.activeWidget.getter();

  if (v3)
  {
    id v4 = v9;
    id v5 = objc_msgSend(v4, sel_window);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = objc_msgSend(self, sel_activeToolPickerForWindow_, v5);
      if (v7)
      {
        id v9 = v7;
        id v8 = objc_msgSend(v7, sel__visibilityUpdatesEnabled);
        objc_msgSend(v9, sel__setVisibilityUpdatesEnabled_, 0);
        objc_msgSend(v4, sel_becomeFirstResponder);
        objc_msgSend(v9, sel__setVisibilityUpdatesEnabled_, v8);

        id v4 = v6;
LABEL_10:

        goto LABEL_11;
      }
    }
    objc_msgSend(v4, sel_becomeFirstResponder);
    id v9 = v4;
    goto LABEL_10;
  }
LABEL_11:
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:canPerformAction:withSender:inAttachment:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t result = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (!result) {
    return result;
  }
  char v3 = (void *)result;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(ObjectType, v4);

  id v7 = (void *)MEMORY[0x210550400](v1);
  if (!v7) {
    goto LABEL_12;
  }
  id v8 = v7;
  id v9 = (void *)MEMORY[0x263F8EED0];
  id v10 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x88))();

  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = AnyCanvas.acceptedDropLayouts.getter();

  uint64_t v12 = (void *)MEMORY[0x210550400](v1);
  if (!v12 || (char v13 = v12, v14 = (void *)(*(uint64_t (**)(void))((*v9 & *v12) + 0x88))(), v13, !v14))
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if ((static Selector.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if ((static Selector.== infix(_:_:)() & 1) != 0
      || (static Selector.== infix(_:_:)() & 1) != 0
      || (static Selector.== infix(_:_:)() & 1) != 0
      || (static Selector.== infix(_:_:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      AnyCanvas.selectedCanvasElementIds.getter();
      uint64_t v20 = v19;

      uint64_t v21 = *(void *)(v20 + 16);
      swift_bridgeObjectRelease();
      return v21 != 0;
    }
    if ((static Selector.== infix(_:_:)() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      char v24 = static Selector.== infix(_:_:)();

      return v24 & 1;
    }
    AnyCanvas.selectedCanvasElementIds.getter();
    uint64_t v23 = *(void *)(v22 + 16);
    swift_bridgeObjectRelease();
    if (!v23) {
      goto LABEL_8;
    }

LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(self, sel_generalPasteboard);
  id v16 = objc_msgSend(v15, sel_itemProviders);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  unint64_t v6 = specialized Sequence.compactMap<A>(_:)(v17, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_8:
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v18 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
  }
  return v18 != 0;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:pasteboardRepresentationsForElements:strokes:inAttachment:)(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = v5;
  id v7 = (void *)MEMORY[0x263F8EED0];
  id v8 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x88))();

  if (!v8) {
    return 0;
  }
  if (!*(void *)(a1 + 16) && !*(void *)(a2 + 16)) {
    goto LABEL_7;
  }
  uint64_t v9 = specialized _arrayForceCast<A, B>(_:)(a1);
  swift_bridgeObjectRetain();
  uint64_t v10 = specialized Set.init<A>(_:)(v9);
  uint64_t v11 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(a2);
  uint64_t v12 = specialized Set.init<A>(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))((*v7 & *v8) + 0x650))(v10, v12, 6, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v13)
  {
LABEL_7:

    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_20C832C20;
  *(void *)(v14 + 32) = v13;

  return v14;
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteractionDidPaste(_:at:in:)(double a1, double a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, uti: String)?);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  id v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  unint64_t v17 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v13);
  if (v17)
  {
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v66 = v17;
    uint64_t ObjectType = swift_getObjectType();
    id v67 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v66) + 0x88))();
    if (v67)
    {
      uint64_t v64 = ObjectType;
      uint64_t v65 = v18;
      uint64_t v20 = v12;
      uint64_t v21 = self;
      id v22 = objc_msgSend(v21, sel_generalPasteboard);
      id v23 = objc_msgSend(v22, sel_items);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      Array<A>.pasteboardPaperKitURL.getter(v24, (uint64_t)v7);
      swift_bridgeObjectRelease();
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (url: URL, uti: String));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v7, 1, v25) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for (url: URL, uti: String)?);
        id v26 = objc_msgSend(v21, sel_generalPasteboard);
        id v27 = objc_msgSend(v26, sel_items);

        uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)&v68.CGFloat a = MEMORY[0x263F8EE78];
        uint64_t v29 = *(void *)(v28 + 16);
        if (v29)
        {
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v29; ++i)
          {
            uint64_t v31 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v31);
          }
          swift_bridgeObjectRelease_n();
          CGFloat a = v68.a;
        }
        else
        {
          swift_bridgeObjectRelease();
          CGFloat a = MEMORY[0x263F8EE78];
        }
        char v40 = specialized Sequence<>.contains(_:)(0xD000000000000011, 0x800000020C84EE60, *(void **)&a);
        uint64_t v41 = swift_bridgeObjectRelease();
        if (v40)
        {
        }
        else
        {
          CGFloat v42 = v67;
          CGFloat v43 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v67) + 0x2F8))(v41);
          objc_msgSend(v43, sel_convertPoint_fromCoordinateSpace_, v42, a1, a2);
          double x = v44;
          double y = v46;

          id v48 = objc_msgSend(v21, sel_generalPasteboard);
          id v49 = objc_msgSend(v48, sel_itemProviders);

          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
          unint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v50 >> 62) {
            goto LABEL_39;
          }
          uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
          while (v51)
          {
            unint64_t v52 = 0;
            uint64_t v64 = v50 + 32;
            uint64_t v65 = v50 & 0xFFFFFFFFFFFFFF8;
            while (1)
            {
              if ((v50 & 0xC000000000000001) != 0)
              {
                id v53 = (id)MEMORY[0x21054E050](v52, v50);
              }
              else
              {
                if (v52 >= *(void *)(v65 + 16)) {
                  goto LABEL_38;
                }
                id v53 = *(id *)(v64 + 8 * v52);
              }
              uint64_t v54 = v53;
              if (__OFADD__(v52++, 1)) {
                break;
              }
              uint64_t v56 = AnyCanvas.acceptedDropLayouts.getter();
              uint64_t v57 = *(void *)(v56 + 16);
              if (v57)
              {
                uint64_t v58 = (void *)(v56 + 40);
                while (1)
                {
                  uint64_t v59 = *(v58 - 1);
                  uint64_t v60 = *v58;
                  if ((*(uint64_t (**)(void *, uint64_t, void))(*v58 + 32))(v54, v59, *v58)) {
                    break;
                  }
                  v58 += 2;
                  if (!--v57) {
                    goto LABEL_18;
                  }
                }
                swift_bridgeObjectRelease();
                if (one-time initialization token for canvasElementDefaultSize != -1) {
                  swift_once();
                }
                if ((*(uint64_t (**)(void *, void *, void, uint64_t, uint64_t, double, double, double, double, double))(v60 + 16))(v54, v67, 0, v59, v60, x, y, *(double *)&static UIConstants.canvasElementDefaultSize, *(double *)algn_2676E93F0, 0.0))
                {
                  if (one-time initialization token for canvasElementPasteOffset != -1) {
                    swift_once();
                  }
                  CGAffineTransformMakeTranslation(&v68, *(CGFloat *)&static UIConstants.canvasElementPasteOffset, *((CGFloat *)&static UIConstants.canvasElementPasteOffset + 1));
                  v70.double x = x;
                  v70.double y = y;
                  CGPoint v61 = CGPointApplyAffineTransform(v70, &v68);
                  double x = v61.x;
                  double y = v61.y;
                }

                if (v52 == v51) {
                  goto LABEL_40;
                }
              }
              else
              {
LABEL_18:

                swift_bridgeObjectRelease();
                if (v52 == v51) {
                  goto LABEL_40;
                }
              }
            }
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            swift_bridgeObjectRetain();
            uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
LABEL_40:

          swift_bridgeObjectRelease();
        }
      }
      else
      {
        uint64_t v34 = &v7[*(int *)(v25 + 48)];
        uint64_t v35 = *(void *)v34;
        uint64_t v63 = *((void *)v34 + 1);
        double v36 = &v10[*(int *)(v8 + 48)];
        uint64_t v37 = v20;
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
        v38(v10, v7, v11);
        uint64_t v39 = v63;
        *(void *)double v36 = v35;
        *((void *)v36 + 1) = v39;
        swift_bridgeObjectRelease();
        v38(v15, v10, v11);
        (*(void (**)(char *, void, void, void, uint64_t, uint64_t))(v65 + 112))(v15, 0, 0, 0, 1, v64);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v11);
      }
    }
    else
    {
      id v33 = v66;
    }
  }
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDuplicateElements:inAttachment:)(uint64_t a1)
{
  uint64_t v30 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v31 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v29) = 0;
  char v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  if (v3) {
    return 0;
  }
  uint64_t v5 = v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v4 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (!v4) {
    return (uint64_t)v4;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = specialized _arrayForceCast<A, B>(_:)(a1);
  uint64_t v9 = specialized Set.init<A>(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  uint64_t v11 = specialized Set.init<A>(_:)(MEMORY[0x263F8EE78]);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v6 + 96))(v9, v11, 6, 0, ObjectType, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  int64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  uint64_t v4 = v10;
  uint64_t result = specialized Set.startIndex.getter(v12);
  uint64_t v15 = result;
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(unsigned char *)(v12 + 32))
  {
    if (((*(void *)(v12 + 56 + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
      goto LABEL_17;
    }
    if (*(_DWORD *)(v12 + 36) != v17) {
      goto LABEL_18;
    }
    uint64_t v20 = *(void *)(v12 + 48);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = v20 + *(void *)(v22 + 72) * v15;
    uint64_t v30 = (ValueMetadata *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 16))(boxed_opaque_existential_1, v23, v21);
    unint64_t v26 = v4[2];
    unint64_t v25 = v4[3];
    if (v26 >= v25 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
    }
    v4[2] = v26 + 1;
    outlined init with take of Any(&v29, &v4[4 * v26 + 4]);
    uint64_t result = specialized _NativeSet.index(after:)(v15, v17, v19 & 1, v12);
    uint64_t v15 = result;
    uint64_t v17 = v27;
    char v19 = v28 & 1;
    if (!--v13)
    {
      outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(result, v27, v28 & 1);
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:elementsForSpaceInsertedAt:inAttachment:)(CGFloat a1, CGFloat a2)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v52 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  id v48 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v9 = *(void *)(v50 - 8);
  double v10 = MEMORY[0x270FA5388](v50);
  id v49 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  int64_t v13 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v10);
  if (!v13) {
    return (uint64_t)v13;
  }
  uint64_t v14 = *(void *)(v12 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = (void *)MEMORY[0x263F8EED0];
  CGFloat v43 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x88))();
  if (!v43)
  {

    return 0;
  }
  uint64_t v17 = (void *)(*(uint64_t (**)(void))((*v16 & *v43) + 0x308))();
  double v18 = 1.0;
  double v19 = 1.0;
  if (v17)
  {
    uint64_t v20 = v17;
    objc_msgSend(v17, sel_zoomScale);
    double v19 = v21;
  }
  (*(void (**)(void *__return_ptr))((*v16 & *v43) + 0x5D0))(v58);
  outlined init with take of CGAffineTransform?((uint64_t)v58, (uint64_t)&v59);
  if ((v61 & 1) == 0) {
    double v18 = sqrt(v59 * v59 + v60 * v60);
  }
  CGAffineTransformMakeScale(&v57, v19 * v18, v19 * v18);
  v62.double x = a1;
  v62.double y = a2;
  CGPoint v22 = CGPointApplyAffineTransform(v62, &v57);
  unint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, CGFloat))(v14 + 56))(ObjectType, v14, v22.x);
  unint64_t v24 = v23;
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v25 = result;
  }
  else
  {
    uint64_t v25 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  id v42 = v13;
  if (!v25)
  {
    int64_t v13 = (void *)MEMORY[0x263F8EE78];
LABEL_28:

    swift_bridgeObjectRelease_n();
    return (uint64_t)v13;
  }
  if (v25 >= 1)
  {
    uint64_t v27 = 0;
    unint64_t v28 = v24 & 0xC000000000000001;
    uint64_t v45 = (void (**)(char *, uint64_t))(v7 + 8);
    double v44 = (void (**)(uint64_t *, char *, uint64_t))(v9 + 32);
    int64_t v13 = (void *)MEMORY[0x263F8EE78];
    long long v29 = &off_2640D6000;
    uint64_t v47 = v25;
    unint64_t v46 = v24;
    uint64_t v30 = v49;
    do
    {
      if (v28) {
        unint64_t v31 = (void *)MEMORY[0x21054E050](v27, v24);
      }
      else {
        unint64_t v31 = *(id *)(v24 + 8 * v27 + 32);
      }
      double v32 = v31;
      [v31 (SEL)v29[436]];
      if (v22.y >= CGRectGetMidY(v63))
      {
        long long v56 = 0u;
        long long v55 = 0u;
      }
      else
      {
        id v33 = v48;
        (*(void (**)(void))((*v16 & *v32) + 0xE8))();
        uint64_t v34 = v51;
        SharedTagged_9.tag.getter();
        CGFloat a = v57.a;
        char b_low = LOBYTE(v57.b);
        MEMORY[0x21054BDF0](v34);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        WeakTagged_9.init(_:id:)();
        uint64_t v35 = v33;
        long long v29 = &off_2640D6000;
        uint64_t v36 = v34;
        unint64_t v24 = v46;
        uint64_t v25 = v47;
        (*v45)(v35, v36);
        uint64_t v37 = v50;
        *((void *)&v56 + 1) = v50;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
        (*v44)(boxed_opaque_existential_1, v30, v37);
      }

      if (*((void *)&v56 + 1))
      {
        outlined init with take of Any(&v55, &v57);
        outlined init with take of Any(&v57, &v55);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        }
        unint64_t v40 = v13[2];
        unint64_t v39 = v13[3];
        if (v40 >= v39 >> 1) {
          int64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v13);
        }
        v13[2] = v40 + 1;
        outlined init with take of Any(&v55, &v13[4 * v40 + 4]);
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v55, &demangling cache variable for type metadata for Any?);
      }
      ++v27;
    }
    while (v25 != v27);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:selectionContains:inAttachment:)(CGFloat a1, CGFloat a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t result = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (result)
  {
    uint64_t v7 = (void *)result;
    uint64_t v8 = (void *)MEMORY[0x263F8EED0];
    uint64_t v9 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)result) + 0x88))();
    if (v9)
    {
      double v10 = (void *)v9;
      uint64_t v11 = (void *)MEMORY[0x210550400](v5);
      if (!v11
        || (uint64_t v12 = v11, v13 = (char *)(*(uint64_t (**)(void))((*v8 & *v11) + 0x88))(), v12, !v13)
        || (uint64_t v14 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView],
            uint64_t v15 = v14,
            v13,
            !v14))
      {

        return 0;
      }
      uint64_t v16 = (void *)(*(uint64_t (**)(void))((*v8 & *v10) + 0x308))();
      double v17 = 1.0;
      double v18 = 1.0;
      if (v16)
      {
        double v19 = v16;
        objc_msgSend(v16, sel_zoomScale);
        double v18 = v20;
      }
      (*(void (**)(void *__return_ptr))((*v8 & *v10) + 0x5D0))(v29);
      outlined init with take of CGAffineTransform?((uint64_t)v29, (uint64_t)&v30);
      if ((v32 & 1) == 0) {
        double v17 = sqrt(v30 * v30 + v31 * v31);
      }
      CGAffineTransformMakeScale(&v28, v18 * v17, v18 * v17);
      v33.double x = a1;
      v33.double y = a2;
      CGPoint v21 = CGPointApplyAffineTransform(v33, &v28);
      objc_msgSend(*(id *)&v15[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_frame);
      if (CGRectContainsPoint(v34, v21))
      {
        if (objc_msgSend(v15, sel_isHidden))
        {

          return 1;
        }
        v22.value.super.Class isa = 0;
        CanvasElementResizeView.hitTestMiniMenu(_:with:)(v23, (CGPoint)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1), v22);
        if (v24.value.super.isa)
        {
          Class isa = v24.value.super.isa;
        }
        else
        {
          ResizeView.hitTestChrome(_:with:)(v25, (CGPoint)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1), v24);
          Class isa = v27;

          if (!isa) {
            return 1;
          }
        }

        return 0;
      }
    }
    return 0;
  }
  return result;
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)()
{
  uint64_t v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v1 - 8);
  double v30 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v9 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v5);
  if (!v9) {
    return;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 56))(ObjectType, v10);

  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)&long long v35 = MEMORY[0x263F8EE78];
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14)
    {
LABEL_4:
      if (v14 < 1)
      {
        __break(1u);
        goto LABEL_34;
      }
      for (uint64_t i = 0; i != v14; ++i)
      {
        if ((v12 & 0xC000000000000001) != 0) {
          uint64_t v16 = (void *)MEMORY[0x21054E050](i, v12);
        }
        else {
          uint64_t v16 = *(id *)(v12 + 8 * i + 32);
        }
        double v17 = v16;
        if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v16) + 0x218))())
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v18 = v35;
      uint64_t v13 = MEMORY[0x263F8EE78];
      if ((v35 & 0x8000000000000000) != 0) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14) {
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = MEMORY[0x263F8EE78];
  if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
    goto LABEL_30;
  }
LABEL_17:
  if ((v18 & 0x4000000000000000) != 0)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v19) {
      goto LABEL_31;
    }
    goto LABEL_19;
  }
  uint64_t v19 = *(void *)(v18 + 16);
  if (!v19)
  {
LABEL_31:
    swift_release();
    return;
  }
LABEL_19:
  uint64_t v37 = v13;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 & ~(v19 >> 63), 0);
  if (v19 < 0)
  {
LABEL_34:
    __break(1u);
    return;
  }
  uint64_t v20 = 0;
  unint64_t v29 = v18 & 0xC000000000000001;
  CGPoint v21 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v22 = v18;
  do
  {
    if (v29) {
      unint64_t v23 = (void *)MEMORY[0x21054E050](v20, v18);
    }
    else {
      unint64_t v23 = *(id *)(v18 + 8 * v20 + 32);
    }
    UIEvent_optional v24 = v23;
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v35);
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v24) + 0xE8))();
    SharedTagged_9.tag.getter();
    uint64_t v31 = v33;
    char v32 = v34;
    MEMORY[0x21054BDF0](v3);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    WeakTagged_9.init(_:id:)();
    (*v21)(v7, v3);

    uint64_t v25 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
      uint64_t v25 = v37;
    }
    unint64_t v27 = *(void *)(v25 + 16);
    unint64_t v26 = *(void *)(v25 + 24);
    uint64_t v18 = v22;
    if (v27 >= v26 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      uint64_t v25 = v37;
    }
    ++v20;
    *(void *)(v25 + 16) = v27 + 1;
    outlined init with take of Any(&v35, (_OWORD *)(v25 + 32 * v27 + 32));
  }
  while (v19 != v20);
  swift_release();
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:selectedElementsInAttachment:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v2 - 8);
  id v67 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v66 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x270FA5388](v9);
  CGRect v73 = (char *)&v63 - v11;
  uint64_t v12 = v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v13 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v10);
  uint64_t v14 = (void *)MEMORY[0x263F8EED0];
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x88))();
  }
  else
  {
    uint64_t v16 = 0;
  }
  double v17 = (void *)MEMORY[0x210550400](v12);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = (void *)(*(uint64_t (**)(void))((*v14 & *v17) + 0x88))();

    if (v19)
    {
      uint64_t v20 = (*(uint64_t (**)(void))((*v14 & *v19) + 0x320))();
      if (!v20)
      {

        uint64_t v36 = v73;
        if (v16) {
          goto LABEL_26;
        }
LABEL_39:
        unint64_t v74 = 0;
        goto LABEL_46;
      }
      CGPoint v21 = (char *)v20;
      type metadata accessor for TiledTextView();
      uint64_t v22 = swift_dynamicCastClass();

      if (v22)
      {
        uint64_t v68 = v1;
        uint64_t v64 = v16;
        unint64_t v23 = TiledTextView.paperAttachments.getter();
        unint64_t v24 = v23;
        uint64_t v65 = v8;
        CGAffineTransform v72 = v21;
        if (v23 >> 62) {
          goto LABEL_44;
        }
        uint64_t v25 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        for (; v25; uint64_t v25 = _CocoaArrayWrapper.endIndex.getter())
        {
          unint64_t v74 = v24 & 0xC000000000000001;
          uint64_t v26 = 4;
          while (1)
          {
            unint64_t v27 = v74 ? (char *)MEMORY[0x21054E050](v26 - 4, v24) : (char *)*(id *)(v24 + 8 * v26);
            uint64_t v28 = v27;
            uint64_t v29 = v26 - 3;
            if (__OFADD__(v26 - 4, 1)) {
              break;
            }
            double v30 = *(void **)&v27[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
            if (!v30)
            {
              __break(1u);
              goto LABEL_59;
            }
            uint64_t v31 = v6;
            id v32 = v30;
            uint64_t v33 = swift_bridgeObjectRetain();
            unint64_t v34 = specialized Sequence.compactMap<A>(_:)(v33, (uint64_t)v32);

            swift_bridgeObjectRelease();
            if (v34 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            swift_bridgeObjectRelease();
            if (v35)
            {

              swift_bridgeObjectRelease_n();
              uint64_t v16 = v28;
              uint64_t v6 = v31;
              uint64_t v8 = v65;
              uint64_t v1 = v68;
              uint64_t v36 = v73;
              if (v16) {
                goto LABEL_26;
              }
              goto LABEL_39;
            }

            ++v26;
            uint64_t v6 = v31;
            if (v29 == v25) {
              goto LABEL_45;
            }
          }
LABEL_43:
          __break(1u);
LABEL_44:
          swift_bridgeObjectRetain();
        }
LABEL_45:

        swift_bridgeObjectRelease_n();
        uint64_t v16 = 0;
        unint64_t v74 = 0;
        uint64_t v8 = v65;
        goto LABEL_46;
      }
    }
  }
  uint64_t v36 = v73;
  if (!v16) {
    goto LABEL_39;
  }
LABEL_26:
  uint64_t v68 = v1;
  uint64_t v37 = *(void *)&v16[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v37)
  {
    uint64_t v38 = *(void *)(v37 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    int64_t v39 = *(void *)(v38 + 16);
    if (v39)
    {
      uint64_t v64 = v16;
      uint64_t v65 = v8;
      unint64_t v75 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39, 0);
      unint64_t v74 = v75;
      uint64_t v40 = specialized Set.startIndex.getter(v38);
      uint64_t v42 = v41;
      int v44 = v43 & 1;
      uint64_t v71 = v6 + 16;
      CGAffineTransform v72 = (char *)(v38 + 56);
      uint64_t v70 = v6 + 32;
      unint64_t v24 = v69;
      while ((v40 & 0x8000000000000000) == 0 && v40 < 1 << *(unsigned char *)(v38 + 32))
      {
        if (((*(void *)&v72[((unint64_t)v40 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v40) & 1) == 0) {
          goto LABEL_41;
        }
        if (*(_DWORD *)(v38 + 36) != v42) {
          goto LABEL_42;
        }
        LODWORD(v73) = v44;
        uint64_t v45 = *(void *)(v6 + 72);
        (*(void (**)(char *, uint64_t, unint64_t))(v6 + 16))(v36, *(void *)(v38 + 48) + v45 * v40, v24);
        unint64_t v46 = v74;
        unint64_t v75 = v74;
        unint64_t v48 = *(void *)(v74 + 16);
        unint64_t v47 = *(void *)(v74 + 24);
        if (v48 >= v47 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
          unint64_t v24 = v69;
          unint64_t v46 = v75;
        }
        *(void *)(v46 + 16) = v48 + 1;
        unint64_t v49 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        unint64_t v74 = v46;
        (*(void (**)(unint64_t, char *, unint64_t))(v6 + 32))(v46 + v49 + v48 * v45, v36, v24);
        uint64_t v50 = specialized _NativeSet.index(after:)(v40, v42, v73 & 1, v38);
        uint64_t v40 = v50;
        uint64_t v42 = v51;
        int v44 = v52 & 1;
        if (!--v39)
        {
          outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v50, v51, v44);
          swift_bridgeObjectRelease();
          uint64_t v16 = v64;
          uint64_t v8 = v65;
          goto LABEL_46;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    unint64_t v74 = MEMORY[0x263F8EE78];
LABEL_46:
    id v53 = CanvasViewSelectionInteractionDelegate.activeWidget.getter();
    if (v53)
    {
      uint64_t v54 = v53;
      if (v74)
      {
        LOBYTE(v75) = 8;
        id v55 = objc_msgSend(v53, sel_pdfAnnotationUUID);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        CRKeyPath.init(_:)();
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        WeakTagged_9.init(_:id:)();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v57 = v74;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v74 + 16) + 1, 1, v74);
        }
        unint64_t v59 = *(void *)(v57 + 16);
        unint64_t v58 = *(void *)(v57 + 24);
        if (v59 >= v58 >> 1) {
          unint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1, v57);
        }
        *(void *)(v57 + 16) = v59 + 1;
        unint64_t v60 = v57
            + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
            + *(void *)(v6 + 72) * v59;
        unint64_t v61 = v57;
        (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v60, v8, v69);

        if (!v61) {
          goto LABEL_57;
        }
LABEL_55:
        uint64_t v62 = swift_bridgeObjectRetain();
        specialized _arrayForceCast<A, B>(_:)(v62);
        swift_bridgeObjectRelease_n();

        return;
      }
    }
    else if (v74)
    {
      goto LABEL_55;
    }
LABEL_57:

    return;
  }
LABEL_59:
  __break(1u);
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didSelect:selectionType:inAttachment:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (a2 != 6)
    {
      uint64_t v4 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
      if (v4)
      {
        uint64_t v5 = v4;
        id v14 = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x88))();

        if (v14)
        {
          uint64_t v6 = swift_bridgeObjectRetain();
          uint64_t v7 = specialized CanvasMembers.init<A>(strokes:strokeSelectionType:)(v6, a2);
          uint64_t v9 = v8;
          uint64_t v11 = v10;
          char v13 = v12;
          swift_bridgeObjectRelease();
          AnyCanvas.selection.setter(v7, v9, v11, v13 & 1);
        }
      }
    }
  }
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v14 - 8);
  uint64_t v26 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v24 = static OS_dispatch_queue.main.getter();
  double v17 = (void *)swift_allocObject();
  v17[2] = a1;
  v17[3] = v5;
  v17[4] = a3;
  v17[5] = a2;
  v17[6] = a4;
  v17[7] = a5;
  aBlock[4] = partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_59_0;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v19 = v5;
  id v20 = a3;
  id v21 = a2;
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  _s9Coherence9CRKeyPathVACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v22 = (void *)v24;
  MEMORY[0x21054DA10](0, v16, v13, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v16, v26);
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillBeginForElements:inAttachment:)(uint64_t a1)
{
  uint64_t v35 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t result = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v8);
  if (result)
  {
    char v13 = (void *)result;
    uint64_t v14 = *(void *)(v11 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(ObjectType, v14);

    uint64_t v17 = specialized _arrayForceCast<A, B>(_:)(a1);
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      id v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      uint64_t v19 = v7 + 16;
      uint64_t v21 = *(unsigned __int8 *)(v19 + 64);
      v31[1] = v17;
      uint64_t v22 = v17 + ((v21 + 32) & ~v21);
      uint64_t v33 = *(void *)(v19 + 56);
      unint64_t v34 = v20;
      unint64_t v23 = (void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v24 = (void (**)(char *, uint64_t))(v19 - 8);
      uint64_t v32 = v16;
      v20(v10, v22, v6);
      while (1)
      {
        MEMORY[0x21054B9C0](v6);
        if (*(void *)(v16 + 16)
          && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5), (v26 & 1) != 0))
        {
          uint64_t v27 = *(void **)(*(void *)(v16 + 56) + 8 * v25);
          uint64_t v28 = v19;
          uint64_t v29 = *v23;
          id v30 = v27;
          v29(v5, v35);
          uint64_t v19 = v28;
          uint64_t v16 = v32;
          objc_msgSend(v30, sel_setAlpha_, 0.2);
        }
        else
        {
          (*v23)(v5, v35);
        }
        (*v24)(v10, v6);
        v22 += v33;
        if (!--v18) {
          break;
        }
        v34(v10, v22, v6);
      }
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillEndForElements:with:inAttachment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  id v42 = (id)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v10);
  if (!v42) {
    return;
  }
  uint64_t v35 = *(void *)(v13 + 8);
  uint64_t v14 = specialized _arrayConditionalCast<A, B>(_:)(a1);
  if (v14)
  {
    uint64_t v15 = v14;
    if ((a2 | 2) == 2)
    {
      uint64_t v16 = *(void *)(v14 + 16);
      if (v16)
      {
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 32);
        uint64_t v39 = v35 + 32;
        uint64_t v40 = ObjectType;
        id v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
        uint64_t v19 = v9 + 16;
        uint64_t v37 = v20;
        uint64_t v38 = v18;
        uint64_t v21 = *(unsigned __int8 *)(v19 + 64);
        v34[1] = v15;
        uint64_t v22 = v15 + ((v21 + 32) & ~v21);
        uint64_t v36 = *(void *)(v19 + 56);
        unint64_t v23 = (void (**)(char *, uint64_t))(v5 + 8);
        uint64_t v24 = v35;
        unint64_t v25 = (void (**)(char *, uint64_t))(v19 - 8);
        v20(v12, v22, v8);
        while (1)
        {
          MEMORY[0x21054B9C0](v8);
          uint64_t v26 = v38(v40, v24);
          if (*(void *)(v26 + 16)
            && (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7), (v28 & 1) != 0))
          {
            id v29 = *(id *)(*(void *)(v26 + 56) + 8 * v27);
            swift_bridgeObjectRelease();
            (*v23)(v7, v41);
            objc_msgSend(v29, sel_setAlpha_, 1.0);

            uint64_t v24 = v35;
          }
          else
          {
            swift_bridgeObjectRelease();
            (*v23)(v7, v41);
          }
          (*v25)(v12, v8);
          v22 += v36;
          if (!--v16) {
            break;
          }
          v37(v12, v22, v8);
        }

        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v31 = swift_getObjectType();
      uint64_t v32 = specialized Set.init<A>(_:)(v15);
      swift_bridgeObjectRelease();
      uint64_t v33 = specialized Set.init<A>(_:)(MEMORY[0x263F8EE78]);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(v35 + 88))(v32, v33, 6, 0, v31);

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v30 = v42;
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  uint64_t v7 = a2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v8 = (void *)MEMORY[0x210550400](v7);
  if (!v8)
  {
    _Block_copy(a3);
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v7 + 8);
  id v18 = v8;
  uint64_t v10 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v8) + 0x88))();
  if (v10)
  {
    id v17 = (id)v10;
    if (a1)
    {
      type metadata accessor for URL();
      uint64_t v11 = (void *)swift_allocObject();
      v11[2] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ();
      v11[3] = v6;
      v11[4] = v18;
      v11[5] = v9;
      v11[6] = v17;
      _Block_copy(a3);
      _s9Coherence9CRKeyPathVACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      id v12 = a1;
      swift_retain();
      id v13 = v18;
      id v14 = v17;
      uint64_t v15 = NSItemProvider.loadObject<A>(ofClass:completionHandler:)();
      swift_release();

LABEL_6:
      swift_release();
      return;
    }
    _Block_copy(a3);
    a3[2](a3, 0);
    swift_release();

    uint64_t v16 = v17;
  }
  else
  {
    _Block_copy(a3);
    swift_release();
    uint64_t v16 = v18;
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didTapElement:withGesture:inAttachment:)(uint64_t a1, void *a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v6 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 144))(ObjectType, v8);

    if (v10)
    {
      uint64_t v11 = (unint64_t *)&v10[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets];
      swift_beginAccess();
      unint64_t v12 = *v11;
      swift_bridgeObjectRetain();

      if (v12 >> 62)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
        swift_bridgeObjectRetain();
        unint64_t v13 = _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
        unint64_t v13 = v12;
      }
      uint64_t v14 = swift_bridgeObjectRelease();
      MEMORY[0x270FA5388](v14);
      void v23[2] = a1;
      uint64_t v15 = specialized Sequence.first(where:)(partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.widget(for:), (uint64_t)v23, v13);
      swift_bridgeObjectRelease();
      if (v15)
      {
        objc_msgSend(v15, sel_addControl);
LABEL_13:

        return;
      }
    }
  }
  uint64_t v16 = (void *)MEMORY[0x210550400](v5);
  if (v16)
  {
    id v17 = v16;
    id v18 = (void *)MEMORY[0x263F8EED0];
    uint64_t v15 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v16) + 0x88))();

    if (v15)
    {
      uint64_t v19 = CanvasViewSelectionInteractionDelegate.view(for:)(a1);
      if (v19)
      {
        id v20 = v19;
        type metadata accessor for LinkCanvasElementView();
        if (swift_dynamicCastClass())
        {
          id v21 = v20;
          uint64_t v22 = LinkCanvasElementView.linkView.getter();
          (*(void (**)(void))((*v18 & *(void *)v22) + 0x88))(0);

          uint64_t v15 = v22;
        }
        else
        {
          (*(void (**)(void *, id, void))((*v18 & *v15) + 0x4E0))(v20, objc_msgSend(a2, sel_modifierFlags), 0);

          uint64_t v15 = v20;
        }
      }
      goto LABEL_13;
    }
  }
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didLongPressElement:withGesture:inAttachment:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v33 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t result = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v10);
  if (!result) {
    return result;
  }
  uint64_t v15 = (void *)result;
  id v31 = a2;
  uint64_t v32 = v5;
  uint64_t v16 = *(void *)(v13 + 8);
  uint64_t ObjectType = swift_getObjectType();
  outlined init with copy of Any(a1, (uint64_t)v34);
  swift_dynamicCast();
  MEMORY[0x21054B9C0](v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(ObjectType, v16);

  if (!*(void *)(v18 + 16))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v32);
    return 0;
  }
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
  uint64_t v20 = v32;
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v20);
    return 0;
  }
  id v22 = *(id *)(*(void *)(v18 + 56) + 8 * v19);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v20);
  type metadata accessor for LinkCanvasElementView();
  uint64_t v23 = swift_dynamicCastClass();
  if (v23)
  {
    uint64_t v24 = v23;
    unint64_t v25 = (void *)MEMORY[0x210550400](v13);
    if (v25)
    {
      uint64_t v26 = v25;
      unint64_t v27 = (void *)MEMORY[0x263F8EED0];
      char v28 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v25) + 0x88))();
      id v29 = v22;

      if (v28)
      {
        (*(void (**)(uint64_t, id, void))((*v27 & *v28) + 0x4E0))(v24, objc_msgSend(v31, sel_modifierFlags), 0);
      }
    }
    else
    {
    }
    return 1;
  }
  else
  {

    return 0;
  }
}

id specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:configurationForElement:inAttachment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v14 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v10);
  if (!v14) {
    return 0;
  }
  uint64_t v15 = (void *)v14;
  uint64_t v24 = a1;
  uint64_t v16 = *(void *)(v13 + 8);
  uint64_t ObjectType = swift_getObjectType();
  outlined init with copy of Any(a2, (uint64_t)v26);
  swift_dynamicCast();
  MEMORY[0x21054B9C0](v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(ObjectType, v16);

  if (!*(void *)(v18 + 16) || (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v25);
    return 0;
  }
  id v21 = *(id *)(*(void *)(v18 + 56) + 8 * v19);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v25);
  id v22 = objc_msgSend(v21, sel_contextMenuInteraction_configurationForMenuAtLocation_, v24, 0.0, 0.0);

  return v22;
}

id specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:previewForHighlightingMenuWith:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v3 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v15 = MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v11);
  if (!v15) {
    return 0;
  }
  uint64_t v16 = (void *)v15;
  uint64_t v28 = v5;
  uint64_t v17 = *(void *)(v14 + 8);
  uint64_t ObjectType = swift_getObjectType();
  outlined init with copy of Any(a3, (uint64_t)v29);
  swift_dynamicCast();
  MEMORY[0x21054B9C0](v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(ObjectType, v17);

  if (!*(void *)(v19 + 16) || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v28);
    return 0;
  }
  id v22 = *(id *)(*(void *)(v19 + 56) + 8 * v20);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v28);
  id v23 = objc_msgSend(v22, sel_contextMenuInteraction_previewForHighlightingMenuWithConfiguration_, v26, v27);

  return v23;
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willEndFor:animator:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v28 = a5;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v27 = a1;
  uint64_t v7 = type metadata accessor for CRKeyPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v5 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  uint64_t v17 = MEMORY[0x210550400](v5 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v13);
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    uint64_t v31 = v7;
    uint64_t v19 = *(void *)(v16 + 8);
    uint64_t ObjectType = swift_getObjectType();
    outlined init with copy of Any(a4, (uint64_t)v32);
    swift_dynamicCast();
    MEMORY[0x21054B9C0](v11);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(ObjectType, v19);

    if (*(void *)(v21 + 16))
    {
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
      uint64_t v23 = v31;
      if (v24)
      {
        id v25 = *(id *)(*(void *)(v21 + 56) + 8 * v22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
        objc_msgSend(v25, *v28, v27, v29, v30);
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v31);
    }
  }
}

uint64_t partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.widget(for:)(id *a1)
{
  return closure #1 in CanvasViewSelectionInteractionDelegate.widget(for:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_20C5B63B4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  unint64_t v6 = *(void (**)(uint64_t))(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v3 + 8);
  uint64_t v8 = *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(v4, v5, v0 + v2, v6, v7, v8);
}

uint64_t sub_20C5B6550()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_45()
{
  return swift_release();
}

uint64_t sub_20C5B6578()
{
  swift_bridgeObjectRelease();

  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)()
{
  return closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(uint64_t (**)(uint64_t))(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_20C5B65E0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.image(of:)(void *a1)
{
  closure #1 in CanvasViewSelectionInteractionDelegate.image(of:)(a1, *(id *)(v1 + 16));
}

uint64_t sub_20C5B6620()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:inAttachment:)(Swift::OpaquePointer a1)
{
  unint64_t v3 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x88))();

    if (v5)
    {
      unint64_t v6 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
      id v7 = v6;

      if (v6)
      {
        HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)(a1, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], 0);
      }
    }
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:nonTextStrokes:inAttachment:)(Swift::OpaquePointer a1, Swift::OpaquePointer a2)
{
  uint64_t v5 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (v5)
  {
    unint64_t v6 = v5;
    id v7 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x88))();

    if (v7)
    {
      uint64_t v8 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
      id v9 = v8;

      if (v8)
      {
        HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)(a1, a2, MEMORY[0x263F8EE78], 0);
      }
    }
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:proofreadingItem:in:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, double a6, double a7, double a8, double a9)
{
  unint64_t v47 = a4;
  id v48 = a5;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&isa - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x270FA5388](v19);
  unint64_t v22 = (char *)&isa - v21;
  uint64_t v23 = v9 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  char v24 = (void *)MEMORY[0x210550400](v9 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v20);
  if (v24)
  {
    id v25 = v24;
    uint64_t v26 = (void *)MEMORY[0x263F8EED0];
    uint64_t v27 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v24) + 0x88))();

    if (v27)
    {
      uint64_t v28 = *(void **)&v27[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
      id v44 = v28;

      if (v28)
      {
        if (objc_msgSend(v48, sel_respondsToSelector_, sel_replaceStrokes_withString_inBounds_completion_))
        {
          Date.init()();
          uint64_t v29 = (void *)MEMORY[0x210550400](v23);
          if (v29)
          {
            uint64_t v30 = v29;
            uint64_t v31 = (void *)(*(uint64_t (**)(void))((*v26 & *v29) + 0x88))();
          }
          else
          {
            uint64_t v31 = 0;
          }
          type metadata accessor for PKStroke();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          uint64_t v46 = MEMORY[0x21054D080](v45, v46);
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v22, v15);
          unint64_t v33 = (*(unsigned __int8 *)(v16 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          unint64_t v34 = (v17 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v35 = (char *)swift_allocObject();
          uint64_t v36 = v47;
          *((void *)v35 + 2) = v47;
          *((void *)v35 + 3) = a1;
          *((void *)v35 + 4) = v31;
          (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v35[v33], v18, v15);
          *(void *)&v35[v34] = v44;
          aBlock[4] = partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:proofreadingItem:in:in:);
          aBlock[5] = v35;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSValue], @guaranteed [CHReflowableTextToken], @guaranteed [PKDrawing]) -> ();
          aBlock[3] = &block_descriptor_75_0;
          uint64_t v37 = _Block_copy(aBlock);
          id v38 = v31;
          id v39 = v44;
          id v40 = v36;
          swift_bridgeObjectRetain();
          swift_release();
          Class v41 = isa;
          id v42 = (void *)v46;
          objc_msgSend(v48, sel_replaceStrokes_withString_inBounds_completion_, isa, v46, v37, a6, a7, a8, a9);
          _Block_release(v37);

          (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
        }
        else
        {
          id v32 = v44;
        }
      }
    }
  }
}

uint64_t sub_20C5B6BDC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:proofreadingItem:in:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void **)(v3 + 16);
  v10._Swift::Int rawValue = *(void **)(v3 + 24);
  uint64_t v11 = *(void **)(v3 + 32);
  uint64_t v12 = *(void *)(v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:proofreadingItem:in:in:)(a1, a2, a3, v9, v10, v11, v3 + v8, v12);
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleTapOnCanvasAtLocation:inAttachment:)(double a1, double a2)
{
  uint64_t v12 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v13 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v11[0] = 0;
  char v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if (v5)
  {
    unint64_t v6 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v6)
    {
      uint64_t v7 = v6;
      unint64_t v8 = (void *)MEMORY[0x263F8EED0];
      uint64_t v9 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x88))();

      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, double, double))((*v8 & *v9) + 0x4D0))(1, 1, a1, a2);
      }
    }
  }
  return v5 & 1;
}

uint64_t sub_20C5B6EA4()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_20C5B6EEC()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t sub_20C5B6F2C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(a1, a2, *(uint64_t (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t _s9Coherence9CRKeyPathVACSQAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Font.familyName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Font.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

BOOL Font.isBold.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_beginAccess();
  return (static Font.Traits.bold & ~v1) == 0;
}

BOOL Font.isItalic.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_beginAccess();
  return (static Font.Traits.italic & ~v1) == 0;
}

void __swiftcall Font.init(_:)(PaperKit::Font *__return_ptr retstr, UIFont a2)
{
  id v4 = [(objc_class *)a2.super.isa fontName];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = [(objc_class *)a2.super.isa familyName];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  [(objc_class *)a2.super.isa pointSize];
  double v13 = v12;
  id v14 = [(objc_class *)a2.super.isa fontDescriptor];
  unsigned __int8 v15 = objc_msgSend(v14, sel_symbolicTraits);

  if (v15)
  {
    swift_beginAccess();
    Swift::Int v16 = static Font.Traits.italic;
    if ((v15 & 2) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    Swift::Int v16 = 0;
    if ((v15 & 2) == 0) {
      goto LABEL_8;
    }
  }
  swift_beginAccess();
  uint64_t v17 = static Font.Traits.bold;
  if ((static Font.Traits.bold & ~v16) == 0) {
    uint64_t v17 = 0;
  }
  v16 |= v17;
LABEL_8:
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = 46;
  v18._object = (void *)0xE100000000000000;
  Swift::Bool v19 = String.hasPrefix(_:)(v18);
  swift_bridgeObjectRelease();
  if (v19)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  Swift::Bool v21 = String.hasPrefix(_:)(v20);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v21)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  Swift::Float v22 = v13;
  retstr->_name.value._uint64_t countAndFlagsBits = v5;
  retstr->_name.value._object = v7;
  retstr->_familyName.value._uint64_t countAndFlagsBits = v9;
  retstr->_familyName.value._object = v11;
  retstr->Swift::Float pointSize = v22;
  retstr->traits.Swift::Int rawValue = v16;
}

uint64_t Font.supportsBold.getter()
{
  id v0 = Font.platformFont.getter();
  id v1 = objc_msgSend(v0, sel_familyName);

  if (!v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v1 = (id)MEMORY[0x21054D080](v2);
    swift_bridgeObjectRelease();
  }
  id v3 = objc_msgSend(self, sel_fontNamesForFamilyName_, v1);

  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = v4 + 40; ; i += 16)
    {
      String.lowercased()();
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      char v7 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v7) {
        break;
      }
      if (!--v5)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t Font.supportsItalic.getter()
{
  id v0 = Font.platformFont.getter();
  id v1 = objc_msgSend(v0, sel_familyName);

  if (!v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v1 = (id)MEMORY[0x21054D080](v2);
    swift_bridgeObjectRelease();
  }
  id v3 = objc_msgSend(self, sel_fontNamesForFamilyName_, v1);

  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = v4;
    uint64_t v6 = v4 + 40;
    uint64_t v14 = v5;
    do
    {
      String.lowercased()();
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      char v7 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v7) {
        break;
      }
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    for (uint64_t i = v13 + 40; ; i += 16)
    {
      uint64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      String.lowercased()();
      swift_bridgeObjectRetain();
      char v12 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v12)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
      ++v9;
      if (v11 == v14)
      {
        swift_bridgeObjectRelease_n();
        return (v7 & 1) != 0;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

void __swiftcall Font.init(name:familyName:pointSize:traits:)(PaperKit::Font *__return_ptr retstr, Swift::String_optional name, Swift::String_optional familyName, Swift::Float pointSize, PaperKit::Font::Traits traits)
{
  object = familyName.value._object;
  uint64_t countAndFlagsBits = familyName.value._countAndFlagsBits;
  id v8 = name.value._object;
  uint64_t v9 = name.value._countAndFlagsBits;
  Swift::Int v11 = *(void *)traits.rawValue;
  if (name.value._object)
  {
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = 46;
    v12._object = (void *)0xE100000000000000;
    Swift::Bool v13 = String.hasPrefix(_:)(v12);
    swift_bridgeObjectRelease();
    if (v13)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = 0;
      id v8 = 0;
    }
  }
  if (object)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14._uint64_t countAndFlagsBits = 46;
    v14._object = (void *)0xE100000000000000;
    Swift::Bool v15 = String.hasPrefix(_:)(v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15)
    {
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = 0;
      object = 0;
    }
  }
  retstr->_name.value._uint64_t countAndFlagsBits = v9;
  retstr->_name.value._object = v8;
  retstr->_familyName.value._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->_familyName.value._object = object;
  retstr->Swift::Float pointSize = pointSize;
  retstr->traits.Swift::Int rawValue = v11;
}

id Font.platformFont.getter()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *((void *)v0 + 1);
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v3 = *((void *)v0 + 3);
  float v5 = v0[8];
  uint64_t v6 = *((void *)v0 + 5);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81720]), sel_init);
  if (v3)
  {
    swift_bridgeObjectRetain();
    id v8 = (void *)MEMORY[0x21054D080](v4, v3);
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v7, sel_fontDescriptorWithFamily_, v8);
  }
  else
  {
    if (!v1) {
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    id v8 = (void *)MEMORY[0x21054D080](v2, v1);
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(self, sel_fontDescriptorWithName_size_, v8, v5);
  }
  id v10 = v9;

  id v7 = v10;
LABEL_6:
  swift_beginAccess();
  BOOL v11 = (static Font.Traits.italic & ~v6) == 0;
  swift_beginAccess();
  if ((static Font.Traits.bold & ~v6) != 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v11 | 2u;
  }
  id v13 = objc_msgSend(v7, sel_fontDescriptorWithSymbolicTraits_, v12);
  if (v13)
  {
    id v14 = v13;

    id v7 = v14;
  }
  id v15 = objc_msgSend(self, sel_fontWithDescriptor_size_, v7, v5);
  if (!v15)
  {
    if (one-time initialization token for textBoxDefaultFont != -1) {
      swift_once();
    }
    id v15 = (id)static UIConstants.textBoxDefaultFont;
  }

  return v15;
}

uint64_t Font.familyName.setter(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = result;
  uint64_t v5 = *((void *)v3 + 3);
  if (a2)
  {
    uint64_t v6 = a2;
    if (v5)
    {
      BOOL v7 = *((void *)v3 + 2) == result && v5 == a2;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    Swift::Bool v9 = String.hasPrefix(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
  }
  else
  {
    if (!v5) {
      return result;
    }
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
  }
  *((void *)v3 + 2) = v4;
  *((void *)v3 + 3) = v6;
  long long v15 = *v3;
  uint64_t v16 = v4;
  LODWORD(v17) = *((_DWORD *)v3 + 8);
  uint64_t v18 = *((void *)v3 + 5);
  id v10 = Font.platformFont.getter();
  id v11 = objc_msgSend(v10, sel_fontName, v15, v16, v6, v17, v18);

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  return Font.name.setter(v12, v14);
}

uint64_t Font.isBold.setter(char a1)
{
  return Font.isBold.setter(a1, &static Font.Traits.bold);
}

uint64_t Font.isItalic.setter(char a1)
{
  return Font.isBold.setter(a1, &static Font.Traits.italic);
}

uint64_t Font.isBold.setter(char a1, void *a2)
{
  if (a1)
  {
    swift_beginAccess();
    uint64_t v4 = *((void *)v2 + 5);
    if ((*a2 & ~v4) != 0)
    {
      v4 |= *a2;
LABEL_6:
      *((void *)v2 + 5) = v4;
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v4 = *((void *)v2 + 5);
    if ((v4 & *a2) != 0)
    {
      v4 &= ~*a2;
      goto LABEL_6;
    }
  }
  long long v11 = *v2;
  long long v12 = v2[1];
  LODWORD(v13) = *((_DWORD *)v2 + 8);
  uint64_t v14 = v4;
  id v5 = Font.platformFont.getter();
  id v6 = objc_msgSend(v5, sel_fontName, v11, v12, v13, v14);

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  return Font.name.setter(v7, v9);
}

float Font.pointSize.getter()
{
  return *(float *)(v0 + 32);
}

void Font.pointSize.setter(float a1)
{
  *(float *)(v1 + 32) = a1;
}

uint64_t (*Font.pointSize.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

void Font.traits.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40);
}

void *Font.traits.setter(void *result)
{
  *(void *)(v1 + 40) = *result;
  return result;
}

uint64_t (*Font.traits.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t Font.name.setter(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(v3 + 8);
  if (a2)
  {
    uint64_t v6 = a2;
    if (v5)
    {
      BOOL v7 = *(void *)v3 == result && v5 == a2;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    Swift::Bool v9 = String.hasPrefix(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
  }
  else
  {
    if (!v5) {
      return result;
    }
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
  }
  *(void *)uint64_t v3 = v4;
  *(void *)(v3 + 8) = v6;
  uint64_t v15 = v4;
  long long v16 = *(_OWORD *)(v3 + 16);
  LODWORD(v17) = *(_DWORD *)(v3 + 32);
  uint64_t v18 = *(void *)(v3 + 40);
  id v10 = Font.platformFont.getter();
  id v11 = objc_msgSend(v10, sel_familyName, v15, v6, v16, v17, v18);

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  return Font.familyName.setter(v12, v14);
}

uint64_t (*Font.name.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Font.name.modify;
}

uint64_t Font.name.modify(uint64_t *a1, char a2)
{
  return Font.name.modify(a1, a2, Font.name.setter);
}

uint64_t (*Font.familyName.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Font.familyName.modify;
}

uint64_t Font.familyName.modify(uint64_t *a1, char a2)
{
  return Font.name.modify(a1, a2, Font.familyName.setter);
}

uint64_t Font.name.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v4);
  }
  swift_bridgeObjectRetain();
  a3(v5, v4);
  return swift_bridgeObjectRelease();
}

uint64_t Font.Traits.rawValue.getter()
{
  return *(void *)v0;
}

PaperKit::Font::Traits __swiftcall Font.Traits.init(rawValue:)(PaperKit::Font::Traits rawValue)
{
  v1->Swift::Int rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t static Font.Traits.italic.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = static Font.Traits.italic;
  return result;
}

uint64_t static Font.Traits.italic.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = swift_beginAccess();
  static Font.Traits.italiCGFloat c = v1;
  return result;
}

uint64_t (*static Font.Traits.italic.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t static Font.Traits.bold.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = static Font.Traits.bold;
  return result;
}

uint64_t static Font.Traits.bold.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = swift_beginAccess();
  static Font.Traits.bolCGFloat d = v1;
  return result;
}

uint64_t (*static Font.Traits.bold.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

PaperKit::Font::Traits __swiftcall Font.Traits.init(_:)(UIFontDescriptorSymbolicTraits a1)
{
  char v2 = a1;
  uint64_t v3 = v1;
  if (a1)
  {
    *(void *)&a1 = swift_beginAccess();
    uint64_t v4 = static Font.Traits.italic;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((a1 & 2) == 0) {
      goto LABEL_8;
    }
  }
  *(void *)&a1 = swift_beginAccess();
  uint64_t v5 = static Font.Traits.bold;
  if ((static Font.Traits.bold & ~v4) == 0) {
    uint64_t v5 = 0;
  }
  v4 |= v5;
LABEL_8:
  *uint64_t v3 = v4;
  LODWORD(result.rawValue) = a1;
  return result;
}

uint64_t Font.Traits.symbolicTraits.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  BOOL v2 = (static Font.Traits.italic & ~v1) == 0;
  swift_beginAccess();
  if ((static Font.Traits.bold & ~v1) != 0) {
    return v2;
  }
  else {
    return v2 | 2u;
  }
}

uint64_t Font.Traits.description.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  if ((static Font.Traits.bold & ~v1) != 0)
  {
    BOOL v2 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    BOOL v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v4 = v2[2];
    unint64_t v3 = v2[3];
    if (v4 >= v3 >> 1) {
      BOOL v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v3 > 1), v4 + 1, 1, v2);
    }
    v2[2] = v4 + 1;
    uint64_t v5 = &v2[2 * v4];
    v5[4] = 1684828002;
    v5[5] = 0xE400000000000000;
  }
  swift_beginAccess();
  if ((static Font.Traits.italic & ~v1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      BOOL v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      BOOL v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    Swift::String v8 = &v2[2 * v7];
    v8[4] = 0x63696C617469;
    v8[5] = 0xE600000000000000;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
  id v11 = v10;
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 93;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  return 91;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Font.Traits()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Font.Traits()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Font.Traits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  unint64_t v7 = lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Font.Traits()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Font.Traits()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Font.Traits(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  unint64_t v3 = lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  uint64_t v4 = MEMORY[0x263F33180];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

void (*Font.isBold.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *(void *)(v1 + 40);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = (static Font.Traits.bold & ~v4) == 0;
  return Font.isBold.modify;
}

void Font.isBold.modify(uint64_t a1, uint64_t a2)
{
}

void (*Font.isItalic.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *(void *)(v1 + 40);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = (static Font.Traits.italic & ~v4) == 0;
  return Font.isItalic.modify;
}

void Font.isItalic.modify(uint64_t a1, uint64_t a2)
{
}

void Font.isBold.modify(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  unint64_t v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 32));
  free(v3);
}

PaperKit::Font::CodingKeys_optional __swiftcall Font.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 4;
  if ((unint64_t)rawValue < 4) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (PaperKit::Font::CodingKeys_optional)rawValue;
}

PaperKit::Font::CodingKeys_optional __swiftcall Font.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x656D616E5FLL && stringValue._object == (void *)0xE500000000000000;
  if (v3
    || (object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x7A6953746E696F70 && object == (void *)0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 0x737469617274 && object == (void *)0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else if (countAndFlagsBits == 0x4E796C696D61665FLL && object == (void *)0xEB00000000656D61)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 3;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 3;
    }
    else {
      char v7 = 4;
    }
  }
  char *v2 = v7;
  return result;
}

PaperKit::Font::CodingKeys_optional __swiftcall Font.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char v2 = 4;
  if ((unint64_t)intValue < 4) {
    char v2 = intValue;
  }
  *uint64_t v1 = v2;
  return (PaperKit::Font::CodingKeys_optional)intValue;
}

void *static Font.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static Font.CodingKeys.allCases.getter;
}

uint64_t Font.CodingKeys.intValue.getter()
{
  return *v0;
}

uint64_t Font.CodingKeys.rawValue.getter()
{
  return *v0;
}

uint64_t Font.CodingKeys.stringValue.getter()
{
  uint64_t result = 0x656D616E5FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7A6953746E696F70;
      break;
    case 2:
      uint64_t result = 0x737469617274;
      break;
    case 3:
      uint64_t result = 0x4E796C696D61665FLL;
      break;
    default:
      return result;
  }
  return result;
}

PaperKit::Font::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Font.CodingKeys(Swift::Int *a1)
{
  return Font.CodingKeys.init(rawValue:)(*a1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance Font.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Font.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Font.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Font.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Font.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Font.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Font.init(from:)@<X0>(uint64_t a1@<X8>)
{
  lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont();
  swift_retain();
  CRValueStruct.init(from:)();
  if (v1)
  {

    lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect();
    uint64_t result = CRValueStruct.init(from:)();
  }
  else
  {
    uint64_t result = swift_release();
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  return result;
}

uint64_t Font.description.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = (void *)v0[1];
  uint64_t v4 = v0[2];
  BOOL v3 = (void *)v0[3];
  _StringGuts.grow(_:)(49);
  v5._uint64_t countAndFlagsBits = 0x203A656D616E5BLL;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  if (v1)
  {
    int v6 = v1;
  }
  else
  {
    uint64_t v2 = 95;
    int v6 = (void *)0xE100000000000000;
  }
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v2;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x796C696D6166202CLL;
  v8._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  if (v3) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = 95;
  }
  if (v3) {
    id v10 = v3;
  }
  else {
    id v10 = (void *)0xE100000000000000;
  }
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x53746E696F70202CLL;
  v12._object = (void *)0xED0000203A657A69;
  String.append(_:)(v12);
  Float.write<A>(to:)();
  v13._uint64_t countAndFlagsBits = 0x737469617274202CLL;
  v13._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = Font.Traits.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 93;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 0;
}

BOOL static Font.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static EncodedFont.== infix(_:_:)(a1, a2);
}

uint64_t Font.encode(to:)(void *a1)
{
  return Font.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Font.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys);
}

uint64_t Font.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Font.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Font.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Font@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Font.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Font(void *a1)
{
  return Font.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Font(uint64_t a1, uint64_t a2)
{
  return specialized static EncodedFont.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Font(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Font(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type Font and conformance Font, (uint64_t (*)(void))lazy protocol witness table accessor for type Font and conformance Font);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Font@<X0>(uint64_t a1@<X8>)
{
  return Font.init(from:)(a1);
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Font()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Font(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Font and conformance Font();
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t Font.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  Swift::String v20 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v3;
  uint64_t v18 = v3[2];
  uint64_t v19 = v9;
  uint64_t v10 = v3[3];
  uint64_t v16 = v3[5];
  uint64_t v17 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v20();
  uint64_t v11 = v5;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v26 = 0;
  uint64_t v12 = v21;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v12)
  {
    uint64_t v13 = v16;
    char v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v24 = v13;
    char v23 = 2;
    lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v22 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v11);
}

uint64_t Font.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    uint64_t v10 = v7;
    char v32 = 0;
    uint64_t v12 = v26;
    uint64_t v11 = v27;
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v14;
    char v31 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    int v17 = v16;
    char v29 = 2;
    lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v25 = v30;
    char v28 = 3;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = v20;
    char v22 = *(void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v24 = v18;
    v22(v9, v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v12 = v13;
    *(void *)(v12 + 8) = v15;
    *(void *)(v12 + 16) = v24;
    *(void *)(v12 + 24) = v21;
    *(_DWORD *)(v12 + 32) = v17;
    *(void *)(v12 + 40) = v25;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance EncodedFont.CodingKeys@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized EncodedFont.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance EncodedFont.CodingKeys()
{
  uint64_t result = 0x656D616E5FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7A6953746E696F70;
      break;
    case 2:
      uint64_t result = 0x737469617274;
      break;
    case 3:
      uint64_t result = 0x4E796C696D61665FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EncodedFont.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized EncodedFont.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance EncodedFont.CodingKeys@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized EncodedFont.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance EncodedFont.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance EncodedFont.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance EncodedFont.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Font.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EncodedFont.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EncodedFont.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EncodedFont()
{
  return Font.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance EncodedFont()
{
}

uint64_t protocol witness for Decodable.init(from:) in conformance EncodedFont@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Font.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<EncodedFont.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EncodedFont(void *a1)
{
  return Font.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<EncodedFont.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance EncodedFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Font(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont, (uint64_t (*)(void))lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance EncodedFont()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance EncodedFont()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance EncodedFont(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont();
  return MEMORY[0x270F17688](a1, v2);
}

void Font.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 32);
  Swift::UInt v3 = *(void *)(v0 + 40);
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v1) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  if ((v2 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v4 = v2;
  }
  else {
    Swift::UInt32 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
}

uint64_t EncodedFont_Incorrect.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<EncodedFont_Incorrect.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v7;
  uint64_t v12 = v1[5];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v20 = 0;
  uint64_t v8 = v15;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v8)
  {
    uint64_t v9 = v12;
    char v19 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v17 = v9;
    char v16 = 3;
    lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Font.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 32);
  Swift::UInt v4 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  if ((v3 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = v3;
  }
  else {
    Swift::UInt32 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t EncodedFont_Incorrect.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<EncodedFont_Incorrect.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v26 = 0;
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v12 = v11;
    uint64_t v21 = v9;
    char v25 = 1;
    swift_bridgeObjectRetain();
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v14;
    uint64_t v20 = v13;
    char v24 = 2;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    int v17 = v16;
    char v22 = 3;
    lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v18 = v23;
    *(void *)a2 = v21;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v20;
    *(void *)(a2 + 24) = v15;
    *(_DWORD *)(a2 + 32) = v17;
    *(void *)(a2 + 40) = v18;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance EncodedFont_Incorrect.CodingKeys()
{
  uint64_t result = 0x656D616E5FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x4E796C696D61665FLL;
      break;
    case 2:
      uint64_t result = 0x7A6953746E696F70;
      break;
    case 3:
      uint64_t result = 0x737469617274;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EncodedFont_Incorrect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized EncodedFont_Incorrect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance EncodedFont_Incorrect.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance EncodedFont_Incorrect.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance EncodedFont_Incorrect.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Font.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Font.CodingKeys(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v7 = a3();
  uint64_t v8 = a4();
  return MEMORY[0x270F180C8](a1, a2, v7, v8);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EncodedFont_Incorrect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EncodedFont_Incorrect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 32);
  Swift::UInt v4 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  if ((v3 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = v3;
  }
  else {
    Swift::UInt32 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance EncodedFont_Incorrect@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return EncodedFont_Incorrect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EncodedFont_Incorrect(void *a1)
{
  return EncodedFont_Incorrect.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Font@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  int v3 = *(_DWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(void *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance EncodedFont_Incorrect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Font(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect, (uint64_t (*)(void))lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Font(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a5();
  uint64_t v11 = a6();
  return MEMORY[0x270F17D90](a1, a2, a3, v10, v11);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance EncodedFont_Incorrect()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance EncodedFont_Incorrect()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance EncodedFont_Incorrect(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect();
  return MEMORY[0x270F17688](a1, v2);
}

unint64_t lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont()
{
  unint64_t result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect()
{
  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

BOOL specialized static EncodedFont.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  float v6 = *(float *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  float v11 = *(float *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  if (!v3)
  {
    if (v8) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v8) {
    return 0;
  }
  if (*(void *)a1 == *(void *)a2 && v3 == v8
    || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v13 & 1) != 0))
  {
LABEL_8:
    if (!v5)
    {
      BOOL result = 0;
      if (v10) {
        return result;
      }
      goto LABEL_17;
    }
    if (v10)
    {
      if (v4 == v9 && v5 == v10)
      {
        if (v6 != v11) {
          return 0;
        }
        return v7 == v12;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL result = 0;
      if ((v15 & 1) == 0) {
        return result;
      }
LABEL_17:
      if (v6 != v11) {
        return result;
      }
      return v7 == v12;
    }
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Font.CodingKeys()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [Font.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Font.CodingKeys]);
}

uint64_t sub_20C5BACBC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_20C5BACC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, Font.name.setter);
}

uint64_t sub_20C5BACE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_20C5BACEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, Font.familyName.setter);
}

uint64_t keypath_setTm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t sub_20C5BAD4C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return keypath_get_6Tm(a1, &static Font.Traits.bold, a2);
}

uint64_t sub_20C5BAD58(char *a1)
{
  return Font.isBold.setter(*a1);
}

uint64_t sub_20C5BAD80@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return keypath_get_6Tm(a1, &static Font.Traits.italic, a2);
}

uint64_t keypath_get_6Tm@<X0>(uint64_t a1@<X0>, void *a2@<X3>, BOOL *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t result = swift_beginAccess();
  *a3 = (*a2 & ~v5) == 0;
  return result;
}

uint64_t sub_20C5BADE8(char *a1)
{
  return Font.isItalic.setter(*a1);
}

ValueMetadata *type metadata accessor for Font()
{
  return &type metadata for Font;
}

ValueMetadata *type metadata accessor for Font.Traits()
{
  return &type metadata for Font.Traits;
}

ValueMetadata *type metadata accessor for Font.CodingKeys()
{
  return &type metadata for Font.CodingKeys;
}

ValueMetadata *type metadata accessor for EncodedFont_Incorrect()
{
  return &type metadata for EncodedFont_Incorrect;
}

uint64_t destroy for Font()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Font(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Font(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Font(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Font(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Font(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncodedFont()
{
  return &type metadata for EncodedFont;
}

unint64_t lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in EncodedFont_Incorrect.CodingKeys()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [EncodedFont_Incorrect.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [EncodedFont_Incorrect.CodingKeys]);
}

unint64_t lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in EncodedFont.CodingKeys()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [EncodedFont.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [EncodedFont.CodingKeys]);
}

unint64_t specialized EncodedFont.CodingKeys.init(rawValue:)(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t specialized EncodedFont.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D616E5FLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7A6953746E696F70 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x737469617274 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4E796C696D61665FLL && a2 == 0xEB00000000656D61)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized EncodedFont_Incorrect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D616E5FLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E796C696D61665FLL && a2 == 0xEB00000000656D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7A6953746E696F70 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737469617274 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

ValueMetadata *type metadata accessor for EncodedFont.CodingKeys()
{
  return &type metadata for EncodedFont.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Font.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C5BBE8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncodedFont_Incorrect.CodingKeys()
{
  return &type metadata for EncodedFont_Incorrect.CodingKeys;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void specialized CanvasElementView.updateFrame()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  double v7 = 1.0;
  if (v6)
  {
    uint64_t v8 = (void *)v6;
    AnyCanvasElementView.paperBoundsTransform()(&v41);

    double a = v41.a;
    CGFloat b = v41.b;
    CGFloat c = v41.c;
    double d = v41.d;
    tCGFloat x = v41.tx;
    tCGFloat y = v41.ty;
  }
  else
  {
    tCGFloat y = 0.0;
    tCGFloat x = 0.0;
    double d = 1.0;
    CGFloat c = 0.0;
    CGFloat b = 0.0;
    double a = 1.0;
  }
  id v15 = objc_msgSend(v1, sel_window);
  if (v15)
  {
    int v16 = v15;
    id v17 = objc_msgSend(v15, sel_screen);

    objc_msgSend(v17, sel_scale);
    double v7 = v18;
  }
  uint64_t v19 = (void *)MEMORY[0x263F8EED0];
  uint64_t v20 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))();
  double v21 = 1.0;
  if (v20)
  {
    char v22 = v20;
    uint64_t v23 = (void *)(*(uint64_t (**)(void))((*v19 & *v20) + 0x308))();

    if (v23)
    {
      objc_msgSend(v23, sel_zoomScale);
      double v21 = v24;
    }
  }
  char v25 = (char *)v1 + *(void *)((*v19 & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v5, v25, v2);
  MEMORY[0x270FA5388](v26);
  *(&v39 - 4) = type metadata accessor for Signature();
  *(&v39 - 3) = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  *(&v39 - 2) = (uint64_t)&protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v42.origin.CGFloat x = v40.a;
  v42.origin.CGFloat y = v40.b;
  v42.size.CGFloat width = v40.c;
  v42.size.CGFloat height = v40.d;
  v40.double a = a;
  v40.CGFloat b = b;
  v40.CGFloat c = c;
  v40.double d = d;
  v40.tCGFloat x = tx;
  v40.tCGFloat y = ty;
  CGRect v43 = CGRectApplyAffineTransform(v42, &v40);
  v44.origin.CGFloat x = CGRect.rounded(scale:)(v7 * v21, v43.origin.x, v43.origin.y, v43.size.width, v43.size.height);
  CGFloat x = v44.origin.x;
  CGFloat y = v44.origin.y;
  CGFloat width = v44.size.width;
  CGFloat height = v44.size.height;
  double MinX = CGRectGetMinX(v44);
  v45.origin.CGFloat x = x;
  v45.origin.CGFloat y = y;
  v45.size.CGFloat width = width;
  v45.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v45);
  v46.origin.CGFloat x = x;
  v46.origin.CGFloat y = y;
  v46.size.CGFloat width = width;
  v46.size.CGFloat height = height;
  double v33 = CGRectGetWidth(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  double v34 = CGRectGetHeight(v47);
  if (CGRect.isFinite.getter(MinX, MinY, v33, v34))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v33, v34);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)logger);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      id v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v38 = 0;
      _os_log_impl(&dword_20C2D7000, v36, v37, "Shape has non finite frame.", v38, 2u);
      MEMORY[0x210550270](v38, -1, -1);
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  CGFloat b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  id v16;
  void *v17;
  id v18;
  double v19;
  void *v20;
  void *v21;
  double v22;
  void *v23;
  void *v24;
  double v25;
  char *v26;
  uint64_t v27;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v34;
  double v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  CGAffineTransform v41;
  CGAffineTransform v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v4);
  uint64_t v8 = 1.0;
  if (v7)
  {
    uint64_t v9 = (void *)v7;
    AnyCanvasElementView.paperBoundsTransform()(&v42);

    double a = v42.a;
    CGFloat b = v42.b;
    CGFloat c = v42.c;
    double d = v42.d;
    tCGFloat x = v42.tx;
    tCGFloat y = v42.ty;
  }
  else
  {
    tCGFloat y = 0.0;
    tCGFloat x = 0.0;
    double d = 1.0;
    CGFloat c = 0.0;
    CGFloat b = 0.0;
    double a = 1.0;
  }
  int v16 = objc_msgSend(v1, sel_window);
  if (v16)
  {
    id v17 = v16;
    double v18 = objc_msgSend(v16, sel_screen);

    objc_msgSend(v18, sel_scale);
    uint64_t v8 = v19;
  }
  uint64_t v20 = (void *)MEMORY[0x263F8EED0];
  double v21 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))();
  char v22 = 1.0;
  if (v21)
  {
    uint64_t v23 = v21;
    double v24 = (void *)(*(uint64_t (**)(void))((*v20 & *v21) + 0x308))();

    if (v24)
    {
      objc_msgSend(v24, sel_zoomScale);
      char v22 = v25;
    }
  }
  uint64_t v26 = (char *)v1 + *(void *)((*v20 & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v6, v26, v2);
  MEMORY[0x270FA5388](v27);
  *(&v40 - 4) = type metadata accessor for GraphElement();
  *(&v40 - 3) = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  *(&v40 - 2) = (uint64_t)&protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v43.origin.CGFloat x = v41.a;
  v43.origin.CGFloat y = v41.b;
  v43.size.CGFloat width = v41.c;
  v43.size.CGFloat height = v41.d;
  v41.double a = a;
  v41.CGFloat b = b;
  v41.CGFloat c = c;
  v41.double d = d;
  v41.tCGFloat x = tx;
  v41.tCGFloat y = ty;
  CGRect v44 = CGRectApplyAffineTransform(v43, &v41);
  v45.origin.CGFloat x = CGRect.rounded(scale:)(v8 * v22, v44.origin.x, v44.origin.y, v44.size.width, v44.size.height);
  CGFloat x = v45.origin.x;
  CGFloat y = v45.origin.y;
  CGFloat width = v45.size.width;
  CGFloat height = v45.size.height;
  double MinX = CGRectGetMinX(v45);
  v46.origin.CGFloat x = x;
  v46.origin.CGFloat y = y;
  v46.size.CGFloat width = width;
  v46.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  double v34 = CGRectGetWidth(v47);
  v48.origin.CGFloat x = x;
  v48.origin.CGFloat y = y;
  v48.size.CGFloat width = width;
  v48.size.CGFloat height = height;
  uint64_t v35 = CGRectGetHeight(v48);
  if (CGRect.isFinite.getter(MinX, MinY, v34, v35))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v34, v35);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)logger);
    os_log_type_t v37 = Logger.logObject.getter();
    id v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_20C2D7000, v37, v38, "Shape has non finite frame.", v39, 2u);
      MEMORY[0x210550270](v39, -1, -1);
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  void *v8;
  CGFloat b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  id v15;
  void *v16;
  id v17;
  double v18;
  void *v19;
  void *v20;
  double v21;
  void *v22;
  void *v23;
  double v24;
  char *v25;
  uint64_t v26;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v33;
  double v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  CGAffineTransform v40;
  CGAffineTransform v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  double v7 = 1.0;
  if (v6)
  {
    uint64_t v8 = (void *)v6;
    AnyCanvasElementView.paperBoundsTransform()(&v41);

    double a = v41.a;
    CGFloat b = v41.b;
    CGFloat c = v41.c;
    double d = v41.d;
    tCGFloat x = v41.tx;
    tCGFloat y = v41.ty;
  }
  else
  {
    tCGFloat y = 0.0;
    tCGFloat x = 0.0;
    double d = 1.0;
    CGFloat c = 0.0;
    CGFloat b = 0.0;
    double a = 1.0;
  }
  id v15 = objc_msgSend(v1, sel_window);
  if (v15)
  {
    int v16 = v15;
    id v17 = objc_msgSend(v15, sel_screen);

    objc_msgSend(v17, sel_scale);
    double v7 = v18;
  }
  uint64_t v19 = (void *)MEMORY[0x263F8EED0];
  uint64_t v20 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))();
  double v21 = 1.0;
  if (v20)
  {
    char v22 = v20;
    uint64_t v23 = (void *)(*(uint64_t (**)(void))((*v19 & *v20) + 0x308))();

    if (v23)
    {
      objc_msgSend(v23, sel_zoomScale);
      double v21 = v24;
    }
  }
  char v25 = (char *)v1 + *(void *)((*v19 & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v5, v25, v2);
  MEMORY[0x270FA5388](v26);
  *(&v39 - 4) = type metadata accessor for UnknownCanvasElement();
  *(&v39 - 3) = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  *(&v39 - 2) = (uint64_t)&protocol witness table for UnknownCanvasElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v42.origin.CGFloat x = v40.a;
  v42.origin.CGFloat y = v40.b;
  v42.size.CGFloat width = v40.c;
  v42.size.CGFloat height = v40.d;
  v40.double a = a;
  v40.CGFloat b = b;
  v40.CGFloat c = c;
  v40.double d = d;
  v40.tCGFloat x = tx;
  v40.tCGFloat y = ty;
  CGRect v43 = CGRectApplyAffineTransform(v42, &v40);
  v44.origin.CGFloat x = CGRect.rounded(scale:)(v7 * v21, v43.origin.x, v43.origin.y, v43.size.width, v43.size.height);
  CGFloat x = v44.origin.x;
  CGFloat y = v44.origin.y;
  CGFloat width = v44.size.width;
  CGFloat height = v44.size.height;
  double MinX = CGRectGetMinX(v44);
  v45.origin.CGFloat x = x;
  v45.origin.CGFloat y = y;
  v45.size.CGFloat width = width;
  v45.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v45);
  v46.origin.CGFloat x = x;
  v46.origin.CGFloat y = y;
  v46.size.CGFloat width = width;
  v46.size.CGFloat height = height;
  double v33 = CGRectGetWidth(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  double v34 = CGRectGetHeight(v47);
  if (CGRect.isFinite.getter(MinX, MinY, v33, v34))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v33, v34);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)logger);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      id v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v38 = 0;
      _os_log_impl(&dword_20C2D7000, v36, v37, "Shape has non finite frame.", v38, 2u);
      MEMORY[0x210550270](v38, -1, -1);
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  CGFloat b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  id v16;
  void *v17;
  id v18;
  double v19;
  void *v20;
  void *v21;
  double v22;
  void *v23;
  void *v24;
  double v25;
  char *v26;
  uint64_t v27;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v34;
  double v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  CGAffineTransform v41;
  CGAffineTransform v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v4);
  uint64_t v8 = 1.0;
  if (v7)
  {
    uint64_t v9 = (void *)v7;
    AnyCanvasElementView.paperBoundsTransform()(&v42);

    double a = v42.a;
    CGFloat b = v42.b;
    CGFloat c = v42.c;
    double d = v42.d;
    tCGFloat x = v42.tx;
    tCGFloat y = v42.ty;
  }
  else
  {
    tCGFloat y = 0.0;
    tCGFloat x = 0.0;
    double d = 1.0;
    CGFloat c = 0.0;
    CGFloat b = 0.0;
    double a = 1.0;
  }
  int v16 = objc_msgSend(v1, sel_window);
  if (v16)
  {
    id v17 = v16;
    double v18 = objc_msgSend(v16, sel_screen);

    objc_msgSend(v18, sel_scale);
    uint64_t v8 = v19;
  }
  uint64_t v20 = (void *)MEMORY[0x263F8EED0];
  double v21 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))();
  char v22 = 1.0;
  if (v21)
  {
    uint64_t v23 = v21;
    double v24 = (void *)(*(uint64_t (**)(void))((*v20 & *v21) + 0x308))();

    if (v24)
    {
      objc_msgSend(v24, sel_zoomScale);
      char v22 = v25;
    }
  }
  uint64_t v26 = (char *)v1 + *(void *)((*v20 & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v6, v26, v2);
  MEMORY[0x270FA5388](v27);
  *(&v40 - 4) = type metadata accessor for Image();
  *(&v40 - 3) = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  *(&v40 - 2) = (uint64_t)&protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v43.origin.CGFloat x = v41.a;
  v43.origin.CGFloat y = v41.b;
  v43.size.CGFloat width = v41.c;
  v43.size.CGFloat height = v41.d;
  v41.double a = a;
  v41.CGFloat b = b;
  v41.CGFloat c = c;
  v41.double d = d;
  v41.tCGFloat x = tx;
  v41.tCGFloat y = ty;
  CGRect v44 = CGRectApplyAffineTransform(v43, &v41);
  v45.origin.CGFloat x = CGRect.rounded(scale:)(v8 * v22, v44.origin.x, v44.origin.y, v44.size.width, v44.size.height);
  CGFloat x = v45.origin.x;
  CGFloat y = v45.origin.y;
  CGFloat width = v45.size.width;
  CGFloat height = v45.size.height;
  double MinX = CGRectGetMinX(v45);
  v46.origin.CGFloat x = x;
  v46.origin.CGFloat y = y;
  v46.size.CGFloat width = width;
  v46.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  double v34 = CGRectGetWidth(v47);
  v48.origin.CGFloat x = x;
  v48.origin.CGFloat y = y;
  v48.size.CGFloat width = width;
  v48.size.CGFloat height = height;
  uint64_t v35 = CGRectGetHeight(v48);
  if (CGRect.isFinite.getter(MinX, MinY, v34, v35))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v34, v35);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)logger);
    os_log_type_t v37 = Logger.logObject.getter();
    id v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_20C2D7000, v37, v38, "Shape has non finite frame.", v39, 2u);
      MEMORY[0x210550270](v39, -1, -1);
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  CGFloat b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  id v16;
  void *v17;
  id v18;
  double v19;
  void *v20;
  void *v21;
  double v22;
  void *v23;
  void *v24;
  double v25;
  char *v26;
  uint64_t v27;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v34;
  double v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  CGAffineTransform v41;
  CGAffineTransform v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v4);
  uint64_t v8 = 1.0;
  if (v7)
  {
    uint64_t v9 = (void *)v7;
    AnyCanvasElementView.paperBoundsTransform()(&v42);

    double a = v42.a;
    CGFloat b = v42.b;
    CGFloat c = v42.c;
    double d = v42.d;
    tCGFloat x = v42.tx;
    tCGFloat y = v42.ty;
  }
  else
  {
    tCGFloat y = 0.0;
    tCGFloat x = 0.0;
    double d = 1.0;
    CGFloat c = 0.0;
    CGFloat b = 0.0;
    double a = 1.0;
  }
  int v16 = objc_msgSend(v1, sel_window);
  if (v16)
  {
    id v17 = v16;
    double v18 = objc_msgSend(v16, sel_screen);

    objc_msgSend(v18, sel_scale);
    uint64_t v8 = v19;
  }
  uint64_t v20 = (void *)MEMORY[0x263F8EED0];
  double v21 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))();
  char v22 = 1.0;
  if (v21)
  {
    uint64_t v23 = v21;
    double v24 = (void *)(*(uint64_t (**)(void))((*v20 & *v21) + 0x308))();

    if (v24)
    {
      objc_msgSend(v24, sel_zoomScale);
      char v22 = v25;
    }
  }
  uint64_t v26 = (char *)v1 + *(void *)((*v20 & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v6, v26, v2);
  MEMORY[0x270FA5388](v27);
  *(&v40 - 4) = type metadata accessor for Shape();
  *(&v40 - 3) = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  *(&v40 - 2) = (uint64_t)&protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v43.origin.CGFloat x = v41.a;
  v43.origin.CGFloat y = v41.b;
  v43.size.CGFloat width = v41.c;
  v43.size.CGFloat height = v41.d;
  v41.double a = a;
  v41.CGFloat b = b;
  v41.CGFloat c = c;
  v41.double d = d;
  v41.tCGFloat x = tx;
  v41.tCGFloat y = ty;
  CGRect v44 = CGRectApplyAffineTransform(v43, &v41);
  v45.origin.CGFloat x = CGRect.rounded(scale:)(v8 * v22, v44.origin.x, v44.origin.y, v44.size.width, v44.size.height);
  CGFloat x = v45.origin.x;
  CGFloat y = v45.origin.y;
  CGFloat width = v45.size.width;
  CGFloat height = v45.size.height;
  double MinX = CGRectGetMinX(v45);
  v46.origin.CGFloat x = x;
  v46.origin.CGFloat y = y;
  v46.size.CGFloat width = width;
  v46.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  double v34 = CGRectGetWidth(v47);
  v48.origin.CGFloat x = x;
  v48.origin.CGFloat y = y;
  v48.size.CGFloat width = width;
  v48.size.CGFloat height = height;
  uint64_t v35 = CGRectGetHeight(v48);
  if (CGRect.isFinite.getter(MinX, MinY, v34, v35))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v34, v35);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)logger);
    os_log_type_t v37 = Logger.logObject.getter();
    id v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_20C2D7000, v37, v38, "Shape has non finite frame.", v39, 2u);
      MEMORY[0x210550270](v39, -1, -1);
    }
  }
}

uint64_t specialized CanvasElementView.commit()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  uint64_t v6 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v6(v4, v5, v1);
  uint64_t v15 = type metadata accessor for Shape();
  uint64_t v16 = v15;
  uint64_t v17 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  double v18 = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  double v7 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  uint64_t v8 = v7(v4, v1);
  if ((v19[0] & 0x20) != 0)
  {
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementFlags?);
    Capsule.callAsFunction<A>(_:)();
    uint64_t v8 = swift_endAccess();
  }
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0x88))(v8);
  if (result)
  {
    float v11 = (void *)result;
    v6(v4, v5, v1);
    LOBYTE(v19[0]) = 4;
    uint64_t v12 = *(void (**)(char *, void *, uint64_t, uint64_t))((*v9 & *v11) + 0x550);
    uint64_t v13 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    v12(v4, v19, v15, v13);
    LOBYTE(v19[0]) = 4;
    (*(void (**)(void *))((*v9 & *v11) + 0x530))(v19);

    return v7(v4, v1);
  }
  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  void (*v6)(char *, char *, uint64_t);
  uint64_t (*v7)(char *, uint64_t);
  uint64_t v8;
  void *v9;
  uint64_t result;
  void *v11;
  void (*v12)(char *, void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  void v19[3];

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  uint64_t v6 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v6(v4, v5, v1);
  uint64_t v15 = type metadata accessor for Signature();
  uint64_t v16 = v15;
  uint64_t v17 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  double v18 = &protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  double v7 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  uint64_t v8 = v7(v4, v1);
  if ((v19[0] & 0x20) != 0)
  {
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementFlags?);
    Capsule.callAsFunction<A>(_:)();
    uint64_t v8 = swift_endAccess();
  }
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0x88))(v8);
  if (result)
  {
    float v11 = (void *)result;
    v6(v4, v5, v1);
    LOBYTE(v19[0]) = 4;
    uint64_t v12 = *(void (**)(char *, void *, uint64_t, uint64_t))((*v9 & *v11) + 0x550);
    uint64_t v13 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
    v12(v4, v19, v15, v13);
    LOBYTE(v19[0]) = 4;
    (*(void (**)(void *))((*v9 & *v11) + 0x530))(v19);

    return v7(v4, v1);
  }
  return result;
}

void specialized CanvasElementView.updateGestures()()
{
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  char v26;
  uint64_t v27;
  void *v28;
  char v29;
  objc_class *v30;
  unsigned char *v31;
  void *v32;
  unsigned char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  objc_super v46;
  unsigned char v47[24];
  ValueMetadata *v48;
  unint64_t v49;

  uint64_t v1 = v0;
  if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0
    || (uint64_t v2 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) != 0
    && (uint64_t v3 = (void *)v2, v4 = AnyCanvasElementView.isEditingCanvasElement.getter(), v3, (v4 & 1) != 0))
  {
    uint64_t v5 = (void *)MEMORY[0x263F8EED0];
    uint64_t v6 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x390);
    if (!*(void *)((char *)v1 + v6))
    {
      uint64_t v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v1, sel_tapped_);
      double v24 = *(void **)((char *)v1 + v6);
      *(void *)((char *)v1 + v6) = v23;

      char v25 = *(void **)((char *)v1 + v6);
      if (v25) {
        objc_msgSend(v25, sel_setDelegate_, v1);
      }
      id v48 = &type metadata for PencilAndPaperFeatureFlags;
      unint64_t v49 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      v47[0] = 0;
      uint64_t v26 = isFeatureEnabled(_:)();
      uint64_t v27 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
      if (v26)
      {
        if (!*(void *)((char *)v1 + v6))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        objc_msgSend(v1, sel_addGestureRecognizer_);
        char v28 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
        if (v28)
        {

          if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
          {
            char v29 = (*(uint64_t (**)(void))((*v5 & *v1) + 0x308))();
            uint64_t v30 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
            char v31 = objc_allocWithZone(v30);
            *(void *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
            v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakInit();
            *(void *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
            *(void *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
            v46.receiver = v31;
            v46.super_class = v30;
            char v32 = v1;
            double v33 = objc_msgSendSuper2(&v46, sel_initWithTarget_action_, 0, 0);
            v33[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = v29 & 1;
            swift_unknownObjectWeakAssign();

            double v34 = *(void *)((*v5 & *v32) + 0x398);
            uint64_t v35 = *(void **)((char *)v32 + v34);
            *(void *)((char *)v32 + v34) = v33;

            uint64_t v36 = *(void **)((char *)v32 + v34);
            if (!v36) {
              goto LABEL_36;
            }
            objc_msgSend(v36, sel_setDelegate_, v32);
            os_log_type_t v37 = *(void **)((char *)v32 + v34);
            if (!v37) {
              goto LABEL_36;
            }
            objc_msgSend(v37, sel_addTarget_action_, v32, sel_dragMoved_);
            if (!*(void *)((char *)v32 + v34)) {
              goto LABEL_36;
            }
            objc_msgSend(v32, sel_addGestureRecognizer_);
          }
        }
      }
      else
      {
        id v38 = (void *)(*(uint64_t (**)(uint64_t))((*v5 & *v1) + 0x88))(v27);
        if (v38)
        {
          uint64_t v39 = v38;
          CGAffineTransform v40 = (void *)(*(uint64_t (**)(void))((*v5 & *v38) + 0x320))();

          if (v40)
          {
            CGAffineTransform v41 = objc_msgSend(v40, sel_canvasView);

            if (v41)
            {
              CGRect v42 = objc_msgSend(v41, sel_drawingGestureRecognizer);

              CGRect v43 = objc_msgSend(v42, sel_view);
              if (v43)
              {
                if (!*(void *)((char *)v1 + v6))
                {
LABEL_37:
                  __break(1u);
                  return;
                }
                objc_msgSend(v43, sel_addGestureRecognizer_);
              }
            }
          }
        }
      }
    }
    double v7 = *(uint64_t (**)(void))((*v5 & *v1) + 0x3E8);
    if ((v7() & 1) == 0 || (uint64_t v8 = *(void *)((*v5 & *v1) + 0x3A0), *(void *)((char *)v1 + v8)))
    {
      if (v7()) {
        return;
      }
      goto LABEL_13;
    }
    CGRect v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82628]), sel_initWithDelegate_, v1);
    CGRect v45 = *(void **)((char *)v1 + v8);
    *(void *)((char *)v1 + v8) = v44;

    if (*(void *)((char *)v1 + v8))
    {
      objc_msgSend(v1, sel_addInteraction_);
      return;
    }
    goto LABEL_35;
  }
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t v10 = *MEMORY[0x263F8EED0] & *v1;
  float v11 = *(void *)(v10 + 0x390);
  uint64_t v12 = *(void **)((char *)v1 + v11);
  if (v12)
  {
    uint64_t v13 = v12;
    objc_msgSend(v1, sel_removeGestureRecognizer_, v13);
    uint64_t v14 = *(void **)((char *)v1 + v11);
    *(void *)((char *)v1 + v11) = 0;

    uint64_t v10 = *v9 & *v1;
  }
  uint64_t v15 = *(void *)(v10 + 920);
  uint64_t v16 = *(void **)((char *)v1 + v15);
  if (v16)
  {
    uint64_t v17 = v16;
    objc_msgSend(v1, sel_removeGestureRecognizer_, v17);
    double v18 = *(void **)((char *)v1 + v15);
    *(void *)((char *)v1 + v15) = 0;
  }
LABEL_13:
  uint64_t v19 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x3A0);
  uint64_t v20 = *(void **)((char *)v1 + v19);
  if (v20)
  {
    double v21 = v20;
    objc_msgSend(v1, sel_removeInteraction_, v21);
    char v22 = *(void **)((char *)v1 + v19);
    *(void *)((char *)v1 + v19) = 0;
  }
}

{
  specialized CanvasElementView.updateGestures()((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>, (uint64_t (*)(void))type metadata accessor for TextBox, &lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox, (uint64_t)&protocol witness table for TextBox);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  uint64_t v6;
  void *(*v7)(void *__return_ptr);
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  char v27;
  uint64_t v28;
  void *v29;
  objc_class *v30;
  unsigned char *v31;
  void *v32;
  unsigned char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  objc_super v46;
  void v47[5];

  uint64_t v1 = v0;
  if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0
    || (uint64_t v2 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) != 0
    && (uint64_t v3 = (void *)v2, v4 = AnyCanvasElementView.isEditingCanvasElement.getter(), v3, (v4 & 1) != 0))
  {
    uint64_t v5 = (void *)MEMORY[0x263F8EED0];
    uint64_t v6 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x390);
    if (!*(void *)((char *)v1 + v6))
    {
      double v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v1, sel_tapped_);
      char v25 = *(void **)((char *)v1 + v6);
      *(void *)((char *)v1 + v6) = v24;

      uint64_t v26 = *(void **)((char *)v1 + v6);
      if (v26) {
        objc_msgSend(v26, sel_setDelegate_, v1);
      }
      v47[3] = &type metadata for PencilAndPaperFeatureFlags;
      v47[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      LOBYTE(v47[0]) = 0;
      uint64_t v27 = isFeatureEnabled(_:)();
      char v28 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
      if (v27)
      {
        if (!*(void *)((char *)v1 + v6))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        objc_msgSend(v1, sel_addGestureRecognizer_);
        char v29 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
        if (v29)
        {

          if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
          {
            uint64_t v30 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
            char v31 = objc_allocWithZone(v30);
            *(void *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
            v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakInit();
            *(void *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
            *(void *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
            v46.receiver = v31;
            v46.super_class = v30;
            char v32 = v1;
            double v33 = objc_msgSendSuper2(&v46, sel_initWithTarget_action_, 0, 0);
            v33[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakAssign();

            double v34 = *(void *)((*v5 & *v32) + 0x398);
            uint64_t v35 = *(void **)((char *)v32 + v34);
            *(void *)((char *)v32 + v34) = v33;

            uint64_t v36 = *(void **)((char *)v32 + v34);
            if (!v36) {
              goto LABEL_36;
            }
            objc_msgSend(v36, sel_setDelegate_, v32);
            os_log_type_t v37 = *(void **)((char *)v32 + v34);
            if (!v37) {
              goto LABEL_36;
            }
            objc_msgSend(v37, sel_addTarget_action_, v32, sel_dragMoved_);
            if (!*(void *)((char *)v32 + v34)) {
              goto LABEL_36;
            }
            objc_msgSend(v32, sel_addGestureRecognizer_);
          }
        }
      }
      else
      {
        id v38 = (void *)(*(uint64_t (**)(uint64_t))((*v5 & *v1) + 0x88))(v28);
        if (v38)
        {
          uint64_t v39 = v38;
          CGAffineTransform v40 = (void *)(*(uint64_t (**)(void))((*v5 & *v38) + 0x320))();

          if (v40)
          {
            CGAffineTransform v41 = objc_msgSend(v40, sel_canvasView);

            if (v41)
            {
              CGRect v42 = objc_msgSend(v41, sel_drawingGestureRecognizer);

              CGRect v43 = objc_msgSend(v42, sel_view);
              if (v43)
              {
                if (!*(void *)((char *)v1 + v6))
                {
LABEL_37:
                  __break(1u);
                  return;
                }
                objc_msgSend(v43, sel_addGestureRecognizer_);
              }
            }
          }
        }
      }
    }
    double v7 = *(void *(**)(void *__return_ptr))((*v5 & *v1) + 0x200);
    uint64_t v8 = v7(v47);
    if ((v47[0] & 2) != 0 || (uint64_t v9 = *(void *)((*v5 & *v1) + 0x3A0), *(void *)((char *)v1 + v9)))
    {
      ((void (*)(void *__return_ptr, void *))v7)(v47, v8);
      if ((v47[0] & 2) == 0) {
        return;
      }
      goto LABEL_13;
    }
    CGRect v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82628]), sel_initWithDelegate_, v1);
    CGRect v45 = *(void **)((char *)v1 + v9);
    *(void *)((char *)v1 + v9) = v44;

    if (*(void *)((char *)v1 + v9))
    {
      objc_msgSend(v1, sel_addInteraction_);
      return;
    }
    goto LABEL_35;
  }
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  float v11 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v12 = *(void *)(v11 + 0x390);
  uint64_t v13 = *(void **)((char *)v1 + v12);
  if (v13)
  {
    uint64_t v14 = v13;
    objc_msgSend(v1, sel_removeGestureRecognizer_, v14);
    uint64_t v15 = *(void **)((char *)v1 + v12);
    *(void *)((char *)v1 + v12) = 0;

    float v11 = *v10 & *v1;
  }
  uint64_t v16 = *(void *)(v11 + 920);
  uint64_t v17 = *(void **)((char *)v1 + v16);
  if (v17)
  {
    double v18 = v17;
    objc_msgSend(v1, sel_removeGestureRecognizer_, v18);
    uint64_t v19 = *(void **)((char *)v1 + v16);
    *(void *)((char *)v1 + v16) = 0;
  }
LABEL_13:
  uint64_t v20 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x3A0);
  double v21 = *(void **)((char *)v1 + v20);
  if (v21)
  {
    char v22 = v21;
    objc_msgSend(v1, sel_removeInteraction_, v22);
    uint64_t v23 = *(void **)((char *)v1 + v20);
    *(void *)((char *)v1 + v20) = 0;
  }
}

{
  specialized CanvasElementView.updateGestures()(&demangling cache variable for type metadata for Capsule<Image>, (uint64_t (*)(void))type metadata accessor for Image, &lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image, (uint64_t)&protocol witness table for Image);
}

void specialized CanvasElementView.updateGestures()(uint64_t *a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v69 = a6;
  float v11 = v6;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0
    || (uint64_t v16 = MEMORY[0x210550400]((char *)v6 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) != 0
    && (uint64_t v17 = (void *)v16, v18 = AnyCanvasElementView.isEditingCanvasElement.getter(), v17, (v18 & 1) != 0))
  {
    uint64_t v66 = a3;
    id v67 = a4;
    uint64_t v68 = a5;
    uint64_t v19 = (void *)MEMORY[0x263F8EED0];
    uint64_t v20 = *(void *)((*MEMORY[0x263F8EED0] & *v11) + 0x390);
    if (!*(void *)((char *)v11 + v20))
    {
      id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v11, sel_tapped_);
      CGRect v43 = *(void **)((char *)v11 + v20);
      *(void *)((char *)v11 + v20) = v42;

      CGRect v44 = *(void **)((char *)v11 + v20);
      if (v44) {
        objc_msgSend(v44, sel_setDelegate_, v11);
      }
      CGAffineTransform v72 = &type metadata for PencilAndPaperFeatureFlags;
      unint64_t v73 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      v71[0] = 0;
      char v45 = isFeatureEnabled(_:)();
      uint64_t v46 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
      if (v45)
      {
        if (!*(void *)((char *)v11 + v20))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        objc_msgSend(v11, sel_addGestureRecognizer_);
        CGRect v47 = (void *)MEMORY[0x210550400]((char *)v11 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
        if (v47)
        {

          if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
          {
            uint64_t v65 = v15;
            id v48 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
            unint64_t v49 = objc_allocWithZone(v48);
            *(void *)&v49[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
            v49[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakInit();
            *(void *)&v49[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
            *(void *)&v49[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
            v70.receiver = v49;
            v70.super_class = v48;
            uint64_t v50 = v11;
            uint64_t v51 = objc_msgSendSuper2(&v70, sel_initWithTarget_action_, 0, 0);
            v51[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakAssign();

            uint64_t v52 = *(void *)((*v19 & *v50) + 0x398);
            id v53 = *(void **)((char *)v50 + v52);
            *(void *)((char *)v50 + v52) = v51;

            uint64_t v54 = *(void **)((char *)v50 + v52);
            if (!v54) {
              goto LABEL_36;
            }
            objc_msgSend(v54, sel_setDelegate_, v50);
            id v55 = *(void **)((char *)v50 + v52);
            if (!v55) {
              goto LABEL_36;
            }
            objc_msgSend(v55, sel_addTarget_action_, v50, sel_dragMoved_);
            if (!*(void *)((char *)v50 + v52)) {
              goto LABEL_36;
            }
            objc_msgSend(v50, sel_addGestureRecognizer_);
            uint64_t v15 = v65;
          }
        }
      }
      else
      {
        long long v56 = (void *)(*(uint64_t (**)(uint64_t))((*v19 & *v11) + 0x88))(v46);
        if (v56)
        {
          unint64_t v57 = v56;
          unint64_t v58 = (void *)(*(uint64_t (**)(void))((*v19 & *v56) + 0x320))();

          if (v58)
          {
            id v59 = objc_msgSend(v58, sel_canvasView);

            if (v59)
            {
              id v60 = objc_msgSend(v59, sel_drawingGestureRecognizer);

              id v61 = objc_msgSend(v60, sel_view);
              if (v61)
              {
                if (!*(void *)((char *)v11 + v20))
                {
LABEL_37:
                  __break(1u);
                  return;
                }
                objc_msgSend(v61, sel_addGestureRecognizer_);
              }
            }
          }
        }
      }
    }
    double v21 = (char *)v11 + *(void *)((*v19 & *v11) + 0x380);
    swift_beginAccess();
    uint64_t v65 = *(char **)(v13 + 16);
    uint64_t v22 = ((uint64_t (*)(char *, char *, uint64_t))v65)(v15, v21, v12);
    MEMORY[0x270FA5388](v22);
    uint64_t v64 = a2(0);
    *(&v64 - 4) = v64;
    uint64_t v23 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(v66, v67);
    uint64_t v24 = v69;
    *(&v64 - 3) = v23;
    *(&v64 - 2) = v24;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    char v25 = *(void (**)(char *, uint64_t))(v13 + 8);
    v25(v15, v12);
    if ((v74 & 2) != 0 || (uint64_t v26 = *(void *)((*MEMORY[0x263F8EED0] & *v11) + 0x3A0), *(void *)((char *)v11 + v26)))
    {
      uint64_t v27 = ((uint64_t (*)(char *, char *, uint64_t))v65)(v15, v21, v12);
      MEMORY[0x270FA5388](v27);
      *(&v64 - 4) = v64;
      *(&v64 - 3) = v23;
      *(&v64 - 2) = v69;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v25(v15, v12);
      if ((v74 & 2) == 0) {
        return;
      }
      goto LABEL_13;
    }
    id v62 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82628]), sel_initWithDelegate_, v11);
    uint64_t v63 = *(void **)((char *)v11 + v26);
    *(void *)((char *)v11 + v26) = v62;

    if (*(void *)((char *)v11 + v26))
    {
      objc_msgSend(v11, sel_addInteraction_);
      return;
    }
    goto LABEL_35;
  }
  char v28 = (void *)MEMORY[0x263F8EED0];
  uint64_t v29 = *MEMORY[0x263F8EED0] & *v11;
  uint64_t v30 = *(void *)(v29 + 0x390);
  char v31 = *(void **)((char *)v11 + v30);
  if (v31)
  {
    id v32 = v31;
    objc_msgSend(v11, sel_removeGestureRecognizer_, v32);
    double v33 = *(void **)((char *)v11 + v30);
    *(void *)((char *)v11 + v30) = 0;

    uint64_t v29 = *v28 & *v11;
  }
  uint64_t v34 = *(void *)(v29 + 920);
  uint64_t v35 = *(void **)((char *)v11 + v34);
  if (v35)
  {
    id v36 = v35;
    objc_msgSend(v11, sel_removeGestureRecognizer_, v36);
    os_log_type_t v37 = *(void **)((char *)v11 + v34);
    *(void *)((char *)v11 + v34) = 0;
  }
LABEL_13:
  uint64_t v38 = *(void *)((*MEMORY[0x263F8EED0] & *v11) + 0x3A0);
  uint64_t v39 = *(void **)((char *)v11 + v38);
  if (v39)
  {
    id v40 = v39;
    objc_msgSend(v11, sel_removeInteraction_, v40);
    CGAffineTransform v41 = *(void **)((char *)v11 + v38);
    *(void *)((char *)v11 + v38) = 0;
  }
}

void CanvasElementController.changeSelectedStrokeWidth(_:)(double a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)) {
    return;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
  swift_unknownObjectRelease();
  if (!v6) {
    return;
  }
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v8 = *(void **)((char *)v6 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v8)
  {
LABEL_45:
    __break(1u);
    return;
  }
  id v9 = v8;
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  unint64_t v12 = specialized Sequence.compactMap<A>(_:)(v10, (uint64_t)v9);

  swift_bridgeObjectRelease();
  uint64_t v13 = MEMORY[0x263F8EE78];
  unint64_t v32 = MEMORY[0x263F8EE78];
  if (v12 >> 62) {
    goto LABEL_31;
  }
  uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v15 = (void *)MEMORY[0x263F8EED0];
    if (!v14)
    {
      swift_bridgeObjectRelease();
      unint64_t v12 = MEMORY[0x263F8EE78];
      uint64_t v20 = *(void **)((char *)v6 + v7);
      if (v20) {
        break;
      }
      goto LABEL_30;
    }
    uint64_t v31 = v11;
    if (v14 < 1)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    uint64_t v16 = v7;
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0) {
        char v18 = (void *)MEMORY[0x21054E050](i, v12);
      }
      else {
        char v18 = *(id *)(v12 + 8 * i + 32);
      }
      uint64_t v19 = v18;
      if ((*(uint64_t (**)(void))((*v15 & *v18) + 0x1E0))())
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v16;
    uint64_t v13 = MEMORY[0x263F8EE78];
    uint64_t v11 = v31;
    unint64_t v12 = v32;
    uint64_t v20 = *(void **)((char *)v6 + v7);
    if (v20) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  id v21 = v20;
  uint64_t v22 = swift_bridgeObjectRetain();
  unint64_t v23 = specialized Sequence.compactMap<A>(_:)(v22, (uint64_t)v21);

  swift_bridgeObjectRelease();
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v24) {
      goto LABEL_33;
    }
LABEL_19:
    if (v24 >= 1)
    {
      for (uint64_t j = 0; j != v24; ++j)
      {
        if ((v23 & 0xC000000000000001) != 0) {
          uint64_t v26 = (void *)MEMORY[0x21054E050](j, v23);
        }
        else {
          uint64_t v26 = *(id *)(v23 + 8 * j + 32);
        }
        uint64_t v27 = v26;
        if ((*(uint64_t (**)(void))((*v15 & *v26) + 0x1E0))())
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v28 = v13;
      goto LABEL_34;
    }
    goto LABEL_44;
  }
  uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v24) {
    goto LABEL_19;
  }
LABEL_33:
  swift_bridgeObjectRelease();
  uint64_t v28 = MEMORY[0x263F8EE78];
LABEL_34:
  updateElements #1 (elements:) in CanvasElementController.changeSelectedStrokeWidth(_:)(v12, a1);
  uint64_t v29 = swift_release();
  if (v28 < 0 || (v28 & 0x4000000000000000) != 0)
  {
    swift_retain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v29 = swift_release();
    if (v30) {
      goto LABEL_37;
    }
  }
  else if (*(void *)(v28 + 16))
  {
LABEL_37:
    MEMORY[0x270FA5388](v29);
    (*(void (**)(void, void, uint64_t (*)()))((*v15 & *v6) + 0x478))(0, 0, partial apply for closure #3 in CanvasElementController.changeSelectedStrokeWidth(_:));
    swift_release();

    return;
  }

  swift_release();
}

Swift::Void __swiftcall CanvasElementController.configureViewControllerForPresentingAsPopover(viewController:)(UIViewController *viewController)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v3))
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(ObjectType, v4);
    swift_unknownObjectRelease();
    if (v6)
    {
      if (objc_msgSend(v6, sel__isEnabled)) {
        goto LABEL_7;
      }
    }
  }
  id v7 = CanvasElementController.activeToolPicker.getter();
  if (!v7) {
    return;
  }
  uint64_t v6 = v7;
LABEL_7:
  id v8 = objc_msgSend(v6, sel__popoverPresentationConfiguration);

  if (v8)
  {
    objc_msgSend(v8, sel_layoutSceneMargins);
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
    swift_unknownObjectRelease();
    uint64_t v17 = [(UIViewController *)viewController popoverPresentationController];
    -[UIPopoverPresentationController setPopoverLayoutMargins:](v17, sel_setPopoverLayoutMargins_, v10, v12, v14, v16);
  }
}

Swift::Void __swiftcall CanvasElementController.startLiveEditingSelectedElements()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)) {
    return;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  swift_unknownObjectRelease();
  if (!v4) {
    return;
  }
  uint64_t v5 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v5) {
    goto LABEL_18;
  }
  id v6 = v5;
  uint64_t v7 = swift_bridgeObjectRetain();
  unint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7, (uint64_t)v6);

  swift_bridgeObjectRelease();
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
LABEL_6:
      if (v9 >= 1)
      {
        uint64_t v10 = 0;
        double v11 = (void *)MEMORY[0x263F8EED0];
        do
        {
          if ((v8 & 0xC000000000000001) != 0) {
            double v12 = (void *)MEMORY[0x21054E050](v10, v8);
          }
          else {
            double v12 = *(id *)(v8 + 8 * v10 + 32);
          }
          double v13 = v12;
          ++v10;
          (*(void (**)(void))((*v11 & *v12) + 0x1E8))();
        }
        while (v9 != v10);
        goto LABEL_14;
      }
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
  }
LABEL_14:

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CanvasElementController.commitLiveEditingSelectedElements()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
    swift_unknownObjectRelease();
    if (v9)
    {
      uint64_t v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
      *(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
      uint64_t v5 = *(void **)&v9[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = swift_bridgeObjectRetain();
        unint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7, (uint64_t)v6);

        swift_bridgeObjectRelease();
        specialized AnyCanvas.undoableEndLiveEdits<A>(for:)(v8);
        swift_bridgeObjectRelease();
        *(unsigned char *)(v0 + v4) = 0;
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t CanvasElementController.changeSelectedShapesOpacity(_:)(double a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  CGAffineTransform v41 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  uint64_t result = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate);
  if (!result) {
    return result;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8);
  uint64_t result = swift_unknownObjectRelease();
  if (!v10) {
    return result;
  }
  double v11 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v11) {
    goto LABEL_25;
  }
  id v12 = v11;
  uint64_t v13 = swift_bridgeObjectRetain();
  unint64_t v14 = specialized Sequence.compactMap<A>(_:)(v13, (uint64_t)v12);

  uint64_t result = swift_bridgeObjectRelease();
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15)
    {
LABEL_6:
      id v32 = v10;
      if (v15 >= 1)
      {
        uint64_t v16 = 0;
        id v40 = (uint64_t (**)(char *, char *, uint64_t))(v4 + 16);
        unint64_t v38 = v14 & 0xC000000000000001;
        uint64_t v39 = (void (**)(char *, uint64_t))(v4 + 8);
        uint64_t v33 = MEMORY[0x263F8EE60] + 8;
        uint64_t v34 = v15;
        unint64_t v35 = v14;
        do
        {
          if (v38) {
            id v18 = (id)MEMORY[0x21054E050](v16, v14);
          }
          else {
            id v18 = *(id *)(v14 + 8 * v16 + 32);
          }
          uint64_t v17 = v18;
          type metadata accessor for ShapeView();
          uint64_t v19 = swift_dynamicCastClass();
          if (v19)
          {
            uint64_t v20 = (char *)v19;
            id v42 = v17;
            id v21 = (void *)MEMORY[0x270FA5388](v19);
            *((double *)&v32 - 2) = a1;
            uint64_t v22 = (char *)v21 + *(void *)((*MEMORY[0x263F8EED0] & *v21) + 0x380);
            swift_beginAccess();
            Capsule.callAsFunction<A>(_:)();
            swift_endAccess();
            unint64_t v23 = v41;
            id v36 = *v40;
            uint64_t v24 = v36(v41, v22, v3);
            MEMORY[0x270FA5388](v24);
            os_log_type_t v37 = (void *)type metadata accessor for Shape();
            *(&v32 - 4) = v37;
            *(&v32 - 3) = (id)_s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
            *(&v32 - 2) = &protocol witness table for Shape;
            swift_getKeyPath();
            Capsule<>.subscript.getter();
            swift_release();
            char v25 = *v39;
            (*v39)(v23, v3);
            if ((v43[0] & 0x20) != 0)
            {
              swift_beginAccess();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementFlags?);
              Capsule.callAsFunction<A>(_:)();
              swift_endAccess();
            }
            uint64_t v26 = MEMORY[0x210550400](&v20[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
            if (v26)
            {
              uint64_t v27 = (void *)v26;
              uint64_t v28 = v41;
              v36(v41, v22, v3);
              LOBYTE(v43[0]) = 4;
              uint64_t v29 = (void *)MEMORY[0x263F8EED0];
              uint64_t v30 = *(void (**)(char *, void *, void *, uint64_t))((*MEMORY[0x263F8EED0] & *v27) + 0x550);
              uint64_t v31 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
              v30(v28, v43, v37, v31);
              LOBYTE(v43[0]) = 4;
              (*(void (**)(void *))((*v29 & *v27) + 0x530))(v43);

              v25(v28, v3);
            }
            objc_msgSend(v20, sel_setNeedsLayout, v32, v33);
            uint64_t v15 = v34;
            unint64_t v14 = v35;
            uint64_t v17 = v42;
          }
          ++v16;
        }
        while (v15 != v16);

        return swift_bridgeObjectRelease();
      }
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t CanvasElementController.textBoxes.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v1)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  uint64_t result = swift_unknownObjectRelease();
  if (!v4) {
    return (uint64_t)v4;
  }
  uint64_t v6 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v6) {
    goto LABEL_23;
  }
  id v7 = v6;
  uint64_t v8 = swift_bridgeObjectRetain();
  unint64_t v9 = specialized Sequence.compactMap<A>(_:)(v8, (uint64_t)v7);

  swift_bridgeObjectRelease();
  unint64_t v16 = MEMORY[0x263F8EE78];
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = result;
    if (result) {
      goto LABEL_6;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v4 = (char *)MEMORY[0x263F8EE78];
LABEL_20:
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v10) {
    goto LABEL_19;
  }
LABEL_6:
  if (v10 >= 1)
  {
    uint64_t v11 = 0;
    id v12 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v9 & 0xC000000000000001) != 0) {
        uint64_t v13 = (void *)MEMORY[0x21054E050](v11, v9);
      }
      else {
        uint64_t v13 = *(id *)(v9 + 8 * v11 + 32);
      }
      unint64_t v14 = v13;
      uint64_t v15 = (*(uint64_t (**)(void))((*v12 & *v13) + 0x2D0))();

      if (v15)
      {
        MEMORY[0x21054D330]();
        if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v11;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
    uint64_t v4 = (char *)v16;
    goto LABEL_20;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

void CanvasElementController.selectedTextBoxColors()()
{
  uint64_t v89 = (void (**)(char *, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  uint64_t v0 = (uint64_t)*(v89 - 1);
  MEMORY[0x270FA5388](v89);
  uint64_t v88 = (char *)&v79 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v2 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  uint64_t v91 = (void (*)(uint64_t, char *, uint64_t))((char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v79 - v15;
  uint64_t v17 = CanvasElementController.textBoxes.getter();
  if (!v17) {
    return;
  }
  unint64_t v18 = v17;
  uint64_t v82 = v2;
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v90 = v17;
  uint64_t v83 = v0;
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  uint64_t v20 = MEMORY[0x263F8EE88];
  while (1)
  {
    uint64_t v95 = v20;
    unint64_t v21 = v18 >> 62;
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v18 = v90;
    }
    else
    {
      uint64_t v22 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v85 = v7;
    uint64_t v80 = v16;
    char v81 = v6;
    if (!v22)
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = MEMORY[0x263F8EE78];
LABEL_32:
      *(void *)&long long v93 = v19;
      uint64_t v48 = *(void *)(v28 + 16);
      if (v48)
      {
        uint64_t v49 = (uint64_t)v9;
        uint64_t v51 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 16);
        uint64_t v50 = v11 + 16;
        uint64_t v52 = (char *)(v28
                     + ((*(unsigned __int8 *)(v50 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 64)));
        uint64_t v90 = *(void *)(v50 + 56);
        uint64_t v91 = v51;
        uint64_t v89 = (void (**)(char *, uint64_t))(v50 - 8);
        swift_bridgeObjectRetain();
        uint64_t v54 = v80;
        uint64_t v53 = (uint64_t)v81;
        do
        {
          id v55 = v91;
          v91((uint64_t)v54, v52, v10);
          v55(v53, v54, v10);
          v55(v49, (char *)v53, v10);
          long long v56 = (id (**)@<X0>(uint64_t *@<X8>))(v49
                                                        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>)
                                                                 + 44));
          *long long v56 = closure #1 in CRAttributedString.Runs<>.fontColors.getter;
          v56[1] = 0;
          unint64_t v57 = (void *)(v49
                         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>)
                                  + 36));
          *unint64_t v57 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
          v57[1] = 0;
          unint64_t v58 = (void *)(v49 + *(int *)(v85 + 44));
          void *v58 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
          v58[1] = 0;
          outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
          uint64_t v59 = specialized Sequence<>.uniqueElements()();
          outlined destroy of StocksKitCurrencyCache.Provider?(v49, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
          (*v89)(v54, v10);
          specialized Array.append<A>(contentsOf:)(v59);
          v52 += v90;
          --v48;
        }
        while (v48);
        swift_bridgeObjectRelease();
        uint64_t v19 = v93;
      }
      uint64_t v60 = specialized Set.init<A>(_:)(v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v61 = specialized Sequence.compactMap<A>(_:)(v60);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v62 = specialized Set.init<A>(_:)(v61);
      swift_bridgeObjectRelease();
      uint64_t v95 = v62;
      return;
    }
    uint64_t v86 = v22;
    if (v22 == 1)
    {
      if (v21)
      {
        swift_bridgeObjectRetain();
        if (_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_10:
          if ((v90 & 0xC000000000000001) != 0)
          {
            uint64_t v24 = (void *)MEMORY[0x21054E050](0, v90);
          }
          else
          {
            if (!*(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_64;
            }
            uint64_t v24 = *(id *)(v90 + 32);
          }
          char v25 = v24;
          uint64_t v26 = swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v25) + 0x90))(v26);
          if (v27)
          {

LABEL_18:
            uint64_t v22 = v86;
            goto LABEL_19;
          }
          swift_bridgeObjectRelease();
          uint64_t v63 = *(void **)((char *)v25 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
          if (!v63)
          {

            return;
          }
          uint64_t v29 = v25;
          uint64_t v64 = (void *)*MEMORY[0x263F81500];
          uint64_t v13 = v63;
          id v65 = v64;
          id v66 = objc_msgSend(v13, sel_typingAttributes);
          type metadata accessor for NSAttributedStringKey(0);
          _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
          uint64_t v67 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v67 + 16) && (uint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(v65), (v69 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v67 + 56) + 32 * v68, (uint64_t)&v93);

            swift_bridgeObjectRelease();
            if (*((void *)&v94 + 1))
            {
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
              if ((swift_dynamicCast() & 1) == 0) {
                goto LABEL_53;
              }
              objc_super v70 = v92;
              id v71 = objc_msgSend(v13, sel_traitCollection);
              id v72 = objc_msgSend(v71, sel_userInterfaceStyle);

              id v73 = v70;
              Color.init(cgColor:)((CGColor *)objc_msgSend(v73, sel_CGColor), (CGColor **)&v93);

              uint64_t v74 = (void *)v93;
              if (!(void)v93)
              {
                id v78 = objc_msgSend(self, sel_blackColor);
                goto LABEL_55;
              }
              if (v72 != (id)2)
              {
LABEL_47:
                id v78 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v74);
LABEL_55:
                specialized Set._Variant.insert(_:)(&v93, v78);

                return;
              }
              id v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, (void)v93);
              CGRect v76 = (void *)static PKInkingTool.convertColor(_:from:to:)();

              Color.init(cgColor:)((CGColor *)objc_msgSend(v76, sel_CGColor), (CGColor **)&v93);
              CGRect v77 = (void *)v93;
              if ((void)v93)
              {

                uint64_t v74 = v77;
                goto LABEL_47;
              }
LABEL_64:
              __break(1u);
              return;
            }
          }
          else
          {
            long long v93 = 0u;
            long long v94 = 0u;

            swift_bridgeObjectRelease();
          }

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v93, &demangling cache variable for type metadata for Any?);
          return;
        }
      }
      else
      {
        uint64_t v23 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v23) {
          goto LABEL_10;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
LABEL_19:
    *(void *)&long long v93 = v19;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22 & ~(v22 >> 63), 0);
    if ((v86 & 0x8000000000000000) == 0) {
      break;
    }
    __break(1u);
LABEL_60:
    uint64_t v20 = MEMORY[0x263F8EE88];
LABEL_61:
    unint64_t v18 = v90;
  }
  uint64_t v79 = v9;
  uint64_t v29 = 0;
  uint64_t v30 = v90;
  uint64_t v31 = (void (**)(char *, uint64_t))(v82 + 8);
  id v32 = (void (**)(char *, void))(v83 + 8);
  uint64_t v83 = v11 + 32;
  unint64_t v84 = v90 & 0xC000000000000001;
  uint64_t v33 = v10;
  while (1)
  {
    uint64_t v34 = v84 ? (void *)MEMORY[0x21054E050](v29, v30) : *(id *)(v30 + 8 * (void)v29 + 32);
    unint64_t v35 = v34;
    id v36 = (void *)MEMORY[0x263F8EED0];
    uint64_t v37 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v34) + 0x88))();
    uint64_t v38 = (*(uint64_t (**)(uint64_t))((*v36 & *v35) + 0x90))(v37);
    uint64_t v40 = v39;
    if (v38 == NSNotFound.getter()) {
      break;
    }
    if (__OFADD__(v38, v40)) {
      goto LABEL_52;
    }
    uint64_t v41 = v87;
    id v42 = v88;
    CGRect v43 = (char *)v91;
    CRAttributedString.subscript.getter();
    (*v31)(v43, v41);
    CGRect v44 = v89;
    CRAttributedString.Substring.runs.getter();
    (*v32)(v42, v44);

    uint64_t v28 = v93;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1);
      uint64_t v28 = v93;
    }
    unint64_t v46 = *(void *)(v28 + 16);
    unint64_t v45 = *(void *)(v28 + 24);
    if (v46 >= v45 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
      uint64_t v28 = v93;
    }
    uint64_t v29 = (char *)v29 + 1;
    *(void *)(v28 + 16) = v46 + 1;
    unint64_t v47 = v28
        + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
        + *(void *)(v11 + 72) * v46;
    uint64_t v10 = v33;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v47, v13, v33);
    uint64_t v30 = v90;
    if ((void *)v86 == v29)
    {
      swift_bridgeObjectRelease();
      unint64_t v9 = v79;
      uint64_t v19 = MEMORY[0x263F8EE78];
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
}

unint64_t CanvasElementController.setSelectionTextAlignment(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  unint64_t result = CanvasElementController.textBoxes.getter();
  if (!result) {
    goto LABEL_12;
  }
  unint64_t v6 = result;
  if (!(result >> 62))
  {
    uint64_t v7 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_4;
    }
LABEL_11:
    unint64_t result = swift_bridgeObjectRelease_n();
LABEL_12:
    *(unsigned char *)(v2 + v4) = 0;
    return result;
  }
  swift_bridgeObjectRetain();
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v7 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_4:
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        uint64_t v10 = (void *)MEMORY[0x21054E050](v8, v6);
      }
      else {
        uint64_t v10 = *(id *)(v6 + 8 * v8 + 32);
      }
      uint64_t v11 = v10;
      ++v8;
      (*(void (**)(uint64_t))((*v9 & *v10) + 0x178))(a1);
    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall CanvasElementController.setSelectionBold(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  unint64_t v5 = CanvasElementController.textBoxes.getter();
  if (!v5) {
    goto LABEL_12;
  }
  unint64_t v6 = v5;
  if (!(v5 >> 62))
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(unsigned char *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_11;
  }
LABEL_4:
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = (void *)MEMORY[0x263F8EED0];
    BOOL v10 = a1;
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        uint64_t v11 = (void *)MEMORY[0x21054E050](v8, v6);
      }
      else {
        uint64_t v11 = *(id *)(v6 + 8 * v8 + 32);
      }
      uint64_t v12 = v11;
      ++v8;
      (*(void (**)(BOOL))((*v9 & *v11) + 0x180))(v10);
    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setSelectionItalic(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  unint64_t v5 = CanvasElementController.textBoxes.getter();
  if (!v5) {
    goto LABEL_12;
  }
  unint64_t v6 = v5;
  if (!(v5 >> 62))
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(unsigned char *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_11;
  }
LABEL_4:
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = (void *)MEMORY[0x263F8EED0];
    BOOL v10 = a1;
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        uint64_t v11 = (void *)MEMORY[0x21054E050](v8, v6);
      }
      else {
        uint64_t v11 = *(id *)(v6 + 8 * v8 + 32);
      }
      uint64_t v12 = v11;
      ++v8;
      (*(void (**)(BOOL))((*v9 & *v11) + 0x188))(v10);
    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setSelectionUnderline(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  unint64_t v5 = CanvasElementController.textBoxes.getter();
  if (!v5) {
    goto LABEL_12;
  }
  unint64_t v6 = v5;
  if (!(v5 >> 62))
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(unsigned char *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_11;
  }
LABEL_4:
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = (void *)MEMORY[0x263F8EED0];
    BOOL v10 = a1;
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        uint64_t v11 = (void *)MEMORY[0x21054E050](v8, v6);
      }
      else {
        uint64_t v11 = *(id *)(v6 + 8 * v8 + 32);
      }
      uint64_t v12 = v11;
      ++v8;
      (*(void (**)(BOOL))((*v9 & *v11) + 0x190))(v10);
    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setSelectionStrikethrough(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  unint64_t v5 = CanvasElementController.textBoxes.getter();
  if (!v5) {
    goto LABEL_12;
  }
  unint64_t v6 = v5;
  if (!(v5 >> 62))
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(unsigned char *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_11;
  }
LABEL_4:
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = (void *)MEMORY[0x263F8EED0];
    BOOL v10 = a1;
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        uint64_t v11 = (void *)MEMORY[0x21054E050](v8, v6);
      }
      else {
        uint64_t v11 = *(id *)(v6 + 8 * v8 + 32);
      }
      uint64_t v12 = v11;
      ++v8;
      (*(void (**)(BOOL))((*v9 & *v11) + 0x198))(v10);
    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setSelectionFontSize(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  unint64_t v5 = CanvasElementController.textBoxes.getter();
  if (!v5) {
    goto LABEL_12;
  }
  unint64_t v6 = v5;
  if (!(v5 >> 62))
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(unsigned char *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_11;
  }
LABEL_4:
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        BOOL v10 = (void *)MEMORY[0x21054E050](v8, v6);
      }
      else {
        BOOL v10 = *(id *)(v6 + 8 * v8 + 32);
      }
      uint64_t v11 = v10;
      ++v8;
      (*(void (**)(Swift::Int))((*v9 & *v10) + 0x168))(a1);
    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setSelectionFontName(_:)(Swift::String a1)
{
  uint64_t v2 = v1;
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  unint64_t v6 = CanvasElementController.textBoxes.getter();
  if (!v6) {
    goto LABEL_12;
  }
  unint64_t v7 = v6;
  if (!(v6 >> 62))
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(unsigned char *)(v2 + v5) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_11;
  }
LABEL_4:
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    BOOL v10 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v7 & 0xC000000000000001) != 0) {
        uint64_t v11 = (void *)MEMORY[0x21054E050](v9, v7);
      }
      else {
        uint64_t v11 = *(id *)(v7 + 8 * v9 + 32);
      }
      uint64_t v12 = v11;
      ++v9;
      (*(void (**)(uint64_t, void *))((*v10 & *v11) + 0x170))(countAndFlagsBits, object);
    }
    while (v8 != v9);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setTextSelectionColor(_:)(UIColor a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  unint64_t v5 = CanvasElementController.textBoxes.getter();
  if (!v5) {
    goto LABEL_12;
  }
  unint64_t v6 = v5;
  if (!(v5 >> 62))
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(unsigned char *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_11;
  }
LABEL_4:
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        BOOL v10 = (void *)MEMORY[0x21054E050](v8, v6);
      }
      else {
        BOOL v10 = *(id *)(v6 + 8 * v8 + 32);
      }
      uint64_t v11 = v10;
      ++v8;
      (*(void (**)(Class))((*v9 & *v10) + 0x160))(a1.super.isa);
    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

id CanvasElementController.activeToolPicker.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    swift_unknownObjectRelease();
    if (v5)
    {
      id v6 = objc_msgSend(v5, sel_window);

      if (v6) {
        goto LABEL_6;
      }
    }
  }
  if (!MEMORY[0x210550400](v2)) {
    return 0;
  }
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v8 = swift_getObjectType();
  id v6 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v1, v8, v7);
  swift_unknownObjectRelease();
  if (!v6) {
    return 0;
  }
LABEL_6:
  id v9 = objc_msgSend(self, sel_activeToolPickerForWindow_, v6);

  return v9;
}

Swift::Void __swiftcall CanvasElementController.updateToolPickerContextualEditingView()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    id v13 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(ObjectType, v3);
    swift_unknownObjectRelease();
    if (v13)
    {
      unsigned __int8 v5 = objc_msgSend(v13, sel__isEnabled);
      id v6 = v13;
      if (v5) {
        goto LABEL_7;
      }
    }
  }
  id v7 = CanvasElementController.activeToolPicker.getter();
  if (!v7) {
    return;
  }
  id v6 = v7;
LABEL_7:
  id v14 = v6;
  if (objc_msgSend(v6, sel_isVisible))
  {
    id v8 = v14;
    id v9 = CanvasElementController.activeToolPicker.getter();
    if (v9)
    {
      BOOL v10 = v9;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPicker);
      id v11 = v8;
      char v12 = static NSObject.== infix(_:_:)();

      if ((v12 & 1) != 0
        && (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) & 1) == 0)
      {
        CanvasElementController.configureToolPicker(_:)((PKToolPicker)v11);
      }
    }
    else
    {
    }
  }
  MEMORY[0x270F9A758]();
}

Swift::Void __swiftcall CanvasElementController.configureToolPicker(_:)(PKToolPicker a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController);
  if (v2)
  {
    uint64_t v3 = v1;
    id v5 = v2;
    unsigned int v6 = [(objc_class *)a1.super.isa _wantsUndoRedoButtonsVisibleInCompactSize];
    char v7 = v6;
    uint64_t v8 = v6 ^ 1;
    [(objc_class *)a1.super.isa _setWantsEllipsisButtonVisibleInCompactSize:[(objc_class *)a1.super.isa _wantsUndoRedoButtonsVisibleInCompactSize] ^ 1];
    [(objc_class *)a1.super.isa _setShowsPlusButton:v8];
    if (v7) {
      id v9 = 0;
    }
    else {
      id v9 = ToolPickerController.textToolListViewController.getter();
    }
    [(objc_class *)a1.super.isa _setPlusButtonViewController:v9];

    BOOL v10 = ToolPickerController.shapeButtonListViewController.getter();
    [(objc_class *)a1.super.isa _setShapeButtonViewController:v10];

    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v5;
    v24[4] = partial apply for closure #1 in CanvasElementController.configureToolPicker(_:);
    v24[5] = v11;
    v24[0] = MEMORY[0x263EF8330];
    v24[1] = 1107296256;
    void v24[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewController) -> (@owned UIViewController);
    v24[3] = &block_descriptor_65_0;
    char v12 = _Block_copy(v24);
    id v13 = v5;
    swift_release();
    [(objc_class *)a1.super.isa _setSignaturesViewControllerProvider:v12];
    _Block_release(v12);
    id v14 = ToolPickerController.textToolListViewController.getter();
    unsigned int v15 = [(objc_class *)a1.super.isa _showsShapeButton];
    int v16 = v14[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addShapeListItemVisible];
    v14[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addShapeListItemVisible] = v15 ^ 1;
    if (v15 == v16) {
      TextToolListViewController.updateUI()();
    }

    id v17 = [(objc_class *)a1.super.isa _selectionContext];
    objc_msgSend(v17, sel_setSelectionMask_, (unint64_t)objc_msgSend(v17, sel_selectionMask) & 0xFFFFFFFFFFFFFFFBLL);
    swift_unknownObjectRelease();
    objc_msgSend(-[objc_class _selectionContext](a1.super.isa, sel__selectionContext), sel_setPrefersLargeContextualEditingUI_, 0);
    swift_unknownObjectRelease();
    uint64_t v18 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_editingContainerView;
    uint64_t v19 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_editingContainerView);
    if (v19)
    {
      objc_msgSend(v19, sel_removeFromSuperview);
      uint64_t v20 = *(void **)(v3 + v18);
    }
    else
    {
      uint64_t v20 = 0;
    }
    *(void *)(v3 + v18) = 0;

    unint64_t v21 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_textStyleController);
    *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_textStyleController) = 0;

    uint64_t v22 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shapeStyleController);
    *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shapeStyleController) = 0;

    uint64_t v23 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_signatureStyleController);
    *(void *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_signatureStyleController) = 0;

    [(objc_class *)a1.super.isa set_temporarySelectionDelegate:0];
  }
}

char *closure #1 in CanvasElementController.configureToolPicker(_:)(void *a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  uint64_t v3 = specialized SignatureManager.signatureViewController(_:_:_:_:)(a1, 0, (uint64_t)partial apply for closure #1 in ToolPickerController.makeSignaturesViewController(rootViewController:), v2, 0.0, 0.0, 0.0, 0.0);
  swift_release_n();
  return v3;
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIViewController) -> (@owned UIViewController)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  id v5 = (void *)v3();
  swift_release();

  return v5;
}

void CanvasElementController.addCanvasElement(from:completionHandler:)(void *a1, void (*a2)(void), uint64_t a3)
{
  id v4 = v3;
  id v43 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = type metadata accessor for UTType();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = &v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
  if (MEMORY[0x210550400](&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate], v10))
  {
    uint64_t v14 = *((void *)v13 + 1);
    uint64_t v15 = swift_getObjectType();
    int v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v15, v14);
    swift_unknownObjectRelease();
    if (v16)
    {
      uint64_t v41 = ObjectType;
      id v42 = a2;
      AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
      if (one-time initialization token for canvasElementDefaultSize != -1) {
        swift_once();
      }
      double v17 = *(double *)&static UIConstants.canvasElementDefaultSize;
      double v18 = *(double *)algn_2676E93F0;
      uint64_t v19 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C853C60);
      unsigned int v20 = objc_msgSend(v43, sel_hasItemConformingToTypeIdentifier_, v19);

      if (v20)
      {
        static UTType.plainText.getter();
        uint64_t v21 = UTType.identifier.getter();
        uint64_t v23 = v22;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        uint64_t v24 = (void *)MEMORY[0x21054D080](v21, v23);
        swift_bridgeObjectRelease();
        LODWORD(v23) = objc_msgSend(v43, sel_hasItemConformingToTypeIdentifier_, v24);

        if (v23)
        {
          if (one-time initialization token for emojiTapToInsertSize != -1) {
            swift_once();
          }
          char v25 = &static UIConstants.emojiTapToInsertSize;
        }
        else
        {
          if (one-time initialization token for stickerTapToInsertSize != -1) {
            swift_once();
          }
          char v25 = &static UIConstants.stickerTapToInsertSize;
        }
        double v17 = *(double *)v25;
        double v18 = *((double *)v25 + 1);
      }
      uint64_t v26 = MEMORY[0x210550400](v13);
      double v27 = 0.0;
      uint64_t v28 = v41;
      if (v26)
      {
        uint64_t v29 = *((void *)v13 + 1);
        uint64_t v30 = swift_getObjectType();
        uint64_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v30, v29);
        uint64_t v32 = swift_unknownObjectRelease();
        double v33 = 0.0;
        double v34 = 0.0;
        if (v31)
        {
          double v27 = (*(double (**)(uint64_t, double, double))((*MEMORY[0x263F8EED0] & *v31) + 0x6D0))(v32, v17, v18);
          double v33 = v35;
          double v34 = v36;
        }
      }
      else
      {
        double v33 = 0.0;
        double v34 = 0.0;
      }
      uint64_t v37 = swift_allocObject();
      *(unsigned char *)(v37 + 16) = 0;
      swift_retain_n();
      id v38 = v43;
      swift_retain_n();
      id v39 = v38;
      specialized CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(v4, v37, v39, v42, a3, v28, v27, v33, v17, v18, v34);
      swift_release();

      swift_release_n();
    }
  }
}

double CanvasElementController.suggestedPositionForNewCanvasElement(withSize:)(double a1, double a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  double v6 = 0.0;
  if (MEMORY[0x210550400](v5))
  {
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
    uint64_t v10 = swift_unknownObjectRelease();
    if (v9)
    {
      double v6 = (*(double (**)(uint64_t, double, double))((*MEMORY[0x263F8EED0] & *v9) + 0x6D0))(v10, a1, a2);
    }
  }
  return v6;
}

uint64_t specialized CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(char *a1, uint64_t a2, void *a3, void (*a4)(void), uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11)
{
  specialized CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();

  return swift_release();
}

void CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(uint64_t (*a1)(void *), uint64_t a2)
{
  uint64_t v3 = v2;
  double v6 = &v2[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
  if (MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
  {
    uint64_t v7 = *((void *)v6 + 1);
    uint64_t ObjectType = swift_getObjectType();
    id v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
    swift_unknownObjectRelease();
    if (v43)
    {
      uint64_t v9 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v43) + 0x320))();
      if (v9)
      {
        id v42 = v9;
        id v10 = objc_msgSend(v9, sel_scrollView);
        if (v10)
        {
          uint64_t v11 = v10;
          objc_msgSend(v43, sel_bounds);
          double x = v51.origin.x;
          double y = v51.origin.y;
          double width = v51.size.width;
          double Height = CGRectGetHeight(v51);
          if (one-time initialization token for defaultTextAttachmentHeight != -1) {
            swift_once();
          }
          if (Height <= *(double *)&static UIConstants.defaultTextAttachmentHeight) {
            double Height = *(double *)&static UIConstants.defaultTextAttachmentHeight;
          }
          type metadata accessor for PaperTextAttachmentView();
          if (swift_dynamicCastClass())
          {
            int v16 = v43;
            PaperTextAttachmentView.isAtEndOfDocument.getter();
            char v18 = v17;

            if (v18)
            {
              objc_msgSend(v42, sel_bounds);
              double Height = Height + CGRectGetHeight(v52);
            }
          }
          objc_msgSend(v43, sel_convertRect_toCoordinateSpace_, v42, x, y, width, Height);
          CGFloat v20 = v19;
          CGFloat v22 = v21;
          CGFloat v24 = v23;
          CGFloat v26 = v25;
          objc_msgSend(v42, sel_bounds);
          v55.origin.double x = v27;
          v55.origin.double y = v28;
          v55.size.double width = v29;
          v55.size.CGFloat height = v30;
          v53.origin.double x = v20;
          v53.origin.double y = v22;
          v53.size.double width = v24;
          v53.size.CGFloat height = v26;
          CGRect v54 = CGRectIntersection(v53, v55);
          if (CGRectGetHeight(v54) < *(double *)&static UIConstants.defaultTextAttachmentHeight)
          {
            uint64_t v31 = self;
            uint64_t v32 = (CGFloat *)swift_allocObject();
            *((void *)v32 + 2) = v11;
            v32[3] = v20;
            v32[4] = v22;
            v32[5] = v24;
            v32[6] = v26;
            uint64_t v48 = partial apply for closure #1 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:);
            uint64_t v49 = v32;
            uint64_t aBlock = MEMORY[0x263EF8330];
            uint64_t v45 = 1107296256;
            unint64_t v46 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            unint64_t v47 = &block_descriptor_32_2;
            double v33 = _Block_copy(&aBlock);
            id v34 = v11;
            swift_release();
            double v35 = (CGFloat *)swift_allocObject();
            *((void *)v35 + 2) = v43;
            *((void *)v35 + 3) = v34;
            *((void *)v35 + 4) = v42;
            *((void *)v35 + 5) = a1;
            *((void *)v35 + 6) = a2;
            *((void *)v35 + 7) = v3;
            uint64_t v48 = partial apply for closure #2 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:);
            uint64_t v49 = v35;
            uint64_t aBlock = MEMORY[0x263EF8330];
            uint64_t v45 = 1107296256;
            unint64_t v46 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
            unint64_t v47 = &block_descriptor_39_0;
            double v36 = _Block_copy(&aBlock);
            uint64_t v37 = v43;
            id v38 = v34;
            id v39 = v42;
            swift_retain();
            id v40 = v3;
            swift_release();
            objc_msgSend(v31, sel_animateWithDuration_animations_completion_, v33, v36, 0.3);

            _Block_release(v36);
            _Block_release(v33);
            return;
          }
          getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(v43, (uint64_t)v11, v42, a1, a2, v3);
        }
        else
        {
        }
        uint64_t v41 = v42;
      }
      else
      {
        uint64_t v41 = v43;
      }
    }
  }
}

void CanvasElementController.addCanvasElement<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = type metadata accessor for Capsule();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  double v11 = MEMORY[0x270FA5388](v8);
  id v13 = (char *)&v21 - v12;
  uint64_t v14 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate, v11))
  {
    uint64_t v15 = *(void *)(v14 + 8);
    uint64_t v16 = swift_getObjectType();
    char v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
    swift_unknownObjectRelease();
    if (v17)
    {
      AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a1, v8);
      unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      unint64_t v19 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      CGFloat v20 = (char *)swift_allocObject();
      *((void *)v20 + 2) = a2;
      *((void *)v20 + 3) = a3;
      *((void *)v20 + 4) = v21;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v20[v18], v13, v8);
      *(void *)&v20[v19] = ObjectType;
      CanvasElementController.visibleCanvasInsertIfNeeded(completion:)((uint64_t (*)(void *))partial apply for closure #1 in CanvasElementController.addCanvasElement<A>(_:), (uint64_t)v20);
      swift_release();
    }
  }
}

void closure #1 in CanvasElementController.addCanvasElement<A>(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    uint64_t v10 = a1;
    specialized static CanvasElementController.makeCanvasFirstResponder(_:)(v10);
    (*(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v10)
                                                                                        + 0x490))(a2, 1, 0, 0, a4, a5, a6);
  }
}

unint64_t CanvasElementController.recentlyAddedCanvasElement.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v1)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);
  uint64_t v5 = swift_unknownObjectRelease();
  if (!v4) {
    return (unint64_t)v4;
  }
  double v6 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v4) + 0x2F8))(v5);
  uint64_t v8 = v7;

  uint64_t v9 = swift_getObjectType();
  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v9, v8);

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = *(void **)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_11:
      swift_bridgeObjectRelease();
      return (unint64_t)v4;
    }
  }
  unint64_t result = (unint64_t)v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
LABEL_17:
    uint64_t v12 = (void *)MEMORY[0x21054E050](result, v10);
    goto LABEL_10;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v12 = *(id *)(v10 + 8 * result + 32);
LABEL_10:
    uint64_t v4 = v12;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

CGSize __swiftcall CanvasElementController.adjustedSizeForNewCanvasElement(withSize:)(CGSize withSize)
{
  CGFloat height = withSize.height;
  CGFloat width = withSize.width;
  uint64_t v2 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  uint64_t v3 = MEMORY[0x210550400](v2);
  v4.f64[0] = width;
  v4.f64[1] = height;
  if (v3)
  {
    float64x2_t v20 = v4;
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
    swift_unknownObjectRelease();
    if (v7)
    {
      id v8 = objc_msgSend(v7, sel_window);
      if (v8)
      {
        uint64_t v9 = v8;
        id v10 = objc_msgSend(v8, sel_screen);

        objc_msgSend(v10, sel_scale);
        double v18 = v11;
      }
      else
      {
        double v18 = 1.0;
      }
      double v16 = AnyCanvas.scaleFactorForNewElements.getter();

      float64x2_t v12 = vmulq_n_f64(vmulq_n_f64(v20, v16), v18);
      float64x2_t v13 = vrndmq_f64(v12);
      float64x2_t v4 = vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v12, v13), (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL)), (int8x16_t)vrndpq_f64(v12), (int8x16_t)v13), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0));
    }
    else
    {
      float64x2_t v4 = v20;
    }
  }
  double v14 = v4.f64[1];
  result.CGFloat width = v4.f64[0];
  result.CGFloat height = v14;
  return result;
}

uint64_t specialized getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(void *a1, void (*a2)(char *, uint64_t), void *a3, void *a4, uint64_t a5, void *a6, void (*a7)(void), uint64_t a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14)
{
  specialized getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  swift_release();

  return swift_release();
}

{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  id v35;
  uint64_t v36;
  void (*v37)(void);
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  char *v51;
  char *v52;
  uint64_t v53;
  id v54;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  void (*v59)(void);
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  id v75;
  void aBlock[7];
  uint64_t vars8;
  CGRect v78;
  CGRect v79;

  id v65 = a4;
  uint64_t v74 = a2;
  id v75 = a3;
  CGFloat v24 = type metadata accessor for DispatchWorkItemFlags();
  id v72 = *(void *)(v24 - 8);
  id v73 = v24;
  MEMORY[0x270FA5388](v24);
  objc_super v70 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v71 = type metadata accessor for DispatchQoS();
  char v69 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  uint64_t v68 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchTimeInterval();
  uint64_t v62 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  CGFloat v28 = (uint64_t *)((char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v67 = type metadata accessor for DispatchTime();
  id v66 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  CGFloat v30 = (char *)&v61 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v64 = (char *)&v61 - v32;
  double v33 = swift_allocObject();
  *(void *)(v33 + 16) = a5;
  *(void *)(v33 + 24) = a6;
  *(double *)(v33 + 32) = a9;
  *(double *)(v33 + 40) = a10;
  *(double *)(v33 + 48) = a11;
  *(double *)(v33 + 56) = a12;
  *(double *)(v33 + 64) = a13;
  *(void *)(v33 + 72) = a7;
  *(void *)(v33 + 80) = a8;
  *(void *)(v33 + 88) = a14;
  id v34 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a1) + 0x408);
  swift_retain();
  double v35 = a6;
  double v36 = swift_retain();
  if (v34(v36))
  {
    uint64_t v37 = a7;
    objc_msgSend(a1, sel_bounds);
    objc_msgSend(a1, sel_convertRect_toCoordinateSpace_, v74);
    double x = v78.origin.x;
    double y = v78.origin.y;
    CGFloat width = v78.size.width;
    CGFloat height = v78.size.height;
    CGFloat MidX = CGRectGetMidX(v78);
    v79.origin.double x = x;
    v79.origin.double y = y;
    v79.size.CGFloat width = width;
    v79.size.CGFloat height = height;
    if (objc_msgSend(v75, sel_insertAttachmentIfInBlankSpace_, MidX, CGRectGetMidY(v79)))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      id v75 = (id)static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      *CGFloat v28 = 100;
      id v43 = v62;
      CGRect v44 = v63;
      (*(void (**)(void *, void, uint64_t))(v62 + 104))(v28, *MEMORY[0x263F8F000], v63);
      uint64_t v45 = v64;
      MEMORY[0x21054AAF0](v30, v28);
      (*(void (**)(void *, uint64_t))(v43 + 8))(v28, v44);
      uint64_t v74 = *(void (**)(char *, uint64_t))(v66 + 8);
      unint64_t v46 = v67;
      v74(v30, v67);
      unint64_t v47 = (void *)swift_allocObject();
      uint64_t v48 = v65;
      v47[2] = v65;
      v47[3] = partial apply for closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:);
      v47[4] = v33;
      aBlock[4] = closure #1 in getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)partial apply;
      aBlock[5] = v47;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_50;
      uint64_t v49 = _Block_copy(aBlock);
      uint64_t v50 = v48;
      swift_retain();
      swift_release();
      CGRect v51 = v68;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = MEMORY[0x263F8EE78];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      CGRect v52 = v70;
      CGRect v53 = v73;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      CGRect v54 = v75;
      MEMORY[0x21054D9C0](v45, v51, v52, v49);
      _Block_release(v49);

      (*(void (**)(char *, uint64_t))(v72 + 8))(v52, v53);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v51, v71);
      v74(v45, v46);
    }
    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      long long v56 = type metadata accessor for Logger();
      __swift_project_value_buffer(v56, (uint64_t)logger);
      unint64_t v57 = Logger.logObject.getter();
      unint64_t v58 = static os_log_type_t.error.getter();
      uint64_t v59 = v37;
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v60 = 0;
        _os_log_impl(&dword_20C2D7000, v57, v58, "Failed to insert a new attachment", v60, 2u);
        MEMORY[0x210550270](v60, -1, -1);
      }

      swift_beginAccess();
      v59(*(unsigned __int8 *)(a5 + 16));
    }
  }
  else
  {
    specialized closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:)(a1, a5, (uint64_t)v35, (uint64_t (*)(void))a7, a9, a10, a11, a12, a13);
  }
  return swift_release();
}

uint64_t getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(void *), uint64_t a5, void *a6)
{
  CGRect v44 = a6;
  id v52 = a3;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v48 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  float64x2_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchTimeInterval();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  char v17 = (void **)((char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for DispatchTime();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  MEMORY[0x270FA5388](v18);
  float64x2_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22.n128_f64[0] = MEMORY[0x270FA5388](v21);
  CGFloat v24 = (char *)&v44 - v23;
  if (((*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *a1) + 0x408))(v22) & 1) == 0) {
    return a4(a1);
  }
  objc_msgSend(a1, sel_bounds);
  objc_msgSend(a1, sel_convertRect_toCoordinateSpace_, a2);
  CGFloat x = v54.origin.x;
  CGFloat y = v54.origin.y;
  CGFloat width = v54.size.width;
  CGFloat height = v54.size.height;
  double MidX = CGRectGetMidX(v54);
  v55.origin.CGFloat x = x;
  v55.origin.CGFloat y = y;
  v55.size.CGFloat width = width;
  v55.size.CGFloat height = height;
  if (objc_msgSend(v52, sel_insertAttachmentIfInBlankSpace_, MidX, CGRectGetMidY(v55)))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    id v52 = (id)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    *char v17 = 100;
    (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x263F8F000], v14);
    MEMORY[0x21054AAF0](v20, v17);
    (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v30 = v46;
    uint64_t v45 = *(void *)(v45 + 8);
    ((void (*)(char *, uint64_t))v45)(v20, v46);
    uint64_t v31 = (void *)swift_allocObject();
    uint64_t v32 = v44;
    void v31[2] = v44;
    v31[3] = a4;
    v31[4] = a5;
    aBlock[4] = partial apply for closure #1 in getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:);
    aBlock[5] = v31;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_25;
    double v33 = _Block_copy(aBlock);
    id v34 = v32;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    double v35 = v48;
    uint64_t v36 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    id v37 = v52;
    MEMORY[0x21054D9C0](v24, v13, v35, v33);
    _Block_release(v33);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v36);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v49);
    return ((uint64_t (*)(char *, uint64_t))v45)(v24, v30);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)logger);
    id v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    id v42 = (uint64_t (*)(void))a4;
    if (os_log_type_enabled(v40, v41))
    {
      id v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v43 = 0;
      _os_log_impl(&dword_20C2D7000, v40, v41, "Failed to insert a new attachment", v43, 2u);
      MEMORY[0x210550270](v43, -1, -1);
    }

    return v42(0);
  }
}

void closure #1 in getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(uint64_t a1, void (*a2)(void *))
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](a1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
    swift_unknownObjectRelease();
    if (v11)
    {
      if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x408))())
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v6 = type metadata accessor for Logger();
        __swift_project_value_buffer(v6, (uint64_t)logger);
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v7, v8))
        {
          uint64_t v9 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v9 = 0;
          _os_log_impl(&dword_20C2D7000, v7, v8, "Current canvas is still the stand in attachment after inserting.", v9, 2u);
          MEMORY[0x210550270](v9, -1, -1);
        }

        a2(0);
      }
      else
      {
        uint64_t v10 = v11;
        a2(v11);
      }
    }
  }
}

uint64_t updateElements #1 (elements:) in CanvasElementController.changeSelectedStrokeWidth(_:)(unint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for Signature();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v59 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v7 = *(char **)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v58 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)type metadata accessor for Shape();
  MEMORY[0x270FA5388](v9);
  unint64_t v61 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v11 = *(void **)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t isEscapingClosureAtFileLocation = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_34;
  }
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v14)
  {
    do
    {
      if (v14 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v63 = isEscapingClosureAtFileLocation;
      uint64_t v64 = v9;
      uint64_t v16 = 0;
      unint64_t v67 = a1;
      unint64_t v66 = a1 & 0xC000000000000001;
      uint64_t isEscapingClosureAtFileLocation = (uint64_t)(v11 + 2);
      uint64_t v62 = (void (**)(void *, unint64_t))(v11 + 1);
      double v17 = round(a2);
      uint64_t v55 = *(void *)&v17 & 0x7FF0000000000000;
      unint64_t v54 = llround(a2);
      CGRect v53 = (void (**)(char *, char *, uint64_t))(v7 + 16);
      id v52 = (void (**)(char *, uint64_t))(v7 + 8);
      uint64_t v51 = v75;
      uint64_t v18 = (void *)MEMORY[0x263F8EED0];
      uint64_t v50 = MEMORY[0x263F8EE60] + 8;
      id v72 = v11 + 2;
      uint64_t v57 = v6;
      uint64_t v56 = v14;
      while (1)
      {
        if (v66) {
          uint64_t v19 = (char *)MEMORY[0x21054E050](v16, v67);
        }
        else {
          uint64_t v19 = (char *)*(id *)(v67 + 8 * v16 + 32);
        }
        uint64_t v7 = v19;
        type metadata accessor for ShapeView();
        float64x2_t v20 = (void *)swift_dynamicCastClass();
        if (v20)
        {
          uint64_t v9 = v20;
          uint64_t v71 = v16;
          uint64_t v21 = (void *)((char *)v20 + *(void *)((*v18 & *v20) + 0x380));
          swift_beginAccess();
          __n128 v22 = (void *)v63;
          a1 = v60;
          uint64_t v68 = *(void (**)(uint64_t, void *, uint64_t))isEscapingClosureAtFileLocation;
          v68(v63, v21, v60);
          uint64_t v23 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
          objc_super v70 = v7;
          char v69 = v7;
          uint64_t v24 = (uint64_t)v61;
          Capsule<>.root.getter();
          id v65 = *v62;
          v65(v22, a1);
          uint64_t v25 = (uint64_t)v64;
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
          CRRegister.wrappedValue.getter();
          uint64_t v11 = (void *)aBlock[0];
          uint64_t v26 = outlined destroy of Signature(v24, (uint64_t (*)(void))type metadata accessor for Shape);
          if (v11)
          {
            uint64_t v14 = v56;
            uint64_t v16 = v71;
            uint64_t isEscapingClosureAtFileLocation = (uint64_t)v72;
            uint64_t v7 = v70;
          }
          else
          {
            MEMORY[0x270FA5388](v26);
            *((double *)&v50 - 2) = a2;
            swift_beginAccess();
            Capsule.callAsFunction<A>(_:)();
            swift_endAccess();
            uint64_t v27 = ((uint64_t (*)(void *, void *, unint64_t))v68)(v22, v21, a1);
            MEMORY[0x270FA5388](v27);
            *(&v50 - 4) = v25;
            *(&v50 - 3) = v23;
            *(&v50 - 2) = (uint64_t)&protocol witness table for Shape;
            swift_getKeyPath();
            uint64_t v11 = v22;
            Capsule<>.subscript.getter();
            swift_release();
            v65(v22, a1);
            unint64_t v28 = a1;
            if ((aBlock[0] & 0x20) != 0)
            {
              swift_beginAccess();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementFlags?);
              uint64_t v11 = v21;
              Capsule.callAsFunction<A>(_:)();
              swift_endAccess();
            }
            uint64_t v14 = v56;
            uint64_t v7 = v70;
            uint64_t v16 = v71;
            uint64_t v29 = MEMORY[0x210550400]((char *)v9 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
            uint64_t isEscapingClosureAtFileLocation = (uint64_t)v72;
            if (v29)
            {
              uint64_t v11 = (void *)v29;
              uint64_t v30 = v63;
              v68(v63, v21, a1);
              LOBYTE(aBlock[0]) = 4;
              uint64_t v31 = (uint64_t *)MEMORY[0x263F8EED0];
              a1 = *(void *)((*MEMORY[0x263F8EED0] & *v11) + 0x550);
              uint64_t v32 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
              ((void (*)(uint64_t, void *, void *, uint64_t))a1)(v30, aBlock, v64, v32);
              uint64_t isEscapingClosureAtFileLocation = (uint64_t)v72;
              LOBYTE(aBlock[0]) = 4;
              uint64_t v33 = *v31;
              uint64_t v7 = v70;
              (*(void (**)(void *))((v33 & *v11) + 0x530))(aBlock);

              uint64_t v34 = v30;
              uint64_t v16 = v71;
              v65((void *)v34, v28);
            }
            objc_msgSend(v9, sel_setNeedsLayout, v50, v51);
          }

          uint64_t v6 = v57;
          uint64_t v18 = (void *)MEMORY[0x263F8EED0];
        }
        type metadata accessor for SignatureView();
        uint64_t v35 = swift_dynamicCastClass();
        if (!v35)
        {

          goto LABEL_6;
        }
        if (v55 == 0x7FF0000000000000) {
          break;
        }
        if (v17 <= -9.22337204e18) {
          goto LABEL_31;
        }
        if (v17 >= 9.22337204e18) {
          goto LABEL_32;
        }
        uint64_t v36 = (char *)v35;
        id v37 = (void *)MEMORY[0x270FA5388](v35);
        *(&v50 - 2) = v54;
        *((unsigned char *)&v50 - 8) = 0;
        id v38 = (char *)v37 + *(void *)((*v18 & *v37) + 0x380);
        swift_beginAccess();
        uint64_t v39 = v7;
        Capsule.callAsFunction<A>(_:)();
        swift_endAccess();
        specialized CanvasElementView.commit()();
        specialized CanvasElementView.updateGestures()((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>, (uint64_t (*)(void))type metadata accessor for Signature, (unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature, (uint64_t)&protocol witness table for Signature);
        specialized CanvasElementView.updateFrame()();
        id v40 = (void *)MEMORY[0x210550400](&v36[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
        if (v40)
        {
          os_log_type_t v41 = v40;
          (*(void (**)(void))((*v18 & *v40) + 0x680))();
        }
        id v42 = v58;
        (*v53)(v58, v38, v6);
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
        uint64_t v43 = (uint64_t)v59;
        Capsule<>.root.getter();
        (*v52)(v42, v6);
        outlined destroy of Signature(v43, (uint64_t (*)(void))type metadata accessor for Signature);
        id v73 = objc_msgSend(self, sel_blackColor);
        uint64_t v44 = SignatureView.color.getter();
        if (v44)
        {
          uint64_t v45 = (void *)v44;
          id v46 = objc_msgSend(v36, sel_traitCollection);
          objc_msgSend(v46, sel_userInterfaceStyle);

          uint64_t v47 = static PKInkingTool.convertColor(_:from:to:)();
          uint64_t v48 = v73;
          id v73 = (id)v47;
        }
        id v49 = objc_msgSend(v36, sel_traitCollection, v50, v51);
        uint64_t v11 = (void *)swift_allocObject();
        v11[2] = v36;
        v11[3] = &v73;
        uint64_t v9 = (void *)swift_allocObject();
        v9[2] = partial apply for closure #1 in SignatureView.updateUI();
        void v9[3] = v11;
        v75[2] = partial apply for thunk for @callee_guaranteed () -> ();
        v75[3] = v9;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        v75[0] = thunk for @escaping @callee_guaranteed () -> ();
        v75[1] = &block_descriptor_77;
        a1 = (unint64_t)_Block_copy(aBlock);
        uint64_t v7 = v39;
        swift_retain();
        swift_release();
        objc_msgSend(v49, sel_performAsCurrentTraitCollection_, a1);

        _Block_release((const void *)a1);
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation) {
          goto LABEL_33;
        }
        uint64_t v9 = v73;

        swift_release();
        uint64_t isEscapingClosureAtFileLocation = (uint64_t)v72;
        uint64_t v18 = (void *)MEMORY[0x263F8EED0];
LABEL_6:
        if (v14 == ++v16) {
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v14 = result;
    }
    while (result);
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in CanvasElementController.changeSelectedLineType(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v39 = a2;
  uint64_t v40 = a4;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v8 = *(void *)(v48 - 8);
  uint64_t result = MEMORY[0x270FA5388](v48);
  id v46 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v11) {
    goto LABEL_22;
  }
  id v12 = v11;
  uint64_t v13 = swift_bridgeObjectRetain();
  unint64_t v14 = specialized Sequence.compactMap<A>(_:)(v13, (uint64_t)v12);

  uint64_t result = swift_bridgeObjectRelease();
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_4;
    }
LABEL_18:
    return swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15) {
    goto LABEL_18;
  }
LABEL_4:
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v45 = (uint64_t (**)(char *, char *, uint64_t))(v8 + 16);
    unint64_t v43 = v14 & 0xC000000000000001;
    uint64_t v44 = (void (**)(char *, uint64_t))(v8 + 8);
    int v35 = a5 & 1;
    int v36 = a3 & 1;
    v34[1] = MEMORY[0x263F8EE60] + 8;
    uint64_t v37 = v15;
    unint64_t v38 = v14;
    do
    {
      if (v43) {
        id v18 = (id)MEMORY[0x21054E050](v16, v14);
      }
      else {
        id v18 = *(id *)(v14 + 8 * v16 + 32);
      }
      double v17 = v18;
      type metadata accessor for ShapeView();
      uint64_t v19 = swift_dynamicCastClass();
      if (v19)
      {
        float64x2_t v20 = (char *)v19;
        uint64_t v47 = v17;
        uint64_t v21 = (void *)MEMORY[0x270FA5388](v19);
        v34[-4] = v39;
        LOBYTE(v34[-3]) = v36;
        v34[-2] = v40;
        LOBYTE(v34[-1]) = v35;
        __n128 v22 = (char *)v21 + *(void *)((*MEMORY[0x263F8EED0] & *v21) + 0x380);
        swift_beginAccess();
        uint64_t v23 = v48;
        Capsule.callAsFunction<A>(_:)();
        swift_endAccess();
        uint64_t v24 = v46;
        os_log_type_t v41 = *v45;
        uint64_t v25 = v41(v46, v22, v23);
        MEMORY[0x270FA5388](v25);
        uint64_t v42 = type metadata accessor for Shape();
        v34[-4] = v42;
        v34[-3] = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
        v34[-2] = &protocol witness table for Shape;
        swift_getKeyPath();
        Capsule<>.subscript.getter();
        swift_release();
        uint64_t v26 = *v44;
        (*v44)(v24, v23);
        if ((v49[0] & 0x20) != 0)
        {
          swift_beginAccess();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementFlags?);
          Capsule.callAsFunction<A>(_:)();
          swift_endAccess();
        }
        uint64_t v27 = MEMORY[0x210550400](&v20[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
        if (v27)
        {
          unint64_t v28 = (void *)v27;
          uint64_t v29 = v46;
          uint64_t v30 = v48;
          v41(v46, v22, v48);
          LOBYTE(v49[0]) = 4;
          uint64_t v31 = (void *)MEMORY[0x263F8EED0];
          uint64_t v32 = *(void (**)(char *, void *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v28) + 0x550);
          uint64_t v33 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
          v32(v29, v49, v42, v33);
          LOBYTE(v49[0]) = 4;
          (*(void (**)(void *))((*v31 & *v28) + 0x530))(v49);

          v26(v29, v30);
        }
        objc_msgSend(v20, sel_setNeedsLayout);
        uint64_t v15 = v37;
        unint64_t v14 = v38;
        double v17 = v47;
      }
      ++v16;
    }
    while (v15 != v16);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

Swift::Void __swiftcall CanvasElementController.toolPickerSelectedToolItemDidChange(_:)(PKToolPicker a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)) {
    return;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
  swift_unknownObjectRelease();
  if (!v7) {
    return;
  }
  id v8 = [(objc_class *)a1.super.isa selectedToolItem];
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_activeToolPickerItem;
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_activeToolPickerItem);
  if (v8)
  {
    uint64_t v11 = v8;
    if (v10)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKToolPickerItem);
      id v12 = v10;
      id v13 = v11;
      char v14 = static NSObject.== infix(_:_:)();

      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
    }
  }
  else if (!v10)
  {
    goto LABEL_12;
  }
  AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
LABEL_12:
  id v15 = [(objc_class *)a1.super.isa selectedToolItem];

  uint64_t v16 = *(void **)(v2 + v9);
  *(void *)(v2 + v9) = v15;
}

void specialized Set.formUnion<A>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    lazy protocol witness table accessor for type UIColor and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    unint64_t v1 = (unint64_t)v17[1];
    uint64_t v16 = v17[2];
    uint64_t v2 = (uint64_t)v17[3];
    id v3 = v17[4];
    unint64_t v4 = (unint64_t)v17[5];
  }
  else
  {
    id v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | ((void)v3 << 6);
      uint64_t v11 = (char *)v3;
      goto LABEL_29;
    }
    uint64_t v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = v16[v13];
    uint64_t v11 = (char *)v3 + 1;
    if (!v14)
    {
      uint64_t v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = v16[(void)v11];
      if (!v14)
      {
        uint64_t v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = v16[(void)v11];
        if (!v14)
        {
          uint64_t v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = v16[(void)v11];
          if (!v14)
          {
            uint64_t v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = v16[(void)v11];
            if (!v14)
            {
              id v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                unint64_t v14 = v16[(void)v15++];
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [AnyHashable : Any].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + ((void)v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      specialized Set._Variant.insert(_:)(v17, v12);

      id v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v17[0];
        swift_unknownObjectRelease();
        uint64_t v11 = (char *)v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void **v5;
  void *v6;
  id v7;

  if (a1 >> 62)
  {
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      return;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
  }
  else if ((a1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      unint64_t v4 = (void *)MEMORY[0x21054E050](i, a1);
      specialized Set._Variant.insert(_:)(&v7, v4);
    }
  }
  else
  {
    uint64_t v5 = (void **)(a1 + 32);
    do
    {
      uint64_t v6 = *v5++;
      specialized Set._Variant.insert(_:)(&v7, v6);

      --v2;
    }
    while (v2);
  }
}

uint64_t CanvasElementController.selectedSignatureColors()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v2 = *(void (***)(char *, char *, uint64_t))(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v32 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v5 = MEMORY[0x270FA5388](v4);
  int v36 = (char *)&v32 - v6;
  uint64_t v7 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v7, v5)) {
    return 0;
  }
  uint64_t v8 = *(void *)(v7 + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8);
  uint64_t result = swift_unknownObjectRelease();
  if (!v10) {
    return (uint64_t)v10;
  }
  id v12 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v12) {
    goto LABEL_29;
  }
  id v13 = v12;
  uint64_t v14 = swift_bridgeObjectRetain();
  unint64_t v15 = specialized Sequence.compactMap<A>(_:)(v14, (uint64_t)v13);

  swift_bridgeObjectRelease();
  unint64_t v41 = MEMORY[0x263F8EE78];
  if (v15 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
  uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v16)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    unint64_t v31 = MEMORY[0x263F8EE78];
LABEL_26:
    swift_bridgeObjectRelease();
    unint64_t v10 = (char *)specialized Set.init<A>(_:)(v31);
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_6:
  unint64_t v34 = v15;
  uint64_t v35 = v1;
  unint64_t v37 = v15 & 0xC000000000000001;
  uint64_t v1 = (uint64_t)(v2 + 1);
  v2 += 2;
  uint64_t v17 = 4;
  uint64_t v33 = v16;
  while (1)
  {
    if (v37) {
      id v18 = (id)MEMORY[0x21054E050](v17 - 4, v15);
    }
    else {
      id v18 = *(id *)(v15 + 8 * v17);
    }
    uint64_t v19 = v18;
    uint64_t v20 = v17 - 3;
    if (__OFADD__(v17 - 4, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    type metadata accessor for SignatureView();
    uint64_t v21 = (void *)swift_dynamicCastClass();
    if (v21) {
      break;
    }

LABEL_8:
    ++v17;
    if (v20 == v16)
    {
      swift_bridgeObjectRelease();
      unint64_t v31 = v41;
      goto LABEL_26;
    }
  }
  id v38 = v19;
  uint64_t v39 = v17 - 3;
  __n128 v22 = (char *)v21 + *(void *)((*MEMORY[0x263F8EED0] & *v21) + 0x380);
  swift_beginAccess();
  uint64_t v23 = *v2;
  uint64_t v24 = v36;
  uint64_t v25 = (uint64_t (**)(char *, uint64_t))v1;
  uint64_t v26 = v35;
  (*v2)(v36, v22, v35);
  swift_getKeyPath();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v27 = *v25;
  (*v25)(v24, v26);
  if (!v40)
  {

    uint64_t v16 = v33;
    unint64_t v15 = v34;
    uint64_t v1 = (uint64_t)v25;
    uint64_t v20 = v39;
    goto LABEL_8;
  }

  unint64_t v28 = v32;
  v23(v32, v22, v26);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t result = v27(v28, v26);
  id v29 = v40;
  if (v40)
  {
    uint64_t v1 = (uint64_t)v25;
    id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v40);

    uint64_t v16 = v33;
    unint64_t v15 = v34;
    uint64_t v20 = v39;
    if (v30)
    {
      MEMORY[0x21054D330]();
      if (*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t CanvasElementController.imageDescription.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    double v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    uint64_t v6 = swift_unknownObjectRelease();
    if (v5)
    {
      uint64_t v2 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v5) + 0x420))(v6);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void CanvasElementController.imageDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (uint64_t v6 = *(void *)(v5 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6),
        swift_unknownObjectRelease(),
        v8))
  {
    (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v8) + 0x428))(a1, a2);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for CanvasElementController.EditingContainerView()
{
  return self;
}

uint64_t protocol witness for ToolPickerControllerDelegate.toolPickerController(_:wantsToEnterFullscreen:) in conformance CanvasElementController(uint64_t a1, char a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  uint64_t result = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate);
  if (result)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 40))(v2, a2 & 1, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

void protocol witness for ToolPickerControllerDelegate.toolPickerController(_:willShowToolPicker:) in conformance CanvasElementController(uint64_t a1, void *a2)
{
}

void protocol witness for ToolPickerControllerDelegate.toolPickerController(_:didShowToolPicker:) in conformance CanvasElementController(uint64_t a1, void *a2)
{
}

void protocol witness for ToolPickerControllerDelegate.toolPickerControllerAdjustOpacity(_:) in conformance CanvasElementController()
{
  id v0 = CanvasElementController.activeToolPicker.getter();
  objc_msgSend(v0, sel__startOpacityEditing);
}

uint64_t sub_20C5C5C9C()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t specialized closure #1 in CanvasElementView.commit()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Shape();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  swift_getKeyPath();
  uint64_t v3 = (void (*)(unsigned char *, void))Capsule.Ref<>.subscript.modify();
  uint64_t v4 = *v2 & 0x20;
  if ((*v2 & 0x20) != 0) {
    *v2 &= ~0x20uLL;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v4 == 0;
  v3(v6, 0);
  return swift_release();
}

{
  void *v2;
  void (*v3)(unsigned char *, void);
  uint64_t v4;
  unsigned char v6[32];

  type metadata accessor for Signature();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  swift_getKeyPath();
  uint64_t v3 = (void (*)(unsigned char *, void))Capsule.Ref<>.subscript.modify();
  uint64_t v4 = *v2 & 0x20;
  if ((*v2 & 0x20) != 0) {
    *v2 &= ~0x20uLL;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v4 == 0;
  v3(v6, 0);
  return swift_release();
}

void *key path getter for CanvasElement.flags : <A>A@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void))(*(void *)(a2 + a1 - 8) + 64))(&v5, *(void *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t key path setter for CanvasElement.flags : <A>A(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 24);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 72))(&v7, v4);
}

id specialized CanvasElementController.toolPickerControllerWindowScene(_:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  id v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);
  swift_unknownObjectRelease();
  if (v4)
  {
    id v5 = objc_msgSend(v4, sel_window);

    id v4 = objc_msgSend(v5, sel_windowScene);
  }
  return v4;
}

void specialized CanvasElementController.toolPickerControllerConfigureToolPicker(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v2))
  {
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    id v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
    swift_unknownObjectRelease();
    if (v5)
    {
      id v9 = objc_msgSend(v5, sel_window);

      if (v9)
      {
        uint64_t v6 = (objc_class *)objc_msgSend(self, sel__existingToolPickerForWindow_, v9);
        if (v6)
        {
          v7.super.Class isa = v6;
          [(objc_class *)v6 addObserver:v1];
          CanvasElementController.configureToolPicker(_:)(v7);

          Class isa = v7.super.isa;
        }
        else
        {
          Class isa = (Class)v9;
        }
      }
    }
  }
}

void specialized CanvasElementController.toolPickerController(_:willShowToolPicker:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType();
    PKToolPicker v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(ObjectType, v5);
    swift_unknownObjectRelease();
    if (v7)
    {
      if (objc_msgSend(v7, sel__isEnabled)) {
        goto LABEL_7;
      }
    }
  }
  id v8 = CanvasElementController.activeToolPicker.getter();
  if (!v8) {
    return;
  }
  PKToolPicker v7 = v8;
LABEL_7:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPicker);
  id v9 = a1;
  char v10 = static NSObject.== infix(_:_:)();

  if (v10)
  {
    objc_msgSend(v9, sel_addObserver_, v2);
    if (MEMORY[0x210550400](v4))
    {
      uint64_t v11 = *(void *)(v4 + 8);
      uint64_t v12 = swift_getObjectType();
      id v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v12, v11);
      swift_unknownObjectRelease();
      if (v13)
      {
        type metadata accessor for PaperTextAttachmentView();
        uint64_t v14 = swift_dynamicCastClass();
        if (v14) {
          objc_msgSend(v9, sel_addObserver_, v14);
        }
      }
    }
    CanvasElementController.updateToolPickerContextualEditingView()();
    if (MEMORY[0x210550400](v4))
    {
      uint64_t v15 = *(void *)(v4 + 8);
      uint64_t v16 = swift_getObjectType();
      uint64_t v17 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
      swift_unknownObjectRelease();
      if (v17)
      {
        id v18 = *(void **)&v17[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
        id v19 = v18;

        if (v18)
        {
          objc_msgSend(v19, sel_layoutSubviews);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

void specialized CanvasElementController.toolPickerController(_:didShowToolPicker:)(void *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(ObjectType, v4);
    swift_unknownObjectRelease();
    if (v6)
    {
      if (objc_msgSend(v6, sel__isEnabled)) {
        goto LABEL_7;
      }
    }
  }
  id v7 = CanvasElementController.activeToolPicker.getter();
  if (!v7) {
    return;
  }
  uint64_t v6 = v7;
LABEL_7:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPicker);
  id v8 = a1;
  char v9 = static NSObject.== infix(_:_:)();

  if (v9)
  {
    if (MEMORY[0x210550400](v3))
    {
      uint64_t v10 = *(void *)(v3 + 8);
      uint64_t v11 = swift_getObjectType();
      uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v11, v10);
      swift_unknownObjectRelease();
      uint64_t v12 = v21;
      if (v21) {
        goto LABEL_12;
      }
    }
    if (MEMORY[0x210550400](v3))
    {
      uint64_t v13 = *(void *)(v3 + 8);
      uint64_t v14 = swift_getObjectType();
      __n128 v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v14, v13);
      swift_unknownObjectRelease();
      uint64_t v12 = v22;
      if (v22)
      {
LABEL_12:
        id v23 = v12;
        uint64_t v15 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v12) + 0x320))();
        if (v15)
        {
          uint64_t v16 = (void *)v15;
          type metadata accessor for TiledTextView();
          uint64_t v17 = swift_dynamicCastClass();
          if (v17)
          {
            id v18 = (void *)v17;
            id v19 = TiledTextView.imageWandTipController.getter();
            objc_msgSend(v18, sel_showImageWandTipWithController_toolPicker_, v19, v8);

            uint64_t v20 = v16;
            id v23 = v19;
          }
          else
          {
            uint64_t v20 = v23;
            id v23 = v16;
          }
        }
      }
    }
  }
}

uint64_t specialized CanvasElementController.toolPickerControllerViewController(_:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v1)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  uint64_t v5 = swift_unknownObjectRelease();
  if (!v4) {
    return 0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v4) + 0x620))(v5);

  return v6;
}

id specialized CanvasElementController.toolPickerControllerViewControllerForPresentingUI(_:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  id v2 = (id)MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    uint64_t v6 = swift_unknownObjectRelease();
    if (v5)
    {
      id v7 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x620);
      id v8 = (void *)((uint64_t (*)(uint64_t))v7)(v6);
      id v2 = objc_msgSend(v8, sel_presentedViewController);

      if (!v2) {
        id v2 = (id)v7();
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void specialized static CanvasElementController.makeCanvasFirstResponder(_:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_window);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(self, sel_activeToolPickerForWindow_, v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = a1;
      v9[4] = partial apply for closure #1 in static CanvasElementController.makeCanvasFirstResponder(_:);
      v9[5] = v6;
      v9[0] = MEMORY[0x263EF8330];
      v9[1] = 1107296256;
      v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      void v9[3] = &block_descriptor_56_0;
      id v7 = _Block_copy(v9);
      id v8 = a1;
      swift_release();
      objc_msgSend(v5, sel__performWithVisibilityUpdatesEnabled_block_, 0, v7);
      _Block_release(v7);

      return;
    }
  }
  objc_msgSend(a1, sel_becomeFirstResponder);
}

uint64_t specialized closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v10 = (unsigned char *)(a2 + 16);
  if (a1)
  {
    id v17 = a1;
    specialized static CanvasElementController.makeCanvasFirstResponder(_:)(v17);
    uint64_t v18 = AnyCanvas.acceptedDropLayouts.getter();
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      swift_beginAccess();
      uint64_t v20 = v18 + 40;
      do
      {
        char v21 = (*(uint64_t (**)(uint64_t, id, void, double, double, double, double, double))(*(void *)v20 + 16))(a3, v17, 0, a5, a6, a7, a8, a9);
        *uint64_t v10 = v21 & 1;
        if (v21) {
          break;
        }
        v20 += 16;
        --v19;
      }
      while (v19);
    }

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  return a4(*v10);
}

void specialized CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(char *a1, uint64_t a2, void *a3, void (*a4)(void), uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a2;
  *(void *)(v22 + 24) = a3;
  *(double *)(v22 + 32) = a7;
  *(double *)(v22 + 40) = a8;
  *(double *)(v22 + 48) = a9;
  *(double *)(v22 + 56) = a10;
  *(double *)(v22 + 64) = a11;
  *(void *)(v22 + 72) = a4;
  *(void *)(v22 + 80) = a5;
  *(void *)(v22 + 88) = a6;
  id v23 = &a1[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
  if (!MEMORY[0x210550400](&a1[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
  {
    swift_retain();
    id v58 = a3;
    swift_retain();
    goto LABEL_15;
  }
  uint64_t v64 = a4;
  id v65 = a1;
  uint64_t v24 = *((void *)v23 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 16);
  swift_retain();
  id v63 = a3;
  swift_retain();
  unint64_t v67 = (void *)v26(ObjectType, v24);
  swift_unknownObjectRelease();
  if (!v67)
  {
LABEL_15:
    swift_release();
    return;
  }
  uint64_t v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v67) + 0x320))();
  if (v27)
  {
    id v66 = v27;
    id v28 = objc_msgSend(v27, sel_scrollView);
    if (v28)
    {
      id v29 = v28;
      objc_msgSend(v67, sel_bounds);
      double y = v75.origin.y;
      double width = v75.size.width;
      double x = v75.origin.x;
      double Height = CGRectGetHeight(v75);
      if (one-time initialization token for defaultTextAttachmentHeight != -1) {
        swift_once();
      }
      if (Height <= *(double *)&static UIConstants.defaultTextAttachmentHeight) {
        double Height = *(double *)&static UIConstants.defaultTextAttachmentHeight;
      }
      type metadata accessor for PaperTextAttachmentView();
      double v61 = a11;
      if (swift_dynamicCastClass())
      {
        uint64_t v33 = v67;
        PaperTextAttachmentView.isAtEndOfDocument.getter();
        char v35 = v34;

        if (v35)
        {
          objc_msgSend(v66, sel_bounds);
          double Height = Height + CGRectGetHeight(v76);
        }
      }
      objc_msgSend(v67, sel_convertRect_toCoordinateSpace_, v66, x, y, width, Height);
      CGFloat v37 = v36;
      CGFloat v39 = v38;
      CGFloat v41 = v40;
      CGFloat v43 = v42;
      objc_msgSend(v66, sel_bounds);
      v79.origin.double x = v44;
      v79.origin.double y = v45;
      v79.size.double width = v46;
      v79.size.CGFloat height = v47;
      v77.origin.double x = v37;
      v77.origin.double y = v39;
      v77.size.double width = v41;
      v77.size.CGFloat height = v43;
      CGRect v78 = CGRectIntersection(v77, v79);
      if (CGRectGetHeight(v78) < *(double *)&static UIConstants.defaultTextAttachmentHeight)
      {
        uint64_t v48 = self;
        id v49 = (CGFloat *)swift_allocObject();
        *((void *)v49 + 2) = v29;
        v49[3] = v37;
        v49[4] = v39;
        void v49[5] = v41;
        v49[6] = v43;
        id v72 = partial apply for closure #1 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:);
        id v73 = v49;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v69 = 1107296256;
        objc_super v70 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        uint64_t v71 = &block_descriptor_46;
        uint64_t v50 = _Block_copy(&aBlock);
        id v51 = v29;
        swift_release();
        id v52 = (CGFloat *)swift_allocObject();
        *((void *)v52 + 2) = v67;
        *((void *)v52 + 3) = v51;
        *((void *)v52 + 4) = v66;
        *((void *)v52 + 5) = partial apply for closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:);
        *((void *)v52 + 6) = v22;
        *((void *)v52 + 7) = v65;
        id v72 = partial apply for closure #2 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:);
        id v73 = v52;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v69 = 1107296256;
        objc_super v70 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        uint64_t v71 = &block_descriptor_19_2;
        CGRect v53 = _Block_copy(&aBlock);
        unint64_t v54 = v67;
        id v55 = v51;
        id v56 = v66;
        swift_retain();
        id v57 = v65;
        swift_release();
        objc_msgSend(v48, sel_animateWithDuration_animations_completion_, v50, v53, 0.3);

        _Block_release(v53);
        _Block_release(v50);
        swift_release();
        return;
      }
      swift_retain();
      id v60 = v63;
      swift_retain();
      specialized getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(v67, (void (*)(char *, uint64_t))v29, v66, v65, a2, v60, v64, a5, a7, a8, a9, a10, v61, a6);
      swift_release();
    }
    else
    {
      swift_release();
    }
    uint64_t v59 = v66;
  }
  else
  {
    swift_release();
    uint64_t v59 = v67;
  }
}

uint64_t sub_20C5C7954()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t block_copy_helper_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_46()
{
  return swift_release();
}

void partial apply for closure #1 in getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)()
{
  closure #1 in getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24));
}

id partial apply for closure #1 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_scrollRectToVisible_animated_, 0, *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t objectdestroy_15Tm()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #2 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)()
{
  return getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(uint64_t (**)(void *))(v0 + 40), *(void *)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t objectdestroy_9Tm_1()
{
  swift_release();

  swift_release();
  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t partial apply for closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:)(void *a1)
{
  return specialized closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(void))(v1 + 72), *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64));
}

uint64_t sub_20C5C7AB0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #1 in static CanvasElementController.makeCanvasFirstResponder(_:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_becomeFirstResponder);
}

uint64_t sub_20C5C7AF8()
{
  uint64_t v1 = type metadata accessor for Capsule();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v6, v5);
}

void partial apply for closure #1 in CanvasElementController.addCanvasElement<A>(_:)(void *a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = *(void *)(type metadata accessor for Capsule() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)((char *)v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in CanvasElementController.addCanvasElement<A>(_:)(a1, (uint64_t)v1 + v7, v8, v3, v4, v5);
}

char *partial apply for closure #1 in CanvasElementController.configureToolPicker(_:)(void *a1)
{
  return closure #1 in CanvasElementController.configureToolPicker(_:)(a1);
}

uint64_t sub_20C5C7C6C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in ToolPickerController.makeSignaturesViewController(rootViewController:)(void *a1)
{
  closure #1 in ToolPickerController.makeSignaturesViewController(rootViewController:)(a1, v1);
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #3 in CanvasElementController.changeSelectedStrokeWidth(_:)()
{
  return updateElements #1 (elements:) in CanvasElementController.changeSelectedStrokeWidth(_:)(*(void *)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t partial apply for closure #1 in SignatureView.width.setter()
{
  return closure #1 in SignatureView.width.setter();
}

uint64_t sub_20C5C7D28()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C5C7D60()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t outlined destroy of Signature(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in ShapeView.shapeStrokeWidth.setter()
{
  return closure #1 in ShapeView.shapeStrokeWidth.setter();
}

void *sub_20C5C7DEC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void))(*(void *)(a2 + a1 - 8) + 64))(&v5, *(void *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t sub_20C5C7E48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 24);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 72))(&v7, v4);
}

uint64_t sub_20C5C7EA0()
{
  return 24;
}

__n128 sub_20C5C7EAC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C5C7EC8()
{
  return 24;
}

__n128 sub_20C5C7ED4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void specialized CanvasElementController._toolPicker(_:didChange:)(void *a1)
{
  if (a1)
  {
    uint64_t v2 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x210550400](v2))
    {
      uint64_t v3 = *(void *)(v2 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
      id v6 = a1;
      uint64_t v7 = (void *)v5(ObjectType, v3);
      uint64_t v8 = swift_unknownObjectRelease();
      if (v7)
      {
        char v9 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x320);
        uint64_t v10 = (void *)((uint64_t (*)(uint64_t))v9)(v8);
        if (v10)
        {
          uint64_t v11 = v10;
          id v12 = objc_msgSend(v10, sel_selectionInteraction);

          LOBYTE(v11) = objc_msgSend(v12, sel_currentSelectionHasStrokes);
          if (v11)
          {
            uint64_t v13 = (void *)v9();
            objc_msgSend(v13, sel_setSelectedStrokesColor_, v6);
          }
        }
      }
    }
    else
    {
      id v14 = a1;
    }
    CanvasElementController.updateToolPickerContextualEditingView()();
  }
}

uint64_t specialized CanvasElementController._toolPickerCurrentSelectionColor(_:)()
{
  uint64_t v1 = v0;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  CGFloat v41 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v4 = MEMORY[0x263F8EE78];
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    uint64_t v5 = MEMORY[0x263F8EE88];
  }
  uint64_t v47 = v5;
  CanvasElementController.selectedTextBoxColors()();
  if (v6) {
    specialized Set.formUnion<A>(_:)(v6);
  }
  uint64_t v7 = CanvasElementController.selectedSignatureColors()();
  if (v7)
  {
    unint64_t v8 = v7;
    if ((v7 & 0xC000000000000001) != 0)
    {
      if (__CocoaSet.count.getter())
      {
LABEL_8:
        specialized Set.formUnion<A>(_:)(v8);
        goto LABEL_11;
      }
    }
    else if (*(void *)(v7 + 16))
    {
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
LABEL_11:
  uint64_t v9 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    || (uint64_t v10 = *(void *)(v9 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        id v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10),
        uint64_t result = swift_unknownObjectRelease(),
        !v12))
  {
LABEL_53:
    uint64_t v37 = v47;
    if ((v47 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v38 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      if (v38 == 1)
      {
LABEL_55:
        uint64_t v39 = specialized Collection.first.getter(v37);
LABEL_58:
        swift_bridgeObjectRelease();
        return v39;
      }
    }
    else if (*(void *)(v47 + 16) == 1)
    {
      goto LABEL_55;
    }
    uint64_t v39 = 0;
    goto LABEL_58;
  }
  id v14 = *(void **)&v12[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = swift_bridgeObjectRetain();
    unint64_t v17 = specialized Sequence.compactMap<A>(_:)(v16, (uint64_t)v15);

    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v45 = v4;
    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v19 = (void *)MEMORY[0x263F8EED0];
    if (v18)
    {
      if (v18 < 1)
      {
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      for (uint64_t i = 0; i != v18; ++i)
      {
        if ((v17 & 0xC000000000000001) != 0) {
          char v21 = (void *)MEMORY[0x21054E050](i, v17);
        }
        else {
          char v21 = *(id *)(v17 + 8 * i + 32);
        }
        uint64_t v22 = v21;
        id v23 = (void *)(*(uint64_t (**)(void))((*v19 & *v21) + 0x2D0))();

        if (v23)
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v24 = v45;
      unint64_t v46 = v4;
      if ((v45 & 0x8000000000000000) != 0) {
        goto LABEL_47;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v24 = MEMORY[0x263F8EE78];
      unint64_t v46 = v4;
      if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
        goto LABEL_47;
      }
    }
    if ((v24 & 0x4000000000000000) == 0)
    {
      uint64_t v25 = *(void *)(v24 + 16);
      uint64_t result = swift_retain();
      if (!v25)
      {
LABEL_48:
        swift_release();
        unint64_t v36 = MEMORY[0x263F8EE78];
        goto LABEL_49;
      }
      goto LABEL_31;
    }
LABEL_47:
    swift_retain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v25 = result;
    if (!result) {
      goto LABEL_48;
    }
LABEL_31:
    if (v25 >= 1)
    {
      uint64_t v26 = 0;
      unint64_t v43 = v24 & 0xC000000000000001;
      uint64_t v27 = (void (**)(char *, char *, uint64_t))(v2 + 16);
      id v28 = (void (**)(char *, uint64_t))(v2 + 8);
      id v30 = v41;
      uint64_t v29 = v42;
      do
      {
        if (v43) {
          id v31 = (id)MEMORY[0x21054E050](v26, v24);
        }
        else {
          id v31 = *(id *)(v24 + 8 * v26 + 32);
        }
        uint64_t v32 = v31;
        type metadata accessor for ShapeView();
        uint64_t v33 = (void *)swift_dynamicCastClass();
        if (!v33) {
          goto LABEL_33;
        }
        char v34 = (char *)v33 + *(void *)((*MEMORY[0x263F8EED0] & *v33) + 0x380);
        swift_beginAccess();
        (*v27)(v30, v34, v29);
        swift_getKeyPath();
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
        Capsule<>.subscript.getter();
        swift_release();
        (*v28)(v30, v29);
        char v35 = v44;
        if (v44)
        {
          objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v44);

          MEMORY[0x21054D330]();
          if (*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
LABEL_33:
        }
        ++v26;
      }
      while (v25 != v26);
      swift_release();
      unint64_t v36 = v46;
LABEL_49:
      swift_release();
      if (v36 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v40) {
          goto LABEL_52;
        }
      }
      else if (!*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_52:
        swift_bridgeObjectRelease();
        goto LABEL_53;
      }
      specialized Set.formUnion<A>(_:)(v36);
      goto LABEL_52;
    }
    goto LABEL_62;
  }
LABEL_63:
  __break(1u);
  return result;
}

void specialized CanvasElementController._toolPickerDidInvokeAddTextBox(_:)()
{
  uint64_t v1 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController);
  if (v1)
  {
    uint64_t v2 = &v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate];
    if (MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate]))
    {
      uint64_t v3 = *((void *)v2 + 1);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 64);
      unint64_t v6 = v1;
      v5(10, ObjectType, v3);

      swift_unknownObjectRelease();
    }
  }
}

uint64_t specialized CanvasElementController._toolPickerDidInvokeInsertSticker(_:from:)(uint64_t result)
{
  uint64_t v2 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController);
  if (v2)
  {
    uint64_t v3 = result;
    unint64_t v4 = &v2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate];
    uint64_t result = MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate]);
    if (result)
    {
      uint64_t v5 = *((void *)v4 + 1);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v7 = *(void (**)(uint64_t, double (*)(void, void), void, uint64_t, uint64_t))(v5 + 80);
      unint64_t v8 = v2;
      v7(v3, UnknownCanvasElementView.flags.modify, 0, ObjectType, v5);

      return swift_unknownObjectRelease();
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIColor and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UIColor and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UIColor and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in ShapeView.lineEnds.setter()
{
  return closure #1 in ShapeView.lineEnds.setter();
}

uint64_t partial apply for closure #1 in ShapeView.shapeOpacity.setter()
{
  return closure #1 in ShapeView.shapeOpacity.setter();
}

uint64_t CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(v4 + 89) = a3;
  *(unsigned char *)(v4 + 88) = a2;
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = v3;
  return MEMORY[0x270FA2498](CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:), 0, 0);
}

uint64_t CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)()
{
  if (one-time initialization token for imageCache != -1) {
    swift_once();
  }
  uint64_t v1 = static CRAsset.imageCache;
  swift_retain();
  uint64_t v2 = CRAsset.digest.getter();
  uint64_t v4 = v3;
  uint64_t v5 = (objc_class *)type metadata accessor for AssetInfo();
  unint64_t v6 = (char *)objc_allocWithZone(v5);
  uint64_t v7 = (uint64_t *)&v6[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest];
  *uint64_t v7 = v2;
  v7[1] = v4;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit9AssetInfo_maxDimensionInPixels] = 0;
  *(void *)(v0 + 16) = v6;
  *(void *)(v0 + 24) = v5;
  id v8 = objc_msgSendSuper2((objc_super *)(v0 + 16), sel_init);
  id v9 = objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, v8);
  type metadata accessor for CGImageRef(0);
  uint64_t v10 = (CGImage *)swift_dynamicCastUnknownClass();

  swift_release();
  if (v10)
  {
    int64_t v11 = *(void *)(v0 + 56);
    int64_t Width = CGImageGetWidth(v10);
    int64_t Height = CGImageGetHeight(v10);
    if (Height <= Width) {
      int64_t v14 = Width;
    }
    else {
      int64_t v14 = Height;
    }
    if (v14 <= v11) {
      goto LABEL_11;
    }
  }
  else
  {
    swift_unknownObjectRelease();
  }
  uint64_t v15 = *(void *)(v0 + 56);
  uint64_t v16 = static CRAsset.imageCache;
  swift_retain();
  uint64_t v17 = CRAsset.digest.getter();
  uint64_t v19 = v18;
  uint64_t v20 = (char *)objc_allocWithZone(v5);
  char v21 = (uint64_t *)&v20[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest];
  uint64_t *v21 = v17;
  v21[1] = v19;
  *(void *)&v20[OBJC_IVAR____TtC8PaperKit9AssetInfo_maxDimensionInPixels] = v15;
  *(void *)(v0 + 32) = v20;
  *(void *)(v0 + 40) = v5;
  id v22 = objc_msgSendSuper2((objc_super *)(v0 + 32), sel_init);
  id v23 = objc_msgSend(*(id *)(v16 + 16), sel_objectForKey_, v22);
  uint64_t v10 = (CGImage *)swift_dynamicCastUnknownClass();

  swift_release();
  if (v10)
  {
LABEL_11:
    unint64_t v24 = *(uint64_t (**)(CGImage *))(v0 + 8);
    return v24(v10);
  }
  uint64_t v26 = *(unsigned __int8 *)(v0 + 89);
  uint64_t v28 = *(void *)(v0 + 56);
  uint64_t v27 = *(void *)(v0 + 64);
  swift_unknownObjectRelease();
  uint64_t v29 = swift_task_alloc();
  *(void *)(v0 + 72) = v29;
  *(void *)(v29 + 16) = v27;
  *(void *)(v29 + 24) = v28;
  *(unsigned char *)(v29 + 32) = v26;
  id v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGImageRef?);
  *id v30 = v0;
  v30[1] = CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:);
  uint64_t v32 = *(unsigned __int8 *)(v0 + 88);
  return MEMORY[0x270F17D68](v0 + 48, v32, &async function pointer to partial apply for closure #1 in CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:), v29, v31);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:), 0, 0);
}

{
  uint64_t v0;

  if (*(void *)(v0 + 48) == 1) {
    return (*(uint64_t (**)(void))(v0 + 8))(0);
  }
  else {
    return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 48));
  }
}

uint64_t CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(v4 + 137) = a3;
  *(unsigned char *)(v4 + 136) = a2;
  *(void *)(v4 + 64) = a1;
  *(void *)(v4 + 72) = v3;
  uint64_t v5 = type metadata accessor for CRAsset();
  *(void *)(v4 + 80) = v5;
  *(void *)(v4 + 88) = *(void *)(v5 - 8);
  *(void *)(v4 + 96) = swift_task_alloc();
  *(void *)(v4 + 104) = type metadata accessor for CRAssetOrData();
  *(void *)(v4 + 112) = swift_task_alloc();
  return MEMORY[0x270FA2498](CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:), 0, 0);
}

uint64_t CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)()
{
  outlined init with copy of CRAssetOrData(*(void *)(v0 + 72), *(void *)(v0 + 112));
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v1 = *(uint64_t **)(v0 + 112);
    char v2 = *(unsigned char *)(v0 + 137);
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v4 = *v1;
    unint64_t v5 = v1[1];
    uint64_t v7 = v1[2];
    unint64_t v6 = v1[3];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C832C20;
    id v9 = (void *)*MEMORY[0x263F0F600];
    *(void *)(inited + 32) = *MEMORY[0x263F0F600];
    *(unsigned char *)(inited + 40) = 0;
    id v10 = v9;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CFDataRef v12 = Data._bridgeToObjectiveC()().super.isa;
    CGImageSourceRef v13 = CGImageSourceCreateWithData(v12, isa);

    outlined copy of Data._Representation(v4, v5);
    CGImageRef v14 = specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(v13, v4, v5, v3, v2);
    outlined consume of Data._Representation(v4, v5);

    outlined consume of Data._Representation(v4, v5);
    outlined consume of Data._Representation(v7, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(CGImageRef))(v0 + 8);
    return v15(v14);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 88) + 32))(*(void *)(v0 + 96), *(void *)(v0 + 112), *(void *)(v0 + 80));
    uint64_t v17 = swift_task_alloc();
    *(void *)(v0 + 120) = v17;
    *(void *)uint64_t v17 = v0;
    *(void *)(v17 + 8) = CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v19 = *(void *)(v0 + 64);
    *(_WORD *)(v17 + 88) = *(_WORD *)(v0 + 136);
    *(void *)(v17 + 56) = v19;
    *(void *)(v17 + 64) = v18;
    return MEMORY[0x270FA2498](CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:), 0, 0);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  uint64_t v1 = v0[16];
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:), 0, 0);
}

BOOL AssetInfo.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v10);
  if (v11)
  {
    type metadata accessor for AssetInfo();
    if (swift_dynamicCast())
    {
      if (v9 == v1)
      {

        return 1;
      }
      uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest];
      unint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest + 8];
      uint64_t v4 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest];
      unint64_t v5 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest + 8];
      outlined copy of Data._Representation(v4, v5);
      LOBYTE(v2) = specialized static Data.== infix(_:_:)(v2, v3, v4, v5);
      outlined consume of Data._Representation(v4, v5);
      if (v2)
      {
        uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit9AssetInfo_maxDimensionInPixels];
        uint64_t v7 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit9AssetInfo_maxDimensionInPixels];

        return v6 == v7;
      }
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

id AssetInfo.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AssetInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AssetInfo()
{
  return self;
}

uint64_t type metadata accessor for AssetCache()
{
  return self;
}

id one-time initialization function for imageCache()
{
  type metadata accessor for AssetCache();
  uint64_t v0 = swift_allocObject();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF8E0]), sel_init);
  *(void *)(v0 + 16) = result;
  static CRAsset.imageCache = v0;
  return result;
}

uint64_t closure #1 in CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 176) = a5;
  *(void *)(v5 + 160) = a3;
  *(void *)(v5 + 168) = a4;
  *(void *)(v5 + 144) = a1;
  *(void *)(v5 + 152) = a2;
  return MEMORY[0x270FA2498](closure #1 in CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:), 0, 0);
}

uint64_t closure #1 in CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  objc_super v2 = (void *)*MEMORY[0x263F0F600];
  *(void *)(inited + 32) = *MEMORY[0x263F0F600];
  *(unsigned char *)(inited + 40) = 0;
  id v3 = v2;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  v4.super.CFDataRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v5 = *(void **)(v0 + 144);

    *uint64_t v5 = 0;
  }
  else
  {
    CRAsset.assetManager.getter();
    CRAssetManager.encryptionDelegate.getter();
    swift_release();
    if (*(void *)(v0 + 128))
    {
      outlined init with take of FindResult((long long *)(v0 + 104), v0 + 64);
      uint64_t v17 = Data.init(contentsOf:options:)();
      unint64_t v19 = v18;
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 64), *(void *)(v0 + 88));
      uint64_t v22 = dispatch thunk of EncryptionDelegate.decrypt(_:)();
      unint64_t v24 = v23;
      char v31 = *(unsigned char *)(v0 + 176);
      uint64_t v30 = *(void *)(v0 + 168);
      uint64_t v33 = *(CGImageRef **)(v0 + 144);
      CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
      CGImageSourceRef v26 = CGImageSourceCreateWithData(isa, v4.super.isa);

      uint64_t v27 = CRAsset.digest.getter();
      unint64_t v29 = v28;
      CGImageRef v32 = specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(v26, v27, v28, v30, v31);

      outlined consume of Data._Representation(v17, v19);
      outlined consume of Data._Representation(v22, v24);

      outlined consume of Data._Representation(v27, v29);
      *uint64_t v33 = v32;
      __swift_destroy_boxed_opaque_existential_1(v0 + 64);
    }
    else
    {
      char v6 = *(unsigned char *)(v0 + 176);
      uint64_t v7 = *(void *)(v0 + 168);
      id v8 = *(CGImageRef **)(v0 + 144);
      outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 104, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
      URL._bridgeToObjectiveC()(v9);
      CFURLRef v11 = v10;
      CGImageSourceRef v12 = CGImageSourceCreateWithURL(v10, v4.super.isa);

      uint64_t v13 = CRAsset.digest.getter();
      unint64_t v15 = v14;
      CGImageRef v16 = specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(v12, v13, v14, v7, v6);

      outlined consume of Data._Representation(v13, v15);
      *id v8 = v16;
    }
  }
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

CGImageRef specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if (!a1) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C8387B0;
  id v9 = (void *)*MEMORY[0x263F0F5A8];
  uint64_t v10 = MEMORY[0x263F8D4F8];
  *(void *)(inited + 32) = *MEMORY[0x263F0F5A8];
  *(unsigned char *)(inited + 40) = 1;
  CFURLRef v11 = (void *)*MEMORY[0x263F0F600];
  *(void *)(inited + 64) = v10;
  *(void *)(inited + 72) = v11;
  *(unsigned char *)(inited + 80) = 1;
  CGImageSourceRef v12 = (void *)*MEMORY[0x263F0F608];
  *(void *)(inited + 104) = v10;
  *(void *)(inited + 112) = v12;
  *(unsigned char *)(inited + 120) = 1;
  uint64_t v13 = (void *)*MEMORY[0x263F0F5B8];
  *(void *)(inited + 144) = v10;
  *(void *)(inited + 152) = v13;
  *(unsigned char *)(inited + 160) = 1;
  unint64_t v14 = (void *)*MEMORY[0x263F0F638];
  *(void *)(inited + 184) = v10;
  *(void *)(inited + 192) = v14;
  *(void *)(inited + 224) = MEMORY[0x263F8D6C8];
  *(void *)(inited + 200) = a4;
  unint64_t v15 = a1;
  id v16 = v9;
  id v17 = v11;
  id v18 = v12;
  id v19 = v13;
  id v20 = v14;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v68 = &type metadata for MobileQuickLookFeatureFlags;
  unint64_t v69 = lazy protocol witness table accessor for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags();
  LOBYTE(v67) = 1;
  char v21 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
  if (v21 & 1) != 0 && (a5)
  {
    uint64_t v22 = (void *)*MEMORY[0x263F0F5C0];
    unint64_t v23 = (void *)*MEMORY[0x263F0F5D0];
    type metadata accessor for CFStringRef(0);
    uint64_t v68 = v24;
    *(void *)&long long v67 = v23;
    outlined init with take of Any(&v67, v65);
    id v25 = v22;
    id v26 = v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v65, v25, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
    unint64_t v28 = (void *)*MEMORY[0x263F0F5C8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
    uint64_t v29 = swift_initStackObject();
    *(_OWORD *)(v29 + 16) = xmmword_20C832C20;
    uint64_t v30 = (void *)*MEMORY[0x263F0EF80];
    *(void *)(v29 + 32) = *MEMORY[0x263F0EF80];
    *(unsigned char *)(v29 + 40) = 1;
    id v31 = v28;
    id v32 = v30;
    unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(v29);
    uint64_t v68 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CFStringRef : Bool]);
    *(void *)&long long v67 = v33;
    outlined init with take of Any(&v67, v65);
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v65, v31, v34);

    swift_bridgeObjectRelease();
  }
  CFDictionaryRef v35 = CGImageSourceCopyPropertiesAtIndex(v15, 0, 0);
  if (!v35) {
    goto LABEL_27;
  }
  CFDictionaryRef v36 = v35;
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject, (void (*)(uint64_t))type metadata accessor for NSObject);
  uint64_t v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v38 = (void *)*MEMORY[0x263F0F4F8];
  if ((v37 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v39 = v38;
    uint64_t v40 = __CocoaDictionary.lookup(_:)();

    swift_bridgeObjectRelease();
    if (!v40) {
      goto LABEL_26;
    }
  }
  else
  {
    if (!*(void *)(v37 + 16)) {
      goto LABEL_26;
    }
    swift_bridgeObjectRetain();
    id v42 = v38;
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v42);
    if ((v44 & 1) == 0)
    {

      swift_bridgeObjectRelease_n();
LABEL_27:
      id v52 = 0;
      goto LABEL_28;
    }
    uint64_t v40 = *(void *)(*(void *)(v37 + 56) + 8 * v43);
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
  }
  *(void *)&long long v67 = v40;
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_26;
  }
  id receiver = v65[0].receiver;
  unint64_t v46 = (void *)*MEMORY[0x263F0F4F0];
  if ((v37 & 0xC000000000000001) == 0)
  {
    if (*(void *)(v37 + 16))
    {
      id v49 = v46;
      unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v49);
      if (v51)
      {
        uint64_t v48 = *(void *)(*(void *)(v37 + 56) + 8 * v50);
        swift_unknownObjectRetain();

        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  id v47 = v46;
  uint64_t v48 = __CocoaDictionary.lookup(_:)();

  swift_bridgeObjectRelease();
  if (!v48) {
    goto LABEL_27;
  }
LABEL_21:
  *(void *)&long long v67 = v48;
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_27;
  }
  if ((uint64_t)v65[0].receiver <= (uint64_t)receiver) {
    id v52 = receiver;
  }
  else {
    id v52 = v65[0].receiver;
  }
LABEL_28:
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ThumbnailAtIndedouble x = CGImageSourceCreateThumbnailAtIndex(v15, 0, isa);

  if (ThumbnailAtIndex && a3 >> 60 != 15)
  {
    unint64_t v54 = ThumbnailAtIndex;
    outlined copy of Data?(a2, a3);
    if (one-time initialization token for imageCache != -1) {
      swift_once();
    }
    uint64_t v55 = static CRAsset.imageCache;
    if ((uint64_t)v52 <= a4) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = a4;
    }
    id v57 = (objc_class *)type metadata accessor for AssetInfo();
    id v58 = (char *)objc_allocWithZone(v57);
    uint64_t v59 = (uint64_t *)&v58[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest];
    uint64_t *v59 = a2;
    v59[1] = a3;
    *(void *)&v58[OBJC_IVAR____TtC8PaperKit9AssetInfo_maxDimensionInPixels] = v56;
    id v60 = v54;
    outlined copy of Data?(a2, a3);
    v66.id receiver = v58;
    v66.super_class = v57;
    swift_retain();
    id v61 = objc_msgSendSuper2(&v66, sel_init);
    objc_msgSend(*(id *)(v55 + 16), sel_setObject_forKey_, v60, v61);

    outlined consume of Data?(a2, a3);
    swift_release();
  }
  else
  {
  }
  return ThumbnailAtIndex;
}

uint64_t partial apply for closure #1 in CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  char v8 = *(unsigned char *)(v2 + 32);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *(void *)uint64_t v9 = v3;
  *(void *)(v9 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(unsigned char *)(v9 + 176) = v8;
  *(void *)(v9 + 160) = v6;
  *(void *)(v9 + 168) = v7;
  *(void *)(v9 + 144) = a1;
  *(void *)(v9 + 152) = a2;
  return MEMORY[0x270FA2498](closure #1 in CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:), 0, 0);
}

uint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void ResizeView.init(frame:canvas:resizeHandles:)(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7 = v6;
  swift_unknownObjectWeakInit();
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_controlHandles] = MEMORY[0x263F8EE78];
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
  unint64_t v14 = &v7[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace];
  *unint64_t v14 = 0x3FF0000000000000;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = 0x3FF0000000000000;
  v14[4] = 0;
  v14[5] = 0;
  unint64_t v15 = &v7[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled];
  void *v15 = 0x3FF0000000000000;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = 0x3FF0000000000000;
  v15[4] = 0;
  v15[5] = 0;
  id v16 = &v7[OBJC_IVAR____TtC8PaperKit10ResizeView_originalControlPointLocation];
  void *v16 = 0;
  v16[1] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer] = 0;
  id v17 = &v7[OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform];
  *(_OWORD *)id v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  v17[48] = 1;
  v7[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
  v7[OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis] = 0;
  id v18 = &v7[OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeDelta];
  void *v18 = 0;
  v18[1] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer] = 0;
  id v65 = a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    id v19 = v7;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_20C832BD0;
    char v21 = (objc_class *)type metadata accessor for CanvasElementResizeHandle();
    id v22 = objc_allocWithZone(v21);
    unint64_t v23 = v7;
    *(void *)(v20 + 32) = CanvasElementResizeHandle.init(_:category:enabled:)(0, 0, 1);
    id v24 = objc_allocWithZone(v21);
    *(void *)(v20 + 40) = CanvasElementResizeHandle.init(_:category:enabled:)(1, 0, 1);
    id v25 = objc_allocWithZone(v21);
    *(void *)(v20 + 48) = CanvasElementResizeHandle.init(_:category:enabled:)(2, 0, 1);
    id v26 = objc_allocWithZone(v21);
    *(void *)(v20 + 56) = CanvasElementResizeHandle.init(_:category:enabled:)(3, 0, 1);
    id v27 = objc_allocWithZone(v21);
    *(void *)(v20 + 64) = CanvasElementResizeHandle.init(_:category:enabled:)(4, 0, 1);
    id v28 = objc_allocWithZone(v21);
    *(void *)(v20 + 72) = CanvasElementResizeHandle.init(_:category:enabled:)(5, 0, 1);
    id v29 = objc_allocWithZone(v21);
    *(void *)(v20 + 80) = CanvasElementResizeHandle.init(_:category:enabled:)(6, 0, 1);
    id v30 = objc_allocWithZone(v21);
    *(void *)(v20 + 88) = CanvasElementResizeHandle.init(_:category:enabled:)(7, 0, 1);
    uint64_t v68 = v20;
    specialized Array._endMutation()();
    a2 = v20;
  }
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles] = a2;
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, a3, a4, a5, a6);
  uint64_t v32 = OBJC_IVAR____TtC8PaperKit10ResizeView_borderView;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView] = v31;
  uint64_t v33 = one-time initialization token for paperKitBundle;
  id v34 = v31;
  if (v33 != -1) {
    swift_once();
  }
  v69._object = (void *)0x800000020C85ACF0;
  v35._uint64_t countAndFlagsBits = 0x4220657A69736552;
  v35._object = (void *)0xED0000726564726FLL;
  v36.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._uint64_t countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v69._uint64_t countAndFlagsBits = 0xD000000000000028;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v69)._countAndFlagsBits;
  id v39 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v34, sel_setAccessibilityLabel_, v39);

  id v40 = *(id *)&v7[v32];
  CGFloat v41 = (void *)MEMORY[0x21054D080](0x4220657A69736552, 0xED0000726564726FLL);
  objc_msgSend(v40, sel_setAccessibilityIdentifier_, v41);

  v67.id receiver = v7;
  v67.super_class = (Class)type metadata accessor for ResizeView();
  id v42 = (char *)objc_msgSendSuper2(&v67, sel_initWithFrame_, a3, a4, a5, a6);
  uint64_t v43 = OBJC_IVAR____TtC8PaperKit10ResizeView_borderView;
  char v44 = *(void **)&v42[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView];
  unint64_t v45 = v42;
  id v46 = objc_msgSend(v44, sel_layer);
  objc_msgSend(v46, sel_setBorderWidth_, 1.0);

  id v47 = objc_msgSend(*(id *)&v42[v43], sel_layer);
  id v48 = objc_msgSend(self, sel_systemBlueColor);
  id v49 = objc_msgSend(v48, sel_CGColor);

  objc_msgSend(v47, sel_setBorderColor_, v49);
  objc_msgSend(v45, sel_addSubview_, *(void *)&v42[v43]);
  unint64_t v50 = *(void *)&v45[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles];
  if (v50 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    if (!v51) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v51) {
      goto LABEL_15;
    }
  }
  if (v51 < 1)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v52 = 0;
  do
  {
    if ((v50 & 0xC000000000000001) != 0) {
      CGRect v53 = (char *)MEMORY[0x21054E050](v52, v50);
    }
    else {
      CGRect v53 = (char *)*(id *)(v50 + 8 * v52 + 32);
    }
    unint64_t v54 = v53;
    ++v52;
    objc_msgSend(*(id *)&v53[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer], sel_addTarget_action_, v45, sel_resizeHandleMoved_);
    objc_msgSend(v45, sel_addSubview_, v54);
  }
  while (v51 != v52);
LABEL_15:
  swift_bridgeObjectRelease();
  id v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82B28]), sel_initWithTarget_action_, v45, sel_rotate_);
  uint64_t v56 = OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer;
  id v57 = *(void **)&v45[OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer];
  *(void *)&v45[OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer] = v55;

  if (!*(void *)&v45[v56])
  {
LABEL_20:
    __break(1u);
    return;
  }
  objc_msgSend(v45, sel_addGestureRecognizer_);
  id v58 = *(void **)&v45[v56];
  if (v58) {
    objc_msgSend(v58, sel_setDelegate_, v45);
  }
  uint64_t v59 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
  id v60 = objc_allocWithZone(v59);
  *(void *)&v60[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
  v60[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakInit();
  *(void *)&v60[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
  *(void *)&v60[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
  v66.id receiver = v60;
  v66.super_class = v59;
  id v61 = objc_msgSendSuper2(&v66, sel_initWithTarget_action_, 0, 0);
  uint64_t v62 = OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise;
  swift_unknownObjectWeakAssign();
  v61[v62] = 0;
  objc_msgSend(v61, sel_addTarget_action_, v45, sel_dragMoved_);
  objc_msgSend(v61, sel_setDelegate_, v45);
  id v63 = v45;
  objc_msgSend(v63, sel_addGestureRecognizer_, v61);

  uint64_t v64 = *(void **)&v63[OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer];
  *(void *)&v63[OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer] = v61;
}

void __swiftcall ResizeView.hitTestChrome(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  NSDictionary v4 = v3;
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  char v8 = &selRef_magicPaperViewControllerImageGenerationEvent_;
  if (objc_msgSend(v3, sel_isHidden)) {
    return;
  }
  unint64_t v9 = *(void *)&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles];
  uint64_t v10 = (unint64_t *)&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_controlHandles];
  swift_beginAccess();
  unint64_t v11 = *v10;
  if (*v10 >> 62)
  {
    type metadata accessor for CanvasElementResizeHandle();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for CanvasElementResizeHandle();
    unint64_t v12 = v11;
  }
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)(v12);
  unint64_t v13 = v9;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_6;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v14 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_6:
  if (v14 >= 1)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = v13 & 0xC000000000000001;
    double v18 = 1.79769313e308;
    double v67 = x;
    double v68 = y;
    unint64_t v66 = v13 & 0xC000000000000001;
    while (1)
    {
      if (v17) {
        id v19 = (id)MEMORY[0x21054E050](v16, v13);
      }
      else {
        id v19 = *(id *)(v13 + 8 * v16 + 32);
      }
      uint64_t v20 = v19;
      if (([v19 v8[369]] & 1) != 0
        || (objc_msgSend(v20, sel_convertPoint_fromCoordinateSpace_, v4, x, y),
            *((unsigned char *)v20 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled) != 1))
      {
        double v28 = v18;
LABEL_45:

        goto LABEL_46;
      }
      double v23 = v21;
      double v24 = v22;
      uint64_t v65 = OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled;
      objc_msgSend(v20, sel_bounds);
      v69.double x = v23;
      v69.double y = v24;
      BOOL v25 = CGRectContainsPoint(v71, v69);
      if (isa)
      {
        id v26 = isa;
        if ([(objc_class *)v26 PK_isEventFromPencil])
        {

          BOOL v27 = 1;
        }
        else
        {
          uint64_t v64 = v15;
          unint64_t v29 = v13;
          uint64_t v30 = v14;
          id v31 = v8;
          uint64_t v32 = v4;
          uint64_t v33 = isa;
          id v34 = [(objc_class *)v26 buttonMask];

          BOOL v35 = v34 == 0;
          Class isa = v33;
          NSDictionary v4 = v32;
          char v8 = v31;
          uint64_t v14 = v30;
          unint64_t v13 = v29;
          unint64_t v15 = v64;
          BOOL v27 = !v35;
        }
      }
      else
      {
        BOOL v27 = 0;
      }
      objc_msgSend(v20, sel_bounds);
      CGFloat v36 = v72.origin.x;
      CGFloat v37 = v72.origin.y;
      CGFloat width = v72.size.width;
      CGFloat height = v72.size.height;
      double MidX = CGRectGetMidX(v72);
      v73.origin.double x = v36;
      v73.origin.double y = v37;
      v73.size.CGFloat width = width;
      v73.size.CGFloat height = height;
      double MidY = CGRectGetMidY(v73);
      double y = v68;
      if (!v25)
      {
        if (v27) {
          break;
        }
        if (one-time initialization token for resizeHandleFingerHitTestSize != -1) {
          swift_once();
        }
        double v43 = *(double *)&static UIConstants.resizeHandleFingerHitTestSize;
        objc_msgSend(v20, sel_bounds);
        double v44 = v43 - CGRectGetWidth(v74);
        double v45 = v44 > 0.0 ? v44 * 0.5 : 0.0;
        objc_msgSend(v20, sel_bounds);
        double v46 = v43 - CGRectGetHeight(v75);
        double v47 = v46 > 0.0 ? v46 * 0.5 : 0.0;
        objc_msgSend(v20, sel_bounds);
        CGRect v77 = CGRectInset(v76, -v45, -v47);
        v70.double x = v23;
        v70.double y = v24;
        double y = v68;
        if (!CGRectContainsPoint(v77, v70)) {
          break;
        }
      }
      double v28 = sqrt((MidX - v23) * (MidX - v23) + (MidY - v24) * (MidY - v24));
      if (v28 < v18)
      {
        id v42 = v20;
        uint64_t v20 = v15;
        unint64_t v15 = v42;
        goto LABEL_44;
      }
      double x = v67;
      unint64_t v17 = v66;
      if (v15)
      {
        if (*((unsigned char *)v20 + v65))
        {
          id v48 = v20;
          uint64_t v20 = v15;
          unint64_t v15 = v48;
          goto LABEL_45;
        }
        id v49 = v15;
        objc_msgSend(v20, sel_frame);
        CGFloat v51 = v50;
        CGFloat v53 = v52;
        CGFloat v55 = v54;
        CGFloat v57 = v56;
        if (one-time initialization token for resizeHandleObscureInset != -1) {
          swift_once();
        }
        CGFloat v58 = *(double *)&static UIConstants.resizeHandleObscureInset;
        v78.origin.double x = v51;
        v78.origin.double y = v53;
        v78.size.CGFloat width = v55;
        v78.size.CGFloat height = v57;
        CGRect v79 = CGRectInset(v78, *(CGFloat *)&static UIConstants.resizeHandleObscureInset, *(CGFloat *)&static UIConstants.resizeHandleObscureInset);
        CGFloat v59 = v79.origin.x;
        CGFloat v60 = v79.origin.y;
        CGFloat v61 = v79.size.width;
        CGFloat v62 = v79.size.height;
        objc_msgSend(v49, sel_frame);
        CGRect v82 = CGRectInset(v80, v58, v58);
        v81.origin.double x = v59;
        v81.origin.double y = v60;
        v81.size.CGFloat width = v61;
        v81.size.CGFloat height = v62;
        BOOL v63 = CGRectIntersectsRect(v81, v82);

        if (v63)
        {
          unint64_t v15 = v20;
          uint64_t v20 = v49;
        }
        else
        {
          double v28 = v18;
        }
LABEL_44:
        double x = v67;
        unint64_t v17 = v66;
        goto LABEL_45;
      }
      unint64_t v15 = v20;
LABEL_46:
      ++v16;
      double v18 = v28;
      if (v14 == v16) {
        goto LABEL_50;
      }
    }
    double v28 = v18;
    goto LABEL_44;
  }
  __break(1u);
}

Swift::Void __swiftcall ResizeView.beginTransform()()
{
  void *(*v4)(_OWORD *__return_ptr);
  void *v5;
  _OWORD *v6;
  long long v7;
  CGFloat v8;
  CGFloat v9;
  long long v10;
  long long v11;
  _OWORD *v12;
  long long v13;
  long long v14;
  CGAffineTransform v15;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _OWORD v18[3];
  _OWORD v19[2];
  double v20;
  double v21;
  CGAffineTransform v22;

  uint64_t v1 = v0;
  *((unsigned char *)v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) = 1;
  uint64_t v2 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    AnyCanvas.isResizingChanged()();
  }
  NSDictionary v4 = *(void *(**)(_OWORD *__return_ptr))((*MEMORY[0x263F8EED0] & *v1) + 0x218);
  uint64_t v5 = v4(v18);
  uint64_t v6 = (_OWORD *)((char *)v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace);
  uint64_t v7 = v18[1];
  unsigned char *v6 = v18[0];
  v6[1] = v7;
  _OWORD v6[2] = v18[2];
  ((void (*)(_OWORD *__return_ptr, void *))v4)(v19, v5);
  unint64_t v13 = v19[1];
  uint64_t v14 = v19[0];
  char v8 = v20;
  unint64_t v9 = v21;
  ResizeView.modelToViewTransform.getter((long long *)&v22);
  *(_OWORD *)&t1.double a = v14;
  *(_OWORD *)&t1.CGFloat c = v13;
  t1.tdouble x = v8;
  t1.tdouble y = v9;
  CGAffineTransform t2 = v22;
  CGAffineTransformConcat(&v15, &t1, &t2);
  uint64_t v10 = *(_OWORD *)&v15.c;
  unint64_t v11 = *(_OWORD *)&v15.tx;
  unint64_t v12 = (_OWORD *)((char *)v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled);
  *unint64_t v12 = *(_OWORD *)&v15.a;
  v12[1] = v10;
  v12[2] = v11;
}

Swift::Void __swiftcall ResizeView.updateTransform(with:)(CGAffineTransform *with)
{
  objc_msgSend(v1, sel_setNeedsLayout);
}

uint64_t ResizeView.handlePressesBegan(_:with:)(int a1, UIPressesEvent_optional a2)
{
  Class isa = a2.value.super.super.isa;
  Class v4 = a2.value.super.super.isa;
  if (ResizeView.updateGestureModifiersState(_:)(a2)) {
    return 1;
  }
  id v6 = objc_msgSend(v2, sel_window);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  if (isa)
  {
    id v8 = [(objc_class *)isa touchesForWindow:v6];
    if (v8)
    {
      unint64_t v9 = v8;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
      lazy protocol witness table accessor for type UITouch and conformance NSObject();
      uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v11 = (v10 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(void *)(v10 + 16);
      swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_16;
      }
    }
  }
  uint64_t v12 = swift_bridgeObjectRetain();
  unint64_t v13 = (void *)specialized Collection.first.getter(v12);
  swift_bridgeObjectRelease();
  if (!v13 || (id v14 = objc_msgSend(v13, sel_key), v13, !v14))
  {
LABEL_16:
    uint64_t v5 = 0;
  }
  else
  {
    id v15 = objc_msgSend(v14, sel_keyCode);

    switch((unint64_t)v15)
    {
      case 'O':
        if (isa) {
          BOOL v16 = ((unint64_t)[(objc_class *)isa modifierFlags] >> 17) & 1;
        }
        else {
          LOBYTE(v16) = 0;
        }
        double v17 = 1.0;
        double v18 = 0.0;
        break;
      case 'P':
        if (isa) {
          BOOL v16 = ((unint64_t)[(objc_class *)isa modifierFlags] >> 17) & 1;
        }
        else {
          LOBYTE(v16) = 0;
        }
        double v17 = -1.0;
        double v18 = 0.0;
        break;
      case 'Q':
        if (isa) {
          BOOL v16 = ((unint64_t)[(objc_class *)isa modifierFlags] >> 17) & 1;
        }
        else {
          LOBYTE(v16) = 0;
        }
        double v17 = 0.0;
        double v18 = 1.0;
        break;
      case 'R':
        if (isa) {
          BOOL v16 = ((unint64_t)[(objc_class *)isa modifierFlags] >> 17) & 1;
        }
        else {
          LOBYTE(v16) = 0;
        }
        double v17 = 0.0;
        double v18 = -1.0;
        break;
      default:
        goto LABEL_16;
    }
    ResizeView.startNudging(by:largerJump:)((CGPoint)__PAIR128__(*(unint64_t *)&v18, *(unint64_t *)&v17), v16);
    uint64_t v5 = 1;
  }

  return v5;
}

void ResizeView.canvasTransform.getter(long long *a1@<X8>)
{
  uint64_t v3 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v3)
  {
    Class v4 = v3;
    uint64_t v5 = (void *)MEMORY[0x263F8EED0];
    id v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x2F8))();
    (*(void (**)(_OWORD *__return_ptr))((*v5 & *v6) + 0x2A8))(v41);
    long long v34 = v41[1];
    long long v36 = v41[0];
    CGFloat v31 = v43;
    CGFloat v32 = v42;
    uint64_t v7 = *(double (**)(void))((*v5 & *v6) + 0x140);
    id v8 = v6;
    CGFloat v9 = v7();

    uint64_t v10 = *(double (**)(void))((*v5 & *v8) + 0x138);
    uint64_t v11 = v8;
    double v12 = v10();
    double v14 = v13;
    CGFloat v29 = v16;
    CGFloat v30 = v15;

    CGAffineTransformMakeRotation(&t1, v9);
    CGFloat a = t1.a;
    CGFloat b = t1.b;
    CGFloat c = t1.c;
    CGFloat d = t1.d;
    tdouble x = t1.tx;
    tdouble y = t1.ty;
    v44.origin.double x = v12;
    v44.origin.double y = v14;
    v44.size.CGFloat height = v29;
    v44.size.CGFloat width = v30;
    CGRect v45 = CGRectApplyAffineTransform(v44, &t1);
    CGAffineTransformMakeTranslation(&t1, v12 - v45.origin.x, v14 - v45.origin.y);
    long long v23 = *(_OWORD *)&t1.a;
    long long v24 = *(_OWORD *)&t1.c;
    long long v25 = *(_OWORD *)&t1.tx;
    t1.CGFloat a = a;
    t1.CGFloat b = b;
    t1.CGFloat c = c;
    t1.CGFloat d = d;
    t1.tdouble x = tx;
    t1.tdouble y = ty;
    *(_OWORD *)&t2.CGFloat a = v23;
    *(_OWORD *)&t2.CGFloat c = v24;
    *(_OWORD *)&t2.tdouble x = v25;
    CGAffineTransformConcat(&v38, &t1, &t2);
    *(_OWORD *)&t1.CGFloat a = v36;
    *(_OWORD *)&t1.CGFloat c = v34;
    t1.tdouble x = v32;
    t1.tdouble y = v31;
    CGAffineTransform t2 = v38;
    CGAffineTransformConcat(&v38, &t1, &t2);
    long long v35 = *(_OWORD *)&v38.c;
    long long v37 = *(_OWORD *)&v38.a;
    long long v33 = *(_OWORD *)&v38.tx;

    long long v27 = v33;
    long long v26 = v35;
    long long v28 = v37;
  }
  else
  {
    long long v26 = xmmword_20C8356C0;
    long long v28 = xmmword_20C835600;
    long long v27 = 0uLL;
  }
  *a1 = v28;
  a1[1] = v26;
  a1[2] = v27;
}

void ResizeView.modelToViewTransform.getter(long long *a1@<X8>)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  uint64_t v4 = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    ResizeView.canvasTransform.getter(&v48);
    long long v6 = v48;
    double v7 = v49;
    double v8 = v50;
    double v9 = v51;
    CGFloat v38 = v52;
    uint64_t v10 = (UIView *)objc_msgSend(v1, sel_superview);
    CGFloat v11 = 1.0;
    double v12 = (void *)MEMORY[0x263F8EED0];
    CGFloat v42 = v7;
    CGFloat v39 = v9;
    CGFloat v40 = v8;
    if (v10)
    {
      double v13 = v10;
      self;
      CGFloat b = 0.0;
      double a = 1.0;
      if (swift_dynamicCastObjCClass()
        && (double v16 = (void *)MEMORY[0x210550400](v3)) != 0
        && (double v17 = v16, v18 = (UIView *)(*(uint64_t (**)(void))((*v12 & *v16) + 0x308))(), v17, v18))
      {
        UIView.transformForConvertingFromView(_:)(&v53, v18);
        double a = v53.a;
        CGFloat b = v53.b;
        double d = v53.d;
        tdouble x = v53.tx;
        tdouble y = v53.ty;

        double v13 = v18;
      }
      else
      {
        double d = 1.0;
        tdouble x = 0.0;
        tdouble y = 0.0;
      }
    }
    else
    {
      CGFloat b = 0.0;
      double a = 1.0;
      double d = 1.0;
      tdouble x = 0.0;
      tdouble y = 0.0;
    }
    *(_OWORD *)&t1.double a = v6;
    t1.CGFloat c = v42;
    t1.double d = v40;
    t1.tdouble x = v39;
    t1.tdouble y = v38;
    t2.double a = a;
    t2.CGFloat b = b;
    t2.CGFloat c = *((CGFloat *)&v6 + 1);
    t2.double d = d;
    t2.tdouble x = tx;
    t2.tdouble y = ty;
    long long v25 = CGAffineTransformConcat(&v45, &t1, &t2);
    CGFloat v26 = v45.a;
    CGFloat v27 = v45.b;
    CGFloat c = v45.c;
    CGFloat v29 = v45.d;
    CGFloat v30 = v45.tx;
    CGFloat v31 = v45.ty;
    CGFloat v32 = (void *)(*(uint64_t (**)(CGAffineTransform *))((*v12 & *v5) + 0x308))(v25);
    if (v32)
    {
      long long v33 = v32;
      objc_msgSend(v32, sel_zoomScale);
      CGFloat v11 = v34;
    }
    CGAffineTransformMakeScale(&t1, v11, v11);
    long long v35 = *(_OWORD *)&t1.a;
    long long v36 = *(_OWORD *)&t1.c;
    long long v37 = *(_OWORD *)&t1.tx;
    t1.double a = v26;
    t1.CGFloat b = v27;
    t1.CGFloat c = c;
    t1.double d = v29;
    t1.tdouble x = v30;
    t1.tdouble y = v31;
    *(_OWORD *)&t2.double a = v35;
    *(_OWORD *)&t2.CGFloat c = v36;
    *(_OWORD *)&t2.tdouble x = v37;
    CGAffineTransformConcat(&v45, &t1, &t2);
    long long v43 = *(_OWORD *)&v45.c;
    long long v44 = *(_OWORD *)&v45.a;
    long long v41 = *(_OWORD *)&v45.tx;

    long long v24 = v41;
    long long v22 = v43;
    long long v23 = v44;
  }
  else
  {
    long long v22 = xmmword_20C8356C0;
    long long v23 = xmmword_20C835600;
    long long v24 = 0uLL;
  }
  *a1 = v23;
  a1[1] = v22;
  a1[2] = v24;
}

Swift::Void __swiftcall ResizeView.updateHandlePositionAndVisibility()()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x200))();
  (*(void (**)(_OWORD *__return_ptr))((*v1 & *(void *)v0) + 0x218))(v103);
  long long v98 = v103[1];
  long long v100 = v103[0];
  CGFloat v3 = v104;
  CGFloat v4 = v105;
  ResizeView.modelToViewTransform.getter((long long *)&v106);
  t1.tdouble x = v3;
  t1.tdouble y = v4;
  CGAffineTransform t2 = v106;
  *(_OWORD *)&t1.CGFloat a = v100;
  *(_OWORD *)&t1.CGFloat c = v98;
  uint64_t v5 = v0;
  CGAffineTransformConcat(&v102, &t1, &t2);
  CGFloat a = v102.a;
  CGFloat b = v102.b;
  CGFloat c = v102.c;
  CGFloat d = v102.d;
  tdouble x = v102.tx;
  tdouble y = v102.ty;
  CGAffineTransform t1 = v102;
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&t2, 0.0);
  Rotation = CGAffineTransformMakeRotation(&t2, t2.tx);
  CGFloat v77 = t2.a;
  CGFloat v87 = t2.c;
  CGFloat v88 = t2.b;
  CGFloat v85 = t2.tx;
  CGFloat v86 = t2.d;
  CGFloat v84 = t2.ty;
  (*(void (**)(CGAffineTransform *__return_ptr, CGAffineTransform *))((*v1 & *(void *)v0) + 0x1E0))(&t2, Rotation);
  v102.CGFloat a = a;
  v102.CGFloat b = b;
  v102.CGFloat c = c;
  v102.CGFloat d = d;
  v102.tdouble x = tx;
  v102.tdouble y = ty;
  v109.double x = 1.0;
  v109.double y = 0.0;
  CGPoint v13 = CGPointApplyAffineTransform(v109, &v102);
  v102.CGFloat a = a;
  v102.CGFloat b = b;
  v102.CGFloat c = c;
  v102.CGFloat d = d;
  v102.tdouble x = tx;
  v102.tdouble y = ty;
  v110.double x = 0.0;
  v110.double y = 0.0;
  CGPoint v14 = CGPointApplyAffineTransform(v110, &v102);
  v102.CGFloat a = a;
  v102.CGFloat b = b;
  v102.CGFloat c = c;
  v102.CGFloat d = d;
  v102.tdouble x = tx;
  v102.tdouble y = ty;
  v111.double x = 0.0;
  v111.double y = 1.0;
  CGPoint v15 = CGPointApplyAffineTransform(v111, &v102);
  CGFloat v92 = a;
  v102.CGFloat a = a;
  v102.CGFloat b = b;
  double v16 = sqrt((v13.x - v14.x) * (v13.x - v14.x) + (v13.y - v14.y) * (v13.y - v14.y));
  CGFloat v17 = b;
  v102.CGFloat c = c;
  v102.CGFloat d = d;
  v102.tdouble x = tx;
  v102.tdouble y = ty;
  v112.double x = 0.0;
  v112.double y = 0.0;
  CGPoint v18 = CGPointApplyAffineTransform(v112, &v102);
  double v19 = sqrt((v15.x - v18.x) * (v15.x - v18.x) + (v15.y - v18.y) * (v15.y - v18.y));
  unint64_t v20 = (*(uint64_t (**)(double, double))((*v1 & *(void *)v0) + 0x228))(v16, v19);
  unint64_t v21 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles];
  if (v21 >> 62) {
    goto LABEL_92;
  }
  uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  CGRect v82 = v5;
  unint64_t v83 = v20 >> 62;
  unint64_t v97 = v20;
  if (v22)
  {
    if (v22 >= 1)
    {
      uint64_t v23 = 0;
      uint64_t v94 = OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle;
      unint64_t v80 = v21;
      uint64_t v81 = v20 & 0xFFFFFFFFFFFFFF8;
      unint64_t v78 = v21 + 32;
      unint64_t v79 = v20 & 0xC000000000000001;
      unint64_t v90 = v21 & 0xC000000000000001;
      float64x2_t v89 = (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL);
      while (1)
      {
        if (v90) {
          long long v24 = (char *)MEMORY[0x21054E050](v23, v21);
        }
        else {
          long long v24 = (char *)*(id *)(v78 + 8 * v23);
        }
        long long v25 = v24;
        unint64_t v26 = *(void *)&v5[v94];
        if (v26 >= 2)
        {
          BOOL v27 = v24 != (char *)v26;
          if (((v24 != (char *)v26) & v2) != 0)
          {
LABEL_14:
            unint64_t v21 = v2;
            if (v83)
            {
              swift_bridgeObjectRetain();
              uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
              if (!v2) {
                goto LABEL_21;
              }
LABEL_16:
              if (v79) {
                id v28 = (id)MEMORY[0x21054E050](0, v20);
              }
              else {
                id v28 = *(id *)(v20 + 32);
              }
              CGFloat v29 = v28;
              type metadata accessor for CanvasElementResizeHandle();
              char v30 = static NSObject.== infix(_:_:)();

              if (v30)
              {
                swift_bridgeObjectRelease();
LABEL_35:
                long long v35 = *(char **)&v5[v94];
                uint64_t v2 = v21;
                if (v35) {
                  BOOL v27 = v35 == (char *)1 || v25 != v35;
                }
                else {
                  BOOL v27 = 0;
                }
              }
              else
              {
                if (v2 == 1) {
                  goto LABEL_21;
                }
                if (v79)
                {
                  uint64_t v31 = 1;
                  while (1)
                  {
                    MEMORY[0x21054E050](v31, v20);
                    uint64_t v5 = (char *)(v31 + 1);
                    if (__OFADD__(v31, 1)) {
                      break;
                    }
                    char v32 = static NSObject.== infix(_:_:)();
                    swift_unknownObjectRelease();
                    if (v32) {
                      goto LABEL_34;
                    }
                    ++v31;
                    unint64_t v20 = v97;
                    if (v5 == (char *)v2) {
                      goto LABEL_33;
                    }
                  }
                  __break(1u);
LABEL_91:
                  __break(1u);
LABEL_92:
                  swift_bridgeObjectRetain();
                  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
                  goto LABEL_3;
                }
                unint64_t v20 = 5;
                do
                {
                  uint64_t v5 = (char *)(v20 - 3);
                  if (__OFADD__(v20 - 4, 1)) {
                    goto LABEL_91;
                  }
                  id v33 = *(id *)(v97 + 8 * v20);
                  char v34 = static NSObject.== infix(_:_:)();

                  if (v34)
                  {
LABEL_34:
                    unint64_t v20 = v97;
                    swift_bridgeObjectRelease();
                    uint64_t v5 = v82;
                    goto LABEL_35;
                  }
                  ++v20;
                }
                while (v5 != (char *)v2);
                unint64_t v20 = v97;
LABEL_33:
                swift_bridgeObjectRelease();
                BOOL v27 = 1;
                uint64_t v5 = v82;
                uint64_t v2 = v21;
              }
            }
            else
            {
              uint64_t v2 = *(void *)(v81 + 16);
              swift_bridgeObjectRetain();
              if (v2) {
                goto LABEL_16;
              }
LABEL_21:
              swift_bridgeObjectRelease();
              BOOL v27 = 1;
              uint64_t v2 = v21;
            }
            unint64_t v21 = v80;
          }
        }
        else
        {
          if (v2) {
            goto LABEL_14;
          }
          BOOL v27 = 1;
        }
        objc_msgSend(v25, sel_setHidden_, v27);
        v102.CGFloat b = 0.0;
        v102.CGFloat c = 0.0;
        v102.CGFloat a = 1.0;
        v102.CGFloat d = 1.0;
        v102.tdouble x = 0.0;
        v102.tdouble y = 0.0;
        objc_msgSend(v25, sel_setTransform_, &v102);
        uint64_t v36 = v25[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type];
        v113.double x = dbl_20C844318[v36];
        v113.double y = dbl_20C844358[v36];
        v102.CGFloat a = v92;
        v102.CGFloat b = v17;
        v102.CGFloat c = c;
        v102.CGFloat d = d;
        v102.tdouble x = tx;
        v102.tdouble y = ty;
        CGPoint v37 = CGPointApplyAffineTransform(v113, &v102);
        CGFloat v38 = v25;
        id v39 = objc_msgSend(v5, sel_window);
        if (v39)
        {
          CGFloat v40 = v39;
          id v41 = objc_msgSend(v39, sel_screen);

          objc_msgSend(v41, sel_scale);
          double v96 = v42;

          double v43 = v96;
        }
        else
        {
          double v43 = 1.0;
        }
        float64x2_t v44 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43, 0);
        float64x2_t v45 = vmulq_n_f64((float64x2_t)v37, v43);
        float64x2_t v46 = vrndmq_f64(v45);
        objc_msgSend(v38, sel_setCenter_, vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v45, v46), v89), (int8x16_t)vrndpq_f64(v45), (int8x16_t)v46), v44));

        if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v38) + 0x90))())
        {
          v102.CGFloat a = v77;
          v102.CGFloat b = v88;
          v102.CGFloat c = v87;
          v102.CGFloat d = v86;
          v102.tdouble x = v85;
          v102.tdouble y = v84;
          objc_msgSend(v38, sel_setTransform_, &v102);
        }
        ++v23;

        if (v23 == v22) {
          goto LABEL_49;
        }
      }
    }
    __break(1u);
    goto LABEL_96;
  }
LABEL_49:
  swift_bridgeObjectRelease();
  double v47 = &v5[OBJC_IVAR____TtC8PaperKit10ResizeView_controlHandles];
  swift_beginAccess();
  uint64_t v48 = *(void *)v47;
  if (!(*(void *)v47 >> 62))
  {
    uint64_t v49 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v49) {
      goto LABEL_51;
    }
LABEL_94:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
  if (!v49) {
    goto LABEL_94;
  }
LABEL_51:
  if (v49 >= 1)
  {
    uint64_t v50 = 0;
    uint64_t v91 = OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle;
    float64x2_t v93 = (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL);
    while (1)
    {
      double v52 = (v48 & 0xC000000000000001) != 0
          ? (char *)MEMORY[0x21054E050](v50, v48)
          : (char *)*(id *)(v48 + 8 * v50 + 32);
      CGAffineTransform v53 = v52;
      uint64_t v54 = MEMORY[0x210550400](&v52[OBJC_IVAR____TtC8PaperKit17ControlHandleView_elementView]);
      if (v54) {
        break;
      }
      double v51 = v53;
LABEL_54:
      ++v50;

      if (v49 == v50) {
        goto LABEL_94;
      }
    }
    double v51 = (void *)v54;
    uint64_t v56 = OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint;
    int v57 = *((unsigned __int8 *)v53 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint);
    if (*((unsigned char *)v53 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint)) {
      BOOL v58 = v57 == 2;
    }
    else {
      BOOL v58 = 1;
    }
    if (!v58)
    {
      if (v57 != 1)
      {
        if (one-time initialization token for resizeMiddleHandlesMinSelectionSize != -1) {
          swift_once();
        }
        double v55 = *(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize;
        if (*(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize >= v16) {
          goto LABEL_79;
        }
LABEL_78:
        if (v55 >= v19) {
          goto LABEL_79;
        }
        goto LABEL_64;
      }
      if (one-time initialization token for resizeMiddleHandlesMinSelectionSize != -1) {
        swift_once();
      }
      double v55 = *(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize;
      if (*(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize >= v16) {
        goto LABEL_78;
      }
    }
LABEL_64:
    CGFloat v59 = *(void **)&v5[v91];
    if (!v59 || v59 != (void *)1 && v53 == v59)
    {
      if (v83)
      {
        swift_bridgeObjectRetain();
        uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v60 = *(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      BOOL v61 = v60 == 0;
      goto LABEL_80;
    }
LABEL_79:
    BOOL v61 = 1;
LABEL_80:
    objc_msgSend(v53, sel_setHidden_, v61, v55);
    v102.CGFloat b = 0.0;
    v102.CGFloat c = 0.0;
    v102.CGFloat a = 1.0;
    v102.CGFloat d = 1.0;
    v102.tdouble x = 0.0;
    v102.tdouble y = 0.0;
    objc_msgSend(v53, sel_setTransform_, &v102);
    LOBYTE(v102.a) = *((unsigned char *)v53 + v56);
    CGFloat v62 = *(double (**)(CGAffineTransform *, CGAffineTransform *, void, uint64_t))((*MEMORY[0x263F8EED0] & *v51)
                                                                                             + 0x158);
    BOOL v63 = v53;
    float64_t v64 = v62(&v102, &t2, 0, 1);
    float64_t v99 = v65;
    float64_t v101 = v64;
    uint64_t v5 = v82;
    id v66 = objc_msgSend(v82, sel_window);
    if (v66)
    {
      double v67 = v66;
      id v68 = objc_msgSend(v66, sel_screen);

      objc_msgSend(v68, sel_scale);
      double v95 = v69;

      double v70 = v95;
    }
    else
    {
      double v70 = 1.0;
    }
    v71.f64[0] = v101;
    v71.f64[1] = v99;
    float64x2_t v72 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v70, 0);
    float64x2_t v73 = vmulq_n_f64(v71, v70);
    float64x2_t v74 = vrndmq_f64(v73);
    objc_msgSend(v63, sel_setCenter_, vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v73, v74), v93), (int8x16_t)vrndpq_f64(v73), (int8x16_t)v74), v72));

    unint64_t v75 = ControlHandleView.pointerAccessories()();
    if (v75 >> 62) {
      uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v76 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v76 <= 3)
    {
      BOOL v63 = v63;
      v102.CGFloat a = v77;
      v102.CGFloat b = v88;
      v102.CGFloat c = v87;
      v102.CGFloat d = v86;
      v102.tdouble x = v85;
      v102.tdouble y = v84;
      objc_msgSend(v63, sel_setTransform_, &v102);
    }
    goto LABEL_54;
  }
LABEL_96:
  __break(1u);
}

void ResizeView.resizeHandleMoved(_:)(void *a1)
{
  id v3 = objc_msgSend(a1, sel_view);
  if (v3)
  {
    id v10 = v3;
    type metadata accessor for CanvasElementResizeHandle();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = (char *)v4;
      unsigned int v6 = objc_msgSend(a1, sel_modifierFlags);
      if ((*((unsigned char *)a1 + OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags + 2) & 0x10) != 0
        && ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x238))() & 1) != 0)
      {
        ResizeView.rotateFromResizeHandleMoved(_:handle:modifierFlags:)(a1, v5, (int)objc_msgSend(a1, sel_modifierFlags));
      }
      else
      {
        id v7 = a1;
        double v8 = v1;
        id v9 = v10;
        specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(v7, v5, v8, v7, v8, (*(void *)&v6 & 0x80000) != 0, v5, (*(void *)&v6 & 0x20000) != 0);

        if (objc_msgSend(v7, sel_state) == (id)3) {
          (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v8) + 0x2F0))();
        }
      }
    }
  }
}

Swift::Void __swiftcall ResizeView.dragMoved(_:)(UIPanGestureRecognizer *a1)
{
  unint64_t v3 = ((unint64_t)[(UIPanGestureRecognizer *)a1 modifierFlags] >> 17) & 1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(v4, (void *)1, v5, v4, v5, v3);

  if ([(UIPanGestureRecognizer *)v4 state] == (id)3)
  {
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x300))();
  }
  else if ([(UIPanGestureRecognizer *)v4 state] != (id)4)
  {
    return;
  }
  *((unsigned char *)v5 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis) = 0;
}

Swift::Void __swiftcall ResizeView.rotate(_:)(UIRotationGestureRecognizer *a1)
{
  if (one-time initialization token for resizeRotateTwoFingerDefaultSnapRadius != -1) {
    swift_once();
  }
  double v3 = *(double *)&static UIConstants.resizeRotateTwoFingerDefaultSnapRadius;
  if ([(UIRotationGestureRecognizer *)a1 numberOfTouches] == (id)2)
  {
    [(UIRotationGestureRecognizer *)a1 locationOfTouch:0 inView:0];
    double v5 = v4;
    double v7 = v6;
    [(UIRotationGestureRecognizer *)a1 locationOfTouch:1 inView:0];
    double v3 = sqrt((v5 - v8) * (v5 - v8) + (v7 - v9) * (v7 - v9)) * 0.5;
  }
  id v10 = [(UIRotationGestureRecognizer *)a1 rotation];
  CGFloat v12 = v11;
  double v13 = (*(double (**)(id))((*MEMORY[0x263F8EED0] & *v1) + 0x2D8))(v10);
  CGPoint v14 = v1;
  specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(a1, (void *)1, v14, v14, 1, v12, v13, v3);
}

void ResizeView.rotateFromResizeHandleMoved(_:handle:modifierFlags:)(void *a1, char *a2, int a3)
{
  CGFloat v8 = *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 8);
  CGFloat v9 = *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 16);
  CGFloat v10 = *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 24);
  CGFloat v11 = *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 32);
  CGFloat v12 = *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 40);
  v27.CGFloat a = *(CGFloat *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace);
  CGFloat a = v27.a;
  v27.CGFloat b = v8;
  v27.CGFloat c = v9;
  v27.CGFloat d = v10;
  v27.tdouble x = v11;
  v27.tdouble y = v12;
  v28.double x = 0.5;
  v28.double y = 0.5;
  CGPoint v13 = CGPointApplyAffineTransform(v28, &v27);
  uint64_t v14 = 8 * a2[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type];
  v29.double x = *(CGFloat *)((char *)&unk_20C844318 + v14);
  v29.double y = *(CGFloat *)((char *)&unk_20C844358 + v14);
  v27.CGFloat a = a;
  v27.CGFloat b = v8;
  v27.CGFloat c = v9;
  v27.CGFloat d = v10;
  v27.tdouble x = v11;
  v27.tdouble y = v12;
  CGPoint v15 = CGPointApplyAffineTransform(v29, &v27);
  id v16 = objc_msgSend(a1, sel_locationInView_, v3);
  double v18 = v17;
  double v20 = v19;
  double v21 = 0.0;
  if ((a3 & 0x20000) != 0) {
    double v21 = (*(double (**)(id))((*MEMORY[0x263F8EED0] & *v3) + 0x2D8))(v16);
  }
  long double v22 = v20 - v13.y;
  double v23 = sqrt((v18 - v13.x) * (v18 - v13.x) + v22 * v22);
  double v24 = atan2(v22, v18 - v13.x);
  CGFloat v25 = v24 - atan2(v15.y - v13.y, v15.x - v13.x);
  unint64_t v26 = v3;
  specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(a1, a2, v26, v26, (*(void *)&a3 & 0x20000) != 0, v25, v21, v23);
}

Swift::Bool __swiftcall ResizeView.updateGestureModifiersState(_:)(UIPressesEvent_optional a1)
{
  Class isa = a1.value.super.super.isa;
  double v3 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer);
  if (!v3)
  {
LABEL_6:
    double v6 = *(char **)((char *)v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
    if ((unint64_t)v6 >= 2)
    {
      double v7 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer];
      CGFloat v8 = v6;
      if (objc_msgSend(v7, sel_state) == (id)2)
      {
        type metadata accessor for ControlHandleView();
        if (!swift_dynamicCastClass())
        {
          if (isa) {
            LODWORD(isa) = [(objc_class *)isa modifierFlags];
          }
          if ((*((unsigned char *)v7 + OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags + 2) & 0x10) != 0
            && ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x238))() & 1) != 0)
          {
            ResizeView.rotateFromResizeHandleMoved(_:handle:modifierFlags:)(v7, v8, (int)objc_msgSend(v7, sel_modifierFlags));
          }
          else
          {
            CGFloat v12 = v1;
            outlined copy of ResizeView.ActiveHandle(v6);
            id v13 = v7;
            specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(v13, v6, v12, v13, v12, ((unint64_t)isa & 0x80000) != 0, v8, ((unint64_t)isa & 0x20000) != 0);
            outlined consume of ResizeView.ActiveHandle(v6);

            if (objc_msgSend(v13, sel_state) == (id)3) {
              (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v12) + 0x2F0))();
            }
          }
          outlined consume of ResizeView.ActiveHandle(v6);
          return 1;
        }
      }
      outlined consume of ResizeView.ActiveHandle(v6);
    }
    return 0;
  }
  id v4 = v3;
  if (objc_msgSend(v4, sel_state) != (id)2)
  {

    goto LABEL_6;
  }
  if (isa) {
    unint64_t v5 = ((unint64_t)[(objc_class *)isa modifierFlags] >> 17) & 1;
  }
  else {
    LOBYTE(v5) = 0;
  }
  id v10 = v4;
  CGFloat v11 = v1;
  specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(v10, (void *)1, v11, v10, v11, v5);

  if (objc_msgSend(v10, sel_state) == (id)3)
  {
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x300))();
LABEL_15:
    *((unsigned char *)v11 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis) = 0;
    goto LABEL_16;
  }
  if (objc_msgSend(v10, sel_state) == (id)4) {
    goto LABEL_15;
  }
LABEL_16:

  return 1;
}

Swift::Void __swiftcall ResizeView.startNudging(by:largerJump:)(CGPoint by, Swift::Bool largerJump)
{
  double v3 = v2;
  double y = by.y;
  double x = by.x;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v30 - v13;
  CGPoint v15 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(void, __n128))((*MEMORY[0x263F8EED0] & *v2) + 0x280))(0, v12);
  uint64_t v16 = OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer;
  objc_msgSend(*(id *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer), sel_invalidate);
  double v17 = *(void **)((char *)v3 + v16);
  uint64_t v31 = v16;
  *(void *)((char *)v3 + v16) = 0;

  (*(void (**)(void))((*v15 & *v3) + 0x270))();
  if (largerJump)
  {
    if (one-time initialization token for resizeNudgeLargeJumpDistance != -1) {
      swift_once();
    }
    double v18 = &static UIConstants.resizeNudgeLargeJumpDistance;
  }
  else
  {
    if (one-time initialization token for resizeNudgeSmallJumpDistance != -1) {
      swift_once();
    }
    double v18 = &static UIConstants.resizeNudgeSmallJumpDistance;
  }
  double v19 = *(double *)v18 * x;
  double v20 = *(double *)v18 * y;
  (*(void (**)(double, double))((*v15 & *v3) + 0x308))(v19, v20);
  double v21 = (double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeDelta);
  double *v21 = v19;
  v21[1] = v20;
  Date.init()();
  Date.addingTimeInterval(_:)();
  long double v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v10, v7);
  uint64_t v23 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v24 = objc_allocWithZone(MEMORY[0x263EFFA20]);
  swift_retain();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  aBlock[4] = partial apply for closure #1 in ResizeView.startNudging(by:largerJump:);
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  void aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  aBlock[3] = &block_descriptor_47;
  unint64_t v26 = _Block_copy(aBlock);
  id v27 = objc_msgSend(v24, sel_initWithFireDate_interval_repeats_block_, isa, 1, v26, 0.1);
  _Block_release(v26);

  v22(v14, v7);
  swift_release();
  swift_release();
  id v28 = objc_msgSend(self, sel_mainRunLoop);
  objc_msgSend(v28, sel_addTimer_forMode_, v27, *MEMORY[0x263EFF478]);

  CGPoint v29 = *(void **)((char *)v3 + v31);
  *(void *)((char *)v3 + v31) = v27;
}

uint64_t ResizeView.handlePressesEnded(_:with:)(int a1, UIPressesEvent_optional a2)
{
  Class isa = a2.value.super.super.isa;
  Class v4 = a2.value.super.super.isa;
  if (ResizeView.updateGestureModifiersState(_:)(a2)) {
    return 1;
  }
  id v6 = objc_msgSend(v2, sel_window);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  if (isa)
  {
    id v8 = [(objc_class *)isa touchesForWindow:v6];
    if (v8)
    {
      uint64_t v9 = v8;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
      lazy protocol witness table accessor for type UITouch and conformance NSObject();
      uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v11 = (v10 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(void *)(v10 + 16);
      swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_15;
      }
    }
  }
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = (void *)specialized Collection.first.getter(v12);
  swift_bridgeObjectRelease();
  if (!v13
    || (id v14 = objc_msgSend(v13, sel_key), v13, !v14)
    || (CGPoint v15 = (char *)objc_msgSend(v14, sel_keyCode), v14, (unint64_t)(v15 - 79) > 3))
  {
LABEL_15:
    uint64_t v5 = 0;
  }
  else
  {
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x280))(0);
    uint64_t v16 = OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer;
    objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer), sel_invalidate);
    double v17 = *(void **)((char *)v2 + v16);
    *(void *)((char *)v2 + v16) = 0;

    uint64_t v5 = 1;
    uint64_t v7 = v17;
  }

  return v5;
}

Swift::Bool __swiftcall ResizeView.gestureRecognizer(_:shouldBeRequiredToFailBy:)(UIGestureRecognizer *_, UIGestureRecognizer *shouldBeRequiredToFailBy)
{
  double v3 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer);
  Swift::Bool result = 0;
  if (v3)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    id v6 = v3;
    uint64_t v7 = _;
    char v8 = static NSObject.== infix(_:_:)();

    if (v8)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPinchGestureRecognizer);
      if ([(UIGestureRecognizer *)shouldBeRequiredToFailBy isKindOfClass:swift_getObjCClassFromMetadata()])return 1; {
    }
      }
  }
  return result;
}

void protocol witness for MiniMenuControllerDelegate.canvas.getter in conformance CanvasElementResizeView()
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ResizeView.ActiveHandle(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  double v3 = *a2;
  if (!*a1) {
    return !v3;
  }
  if (v2 == (void *)1) {
    return v3 == (void *)1;
  }
  if ((unint64_t)v3 < 2) {
    return 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  outlined copy of ResizeView.ActiveHandle(v2);
  outlined copy of ResizeView.ActiveHandle(v3);
  char v5 = static NSObject.== infix(_:_:)();
  outlined consume of ResizeView.ActiveHandle(v3);
  outlined consume of ResizeView.ActiveHandle(v2);
  return v5 & 1;
}

Swift::Void __swiftcall ResizeView.layoutSubviews()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_borderView);
  double v3 = (void *)MEMORY[0x263F8EED0];
  objc_msgSend(v2, sel_setHidden_, ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))() & 1) == 0);
  v21.id receiver = v0;
  v21.super_class = (Class)type metadata accessor for ResizeView();
  objc_msgSendSuper2(&v21, sel_layoutSubviews);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tdouble x = 0.0;
  t1.tdouble y = 0.0;
  (*(void (**)(_OWORD *__return_ptr, id))((*v3 & *v0) + 0x218))(v22, objc_msgSend(v2, sel_setTransform_, &t1));
  long long v17 = v22[1];
  long long v18 = v22[0];
  CGFloat v4 = v23;
  CGFloat v5 = v24;
  ResizeView.modelToViewTransform.getter((long long *)&v25);
  *(_OWORD *)&t1.CGFloat a = v18;
  *(_OWORD *)&t1.CGFloat c = v17;
  t1.tdouble x = v4;
  t1.tdouble y = v5;
  CGAffineTransform t2 = v25;
  CGAffineTransformConcat(&v19, &t1, &t2);
  CGAffineTransform t1 = v19;
  double v6 = CGAffineTransform.decompose(initialRotation:)((uint64_t)&t2, 0.0);
  long long v7 = *(_OWORD *)&t2.a;
  CGFloat c = t2.c;
  CGFloat d = t2.d;
  tdouble x = t2.tx;
  id v11 = objc_msgSend(v0, sel_window, v6);
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = objc_msgSend(v11, sel_screen);

    objc_msgSend(v13, sel_scale);
    double v15 = v14;
  }
  else
  {
    double v15 = 1.0;
  }
  objc_msgSend(v2, sel_setFrame_, CGRect.rounded(scale:)(v15, *(CGFloat *)&v7, *((CGFloat *)&v7 + 1), c, d));
  CGAffineTransformMakeRotation(&t2, tx);
  objc_msgSend(v2, sel_setTransform_, &t2);
  id v16 = objc_msgSend(v2, sel_layer);
  (*(void (**)(void))((*v3 & *v1) + 0x208))();
  objc_msgSend(v16, sel_setCornerRadius_);

  ResizeView.updateHandlePositionAndVisibility()();
}

void __swiftcall ResizeView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  if ((objc_msgSend(v3, sel_isHidden) & 1) == 0
    && !(*(uint64_t (**)(Class, double, double))((*MEMORY[0x263F8EED0] & *v3) + 0x250))(isa, x, y))
  {
    objc_msgSend(*(id *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_borderView), sel_frame);
    v8.double x = x;
    v8.double y = y;
    if (CGRectContainsPoint(v9, v8)) {
      long long v7 = v3;
    }
  }
}

Swift::Void __swiftcall ResizeView.endTransform(cancel:)(Swift::Bool cancel)
{
  uint64_t v2 = v1;
  double v3 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle];
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
  outlined consume of ResizeView.ActiveHandle(v3);
  v1[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
  uint64_t v4 = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v4)
  {
    CGFloat v5 = (void *)v4;
    AnyCanvas.isResizingChanged()();
  }
  objc_msgSend(v2, sel_setNeedsLayout);
}

CGFloat closure #1 in ResizeView.resizeHandleMoved(_:handle:fromCenter:aspectLocked:)@<D0>(void *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, _OWORD *a6@<X8>)
{
  objc_msgSend(a1, sel_translationInView_, a2);
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  uint64_t v15 = *(char *)(a4 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type);
  double v16 = 0.5;
  uint64_t v17 = v15;
  double v18 = 0.5;
  if ((a3 & 1) == 0)
  {
    double v16 = 1.0 - dbl_20C844318[v15];
    double v18 = 1.0 - dbl_20C844358[v15];
  }
  double v78 = v18;
  double v80 = v16;
  CGAffineTransform v19 = (CGFloat *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled);
  long long v20 = *(_OWORD *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled + 16);
  *(_OWORD *)&t1.CGFloat a = *(_OWORD *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled);
  *(_OWORD *)&t1.CGFloat c = v20;
  *(_OWORD *)&t1.tdouble x = *(_OWORD *)((char *)a2
                                + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled
                                + 32);
  CGAffineTransformInvert(&t2, &t1);
  CGFloat a = t2.a;
  CGFloat b = t2.b;
  CGFloat c = t2.c;
  CGFloat d = t2.d;
  tdouble x = t2.tx;
  tdouble y = t2.ty;
  CGAffineTransform t1 = t2;
  v85.double x = v12;
  v85.double y = v14;
  CGPoint v27 = CGPointApplyAffineTransform(v85, &t1);
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tdouble x = tx;
  t1.tdouble y = ty;
  v86.double x = 0.0;
  v86.double y = 0.0;
  CGPoint v28 = CGPointApplyAffineTransform(v86, &t1);
  if ((~COERCE__INT64((v27.x - v28.x) / (dbl_20C844318[v17] - v80) + 1.0) & 0x7FF0000000000000) != 0) {
    double v29 = (v27.x - v28.x) / (dbl_20C844318[v17] - v80) + 1.0;
  }
  else {
    double v29 = 1.0;
  }
  if ((~COERCE__INT64((v27.y - v28.y) / (dbl_20C844358[v17] - v78) + 1.0) & 0x7FF0000000000000) != 0) {
    double v30 = (v27.y - v28.y) / (dbl_20C844358[v17] - v78) + 1.0;
  }
  else {
    double v30 = 1.0;
  }
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a2) + 0x240))() & 1) == 0 || (a5)
  {
    CGFloat v76 = dbl_20C844318[v17] - v80;
    pointCGFloat b = dbl_20C844358[v17] - v78;
    v87.double x = v29 * v76;
    v87.double y = v30 * pointb;
    CGFloat v41 = v19[1];
    CGFloat v42 = v19[2];
    CGFloat v43 = v19[3];
    CGFloat v44 = v19[4];
    CGFloat v45 = v19[5];
    t1.CGFloat a = *v19;
    CGFloat v40 = t1.a;
    t1.CGFloat b = v41;
    t1.CGFloat c = v42;
    t1.CGFloat d = v43;
    t1.tdouble x = v44;
    t1.tdouble y = v45;
    CGPoint v46 = CGPointApplyAffineTransform(v87, &t1);
    t1.CGFloat a = v40;
    t1.CGFloat b = v41;
    t1.CGFloat c = v42;
    t1.CGFloat d = v43;
    t1.tdouble x = v44;
    t1.tdouble y = v45;
    v88.double x = 0.0;
    v88.double y = 0.0;
    CGPoint v47 = CGPointApplyAffineTransform(v88, &t1);
    t1.CGFloat a = v40;
    t1.CGFloat b = v41;
    t1.CGFloat c = v42;
    t1.CGFloat d = v43;
    t1.tdouble x = v44;
    t1.tdouble y = v45;
    v89.double x = v76;
    v89.double y = pointb;
    CGPoint v48 = CGPointApplyAffineTransform(v89, &t1);
    t1.CGFloat a = v40;
    t1.CGFloat b = v41;
    t1.CGFloat c = v42;
    t1.CGFloat d = v43;
    t1.tdouble x = v44;
    t1.tdouble y = v45;
    v90.double x = 0.0;
    v90.double y = 0.0;
    CGPoint v49 = CGPointApplyAffineTransform(v90, &t1);
    CGFloat v50 = ((v46.x - v47.x) * (v48.x - v49.x) + (v46.y - v47.y) * (v48.y - v49.y))
        / ((v48.x - v49.x) * (v48.x - v49.x) + (v48.y - v49.y) * (v48.y - v49.y));
    CGAffineTransformMakeTranslation(&t1, -v80, -v78);
    pointCGFloat c = *(_OWORD *)&t1.c;
    CGPoint v77 = *(CGPoint *)&t1.a;
    CGFloat v51 = t1.tx;
    CGFloat v52 = t1.ty;
    CGAffineTransformMakeScale(&t1, v50, v50);
    long long v53 = *(_OWORD *)&t1.a;
    long long v54 = *(_OWORD *)&t1.c;
    long long v55 = *(_OWORD *)&t1.tx;
    *(CGPoint *)&t1.CGFloat a = v77;
    *(_OWORD *)&t1.CGFloat c = pointc;
    t1.tdouble x = v51;
    t1.tdouble y = v52;
    *(_OWORD *)&t2.CGFloat a = v53;
    *(_OWORD *)&t2.CGFloat c = v54;
    *(_OWORD *)&t2.tdouble x = v55;
    CGAffineTransformConcat(&v82, &t1, &t2);
    long long point = *(_OWORD *)&v82.c;
    CGPoint v75 = *(CGPoint *)&v82.a;
    CGFloat v36 = v82.tx;
    CGFloat v37 = v82.ty;
    CGFloat v38 = v80;
    CGFloat v39 = v78;
  }
  else
  {
    CGAffineTransformMakeTranslation(&t1, -v80, -v78);
    pointCGFloat a = *(_OWORD *)&t1.c;
    CGPoint v74 = *(CGPoint *)&t1.a;
    CGFloat v31 = t1.tx;
    CGFloat v32 = t1.ty;
    CGAffineTransformMakeScale(&t1, v29, v30);
    long long v33 = *(_OWORD *)&t1.a;
    long long v34 = *(_OWORD *)&t1.c;
    long long v35 = *(_OWORD *)&t1.tx;
    *(CGPoint *)&t1.CGFloat a = v74;
    *(_OWORD *)&t1.CGFloat c = pointa;
    t1.tdouble x = v31;
    t1.tdouble y = v32;
    *(_OWORD *)&t2.CGFloat a = v33;
    *(_OWORD *)&t2.CGFloat c = v34;
    *(_OWORD *)&t2.tdouble x = v35;
    CGAffineTransformConcat(&v82, &t1, &t2);
    long long point = *(_OWORD *)&v82.c;
    CGPoint v75 = *(CGPoint *)&v82.a;
    CGFloat v36 = v82.tx;
    CGFloat v37 = v82.ty;
    CGFloat v38 = v80;
    CGFloat v39 = v78;
  }
  CGAffineTransformMakeTranslation(&t1, v38, v39);
  long long v56 = *(_OWORD *)&t1.a;
  long long v57 = *(_OWORD *)&t1.c;
  long long v58 = *(_OWORD *)&t1.tx;
  *(CGPoint *)&t1.CGFloat a = v75;
  *(_OWORD *)&t1.CGFloat c = point;
  t1.tdouble x = v36;
  t1.tdouble y = v37;
  *(_OWORD *)&t2.CGFloat a = v56;
  *(_OWORD *)&t2.CGFloat c = v57;
  *(_OWORD *)&t2.tdouble x = v58;
  CGAffineTransformConcat(&v82, &t1, &t2);
  long long v79 = *(_OWORD *)&v82.c;
  long long v81 = *(_OWORD *)&v82.a;
  CGFloat v59 = v82.tx;
  CGFloat v60 = v82.ty;
  CGFloat v62 = *(double *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 8);
  CGFloat v63 = *(double *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 16);
  CGFloat v64 = *(double *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 24);
  CGFloat v65 = *(double *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 32);
  CGFloat v66 = *(double *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 40);
  t1.CGFloat a = *(CGFloat *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace);
  CGFloat v61 = t1.a;
  t1.CGFloat b = v62;
  t1.CGFloat c = v63;
  t1.CGFloat d = v64;
  t1.tdouble x = v65;
  t1.tdouble y = v66;
  CGAffineTransformInvert(&t2, &t1);
  CGAffineTransform t1 = t2;
  *(_OWORD *)&t2.CGFloat a = v81;
  *(_OWORD *)&t2.CGFloat c = v79;
  t2.tdouble x = v59;
  t2.tdouble y = v60;
  CGAffineTransformConcat(&v82, &t1, &t2);
  CGAffineTransform t1 = v82;
  t2.CGFloat a = v61;
  t2.CGFloat b = v62;
  t2.CGFloat c = v63;
  t2.CGFloat d = v64;
  t2.tdouble x = v65;
  t2.tdouble y = v66;
  CGAffineTransformConcat(&v82, &t1, &t2);
  CGFloat result = v82.a;
  long long v68 = *(_OWORD *)&v82.c;
  long long v69 = *(_OWORD *)&v82.tx;
  *a6 = *(_OWORD *)&v82.a;
  a6[1] = v68;
  a6[2] = v69;
  return result;
}

CGFloat closure #1 in ResizeView.dragMoved(_:axisConstrained:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  objc_msgSend(a1, sel_translationInView_, a2);
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  ResizeView.modelToViewTransform.getter((long long *)&v43);
  CGAffineTransform v45 = v43;
  CGAffineTransformInvert(&v44, &v45);
  CGFloat a = v44.a;
  CGFloat b = v44.b;
  CGFloat c = v44.c;
  CGFloat d = v44.d;
  tdouble x = v44.tx;
  tdouble y = v44.ty;
  CGAffineTransform v45 = v44;
  v47.double x = v8;
  v47.double y = v10;
  CGPoint v17 = CGPointApplyAffineTransform(v47, &v45);
  v45.CGFloat a = a;
  v45.CGFloat b = b;
  v45.CGFloat c = c;
  v45.CGFloat d = d;
  v45.tdouble x = tx;
  v45.tdouble y = ty;
  v48.double x = 0.0;
  v48.double y = 0.0;
  CGPoint v18 = CGPointApplyAffineTransform(v48, &v45);
  double v19 = v17.x - v18.x;
  double v20 = v17.y - v18.y;
  if (a3)
  {
    if (fabs(v20) < fabs(v19)) {
      char v21 = 1;
    }
    else {
      char v21 = 2;
    }
    uint64_t v22 = OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis;
    if (!*(unsigned char *)(a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis)) {
      goto LABEL_19;
    }
    if (one-time initialization token for resizeDragConstraintLimit != -1) {
      swift_once();
    }
    double v23 = *(double *)&static UIConstants.resizeDragConstraintLimit;
    double v24 = sqrt(v19 * v19 + v20 * v20);
    CGAffineTransform v25 = (void *)MEMORY[0x210550400](a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
    if (v25)
    {
      unint64_t v26 = v25;
      CGPoint v27 = (void *)MEMORY[0x263F8EED0];
      CGPoint v28 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v25) + 0x308))();
      if (v28)
      {
        double v29 = v28;
        objc_msgSend(v28, sel_zoomScale);
        double v31 = v30;
      }
      else
      {
        double v31 = 1.0;
      }
      (*(void (**)(CGAffineTransform *__return_ptr))((*v27 & *v26) + 0x5D0))(&v44);
      outlined init with take of CGAffineTransform?((uint64_t)&v44, (uint64_t)&v45);
      if (v46)
      {

        double v33 = 1.0;
      }
      else
      {
        double v34 = v45.a;
        double v35 = v45.b;

        double v33 = sqrt(v34 * v34 + v35 * v35);
      }
      double v32 = v31 * v33;
    }
    else
    {
      double v32 = 1.0;
    }
    if (v23 / v32 < v24) {
LABEL_19:
    }
      *(unsigned char *)(a2 + v22) = v21;
  }
  else
  {
    *(unsigned char *)(a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis) = 0;
  }
  int v36 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis);
  double v37 = 0.0;
  if (v36 == 1) {
    double v38 = 0.0;
  }
  else {
    double v38 = v17.y - v18.y;
  }
  if (v36 == 1) {
    double v37 = v17.x - v18.x;
  }
  if (!*(unsigned char *)(a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis))
  {
    double v38 = v17.y - v18.y;
    double v37 = v17.x - v18.x;
  }
  CGAffineTransformMakeTranslation(&v42, v37, v38);
  CGFloat result = v42.a;
  long long v40 = *(_OWORD *)&v42.c;
  long long v41 = *(_OWORD *)&v42.tx;
  *a4 = *(_OWORD *)&v42.a;
  a4[1] = v40;
  a4[2] = v41;
  return result;
}

CGFloat closure #1 in ResizeView.rotate(_:activeHandle:rotation:snapDistance:snapping:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>, CGFloat a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  long long v11 = *(_OWORD *)(a1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 16);
  *(_OWORD *)&t1.CGFloat a = *(_OWORD *)(a1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace);
  *(_OWORD *)&t1.CGFloat c = v11;
  *(_OWORD *)&t1.tdouble x = *(_OWORD *)(a1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 32);
  double v12 = 0.5;
  *(void *)&long long v11 = 0.5;
  CGPoint v13 = CGPointApplyAffineTransform(*(CGPoint *)((char *)&v11 - 8), &t1);
  if (a2)
  {
    if (one-time initialization token for resizeRotateSnapToAngleStep != -1) {
      swift_once();
    }
    double v14 = (a4 + a5) * (1.0 / *(double *)&static UIConstants.resizeRotateSnapToAngleStep);
    double v15 = floor(v14);
    double v16 = v14 - v15;
    double v17 = ceil(v14);
    if (v16 < 0.49) {
      double v17 = v15;
    }
    double v18 = v17 / (1.0 / *(double *)&static UIConstants.resizeRotateSnapToAngleStep) - a5;
    if (one-time initialization token for resizeRotateSnapToAngleThreshold != -1) {
      swift_once();
    }
    double v19 = *(double *)&static UIConstants.resizeRotateSnapToAngleThreshold;
    if (one-time initialization token for resizeRotateMinimumSnapAngle != -1) {
      swift_once();
    }
    double v20 = *(double *)&static UIConstants.resizeRotateMinimumSnapAngle * a6;
    if (one-time initialization token for resizeRotateMaximumSnapAngle != -1) {
      swift_once();
    }
    double v21 = *(double *)&static UIConstants.resizeRotateMaximumSnapAngle * a6;
    if (*(double *)&static UIConstants.resizeRotateMaximumSnapAngle * a6 >= v19) {
      double v21 = v19;
    }
    if (v19 < v20) {
      double v21 = v20;
    }
    if (fabs((v18 - a4) * a6) < v21) {
      a4 = v18;
    }
  }
  CGAffineTransformMakeRotation(&t1, a4);
  long long v35 = *(_OWORD *)&t1.c;
  long long v37 = *(_OWORD *)&t1.a;
  tdouble x = t1.tx;
  tdouble y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -v13.x, -v13.y);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v28 = t1.tx;
  CGFloat v29 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v37;
  *(_OWORD *)&t2.CGFloat c = v35;
  t2.tdouble x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v39, &t1, &t2);
  long long v36 = *(_OWORD *)&v39.c;
  long long v38 = *(_OWORD *)&v39.a;
  CGFloat v30 = v39.tx;
  CGFloat v31 = v39.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tdouble x = v28;
  t1.tdouble y = v29;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v38;
  *(_OWORD *)&t1.CGFloat c = v36;
  t1.tdouble x = v30;
  t1.tdouble y = v31;
  CGAffineTransformConcat(&v39, &t1, &t2);
  CGFloat result = v39.a;
  long long v33 = *(_OWORD *)&v39.c;
  long long v34 = *(_OWORD *)&v39.tx;
  *a3 = *(_OWORD *)&v39.a;
  a3[1] = v33;
  a3[2] = v34;
  return result;
}

void closure #1 in ResizeView.startNudging(by:largerJump:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  double v3 = (void *)MEMORY[0x210550400](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    (*(void (**)(double, double))((*MEMORY[0x263F8EED0] & *v3) + 0x308))(*(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeDelta), *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeDelta + 8));
  }
}

Swift::Bool __swiftcall ResizeView.gestureRecognizerShouldBegin(_:)(UIGestureRecognizer *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer);
  if (v4)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    id v5 = v4;
    double v6 = a1;
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) != 0 && ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x238))() & 1) == 0) {
      return 0;
    }
  }
  CGFloat v8 = *(void **)((char *)v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer);
  if (v8)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    double v9 = a1;
    id v10 = v8;
    char v11 = static NSObject.== infix(_:_:)();

    if ((v11 & 1) != 0 && ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x230))() & 1) == 0) {
      return 0;
    }
  }
  v13.id receiver = v2;
  v13.super_class = (Class)type metadata accessor for ResizeView();
  return [(UIGestureRecognizer *)&v13 gestureRecognizerShouldBegin:a1];
}

id ResizeView.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for ResizeView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ResizeView()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ResizeView.ConstrainedAxis(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *CGFloat result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C5CE824);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *CGFloat result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ResizeView.ConstrainedAxis()
{
  return &unk_26C15C300;
}

void *initializeBufferWithCopyOfBuffer for ResizeView.ActiveHandle(void *a1, void **a2)
{
  int v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for ResizeView.ActiveHandle(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for ResizeView.ActiveHandle(void **a1, void **a2)
{
  int v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for ResizeView.ActiveHandle(void **a1, unint64_t *a2)
{
  int v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

ValueMetadata *type metadata accessor for ResizeView.ActiveHandle()
{
  return &type metadata for ResizeView.ActiveHandle;
}

unint64_t lazy protocol witness table accessor for type ResizeView.ConstrainedAxis and conformance ResizeView.ConstrainedAxis()
{
  unint64_t result = lazy protocol witness table cache variable for type ResizeView.ConstrainedAxis and conformance ResizeView.ConstrainedAxis;
  if (!lazy protocol witness table cache variable for type ResizeView.ConstrainedAxis and conformance ResizeView.ConstrainedAxis)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResizeView.ConstrainedAxis and conformance ResizeView.ConstrainedAxis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITouch);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

id specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(void *a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  id result = objc_msgSend(a1, sel_state);
  switch((unint64_t)result)
  {
    case 0uLL:
      return result;
    case 1uLL:
      double v16 = *(void **)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
      *(void *)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = a2;
      outlined copy of ResizeView.ActiveHandle(a2);
      outlined consume of ResizeView.ActiveHandle(v16);
      id result = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a3) + 0x270))();
      break;
    case 2uLL:
      closure #1 in ResizeView.dragMoved(_:axisConstrained:)(a4, (uint64_t)a5, a6 & 1, v17);
      objc_super v13 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      long long v14 = v17[1];
      *(_OWORD *)objc_super v13 = v17[0];
      *((_OWORD *)v13 + 1) = v14;
      *((_OWORD *)v13 + 2) = v17[2];
      v13[48] = 0;
      id result = (id)(*(uint64_t (**)(_OWORD *))((*MEMORY[0x263F8EED0] & *a3) + 0x278))(v17);
      break;
    case 3uLL:
      double v15 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)double v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      v15[48] = 1;
      id result = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a3) + 0x280))(0);
      break;
    case 4uLL:
    case 5uLL:
      double v12 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)double v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *((_OWORD *)v12 + 2) = 0u;
      v12[48] = 1;
      id result = (id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a3) + 0x280))(1);
      break;
    default:

      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x20C5CECFCLL);
  }
  return result;
}

id specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(void *a1, void *a2, void *a3, void *a4, char a5, CGFloat a6, double a7, double a8)
{
  id result = objc_msgSend(a1, sel_state);
  switch((unint64_t)result)
  {
    case 0uLL:
      return result;
    case 1uLL:
      double v20 = *(void **)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
      *(void *)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = a2;
      outlined copy of ResizeView.ActiveHandle(a2);
      outlined consume of ResizeView.ActiveHandle(v20);
      id result = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a3) + 0x270))();
      break;
    case 2uLL:
      closure #1 in ResizeView.rotate(_:activeHandle:rotation:snapDistance:snapping:)((uint64_t)a4, a5 & 1, v21, a6, a7, a8);
      double v17 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      long long v18 = v21[1];
      *(_OWORD *)double v17 = v21[0];
      *((_OWORD *)v17 + 1) = v18;
      *((_OWORD *)v17 + 2) = v21[2];
      v17[48] = 0;
      id result = (id)(*(uint64_t (**)(_OWORD *))((*MEMORY[0x263F8EED0] & *a3) + 0x278))(v21);
      break;
    case 3uLL:
      double v19 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)double v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      *((_OWORD *)v19 + 2) = 0u;
      v19[48] = 1;
      id result = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a3) + 0x280))(0);
      break;
    case 4uLL:
    case 5uLL:
      double v16 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)double v16 = 0u;
      *((_OWORD *)v16 + 1) = 0u;
      *((_OWORD *)v16 + 2) = 0u;
      v16[48] = 1;
      id result = (id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a3) + 0x280))(1);
      break;
    default:

      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x20C5CEFB8);
  }
  return result;
}

id specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(void *a1, void *a2, void *a3, void *a4, void *a5, char a6, void *a7, char a8)
{
  id result = objc_msgSend(a1, sel_state);
  switch((unint64_t)result)
  {
    case 0uLL:
      return result;
    case 1uLL:
      double v20 = *(void **)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
      *(void *)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = a2;
      outlined copy of ResizeView.ActiveHandle(a2);
      outlined consume of ResizeView.ActiveHandle(v20);
      id result = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a3) + 0x270))();
      break;
    case 2uLL:
      closure #1 in ResizeView.resizeHandleMoved(_:handle:fromCenter:aspectLocked:)(a4, a5, a6 & 1, (uint64_t)a7, a8 & 1, v21);
      double v17 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      long long v18 = v21[1];
      *(_OWORD *)double v17 = v21[0];
      *((_OWORD *)v17 + 1) = v18;
      *((_OWORD *)v17 + 2) = v21[2];
      v17[48] = 0;
      id result = (id)(*(uint64_t (**)(_OWORD *))((*MEMORY[0x263F8EED0] & *a3) + 0x278))(v21);
      break;
    case 3uLL:
      double v19 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)double v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      *((_OWORD *)v19 + 2) = 0u;
      v19[48] = 1;
      id result = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a3) + 0x280))(0);
      break;
    case 4uLL:
    case 5uLL:
      double v16 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)double v16 = 0u;
      *((_OWORD *)v16 + 1) = 0u;
      *((_OWORD *)v16 + 2) = 0u;
      v16[48] = 1;
      id result = (id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a3) + 0x280))(1);
      break;
    default:

      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x20C5CF27CLL);
  }
  return result;
}

void specialized ResizeView.init(coder:)()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_controlHandles] = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace];
  *uint64_t v1 = 0x3FF0000000000000;
  v1[1] = 0;
  v1[2] = 0;
  v1[3] = 0x3FF0000000000000;
  v1[4] = 0;
  v1[5] = 0;
  objc_super v2 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled];
  void *v2 = 0x3FF0000000000000;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0x3FF0000000000000;
  v2[4] = 0;
  v2[5] = 0;
  int v3 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_originalControlPointLocation];
  *int v3 = 0;
  v3[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer] = 0;
  unint64_t v4 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform];
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  v4[48] = 1;
  v0[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
  v0[OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis] = 0;
  id v5 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeDelta];
  *id v5 = 0;
  v5[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_20C5CF3D8()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in ResizeView.startNudging(by:largerJump:)(uint64_t a1)
{
  closure #1 in ResizeView.startNudging(by:largerJump:)(a1, v1);
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_47()
{
  return swift_release();
}

uint64_t WeakPaperPageWrapper.isEqual(_:)(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  CGFloat v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?));
  MEMORY[0x270FA5388](v34);
  id v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v7 - 8);
  double v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  double v12 = (char *)&v30 - v11;
  double v14 = MEMORY[0x270FA5388](v13);
  double v16 = (char *)&v30 - v15;
  double v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v17((char *)&v30 - v15, v1 + OBJC_IVAR____TtC8PaperKitP33_F9BA2F3895C2005D59C823F72F32582820WeakPaperPageWrapper_ref, v2, v14);
  long long v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v18(v16, 0, 1, v2);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v33, (uint64_t)v36, &demangling cache variable for type metadata for Any?);
  double v32 = v9;
  if (v37)
  {
    type metadata accessor for WeakPaperPageWrapper();
    if (swift_dynamicCast())
    {
      double v19 = v35;
      ((void (*)(char *, char *, uint64_t))v17)(v12, &v35[OBJC_IVAR____TtC8PaperKitP33_F9BA2F3895C2005D59C823F72F32582820WeakPaperPageWrapper_ref], v2);

      uint64_t v20 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v20 = 1;
LABEL_6:
  v18(v12, v20, 1, v2);
  uint64_t v21 = (uint64_t)&v6[*(int *)(v34 + 48)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v16, (uint64_t)v6, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, v21, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v22((uint64_t)v6, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    int v23 = v22(v21, 1, v2);
    if (v23 == 1) {
      double v24 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
    }
    else {
      double v24 = &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?);
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    uint64_t v26 = (uint64_t)v32;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v6, (uint64_t)v32, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v22(v21, 1, v2) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v26, v2);
      char v25 = 0;
      double v24 = &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?);
    }
    else
    {
      CGPoint v27 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v31, v21, v2);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      CGFloat v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28(v27, v2);
      double v24 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v28((char *)v26, v2);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, v24);
  return v25 & 1;
}

id WeakPaperPageWrapper.__deallocating_deinit()
{
  return WeakPaperPageWrapper.__deallocating_deinit(0, type metadata accessor for WeakPaperPageWrapper);
}

uint64_t ObjC metadata update function for WeakPaperPageWrapper()
{
  return type metadata accessor for WeakPaperPageWrapper();
}

uint64_t type metadata accessor for WeakPaperPageWrapper()
{
  uint64_t result = type metadata singleton initialization cache for WeakPaperPageWrapper;
  if (!type metadata singleton initialization cache for WeakPaperPageWrapper) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for WeakPaperPageWrapper()
{
  type metadata accessor for WeakTagged_3<TaggedPaperPage>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for SendableImage()
{
  return self;
}

void closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *), uint64_t a7, double a8, double a9, double a10)
{
  uint64_t v65 = a7;
  CGFloat v66 = a6;
  uint64_t v64 = a5;
  uint64_t v63 = a4;
  uint64_t v76 = a3;
  double v73 = a10;
  double v74 = a9;
  double v75 = a8;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v15 - 8);
  double v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  CGFloat v72 = (*(double (**)(uint64_t, uint64_t))(v19 + 56))(v18, v19);
  CGFloat v71 = v20;
  CGFloat v70 = v21;
  CGFloat v69 = v22;
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  CGFloat v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 64))(v23, v24);
  uint64_t v26 = a1[3];
  uint64_t v27 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v26);
  double v28 = (*(double (**)(uint64_t, uint64_t))(v27 + 56))(v26, v27);
  double v30 = v29;
  CGFloat v68 = v31;
  CGFloat v67 = v32;
  CGAffineTransformMakeRotation(&t1, v25);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  v80.origin.CGFloat x = v28;
  v80.origin.CGFloat y = v30;
  v80.size.CGFloat width = v68;
  v80.size.CGFloat height = v67;
  CGRect v81 = CGRectApplyAffineTransform(v80, &t1);
  CGAffineTransformMakeTranslation(&t1, v28 - v81.origin.x, v30 - v81.origin.y);
  long long v39 = *(_OWORD *)&t1.a;
  long long v40 = *(_OWORD *)&t1.c;
  long long v41 = *(_OWORD *)&t1.tx;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = tx;
  t1.tCGFloat y = ty;
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v40;
  *(_OWORD *)&t2.tCGFloat x = v41;
  CGAffineTransformConcat(&v77, &t1, &t2);
  CGAffineTransform t1 = v77;
  v82.origin.CGFloat x = v72;
  v82.origin.CGFloat y = v71;
  v82.size.CGFloat width = v70;
  v82.size.CGFloat height = v69;
  CGRect v83 = CGRectApplyAffineTransform(v82, &t1);
  CGFloat x = v83.origin.x;
  CGFloat y = v83.origin.y;
  CGFloat width = v83.size.width;
  CGFloat height = v83.size.height;
  v83.origin.CGFloat x = v83.size.height / v83.size.width;
  double v46 = (v73 + -6.0) / (v83.size.height / v83.size.width);
  double v47 = v74 + -6.0;
  double v48 = (v74 + -6.0) * v83.origin.x;
  if ((a2 & 1) == 0)
  {
    double v47 = v46;
    double v48 = v73 + -6.0;
  }
  double v49 = v48 * v75;
  double v50 = v47 * v75;
  dispatch_semaphore_t v51 = dispatch_semaphore_create(0);
  type metadata accessor for SendableImage();
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = 0;
  uint64_t v53 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v17, 1, 1, v53);
  outlined init with copy of FindResult((uint64_t)a1, (uint64_t)&t1);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v76, v12);
  unint64_t v54 = (*(unsigned __int8 *)(v13 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v55 = (v14 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = 0;
  *(void *)(v56 + 24) = 0;
  *(double *)(v56 + 32) = v50;
  *(double *)(v56 + 40) = v49;
  *(void *)(v56 + 48) = v52;
  outlined init with take of FindResult((long long *)&t1, v56 + 56);
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v56 + v54, (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  long long v57 = (CGFloat *)(v56 + v55);
  *long long v57 = x;
  v57[1] = y;
  v57[2] = width;
  v57[3] = height;
  *(void *)(v56 + ((v55 + 39) & 0xFFFFFFFFFFFFFFF8)) = v51;
  swift_retain();
  long long v58 = v51;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v17, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:), v56);
  swift_release();
  OS_dispatch_semaphore.wait()();
  CGFloat v59 = *(void **)(v52 + 16);
  if (v59)
  {
    CGFloat v60 = *(void **)(v63 + 16);
    id v61 = v59;
    objc_msgSend(v60, sel_setObject_forKey_, v61, v64);
    id v62 = v61;
    v66(v59);
  }
  swift_release();
}

uint64_t closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 + 128) = a13;
  *(double *)(v13 + 112) = a5;
  *(double *)(v13 + 120) = a6;
  *(double *)(v13 + 96) = a3;
  *(double *)(v13 + 104) = a4;
  *(void *)(v13 + 80) = a11;
  *(void *)(v13 + 88) = a12;
  *(void *)(v13 + 72) = a10;
  *(double *)(v13 + 56) = a1;
  *(double *)(v13 + 64) = a2;
  return MEMORY[0x270FA2498](closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:), 0, 0);
}

uint64_t closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  long long v15 = *(_OWORD *)(v0 + 96);
  uint64_t v3 = *(void **)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  type metadata accessor for ImageRenderer();
  id v6 = (void *)swift_allocObject();
  _OWORD v6[2] = v5;
  void v6[3] = v4;
  v6[4] = 0x4000000000000000;
  *(void *)(v0 + 136) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v6);
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  double v9 = __swift_project_boxed_opaque_existential_1(v3, v7);
  *(_OWORD *)(v0 + 16) = v15;
  *(void *)(v0 + 32) = v2;
  *(void *)(v0 + 40) = v1;
  *(unsigned char *)(v0 + 48) = 0;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v10;
  uint64_t v11 = type metadata accessor for PaperDocument(0);
  uint64_t v12 = *(void *)(v8 + 8);
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  *uint64_t v10 = v0;
  v10[1] = closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:);
  uint64_t v13 = *(void *)(v0 + 88);
  return CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)((uint64_t)v9, v13, v0 + 16, 0, 0, v7, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[9];
  uint64_t v2 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v0[19];

  OS_dispatch_semaphore.signal()();
  swift_release();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:), 0, 0);
}

uint64_t ThumbnailRenderer.reload(ref:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v6 - 8);
  uint64_t v19 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  double v12 = MEMORY[0x270FA5388](v9);
  v17[1] = *(void *)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = partial apply for closure #1 in ThumbnailRenderer.reload(ref:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  void aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_48;
  long long v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v19);
  return swift_release();
}

void closure #1 in ThumbnailRenderer.reload(ref:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(a1 + 16);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v10(v8, a2, v4, v6);
  uint64_t v11 = (objc_class *)type metadata accessor for WeakPaperPageWrapper();
  double v12 = (char *)objc_allocWithZone(v11);
  ((void (*)(char *, char *, uint64_t))v10)(&v12[OBJC_IVAR____TtC8PaperKitP33_F9BA2F3895C2005D59C823F72F32582820WeakPaperPageWrapper_ref], v8, v4);
  v14.id receiver = v12;
  v14.super_class = v11;
  id v13 = objc_msgSendSuper2(&v14, sel_init);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  objc_msgSend(v9, sel_removeObjectForKey_, v13);
}

uint64_t ThumbnailRenderer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ThumbnailRenderer()
{
  return self;
}

uint64_t ThumbnailRenderer.init()()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v6 - 8);
  *(void *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF8E0]), sel_init);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F138], v2);
  v8[1] = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

uint64_t specialized PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v60 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  long long v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v61 = *(void *)(v16 - 8);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = objc_msgSend(a4, sel_thumbnailView, v17);
  if (!v20) {
    return 0;
  }
  uint64_t v21 = v20;
  uint64_t v59 = v13;
  type metadata accessor for PPKPDFThumbnailView();
  uint64_t v22 = swift_dynamicCastClass();
  if (!v22
    || (uint64_t v23 = (void *)v22,
        (uint64_t v24 = MEMORY[0x210550400](v22 + OBJC_IVAR____TtC8PaperKit19PPKPDFThumbnailView_documentView)) == 0))
  {

    return 0;
  }
  CGFloat v25 = (char *)v24;
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v26 = swift_dynamicCastClass();
  if (!v26)
  {

    return 0;
  }
  uint64_t v57 = v12;
  uint64_t v27 = (void *)v26;
  id v58 = a3;
  id v55 = objc_msgSend(v23, sel_layoutMode);
  id v28 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v28, sel_scale);
  double v30 = v29;

  objc_msgSend(v23, sel_thumbnailSize);
  double v32 = v31;
  double v34 = v33;
  PaperDocumentView.loadPaperKitPageIfNeeded(for:)(v27);
  long long v35 = &v25[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  uint64_t v36 = v61;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v19, v35, v16);
  uint64_t v56 = v27;
  uint64_t v37 = (uint64_t)v27 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v37, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v38 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v8, 1, v38))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v11, 1, 1, v57);
LABEL_10:
    (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v16);

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    return 0;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v8[*(int *)(v38 + 20)], (uint64_t)v11, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v39 = v59;
  uint64_t v40 = v57;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v11, 1, v57) == 1) {
    goto LABEL_10;
  }
  double v43 = v30 + v30;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v15, v11, v40);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  BOOL v44 = v55 == 0;
  uint64_t v45 = static ThumbnailRenderer.shared;
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v60;
  swift_unknownObjectWeakInit();
  id v48 = v58;
  uint64_t v49 = v45;
  id v50 = v48;
  uint64_t v41 = specialized ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)((uint64_t)v15, (uint64_t)v19, v44, v49, v46, v56, v43, v32, v34);
  swift_release();

  if (v47)
  {
    type metadata accessor for PPKPDFIconCollectionViewCell_iOS_Swift();
    uint64_t v51 = swift_dynamicCastClass();
    uint64_t v52 = v61;
    if (v51)
    {
      *(void *)(v51 + OBJC_IVAR___PPKPDFIconCollectionViewCell_iOS_Swift_imageFetch) = v41;
      swift_retain();

      swift_release();
    }
    else
    {
    }
    uint64_t v53 = v59;
  }
  else
  {

    uint64_t v53 = v59;
    uint64_t v52 = v61;
  }
  (*(void (**)(char *, uint64_t))(v53 + 8))(v15, v40);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v19, v16);
  return v41;
}

uint64_t closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(void *))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  type metadata accessor for MainActor();
  id v12 = a1;
  swift_retain();
  id v13 = a3;
  uint64_t v14 = static MainActor.shared.getter();
  long long v15 = (void *)swift_allocObject();
  uint64_t v16 = MEMORY[0x263F8F500];
  v15[2] = v14;
  v15[3] = v16;
  v15[4] = a1;
  v15[5] = a2;
  v15[6] = v13;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)partial apply, (uint64_t)v15);
  swift_release();
  return a4(a1);
}

uint64_t closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  type metadata accessor for MainActor();
  v6[14] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:), v8, v7);
}

uint64_t closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)()
{
  uint64_t v1 = v0[11];
  swift_release();
  if (v1)
  {
    uint64_t v2 = (void *)v0[11];
    uint64_t v3 = v0[12] + 16;
    swift_beginAccess();
    uint64_t v4 = MEMORY[0x210550400](v3);
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      id v6 = (id)v0[13];
      id v7 = v2;
      id v8 = objc_msgSend(v5, sel_page);

      if (v8 == v6)
      {
        uint64_t v9 = self;
        id v10 = objc_msgSend(v5, sel_imageView);
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = v5;
        *(void *)(v11 + 24) = v7;
        v0[6] = partial apply for closure #1 in closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:);
        v0[7] = v11;
        v0[2] = MEMORY[0x263EF8330];
        v0[3] = 1107296256;
        v0[4] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        v0[5] = &block_descriptor_34_0;
        id v12 = _Block_copy(v0 + 2);
        id v13 = v7;
        id v14 = v5;
        swift_release();
        objc_msgSend(v9, sel_transitionWithView_duration_options_animations_completion_, v10, 5242880, v12, 0, 0.2);

        _Block_release(v12);
        uint64_t v5 = v10;
      }
      else
      {
      }
    }
  }
  long long v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

void closure #1 in closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_imageView);
  objc_msgSend(v3, sel_setImage_, a2);
}

Swift::Void __swiftcall PPKPDFThumbnailsCollectionView.reload(_:)(PDFPage *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  id v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v14 = swift_dynamicCastClass();
  if (!v14) {
    goto LABEL_4;
  }
  uint64_t v15 = v14 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v15, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  uint64_t v16 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v6, 1, v16))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
LABEL_4:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    goto LABEL_6;
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&v6[*(int *)(v16 + 20)], (uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PageId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  ThumbnailRenderer.reload(ref:)((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_6:
  uint64_t v17 = (objc_class *)type metadata accessor for PPKPDFThumbnailsCollectionView();
  v19.id receiver = v2;
  v19.super_class = v17;
  [(PDFPage *)&v19 reloadPage:a1];
}

id PPKPDFThumbnailsCollectionView.__deallocating_deinit(uint64_t a1)
{
  return WeakPaperPageWrapper.__deallocating_deinit(a1, type metadata accessor for PPKPDFThumbnailsCollectionView);
}

id WeakPaperPageWrapper.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.id receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t type metadata accessor for PPKPDFThumbnailsCollectionView()
{
  return self;
}

uint64_t sub_20C5D1C6C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for closure #1 in ThumbnailRenderer.reload(ref:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>)
                 - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  closure #1 in ThumbnailRenderer.reload(ref:)(v2, v3);
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_48()
{
  return swift_release();
}

uint64_t sub_20C5D1DBC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t specialized ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6, double a7, double a8, double a9)
{
  uint64_t v64 = a4;
  int v59 = a3;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x270FA5388](v60);
  uint64_t v61 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v57 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v54 = v17;
  uint64_t v56 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v18 - 8);
  id v62 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (uint64_t (*)(void *))swift_allocObject();
  *((void *)v24 + 2) = a5;
  *((void *)v24 + 3) = a6;
  *((void *)v24 + 4) = UnknownCanvasElementView.flags.modify;
  *((void *)v24 + 5) = 0;
  type metadata accessor for PaperDocument(0);
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, (void (*)(uint64_t))type metadata accessor for PaperDocument);
  uint64_t v63 = a5;
  swift_retain();
  id v25 = a6;
  uint64_t v55 = a2;
  WeakTagged_3.subscript.getter();
  if (v68)
  {
    id v53 = v25;
    outlined init with take of FindResult(&aBlock, (uint64_t)v73);
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    v26(v23, a1, v20);
    uint64_t v27 = (objc_class *)type metadata accessor for WeakPaperPageWrapper();
    id v28 = (char *)objc_allocWithZone(v27);
    v26(&v28[OBJC_IVAR____TtC8PaperKitP33_F9BA2F3895C2005D59C823F72F32582820WeakPaperPageWrapper_ref], (uint64_t)v23, v20);
    v72.id receiver = v28;
    v72.super_class = v27;
    id v29 = objc_msgSendSuper2(&v72, sel_init);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    double v30 = *(void **)(v64 + 16);
    id v31 = objc_msgSend(v30, sel_objectForKey_, v29);
    if (!v31)
    {
      objc_msgSend(v30, sel_removeObjectForKey_, v29);
      outlined init with copy of FindResult((uint64_t)v73, (uint64_t)v71);
      uint64_t v43 = v57;
      BOOL v44 = v56;
      uint64_t v45 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v55, v58);
      unint64_t v46 = (*(unsigned __int8 *)(v43 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      unint64_t v47 = (v54 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v48 = (v47 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v49 = swift_allocObject();
      outlined init with take of FindResult(v71, v49 + 16);
      *(unsigned char *)(v49 + 56) = v59 & 1;
      *(double *)(v49 + 64) = a7;
      *(double *)(v49 + 72) = a8;
      *(double *)(v49 + 80) = a9;
      (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v49 + v46, v44, v45);
      *(void *)(v49 + v47) = v64;
      *(void *)(v49 + v48) = v29;
      id v50 = (uint64_t (**)(void *))(v49 + ((v48 + 15) & 0xFFFFFFFFFFFFFFF8));
      *id v50 = partial apply for closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:);
      v50[1] = v24;
      CGFloat v69 = partial apply for closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:);
      uint64_t v70 = v49;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      CGFloat v67 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      CGFloat v68 = &block_descriptor_24;
      _Block_copy(&aBlock);
      uint64_t v65 = MEMORY[0x263F8EE78];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      swift_retain();
      id v51 = v29;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      uint64_t v42 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      OS_dispatch_queue.async(execute:)();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      swift_release();
      return v42;
    }
    double v32 = v31;
    uint64_t v33 = type metadata accessor for TaskPriority();
    uint64_t v34 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v62, 1, 1, v33);
    type metadata accessor for MainActor();
    id v35 = v32;
    uint64_t v36 = v63;
    swift_retain();
    id v37 = v53;
    id v38 = v35;
    uint64_t v39 = static MainActor.shared.getter();
    uint64_t v40 = (void *)swift_allocObject();
    uint64_t v41 = MEMORY[0x263F8F500];
    v40[2] = v39;
    v40[3] = v41;
    v40[4] = v32;
    v40[5] = v36;
    v40[6] = v37;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v34, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:), (uint64_t)v40);

    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for PaperPage?);
  }
  swift_release();
  return 0;
}

uint64_t sub_20C5D254C()
{
  swift_release();

  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(void *a1)
{
  return closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(uint64_t (**)(void *))(v1 + 32));
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C5D25E8()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 88) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  swift_release();
  return MEMORY[0x270FA0238](v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

void partial apply for closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v5 = *(unsigned char *)(v0 + 56);
  double v6 = *(double *)(v0 + 64);
  double v7 = *(double *)(v0 + 72);
  double v8 = *(double *)(v0 + 80);
  uint64_t v9 = v0 + v2;
  uint64_t v10 = *(void *)(v0 + v3);
  uint64_t v11 = *(void *)(v0 + v4);
  uint64_t v12 = v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v13 = *(void (**)(void *))v12;
  uint64_t v14 = *(void *)(v12 + 8);
  closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)((void *)(v0 + 16), v5, v9, v10, v11, v13, v14, v6, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_20C5D2888()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)()
{
  closure #1 in closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_20C5D28D0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 96) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0 + 7;
  uint64_t v9 = (char *)v0 + v3;
  long long v15 = *(_OWORD *)((char *)v0 + v4);
  uint64_t v10 = *(void *)((char *)v0 + v4 + 16);
  uint64_t v11 = *(void *)((char *)v0 + v4 + 24);
  uint64_t v12 = *(void *)((char *)v0 + ((v4 + 39) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = swift_task_alloc();
  *(void *)(v1 + 16) = v13;
  *(void *)uint64_t v13 = v1;
  *(void *)(v13 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(void *)(v13 + 128) = v12;
  *(void *)(v13 + 112) = v10;
  *(void *)(v13 + 120) = v11;
  *(_OWORD *)(v13 + 96) = v15;
  *(void *)(v13 + 80) = v8;
  *(void *)(v13 + 88) = v9;
  *(void *)(v13 + 72) = v7;
  *(void *)(v13 + 56) = v5;
  *(void *)(v13 + 64) = v6;
  return MEMORY[0x270FA2498](closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:), 0, 0);
}

uint64_t objectdestroy_26Tm()
{
  swift_unknownObjectRelease();

  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t type metadata accessor for PKGraphHostingViewController(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKGraphHostingViewController);
}

uint64_t type metadata completion function for PKGraphHostingViewController()
{
  return swift_initClassMetadata2();
}

uint64_t key path getter for GraphableExpressionState.expression : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 16);
  return swift_retain();
}

uint64_t key path setter for GraphableExpressionState.expression : GraphableExpressionState()
{
  return swift_release();
}

uint64_t key path getter for GraphableExpressionState.enabled : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 24);
  return result;
}

uint64_t key path setter for GraphableExpressionState.enabled : GraphableExpressionState()
{
  return swift_release();
}

uint64_t key path getter for GraphableExpressionState.color : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 32);
  return swift_retain();
}

uint64_t key path setter for GraphableExpressionState.color : GraphableExpressionState()
{
  return swift_release();
}

uint64_t key path getter for GraphableExpressionState.graphableVariable : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable + 8);
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for GraphableExpressionState.graphableVariable : GraphableExpressionState()
{
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for GraphableExpressionState.shouldBeObserved : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved);
  return result;
}

uint64_t key path setter for GraphableExpressionState.shouldBeObserved : GraphableExpressionState()
{
  return swift_release();
}

uint64_t specialized closure #1 in GraphElement.graphables<A>(in:)()
{
  return Ref.subscript.getter();
}

void specialized GraphElement.imageRenderingCalculateGraph<A>(in:document:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v78 = a1;
  uint64_t v73 = type metadata accessor for CalculateExpression.Base();
  CGFloat v68 = *(void (***)(char *, void, uint64_t))(v73 - 8);
  MEMORY[0x270FA5388](v73);
  objc_super v72 = (char *)v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v76 = (char *)v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  CGFloat v71 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  CGFloat v66 = (char *)v63 - v11;
  uint64_t v12 = type metadata accessor for GraphableExpression();
  uint64_t v74 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  CGFloat v20 = *(double *)&v79;
  CGFloat v21 = v80;
  CGFloat v22 = v81;
  CGFloat v23 = *(double *)&v82;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    a2 = CanvasCalculateDocument.proxyDocumentRepresentation.getter(ObjectType, a3);
  }
  id v75 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, 1);
  uint64_t v84 = MEMORY[0x263F8EE78];
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v3 + *(int *)(v19 + 28), v15);
  MEMORY[0x270FA5388](v25);
  v63[-2] = v78;
  uint64_t v26 = CROrderedSet.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    unint64_t v28 = (*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
    v63[0] = v26;
    uint64_t v29 = v26 + v28;
    uint64_t v78 = *(void *)(v74 + 72);
    uint64_t v74 = v70 + 48;
    uint64_t v65 = (void (**)(char *, uint64_t, uint64_t))(v70 + 32);
    v63[2] = a2 + 56;
    uint64_t v64 = (void (**)(uint64_t, uint64_t))(v70 + 8);
    uint64_t v70 = *MEMORY[0x263F2FCD0];
    unsigned int v69 = *MEMORY[0x263F2FBD0];
    v68 += 13;
    long long v67 = xmmword_20C832C20;
    do
    {
      outlined init with copy of GraphableExpression(v29, (uint64_t)v14);
      if (!a2 || (swift_retain(), uint64_t v30 = CanvasCalculateDocumentProxy.expression(for:)(), swift_release(), !v30))
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        uint64_t v31 = (uint64_t)v76;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        uint64_t v32 = v77;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v74)(v31, 1, v77) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v31, &demangling cache variable for type metadata for UUID?);
        }
        else
        {
          uint64_t v33 = v66;
          (*v65)(v66, v31, v32);
          if (a2)
          {
            swift_retain();
            uint64_t v34 = (uint64_t)v33;
            CanvasCalculateDocumentProxy.updateDocumentIfNecessary()();
            swift_beginAccess();
            uint64_t v35 = *(void *)(a2 + 56);
            if (*(void *)(v35 + 16))
            {
              unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
              if (v37)
              {
                uint64_t v38 = *(void *)(v35 + 56) + 40 * v36;
                uint64_t v39 = *(void **)v38;
                uint64_t v40 = *(void *)(v38 + 8);
                v63[1] = *(void *)(v38 + 16);
                swift_endAccess();
                id v41 = v39;
                swift_retain_n();
                swift_bridgeObjectRetain();
                outlined consume of SortableCalculateExpression?(v39, v40);
                swift_release();
                (*v64)(v34, v77);
                goto LABEL_16;
              }
            }
            swift_endAccess();
            swift_release();
            (*v64)(v34, v32);
          }
          else
          {
            (*v64)((uint64_t)v33, v32);
          }
        }
        CRRegister.wrappedValue.getter();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v67;
        uint64_t v43 = (void *)v70;
        *(void *)(inited + 32) = v70;
        *(void *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        id v44 = v75;
        *(void *)(inited + 40) = v75;
        id v45 = v43;
        id v46 = v44;
        specialized Dictionary.init(dictionaryLiteral:)(inited);
        UUID.init()();
        (*v68)(v72, v69, v73);
        type metadata accessor for CalculateExpression();
        swift_allocObject();
        CalculateExpression.init(_:options:base:id:)();
      }
LABEL_16:
      *(double *)&CGRect v82 = COERCE_DOUBLE(&type metadata for PencilAndPaperFeatureFlags);
      unint64_t v83 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      LOBYTE(v79) = 8;
      swift_retain();
      char v47 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
      if ((v47 & 1) == 0) {
        goto LABEL_36;
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      unint64_t v48 = (unint64_t)v79;
      double v49 = v80;
      swift_bridgeObjectRelease();
      uint64_t v50 = HIBYTE(*(void *)&v49) & 0xFLL;
      if ((*(void *)&v49 & 0x2000000000000000) == 0) {
        uint64_t v50 = v48 & 0xFFFFFFFFFFFFLL;
      }
      if (v50)
      {
        CRRegister.wrappedValue.getter();
        id v51 = v79;
        double v52 = v80;
      }
      else
      {
        uint64_t v53 = *(void *)(CalculateExpression.graphableVariables.getter() + 16);
        swift_bridgeObjectRelease();
        if (!v53) {
          goto LABEL_25;
        }
        uint64_t v54 = (double *)CalculateExpression.graphableVariables.getter();
        if (!*((void *)v54 + 2))
        {
          swift_bridgeObjectRelease();
LABEL_25:
          id v51 = 0;
          double v52 = 0.0;
          goto LABEL_26;
        }
        id v51 = (void *)*((void *)v54 + 4);
        double v52 = v54[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
LABEL_26:
      swift_bridgeObjectRetain();
      uint64_t v55 = CalculateExpression.graphableVariable.getter();
      if (v52 != 0.0)
      {
        if (v56)
        {
          if (v51 == (void *)v55 && *(void *)&v52 == v56)
          {
            swift_bridgeObjectRelease_n();
LABEL_35:
            swift_bridgeObjectRelease();
            goto LABEL_36;
          }
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v57) {
            goto LABEL_35;
          }
        }
        else
        {
LABEL_32:
          swift_bridgeObjectRelease();
        }
        CalculateExpression.graphableVariable.setter();
        goto LABEL_36;
      }
      if (v56) {
        goto LABEL_32;
      }
LABEL_36:
      type metadata accessor for CalculateGraphExpression();
      swift_allocObject();
      swift_retain();
      CalculateGraphExpression.init(_:color:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.getter();
      uint64_t v58 = v79;
      if (*(double *)&v79 != 0.0)
      {
        id v59 = objc_allocWithZone(MEMORY[0x263F825C8]);
        MEMORY[0x21054A5D0](objc_msgSend(v59, sel_initWithCGColor_, v58, v63[0]));
        dispatch thunk of CalculateGraphExpression.color.setter();
      }
      uint64_t v60 = swift_retain();
      MEMORY[0x21054D330](v60);
      if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release_n();
      swift_release();
      outlined destroy of GraphElement((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
      v29 += v78;
      --v27;
    }
    while (v27);
  }
  swift_bridgeObjectRelease();
  v85.origin.CGFloat x = v20;
  v85.origin.CGFloat y = v21;
  v85.size.CGFloat width = v22;
  v85.size.CGFloat height = v23;
  if (CGRectIsEmpty(v85)) {
    goto LABEL_44;
  }
  v86.origin.CGFloat x = v20;
  v86.origin.CGFloat y = v21;
  v86.size.CGFloat width = v22;
  v86.size.CGFloat height = v23;
  double MinX = CGRectGetMinX(v86);
  v87.origin.CGFloat x = v20;
  v87.origin.CGFloat y = v21;
  v87.size.CGFloat width = v22;
  v87.size.CGFloat height = v23;
  if (MinX > CGRectGetMaxX(v87))
  {
    __break(1u);
  }
  else
  {
    v88.origin.CGFloat x = v20;
    v88.origin.CGFloat y = v21;
    v88.size.CGFloat width = v22;
    v88.size.CGFloat height = v23;
    double MinY = CGRectGetMinY(v88);
    v89.origin.CGFloat x = v20;
    v89.origin.CGFloat y = v21;
    v89.size.CGFloat width = v22;
    v89.size.CGFloat height = v23;
    if (MinY <= CGRectGetMaxY(v89))
    {
LABEL_44:
      static Animation.easeIn(duration:)();
      type metadata accessor for CalculateGraph();
      swift_allocObject();
      CalculateGraph.init(graphExpressions:xAxisBounds:yAxisBounds:animation:isSelected:)();
      dispatch thunk of CalculateGraph.isSelected.setter();

      swift_release();
      return;
    }
  }
  __break(1u);
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    *uint64_t v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?)
                 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  uint64_t result = outlined init with take of PageId?(v10, a2);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  unint64_t *v2 = v5;
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((unint64_t)v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    outlined init with take of WeakObserver((uint64_t)&v5[2 * a1 + 4], a2);
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
      v5[2] = v7;
      unint64_t *v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t @objc PKGraphHostingViewController._canShowWhileLocked()()
{
  return 1;
}

uint64_t PKGraphHostingViewController.__allocating_init(rootView:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CalculateGraphView();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_allocWithZone(v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v8 = UIHostingController.init(rootView:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return v8;
}

void *PKGraphHostingViewController.__allocating_init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalculateGraphView();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v9 = (void *)UIHostingController.init(coder:rootView:)();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  id v11 = v9;
  v10(a2, v4);
  if (v9) {

  }
  return v9;
}

id @objc PKGraphHostingViewController.init(coder:)(void *a1, uint64_t a2, uint64_t a3)
{
  v5.id receiver = a1;
  v5.super_class = (Class)type metadata accessor for PKGraphHostingViewController(0);
  return objc_msgSendSuper2(&v5, sel_initWithCoder_, a3);
}

id PKGraphHostingViewController.__deallocating_deinit()
{
  return PKGraphHostingViewController.__deallocating_deinit(type metadata accessor for PKGraphHostingViewController);
}

uint64_t ObjC metadata update function for PKGraphHostingViewController()
{
  return type metadata accessor for PKGraphHostingViewController(0);
}

void GraphCanvasElementViewController.setupGraphView(canvasElement:frame:expressions:isSelected:)(double a1, double a2, double a3, double a4)
{
  objc_super v5 = v4;
  uint64_t v40 = type metadata accessor for CalculateGraphView();
  uint64_t v10 = *(void *)(v40 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v40);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  Capsule<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  CGFloat v19 = v41;
  CGFloat v20 = v42;
  CGFloat v22 = v43;
  CGFloat v21 = v44;
  outlined destroy of GraphElement((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for GraphElement);
  v45.origin.CGFloat x = v19;
  v45.origin.CGFloat y = v20;
  v45.size.CGFloat width = v22;
  v45.size.CGFloat height = v21;
  IsEmptCGFloat y = CGRectIsEmpty(v45);
  swift_bridgeObjectRetain();
  if (IsEmpty)
  {
    static Animation.easeIn(duration:)();
    type metadata accessor for CalculateGraph();
    swift_allocObject();
    *(void *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph] = CalculateGraph.init(graphExpressions:xAxisBounds:yAxisBounds:animation:isSelected:)();
    goto LABEL_6;
  }
  double v38 = a1;
  double v39 = a2;
  v46.origin.CGFloat x = v19;
  v46.origin.CGFloat y = v20;
  v46.size.CGFloat width = v22;
  v46.size.CGFloat height = v21;
  double MinX = CGRectGetMinX(v46);
  v47.origin.CGFloat x = v19;
  v47.origin.CGFloat y = v20;
  v47.size.CGFloat width = v22;
  v47.size.CGFloat height = v21;
  if (MinX > CGRectGetMaxX(v47))
  {
    __break(1u);
    goto LABEL_13;
  }
  double v37 = a3;
  double v25 = a4;
  v48.origin.CGFloat x = v19;
  v48.origin.CGFloat y = v20;
  v48.size.CGFloat width = v22;
  v48.size.CGFloat height = v21;
  double MinY = CGRectGetMinY(v48);
  v49.origin.CGFloat x = v19;
  v49.origin.CGFloat y = v20;
  v49.size.CGFloat width = v22;
  v49.size.CGFloat height = v21;
  if (MinY > CGRectGetMaxY(v49))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  static Animation.easeIn(duration:)();
  type metadata accessor for CalculateGraph();
  swift_allocObject();
  *(void *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph] = CalculateGraph.init(graphExpressions:xAxisBounds:yAxisBounds:animation:isSelected:)();
  a4 = v25;
  a3 = v37;
  a1 = v38;
  a2 = v39;
LABEL_6:
  swift_release();
  if (*(void *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph])
  {
    swift_retain_n();
    CalculateGraphView.init(graph:)();
    id v27 = objc_allocWithZone((Class)type metadata accessor for PKGraphHostingViewController(0));
    uint64_t v28 = v40;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v40);
    uint64_t v29 = (void *)UIHostingController.init(rootView:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v28);
    id v30 = objc_msgSend(v29, sel_view);
    if (v30)
    {
      uint64_t v31 = v30;
      objc_msgSend(v30, sel_setFrame_, a1, a2, a3, a4);
      uint64_t v32 = *(void **)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_hostingController];
      *(void *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_hostingController] = v29;
      id v33 = v29;

      objc_msgSend(v31, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      objc_msgSend(v5, sel_addChildViewController_, v33);
      id v34 = objc_msgSend(v5, sel_view);
      if (v34)
      {
        uint64_t v35 = v34;
        objc_msgSend(v34, sel_addSubview_, v31);

        objc_msgSend(v33, sel_didMoveToParentViewController_, v5);
        unint64_t v36 = *(void **)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView];
        *(void *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView] = v31;

        swift_release();
        return;
      }
      goto LABEL_14;
    }

    swift_release();
  }
}

id GraphCanvasElementViewController.__deallocating_deinit()
{
  return PKGraphHostingViewController.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for GraphCanvasElementViewController);
}

id PKGraphHostingViewController.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.id receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for GraphCanvasElementViewController()
{
  return self;
}

uint64_t GraphCanvasElementView.cachedGraphableExpressionsState.getter()
{
  uint64_t v1 = direct field offset for GraphCanvasElementView.$__lazy_storage_$_cachedGraphableExpressionsState;
  if (*(void *)&v0[direct field offset for GraphCanvasElementView.$__lazy_storage_$_cachedGraphableExpressionsState])
  {
    uint64_t v2 = *(void *)&v0[direct field offset for GraphCanvasElementView.$__lazy_storage_$_cachedGraphableExpressionsState];
  }
  else
  {
    type metadata accessor for GraphableExpressionsState(0);
    uint64_t v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    *(void *)(v2 + 24) = MEMORY[0x263F8EE78];
    objc_super v3 = v0;
    ObservationRegistrar.init()();
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
    objc_super v5 = v3;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();

    GraphableExpressionsState.update()();
    *(void *)&v0[v1] = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void @objc GraphCanvasElementView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized GraphCanvasElementView.init(coder:)();
}

void *GraphCanvasElementView.elementViewController.getter()
{
  uint64_t v1 = direct field offset for GraphCanvasElementView.graphViewController;
  uint64_t v2 = *(void **)&v0[direct field offset for GraphCanvasElementView.graphViewController];
  if (!v2)
  {
    id v3 = (objc_class *)type metadata accessor for GraphCanvasElementViewController();
    uint64_t v4 = (char *)objc_allocWithZone(v3);
    *(void *)&v4[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph] = 0;
    *(void *)&v4[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_hostingController] = 0;
    *(void *)&v4[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView] = 0;
    v10.id receiver = v4;
    v10.super_class = v3;
    objc_super v5 = v0;
    id v6 = objc_msgSendSuper2(&v10, sel_initWithNibName_bundle_, 0, 0);
    objc_msgSend(v6, sel_setView_, v5, v10.receiver, v10.super_class);

    id v7 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v6;

    uint64_t v2 = *(void **)&v0[v1];
  }
  id v8 = v2;
  return v2;
}

Swift::Void __swiftcall GraphCanvasElementView.willMove(toSuperview:)(UIView_optional *toSuperview)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PKDrawing();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  id v8 = (objc_class *)type metadata accessor for GraphCanvasElementView(0);
  v39.id receiver = v1;
  v39.super_class = v8;
  [(UIView_optional *)&v39 willMoveToSuperview:toSuperview];
  if (toSuperview) {
    return;
  }
  uint64_t v9 = (void *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
  if (!v9) {
    return;
  }
  objc_super v10 = v9;
  uint64_t v11 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v9) + 0x2F8))();
  uint64_t v13 = v12;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);

  if (!v15)
  {
LABEL_20:

    return;
  }
  id v16 = objc_msgSend(v15, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  PKDrawing._bridgeToObjectiveC()(v17);
  CGFloat v19 = v18;
  id v20 = objc_msgSend(v18, sel_uuid);

  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  double v38 = &unk_26C1C1038;
  uint64_t v21 = swift_dynamicCastObjCProtocolConditional();
  if (!v21
    || ((CGFloat v22 = (void *)v21,
         swift_getObjectType(),
         type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (CGFloat v23 = v22): (CGFloat v23 = 0), !v23))
  {
    swift_unknownObjectRelease();
    goto LABEL_20;
  }
  uint64_t v24 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v24 != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v25 = static CalculateDocumentController.controllers;
  if (!*((void *)static CalculateDocumentController.controllers + 2)) {
    goto LABEL_23;
  }
  swift_unknownObjectRetain();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
  if ((v27 & 1) == 0)
  {
    swift_unknownObjectRelease();
LABEL_23:
    swift_endAccess();

    swift_unknownObjectRelease_n();
    return;
  }
  uint64_t v28 = *(void **)(v25[7] + 8 * v26);
  swift_endAccess();
  uint64_t v29 = v28;
  swift_unknownObjectRelease_n();
  id v30 = &v29[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers];
  swift_beginAccess();
  uint64_t v31 = *(void *)(*(void *)v30 + 16);
  if (v31)
  {
    uint64_t v32 = *(void *)v30 + 32;
    swift_bridgeObjectRetain();
    for (unint64_t i = 0; i != v31; ++i)
    {
      uint64_t v34 = MEMORY[0x210550400](v32);
      if (v34)
      {
        uint64_t v35 = v34;
        swift_unknownObjectRelease();
        if ((char *)v35 == v2)
        {
          swift_bridgeObjectRelease();
          swift_beginAccess();
          specialized Array.remove(at:)(i, (uint64_t)v37);
          outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v37);
          swift_endAccess();
          goto LABEL_25;
        }
      }
      v32 += 16;
    }
    swift_bridgeObjectRelease();
  }
LABEL_25:
  CalculateDocumentController.updateGraphableVariables()();

  swift_unknownObjectRelease();
}

void @objc GraphCanvasElementView.willMove(toSuperview:)(void *a1, uint64_t a2, UIView_optional *a3)
{
  uint64_t v5 = a3;
  id v6 = a1;
  GraphCanvasElementView.willMove(toSuperview:)(a3);
}

Swift::Void __swiftcall GraphCanvasElementView.didMoveToSuperview()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (objc_class *)type metadata accessor for GraphCanvasElementView(0);
  v28.id receiver = v0;
  v28.super_class = v9;
  objc_msgSendSuper2(&v28, sel_didMoveToSuperview);
  id v10 = objc_msgSend(v0, sel_superview);

  uint64_t v11 = direct field offset for GraphCanvasElementView.graphViewController;
  uint64_t v12 = *(char **)((char *)v1 + direct field offset for GraphCanvasElementView.graphViewController);
  if (v10)
  {
    if (!v12)
    {
      uint64_t v13 = (objc_class *)type metadata accessor for GraphCanvasElementViewController();
      uint64_t v14 = (char *)objc_allocWithZone(v13);
      *(void *)&v14[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph] = 0;
      *(void *)&v14[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_hostingController] = 0;
      *(void *)&v14[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView] = 0;
      v27.id receiver = v14;
      v27.super_class = v13;
      uint64_t v15 = v1;
      id v16 = objc_msgSendSuper2(&v27, sel_initWithNibName_bundle_, 0, 0);
      objc_msgSend(v16, sel_setView_, v15);

      uint64_t v17 = *(void **)((char *)v1 + v11);
      *(void *)((char *)v1 + v11) = v16;
    }
    specialized CanvasElementView.updateGestures()();
    specialized CanvasElementView.updateFrame()();
    uint64_t v18 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    CGFloat v19 = (void *)MEMORY[0x263F8EED0];
    if (v18)
    {
      id v20 = v18;
      (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v18) + 0x680))();
    }
    uint64_t v21 = (char *)v1 + *(void *)((*v19 & *v1) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v21, v5);
    lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
    Capsule<>.root.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined destroy of GraphElement((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for GraphElement);
    GraphCanvasElementView.cachedGraphableExpressionsState.getter();
    GraphableExpressionsState.update()();
    swift_release();
    GraphCanvasElementView.updateGraphView()();
  }
  else
  {
    if (!v12) {
      goto LABEL_11;
    }
    CGFloat v22 = *(void **)&v12[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_hostingController];
    if (!v22) {
      goto LABEL_10;
    }
    CGFloat v23 = v12;
    id v24 = v22;
    objc_msgSend(v24, sel_willMoveToParentViewController_, 0);
    objc_msgSend(*(id *)&v23[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView], sel_removeFromSuperview);
    objc_msgSend(v24, sel_didMoveToParentViewController_, 0);
    objc_msgSend(v24, sel_removeFromParentViewController);

    uint64_t v12 = *(char **)((char *)v1 + v11);
    if (v12)
    {
LABEL_10:
      objc_msgSend(v12, sel_removeFromParentViewController);
      double v25 = *(void **)((char *)v1 + v11);
    }
    else
    {
LABEL_11:
      double v25 = 0;
    }
    *(void *)((char *)v1 + v11) = 0;
  }
}

void @objc GraphCanvasElementView.didMoveToSuperview()(void *a1)
{
  id v1 = a1;
  GraphCanvasElementView.didMoveToSuperview()();
}

Swift::Void __swiftcall GraphCanvasElementView.didUpdateExpression(_:identifier:)(Swift::String _, Swift::String identifier)
{
  uint64_t v3 = v2;
  object = identifier._object;
  uint64_t countAndFlagsBits = identifier._countAndFlagsBits;
  uint64_t v6 = _._object;
  uint64_t v7 = _._countAndFlagsBits;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v26 = 0;
  uint64_t v20 = countAndFlagsBits;
  uint64_t v21 = object;
  uint64_t v22 = v7;
  CGFloat v23 = v6;
  id v24 = &v26;
  uint64_t v12 = (void *)MEMORY[0x263F8EED0];
  uint64_t v13 = (char *)v3 + *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  if (v26 == 1)
  {
    uint64_t v14 = MEMORY[0x210550400]((char *)v3 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      (*(void (**)(unsigned char *, char *, uint64_t))(v9 + 16))(v11, v13, v8);
      v25[0] = 4;
      id v16 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v12 & *v15) + 0x550);
      uint64_t v17 = type metadata accessor for GraphElement();
      uint64_t v18 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
      v16(v11, v25, v17, v18);
      v25[0] = 4;
      (*(void (**)(unsigned char *))((*v12 & *v15) + 0x530))(v25);

      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
}

uint64_t closure #1 in GraphCanvasElementView.didUpdateExpression(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  CGRect v48 = a6;
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v66 = type metadata accessor for GraphableExpression();
  uint64_t v9 = MEMORY[0x270FA5388](v66);
  id v51 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v58 = (char *)v47 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v65 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v60 = (char *)v47 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphableExpression>?);
  MEMORY[0x270FA5388](v16 - 8);
  id v59 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v64 = *(void (***)(char *, uint64_t))(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>.Iterator);
  v47[0] = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  CGFloat v23 = (char *)v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  uint64_t v71 = a1;
  Capsule.Ref<>.subscript.getter();
  id v24 = v60;
  swift_release();
  CROrderedSet.makeIterator()();
  double v25 = v20;
  char v26 = v59;
  v64[1](v25, v18);
  uint64_t v61 = v23;
  uint64_t v62 = v21;
  CROrderedSet.Iterator.next()();
  uint64_t v27 = v63;
  uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
  uint64_t v57 = v63 + 48;
  if (v56(v26, 1, v12) != 1)
  {
    id v30 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v29 = v27 + 32;
    uint64_t v54 = (void (**)(char *, char *, uint64_t))(v29 - 16);
    uint64_t v55 = v30;
    uint64_t v63 = v29;
    uint64_t v64 = (void (**)(char *, uint64_t))(v29 - 24);
    uint64_t v50 = a3;
    uint64_t v49 = a2;
    v30(v24, v26, v12);
    while (1)
    {
      lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
      uint64_t v33 = (uint64_t)v58;
      Capsule.Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      uint64_t v34 = v24;
      uint64_t v36 = v69;
      uint64_t v35 = v70;
      outlined destroy of GraphElement(v33, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
      if (v36 == a2 && v35 == a3)
      {
        swift_bridgeObjectRelease();
        (*v54)(v65, v34, v12);
      }
      else
      {
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        objc_super v39 = v65;
        (*v54)(v65, v34, v12);
        if ((v38 & 1) == 0)
        {
          uint64_t v31 = *v64;
          (*v64)(v39, v12);
          goto LABEL_5;
        }
      }
      uint64_t v40 = (uint64_t)v51;
      Capsule.Ref.subscript.getter();
      CRRegister.wrappedValue.getter();
      uint64_t v42 = v69;
      uint64_t v41 = v70;
      outlined destroy of GraphElement(v40, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
      uint64_t v44 = v52;
      uint64_t v43 = v53;
      if (v42 == v52 && v41 == v53)
      {
        swift_bridgeObjectRelease();
        uint64_t v31 = *v64;
        (*v64)(v65, v12);
LABEL_19:
        a3 = v50;
        a2 = v49;
LABEL_5:
        uint64_t v32 = v59;
        id v24 = v60;
        v31(v60, v12);
        goto LABEL_6;
      }
      char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v31 = *v64;
      (*v64)(v65, v12);
      if (v45) {
        goto LABEL_19;
      }
      swift_bridgeObjectRetain();
      id v24 = v60;
      CGRect v46 = (void (*)(uint64_t *, void))Capsule.Ref.subscript.modify();
      uint64_t v67 = v44;
      uint64_t v68 = v43;
      CRRegister.wrappedValue.setter();
      v46(&v69, 0);
      v31(v24, v12);
      *CGRect v48 = 1;
      a3 = v50;
      a2 = v49;
      uint64_t v32 = v59;
LABEL_6:
      CROrderedSet.Iterator.next()();
      if (v56(v32, 1, v12) == 1) {
        return (*(uint64_t (**)(char *, uint64_t))(v47[0] + 8))(v61, v62);
      }
      v55(v24, v32, v12);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v47[0] + 8))(v61, v62);
}

double GraphCanvasElementView.graphViewFrame.getter()
{
  objc_msgSend(v0, sel_bounds);
  double v2 = result;
  if ((v3 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    double result = 0.0;
  }
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0) {
    return 0.0;
  }
  return result;
}

unint64_t GraphCanvasElementView.orphanedGraphables.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v56 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for GraphableExpression();
  uint64_t v7 = *(void *)(v66 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v66);
  uint64_t v61 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v50 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  unint64_t v62 = *(void *)(v12 - 8);
  uint64_t v63 = (unsigned int (**)(void, void, void))v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v60 = (void (**)(char *, uint64_t, uint64_t))((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v58 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v58);
  uint64_t v67 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v15 = *(void *)(v57 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v57);
  id v59 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v50 - v18;
  uint64_t v20 = v0;
  uint64_t v21 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (!v21) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v22 = v21;
  uint64_t v55 = v7;
  uint64_t v64 = v3;
  CGFloat v23 = (void *)MEMORY[0x263F8EED0];
  uint64_t v24 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v21) + 0x750))();
  uint64_t v68 = v25;
  uint64_t v65 = v24;
  if (!v24)
  {

    return MEMORY[0x263F8EE78];
  }
  id v51 = v22;
  char v26 = (char *)v20 + *(void *)((*v23 & *v20) + 0x380);
  swift_beginAccess();
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v27 = v57;
  v52(v19, v26, v57);
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  objc_super v28 = v67;
  Capsule<>.root.getter();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v53 = v15 + 8;
  uint64_t v54 = v29;
  v29(v19, v27);
  id v30 = v59;
  v52(v59, v26, v27);
  uint64_t v31 = &v28[*(int *)(v58 + 28)];
  unint64_t v33 = v62;
  uint64_t v32 = v63;
  uint64_t v34 = v60;
  uint64_t v35 = (*(uint64_t (**)(char *, char *, void))(v62 + 16))((char *)v60, v31, v63);
  MEMORY[0x270FA5388](v35);
  *(&v50 - 2) = (uint64_t)v30;
  uint64_t v36 = CROrderedSet.map<A>(_:)();
  (*(void (**)(void (**)(char *, uint64_t, uint64_t), unsigned int (**)(void, void, void)))(v33 + 8))(v34, v32);
  v54(v30, v27);
  outlined destroy of GraphElement((uint64_t)v67, (uint64_t (*)(void))type metadata accessor for GraphElement);
  uint64_t v37 = *(void *)(v36 + 16);
  if (v37)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v67 = *(char **)(v68 + 56);
    unint64_t v39 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
    uint64_t v54 = (void (*)(char *, uint64_t))v36;
    uint64_t v57 = v39;
    uint64_t v40 = v36 + v39;
    uint64_t v41 = *(void *)(v55 + 72);
    uint64_t v63 = (unsigned int (**)(void, void, void))(v56 + 48);
    id v59 = (char *)(v68 + 48);
    uint64_t v60 = (void (**)(char *, uint64_t, uint64_t))(v56 + 32);
    uint64_t v58 = v56 + 8;
    unint64_t v62 = MEMORY[0x263F8EE78];
    while (1)
    {
      outlined init with copy of GraphableExpression(v40, (uint64_t)v11);
      uint64_t v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v67)(v11, ObjectType, v68);
      swift_release();
      if (!v43)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        uint64_t v44 = (uint64_t)v64;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        if ((*v63)(v44, 1, v4) == 1)
        {
          outlined destroy of GraphElement((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
          outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for UUID?);
          goto LABEL_8;
        }
        (*v60)(v6, v44, v4);
        uint64_t v42 = (*(uint64_t (**)(char *, uint64_t))(v68 + 48))(v6, ObjectType);
        swift_release();
        if (!v42)
        {
          outlined init with copy of GraphableExpression((uint64_t)v11, v61);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v45 = v62;
          }
          else {
            unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v62 + 16) + 1, 1, v62);
          }
          unint64_t v47 = *(void *)(v45 + 16);
          unint64_t v46 = *(void *)(v45 + 24);
          unint64_t v62 = v47 + 1;
          if (v47 >= v46 >> 1) {
            unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v62, 1, v45);
          }
          uint64_t v48 = v61;
          *(void *)(v45 + 16) = v62;
          unint64_t v62 = v45;
          outlined init with take of GraphableExpression(v48, v45 + v57 + v47 * v41);
        }
        (*(void (**)(char *, uint64_t))v58)(v6, v4);
      }
      outlined destroy of GraphElement((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
LABEL_8:
      v40 += v41;
      if (!--v37)
      {

        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
  }

  swift_bridgeObjectRelease();
  unint64_t v62 = MEMORY[0x263F8EE78];
LABEL_22:
  swift_unknownObjectRelease();
  return v62;
}

uint64_t GraphCanvasElementView.restoreOrphanedExpressions()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v133 = (char *)v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v125 = (char *)v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v130 = v6;
  uint64_t v131 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v126 = (char *)v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for GraphableExpression();
  uint64_t v124 = *(void *)(v127 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v127);
  uint64_t v128 = (uint64_t)v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v129 = (char *)v108 - v11;
  uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  char v132 = *(char **)(v134 - 8);
  MEMORY[0x270FA5388](v134);
  uint64_t v13 = (char *)v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v122);
  uint64_t v15 = (char *)v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v123 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v121 = (char *)v108 - v20;
  uint64_t v21 = type metadata accessor for PKDrawing();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = objc_msgSend(v0, sel_superview);

  if (!v25) {
    goto LABEL_38;
  }
  char v26 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (!v26) {
    goto LABEL_38;
  }
  uint64_t v27 = v26;
  uint64_t v117 = v16;
  objc_super v28 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v26) + 0x2F8))();
  uint64_t v30 = v29;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(ObjectType, v30);

  if (!v32) {
    goto LABEL_37;
  }
  id v33 = objc_msgSend(v32, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  PKDrawing._bridgeToObjectiveC()(v34);
  uint64_t v36 = v35;
  id v37 = objc_msgSend(v35, sel_uuid);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  v137[1] = &unk_26C1C1038;
  uint64_t v38 = swift_dynamicCastObjCProtocolConditional();
  if (!v38
    || ((unint64_t v39 = (void *)v38,
         swift_getObjectType(),
         type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (uint64_t v40 = v39): (uint64_t v40 = 0), !v40))
  {
    swift_unknownObjectRelease();
LABEL_37:

LABEL_38:
    if (one-time initialization token for mathLogger != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    __swift_project_value_buffer(v92, (uint64_t)mathLogger);
    float64x2_t v93 = Logger.logObject.getter();
    os_log_type_t v94 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v93, v94))
    {
      double v95 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v95 = 0;
      _os_log_impl(&dword_20C2D7000, v93, v94, "updateGraphView unable to update.", v95, 2u);
      MEMORY[0x210550270](v95, -1, -1);
    }

    return 0;
  }
  id v114 = v37;
  uint64_t v41 = (void *)MEMORY[0x263F8EED0];
  uint64_t v42 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v27) + 0x750))();
  if (!v42)
  {

    swift_unknownObjectRelease();
    goto LABEL_38;
  }
  uint64_t v111 = v42;
  uint64_t v120 = specialized static CalculateDocumentController.controllerForDrawingUUID(_:document:observer:)(v40, v42, v43, (uint64_t)v1);
  v137[0] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v44 = (char *)v1 + *(void *)((*v41 & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v45 = v123;
  uint64_t v46 = v123 + 16;
  CGPoint v113 = *(void (**)(char *, char *, uint64_t))(v123 + 16);
  unint64_t v47 = v121;
  uint64_t v48 = v117;
  v113(v121, v44, v117);
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  Capsule<>.root.getter();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v123 = v45 + 8;
  v49(v47, v48);
  uint64_t v50 = v49;
  CGPoint v109 = v44;
  v108[3] = v46;
  v113(v19, v44, v48);
  id v51 = v132;
  uint64_t v52 = v134;
  uint64_t v53 = (*((uint64_t (**)(char *, char *, uint64_t))v132 + 2))(v13, &v15[*(int *)(v122 + 28)], v134);
  uint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v108;
  MEMORY[0x270FA5388](v53);
  v108[-2] = v19;
  uint64_t v54 = CROrderedSet.map<A>(_:)();
  (*((void (**)(char *, uint64_t))v51 + 1))(v13, v52);
  CGPoint v110 = v50;
  v50(v19, v48);
  outlined destroy of GraphElement((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for GraphElement);
  uint64_t v55 = *(void *)(v54 + 16);
  CGPoint v112 = v27;
  if (!v55)
  {
LABEL_45:
    uint64_t v97 = swift_bridgeObjectRelease();
    uint64_t v98 = v137[0];
    uint64_t v99 = v117;
    long long v100 = v120;
    if (*(void *)(v137[0] + 16))
    {
      MEMORY[0x270FA5388](v97);
      v108[-2] = v137;
      float64_t v101 = v109;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      swift_endAccess();
      CGAffineTransform v102 = v121;
      v113(v121, v101, v99);
      LOBYTE(v135) = 4;
      uint64_t v103 = v112;
      double v104 = (void *)MEMORY[0x263F8EED0];
      double v105 = *(void (**)(char *, uint64_t *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v112) + 0x550);
      uint64_t v106 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
      v105(v102, &v135, v122, v106);
      LOBYTE(v135) = 4;
      (*(void (**)(uint64_t *))((*v104 & *v103) + 0x530))(&v135);

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      v110(v102, v99);
      uint64_t v98 = v137[0];
    }
    else
    {

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    uint64_t v107 = *(void *)(v98 + 16);
    swift_bridgeObjectRelease();
    return v107 != 0;
  }
  v108[2] = 0;
  char v132 = &v120[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  unint64_t v56 = (*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
  v108[1] = v54;
  uint64_t v57 = v54 + v56;
  uint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  unsigned int v116 = (void (**)(char *, uint64_t, uint64_t))(v131 + 32);
  char v115 = (void (**)(char *, uint64_t))(v131 + 8);
  char v118 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
  uint64_t v124 = *(void *)(v124 + 72);
  uint64_t v58 = (uint64_t)v133;
  uint64_t v59 = (uint64_t)v125;
  uint64_t v60 = v127;
  uint64_t v61 = (uint64_t)v129;
  while (1)
  {
    outlined init with copy of GraphableExpression(v57, v61);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    CRRegister.wrappedValue.getter();
    uint64_t v131 = v135;
    uint64_t v134 = v136;
    if (MEMORY[0x210550400](v132))
    {
      uint64_t v62 = *((void *)v132 + 1);
      CRRegister.wrappedValue.getter();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v63 = v130;
      if ((*v119)(v59, 1, v130) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        uint64_t v64 = v126;
        (*v116)(v126, v59, v63);
        uint64_t v65 = swift_getObjectType();
        uint64_t v66 = v63;
        uint64_t v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48))(v64, v65, v62);
        uint64_t v68 = v64;
        uint64_t v61 = (uint64_t)v129;
        uint64_t v60 = v127;
        (*v115)(v68, v66);
        if (v67)
        {
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v58 = (uint64_t)v133;
LABEL_21:
          swift_release();
          uint64_t v71 = v61;
          goto LABEL_35;
        }
      }
      uint64_t v69 = swift_getObjectType();
      uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 56))(v61, v69, v62);
      swift_unknownObjectRelease();
      uint64_t v58 = (uint64_t)v133;
      if (v70)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    CalculateDocumentController.findMatchingGraphableForOrphanedGraphable(_:)(v61, v58);
    if ((*v118)(v58, 1, v60) != 1) {
      break;
    }
    outlined destroy of GraphElement(v61, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
    swift_bridgeObjectRelease();
    outlined destroy of StocksKitCurrencyCache.Provider?(v58, (uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
LABEL_13:
    v57 += v124;
    if (!--v55) {
      goto LABEL_45;
    }
  }
  outlined init with take of GraphableExpression(v58, v128);
  CRRegister.wrappedValue.getter();
  uint64_t v72 = v135;
  uint64_t v73 = v136;
  uint64_t v74 = v137[0];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v135 = v74;
  uint64_t v76 = v134;
  unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v131, v134);
  uint64_t v79 = *(void *)(v74 + 16);
  BOOL v80 = (v77 & 1) == 0;
  uint64_t v81 = v79 + v80;
  if (!__OFADD__(v79, v80))
  {
    char v82 = v77;
    if (*(void *)(v74 + 24) >= v81)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        CGRect v85 = (void *)v135;
        if ((v77 & 1) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        CGRect v85 = (void *)v135;
        if ((v82 & 1) == 0) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v81, isUniquelyReferenced_nonNull_native);
      uint64_t v83 = specialized __RawDictionaryStorage.find<A>(_:)(v131, v76);
      if ((v82 & 1) != (v84 & 1)) {
        goto LABEL_51;
      }
      unint64_t v78 = v83;
      CGRect v85 = (void *)v135;
      if ((v82 & 1) == 0)
      {
LABEL_32:
        v85[(v78 >> 6) + 8] |= 1 << v78;
        CGRect v87 = (void *)(v85[6] + 16 * v78);
        void *v87 = v131;
        v87[1] = v76;
        CGRect v88 = (uint64_t *)(v85[7] + 16 * v78);
        *CGRect v88 = v72;
        v88[1] = v73;
        uint64_t v89 = v85[2];
        BOOL v90 = __OFADD__(v89, 1);
        uint64_t v91 = v89 + 1;
        if (v90) {
          goto LABEL_50;
        }
        v85[2] = v91;
        swift_bridgeObjectRetain();
        uint64_t v58 = (uint64_t)v133;
LABEL_34:
        uint64_t v59 = (uint64_t)v125;
        uint64_t v61 = (uint64_t)v129;
        v137[0] = v85;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of GraphElement(v128, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
        uint64_t v71 = v61;
LABEL_35:
        outlined destroy of GraphElement(v71, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
        goto LABEL_13;
      }
    }
    CGRect v86 = (uint64_t *)(v85[7] + 16 * v78);
    swift_bridgeObjectRelease();
    *CGRect v86 = v72;
    v86[1] = v73;
    uint64_t v58 = (uint64_t)v133;
    goto LABEL_34;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in GraphCanvasElementView.restoreOrphanedExpressions()(uint64_t a1, uint64_t *a2)
{
  unint64_t v56 = a2;
  uint64_t v65 = type metadata accessor for GraphableExpression();
  uint64_t v3 = MEMORY[0x270FA5388](v65);
  uint64_t v48 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v55 = (char *)&v42 - v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  uint64_t v60 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphableExpression>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v59 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v11 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>.Iterator);
  uint64_t v43 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  Capsule.Ref<>.subscript.getter();
  swift_release();
  uint64_t v17 = v58;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v17);
  uint64_t v18 = v59;
  uint64_t v57 = v16;
  uint64_t v58 = v14;
  CROrderedSet.Iterator.next()();
  uint64_t v19 = v60;
  uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  uint64_t v54 = v60 + 48;
  if (v53(v18, 1, v6) != 1)
  {
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    uint64_t v60 = v19 + 32;
    id v51 = (void (**)(char *, uint64_t))(v19 + 8);
    uint64_t v52 = v22;
    *(void *)&long long v20 = 136380675;
    long long v45 = v20;
    uint64_t v44 = MEMORY[0x263F8EE58] + 8;
    uint64_t v46 = a1;
    do
    {
      uint64_t v23 = v6;
      v52(v8, v18, v6);
      lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
      uint64_t v24 = (uint64_t)v55;
      Capsule.Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      uint64_t v26 = v63;
      uint64_t v25 = v64;
      outlined destroy of GraphElement(v24, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
      uint64_t v27 = *v56;
      if (*(void *)(*v56 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25), (v29 & 1) != 0))
      {
        uint64_t v30 = (uint64_t *)(*(void *)(v27 + 56) + 16 * v28);
        uint64_t v31 = *v30;
        uint64_t v49 = v30[1];
        uint64_t v50 = v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v32 = (uint64_t)v48;
        Capsule.Ref.subscript.getter();
        CRRegister.wrappedValue.getter();
        uint64_t v34 = v63;
        unint64_t v33 = v64;
        outlined destroy of GraphElement(v32, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
        if (one-time initialization token for mathLogger != -1) {
          swift_once();
        }
        uint64_t v35 = type metadata accessor for Logger();
        __swift_project_value_buffer(v35, (uint64_t)mathLogger);
        swift_bridgeObjectRetain();
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = swift_slowAlloc();
          uint64_t v47 = v34;
          uint64_t v39 = v38;
          uint64_t v40 = swift_slowAlloc();
          uint64_t v63 = v40;
          *(_DWORD *)uint64_t v39 = v45;
          swift_bridgeObjectRetain();
          *(void *)(v39 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v33, &v63);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_20C2D7000, v36, v37, "Restored orphaned expression: %{private}s", (uint8_t *)v39, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x210550270](v40, -1, -1);
          MEMORY[0x210550270](v39, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v6 = v23;
        uint64_t v41 = (void (*)(uint64_t *, void))Capsule.Ref.subscript.modify();
        uint64_t v61 = v50;
        uint64_t v62 = v49;
        CRRegister.wrappedValue.setter();
        v41(&v63, 0);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = v23;
      }
      uint64_t v18 = v59;
      (*v51)(v8, v6);
      CROrderedSet.Iterator.next()();
    }
    while (v53(v18, 1, v6) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v57, v58);
}

Swift::Void __swiftcall GraphCanvasElementView.updateGraphView()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v339 = (char *)v319 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v319 - v6;
  uint64_t v357 = type metadata accessor for CalculateExpression.Base();
  v341 = *(void (***)(char *, void, uint64_t))(v357 - 8);
  MEMORY[0x270FA5388](v357);
  v356 = (char *)v319 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v350 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v347 = *(void *)(v350 - 8);
  MEMORY[0x270FA5388](v350);
  v349 = (char *)v319 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v351 = type metadata accessor for DispatchQoS();
  uint64_t v346 = *(void *)(v351 - 8);
  MEMORY[0x270FA5388](v351);
  v348 = (char *)v319 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v361 = (char *)v319 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v365 = (char *)v319 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v358 = (char *)v319 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v364 = (char *)v319 - v18;
  uint64_t v343 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v343);
  long long v20 = (void (**)(char *, uint64_t))((char *)v319 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v384 = (void *)type metadata accessor for UUID();
  uint64_t v362 = *(v384 - 1);
  uint64_t v21 = MEMORY[0x270FA5388](v384);
  uint64_t v366 = (char *)v319 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v363 = (char *)v319 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v355 = (char *)v319 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v359 = (char *)v319 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  v360 = (char *)v319 - v30;
  MEMORY[0x270FA5388](v29);
  v385 = (void (*)(void, void))((char *)v319 - v31);
  v386 = (void (*)(char *, uint64_t))type metadata accessor for GraphableExpression();
  uint64_t v340 = *((void *)v386 - 1);
  uint64_t v32 = MEMORY[0x270FA5388](v386);
  uint64_t v379 = (uint64_t)v319 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  v370 = (char *)v319 - v34;
  v373 = (char *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  uint64_t v35 = *((void *)v373 - 1);
  MEMORY[0x270FA5388](v373);
  v371 = (char *)v319 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphableExpression>?);
  MEMORY[0x270FA5388](v37 - 8);
  v372 = (void *)((char *)v319 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v354 = (void (**)(void, void, void))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v352 = (uint64_t)*(v354 - 1);
  MEMORY[0x270FA5388](v354);
  v353 = (char *)v319 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v377 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v378 = *(void *)(v377 - 8);
  uint64_t v40 = MEMORY[0x270FA5388](v377);
  v337 = (char *)v319 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  v342 = (char *)v319 - v43;
  MEMORY[0x270FA5388](v42);
  v383 = (void (*)(void, void))((char *)v319 - v44);
  uint64_t v382 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>.Iterator);
  v344 = *(uint64_t **)(v382 - 8);
  MEMORY[0x270FA5388](v382);
  v380 = (char *)v319 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for PKDrawing();
  uint64_t v47 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v49 = (char *)v319 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v50 = objc_msgSend(v0, sel_superview);

  if (!v50) {
    goto LABEL_34;
  }
  id v51 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (!v51) {
    goto LABEL_34;
  }
  v328 = v7;
  uint64_t v330 = v3;
  uint64_t v329 = v2;
  uint64_t v52 = v51;
  uint64_t v53 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v51) + 0x2F8))();
  uint64_t v55 = v54;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v57 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v55 + 16))(ObjectType, v55);

  if (!v57)
  {

    goto LABEL_34;
  }
  uint64_t v331 = v52;
  id v58 = objc_msgSend(v57, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  PKDrawing._bridgeToObjectiveC()(v59);
  uint64_t v61 = v60;
  id v62 = objc_msgSend(v60, sel_uuid);

  uint64_t v63 = v46;
  id v64 = v62;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v63);
  v396 = &unk_26C1C1038;
  uint64_t v65 = swift_dynamicCastObjCProtocolConditional();
  if (!v65
    || ((uint64_t v66 = (void *)v65,
         swift_getObjectType(),
         type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (uint64_t v67 = v66): (uint64_t v67 = 0), !v67))
  {
    swift_unknownObjectRelease();

LABEL_34:
    if (one-time initialization token for mathLogger != -1) {
      swift_once();
    }
    uint64_t v117 = type metadata accessor for Logger();
    __swift_project_value_buffer(v117, (uint64_t)mathLogger);
    char v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v120 = 0;
      _os_log_impl(&dword_20C2D7000, v118, v119, "updateGraphView unable to update.", v120, 2u);
      MEMORY[0x210550270](v120, -1, -1);
    }

    return;
  }
  id v68 = v331;
  uint64_t v69 = (void *)MEMORY[0x263F8EED0];
  uint64_t v70 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v331) + 0x750))();
  if (!v70)
  {

    swift_unknownObjectRelease();
    goto LABEL_34;
  }
  id v322 = v64;
  uint64_t v321 = v70;
  uint64_t v327 = specialized static CalculateDocumentController.controllerForDrawingUUID(_:document:observer:)(v67, v70, v71, (uint64_t)v1);
  uint64_t v395 = MEMORY[0x263F8EE78];
  unint64_t v381 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v72 = *(void *)((*v69 & *v1) + 0x380);
  uint64_t v338 = v1;
  uint64_t v73 = (char *)v1 + v72;
  swift_beginAccess();
  uint64_t v74 = v378;
  id v75 = *(void (**)(char *, char *, uint64_t))(v378 + 16);
  uint64_t v76 = v383;
  v376 = v73;
  char v77 = v73;
  uint64_t v78 = v377;
  uint64_t v375 = v378 + 16;
  v374 = v75;
  v75((char *)v383, v77, v377);
  swift_getKeyPath();
  uint64_t v79 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  BOOL v80 = v353;
  v323 = (char *)v79;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v81 = *(void (**)(void, uint64_t))(v74 + 8);
  uint64_t v378 = v74 + 8;
  v345 = v81;
  v81(v76, v78);
  char v82 = v354;
  CROrderedSet.makeIterator()();
  uint64_t v83 = *(uint64_t (***)(uint64_t))(v352 + 8);
  os_log_t v325 = (os_log_t)(v352 + 8);
  uint64_t v324 = v83;
  ((void (*)(char *, void (**)(void, void, void)))v83)(v80, v82);
  char v84 = v372;
  CROrderedSet.Iterator.next()();
  CGRect v85 = *(unsigned int (**)(void *, uint64_t, char *))(v35 + 48);
  CGRect v86 = v373;
  uint64_t v336 = (void *)(v35 + 48);
  uint64_t v335 = v85;
  unsigned int v87 = v85(v84, 1, v373);
  v326 = v20;
  if (v87 != 1)
  {
    uint64_t v122 = *(void (**)(char *, void *, char *))(v35 + 32);
    uint64_t v121 = v35 + 32;
    *(void *)&long long v334 = v122;
    uint64_t v332 = (void (**)(char *, char *))(v121 - 24);
    uint64_t v333 = v121;
    unint64_t v94 = (unint64_t)v386;
    v122(v371, v84, v86);
    while (1)
    {
      uint64_t v127 = (char *)v383;
      uint64_t v128 = v377;
      v374((char *)v383, v376, v377);
      uint64_t v369 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
      uint64_t v129 = (uint64_t)v370;
      Capsule.subscript.getter();
      uint64_t v130 = (void (*)(char *, uint64_t))v345;
      v345(v127, v128);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      v367 = aBlock;
      uint64_t v368 = (void (**)(uint64_t, uint64_t, uint64_t, void *))v390;
      outlined destroy of GraphElement(v129, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
      v374(v127, v376, v128);
      Capsule.subscript.getter();
      v130(v127, v128);
      uint64_t v131 = (uint64_t)v367;
      CRRegister.wrappedValue.getter();
      char v132 = aBlock;
      uint64_t v133 = v390;
      uint64_t v134 = v129;
      uint64_t v135 = (uint64_t)v368;
      outlined destroy of GraphElement(v134, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
      uint64_t v136 = v381;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      long long aBlock = (void (*)(void, void))v136;
      unint64_t v139 = specialized __RawDictionaryStorage.find<A>(_:)(v131, v135);
      uint64_t v140 = *(void *)(v136 + 16);
      BOOL v141 = (v138 & 1) == 0;
      uint64_t v142 = v140 + v141;
      if (__OFADD__(v140, v141)) {
        break;
      }
      char v143 = v138;
      if (*(void *)(v136 + 24) >= v142)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v142, isUniquelyReferenced_nonNull_native);
        uint64_t v144 = specialized __RawDictionaryStorage.find<A>(_:)(v131, v135);
        if ((v143 & 1) != (v145 & 1))
        {
LABEL_188:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_189:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        unint64_t v139 = v144;
      }
      unint64_t v146 = aBlock;
      unint64_t v381 = (unint64_t)aBlock;
      if (v143)
      {
        uint64_t v123 = (void *)(*((void *)aBlock + 7) + 16 * v139);
        swift_bridgeObjectRelease();
        *uint64_t v123 = v132;
        v123[1] = v133;
      }
      else
      {
        *((void *)aBlock + (v139 >> 6) + 8) |= 1 << v139;
        uint64_t v147 = (uint64_t *)(v146[6] + 16 * v139);
        *uint64_t v147 = v131;
        v147[1] = v135;
        uint64_t v148 = (void *)(v146[7] + 16 * v139);
        *uint64_t v148 = v132;
        v148[1] = v133;
        uint64_t v149 = v146[2];
        BOOL v115 = __OFADD__(v149, 1);
        uint64_t v150 = v149 + 1;
        if (v115) {
          goto LABEL_54;
        }
        v146[2] = v150;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v124 = v371;
      uint64_t v125 = v373;
      (*v332)(v371, v373);
      uint64_t v126 = v372;
      CROrderedSet.Iterator.next()();
      if (v335(v126, 1, v125) == 1) {
        goto LABEL_11;
      }
      ((void (*)(char *, void *, char *))v334)(v124, v126, v125);
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
LABEL_11:
  ((void (*)(char *, uint64_t))v344[1])(v380, v382);
  CGRect v88 = v338;
  uint64_t v89 = (void *)((char *)v338 + direct field offset for GraphCanvasElementView.expressionIdentifierToId);
  swift_beginAccess();
  *uint64_t v89 = MEMORY[0x263F8EE80];
  swift_bridgeObjectRelease();
  unint64_t v90 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v333 = direct field offset for GraphCanvasElementView.graphViewController;
  uint64_t v91 = *(void *)((char *)v88 + direct field offset for GraphCanvasElementView.graphViewController);
  uint64_t v382 = v90;
  v344 = v89;
  if (v91)
  {
    uint64_t v92 = *(void **)(v91
                     + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph);
    if (v92)
    {
      swift_retain();
      v372 = v92;
      unint64_t v93 = dispatch thunk of CalculateGraph.graphExpressions.getter();
      unint64_t v94 = v93;
      if (v93 >> 62) {
        goto LABEL_58;
      }
      uint64_t v95 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (v95)
      {
        v380 = (char *)(v94 & 0xC000000000000001);
        v373 = (char *)(v362 + 16);
        double v96 = (void (**)(void, void *))(v362 + 8);
        uint64_t v97 = 4;
        while (1)
        {
          uint64_t v99 = v97 - 4;
          if (v380)
          {
            uint64_t v100 = MEMORY[0x21054E050](v97 - 4, v94);
            uint64_t v101 = v97 - 3;
            if (__OFADD__(v99, 1)) {
              goto LABEL_55;
            }
          }
          else
          {
            uint64_t v100 = *(void *)(v94 + 8 * v97);
            swift_retain();
            uint64_t v101 = v97 - 3;
            if (__OFADD__(v99, 1)) {
              goto LABEL_55;
            }
          }
          CalculateGraphExpression.expression.getter();
          CGAffineTransform v102 = v385;
          CalculateExpression.id.getter();
          swift_release();
          swift_retain();
          uint64_t v103 = v382;
          int v104 = swift_isUniquelyReferenced_nonNull_native();
          long long aBlock = (void (*)(void, void))v103;
          unint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v102);
          uint64_t v107 = *(void *)(v103 + 16);
          BOOL v108 = (v105 & 1) == 0;
          uint64_t v109 = v107 + v108;
          if (__OFADD__(v107, v108)) {
            break;
          }
          char v110 = v105;
          if (*(void *)(v103 + 24) >= v109)
          {
            if ((v104 & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v109, v104);
            unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v385);
            if ((v110 & 1) != (v112 & 1)) {
              goto LABEL_189;
            }
            unint64_t v106 = v111;
          }
          CGPoint v113 = aBlock;
          uint64_t v382 = (uint64_t)aBlock;
          if (v110)
          {
            uint64_t v98 = *((void *)aBlock + 7);
            swift_release();
            *(void *)(v98 + 8 * v106) = v100;
          }
          else
          {
            *((void *)aBlock + (v106 >> 6) + 8) |= 1 << v106;
            (*(void (**)(unint64_t, void (*)(void, void), void *))(v362 + 16))(v113[6] + *(void *)(v362 + 72) * v106, v385, v384);
            *(void *)(v113[7] + 8 * v106) = v100;
            uint64_t v114 = v113[2];
            BOOL v115 = __OFADD__(v114, 1);
            uint64_t v116 = v114 + 1;
            if (v115) {
              goto LABEL_57;
            }
            v113[2] = v116;
          }
          swift_bridgeObjectRelease();
          (*v96)(v385, v384);
          swift_release();
          ++v97;
          if (v101 == v95) {
            goto LABEL_59;
          }
        }
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        swift_bridgeObjectRetain();
        uint64_t v95 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_59:
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v151 = v383;
  uint64_t v152 = v376;
  uint64_t v153 = v377;
  char v154 = v374;
  v374((char *)v383, v376, v377);
  uint64_t v155 = (uint64_t)v326;
  Capsule<>.root.getter();
  uint64_t v156 = (void (*)(char *, uint64_t))v345;
  v345(v151, v153);
  v157 = v342;
  v154(v342, v152, v153);
  uint64_t v158 = v353;
  uint64_t v159 = v354;
  uint64_t v160 = (*(uint64_t (**)(char *, uint64_t, void))(v352 + 16))(v353, v155 + *(int *)(v343 + 28), v354);
  MEMORY[0x270FA5388](v160);
  v319[-2] = v157;
  uint64_t v161 = CROrderedSet.map<A>(_:)();
  ((void (*)(char *, void (**)(void, void, void)))v324)(v158, v159);
  v156(v157, v153);
  outlined destroy of GraphElement(v155, (uint64_t (*)(void))type metadata accessor for GraphElement);
  uint64_t v162 = *(void *)(v161 + 16);
  if (!v162)
  {
    swift_bridgeObjectRelease();
    uint64_t v262 = *(char **)((char *)v338 + v333);
    uint64_t v263 = v330;
    if (v262)
    {
      char v265 = 0;
LABEL_167:
      int v266 = static GraphCanvasElementView.isInsertingGraph;
      if ((v265 & 1) != 0 || !static GraphCanvasElementView.isInsertingGraph)
      {
        if (v265) {
          goto LABEL_180;
        }
        uint64_t v268 = OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView;
      }
      else
      {
        uint64_t v268 = OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView;
        int v266 = *(void *)&v262[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView] == 0;
      }
      if (*(void *)&v262[v268])
      {
        if (*(void *)&v262[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph])
        {
          swift_retain();
          swift_bridgeObjectRetain();
          dispatch thunk of CalculateGraph.graphExpressions.setter();
          swift_release();
          if (v266) {
            goto LABEL_185;
          }
LABEL_183:
          swift_bridgeObjectRelease();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          v299 = (void *)static OS_dispatch_queue.main.getter();
          uint64_t v300 = swift_allocObject();
          v301 = v338;
          *(void *)(v300 + 16) = v338;
          unint64_t v393 = (unint64_t)partial apply for closure #5 in GraphCanvasElementView.updateGraphView();
          v394 = (void *)v300;
          long long aBlock = (void (*)(void, void))MEMORY[0x263EF8330];
          uint64_t v390 = 1107296256;
          v391 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          v392 = (ValueMetadata *)&block_descriptor_195;
          v302 = _Block_copy(&aBlock);
          id v303 = v301;
          swift_release();
          v304 = v348;
          static DispatchQoS.unspecified.getter();
          long long aBlock = (void (*)(void, void))MEMORY[0x263F8EE78];
          lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          v305 = v349;
          uint64_t v306 = v350;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          MEMORY[0x21054DA10](0, v304, v305, v302);
          _Block_release(v302);

          (*(void (**)(char *, uint64_t))(v347 + 8))(v305, v306);
          (*(void (**)(char *, uint64_t))(v346 + 8))(v304, v351);
LABEL_186:
          objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v301, sel_updateCachedImage, 0);
          objc_msgSend(v301, sel_performSelector_withObject_afterDelay_, sel_updateCachedImage, 0, 1.0);
          v317 = v327;
          BOOL v318 = CalculateDocumentController.updateGraphableVariables()();
          GraphCanvasElementView.cachedGraphableExpressionsState.getter(v318);
          GraphableExpressionsState.update()();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();

          return;
        }
        goto LABEL_184;
      }
      v374(v337, v376, v377);
      v285 = v262;
      double v286 = GraphCanvasElementView.graphViewFrame.getter();
      double v288 = v287;
      double v290 = v289;
      double v292 = v291;
      if ((v266 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t v293 = v337;
      GraphCanvasElementViewController.setupGraphView(canvasElement:frame:expressions:isSelected:)(v286, v288, v290, v292);

      swift_bridgeObjectRelease();
      v345(v293, v377);
    }
    else
    {
LABEL_164:
      int v266 = static GraphCanvasElementView.isInsertingGraph;
    }
LABEL_180:
    uint64_t v294 = v338;
    GraphCanvasElementView.layoutGraphView()();
    uint64_t v295 = *(void *)((char *)v294 + v333);
    if (v295)
    {
      uint64_t v296 = *(void *)(v295
                       + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph);
      if (v296)
      {
        swift_retain();
        uint64_t v297 = dispatch thunk of CalculateGraph.isSelected.setter();
        MEMORY[0x270FA5388](v297);
        v319[-2] = v294;
        v319[-1] = v296;
        uint64_t v298 = withObservationTracking<A>(_:onChange:)();
        MEMORY[0x270FA5388](v298);
        v319[-2] = v294;
        v319[-1] = v296;
        withObservationTracking<A>(_:onChange:)();
        swift_release();
        if ((v266 & 1) == 0) {
          goto LABEL_183;
        }
LABEL_185:
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
        uint64_t v307 = (void *)static OS_dispatch_queue.main.getter();
        v308 = v339;
        static DispatchTime.now()();
        v309 = v328;
        MEMORY[0x21054AB00](v308, 0.1);
        v386 = *(void (**)(char *, uint64_t))(v263 + 8);
        v386(v308, v329);
        uint64_t v310 = swift_allocObject();
        v301 = v338;
        swift_unknownObjectWeakInit();
        uint64_t v311 = v395;
        uint64_t v312 = swift_allocObject();
        *(void *)(v312 + 16) = v310;
        *(void *)(v312 + 24) = v311;
        unint64_t v393 = (unint64_t)partial apply for specialized closure #4 in GraphCanvasElementView.updateGraphView();
        v394 = (void *)v312;
        long long aBlock = (void (*)(void, void))MEMORY[0x263EF8330];
        uint64_t v390 = 1107296256;
        v391 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        v392 = (ValueMetadata *)&block_descriptor_204_0;
        uint64_t v313 = _Block_copy(&aBlock);
        swift_release();
        uint64_t v314 = v348;
        static DispatchQoS.unspecified.getter();
        long long aBlock = (void (*)(void, void))MEMORY[0x263F8EE78];
        lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        v315 = v349;
        uint64_t v316 = v350;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x21054D9C0](v309, v314, v315, v313);
        _Block_release(v313);

        (*(void (**)(char *, uint64_t))(v347 + 8))(v315, v316);
        (*(void (**)(char *, uint64_t))(v346 + 8))(v314, v351);
        v386(v309, v329);
        goto LABEL_186;
      }
    }
LABEL_184:
    if (!v266) {
      goto LABEL_183;
    }
    goto LABEL_185;
  }
  unint64_t v163 = 0;
  LODWORD(v343) = 0;
  v373 = &v327[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  uint64_t v164 = v161 + ((*(unsigned __int8 *)(v340 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80));
  v372 = (void *)(v362 + 48);
  v367 = *(void (**)(void, void))(v340 + 72);
  v354 = (void (**)(void, void, void))(v362 + 32);
  v370 = (char *)(v362 + 8);
  v323 = &v388;
  uint64_t v324 = &v391;
  uint64_t v332 = (void (**)(char *, char *))(v347 + 8);
  v326 = (void (**)(char *, uint64_t))(v346 + 8);
  uint64_t v340 = v362 + 16;
  uint64_t v336 = (void *)*MEMORY[0x263F2FCD0];
  LODWORD(v335) = *MEMORY[0x263F2FBD0];
  v341 += 13;
  uint64_t v368 = (void (**)(uint64_t, uint64_t, uint64_t, void *))(v362 + 56);
  uint64_t v369 = v162 - 1;
  *((void *)&v165 + 1) = 2;
  long long v334 = xmmword_20C832C20;
  v353 = (char *)(MEMORY[0x263F8EE60] + 8);
  *(void *)&long long v165 = 136380931;
  long long v320 = v165;
  v319[1] = MEMORY[0x263F8EE58] + 8;
  uint64_t v166 = v379;
  uint64_t v352 = v161;
  while (1)
  {
    v380 = (char *)v164;
    outlined init with copy of GraphableExpression(v164, v166);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    CRRegister.wrappedValue.getter();
    v383 = aBlock;
    v385 = (void (*)(void, void))v390;
    if (MEMORY[0x210550400](v373))
    {
      uint64_t v169 = v166;
      uint64_t v170 = *((void *)v373 + 1);
      CRRegister.wrappedValue.getter();
      uint64_t v171 = (uint64_t)v364;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v172 = (char *)*v372;
      uint64_t v173 = v384;
      int v174 = ((uint64_t (*)(uint64_t, uint64_t, void *))*v372)(v171, 1, v384);
      v371 = v172;
      if (v174 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v171, &demangling cache variable for type metadata for UUID?);
        uint64_t v166 = v169;
      }
      else
      {
        uint64_t v175 = v360;
        (*v354)(v360, v171, v173);
        uint64_t v176 = swift_getObjectType();
        uint64_t v177 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v170 + 48))(v175, v176, v170);
        uint64_t v178 = v175;
        uint64_t v161 = v352;
        uint64_t v166 = v379;
        (*(void (**)(char *, void *))v370)(v178, v173);
        if (v177)
        {
          swift_unknownObjectRelease();
          uint64_t v179 = v344;
LABEL_71:
          swift_retain_n();
          unint64_t v181 = v381;
          if (*(void *)(v381 + 16))
          {
            uint64_t v182 = v385;
            swift_bridgeObjectRetain();
            uint64_t v183 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v383, (uint64_t)v182);
            uint64_t v184 = v384;
            if (v185)
            {
              int v186 = (uint64_t *)(*(void *)(v181 + 56) + 16 * v183);
              uint64_t v188 = *v186;
              unint64_t v187 = v186[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_release();
              if (v188 == CalculateExpression.expression.getter() && v187 == v189)
              {
                swift_release();
                swift_bridgeObjectRelease_n();
              }
              else
              {
                char v204 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v204)
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                  uint64_t v184 = v384;
                }
                else
                {
                  if (one-time initialization token for mathLogger != -1) {
                    swift_once();
                  }
                  uint64_t v209 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v209, (uint64_t)mathLogger);
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  uint64_t v210 = Logger.logObject.getter();
                  os_log_type_t v211 = static os_log_type_t.default.getter();
                  int v212 = v211;
                  if (os_log_type_enabled(v210, v211))
                  {
                    uint64_t v213 = swift_slowAlloc();
                    LODWORD(v342) = v212;
                    uint64_t v214 = v213;
                    uint64_t v215 = (void (*)(void, void))swift_slowAlloc();
                    long long aBlock = v215;
                    *(_DWORD *)uint64_t v214 = v320;
                    os_log_t v325 = v210;
                    swift_bridgeObjectRetain();
                    uint64_t v387 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v188, v187, (uint64_t *)&aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v214 + 12) = 2081;
                    uint64_t v216 = CalculateExpression.expression.getter();
                    uint64_t v387 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v216, v217, (uint64_t *)&aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    os_log_t v218 = v325;
                    _os_log_impl(&dword_20C2D7000, v325, (os_log_type_t)v342, "Detected graphable expression change from: %{private}s, to: %{private}s", (uint8_t *)v214, 0x16u);
                    swift_arrayDestroy();
                    MEMORY[0x210550270](v215, -1, -1);
                    MEMORY[0x210550270](v214, -1, -1);
                  }
                  else
                  {

                    swift_release_n();
                    swift_bridgeObjectRelease_n();
                  }
                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
                  v342 = (char *)static OS_dispatch_queue.main.getter();
                  uint64_t v219 = swift_allocObject();
                  swift_unknownObjectWeakInit();
                  uint64_t v220 = swift_allocObject();
                  swift_weakInit();
                  uint64_t v221 = (void *)swift_allocObject();
                  v221[2] = v219;
                  v221[3] = v220;
                  uint64_t v222 = v385;
                  v221[4] = v383;
                  v221[5] = v222;
                  unint64_t v393 = (unint64_t)partial apply for closure #1 in GraphCanvasElementView.updateGraphView();
                  v394 = v221;
                  long long aBlock = (void (*)(void, void))MEMORY[0x263EF8330];
                  uint64_t v390 = 1107296256;
                  v391 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
                  v392 = (ValueMetadata *)&block_descriptor_222;
                  os_log_t v325 = (os_log_t)_Block_copy(&aBlock);
                  swift_bridgeObjectRetain();
                  swift_release();
                  uint64_t v223 = v348;
                  static DispatchQoS.unspecified.getter();
                  long long aBlock = (void (*)(void, void))MEMORY[0x263F8EE78];
                  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
                  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
                  v224 = v349;
                  uint64_t v225 = v350;
                  dispatch thunk of SetAlgebra.init<A>(_:)();
                  os_log_t v226 = v325;
                  id v227 = v342;
                  MEMORY[0x21054DA10](0, v223, v224, v325);
                  _Block_release(v226);
                  swift_release();

                  (*v332)(v224, (char *)v225);
                  (*v326)(v223, v351);
                  uint64_t v184 = v384;
                }
              }
              swift_retain();
            }
            else
            {
              swift_release();
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_release();
            uint64_t v184 = v384;
          }
          goto LABEL_102;
        }
      }
      uint64_t v180 = swift_getObjectType();
      uint64_t v177 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 56))(v166, v180, v170);
      swift_unknownObjectRelease();
      uint64_t v179 = v344;
      if (v177) {
        goto LABEL_71;
      }
    }
    CRRegister.wrappedValue.getter();
    unint64_t v191 = (unint64_t)aBlock;
    unint64_t v190 = v390;
    swift_bridgeObjectRelease();
    uint64_t v192 = HIBYTE(v190) & 0xF;
    if ((v190 & 0x2000000000000000) == 0) {
      uint64_t v192 = v191 & 0xFFFFFFFFFFFFLL;
    }
    if (!v192) {
      break;
    }
    swift_bridgeObjectRelease();
    outlined destroy of GraphElement(v166, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
    if (v369 == v163)
    {
      swift_bridgeObjectRelease();
      uint64_t v262 = *(char **)((char *)v338 + v333);
      char v265 = 1;
      if (!v262)
      {
        uint64_t v263 = v330;
        goto LABEL_166;
      }
      char v264 = 1;
      uint64_t v263 = v330;
      goto LABEL_159;
    }
    LODWORD(v343) = 1;
LABEL_64:
    ++v163;
    uint64_t v164 = (uint64_t)v367 + (void)v380;
    if (v163 >= *(void *)(v161 + 16))
    {
      __break(1u);
      goto LABEL_188;
    }
  }
  CRRegister.wrappedValue.getter();
  uint64_t v193 = (uint64_t)v358;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  char v194 = v384;
  v371 = (char *)*v372;
  if (((unsigned int (*)(uint64_t, uint64_t, void *))v371)(v193, 1, v384) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v193, &demangling cache variable for type metadata for UUID?);
    id v195 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, 0);
    unint64_t v196 = v359;
    UUID.init()();
    uint64_t v197 = (void (**)(char *, void *))v370;
LABEL_94:
    CRRegister.wrappedValue.getter();
    uint64_t v343 = (uint64_t)aBlock;
    v342 = (char *)v390;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v334;
    uint64_t v206 = v336;
    *(void *)(inited + 32) = v336;
    *(void *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(void *)(inited + 40) = v195;
    id v207 = v206;
    id v208 = v195;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    (*(void (**)(char *, char *, void *))v340)(v363, v196, v194);
    (*v341)(v356, v335, v357);
    type metadata accessor for CalculateExpression();
    swift_allocObject();
    uint64_t v177 = CalculateExpression.init(_:options:base:id:)();

    (*v197)(v196, v194);
    swift_retain();
    LODWORD(v343) = 1;
    uint64_t v184 = v194;
    uint64_t v179 = v344;
    uint64_t v161 = v352;
    goto LABEL_102;
  }
  uint64_t v198 = (uint64_t)v355;
  (*v354)(v355, v193, v194);
  id v195 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, 1);
  (*(void (**)(char *, uint64_t, void *))v340)(v359, v198, v194);
  if (!*(void *)(v382 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v198), (v199 & 1) == 0))
  {
    uint64_t v197 = (void (**)(char *, void *))v370;
    (*(void (**)(uint64_t, void *))v370)(v198, v194);
LABEL_93:
    unint64_t v196 = v359;
    goto LABEL_94;
  }
  swift_retain();
  uint64_t v177 = CalculateGraphExpression.expression.getter();
  swift_release();
  uint64_t v200 = CalculateExpression.expression.getter();
  uint64_t v202 = v201;
  CRRegister.wrappedValue.getter();
  if ((void (*)(void, void))v200 == aBlock && v202 == v390)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v203 = *(void (**)(char *, void *))v370;
    uint64_t v184 = v384;
    (*(void (**)(char *, void *))v370)(v355, v384);
    goto LABEL_151;
  }
  char v260 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v261 = v370;
  uint64_t v203 = *(void (**)(char *, void *))v370;
  (*(void (**)(char *, void *))v370)(v355, v384);
  if ((v260 & 1) == 0)
  {
    swift_release();
    uint64_t v197 = (void (**)(char *, void *))v261;
    char v194 = v384;
    goto LABEL_93;
  }
  uint64_t v184 = v384;
LABEL_151:
  uint64_t v179 = v344;
  v203(v359, v184);

  swift_retain();
  LODWORD(v343) = 1;
LABEL_102:
  v392 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v393 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(aBlock) = 8;
  char v228 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  if (v228)
  {
    CRRegister.wrappedValue.getter();
    unint64_t v230 = (unint64_t)aBlock;
    unint64_t v229 = v390;
    swift_bridgeObjectRelease();
    uint64_t v231 = HIBYTE(v229) & 0xF;
    if ((v229 & 0x2000000000000000) == 0) {
      uint64_t v231 = v230 & 0xFFFFFFFFFFFFLL;
    }
    if (v231)
    {
      CRRegister.wrappedValue.getter();
      uint64_t v232 = aBlock;
      uint64_t v233 = v390;
      goto LABEL_112;
    }
    uint64_t v232 = *(void (**)(void, void))(CalculateExpression.graphableVariables.getter() + 16);
    swift_bridgeObjectRelease();
    if (v232)
    {
      uint64_t v234 = (void *)CalculateExpression.graphableVariables.getter();
      if (v234[2])
      {
        uint64_t v232 = (void (*)(void, void))v234[4];
        uint64_t v233 = v234[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_112;
      }
      swift_bridgeObjectRelease();
      uint64_t v232 = 0;
    }
    uint64_t v233 = 0;
LABEL_112:
    swift_bridgeObjectRetain();
    uint64_t v235 = CalculateExpression.graphableVariable.getter();
    if (v233)
    {
      if (v236)
      {
        if (v232 == (void (*)(void, void))v235 && v233 == v236)
        {
          swift_bridgeObjectRelease_n();
LABEL_121:
          swift_bridgeObjectRelease();
          goto LABEL_122;
        }
        char v237 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v237) {
          goto LABEL_121;
        }
LABEL_119:
        CalculateExpression.graphableVariable.setter();
        goto LABEL_122;
      }
    }
    else if (!v236)
    {
      goto LABEL_122;
    }
    swift_bridgeObjectRelease();
    goto LABEL_119;
  }
LABEL_122:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  unint64_t v238 = aBlock;
  if (aBlock)
  {
    uint64_t v239 = MEMORY[0x21054A5D0](objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, aBlock));
  }
  else
  {
    uint64_t v239 = 0;
  }
  uint64_t v240 = (uint64_t)v366;
  CalculateExpression.id.getter();
  if (!*(void *)(v382 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v240), (v241 & 1) == 0))
  {
    (*(void (**)(uint64_t, void *))v370)(v240, v184);
LABEL_130:
    type metadata accessor for CalculateGraphExpression();
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v244 = CalculateGraphExpression.init(_:color:)();
    uint64_t v245 = swift_release();
    MEMORY[0x270FA5388](v245);
    v319[-4] = v338;
    v319[-3] = v244;
    uint64_t v246 = v385;
    v319[-2] = v383;
    v319[-1] = v246;
    swift_retain();
    withObservationTracking<A>(_:onChange:)();
    goto LABEL_131;
  }
  v242 = *(void (**)(uint64_t, void *))v370;
  swift_retain();
  v242(v240, v184);
  swift_retain();
  uint64_t v243 = CalculateGraphExpression.expression.getter();
  swift_release();
  swift_release();
  if (v243 != v177) {
    goto LABEL_130;
  }
  swift_retain();
  if (dispatch thunk of CalculateGraphExpression.color.getter())
  {
    if (v239)
    {
      swift_retain();
      char v259 = static Color.== infix(_:_:)();
      swift_release();
      swift_release();
      if (v259) {
        goto LABEL_148;
      }
    }
    else
    {
      swift_release();
    }
  }
  else if (!v239)
  {
    goto LABEL_148;
  }
  swift_retain();
  dispatch thunk of CalculateGraphExpression.color.setter();
LABEL_148:
  swift_release();
  swift_retain();
LABEL_131:
  uint64_t v247 = swift_retain();
  MEMORY[0x21054D330](v247);
  if (*(void *)((v395 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v395 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v248 = (uint64_t)v365;
  CalculateExpression.id.getter();
  uint64_t v249 = *v368;
  (*v368)(v248, 0, 1, v184);
  swift_beginAccess();
  if (((unsigned int (*)(uint64_t, uint64_t, void *))v371)(v248, 1, v184) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v248, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRetain();
    unint64_t v250 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v383, (uint64_t)v385);
    char v252 = v251;
    swift_bridgeObjectRelease();
    if (v252)
    {
      char v253 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v254 = *v179;
      uint64_t v387 = *v179;
      *uint64_t v179 = 0x8000000000000000;
      uint64_t v255 = v179;
      if ((v253 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v254 = v387;
      }
      swift_bridgeObjectRelease();
      uint64_t v256 = (uint64_t)v361;
      long long v257 = v384;
      (*(void (**)(char *, unint64_t, void *))(v362 + 32))(v361, *(void *)(v254 + 56) + *(void *)(v362 + 72) * v250, v384);
      specialized _NativeDictionary._delete(at:)(v250, v254);
      uint64_t *v255 = v254;
      swift_bridgeObjectRelease();
      uint64_t v258 = 0;
      uint64_t v161 = v352;
    }
    else
    {
      uint64_t v258 = 1;
      uint64_t v256 = (uint64_t)v361;
      long long v257 = v384;
    }
    v249(v256, v258, 1, v257);
    swift_bridgeObjectRelease();
    outlined destroy of StocksKitCurrencyCache.Provider?(v256, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    uint64_t v167 = (uint64_t)v363;
    (*v354)(v363, v248, v184);
    char v168 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v387 = *v179;
    *uint64_t v179 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v167, (uint64_t)v383, (uint64_t)v385, v168);
    *uint64_t v179 = v387;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v166 = v379;
  outlined destroy of GraphElement(v379, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
  swift_release();
  if (v369 != v163) {
    goto LABEL_64;
  }
  swift_bridgeObjectRelease();
  uint64_t v262 = *(char **)((char *)v338 + v333);
  if (!v262)
  {
    uint64_t v263 = v330;
    if ((v343 & 1) == 0) {
      goto LABEL_164;
    }
    uint64_t v262 = 0;
    char v265 = 1;
    goto LABEL_166;
  }
  uint64_t v263 = v330;
  char v264 = v343;
LABEL_159:
  char v265 = 0;
  if (*(void *)&v262[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView]
    || (v264 & 1) == 0)
  {
    goto LABEL_167;
  }
LABEL_166:
  uint64_t v267 = direct field offset for GraphCanvasElementView.didDelayCreatingGraphView;
  if (*((unsigned char *)v338 + direct field offset for GraphCanvasElementView.didDelayCreatingGraphView)) {
    goto LABEL_167;
  }
  swift_bridgeObjectRelease();
  *((unsigned char *)v338 + v267) = 1;
  v386 = (void (*)(char *, uint64_t))type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v269 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v270 = v339;
  static DispatchTime.now()();
  uint64_t v271 = v328;
  MEMORY[0x21054AB00](v270, 1.5);
  uint64_t v272 = *(void (**)(void))(v263 + 8);
  uint64_t v330 = v263 + 8;
  v383 = (void (*)(void, void))v272;
  uint64_t v273 = v329;
  v272(v270);
  uint64_t v274 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v393 = (unint64_t)partial apply for closure #2 in GraphCanvasElementView.updateGraphView();
  v394 = (void *)v274;
  long long aBlock = (void (*)(void, void))MEMORY[0x263EF8330];
  uint64_t v390 = 1107296256;
  v391 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v392 = (ValueMetadata *)&block_descriptor_208_0;
  uint64_t v275 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v276 = v348;
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void (*)(void, void))MEMORY[0x263F8EE78];
  uint64_t v379 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  uint64_t v378 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v380 = (char *)lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v277 = v349;
  uint64_t v278 = v350;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054D9C0](v271, v276, v277, v275);
  _Block_release(v275);

  v385 = (void (*)(void, void))*v332;
  v385(v277, v278);
  v384 = *v326;
  ((void (*)(char *, uint64_t))v384)(v276, v351);
  uint64_t v279 = v273;
  uint64_t v280 = v273;
  uint64_t v281 = (void (*)(char *, uint64_t))v383;
  v383(v271, v280);
  v386 = (void (*)(char *, uint64_t))static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  MEMORY[0x21054AB00](v270, 3.0);
  v281(v270, v279);
  uint64_t v282 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v393 = (unint64_t)partial apply for closure #3 in GraphCanvasElementView.updateGraphView();
  v394 = (void *)v282;
  long long aBlock = (void (*)(void, void))MEMORY[0x263EF8330];
  uint64_t v390 = 1107296256;
  v391 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v392 = (ValueMetadata *)&block_descriptor_212_0;
  uint64_t v283 = _Block_copy(&aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void (*)(void, void))MEMORY[0x263F8EE78];
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v284 = v386;
  MEMORY[0x21054D9C0](v271, v276, v277, v283);
  swift_unknownObjectRelease();

  _Block_release(v283);
  swift_unknownObjectRelease();

  v385(v277, v278);
  ((void (*)(char *, uint64_t))v384)(v276, v351);
  v281(v271, v279);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void closure #1 in GraphCanvasElementView.updateGraphView()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a1 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v6);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      v9._uint64_t countAndFlagsBits = CalculateExpression.expression.getter();
      v10._uint64_t countAndFlagsBits = a3;
      v10._object = a4;
      GraphCanvasElementView.didUpdateExpression(_:identifier:)(v9, v10);

      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
}

void closure #2 in GraphCanvasElementView.updateGraphView()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    GraphCanvasElementView.restoreOrphanedExpressions()();
    GraphCanvasElementView.updateGraphView()();
  }
}

void closure #3 in GraphCanvasElementView.updateGraphView()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    if (GraphCanvasElementView.restoreOrphanedExpressions()()) {
      GraphCanvasElementView.updateGraphView()();
    }
  }
}

uint64_t specialized closure #4 in GraphCanvasElementView.updateGraphView()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v1);
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(void *)(result + direct field offset for GraphCanvasElementView.graphViewController);
    if (v4)
    {
      if (*(void *)(v4
                     + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph))
      {
        swift_retain();
        swift_bridgeObjectRetain();
        dispatch thunk of CalculateGraph.graphExpressions.setter();
        uint64_t result = swift_release();
      }
    }
    GraphCanvasElementView.cachedGraphableExpressionsState.getter(result);
    GraphableExpressionsState.updateColors()();

    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall GraphCanvasElementView.updateCachedImage()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v5 - 8);
  id v58 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  Swift::String v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v47 - v12;
  uint64_t v14 = type metadata accessor for CRKeyPath();
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v57 + 64);
  MEMORY[0x270FA5388](v14);
  unint64_t v56 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v59 = (char *)&v47 - v18;
  id v19 = objc_msgSend(v0, sel_window, v17);

  if (v19)
  {
    id v20 = objc_msgSend(v1, sel_superview);

    if (v20)
    {
      uint64_t v21 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v23 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v21) + 0x750))();
        uint64_t v54 = v24;

        uint64_t v55 = v23;
        if (v23)
        {
          id v51 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
          uint64_t v25 = v51;
          swift_beginAccess();
          uint64_t v53 = v14;
          id v50 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
          v50(v13, v25, v7);
          uint64_t v26 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
          uint64_t v52 = v4;
          uint64_t v49 = v26;
          Capsule<>.rootID.getter();
          uint64_t v48 = *(void (**)(char *, uint64_t))(v8 + 8);
          v48(v13, v7);
          uint64_t v27 = v50;
          uint64_t v28 = v51;
          v50(v13, v51, v7);
          Capsule<>.root.getter();
          uint64_t v29 = v13;
          uint64_t v30 = v48;
          v48(v29, v7);
          v27(v10, v28, v7);
          uint64_t v31 = v55;
          swift_unknownObjectRetain();
          uint64_t v32 = (uint64_t)v58;
          specialized GraphElement.imageRenderingCalculateGraph<A>(in:document:)((uint64_t)v10, v31, v54);
          uint64_t v54 = v33;
          swift_unknownObjectRelease();
          v30(v10, v7);
          outlined destroy of GraphElement(v32, (uint64_t (*)(void))type metadata accessor for GraphElement);
          objc_msgSend(v1, sel_bounds);
          uint64_t v35 = v34;
          uint64_t v37 = v36;
          id v38 = objc_msgSend(v1, sel_traitCollection);
          objc_msgSend(v38, sel_userInterfaceStyle);

          uint64_t v39 = type metadata accessor for TaskPriority();
          uint64_t v40 = (uint64_t)v52;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v52, 1, 1, v39);
          uint64_t v42 = v56;
          uint64_t v41 = v57;
          uint64_t v43 = v59;
          uint64_t v44 = v53;
          (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v56, v59, v53);
          unint64_t v45 = (*(unsigned __int8 *)(v41 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
          uint64_t v46 = (char *)swift_allocObject();
          *((void *)v46 + 2) = 0;
          *((void *)v46 + 3) = 0;
          *((void *)v46 + 4) = v54;
          *((void *)v46 + 5) = v35;
          *((void *)v46 + 6) = v37;
          (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v46[v45], v42, v44);
          swift_retain();
          _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v40, (uint64_t)&async function pointer to partial apply for closure #1 in GraphCanvasElementView.updateCachedImage(), (uint64_t)v46);
          swift_unknownObjectRelease();
          swift_release();
          swift_release();
          outlined destroy of StocksKitCurrencyCache.Provider?(v40, &demangling cache variable for type metadata for TaskPriority?);
          (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v44);
        }
      }
    }
  }
}

uint64_t closure #1 in GraphCanvasElementView.updateCachedImage()(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a7;
  uint64_t v10 = type metadata accessor for CRKeyPath();
  v7[5] = v10;
  void v7[6] = *(void *)(v10 - 8);
  v7[7] = swift_task_alloc();
  uint64_t v11 = (void *)swift_task_alloc();
  v7[8] = v11;
  *uint64_t v11 = v7;
  v11[1] = closure #1 in GraphCanvasElementView.updateCachedImage();
  v12.n128_f64[0] = a1;
  v13.n128_f64[0] = a2;
  return MEMORY[0x270F13548](v12, v13);
}

uint64_t closure #1 in GraphCanvasElementView.updateCachedImage()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in GraphCanvasElementView.updateCachedImage(), 0, 0);
}

uint64_t closure #1 in GraphCanvasElementView.updateCachedImage()()
{
  Class super_class = v0[4].super_class;
  if (super_class)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id receiver = v0[3].receiver;
    Class v2 = v0[3].super_class;
    Class v4 = v0[2].super_class;
    uint64_t v5 = *(void **)(static GraphCanvasElementRenderedImageCache.shared + 16);
    uint64_t v6 = (void (*)(Class, id, Class))receiver[2];
    v6(v2, v0[2].receiver, v4);
    uint64_t v7 = (objc_class *)type metadata accessor for KeyPathWrapper();
    uint64_t v8 = (char *)objc_allocWithZone(v7);
    v6((Class)&v8[OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path], v2, v4);
    v0[1].id receiver = v8;
    v0[1].Class super_class = v7;
    id v9 = objc_msgSendSuper2(v0 + 1, sel_init);
    ((void (*)(Class, Class))receiver[1])(v2, v4);
    objc_msgSend(v5, sel_setObject_forKey_, super_class, v9);
  }
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0->super_class;
  return v10();
}

void @objc GraphCanvasElementView.updateCachedImage()(void *a1)
{
  id v1 = a1;
  GraphCanvasElementView.updateCachedImage()();
}

Swift::Void __swiftcall GraphCanvasElementView.updateUI()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v2 - 8);
  Class v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized CanvasElementView.updateGestures()();
  specialized CanvasElementView.updateFrame()();
  id v9 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  if (v9)
  {
    uint64_t v11 = v9;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v9) + 0x680))();
  }
  uint64_t v12 = (char *)v1 + *(void *)((*v10 & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v12, v5);
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined destroy of GraphElement((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for GraphElement);
  GraphCanvasElementView.cachedGraphableExpressionsState.getter();
  GraphableExpressionsState.update()();
  swift_release();
  GraphCanvasElementView.updateGraphView()();
}

uint64_t GraphCanvasElementView.isSelected.setter(char a1, double a2)
{
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  uint64_t result = specialized CanvasElementView.isSelected.didset(a2);
  uint64_t v5 = *(void *)(v2 + direct field offset for GraphCanvasElementView.graphViewController);
  if (v5
    && *(void *)(v5
                 + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph))
  {
    swift_retain();
    dispatch thunk of CalculateGraph.isSelected.setter();
    uint64_t result = swift_release();
  }
  if (*(unsigned char *)(v2 + v3) == 1)
  {
    GraphCanvasElementView.cachedGraphableExpressionsState.getter();
    GraphableExpressionsState.update()();
    return swift_release();
  }
  return result;
}

void @objc GraphCanvasElementView.layoutSubviews()(void *a1)
{
  v2.id receiver = a1;
  v2.Class super_class = (Class)type metadata accessor for GraphCanvasElementView(0);
  id v1 = v2.receiver;
  objc_msgSendSuper2(&v2, sel_layoutSubviews);
  GraphCanvasElementView.layoutGraphView()();
}

Swift::Void __swiftcall GraphCanvasElementView.layoutGraphView()()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)&v0[direct field offset for GraphCanvasElementView.graphViewController];
  if (v6)
  {
    uint64_t v7 = *(void **)(v6
                  + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView);
    if (v7)
    {
      id v8 = v7;
      v16.CGFloat a = 1.0;
      v16.CGFloat b = 0.0;
      v16.CGFloat c = 0.0;
      v16.CGFloat d = 1.0;
      v16.tCGFloat x = 0.0;
      v16.tCGFloat y = 0.0;
      objc_msgSend(v8, sel_setTransform_, &v16);
      objc_msgSend(v8, sel_setFrame_, GraphCanvasElementView.graphViewFrame.getter());
      id v9 = &v0[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x380)];
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v9, v2);
      swift_getKeyPath();
      lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      CGAffineTransformMakeRotation(&v16, v15);
      objc_msgSend(v8, sel_setTransform_, &v16);
      objc_msgSend(v8, sel_bounds);
      double v12 = v10;
      double v13 = v11;
      uint64_t v14 = (double *)&v1[direct field offset for GraphCanvasElementView.previousGraphViewSize];
      if ((v1[direct field offset for GraphCanvasElementView.previousGraphViewSize + 16] & 1) == 0
        && (vabdd_f64(v10, *v14) >= 1.0 || vabdd_f64(v11, v14[1]) >= 1.0))
      {
        objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v1, sel_updateCachedImage, 0);
        objc_msgSend(v1, sel_performSelector_withObject_afterDelay_, sel_updateCachedImage, 0, 2.0);
      }

      *uint64_t v14 = v12;
      v14[1] = v13;
      *((unsigned char *)v14 + 16) = 0;
    }
  }
}

uint64_t GraphCanvasElementView.modifiableProperties.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  v8[0] = type metadata accessor for GraphElement();
  v8[1] = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  void v8[2] = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v6 = 5;
  if ((v9 & 0x80) == 0) {
    uint64_t v6 = 7;
  }
  if ((v9 & 4) != 0) {
    return 0;
  }
  else {
    return v6;
  }
}

Swift::OpaquePointer_optional __swiftcall GraphCanvasElementView.pasteboardRepresentation()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v48 = *(void *)(v2 - 8);
  uint64_t v49 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v47 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRKeyPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v47 - v13;
  CGFloat v15 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  CGAffineTransform v16 = v15;
  double v17 = v14;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v16, v4);
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  Capsule<>.rootID.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v18 = *(void **)(static GraphCanvasElementRenderedImageCache.shared + 16);
  id v19 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v19(v11, v17, v8);
  id v20 = (objc_class *)type metadata accessor for KeyPathWrapper();
  uint64_t v21 = (char *)objc_allocWithZone(v20);
  id v50 = v17;
  id v22 = v21;
  v19(&v21[OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path], v11, v8);
  v51.id receiver = v22;
  v51.Class super_class = v20;
  id v23 = objc_msgSendSuper2(&v51, sel_init);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v11, v8);
  id v25 = objc_msgSend(v18, sel_objectForKey_, v23);

  if (!v25)
  {
    uint64_t v33 = MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v33)
    {
      uint64_t v34 = (void *)v33;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20C835790;
      *(void *)(inited + 32) = v1;
      *(void *)&v52[0] = inited;
      specialized Array._endMutation()();
      uint64_t v36 = *(void *)&v52[0];
      memset(v52, 0, sizeof(v52));
      char v53 = 1;
      uint64_t v37 = *(uint64_t (**)(uint64_t, _OWORD *))((*MEMORY[0x263F8EED0] & *v34) + 0x678);
      id v38 = v1;
      uint64_t v39 = (void *)v37(v36, v52);
      swift_bridgeObjectRelease();
      if (v39)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
        uint64_t v40 = swift_initStackObject();
        *(_OWORD *)(v40 + 16) = xmmword_20C832C20;
        uint64_t v41 = v47;
        static UTType.png.getter();
        uint64_t v42 = UTType.identifier.getter();
        uint64_t v44 = v43;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v41, v49);
        *(void *)(v40 + 32) = v42;
        *(void *)(v40 + 40) = v44;
        *(void *)(v40 + 72) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
        *(void *)(v40 + 48) = v39;
        id v45 = v39;
        unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(v40);

        goto LABEL_5;
      }
      v24(v50, v8);
    }
    else
    {
      v24(v50, v8);
    }
    unint64_t v31 = 0;
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v26 = swift_initStackObject();
  *(_OWORD *)(v26 + 16) = xmmword_20C832C20;
  uint64_t v27 = v47;
  static UTType.png.getter();
  uint64_t v28 = UTType.identifier.getter();
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v49);
  *(void *)(v26 + 32) = v28;
  *(void *)(v26 + 40) = v30;
  *(void *)(v26 + 72) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  *(void *)(v26 + 48) = v25;
  unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(v26);
LABEL_5:
  v24(v50, v8);
LABEL_12:
  uint64_t v46 = (void *)v31;
  result.value._Swift::Int rawValue = v46;
  result.is_nil = v32;
  return result;
}

uint64_t GraphCanvasElementView.updateVisibleRange(from:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of CalculateGraph.xAxisBounds.getter();
  double v10 = v9;
  double v12 = v11;
  uint64_t result = dispatch thunk of CalculateGraph.yAxisBounds.getter();
  if (v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected] == 1)
  {
    CGFloat v16 = v14;
    double v17 = v12 - v10;
    double v18 = v15 - v14;
    id v19 = &v0[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x380)];
    swift_beginAccess();
    id v20 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v36 = v19;
    v20(v8, v19, v5);
    lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
    Capsule<>.root.getter();
    id v23 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v21 = v6 + 8;
    id v22 = v23;
    v23(v8, v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    CGFloat v24 = *(double *)v37;
    CGFloat v25 = *(double *)&v37[1];
    CGFloat v26 = *(double *)&v37[2];
    CGFloat v27 = *(double *)&v37[3];
    outlined destroy of GraphElement((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for GraphElement);
    v38.origin.CGFloat x = v24;
    v38.origin.CGFloat y = v25;
    v38.size.CGFloat width = v26;
    v38.size.CGFloat height = v27;
    v39.origin.CGFloat x = v10;
    v39.origin.CGFloat y = v16;
    v39.size.CGFloat width = v17;
    v39.size.CGFloat height = v18;
    uint64_t result = CGRectEqualToRect(v38, v39);
    if ((result & 1) == 0)
    {
      uint64_t v34 = v21;
      uint64_t v35 = v22;
      MEMORY[0x270FA5388](result);
      *((double *)&v34 - 4) = v10;
      *((CGFloat *)&v34 - 3) = v16;
      *((double *)&v34 - 2) = v17;
      *((double *)&v34 - 1) = v18;
      uint64_t v28 = v36;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      swift_endAccess();
      uint64_t v29 = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
      if (v29)
      {
        uint64_t v30 = (void *)v29;
        v20(v8, v28, v5);
        LOBYTE(v37[0]) = 4;
        unint64_t v31 = (void *)MEMORY[0x263F8EED0];
        Swift::Bool v32 = *(void (**)(char *, void *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v30) + 0x550);
        uint64_t v33 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
        v32(v8, v37, v2, v33);
        LOBYTE(v37[0]) = 4;
        (*(void (**)(void *))((*v31 & *v30) + 0x530))(v37);

        v35(v8, v5);
      }
      objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v1, sel_updateCachedImage, 0);
      return (uint64_t)objc_msgSend(v1, sel_performSelector_withObject_afterDelay_, sel_updateCachedImage, 0, 2.0);
    }
  }
  return result;
}

uint64_t closure #1 in GraphCanvasElementView.updateVisibleRange(from:)()
{
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  uint64_t v0 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v0(v2, 0);
}

void (*implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)())()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = v1;
  return partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:);
}

void closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v4 = GraphCanvasElementView.updateVisibleRange(from:)();
      MEMORY[0x270FA5388](v4);
      withObservationTracking<A>(_:onChange:)();

      swift_release();
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall GraphCanvasElementView.updateModelAfterCalculateGraphDeletion()()
{
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + direct field offset for GraphCanvasElementView.graphViewController);
  if (!v4) {
    return;
  }
  uint64_t v5 = *(void *)(v4
                 + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph);
  if (!v5) {
    return;
  }
  swift_retain();
  unint64_t v6 = dispatch thunk of CalculateGraph.graphExpressions.getter();
  unint64_t v7 = v6;
  if (!(v6 >> 62))
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8) {
      goto LABEL_5;
    }
LABEL_15:
    uint64_t v15 = swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
    goto LABEL_16;
  }
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v26 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v23[1] = v5;
    uint64_t v24 = v8;
    v23[0] = v0;
    uint64_t v9 = 0;
    uint64_t v10 = v26;
    unint64_t v11 = v7;
    unint64_t v12 = v7 & 0xC000000000000001;
    do
    {
      if (v12) {
        MEMORY[0x21054E050](v9, v11);
      }
      else {
        swift_retain();
      }
      dispatch thunk of CalculateGraphExpression.id.getter();
      swift_release();
      uint64_t v26 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v26;
      }
      ++v9;
      *(void *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v10+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(void *)(v1 + 72) * v14, v3, v25);
    }
    while (v24 != v9);
    uint64_t v15 = swift_bridgeObjectRelease();
LABEL_16:
    uint64_t v16 = GraphCanvasElementView.cachedGraphableExpressionsState.getter(v15);
    swift_getKeyPath();
    uint64_t v26 = v16;
    lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    unint64_t v17 = *(void *)(v16 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized Sequence.first(where:)(v17, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (!v8)
    {
      swift_release();
      return;
    }
    if (one-time initialization token for mathLogger == -1) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  __break(1u);
LABEL_24:
  swift_once();
LABEL_18:
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)mathLogger);
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_20C2D7000, v19, v20, "Deleted expression that was deleted externally", v21, 2u);
    MEMORY[0x210550270](v21, -1, -1);
  }

  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  v23[-2] = v8;
  LOBYTE(v23[-1]) = 0;
  uint64_t v26 = v8;
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  swift_release();
}

void (*implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)())()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = v1;
  return partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:);
}

void closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v14 = MEMORY[0x210550400](a1 + 16);
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v24[1] = Strong;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v25 = static OS_dispatch_queue.main.getter();
      uint64_t v17 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v18 = swift_allocObject();
      uint64_t v26 = v11;
      uint64_t v19 = v18;
      swift_weakInit();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v17;
      *(void *)(v20 + 24) = v19;
      v24[0] = v17;
      aBlock[4] = v28;
      aBlock[5] = v20;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      void aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = a5;
      uint64_t v21 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v29 = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      uint64_t v22 = v27;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      uint64_t v28 = v10;
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v23 = (void *)v25;
      MEMORY[0x21054DA10](0, v13, v9, v21);
      _Block_release(v21);

      swift_release();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v28);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

void closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x210550400](a1 + 16);
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v13 = Strong;
      unint64_t v14 = dispatch thunk of CalculateGraph.graphExpressions.getter();
      if (v14 >> 62) {
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v22 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v15 = (char *)v11 + *(void *)((*MEMORY[0x263F8EED0] & *v11) + 0x380);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
      swift_getKeyPath();
      lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v16 = CROrderedSet.count.getter();
      uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if (v22 < v16)
      {
        if (one-time initialization token for mathLogger != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        __swift_project_value_buffer(v18, (uint64_t)mathLogger);
        uint64_t v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v21 = 0;
          _os_log_impl(&dword_20C2D7000, v19, v20, "Detected externally deleted expression", v21, 2u);
          MEMORY[0x210550270](v21, -1, -1);
        }

        GraphCanvasElementView.updateModelAfterCalculateGraphDeletion()();
      }
      MEMORY[0x270FA5388](v17);
      *(&v22 - 2) = (uint64_t)v11;
      *(&v22 - 1) = v13;
      withObservationTracking<A>(_:onChange:)();

      swift_release();
    }
    else
    {
    }
  }
}

void GraphCanvasElementView.updateGraphableExpressionState(_:)(CGColor *a1)
{
  uint64_t v2 = v1;
  id v227 = a1;
  uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphableExpression>);
  uint64_t v3 = *(void *)(v204 - 8);
  MEMORY[0x270FA5388](v204);
  uint64_t v5 = (char *)&v179 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v179 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
  MEMORY[0x270FA5388](v10 - 8);
  int v212 = (unint64_t *)((char *)&v179 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v226 = type metadata accessor for GraphableExpression();
  uint64_t v213 = *(void *)(v226 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v226);
  unint64_t v210 = (unint64_t)&v179 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v211 = (uint64_t)&v179 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v179 - v16;
  uint64_t v218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v223 = *(void *)(v218 - 8);
  MEMORY[0x270FA5388](v218);
  uint64_t v216 = (char *)&v179 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v19);
  uint64_t v222 = (uint64_t)&v179 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v217 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v21 = *(void *)(v217 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v217);
  uint64_t v214 = (char *)&v179 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v215 = (char *)&v179 - v24;
  unint64_t v221 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v221 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v221);
  v224 = (char *)&v179 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v225 = (char *)&v179 - v28;
  uint64_t v29 = (void *)MEMORY[0x210550400]((char *)v2 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v29)
  {
    uint64_t v30 = *(void *)((char *)v2 + direct field offset for GraphCanvasElementView.graphViewController);
    if (v30
      && (uint64_t v202 = v17,
          (uint64_t v31 = *(void *)(v30
                           + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph)) != 0))
    {
      uint64_t v193 = v9;
      uint64_t v194 = v7;
      uint64_t v195 = v6;
      unint64_t v196 = v5;
      uint64_t v197 = v3;
      Swift::Bool v32 = (void *)MEMORY[0x263F8EED0];
      uint64_t v33 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v29) + 0x750);
      id v203 = v29;
      uint64_t v34 = swift_retain();
      uint64_t v35 = v33(v34);
      if (v35)
      {
        uint64_t v201 = v35;
        uint64_t v191 = v36;
        swift_getKeyPath();
        uint64_t v37 = (char *)v227 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState___observationRegistrar;
        uint64_t v234 = v227;
        CGRect v38 = v227;
        uint64_t v220 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
        uint64_t v219 = v37;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        CGRect v39 = (char *)v38 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
        swift_beginAccess();
        uint64_t v40 = *(void (**)(char *, char *, unint64_t))(v25 + 16);
        uint64_t v41 = v225;
        id v208 = v39;
        uint64_t v42 = v39;
        unint64_t v43 = v221;
        uint64_t v207 = v25 + 16;
        uint64_t v206 = v40;
        v40(v225, v42, v221);
        uint64_t v198 = UUID.uuidString.getter();
        char v199 = v44;
        id v45 = *(void (**)(char *, unint64_t))(v25 + 8);
        uint64_t v209 = (CGColor *)(v25 + 8);
        uint64_t v205 = v45;
        v45(v41, v43);
        uint64_t v46 = *(void *)((*v32 & *v2) + 0x380);
        uint64_t v180 = v2;
        uint64_t v47 = (char *)v2 + v46;
        swift_beginAccess();
        uint64_t v200 = v31;
        uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
        uint64_t v49 = v215;
        uint64_t v50 = v217;
        v48(v215, v47, v217);
        uint64_t v51 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
        uint64_t v52 = v222;
        uint64_t v185 = v51;
        Capsule<>.root.getter();
        char v53 = *(void (**)(char *, uint64_t))(v21 + 8);
        v53(v49, v50);
        uint64_t v54 = v19;
        uint64_t v55 = v214;
        uint64_t v189 = v47;
        uint64_t v188 = v21 + 16;
        unint64_t v187 = v48;
        v48(v214, v47, v50);
        uint64_t v183 = v54;
        uint64_t v56 = v52 + *(int *)(v54 + 28);
        uint64_t v57 = v223;
        id v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v223 + 16);
        uint64_t v59 = v216;
        uint64_t v60 = v218;
        uint64_t v182 = v223 + 16;
        unint64_t v181 = v58;
        uint64_t v61 = v58(v216, v56, v218);
        MEMORY[0x270FA5388](v61);
        *(&v179 - 2) = (uint64_t)v55;
        uint64_t v62 = CROrderedSet.map<A>(_:)();
        uint64_t v190 = 0;
        uint64_t v63 = *(void (**)(void, void))(v57 + 8);
        uint64_t v223 = v57 + 8;
        uint64_t v184 = (void (*)(char *, uint64_t))v63;
        v63(v59, v60);
        id v64 = v227;
        uint64_t v192 = (CGColor *)(v21 + 8);
        int v186 = v53;
        v53(v55, v50);
        outlined destroy of GraphElement(v222, (uint64_t (*)(void))type metadata accessor for GraphElement);
        uint64_t v65 = *(void *)(v62 + 16);
        if (v65)
        {
          unint64_t v66 = 0;
          unint64_t v67 = v62 + ((*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80));
          uint64_t v68 = *(void *)(v213 + 72);
          uint64_t v69 = v199;
          uint64_t v70 = (CGColor *)v198;
          while (1)
          {
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
            CRRegister.wrappedValue.getter();
            if (v230 == v70 && v231 == v69) {
              break;
            }
            char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v72) {
              goto LABEL_25;
            }
            ++v66;
            v67 += v68;
            if (v65 == v66)
            {
              swift_bridgeObjectRelease();
              id v64 = v227;
              uint64_t v73 = (uint64_t)v202;
              goto LABEL_21;
            }
          }
          swift_bridgeObjectRelease();
LABEL_25:
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
        swift_bridgeObjectRelease();
        uint64_t v73 = (uint64_t)v202;
LABEL_21:
        uint64_t ObjectType = swift_getObjectType();
        swift_getKeyPath();
        unint64_t v230 = v64;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        id v75 = v225;
        unint64_t v76 = v221;
        v206(v225, v208, v221);
        uint64_t v77 = v191;
        uint64_t v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v191 + 48))(v75, ObjectType, v191);
        v205(v75, v76);
        uint64_t v79 = v226;
        if (v78)
        {
          uint64_t v80 = (uint64_t)v212;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 64))(v78, ObjectType, v77);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v213 + 48))(v80, 1, v79) == 1)
          {
            swift_release();
            outlined destroy of StocksKitCurrencyCache.Provider?(v80, (uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
          }
          else
          {
            uint64_t v179 = v78;
            outlined init with take of GraphableExpression(v80, v73);
            uint64_t v83 = v215;
            char v84 = v189;
            uint64_t v85 = v217;
            CGRect v86 = v187;
            v187(v215, v189, v217);
            uint64_t v87 = v222;
            Capsule<>.root.getter();
            CGRect v88 = v184;
            uint64_t v89 = v186;
            v186(v83, v85);
            unint64_t v90 = v214;
            v86(v214, v84, v85);
            uint64_t v91 = v216;
            uint64_t v92 = v218;
            uint64_t v93 = v181(v216, v87 + *(int *)(v183 + 28), v218);
            MEMORY[0x270FA5388](v93);
            *(&v179 - 2) = (uint64_t)v90;
            uint64_t v94 = v190;
            uint64_t v95 = CROrderedSet.map<A>(_:)();
            uint64_t v190 = v94;
            v88(v91, v92);
            v89(v90, v85);
            outlined destroy of GraphElement(v87, (uint64_t (*)(void))type metadata accessor for GraphElement);
            if (*(void *)(v95 + 16))
            {
              uint64_t v96 = *(void *)(v95 + 16);
              unint64_t v66 = 0;
              unint64_t v97 = v95
                  + ((*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80));
              int v212 = (unint64_t *)&v202[*(int *)(v226 + 20)];
              uint64_t v191 = *(void *)(v213 + 72);
              while (1)
              {
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
                CRRegister.wrappedValue.getter();
                uint64_t v99 = v230;
                uint64_t v98 = v231;
                CRRegister.wrappedValue.getter();
                if (v99 == v230 && v98 == v231)
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease_n();
                  goto LABEL_82;
                }
                char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v101) {
                  break;
                }
                ++v66;
                v97 += v191;
                if (v96 == v66) {
                  goto LABEL_35;
                }
              }
              swift_bridgeObjectRelease();
              swift_release();
LABEL_82:
              outlined destroy of GraphElement((uint64_t)v202, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
LABEL_26:
              char v81 = 0;
              int v82 = 1;
LABEL_37:
              swift_getKeyPath();
              uint64_t v103 = (unsigned __int8 *)v227;
              unint64_t v230 = v227;
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              uint64_t v104 = *(void *)&v103[OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable];
              unint64_t v105 = *(void *)&v103[OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable + 8];
              int v212 = (unint64_t *)&v103[OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariable];
              uint64_t v232 = v104;
              unint64_t v233 = v105;
              swift_getKeyPath();
              unint64_t v230 = (CGColor *)v103;
              swift_bridgeObjectRetain();
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              int v106 = v103[24];
              swift_getKeyPath();
              unint64_t v230 = (CGColor *)v103;
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              if (*(void *)(*(void *)&v103[OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__graphableVariables]
                             + 16) >= 2uLL
                && !v105)
              {
                int v106 = 0;
              }
              if ((v81 & 1) != 0 || (v82 & v106) == 0)
              {
                if (v82 == v106)
                {
                  swift_unknownObjectRelease();
                  swift_bridgeObjectRelease();
LABEL_97:
                  swift_release();

                  goto LABEL_98;
                }
                if ((v81 & 1) == 0)
                {
                  uint64_t v131 = swift_bridgeObjectRelease();
                  MEMORY[0x270FA5388](v131);
                  *(&v179 - 4) = (uint64_t)v180;
                  *(&v179 - 3) = v66;
                  char v132 = v203;
                  *(&v179 - 2) = (uint64_t)v203;
                  (*(void (**)(void, void, uint64_t (*)()))((*MEMORY[0x263F8EED0] & *v132) + 0x478))(0, 0, partial apply for closure #5 in GraphCanvasElementView.updateGraphableExpressionState(_:));
LABEL_96:
                  GraphCanvasElementView.updateGraphView()();
                  swift_unknownObjectRelease();
                  goto LABEL_97;
                }
                os_log_type_t v119 = v227;
                if (!v105)
                {
                  swift_getKeyPath();
                  unint64_t v230 = v119;
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_retain();
                  uint64_t v120 = CalculateExpression.graphableVariables.getter();
                  swift_release();
                  uint64_t v121 = *(void *)(v120 + 16);
                  swift_bridgeObjectRelease();
                  if (v121)
                  {
                    swift_getKeyPath();
                    unint64_t v230 = v119;
                    ObservationRegistrar.access<A, B>(_:keyPath:)();
                    swift_release();
                    swift_retain();
                    uint64_t v122 = (void *)CalculateExpression.graphableVariables.getter();
                    swift_release();
                    if (v122[2])
                    {
                      uint64_t v124 = v122[4];
                      unint64_t v123 = v122[5];
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      uint64_t v124 = 0;
                      unint64_t v123 = 0;
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v232 = v124;
                    unint64_t v233 = v123;
                  }
                }
                if (one-time initialization token for mathLogger == -1)
                {
LABEL_86:
                  uint64_t v164 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v164, (uint64_t)mathLogger);
                  swift_retain_n();
                  long long v165 = Logger.logObject.getter();
                  os_log_type_t v166 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v165, v166))
                  {
                    uint64_t v167 = swift_slowAlloc();
                    char v168 = (CGColor *)swift_slowAlloc();
                    unint64_t v230 = v168;
                    *(_DWORD *)uint64_t v167 = 136380931;
                    swift_getKeyPath();
                    uint64_t v228 = (uint64_t)v119;
                    ObservationRegistrar.access<A, B>(_:keyPath:)();
                    swift_release();
                    swift_retain();
                    uint64_t v169 = CalculateExpression.expression.getter();
                    unint64_t v171 = v170;
                    swift_release();
                    uint64_t v228 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v169, v171, (uint64_t *)&v230);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    os_log_type_t v119 = v227;
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v167 + 12) = 2081;
                    swift_beginAccess();
                    if (v233) {
                      uint64_t v172 = v232;
                    }
                    else {
                      uint64_t v172 = 0x3E656E6F6E3CLL;
                    }
                    if (v233) {
                      unint64_t v173 = v233;
                    }
                    else {
                      unint64_t v173 = 0xE600000000000000;
                    }
                    swift_bridgeObjectRetain();
                    uint64_t v229 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v172, v173, (uint64_t *)&v230);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    _os_log_impl(&dword_20C2D7000, v165, v166, "Adding graphable expression: %{private}s, variable: %{private}s", (uint8_t *)v167, 0x16u);
                    swift_arrayDestroy();
                    MEMORY[0x210550270](v168, -1, -1);
                    MEMORY[0x210550270](v167, -1, -1);
                  }
                  else
                  {

                    swift_release_n();
                  }
                  int v174 = v180;
                  swift_getKeyPath();
                  unint64_t v230 = v119;
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_retain();
                  CalculateExpression.expression.getter();
                  swift_release();
                  swift_beginAccess();
                  uint64_t v175 = v233;
                  uint64_t v229 = 0;
                  swift_bridgeObjectRetain();
                  uint64_t v176 = v210;
                  uint64_t v177 = GraphableExpression.init(expression:identifier:graphableVariable:color:)(v175, v210);
                  MEMORY[0x270FA5388](v177);
                  *(&v179 - 4) = (uint64_t)v174;
                  *(&v179 - 3) = v176;
                  uint64_t v178 = v203;
                  *(&v179 - 2) = (uint64_t)v203;
                  (*(void (**)(void, void, uint64_t (*)()))((*MEMORY[0x263F8EED0] & *v178) + 0x478))(0, 0, partial apply for closure #6 in GraphCanvasElementView.updateGraphableExpressionState(_:));
                  outlined destroy of GraphElement(v176, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
                  goto LABEL_96;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                unint64_t v107 = dispatch thunk of CalculateGraph.graphExpressions.getter();
                unint64_t v108 = v107;
                if (v107 >> 62)
                {
LABEL_101:
                  swift_retain();
                  swift_bridgeObjectRetain();
                  uint64_t v109 = _CocoaArrayWrapper.endIndex.getter();
                }
                else
                {
                  uint64_t v109 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  swift_retain();
                  swift_bridgeObjectRetain();
                }
                unint64_t v110 = v221;
                if (!v109)
                {
LABEL_53:
                  swift_release();
                  swift_unknownObjectRelease();
                  swift_release();

                  swift_bridgeObjectRelease_n();
LABEL_98:
                  swift_bridgeObjectRelease();
                  return;
                }
                unint64_t v210 = v66;
                unint64_t v221 = v108 & 0xC000000000000001;
                uint64_t v111 = 4;
                char v112 = v225;
                while (1)
                {
                  uint64_t v113 = v111 - 4;
                  if (v221)
                  {
                    uint64_t v114 = MEMORY[0x21054E050](v111 - 4, v108);
                    uint64_t v115 = v111 - 3;
                    if (__OFADD__(v113, 1)) {
                      goto LABEL_100;
                    }
                  }
                  else
                  {
                    uint64_t v114 = *(void *)(v108 + 8 * v111);
                    swift_retain();
                    uint64_t v115 = v111 - 3;
                    if (__OFADD__(v113, 1))
                    {
LABEL_100:
                      __break(1u);
                      goto LABEL_101;
                    }
                  }
                  unint64_t v66 = v109;
                  dispatch thunk of CalculateGraphExpression.id.getter();
                  swift_getKeyPath();
                  unint64_t v230 = v227;
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  uint64_t v116 = v224;
                  v206(v224, v208, v110);
                  char v117 = static UUID.== infix(_:_:)();
                  char v118 = v205;
                  v205(v116, v110);
                  v118(v112, v110);
                  if (v117) {
                    break;
                  }
                  swift_release();
                  ++v111;
                  uint64_t v109 = v66;
                  if (v115 == v66) {
                    goto LABEL_53;
                  }
                }
                uint64_t v225 = (char *)v114;
                uint64_t v125 = v227;
                swift_release();
                swift_bridgeObjectRelease_n();
                swift_getKeyPath();
                unint64_t v230 = v125;
                ObservationRegistrar.access<A, B>(_:keyPath:)();
                swift_release();
                if (*((void *)v125 + 4)
                  && (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor), swift_retain_n(), uint64_t v126 = (void *)UIColor.init(_:)(), Color.init(cgColor:)((CGColor *)objc_msgSend(v126, sel_CGColor), &v230), v126, v127 = v230, swift_release(), v127))
                {
                  uint64_t v128 = v127;
                  dispatch thunk of CalculateGraphExpression.effectiveColor.getter();
                  swift_retain();
                  uint64_t v129 = (void *)UIColor.init(_:)();
                  Color.init(cgColor:)((CGColor *)objc_msgSend(v129, sel_CGColor), &v230);

                  uint64_t v130 = v230;
                  if (!v230
                    || (uint64_t v228 = (uint64_t)v128, (Color.almostEqual(_:)((void **)&v228) & 1) == 0))
                  {
                    swift_getKeyPath();
                    unint64_t v230 = v227;
                    ObservationRegistrar.access<A, B>(_:keyPath:)();
                    swift_release();
                    swift_retain();
                    dispatch thunk of CalculateGraphExpression.color.setter();
                  }

                  swift_release();
                }
                else
                {
                  uint64_t v128 = 0;
                }
                swift_getKeyPath();
                unint64_t v230 = v227;
                ObservationRegistrar.access<A, B>(_:keyPath:)();
                swift_release();
                uint64_t v133 = (char *)v212[1];
                uint64_t v209 = v128;
                if (v133)
                {
                  unint64_t v221 = *v212;
                  v224 = v133;
                }
                else
                {
                  unint64_t v221 = 0;
                  v224 = (char *)0xE000000000000000;
                }
                uint64_t v134 = v215;
                uint64_t v135 = v189;
                uint64_t v136 = v217;
                unint64_t v137 = v187;
                v187(v215, v189, v217);
                swift_bridgeObjectRetain();
                uint64_t v138 = v222;
                Capsule<>.root.getter();
                os_log_type_t v119 = v192;
                unint64_t v139 = v186;
                v186(v134, v136);
                uint64_t v140 = v214;
                v137(v214, v135, v136);
                BOOL v141 = v216;
                uint64_t v142 = v218;
                uint64_t v143 = v181(v216, v138 + *(int *)(v183 + 28), v218);
                MEMORY[0x270FA5388](v143);
                *(&v179 - 2) = (uint64_t)v140;
                uint64_t v144 = CROrderedSet.map<A>(_:)();
                v184(v141, v142);
                v139(v140, v136);
                outlined destroy of GraphElement(v138, (uint64_t (*)(void))type metadata accessor for GraphElement);
                if (v210 < *(void *)(v144 + 16))
                {
                  uint64_t v145 = v211;
                  outlined init with copy of GraphableExpression(v144+ ((*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80))+ *(void *)(v213 + 72) * v210, v211);
                  swift_bridgeObjectRelease();
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
                  CRRegister.wrappedValue.getter();
                  uint64_t v147 = v230;
                  unint64_t v146 = v231;
                  outlined destroy of GraphElement(v145, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
                  unint64_t v148 = v221;
                  uint64_t v149 = v224;
                  if ((CGColor *)v221 == v147 && v224 == v146)
                  {
                    swift_release();
                    swift_release();

                    swift_bridgeObjectRelease_n();
LABEL_78:

                    swift_unknownObjectRelease();
                    goto LABEL_98;
                  }
                  char v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v150)
                  {
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_release();

                    goto LABEL_78;
                  }
                  CalculateGraphExpression.expression.getter();
                  swift_getKeyPath();
                  unint64_t v230 = v227;
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_bridgeObjectRetain();
                  CalculateExpression.graphableVariable.setter();
                  swift_release();
                  uint64_t v151 = v215;
                  v224 = v149;
                  uint64_t v152 = v189;
                  uint64_t v153 = v217;
                  unint64_t v221 = v148;
                  char v154 = v187;
                  v187(v215, v189, v217);
                  swift_getKeyPath();
                  uint64_t v155 = v216;
                  Capsule<>.subscript.getter();
                  swift_release();
                  uint64_t v156 = (uint64_t (*)(char *, uint64_t))v186;
                  v186(v151, v153);
                  v157 = v193;
                  uint64_t v158 = v218;
                  CROrderedSet.subscript.getter();
                  v184(v155, v158);
                  v154(v151, v152, v153);
                  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
                  uint64_t v159 = v196;
                  uint64_t v160 = v195;
                  Capsule.encapsulate<A>(_:)();
                  uint64_t v161 = v156(v151, v153);
                  MEMORY[0x270FA5388](v161);
                  unint64_t v162 = v221;
                  *(&v179 - 4) = (uint64_t)v159;
                  *(&v179 - 3) = v162;
                  unint64_t v163 = v203;
                  *(&v179 - 2) = (uint64_t)v224;
                  *(&v179 - 1) = (uint64_t)v163;
                  (*(void (**)(void, void, uint64_t (*)()))((*MEMORY[0x263F8EED0] & *v163) + 0x478))(0, 0, partial apply for closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:));
                  swift_bridgeObjectRelease();
                  GraphCanvasElementView.updateGraphView()();
                  swift_unknownObjectRelease();
                  swift_release();
                  swift_release();

                  (*(void (**)(char *, uint64_t))(v194 + 8))(v157, v160);
                  (*(void (**)(char *, uint64_t))(v197 + 8))(v159, v204);
                  goto LABEL_98;
                }
                __break(1u);
              }
              swift_once();
              goto LABEL_86;
            }
LABEL_35:
            swift_bridgeObjectRelease();
            uint64_t v102 = (uint64_t)v202;
            swift_release();
            outlined destroy of GraphElement(v102, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
          }
        }
        int v82 = 0;
        unint64_t v66 = 0;
        char v81 = 1;
        goto LABEL_37;
      }

      swift_release();
    }
    else
    {
    }
  }
}

uint64_t closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphableExpression>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  Capsule.callAsFunction<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v20[0] = 3;
  uint64_t v12 = (void *)MEMORY[0x263F8EED0];
  uint64_t v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *a4) + 0x550);
  uint64_t v14 = type metadata accessor for GraphableExpression();
  uint64_t v15 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  v13(v11, v20, v14, v15);
  v20[0] = 3;
  (*(void (**)(unsigned char *))((*v12 & *a4) + 0x530))(v20);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t closure #1 in closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)()
{
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #5 in GraphCanvasElementView.updateGraphableExpressionState(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = a2;
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v7 + 16))(v9, v11, v6);
  v18[0] = 3;
  uint64_t v12 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v10 & *a3) + 0x550);
  uint64_t v13 = type metadata accessor for GraphElement();
  uint64_t v14 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  v12(v9, v18, v13, v14);
  v18[0] = 3;
  (*(void (**)(unsigned char *))((*v10 & *a3) + 0x530))(v18);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t closure #1 in closure #5 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1, Swift::Int a2)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  uint64_t v3 = (void (*)(uint64_t *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  CROrderedSet.remove(at:)(a2);
  v3(&v5, 0);
  return swift_release();
}

uint64_t closure #6 in GraphCanvasElementView.updateGraphableExpressionState(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = a2;
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v7 + 16))(v9, v11, v6);
  v18[0] = 3;
  uint64_t v12 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v10 & *a3) + 0x550);
  uint64_t v13 = type metadata accessor for GraphElement();
  uint64_t v14 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  v12(v9, v18, v13, v14);
  v18[0] = 3;
  (*(void (**)(unsigned char *))((*v10 & *a3) + 0x530))(v18);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t closure #1 in closure #6 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for GraphableExpression();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of GraphableExpression(a2, (uint64_t)v8);
  uint64_t v13 = type metadata accessor for CRKeyPath();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 1, 1, v13);
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  uint64_t v14 = (void (*)(unsigned char *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  CROrderedSet.append(_:)();
  v14(v16, 0);
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t GraphCanvasElementView.calculateDocumentObserverGraphableVariables()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for UUID();
  uint64_t v119 = *(void *)(v122 - 8);
  MEMORY[0x270FA5388](v122);
  uint64_t v121 = (uint64_t)v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v123 = (uint64_t)v107 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v120 = (char *)v107 - v9;
  uint64_t v125 = type metadata accessor for GraphableExpression();
  uint64_t v10 = *(void *)(v125 - 8);
  MEMORY[0x270FA5388](v125);
  uint64_t v124 = (char *)v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v115 = *(void *)(v12 - 8);
  uint64_t v116 = (void (**)(void, void))v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v114 = (char *)v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v14);
  char v117 = (char *)v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = (void (**)(void, void, void))__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v118 = (uint64_t)*(v113 - 1);
  MEMORY[0x270FA5388](v113);
  unint64_t v17 = (unint64_t)v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v107 - v19;
  uint64_t v21 = type metadata accessor for PKDrawing();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)v107 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v131 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v129[0] = 8;
  char v25 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v129);
  if ((v25 & 1) == 0) {
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  uint64_t v26 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (!v26) {
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  uint64_t v109 = v10;
  char v112 = v4;
  uint64_t v27 = v26;
  uint64_t v28 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v26) + 0x2F8))();
  uint64_t v30 = v29;
  uint64_t ObjectType = swift_getObjectType();
  Swift::Bool v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(ObjectType, v30);

  if (!v32)
  {

    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  id v111 = v27;
  id v33 = objc_msgSend(v32, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  PKDrawing._bridgeToObjectiveC()(v34);
  uint64_t v36 = v35;
  id v37 = objc_msgSend(v35, sel_uuid);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  uint64_t v128 = &unk_26C1C1038;
  uint64_t v38 = swift_dynamicCastObjCProtocolConditional();
  if (!v38
    || ((CGRect v39 = (void *)v38,
         swift_getObjectType(),
         type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (uint64_t v40 = v39): (uint64_t v40 = 0), !v40))
  {
    swift_unknownObjectRelease();

    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  uint64_t v41 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v41 != -1) {
LABEL_62:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v42 = static CalculateDocumentController.controllers;
  if (!*((void *)static CalculateDocumentController.controllers + 2)) {
    goto LABEL_55;
  }
  swift_unknownObjectRetain();
  unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
  if ((v44 & 1) == 0)
  {
    swift_unknownObjectRelease();
LABEL_55:
    swift_endAccess();

    swift_unknownObjectRelease_n();
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  id v45 = *(void **)(v42[7] + 8 * v43);
  swift_endAccess();
  unint64_t v110 = v45;
  v107[1] = v37;
  swift_unknownObjectRelease_n();
  uint64_t v40 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v46 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v47 = v118;
  uint64_t v48 = *(void (**)(char *, char *, void))(v118 + 16);
  uint64_t v49 = v113;
  v48(v20, v46, v113);
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  Capsule<>.root.getter();
  uint64_t v50 = *(void (**)(void, void))(v47 + 8);
  uint64_t v118 = v47 + 8;
  unint64_t v108 = v50;
  v50(v20, v49);
  v48((char *)v17, v46, v49);
  uint64_t v51 = v116;
  uint64_t v52 = (uint64_t)v117;
  uint64_t v54 = v114;
  uint64_t v53 = v115;
  uint64_t v55 = (*(uint64_t (**)(char *, char *, void (**)(void, void)))(v115 + 16))(v114, &v117[*(int *)(v14 + 28)], v116);
  MEMORY[0x270FA5388](v55);
  v107[-2] = v17;
  uint64_t v56 = CROrderedSet.map<A>(_:)();
  (*(void (**)(char *, void))(v53 + 8))(v54, v51);
  v108(v17, v49);
  outlined destroy of GraphElement(v52, (uint64_t (*)(void))type metadata accessor for GraphElement);
  uint64_t v57 = *(void *)(v56 + 16);
  if (!v57)
  {

    swift_bridgeObjectRelease();
    uint64_t v63 = v110;
LABEL_60:

    swift_unknownObjectRelease();
    return (uint64_t)v40;
  }
  id v58 = &v110[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  unint64_t v59 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
  unint64_t v108 = (void (*)(void, void))v56;
  uint64_t v20 = (char *)(v56 + v59);
  uint64_t v115 = v119 + 48;
  uint64_t v118 = *(void *)(v109 + 72);
  uint64_t v113 = (void (**)(void, void, void))(v119 + 32);
  uint64_t v116 = (void (**)(void, void))(v119 + 8);
  uint64_t v109 = v119 + 16;
  uint64_t v60 = (uint64_t)v112;
  uint64_t v61 = v122;
  uint64_t v62 = (uint64_t)v124;
  uint64_t v63 = v110;
  uint64_t v114 = &v110[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  while (1)
  {
    outlined init with copy of GraphableExpression((uint64_t)v20, v62);
    if (!MEMORY[0x210550400](v58)) {
      goto LABEL_17;
    }
    uint64_t v64 = *((void *)v58 + 1);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    CRRegister.wrappedValue.getter();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v115)(v60, 1, v61) != 1) {
      break;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v60, &demangling cache variable for type metadata for UUID?);
LABEL_23:
    uint64_t v68 = swift_getObjectType();
    uint64_t v62 = (uint64_t)v124;
    uint64_t v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 56))(v124, v68, v64);
    swift_unknownObjectRelease();
    if (v67) {
      goto LABEL_24;
    }
    uint64_t v63 = v110;
    id v58 = v114;
LABEL_17:
    outlined destroy of GraphElement(v62, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
    v20 += v118;
    if (!--v57)
    {

      swift_bridgeObjectRelease();
      goto LABEL_60;
    }
  }
  uint64_t v65 = v120;
  (*v113)(v120, v60, v61);
  uint64_t v66 = swift_getObjectType();
  uint64_t v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48))(v65, v66, v64);
  (*v116)(v65, v61);
  if (!v67) {
    goto LABEL_23;
  }
  swift_unknownObjectRelease();
  uint64_t v62 = (uint64_t)v124;
LABEL_24:
  swift_retain();
  id v37 = (id)(v62 + *(int *)(v125 + 28));
  uint64_t v69 = (char *)v67;
  CRRegister.wrappedValue.getter();
  unint64_t v71 = (unint64_t)v126;
  unint64_t v70 = v127;
  swift_bridgeObjectRelease();
  uint64_t v72 = HIBYTE(v70) & 0xF;
  if ((v70 & 0x2000000000000000) == 0) {
    uint64_t v72 = v71 & 0xFFFFFFFFFFFFLL;
  }
  char v117 = v69;
  if (!v72)
  {
    uint64_t v82 = CalculateExpression.graphableVariable.getter();
    if (v83)
    {
      uint64_t v84 = v82;
      uint64_t v85 = v83;
      uint64_t v86 = v121;
      CalculateExpression.id.getter();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v126 = v40;
      unint64_t v89 = specialized __RawDictionaryStorage.find<A>(_:)(v86);
      uint64_t v90 = v40[2];
      BOOL v91 = (v88 & 1) == 0;
      uint64_t v92 = v90 + v91;
      if (__OFADD__(v90, v91)) {
        goto LABEL_64;
      }
      char v93 = v88;
      if (v40[3] >= v92)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v92, isUniquelyReferenced_nonNull_native);
        unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)(v121);
        if ((v93 & 1) != (v95 & 1)) {
          goto LABEL_66;
        }
        unint64_t v89 = v94;
      }
      uint64_t v61 = v122;
      uint64_t v40 = v126;
      if (v93)
      {
        unint64_t v97 = (uint64_t *)(v126[7] + 16 * v89);
        swift_bridgeObjectRelease();
        *unint64_t v97 = v84;
        v97[1] = v85;
      }
      else
      {
        v126[(v89 >> 6) + 8] |= 1 << v89;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v119 + 16))(v40[6] + *(void *)(v119 + 72) * v89, v121, v61);
        uint64_t v98 = (uint64_t *)(v40[7] + 16 * v89);
        *uint64_t v98 = v84;
        v98[1] = v85;
        uint64_t v99 = v40[2];
        BOOL v100 = __OFADD__(v99, 1);
        uint64_t v101 = v99 + 1;
        if (v100) {
          goto LABEL_65;
        }
        v40[2] = v101;
      }
      uint64_t v60 = (uint64_t)v112;
      uint64_t v63 = v110;
      id v58 = v114;
      swift_bridgeObjectRelease();
      uint64_t v102 = v121;
      goto LABEL_52;
    }
    uint64_t v63 = v110;
    id v58 = v114;
    uint64_t v61 = v122;
LABEL_53:
    swift_release_n();
    goto LABEL_17;
  }
  uint64_t v14 = v123;
  CalculateExpression.id.getter();
  CRRegister.wrappedValue.getter();
  uint64_t v1 = v126;
  unint64_t v73 = v127;
  int v74 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v126 = v40;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  uint64_t v76 = v40[2];
  BOOL v77 = (v75 & 1) == 0;
  uint64_t v78 = v76 + v77;
  if (__OFADD__(v76, v77))
  {
    __break(1u);
    goto LABEL_62;
  }
  char v79 = v75;
  if (v40[3] >= v78)
  {
    uint64_t v62 = (uint64_t)v124;
    if (v74)
    {
      uint64_t v40 = v126;
      if ((v75 & 1) == 0) {
        goto LABEL_49;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v40 = v126;
      if ((v79 & 1) == 0) {
        goto LABEL_49;
      }
    }
    goto LABEL_39;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v78, v74);
  unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v123);
  uint64_t v62 = (uint64_t)v124;
  if ((v79 & 1) != (v81 & 1)) {
    goto LABEL_66;
  }
  unint64_t v17 = v80;
  uint64_t v40 = v126;
  if (v79)
  {
LABEL_39:
    uint64_t v96 = (void *)(v40[7] + 16 * v17);
    swift_bridgeObjectRelease();
    *uint64_t v96 = v1;
    v96[1] = v73;
    goto LABEL_51;
  }
LABEL_49:
  v40[(v17 >> 6) + 8] |= 1 << v17;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v119 + 16))(v40[6] + *(void *)(v119 + 72) * v17, v123, v122);
  uint64_t v103 = (void *)(v40[7] + 16 * v17);
  *uint64_t v103 = v1;
  v103[1] = v73;
  uint64_t v104 = v40[2];
  BOOL v100 = __OFADD__(v104, 1);
  uint64_t v105 = v104 + 1;
  if (!v100)
  {
    v40[2] = v105;
LABEL_51:
    uint64_t v60 = (uint64_t)v112;
    uint64_t v63 = v110;
    id v58 = v114;
    swift_bridgeObjectRelease();
    uint64_t v61 = v122;
    uint64_t v102 = v123;
LABEL_52:
    (*v116)(v102, v61);
    goto LABEL_53;
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t GraphCanvasElementView.updateModelColor(for:identifier:)(uint64_t a1, CGColor *a2, CGColor *a3)
{
  uint64_t v4 = v3;
  uint64_t v102 = a2;
  uint64_t v96 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphableExpression>);
  uint64_t v93 = *(void *)(v6 - 8);
  uint64_t v94 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v92 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  uint64_t v90 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  uint64_t v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for GraphableExpression();
  uint64_t v97 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  uint64_t v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v101 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v99 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v73 - v22;
  uint64_t result = MEMORY[0x210550400]((char *)v4 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v21);
  if (result)
  {
    id v95 = (id)result;
    uint64_t v85 = v11;
    BOOL v77 = v9;
    char v25 = (char *)v4 + *(void *)((*MEMORY[0x263F8EED0] & *v4) + 0x380);
    swift_beginAccess();
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v26(v23, v25, v16);
    uint64_t v81 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
    Capsule<>.root.getter();
    BOOL v100 = v15;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
    char v88 = v23;
    v27(v23, v16);
    uint64_t v84 = v25;
    uint64_t v83 = v17 + 16;
    uint64_t v82 = v26;
    v26(v19, v25, v16);
    uint64_t v80 = v13;
    uint64_t v28 = v101;
    uint64_t v29 = &v100[*(int *)(v13 + 28)];
    uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 16);
    uint64_t v32 = v98;
    uint64_t v31 = v99;
    uint64_t v79 = v101 + 16;
    uint64_t v78 = v30;
    uint64_t v33 = v30(v99, (uint64_t)v29, v98);
    MEMORY[0x270FA5388](v33);
    *(&v73 - 2) = (uint64_t)v19;
    uint64_t v34 = CROrderedSet.map<A>(_:)();
    uint64_t v35 = v32;
    uint64_t v36 = v34;
    id v37 = *(void (**)(char *, uint64_t))(v28 + 8);
    uint64_t v101 = v28 + 8;
    v37(v31, v35);
    uint64_t v86 = v16;
    uint64_t v89 = v17 + 8;
    uint64_t v87 = v27;
    v27(v19, v16);
    outlined destroy of GraphElement((uint64_t)v100, (uint64_t (*)(void))type metadata accessor for GraphElement);
    uint64_t v38 = *(void *)(v36 + 16);
    if (!v38)
    {
LABEL_10:

      swift_bridgeObjectRelease();
      return 0;
    }
    int v74 = v19;
    uint64_t v75 = 0;
    uint64_t v76 = v37;
    unint64_t v39 = 0;
    unint64_t v40 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
    uint64_t v41 = *(void *)(v97 + 72);
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      if (v105[0] == v102 && v105[1] == a3) {
        break;
      }
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v43) {
        goto LABEL_12;
      }
      ++v39;
      v40 += v41;
      if (v38 == v39) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v44 = dispatch thunk of CalculateGraphExpression.color.getter();
    id v45 = v88;
    if (!v44)
    {

      return 0;
    }
    uint64_t v46 = v44;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    swift_retain();
    uint64_t v47 = (void *)UIColor.init(_:)();
    Color.init(cgColor:)((CGColor *)objc_msgSend(v47, sel_CGColor), v105);

    if (!v105[0])
    {

      goto LABEL_20;
    }
    uint64_t v102 = v105[0];
    uint64_t v97 = v46;
    uint64_t v48 = v84;
    uint64_t v49 = v86;
    uint64_t v50 = v82;
    v82(v45, v84, v86);
    uint64_t v51 = (uint64_t)v100;
    Capsule<>.root.getter();
    v87(v45, v49);
    uint64_t v52 = v74;
    v50(v74, v48, v49);
    uint64_t v53 = v98;
    uint64_t v54 = v78(v99, v51 + *(int *)(v80 + 28), v98);
    MEMORY[0x270FA5388](v54);
    *(&v73 - 2) = (uint64_t)v52;
    uint64_t v55 = CROrderedSet.map<A>(_:)();
    uint64_t v56 = v99;
    v76(v99, v53);
    v87(v52, v49);
    uint64_t result = outlined destroy of GraphElement(v51, (uint64_t (*)(void))type metadata accessor for GraphElement);
    if (v39 >= *(void *)(v55 + 16))
    {
      __break(1u);
    }
    else
    {
      outlined init with copy of GraphableExpression(v55 + v40, (uint64_t)v85);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.getter();
      uint64_t v57 = v105[0];
      if (v105[0])
      {
        id v58 = v102;
        v104[0] = v102;
        v104[1] = v105[0];
        unsigned __int8 v59 = Color.almostEqual(_:)(v104);

        uint64_t v60 = v86;
        if (v59)
        {
          outlined destroy of GraphElement((uint64_t)v85, (uint64_t (*)(void))type metadata accessor for GraphableExpression);

LABEL_20:
          swift_release();
          return 0;
        }
      }
      else
      {
        uint64_t v60 = v86;
      }
      uint64_t v61 = v88;
      uint64_t v62 = v84;
      uint64_t v63 = v82;
      v82(v88, v84, v60);
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      uint64_t v64 = (uint64_t (*)(char *, uint64_t))v87;
      v87(v61, v60);
      uint64_t v65 = v77;
      uint64_t v66 = v98;
      CROrderedSet.subscript.getter();
      v76(v56, v66);
      v63(v61, v62, v60);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
      uint64_t v68 = v91;
      uint64_t v67 = v92;
      Capsule.encapsulate<A>(_:)();
      uint64_t v69 = v64(v61, v60);
      v70.n128_f64[0] = MEMORY[0x270FA5388](v69);
      unint64_t v71 = v102;
      *(&v73 - 4) = (uint64_t)v67;
      *(&v73 - 3) = (uint64_t)v71;
      uint64_t v72 = v95;
      *(&v73 - 2) = (uint64_t)v95;
      (*(void (**)(void, void, uint64_t (*)(), __n128))((*MEMORY[0x263F8EED0] & *v72) + 0x478))(0, 0, partial apply for closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:), v70);
      swift_release();

      (*(void (**)(char *, uint64_t))(v90 + 8))(v65, v68);
      outlined destroy of GraphElement((uint64_t)v85, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v67, v94);
      return 1;
    }
  }
  return result;
}

uint64_t closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphableExpression>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = a2;
  Capsule.callAsFunction<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v17[0] = 3;
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *a3) + 0x550);
  uint64_t v12 = type metadata accessor for GraphableExpression();
  uint64_t v13 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  v11(v9, v17, v12, v13);
  v17[0] = 3;
  (*(void (**)(unsigned char *))((*v10 & *a3) + 0x530))(v17);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t closure #1 in closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  id v3 = a2;
  return Capsule.Ref<>.subscript.setter();
}

Swift::Void __swiftcall GraphCanvasElementView.updateModelColors()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
  MEMORY[0x270FA5388](v1 - 8);
  id v45 = (char *)v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for GraphableExpression();
  unint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v34 = (uint64_t)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v46 - 8);
  double v7 = MEMORY[0x270FA5388](v46);
  uint64_t v44 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v0;
  uint64_t v9 = *(void *)(v0 + direct field offset for GraphCanvasElementView.graphViewController);
  if (v9)
  {
    unint64_t v10 = *(void *)(v9
                    + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph);
    if (v10)
    {
      uint64_t v11 = (void *)MEMORY[0x210550400](v47 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v7);
      if (v11)
      {
        uint64_t v12 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v11) + 0x750);
        id v32 = v11;
        uint64_t v13 = swift_retain();
        uint64_t v14 = v12(v13);
        uint64_t v42 = v15;
        uint64_t v43 = v14;
        if (v14)
        {
          unint64_t v16 = dispatch thunk of CalculateGraph.graphExpressions.getter();
          unint64_t v17 = v16;
          if (v16 >> 62) {
            goto LABEL_32;
          }
          for (uint64_t i = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
          {
            v30[1] = v10;
            uint64_t ObjectType = swift_getObjectType();
            int v20 = 0;
            unint64_t v10 = 0;
            double v21 = *(void (**)(void))(v42 + 64);
            uint64_t v38 = v42 + 64;
            uint64_t v39 = ObjectType;
            unint64_t v40 = v17;
            unint64_t v41 = v17 & 0xC000000000000001;
            uint64_t v33 = v17 & 0xFFFFFFFFFFFFFF8;
            uint64_t v36 = (void (**)(char *, uint64_t))(v6 + 8);
            id v37 = v21;
            uint64_t v35 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
            uint64_t v22 = (uint64_t)v45;
LABEL_8:
            int v31 = v20;
            unint64_t v4 = v10;
            while (1)
            {
              if (v41)
              {
                uint64_t v6 = MEMORY[0x21054E050](v4, v17);
                unint64_t v10 = v4 + 1;
                if (__OFADD__(v4, 1)) {
                  break;
                }
                goto LABEL_15;
              }
              if (v4 >= *(void *)(v33 + 16)) {
                goto LABEL_31;
              }
              uint64_t v6 = *(void *)(v17 + 8 * v4 + 32);
              swift_retain();
              unint64_t v10 = v4 + 1;
              if (__OFADD__(v4, 1)) {
                break;
              }
LABEL_15:
              uint64_t v23 = v44;
              dispatch thunk of CalculateGraphExpression.id.getter();
              uint64_t v24 = (CGColor *)UUID.uuidString.getter();
              uint64_t v26 = v25;
              (*v36)(v23, v46);
              CalculateGraphExpression.expression.getter();
              v37();
              swift_release();
              if ((*v35)(v22, 1, v3) == 1)
              {
                outlined destroy of StocksKitCurrencyCache.Provider?(v22, (uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
              }
              else
              {
                swift_bridgeObjectRelease();
                uint64_t v27 = v34;
                outlined init with take of GraphableExpression(v22, v34);
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
                CRRegister.wrappedValue.getter();
                uint64_t v24 = v48;
                uint64_t v26 = v49;
                outlined destroy of GraphElement(v27, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
              }
              char v28 = GraphCanvasElementView.updateModelColor(for:identifier:)(v6, v24, v26);
              swift_bridgeObjectRelease();
              swift_release();
              if (v28)
              {
                int v20 = 1;
                unint64_t v17 = v40;
                if (v10 != i) {
                  goto LABEL_8;
                }
                swift_bridgeObjectRelease();
LABEL_27:
                GraphCanvasElementView.cachedGraphableExpressionsState.getter();
                GraphableExpressionsState.updateColors()();
                swift_release();
LABEL_28:
                swift_unknownObjectRelease();

                swift_release();
                return;
              }
              ++v4;
              unint64_t v17 = v40;
              if (v10 == i)
              {
                swift_bridgeObjectRelease();
                if (v31) {
                  goto LABEL_27;
                }
                goto LABEL_28;
              }
            }
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            ;
          }
          swift_unknownObjectRelease();

          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
          id v29 = v32;
        }
      }
    }
  }
}

void @objc GraphCanvasElementView.updateModelColors()(void *a1)
{
  id v1 = a1;
  GraphCanvasElementView.updateModelColors()();
}

void (*implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v6;
  v8[3] = v7;
  void v8[4] = a3;
  v8[5] = a4;
  swift_bridgeObjectRetain();
  return partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:);
}

void closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x210550400](a1 + 16);
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    uint64_t v27 = a3;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v16 = Strong;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v26 = static OS_dispatch_queue.main.getter();
      uint64_t v17 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v18 = swift_allocObject();
      swift_weakInit();
      uint64_t v19 = (void *)swift_allocObject();
      v19[2] = v17;
      void v19[3] = v18;
      v25[2] = v17;
      v25[3] = v18;
      v19[4] = v27;
      v19[5] = a4;
      aBlock[4] = partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:);
      aBlock[5] = v19;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      void aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_237;
      int v20 = _Block_copy(aBlock);
      uint64_t v27 = v10;
      double v21 = v20;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v30 = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      uint64_t v22 = v28;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v25[1] = v16;
      uint64_t v23 = v29;
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v24 = (void *)v26;
      MEMORY[0x21054DA10](0, v12, v9, v21);
      _Block_release(v21);

      swift_release();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v27);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

void closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v3, sel_updateModelColors, 0);
      id v4 = objc_msgSend(v3, sel_performSelector_withObject_afterDelay_, sel_updateModelColors, 0, 0.1);
      MEMORY[0x270FA5388](v4);
      withObservationTracking<A>(_:onChange:)();

      swift_release();
    }
    else
    {
    }
  }
}

uint64_t GraphCanvasElementView.__ivar_destroyer()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

id GraphCanvasElementView.__deallocating_deinit()
{
  return PKGraphHostingViewController.__deallocating_deinit(type metadata accessor for GraphCanvasElementView);
}

uint64_t @objc GraphCanvasElementView.__ivar_destroyer(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for GraphCanvasElementView(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for GraphCanvasElementView);
}

uint64_t type metadata completion function for GraphCanvasElementView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for GraphCanvasElementView()
{
  return type metadata accessor for GraphCanvasElementView(0);
}

uint64_t GraphableExpressionsState.view.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return MEMORY[0x210550400](v0 + 16);
}

uint64_t key path getter for GraphableExpressionsState.view : GraphableExpressionsState@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = MEMORY[0x210550400](v3 + 16);
  *a2 = result;
  return result;
}

void key path setter for GraphableExpressionsState.view : GraphableExpressionsState(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t closure #1 in GraphableExpressionsState.view.setter()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t GraphableExpressionsState.expressionStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in GraphableExpressionsState.expressionStates.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t GraphableExpressionsState.graphableExpressionsStates.getter()
{
  uint64_t v1 = type metadata accessor for CalculateExpression.Base();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  id v4 = (char *)&v185 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v185 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  int v212 = (char *)&v185 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v213 = (char *)&v185 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v223 = type metadata accessor for UUID();
  uint64_t v208 = *(void *)(v223 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v223);
  unint64_t v210 = (char *)&v185 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v209 = (char *)&v185 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  unint64_t v221 = (char *)&v185 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v222 = (void (**)(char *, uint64_t))((char *)&v185 - v19);
  MEMORY[0x270FA5388](v18);
  v224 = (char *)&v185 - v20;
  uint64_t v219 = type metadata accessor for GraphableExpression();
  uint64_t v214 = *(void *)(v219 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v219);
  uint64_t v215 = (char *)&v185 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v211 = (char **)((char *)&v185 - v24);
  MEMORY[0x270FA5388](v23);
  uint64_t v220 = (char *)&v185 - v25;
  uint64_t v217 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  uint64_t v216 = (void (**)(char *, void *))*(v217 - 1);
  MEMORY[0x270FA5388](v217);
  uint64_t v207 = (char *)&v185 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v203 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v203);
  uint64_t v218 = (char **)((char *)&v185 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v206 = (void (**)(void, void, void))__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v205 = (uint64_t)*(v206 - 1);
  uint64_t v28 = MEMORY[0x270FA5388](v206);
  uint64_t v204 = (char *)&v185 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v202 = (char *)&v185 - v30;
  uint64_t v31 = type metadata accessor for PKDrawing();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v185 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v231 = v0;
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v35 = (char *)MEMORY[0x210550400](v0 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (!v35) {
    return result;
  }
  id v37 = (void *)MEMORY[0x210550400](&v35[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
  if (!v37)
  {

    return MEMORY[0x263F8EE78];
  }
  uint64_t v38 = v37;
  uint64_t v39 = *(void *)&v35[direct field offset for GraphCanvasElementView.graphViewController];
  if (!v39
    || (*(void *)&long long v201 = v2,
        (uint64_t v40 = *(void *)(v39
                         + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph)) == 0))
  {

    return MEMORY[0x263F8EE78];
  }
  char v199 = v35;
  uint64_t v195 = v8;
  unint64_t v196 = v4;
  uint64_t v197 = v1;
  uint64_t v41 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v37) + 0x2F8))();
  uint64_t v198 = v38;
  uint64_t v42 = (void *)v41;
  uint64_t v44 = v43;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 16);
  swift_retain();
  uint64_t v47 = (void *)v46(ObjectType, v44);

  if (!v47)
  {

    goto LABEL_27;
  }
  uint64_t v200 = v40;
  id v48 = objc_msgSend(v47, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  PKDrawing._bridgeToObjectiveC()(v49);
  uint64_t v51 = v50;
  uint64_t v52 = (char *)objc_msgSend(v50, sel_uuid);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
  uint64_t v232 = &unk_26C1C1038;
  uint64_t v53 = swift_dynamicCastObjCProtocolConditional();
  id v54 = v199;
  if (!v53
    || ((unint64_t v55 = v53,
         swift_getObjectType(),
         type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (unint64_t v56 = v55): (unint64_t v56 = 0), !v56))
  {
    swift_unknownObjectRelease();

LABEL_27:
    swift_release();

    return MEMORY[0x263F8EE78];
  }
  uint64_t v57 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v57 != -1) {
    goto LABEL_118;
  }
  while (1)
  {
    swift_beginAccess();
    id v58 = static CalculateDocumentController.controllers;
    uint64_t v59 = v219;
    uint64_t v60 = v201;
    if (!*((void *)static CalculateDocumentController.controllers + 2)) {
      goto LABEL_31;
    }
    swift_unknownObjectRetain();
    unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((void *)v56);
    if ((v62 & 1) == 0)
    {
      swift_unknownObjectRelease();
LABEL_31:
      swift_endAccess();

      swift_release();
      swift_unknownObjectRelease_n();
      return MEMORY[0x263F8EE78];
    }
    uint64_t v63 = *(void **)(v58[7] + 8 * v61);
    swift_endAccess();
    uint64_t v64 = v63;
    uint64_t v65 = swift_unknownObjectRelease_n();
    id v66 = v198;
    uint64_t v67 = (void *)MEMORY[0x263F8EED0];
    uint64_t v68 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v198) + 0x750))(v65);
    uint64_t v192 = v69;
    uint64_t v193 = v68;
    if (!v68)
    {

      swift_release();
      swift_unknownObjectRelease();

      return MEMORY[0x263F8EE78];
    }
    int v186 = v64;
    uint64_t v185 = v52;
    __n128 v70 = &v199[*(void *)((*v67 & *(void *)v199) + 0x380)];
    swift_beginAccess();
    uint64_t v71 = v205;
    uint64_t v72 = *(void (**)(char *, char *, void))(v205 + 16);
    uint64_t v73 = v202;
    int v74 = v206;
    v72(v202, v70, v206);
    lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
    uint64_t v75 = v218;
    Capsule<>.root.getter();
    uint64_t v205 = *(void *)(v71 + 8);
    ((void (*)(char *, void (**)(void, void, void)))v205)(v73, v74);
    uint64_t v76 = v204;
    v72(v204, v70, v74);
    BOOL v77 = (char *)v75 + *(int *)(v203 + 28);
    uint64_t v78 = v216;
    uint64_t v79 = v207;
    uint64_t v80 = v217;
    uint64_t v81 = ((uint64_t (*)(char *, char *, void *))v216[2])(v207, v77, v217);
    MEMORY[0x270FA5388](v81);
    *(&v185 - 2) = v76;
    uint64_t v82 = CROrderedSet.map<A>(_:)();
    unint64_t v203 = 0;
    uint64_t v83 = (void *)v82;
    v78[1](v79, v80);
    ((void (*)(char *, void (**)(void, void, void)))v205)(v76, v74);
    outlined destroy of GraphElement((uint64_t)v218, (uint64_t (*)(void))type metadata accessor for GraphElement);
    int64_t v84 = v83[2];
    if (v84)
    {
      uint64_t v225 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v84, 0);
      unint64_t v85 = (*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80);
      uint64_t v218 = v83;
      uint64_t v86 = (uint64_t)v83 + v85;
      uint64_t v87 = *(void *)(v214 + 72);
      uint64_t v88 = v225;
      do
      {
        uint64_t v89 = (uint64_t)v220;
        outlined init with copy of GraphableExpression(v86, (uint64_t)v220);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        uint64_t v91 = v228;
        uint64_t v90 = v229;
        outlined destroy of GraphElement(v89, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v88 + 16) + 1, 1);
          uint64_t v88 = v225;
        }
        unint64_t v93 = *(void *)(v88 + 16);
        unint64_t v92 = *(void *)(v88 + 24);
        if (v93 >= v92 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v93 + 1, 1);
          uint64_t v88 = v225;
        }
        *(void *)(v88 + 16) = v93 + 1;
        uint64_t v94 = v88 + 16 * v93;
        *(void *)(v94 + 32) = v91;
        *(void *)(v94 + 40) = v90;
        v86 += v87;
        --v84;
        uint64_t v59 = v219;
      }
      while (v84);
      swift_bridgeObjectRelease();
      uint64_t v60 = v201;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v88 = MEMORY[0x263F8EE78];
    }
    uint64_t v205 = specialized Set.init<A>(_:)(v88);
    swift_bridgeObjectRelease();
    unint64_t v95 = MEMORY[0x263F8EE78];
    uint64_t v230 = MEMORY[0x263F8EE78];
    uint64_t v96 = &v186[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
    uint64_t v97 = MEMORY[0x210550400](&v186[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document]);
    if (!v97)
    {
      uint64_t v102 = v223;
      goto LABEL_38;
    }
    uint64_t v98 = v97;
    uint64_t v99 = *((void *)v96 + 1);
    uint64_t v100 = swift_getObjectType();
    uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v100, v99);
    uint64_t v102 = v223;
    if (v101)
    {
      unint64_t v95 = dispatch thunk of CalculateDocument.expressions.getter();
      swift_unknownObjectRelease();
      swift_release();
LABEL_38:
      uint64_t v103 = (char *)v203;
      goto LABEL_40;
    }
    swift_beginAccess();
    swift_unknownObjectRetain();
    uint64_t v104 = swift_bridgeObjectRetain();
    uint64_t v103 = (char *)v203;
    unint64_t v95 = specialized Sequence.compactMap<A>(_:)(v104, v98, v99);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
LABEL_40:
    unint64_t v105 = specialized _ArrayProtocol.filter(_:)(v95);
    uint64_t v204 = v103;
    swift_bridgeObjectRelease();
    unint64_t v194 = v105;
    uint64_t v106 = v105 >> 62 ? _CocoaArrayWrapper.endIndex.getter() : *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v52 = v215;
    if (!v106) {
      break;
    }
    unint64_t v56 = 0;
    unint64_t v203 = v194 & 0xC000000000000001;
    uint64_t v189 = v194 & 0xFFFFFFFFFFFFFF8;
    unint64_t v188 = v194 + 32;
    uint64_t v218 = (void *)(v208 + 8);
    uint64_t v191 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v192 + 64);
    uint64_t v190 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48);
    uint64_t v187 = MEMORY[0x263F8EE60] + 8;
    uint64_t v202 = (char *)v106;
    while (1)
    {
      if (v203)
      {
        uint64_t v52 = (char *)MEMORY[0x21054E050](v56, v194);
        BOOL v107 = __OFADD__(v56++, 1);
        if (v107) {
          goto LABEL_115;
        }
      }
      else
      {
        if (v56 >= *(void *)(v189 + 16)) {
          goto LABEL_117;
        }
        uint64_t v52 = *(char **)(v188 + 8 * v56);
        swift_retain();
        BOOL v107 = __OFADD__(v56++, 1);
        if (v107) {
          goto LABEL_115;
        }
      }
      unint64_t v108 = v224;
      CalculateExpression.id.getter();
      uint64_t v109 = UUID.uuidString.getter();
      uint64_t v111 = v110;
      uint64_t v217 = (void *)*v218;
      ((void (*)(char *, uint64_t))v217)(v108, v102);
      LOBYTE(v109) = specialized Set.contains(_:)(v109, v111, v205);
      swift_bridgeObjectRelease();
      uint64_t v206 = (void (**)(void, void, void))v56;
      if (v109)
      {
        char v112 = 1;
      }
      else
      {
        uint64_t v113 = swift_getObjectType();
        uint64_t v114 = (uint64_t)v213;
        (*((void (**)(char *, uint64_t))v192 + 8))(v52, v113);
        if ((*v190)(v114, 1, v59) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v114, (uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
          char v112 = 0;
        }
        else
        {
          uint64_t v115 = v114;
          uint64_t v116 = v211;
          outlined init with take of GraphableExpression(v115, (uint64_t)v211);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
          CRRegister.wrappedValue.getter();
          char v112 = specialized Set.contains(_:)(v228, v229, v205);
          swift_bridgeObjectRelease();
          outlined destroy of GraphElement((uint64_t)v116, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
        }
      }
      type metadata accessor for GraphableExpressionState();
      swift_allocObject();
      uint64_t v117 = swift_retain();
      uint64_t v207 = (char *)specialized GraphableExpressionState.init(expression:enabled:)(v117, v112 & 1);
      swift_release();
      unint64_t v118 = dispatch thunk of CalculateGraph.graphExpressions.getter();
      unint64_t v119 = v118;
      if (v118 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        unint64_t v56 = *(void *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      uint64_t v220 = v52;
      if (v56) {
        break;
      }
      swift_bridgeObjectRelease_n();
LABEL_70:
      uint64_t v134 = swift_retain();
      MEMORY[0x21054D330](v134);
      uint64_t v59 = v219;
      uint64_t v52 = v215;
      uint64_t v135 = v202;
      unint64_t v56 = (unint64_t)v206;
      if (*(void *)((v230 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v230 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      swift_release();
      uint64_t v60 = v201;
      if ((char *)v56 == v135) {
        goto LABEL_75;
      }
    }
    uint64_t v216 = (void (**)(char *, void *))(v119 & 0xC000000000000001);
    uint64_t v120 = 4;
    while (1)
    {
      uint64_t v121 = v120 - 4;
      if (!v216) {
        break;
      }
      MEMORY[0x21054E050](v120 - 4, v119);
      uint64_t v122 = v120 - 3;
      if (__OFADD__(v121, 1)) {
        goto LABEL_113;
      }
LABEL_64:
      unint64_t v123 = v56;
      uint64_t v124 = v224;
      dispatch thunk of CalculateGraphExpression.id.getter();
      uint64_t v125 = v222;
      CalculateExpression.id.getter();
      char v126 = static UUID.== infix(_:_:)();
      unint64_t v127 = v125;
      uint64_t v128 = v223;
      uint64_t v129 = (void (*)(char *, uint64_t))v217;
      ((void (*)(void, uint64_t))v217)(v127, v223);
      v129(v124, v128);
      if (v126)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v130 = dispatch thunk of CalculateGraphExpression.effectiveColor.getter();
        swift_release();
        uint64_t KeyPath = swift_getKeyPath();
        MEMORY[0x270FA5388](KeyPath);
        uint64_t v132 = (uint64_t)v207;
        *(&v185 - 2) = v207;
        *(&v185 - 1) = (char *)v130;
        uint64_t v228 = v132;
        lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
        swift_retain();
        uint64_t v133 = v204;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        uint64_t v204 = v133;
        swift_release();
        swift_release_n();
        goto LABEL_69;
      }
      swift_release();
      ++v120;
      unint64_t v56 = v123;
      uint64_t v52 = v220;
      if (v122 == v123)
      {
        swift_bridgeObjectRelease_n();
LABEL_69:
        uint64_t v102 = v223;
        goto LABEL_70;
      }
    }
    swift_retain();
    uint64_t v122 = v120 - 3;
    if (!__OFADD__(v121, 1)) {
      goto LABEL_64;
    }
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    swift_once();
  }
LABEL_75:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v136 = v199;
  unint64_t v137 = GraphCanvasElementView.orphanedGraphables.getter();
  uint64_t v220 = *(char **)(v137 + 16);
  if (v220)
  {
    uint64_t v218 = (void *)(v137
                    + ((*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80)));
    uint64_t v192 = &v136[direct field offset for GraphCanvasElementView.expressionIdentifierToId];
    swift_beginAccess();
    unint64_t v56 = 0;
    uint64_t v211 = (void *)(v208 + 48);
    uint64_t v206 = (void (**)(void, void, void))(v208 + 32);
    uint64_t v191 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v208 + 56);
    uint64_t v207 = (char *)(v208 + 16);
    uint64_t v205 = *MEMORY[0x263F2FCD0];
    unint64_t v203 = v60 + 104;
    LODWORD(v202) = *MEMORY[0x263F2FBD0];
    uint64_t v222 = (void (**)(char *, uint64_t))(v208 + 8);
    long long v201 = xmmword_20C832C20;
    uint64_t v190 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(MEMORY[0x263F8EE60] + 8);
    uint64_t v138 = (uint64_t)v212;
    unint64_t v194 = v137;
    while (v56 < *(void *)(v137 + 16))
    {
      outlined init with copy of GraphableExpression((uint64_t)v218 + *(void *)(v214 + 72) * v56, (uint64_t)v52);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      unint64_t v140 = (unint64_t)v226;
      unint64_t v139 = v227;
      swift_bridgeObjectRelease();
      uint64_t v141 = HIBYTE(v139) & 0xF;
      if ((v139 & 0x2000000000000000) == 0) {
        uint64_t v141 = v140 & 0xFFFFFFFFFFFFLL;
      }
      if (v141)
      {
        outlined destroy of GraphElement((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
      }
      else
      {
        CRRegister.wrappedValue.getter();
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        uint64_t v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*v211;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v211)(v138, 1, v102) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v138, &demangling cache variable for type metadata for UUID?);
          id v143 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, 0);
          CRRegister.wrappedValue.getter();
          uint64_t v144 = v227;
          uint64_t v145 = *(void **)v192;
          unint64_t v146 = v221;
          if (*(void *)(*(void *)v192 + 16))
          {
            uint64_t v147 = (uint64_t)v226;
            swift_bridgeObjectRetain();
            uint64_t v148 = specialized __RawDictionaryStorage.find<A>(_:)(v147, v144);
            if (v149)
            {
              uint64_t v150 = v208;
              uint64_t v151 = (uint64_t)v195;
              (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v195, v145[7] + *(void *)(v208 + 72) * v148, v102);
              uint64_t v152 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v150 + 56);
              unint64_t v146 = v221;
              v152(v151, 0, 1, v102);
            }
            else
            {
              uint64_t v151 = (uint64_t)v195;
              (*v191)(v195, 1, 1, v102);
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v151 = (uint64_t)v195;
            (*v191)(v195, 1, 1, v102);
          }
          swift_bridgeObjectRelease();
          int v155 = v142(v151, 1, v102);
          uint64_t v156 = (void (**)(char *, char *, uint64_t))v206;
          if (v155 == 1)
          {
            v157 = v210;
            UUID.init()();
            outlined destroy of StocksKitCurrencyCache.Provider?(v151, &demangling cache variable for type metadata for UUID?);
            (*v156)(v146, v157, v102);
          }
          else
          {
            uint64_t v158 = (void (*)(char *, char *, uint64_t))*v206;
            uint64_t v159 = v210;
            (*v206)(v210, v151, v102);
            v158(v146, v159, v102);
          }
        }
        else
        {
          uint64_t v153 = (void (*)(char *, char *, uint64_t))*v206;
          char v154 = v209;
          (*v206)(v209, v138, v102);
          id v143 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, 1);
          unint64_t v146 = v221;
          v153(v221, v154, v102);
        }
        CRRegister.wrappedValue.getter();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v201;
        uint64_t v161 = (void *)v205;
        *(void *)(inited + 32) = v205;
        *(void *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        *(void *)(inited + 40) = v143;
        id v162 = v161;
        uint64_t v216 = (void (**)(char *, void *))v143;
        specialized Dictionary.init(dictionaryLiteral:)(inited);
        (*(void (**)(char *, char *, uint64_t))v207)(v224, v146, v102);
        (*(void (**)(char *, void, uint64_t))v203)(v196, v202, v197);
        type metadata accessor for CalculateExpression();
        swift_allocObject();
        uint64_t v163 = CalculateExpression.init(_:options:base:id:)();
        type metadata accessor for GraphableExpressionState();
        swift_allocObject();
        uint64_t v217 = (void *)v163;
        uint64_t v164 = specialized GraphableExpressionState.init(expression:enabled:)(v163, 1);
        unint64_t v165 = dispatch thunk of CalculateGraph.graphExpressions.getter();
        unint64_t v166 = v165;
        if (v165 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v167 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v167 = *(void *)((v165 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        uint64_t v213 = (char *)v164;
        if (v167)
        {
          uint64_t v168 = 4;
          while (1)
          {
            uint64_t v169 = v168 - 4;
            if ((v166 & 0xC000000000000001) != 0)
            {
              MEMORY[0x21054E050](v168 - 4, v166);
              uint64_t v170 = v168 - 3;
              if (__OFADD__(v169, 1)) {
                goto LABEL_114;
              }
            }
            else
            {
              swift_retain();
              uint64_t v170 = v168 - 3;
              if (__OFADD__(v169, 1)) {
                goto LABEL_114;
              }
            }
            unint64_t v171 = v224;
            dispatch thunk of CalculateGraphExpression.id.getter();
            char v172 = static UUID.== infix(_:_:)();
            (*v222)(v171, v223);
            if (v172) {
              break;
            }
            swift_release();
            ++v168;
            if (v170 == v167) {
              goto LABEL_105;
            }
          }
          swift_bridgeObjectRelease_n();
          uint64_t v179 = dispatch thunk of CalculateGraphExpression.effectiveColor.getter();
          swift_release();
          uint64_t v180 = swift_getKeyPath();
          MEMORY[0x270FA5388](v180);
          unint64_t v181 = v213;
          *(&v185 - 2) = v213;
          *(&v185 - 1) = (char *)v179;
          uint64_t v226 = v181;
          lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
          swift_retain();
          uint64_t v182 = v204;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
          uint64_t v204 = v182;
          uint64_t v52 = v215;
          swift_release();
          swift_release_n();
          int v174 = v216;
        }
        else
        {
LABEL_105:
          swift_bridgeObjectRelease_n();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
          CRRegister.wrappedValue.getter();
          unint64_t v173 = v226;
          int v174 = v216;
          if (v226)
          {
            uint64_t v175 = MEMORY[0x21054A5D0](objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v226));
            uint64_t v176 = swift_getKeyPath();
            MEMORY[0x270FA5388](v176);
            uint64_t v177 = v213;
            *(&v185 - 2) = v213;
            *(&v185 - 1) = (char *)v175;
            uint64_t v226 = v177;
            lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
            uint64_t v178 = v204;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
            uint64_t v204 = v178;
            uint64_t v52 = v215;

            swift_release();
            swift_release();
          }
        }
        uint64_t v183 = swift_retain();
        MEMORY[0x21054D330](v183);
        uint64_t v102 = v223;
        uint64_t v184 = v221;
        if (*(void *)((v230 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v230 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_release();
        swift_release();
        outlined destroy of GraphElement((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
        (*v222)(v184, v102);
        uint64_t v138 = (uint64_t)v212;
        unint64_t v137 = v194;
      }
      if ((char *)++v56 == v220) {
        goto LABEL_112;
      }
    }
    goto LABEL_116;
  }
LABEL_112:

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v230;
}

uint64_t GraphableExpressionsState.update()()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  if (v2)
  {
    if (v2 < 1)
    {
      __break(1u);
      goto LABEL_22;
    }
    uint64_t v4 = 0;
    unint64_t v14 = v1 & 0xC000000000000001;
    unint64_t v5 = v1;
    do
    {
      if (v14) {
        MEMORY[0x21054E050](v4, v1);
      }
      else {
        swift_retain();
      }
      ++v4;
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x270FA5388](KeyPath);
      lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      swift_release();
      unint64_t v1 = v5;
    }
    while (v2 != v4);
  }
  swift_bridgeObjectRelease();
  GraphableExpressionsState.graphableExpressionsStates.getter();
  uint64_t v7 = swift_getKeyPath();
  MEMORY[0x270FA5388](v7);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v8 = *(void *)(v0 + 24);
  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_12;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_12:
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    unint64_t v15 = v8 & 0xC000000000000001;
    unint64_t v11 = v8;
    do
    {
      if (v15) {
        MEMORY[0x21054E050](v10, v8);
      }
      else {
        swift_retain();
      }
      ++v10;
      uint64_t v12 = swift_getKeyPath();
      MEMORY[0x270FA5388](v12);
      lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      uint64_t v13 = swift_release();
      MEMORY[0x270FA5388](v13);
      withObservationTracking<A>(_:onChange:)();
      swift_release();
      unint64_t v8 = v11;
    }
    while (v9 != v10);
    return swift_bridgeObjectRelease();
  }
LABEL_22:
  __break(1u);
  return result;
}

char *GraphableExpressionsState.updateColors()()
{
  uint64_t v60 = type metadata accessor for UUID();
  unint64_t v1 = *(void *)(v60 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v60);
  uint64_t v59 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  id v58 = (char *)&v46 - v4;
  swift_getKeyPath();
  uint64_t v67 = v0;
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = (char *)MEMORY[0x210550400](v0 + 16);
  uint64_t v53 = result;
  if (result)
  {
    swift_getKeyPath();
    uint64_t v67 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    unint64_t v49 = *(void *)(v0 + 24);
    if (v49 >> 62) {
      goto LABEL_55;
    }
    uint64_t v6 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    while (v6)
    {
      unint64_t v7 = 0;
      unint64_t v54 = 0;
      uint64_t v51 = direct field offset for GraphCanvasElementView.graphViewController;
      unint64_t v52 = v49 & 0xC000000000000001;
      uint64_t v47 = v49 & 0xFFFFFFFFFFFFFF8;
      unint64_t v46 = v49 + 32;
      unint64_t v56 = (void (**)(char *, uint64_t))(v1 + 8);
      uint64_t v57 = (void (**)(char *, char *, uint64_t))(v1 + 16);
      uint64_t v48 = MEMORY[0x263F8EE60] + 8;
      uint64_t v50 = v6;
      while (v52)
      {
        id v66 = (CGColor *)MEMORY[0x21054E050](v7, v49);
        BOOL v11 = __OFADD__(v7, 1);
        unint64_t v12 = v7 + 1;
        if (v11) {
          goto LABEL_53;
        }
LABEL_16:
        uint64_t v13 = *(void *)&v53[v51];
        unint64_t v55 = v12;
        if (v13
          && *(void *)(v13
                       + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph))
        {
          swift_retain();
          unint64_t v1 = dispatch thunk of CalculateGraph.graphExpressions.getter();
          swift_release();
          if (v1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
            if (v14)
            {
LABEL_20:
              uint64_t v65 = (char *)v66 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState___observationRegistrar;
              uint64_t v63 = (char *)v66 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
              unint64_t v64 = v1 & 0xC000000000000001;
              swift_beginAccess();
              uint64_t v15 = 4;
              unint64_t v62 = v1;
              while (1)
              {
                uint64_t v16 = v15 - 4;
                if (v64)
                {
                  MEMORY[0x21054E050](v15 - 4, v1);
                  uint64_t v17 = v15 - 3;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_52;
                  }
                }
                else
                {
                  swift_retain();
                  uint64_t v17 = v15 - 3;
                  if (__OFADD__(v16, 1))
                  {
LABEL_52:
                    __break(1u);
                    goto LABEL_53;
                  }
                }
                uint64_t v18 = v58;
                dispatch thunk of CalculateGraphExpression.id.getter();
                swift_getKeyPath();
                v69[0] = v66;
                uint64_t v61 = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
                ObservationRegistrar.access<A, B>(_:keyPath:)();
                swift_release();
                uint64_t v19 = v59;
                uint64_t v20 = v60;
                (*v57)(v59, v63, v60);
                char v21 = static UUID.== infix(_:_:)();
                uint64_t v22 = *v56;
                (*v56)(v19, v20);
                v22(v18, v20);
                if (v21) {
                  break;
                }
                swift_release();
                ++v15;
                unint64_t v1 = v62;
                if (v17 == v14) {
                  goto LABEL_28;
                }
              }
              swift_bridgeObjectRelease_n();
              uint64_t v37 = dispatch thunk of CalculateGraphExpression.effectiveColor.getter();
              swift_release();
              swift_getKeyPath();
              uint64_t v38 = v66;
              v69[0] = v66;
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              unint64_t v1 = *((void *)v38 + 4);
              uint64_t v10 = v50;
              unint64_t v7 = v55;
              if (v1)
              {
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
                swift_retain_n();
                swift_retain_n();
                uint64_t v39 = (void *)UIColor.init(_:)();
                Color.init(cgColor:)((CGColor *)objc_msgSend(v39, sel_CGColor), v69);

                uint64_t v40 = v69[0];
                if (v69[0])
                {
                  swift_retain();
                  uint64_t v41 = (void *)UIColor.init(_:)();
                  Color.init(cgColor:)((CGColor *)objc_msgSend(v41, sel_CGColor), v69);

                  uint64_t v42 = v69[0];
                  if (v69[0])
                  {
                    v69[0] = v40;
                    v68[0] = v42;
                    unsigned __int8 v43 = Color.almostEqual(_:)(v68);

                    swift_release_n();
                    swift_release_n();
                    if (v43)
                    {
                      swift_release();
                      swift_release();
                      goto LABEL_9;
                    }
                  }
                  else
                  {
                    swift_release_n();
                    swift_release_n();
                  }
                }
                else
                {
                  swift_release_n();
                  swift_release_n();
                }
              }
              uint64_t KeyPath = swift_getKeyPath();
              MEMORY[0x270FA5388](KeyPath);
              id v45 = v66;
              *(&v46 - 2) = (unint64_t)v66;
              *(&v46 - 1) = v37;
              v69[0] = v45;
              swift_retain();
              unint64_t v1 = v54;
              ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
              unint64_t v54 = v1;
              swift_release();
              swift_release();
              swift_release_n();
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v14 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v14) {
              goto LABEL_20;
            }
          }
LABEL_28:
          swift_bridgeObjectRelease_n();
        }
        id v23 = objc_msgSend(self, sel_clearColor);
        uint64_t v24 = MEMORY[0x21054A5D0](v23);
        swift_getKeyPath();
        uint64_t v25 = v66;
        v69[0] = v66;
        lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        if (!*((void *)v25 + 4)) {
          goto LABEL_7;
        }
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        swift_retain_n();
        swift_retain_n();
        uint64_t v26 = (void *)UIColor.init(_:)();
        unint64_t v1 = (unint64_t)objc_msgSend(v26, sel_CGColor);
        uint64_t v27 = CGColorGetColorSpace((CGColorRef)v1);
        if (one-time initialization token for extendedSRGBColorSpace != -1) {
          swift_once();
        }
        int v28 = CFEqual(v27, (CFTypeRef)static Color.extendedSRGBColorSpace);

        if (v28)
        {
          uint64_t v29 = (void *)v1;
          uint64_t v30 = &off_2640D6000;
        }
        else
        {
          CGColorRef CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.extendedSRGBColorSpace, kCGRenderingIntentDefault, (CGColorRef)v1, 0);
          uint64_t v30 = &off_2640D6000;
          if (!CopyByMatchingToColorSpace)
          {
            swift_release_n();
            swift_release_n();
LABEL_6:

            goto LABEL_7;
          }
          uint64_t v29 = CopyByMatchingToColorSpace;

          uint64_t v26 = (void *)v1;
        }

        swift_retain();
        uint64_t v26 = (void *)UIColor.init(_:)();
        unint64_t v1 = (unint64_t)[v26 (SEL)v30[214]];
        uint64_t v32 = CGColorGetColorSpace((CGColorRef)v1);
        int v33 = CFEqual(v32, (CFTypeRef)static Color.extendedSRGBColorSpace);

        if (!v33)
        {
          CGColorRef v34 = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.extendedSRGBColorSpace, kCGRenderingIntentDefault, (CGColorRef)v1, 0);
          if (!v34)
          {
            swift_release_n();
            swift_release_n();

            goto LABEL_6;
          }
          CGColorRef v35 = v34;

          uint64_t v26 = (void *)v1;
          unint64_t v1 = (unint64_t)v35;
        }

        v69[0] = (CGColor *)v29;
        v68[0] = (void *)v1;
        unsigned __int8 v36 = Color.almostEqual(_:)(v68);

        swift_release_n();
        swift_release_n();
        if (v36)
        {
          swift_release();
          swift_release();
          goto LABEL_8;
        }
LABEL_7:
        uint64_t v8 = swift_getKeyPath();
        MEMORY[0x270FA5388](v8);
        uint64_t v9 = v66;
        *(&v46 - 2) = (unint64_t)v66;
        *(&v46 - 1) = v24;
        v69[0] = v9;
        swift_retain();
        unint64_t v1 = v54;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        unint64_t v54 = v1;
        swift_release();
        swift_release();
        swift_release_n();
LABEL_8:
        uint64_t v10 = v50;
        unint64_t v7 = v55;
LABEL_9:
        if (v7 == v10) {
          goto LABEL_56;
        }
      }
      if (v7 >= *(void *)(v47 + 16)) {
        goto LABEL_54;
      }
      id v66 = *(CGColor **)(v46 + 8 * v7);
      swift_retain();
      BOOL v11 = __OFADD__(v7, 1);
      unint64_t v12 = v7 + 1;
      if (!v11) {
        goto LABEL_16;
      }
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    }
LABEL_56:

    return (char *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  return swift_release();
}

uint64_t (*implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)())()
{
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = v1;
  return partial apply for closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:);
}

uint64_t closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v10 = Strong;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v18 = static OS_dispatch_queue.main.getter();
      uint64_t v11 = swift_allocObject();
      swift_weakInit();
      uint64_t v12 = swift_allocObject();
      swift_weakInit();
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v11;
      *(void *)(v13 + 24) = v12;
      void v17[2] = v11;
      _OWORD v17[3] = v12;
      aBlock[4] = partial apply for closure #1 in closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:);
      aBlock[5] = v13;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      void aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_49;
      uint64_t v14 = _Block_copy(aBlock);
      v17[1] = v10;
      uint64_t v15 = v14;
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v19 = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v17[0] = v4;
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v16 = (void *)v18;
      MEMORY[0x21054DA10](0, v7, v3, v15);
      _Block_release(v15);
      swift_release();
      swift_release();

      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      (*(void (**)(char *, void))(v5 + 8))(v7, v17[0]);
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return swift_release();
  }
  uint64_t v3 = (CGColor *)Strong;
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if ((*((unsigned char *)v3 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved) & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = MEMORY[0x210550400](v1 + 16);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    GraphCanvasElementView.updateGraphableExpressionState(_:)(v3);
  }
  MEMORY[0x270FA5388](v4);
  withObservationTracking<A>(_:onChange:)();
  swift_release();
  return swift_release();
}

uint64_t GraphableExpressionsState.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit25GraphableExpressionsState___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for GraphableExpressionsState()
{
  return type metadata accessor for GraphableExpressionsState(0);
}

uint64_t type metadata accessor for GraphableExpressionsState(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for GraphableExpressionsState);
}

uint64_t type metadata completion function for GraphableExpressionsState()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance GraphableExpressionsState@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for GraphableExpressionsState(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for GraphableExpressionsState(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionsState);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in GraphableExpressionState.color.setter()
{
  return closure #1 in GraphableExpressionState.color.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t _s8PaperKit25GraphableExpressionsStateC4viewAA22GraphCanvasElementViewCSgvsyyXEfU_TA_0()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t partial apply for closure #1 in GraphableExpressionState.shouldBeObserved.setter()
{
  return closure #1 in GraphableExpressionState.shouldBeObserved.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t _s8PaperKit25GraphableExpressionsStateC16expressionStatesSayAA0c10ExpressionE0CGvsyyXEfU_TA_0()
{
  *(void *)(*(void *)(v0 + 16) + 24) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  return closure #1 in GraphableExpressionsState.observeExpressionState(_:)();
}

uint64_t (*partial apply for implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)())()
{
  return implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)();
}

uint64_t sub_20C5E751C()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C5E7554()
{
  return objectdestroy_130Tm(MEMORY[0x263F8EED8]);
}

uint64_t partial apply for closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  return closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)();
}

uint64_t sub_20C5E7574()
{
  return objectdestroy_130Tm(MEMORY[0x263F8EED8]);
}

uint64_t partial apply for closure #1 in closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  return closure #1 in closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)();
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_49()
{
  return swift_release();
}

uint64_t partial apply for specialized closure #1 in GraphElement.graphables<A>(in:)()
{
  return specialized closure #1 in GraphElement.graphables<A>(in:)();
}

uint64_t specialized CalculateDocumentController.addObserverIfNecessary(_:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers;
  swift_beginAccess();
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)(*(void *)v10 + 16);
  unint64_t v49 = v6;
  if (v12)
  {
    uint64_t v13 = v11 + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v14 = MEMORY[0x210550400](v13);
      if (v14)
      {
        uint64_t v15 = v14;
        swift_unknownObjectRelease();
        if (v15 == a1) {
          return swift_bridgeObjectRelease();
        }
      }
      v13 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v6 = v49;
  }
  uint64_t v60 = 0;
  swift_unknownObjectWeakInit();
  uint64_t v60 = &protocol witness table for AnyCanvas;
  uint64_t v17 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakObserver(v17, (uint64_t)v61);
  swift_beginAccess();
  uint64_t v18 = *(void **)v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v10 = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_53:
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, (unint64_t)v18);
    *(void *)uint64_t v10 = v18;
  }
  unint64_t v21 = v18[2];
  unint64_t v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, (unint64_t)v18);
    *(void *)uint64_t v10 = v18;
  }
  v18[2] = v21 + 1;
  outlined init with take of WeakObserver((uint64_t)v61, (uint64_t)&v18[2 * v21 + 4]);
  swift_endAccess();
  uint64_t v22 = a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document;
  uint64_t result = MEMORY[0x210550400](a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document);
  uint64_t v57 = result;
  if (result)
  {
    int64_t v47 = a1;
    uint64_t v18 = *(void **)(v22 + 8);
    a2 += OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionUUIDs;
    swift_beginAccess();
    uint64_t v23 = *(void *)a2;
    uint64_t v24 = *(void *)(*(void *)a2 + 56);
    uint64_t v46 = *(void *)a2 + 56;
    uint64_t v25 = 1 << *(unsigned char *)(v23 + 32);
    uint64_t v26 = -1;
    if (v25 < 64) {
      uint64_t v26 = ~(-1 << v25);
    }
    unint64_t v27 = v26 & v24;
    int64_t v48 = (unint64_t)(v25 + 63) >> 6;
    uint64_t v55 = v59 + 16;
    unint64_t v56 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
    uint64_t v53 = v18;
    uint64_t v54 = v59 + 48;
    uint64_t v51 = v18 + 6;
    unint64_t v52 = (void (**)(char *, char *, uint64_t))(v59 + 32);
    uint64_t v50 = (uint64_t (**)(char *, uint64_t))(v59 + 8);
    uint64_t v58 = v23;
    uint64_t result = swift_bridgeObjectRetain();
    a1 = 0;
    while (1)
    {
      if (v27)
      {
        unint64_t v32 = __clz(__rbit64(v27));
        v27 &= v27 - 1;
        unint64_t v33 = v32 | (a1 << 6);
      }
      else
      {
        int64_t v34 = a1 + 1;
        if (__OFADD__(a1, 1))
        {
          __break(1u);
          goto LABEL_53;
        }
        if (v34 >= v48) {
          goto LABEL_49;
        }
        unint64_t v35 = *(void *)(v46 + 8 * v34);
        ++a1;
        if (!v35)
        {
          a1 = v34 + 1;
          if (v34 + 1 >= v48) {
            goto LABEL_49;
          }
          unint64_t v35 = *(void *)(v46 + 8 * a1);
          if (!v35)
          {
            a1 = v34 + 2;
            if (v34 + 2 >= v48) {
              goto LABEL_49;
            }
            unint64_t v35 = *(void *)(v46 + 8 * a1);
            if (!v35)
            {
              a1 = v34 + 3;
              if (v34 + 3 >= v48) {
                goto LABEL_49;
              }
              unint64_t v35 = *(void *)(v46 + 8 * a1);
              if (!v35)
              {
                a1 = v34 + 4;
                if (v34 + 4 >= v48) {
                  goto LABEL_49;
                }
                unint64_t v35 = *(void *)(v46 + 8 * a1);
                if (!v35)
                {
                  int64_t v36 = v34 + 5;
                  if (v36 >= v48)
                  {
LABEL_49:
                    (*v56)(v9, 1, 1, v4);
LABEL_50:
                    swift_unknownObjectRelease();
                    return swift_release();
                  }
                  unint64_t v35 = *(void *)(v46 + 8 * v36);
                  if (!v35)
                  {
                    while (1)
                    {
                      a1 = v36 + 1;
                      if (__OFADD__(v36, 1)) {
                        break;
                      }
                      if (a1 >= v48) {
                        goto LABEL_49;
                      }
                      unint64_t v35 = *(void *)(v46 + 8 * a1);
                      ++v36;
                      if (v35) {
                        goto LABEL_39;
                      }
                    }
                    __break(1u);
                    return result;
                  }
                  a1 = v36;
                }
              }
            }
          }
        }
LABEL_39:
        unint64_t v27 = (v35 - 1) & v35;
        unint64_t v33 = __clz(__rbit64(v35)) + (a1 << 6);
      }
      uint64_t v37 = v59;
      (*(void (**)(char *, unint64_t, uint64_t))(v59 + 16))(v9, *(void *)(v58 + 48) + *(void *)(v59 + 72) * v33, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v9, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v9, 1, v4) == 1) {
        goto LABEL_50;
      }
      (*v52)(v6, v9, v4);
      a2 = v57;
      uint64_t ObjectType = swift_getObjectType();
      if (((uint64_t (*)(char *, uint64_t))v53[6])(v6, ObjectType)) {
        break;
      }
LABEL_19:
      uint64_t result = (*v50)(v6, v4);
    }
    uint64_t v39 = (void *)CalculateExpression.result.getter();
    uint64_t v18 = v39;
    if (v39)
    {
      uint64_t v40 = v39;
      if (!objc_msgSend(v40, sel_isTrivial))
      {
        id v42 = objc_msgSend(v40, sel_formattedResult);
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v43;

        uint64_t v6 = v49;
        goto LABEL_47;
      }
    }
    uint64_t v10 = 0;
    uint64_t v41 = 0;
LABEL_47:
    uint64_t v44 = (void *)CalculateExpression.result.getter();
    if (v44)
    {
      int v28 = v44;
      id v29 = objc_msgSend(v44, sel_unitType);

      BOOL v30 = v29 == (id)16;
      uint64_t v6 = v49;
      char v31 = v30;
    }
    else
    {
      char v31 = 0;
    }
    a2 = v47;
    AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(v10, v41, (uint64_t)v6, v31);
    swift_release();
    swift_bridgeObjectRelease();

    goto LABEL_19;
  }
  return result;
}

uint64_t specialized CalculateDocumentController.addObserverIfNecessary(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v40 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (char *)(a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers);
  swift_beginAccess();
  uint64_t v11 = *(void *)(*(void *)v10 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)v10 + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v13 = MEMORY[0x210550400](v12);
      if (v13)
      {
        uint64_t v14 = v13;
        swift_unknownObjectRelease();
        if (v14 == a1) {
          return swift_bridgeObjectRelease();
        }
      }
      v12 += 16;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  unint64_t v52 = 0;
  swift_unknownObjectWeakInit();
  unint64_t v52 = &protocol witness table for GraphCanvasElementView;
  uint64_t v16 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakObserver(v16, (uint64_t)v53);
  swift_beginAccess();
  uint64_t i = *(void **)v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v10 = i;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_48:
    uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, (unint64_t)i);
    *(void *)uint64_t v10 = i;
  }
  unint64_t v20 = i[2];
  unint64_t v19 = i[3];
  if (v20 >= v19 >> 1)
  {
    uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, (unint64_t)i);
    *(void *)uint64_t v10 = i;
  }
  i[2] = v20 + 1;
  outlined init with take of WeakObserver((uint64_t)v53, (uint64_t)&i[2 * v20 + 4]);
  swift_endAccess();
  uint64_t v21 = a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document;
  uint64_t result = MEMORY[0x210550400](a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document);
  uint64_t v50 = result;
  if (result)
  {
    uint64_t v10 = *(char **)(v21 + 8);
    a2 += OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionUUIDs;
    swift_beginAccess();
    uint64_t v22 = *(void *)a2;
    uint64_t v23 = *(void *)(*(void *)a2 + 56);
    uint64_t v41 = *(void *)a2 + 56;
    uint64_t v24 = 1 << *(unsigned char *)(v22 + 32);
    uint64_t v25 = -1;
    if (v24 < 64) {
      uint64_t v25 = ~(-1 << v24);
    }
    unint64_t v26 = v25 & v23;
    uint64_t v48 = v5 + 16;
    unint64_t v49 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    uint64_t v46 = v10;
    uint64_t v47 = v5 + 48;
    uint64_t v44 = v10 + 48;
    uint64_t v45 = (void (**)(void *, char *, uint64_t))(v5 + 32);
    int64_t v42 = (unint64_t)(v24 + 63) >> 6;
    unsigned __int8 v43 = (uint64_t (**)(void *, uint64_t))(v5 + 8);
    uint64_t v51 = v22;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v27 = 0;
    for (i = v40; ; uint64_t result = (*v43)(i, v4))
    {
      if (v26)
      {
        unint64_t v28 = __clz(__rbit64(v26));
        v26 &= v26 - 1;
        unint64_t v29 = v28 | (v27 << 6);
      }
      else
      {
        int64_t v30 = v27 + 1;
        if (__OFADD__(v27, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        if (v30 >= v42) {
          goto LABEL_44;
        }
        unint64_t v31 = *(void *)(v41 + 8 * v30);
        ++v27;
        if (!v31)
        {
          int64_t v27 = v30 + 1;
          if (v30 + 1 >= v42) {
            goto LABEL_44;
          }
          unint64_t v31 = *(void *)(v41 + 8 * v27);
          if (!v31)
          {
            int64_t v27 = v30 + 2;
            if (v30 + 2 >= v42) {
              goto LABEL_44;
            }
            unint64_t v31 = *(void *)(v41 + 8 * v27);
            if (!v31)
            {
              int64_t v27 = v30 + 3;
              if (v30 + 3 >= v42) {
                goto LABEL_44;
              }
              unint64_t v31 = *(void *)(v41 + 8 * v27);
              if (!v31)
              {
                int64_t v27 = v30 + 4;
                if (v30 + 4 >= v42) {
                  goto LABEL_44;
                }
                unint64_t v31 = *(void *)(v41 + 8 * v27);
                if (!v31)
                {
                  int64_t v32 = v30 + 5;
                  if (v32 >= v42)
                  {
LABEL_44:
                    (*v49)(v9, 1, 1, v4);
LABEL_45:
                    swift_unknownObjectRelease();
                    return swift_release();
                  }
                  unint64_t v31 = *(void *)(v41 + 8 * v32);
                  if (!v31)
                  {
                    while (1)
                    {
                      int64_t v27 = v32 + 1;
                      if (__OFADD__(v32, 1)) {
                        break;
                      }
                      if (v27 >= v42) {
                        goto LABEL_44;
                      }
                      unint64_t v31 = *(void *)(v41 + 8 * v27);
                      ++v32;
                      if (v31) {
                        goto LABEL_36;
                      }
                    }
                    __break(1u);
                    return result;
                  }
                  int64_t v27 = v32;
                }
              }
            }
          }
        }
LABEL_36:
        unint64_t v26 = (v31 - 1) & v31;
        unint64_t v29 = __clz(__rbit64(v31)) + (v27 << 6);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v9, *(void *)(v51 + 48) + *(void *)(v5 + 72) * v29, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1) {
        goto LABEL_45;
      }
      (*v45)(i, v9, v4);
      a2 = v50;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v34 = (*((uint64_t (**)(void *, uint64_t))v46 + 6))(i, ObjectType);
      if (v34)
      {
        a2 = v34;
        unint64_t v35 = (void *)CalculateExpression.result.getter();
        int64_t v36 = v35;
        if (v35)
        {
          id v37 = v35;
          if (objc_msgSend(v37, sel_isTrivial))
          {
          }
          else
          {
            id v38 = objc_msgSend(v37, sel_formattedResult);
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          uint64_t i = v40;
        }
        uint64_t v10 = (char *)CalculateExpression.result.getter();
        objc_msgSend(v10, sel_unitType);

        swift_release();
        swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

char *specialized static CalculateDocumentController.controllerForDrawingUUID(_:document:observer:)(void *a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  uint64_t v6 = one-time initialization token for controllers;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static CalculateDocumentController.controllers;
  if (*((void *)static CalculateDocumentController.controllers + 2))
  {
    id v9 = v7;
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if (v11)
    {
      uint64_t v12 = *(void **)(v8[7] + 8 * v10);
      swift_endAccess();
      uint64_t v13 = v12;

      uint64_t v14 = &v13[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
      if (MEMORY[0x210550400](&v13[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document]))
      {
        uint64_t v15 = *((void *)v14 + 1);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(ObjectType, v15);
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v47 = swift_getObjectType();
      uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(v47, a3);
      uint64_t v49 = v48;
      if (v17)
      {
        if (v48)
        {
          swift_unknownObjectRelease();
          swift_release();
          if (v17 != v49)
          {

            goto LABEL_9;
          }
LABEL_31:
          specialized CalculateDocumentController.addObserverIfNecessary(_:)(a4, (uint64_t)v13);
          goto LABEL_23;
        }

        swift_unknownObjectRelease();
      }
      else
      {
        if (!v48) {
          goto LABEL_31;
        }
      }
      swift_release();
      goto LABEL_9;
    }
  }
  swift_endAccess();
LABEL_9:
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)mathLogger);
  id v19 = v7;
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    id v50 = v7;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v52 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    id v24 = objc_msgSend(v19, sel_uniqueCacheFilePath);
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = a3;
    unint64_t v28 = v27;

    v51[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v28, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a3 = v26;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v20, v21, "Creating CalculateController for: %s", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v29 = v23;
    id v7 = v50;
    MEMORY[0x210550270](v29, -1, -1);
    MEMORY[0x210550270](v22, -1, -1);
  }
  else
  {
  }
  int64_t v30 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CalculateDocumentController()), sel_init);
  unint64_t v31 = &v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  *(void *)&v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document + 8] = a3;
  uint64_t v32 = swift_unknownObjectWeakAssign();
  if (MEMORY[0x210550400](v32))
  {
    uint64_t v33 = *((void *)v31 + 1);
    uint64_t v34 = swift_getObjectType();
    unint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    swift_unknownObjectRetain();
    uint64_t v36 = v35(v34, v33);
    uint64_t v37 = swift_unknownObjectRelease();
    if (v36)
    {
      MEMORY[0x270FA5388](v37);
      withObservationTracking<A>(_:onChange:)();
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  uint64_t v53 = 0;
  swift_unknownObjectWeakInit();
  uint64_t v53 = &protocol witness table for AnyCanvas;
  uint64_t v38 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakObserver(v38, (uint64_t)v51);
  uint64_t v39 = &v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers];
  swift_beginAccess();
  uint64_t v40 = *(void **)v39;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v39 = v40;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, (unint64_t)v40);
    *(void *)uint64_t v39 = v40;
  }
  unint64_t v43 = v40[2];
  unint64_t v42 = v40[3];
  if (v43 >= v42 >> 1)
  {
    uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, (unint64_t)v40);
    *(void *)uint64_t v39 = v40;
  }
  v40[2] = v43 + 1;
  outlined init with take of WeakObserver((uint64_t)v51, (uint64_t)&v40[2 * v43 + 4]);
  swift_endAccess();
  swift_beginAccess();
  id v44 = v19;
  uint64_t v13 = v30;
  char v45 = swift_isUniquelyReferenced_nonNull_native();
  v51[0] = static CalculateDocumentController.controllers;
  static CalculateDocumentController.controllers = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, v44, v45);
  static CalculateDocumentController.controllers = (_UNKNOWN *)v51[0];

  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_23:
  specialized static CalculateDocumentController.cleanupStaleControllers()();

  return v13;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v9 - 8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v26 = a1 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v37 = MEMORY[0x263F8EE78];
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v12;
  uint64_t v34 = v6 + 16;
  unint64_t v35 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v32 = a3;
  uint64_t v33 = v6 + 48;
  uint64_t v29 = a3 + 48;
  int64_t v30 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  int64_t v27 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v28 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t v36 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v17 >= v27) {
      goto LABEL_30;
    }
    unint64_t v21 = *(void *)(v26 + 8 * v17);
    if (!v21) {
      break;
    }
LABEL_19:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_20:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(v36 + 48) + *(void *)(v6 + 72) * v19, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
    {
      swift_release();
      return v37;
    }
    (*v30)(v8, v11, v5);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v32 + 48))(v8, ObjectType);
    uint64_t result = (*v28)(v8, v5);
    if (v24)
    {
      MEMORY[0x21054D330](result);
      if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v27) {
    goto LABEL_30;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v27) {
    goto LABEL_30;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v27) {
    goto LABEL_30;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v17 + 4;
  if (v17 + 4 >= v27)
  {
LABEL_30:
    (*v35)(v11, 1, 1, v5);
    swift_release();
    return v37;
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21)
  {
LABEL_18:
    int64_t v17 = v22;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v27) {
      goto LABEL_30;
    }
    unint64_t v21 = *(void *)(v26 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_19;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
LABEL_20:
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x21054E050](i, a1);
          unint64_t v6 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_17:
            __break(1u);
            return v13;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_20;
          }
          swift_retain();
          unint64_t v6 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_17;
          }
        }
        if (CalculateExpression.isGraphable.getter()) {
          goto LABEL_5;
        }
        char v11 = &type metadata for PencilAndPaperFeatureFlags;
        unint64_t v12 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
        v10[0] = 8;
        char v7 = isFeatureEnabled(_:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
        if ((v7 & 1) == 0) {
          goto LABEL_12;
        }
        CalculateExpression.graphableVariable.getter();
        uint64_t v5 = v4;
        swift_bridgeObjectRelease();
        if (v5
          || (uint64_t v8 = *(void *)(CalculateExpression.graphableVariables.getter() + 16), swift_bridgeObjectRelease(), v8))
        {
LABEL_5:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
LABEL_12:
          swift_release();
        }
        if (v6 == v2) {
          return v13;
        }
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

uint64_t sub_20C5E8D60()
{
  return 24;
}

__n128 sub_20C5E8D6C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)()
{
  return closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)(uint64_t a1)
{
  return closure #1 in closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #6 in GraphCanvasElementView.updateGraphableExpressionState(_:)()
{
  return closure #6 in GraphCanvasElementView.updateGraphableExpressionState(_:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t partial apply for closure #5 in GraphCanvasElementView.updateGraphableExpressionState(_:)()
{
  return closure #5 in GraphCanvasElementView.updateGraphableExpressionState(_:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t partial apply for closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)()
{
  return closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t partial apply for closure #1 in closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)()
{
  return closure #1 in closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)();
}

uint64_t partial apply for closure #1 in closure #5 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1)
{
  return closure #1 in closure #5 in GraphCanvasElementView.updateGraphableExpressionState(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #6 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1)
{
  return closure #1 in closure #6 in GraphCanvasElementView.updateGraphableExpressionState(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in GraphableExpressionState.expression.setter()
{
  return closure #1 in GraphableExpressionState.expression.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

char *specialized static CalculateDocumentController.controllerForDrawingUUID(_:document:observer:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = one-time initialization token for controllers;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static CalculateDocumentController.controllers;
  if (*((void *)static CalculateDocumentController.controllers + 2))
  {
    id v9 = v7;
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if (v11)
    {
      unint64_t v12 = *(void **)(v8[7] + 8 * v10);
      swift_endAccess();
      uint64_t v13 = v12;

      uint64_t v14 = &v13[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
      if (MEMORY[0x210550400](&v13[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document]))
      {
        uint64_t v15 = *((void *)v14 + 1);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(ObjectType, v15);
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v47 = swift_getObjectType();
      uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(v47, a3);
      uint64_t v49 = v48;
      if (v17)
      {
        if (v48)
        {
          swift_unknownObjectRelease();
          swift_release();
          if (v17 != v49)
          {

            goto LABEL_9;
          }
LABEL_31:
          specialized CalculateDocumentController.addObserverIfNecessary(_:)(a4, (uint64_t)v13);
          goto LABEL_23;
        }

        swift_unknownObjectRelease();
      }
      else
      {
        if (!v48) {
          goto LABEL_31;
        }
      }
      swift_release();
      goto LABEL_9;
    }
  }
  swift_endAccess();
LABEL_9:
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)mathLogger);
  id v19 = v7;
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    int64_t v22 = (uint8_t *)swift_slowAlloc();
    id v50 = v7;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v52 = v23;
    *(_DWORD *)int64_t v22 = 136315138;
    id v24 = objc_msgSend(v19, sel_uniqueCacheFilePath);
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = a3;
    unint64_t v28 = v27;

    v51[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v28, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a3 = v26;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v20, v21, "Creating CalculateController for: %s", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v29 = v23;
    id v7 = v50;
    MEMORY[0x210550270](v29, -1, -1);
    MEMORY[0x210550270](v22, -1, -1);
  }
  else
  {
  }
  int64_t v30 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CalculateDocumentController()), sel_init);
  uint64_t v31 = &v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  *(void *)&v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document + 8] = a3;
  uint64_t v32 = swift_unknownObjectWeakAssign();
  if (MEMORY[0x210550400](v32))
  {
    uint64_t v33 = *((void *)v31 + 1);
    uint64_t v34 = swift_getObjectType();
    unint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    swift_unknownObjectRetain();
    uint64_t v36 = v35(v34, v33);
    uint64_t v37 = swift_unknownObjectRelease();
    if (v36)
    {
      MEMORY[0x270FA5388](v37);
      withObservationTracking<A>(_:onChange:)();
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  uint64_t v53 = 0;
  swift_unknownObjectWeakInit();
  uint64_t v53 = &protocol witness table for GraphCanvasElementView;
  uint64_t v38 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakObserver(v38, (uint64_t)v51);
  uint64_t v39 = &v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers];
  swift_beginAccess();
  uint64_t v40 = *(void **)v39;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v39 = v40;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, (unint64_t)v40);
    *(void *)uint64_t v39 = v40;
  }
  unint64_t v43 = v40[2];
  unint64_t v42 = v40[3];
  if (v43 >= v42 >> 1)
  {
    uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, (unint64_t)v40);
    *(void *)uint64_t v39 = v40;
  }
  v40[2] = v43 + 1;
  outlined init with take of WeakObserver((uint64_t)v51, (uint64_t)&v40[2 * v43 + 4]);
  swift_endAccess();
  swift_beginAccess();
  id v44 = v19;
  uint64_t v13 = v30;
  char v45 = swift_isUniquelyReferenced_nonNull_native();
  v51[0] = static CalculateDocumentController.controllers;
  static CalculateDocumentController.controllers = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, v44, v45);
  static CalculateDocumentController.controllers = (_UNKNOWN *)v51[0];

  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_23:
  specialized static CalculateDocumentController.cleanupStaleControllers()();

  return v13;
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.updateVisibleRange(from:)()
{
  return closure #1 in GraphCanvasElementView.updateVisibleRange(from:)();
}

uint64_t sub_20C5E9944()
{
  uint64_t v1 = type metadata accessor for CRKeyPath();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.updateCachedImage()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CRKeyPath() - 8);
  uint64_t v5 = *((void *)v1 + 2);
  uint64_t v6 = *((void *)v1 + 3);
  uint64_t v7 = *((void *)v1 + 4);
  double v8 = v1[5];
  double v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  char v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *char v11 = v2;
  v11[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in GraphCanvasElementView.updateCachedImage()(v8, v9, a1, v5, v6, v7, v10);
}

uint64_t sub_20C5E9B28()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #5 in GraphCanvasElementView.updateGraphView()()
{
  GraphCanvasElementView.cachedGraphableExpressionsState.getter();
  GraphableExpressionsState.updateColors()();
  return swift_release();
}

uint64_t sub_20C5E9BA0()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C5E9BD8()
{
  return objectdestroy_130Tm(MEMORY[0x263F8EEA0]);
}

uint64_t partial apply for specialized closure #4 in GraphCanvasElementView.updateGraphView()()
{
  return specialized closure #4 in GraphCanvasElementView.updateGraphView()(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.trackVisibleRange(for:)()
{
  dispatch thunk of CalculateGraph.xAxisBounds.getter();
  return dispatch thunk of CalculateGraph.yAxisBounds.getter();
}

void (*partial apply for implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)())()
{
  return implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)();
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)()
{
  dispatch thunk of CalculateGraph.graphExpressions.getter();
  return swift_bridgeObjectRelease();
}

void (*partial apply for implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)())()
{
  return implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)();
}

void partial apply for closure #2 in GraphCanvasElementView.updateGraphView()()
{
  closure #2 in GraphCanvasElementView.updateGraphView()(v0);
}

void partial apply for closure #3 in GraphCanvasElementView.updateGraphView()()
{
  closure #3 in GraphCanvasElementView.updateGraphView()(v0);
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)()
{
  dispatch thunk of CalculateGraphExpression.color.getter();
  return swift_release();
}

void (*partial apply for implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)())()
{
  return implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(v0[2], v0[3], v0[4], v0[5]);
}

void partial apply for closure #1 in GraphCanvasElementView.updateGraphView()()
{
  closure #1 in GraphCanvasElementView.updateGraphView()(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

void partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)()
{
  closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t objectdestroy_218Tm()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)()
{
  closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(*(void *)(v0 + 16));
}

uint64_t sub_20C5E9D14()
{
  return objectdestroy_130Tm(MEMORY[0x263F8EED8]);
}

void partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)()
{
  closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)&unk_26C15C968, (uint64_t)partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:), (uint64_t)&block_descriptor_254);
}

uint64_t sub_20C5E9D6C()
{
  return objectdestroy_130Tm(MEMORY[0x263F8EED8]);
}

void partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)()
{
  closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)(*(void *)(v0 + 16));
}

uint64_t sub_20C5E9D8C()
{
  return objectdestroy_130Tm(MEMORY[0x263F8EED8]);
}

void partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)()
{
  closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)&unk_26C15C9E0, (uint64_t)partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:), (uint64_t)&block_descriptor_269);
}

uint64_t sub_20C5E9DE4()
{
  return objectdestroy_130Tm(MEMORY[0x263F8EED8]);
}

uint64_t objectdestroy_130Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));
  return MEMORY[0x270FA0238](v1, 32, 7);
}

void partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)()
{
  closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.restoreOrphanedExpressions()(uint64_t a1)
{
  return closure #1 in GraphCanvasElementView.restoreOrphanedExpressions()(a1, *(uint64_t **)(v1 + 16));
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.didUpdateExpression(_:identifier:)(uint64_t a1)
{
  return closure #1 in GraphCanvasElementView.didUpdateExpression(_:identifier:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char **)(v1 + 48));
}

void specialized GraphCanvasElementView.init(coder:)()
{
  v0[direct field offset for GraphCanvasElementView.didDelayCreatingGraphView] = 0;
  *(void *)&v0[direct field offset for GraphCanvasElementView.$__lazy_storage_$_cachedGraphableExpressionsState] = 0;
  *(void *)&v0[direct field offset for GraphCanvasElementView.graphViewController] = 0;
  uint64_t v1 = &v0[direct field offset for GraphCanvasElementView.previousGraphViewSize];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  v1[16] = 1;
  uint64_t v2 = direct field offset for GraphCanvasElementView.expressionIdentifierToId;
  *(void *)&v0[v2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t closure #1 in GraphableExpressionsState.view.setterpartial apply()
{
  return _s8PaperKit25GraphableExpressionsStateC4viewAA22GraphCanvasElementViewCSgvsyyXEfU_TA_0();
}

uint64_t closure #1 in GraphableExpressionState.color.setterpartial apply()
{
  return partial apply for closure #1 in GraphableExpressionState.color.setter();
}

uint64_t closure #1 in GraphableExpressionState.shouldBeObserved.setterpartial apply()
{
  return partial apply for closure #1 in GraphableExpressionState.shouldBeObserved.setter();
}

uint64_t closure #1 in GraphElement.graphables<A>(in:)specialized partial apply()
{
  return partial apply for specialized closure #1 in GraphElement.graphables<A>(in:)();
}

uint64_t specialized CanvasElementView.modelFrame.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v24 = a1;
  double v25 = a2;
  double v26 = a3;
  double v27 = a4;
  uint64_t v14 = (void *)MEMORY[0x263F8EED0];
  uint64_t v15 = (char *)v4 + *(void *)((*MEMORY[0x263F8EED0] & *v4) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v16 = swift_endAccess();
  uint64_t v17 = (*(uint64_t (**)(uint64_t))((*v14 & *v4) + 0x88))(v16);
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v13, v15, v10);
    v28[0] = 4;
    id v19 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v14 & *v18) + 0x550);
    uint64_t v20 = type metadata accessor for TextBox();
    uint64_t v21 = lazy protocol witness table accessor for type Link and conformance Link(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
    v19(v13, v28, v20, v21);
    v28[0] = 4;
    (*(void (**)(unsigned char *))((*v14 & *v18) + 0x530))(v28);

    uint64_t v17 = (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return (*(uint64_t (**)(uint64_t))((*v14 & *v5) + 0x288))(v17);
}

{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void (*v19)(unsigned char *, unsigned char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unsigned char v23[16];
  double v24;
  double v25;
  double v26;
  double v27;
  unsigned char v28[24];

  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v24 = a1;
  double v25 = a2;
  double v26 = a3;
  double v27 = a4;
  uint64_t v14 = (void *)MEMORY[0x263F8EED0];
  uint64_t v15 = (char *)v4 + *(void *)((*MEMORY[0x263F8EED0] & *v4) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v16 = swift_endAccess();
  uint64_t v17 = (*(uint64_t (**)(uint64_t))((*v14 & *v4) + 0x88))(v16);
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v13, v15, v10);
    v28[0] = 4;
    id v19 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v14 & *v18) + 0x550);
    uint64_t v20 = type metadata accessor for Shape();
    uint64_t v21 = lazy protocol witness table accessor for type Link and conformance Link(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    v19(v13, v28, v20, v21);
    v28[0] = 4;
    (*(void (**)(unsigned char *))((*v14 & *v18) + 0x530))(v28);

    uint64_t v17 = (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return (*(uint64_t (**)(uint64_t))((*v14 & *v5) + 0x288))(v17);
}

{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void (*v19)(unsigned char *, unsigned char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unsigned char v23[16];
  double v24;
  double v25;
  double v26;
  double v27;
  unsigned char v28[24];

  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v24 = a1;
  double v25 = a2;
  double v26 = a3;
  double v27 = a4;
  uint64_t v14 = (void *)MEMORY[0x263F8EED0];
  uint64_t v15 = (char *)v4 + *(void *)((*MEMORY[0x263F8EED0] & *v4) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v16 = swift_endAccess();
  uint64_t v17 = (*(uint64_t (**)(uint64_t))((*v14 & *v4) + 0x88))(v16);
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v13, v15, v10);
    v28[0] = 4;
    id v19 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v14 & *v18) + 0x550);
    uint64_t v20 = type metadata accessor for Link();
    uint64_t v21 = lazy protocol witness table accessor for type Link and conformance Link(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
    v19(v13, v28, v20, v21);
    v28[0] = 4;
    (*(void (**)(unsigned char *))((*v14 & *v18) + 0x530))(v28);

    uint64_t v17 = (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return (*(uint64_t (**)(uint64_t))((*v14 & *v5) + 0x288))(v17);
}

char *LinkCanvasElementView.linkView.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView;
  uint64_t v7 = *(void **)((char *)v1 + direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView);
  if (v7)
  {
    double v8 = *(char **)((char *)v1 + direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView);
  }
  else
  {
    double v9 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v9, v2);
    swift_getKeyPath();
    lazy protocol witness table accessor for type Link and conformance Link(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v10 = v17;
    unint64_t v11 = v18;
    uint64_t v12 = specialized static LinkCanvasElementView.makeLinkView(synapseData:canvas:)(v17, v18, v1);
    outlined consume of Data?(v10, v11);
    uint64_t v13 = *(void **)((char *)v1 + v6);
    *(void *)((char *)v1 + v6) = v12;
    double v8 = v12;

    uint64_t v7 = 0;
  }
  id v14 = v7;
  return v8;
}

void *LinkCanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  *(void *)(v7 + direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView) = 0;
  *(unsigned char *)(v7 + direct field offset for LinkCanvasElementView.editingEnabled) = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  id v19 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v18, a2, a3, a4, a5, a6, a7);
  uint64_t v20 = (void *)MEMORY[0x21054D080](0xD000000000000025, 0x800000020C85B2C0);
  objc_msgSend(v19, sel_setAccessibilityIdentifier_, v20);

  uint64_t v21 = v19;
  int64_t v22 = LinkCanvasElementView.linkView.getter();
  id v23 = objc_msgSend(v22, sel_accessibilityLabel);

  objc_msgSend(v21, sel_setAccessibilityLabel_, v23);
  id v24 = objc_msgSend(v21, sel_layer);
  if (one-time initialization token for resizeCornerRadius != -1) {
    swift_once();
  }
  objc_msgSend(v24, sel_setCornerRadius_, *(double *)&static UIConstants.resizeCornerRadius);

  double v25 = v21;
  double v26 = LinkCanvasElementView.linkView.getter();
  objc_msgSend(v25, sel_addSubview_, v26);

  double v27 = LinkCanvasElementView.linkView.getter();
  *(void *)&v27[OBJC_IVAR____TtC8PaperKit8LinkView_delegate + 8] = &protocol witness table for LinkCanvasElementView;
  swift_unknownObjectWeakAssign();

  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v25, sel_didTapToOpenLink_);
  swift_unknownObjectWeakAssign();
  objc_msgSend(v25, sel_addGestureRecognizer_, v28);
  id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82938]), sel_initWithTarget_action_, v25, sel_didLongPressToSelect_);
  objc_msgSend(v25, sel_addGestureRecognizer_, v29);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  return v25;
}

void @objc LinkCanvasElementView.init(coder:)(unsigned char *a1, uint64_t a2, void *a3)
{
  swift_unknownObjectWeakInit();
  *(void *)&a1[direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView] = 0;
  a1[direct field offset for LinkCanvasElementView.editingEnabled] = 1;
  id v5 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall LinkCanvasElementView.layoutSubviews()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = (objc_class *)type metadata accessor for LinkCanvasElementView();
  v12.id receiver = v0;
  v12.Class super_class = v5;
  objc_msgSendSuper2(&v12, sel_layoutSubviews);
  uint64_t v6 = LinkCanvasElementView.linkView.getter();
  v11.CGFloat a = 1.0;
  v11.CGFloat b = 0.0;
  v11.CGFloat c = 0.0;
  v11.CGFloat d = 1.0;
  v11.tCGFloat x = 0.0;
  v11.tCGFloat y = 0.0;
  objc_msgSend(v6, sel_setTransform_, &v11);

  uint64_t v7 = LinkCanvasElementView.linkView.getter();
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v7, sel_setFrame_);

  double v8 = LinkCanvasElementView.linkView.getter();
  double v9 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v9, v1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type Link and conformance Link(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  CGAffineTransformMakeRotation(&v11, v10);
  objc_msgSend(v8, sel_setTransform_, &v11);
}

void @objc LinkCanvasElementView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  LinkCanvasElementView.layoutSubviews()();
}

id @objc LinkCanvasElementView.gestureRecognizerShouldBegin(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  v5.id receiver = a1;
  v5.Class super_class = (Class)type metadata accessor for LinkCanvasElementView();
  return objc_msgSendSuper2(&v5, sel_gestureRecognizerShouldBegin_, a3);
}

uint64_t LinkCanvasElementView.modifiableProperties.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_super v5 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  v8[0] = type metadata accessor for Link();
  v8[1] = lazy protocol witness table accessor for type Link and conformance Link(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  void v8[2] = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v6 = 9;
  if ((v9 & 0x10) != 0) {
    uint64_t v6 = 1;
  }
  if ((v9 & 4) != 0) {
    return 0;
  }
  else {
    return v6;
  }
}

void LinkCanvasElementView.isSelected.setter(char a1)
{
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  specialized CanvasElementView.isSelected.didset();
  uint64_t v3 = LinkCanvasElementView.linkView.getter();
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v3) + 0x98))(*(unsigned __int8 *)(v1 + v2));
}

void LinkCanvasElementView.didTapToOpenLink(_:)(void *a1)
{
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging) & 1) == 0
    && objc_msgSend(a1, sel_state) == (id)3)
  {
    if ((objc_msgSend(a1, sel_modifierFlags) & 0x20000) != 0
      || (objc_msgSend(a1, sel_modifierFlags) & 0x100000) != 0)
    {
      uint64_t v4 = (char *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
      if (!v4) {
        return;
      }
      id v3 = objc_msgSend(a1, sel_modifierFlags);
      (*(void (**)(uint64_t, id, void))((*MEMORY[0x263F8EED0] & *(void *)v4) + 0x4E0))(v1, v3, 0);
    }
    else
    {
      uint64_t v4 = LinkCanvasElementView.linkView.getter();
      (*(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)v4) + 0x88))(a1);
    }
  }
}

void @objc LinkCanvasElementView.didTapToOpenLink(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  LinkCanvasElementView.didTapToOpenLink(_:)(v4);
}

void @objc LinkCanvasElementView.didLongPressToSelect(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  double v8 = a1;
  if (objc_msgSend(v4, sel_state) == (id)1)
  {
    uint64_t v5 = MEMORY[0x210550400](&v8[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
    if (v5)
    {
      uint64_t v6 = (char *)v5;
      id v7 = objc_msgSend(v4, sel_modifierFlags);
      (*(void (**)(char *, id, void))((*MEMORY[0x263F8EED0] & *(void *)v6) + 0x4E0))(v8, v7, 0);

      id v4 = v8;
      double v8 = v6;
    }
  }
}

Swift::OpaquePointer_optional __swiftcall LinkCanvasElementView.pasteboardRepresentation()()
{
  uint64_t v0 = LinkCanvasElementView.linkView.getter();
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x80))();

  id v3 = (void *)v1;
  result.value._Swift::Int rawValue = v3;
  result.is_nil = v2;
  return result;
}

id @objc LinkCanvasElementView.contextMenuInteraction(_:configurationForMenuAtLocation:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  id v9 = a1;
  CGFloat v10 = LinkCanvasElementView.linkView.getter();
  id v11 = objc_msgSend(v10, sel_contextMenuInteraction_configurationForMenuAtLocation_, v8, a2, a3);

  return v11;
}

void @objc LinkCanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  v12.id receiver = a1;
  v12.Class super_class = (Class)type metadata accessor for LinkCanvasElementView();
  id v8 = a3;
  id v9 = a4;
  swift_unknownObjectRetain();
  id v10 = v12.receiver;
  objc_msgSendSuper2(&v12, sel_contextMenuInteraction_willDisplayMenuForConfiguration_animator_, v8, v9, a5);
  id v11 = LinkCanvasElementView.linkView.getter();
  objc_msgSend(v11, sel_contextMenuInteraction_willDisplayMenuForConfiguration_animator_, v8, v9, a5, v12.receiver, v12.super_class);

  swift_unknownObjectRelease();
}

void LinkCanvasElementView.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v1 = *(void **)(v0 + direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView);
}

id LinkCanvasElementView.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LinkCanvasElementView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc LinkCanvasElementView.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  objc_super v2 = *(void **)(a1 + direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView);
}

uint64_t type metadata accessor for LinkCanvasElementView()
{
  uint64_t result = type metadata singleton initialization cache for LinkCanvasElementView;
  if (!type metadata singleton initialization cache for LinkCanvasElementView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for LinkCanvasElementView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for LinkCanvasElementView()
{
  return type metadata accessor for LinkCanvasElementView();
}

uint64_t specialized closure #1 in CanvasElementView.modelFrame.setter()
{
  return Capsule.Ref<>.subscript.setter();
}

{
  type metadata accessor for Shape();
  lazy protocol witness table accessor for type Link and conformance Link((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

{
  type metadata accessor for Link();
  lazy protocol witness table accessor for type Link and conformance Link(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

id specialized CanvasElementView.isSelected.didset()
{
  char v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x228))();
  uint64_t v2 = *MEMORY[0x263F832A8];
  unint64_t v3 = (unint64_t)objc_msgSend(v0, sel_accessibilityTraits);
  uint64_t v4 = -1;
  if ((v3 & v2) != 0) {
    uint64_t v4 = ~v2;
  }
  unint64_t v5 = v4 & v3;
  if ((v3 & v2) == v2) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v2;
  }
  unint64_t v7 = v6 | v3;
  if (v1) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = v5;
  }
  return objc_msgSend(v0, sel_setAccessibilityTraits_, v8);
}

char *specialized static LinkCanvasElementView.makeLinkView(synapseData:canvas:)(uint64_t a1, unint64_t a2, void *a3)
{
  if (a2 >> 60 == 15)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_20C2D7000, v4, v5, "Synapse data is empty", v6, 2u);
      MEMORY[0x210550270](v6, -1, -1);
    }

    id v7 = objc_allocWithZone((Class)type metadata accessor for EmptyLinkView());
    return (char *)objc_msgSend(v7, sel_init);
  }
  else
  {
    id v12 = objc_allocWithZone(MEMORY[0x263F7C208]);
    outlined copy of Data._Representation(a1, a2);
    id v13 = specialized @nonobjc PKDrawingConcrete.init(data:)();
    objc_allocWithZone((Class)type metadata accessor for SynapseLinkView());
    id v14 = SynapseLinkView.init(canvas:synapseItem:)(a3, v13);
    outlined consume of Data?(a1, a2);
    return v14;
  }
}

uint64_t specialized LinkCanvasElementView.linkViewContextMenuActions(_:)()
{
  uint64_t v1 = MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_20C8344C0;
  uint64_t v3 = v0;
  uint64_t v4 = specialized CanvasMembers.init(_:)(v3);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9;

  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v2;
  *(void *)(v11 + 24) = v4;
  *(void *)(v11 + 32) = v6;
  *(void *)(v11 + 40) = v8;
  *(unsigned char *)(v11 + 48) = v10 & 1;
  uint64_t v12 = one-time initialization token for paperKitBundle;
  id v13 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  v75._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v75._object = (void *)0x800000020C85B170;
  v14._uint64_t countAndFlagsBits = 7632195;
  v14._object = (void *)0xE300000000000000;
  v15.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v15.value._object = (void *)0xEB00000000656C62;
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, paperKitBundle, v16, v75);
  type metadata accessor for UIAction();
  uint64_t v17 = (void *)MEMORY[0x21054D080](0x73726F7373696373, 0xE800000000000000);
  id v73 = self;
  id v18 = objc_msgSend(v73, sel_systemImageNamed_, v17);

  MEMORY[0x21054D080](0xD000000000000012, 0x800000020C85B190);
  uint64_t v19 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v74 + 32) = v19;
  uint64_t v20 = v3;
  uint64_t v21 = specialized CanvasMembers.init(_:)(v20);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  char v27 = v26;

  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v13;
  *(void *)(v28 + 24) = v21;
  *(void *)(v28 + 32) = v23;
  *(void *)(v28 + 40) = v25;
  *(unsigned char *)(v28 + 48) = v27 & 1;
  Class isa = paperKitBundle.super.isa;
  id v71 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v76._object = (void *)0x800000020C85B1B0;
  v30._uint64_t countAndFlagsBits = 2037411651;
  v30._object = (void *)0xE400000000000000;
  v31.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v31.value._object = (void *)0xEB00000000656C62;
  v32._uint64_t countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)isa, v32, v76);
  uint64_t v33 = (void *)MEMORY[0x21054D080](0x642E6E6F2E636F64, 0xEA0000000000636FLL);
  id v34 = objc_msgSend(v73, sel_systemImageNamed_, v33);

  MEMORY[0x21054D080](0xD000000000000013, 0x800000020C85B1D0);
  uint64_t v35 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v74 + 40) = v35;
  uint64_t v36 = v20;
  uint64_t v37 = specialized CanvasMembers.init(_:)(v36);
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  char v43 = v42;

  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v71;
  *(void *)(v44 + 24) = v37;
  *(void *)(v44 + 32) = v39;
  *(void *)(v44 + 40) = v41;
  *(unsigned char *)(v44 + 48) = v43 & 1;
  Class v45 = paperKitBundle.super.isa;
  id v72 = v71;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77._uint64_t countAndFlagsBits = 0xD000000000000023;
  v77._object = (void *)0x800000020C85B1F0;
  v46._uint64_t countAndFlagsBits = 0x746163696C707544;
  v46._object = (void *)0xE900000000000065;
  v47.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v47.value._object = (void *)0xEB00000000656C62;
  v48._uint64_t countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, (NSBundle)v45, v48, v77);
  uint64_t v49 = (void *)MEMORY[0x21054D080](0xD000000000000015, 0x800000020C851400);
  id v50 = objc_msgSend(v73, sel_systemImageNamed_, v49);

  MEMORY[0x21054D080](0xD000000000000018, 0x800000020C85B220);
  uint64_t v51 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v74 + 48) = v51;
  uint64_t v52 = v36;
  uint64_t v53 = specialized CanvasMembers.init(_:)(v52);
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  char v59 = v58;

  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v72;
  *(void *)(v60 + 24) = v53;
  *(void *)(v60 + 32) = v55;
  *(void *)(v60 + 40) = v57;
  *(unsigned char *)(v60 + 48) = v59 & 1;
  Class v61 = paperKitBundle.super.isa;
  id v62 = v72;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78._uint64_t countAndFlagsBits = 0xD000000000000020;
  v78._object = (void *)0x800000020C85B240;
  v63._uint64_t countAndFlagsBits = 0x6574656C6544;
  v63._object = (void *)0xE600000000000000;
  v64.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v64.value._object = (void *)0xEB00000000656C62;
  v65._uint64_t countAndFlagsBits = 0;
  v65._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v63, v64, (NSBundle)v61, v65, v78);
  id v66 = (void *)MEMORY[0x21054D080](0x6873617274, 0xE500000000000000);
  id v67 = objc_msgSend(v73, sel_systemImageNamed_, v66);

  MEMORY[0x21054D080](0xD000000000000015, 0x800000020C85B270);
  uint64_t v68 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v74 + 56) = v68;
  specialized Array._endMutation()();
  uint64_t v69 = v74;

  return v69;
}

uint64_t specialized LinkCanvasElementView.linkView(_:needsResizeToFittingSize:)(double a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = (char *)v3 + *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x380);
  swift_beginAccess();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v11(v9, v10, v6);
  uint64_t v12 = type metadata accessor for Link();
  v17[0] = v12;
  uint64_t v13 = lazy protocol witness table accessor for type Link and conformance Link(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  v17[1] = v13;
  void v17[2] = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String v14 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = v14(v9, v6);
  if (vabdd_f64(a1, *(double *)&v17[5]) >= 0.1 || vabdd_f64(a2, *(double *)&v17[6]) >= 0.1)
  {
    uint64_t v16 = ((uint64_t (*)(char *, char *, uint64_t))v11)(v9, v10, v6);
    MEMORY[0x270FA5388](v16);
    v17[-4] = v12;
    v17[-3] = v13;
    v17[-2] = &protocol witness table for Link;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v14(v9, v6);
    return specialized CanvasElementView.modelFrame.setter(*(double *)&v17[3], *(double *)&v17[4], a1, a2);
  }
  return result;
}

void sub_20C5ECD80(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(double *)a3 = (*(double (**)(void))(*(void *)(*(void *)(a2 + a1 - 8) + 8) + 8))(*(void *)(a2 + a1 - 24));
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
}

uint64_t sub_20C5ECDD4(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double, double, double, double))(*(void *)(a4 + a3 - 8) + 16))(*(void *)(a4 + a3 - 24), *(void *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_20C5ECE24()
{
  return 24;
}

__n128 sub_20C5ECE30(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in CanvasElementView.modelFrame.setter()
{
  return specialized closure #1 in CanvasElementView.modelFrame.setter();
}

{
  return specialized closure #1 in CanvasElementView.modelFrame.setter();
}

{
  return specialized closure #1 in CanvasElementView.modelFrame.setter();
}

uint64_t partial apply for closure #1 in AnyCanvas.cutAction(_:)(uint64_t a1)
{
  return partial apply for closure #1 in AnyCanvas.cutAction(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in AnyCanvas.cutAction(_:));
}

unint64_t type metadata accessor for UIAction()
{
  unint64_t result = lazy cache variable for type metadata for UIAction;
  if (!lazy cache variable for type metadata for UIAction)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  }
  return result;
}

uint64_t partial apply for closure #1 in AnyCanvas.copyAction(_:)(uint64_t a1)
{
  return partial apply for closure #1 in AnyCanvas.cutAction(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in AnyCanvas.copyAction(_:));
}

uint64_t partial apply for closure #1 in AnyCanvas.duplicateAction(_:)(uint64_t a1)
{
  return partial apply for closure #1 in AnyCanvas.cutAction(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in AnyCanvas.duplicateAction(_:));
}

uint64_t objectdestroyTm_6()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 49, 7);
}

uint64_t partial apply for closure #1 in AnyCanvas.deleteAction(_:)(uint64_t a1)
{
  return partial apply for closure #1 in AnyCanvas.cutAction(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in AnyCanvas.deleteAction(_:));
}

uint64_t partial apply for closure #1 in AnyCanvas.cutAction(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48));
}

uint64_t sub_20C5ECF7C()
{
  return 24;
}

__n128 sub_20C5ECF88(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type Link and conformance Link(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()(uint64_t a1, uint64_t a2)
{
  if (a1) {
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void TiledSelectionInteractionDelegate.tiledView.getter()
{
}

id TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  if (a1)
  {
    id v4 = objc_msgSend(a1, sel_attachmentContainerView);
    if (v4)
    {
      uint64_t v5 = v4;
      type metadata accessor for AnyCanvas();
      uint64_t v6 = (void *)swift_dynamicCastClass();
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = (void *)(*(uint64_t (**)(void))((*v2 & *v6) + 0x2F8))();
        uint64_t v10 = v9;
        goto LABEL_9;
      }
    }
  }
  uint64_t v7 = (void *)MEMORY[0x210550400]((char *)v1 + direct field offset for TiledSelectionInteractionDelegate.tiledView);
  if (v7)
  {
    uint64_t v8 = (void *)(*(uint64_t (**)(void))(*(void *)(v3 + 88) + 8))(*(void *)(v3 + 80));
    uint64_t v10 = v11;

    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
LABEL_9:
  uint64_t v12 = (objc_class *)type metadata accessor for CanvasViewSelectionInteractionDelegate();
  uint64_t v13 = (char *)objc_allocWithZone(v12);
  *(void *)&v13[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = v10;
  swift_unknownObjectWeakAssign();
  v16.id receiver = v13;
  v16.Class super_class = v12;
  id v14 = objc_msgSendSuper2(&v16, sel_init);

  return v14;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:handleLassoSelection:strokes:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a4;
  id v13 = a6;
  id v14 = a1;
  LOBYTE(a4) = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleLassoSelection:strokes:inAttachment:)(a4, v10, v13);

  swift_bridgeObjectRelease();
  return a4 & 1;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  type metadata accessor for PKStroke();
  uint64_t v8 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a5;
  id v11 = a1;
  v12._Swift::Int rawValue = v8;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:inAttachment:)(v12, v10);

  return swift_bridgeObjectRelease();
}

uint64_t TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:nonTextStrokes:inAttachment:)(uint64_t a1, void *a2, void *a3, id a4)
{
  uint64_t v5 = v4;
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v10 = objc_msgSend(a4, sel_tiledView);
  uint64_t v11 = -a2[2];
  v18[1] = 0;
  __int16 v24 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  swift_unknownObjectWeakInit();
  v18[0] = 1;
  uint64_t v22 = v11;
  uint64_t v23 = 0;
  swift_unknownObjectWeakAssign();

  if (one-time initialization token for $currentAnalyticsEvents != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnalyticsEvent>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(void *)(inited + 56) = &type metadata for MagicPaperUsageScratchToDeleteEvent;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type MagicPaperUsageScratchToDeleteEvent and conformance MagicPaperUsageScratchToDeleteEvent();
  uint64_t v13 = swift_allocObject();
  *(void *)(inited + 32) = v13;
  outlined init with copy of MagicPaperUsageScratchToDeleteEvent((uint64_t)v18, v13 + 16);
  TaskLocal.get()();
  uint64_t v14 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v14);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnalyticsEvent]);
  swift_task_localValuePush();
  v15._Swift::Int rawValue = a2;
  v16._Swift::Int rawValue = a3;
  closure #1 in TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:nonTextStrokes:inAttachment:)(v5, a4, a1, v15, v16);
  swift_task_localValuePop();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnalyticsEvent);
  swift_arrayDestroy();
  return outlined destroy of MagicPaperUsageScratchToDeleteEvent((uint64_t)v18);
}

void closure #1 in TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:nonTextStrokes:inAttachment:)(uint64_t a1, void *a2, uint64_t a3, Swift::OpaquePointer a4, Swift::OpaquePointer a5)
{
  uint64_t v7 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  uint64_t v8 = (void *)MEMORY[0x210550400](&v7[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v8)
  {
    id v9 = v8;
    id v10 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v8) + 0x88))();

    if (v10)
    {
      uint64_t v11 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
      Swift::OpaquePointer v12 = v11;

      if (v11)
      {
        HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)(a4, a5, MEMORY[0x263F8EE78], 0);

        uint64_t v7 = v12;
      }
    }
  }
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:nonTextStrokes:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  type metadata accessor for PKStroke();
  id v9 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a6;
  id v13 = a1;
  TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:nonTextStrokes:inAttachment:)((uint64_t)v11, v9, v10, v12);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:replace:with:proofreadingItem:in:in:)(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  type metadata accessor for PKStroke();
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  id v23 = a7;
  id v24 = a10;
  id v25 = a11;
  id v26 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:replace:with:proofreadingItem:in:in:)(v19, v20, v22, a10, v25, a2, a3, a4, a5);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  type metadata accessor for PKStroke();
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a5;
  id v11 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(v8, v10);

  return swift_bridgeObjectRelease();
}

uint64_t TiledSelectionInteractionDelegate.selectionInteractionShouldBegin(_:at:for:orGestureRecognizer:)(__objc2_class **a1, char **a2, uint64_t a3, double a4, double a5)
{
  id v10 = a1;
  uint64_t v11 = *MEMORY[0x263F8EED0] & *v5;
  id v12 = objc_msgSend(a1, sel_view);
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = MEMORY[0x210550400]((char *)v5 + direct field offset for TiledSelectionInteractionDelegate.tiledView);
    if (v14)
    {
      Swift::OpaquePointer v15 = (void *)v14;
      uint64_t v18 = v11 + 80;
      unint64_t v16 = *(void *)(v11 + 80);
      uint64_t v17 = *(void **)(v18 + 8);
      unint64_t v19 = ((uint64_t (*)(unint64_t, void *))v17[4])(v16, v17);
      unint64_t v20 = v19;
      if (v19 >> 62) {
        goto LABEL_19;
      }
      uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v21; uint64_t v21 = _CocoaArrayWrapper.endIndex.getter())
      {
        unint64_t v54 = v16;
        uint64_t v55 = v17;
        uint64_t v56 = v10;
        unint64_t v57 = (unint64_t)a2;
        unint64_t v58 = a3;
        unint64_t v16 = v20 & 0xC000000000000001;
        a3 = 4;
        id v10 = &off_2640D6000;
        a2 = &selRef_allowsFingerDrawing;
        while (1)
        {
          uint64_t v22 = v16 ? (void *)MEMORY[0x21054E050](a3 - 4, v20) : *(id *)(v20 + 8 * a3);
          uint64_t v17 = v22;
          uint64_t v23 = a3 - 3;
          if (__OFADD__(a3 - 4, 1)) {
            break;
          }
          objc_msgSend(v22, sel_bounds);
          CGFloat v25 = v24;
          CGFloat v27 = v26;
          CGFloat v29 = v28;
          CGFloat v31 = v30;
          objc_msgSend(v17, sel_convertPoint_fromCoordinateSpace_, v13, a4, a5);
          v60.CGFloat x = v32;
          v60.CGFloat y = v33;
          v61.origin.CGFloat x = v25;
          v61.origin.CGFloat y = v27;
          v61.size.CGFloat width = v29;
          v61.size.CGFloat height = v31;
          if (CGRectContainsPoint(v61, v60))
          {
            uint64_t v40 = swift_bridgeObjectRelease_n();
            uint64_t v41 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v17) + 0x2F8))(v40);
            uint64_t v43 = v42;
            uint64_t v44 = (void (*)(void *, uint64_t, unint64_t, void *))v55[2];
            id v45 = v41;
            v44(v41, v43, v54, v55);
            objc_msgSend(v13, sel_convertPoint_toCoordinateSpace_, v45, a4, a5);
            double v47 = v46;
            double v49 = v48;
            uint64_t v39 = type metadata accessor for CanvasViewSelectionInteractionDelegate();
            id v50 = (char *)objc_allocWithZone((Class)v39);
            *(void *)&v50[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
            *(void *)(swift_unknownObjectWeakInit() + 8) = v43;
            swift_unknownObjectWeakAssign();
            v59.id receiver = v50;
            v59.Class super_class = (Class)v39;
            id v51 = objc_msgSendSuper2(&v59, sel_init);
            CanvasViewSelectionInteractionDelegate.selectionInteractionShouldBegin(_:at:for:orGestureRecognizer:)(v56, v57, v58, v47, v49);
            LOBYTE(v39) = v52;

            return v39 & 1;
          }

          ++a3;
          if (v23 == v21) {
            goto LABEL_12;
          }
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
      }
LABEL_12:
      swift_bridgeObjectRelease_n();
      objc_msgSend(v13, sel_convertPoint_toCoordinateSpace_, v15, a4, a5);
      double v35 = v34;
      double v37 = v36;
      id v38 = v15;
      uint64_t v39 = (uint64_t)objc_msgSend(v38, sel_hitAttachment_includeStandinAttachment_expandBottomAttachment_, 0, 0, v35, v37);

      if (v39)
      {

        LOBYTE(v39) = 1;
      }
    }
    else
    {

      LOBYTE(v39) = 0;
    }
  }
  else
  {
    LOBYTE(v39) = 0;
  }
  return v39 & 1;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteractionShouldBegin(_:at:for:orGestureRecognizer:)(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  id v12 = a5;
  id v13 = a6;
  id v14 = (id)a7;
  id v15 = a1;
  LOBYTE(a7) = TiledSelectionInteractionDelegate.selectionInteractionShouldBegin(_:at:for:orGestureRecognizer:)(v12, (char **)a6, a7, a2, a3);

  return a7 & 1;
}

uint64_t TiledSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(void *a1, void *a2, double a3, double a4)
{
  uint64_t v9 = *MEMORY[0x263F8EED0] & *v4;
  id v10 = objc_msgSend(a1, sel_view);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = MEMORY[0x210550400]((char *)v4 + direct field offset for TiledSelectionInteractionDelegate.tiledView);
    if (!v12)
    {

      char v31 = 0;
      return v31 & 1;
    }
    id v13 = (void *)v12;
    uint64_t v46 = *(void *)(v9 + 80);
    uint64_t v47 = *(void *)(v9 + 88);
    unint64_t v14 = (*(uint64_t (**)(void))(v47 + 32))();
    unint64_t v15 = v14;
    double v48 = a1;
    double v49 = a2;
    if (v14 >> 62) {
      goto LABEL_18;
    }
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v16; uint64_t v16 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v17 = 4;
      while (1)
      {
        uint64_t v18 = (v15 & 0xC000000000000001) != 0
            ? (void *)MEMORY[0x21054E050](v17 - 4, v15)
            : *(id *)(v15 + 8 * v17);
        unint64_t v19 = v18;
        uint64_t v20 = v17 - 3;
        if (__OFADD__(v17 - 4, 1)) {
          break;
        }
        objc_msgSend(v18, sel_bounds);
        CGFloat v22 = v21;
        CGFloat v24 = v23;
        CGFloat v26 = v25;
        CGFloat v28 = v27;
        objc_msgSend(v19, sel_convertPoint_fromCoordinateSpace_, v11, a3, a4);
        v51.CGFloat x = v29;
        v51.CGFloat y = v30;
        v52.origin.CGFloat x = v22;
        v52.origin.CGFloat y = v24;
        v52.size.CGFloat width = v26;
        v52.size.CGFloat height = v28;
        if (CGRectContainsPoint(v52, v51))
        {
          uint64_t v32 = swift_bridgeObjectRelease_n();
          CGFloat v33 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v19) + 0x2F8))(v32);
          uint64_t v35 = v34;
          double v36 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v47 + 16);
          id v37 = v33;
          v36(v33, v35, v46, v47);
          objc_msgSend(v11, sel_convertPoint_toCoordinateSpace_, v37, a3, a4);
          double v39 = v38;
          double v41 = v40;
          uint64_t v42 = (objc_class *)type metadata accessor for CanvasViewSelectionInteractionDelegate();
          uint64_t v43 = (char *)objc_allocWithZone(v42);
          *(void *)&v43[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
          *(void *)(swift_unknownObjectWeakInit() + 8) = v35;
          swift_unknownObjectWeakAssign();
          v50.id receiver = v43;
          v50.Class super_class = v42;
          id v44 = objc_msgSendSuper2(&v50, sel_init);
          char v31 = CanvasViewSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(v48, v49, v39, v41);

          return v31 & 1;
        }

        ++v17;
        if (v20 == v16) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
    }
LABEL_12:
    swift_bridgeObjectRelease_n();
  }
  char v31 = 0;
  return v31 & 1;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a5;
  id v11 = a6;
  id v12 = a1;
  LOBYTE(a6) = TiledSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(v10, a6, a2, a3);

  return a6 & 1;
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, void *a7, void *a8)
{
  id v14 = a7;
  id v15 = a8;
  id v16 = a1;
  uint64_t v17 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(v15, a2, a3, a4, a5);

  if (v17)
  {
    v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18.super.Class isa = 0;
  }
  return v18.super.isa;
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = a1;
  id v12 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(v9, v10);

  if (v12)
  {
    v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v13.super.Class isa = 0;
  }
  return v13.super.isa;
}

CGPathRef @objc TiledSelectionInteractionDelegate.selectionInteraction(_:pathForElement:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7 = a3;
  swift_unknownObjectRetain();
  id v8 = a5;
  id v9 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  CGPathRef v10 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:pathForElement:inAttachment:)((uint64_t)v12, v8);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v10;
}

void TiledSelectionInteractionDelegate.selectionInteraction(_:didSelectElements:inAttachment:)(void *a1, uint64_t a2, void *a3)
{
  id v9 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v10 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v8[0] = 0;
  char v6 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if ((v6 & 1) == 0)
  {
    id v7 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
    specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didSelectElements:inAttachment:)(a1, a2);
  }
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didSelectElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a5;
  id v11 = a1;
  TiledSelectionInteractionDelegate.selectionInteraction(_:didSelectElements:inAttachment:)(v9, v8, v10);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didDragElements:with:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, _OWORD *a5, void *a6)
{
  long long v9 = a5[1];
  v15[0] = *a5;
  v15[1] = v9;
  v15[2] = a5[2];
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a6;
  id v13 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDragElements:with:inAttachment:)(v10, (CGFloat *)v15, v12);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(a1, a2, a3, a4, a5, specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:));
}

void @objc TiledSelectionInteractionDelegate.selectionInteraction(_:willBeginInsertSpaceInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:willBeginInsertSpaceInAttachment:)(v7);
}

void @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndInsertSpaceInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didEndInsertSpaceInAttachment:)(v7);
}

void @objc TiledSelectionInteractionDelegate.selectionInteraction(_:insertSpaceDidMove:inAttachment:)(void *a1, double a2, uint64_t a3, void *a4, void *a5)
{
  id v8 = a4;
  id v9 = a5;
  id v10 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:insertSpaceDidMove:inAttachment:)(v9, a2);
}

void @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didClearSelectionForElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7 = a3;
  id v8 = a5;
  id v9 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didClearSelectionForElements:inAttachment:)(v8);
}

void @objc TiledSelectionInteractionDelegate.selectionInteraction(_:clearSelectionInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:clearSelectionInAttachment:)(v7);
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:canPerformAction:withSender:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v9 = a3;
  swift_unknownObjectRetain();
  id v10 = a6;
  id v11 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  char v12 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:canPerformAction:withSender:inAttachment:)(a4, (uint64_t)v14, v10);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12 & 1;
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:pasteboardRepresentationsForElements:strokes:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a6;
  id v13 = a1;
  uint64_t v14 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:pasteboardRepresentationsForElements:strokes:inAttachment:)(v9, v10, v12);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v15.super.Class isa = 0;
  }
  return v15.super.isa;
}

void @objc TiledSelectionInteractionDelegate.selectionInteractionDidPaste(_:at:in:)(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a5;
  id v11 = a6;
  id v12 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteractionDidPaste(_:at:in:)(v11, a2, a3);
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didDeleteElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(a1, a2, a3, a4, a5, specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDeleteElements:inAttachment:));
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didDuplicateElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a5;
  id v11 = a1;
  uint64_t v12 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDuplicateElements:inAttachment:)(v8, v10);

  swift_bridgeObjectRelease();
  if (v12)
  {
    v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v13.super.Class isa = 0;
  }
  return v13.super.isa;
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:elementsForSpaceInsertedAt:inAttachment:)(void *a1, CGFloat a2, CGFloat a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a5;
  id v11 = a6;
  id v12 = a1;
  uint64_t v13 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:elementsForSpaceInsertedAt:inAttachment:)(v11, a2, a3);

  if (v13)
  {
    v14.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14.super.Class isa = 0;
  }
  return v14.super.isa;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:selectionContains:inAttachment:)(void *a1, CGFloat a2, CGFloat a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a5;
  id v11 = a6;
  id v12 = a1;
  char v13 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:selectionContains:inAttachment:)(v11, a2, a3);

  return v13 & 1;
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:));
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:selectedElementsInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:selectedElementsInAttachment:));
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(void))
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a1;
  uint64_t v11 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(v9, a5);

  if (v11)
  {
    v12.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12.super.Class isa = 0;
  }
  return v12.super.isa;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didSelect:selectionType:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  type metadata accessor for PKStroke();
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a6;
  id v13 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didSelect:selectionType:inAttachment:)(v10, a5, v12);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(void *a1, int a2, void *a3, int a4, void *a5, void *a6, void *a7, void *aBlock)
{
  id v13 = _Block_copy(aBlock);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  id v16 = a3;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(v14, v17, v18, a7, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) () -> (), v15);

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillBeginForElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(a1, a2, a3, a4, a5, specialized TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillBeginForElements:inAttachment:));
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(uint64_t, id))
{
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a5;
  id v13 = a1;
  a6(v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillEndForElements:with:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a6;
  id v13 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillEndForElements:with:inAttachment:)(v10, a5, v12);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(void *a1, int a2, void *a3, void *a4, void *a5, void *aBlock)
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(a4, v14, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> (), v11);

  return swift_release();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didTapElement:withGesture:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v9 = a3;
  swift_unknownObjectRetain();
  id v10 = a5;
  id v11 = a6;
  id v12 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didTapElement:withGesture:inAttachment:)((uint64_t)v14, v10, v11);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didLongPressElement:withGesture:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v9 = a3;
  swift_unknownObjectRetain();
  id v10 = a5;
  id v11 = a6;
  id v12 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  char v13 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didLongPressElement:withGesture:inAttachment:)((uint64_t)v15, v10, v11);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return v13 & 1;
}

id @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:configurationForElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v9 = a3;
  id v10 = a4;
  swift_unknownObjectRetain();
  id v11 = a6;
  id v12 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  id v13 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:configurationForElement:inAttachment:)((uint64_t)v10, (uint64_t)v15, v11);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return v13;
}

id @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:previewForHighlightingMenuWith:forElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  swift_unknownObjectRetain();
  id v14 = a7;
  id v15 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  id v16 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:previewForHighlightingMenuWith:forElement:inAttachment:)((uint64_t)v12, (uint64_t)v13, (uint64_t)v18, v14);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v16;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(a1, a2, a3, a4, a5, a6, a7, a8, specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:));
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willEndFor:animator:forElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(a1, a2, a3, a4, a5, a6, a7, a8, specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willEndFor:animator:forElement:inAttachment:));
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v17 = a8;
  id v18 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)((uint64_t)v15, (uint64_t)v16, a6, (uint64_t)v20, v17, a9);

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:handleTapOnCanvasAtLocation:inAttachment:)(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a5;
  id v11 = a6;
  id v12 = a1;
  char v13 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleTapOnCanvasAtLocation:inAttachment:)(v11, a2, a3);

  return v13 & 1;
}

void @objc TiledSelectionInteractionDelegate.init()()
{
}

id TiledSelectionInteractionDelegate.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for TiledSelectionInteractionDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc TiledSelectionInteractionDelegate.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t specialized CanvasMembers.init<A>(strokes:strokeSelectionType:)(uint64_t a1, uint64_t a2)
{
  _OWORD v22[2] = a2;
  uint64_t v3 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v3 - 8);
  CGFloat v29 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v5 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  id v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for PKStroke();
  uint64_t v8 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  id v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v30 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
  v22[1] = a1;
  if (v11)
  {
    char v13 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v12 = v8 + 16;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v24 = *(void *)(v12 + 56);
    double v25 = v13;
    void v22[3] = v5 + 32;
    double v23 = (void (**)(char *, uint64_t))(v12 - 8);
    swift_bridgeObjectRetain();
    uint64_t v26 = v12;
    uint64_t v15 = v27;
    do
    {
      v25(v10, v14, v15);
      Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
      id v17 = [(objc_class *)isa _strokeUUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>();
      WeakRef.init(id:)();
      (*v23)(v10, v15);
      uint64_t v18 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v18 = v30;
      }
      unint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v18 = v30;
      }
      *(void *)(v18 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v18+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v20, v7, v28);
      v14 += v24;
      --v11;
    }
    while (v11);
  }
  else
  {
    uint64_t v18 = v30;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  specialized Set.init<A>(_:)(v18);
  swift_release();
  return MEMORY[0x263F8EE88];
}

uint64_t sub_20C5F0184()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 104, 7);
}

uint64_t outlined destroy of MagicPaperUsageScratchToDeleteEvent(uint64_t a1)
{
  return a1;
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleLassoSelection:strokes:inAttachment:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  LOBYTE(a2) = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleLassoSelection:strokes:inAttachment:)(a1, a2);

  return a2 & 1;
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:inAttachment:)(Swift::OpaquePointer a1, void *a2)
{
  uint64_t v9 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  uint64_t v3 = (void *)MEMORY[0x210550400](&v9[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v3
    && (uint64_t v4 = v3, v5 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x88))(), v4, v5)
    && (uint64_t v6 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView],
        id v7 = v6,
        v5,
        v6))
  {
    HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)(a1, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], 0);

    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = v9;
  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:replace:with:proofreadingItem:in:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, double a6, double a7, double a8, double a9)
{
  id v18 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a5);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:proofreadingItem:in:in:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  type metadata accessor for MainActor();
  id v9 = v7;
  swift_bridgeObjectRetain();
  uint64_t v10 = static MainActor.shared.getter();
  int64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = MEMORY[0x263F8F500];
  v11[2] = v10;
  v11[3] = v12;
  v11[4] = v9;
  v11[5] = a1;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:), (uint64_t)v11);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  id v9 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  uint64_t v10 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(a2, a3, a4, a5);

  return v10;
}

void *specialized TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(void *a1, void *a2)
{
  uint64_t v3 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  id v4 = objc_msgSend(a1, sel_CGPath);
  uint64_t v5 = &v3[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView];
  uint64_t v6 = (void *)MEMORY[0x210550400](&v3[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v6)
  {
    uint64_t v7 = *((void *)v5 + 1);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 64))(ObjectType, v7);

    uint64_t v10 = (const CGPath *)v4;
    unint64_t v11 = specialized Sequence.compactMap<A>(_:)(v9, v10);
    swift_bridgeObjectRelease();

    uint64_t v6 = (void *)specialized _arrayForceCast<A, B>(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  return v6;
}

CGPathRef specialized TiledSelectionInteractionDelegate.selectionInteraction(_:pathForElement:inAttachment:)(uint64_t a1, void *a2)
{
  uint64_t v13 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v4 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  unint64_t v14 = v4;
  v12[0] = 0;
  char v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  if (v5)
  {
    v15.origin.CGFloat x = 0.0;
    v15.origin.CGFloat y = 0.0;
    v15.size.CGFloat width = 0.0;
    v15.size.CGFloat height = 0.0;
    return CGPathCreateWithRect(v15, 0);
  }
  else
  {
    id v7 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
    uint64_t v13 = &type metadata for PencilAndPaperFeatureFlags;
    unint64_t v14 = v4;
    v12[0] = 0;
    char v8 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    if ((v8 & 1) != 0 || (unint64_t v9 = CanvasViewSelectionInteractionDelegate.view(for:)(a1)) == 0)
    {
      v16.origin.CGFloat x = 0.0;
      v16.origin.CGFloat y = 0.0;
      v16.size.CGFloat width = 0.0;
      v16.size.CGFloat height = 0.0;
      CGPathRef v6 = CGPathCreateWithRect(v16, 0);
    }
    else
    {
      uint64_t v10 = v9;
      CGPathRef v6 = (CGPathRef)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v9) + 0x1D8))();
    }
  }
  return v6;
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDragElements:with:inAttachment:)(uint64_t a1, CGFloat *a2, void *a3)
{
  unint64_t v9 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v10 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v8[0] = 0;
  char v6 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if ((v6 & 1) == 0)
  {
    id v7 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
    specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDragElements:with:inAttachment:)(a1, a2);
  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(uint64_t a1, void *a2)
{
  id v7 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v8 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v6[0] = 0;
  char v4 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if ((v4 & 1) == 0)
  {
    id v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
    specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(a1);
  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:willBeginInsertSpaceInAttachment:)(void *a1)
{
  char v6 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  uint64_t v1 = (void *)MEMORY[0x210550400](&v6[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v1
    && (objc_super v2 = v1,
        uint64_t v3 = (void *)MEMORY[0x263F8EED0],
        char v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))(),
        v2,
        v4))
  {
    (*(void (**)(void))((*v3 & *v4) + 0x5A0))();

    id v5 = v4;
  }
  else
  {
    id v5 = v6;
  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didEndInsertSpaceInAttachment:)(void *a1)
{
  char v6 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  uint64_t v1 = (void *)MEMORY[0x210550400](&v6[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v1
    && (objc_super v2 = v1,
        uint64_t v3 = (void *)MEMORY[0x263F8EED0],
        char v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))(),
        v2,
        v4))
  {
    (*(void (**)(void))((*v3 & *v4) + 0x5B0))(0);

    id v5 = v4;
  }
  else
  {
    id v5 = v6;
  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:insertSpaceDidMove:inAttachment:)(void *a1, double a2)
{
  unint64_t v8 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  uint64_t v3 = (void *)MEMORY[0x210550400](&v8[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v3
    && (char v4 = v3,
        id v5 = (void *)MEMORY[0x263F8EED0],
        char v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x88))(),
        v4,
        v6))
  {
    (*(void (**)(double))((*v5 & *v6) + 0x5A8))(a2);

    id v7 = v6;
  }
  else
  {
    id v7 = v8;
  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didClearSelectionForElements:inAttachment:)(void *a1)
{
  id v5 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v6 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v4[0] = 0;
  char v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  if ((v2 & 1) == 0)
  {
    id v3 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
    specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didClearSelectionForElements:inAttachment:)();
  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:clearSelectionInAttachment:)(void *a1)
{
  id v1 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:clearSelectionInAttachment:)();
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:canPerformAction:withSender:inAttachment:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  char v4 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:canPerformAction:withSender:inAttachment:)();

  return v4 & 1;
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:pasteboardRepresentationsForElements:strokes:inAttachment:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  uint64_t v6 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:pasteboardRepresentationsForElements:strokes:inAttachment:)(a1, a2);

  return v6;
}

void specialized TiledSelectionInteractionDelegate.selectionInteractionDidPaste(_:at:in:)(void *a1, double a2, double a3)
{
  id v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteractionDidPaste(_:at:in:)(a2, a3);
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDeleteElements:inAttachment:)(uint64_t a1, void *a2)
{
  uint64_t v12 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  id v3 = &v12[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView];
  uint64_t v4 = MEMORY[0x210550400](&v12[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v4)
  {
    id v5 = (void *)v4;
    uint64_t v6 = *((void *)v3 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = specialized _arrayForceCast<A, B>(_:)(a1);
    uint64_t v9 = specialized Set.init<A>(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v10 = specialized Set.init<A>(_:)(MEMORY[0x263F8EE78]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v6 + 88))(v9, v10, 6, 0, ObjectType, v6);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v11 = v5;
  }
  else
  {
    unint64_t v11 = v12;
  }
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDuplicateElements:inAttachment:)(uint64_t a1, void *a2)
{
  id v3 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  uint64_t v4 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDuplicateElements:inAttachment:)(a1);

  return v4;
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:elementsForSpaceInsertedAt:inAttachment:)(void *a1, CGFloat a2, CGFloat a3)
{
  id v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  uint64_t v6 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:elementsForSpaceInsertedAt:inAttachment:)(a2, a3);

  return v6;
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:selectionContains:inAttachment:)(void *a1, CGFloat a2, CGFloat a3)
{
  id v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  char v6 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:selectionContains:inAttachment:)(a2, a3);

  return v6 & 1;
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(void *a1, uint64_t (*a2)(void))
{
  id v3 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  uint64_t v4 = a2();

  return v4;
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didSelect:selectionType:inAttachment:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  if (a2 != 6 && a2)
  {
    CGRect v16 = v4;
    id v5 = (void *)MEMORY[0x210550400](&v4[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
    if (v5 && (v6 = v5, uint64_t v7 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x88))(), v6, v7))
    {
      uint64_t v8 = swift_bridgeObjectRetain();
      uint64_t v9 = specialized CanvasMembers.init<A>(strokes:strokeSelectionType:)(v8, a2);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      char v15 = v14;
      swift_bridgeObjectRelease();
      AnyCanvas.selection.setter(v9, v11, v13, v15 & 1);

      uint64_t v4 = (char *)v7;
    }
    else
    {
      uint64_t v4 = v16;
    }
  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a4);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(a1, a2, a3, a5, a6);
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillBeginForElements:inAttachment:)(uint64_t a1, void *a2)
{
  id v3 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillBeginForElements:inAttachment:)(a1);
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillEndForElements:with:inAttachment:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillEndForElements:with:inAttachment:)(a1, a2);
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(void *a1, void *a2, void (*a3)(void), uint64_t a4)
{
  unint64_t v19 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  uint64_t v7 = &v19[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView];
  uint64_t v8 = (void *)MEMORY[0x210550400](&v19[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v8)
  {
    uint64_t v9 = *((void *)v7 + 1);
    id v18 = v8;
    uint64_t v10 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v8) + 0x88))();
    if (v10)
    {
      id v17 = (id)v10;
      if (a1)
      {
        type metadata accessor for URL();
        id v11 = (void *)swift_allocObject();
        v11[2] = a3;
        v11[3] = a4;
        v11[4] = v18;
        v11[5] = v9;
        v11[6] = v17;
        lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
        id v12 = a1;
        swift_retain();
        id v13 = v18;
        id v14 = v17;
        char v15 = NSItemProvider.loadObject<A>(ofClass:completionHandler:)();

        swift_release();
        return;
      }
      a3(0);

      CGRect v16 = v17;
    }
    else
    {

      CGRect v16 = v18;
    }
  }
  else
  {
    CGRect v16 = v19;
  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didTapElement:withGesture:inAttachment:)(uint64_t a1, void *a2, void *a3)
{
  id v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didTapElement:withGesture:inAttachment:)(a1, a2);
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didLongPressElement:withGesture:inAttachment:)(uint64_t a1, void *a2, void *a3)
{
  id v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  LOBYTE(a2) = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didLongPressElement:withGesture:inAttachment:)(a1, a2);

  return a2 & 1;
}

id specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:configurationForElement:inAttachment:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  id v6 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:configurationForElement:inAttachment:)(a1, a2);

  return v6;
}

id specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:previewForHighlightingMenuWith:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a4);
  id v8 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:previewForHighlightingMenuWith:forElement:inAttachment:)(a1, a2, a3);

  return v8;
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v11 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a5);
  a6(a1, a2, a3, a4);
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleTapOnCanvasAtLocation:inAttachment:)(void *a1, double a2, double a3)
{
  id v5 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  id v13 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v14 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v12[0] = 0;
  char v6 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  if (v6)
  {
    id v7 = (void *)MEMORY[0x210550400](&v5[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = (void *)MEMORY[0x263F8EED0];
      uint64_t v10 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x88))();

      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, double, double))((*v9 & *(void *)v10) + 0x4D0))(1, 1, a2, a3);

        id v5 = v10;
      }
    }
  }

  return v6 & 1;
}

void specialized TiledSelectionInteractionDelegate.init()()
{
}

uint64_t sub_20C5F1764()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C5F179C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C5F182C()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  id v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *id v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(a1, v4, v5, v7, v6);
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t CanvasElementPDFAnnotation.decodePaperKitID()@<X0>(uint64_t a1@<X8>)
{
  value[1] = *(CGPDFDictionaryRef *)MEMORY[0x263EF8340];
  uint64_t v3 = (CGPDFDictionary *)objc_msgSend(v1, sel_sourceDictionary);
  if (v3)
  {
    value[0] = 0;
    *(_OWORD *)keCGFloat y = xmmword_20C83EC00;
    CGPDFDictionaryGetDictionary(v3, (const char *)key, value);
    uint64_t v4 = value[0];
    if (value[0])
    {
      key[0] = 0;
      if (CGPDFDictionaryGetString(value[0], "PPKID", key) && key[0] && (CFStringRef v5 = CGPDFStringCopyTextString(key[0])) != 0)
      {
        uint64_t v6 = (__CFString *)v5;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        Data.init(base64Encoded:options:)();
        unint64_t v8 = v7;
        swift_bridgeObjectRelease();
        if (v8 >> 60 != 15)
        {
LABEL_16:
          CRKeyPath.init(rawValue:)();
          uint64_t v15 = type metadata accessor for CRKeyPath();
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 0, 1, v15);
        }
      }
      else
      {
        CGPDFStreamRef stream = 0;
        if (CGPDFDictionaryGetStream(v4, "PPKID", &stream))
        {
          if (stream)
          {
            CGPDFDataFormat format = CGPDFDataFormatRaw;
            CFDataRef v12 = CGPDFStreamCopyData(stream, &format);
            if (v12)
            {
              CFDataRef v13 = v12;
              *(_OWORD *)keCGFloat y = xmmword_20C8352B0;
              static Data._conditionallyBridgeFromObjectiveC(_:result:)();

              if ((unint64_t)key[1] >> 60 != 15) {
                goto LABEL_16;
              }
            }
          }
        }
      }
    }
    uint64_t v14 = type metadata accessor for CRKeyPath();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  uint64_t v9 = type metadata accessor for CRKeyPath();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(a1, 1, 1, v9);
}

uint64_t CanvasElementPDFAnnotation.decodeImportedElement<A>(in:assetManager:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v56 = a3;
  uint64_t v70 = a2;
  uint64_t v74 = a1;
  id v72 = a4;
  uint64_t v64 = type metadata accessor for CRKeyPath();
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  id v67 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v6 - 8);
  CGPoint v60 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  CGRect v61 = (char *)&v49 - v9;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  id v62 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v55);
  unint64_t v54 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v53 = (char *)&v49 - v13;
  uint64_t v58 = type metadata accessor for UnknownCanvasElement();
  MEMORY[0x270FA5388](v58);
  unint64_t v57 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  objc_super v59 = (char *)&v49 - v16;
  uint64_t v71 = type metadata accessor for CRCodingError();
  uint64_t v69 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v17 - 8);
  unint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v68 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  CGFloat v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v23 - 8);
  CGRect v52 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v50 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  double v49 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>?);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v49 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v49 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = v4;
  Swift::String_optional v33 = CanvasElementPDFAnnotation.decodePaperKitType()();
  if (v33.value._object)
  {
    if (v33.value._countAndFlagsBits == 2002874980 && v33.value._object == (void *)0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v35 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
      CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)(0, v74, v29, v35, (uint64_t)v28);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
      {
        double v36 = &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>?;
        uint64_t v37 = (uint64_t)v28;
LABEL_13:
        outlined destroy of StocksKitCurrencyCache.Provider?(v37, v36);
        uint64_t v44 = type metadata accessor for AnnotationImporter.ImportedElement();
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v72, 1, 1, v44);
      }
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v32, v28, v29);
      double v41 = v52;
      CRRegister.value.getter();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
      uint64_t v42 = v50;
      uint64_t v43 = v51;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v41, 1, v51) == 1)
      {
        double v36 = &demangling cache variable for type metadata for Ref<PKDrawingStruct>?;
        uint64_t v37 = (uint64_t)v41;
        goto LABEL_13;
      }
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      double v48 = v49;
      v47(v49, v41, v43);
      double v40 = v72;
      v47(v72, v48, v43);
      uint64_t v46 = type metadata accessor for AnnotationImporter.ImportedElement();
      goto LABEL_14;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v34) {
      goto LABEL_6;
    }
  }
  CanvasElementPDFAnnotation.decodeCanvasElement<A>(in:assetManager:)(v74, v70, (uint64_t)v19);
  uint64_t v38 = v68;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v19, 1, v20) == 1)
  {
    double v36 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?;
    uint64_t v37 = (uint64_t)v19;
    goto LABEL_13;
  }
  double v39 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
  v39(v22, v19, v20);
  double v40 = v72;
  v39(v72, v22, v20);
  uint64_t v46 = type metadata accessor for AnnotationImporter.ImportedElement();
LABEL_14:
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v40, 0, 1, v46);
}

void one-time initialization function for hashFloatingPointRoundingDeprecated()
{
  static PaperKitPDFHash.hashFloatingPointRoundingDeprecateCGFloat d = 0x40C3880000000000;
}

void one-time initialization function for hashFloatingPointRoundingVersion4()
{
  static PaperKitPDFHash.hashFloatingPointRoundingVersion4 = 0x4059000000000000;
}

uint64_t one-time initialization function for magicNumber()
{
  uint64_t v0 = specialized _copyCollectionToContiguousArray<A>(_:)(26736, 0xE200000000000000);
  uint64_t v1 = specialized Data.init<A>(_:)(v0);
  uint64_t v3 = v2;
  uint64_t result = swift_release();
  static PaperKitPDFHash.magicNumber = v1;
  *(void *)algn_2676E9248 = v3;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  uint64_t v0 = specialized _copyCollectionToContiguousArray<A>(_:)(1836410996, 0xE400000000000000);
  uint64_t v1 = specialized Data.init<A>(_:)(v0);
  uint64_t v3 = v2;
  uint64_t result = swift_release();
  static ImageThumbnailManager.magicNumber = v1;
  unk_2676D0510 = v3;
  return result;
}

Swift::String_optional __swiftcall CanvasElementPDFAnnotation.decodePaperKitType()()
{
  value[1] = *(CGPDFDictionaryRef *)MEMORY[0x263EF8340];
  uint64_t v1 = (CGPDFDictionary *)objc_msgSend(v0, sel_sourceDictionary);
  if (!v1) {
    goto LABEL_7;
  }
  value[0] = 0;
  *(_OWORD *)string = xmmword_20C83EC00;
  CGPDFDictionaryGetDictionary(v1, (const char *)string, value);
  if (!value[0]) {
    goto LABEL_7;
  }
  string[0] = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  if (CGPDFDictionaryGetString(value[0], "PPKType", string))
  {
    if (string[0])
    {
      CFStringRef v4 = CGPDFStringCopyTextString(string[0]);
      if (v4)
      {
        uint64_t v5 = (__CFString *)v4;
        uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v3 = v6;

        goto LABEL_8;
      }
    }
LABEL_7:
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
LABEL_8:
  uint64_t v7 = v2;
  uint64_t v8 = v3;
  result.value._object = v8;
  result.value._uint64_t countAndFlagsBits = v7;
  return result;
}

id CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v68 = a2;
  v78[1] = *(CGPDFStreamRef *)MEMORY[0x263EF8340];
  uint64_t v73 = a4;
  uint64_t v9 = type metadata accessor for Capsule();
  uint64_t v69 = *(void *)(v9 - 8);
  uint64_t v70 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v63 - v10;
  uint64_t v12 = type metadata accessor for SHA256Digest();
  uint64_t v71 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SHA256();
  uint64_t v72 = *(void *)(v15 - 8);
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v19 = (CGPDFDictionary *)objc_msgSend(v5, sel_sourceDictionary, v16);
  if (!v19) {
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a5, 1, 1, a3);
  }
  uint64_t v74 = a5;
  value[0] = 0;
  if (!CGPDFDictionaryGetDictionary(v19, "AAPL:AKExtras", value)) {
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v74, 1, 1, a3);
  }
  uint64_t v20 = value[0];
  if (!value[0]) {
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v74, 1, 1, a3);
  }
  if ((a1 & 1) == 0) {
    goto LABEL_21;
  }
  value[0] = 0;
  if (!CGPDFDictionaryGetString(v20, "PPKHash", value)
    || !value[0]
    || (CFStringRef v21 = CGPDFStringCopyTextString(value[0])) == 0)
  {
    v78[0] = 0;
    if (CGPDFDictionaryGetStream(v20, "PPKHash", v78))
    {
      if (v78[0])
      {
        CGPDFDataFormat format = CGPDFDataFormatRaw;
        CFDataRef v29 = CGPDFStreamCopyData(v78[0], &format);
        if (v29)
        {
          CFDataRef v30 = v29;
          *(_OWORD *)value = xmmword_20C8352B0;
          static Data._conditionallyBridgeFromObjectiveC(_:result:)();

          unint64_t v26 = (unint64_t)value[1];
          if ((unint64_t)value[1] >> 60 != 15)
          {
            CGPDFDictionaryRef v27 = value[0];
            goto LABEL_17;
          }
        }
      }
    }
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v74, 1, 1, a3);
  }
  CGFloat v22 = (__CFString *)v21;
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v66 = v24;
  id v67 = (CGPDFDictionary *)v23;

  id v67 = (CGPDFDictionary *)Data.init(base64Encoded:options:)();
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  if (v26 >> 60 == 15) {
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v74, 1, 1, a3);
  }
  CGPDFDictionaryRef v27 = v67;
LABEL_17:
  id v67 = v27;
  int v31 = Data.paperKitHashVersion.getter((uint64_t)v27, v26);
  if ((v31 & 0x100) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v74, 1, 1, a3);
    return (id)outlined consume of Data._Representation((uint64_t)v67, v26);
  }
  LODWORD(v66) = v31;
  unint64_t v65 = v26;
  id result = objc_msgSend(v5, sel_dictionaryRef);
  if (!result)
  {
    __break(1u);
    return result;
  }
  id v64 = result;
  SHA256.init()();
  value[0] = (CGPDFDictionaryRef)MEMORY[0x263F8EE88];
  NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)((uint64_t)v18, v66, 0, (uint64_t)value);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
  uint64_t v32 = Digest.makeIterator()();
  uint64_t v34 = v33;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v14, v12);
  uint64_t v35 = specialized _copySequenceToContiguousArray<A>(_:)(v32, v34);
  swift_bridgeObjectRelease();
  uint64_t v36 = specialized Data.init<A>(_:)(v35);
  unint64_t v38 = v37;
  swift_release();
  uint64_t v39 = specialized Data.init(paperKitHash:version:)(v36, v38, v66);
  unint64_t v41 = v40;
  (*(void (**)(char *, uint64_t))(v72 + 8))(v18, v15);

  uint64_t v42 = (uint64_t)v67;
  unint64_t v43 = v65;
  if ((specialized static Data.== infix(_:_:)((uint64_t)v67, v65, v39, v41) & 1) == 0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)logger);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    BOOL v60 = os_log_type_enabled(v58, v59);
    uint64_t v61 = v74;
    if (v60)
    {
      id v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v62 = 0;
      _os_log_impl(&dword_20C2D7000, v58, v59, "Importing PaperKit element from annotation skipped due to hash difference.", v62, 2u);
      MEMORY[0x210550270](v62, -1, -1);
    }
    outlined consume of Data._Representation(v39, v41);
    outlined consume of Data._Representation((uint64_t)v67, v65);

    uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
    uint64_t v54 = v61;
    return (id)v53(v54, 1, 1, a3);
  }
  outlined consume of Data._Representation(v39, v41);
  outlined consume of Data._Representation(v42, v43);
LABEL_21:
  value[0] = 0;
  if (CGPDFDictionaryGetString(v20, "PPK", value))
  {
    if (value[0])
    {
      CFStringRef v44 = CGPDFStringCopyTextString(value[0]);
      if (v44)
      {
        id v45 = (__CFString *)v44;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        CGPDFDictionaryRef v46 = (CGPDFDictionaryRef)Data.init(base64Encoded:options:)();
        unint64_t v48 = v47;
        swift_bridgeObjectRelease();
        uint64_t v49 = v75;
        if (v48 >> 60 != 15) {
          goto LABEL_34;
        }
        goto LABEL_30;
      }
    }
  }
  v78[0] = 0;
  BOOL Stream = CGPDFDictionaryGetStream(v20, "PPK", v78);
  uint64_t v49 = v75;
  if (!Stream
    || !v78[0]
    || (format = CGPDFDataFormatRaw, (CFDataRef v51 = CGPDFStreamCopyData(v78[0], &format)) == 0)
    || (CFDataRef v52 = v51,
        *(_OWORD *)value = xmmword_20C8352B0,
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
        v52,
        unint64_t v48 = (unint64_t)value[1],
        (unint64_t)value[1] >> 60 == 15))
  {
LABEL_30:
    uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
    uint64_t v54 = v74;
    return (id)v53(v54, 1, 1, a3);
  }
  CGPDFDictionaryRef v46 = value[0];
LABEL_34:
  outlined copy of Data._Representation((uint64_t)v46, v48);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  Capsule<>.init(serializedData:allowedAppFormats:)();
  if (v49) {
    return (id)outlined consume of Data._Representation((uint64_t)v46, v48);
  }
  Capsule.Ref.import<A>(_:)();
  uint64_t v55 = v74;
  uint64_t v56 = v70;
  Capsule<>.root.getter();
  outlined consume of Data._Representation((uint64_t)v46, v48);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v11, v56);
  return (id)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v55, 0, 1, a3);
}

id CanvasElementPDFAnnotation.decodeCanvasElement<A>(in:assetManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v29 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v28 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v31 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  id result = CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)(1, a1, v12, v15, (uint64_t)v11);
  if (!v4)
  {
    unint64_t v25 = (void (*)(unsigned char *, void))a1;
    uint64_t v26 = v3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v11, 1, v12) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>?);
      uint64_t v17 = 1;
      uint64_t v19 = v28;
      uint64_t v18 = v29;
    }
    else
    {
      uint64_t v20 = v31;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v14, v11, v12);
      CRRegister.value.getter();
      unint64_t v25 = (void (*)(unsigned char *, void))SharedTagged_9.subscript.modify();
      uint64_t v23 = *(void *)(v21 + 24);
      uint64_t v22 = *(void *)(v21 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v21, v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 136))(v26, v27, v23, v22);
      v25(v30, 0);
      uint64_t v19 = v28;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
      uint64_t v18 = v29;
      CRRegister.value.getter();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v12);
      uint64_t v17 = 0;
    }
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v18, v17, 1, v6);
  }
  return result;
}

uint64_t Data.paperKitHashVersion.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2 >> 62;
  int v5 = 1;
  unsigned __int8 v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      if (v8 != 32)
      {
        if (v4)
        {
          if (v4 == 1)
          {
            LODWORD(v12) = HIDWORD(a1) - a1;
            if (!__OFSUB__(HIDWORD(a1), a1))
            {
              uint64_t v12 = (int)v12;
              goto LABEL_14;
            }
            __break(1u);
LABEL_24:
            __break(1u);
            JUMPOUT(0x20C5F3A4CLL);
          }
          uint64_t v14 = *(void *)(a1 + 16);
          uint64_t v13 = *(void *)(a1 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (v11) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v12 = BYTE6(a2);
        }
LABEL_14:
        if (v12 != 36) {
          goto LABEL_18;
        }
        uint64_t v2 = Data._Representation.subscript.getter();
        unint64_t v3 = v15;
        if (one-time initialization token for magicNumber == -1)
        {
LABEL_16:
          char v16 = specialized static Data.== infix(_:_:)(v2, v3, static PaperKitPDFHash.magicNumber, *(unint64_t *)algn_2676E9248);
          outlined consume of Data._Representation(v2, v3);
          if (v16)
          {
            unsigned __int8 v7 = Data.subscript.getter();
            int v5 = 0;
            return v7 | (v5 << 8);
          }
LABEL_18:
          unsigned __int8 v7 = 0;
          int v5 = 1;
          return v7 | (v5 << 8);
        }
LABEL_22:
        swift_once();
        goto LABEL_16;
      }
      int v5 = 0;
      unsigned __int8 v7 = 1;
      return v7 | (v5 << 8);
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_21;
    case 3uLL:
      return v7 | (v5 << 8);
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t closure #1 in CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v8 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  SharedTagged_9.any.getter();
  __swift_project_boxed_opaque_existential_1(v9, v9[3]);
  Capsule.Ref.import<A, B>(_:from:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  return CRRegister.init(_:)();
}

uint64_t NSArray.paperKitHashInto(_:version:visited:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = specialized Set._Variant.insert(_:)((uint64_t *)&v17, v3);
  if (result)
  {
    uint64_t v14 = v8;
    uint64_t v15 = v7;
    NSArray.makeIterator()();
    NSFastEnumerationIterator.next()();
    while (v21)
    {
      outlined init with take of Any(&v20, &v16);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitHashable);
      if (swift_dynamicCast())
      {
        uint64_t v13 = *((void *)&v18 + 1);
        uint64_t v12 = v19;
        __swift_project_boxed_opaque_existential_1(&v17, *((uint64_t *)&v18 + 1));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8))(a1, a2, a3, v13, v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      }
      else
      {
        uint64_t v19 = 0;
        long long v17 = 0u;
        long long v18 = 0u;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v17, &demangling cache variable for type metadata for PaperKitHashable?);
      }
      NSFastEnumerationIterator.next()();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v15);
  }
  return result;
}

uint64_t protocol witness for PaperKitHashable.paperKitHashInto(_:version:visited:) in conformance NSArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NSArray.paperKitHashInto(_:version:visited:)(a1, a2, a3);
}

Swift::UInt64 __swiftcall CGFloat.roundedHashUInt(version:)(Swift::UInt8 version)
{
  double v2 = v1;
  if (version - 1 > 2)
  {
    if (one-time initialization token for hashFloatingPointRoundingVersion4 != -1) {
      swift_once();
    }
    uint64_t v3 = &static PaperKitPDFHash.hashFloatingPointRoundingVersion4;
  }
  else
  {
    if (one-time initialization token for hashFloatingPointRoundingDeprecated != -1) {
      swift_once();
    }
    uint64_t v3 = &static PaperKitPDFHash.hashFloatingPointRoundingDeprecated;
  }
  if ((~*(void *)&v2 & 0x7FF0000000000000) != 0
    && specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v5, round(*(double *)v3 * v2))
    && v6 != 1)
  {
    return v5;
  }
  else
  {
    return 0;
  }
}

uint64_t CGFloat.roundedHash(into:version:)(int a1, Swift::UInt8 version)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  Swift::UInt64 v9 = CGFloat.roundedHashUInt(version:)(version);
  uint64_t v2 = specialized Data.init<A>(_:)((uint64_t)&v9, (uint64_t)&v10);
  uint64_t v4 = v2;
  unint64_t v5 = v3;
  switch(v3 >> 62)
  {
    case 1uLL:
      if (v2 >> 32 < (int)v2) {
        __break(1u);
      }
      outlined copy of Data._Representation(v2, v3);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v4, v4 >> 32);
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v2 + 16);
      uint64_t v7 = *(void *)(v2 + 24);
      outlined copy of Data._Representation(v2, v3);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v6, v7);
      swift_release();
      swift_release();
      break;
    default:
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  outlined consume of Data._Representation(v4, v5);
  return outlined consume of Data._Representation(v4, v5);
}

uint64_t CGRect.roundedHash(into:version:)(int a1, Swift::UInt8 version)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v10[0] = CGFloat.roundedHashUInt(version:)(version);
  v10[1] = CGFloat.roundedHashUInt(version:)(version);
  v10[2] = CGFloat.roundedHashUInt(version:)(version);
  void v10[3] = CGFloat.roundedHashUInt(version:)(version);
  uint64_t v3 = specialized Data.init<A>(_:)((uint64_t)v10, (uint64_t)&v11);
  uint64_t v5 = v3;
  unint64_t v6 = v4;
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < (int)v3) {
        __break(1u);
      }
      outlined copy of Data._Representation(v3, v4);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v5, v5 >> 32);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v3 + 16);
      uint64_t v8 = *(void *)(v3 + 24);
      outlined copy of Data._Representation(v3, v4);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  outlined consume of Data._Representation(v5, v6);
  return outlined consume of Data._Representation(v5, v6);
}

void NSValue.paperKitHashInto(_:version:visited:)(int a1, Swift::UInt8 a2)
{
  uint64_t v3 = v2;
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v6 = v3;
  objc_msgSend(v6, sel_objCType);
  if (String.init(cString:)() == 0xD000000000000020 && v7 == 0x800000020C85B360)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_5:
    objc_msgSend(v6, sel_CGRectValue);
    if (a2 == 1)
    {
      uint64_t v13 = CGRect.rawValue.getter(v9, v10, v11, v12);
      uint64_t v15 = v13;
      unint64_t v16 = v14;
      switch(v14 >> 62)
      {
        case 1uLL:
          if (v13 >> 32 < (int)v13)
          {
            __break(1u);
LABEL_31:
            __break(1u);
          }
          outlined copy of Data._Representation(v13, v14);
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v15, v15 >> 32);
LABEL_16:
          outlined consume of Data._Representation(v15, v16);
          outlined consume of Data._Representation(v15, v16);
          break;
        case 2uLL:
          uint64_t v25 = *(void *)(v13 + 16);
          uint64_t v26 = *(void *)(v13 + 24);
          outlined copy of Data._Representation(v13, v14);
          swift_retain();
          swift_retain();
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v25, v26);
          swift_release();
          swift_release();
          goto LABEL_16;
        default:
          type metadata accessor for SHA256();
          lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
          dispatch thunk of HashFunction.update(bufferPointer:)();
          outlined consume of Data._Representation(v15, v16);
          uint64_t v27 = v15;
          unint64_t v28 = v16;
          goto LABEL_28;
      }
    }
    else
    {
      CGRect.roundedHash(into:version:)(a1, a2);
    }
    return;
  }
  self;
  uint64_t v17 = swift_dynamicCastObjCClass();
  if (v17)
  {
    long long v18 = (void *)v17;
    if (a2 == 1)
    {
      id v19 = v6;
      objc_msgSend(v18, sel_doubleValue);
      unint64_t v32 = _OSSwapInt64(v20);
      uint64_t v21 = specialized Data.init<A>(_:)((uint64_t)&v32, (uint64_t)&v33);
      uint64_t v23 = v21;
      unint64_t v24 = v22;
      switch(v22 >> 62)
      {
        case 1uLL:
          if (v21 >> 32 < (int)v21) {
            goto LABEL_31;
          }
          outlined copy of Data._Representation(v21, v22);
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v23, v23 >> 32);
LABEL_27:
          outlined consume of Data._Representation(v23, v24);

          uint64_t v27 = v23;
          unint64_t v28 = v24;
LABEL_28:
          outlined consume of Data._Representation(v27, v28);
          break;
        case 2uLL:
          uint64_t v29 = *(void *)(v21 + 16);
          uint64_t v30 = *(void *)(v21 + 24);
          outlined copy of Data._Representation(v21, v22);
          swift_retain();
          swift_retain();
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v29, v30);
          swift_release();
          swift_release();
          goto LABEL_27;
        default:
          type metadata accessor for SHA256();
          lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
          dispatch thunk of HashFunction.update(bufferPointer:)();
          goto LABEL_27;
      }
    }
    else
    {
      id v31 = v6;
      objc_msgSend(v18, sel_doubleValue);
      CGFloat.roundedHash(into:version:)(a1, a2);
    }
  }
}

void protocol witness for PaperKitHashable.paperKitHashInto(_:version:visited:) in conformance NSValue(int a1, Swift::UInt8 a2)
{
}

uint64_t protocol witness for PaperKitHashable.paperKitHashInto(_:version:visited:) in conformance NSString()
{
  return specialized NSString.paperKitHashInto(_:version:visited:)();
}

uint64_t NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v54) = a3;
  unsigned int v48 = a2;
  uint64_t v52 = a1;
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v51 = type metadata accessor for String.Encoding();
  uint64_t v7 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v50 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  double v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a4;
  uint64_t result = specialized Set._Variant.insert(_:)((uint64_t *)&v61, (uint64_t)v5);
  if (result)
  {
    uint64_t v53 = v10;
    uint64_t v45 = v7;
    uint64_t v55 = v5;
    unint64_t v14 = (void (**)(char *, uint64_t))objc_msgSend(v5, sel_keyEnumerator);
    NSEnumerator.makeIterator()();
    unint64_t v47 = v14;

    lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator((unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, MEMORY[0x263F06DC0]);
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v15 = (void *)MEMORY[0x263F8EE78];
    while (*((void *)&v62 + 1))
    {
      outlined init with take of Any(&v61, &v58);
      outlined init with copy of Any((uint64_t)&v58, (uint64_t)v66);
      if (swift_dynamicCast())
      {
        uint64_t v17 = v65[0];
        uint64_t v16 = v65[1];
        if ((v54 & 1) != 0
          || (v18._uint64_t countAndFlagsBits = 0x4C5041412FLL,
              v18._object = (void *)0xE500000000000000,
              !String.hasPrefix(_:)(v18)))
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
          }
          unint64_t v20 = v15[2];
          unint64_t v19 = v15[3];
          if (v20 >= v19 >> 1) {
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v15);
          }
          v15[2] = v20 + 1;
          uint64_t v21 = &v15[2 * v20];
          v21[4] = v17;
          v21[5] = v16;
          goto LABEL_6;
        }
        swift_bridgeObjectRelease();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
LABEL_6:
      dispatch thunk of IteratorProtocol.next()();
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v9);

    *(void *)&long long v61 = v15;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v61);
    swift_bridgeObjectRelease();
    uint64_t v46 = v61;
    uint64_t v22 = *(void *)(v61 + 16);
    uint64_t v23 = v55;
    if (v22)
    {
      uint64_t v24 = MEMORY[0x263F8D310];
      unint64_t v47 = (void (**)(char *, uint64_t))(v45 + 8);
      uint64_t v25 = (uint64_t *)(v46 + 40);
      uint64_t v53 = MEMORY[0x263F8EE58] + 8;
      long long v54 = xmmword_20C832C20;
      while (1)
      {
        uint64_t v27 = *(v25 - 1);
        uint64_t v26 = *v25;
        *(void *)&long long v61 = v27;
        *((void *)&v61 + 1) = v26;
        swift_bridgeObjectRetain_n();
        id v28 = objc_msgSend(v23, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        if (v28)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v61 = 0u;
          long long v62 = 0u;
        }
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v61, (uint64_t)v66, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        if (v27 == 0x656D614E2FLL && v26 == 0xE500000000000000)
        {
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v66, (uint64_t)v65, &demangling cache variable for type metadata for Any?);
        }
        else
        {
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v66, (uint64_t)v65, &demangling cache variable for type metadata for Any?);
          if ((v29 & 1) == 0) {
            goto LABEL_33;
          }
        }
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v65, (uint64_t)&v61, &demangling cache variable for type metadata for Any?);
        if (!*((void *)&v62 + 1)) {
          break;
        }
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_33;
        }
        if (v58 == __PAIR128__(0xE600000000000000, 0x74666172442FLL))
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v65, &demangling cache variable for type metadata for Any?);
          swift_bridgeObjectRelease();
LABEL_17:
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v65, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        if (v30) {
          goto LABEL_17;
        }
LABEL_34:
        if (v27 == 5456431 && v26 == 0xE300000000000000)
        {
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v66, (uint64_t)v64, &demangling cache variable for type metadata for Any?);
        }
        else
        {
          char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v66, (uint64_t)v64, &demangling cache variable for type metadata for Any?);
          if ((v31 & 1) == 0)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v64, &demangling cache variable for type metadata for Any?);
            goto LABEL_48;
          }
        }
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v64, (uint64_t)&v61, &demangling cache variable for type metadata for Any?);
        if (*((void *)&v62 + 1))
        {
          type metadata accessor for NSMutableDictionary();
          if (swift_dynamicCast())
          {
            unint64_t v32 = (void *)v58;
            goto LABEL_43;
          }
        }
        else
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v61, &demangling cache variable for type metadata for Any?);
        }
        unint64_t v32 = 0;
LABEL_43:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
        uint64_t v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = v54;
        *(void *)(v33 + 32) = 22319;
        *(void *)(v33 + 40) = 0xE200000000000000;
        *(void *)(v33 + 88) = MEMORY[0x263F8D6C8];
        *(void *)(v33 + 56) = v24;
        *(void *)(v33 + 64) = 0;
        type metadata accessor for NSMutableDictionary();
        uint64_t v34 = NSDictionary.init(dictionaryLiteral:)();
        if (v32)
        {
          id v35 = v32;
          char v36 = static NSObject.== infix(_:_:)();
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v64, &demangling cache variable for type metadata for Any?);

          uint64_t v23 = v55;
          if (v36) {
            goto LABEL_17;
          }
        }
        else
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v64, &demangling cache variable for type metadata for Any?);

          uint64_t v23 = v55;
        }
LABEL_48:
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v66, (uint64_t)v56, &demangling cache variable for type metadata for Any?);
        if (!v57)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v56, &demangling cache variable for type metadata for Any?);
          long long v58 = 0u;
          long long v59 = 0u;
          uint64_t v60 = 0;
LABEL_56:
          swift_bridgeObjectRelease();
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v58, &demangling cache variable for type metadata for PaperKitHashable?);
          goto LABEL_18;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitHashable);
        if ((swift_dynamicCast() & 1) == 0)
        {
          uint64_t v60 = 0;
          long long v59 = 0u;
          long long v58 = 0u;
          goto LABEL_56;
        }
        if (!*((void *)&v59 + 1)) {
          goto LABEL_56;
        }
        outlined init with take of FindResult(&v58, (uint64_t)&v61);
        unint64_t v37 = v50;
        static String.Encoding.utf8.getter();
        uint64_t v38 = String.data(using:allowLossyConversion:)();
        unint64_t v40 = v39;
        swift_bridgeObjectRelease();
        (*v47)(v37, v51);
        if (v40 >> 60 != 15)
        {
          switch(v40 >> 62)
          {
            case 1uLL:
              if (v38 >> 32 < (int)v38)
              {
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
              }
              outlined copy of Data._Representation(v38, v40);
              if (__DataStorage._bytes.getter() && __OFSUB__((int)v38, __DataStorage._offset.getter())) {
                goto LABEL_74;
              }
              __DataStorage._length.getter();
              type metadata accessor for SHA256();
              lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
LABEL_66:
              dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_67:
              outlined consume of Data?(v38, v40);
              outlined consume of Data?(v38, v40);
              break;
            case 2uLL:
              uint64_t v41 = *(void *)(v38 + 16);
              uint64_t v45 = *(void *)(v38 + 24);
              outlined copy of Data?(v38, v40);
              swift_retain();
              swift_retain();
              if (__DataStorage._bytes.getter() && __OFSUB__(v41, __DataStorage._offset.getter())) {
                goto LABEL_73;
              }
              if (__OFSUB__(v45, v41)) {
                goto LABEL_72;
              }
              __DataStorage._length.getter();
              type metadata accessor for SHA256();
              lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
              dispatch thunk of HashFunction.update(bufferPointer:)();
              swift_release();
              swift_release();
              goto LABEL_67;
            case 3uLL:
              type metadata accessor for SHA256();
              lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
              *(void *)&long long v58 = 0;
              *(void *)((char *)&v58 + 6) = 0;
              goto LABEL_66;
            default:
              *(void *)&long long v58 = v38;
              WORD4(v58) = v40;
              BYTE10(v58) = BYTE2(v40);
              BYTE11(v58) = BYTE3(v40);
              BYTE12(v58) = BYTE4(v40);
              BYTE13(v58) = BYTE5(v40);
              type metadata accessor for SHA256();
              lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
              goto LABEL_66;
          }
        }
        uint64_t v42 = *((void *)&v62 + 1);
        uint64_t v43 = v63;
        __swift_project_boxed_opaque_existential_1(&v61, *((uint64_t *)&v62 + 1));
        (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(v43 + 8))(v52, v48, v49, v42, v43);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
        uint64_t v23 = v55;
LABEL_18:
        v25 += 2;
        if (!--v22) {
          return swift_release();
        }
      }
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v61, &demangling cache variable for type metadata for Any?);
LABEL_33:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v65, &demangling cache variable for type metadata for Any?);
      goto LABEL_34;
    }
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for PaperKitHashable.paperKitHashInto(_:version:visited:) in conformance NSDictionary(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)(a1, a2, 0, a3);
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(uint64_t a1, double a2)
{
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    uint64_t v12 = 0;
    BOOL result = 1;
    goto LABEL_25;
  }
  if (v4 == 2047) {
    goto LABEL_28;
  }
  uint64_t v7 = Double.exponent.getter();
  if (v7 > 63) {
    goto LABEL_28;
  }
  uint64_t v8 = v7;
  uint64_t v9 = Double.significandWidth.getter();
  BOOL result = v8 >= v9;
  uint64_t v11 = v9 + __clz(__rbit64(v5));
  uint64_t v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      uint64_t v12 = 0x8000000000000000;
      goto LABEL_25;
    }
LABEL_28:
    uint64_t v12 = 0;
    BOOL result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 63)
  {
    if (v12 < -64 || v12 > 64) {
      goto LABEL_11;
    }
  }
  else if (v12 < -64 || v12 > 64)
  {
    goto LABEL_11;
  }
  if (v12 < 0) {
    goto LABEL_32;
  }
  if ((unint64_t)v12 < 0x40)
  {
    unint64_t v14 = v5 << v12;
    if (v8 != 63) {
      goto LABEL_17;
    }
LABEL_34:
    if (a2 < 0.0 && !v14) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 63) {
    goto LABEL_27;
  }
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  if (v8 < 0) {
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    uint64_t v12 = v14 | v13;
    if (a2 >= 0.0) {
      break;
    }
    if ((v12 & 0x8000000000000000) == 0)
    {
      LOBYTE(v6) = 0;
      uint64_t v12 = -v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0) {
      goto LABEL_11;
    }
    unint64_t v14 = v5 >> -(char)v12;
    if (v8 == 63) {
      goto LABEL_34;
    }
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0) {
      goto LABEL_19;
    }
    uint64_t v13 = 0;
  }
  if (v12 < 0) {
    goto LABEL_31;
  }
  LOBYTE(v6) = 0;
LABEL_25:
  *(void *)a1 = v12;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    BOOL result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (BOOL result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      BOOL result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      uint64_t v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        Swift::String v18 = (char *)(a3 - 16);
        unint64_t v19 = v6;
        while (1)
        {
          unint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)Swift::String v18 = *((_OWORD *)v17 - 1);
            }
            unint64_t v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)Swift::String v18 = *(_OWORD *)v19;
            }
            uint64_t v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    unint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  const void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  long long v19;
  long long v20;
  long long v21;
  char *v22;
  char *v23;
  BOOL v24;
  long long v25;
  long long v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  long long v31;
  long long v32;
  char *v33;
  uint64_t v34;
  char v35;
  long long v36;
  uint64_t v37;
  char v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  uint64_t result;
  long long v44;
  long long v45;
  uint64_t v46;
  char v47;
  long long v48;
  long long v49;
  uint64_t v50;
  char v51;
  char *v52;
  const void *v53;
  char *v54;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 48;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 48;
  long long v54 = __src;
  uint64_t v53 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      uint64_t v27 = 48 * v11;
      if (__dst != a2 || &a2[v27] <= __dst) {
        memmove(__dst, a2, 48 * v11);
      }
      id v28 = &v4[v27];
      uint64_t v52 = v28;
      long long v54 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        char v29 = (char *)(a3 - 48);
        char v30 = v6;
        do
        {
          uint64_t v33 = v29 + 48;
          uint64_t v34 = *((void *)v28 - 2);
          id v35 = *(v28 - 8);
          char v36 = *((_OWORD *)v30 - 3);
          v30 -= 48;
          unint64_t v37 = *((void *)v30 + 4);
          uint64_t v38 = v30[40];
          unint64_t v39 = *((_OWORD *)v28 - 2);
          unint64_t v40 = *((_OWORD *)v30 + 1);
          unsigned int v48 = *((_OWORD *)v28 - 3);
          uint64_t v49 = v39;
          uint64_t v50 = v34;
          uint64_t v51 = v35;
          uint64_t v44 = v36;
          uint64_t v45 = v40;
          uint64_t v46 = v37;
          unint64_t v47 = v38;
          if (specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)&v48, (uint64_t)&v44))
          {
            if (v33 != v6 || v29 >= v6)
            {
              char v31 = *(_OWORD *)v30;
              unint64_t v32 = *((_OWORD *)v30 + 2);
              *((_OWORD *)v29 + 1) = *((_OWORD *)v30 + 1);
              *((_OWORD *)v29 + 2) = v32;
              *(_OWORD *)char v29 = v31;
            }
            long long v54 = v30;
            if (v30 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v52 = v28 - 48;
            if (v33 < v28 || v29 >= v28 || v33 != v28)
            {
              uint64_t v41 = *((_OWORD *)v28 - 3);
              uint64_t v42 = *((_OWORD *)v28 - 1);
              *((_OWORD *)v29 + 1) = *((_OWORD *)v28 - 2);
              *((_OWORD *)v29 + 2) = v42;
              *(_OWORD *)char v29 = v41;
            }
            char v30 = v6;
            v28 -= 48;
            if (v6 <= v7) {
              break;
            }
          }
          v29 -= 48;
          uint64_t v6 = v30;
        }
        while (v28 > v4);
      }
LABEL_41:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v54, &v53, &v52);
      return 1;
    }
  }
  else if (v8 >= -47)
  {
    uint64_t v12 = 48 * v9;
    if (__dst != __src || &__src[v12] <= __dst) {
      memmove(__dst, __src, v12);
    }
    uint64_t v13 = &v4[v12];
    uint64_t v52 = v13;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      unint64_t v14 = v53;
      while (1)
      {
        BOOL v15 = *((void *)v6 + 4);
        uint64_t v16 = v6[40];
        uint64_t v17 = *((void *)v4 + 4);
        Swift::String v18 = v4[40];
        unint64_t v19 = *((_OWORD *)v6 + 1);
        unint64_t v20 = *(_OWORD *)v4;
        uint64_t v21 = *((_OWORD *)v4 + 1);
        unsigned int v48 = *(_OWORD *)v6;
        uint64_t v49 = v19;
        uint64_t v50 = v15;
        uint64_t v51 = v16;
        uint64_t v44 = v20;
        uint64_t v45 = v21;
        uint64_t v46 = v17;
        unint64_t v47 = v18;
        if (specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)&v48, (uint64_t)&v44))break; {
        unint64_t v14 = v4 + 48;
        }
        BOOL v23 = v4;
        uint64_t v22 = v6;
        uint64_t v24 = v7 == v4;
        v4 += 48;
        if (!v24) {
          goto LABEL_18;
        }
LABEL_19:
        v7 += 48;
        if (v4 < v13)
        {
          uint64_t v6 = v22;
          if ((unint64_t)v22 < a3) {
            continue;
          }
        }
        uint64_t v53 = v14;
        long long v54 = v7;
        goto LABEL_41;
      }
      uint64_t v22 = v6 + 48;
      if (v7 < v6 || v7 >= v22)
      {
        BOOL v23 = v6;
      }
      else
      {
        BOOL v23 = v6;
        if (v7 == v6) {
          goto LABEL_19;
        }
      }
LABEL_18:
      uint64_t v25 = *(_OWORD *)v23;
      uint64_t v26 = *((_OWORD *)v23 + 2);
      *((_OWORD *)v7 + 1) = *((_OWORD *)v23 + 1);
      *((_OWORD *)v7 + 2) = v26;
      *(_OWORD *)uint64_t v7 = v25;
      goto LABEL_19;
    }
    goto LABEL_41;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v50 = a8;
  uint64_t v48 = a7;
  uint64_t v47 = a6;
  uint64_t v49 = a4;
  int v52 = a3;
  long long v58 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  uint64_t v56 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v56 + 64);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v53 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  BOOL v15 = (char *)&v46 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
  long long v54 = *(char **)(v16 - 8);
  uint64_t v17 = *((void *)v54 + 8);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v55 = (uint64_t)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  unint64_t v20 = (char *)&v46 - v19;
  uint64_t v21 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>);
  uint64_t v22 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CRKeyPath.unique.getter();
  uint64_t v60 = a5;
  uint64_t v61 = v47;
  uint64_t v62 = v48;
  uint64_t v63 = v50;
  uint64_t v64 = a9;
  uint64_t v65 = a2;
  uint64_t v66 = v49;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  Capsule<>.init(id:initClosure:)();
  uint64_t v51 = v24;
  if (v52)
  {
    uint64_t v25 = v24;
    uint64_t v26 = v59;
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v20, v25, v59);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v26);
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v15, 1, 1, v27);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v59);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    uint64_t v29 = *(void *)(v28 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v15, a2, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v15, 0, 1, v28);
  }
  uint64_t v30 = v55;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v20, v55, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
  uint64_t v31 = v53;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v15, v53, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  uint64_t v32 = v54[80];
  long long v54 = v20;
  uint64_t v33 = v31;
  uint64_t v34 = (v32 + 16) & ~v32;
  unint64_t v35 = (v17 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = (uint64_t)v15;
  unint64_t v37 = (*(unsigned __int8 *)(v56 + 80) + v35 + 8) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  uint64_t v38 = v37 + v12;
  uint64_t v39 = swift_allocObject();
  unint64_t v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + v39;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v30, v39 + v34, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
  uint64_t v41 = v58;
  *(void *)(v39 + v35) = v58;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v33, v39 + v37, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  *(unsigned char *)(v39 + v38) = 1;
  *(void *)(v40 + 8) = 0;
  *(void *)(v40 + 16) = 0;
  uint64_t v42 = (void (**)(void *))(v57
                                     + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
  uint64_t v43 = *(void *)(v57 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
  *uint64_t v42 = _s8PaperKit26CanvasElementPDFAnnotationC06encodeaB0_7capsule3ref9writeHash0I4Typey9Coherence9CRContextC_AI7CapsuleVyxGSgAI14SharedTagged_9VyAA0pcD0VGSgSbSSSgtAI4CRDTRzlFySo19NSMutableDictionaryCcfU_AI10CRRegisterVyATG_Tg5TA_0;
  v42[1] = (void (*)(void *))v39;
  id v44 = v41;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v43);
  outlined destroy of StocksKitCurrencyCache.Provider?(v36, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v54, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v51, v59);
}

uint64_t specialized NSString.paperKitHashInto(_:version:visited:)()
{
  void v10[3] = *MEMORY[0x263EF8340];
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 != 15)
  {
    switch(v6 >> 62)
    {
      case 1uLL:
        if (v4 >> 32 < (int)v4) {
          __break(1u);
        }
        outlined copy of Data._Representation(v4, v6);
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v4, v4 >> 32);
        break;
      case 2uLL:
        uint64_t v8 = *(void *)(v4 + 16);
        uint64_t v9 = *(void *)(v4 + 24);
        outlined copy of Data?(v4, v6);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v8, v9);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        type metadata accessor for SHA256();
        lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
        memset(v10, 0, 14);
        goto LABEL_8;
      default:
        v10[0] = v4;
        LOWORD(v10[1]) = v6;
        BYTE2(v10[1]) = BYTE2(v6);
        BYTE3(v10[1]) = BYTE3(v6);
        BYTE4(v10[1]) = BYTE4(v6);
        BYTE5(v10[1]) = BYTE5(v6);
        type metadata accessor for SHA256();
        lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
LABEL_8:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        break;
    }
    outlined consume of Data?(v4, v6);
    return outlined consume of Data?(v4, v6);
  }
  return result;
}

unint64_t type metadata accessor for NSMutableDictionary()
{
  unint64_t result = lazy cache variable for type metadata for NSMutableDictionary;
  if (!lazy cache variable for type metadata for NSMutableDictionary)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
  }
  return result;
}

uint64_t specialized Data.init(paperKitHash:version:)(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 != 1)
  {
    if (one-time initialization token for magicNumber != -1) {
      swift_once();
    }
    uint64_t v6 = static PaperKitPDFHash.magicNumber;
    unint64_t v7 = *(void *)algn_2676E9248;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_20C835740;
    *(unsigned char *)(v8 + 32) = 0;
    *(unsigned char *)(v8 + 33) = a3;
    outlined copy of Data._Representation(v6, v7);
    uint64_t v9 = specialized Data.init<A>(_:)(v8);
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    outlined copy of Data._Representation(v6, v7);
    specialized Data.append<A>(contentsOf:)(v9, v11);
    outlined consume of Data._Representation(v9, v11);
    outlined consume of Data._Representation(v6, v7);
    outlined copy of Data._Representation(v6, v7);
    outlined copy of Data._Representation(a1, a2);
    specialized Data.append<A>(contentsOf:)(a1, a2);
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(v6, v7);
    uint64_t v12 = specialized Data.init<A>(_:)(v6, v7);
    outlined consume of Data._Representation(a1, a2);
    return v12;
  }
  return a1;
}

uint64_t outlined init with copy of UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownCanvasElement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(*(void *)(v1 + 56), a1);
}

uint64_t sub_20C5F6F28()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6 + 8) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = v0 + v3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>);
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }

  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v0 + v7, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0 + v7, v12);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v7 + v8) & 0xFFFFFFFFFFFFFFF8) + 24, v2 | v6 | 7);
}

void _s8PaperKit26CanvasElementPDFAnnotationC06encodeaB0_7capsule3ref9writeHash0I4Typey9Coherence9CRContextC_AI7CapsuleVyxGSgAI14SharedTagged_9VyAA0pcD0VGSgSbSSSgtAI4CRDTRzlFySo19NSMutableDictionaryCcfU_AI10CRRegisterVyATG_Tg5TA_0(void *a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + v1;
  uint64_t v10 = *(void *)(v1 + v5);
  int v11 = *(unsigned __int8 *)(v1 + v8);
  uint64_t v12 = *(void *)(v9 + 8);
  uint64_t v13 = *(void *)(v9 + 16);
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, v1 + v4, v10, v1 + v7, v11, v12, v13);
}

uint64_t PaperRenderable.renderedImage(in:)()
{
  return protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t PaperRenderableOptions.useSixChannelBlending.getter()
{
  return *v0;
}

uint64_t PaperRenderableOptions.useSixChannelBlending.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*PaperRenderableOptions.useSixChannelBlending.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperRenderableOptions.darkMode.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t PaperRenderableOptions.darkMode.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*PaperRenderableOptions.darkMode.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperRenderableOptions.isRTL.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t PaperRenderableOptions.isRTL.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*PaperRenderableOptions.isRTL.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

void *PaperRenderableOptions.tintColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void PaperRenderableOptions.tintColor.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*PaperRenderableOptions.tintColor.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

double PaperRenderableOptions.init(useSixChannelBlending:darkMode:isRTL:)@<D0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = a1;
  *(unsigned char *)(a4 + 1) = a2;
  *(unsigned char *)(a4 + 2) = a3;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(unsigned char *)(a4 + 56) = 1;
  *(void *)(a4 + 64) = 0;
  *(_DWORD *)(a4 + 71) = 0;
  return result;
}

uint64_t PaperRenderableOptions.init(useSixChannelBlending:darkMode:isRTL:isTopLevel:containerBounds:pdfPage:renderDebugDrawing:renderDebugUnknownElements:)@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, void *a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  outlined init with take of CGRect?(a5, (uint64_t)&v23);
  long long v17 = v23;
  long long v18 = v24;
  char v19 = v25;
  if (a6)
  {
    long long v21 = v24;
    long long v22 = v23;
    type metadata accessor for PaperKitPDFPage(0);
    uint64_t result = swift_dynamicCastClass();
    if (!result)
    {

      uint64_t result = 0;
    }
    long long v18 = v21;
    long long v17 = v22;
  }
  else
  {
    uint64_t result = 0;
  }
  *(unsigned char *)a9 = a1 & 1;
  *(unsigned char *)(a9 + 1) = a2 & 1;
  *(unsigned char *)(a9 + 2) = a3 & 1;
  *(void *)(a9 + 8) = 0;
  *(unsigned char *)(a9 + 16) = a4 & 1;
  *(_OWORD *)(a9 + 24) = v17;
  *(_OWORD *)(a9 + 40) = v18;
  *(unsigned char *)(a9 + 56) = v19;
  *(void *)(a9 + 64) = result;
  *(unsigned char *)(a9 + 72) = a7 & 1;
  *(unsigned char *)(a9 + 73) = a8 & 1;
  *(unsigned char *)(a9 + 74) = 0;
  return result;
}

void destroy for PaperRenderableOptions(uint64_t a1)
{
  id v2 = *(void **)(a1 + 64);
}

uint64_t initializeWithCopy for PaperRenderableOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  unint64_t v4 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for PaperRenderableOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  unint64_t v4 = *(void **)(a1 + 8);
  id v5 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  id v6 = v5;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  uint64_t v9 = *(void **)(a1 + 64);
  uint64_t v10 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v10;
  id v11 = v10;

  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  return a1;
}

__n128 __swift_memcpy75_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 59) = *(_OWORD *)(a2 + 59);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for PaperRenderableOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  long long v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  id v5 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperRenderableOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 75)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaperRenderableOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 74) = 0;
    *(_WORD *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 75) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 75) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaperRenderableOptions()
{
  return &type metadata for PaperRenderableOptions;
}

uint64_t dispatch thunk of PaperRenderable.frame.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PaperRenderable.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a8 + 16) + **(int **)(a8 + 16));
  long long v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *long long v17 = v8;
  v17[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of PaperRenderable.renderedImage(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 24) + **(int **)(a3 + 24));
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *long long v7 = v3;
  v7[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v9(a1, a2, a3);
}

uint64_t protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper()
{
  return protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

void *specialized UIView.firstDescendent(where:)(void *a1)
{
  return specialized UIView.firstDescendent(where:)(a1, (void (*)(void))type metadata accessor for TiledTextView, (uint64_t (*)(id))specialized UIView.firstDescendent(where:));
}

{
  return specialized UIView.firstDescendent(where:)(a1, (void (*)(void))type metadata accessor for PaperDocumentView, (uint64_t (*)(id))specialized UIView.firstDescendent(where:));
}

void *specialized UIView.firstDescendent(where:)(void *a1, void (*a2)(void), uint64_t (*a3)(id))
{
  a2(0);
  if (swift_dynamicCastClass())
  {
    id v6 = a1;
  }
  else
  {
    id v7 = objc_msgSend(a1, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62) {
      goto LABEL_17;
    }
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v9)
    {
      uint64_t v10 = 4;
      while (1)
      {
        id v11 = (v8 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x21054E050](v10 - 4, v8)
            : *(id *)(v8 + 8 * v10);
        uint64_t v12 = v11;
        uint64_t v13 = v10 - 3;
        if (__OFADD__(v10 - 4, 1)) {
          break;
        }
        a1 = (void *)a3(v11);

        if (v3 || a1)
        {
          swift_bridgeObjectRelease();
          return a1;
        }
        ++v10;
        if (v13 == v9) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  return a1;
}

void specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
    lazy protocol witness table accessor for type UITouch and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v16 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    uint64_t v8 = v3;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_36;
    }
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = v23;
    swift_unknownObjectRelease();
    if (!v23) {
      goto LABEL_36;
    }
LABEL_31:
    if (objc_msgSend(v11, sel_type) == (id)3)
    {

LABEL_36:
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      return;
    }
    id v15 = objc_msgSend(v11, sel_type);

    if (v15 == (id)2) {
      goto LABEL_36;
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v10 = v9 | (v3 << 6);
LABEL_30:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_36;
    }
    goto LABEL_31;
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v16) {
      goto LABEL_36;
    }
    unint64_t v13 = *(void *)(v17 + 8 * v12);
    ++v3;
    if (!v13)
    {
      uint64_t v3 = v8 + 2;
      if (v8 + 2 >= v16) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v17 + 8 * v3);
      if (!v13)
      {
        uint64_t v3 = v8 + 3;
        if (v8 + 3 >= v16) {
          goto LABEL_36;
        }
        unint64_t v13 = *(void *)(v17 + 8 * v3);
        if (!v13)
        {
          uint64_t v3 = v8 + 4;
          if (v8 + 4 >= v16) {
            goto LABEL_36;
          }
          unint64_t v13 = *(void *)(v17 + 8 * v3);
          if (!v13)
          {
            uint64_t v3 = v8 + 5;
            if (v8 + 5 >= v16) {
              goto LABEL_36;
            }
            unint64_t v13 = *(void *)(v17 + 8 * v3);
            if (!v13)
            {
              uint64_t v14 = v8 + 6;
              while (v16 != v14)
              {
                unint64_t v13 = *(void *)(v17 + 8 * v14++);
                if (v13)
                {
                  uint64_t v3 = v14 - 1;
                  goto LABEL_29;
                }
              }
              goto LABEL_36;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t Array<A>.pasteboardPaperKitURL.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v60 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v63 = (char *)&v57 - v6;
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v57 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v64 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v57 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v57 - v13;
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v62 = v16;
  if (v15)
  {
    long long v58 = (char *)&v57 - v13;
    uint64_t v59 = v9;
    swift_bridgeObjectRetain();
    uint64_t v17 = 0;
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    long long v65 = xmmword_20C8352B0;
    do
    {
      uint64_t v20 = *(void *)(a1 + 8 * v17 + 32);
      uint64_t v21 = *(void *)(v20 + 16);
      swift_bridgeObjectRetain();
      if (!v21
        || (uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C7070612E6D6F63, 0xEF72657061702E65),
            (v23 & 1) == 0)
        || (outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v22, (uint64_t)v66),
            (swift_dynamicCast() & 1) == 0))
      {
        long long v67 = v65;
      }
      swift_bridgeObjectRelease();
      uint64_t v24 = *((void *)&v67 + 1);
      if (*((void *)&v67 + 1) >> 60 != 15)
      {
        uint64_t v25 = v67;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
        }
        unint64_t v27 = v18[2];
        unint64_t v26 = v18[3];
        if (v27 >= v26 >> 1) {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v18);
        }
        v18[2] = v27 + 1;
        uint64_t v19 = &v18[2 * v27];
        v19[4] = v25;
        v19[5] = v24;
      }
      ++v17;
    }
    while (v15 != v17);
    swift_bridgeObjectRelease();
    uint64_t v10 = v62;
    uint64_t v14 = v58;
    unint64_t v9 = v59;
    if (v18[2])
    {
LABEL_15:
      uint64_t v29 = v18[4];
      unint64_t v28 = v18[5];
      outlined copy of Data._Representation(v29, v28);
      swift_bridgeObjectRelease();
      uint64_t v30 = (uint64_t)v63;
      uint64_t v31 = v64;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v63, 1, 1, v10);
      outlined copy of Data._Representation(v29, v28);
      URL.init(dataRepresentation:relativeTo:isAbsolute:)();
      outlined destroy of URL?(v30);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v9, 1, v10) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v14, v9, v10);
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (url: URL, uti: String));
        uint64_t v48 = v61;
        uint64_t v49 = (void *)(v61 + *(int *)(v47 + 48));
        (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v61, v14, v10);
        outlined consume of Data._Representation(v29, v28);
        outlined consume of Data._Representation(v29, v28);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v10);
        *uint64_t v49 = 0x6C7070612E6D6F63;
        v49[1] = 0xEF72657061702E65;
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v48, 0, 1, v47);
      }
      outlined consume of Data._Representation(v29, v28);
      outlined destroy of URL?((uint64_t)v9);
      if (!v15) {
        goto LABEL_17;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = 0;
  unint64_t v28 = 0xF000000000000000;
  uint64_t v31 = v64;
  if (!v15)
  {
LABEL_17:
    uint64_t v32 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_33;
  }
LABEL_20:
  long long v58 = (char *)v29;
  uint64_t v59 = (char *)v28;
  swift_bridgeObjectRetain();
  uint64_t v33 = 0;
  uint64_t v32 = (void *)MEMORY[0x263F8EE78];
  long long v65 = xmmword_20C8352B0;
  do
  {
    uint64_t v35 = *(void *)(a1 + 8 * v33 + 32);
    uint64_t v36 = *(void *)(v35 + 16);
    swift_bridgeObjectRetain();
    if (!v36
      || (uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x800000020C84EE40),
          (v38 & 1) == 0)
      || (outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v37, (uint64_t)v66), (swift_dynamicCast() & 1) == 0))
    {
      long long v67 = v65;
    }
    swift_bridgeObjectRelease();
    uint64_t v39 = *((void *)&v67 + 1);
    if (*((void *)&v67 + 1) >> 60 != 15)
    {
      uint64_t v40 = v67;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
      }
      unint64_t v42 = v32[2];
      unint64_t v41 = v32[3];
      if (v42 >= v41 >> 1) {
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v32);
      }
      v32[2] = v42 + 1;
      uint64_t v34 = &v32[2 * v42];
      v34[4] = v40;
      v34[5] = v39;
    }
    ++v33;
  }
  while (v15 != v33);
  swift_bridgeObjectRelease();
  uint64_t v10 = v62;
  uint64_t v31 = v64;
  uint64_t v29 = (uint64_t)v58;
  unint64_t v28 = (unint64_t)v59;
LABEL_33:
  uint64_t v43 = (uint64_t)v60;
  uint64_t v44 = (uint64_t)v63;
  if (!v32[2])
  {
    swift_bridgeObjectRelease();
    outlined consume of Data?(v29, v28);
    goto LABEL_38;
  }
  uint64_t v45 = v32[4];
  unint64_t v46 = v32[5];
  outlined copy of Data._Representation(v45, v46);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v44, 1, 1, v10);
  outlined copy of Data._Representation(v45, v46);
  URL.init(dataRepresentation:relativeTo:isAbsolute:)();
  outlined destroy of URL?(v44);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v43, 1, v10) == 1)
  {
    outlined consume of Data?(v29, v28);
    outlined consume of Data._Representation(v45, v46);
    outlined consume of Data._Representation(v45, v46);
    outlined destroy of URL?(v43);
LABEL_38:
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (url: URL, uti: String));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v61, 1, 1, v51);
  }
  int v52 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v57, v43, v10);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (url: URL, uti: String));
  uint64_t v54 = v31;
  uint64_t v55 = v61;
  uint64_t v56 = (void *)(v61 + *(int *)(v53 + 48));
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v61, v52, v10);
  outlined consume of Data._Representation(v45, v46);
  outlined consume of Data._Representation(v45, v46);
  outlined consume of Data?(v29, v28);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v10);
  *uint64_t v56 = 0xD000000000000017;
  v56[1] = 0x800000020C84EE40;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v55, 0, 1, v53);
}

void PrecisePanGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (!objc_msgSend(v2, sel_state))
  {
    if (v2[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] != 1
      || (uint64_t v6 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_canvasElement])) != 0
      && (uint64_t v7 = v6,
          char v8 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x228))(),
          v7,
          (v8 & 1) == 0)
      || (specialized Sequence.contains(where:)(a1), double v9 = 0.0, (v10 & 1) == 0))
    {
      objc_msgSend(self, sel__defaultHysteresis);
    }
    objc_msgSend(v3, sel__setHysteresis_, v9);
    id v11 = objc_msgSend(a2, sel_modifierFlags);
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = v11;
    *(CFTimeInterval *)&v3[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = CACurrentMediaTime();
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v13.id receiver = v3;
  v13.Class super_class = (Class)type metadata accessor for PrecisePanGestureRecognizer();
  objc_msgSendSuper2(&v13, sel_touchesBegan_withEvent_, isa, a2);
}

void PrecisePanGestureRecognizer.touchesMoved(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  double v5 = CACurrentMediaTime();
  uint64_t v6 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_canvasElement]);
  if (!v6
    || (uint64_t v7 = v6, v8 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x228))(), v7, (v8 & 1) != 0)
    || objc_msgSend(v3, sel_state)
    || v5 - *(double *)&v3[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] >= *(double *)&v3[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout])
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
    lazy protocol witness table accessor for type UITouch and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    v10.id receiver = v3;
    v10.Class super_class = (Class)type metadata accessor for PrecisePanGestureRecognizer();
    objc_msgSendSuper2(&v10, sel_touchesMoved_withEvent_, isa, a2);
  }
  else
  {
    objc_msgSend(v3, sel_setState_, 5);
  }
}

uint64_t @objc PrecisePanGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, id))
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, v9);

  return swift_bridgeObjectRelease();
}

id PrecisePanGestureRecognizer.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for PrecisePanGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PrecisePanGestureRecognizer()
{
  return self;
}

UIFont_optional __swiftcall UIFont.applyingWeight(_:)(UIFontWeight a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorTraitKey, UIFontWeight)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  uint64_t v4 = (void *)*MEMORY[0x263F81850];
  *(void *)(inited + 32) = *MEMORY[0x263F81850];
  *(UIFontWeight *)(inited + 40) = a1;
  id v5 = v4;
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorAttributeName, [UIFontDescriptorTraitKey : UIFontWeight])>);
  uint64_t v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_20C832C20;
  uint64_t v8 = (void *)*MEMORY[0x263F817A0];
  *(void *)(v7 + 32) = *MEMORY[0x263F817A0];
  *(void *)(v7 + 40) = v6;
  id v9 = v8;
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(v7);
  id v11 = objc_msgSend(v1, sel_fontDescriptor);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v10);
  swift_bridgeObjectRelease();
  type metadata accessor for UIFontDescriptorAttributeName(0);
  lazy protocol witness table accessor for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v11, sel_fontDescriptorByAddingAttributes_, isa);

  id v14 = objc_msgSend(v1, sel_fontDescriptor);
  objc_msgSend(v14, sel_pointSize);
  double v16 = v15;

  uint64_t v17 = (objc_class *)objc_msgSend(self, sel_fontWithDescriptor_size_, v13, v16);
  uint64_t v19 = v17;
  result.value.super.Class isa = v19;
  result.is_nil = v18;
  return result;
}

void specialized static NSLayoutConstraint.constrain(_:to:)(void *a1, void *a2)
{
  uint64_t v4 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20C8344C0;
  id v6 = objc_msgSend(a1, sel_leadingAnchor);
  id v7 = objc_msgSend(a2, sel_leadingAnchor);
  id v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(void *)(v5 + 32) = v8;
  id v9 = objc_msgSend(a1, sel_trailingAnchor);
  id v10 = objc_msgSend(a2, sel_trailingAnchor);
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(void *)(v5 + 40) = v11;
  id v12 = objc_msgSend(a1, sel_topAnchor);
  id v13 = objc_msgSend(a2, sel_topAnchor);
  id v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(void *)(v5 + 48) = v14;
  id v15 = objc_msgSend(a1, sel_bottomAnchor);
  id v16 = objc_msgSend(a2, sel_bottomAnchor);
  id v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(void *)(v5 + 56) = v17;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_activateConstraints_, isa);
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Paper.drawing.getter()
{
  return Paper.drawing.getter(MEMORY[0x263F32C30]);
}

uint64_t type metadata accessor for Paper()
{
  uint64_t result = type metadata singleton initialization cache for Paper;
  if (!type metadata singleton initialization cache for Paper) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Paper.drawing.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of Ref<PKDrawingStruct>?(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of Ref<PKDrawingStruct>?(a1);
}

uint64_t outlined init with copy of Ref<PKDrawingStruct>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double Paper.bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Paper.bounds.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)&v11 - v6;
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v11 = 0u;
  long long v12 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v8 = type metadata accessor for Paper();
  long long v11 = 0u;
  long long v12 = 0u;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v11 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  outlined init with copy of Ref<PKDrawingStruct>?((uint64_t)v7, (uint64_t)v4);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of Ref<PKDrawingStruct>?((uint64_t)v7);
  *(void *)&long long v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v11 = 0;
  *((void *)&v11 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v11 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t result = CROrderedSet.init()();
  *(void *)(a1 + *(int *)(v8 + 48)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t Paper.frame.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.$bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t Paper.$bounds.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

double Paper.frame.getter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Paper.$frame.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t Paper.$frame.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.bounds.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Paper.$bounds : Paper(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

void (*Paper.$bounds.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t (*Paper.frame.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Paper.$frame : Paper(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t (*Paper.$frame.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double Paper.rotation.getter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for Paper.rotation : Paper@<D0>(double *a1@<X8>)
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Paper.rotation : Paper()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.rotation.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Paper.rotation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Paper.$rotation.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Paper.$rotation : Paper(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Paper.$rotation.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.$rotation.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Paper.drawing.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Paper.$drawing.getter()
{
  return Paper.drawing.getter(MEMORY[0x263F32C38]);
}

uint64_t Paper.drawing.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for Paper();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return a1(v2);
}

uint64_t key path setter for Paper.$drawing : Paper(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Paper.$drawing.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.$drawing.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Paper.backgroundColor.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for Paper.backgroundColor : Paper@<X0>(void *a1@<X8>)
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Paper.backgroundColor : Paper(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for Paper();
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.backgroundColor.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Paper.backgroundColor.modify(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Paper.$backgroundColor.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Paper.$backgroundColor : Paper(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Paper.$backgroundColor.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.$backgroundColor.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Paper.name.getter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for Paper.name : Paper@<X0>(void *a1@<X8>)
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for Paper.name : Paper()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.name.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Paper.name.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Paper.$name.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Paper.$name : Paper(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Paper.$name.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.$name.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Paper.flags.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for Paper.flags : Paper@<X0>(void *a1@<X8>)
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Paper.flags : Paper()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.flags.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Paper.flags.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Paper.$flags.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Paper.$flags : Paper(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Paper.$flags.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.$flags.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Paper.subelements.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Paper() + 44);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Paper.subelements.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Paper() + 44);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

double (*Paper.subelements.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t Paper.additionalFields.getter()
{
  type metadata accessor for Paper();
  return swift_bridgeObjectRetain();
}

uint64_t Paper.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Paper() + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*Paper.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

double static Paper.fields.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  long long v24 = xmmword_26ACAFAD8;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&qword_26ACAFAE8;
  *(_OWORD *)&v25[16] = xmmword_26ACAFAF8;
  long long v26 = *(_OWORD *)&qword_26ACAFB08;
  *(_OWORD *)&v21[16] = xmmword_26ACAFA98;
  long long v22 = *(_OWORD *)&qword_26ACAFAA8;
  *(_OWORD *)char v23 = *(_OWORD *)&qword_26ACAFAB8;
  *(_OWORD *)&unsigned char v23[16] = *(_OWORD *)&qword_26ACAFAC8;
  *(_OWORD *)uint64_t v19 = static Paper.fields;
  *(_OWORD *)&unsigned char v19[16] = *(_OWORD *)&qword_26ACAFA68;
  long long v20 = xmmword_26ACAFA78;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)&qword_26ACAFA88;
  uint64_t v2 = static Paper.fields;
  uint64_t v3 = unk_26ACAFA70;
  uint64_t v4 = qword_26ACAFA88;
  uint64_t v5 = *((void *)&xmmword_26ACAFA98 + 1);
  uint64_t v6 = qword_26ACAFAB8;
  uint64_t v7 = unk_26ACAFAD0;
  uint64_t v8 = qword_26ACAFAE8;
  uint64_t v9 = *((void *)&xmmword_26ACAFAF8 + 1);
  long long v11 = *(_OWORD *)&v19[8];
  long long v12 = xmmword_26ACAFA78;
  long long v13 = *(_OWORD *)&v21[8];
  long long v14 = *(_OWORD *)&qword_26ACAFAA8;
  long long v15 = *(_OWORD *)&v23[8];
  long long v16 = xmmword_26ACAFAD8;
  long long v17 = *(_OWORD *)&v25[8];
  long long v18 = *(_OWORD *)&qword_26ACAFB08;
  outlined retain of ((String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Color?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Int>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Date?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<PDFAnnotationElement.AnnotationShape>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<WeakRef<PDFAnnotationElement>?>>))((uint64_t)v19);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v11;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v14;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v15;
  *(void *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v16;
  *(void *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v17;
  *(void *)(a1 + 168) = v9;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 176) = v18;
  return result;
}

uint64_t static Paper.paperFileFormatVersion.getter()
{
  return 1;
}

uint64_t Paper.init(frame:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v10);
  long long v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  long long v15 = (char *)&v19 - v14;
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v19 = 0u;
  long long v20 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v16 = type metadata accessor for Paper();
  long long v19 = 0u;
  long long v20 = 0u;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v19 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 1, 1, v17);
  outlined init with copy of Ref<PKDrawingStruct>?((uint64_t)v15, (uint64_t)v12);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of Ref<PKDrawingStruct>?((uint64_t)v15);
  *(void *)&long long v19 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v19 = 0;
  *((void *)&v19 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v19 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  CROrderedSet.init()();
  *(void *)(a1 + *(int *)(v16 + 48)) = MEMORY[0x263F8EE80];
  *(double *)&long long v19 = a2;
  *((double *)&v19 + 1) = a3;
  *(double *)&long long v20 = a4;
  *((double *)&v20 + 1) = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  long long v19 = 0uLL;
  *(double *)&long long v20 = a4;
  *((double *)&v20 + 1) = a5;
  return CRRegister.wrappedValue.setter();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Paper()
{
  return CRStruct_8.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Paper()
{
  return CRStruct_8.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Paper(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17318](a1, v2);
}

double protocol witness for static CRStruct_Base_8.fields.getter in conformance Paper@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  long long v24 = xmmword_26ACAFAD8;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&qword_26ACAFAE8;
  *(_OWORD *)&v25[16] = xmmword_26ACAFAF8;
  long long v26 = *(_OWORD *)&qword_26ACAFB08;
  *(_OWORD *)&v21[16] = xmmword_26ACAFA98;
  long long v22 = *(_OWORD *)&qword_26ACAFAA8;
  *(_OWORD *)char v23 = *(_OWORD *)&qword_26ACAFAB8;
  *(_OWORD *)&unsigned char v23[16] = *(_OWORD *)&qword_26ACAFAC8;
  *(_OWORD *)long long v19 = static Paper.fields;
  *(_OWORD *)&unsigned char v19[16] = *(_OWORD *)&qword_26ACAFA68;
  long long v20 = xmmword_26ACAFA78;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)&qword_26ACAFA88;
  uint64_t v2 = static Paper.fields;
  uint64_t v3 = unk_26ACAFA70;
  uint64_t v4 = qword_26ACAFA88;
  uint64_t v5 = *((void *)&xmmword_26ACAFA98 + 1);
  uint64_t v6 = qword_26ACAFAB8;
  uint64_t v7 = unk_26ACAFAD0;
  uint64_t v8 = qword_26ACAFAE8;
  uint64_t v9 = *((void *)&xmmword_26ACAFAF8 + 1);
  long long v11 = *(_OWORD *)&v19[8];
  long long v12 = xmmword_26ACAFA78;
  long long v13 = *(_OWORD *)&v21[8];
  long long v14 = *(_OWORD *)&qword_26ACAFAA8;
  long long v15 = *(_OWORD *)&v23[8];
  long long v16 = xmmword_26ACAFAD8;
  long long v17 = *(_OWORD *)&v25[8];
  long long v18 = *(_OWORD *)&qword_26ACAFB08;
  outlined retain of ((String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Color?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Int>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Date?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<PDFAnnotationElement.AnnotationShape>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<WeakRef<PDFAnnotationElement>?>>))((uint64_t)v19);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v11;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v14;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v15;
  *(void *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v16;
  *(void *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v17;
  *(void *)(a1 + 168) = v9;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 176) = v18;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance Paper(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17388](a1, v2);
}

uint64_t protocol witness for CRDT.context.getter in conformance Paper(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17328](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17350](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17380](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17358](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17378](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17360](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17340](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17338](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17320](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17308](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance Paper()
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return CRStruct_8.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17310](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  return MEMORY[0x270F17368](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance Paper()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance Paper()
{
  return CRDT.init(serializedData:)();
}

uint64_t Paper.shared(_:)(uint64_t a1)
{
  return Paper.shared(_:)(a1, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, MEMORY[0x263F32E58]);
}

{
  return Paper.shared(_:)(a1, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, MEMORY[0x263F32E28]);
}

uint64_t Paper.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  return Paper.thumbnail.getter(MEMORY[0x263F33060], a1);
}

uint64_t Paper.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v11 = *(unsigned char *)(a4 + 1);
  char v12 = *(unsigned char *)(a4 + 2);
  uint64_t v13 = *(void *)(a4 + 8);
  char v14 = *(unsigned char *)(a4 + 16);
  char v15 = *(unsigned char *)(a4 + 56);
  uint64_t v16 = *(void *)(a4 + 64);
  char v17 = *(unsigned char *)(a4 + 72);
  char v18 = *(unsigned char *)(a4 + 73);
  char v19 = *(unsigned char *)(a4 + 74);
  *(unsigned char *)(v6 + 16) = *(unsigned char *)a4;
  *(unsigned char *)(v6 + 17) = v11;
  *(unsigned char *)(v6 + 18) = v12;
  *(void *)(v6 + 24) = v13;
  *(unsigned char *)(v6 + 32) = v14;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a4 + 40);
  *(unsigned char *)(v6 + 72) = v15;
  *(void *)(v6 + 80) = v16;
  *(unsigned char *)(v6 + 88) = v17;
  *(unsigned char *)(v6 + 89) = v18;
  *(unsigned char *)(v6 + 90) = v19;
  long long v20 = (void *)swift_task_alloc();
  *(void *)(v6 + 96) = v20;
  uint64_t v21 = type metadata accessor for Paper();
  *long long v20 = v6;
  v20[1] = Paper.render<A>(in:id:capsule:options:);
  return ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(a1, a3, (_OWORD *)(v6 + 16), v21, a5, (uint64_t)&protocol witness table for Paper, a6);
}

uint64_t Paper.render<A>(in:id:capsule:options:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

double Paper.pdfContentsBounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for ContainerCanvasElement.drawing.getter in conformance Paper()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for ContainerCanvasElement.drawing.setter in conformance Paper(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of Ref<PKDrawingStruct>?(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of Ref<PKDrawingStruct>?(a1);
}

uint64_t (*protocol witness for ContainerCanvasElement.drawing.modify in conformance Paper(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for CanvasElement.thumbnail.getter in conformance Paper@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for CanvasElement.thumbnail.getter in conformance Paper(MEMORY[0x263F33060], a1);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance Paper(a1, a2, a3, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, MEMORY[0x263F32E58]);
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *char v12 = v6;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return Paper.render<A>(in:id:capsule:options:)(a1, v13, a3, a4, a5, a6);
}

uint64_t Paper.pdfPageID.getter@<X0>(uint64_t a1@<X8>)
{
  return Paper.thumbnail.getter((uint64_t (*)(void))type metadata accessor for PDFPageID, a1);
}

uint64_t Paper.thumbnail.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

uint64_t Paper.shared(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for CRKeyPath();
  double v9 = MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = 0;
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, double))(v12 + 16))(v11, a1, v9);
  uint64_t v14 = a2(v13);
  return a4(&v17, v11, a3, v14);
}

void Paper.update<A>(pdfPage:id:use:in:options:)(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4, long long *a5, uint64_t a6, unint64_t a7)
{
  unint64_t v14 = *a3;
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v15 = swift_dynamicCastClass();
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    uint64_t v23 = a2;
    __int16 v28 = *((_WORD *)a5 + 36);
    char v17 = *((unsigned char *)a5 + 74);
    uint64_t v18 = a4;
    uint64_t v19 = a6;
    uint64_t v20 = *((void *)a5 + 8);
    long long v26 = a5[2];
    long long v27 = a5[3];
    long long v24 = *a5;
    long long v25 = a5[1];
    id v29 = a1;
    specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v16, 1);
    unint64_t v34 = v14;
    v30[0] = v24;
    v30[1] = v25;
    void v30[2] = v26;
    v30[3] = v27;
    uint64_t v31 = v20;
    char v33 = v17;
    __int16 v32 = v28;
    uint64_t v21 = type metadata accessor for Paper();
    uint64_t v22 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)((char *)v16, &v34, v18, (uint64_t)v30, v21, v19, v22, (uint64_t)&protocol witness table for Paper, (uint64_t)&protocol witness table for Paper, a7);
    if (v14 >> 62)
    {
    }
    else
    {
      PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)((uint64_t)(id)v14, v7, v23, v18, v21, v19, v22, (uint64_t)&protocol witness table for Paper, (uint64_t)&protocol witness table for Paper, a7);

      outlined consume of PaperDocument.PDFDocumentUse(v14);
    }
  }
}

uint64_t protocol witness for PaperPage.pdfPageID.getter in conformance Paper@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for CanvasElement.thumbnail.getter in conformance Paper((uint64_t (*)(void))type metadata accessor for PDFPageID, a1);
}

uint64_t protocol witness for CanvasElement.thumbnail.getter in conformance Paper@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

uint64_t protocol witness for PaperPage.shared(_:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance Paper(a1, a2, a3, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, MEMORY[0x263F32E28]);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v10 = type metadata accessor for CRKeyPath();
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = 0;
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, double))(v14 + 16))(v13, a1, v11);
  uint64_t v16 = a4(v15);
  return a6(&v19, v13, a5, v16);
}

uint64_t specialized Paper.finishDecode(from:pageID:assetManager:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v32 - v7;
  double v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v32 - v11;
  objc_msgSend(a1, sel_boundsForBox_, 1, v10);
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  id v33 = a1;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  double v22 = v21;
  double v24 = v23;
  v35.origin.CGFloat x = v14;
  v35.origin.CGFloat y = v16;
  v35.size.CGFloat width = v18;
  v35.size.CGFloat height = v20;
  CGFloat MinX = CGRectGetMinX(v35);
  v36.origin.CGFloat x = v14;
  v36.origin.CGFloat y = v16;
  v36.size.CGFloat width = v18;
  v36.size.CGFloat height = v20;
  double v26 = v24 + v22 + v22 - CGRectGetMaxY(v36);
  v37.origin.CGFloat x = v14;
  v37.origin.CGFloat y = v16;
  v37.size.CGFloat width = v18;
  v37.size.CGFloat height = v20;
  CGFloat Width = CGRectGetWidth(v37);
  v38.origin.CGFloat x = v14;
  v38.origin.CGFloat y = v16;
  v38.size.CGFloat width = v18;
  v38.size.CGFloat height = v20;
  CGFloat Height = CGRectGetHeight(v38);
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v39.origin.CGFloat x = MinX;
  v39.origin.CGFloat y = v26;
  v39.size.CGFloat width = Width;
  v39.size.CGFloat height = Height;
  if (!CGRectEqualToRect(v34, v39))
  {
    v34.origin.CGFloat x = MinX;
    v34.origin.CGFloat y = v26;
    v34.size.CGFloat width = Width;
    v34.size.CGFloat height = Height;
    CRRegister.value.setter();
  }
  id v29 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v29(v8, v12, v2);
  CRRegister.projectedValue.setter();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v3 + 8);
  v30(v12, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v40.origin.CGFloat x = MinX;
  v40.origin.CGFloat y = v26;
  v40.size.CGFloat width = Width;
  v40.size.CGFloat height = Height;
  if (!CGRectEqualToRect(v34, v40))
  {
    v34.origin.CGFloat x = MinX;
    v34.origin.CGFloat y = v26;
    v34.size.CGFloat width = Width;
    v34.size.CGFloat height = Height;
    CRRegister.value.setter();
  }
  v29(v8, v5, v2);
  CRRegister.projectedValue.setter();
  v30(v5, v2);
  specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)objc_msgSend(v33, sel_rotation));
  return 1;
}

uint64_t base witness table accessor for CRStruct_Base_8 in Paper()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
}

uint64_t base witness table accessor for CRStruct_Base in Paper()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_7 : CRDT in Paper()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<CanvasElementFlags> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
}

uint64_t base witness table accessor for CRDT in Paper()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
}

uint64_t base witness table accessor for CRMergeable in Paper()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
}

uint64_t base witness table accessor for CRType in Paper()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in Paper()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_8<Paper> and conformance CRStructMergeableDelta_8<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_8<Paper>);
}

uint64_t base witness table accessor for CRCodable in Paper()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_6(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
}

uint64_t sub_20C5FDB54()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C5FDB98()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C5FDBF4()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C5FDC50()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C5FDCAC()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C5FDD08()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C5FDD64()
{
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for Paper(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v33 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    double v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    CGFloat v14 = (char *)a1 + v13;
    double v15 = (char *)a2 + v13;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[8];
    CGFloat v18 = (char *)a1 + v17;
    double v19 = (char *)a2 + v17;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = a3[9];
    double v22 = (char *)a1 + v21;
    double v23 = (char *)a2 + v21;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    uint64_t v25 = a3[10];
    double v26 = (char *)a1 + v25;
    long long v27 = (char *)a2 + v25;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
    uint64_t v29 = a3[11];
    uint64_t v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Paper(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = a1 + a2[9];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = a1 + a2[10];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = a1 + a2[11];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Paper(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Paper(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 24))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Paper(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for Paper(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 40))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Paper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C5FECA8);
}

uint64_t sub_20C5FECA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_16:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_15:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_16;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_15;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_15;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_15;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v12 = *(void *)(v17 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_15;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a2)
  {
    uint64_t v8 = v18;
    uint64_t v12 = *(void *)(v18 - 8);
    uint64_t v13 = a3[11];
    goto LABEL_15;
  }
  unint64_t v20 = *(void *)(a1 + a3[12]);
  if (v20 >= 0xFFFFFFFF) {
    LODWORD(v20) = -1;
  }
  return (v20 + 1);
}

uint64_t storeEnumTagSinglePayload for Paper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C5FEF68);
}

uint64_t sub_20C5FEF68(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[6];
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[7];
      }
      else
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[8];
        }
        else
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
          if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a3)
          {
            uint64_t v10 = v18;
            uint64_t v14 = *(void *)(v18 - 8);
            uint64_t v15 = a4[9];
          }
          else
          {
            uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
            if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a3)
            {
              uint64_t v10 = v19;
              uint64_t v14 = *(void *)(v19 - 8);
              uint64_t v15 = a4[10];
            }
            else
            {
              uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
              if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
              {
                *(void *)(a1 + a4[12]) = (a2 - 1);
                return result;
              }
              uint64_t v10 = result;
              uint64_t v14 = *(void *)(result - 8);
              uint64_t v15 = a4[11];
            }
          }
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for Paper()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<Ref<PKDrawingStruct>?>(319, &lazy cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?, (void (*)(void))lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<Ref<PKDrawingStruct>?>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Color?>, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color? and conformance <A> A?);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<String>();
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRRegister<CGFloat>(319, &lazy cache variable for type metadata for CRRegister<CanvasElementFlags>, (void (*)(void))lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>();
              if (v6 <= 0x3F) {
                swift_initStructMetadata();
              }
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<Ref<PKDrawingStruct>?>(uint64_t a1, unint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    a4();
    unint64_t v6 = type metadata accessor for CRRegister();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void PKInk.tool.getter(uint64_t *a1@<X8>)
{
  unint64_t v2 = self;
  Class isa = PKInk._bridgeToObjectiveC()().super.isa;
  id v17 = objc_msgSend(v2, sel__toolWithInk_, isa);

  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v4 = type metadata accessor for PKGenerationTool();
    uint64_t v5 = MEMORY[0x263F14A78];
    a1[3] = v4;
    a1[4] = v5;
    __swift_allocate_boxed_opaque_existential_1(a1);
    PKGenerationTool.init()();
  }
  else
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      uint64_t v6 = type metadata accessor for PKInkingTool();
      uint64_t v7 = MEMORY[0x263F14A50];
      a1[3] = v6;
      a1[4] = v7;
      __swift_allocate_boxed_opaque_existential_1(a1);
      id v8 = v17;
      static PKInkingTool._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      self;
      if (swift_dynamicCastObjCClass())
      {
        uint64_t v9 = type metadata accessor for PKEraserTool();
        uint64_t v10 = MEMORY[0x263F14A38];
        a1[3] = v9;
        a1[4] = v10;
        __swift_allocate_boxed_opaque_existential_1(a1);
        id v11 = v17;
        static PKEraserTool._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          uint64_t v12 = type metadata accessor for PKLassoTool();
          uint64_t v13 = MEMORY[0x263F14A28];
          a1[3] = v12;
          a1[4] = v13;
          __swift_allocate_boxed_opaque_existential_1(a1);
          id v14 = v17;
          static PKLassoTool._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {
          self;
          if (!swift_dynamicCastObjCClass())
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
          uint64_t v15 = type metadata accessor for PKHandwritingTool();
          uint64_t v16 = MEMORY[0x263F14A80];
          a1[3] = v15;
          a1[4] = v16;
          __swift_allocate_boxed_opaque_existential_1(a1);
          PKHandwritingTool.init()();
        }
      }
    }
  }
}

void PKToolPickerItem.ink.getter(uint64_t a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v44 = a1;
  uint64_t v3 = type metadata accessor for PKLassoTool();
  uint64_t v39 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PKEraserTool();
  uint64_t v41 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PKInkingTool();
  uint64_t v40 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PKInk();
  uint64_t v42 = *(void *)(v12 - 8);
  id v43 = (id)v12;
  MEMORY[0x270FA5388](v12);
  id v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  id v17 = (char *)&v37 - v16;
  self;
  uint64_t v18 = v2;
  if (swift_dynamicCastObjCClass())
  {
    id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B20]), sel_init);
    id v20 = [v19 ink];

    if (v20)
    {
      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, char *, id))(v42 + 32))(v44, v17, v43);
      return;
    }
    __break(1u);
    goto LABEL_20;
  }
  CGRect v37 = v14;
  uint64_t v38 = v6;
  uint64_t v22 = v40;
  uint64_t v21 = v41;
  self;
  if (swift_dynamicCastObjCClass())
  {
    id v23 = v18;
    PKToolPickerInkingItem.inkingTool.getter();
    PKInkingTool.ink.getter();

    (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v9);
    return;
  }
  self;
  if (swift_dynamicCastObjCClass())
  {
    id v24 = v18;
    PKToolPickerEraserItem.eraserTool.getter();
    specialized PKTool.ink.getter(MEMORY[0x263F14A40], &lazy cache variable for type metadata for PKEraserTool);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v38);
    return;
  }
  self;
  if (swift_dynamicCastObjCClass())
  {
    id v25 = v18;
    PKToolPickerLassoItem.lassoTool.getter();
    specialized PKTool.ink.getter(MEMORY[0x263F14A30], &lazy cache variable for type metadata for PKLassoTool);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v3);
    return;
  }
  self;
  uint64_t v26 = swift_dynamicCastObjCClass();
  if (!v26)
  {
    self;
    if (!swift_dynamicCastObjCClass())
    {
LABEL_21:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B28]), sel_init);
    id v35 = [v34 ink];

    CGRect v36 = v37;
    if (v35)
    {
      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, char *, id))(v42 + 32))(v44, v36, v43);
      return;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v27 = (void *)v26;
  id v43 = v18;
  id v28 = objc_msgSend(v27, sel_identifier);
  if (!v28)
  {
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v28 = (id)MEMORY[0x21054D080](v29);
    swift_bridgeObjectRelease();
  }
  id v30 = objc_msgSend(v27, sel_color);
  objc_msgSend(v27, sel_width);
  id v32 = objc_msgSend(self, sel_inkWithIdentifier_color_weight_, v28, v30, v31);

  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v43;
}

void specialized PKTool.ink.getter(uint64_t (*a1)(void), unint64_t *a2)
{
  uint64_t v4 = a1(0);
  double v5 = MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v11 - v6, v2, v4, v5);
  type metadata accessor for NSObject(0, a2);
  swift_dynamicCast();
  id v8 = v12;
  id v9 = [v12 ink];
  if (v9)
  {
    uint64_t v10 = v9;
    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {

    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void PKTool.ink.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v78 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKCustomTool?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v66 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PKCustomTool();
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v69 = v6;
  MEMORY[0x270FA5388](v6);
  long long v67 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for PKHandwritingTool();
  uint64_t v64 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v74 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PKInk();
  uint64_t v76 = *(void *)(v9 - 8);
  uint64_t v77 = v9;
  MEMORY[0x270FA5388](v9);
  long long v65 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v62 = (char *)&v61 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v70 = (char *)&v61 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v75 = (char *)&v61 - v16;
  uint64_t v17 = type metadata accessor for PKGenerationTool();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  id v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v63 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v71 = (char *)&v61 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v73 = (char *)&v61 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v61 - v28;
  MEMORY[0x270FA5388](v30);
  id v32 = (char *)&v61 - v31;
  double v34 = MEMORY[0x270FA5388](v33);
  CGRect v36 = *(void (**)(char *, double))(v35 + 16);
  uint64_t v38 = v2;
  v36((char *)&v61 - v37, v34);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    id v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B20]), sel_init);
    id v40 = [v39 ink];

    if (v40)
    {
      uint64_t v42 = v75;
LABEL_4:
      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_5:

      (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v78, v42, v77);
      return;
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  ((void (*)(char *, uint64_t, uint64_t))v36)(v32, v2, a1);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkingTool);
  if (swift_dynamicCast())
  {
    id v43 = v79;
    id v44 = [v79 ink];
    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

    return;
  }
  ((void (*)(char *, uint64_t, uint64_t))v36)(v29, v2, a1);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKEraserTool);
  if (swift_dynamicCast())
  {
    id v40 = v79;
    id v45 = [v79 ink];
    if (v45)
    {
      unint64_t v46 = v45;
      uint64_t v42 = v70;
      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t, uint64_t))v36)(v73, v2, a1);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKLassoTool);
  char v47 = swift_dynamicCast();
  uint64_t v48 = v74;
  if (v47)
  {
    id v40 = v79;
    id v49 = [v79 ink];
    if (v49)
    {
      uint64_t v50 = v49;
      uint64_t v42 = v62;
      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

      goto LABEL_5;
    }
  }
  uint64_t v51 = v72;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v71, v2, a1);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v48, v51);
    id v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B28]), sel_init);
    id v40 = [v52 ink];

    if (v40)
    {
      uint64_t v42 = v65;
      goto LABEL_4;
    }
    goto LABEL_22;
  }
  ((void (*)(char *, uint64_t, uint64_t))v36)(v63, v2, a1);
  id v40 = v66;
  uint64_t v38 = v69;
  int v53 = swift_dynamicCast();
  uint64_t v54 = v68;
  uint64_t v41 = *(void (**)(id, uint64_t, uint64_t, uint64_t))(v68 + 56);
  if (v53)
  {
    v41(v40, 0, 1, v38);
    uint64_t v55 = v67;
    (*(void (**)(char *, id, uint64_t))(v54 + 32))(v67, v40, v38);
    uint64_t v56 = PKCustomTool.customIdentifier.getter();
    uint64_t v57 = (void *)MEMORY[0x21054D080](v56);
    swift_bridgeObjectRelease();
    long long v58 = (void *)PKCustomTool.color.getter();
    PKCustomTool.weight.getter();
    id v60 = objc_msgSend(self, sel_inkWithIdentifier_color_weight_, v57, v58, v59);

    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v38);
    return;
  }
LABEL_23:
  v41(v40, 1, 1, v38);
  outlined destroy of PKCustomTool?((uint64_t)v40);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined destroy of PKCustomTool?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKCustomTool?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Link.synapseDataRepresentation.getter()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for Link()
{
  uint64_t result = type metadata singleton initialization cache for Link;
  if (!type metadata singleton initialization cache for Link) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double key path getter for Link.synapseDataRepresentation : Link@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Link.synapseDataRepresentation : Link(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  type metadata accessor for Link();
  outlined copy of Data?(v2, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Link.synapseDataRepresentation.setter()
{
  return CRRegister.wrappedValue.setter();
}

double Link.rotation.getter()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for Link.rotation : Link@<D0>(double *a1@<X8>)
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Link.rotation : Link()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Link.rotation.setter()
{
  return CRRegister.wrappedValue.setter();
}

double Link.frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Link.frame.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Link.frame.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Link.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Link.$frame : Link(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Link.$frame.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Link.$frame.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t (*Link.rotation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Link.$rotation.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Link.$rotation : Link(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Link();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Link.$rotation.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Link();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Link.$rotation.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Link() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Link.synapseDataRepresentation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Link.$synapseDataRepresentation.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Link.$synapseDataRepresentation : Link(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Link();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Link.$synapseDataRepresentation.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Link();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Link.$synapseDataRepresentation.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Link() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Link.additionalFields.getter()
{
  type metadata accessor for Link();
  return swift_bridgeObjectRetain();
}

uint64_t Link.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Link() + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*Link.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static Link.fields.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_2676CD7D0;
  uint64_t v4 = qword_2676CD7D8;
  uint64_t v3 = unk_2676CD7E0;
  uint64_t v5 = qword_2676CD7E8;
  uint64_t v6 = qword_2676CD7F0;
  uint64_t v7 = qword_2676CD7F8;
  uint64_t v8 = qword_2676CD800;
  uint64_t v9 = qword_2676CD808;
  *a1 = static Link.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t Link.init()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  CRRegister.init(wrappedValue:)();
  uint64_t v2 = type metadata accessor for Link();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Data? and conformance <A> A?();
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a1 + *(int *)(v2 + 28)) = MEMORY[0x263F8EE80];
  return result;
}

unint64_t lazy protocol witness table accessor for type Data? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Data? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Data? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?);
  }
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Link()
{
  return CRStruct_3.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Link()
{
  return CRStruct_3.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Link(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F17068](a1, v2);
}

uint64_t protocol witness for static CRStruct_Base_3.fields.getter in conformance Link@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_2676CD7D0;
  uint64_t v4 = qword_2676CD7D8;
  uint64_t v3 = unk_2676CD7E0;
  uint64_t v5 = qword_2676CD7E8;
  uint64_t v6 = qword_2676CD7F0;
  uint64_t v7 = qword_2676CD7F8;
  uint64_t v8 = qword_2676CD800;
  uint64_t v9 = qword_2676CD808;
  *a1 = static Link.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance Link(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F170D8](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.init() in conformance Link@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  CRRegister.init(wrappedValue:)();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Data? and conformance <A> A?();
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a2 + *(int *)(a1 + 28)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance Link(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F17078](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F170A0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F170D0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F170A8](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F170C8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F170B0](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F17090](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F17088](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F17070](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F17058](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance Link()
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return CRStruct_3.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F17060](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  return MEMORY[0x270F170B8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance Link()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance Link()
{
  return CRDT.init(serializedData:)();
}

uint64_t Link.init(url:frame:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v12 = specialized static Link.synapseDataRepresentation(from:)();
  if (v13 >> 60 == 15)
  {
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
    uint64_t v15 = type metadata accessor for Link();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a2;
    uint64_t v19 = 1;
  }
  else
  {
    Link.init(synapseDataRepresentation:frame:)(v12, v13, a2, a3, a4, a5, a6);
    uint64_t v20 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
    uint64_t v21 = type metadata accessor for Link();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
    uint64_t v17 = v21;
    uint64_t v18 = a2;
    uint64_t v19 = 0;
  }
  return v16(v18, v19, 1, v17);
}

uint64_t Link.init(synapseDataRepresentation:frame:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  *(void *)&long long v23 = a1;
  *((void *)&v23 + 1) = a2;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  uint64_t v22 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v14 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v25 = 0u;
  long long v26 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v17 = type metadata accessor for Link();
  *(void *)&long long v25 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v18 = a3 + *(int *)(v17 + 24);
  long long v25 = xmmword_20C8352B0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Data? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(void *)(a3 + *(int *)(v17 + 28)) = MEMORY[0x263F8EE80];
  *(double *)&long long v25 = a4;
  *((double *)&v25 + 1) = a5;
  *(double *)&long long v26 = a6;
  *((double *)&v26 + 1) = a7;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 40))(a3, v16, v21);
  long long v25 = v23;
  CRRegister.init(_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 40))(v18, v13, v24);
}

uint64_t Link.shared(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  double v3 = MEMORY[0x270FA5388](v2);
  v7[15] = 4;
  (*(void (**)(unsigned char *, uint64_t, double))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t Link.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRAsset();
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t Link.indexableTextContent<A>(in:)()
{
  return specialized Link.indexableTextContent<A>(in:)();
}

uint64_t Link.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Link.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Link.render<A>(in:id:capsule:options:));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v14(a1, a2, a4, a5, a6);
}

void Link.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v114 = a8;
  uint64_t v113 = a5;
  uint64_t v112 = a4;
  id v115 = (id)a2;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v116 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118);
  uint64_t v111 = (uint64_t)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v96 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v97 = (char *)&v94 - v20;
  uint64_t v99 = type metadata accessor for URL();
  uint64_t v98 = *(void *)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  unint64_t v95 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  long long v25 = (char *)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v100 = *a1;
  double v110 = *(double *)a6;
  double v109 = *(double *)(a6 + 8);
  double v108 = *(double *)(a6 + 16);
  double v107 = *(double *)(a6 + 24);
  double v106 = *(double *)(a6 + 32);
  double v105 = *(double *)(a6 + 40);
  uint64_t v104 = *(void *)(a6 + 48);
  uint64_t v103 = *(void *)(a6 + 56);
  uint64_t v102 = *(void *)(a6 + 64);
  int v26 = *(unsigned __int8 *)(a6 + 74);
  int v27 = *(unsigned __int16 *)(a6 + 72);
  type metadata accessor for CanvasElementPDFAnnotation();
  uint64_t v28 = swift_dynamicCastClass();
  if (v28)
  {
    uint64_t v29 = (void *)v28;
    uint64_t v101 = a7;
    *(unsigned char *)(v28 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 2;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;
    id v33 = a3;
    double v34 = (void *)MEMORY[0x21054D080](v30, v32);
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_setType_, v34);

    objc_msgSend(v29, sel_setWidgetFieldType_, *MEMORY[0x263F14840]);
    objc_msgSend(v29, sel_setWidgetControlType_, 0);
    specialized CanvasElement.coordinateSpace.getter(&v125);
    CGAffineTransform v119 = v125;
    v126.origin.CGFloat x = 0.0;
    v126.origin.double y = 0.0;
    v126.size.CGFloat width = 1.0;
    v126.size.CGFloat height = 1.0;
    CGRect v127 = CGRectApplyAffineTransform(v126, &v119);
    CGFloat x = v127.origin.x;
    double y = v127.origin.y;
    CGFloat width = v127.size.width;
    CGFloat height = v127.size.height;
    id v39 = objc_msgSend(v29, sel_page);
    if (v39)
    {
      id v40 = v39;
      objc_msgSend(v39, sel_boundsForBox_, 0);
      double v42 = v41;
      double v44 = v43;

      v128.origin.CGFloat x = x;
      v128.origin.double y = y;
      v128.size.CGFloat width = width;
      v128.size.CGFloat height = height;
      CGFloat MinX = CGRectGetMinX(v128);
      v129.origin.CGFloat x = x;
      v129.origin.double y = y;
      v129.size.CGFloat width = width;
      v129.size.CGFloat height = height;
      double v46 = v44 + v42 + v42 - CGRectGetMaxY(v129);
      v130.origin.CGFloat x = x;
      v130.origin.double y = y;
      v130.size.CGFloat width = width;
      v130.size.CGFloat height = height;
      CGFloat v47 = CGRectGetWidth(v130);
      v131.origin.CGFloat x = x;
      v131.origin.double y = y;
      v131.size.CGFloat width = width;
      v131.size.CGFloat height = height;
      CGFloat height = CGRectGetHeight(v131);
      CGFloat width = v47;
      CGFloat x = MinX;
      double y = v46;
    }
    int v48 = v27 | (v26 << 16);
    id v49 = v33;
    v132.origin.CGFloat x = x;
    v132.origin.double y = y;
    v132.size.CGFloat width = width;
    v132.size.CGFloat height = height;
    CGRect v133 = CGRectIntegral(v132);
    objc_msgSend(v29, sel_setBounds_, v133.origin.x, v133.origin.y, v133.size.width, v133.size.height);

    id v50 = v49;
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    objc_msgSend(v29, sel_setModificationDate_, isa);

    id v52 = objc_msgSend(v29, sel_action);
    uint64_t v53 = v101;
    if (!v52)
    {
      type metadata accessor for Link();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
      CRRegister.wrappedValue.getter();
      unint64_t v54 = *(void *)&v119.b;
      if (*(void *)&v119.b >> 60 != 15)
      {
        int v55 = v48;
        uint64_t v56 = *(void *)&v119.a;
        id v57 = objc_allocWithZone(MEMORY[0x263F7C208]);
        outlined copy of Data?(v56, v54);
        id v58 = specialized @nonobjc PKDrawingConcrete.init(data:)();
        uint64_t v94 = v56;
        outlined consume of Data?(v56, v54);
        id v59 = objc_msgSend(v58, sel_itemURL);

        uint64_t v60 = v99;
        uint64_t v61 = v98;
        if (v59)
        {
          uint64_t v62 = (uint64_t)v96;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v63 = 0;
          id v64 = v97;
        }
        else
        {
          uint64_t v63 = 1;
          id v64 = v97;
          uint64_t v62 = (uint64_t)v96;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v62, v63, 1, v60);
        outlined init with take of URL?(v62, (uint64_t)v64);
        if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v61 + 48))(v64, 1, v60) == 1)
        {
          outlined consume of Data?(v94, v54);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v64, &demangling cache variable for type metadata for URL?);
        }
        else
        {
          uint64_t v89 = v95;
          (*(void (**)(char *, id, uint64_t))(v61 + 32))(v95, v64, v60);
          id v90 = objc_allocWithZone(MEMORY[0x263F14720]);
          uint64_t v97 = (char *)v50;
          URL._bridgeToObjectiveC()((NSURL *)&v123);
          unint64_t v92 = v91;
          id v93 = objc_msgSend(v90, sel_initWithURL_, v91);

          objc_msgSend(v29, sel_setAction_, v93);
          outlined consume of Data?(v94, v54);
          (*(void (**)(char *, uint64_t))(v61 + 8))(v89, v60);
        }
        int v48 = v55;
        uint64_t v53 = v101;
      }
    }
    uint64_t v65 = v116;
    outlined init with copy of SharedTagged_9<TaggedCanvasElement>?((uint64_t)v115, v116);
    uint64_t v66 = v117;
    uint64_t v67 = v118;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v65, 1, v118) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v65, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      uint64_t v68 = v114;
      uint64_t v69 = v113;
      uint64_t v70 = v112;
      CGFloat v71 = v110;
      CGFloat v72 = v109;
      CGFloat v73 = v108;
      CGFloat v74 = v107;
      CGFloat v75 = v106;
      CGFloat v76 = v105;
      uint64_t v77 = v104;
      uint64_t v78 = v103;
      uint64_t v79 = v102;
LABEL_20:
      v119.CGFloat a = v71;
      v119.CGFloat b = v72;
      v119.CGFloat c = v73;
      v119.CGFloat d = v74;
      v119.tCGFloat x = v75;
      v119.tdouble y = v76;
      uint64_t v120 = v77;
      uint64_t v121 = v78;
      uint64_t v122 = v79;
      __int16 v123 = v48;
      char v124 = BYTE2(v48);
      uint64_t v88 = type metadata accessor for Link();
      CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(v70, v9, v69, (uint64_t)&v119, v53, v88, v68, (uint64_t)&protocol witness table for Link);

      return;
    }
    uint64_t v98 = v9;
    uint64_t v80 = v53;
    id v115 = v50;
    LODWORD(v99) = v48;
    uint64_t v81 = v67;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v111, v65, v67);
    unint64_t v82 = v100;
    uint64_t v83 = (void *)v100;
    uint64_t v68 = v114;
    uint64_t v69 = v113;
    if (v100 >> 62)
    {
      if (v100 >> 62 != 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v111, v81);
        uint64_t v70 = v112;
        CGFloat v71 = v110;
        CGFloat v72 = v109;
        CGFloat v73 = v108;
        CGFloat v74 = v107;
        CGFloat v75 = v106;
        CGFloat v76 = v105;
        uint64_t v77 = v104;
        uint64_t v78 = v103;
        uint64_t v79 = v102;
        int v48 = v99;
        id v50 = v115;
        goto LABEL_19;
      }
      uint64_t v83 = (void *)(v100 & 0x3FFFFFFFFFFFFFFFLL);
    }
    outlined copy of PaperDocument.PDFDocumentUse(v100);
    uint64_t v84 = type metadata accessor for Link();
    uint64_t v85 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
    uint64_t v86 = v111;
    uint64_t v87 = v84;
    uint64_t v53 = v80;
    specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(v83, v111, 1, v69, v87, v80, v85, (uint64_t)&protocol witness table for Link, v68);
    outlined consume of PaperDocument.PDFDocumentUse(v82);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v86, v81);
    uint64_t v70 = v112;
    CGFloat v71 = v110;
    CGFloat v72 = v109;
    CGFloat v73 = v108;
    CGFloat v74 = v107;
    CGFloat v75 = v106;
    CGFloat v76 = v105;
    uint64_t v77 = v104;
    uint64_t v78 = v103;
    uint64_t v79 = v102;
    int v48 = v99;
    id v50 = v115;
LABEL_19:
    uint64_t v9 = v98;
    goto LABEL_20;
  }
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Link(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  double v3 = MEMORY[0x270FA5388](v2);
  v7[15] = 4;
  (*(void (**)(unsigned char *, uint64_t, double))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance Link()
{
  return specialized Link.indexableTextContent<A>(in:)();
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance Link(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Link.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Link.render<A>(in:id:capsule:options:));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v14(a1, a2, a4, a5, a6);
}

uint64_t specialized Link.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 80) = a1;
  *(void *)(v4 + 88) = v3;
  *(unsigned char *)(v4 + 96) = *(unsigned char *)(a3 + 1);
  *(unsigned char *)(v4 + 97) = *(unsigned char *)(a3 + 2);
  return MEMORY[0x270FA2498](specialized Link.render<A>(in:id:capsule:options:), 0, 0);
}

uint64_t specialized Link.render<A>(in:id:capsule:options:)()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 == 15)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_20C2D7000, v3, v4, "There is no synapse data to render the link.", v5, 2u);
      MEMORY[0x210550270](v5, -1, -1);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 16);
    id v7 = objc_allocWithZone(MEMORY[0x263F7C208]);
    outlined copy of Data._Representation(v6, v1);
    id v8 = specialized @nonobjc PKDrawingConcrete.init(data:)();
    char v9 = *(unsigned char *)(v0 + 97);
    char v10 = *(unsigned char *)(v0 + 96);
    uint64_t v11 = *(CGContext **)(v0 + 80);
    outlined consume of Data?(v6, v1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    CGFloat v12 = *(double *)(v0 + 16);
    CGFloat v13 = *(double *)(v0 + 24);
    CGFloat v14 = *(double *)(v0 + 32);
    CGFloat v15 = *(double *)(v0 + 40);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    specialized static Link.renderLink(synapseItem:in:frame:rotation:darkMode:isRTL:)(v8, v11, v10, v9, v12, v13, v14, v15, *(CGFloat *)(v0 + 16));
    outlined consume of Data?(v6, v1);
  }
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t specialized static Link.synapseDataRepresentation(from:)()
{
  v30[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0) + 32;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v2, 1, 1, v6);
  id v8 = (void *)MEMORY[0x21054D080](v3, v5);
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v9);
  uint64_t v11 = v10;
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v2, 1, v6) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v2, v6);
  }
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F7C208]), sel_initWithDisplayTitle_sourceIdentifier_sourceName_itemURL_identifier_, 0, v8, 0, v11, isa);

  v30[0] = 0;
  id v14 = objc_msgSend(v13, sel_dataRepresentationWithError_, v30);
  id v15 = v30[0];
  if (v14)
  {
    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v17 = v15;
    uint64_t v18 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)logger);
    id v20 = v18;
    id v21 = v18;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      long long v25 = (void *)swift_slowAlloc();
      v30[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_getErrorValue();
      uint64_t v26 = Error.localizedDescription.getter();
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v22, v23, "%s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v25, -1, -1);
      MEMORY[0x210550270](v24, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  return v16;
}

uint64_t specialized Link.indexableTextContent<A>(in:)()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  if (v9 >> 60 != 15)
  {
    id v0 = objc_allocWithZone(MEMORY[0x263F7C208]);
    outlined copy of Data._Representation(v8, v9);
    id v1 = specialized @nonobjc PKDrawingConcrete.init(data:)();
    outlined consume of Data?(v8, v9);
    id v4 = objc_msgSend(v1, sel_displayTitle);

    if (v4)
    {
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_20C832C20;
      *(void *)(v2 + 32) = v5;
      *(void *)(v2 + 40) = v7;
      *(void *)(v2 + 48) = v5;
      *(void *)(v2 + 56) = v7;
      swift_bridgeObjectRetain();
      outlined consume of Data?(v8, v9);
      return v2;
    }
    outlined consume of Data?(v8, v9);
  }
  return MEMORY[0x263F8EE78];
}

uint64_t base witness table accessor for CRStruct_Base_3 in Link()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
}

uint64_t base witness table accessor for CRStruct_Base in Link()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
}

uint64_t base witness table accessor for CRDT in Link()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
}

uint64_t base witness table accessor for CRMergeable in Link()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
}

uint64_t base witness table accessor for CRType in Link()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in Link()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_3<Link> and conformance CRStructMergeableDelta_3<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_3<Link>);
}

uint64_t base witness table accessor for CRCodable in Link()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_7(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
}

uint64_t sub_20C60462C()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C604670()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C6046CC()
{
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for Link(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    id v13 = (char *)a1 + v12;
    id v14 = (char *)a2 + v12;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Link(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Link(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Link(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Link(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C604E4C);
}

uint64_t sub_20C604E4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[7]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for Link(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C604FCC);
}

uint64_t sub_20C604FCC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[7]) = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for Link()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<Data?>();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for CRRegister<Data?>()
{
  if (!lazy cache variable for type metadata for CRRegister<Data?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    lazy protocol witness table accessor for type Data? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Data?>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for PencilAndPaperFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C605378);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilAndPaperFeatureFlags()
{
  return &type metadata for PencilAndPaperFeatureFlags;
}

ValueMetadata *type metadata accessor for AutofillFeatureFlags()
{
  return &type metadata for AutofillFeatureFlags;
}

unsigned char *storeEnumTagSinglePayload for AutofillFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C605510);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MobileQuickLookFeatureFlags()
{
  return &type metadata for MobileQuickLookFeatureFlags;
}

ValueMetadata *type metadata accessor for VisualIntelligenceFeatureFlags()
{
  return &type metadata for VisualIntelligenceFeatureFlags;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance AutofillFeatureFlags()
{
  return "AutoFillUI";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance AutofillFeatureFlags()
{
  if (*v0) {
    return "afui_panel_ui_ipados";
  }
  else {
    return "afui_panel_ui_ios";
  }
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance MobileQuickLookFeatureFlags()
{
  return "MobileQuickLook";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance MobileQuickLookFeatureFlags()
{
  if (*v0) {
    return "Phoebe";
  }
  else {
    return "LightRedesign";
  }
}

unsigned char *storeEnumTagSinglePayload for VisualIntelligenceFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x20C605788);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedbackFeatures()
{
  return &type metadata for FeedbackFeatures;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance FeedbackFeatures()
{
  return "FeedbackFrameworks";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance FeedbackFeatures()
{
  return "CentralizedFeedback";
}

Swift::Void __swiftcall ShapeEditingControl.setButtonMultiSelectBackground()()
{
  if (one-time initialization token for buttonSize != -1) {
    swift_once();
  }
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, *(double *)&static ShapeEditingControl.buttonSize, *(double *)&static ShapeEditingControl.buttonSize);
  v4[4] = specialized thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v4[5] = 0;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v4[3] = &block_descriptor_50;
  unint64_t v2 = _Block_copy(v4);
  swift_release();
  id v3 = objc_msgSend(v1, sel_imageWithActions_, v2);

  _Block_release(v2);
  if (swift_isEscapingClosureAtFileLocation())
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button), sel_setImage_forState_, v3, 0);
  }
}

void ShapeEditingControl.isUserInteractionEnabled.setter(char a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v9.id receiver = v1;
  v9.Class super_class = ObjectType;
  objc_msgSendSuper2(&v9, sel_setUserInteractionEnabled_, a1 & 1);
  v8.id receiver = v1;
  v8.Class super_class = ObjectType;
  unsigned int v4 = objc_msgSendSuper2(&v8, sel_isUserInteractionEnabled);
  uint64_t v5 = self;
  unsigned int v6 = &selRef_secondaryLabelColor;
  if (!v4) {
    unsigned int v6 = &selRef_quaternaryLabelColor;
  }
  id v7 = [v5 *v6];
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button], sel_setTitleColor_forState_, v7, 0);
}

Swift::Void __swiftcall ShapeEditingControl.setButtonValue(_:isPercent:)(Swift::Float _, Swift::Bool isPercent)
{
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button);
  id v6 = objc_msgSend(v5, sel_imageForState_, 0);

  if (v6) {
    objc_msgSend(v5, sel_setImage_forState_, 0, 0);
  }
  if (!isPercent) {
    goto LABEL_8;
  }
  _ = _ * 100.0;
  if ((~LODWORD(_) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (_ <= -9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (_ < 9.2234e18)
  {
LABEL_11:
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v7 = BinaryInteger.description.getter();
    objc_super v8 = (void *)MEMORY[0x21054D080](v7);
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setTitle_forState_, v8, 0);

    return;
  }
  __break(1u);
LABEL_8:
  if ((~LODWORD(_) & 0x7F800000) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (_ <= -9.2234e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (_ < 9.2234e18) {
    goto LABEL_11;
  }
LABEL_16:
  __break(1u);
}

Swift::Void __swiftcall ShapeEditingControl.setButtonBackground(dynamicColor:showMultipleShapesUI:)(UIColor_optional dynamicColor, Swift::Bool showMultipleShapesUI)
{
  Swift::Bool is_nil = dynamicColor.is_nil;
  Class isa = dynamicColor.value.super.isa;
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_nonDynamicButtonBackgroundColor);
  *(void *)(v2 + OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_nonDynamicButtonBackgroundColor) = dynamicColor.value.super.isa;
  id v6 = dynamicColor.value.super.isa;

  if (is_nil)
  {
    ShapeEditingControl.setButtonMultiSelectBackground()();
  }
  else
  {
    uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button);
    type metadata accessor for ShapeColorButton();
    uint64_t v8 = swift_dynamicCastClass();
    if (v8)
    {
      objc_super v9 = (void *)v8;
      id v10 = v7;
      v24.value.super.Class isa = isa;
      ShapeColorButton.setColor(_:)(v24);
      if (isa)
      {
        id v11 = v10;
        id v12 = [(objc_class *)v6 accessibilityName];
        uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        object = v14;
      }
      else
      {
        uint64_t v16 = one-time initialization token for paperKitBundle;
        id v17 = v10;
        if (v16 != -1) {
          swift_once();
        }
        v25._object = (void *)0x800000020C858C50;
        v18._uint64_t countAndFlagsBits = 0x726F6C6F63206F4ELL;
        v18._object = (void *)0xE800000000000000;
        v19.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
        v19.value._object = (void *)0xEB00000000656C62;
        v20._uint64_t countAndFlagsBits = 0;
        v20._object = (void *)0xE000000000000000;
        v25._uint64_t countAndFlagsBits = 0xD000000000000020;
        Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v25);
        uint64_t countAndFlagsBits = v21._countAndFlagsBits;
        object = v21._object;
      }
      id v22 = (id)MEMORY[0x21054D080](countAndFlagsBits, object);
      swift_bridgeObjectRelease();
      objc_msgSend(v9, sel_setAccessibilityValue_, v22);
    }
    else
    {
      objc_msgSend(v7, sel_setBackgroundColor_, v6);
    }
  }
}

id ShapeStyleEditingView.__deallocating_deinit()
{
  return ShapeStyleEditingView.__deallocating_deinit(type metadata accessor for ShapeStyleEditingView);
}

uint64_t type metadata accessor for ShapeStyleEditingView()
{
  return self;
}

uint64_t type metadata accessor for HorizontalShapeStyleEditingViewLayout()
{
  return self;
}

uint64_t type metadata accessor for VerticalShapeStyleEditingViewLayout()
{
  return self;
}

uint64_t type metadata accessor for CompactShapeStyleEditingViewLayout()
{
  return self;
}

void one-time initialization function for buttonSize()
{
  static ShapeEditingControl.buttonSize = 0x4042000000000000;
}

{
  static MiniMenuConstants.buttonSize = 0x4044000000000000;
}

void one-time initialization function for compactButtonSize()
{
  static ShapeEditingControl.compactButtonSize = 0x4043000000000000;
}

void closure #1 in ShapeEditingControl.setButtonMultiSelectBackground()(id a1)
{
  if (one-time initialization token for buttonSize != -1) {
    swift_once();
  }
  *(double *)&unint64_t v2 = (*(double *)&static ShapeEditingControl.buttonSize + -20.0) * 0.5;
  id v3 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  id v4 = objc_msgSend(self, sel_quaternaryLabelColor);
  uint64_t v5 = (CGColor *)objc_msgSend(v4, sel_CGColor);

  CGContextSetStrokeColorWithColor(v3, v5);
  id v6 = objc_msgSend(a1, sel_CGContext);
  CGContextRef.move(to:)((CGPoint)__PAIR128__(*(double *)&static ShapeEditingControl.buttonSize * 0.5, v2));

  uint64_t v7 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetLineWidth(v7, 2.0);

  uint64_t v8 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetLineCap(v8, kCGLineCapRound);

  id v9 = objc_msgSend(a1, sel_CGContext);
  CGContextRef.addLine(to:)((CGPoint)__PAIR128__(*(double *)&static ShapeEditingControl.buttonSize * 0.5, *(double *)&static ShapeEditingControl.buttonSize - *(double *)&v2));

  id v10 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextDrawPath(v10, kCGPathStroke);
}

Swift::Void __swiftcall ShapeColorButton.setColor(_:)(UIColor_optional a1)
{
  Class isa = a1.value.super.isa;
  if (v1[OBJC_IVAR____TtC8PaperKit16ShapeColorButton_showCompactUI] != 1)
  {
    if (one-time initialization token for buttonSize != -1) {
      swift_once();
    }
    id v3 = &static ShapeEditingControl.buttonSize;
    goto LABEL_7;
  }
  if (one-time initialization token for compactButtonSize != -1) {
    goto LABEL_10;
  }
  while (1)
  {
    id v3 = &static ShapeEditingControl.compactButtonSize;
LABEL_7:
    double v4 = *(double *)v3;
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, v4, v4);
    id v6 = (double *)swift_allocObject();
    *((void *)v6 + 2) = isa;
    *((void *)v6 + 3) = v1;
    v6[5] = 0.0;
    v6[6] = 0.0;
    v6[4] = 4.0;
    v6[7] = v4;
    v6[8] = v4;
    v6[9] = v4;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = partial apply for closure #1 in ShapeColorButton.setColor(_:);
    *(void *)(v7 + 24) = v6;
    void v10[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    v10[5] = v7;
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    void v10[3] = &block_descriptor_58;
    uint64_t v8 = _Block_copy(v10);
    id v9 = isa;
    Class isa = v1;
    swift_retain();
    swift_release();
    id v1 = objc_msgSend(v5, sel_imageWithActions_, v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v5 & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_once();
  }
  [(objc_class *)isa setImage:v1 forState:0];
  swift_release();
}

uint64_t type metadata accessor for ShapeEditingControl()
{
  return self;
}

void closure #1 in ShapeColorButton.setColor(_:)(void *a1, void *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  if (a2)
  {
    char v15 = *(unsigned char *)(a3 + OBJC_IVAR____TtC8PaperKit16ShapeColorButton_showRingUI);
    id v54 = a2;
    uint64_t v16 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    id v17 = v16;
    if (v15)
    {
      CGContextSetLineWidth(v16, a4);

      Swift::String v18 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      Swift::String_optional v19 = (CGColor *)objc_msgSend(v54, sel_CGColor);
      CGContextSetStrokeColorWithColor(v18, v19);

      Swift::String v20 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      id v21 = objc_msgSend(self, sel_secondarySystemBackgroundColor);
      id v22 = (CGColor *)objc_msgSend(v21, sel_CGColor);

      CGContextSetFillColorWithColor(v20, v22);
      os_log_type_t v23 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      v56.origin.CGFloat x = a5;
      v56.origin.double y = a6;
      v56.size.CGFloat width = a7;
      v56.size.CGFloat height = a8;
      CGRect v57 = CGRectInset(v56, a4 * 0.5, a4 * 0.5);
      CGContextAddEllipseInRect(v23, v57);

      UIColor_optional v24 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      Swift::String v25 = v24;
      CGPathDrawingMode v26 = kCGPathFillStroke;
    }
    else
    {
      id v52 = (CGColor *)objc_msgSend(v54, sel_CGColor);
      CGContextSetFillColorWithColor(v17, v52);

      uint64_t v53 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      v61.origin.CGFloat x = a5;
      v61.origin.double y = a6;
      v61.size.CGFloat width = a7;
      v61.size.CGFloat height = a8;
      CGContextAddEllipseInRect(v53, v61);

      UIColor_optional v24 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      Swift::String v25 = v24;
      CGPathDrawingMode v26 = kCGPathFill;
    }
    goto LABEL_12;
  }
  int v28 = *(unsigned __int8 *)(a3 + OBJC_IVAR____TtC8PaperKit16ShapeColorButton_showRingUI);
  uint64_t v29 = self;
  if (v28) {
    double v30 = 12.0;
  }
  else {
    double v30 = 14.0;
  }
  uint64_t v31 = &selRef_secondarySystemBackgroundColor;
  if (!v28) {
    uint64_t v31 = &selRef_tertiarySystemFillColor;
  }
  id v32 = [v29 *v31];
  id v54 = objc_msgSend(v32, sel_CGColor);

  id v33 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetFillColorWithColor(v33, (CGColorRef)v54);

  double v34 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v58.origin.CGFloat x = a5;
  v58.origin.double y = a6;
  v58.size.CGFloat width = a7;
  v58.size.CGFloat height = a8;
  CGContextAddEllipseInRect(v34, v58);

  uint64_t v35 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextDrawPath(v35, kCGPathFill);

  *(double *)&unint64_t v36 = (a9 - v30) * 0.5;
  *(double *)&unint64_t v37 = a9 * 0.5 + v30 * 0.5;
  uint64_t v38 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  id v39 = self;
  id v40 = objc_msgSend(v39, sel_redColor);
  double v41 = (CGColor *)objc_msgSend(v40, sel_CGColor);

  CGContextSetStrokeColorWithColor(v38, v41);
  id v42 = objc_msgSend(a1, sel_CGContext);
  CGContextRef.move(to:)((CGPoint)__PAIR128__(v37, v36));

  double v43 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetLineWidth(v43, 4.0);

  double v44 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetLineCap(v44, kCGLineCapRound);

  id v45 = objc_msgSend(a1, sel_CGContext);
  CGContextRef.addLine(to:)((CGPoint)__PAIR128__(v36, v37));

  double v46 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextDrawPath(v46, kCGPathStroke);

  if (v28)
  {
    CGFloat v47 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    CGContextSetLineWidth(v47, a4);

    int v48 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    id v49 = objc_msgSend(v39, sel_quaternarySystemFillColor);
    id v50 = (CGColor *)objc_msgSend(v49, sel_CGColor);

    CGContextSetStrokeColorWithColor(v48, v50);
    uint64_t v51 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    v59.origin.CGFloat x = a5;
    v59.origin.double y = a6;
    v59.size.CGFloat width = a7;
    v59.size.CGFloat height = a8;
    CGRect v60 = CGRectInset(v59, a4 * 0.5, a4 * 0.5);
    CGContextAddEllipseInRect(v51, v60);

    UIColor_optional v24 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    Swift::String v25 = v24;
    CGPathDrawingMode v26 = kCGPathStroke;
LABEL_12:
    CGContextDrawPath(v24, v26);
  }
}

uint64_t type metadata accessor for ShapeColorButton()
{
  return self;
}

void @objc ShapeStyleEditingView.init(frame:)()
{
}

id VerticalOpacityView.__deallocating_deinit()
{
  return ShapeStyleEditingView.__deallocating_deinit(type metadata accessor for VerticalOpacityView);
}

id ShapeStyleEditingView.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.id receiver = v1;
  v3.Class super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for VerticalOpacityView()
{
  return self;
}

void specialized ShapeEditingControl.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_label;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_controlHeight] = 0x4044000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_controlWidth] = 0x405D000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_smallerControlWidth] = 0x405C000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_nonDynamicButtonBackgroundColor] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t block_copy_helper_50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_50()
{
  return swift_release();
}

uint64_t sub_20C606EBC()
{
  return MEMORY[0x270FA0238](v0, 80, 7);
}

void partial apply for closure #1 in ShapeColorButton.setColor(_:)(void *a1)
{
  closure #1 in ShapeColorButton.setColor(_:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56), *(CGFloat *)(v1 + 64), *(double *)(v1 + 72));
}

uint64_t sub_20C606F10()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v34 = a1;
  uint64_t v38 = a5;
  uint64_t v37 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  id v32 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v35 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v39 = v20;
  uint64_t v40 = a3;
  uint64_t v31 = a4;
  uint64_t v41 = a4;
  swift_getKeyPath();
  uint64_t v36 = a2;
  uint64_t v33 = v6;
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
LABEL_6:
    uint64_t v29 = 1;
    uint64_t v23 = v37;
    uint64_t v28 = v38;
    uint64_t v24 = v36;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v28, v29, 1, v24);
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v35, v16, v17);
  uint64_t v21 = v33;
  Ref.subscript.getter();
  char v22 = PKDrawingStruct.hasAnyEraserStrokes<A>(in:createdBefore:)(v21, v34, v20, a3);
  _s8PaperKit15PKDrawingStructVWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
  if ((v22 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v35, v17);
    goto LABEL_6;
  }
  uint64_t v24 = v36;
  uint64_t v23 = v37;
  Swift::String v25 = v32;
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 16))(v32, v33, v36);
  MEMORY[0x270FA5388](v26);
  uint64_t v27 = v31;
  *(&v31 - 4) = a3;
  *(&v31 - 3) = v27;
  *(&v31 - 2) = v34;
  Capsule.callAsFunction<A>(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v35, v17);
  uint64_t v28 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v38, v25, v24);
  uint64_t v29 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v28, v29, 1, v24);
}

id CRRegister<>.isEraserStroke<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v43);
  double v44 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v50 = a2;
  uint64_t v48 = v12;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v47 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  id v42 = (char *)&v40 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v41 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v45 = (uint64_t)&v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v46 = (uint64_t)&v40 - v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v24, 1, v29) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    return 0;
  }
  uint64_t v31 = v49;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v24, v29);
  outlined init with take of PKStrokeStruct(v45, v46);
  id v32 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v42, v31, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  uint64_t v34 = (void (**)(char *, uint64_t))(v41 + 8);
  for (unint64_t i = (void (**)(char *, char *, uint64_t))(v41 + 32); ; (*i)(v17, v7, v15))
  {
    swift_getWitnessTable();
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    _s8PaperKit15PKDrawingStructVWOhTm_0((uint64_t)v11, type metadata accessor for PKStrokeInheritedProperties);
    if ((*v33)(v7, 1, v15) == 1) {
      break;
    }
    (*v34)(v17, v15);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v32, v13);
  uint64_t v36 = (uint64_t)v44;
  Ref.subscript.getter();
  (*v34)(v17, v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  uint64_t v37 = v51;
  _s8PaperKit15PKDrawingStructVWOhTm_0(v36, type metadata accessor for PKStrokeInheritedProperties);
  if (!v37)
  {
    _s8PaperKit15PKDrawingStructVWOhTm_0(v46, type metadata accessor for PKStrokeStruct);
    return 0;
  }
  id v38 = objc_msgSend(v37, sel__isEraserInk);

  _s8PaperKit15PKDrawingStructVWOhTm_0(v46, type metadata accessor for PKStrokeStruct);
  return v38;
}

uint64_t CRRegister<>.isEraserStroke<A>(in:createdBefore:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v81 = a3;
  uint64_t v74 = a2;
  uint64_t v3 = *a1;
  uint64_t v85 = a1;
  uint64_t v83 = v3;
  uint64_t v4 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v4 - 8);
  CGFloat v73 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v68);
  uint64_t v69 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v67 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v76 = *(void *)(v9 - 8);
  uint64_t v77 = v9;
  MEMORY[0x270FA5388](v9);
  CGFloat v72 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  CGFloat v75 = (char *)&v64 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v80);
  unint64_t v82 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v64 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v79 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v66);
  uint64_t v31 = (char *)&v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v78 = (char *)&v64 - v33;
  MEMORY[0x270FA5388](v34);
  uint64_t v84 = (uint64_t)&v64 - v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v29, 1, v36) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
LABEL_12:
    char v60 = 0;
    return v60 & 1;
  }
  uint64_t v65 = v31;
  uint64_t v38 = (uint64_t)v78;
  uint64_t v39 = v85;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v36);
  outlined init with take of PKStrokeStruct(v38, v84);
  uint64_t v86 = v39;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  uint64_t v40 = (unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
  uint64_t v41 = (void (**)(char *, uint64_t))(v79 + 8);
  id v42 = (void (**)(char *, char *, uint64_t))(v79 + 32);
  for (uint64_t i = v83; ; uint64_t i = v44)
  {
    uint64_t v44 = i;
    type metadata accessor for Capsule.Ref();
    swift_getWitnessTable();
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    _s8PaperKit15PKDrawingStructVWOhTm_0((uint64_t)v19, type metadata accessor for PKStrokeInheritedProperties);
    if ((*v40)(v15, 1, v20) == 1) {
      break;
    }
    (*v41)(v22, v20);
    (*v42)(v22, v15, v20);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  swift_release();
  uint64_t v45 = (uint64_t)v82;
  Ref.subscript.getter();
  (*v41)(v22, v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  uint64_t v46 = v86;
  _s8PaperKit15PKDrawingStructVWOhTm_0(v45, type metadata accessor for PKStrokeInheritedProperties);
  if (!v46)
  {
    uint64_t v62 = v84;
LABEL_11:
    _s8PaperKit15PKDrawingStructVWOhTm_0(v62, type metadata accessor for PKStrokeStruct);
    goto LABEL_12;
  }
  unsigned __int8 v47 = objc_msgSend(v46, sel__isEraserInk);
  uint64_t v48 = v84;
  uint64_t v49 = (uint64_t)v65;
  outlined init with copy of PKStrokeStruct(v84, (uint64_t)v65);
  uint64_t v51 = v75;
  uint64_t v50 = v76;
  uint64_t v52 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v74, v77);
  if ((v47 & 1) == 0)
  {

    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    _s8PaperKit15PKDrawingStructVWOhTm_0(v49, type metadata accessor for PKStrokeStruct);
    uint64_t v62 = v48;
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v53 = (uint64_t)v69;
  CRRegister.wrappedValue.getter();
  id v54 = v67;
  uint64_t v56 = v70;
  uint64_t v55 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v67, v53 + *(int *)(v68 + 32), v71);
  _s8PaperKit15PKDrawingStructVWOhTm_0(v53, type metadata accessor for PKStrokeProperties);
  CGRect v57 = v73;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v54, v55);
  CGRect v58 = v72;
  PKStrokePath.creationDate.getter();
  uint64_t v59 = type metadata accessor for PKStrokePath();
  (*(void (**)(char *, uint64_t))(*(void *)(v59 - 8) + 8))(v57, v59);
  char v60 = static Date.< infix(_:_:)();

  CGRect v61 = *(void (**)(char *, uint64_t))(v50 + 8);
  v61(v58, v52);
  v61(v51, v52);
  _s8PaperKit15PKDrawingStructVWOhTm_0((uint64_t)v65, type metadata accessor for PKStrokeStruct);
  _s8PaperKit15PKDrawingStructVWOhTm_0(v48, type metadata accessor for PKStrokeStruct);
  return v60 & 1;
}

uint64_t CRRegister<>.creationDate<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v37 = a2;
  uint64_t v39 = a4;
  uint64_t v5 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v38 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v33);
  uint64_t v34 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v32 - v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v17, 1, v24) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    return static Date.distantPast.getter();
  }
  else
  {
    uint64_t v32 = a1;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v24);
    outlined init with take of PKStrokeStruct((uint64_t)v20, (uint64_t)v23);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    uint64_t v27 = (uint64_t)v34;
    CRRegister.wrappedValue.getter();
    uint64_t v29 = v35;
    uint64_t v28 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v10, v27 + *(int *)(v33 + 32), v36);
    _s8PaperKit15PKDrawingStructVWOhTm_0(v27, type metadata accessor for PKStrokeProperties);
    uint64_t v30 = v38;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v28);
    PKStrokePath.creationDate.getter();
    _s8PaperKit15PKDrawingStructVWOhTm_0((uint64_t)v23, type metadata accessor for PKStrokeStruct);
    uint64_t v31 = type metadata accessor for PKStrokePath();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v30, v31);
  }
}

uint64_t PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v34 = a1;
  uint64_t v35 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v31 = *(void *)(v8 - 8);
  uint64_t v32 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v30 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for PKDrawingStruct();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v5 + *(int *)(v21 + 20), v10);
  uint64_t v33 = a2;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v22 = a3;
  uint64_t v23 = v34;
  uint64_t v39 = v34;
  specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:), (uint64_t)v36, v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
    uint64_t v24 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v35, 1, 1, v24);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    uint64_t v26 = v30;
    uint64_t v27 = v33;
    Ref.subscript.getter();
    uint64_t v28 = v35;
    CRRegister<>.creationDate<A>(in:)(v23, v27, v22, v35);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v32);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    uint64_t v29 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 0, 1, v29);
  }
}

uint64_t closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  unsigned __int8 v11 = CRRegister<>.isEraserStroke<A>(in:)(a2, a3, a4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11 & 1;
}

uint64_t PKDrawingStruct.hasAnyEraserStrokes<A>(in:createdBefore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(a1, a3, a4, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
    char v14 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    char v14 = static Date.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return v14 & 1;
}

uint64_t closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a2;
  uint64_t v7 = *a1;
  uint64_t v43 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v43);
  uint64_t v35 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v9 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v32 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v33 = (char *)&v30 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(v7 + *MEMORY[0x263F33088]);
  uint64_t v40 = a3;
  uint64_t v36 = a4;
  uint64_t v41 = a4;
  swift_getKeyPath();
  uint64_t v34 = a3;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  }
  uint64_t v31 = v17;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
  uint64_t v21 = (uint64_t)v35;
  Ref.subscript.getter();
  uint64_t v22 = v32;
  uint64_t v23 = v38;
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v32, v21 + *(int *)(v43 + 20), v38);
  uint64_t v30 = (uint64_t)&v30;
  MEMORY[0x270FA5388](v24);
  uint64_t v25 = v33;
  uint64_t v26 = v36;
  *(&v30 - 4) = v34;
  *(&v30 - 3) = v26;
  uint64_t v27 = v37;
  *(&v30 - 2) = (uint64_t)a1;
  *(&v30 - 1) = v27;
  CROrderedSet.filter(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v22, v23);
  _s8PaperKit15PKDrawingStructVWOhTm_0(v21, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
  uint64_t v28 = (void (*)(char *, void))Ref.subscript.modify();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v29 + *(int *)(v43 + 20), v25, v23);
  v28(v42, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v19, v16);
}

BOOL closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  char v11 = CRRegister<>.isEraserStroke<A>(in:createdBefore:)(a2, a3, a4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return (v11 & 1) == 0;
}

uint64_t Capsule<>.hasAnyEraserStrokes()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v26 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v25 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v29 = v19;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    char v20 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    uint64_t v21 = a2;
    uint64_t v22 = (uint64_t)v25;
    Ref.subscript.getter();
    uint64_t v23 = (uint64_t)v26;
    static Date.now.getter();
    char v20 = PKDrawingStruct.hasAnyEraserStrokes<A>(in:createdBefore:)(v4, v23, v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v23, v28);
    _s8PaperKit15PKDrawingStructVWOhTm_0(v22, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  return v20 & 1;
}

uint64_t sub_20C6096AC()
{
  return 24;
}

__n128 sub_20C6096B8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(uint64_t a1)
{
  return closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(a1, v1[4], v1[2], v1[3]) & 1;
}

uint64_t _s8PaperKit15PKDrawingStructVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t *a1)
{
  return closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(a1, v1[4], v1[2], v1[3]);
}

BOOL partial apply for closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1)
{
  return closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(a1, *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

id @objc static PKRecognitionController.calculateDocumentProviderFromData(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  type metadata accessor for CalculateDocumentProvider();
  lazy protocol witness table accessor for type CalculateDocumentProvider and conformance CalculateDocumentProvider(&lazy protocol witness table cache variable for type CalculateDocumentProvider and conformance CalculateDocumentProvider);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  outlined consume of Data._Representation(v4, v6);
  return v8;
}

Class @objc static PKRecognitionController.dataRepresentationForCalculateDocumentProvider(_:)()
{
  swift_unknownObjectRetain();
  uint64_t v0 = specialized static PKRecognitionController.dataRepresentationForCalculateDocumentProvider(_:)();
  unint64_t v2 = v1;
  swift_unknownObjectRelease();
  if (v2 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(v0, v2);
  }
  return isa;
}

uint64_t specialized static PKRecognitionController.dataRepresentationForCalculateDocumentProvider(_:)()
{
  type metadata accessor for CalculateDocumentProvider();
  uint64_t v0 = swift_dynamicCastClass();
  if (v0)
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    swift_unknownObjectRetain();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    lazy protocol witness table accessor for type CalculateDocumentProvider and conformance CalculateDocumentProvider(&lazy protocol witness table cache variable for type CalculateDocumentProvider and conformance CalculateDocumentProvider);
    uint64_t v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    swift_unknownObjectRelease();
    swift_release();
  }
  return v0;
}

uint64_t lazy protocol witness table accessor for type CalculateDocumentProvider and conformance CalculateDocumentProvider(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CalculateDocumentProvider();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Bool __swiftcall ParticipantDetailsDataSource.participantIsPresent(_:)(Swift::String a1)
{
  return 1;
}

uint64_t dispatch thunk of ParticipantDetailsDataSource.localParticipantID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ParticipantDetailsDataSource.color(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ParticipantDetailsDataSource.name(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ParticipantDetailsDataSource.avatarImage(for:size:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)(a4 + 32)
                                                                                   + **(int **)(a4 + 32));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  v14.n128_f64[0] = a5;
  v15.n128_f64[0] = a6;
  return v17(a1, a2, a3, a4, v14, v15);
}

uint64_t dispatch thunk of ParticipantDetailsDataSource.participantIsPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

void SignatureDescription.init(tag:customDescription:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v4 = a3;
  if (a1 == -1)
  {
    if (a3) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = 0;
    }
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  if (!qword_26C14CC50)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((a1 & 0x8000000000000000) == 0 && qword_26C14CC50 - 1 > a1)
  {
    if (qword_26C14CC50 > (unint64_t)a1)
    {
      uint64_t v7 = (char *)&outlined read-only object #0 of static SignatureDescription.allCases.getter + 16 * a1;
      uint64_t v8 = *((void *)v7 + 4);
      unint64_t v4 = *((void *)v7 + 5);
      outlined copy of SignatureDescription(v8, v4);
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if (one-time initialization token for SignatureLogger != -1) {
LABEL_17:
  }
    swift_once();
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)SignatureLogger);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v10, v11, "description with unkonwn tag %ld", v12, 0xCu);
    MEMORY[0x210550270](v12, -1, -1);
  }

  uint64_t v8 = 0;
  unint64_t v4 = 0;
LABEL_14:
  *a4 = v8;
  a4[1] = v4;
}

void SignatureDescription.init(caption:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v40[0] = a1;
    v40[1] = a2;
    static CharacterSet.whitespacesAndNewlines.getter();
    lazy protocol witness table accessor for type String and conformance String();
    a2 = StringProtocol.trimmingCharacters(in:)();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_bridgeObjectRelease();
    BOOL v12 = a2 == 0x6D614E206C6C7546 && v11 == 0xE900000000000065;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_9;
    }
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v41._uint64_t countAndFlagsBits = 0xD000000000000029;
    v41._object = (void *)0x800000020C85BB90;
    v13._uint64_t countAndFlagsBits = 0x6D614E206C6C7546;
    v13._object = (void *)0xE900000000000065;
    v14.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v14.value._object = (void *)0xEB00000000656C62;
    v15._uint64_t countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    Swift::String v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, v14, paperKitBundle, v15, v41);
    if (v16._countAndFlagsBits == a2 && v16._object == (void *)v11)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_10;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v18)
    {
LABEL_9:
      swift_bridgeObjectRelease();
LABEL_10:
      a2 = 0;
      uint64_t v11 = 1;
      goto LABEL_11;
    }
    BOOL v19 = a2 == 0x614E206E65766947 && v11 == 0xEA0000000000656DLL;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_26;
    }
    v42._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v42._object = (void *)0x800000020C85BB60;
    v20._uint64_t countAndFlagsBits = 0x614E206E65766947;
    v20._object = (void *)0xEA0000000000656DLL;
    v21.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v21.value._object = (void *)0xEB00000000656C62;
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    Swift::String v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v42);
    if (v23._countAndFlagsBits == a2 && v23._object == (void *)v11)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_27;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v24)
    {
LABEL_26:
      swift_bridgeObjectRelease();
LABEL_27:
      a2 = 0;
      uint64_t v11 = 2;
      goto LABEL_11;
    }
    if (a2 == 0x4E20796C696D6146 && v11 == 0xEB00000000656D61
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      goto LABEL_35;
    }
    v43._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v25._object = (void *)0xEB00000000656D61;
    v43._object = (void *)0x800000020C85BB30;
    v25._uint64_t countAndFlagsBits = 0x4E20796C696D6146;
    v26.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v26.value._object = (void *)0xEB00000000656C62;
    v27._uint64_t countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    Swift::String v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, paperKitBundle, v27, v43);
    if (v28._countAndFlagsBits == a2 && v28._object == (void *)v11)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_36;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v29)
    {
LABEL_35:
      swift_bridgeObjectRelease();
LABEL_36:
      a2 = 0;
      uint64_t v11 = 3;
      goto LABEL_11;
    }
    if (a2 == 0x656D616E6B63694ELL && v11 == 0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      goto LABEL_44;
    }
    v44._object = (void *)0x800000020C85BB00;
    v30._uint64_t countAndFlagsBits = 0x656D616E6B63694ELL;
    v30._object = (void *)0xE800000000000000;
    v31.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v31.value._object = (void *)0xEB00000000656C62;
    v32._uint64_t countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    v44._uint64_t countAndFlagsBits = 0xD000000000000028;
    Swift::String v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, paperKitBundle, v32, v44);
    if (v33._countAndFlagsBits == a2 && v33._object == (void *)v11)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_45;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v34)
    {
LABEL_44:
      swift_bridgeObjectRelease();
LABEL_45:
      a2 = 0;
      uint64_t v11 = 4;
      goto LABEL_11;
    }
    if ((a2 != 0x736C616974696E49 || v11 != 0xE800000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v45._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
      v45._object = (void *)0x800000020C85BAD0;
      v35._uint64_t countAndFlagsBits = 0x736C616974696E49;
      v35._object = (void *)0xE800000000000000;
      v36.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v36.value._object = (void *)0xEB00000000656C62;
      v37._uint64_t countAndFlagsBits = 0;
      v37._object = (void *)0xE000000000000000;
      Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v45);
      if (v38._countAndFlagsBits == a2 && v38._object == (void *)v11)
      {
        swift_bridgeObjectRelease_n();
LABEL_58:
        a2 = 0;
        uint64_t v11 = 5;
        goto LABEL_11;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_58;
  }
  uint64_t v11 = 0;
LABEL_11:
  *a3 = a2;
  a3[1] = v11;
}

Swift::String __swiftcall SignatureDescription.localizedTitle()()
{
  switch(*(void *)(v0 + 8))
  {
    case 0:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v13 = 0x800000020C85BBC0;
      uint64_t v2 = 0x6E6769532077654ELL;
      unint64_t v3 = 0xED00006572757461;
      uint64_t v4 = 0x617A696C61636F4CLL;
      unint64_t v5 = 0xEB00000000656C62;
      uint64_t v6 = 0;
      unint64_t v7 = 0xE000000000000000;
      unint64_t v8 = 0xD000000000000021;
      goto LABEL_25;
    case 1:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v8 = 0xD000000000000029;
      unint64_t v13 = 0x800000020C85BB90;
      uint64_t v2 = 0x6D614E206C6C7546;
      unint64_t v3 = 0xE900000000000065;
      break;
    case 2:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v8 = 0xD00000000000002ALL;
      unint64_t v13 = 0x800000020C85BB60;
      uint64_t v2 = 0x614E206E65766947;
      unint64_t v3 = 0xEA0000000000656DLL;
      break;
    case 3:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v8 = 0xD00000000000002BLL;
      unint64_t v3 = 0xEB00000000656D61;
      unint64_t v13 = 0x800000020C85BB30;
      uint64_t v2 = 0x4E20796C696D6146;
      break;
    case 4:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v8 = 0xD000000000000028;
      unint64_t v13 = 0x800000020C85BB00;
      uint64_t v2 = 0x656D616E6B63694ELL;
      goto LABEL_23;
    case 5:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v8 = 0xD00000000000002DLL;
      unint64_t v13 = 0x800000020C85BAD0;
      uint64_t v2 = 0x736C616974696E49;
LABEL_23:
      unint64_t v3 = 0xE800000000000000;
      break;
    default:
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      Class isa = paperKitBundle.super.isa;
      unint64_t v8 = 0xD000000000000026;
      unint64_t v13 = 0x800000020C857490;
      uint64_t v2 = 0x4C206D6F74737543;
      unint64_t v3 = 0xEC0000006C656261;
      break;
  }
  uint64_t v4 = 0x617A696C61636F4CLL;
  unint64_t v5 = 0xEB00000000656C62;
  uint64_t v6 = 0;
  unint64_t v7 = 0xE000000000000000;
LABEL_25:
  Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, *(Swift::String_optional *)&v4, (NSBundle)isa, *(Swift::String *)&v6, *(Swift::String *)&v8);
  object = v11._object;
  uint64_t countAndFlagsBits = v11._countAndFlagsBits;
  result._object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

void *static SignatureDescription.allCases.getter()
{
  return &outlined read-only object #0 of static SignatureDescription.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SignatureDescription(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SignatureDescription.allCases.getter;
}

uint64_t specialized static SignatureDescription.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  switch(v3)
  {
    case 0uLL:
      if (v5) {
        goto LABEL_15;
      }
      unint64_t v3 = 0;
      char v6 = 1;
      break;
    case 1uLL:
      if (v5 != 1) {
        goto LABEL_15;
      }
      unint64_t v3 = 1;
      char v6 = 1;
      break;
    case 2uLL:
      if (v5 != 2) {
        goto LABEL_15;
      }
      char v6 = 1;
      unint64_t v3 = 2;
      break;
    case 3uLL:
      if (v5 != 3) {
        goto LABEL_15;
      }
      char v6 = 1;
      unint64_t v3 = 3;
      break;
    case 4uLL:
      if (v5 != 4) {
        goto LABEL_15;
      }
      char v6 = 1;
      unint64_t v3 = 4;
      break;
    case 5uLL:
      if (v5 != 5) {
        goto LABEL_15;
      }
      char v6 = 1;
      unint64_t v3 = 5;
      break;
    default:
      if (v5 >= 6)
      {
        if (v2 == v4 && v3 == v5) {
          char v6 = 1;
        }
        else {
          char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
      else
      {
LABEL_15:
        char v6 = 0;
      }
      outlined copy of SignatureDescription(v4, v5);
      outlined copy of SignatureDescription(v2, v3);
      break;
  }
  outlined consume of SignatureDescription(v2, v3);
  outlined consume of SignatureDescription(v4, v5);
  return v6 & 1;
}

unint64_t lazy protocol witness table accessor for type [SignatureDescription] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SignatureDescription] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SignatureDescription] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [SignatureDescription]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SignatureDescription] and conformance [A]);
  }
  return result;
}

unint64_t destroy for SignatureDescription(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SignatureDescription(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for SignatureDescription(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SignatureDescription(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignatureDescription(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF9 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 5;
  if (v4 >= 7) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SignatureDescription(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 5;
    }
  }
  return result;
}

uint64_t getEnumTag for SignatureDescription(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for SignatureDescription(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SignatureDescription()
{
  return &type metadata for SignatureDescription;
}

id CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:)(void *a1, char *a2, char a3, char a4)
{
  id v5 = specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:)(a1, a2, a3, a4);

  return v5;
}

double CanvasElementViewController<>.imageSize.getter()
{
  unint64_t v1 = (id *)(v0 + direct field offset for CanvasElementViewController.image);
  swift_beginAccess();
  if (!*v1) {
    return 0.0;
  }
  objc_msgSend(*v1, sel_size);
  return result;
}

void CanvasElementViewController<>.updateImageZoomScale(in:animated:zoomable:)(char a1, char a2, double a3, double a4)
{
  double v6 = CanvasElementViewController<>.preferredZoomScale(in:zoomable:)(a2, a3, a4);
  unint64_t v7 = (char **)(v4 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v8 = *(void **)&(*v7)[direct field offset for CanvasView.canvasScrollView];
  if (!v8)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  objc_msgSend(v8, sel_setMinimumZoomScale_, v6);
  uint64_t v9 = *v7;
  if (*v7)
  {
    uint64_t v10 = direct field offset for CanvasView.isZoomScaleAltered;
    if ((v9[direct field offset for CanvasView.isZoomScaleAltered] & 1) == 0)
    {
      Swift::String v11 = *(void **)&v9[direct field offset for CanvasView.canvasScrollView];
      if (v11)
      {
        BOOL v12 = v9;
        objc_msgSend(v11, sel_setZoomScale_animated_, a1 & 1, v6);
        v9[v10] = 0;

        return;
      }
LABEL_10:
      __break(1u);
    }
  }
}

double static CanvasElementViewController<>.zoomToFitZoomScale(_:in:)(double a1, double a2, double a3, double a4)
{
  double v4 = a3 / a1;
  double v5 = a4 / a2;
  if (v5 < v4) {
    double v4 = v5;
  }
  return fmax(v4, 0.0001);
}

double CanvasElementViewController<>.preferredZoomScale(in:zoomable:)(char a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::String v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  Swift::String_optional v14 = &v27[-v13];
  Swift::String v15 = (void *)(v4 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v15)
  {
    uint64_t v16 = *(void *)(*v15 + direct field offset for Canvas.paperView)
        + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(*v15 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v16, v8);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v14, v11, v8);
    swift_getKeyPath();
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_2(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    Capsule<>.subscript.getter();
    swift_release();
    double v17 = v28;
    double v18 = v29;
    if ((a1 & 1) == 0)
    {
      BOOL v19 = (id *)(v4 + direct field offset for CanvasElementViewController.image);
      swift_beginAccess();
      if (*v19)
      {
        objc_msgSend(*v19, sel_size);
        if (v20 >= a2) {
          goto LABEL_13;
        }
      }
      else if (a2 <= 0.0)
      {
        goto LABEL_13;
      }
      if (*v19)
      {
        objc_msgSend(*v19, sel_size);
        if (v22 < a3) {
          goto LABEL_10;
        }
      }
      else if (a3 > 0.0)
      {
LABEL_10:
        if (*v19) {
          objc_msgSend(*v19, sel_size);
        }
        else {
          double v23 = 0.0;
        }
        double v21 = 1.0;
        if (v17 < v23)
        {
          if (*v19) {
            objc_msgSend(*v19, sel_size);
          }
          else {
            double v26 = 0.0;
          }
          double v21 = v26 / v17;
        }
        goto LABEL_16;
      }
    }
LABEL_13:
    double v24 = a2 / v17;
    if (a3 / v18 < a2 / v17) {
      double v24 = a3 / v18;
    }
    double v21 = fmax(v24, 0.0001);
LABEL_16:
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v14, v8);
    return v21;
  }
  return 0.0;
}

void CanvasElementViewController<>.imageDescription.setter(uint64_t a1, uint64_t a2)
{
  double v5 = (void **)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  double v6 = (char *)*v5;
  if (*v5)
  {
    unint64_t v7 = *(char **)&v6[direct field offset for Canvas._canvasElementController];
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
    }
    else
    {
      uint64_t v10 = *(void **)&v6[direct field offset for CanvasView.canvasTiledView];
      if (!v10) {
        goto LABEL_17;
      }
      swift_getObjectType();
      uint64_t v11 = swift_conformsToProtocol2();
      uint64_t v12 = v11 ? v11 : 0;
      if (!(v11 ? v10 : 0)) {
        goto LABEL_17;
      }
      uint64_t ObjectType = swift_getObjectType();
      Swift::String v15 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
      uint64_t v16 = v6;
      id v17 = v10;
      uint64_t v9 = (char *)v15(ObjectType, v12);

      unint64_t v7 = 0;
    }
    double v18 = v7;

    BOOL v19 = &v9[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
    if (MEMORY[0x210550400](&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
    {
      uint64_t v20 = *((void *)v19 + 1);
      uint64_t v21 = swift_getObjectType();
      double v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v21, v20);
      swift_unknownObjectRelease();
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v22) + 0x428))(a1, a2);

        return;
      }
    }
  }
LABEL_17:
  swift_bridgeObjectRelease();
}

void *CanvasElementViewController.canvasView.getter()
{
  uint64_t v0 = (void *)specialized CanvasElementViewController.canvasView.getter();
  id v1 = v0;
  return v0;
}

uint64_t CanvasElementViewController.liveStreamMessenger.didset()
{
  id v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t *)(v0 + direct field offset for CanvasElementViewController.liveStreamMessenger);
    swift_beginAccess();
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    swift_unknownObjectRetain();
    id v7 = v3;
    specialized Canvas.liveStreamMessenger.setter(v6, v5);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CanvasElementViewController.liveStreamMessenger.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CanvasElementViewController.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized CanvasElementViewController.liveStreamMessenger.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*CanvasElementViewController.liveStreamMessenger.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.liveStreamMessenger.modify;
}

uint64_t CanvasElementViewController.liveStreamMessenger.modify(uint64_t a1, char a2)
{
  return CanvasElementViewController.liveStreamMessenger.modify(a1, a2, (uint64_t (*)(uint64_t))CanvasElementViewController.liveStreamMessenger.didset);
}

uint64_t key path setter for CanvasElementViewController.liveStreamMessenger : <A>CanvasElementViewController<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = swift_unknownObjectRetain();
  a5(v7, v6);
  return swift_unknownObjectRelease();
}

uint64_t CanvasElementViewController.participantDetailsDataSource.didset()
{
  uint64_t v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  uint64_t result = swift_beginAccess();
  uint64_t v3 = (char *)*v1;
  if (*v1)
  {
    uint64_t v4 = v0 + direct field offset for CanvasElementViewController.participantDetailsDataSource;
    swift_beginAccess();
    MEMORY[0x210550400](v4);
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = &v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource];
    swift_beginAccess();
    *((void *)v6 + 1) = v5;
    swift_unknownObjectWeakAssign();
    uint64_t v7 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView];
    uint64_t v8 = v3;
    objc_msgSend(v7, sel_setNeedsLayout);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CanvasElementViewController.participantDetailsDataSource.getter()
{
  return PaperDocumentViewController.delegate.getter(&direct field offset for CanvasElementViewController.participantDetailsDataSource);
}

uint64_t CanvasElementViewController.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  specialized CanvasElementViewController.participantDetailsDataSource.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*CanvasElementViewController.participantDetailsDataSource.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for CanvasElementViewController.participantDetailsDataSource;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return CanvasElementViewController.participantDetailsDataSource.modify;
}

void CanvasElementViewController.participantDetailsDataSource.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    CanvasElementViewController.participantDetailsDataSource.didset();
  }
  free(v3);
}

id CanvasElementViewController.showParticipantCursors.didset()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  id result = (id)swift_beginAccess();
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (char *)(v0 + direct field offset for CanvasElementViewController.showParticipantCursors);
    swift_beginAccess();
    char v5 = *v4;
    uint64_t v6 = (unsigned char *)(v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
    swift_beginAccess();
    unsigned char *v6 = v5;
    return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
  }
  return result;
}

uint64_t CanvasElementViewController.showParticipantCursors.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

uint64_t CanvasElementViewController.showParticipantCursors.setter(char a1)
{
  return CanvasElementViewController.showParticipantCursors.setter(a1, &direct field offset for CanvasElementViewController.showParticipantCursors, (uint64_t (*)(uint64_t))CanvasElementViewController.showParticipantCursors.didset);
}

uint64_t (*CanvasElementViewController.showParticipantCursors.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.showParticipantCursors.modify;
}

uint64_t CanvasElementViewController.showParticipantCursors.modify(uint64_t a1, char a2)
{
  return CanvasElementViewController.liveStreamMessenger.modify(a1, a2, (uint64_t (*)(uint64_t))CanvasElementViewController.showParticipantCursors.didset);
}

uint64_t CanvasElementViewController.liveStreamMessenger.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t CanvasElementViewController.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

uint64_t CanvasElementViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  specialized CanvasElementViewController.delegate.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*CanvasElementViewController.delegate.modify(uint64_t *a1))(uint64_t *a1)
{
  a1[2] = v1;
  *a1 = CanvasElementViewController.delegate.getter();
  a1[1] = v3;
  return CanvasElementViewController.delegate.modify;
}

uint64_t CanvasElementViewController.delegate.modify(uint64_t *a1)
{
  specialized CanvasElementViewController.delegate.setter(*a1, a1[1]);
  return swift_unknownObjectRelease();
}

uint64_t CanvasElementViewController.mediaAnalysisObserver.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for CanvasElementViewController.mediaAnalysisObserver) = a1;
  return swift_release();
}

void CanvasElementViewController.editingMode.didset(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v4 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v55 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = *a1;
  CanvasElementViewController.updateToolPickerVisibility()();
  uint64_t v7 = (void **)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (*v7)
  {
    uint64_t v9 = (unsigned __int8 *)(v2 + direct field offset for CanvasElementViewController.editingMode);
    swift_beginAccess();
    v59[0] = *v9;
    id v10 = v8;
    CanvasView.editingMode.setter(v59);
  }
  CanvasElementViewController.updatePlusButton()();
  uint64_t v11 = (unsigned char *)(v2 + direct field offset for CanvasElementViewController.editingMode);
  swift_beginAccess();
  if (*v11 == 1 && v6 != 1)
  {
    uint64_t v13 = (void *)(v2 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    if (*v13)
    {
      id v14 = Canvas.editingView.getter();
      uint64_t v16 = v15;
      uint64_t ObjectType = swift_getObjectType();
      double v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 144))(ObjectType, v16);

      if (v18)
      {
        uint64_t v51 = v4;
        unint64_t v19 = FormFillingView.formFields.getter();
        unint64_t v20 = v19;
        if (v19 >> 62) {
          goto LABEL_41;
        }
        uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        while (1)
        {
          uint64_t v50 = v2;
          uint64_t v49 = v18;
          if (!v21) {
            break;
          }
          unint64_t v54 = v20 & 0xC000000000000001;
          uint64_t v53 = (void (**)(char *, char *, uint64_t))(v51 + 16);
          uint64_t v52 = (void (**)(char *, uint64_t))(v51 + 8);
          uint64_t v2 = 4;
          uint64_t v22 = v56;
          while (1)
          {
            double v18 = (void *)(v2 - 4);
            id v23 = v54 ? (id)MEMORY[0x21054E050](v2 - 4, v20) : *(id *)(v20 + 8 * v2);
            double v24 = v23;
            uint64_t v25 = v2 - 3;
            if (__OFADD__(v18, 1)) {
              break;
            }
            type metadata accessor for ShapeView();
            double v26 = (void *)swift_dynamicCastClass();
            if (v26)
            {
              Swift::String v27 = (char *)v26 + *(void *)((*MEMORY[0x263F8EED0] & *v26) + 0x380);
              swift_beginAccess();
              uint64_t v28 = v21;
              double v29 = v55;
              (*v53)(v55, v27, v22);
              swift_getKeyPath();
              _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
              id v30 = v24;
              Capsule<>.subscript.getter();
              swift_release();
              Swift::String_optional v31 = v29;
              uint64_t v21 = v28;
              (*v52)(v31, v22);
              Swift::String v32 = v30;

              if (v57 != 1 && v57 != 50)
              {
                swift_bridgeObjectRelease_n();
LABEL_23:
                double v18 = v49;
                goto LABEL_25;
              }
            }

            ++v2;
            if (v25 == v21)
            {
              swift_bridgeObjectRelease_n();
              Swift::String v32 = 0;
              goto LABEL_23;
            }
          }
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        }
        swift_bridgeObjectRelease_n();
        Swift::String v32 = 0;
LABEL_25:
        unint64_t v33 = FormFillingView.formFields.getter();
        unint64_t v20 = v33;
        uint64_t v34 = v51;
        if (v33 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v53 = (void (**)(char *, char *, uint64_t))_CocoaArrayWrapper.endIndex.getter();
          if (v53) {
            goto LABEL_27;
          }
        }
        else
        {
          Swift::String v35 = *(void (***)(char *, char *, uint64_t))((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v53 = v35;
          if (v35)
          {
LABEL_27:
            uint64_t v48 = v32;
            unint64_t v54 = v20 & 0xC000000000000001;
            uint64_t v52 = (void (**)(char *, uint64_t))(v34 + 16);
            Swift::String_optional v36 = (void (**)(char *, uint64_t))(v34 + 8);
            uint64_t v2 = 4;
            Swift::String v37 = v55;
            while (1)
            {
              double v18 = (void *)(v2 - 4);
              if (v54) {
                id v38 = (id)MEMORY[0x21054E050](v2 - 4, v20);
              }
              else {
                id v38 = *(id *)(v20 + 8 * v2);
              }
              id v39 = v38;
              uint64_t v40 = (void (**)(char *, char *, uint64_t))(v2 - 3);
              if (__OFADD__(v18, 1)) {
                goto LABEL_40;
              }
              type metadata accessor for ShapeView();
              Swift::String v41 = (void *)swift_dynamicCastClass();
              if (!v41) {
                break;
              }
              Swift::String v42 = (char *)v41 + *(void *)((*MEMORY[0x263F8EED0] & *v41) + 0x380);
              swift_beginAccess();
              unint64_t v43 = v20;
              uint64_t v44 = v56;
              ((void (*)(char *, char *, uint64_t))*v52)(v37, v42, v56);
              swift_getKeyPath();
              _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
              id v45 = v39;
              Capsule<>.subscript.getter();
              swift_release();
              uint64_t v46 = v44;
              unint64_t v20 = v43;
              (*v36)(v37, v46);

              if (v58 != 50) {
                break;
              }

              ++v2;
              if (v40 == v53)
              {
                swift_bridgeObjectRelease_n();
                id v39 = 0;
                goto LABEL_37;
              }
            }
            swift_bridgeObjectRelease_n();
LABEL_37:
            double v18 = v49;
            Swift::String v32 = v48;
            if (v48) {
              goto LABEL_46;
            }
            goto LABEL_44;
          }
        }
        swift_bridgeObjectRelease_n();
        id v39 = 0;
        if (!v32)
        {
LABEL_44:
          if (!v39)
          {
            id v39 = v18;
            goto LABEL_47;
          }
          id v39 = v39;
          Swift::String v32 = v39;
        }
LABEL_46:
        objc_msgSend(v32, sel_becomeFirstResponder);

LABEL_47:
      }
    }
  }
  CanvasElementViewController.updateActionInfoViewVisibility()();
}

uint64_t CanvasElementViewController.editingMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for CanvasElementViewController.editingMode);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void CanvasElementViewController.editingMode.setter(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)(v1 + direct field offset for CanvasElementViewController.editingMode);
  swift_beginAccess();
  unsigned __int8 v4 = *v3;
  *uint64_t v3 = v2;
  unsigned __int8 v5 = v4;
  CanvasElementViewController.editingMode.didset(&v5);
}

void (*CanvasElementViewController.editingMode.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  unsigned __int8 v4 = (unsigned char *)(v1 + direct field offset for CanvasElementViewController.editingMode);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = *v4;
  return CanvasElementViewController.editingMode.modify;
}

void CanvasElementViewController.editingMode.modify(uint64_t a1, char a2)
{
  unsigned __int8 v2 = *(void **)a1;
  if (a2)
  {
    char v4 = *(unsigned char *)(*(void *)a1 + 32);
    uint64_t v3 = (unsigned __int8 *)&v4;
  }
  else
  {
    char v5 = *(unsigned char *)(*(void *)a1 + 32);
    uint64_t v3 = (unsigned __int8 *)&v5;
  }
  CanvasElementViewController.editingMode.setter(v3);
  free(v2);
}

void CanvasElementViewController.updateActionInfoViewVisibility()()
{
  CanvasElementViewController.imageView.getter();
  if (v1)
  {
    unsigned __int8 v2 = v1;
    uint64_t v3 = (unsigned char *)(v0 + direct field offset for CanvasElementViewController.editingMode);
    swift_beginAccess();
    if (*v3 == 3)
    {
      BOOL v4 = 1;
    }
    else
    {
      char v5 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.editingMode);
      swift_beginAccess();
      BOOL v4 = *v5 == 1;
    }
    uint64_t v6 = direct field offset for ImageElementView.mediaView;
    uint64_t v7 = *(void **)&v2[direct field offset for ImageElementView.mediaView];
    if (v7)
    {
      id v8 = objc_msgSend(v7, sel_imageAnalysisContext);
      if (v8)
      {
        objc_msgSend(v8, sel_setActionInfoViewHidden_animated_, v4, 0);
        swift_unknownObjectRelease();
      }
    }
    if (v4
      && (uint64_t v9 = *(void **)&v2[v6]) != 0
      && (id v10 = objc_msgSend(v9, sel_imageAnalysisContext)) != 0)
    {
      objc_msgSend(v10, sel_setHighlightSelectableItemsEnabled_, 0);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

id CanvasElementViewController.drawingGestureRecognizer.getter()
{
  uint64_t v1 = (void *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v1) {
    return 0;
  }
  id result = (id)specialized CanvasView.tiledView.getter();
  if (result) {
    return objc_msgSend(result, sel_drawingGestureRecognizer);
  }
  return result;
}

id CanvasElementViewController.drawingPolicy.getter()
{
  uint64_t v1 = (id *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v1) {
    return 0;
  }
  id v2 = *v1;
  id v3 = CanvasView.drawingPolicy.getter();

  return v3;
}

void CanvasElementViewController.drawingPolicy.setter(uint64_t a1)
{
}

void (*CanvasElementViewController.drawingPolicy.modify(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = CanvasElementViewController.drawingPolicy.getter();
  return CanvasElementViewController.drawingPolicy.modify;
}

void CanvasElementViewController.drawingPolicy.modify(uint64_t *a1)
{
}

uint64_t CanvasElementViewController.canvasSubscribeCancellable.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for CanvasElementViewController.canvasSubscribeCancellable) = a1;
  return swift_release();
}

void *CanvasElementViewController.image.getter()
{
  uint64_t v0 = (void *)specialized CanvasElementViewController.image.getter();
  id v1 = v0;
  return v0;
}

void CanvasElementViewController.image.setter(void *a1)
{
  id v3 = (void **)(v1 + direct field offset for CanvasElementViewController.image);
  swift_beginAccess();
  BOOL v4 = *v3;
  *id v3 = a1;
}

uint64_t (*CanvasElementViewController.image.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

void CanvasElementViewController.__ivar_destroyer()
{
  swift_unknownObjectRelease();
  outlined destroy of weak AnyContainerCanvasElementView?(v0 + direct field offset for CanvasElementViewController.participantDetailsDataSource);
  swift_release();
  swift_release();
  swift_release();

  outlined destroy of weak AnyContainerCanvasElementView?(v0 + direct field offset for CanvasElementViewController.formDelegate);
  uint64_t v1 = *(void **)(v0 + direct field offset for CanvasElementViewController.analysis);
}

id CanvasElementViewController.__deallocating_deinit()
{
  char v3 = 1;
  PassthroughSubject.send(completion:)();
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for CanvasElementViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id @objc CanvasElementViewController.__deallocating_deinit(void *a1)
{
  id v1 = a1;
  return CanvasElementViewController.__deallocating_deinit();
}

void @objc CanvasElementViewController.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectRelease();
  outlined destroy of weak AnyContainerCanvasElementView?(a1 + direct field offset for CanvasElementViewController.participantDetailsDataSource);
  swift_release();
  swift_release();
  swift_release();

  outlined destroy of weak AnyContainerCanvasElementView?(a1 + direct field offset for CanvasElementViewController.formDelegate);
  objc_super v2 = *(void **)(a1 + direct field offset for CanvasElementViewController.analysis);
}

id CanvasElementViewController.__allocating_init(context:allowsEditing:allowMediaCanvasElements:transparentBackground:)(void *a1, int a2, char a3, char a4)
{
  if (a2 == 2) {
    char v5 = 3;
  }
  else {
    char v5 = (a2 << 31 >> 31) & 3;
  }
  char v8 = v5;
  id v6 = specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(a1, &v8, a3, a4, 1, 0, 0);

  return v6;
}

Swift::Void __swiftcall CanvasElementViewController.updateToolPickerVisibility()()
{
  uint64_t v1 = v0;
  objc_super v2 = (id *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v2)
  {
    id v3 = *v2;
    id v4 = CanvasView.activeToolPicker.getter();
    if (v4)
    {
      char v5 = v4;
      id v6 = (unsigned __int8 *)(v1 + direct field offset for CanvasElementViewController.editingMode);
      swift_beginAccess();
      BOOL v7 = *v6 == 3;
      objc_msgSend(v5, sel_setVisible_forFirstResponder_, v7, v3);
      objc_msgSend(v5, sel_setVisible_forFirstResponder_, v7, v1);

      id v3 = v5;
    }
  }
}

void @objc CanvasElementViewController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized CanvasElementViewController.init(coder:)();
}

uint64_t CanvasElementViewController.tool.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v7 = (id *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v7)
  {
    id v8 = *v7;
    Canvas.tool.getter((uint64_t *)v13);

    return outlined init with take of FindResult(v13, (uint64_t)a1);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F14A48], v3);
    id v10 = objc_msgSend(self, sel_blackColor);
    uint64_t v11 = type metadata accessor for PKInkingTool();
    uint64_t v12 = MEMORY[0x263F14A50];
    a1[3] = v11;
    a1[4] = v12;
    __swift_allocate_boxed_opaque_existential_1(a1);
    return PKInkingTool.init(_:color:width:)();
  }
}

uint64_t CanvasElementViewController.tool.setter(uint64_t a1)
{
  uint64_t v3 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (v4)
  {
    outlined init with copy of FindResult(a1, (uint64_t)v7);
    id v5 = v4;
    Canvas.tool.setter(v7);
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*CanvasElementViewController.tool.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  CanvasElementViewController.tool.getter(v3);
  return CanvasElementViewController.tool.modify;
}

void CanvasElementViewController.tool.modify(uint64_t *a1, char a2)
{
  objc_super v2 = (void *)*a1;
  if (a2)
  {
    outlined init with copy of FindResult(*a1, (uint64_t)v2 + 40);
    CanvasElementViewController.tool.setter((uint64_t)v2 + 40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    CanvasElementViewController.tool.setter(*a1);
  }
  free(v2);
}

void CanvasElementViewController.liveStreamDrawings.didset()
{
  uint64_t v1 = v0;
  objc_super v2 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v3 = (char *)*v2;
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)(v1 + direct field offset for CanvasElementViewController.liveStreamDrawings);
    swift_beginAccess();
    unsigned __int8 v5 = *v4;
    id v6 = (unsigned __int8 *)&v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
    swift_beginAccess();
    unsigned __int8 *v6 = v5;
    uint64_t v7 = specialized CanvasView.tiledView.getter();
    if (v7)
    {
      id v8 = (void *)v7;
      uint64_t v9 = v3;
      id v10 = (char *)objc_msgSend(v8, sel_canvasView);
      if (v10)
      {
        uint64_t v11 = v10;
        objc_msgSend(v10, sel_setGenerateLiveDrawing_, *v6);

        uint64_t v9 = v11;
      }
    }
  }
}

uint64_t CanvasElementViewController.liveStreamDrawings.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.liveStreamDrawings);
  swift_beginAccess();
  return *v1;
}

uint64_t CanvasElementViewController.liveStreamDrawings.setter(char a1)
{
  return CanvasElementViewController.showParticipantCursors.setter(a1, &direct field offset for CanvasElementViewController.liveStreamDrawings, (uint64_t (*)(uint64_t))CanvasElementViewController.liveStreamDrawings.didset);
}

uint64_t CanvasElementViewController.showParticipantCursors.setter(char a1, void *a2, uint64_t (*a3)(uint64_t))
{
  id v6 = (unsigned char *)(v3 + *a2);
  uint64_t v7 = swift_beginAccess();
  unsigned char *v6 = a1;
  return a3(v7);
}

uint64_t (*CanvasElementViewController.liveStreamDrawings.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.liveStreamDrawings.modify;
}

uint64_t CanvasElementViewController.liveStreamDrawings.modify(uint64_t a1, char a2)
{
  return CanvasElementViewController.liveStreamMessenger.modify(a1, a2, (uint64_t (*)(uint64_t))CanvasElementViewController.liveStreamDrawings.didset);
}

uint64_t @objc CanvasElementViewController.canBecomeFirstResponder.getter()
{
  return 1;
}

Swift::Bool __swiftcall CanvasElementViewController.becomeFirstResponder()()
{
  uint64_t v1 = (id *)&v0[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  if (*v1) {
    return objc_msgSend(*v1, sel_becomeFirstResponder);
  }
  v3.id receiver = v0;
  v3.Class super_class = (Class)type metadata accessor for CanvasElementViewController();
  return objc_msgSendSuper2(&v3, sel_becomeFirstResponder);
}

BOOL @objc CanvasElementViewController.becomeFirstResponder()(void *a1)
{
  id v1 = a1;
  Swift::Bool v2 = CanvasElementViewController.becomeFirstResponder()();

  return v2;
}

Swift::Bool __swiftcall CanvasElementViewController.resignFirstResponder()()
{
  id v1 = (id *)&v0[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  if (!*v1) {
    goto LABEL_5;
  }
  id v2 = *v1;
  if (!objc_msgSend(v2, sel_isFirstResponder))
  {

LABEL_5:
    v5.id receiver = v0;
    v5.Class super_class = (Class)type metadata accessor for CanvasElementViewController();
    return objc_msgSendSuper2(&v5, sel_resignFirstResponder);
  }
  unsigned __int8 v3 = objc_msgSend(v2, sel_resignFirstResponder);

  return v3;
}

BOOL @objc CanvasElementViewController.resignFirstResponder()(void *a1)
{
  id v1 = a1;
  Swift::Bool v2 = CanvasElementViewController.resignFirstResponder()();

  return v2;
}

Swift::Void __swiftcall CanvasElementViewController.viewDidLoad()()
{
  v1.id receiver = v0;
  v1.Class super_class = (Class)type metadata accessor for CanvasElementViewController();
  objc_msgSendSuper2(&v1, sel_viewDidLoad);
  objc_msgSend(v0, sel_setDefinesPresentationContext_, 1);
  CanvasElementViewController.setupKeyCommands()();
  CanvasElementViewController.updateToolPickerVisibility()();
}

void @objc CanvasElementViewController.viewDidLoad()(void *a1)
{
  id v1 = a1;
  CanvasElementViewController.viewDidLoad()();
}

Swift::Void __swiftcall CanvasElementViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  v3.id receiver = v1;
  v3.Class super_class = (Class)type metadata accessor for CanvasElementViewController();
  objc_msgSendSuper2(&v3, sel_viewWillDisappear_, a1);
  CanvasElementViewController.clearFormFillingFields()();
}

void @objc CanvasElementViewController.viewWillDisappear(_:)(void *a1, uint64_t a2, Swift::Bool a3)
{
  id v4 = a1;
  CanvasElementViewController.viewWillDisappear(_:)(a3);
}

id CanvasElementViewController.scrollView.getter()
{
  uint64_t v0 = (void *)specialized CanvasElementViewController.scrollView.getter();
  return v0;
}

id CanvasElementViewController.isSixChannelBlendingEnabled.didset()
{
  uint64_t v1 = v0;
  Swift::Bool v2 = (void *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  id result = (id)swift_beginAccess();
  if (*v2)
  {
    id result = (id)specialized CanvasView.tiledView.getter();
    if (result)
    {
      id v4 = result;
      objc_super v5 = (unsigned __int8 *)(v1 + direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled);
      swift_beginAccess();
      return objc_msgSend(v4, sel_setSixChannelBlending_, *v5);
    }
  }
  return result;
}

uint64_t CanvasElementViewController.isSixChannelBlendingEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t CanvasElementViewController.isSixChannelBlendingEnabled.setter(char a1)
{
  return CanvasElementViewController.showParticipantCursors.setter(a1, &direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled, (uint64_t (*)(uint64_t))CanvasElementViewController.isSixChannelBlendingEnabled.didset);
}

uint64_t (*CanvasElementViewController.isSixChannelBlendingEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.isSixChannelBlendingEnabled.modify;
}

uint64_t CanvasElementViewController.isSixChannelBlendingEnabled.modify(uint64_t a1, char a2)
{
  return CanvasElementViewController.liveStreamMessenger.modify(a1, a2, (uint64_t (*)(uint64_t))CanvasElementViewController.isSixChannelBlendingEnabled.didset);
}

uint64_t CanvasElementViewController.canEditVellumOpacity.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.canEditVellumOpacity);
  swift_beginAccess();
  return *v1;
}

void CanvasElementViewController.canEditVellumOpacity.setter(char a1)
{
}

void CanvasElementViewController.canEditDescription.setter(char a1, void *a2, void *a3, void *a4)
{
  uint64_t v9 = (unsigned char *)(v4 + *a2);
  swift_beginAccess();
  *uint64_t v9 = a1;
  CanvasElementViewController.canEditVellumOpacity.didset(a2, a3, a4);
}

void (*CanvasElementViewController.canEditVellumOpacity.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.canEditVellumOpacity.modify;
}

void CanvasElementViewController.canEditVellumOpacity.modify(uint64_t a1, char a2)
{
}

void CanvasElementViewController.canEditDescription.modify(uint64_t a1, char a2, void *a3, void *a4, void *a5)
{
  if ((a2 & 1) == 0) {
    CanvasElementViewController.canEditVellumOpacity.didset(a3, a4, a5);
  }
}

void CanvasElementViewController.imageView.getter()
{
  uint64_t v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  Swift::Bool v2 = *v1;
  if (!*v1) {
    return;
  }
  uint64_t v3 = specialized CanvasView.zoomView.getter();
  if (!v3) {
    return;
  }
  uint64_t v4 = (void *)v3;
  id v5 = v2;
  id v6 = v4;
  id v7 = objc_msgSend(v6, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();

    return;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v9 = (id)MEMORY[0x21054E050](0, v8);
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v9 = *(id *)(v8 + 32);
  }
  id v10 = v9;
  swift_bridgeObjectRelease();

  type metadata accessor for ImageElementView(0);
  if (!swift_dynamicCastClass()) {
}
  }

void CanvasElementViewController.isImageAnalysisEnabled.didset()
{
  CanvasElementViewController.imageView.getter();
  if (v1)
  {
    Swift::Bool v2 = v1;
    uint64_t v3 = (unsigned char *)(v0 + direct field offset for CanvasElementViewController.isImageAnalysisEnabled);
    swift_beginAccess();
    v2[direct field offset for ImageElementView.isImageAnalysisEnabled] = *v3;
    ImageElementView.updateMediaViewImageAnalysis()();
  }
}

uint64_t CanvasElementViewController.isImageAnalysisEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.isImageAnalysisEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t CanvasElementViewController.isImageAnalysisEnabled.setter(char a1)
{
  return CanvasElementViewController.showParticipantCursors.setter(a1, &direct field offset for CanvasElementViewController.isImageAnalysisEnabled, (uint64_t (*)(uint64_t))CanvasElementViewController.isImageAnalysisEnabled.didset);
}

uint64_t (*CanvasElementViewController.isImageAnalysisEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.isImageAnalysisEnabled.modify;
}

uint64_t CanvasElementViewController.isImageAnalysisEnabled.modify(uint64_t a1, char a2)
{
  return CanvasElementViewController.liveStreamMessenger.modify(a1, a2, (uint64_t (*)(uint64_t))CanvasElementViewController.isImageAnalysisEnabled.didset);
}

void CanvasElementViewController.canEditVellumOpacity.didset(void *a1, void *a2, void *a3)
{
  uint64_t v7 = v3;
  unint64_t v8 = (id *)(v3 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v8)
  {
    id v9 = *v8;
    id v10 = (unsigned char *)Canvas.canvasElementController.getter();

    if (v10)
    {
      uint64_t v11 = (char *)(v7 + *a1);
      swift_beginAccess();
      char v12 = *v11;
      v10[*a2] = *v11;
      uint64_t v13 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = ToolPickerController.textToolListViewController.getter();
        v15[*a3] = v12;
        TextToolListViewController.updateUI()();

        id v10 = v15;
      }
    }
  }
}

uint64_t CanvasElementViewController.canEditDescription.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.canEditDescription);
  swift_beginAccess();
  return *v1;
}

void CanvasElementViewController.canEditDescription.setter(char a1)
{
}

void (*CanvasElementViewController.canEditDescription.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.canEditDescription.modify;
}

void CanvasElementViewController.canEditDescription.modify(uint64_t a1, char a2)
{
}

uint64_t CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.getter()
{
  uint64_t v1 = (id *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v1) {
    return 0;
  }
  id v2 = *v1;
  uint64_t v3 = (unsigned __int8 *)Canvas.canvasElementController.getter();

  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden];

  return v4;
}

void CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.setter(char a1)
{
  uint64_t v3 = (id *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v3)
  {
    id v4 = *v3;
    id v5 = (unsigned char *)Canvas.canvasElementController.getter();

    if (v5)
    {
      v5[OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden] = a1 & 1;
    }
  }
}

void (*CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.getter() & 1;
  return CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.modify;
}

void CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.modify(uint64_t a1)
{
}

Swift::Void __swiftcall CanvasElementViewController.zoomIn()()
{
  id v1 = (id)specialized CanvasElementViewController.scrollView.getter();
  objc_msgSend(v1, sel_zoomScale);
  objc_msgSend(v1, sel_setZoomScale_, v0 * 1.25);
}

void @objc CanvasElementViewController.zoomIn()(void *a1)
{
  id v1 = a1;
  CanvasElementViewController.zoomIn()();
}

Swift::Void __swiftcall CanvasElementViewController.zoomOut()()
{
  id v1 = (id)specialized CanvasElementViewController.scrollView.getter();
  objc_msgSend(v1, sel_zoomScale);
  objc_msgSend(v1, sel_setZoomScale_, v0 / 1.25);
}

void @objc CanvasElementViewController.zoomOut()(void *a1)
{
  id v1 = a1;
  CanvasElementViewController.zoomOut()();
}

Swift::Void __swiftcall CanvasElementViewController.setupKeyCommands()()
{
  id v1 = (void *)MEMORY[0x21054D080](62, 0xE100000000000000);
  id v2 = self;
  id v3 = objc_msgSend(v2, sel_keyCommandWithInput_modifierFlags_action_, v1, 0x100000, sel_zoomIn);

  id v4 = (void *)MEMORY[0x21054D080](0x6E49206D6F6F5ALL, 0xE700000000000000);
  objc_msgSend(v3, sel_setTitle_, v4);

  objc_msgSend(v0, sel_addKeyCommand_, v3);
  id v5 = (void *)MEMORY[0x21054D080](60, 0xE100000000000000);
  id v7 = objc_msgSend(v2, sel_keyCommandWithInput_modifierFlags_action_, v5, 0x100000, sel_zoomOut);

  id v6 = (void *)MEMORY[0x21054D080](0x6E49206D6F6F5ALL, 0xE700000000000000);
  objc_msgSend(v7, sel_setTitle_, v6);

  objc_msgSend(v0, sel_addKeyCommand_, v7);
}

id CanvasElementViewController.updateViewForPaper(_:)(uint64_t a1)
{
  uint64_t v204 = a1;
  uint64_t v185 = *MEMORY[0x263F8EED0] & *(void *)v1;
  uint64_t v2 = v185;
  uint64_t v3 = type metadata accessor for CRAssetOrData();
  uint64_t v181 = *(void *)(v3 - 8);
  uint64_t v182 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v179 = (uint64_t *)((char *)&v179 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v191 = (char *)&v179 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v180);
  uint64_t v183 = (char *)&v179 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v190 = (char *)&v179 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v188 = *(void *)(v10 - 8);
  uint64_t v189 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v187 = (uint64_t)&v179 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v192 = v12;
  uint64_t v193 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v184 = (char *)&v179 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CRKeyPath();
  uint64_t v198 = *(void *)(v15 - 8);
  uint64_t v199 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v197 = (char *)&v179 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v196 = (char *)&v179 - v18;
  uint64_t v19 = *(void *)(v2 + 120);
  uint64_t v202 = *(uint64_t (**)(ValueMetadata *, uint64_t))(v2 + 128);
  uint64_t v20 = *((void *)v202 + 2);
  uint64_t v200 = v19;
  uint64_t v194 = v20;
  uint64_t v21 = type metadata accessor for Capsule();
  uint64_t v205 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v186 = (uint64_t)&v179 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v195 = (uint64_t)&v179 - v24;
  MEMORY[0x270FA5388](v25);
  long long v201 = (ValueMetadata *)((char *)&v179 - v26);
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  id v30 = (char *)&v179 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  unint64_t v33 = (char *)&v179 - v32;
  unint64_t v203 = v1;
  uint64_t v34 = (uint64_t *)&v1[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  uint64_t v35 = *v34;
  Swift::String_optional v36 = *(void (**)(char *))(v28 + 16);
  uint64_t v37 = v204;
  v36(v33);
  if (v35 && (*(unsigned int (**)(char *, uint64_t, uint64_t))(v205 + 48))(v33, 1, v21) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v27);
    id v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
    id v39 = v203;
    objc_msgSend(v203, sel_setView_, v38);

    specialized CanvasElementViewController.canvasView.setter(0);
    id result = (id)CanvasElementViewController.delegate.getter();
    if (result)
    {
      uint64_t v42 = v41;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v39, ObjectType, v42);
      return (id)swift_unknownObjectRelease();
    }
    return result;
  }
  uint64_t v44 = *(void (**)(char *, uint64_t))(v28 + 8);
  v44(v33, v27);
  ((void (*)(char *, uint64_t, uint64_t))v36)(v30, v37, v27);
  uint64_t v45 = v205;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v205 + 48))(v30, 1, v21) == 1) {
    return (id)((uint64_t (*)(char *, uint64_t))v44)(v30, v27);
  }
  uint64_t v46 = v21;
  uint64_t v47 = v201;
  (*(void (**)(ValueMetadata *, char *, uint64_t))(v45 + 32))(v201, v30, v21);
  uint64_t v48 = v203;
  uint64_t v49 = (void **)&v203[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  uint64_t v50 = *v49;
  if (v50)
  {
    uint64_t v51 = v195;
    Canvas.updatablePaper2.getter(v195);
    id v52 = v50;
    uint64_t v53 = v196;
    Capsule<>.rootID.getter();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v51, v46);
    unint64_t v54 = v197;
    Capsule<>.rootID.getter();
    char v55 = static CRKeyPath.== infix(_:_:)();
    uint64_t v56 = *(void (**)(char *, uint64_t))(v198 + 8);
    char v57 = v54;
    uint64_t v58 = v199;
    v56(v57, v199);
    v56(v53, v58);
    if (v55)
    {
      v207[0] = 3;
      AnyCanvas.merge<A>(_:from:)((uint64_t)v47, v207, v200, v194);

      uint64_t v48 = v203;
    }
    else
    {
      uint64_t v48 = v203;
      specialized CanvasElementViewController.canvasView.setter(0);
    }
  }
  uint64_t v59 = &v48[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  if (*(void *)v59) {
    return (id)(*(uint64_t (**)(ValueMetadata *, uint64_t))(v45 + 8))(v47, v46);
  }
  id v60 = *(id *)&v48[direct field offset for CanvasElementViewController.context];
  id result = objc_msgSend(v48, sel_view);
  if (!result)
  {
    __break(1u);
    return result;
  }
  CGRect v61 = result;
  uint64_t v199 = *(void *)(v185 + 136);
  type metadata accessor for CanvasView();
  objc_msgSend(v61, sel_bounds);
  double v63 = v62;
  double v65 = v64;
  double v67 = v66;
  double v69 = v68;

  uint64_t v70 = (unsigned __int8 *)&v48[direct field offset for CanvasElementViewController.editingMode];
  swift_beginAccess();
  v207[0] = *v70;
  LOBYTE(v70) = v48[direct field offset for CanvasElementViewController.allowMediaCanvasElements];
  char v71 = v48[direct field offset for CanvasElementViewController.transparentBackground];
  CGFloat v72 = v48;
  specialized CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(v60, v47, v207, (char)v70, v71, v48, v63, v65, v67, v69);
  uint64_t v74 = v73;
  CGFloat v75 = (unsigned __int8 *)&v72[direct field offset for CanvasElementViewController.liveStreamDrawings];
  swift_beginAccess();
  unsigned __int8 v76 = *v75;
  uint64_t v77 = (unsigned __int8 *)&v74[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
  swift_beginAccess();
  *uint64_t v77 = v76;
  uint64_t v78 = specialized CanvasView.tiledView.getter();
  if (v78)
  {
    uint64_t v79 = (void *)v78;
    uint64_t v80 = v74;
    uint64_t v81 = (char *)objc_msgSend(v79, sel_canvasView);
    if (v81)
    {
      unint64_t v82 = v81;
      objc_msgSend(v81, sel_setGenerateLiveDrawing_, *v77);

      uint64_t v80 = v82;
    }
  }
  id v83 = CanvasView.activeToolPicker.getter();
  if (v83)
  {
    uint64_t v84 = v83;
    CanvasView.registerToolPickerObservers(_:)((PKToolPicker)v83);
  }
  uint64_t v85 = (uint64_t *)&v72[direct field offset for CanvasElementViewController.liveStreamMessenger];
  swift_beginAccess();
  uint64_t v87 = *v85;
  uint64_t v86 = v85[1];
  swift_unknownObjectRetain();
  uint64_t v88 = v74;
  specialized Canvas.liveStreamMessenger.setter(v87, v86);

  swift_unknownObjectRelease();
  CanvasElementViewController.participantDetailsDataSource.getter();
  uint64_t v90 = v89;
  uint64_t v91 = &v88[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource];
  swift_beginAccess();
  *((void *)v91 + 1) = v90;
  swift_unknownObjectWeakAssign();
  uint64_t v92 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView;
  id v93 = *(void **)&v88[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView];
  uint64_t v94 = v88;
  objc_msgSend(v93, sel_setNeedsLayout);

  swift_unknownObjectRelease();
  unint64_t v95 = &v72[direct field offset for CanvasElementViewController.showParticipantCursors];
  swift_beginAccess();
  LOBYTE(v93) = *v95;
  uint64_t v96 = &v94[OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors];
  swift_beginAccess();
  *uint64_t v96 = (char)v93;
  objc_msgSend(*(id *)&v88[v92], sel_setNeedsLayout);
  if (CanvasElementViewController.delegate.getter()) {
    uint64_t v98 = *(void *)(v97 + 8);
  }
  else {
    uint64_t v98 = 0;
  }
  uint64_t v99 = &v94[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
  swift_beginAccess();
  *((void *)v99 + 1) = v98;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  uint64_t v100 = specialized CanvasView.tiledView.getter();
  if (v100)
  {
    uint64_t v101 = (void *)v100;
    uint64_t v102 = (unsigned __int8 *)&v72[direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled];
    swift_beginAccess();
    objc_msgSend(v101, sel_setSixChannelBlending_, *v102);
  }
  uint64_t v103 = v94;
  uint64_t v104 = (unsigned char *)Canvas.canvasElementController.getter();

  if (v104)
  {
    double v105 = &v72[direct field offset for CanvasElementViewController.canEditDescription];
    swift_beginAccess();
    char v106 = *v105;
    v104[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditDescription] = *v105;
    double v107 = *(void **)&v104[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    if (v107)
    {
      id v108 = v107;
      double v109 = ToolPickerController.textToolListViewController.getter();
      v109[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible] = v106;
      TextToolListViewController.updateUI()();

      uint64_t v104 = v109;
    }
  }
  double v110 = v103;
  uint64_t v111 = (unsigned char *)Canvas.canvasElementController.getter();

  if (v111)
  {
    uint64_t v112 = &v72[direct field offset for CanvasElementViewController.canEditVellumOpacity];
    swift_beginAccess();
    char v113 = *v112;
    v111[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity] = *v112;
    uint64_t v114 = *(void **)&v111[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    if (v114)
    {
      id v115 = v114;
      uint64_t v116 = ToolPickerController.textToolListViewController.getter();
      v116[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = v113;
      TextToolListViewController.updateUI()();

      uint64_t v111 = v116;
    }
  }
  uint64_t v204 = v46;
  uint64_t v117 = (void *)specialized CanvasView.tiledView.getter();
  if (v117) {
    objc_msgSend(v117, sel_setRulerHostingDelegate_, *(void *)&v72[direct field offset for CanvasElementViewController._rulerHostingDelegate]);
  }
  uint64_t v118 = self;
  id v119 = objc_msgSend(v118, sel_mainBundle);
  id v120 = objc_msgSend(v119, sel_bundleIdentifier);

  if (v120)
  {
    uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v123 = v122;

    if (v121 == 0xD000000000000011 && v123 == 0x800000020C8555B0)
    {
LABEL_42:
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
    char v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v124)
    {
LABEL_43:
      type metadata accessor for CanvasCalculateDocumentProxy();
      uint64_t v130 = swift_allocObject();
      *(unsigned char *)(v130 + 16) = 0;
      uint64_t v131 = MEMORY[0x263F8EE78];
      *(void *)(v130 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      unint64_t v132 = specialized Dictionary.init(dictionaryLiteral:)(v131);
      *(void *)(v130 + 40) = 0;
      *(void *)(v130 + 48) = 0;
      *(void *)(v130 + 32) = v132;
      *(void *)(v130 + 56) = specialized Dictionary.init(dictionaryLiteral:)(v131);
      *(void *)(v130 + 64) = 0;
      specialized CanvasView.calculateDocumentForTesting.setter(v130, (uint64_t)&protocol witness table for CanvasCalculateDocumentProxy);
      swift_release();
      goto LABEL_44;
    }
  }
  id v125 = objc_msgSend(v118, sel_mainBundle);
  id v126 = objc_msgSend(v125, sel_bundleIdentifier);

  if (v126)
  {
    uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v129 = v128;

    if (v127 != 0xD000000000000019 || v129 != 0x800000020C855590)
    {
      char v178 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v178 & 1) == 0) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_44:
  if (objc_msgSend(v72, sel_isFirstResponder)) {
    objc_msgSend(v110, sel_becomeFirstResponder);
  }
  objc_msgSend(v110, sel_setAutoresizingMask_, 18);
  objc_msgSend(v110, sel_setTranslatesAutoresizingMaskIntoConstraints_, 1);
  objc_msgSend(v72, sel_setView_, v110);
  CGRect v133 = v110;
  specialized CanvasElementViewController.canvasView.setter(v110);

  CanvasElementViewController.imageView.getter();
  if (v134)
  {
    uint64_t v135 = v134;
    uint64_t v136 = &v72[direct field offset for CanvasElementViewController.isImageAnalysisEnabled];
    swift_beginAccess();
    v135[direct field offset for ImageElementView.isImageAnalysisEnabled] = *v136;
    ImageElementView.updateMediaViewImageAnalysis()();
  }
  type metadata accessor for CanvasElementViewController.MediaAnalysisObserver();
  unint64_t v137 = (char *)specialized CanvasElementViewController.MediaAnalysisObserver.__allocating_init(viewController:)();
  CanvasElementViewController.imageView.getter();
  if (v138)
  {
    unint64_t v139 = v138;
    uint64_t v140 = swift_retain();
    specialized ImageElementView.addImageAnalysisObserver(_:)(v140, (uint64_t)v139);

    swift_release();
  }
  *(void *)&v72[direct field offset for CanvasElementViewController.mediaAnalysisObserver] = v137;
  swift_retain();
  swift_release();
  CanvasElementViewController.imageView.getter();
  unint64_t v203 = v137;
  if (v141
    && (uint64_t v142 = v141,
        id v143 = *(void **)&v141[direct field offset for ImageElementView.mediaView],
        id v144 = v143,
        v142,
        v143)
    && (id v145 = objc_msgSend(v144, sel_imageAnalysisContext), v144,
                                                                                                 v145))
  {
    id v146 = objc_msgSend(v145, sel_analysis);
    swift_unknownObjectRelease();
  }
  else
  {
    id v146 = 0;
  }
  CanvasElementViewController.analysis.setter(v146);
  uint64_t v147 = v133;
  uint64_t v148 = Canvas.publisher.getter();

  uint64_t v206 = v148;
  type metadata accessor for AnyPublisher();
  type metadata accessor for PassthroughSubject();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v149 = Publisher.subscribe<A>(_:)();
  swift_release();
  *(void *)&v72[direct field offset for CanvasElementViewController.canvasSubscribeCancellable] = v149;
  swift_release();
  if (CanvasElementViewController.delegate.getter())
  {
    uint64_t v151 = v150;
    uint64_t v152 = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v151 + 16))(v72, v152, v151);
    swift_unknownObjectRelease();
  }
  uint64_t v153 = v186;
  Canvas.updatablePaper2.getter(v186);
  uint64_t v154 = v187;
  uint64_t v155 = v204;
  Capsule<>.sharedCanvasElement.getter(v204, *(void *)(v199 + 8), v187);
  uint64_t v156 = v205 + 8;
  v157 = *(void (**)(uint64_t, uint64_t))(v205 + 8);
  v157(v153, v155);
  uint64_t v159 = v189;
  uint64_t v158 = v190;
  SharedTagged_9.tagged2.getter();
  uint64_t v160 = (uint64_t)v158;
  (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v154, v159);
  uint64_t v162 = v192;
  uint64_t v161 = v193;
  int v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v193 + 48))(v160, 1, v192);
  uint64_t v164 = (uint64_t)v191;
  if (v163 == 1)
  {
    v157((uint64_t)v201, v155);

    swift_release();
    return (id)outlined destroy of StocksKitCurrencyCache.Provider?(v160, &demangling cache variable for type metadata for Ref<Image>?);
  }
  else
  {
    uint64_t v202 = (uint64_t (*)(ValueMetadata *, uint64_t))v157;
    uint64_t v205 = v156;
    (*(void (**)(char *, uint64_t, uint64_t))(v161 + 32))(v184, v160, v162);
    uint64_t v165 = (uint64_t)v183;
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48))(v164, 1, v182) == 1)
    {

      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v164, &demangling cache variable for type metadata for CRAssetOrData?);
    }
    else
    {
      unint64_t v166 = v179;
      outlined init with copy of CRAssetOrData(v164, (uint64_t)v179);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v167 = v166;
        uint64_t v168 = *v166;
        uint64_t v169 = v164;
        unint64_t v171 = v167[1];
        uint64_t v170 = v167[2];
        unint64_t v172 = v167[3];
        outlined destroy of Image(v169, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
        outlined copy of Data._Representation(v170, v172);
        outlined consume of Data._Representation(v168, v171);
        outlined consume of Data._Representation(v170, v172);
        id v173 = objc_allocWithZone(MEMORY[0x263F827E8]);
        outlined copy of Data._Representation(v170, v172);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v175 = objc_msgSend(v173, sel_initWithData_, isa);
        outlined consume of Data._Representation(v170, v172);

        CanvasElementViewController.image.setter(v175);
        uint64_t v176 = v170;
        uint64_t v165 = (uint64_t)v183;
        unint64_t v177 = v172;
        uint64_t v161 = v193;
        outlined consume of Data._Representation(v176, v177);
      }
      else
      {
        outlined destroy of Image((uint64_t)v166, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
        outlined destroy of Image(v164, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      }

      swift_release();
      uint64_t v155 = v204;
    }
    outlined destroy of Image(v165, (uint64_t (*)(void))type metadata accessor for Image);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v184, v162);
    return (id)v202(v201, v155);
  }
}

Swift::Void __swiftcall CanvasElementViewController.createNavigationBack(tintColor:)(UIColor tintColor)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(self, sel_configurationWithPointSize_weight_scale_, 5, 2, 25.0);
  uint64_t v5 = (void *)MEMORY[0x21054D080](0x2E6E6F7276656863, 0xEC0000007466656CLL);
  id v6 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v5, v4);

  id v7 = objc_msgSend(self, sel_buttonWithType_, 0);
  objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v2, sel_close_, 64);
  objc_msgSend(v7, sel_setImage_forState_, v6, 0);
  uint64_t v8 = (void *)MEMORY[0x21054D080](1801675074, 0xE400000000000000);
  objc_msgSend(v7, sel_setTitle_forState_, v8, 0);

  objc_msgSend(v7, sel_setTitleColor_forState_, tintColor.super.isa, 0);
  uint64_t v9 = (id *)&v2[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  if (*v9) {
    objc_msgSend(*v9, sel_addSubview_, v7);
  }
  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v10 = objc_msgSend(v7, sel_leftAnchor);
  id v11 = objc_msgSend(v2, sel_view);
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = objc_msgSend(v11, sel_leftAnchor);

    id v14 = objc_msgSend(v10, sel_constraintEqualToAnchor_constant_, v13, 10.0);
    objc_msgSend(v14, sel_setActive_, 1);

    id v15 = objc_msgSend(v7, sel_topAnchor);
    id v16 = objc_msgSend(v2, sel_view);
    if (v16)
    {
      uint64_t v17 = v16;
      id v18 = objc_msgSend(v16, sel_safeAreaLayoutGuide);

      id v19 = objc_msgSend(v18, sel_topAnchor);
      id v20 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v19);

      objc_msgSend(v20, sel_setActive_, 1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id CanvasElementViewController.close(_:)()
{
  return objc_msgSend(v0, sel_dismissViewControllerAnimated_completion_, 1, 0);
}

uint64_t @objc CanvasElementViewController.close(_:)(void *a1)
{
  swift_unknownObjectRetain();
  id v2 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  CanvasElementViewController.close(_:)();

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
}

uint64_t CanvasElementViewController.rootElement.setter(uint64_t a1)
{
  return CanvasElementViewController.rootElement.setter(a1, (void (*)(void))specialized CanvasElementViewController.rootElement.setter);
}

uint64_t (*CanvasElementViewController.rootElement.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  type metadata accessor for Capsule();
  uint64_t v4 = type metadata accessor for Optional();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  CanvasElementViewController.rootElement.getter();
  return CanvasElementViewController.rootElement.modify;
}

uint64_t CanvasElementViewController.rootElement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v3)
  {
    Canvas.updatablePaper2.getter(a1);
    uint64_t v4 = type metadata accessor for Capsule();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 0, 1, v4);
  }
  else
  {
    uint64_t v6 = type metadata accessor for Capsule();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
}

uint64_t CanvasElementViewController.paper.setter(uint64_t a1)
{
  return CanvasElementViewController.rootElement.setter(a1, (void (*)(void))specialized CanvasElementViewController.paper.setter);
}

uint64_t CanvasElementViewController.rootElement.setter(uint64_t a1, void (*a2)(void))
{
  a2();
  type metadata accessor for Capsule();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(a1, v3);
}

void CanvasElementViewController.rootElement.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    CanvasElementViewController.updateViewForPaper(_:)((uint64_t)v3);
    id v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    CanvasElementViewController.updateViewForPaper(_:)(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

void CanvasElementViewController.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a1;
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v34 = a2;
  uint64_t v14 = type metadata accessor for Capsule();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v33 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v18);
  id v20 = (char *)&v30 - v19;
  uint64_t v21 = (void **)(v3 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v22 = *v21;
  if (*v21)
  {
    unsigned __int8 v36 = 3;
    id v23 = v22;
    AnyCanvas.merge<A>(_:from:)(v35, &v36, v34, v13);
  }
  else
  {
    uint64_t v24 = (uint64_t)v9;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v35, v14);
    char v25 = swift_dynamicCast();
    uint64_t v26 = v32;
    uint64_t v27 = v33;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
    uint64_t v29 = v31;
    if (v25)
    {
      v28(v12, 0, 1, v6);
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v20, v12, v6);
      (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v24, v20, v6);
      v28((char *)v24, 0, 1, v6);
      CanvasElementViewController.updateViewForPaper(_:)(v24);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v24, v26);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v6);
    }
    else
    {
      v28(v12, 1, 1, v6);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v26);
    }
  }
}

uint64_t CanvasElementViewController.publisher.getter()
{
  return AnyPublisher.init<A>(_:)();
}

Swift::Void __swiftcall CanvasElementViewController.updatePlusButton()()
{
  uint64_t v1 = v0;
  id v2 = (void *)(*MEMORY[0x263F8EED0] & *(void *)v0);
  uint64_t v3 = &v0[direct field offset for CanvasElementViewController.editingMode];
  swift_beginAccess();
  int v4 = *v3;
  uint64_t v5 = *(void **)&v1[direct field offset for CanvasElementViewController.plusButton];
  if (v4 == 1)
  {
    id v6 = objc_msgSend(*(id *)&v1[direct field offset for CanvasElementViewController.plusButton], sel_superview);

    if (v6) {
      objc_msgSend(v5, sel_removeFromSuperview);
    }
    uint64_t v7 = (id *)&v1[direct field offset for CanvasElementViewController.canvasView];
    swift_beginAccess();
    if (*v7) {
      objc_msgSend(*v7, sel_addSubview_, v5);
    }
    uint64_t v8 = (UIView *)objc_msgSend(v1, sel_view);
    if (v8)
    {
      uint64_t v9 = v8;
      FormPlusButtonView.setConstraintsBasedOn(_:)(v8);

      uint64_t v10 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v12 = v2[15];
      v11[2] = v12;
      uint64_t v13 = v2[16];
      v11[3] = v13;
      uint64_t v14 = v2[17];
      v11[4] = v14;
      v11[5] = v10;
      uint64_t v15 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v16 = (void *)swift_allocObject();
      v16[2] = v12;
      v16[3] = v13;
      v16[4] = v14;
      v16[5] = v15;
      swift_retain();
      swift_retain();
      FormPlusButtonView.setMenuWithActions(addTextBoxHandler:addSignatureHandler:)();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    objc_msgSend(*(id *)&v1[direct field offset for CanvasElementViewController.plusButton], sel_removeFromSuperview);
  }
}

void closure #1 in CanvasElementViewController.updatePlusButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v2);
  if (v3)
  {
    int v4 = (void *)v3;
    uint64_t v5 = (void *)(v3 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    if (*v5
      && (id v6 = Canvas.editingView.getter(),
          uint64_t v7 = (void *)MEMORY[0x263F8EED0],
          uint64_t v8 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x88))(),
          v6,
          v8))
    {
      id v9 = objc_msgSend(v4, sel_view);
      if (!v9)
      {
LABEL_13:
        __break(1u);
        return;
      }
      uint64_t v10 = v9;
      objc_msgSend(v9, sel_center);
      double v12 = v11;
      double v14 = v13;

      if (one-time initialization token for defaultFormFieldSize != -1) {
        swift_once();
      }
      long long v15 = static FormFillingView.defaultFormFieldSize;
      double v16 = v12 - *(double *)&static FormFillingView.defaultFormFieldSize * 0.5;
      double v17 = v14 - *((double *)&static FormFillingView.defaultFormFieldSize + 1) * 0.5;
      unint64_t v54 = *(uint64_t (**)(void))((*v7 & *v8) + 0x2F8);
      uint64_t v18 = (void *)v54();
      id v19 = objc_msgSend(v4, sel_view);
      objc_msgSend(v18, sel_convertRect_fromView_, v19, v16, v17, v15);
      CGFloat v21 = v20;
      CGFloat v23 = v22;
      CGFloat v25 = v24;
      CGFloat v27 = v26;

      LOBYTE(v55) = 1;
      specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v8, 0, 0, 0, 0, 1, (unsigned __int8 *)&v55, 0x7FFFFFFFFFFFFFFFLL, v21, v23, v25, v27, 1u, 0, 0xBu, 5u);
      uint64_t v29 = v28;
      uint64_t v30 = (void *)v54();
      uint64_t v32 = v31;
      uint64_t ObjectType = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20C835790;
      *(void *)(inited + 32) = v29;
      uint64_t v55 = inited;
      specialized Array._endMutation()();
      uint64_t v35 = v55;
      unsigned __int8 v36 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 176);
      id v37 = v29;
      v36(v35, 0, ObjectType, v32);
      swift_bridgeObjectRelease();

      id v38 = v37;
      uint64_t v39 = specialized CanvasMembers.init(_:)(v38);
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      LOBYTE(ObjectType) = v44;

      AnyCanvas.selection.setter(v39, v41, v43, ObjectType & 1);
      uint64_t v45 = (void *)v54();
      uint64_t v47 = v46;
      uint64_t v48 = swift_getObjectType();
      uint64_t v49 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v47 + 144))(v48, v47);

      if (v49)
      {
        uint64_t v50 = *(void *)&v49[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
        swift_retain();

        uint64_t v51 = *(void *)(v50 + 48);
        BOOL v52 = __OFADD__(v51, 1);
        uint64_t v53 = v51 + 1;
        if (!v52)
        {
          *(void *)(v50 + 48) = v53;
          swift_release();
          return;
        }
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
    }
  }
}

uint64_t closure #2 in CanvasElementViewController.updatePlusButton()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v8);
  if (result)
  {
    uint64_t v10 = (char *)result;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    double v11 = *(void **)&v10[direct field offset for CanvasElementViewController.plusButton];
    id v12 = v11;
    objc_msgSend(v12, sel_bounds);
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    uint64_t v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    double v22 = (void *)swift_allocObject();
    _OWORD v22[2] = a3;
    void v22[3] = a4;
    void v22[4] = a5;
    v22[5] = v21;
    swift_retain();
    specialized SignatureManager.showSignatures(_:_:_:_:)(v10, v11, (uint64_t)partial apply for closure #1 in closure #2 in CanvasElementViewController.updatePlusButton(), (uint64_t)v22, v14, v16, v18, v20);

    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x210550400](a2 + 16);
  if (v8)
  {
    id v9 = (void *)v8;
    if (a1
      && (uint64_t v10 = (void *)(v8 + direct field offset for CanvasElementViewController.canvasView),
          swift_beginAccess(),
          *v10))
    {
      double v11 = Canvas.editingView.getter();
      id v12 = (void *)MEMORY[0x263F8EED0];
      double v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x88))();
      id v14 = a1;

      if (v13)
      {
        type metadata accessor for SignatureManager();
        swift_initStaticObject();
        id v15 = objc_msgSend(v9, sel_view);
        if (v15)
        {
          CGFloat v16 = v15;
          objc_msgSend(v15, sel_center);
          double v18 = v17;
          double v20 = v19;

          SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)((uint64_t)v14, 0, 1, 0, 1, v18, v20);
          uint64_t v21 = *(void (**)(unsigned char *, uint64_t, void, void, uint64_t, uint64_t, _UNKNOWN **))((*v12 & *v13) + 0x490);
          uint64_t v22 = type metadata accessor for Signature();
          uint64_t v23 = _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
          v21(v7, 1, 0, 0, v22, v23, &protocol witness table for Signature);

          (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
        }
        else
        {
          __break(1u);
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
}

uint64_t CanvasElementViewController._rulerHostingDelegate.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = a1;
  return MEMORY[0x270F9A758]();
}

void CanvasElementViewController.rulerHostView.didset(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void **)(v1 + direct field offset for CanvasElementViewController.rulerHostView);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (a1)
  {
    if (!v5) {
      goto LABEL_5;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    id v6 = v5;
    id v7 = a1;
    char v8 = static NSObject.== infix(_:_:)();

    if (v8) {
      return;
    }
    uint64_t v5 = *v4;
    if (!*v4)
    {
LABEL_5:
      id v9 = *(void **)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate);
      *(void *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = 0;
      goto LABEL_8;
    }
  }
  else if (!v5)
  {
    return;
  }
  uint64_t v10 = (objc_class *)type metadata accessor for RulerHostingDelegate();
  double v11 = objc_allocWithZone(v10);
  swift_unknownObjectWeakInit();
  v11[OBJC_IVAR____TtC8PaperKit20RulerHostingDelegate_sharedRuler] = 1;
  swift_unknownObjectWeakAssign();
  v16.id receiver = v11;
  v16.Class super_class = v10;
  id v12 = v5;
  id v13 = objc_msgSendSuper2(&v16, sel_init);
  id v9 = *(void **)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate);
  *(void *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = v13;

LABEL_8:
  id v14 = (void *)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v14)
  {
    id v15 = (void *)specialized CanvasView.tiledView.getter();
    if (v15) {
      objc_msgSend(v15, sel_setRulerHostingDelegate_, *(void *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate));
    }
  }
}

void *CanvasElementViewController.rulerHostView.getter()
{
  double v0 = (void *)specialized CanvasElementViewController.rulerHostView.getter();
  id v1 = v0;
  return v0;
}

void CanvasElementViewController.rulerHostView.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + direct field offset for CanvasElementViewController.rulerHostView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  id v5 = a1;
  CanvasElementViewController.rulerHostView.didset(v4);
}

void (*CanvasElementViewController.rulerHostView.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = (void **)(v1 + direct field offset for CanvasElementViewController.rulerHostView);
  swift_beginAccess();
  id v5 = *v4;
  v3[3] = *v4;
  id v6 = v5;
  return CanvasElementViewController.rulerHostView.modify;
}

void CanvasElementViewController.rulerHostView.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (id *)(*(void *)a1 + 24);
  id v3 = *v4;
  if (a2)
  {
    id v5 = v3;
    CanvasElementViewController.rulerHostView.setter(v3);
  }
  else
  {
    CanvasElementViewController.rulerHostView.setter(*(void **)(*(void *)a1 + 24));
  }
  free(v2);
}

void CanvasElementViewController.MediaAnalysisObserver.contextAnalysisDidChange(_:)(void *a1)
{
  uint64_t v3 = MEMORY[0x210550400](v1 + 16);
  if (v3)
  {
    id v4 = (id)v3;
    CanvasElementViewController.analysis.setter(objc_msgSend(a1, sel_analysis));
  }
}

uint64_t @objc CanvasElementViewController.MediaAnalysisObserver.contextAnalysisDidChange(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_unknownObjectRetain();
  swift_retain();
  CanvasElementViewController.MediaAnalysisObserver.contextAnalysisDidChange(_:)(a3);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t CanvasElementViewController.formDelegate.getter()
{
  return PaperDocumentViewController.delegate.getter(&direct field offset for CanvasElementViewController.formDelegate);
}

uint64_t CanvasElementViewController.formDelegate.setter(uint64_t a1, uint64_t a2)
{
  specialized CanvasElementViewController.formDelegate.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*CanvasElementViewController.formDelegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for CanvasElementViewController.formDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

void CanvasElementViewController.analysis.didset(void *a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for CanvasElementViewController.analysis);
  if (!v2) {
    return;
  }
  uint64_t v3 = v1;
  if (a1)
  {
    if (v2 == a1) {
      return;
    }
  }
  uint64_t v5 = &unk_26ACB0000;
  uint64_t v6 = &selRef_allowsFingerDrawing;
  if (!CanvasElementViewController.formDelegate.getter())
  {
    id v18 = v2;
    goto LABEL_34;
  }
  uint64_t v35 = v4;
  id v7 = v2;
  id v8 = objc_msgSend(v7, sel_formRegions);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v7, sel_formRegions);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v36 = MEMORY[0x263F8EE78];
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_9:
      if (v12 < 1)
      {
        __break(1u);
        return;
      }
      for (uint64_t i = 0; i != v12; ++i)
      {
        if ((v11 & 0xC000000000000001) != 0) {
          id v14 = (id)MEMORY[0x21054E050](i, v11);
        }
        else {
          id v14 = *(id *)(v11 + 8 * i + 32);
        }
        id v15 = v14;
        if (!objc_msgSend(v14, sel_contentType) || objc_msgSend(v15, sel_contentType) == (id)1)
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v16 = v36;
      uint64_t v6 = &selRef_allowsFingerDrawing;
      uint64_t v5 = (void *)&unk_26ACB0000;
      uint64_t v17 = v34;
      if (v36 < 0) {
        goto LABEL_39;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v17 = v34;
  if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_27;
  }
LABEL_25:
  if ((v16 & 0x4000000000000000) != 0) {
    goto LABEL_39;
  }
  uint64_t v19 = *(void *)(v16 + 16);
LABEL_27:
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, BOOL, BOOL, uint64_t))(v35 + 8))(v3, v17 > 0, v19 != 0, ObjectType);
  swift_unknownObjectRelease();
  if (!v19)
  {
    if (v17 < 1) {
      goto LABEL_34;
    }
    double v24 = (void *)(v3 + v5[501]);
    swift_beginAccess();
    if (!*v24) {
      goto LABEL_34;
    }
    uint64_t v22 = specialized CanvasView.formAnalytics.getter();
    char v23 = 44;
    goto LABEL_33;
  }
  uint64_t v21 = (void *)(v3 + v5[501]);
  swift_beginAccess();
  if (*v21)
  {
    uint64_t v22 = specialized CanvasView.formAnalytics.getter();
    char v23 = 45;
LABEL_33:
    *(unsigned char *)(v22 + 18) = v23;
  }
LABEL_34:
  CanvasElementViewController.updateFormFillingIfNeeded()();
  CGFloat v25 = (void *)(v3 + v5[501]);
  swift_beginAccess();
  if (*v25)
  {
    id v26 = Canvas.editingView.getter();
    uint64_t v28 = v27;
    uint64_t v29 = swift_getObjectType();
    uint64_t v30 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 144))(v29, v28);

    if (v30)
    {
      id v31 = [v2 v6[457]];
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
      uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)&v30[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcFormRegions] = v32;
      swift_bridgeObjectRelease();
      uint64_t v33 = *(void **)&v30[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis];
      *(void *)&v30[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis] = v2;

      uint64_t v2 = v33;
    }
  }
}

void CanvasElementViewController.analysis.setter(void *a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for CanvasElementViewController.analysis);
  *(void *)(v1 + direct field offset for CanvasElementViewController.analysis) = a1;
  id v3 = a1;
  CanvasElementViewController.analysis.didset(v2);
}

void CanvasElementViewController.clearFormFillingFields()()
{
  uint64_t v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v35 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (void *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v7)
  {
    id v8 = Canvas.editingView.getter();
    uint64_t v10 = v9;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 144);
    id v36 = v8;
    uint64_t v33 = ObjectType;
    uint64_t v34 = v10;
    id v13 = (void *)v12(ObjectType, v10);
    if (!v13)
    {
LABEL_16:

      return;
    }
    id v26 = v13;
    unint64_t v14 = FormFillingView.formFields.getter();
    unint64_t v15 = v14;
    if (v14 >> 62)
    {
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      if (v16) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v16)
      {
LABEL_5:
        if (v16 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v17 = 0;
        uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v34 + 88);
        uint64_t v31 = v34 + 88;
        uint64_t v28 = (void (**)(char *, uint64_t))(v4 + 8);
        unint64_t v29 = v15 & 0xC000000000000001;
        long long v27 = xmmword_20C832C20;
        unint64_t v32 = v15;
        do
        {
          if (v29) {
            double v20 = (void *)MEMORY[0x21054E050](v17, v15);
          }
          else {
            double v20 = *(id *)(v15 + 8 * v17 + 32);
          }
          uint64_t v21 = v20;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
          uint64_t v22 = swift_allocObject();
          *(_OWORD *)(v22 + 16) = v27;
          char v23 = *(void (**)(void))((*MEMORY[0x263F8EED0] & *v21) + 0xE8);
          double v24 = v21;
          v23();
          SharedTagged_9.tag.getter();
          uint64_t v37 = v39;
          char v38 = v40;
          MEMORY[0x21054BDF0](v3);
          lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
          WeakTagged_9.init(_:id:)();
          (*v28)(v6, v3);
          if (*(void *)(v22 + 16))
          {
            uint64_t v18 = specialized Set.init(_nonEmptyArrayLiteral:)(v22);
            uint64_t v19 = MEMORY[0x263F8EE88];
          }
          else
          {
            uint64_t v19 = MEMORY[0x263F8EE88];
            uint64_t v18 = MEMORY[0x263F8EE88];
          }
          ++v17;
          swift_bridgeObjectRelease();

          v30(v18, v19, 6, 0, v33, v34);
          swift_bridgeObjectRelease();
          unint64_t v15 = v32;
        }
        while (v16 != v17);
      }
    }

    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
}

void CanvasElementViewController.updateFormFillingIfNeeded()()
{
  uint64_t v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (!*v1) {
    return;
  }
  uint64_t v3 = *(void **)(v0 + direct field offset for CanvasElementViewController.analysis);
  if (!v3) {
    return;
  }
  uint64_t v4 = v2;
  id v5 = v3;
  unint64_t v6 = AnyCanvas.formFieldElements.getter();
  unint64_t v172 = MEMORY[0x263F8EE78];
  id v147 = v5;
  id v7 = objc_msgSend(v5, sel_formRegions);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62) {
    goto LABEL_125;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  uint64_t v157 = v4;
  unint64_t v150 = v8;
  if (v9)
  {
    unint64_t v10 = 0;
    unint64_t v148 = v8 + 32;
    uint64_t v149 = v8 & 0xFFFFFFFFFFFFFF8;
    uint64_t v151 = v9;
    unint64_t v11 = v6 & 0xC000000000000001;
    unint64_t v152 = v8 & 0xC000000000000001;
    uint64_t v153 = (void *)MEMORY[0x263F8EE78];
    do
    {
      if (v152)
      {
        id v12 = (id)MEMORY[0x21054E050](v10, v150);
      }
      else
      {
        if (v10 >= *(void *)(v149 + 16)) {
          goto LABEL_124;
        }
        id v12 = *(id *)(v148 + 8 * v10);
      }
      id v13 = v12;
      BOOL v14 = __OFADD__(v10, 1);
      unint64_t v15 = v10 + 1;
      if (v14) {
        goto LABEL_123;
      }
      unint64_t v154 = v15;
      id v16 = objc_msgSend(v12, sel_quad);
      if (!v16) {
        goto LABEL_145;
      }
      uint64_t v17 = v16;
      objc_msgSend(v16, sel_boundingBox);
      CGFloat v19 = v18;
      CGFloat v21 = v20;
      CGFloat v23 = v22;
      CGFloat v25 = v24;

      id v26 = Canvas.editingView.getter();
      (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x263F8EED0] & *v26) + 0x1A8))(v173);
      long long v164 = v173[1];
      long long v166 = v173[0];
      long long v162 = v173[2];

      *(_OWORD *)&v171.CGFloat a = v166;
      *(_OWORD *)&v171.CGFloat c = v164;
      *(_OWORD *)&v171.tCGFloat x = v162;
      v175.origin.CGFloat x = v19;
      v175.origin.CGFloat y = v21;
      v175.size.CGFloat width = v23;
      v175.size.CGFloat height = v25;
      CGRect v176 = CGRectApplyAffineTransform(v175, &v171);
      CGFloat x = v176.origin.x;
      CGFloat y = v176.origin.y;
      CGFloat width = v176.size.width;
      CGFloat height = v176.size.height;
      id v158 = v13;
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
        if (!v31)
        {
LABEL_28:
          swift_bridgeObjectRelease();
          id v38 = objc_msgSend(v158, sel_autoFillContentType);
          CGFloat v167 = x;
          if (v38)
          {
            uint64_t v39 = v38;
            if (objc_msgSend(v158, sel_regionType) == (id)4)
            {

              char a_low = 50;
              goto LABEL_34;
            }
            FormContentType.init(_:)((__C::AFTextContentType)v39);
          }
          else
          {
            FormContentType.init(_:)((uint64_t)objc_msgSend(v158, sel_contentType), &v171);
          }
          char a_low = LOBYTE(v171.a);
LABEL_34:
          objc_msgSend(v158, sel_suggestedLineHeight);
          double v42 = v41;
          id v43 = Canvas.editingView.getter();
          objc_msgSend(v43, sel_frame);
          CGFloat v45 = v44;
          CGFloat v47 = v46;
          CGFloat v49 = v48;
          CGFloat v51 = v50;

          v179.origin.CGFloat x = v45;
          v179.origin.CGFloat y = v47;
          v179.size.CGFloat width = v49;
          v179.size.CGFloat height = v51;
          double v52 = CGRectGetHeight(v179);
          if (one-time initialization token for formFieldFont != -1) {
            swift_once();
          }
          id v53 = objc_msgSend((id)static UIConstants.formFieldFont, sel_fontWithSize_, v42 * v52 * 0.75);
          id v54 = objc_msgSend(v158, sel_children);
          if (!v54) {
            goto LABEL_146;
          }
          uint64_t v55 = v54;
          unint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v56 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v57 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if (!v57)
          {
            LOBYTE(v171.a) = a_low;
            id v94 = v53;
            specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)((void *)v4, 0, 0, v53, 0, 1, (unsigned __int8 *)&v171, (uint64_t)objc_msgSend(v158, sel_maxCharacterCount), v167, y, width, height, 1u, objc_msgSend(v158, sel_autofillNewContextStart), 9u, 5u);
            uint64_t v96 = v95;

            id v97 = v96;
            MEMORY[0x21054D330]();
            if (*(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if (one-time initialization token for manager != -1) {
              swift_once();
            }
            unint64_t v8 = (unint64_t)Canvas.editingView.getter();
            uint64_t v98 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v8) + 0x88))();

            specialized FormAnalytics.addFielde2eEvent(canvas:)(v98);
            goto LABEL_8;
          }
          unint64_t v170 = MEMORY[0x263F8EE78];
          id v58 = objc_msgSend(v158, sel_children);
          if (!v58) {
            goto LABEL_147;
          }
          uint64_t v59 = v58;
          unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v160 = v8;
          if (!(v8 >> 62))
          {
            uint64_t v60 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v60) {
              goto LABEL_43;
            }
            goto LABEL_90;
          }
          swift_bridgeObjectRetain();
          uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v60)
          {
LABEL_90:
            swift_bridgeObjectRelease();
            unint64_t v8 = v170;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v153 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v153[2] + 1, 1, v153);
            }
            unint64_t v100 = v153[2];
            unint64_t v99 = v153[3];
            if (v100 >= v99 >> 1) {
              uint64_t v153 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v99 > 1), v100 + 1, 1, v153);
            }
            v153[2] = v100 + 1;
            v153[v100 + 4] = v170;

            goto LABEL_8;
          }
LABEL_43:
          unint64_t v61 = 0;
          unint64_t v161 = v8 & 0xC000000000000001;
          unint64_t v155 = v8 + 32;
          uint64_t v156 = v8 & 0xFFFFFFFFFFFFFF8;
          uint64_t v159 = v60;
          while (2)
          {
            if (v161)
            {
              id v62 = (id)MEMORY[0x21054E050](v61, v160);
            }
            else
            {
              if (v61 >= *(void *)(v156 + 16)) {
                goto LABEL_121;
              }
              id v62 = *(id *)(v155 + 8 * v61);
            }
            double v63 = v62;
            BOOL v14 = __OFADD__(v61++, 1);
            if (v14)
            {
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              swift_bridgeObjectRetain();
              uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_5;
            }
            id v64 = objc_msgSend(v62, sel_quad);
            if (!v64) {
              goto LABEL_144;
            }
            double v65 = v64;
            objc_msgSend(v64, sel_boundingBox);
            CGFloat v67 = v66;
            CGFloat v69 = v68;
            CGFloat v71 = v70;
            CGFloat v73 = v72;

            uint64_t v74 = Canvas.editingView.getter();
            (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x263F8EED0] & *v74) + 0x1A8))(v174);
            long long v165 = v174[1];
            long long v168 = v174[0];
            long long v163 = v174[2];

            *(_OWORD *)&v171.CGFloat a = v168;
            *(_OWORD *)&v171.CGFloat c = v165;
            *(_OWORD *)&v171.tCGFloat x = v163;
            v180.origin.CGFloat x = v67;
            v180.origin.CGFloat y = v69;
            v180.size.CGFloat width = v71;
            v180.size.CGFloat height = v73;
            CGRect v181 = CGRectApplyAffineTransform(v180, &v171);
            CGFloat v75 = v181.origin.x;
            CGFloat v76 = v181.origin.y;
            CGFloat v77 = v181.size.width;
            CGFloat v78 = v181.size.height;
            if (v31)
            {
              if (v11)
              {
                swift_bridgeObjectRetain();
                uint64_t v80 = (void *)MEMORY[0x21054E050](0, v6);
              }
              else
              {
                uint64_t v79 = *(void **)(v6 + 32);
                swift_bridgeObjectRetain();
                uint64_t v80 = v79;
              }
              unint64_t v8 = (unint64_t)v80;
              v182.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v80) + 0x178))();
              v186.origin.CGFloat x = v75;
              v186.origin.CGFloat y = v76;
              v186.size.CGFloat width = v77;
              v186.size.CGFloat height = v78;
              BOOL v81 = CGRectIntersectsRect(v182, v186);

              if (v81)
              {

                swift_bridgeObjectRelease();
                goto LABEL_45;
              }
              if (v31 != 1)
              {
                uint64_t v4 = 5;
                while (1)
                {
                  unint64_t v82 = v11 ? (void *)MEMORY[0x21054E050](v4 - 4, v6) : *(id *)(v6 + 8 * v4);
                  unint64_t v8 = (unint64_t)v82;
                  uint64_t v83 = v4 - 3;
                  if (__OFADD__(v4 - 4, 1)) {
                    break;
                  }
                  v183.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v82) + 0x178))();
                  v187.origin.CGFloat x = v75;
                  v187.origin.CGFloat y = v76;
                  v187.size.CGFloat width = v77;
                  v187.size.CGFloat height = v78;
                  BOOL v84 = CGRectIntersectsRect(v183, v187);

                  if (v84)
                  {

                    swift_bridgeObjectRelease();
                    uint64_t v4 = v157;
                    uint64_t v60 = v159;
                    goto LABEL_45;
                  }
                  ++v4;
                  if (v83 == v31) {
                    goto LABEL_64;
                  }
                }
                __break(1u);
                goto LABEL_120;
              }
LABEL_64:
              swift_bridgeObjectRelease();
              uint64_t v4 = v157;
            }
            id v85 = objc_msgSend(v63, sel_autoFillContentType);
            if (v85)
            {
              uint64_t v86 = v85;
              if (objc_msgSend(v63, sel_regionType) == (id)4)
              {

                char v87 = 50;
LABEL_71:
                LOBYTE(v171.a) = v87;
                id v88 = v53;
                specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)((void *)v4, 0, 0, v53, 0, 1, (unsigned __int8 *)&v171, 0x7FFFFFFFFFFFFFFFLL, v75, v76, v77, v78, 1u, objc_msgSend(v63, sel_autofillNewContextStart), 9u, 5u);
                uint64_t v90 = v89;

                id v91 = v90;
                MEMORY[0x21054D330]();
                if (*(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                id v92 = v91;
                MEMORY[0x21054D330]();
                if (*(void *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                if (one-time initialization token for manager != -1) {
                  swift_once();
                }
                unint64_t v8 = (unint64_t)Canvas.editingView.getter();
                id v93 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v8) + 0x88))();

                specialized FormAnalytics.addFielde2eEvent(canvas:)(v93);
                uint64_t v60 = v159;
LABEL_45:
                if (v61 == v60) {
                  goto LABEL_90;
                }
                continue;
              }
              FormContentType.init(_:)((__C::AFTextContentType)v86);
            }
            else
            {
              FormContentType.init(_:)((uint64_t)objc_msgSend(v63, sel_contentType), &v171);
            }
            break;
          }
          char v87 = LOBYTE(v171.a);
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v31 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v31) {
          goto LABEL_28;
        }
      }
      if (v11) {
        unint64_t v32 = (void *)MEMORY[0x21054E050](0, v6);
      }
      else {
        unint64_t v32 = *(id *)(v6 + 32);
      }
      unint64_t v8 = (unint64_t)v32;
      v177.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v32) + 0x178))();
      v184.origin.CGFloat x = x;
      v184.origin.CGFloat y = y;
      v184.size.CGFloat width = width;
      v184.size.CGFloat height = height;
      BOOL v33 = CGRectIntersectsRect(v177, v184);

      if (!v33)
      {
        if (v31 == 1) {
          goto LABEL_28;
        }
        uint64_t v34 = 5;
        while (1)
        {
          if (v11) {
            uint64_t v35 = (void *)MEMORY[0x21054E050](v34 - 4, v6);
          }
          else {
            uint64_t v35 = *(id *)(v6 + 8 * v34);
          }
          unint64_t v8 = (unint64_t)v35;
          uint64_t v36 = v34 - 3;
          if (__OFADD__(v34 - 4, 1)) {
            goto LABEL_122;
          }
          v178.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v35) + 0x178))();
          v185.origin.CGFloat x = x;
          v185.origin.CGFloat y = y;
          v185.size.CGFloat width = width;
          v185.size.CGFloat height = height;
          BOOL v37 = CGRectIntersectsRect(v178, v185);

          if (v37) {
            break;
          }
          ++v34;
          if (v36 == v31) {
            goto LABEL_28;
          }
        }
      }

      swift_bridgeObjectRelease();
LABEL_8:
      unint64_t v10 = v154;
    }
    while (v154 != v151);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v101 = Canvas.editingView.getter();
  uint64_t v103 = v102;
  uint64_t ObjectType = swift_getObjectType();
  double v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 168);
  uint64_t v106 = swift_bridgeObjectRetain();
  v105(v106, ObjectType, v103);

  swift_bridgeObjectRelease();
  id v107 = Canvas.editingView.getter();
  uint64_t v109 = v108;
  uint64_t v110 = swift_getObjectType();
  uint64_t v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 184);
  uint64_t v112 = swift_bridgeObjectRetain();
  v111(v112, v110, v109);

  swift_bridgeObjectRelease();
  char v113 = Canvas.editingView.getter();
  uint64_t v114 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v113) + 0x88))();

  uint64_t v115 = MEMORY[0x263F8EE78];
  if (v114)
  {
    if (one-time initialization token for manager != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v116 = swift_bridgeObjectRetain();
    specialized FormAnalytics.recordLatencyEvent(timestamps:endToEnd:)(v116, 1);

    swift_bridgeObjectRelease();
  }
  id v117 = Canvas.editingView.getter();
  uint64_t v119 = v118;
  uint64_t v120 = swift_getObjectType();
  uint64_t v121 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v119 + 144))(v120, v119);

  if (!v121)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  id v122 = objc_msgSend(v147, sel_formRegions);
  unint64_t v123 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v123 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v124 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v124) {
      goto LABEL_102;
    }
LABEL_127:
    swift_bridgeObjectRelease();
    uint64_t v136 = MEMORY[0x263F8EE78];
    goto LABEL_128;
  }
  uint64_t v124 = *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v124) {
    goto LABEL_127;
  }
LABEL_102:
  uint64_t v169 = v121;
  if (v124 < 1)
  {
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v124; ++i)
  {
    if ((v123 & 0xC000000000000001) != 0) {
      id v126 = (id)MEMORY[0x21054E050](i, v123);
    }
    else {
      id v126 = *(id *)(v123 + 8 * i + 32);
    }
    uint64_t v127 = v126;
    id v128 = objc_msgSend(v126, sel_autoFillContentType);
    if (!v128) {
      goto LABEL_105;
    }
    uint64_t v129 = v128;
    uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v132 = v131;
    if (v130 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v132 == v133)
    {

      swift_bridgeObjectRelease_n();
LABEL_105:

      goto LABEL_106;
    }
    char v135 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v135) {
      goto LABEL_105;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_106:
    uint64_t v4 = v157;
  }
  swift_bridgeObjectRelease();
  uint64_t v136 = v115;
  uint64_t v121 = v169;
LABEL_128:
  swift_bridgeObjectRelease();
  uint64_t v137 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  uint64_t v138 = *(void *)&v121[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
  if (v136 < 0 || (v136 & 0x4000000000000000) != 0)
  {
    swift_retain();
    swift_retain();
    uint64_t v139 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v139 = *(void *)(v136 + 16);
    swift_retain();
  }
  swift_release();
  *(void *)(v138 + 32) = v139;
  swift_release();
  uint64_t v140 = *(void *)&v121[v137];
  unint64_t v141 = v172;
  unint64_t v142 = v172 >> 62;
  if (v172 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v143 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v143 = *(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  *(void *)(v140 + 24) = v143;
  swift_release();
  uint64_t v144 = specialized CanvasView.formAnalytics.getter();
  if (v142)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v145 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v145 = *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  swift_bridgeObjectRelease();

  if (v145) {
    char v146 = 41;
  }
  else {
    char v146 = 39;
  }
  *(unsigned char *)(v144 + 17) = v146;
  swift_release();
}

uint64_t @objc CanvasElementViewController._canShowWhileLocked()()
{
  return 1;
}

void @objc CanvasElementViewController.toolPickerSelectedToolDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  CanvasElementViewController.toolPickerSelectedToolDidChange(_:)((PKToolPicker)v4);
}

Swift::Void __swiftcall CanvasElementViewController.toolPickerSelectedToolItemDidChange(_:)(PKToolPicker a1)
{
}

void @objc CanvasElementViewController.toolPickerSelectedToolItemDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  CanvasElementViewController.toolPickerSelectedToolItemDidChange(_:)((PKToolPicker)v4);
}

void CanvasElementViewController.drawingPolicy.setter(uint64_t a1, void (*a2)(uint64_t))
{
  id v5 = (id *)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v5)
  {
    id v6 = *v5;
    a2(a1);
  }
}

void @objc CanvasElementViewController.toolPickerIsRulerActiveDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  CanvasElementViewController.toolPickerSelectedToolItemDidChange(_:)((PKToolPicker)v4);
}

id CanvasElementViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x21054D080]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CanvasElementViewController.init(nibName:bundle:)()
{
}

void @objc CanvasElementViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = a4;
  specialized CanvasElementViewController.init(nibName:bundle:)();
}

uint64_t CanvasView<>.alwaysUseMaxResolutionImage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + direct field offset for Canvas.paperView))
                              + 0x5C8))() & 1;
}

void key path setter for CanvasView<>.alwaysUseMaxResolutionImage : CanvasView<Image>(unsigned __int8 *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(*a2 + direct field offset for Canvas.paperView);
  id v4 = *(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x5D0);
  id v5 = v3;
  v4(v2);
}

void CanvasView<>.alwaysUseMaxResolutionImage.setter(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + direct field offset for Canvas.paperView);
  id v4 = *(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x5D0);
  id v5 = v3;
  v4(a1);
}

void (*CanvasView<>.alwaysUseMaxResolutionImage.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = direct field offset for Canvas.paperView;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v1 + v2)) + 0x5C8))() & 1;
  return CanvasView<>.alwaysUseMaxResolutionImage.modify;
}

void CanvasView<>.alwaysUseMaxResolutionImage.modify(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v2 = *(void **)(*(void *)a1 + *(void *)(a1 + 8));
  uint64_t v3 = *(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v2) + 0x5D0);
  id v4 = v2;
  v3(v1);
}

uint64_t CanvasElementViewController<>.imageDescription.getter()
{
  uint64_t v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v2 = (char *)*v1;
  if (!*v1) {
    return 0;
  }
  uint64_t v3 = *(char **)&v2[direct field offset for Canvas._canvasElementController];
  if (v3)
  {
    id v4 = v2;
    id v5 = v3;
LABEL_13:
    BOOL v14 = v3;

    unint64_t v15 = &v5[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
    uint64_t v9 = MEMORY[0x210550400](&v5[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]);
    if (!v9)
    {

      return v9;
    }
    uint64_t v16 = *((void *)v15 + 1);
    uint64_t ObjectType = swift_getObjectType();
    double v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(ObjectType, v16);
    uint64_t v19 = swift_unknownObjectRelease();
    if (v18)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v18) + 0x420))(v19);

      return v9;
    }

    return 0;
  }
  id v6 = *(void **)&v2[direct field offset for CanvasView.canvasTiledView];
  if (!v6) {
    return 0;
  }
  swift_getObjectType();
  uint64_t v7 = swift_conformsToProtocol2();
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7) {
    uint64_t v9 = (uint64_t)v6;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9)
  {
    uint64_t v10 = swift_getObjectType();
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
    id v12 = v2;
    id v13 = v6;
    id v5 = (char *)v11(v10, v8);

    uint64_t v3 = 0;
    goto LABEL_13;
  }
  return v9;
}

void (*CanvasElementViewController<>.imageDescription.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CanvasElementViewController<>.imageDescription.getter();
  a1[1] = v3;
  return CanvasElementViewController<>.imageDescription.modify;
}

void CanvasElementViewController<>.imageDescription.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    CanvasElementViewController<>.imageDescription.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CanvasElementViewController<>.imageDescription.setter(*a1, v2);
  }
}

uint64_t CanvasElementViewController<>.alwaysUseMaxResolutionImage.getter()
{
  uint64_t v1 = (void *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  uint64_t v2 = swift_beginAccess();
  if (*v1) {
    char v3 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **(void **)(*v1
  }
                                                                                  + direct field offset for Canvas.paperView))
                                            + 0x5C8))(v2);
  else {
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t key path getter for CanvasElementViewController<>.alwaysUseMaxResolutionImage : CanvasElementViewController<Image>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = (void *)(*a1 + direct field offset for CanvasElementViewController.canvasView);
  uint64_t v4 = swift_beginAccess();
  if (*v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **(void **)(*v3
  }
                                                                                      + direct field offset for Canvas.paperView))
                                                + 0x5C8))(v4);
  else {
    uint64_t result = 0;
  }
  *a2 = result & 1;
  return result;
}

void key path setter for CanvasElementViewController<>.alwaysUseMaxResolutionImage : CanvasElementViewController<Image>(unsigned __int8 *a1, void *a2)
{
  uint64_t v2 = *a1;
  char v3 = (void **)(*a2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v4 = (char *)*v3;
  if (*v3)
  {
    id v5 = *(void **)&v4[direct field offset for Canvas.paperView];
    id v6 = *(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v5) + 0x5D0);
    uint64_t v7 = v4;
    uint64_t v8 = v5;
    v6(v2);
  }
}

void CanvasElementViewController<>.alwaysUseMaxResolutionImage.setter(char a1)
{
  char v3 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v4 = (char *)*v3;
  if (*v3)
  {
    id v5 = *(void **)&v4[direct field offset for Canvas.paperView];
    id v6 = *(void (**)(void))((*MEMORY[0x263F8EED0] & *v5) + 0x5D0);
    uint64_t v7 = v4;
    uint64_t v8 = v5;
    v6(a1 & 1);
  }
}

void (*CanvasElementViewController<>.alwaysUseMaxResolutionImage.modify(void *a1))(uint64_t a1)
{
  char v3 = (char *)malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = v3 + 40;
  uint64_t v5 = direct field offset for CanvasElementViewController.canvasView;
  *((void *)v3 + 3) = v1;
  *((void *)v3 + 4) = v5;
  id v6 = (void *)(v1 + v5);
  uint64_t v7 = swift_beginAccess();
  if (*v6) {
    char v8 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **(void **)(*v6
  }
                                                                                  + direct field offset for Canvas.paperView))
                                            + 0x5C8))(v7);
  else {
    char v8 = 0;
  }
  *uint64_t v4 = v8 & 1;
  return CanvasElementViewController<>.alwaysUseMaxResolutionImage.modify;
}

void CanvasElementViewController<>.alwaysUseMaxResolutionImage.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(char **)(*(void *)(*(void *)a1 + 24) + *(void *)(*(void *)a1 + 32));
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(*(void *)a1 + 40);
    uint64_t v4 = *(void **)&v2[direct field offset for Canvas.paperView];
    uint64_t v5 = *(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v4) + 0x5D0);
    id v6 = v2;
    uint64_t v7 = v4;
    v5(v3);
  }
  free(v1);
}

id specialized CanvasElementViewController.init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(void *a1, char *a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  char v19 = *a2;
  *(void *)&v7[direct field offset for CanvasElementViewController.canvasView] = 0;
  uint64_t v10 = &v7[direct field offset for CanvasElementViewController.liveStreamMessenger];
  *uint64_t v10 = 0;
  v10[1] = 0;
  *(void *)&v7[direct field offset for CanvasElementViewController.participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v7[direct field offset for CanvasElementViewController.showParticipantCursors] = 0;
  *(void *)&v7[direct field offset for CanvasElementViewController.mediaAnalysisObserver] = 0;
  *(void *)&v7[direct field offset for CanvasElementViewController.canvasSubscribeCancellable] = 0;
  uint64_t v11 = direct field offset for CanvasElementViewController.passThroughSubject;
  type metadata accessor for Capsule();
  type metadata accessor for PassthroughSubject();
  id v12 = v7;
  *(void *)&v7[v11] = PassthroughSubject.__allocating_init()();
  *(void *)&v12[direct field offset for CanvasElementViewController.image] = 0;
  v12[direct field offset for CanvasElementViewController.liveStreamDrawings] = 0;
  v12[direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled] = 0;
  v12[direct field offset for CanvasElementViewController.canEditVellumOpacity] = 0;
  id v13 = &v12[direct field offset for CanvasElementViewController.isImageAnalysisEnabled];
  v12[direct field offset for CanvasElementViewController.isImageAnalysisEnabled] = 1;
  v12[direct field offset for CanvasElementViewController.canEditDescription] = 1;
  uint64_t v14 = direct field offset for CanvasElementViewController.plusButton;
  type metadata accessor for FormPlusButtonView();
  *(void *)&v12[v14] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  *(void *)&v12[direct field offset for CanvasElementViewController.bannerViewConfiguration] = 0;
  uint64_t v15 = direct field offset for CanvasElementViewController.bannerView;
  *(void *)&v12[v15] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  *(void *)&v12[direct field offset for CanvasElementViewController._rulerHostingDelegate] = 0;
  *(void *)&v12[direct field offset for CanvasElementViewController.rulerHostView] = 0;
  uint64_t v16 = &v12[direct field offset for CanvasElementViewController.formDelegate];
  *(void *)&v12[direct field offset for CanvasElementViewController.formDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v12[direct field offset for CanvasElementViewController.analysis] = 0;
  v12[direct field offset for CanvasElementViewController.allowMediaCanvasElements] = a3;
  *(void *)&v12[direct field offset for CanvasElementViewController.context] = a1;
  v12[direct field offset for CanvasElementViewController.transparentBackground] = a4;
  v12[direct field offset for CanvasElementViewController.editingMode] = v19;
  swift_beginAccess();
  *((void *)v16 + 1) = a7;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  *id v13 = a5;
  id v17 = a1;

  v23.id receiver = v12;
  v23.Class super_class = (Class)type metadata accessor for CanvasElementViewController();
  return objc_msgSendSuper2(&v23, sel_initWithNibName_bundle_, 0, 0);
}

id specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(void *a1, char *a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  id v14 = objc_allocWithZone((Class)type metadata accessor for CanvasElementViewController());
  return specialized CanvasElementViewController.init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(a1, a2, a3, a4, a5, a6, a7);
}

id specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:)(void *a1, char *a2, char a3, char a4)
{
  char v5 = *a2;
  return specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(a1, &v5, a3, a4, 1, 0, 0);
}

uint64_t specialized CanvasElementViewController.canvasView.getter()
{
  uint64_t v1 = v0 + direct field offset for CanvasElementViewController.canvasView;
  swift_beginAccess();
  return *(void *)v1;
}

void specialized CanvasElementViewController.canvasView.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  id v5 = a1;

  CanvasElementViewController.updateToolPickerVisibility()();
  CanvasElementViewController.updateActionInfoViewVisibility()();
}

uint64_t specialized CanvasElementViewController.liveStreamMessenger.getter()
{
  uint64_t v1 = v0 + direct field offset for CanvasElementViewController.liveStreamMessenger;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t specialized CanvasElementViewController.MediaAnalysisObserver.__allocating_init(viewController:)()
{
  type metadata accessor for CanvasElementViewController.MediaAnalysisObserver();
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  return v0;
}

uint64_t specialized CanvasElementViewController.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + direct field offset for CanvasElementViewController.liveStreamMessenger);
  swift_beginAccess();
  *id v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return CanvasElementViewController.liveStreamMessenger.didset();
}

uint64_t specialized CanvasElementViewController.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + direct field offset for CanvasElementViewController.participantDetailsDataSource;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return CanvasElementViewController.participantDetailsDataSource.didset();
}

uint64_t specialized CanvasElementViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  swift_beginAccess();
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign();
  id v6 = (void *)(v2 + direct field offset for CanvasElementViewController.canvasView);
  uint64_t result = swift_beginAccess();
  if (*v6)
  {
    if (a1) {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *v6 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
    swift_beginAccess();
    *(void *)(v9 + 8) = v8;
    return swift_unknownObjectWeakAssign();
  }
  return result;
}

uint64_t specialized CanvasElementViewController.image.getter()
{
  uint64_t v1 = v0 + direct field offset for CanvasElementViewController.image;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t type metadata accessor for CanvasElementViewController()
{
  return __swift_instantiateGenericMetadata();
}

void specialized CanvasElementViewController.init(coder:)()
{
  uint64_t v1 = v0;
  *(void *)&v0[direct field offset for CanvasElementViewController.canvasView] = 0;
  uint64_t v2 = &v0[direct field offset for CanvasElementViewController.liveStreamMessenger];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *(void *)&v0[direct field offset for CanvasElementViewController.participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[direct field offset for CanvasElementViewController.showParticipantCursors] = 0;
  *(void *)&v0[direct field offset for CanvasElementViewController.mediaAnalysisObserver] = 0;
  *(void *)&v0[direct field offset for CanvasElementViewController.canvasSubscribeCancellable] = 0;
  uint64_t v3 = direct field offset for CanvasElementViewController.passThroughSubject;
  type metadata accessor for Capsule();
  type metadata accessor for PassthroughSubject();
  *(void *)&v0[v3] = PassthroughSubject.__allocating_init()();
  *(void *)&v0[direct field offset for CanvasElementViewController.image] = 0;
  v0[direct field offset for CanvasElementViewController.liveStreamDrawings] = 0;
  v0[direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled] = 0;
  v0[direct field offset for CanvasElementViewController.canEditVellumOpacity] = 0;
  v0[direct field offset for CanvasElementViewController.isImageAnalysisEnabled] = 1;
  v0[direct field offset for CanvasElementViewController.canEditDescription] = 1;
  uint64_t v4 = direct field offset for CanvasElementViewController.plusButton;
  type metadata accessor for FormPlusButtonView();
  *(void *)&v1[v4] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  *(void *)&v1[direct field offset for CanvasElementViewController.bannerViewConfiguration] = 0;
  uint64_t v5 = direct field offset for CanvasElementViewController.bannerView;
  *(void *)&v1[v5] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  *(void *)&v1[direct field offset for CanvasElementViewController._rulerHostingDelegate] = 0;
  *(void *)&v1[direct field offset for CanvasElementViewController.rulerHostView] = 0;
  *(void *)&v1[direct field offset for CanvasElementViewController.formDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[direct field offset for CanvasElementViewController.analysis] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized CanvasElementViewController.scrollView.getter()
{
  uint64_t v1 = (void *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  uint64_t result = swift_beginAccess();
  if (!*v1)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t result = *(void *)(*v1 + direct field offset for CanvasView.canvasScrollView);
  if (!result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized CanvasElementViewController.rulerHostView.getter()
{
  uint64_t v1 = v0 + direct field offset for CanvasElementViewController.rulerHostView;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t specialized CanvasElementViewController.formDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + direct field offset for CanvasElementViewController.formDelegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  return swift_unknownObjectWeakAssign();
}

void specialized CanvasElementViewController.init(nibName:bundle:)()
{
}

id sub_20C614190@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)specialized CanvasElementViewController.canvasView.getter();
  *a1 = v2;
  return v2;
}

void sub_20C6141CC(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  specialized CanvasElementViewController.canvasView.setter(v1);
}

uint64_t sub_20C61421C()
{
  return 24;
}

__n128 sub_20C614228(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C61423C@<X0>(uint64_t *a1@<X8>)
{
  *a1 = specialized CanvasElementViewController.liveStreamMessenger.getter();
  a1[1] = v2;
  return swift_unknownObjectRetain();
}

uint64_t sub_20C614278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CanvasElementViewController.liveStreamMessenger : <A>CanvasElementViewController<A>(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized CanvasElementViewController.liveStreamMessenger.setter);
}

uint64_t sub_20C6142A4()
{
  return 24;
}

__n128 sub_20C6142B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C6142C4@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_14Tm_0(CanvasElementViewController.participantDetailsDataSource.getter, a1);
}

uint64_t sub_20C6142DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CanvasElementViewController.liveStreamMessenger : <A>CanvasElementViewController<A>(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized CanvasElementViewController.participantDetailsDataSource.setter);
}

uint64_t sub_20C614308()
{
  return 24;
}

__n128 sub_20C614314(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C614328@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CanvasElementViewController.showParticipantCursors.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_20C614358(char *a1)
{
  return CanvasElementViewController.showParticipantCursors.setter(*a1);
}

uint64_t sub_20C614380()
{
  return 24;
}

__n128 sub_20C61438C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C6143A0@<X0>(unsigned char *a1@<X8>)
{
  return CanvasElementViewController.editingMode.getter(a1);
}

void sub_20C6143C4(unsigned __int8 *a1)
{
  unsigned __int8 v1 = *a1;
  CanvasElementViewController.editingMode.setter(&v1);
}

uint64_t sub_20C6143FC()
{
  return 24;
}

__n128 sub_20C614408(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_20C61441C@<X0>(void *a1@<X8>)
{
  id result = CanvasElementViewController.drawingPolicy.getter();
  *a1 = result;
  return result;
}

void sub_20C614448(uint64_t *a1)
{
}

uint64_t sub_20C614470()
{
  return 24;
}

__n128 sub_20C61447C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_20C614490@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)specialized CanvasElementViewController.image.getter();
  *a1 = v2;
  return v2;
}

void sub_20C6144CC(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  CanvasElementViewController.image.setter(v1);
}

uint64_t sub_20C6144FC()
{
  return 24;
}

__n128 sub_20C614508(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C61451C@<X0>(uint64_t *a1@<X8>)
{
  return CanvasElementViewController.tool.getter(a1);
}

uint64_t sub_20C614540(uint64_t a1)
{
  outlined init with copy of FindResult(a1, (uint64_t)v2);
  return CanvasElementViewController.tool.setter((uint64_t)v2);
}

uint64_t sub_20C61457C()
{
  return 24;
}

__n128 sub_20C614588(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C61459C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CanvasElementViewController.liveStreamDrawings.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_20C6145CC(char *a1)
{
  return CanvasElementViewController.liveStreamDrawings.setter(*a1);
}

uint64_t sub_20C6145F4()
{
  return 24;
}

__n128 sub_20C614600(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C614614@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CanvasElementViewController.isSixChannelBlendingEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_20C614644(char *a1)
{
  return CanvasElementViewController.isSixChannelBlendingEnabled.setter(*a1);
}

uint64_t sub_20C61466C()
{
  return 24;
}

__n128 sub_20C614678(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C61468C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CanvasElementViewController.canEditVellumOpacity.getter();
  *a1 = result & 1;
  return result;
}

void sub_20C6146BC(char *a1)
{
}

uint64_t sub_20C6146E4()
{
  return 24;
}

__n128 sub_20C6146F0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C614704@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CanvasElementViewController.isImageAnalysisEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_20C614734(char *a1)
{
  return CanvasElementViewController.isImageAnalysisEnabled.setter(*a1);
}

uint64_t sub_20C61475C()
{
  return 24;
}

__n128 sub_20C614768(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C61477C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CanvasElementViewController.canEditDescription.getter();
  *a1 = result & 1;
  return result;
}

void sub_20C6147AC(char *a1)
{
}

uint64_t sub_20C6147D4()
{
  return 24;
}

__n128 sub_20C6147E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C6147F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.getter();
  *a1 = result & 1;
  return result;
}

void sub_20C614824(char *a1)
{
}

uint64_t sub_20C61484C()
{
  return 24;
}

__n128 sub_20C614858(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C61486C()
{
  return CanvasElementViewController.rootElement.getter();
}

uint64_t sub_20C614890()
{
  return specialized CanvasElementViewController.rootElement.setter();
}

uint64_t sub_20C6148B4()
{
  return 24;
}

__n128 sub_20C6148C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C6148D4()
{
  return 24;
}

__n128 sub_20C6148E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_20C6148F4@<X0>(void *a1@<X8>)
{
  id v2 = (void *)specialized CanvasElementViewController.rulerHostView.getter();
  *a1 = v2;
  return v2;
}

void sub_20C614930(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  CanvasElementViewController.rulerHostView.setter(v1);
}

uint64_t sub_20C614960()
{
  return 24;
}

__n128 sub_20C61496C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C614980@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_14Tm_0(CanvasElementViewController.formDelegate.getter, a1);
}

uint64_t keypath_get_14Tm_0@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_20C6149C8(uint64_t *a1)
{
  return specialized CanvasElementViewController.formDelegate.setter(*a1, a1[1]);
}

uint64_t sub_20C6149F8()
{
  return 24;
}

__n128 sub_20C614A04(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C614A18@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(*a1 + direct field offset for Canvas.paperView))
                                + 0x5C8))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_20C614A94()
{
  return 0;
}

uint64_t sub_20C614AA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CanvasElementViewController<>.imageDescription.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_20C614AD0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  CanvasElementViewController<>.imageDescription.setter(v1, v2);
}

uint64_t sub_20C614B10()
{
  return 0;
}

uint64_t sub_20C614B28()
{
  return 0;
}

uint64_t type metadata completion function for CanvasElementViewController()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for CanvasElementViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CanvasElementViewController);
}

uint64_t dispatch thunk of CanvasElementViewController.canvasView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamMessenger.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamMessenger.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamMessenger.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CanvasElementViewController.participantDetailsDataSource.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CanvasElementViewController.participantDetailsDataSource.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CanvasElementViewController.participantDetailsDataSource.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CanvasElementViewController.showParticipantCursors.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CanvasElementViewController.showParticipantCursors.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CanvasElementViewController.showParticipantCursors.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CanvasElementViewController.editingMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CanvasElementViewController.editingMode.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CanvasElementViewController.editingMode.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CanvasElementViewController.drawingGestureRecognizer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CanvasElementViewController.drawingPolicy.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CanvasElementViewController.drawingPolicy.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CanvasElementViewController.drawingPolicy.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CanvasElementViewController.image.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of CanvasElementViewController.image.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of CanvasElementViewController.image.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of CanvasElementViewController.tool.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of CanvasElementViewController.tool.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of CanvasElementViewController.tool.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x258))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamDrawings.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x260))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamDrawings.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamDrawings.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x270))();
}

uint64_t dispatch thunk of CanvasElementViewController.scrollView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x278))();
}

uint64_t dispatch thunk of CanvasElementViewController.isSixChannelBlendingEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x280))();
}

uint64_t dispatch thunk of CanvasElementViewController.isSixChannelBlendingEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of CanvasElementViewController.isSixChannelBlendingEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x290))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditVellumOpacity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x298))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditVellumOpacity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditVellumOpacity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of CanvasElementViewController.isImageAnalysisEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of CanvasElementViewController.isImageAnalysisEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of CanvasElementViewController.isImageAnalysisEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditDescription.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditDescription.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of CanvasElementViewController.rootElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x338))();
}

uint64_t dispatch thunk of CanvasElementViewController.rootElement.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x340))();
}

uint64_t dispatch thunk of CanvasElementViewController.rootElement.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x348))();
}

uint64_t dispatch thunk of CanvasElementViewController.paper.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x350))();
}

uint64_t dispatch thunk of CanvasElementViewController.paper.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x358))();
}

uint64_t dispatch thunk of CanvasElementViewController.paper.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x360))();
}

uint64_t dispatch thunk of CanvasElementViewController.merge<A>(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x368))();
}

uint64_t dispatch thunk of CanvasElementViewController.publisher.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x370))();
}

uint64_t dispatch thunk of CanvasElementViewController.rulerHostView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of CanvasElementViewController.rulerHostView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of CanvasElementViewController.rulerHostView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of CanvasElementViewController.formDelegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of CanvasElementViewController.formDelegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of CanvasElementViewController.formDelegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of CanvasElementViewController.toolPickerSelectedToolDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x420))();
}

uint64_t dispatch thunk of CanvasElementViewController.toolPickerSelectedToolItemDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x428))();
}

uint64_t dispatch thunk of CanvasElementViewController.toolPickerIsRulerActiveDidChange(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x430))();
}

uint64_t type metadata completion function for CanvasElementViewController.MediaAnalysisObserver()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CanvasElementViewController.MediaAnalysisObserver()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of QLCanvasElementViewControllerDelegate.canvasElement(_:detectedFormInContent:withAutofill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of QLCanvasElementViewControllerDelegate.canvasElement(_:openFormFilling:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of QLCanvasElementViewControllerDelegate.canvasElement(_:contentFrameDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_20C615A64()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in CanvasElementViewController.updatePlusButton()(uint64_t a1)
{
  closure #1 in CanvasElementViewController.updatePlusButton()(a1, *(void *)(v1 + 40));
}

uint64_t partial apply for closure #2 in CanvasElementViewController.updatePlusButton()(uint64_t a1)
{
  return closure #2 in CanvasElementViewController.updatePlusButton()(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t sub_20C615AB4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(void *a1)
{
  closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(a1, *(void *)(v1 + 40));
}

uint64_t outlined destroy of Image(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void CanvasElementResizeViewMoreButton.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85BDF0);
  id v3 = objc_msgSend(self, sel_systemImageNamed_, v2);

  if (v3)
  {
    uint64_t v4 = OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_imageView;
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v3);

    *(void *)&v1[v4] = v5;
    if (one-time initialization token for resizeMoreButtonSize != -1) {
      swift_once();
    }
    double v6 = *(double *)&static UIConstants.resizeMoreButtonSize;
    v23.id receiver = v1;
    v23.Class super_class = (Class)type metadata accessor for CanvasElementResizeViewMoreButton();
    uint64_t v7 = (char *)objc_msgSendSuper2(&v23, sel_initWithFrame_, 0.0, 0.0, v6, v6);
    uint64_t v8 = OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_imageView;
    uint64_t v9 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_imageView];
    uint64_t v10 = v7;
    id v11 = v9;
    objc_msgSend(v10, sel_bounds);
    objc_msgSend(v11, sel_setFrame_);

    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, 0.0, 0.0, 12.0, 12.0);
    objc_msgSend(v10, sel_frame);
    CGFloat x = v24.origin.x;
    CGFloat y = v24.origin.y;
    CGFloat width = v24.size.width;
    CGFloat height = v24.size.height;
    double MidX = CGRectGetMidX(v24);
    v25.origin.CGFloat x = x;
    v25.origin.CGFloat y = y;
    v25.size.CGFloat width = width;
    v25.size.CGFloat height = height;
    objc_msgSend(v12, sel_setCenter_, MidX, CGRectGetMidY(v25));
    id v18 = objc_msgSend(self, sel_systemBackgroundColor);
    objc_msgSend(v12, sel_setBackgroundColor_, v18);

    objc_msgSend(v10, sel_addSubview_, v12);
    objc_msgSend(v10, sel_addSubview_, *(void *)&v7[v8]);
    objc_msgSend(v10, sel_setIsAccessibilityElement_, 1);
    objc_msgSend(v10, sel_setAccessibilityTraits_, *MEMORY[0x263F83260]);
    char v19 = v10;
    double v20 = (void *)MEMORY[0x21054D080](0xD000000000000031, 0x800000020C85BE50);
    objc_msgSend(v19, sel_setAccessibilityIdentifier_, v20);

    CGFloat v21 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C85BE90);
    objc_msgSend(v19, sel_setAccessibilityLabel_, v21);

    objc_msgSend(v19, sel_setContextMenuInteractionEnabled_, 1);
    objc_msgSend(v19, sel_setShowsMenuAsPrimaryAction_, 1);
    id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82A70]), sel_initWithDelegate_, v19);
    objc_msgSend(v19, sel_addInteraction_, v22);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall CanvasElementResizeViewMoreButton.didMoveToWindow()()
{
  id v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {
    uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_imageView];
    id v3 = v1;
    id v4 = objc_msgSend(v3, sel_tintColor);
    if (!v4)
    {
      if (one-time initialization token for resizeHandleColor != -1) {
        swift_once();
      }
      id v4 = (id)static UIConstants.resizeHandleColor;
    }
    id v5 = v4;

    objc_msgSend(v2, sel_setTintColor_, v5);
  }
}

id CanvasElementResizeViewMoreButton.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for CanvasElementResizeViewMoreButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasElementResizeViewMoreButton()
{
  return self;
}

void specialized CanvasElementResizeViewMoreButton.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  id v1 = (void *)MEMORY[0x21054D080](0xD000000000000014, 0x800000020C85BDF0);
  id v2 = objc_msgSend(self, sel_systemImageNamed_, v1);

  if (!v2) {
    __break(1u);
  }
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_imageView;
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v2);

  *(void *)&v0[v3] = v4;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized CanvasElementResizeViewMoreButton.pointerInteraction(_:styleFor:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIPointerShape?);
  MEMORY[0x270FA5388](v2 - 8);
  id v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UIPointerEffect();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (uint64_t *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v10 = objc_msgSend(a1, sel_view, v7);
  if (!v10) {
    return 0;
  }
  id v11 = v10;
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CC8]), sel_initWithView_, v10);
  type metadata accessor for UIPointerStyle();
  *uint64_t v9 = v12;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x263F81E20], v5);
  uint64_t v13 = type metadata accessor for UIPointerShape();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 1, 1, v13);
  id v14 = v12;
  uint64_t v15 = UIPointerStyle.init(effect:shape:)();

  return v15;
}

unint64_t type metadata accessor for UIPointerStyle()
{
  unint64_t result = lazy cache variable for type metadata for UIPointerStyle;
  if (!lazy cache variable for type metadata for UIPointerStyle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIPointerStyle);
  }
  return result;
}

id PPKPDFThumbnailView.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for PPKPDFThumbnailView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PPKPDFThumbnailView()
{
  return self;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v25 = a3 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v28 = v7 + 32;
  uint64_t v29 = v7 + 16;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v7 + 8;
  uint64_t v31 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (v16)
  {
    unint64_t v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v20 = v19 | (v18 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(void *)(v31 + 48) + *(void *)(v7 + 72) * v20, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    char v24 = v30(v9);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v3) {
      goto LABEL_28;
    }
    if ((v24 & 1) == 0)
    {
      a2 = 0;
LABEL_28:
      swift_release();
      return a2 & 1;
    }
  }
  if (__OFADD__(v18++, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v18 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v18);
  if (v22)
  {
LABEL_18:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_19;
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v26)
  {
LABEL_27:
    a2 = 1;
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
LABEL_17:
    int64_t v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v26) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

BOOL closure #1 in CanvasFormattingProxy.supportsFillColor.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v35 = v6;
  MEMORY[0x270FA5388](v6);
  BOOL v33 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v39 = a3;
  uint64_t v37 = v8;
  uint64_t v36 = type metadata accessor for Capsule();
  uint64_t v9 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Shape();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v31 = (uint64_t)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v32 = (uint64_t)&v31 - v22;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v14, 1, v23) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Shape?);
    return 0;
  }
  Canvas.updatablePaper2.getter((uint64_t)v11);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v36);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1) {
    goto LABEL_4;
  }
  uint64_t v26 = v32;
  _s8PaperKit5ShapeVWObTm_0((uint64_t)v17, v32, (uint64_t (*)(void))type metadata accessor for Shape);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  uint64_t v27 = v33;
  CRRegister.wrappedValue.getter();
  uint64_t v28 = v35;
  TaggedValue_9.tagged3.getter();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v28);
  LODWORD(v28) = v41;
  uint64_t v29 = v31;
  outlined init with copy of Shape(v26, v31);
  if (v28 == 1)
  {
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    CRRegister.wrappedValue.getter();
    BOOL v25 = v40 == 0;
    _s8PaperKit5ShapeVWOhTm_0(v29, (uint64_t (*)(void))type metadata accessor for Shape);
  }
  else
  {
    _s8PaperKit5ShapeVWOhTm_0(v29, (uint64_t (*)(void))type metadata accessor for Shape);
    BOOL v25 = 0;
  }
  _s8PaperKit5ShapeVWOhTm_0(v26, (uint64_t (*)(void))type metadata accessor for Shape);
  return v25;
}

uint64_t CanvasFormattingProxy.supportsStrokeColor.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 16);
  if (*(void *)(v2 + 16) | v3)
  {
    BOOL v4 = v3 != 0;
    MEMORY[0x270FA5388](a1);
    v9[1] = *(_OWORD *)(v5 + 16);
    uint64_t v10 = *(void *)(v5 + 32);
    uint64_t v11 = v1;
    swift_bridgeObjectRetain();
    char v6 = specialized Sequence.allSatisfy(_:)((uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.supportsStrokeColor.getter, (char)v9, v2);
    swift_bridgeObjectRelease();
    char v7 = v4 | v6;
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t closure #1 in CanvasFormattingProxy.supportsStrokeColor.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v33[2] = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v34 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v35 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a4 + 16);
  v33[3] = a3;
  v33[1] = v12;
  v33[0] = type metadata accessor for Capsule();
  uint64_t v13 = *(void *)(v33[0] - 8);
  MEMORY[0x270FA5388](v33[0]);
  uint64_t v15 = (char *)v33 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1;
  WeakTagged_9.tagged6.getter();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22) == 1)
  {
    uint64_t v24 = &demangling cache variable for type metadata for WeakRef<Shape>?;
    uint64_t v25 = (uint64_t)v18;
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?(v25, v24);
    uint64_t v27 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v11, v36, v9);
    goto LABEL_6;
  }
  Canvas.updatablePaper2.getter((uint64_t)v15);
  WeakRef.subscript.getter();
  (*(void (**)(char *, void))(v13 + 8))(v15, v33[0]);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v22);
  uint64_t v26 = type metadata accessor for Shape();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v21, 1, v26) == 1)
  {
    uint64_t v24 = &demangling cache variable for type metadata for Shape?;
    uint64_t v25 = (uint64_t)v21;
    goto LABEL_5;
  }
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  uint64_t v32 = v37;
  _s8PaperKit5ShapeVWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v27 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v11, v36, v9);
  if (!v32)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
    return 1;
  }
LABEL_6:
  uint64_t v28 = (uint64_t)v34;
  WeakTagged_9.tagged7.getter();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Signature>);
  BOOL v30 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29) != 1;
  outlined destroy of StocksKitCurrencyCache.Provider?(v28, &demangling cache variable for type metadata for WeakRef<Signature>?);
  return v30;
}

uint64_t closure #1 in CanvasFormattingProxy.supportsTextStyle.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v29 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v36 = a3;
  uint64_t v34 = v8;
  uint64_t v9 = type metadata accessor for Capsule();
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Shape();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v14, 1, v22) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  }
  else
  {
    Canvas.updatablePaper2.getter((uint64_t)v11);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v33);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      _s8PaperKit5ShapeVWObTm_0((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Shape);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
      uint64_t v25 = v29;
      CRRegister.wrappedValue.getter();
      uint64_t v26 = v31;
      TaggedValue_9.tagged3.getter();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v26);
      uint64_t v24 = v37;
      _s8PaperKit5ShapeVWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Shape);
      return v24;
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Shape?);
  return 0;
}

uint64_t closure #1 in CanvasFormattingProxy.supportsOpacity.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v33 = a3;
  uint64_t v31 = v9;
  uint64_t v10 = type metadata accessor for Capsule();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = type metadata accessor for Shape();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v28 = (uint64_t)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for WeakRef<Shape>?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    Canvas.updatablePaper2.getter((uint64_t)v12);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v13) == 1)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for Shape?);
      return 1;
    }
    else
    {
      uint64_t v24 = (uint64_t)v8;
      uint64_t v25 = v28;
      _s8PaperKit5ShapeVWObTm_0(v24, v28, (uint64_t (*)(void))type metadata accessor for Shape);
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      BOOL v23 = v34 == 0;
      _s8PaperKit5ShapeVWOhTm_0(v25, (uint64_t (*)(void))type metadata accessor for Shape);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    }
  }
  return v23;
}

uint64_t CanvasFormattingProxy.supportsFillColor.getter(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(void *)(v3 + 16))
  {
    MEMORY[0x270FA5388](a1);
    v8[1] = *(_OWORD *)(v5 + 16);
    uint64_t v9 = *(void *)(v5 + 32);
    uint64_t v10 = v2;
    swift_bridgeObjectRetain();
    char v6 = specialized Sequence.allSatisfy(_:)(a2, (char)v8, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t closure #1 in CanvasFormattingProxy.supportsLineEnds.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v29 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v36 = a3;
  uint64_t v34 = v8;
  uint64_t v9 = type metadata accessor for Capsule();
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Shape();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v14, 1, v22) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  }
  else
  {
    Canvas.updatablePaper2.getter((uint64_t)v11);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v33);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      _s8PaperKit5ShapeVWObTm_0((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Shape);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
      uint64_t v25 = v29;
      CRRegister.wrappedValue.getter();
      uint64_t v26 = v31;
      TaggedValue_9.tagged3.getter();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v26);
      char v24 = v37 ^ 1;
      _s8PaperKit5ShapeVWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Shape);
      return v24 & 1;
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Shape?);
  char v24 = 0;
  return v24 & 1;
}

uint64_t CanvasFormattingProxy.supportsImages.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v0 + 8);
  if (*(void *)(v7 + 16) == 1)
  {
    specialized Collection.first.getter(v7, (uint64_t)v3);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v3, 1, v8) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
    }
    else
    {
      WeakTagged_9.tagged2.getter();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v3, v8);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
      uint64_t v11 = 1;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v6, 1, v12) != 1)
      {
LABEL_7:
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for WeakRef<Image>?);
        return v11;
      }
    }
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  return 0;
}

uint64_t CanvasFormattingProxy.supportsImageRegeneration.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Capsule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v28 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!CanvasFormattingProxy.supportsImageGeneration.getter(a1)) {
    return 0;
  }
  v28[0] = v6;
  v28[1] = v4;
  specialized Collection.first.getter(*(void *)(v2 + 8), (uint64_t)v11);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v18) == 1)
  {
    uint64_t v20 = (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?;
    uint64_t v21 = (uint64_t)v11;
LABEL_8:
    outlined destroy of StocksKitCurrencyCache.Provider?(v21, v20);
    return 0;
  }
  WeakTagged_9.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v18);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v14, 1, v22) == 1)
  {
    uint64_t v20 = &demangling cache variable for type metadata for WeakRef<Image>?;
    uint64_t v21 = (uint64_t)v14;
    goto LABEL_8;
  }
  Canvas.updatablePaper2.getter((uint64_t)v8);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v28[0] + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v22);
  uint64_t v24 = type metadata accessor for Image();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v17, 1, v24) == 1)
  {
    uint64_t v20 = &demangling cache variable for type metadata for Image?;
    uint64_t v21 = (uint64_t)v17;
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  uint64_t v26 = v28[2];
  unint64_t v27 = v28[3];
  _s8PaperKit5ShapeVWOhTm_0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Image);
  if (v27 >> 60 != 15)
  {
    outlined consume of Data?(v26, v27);
    return 1;
  }
  return 0;
}

BOOL CanvasFormattingProxy.supportsImageGeneration.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(a1) & 1) == 0) {
    return 0;
  }
  CanvasMembers.singleImageSelected()(*(void *)(v1 + 8), *(void *)(v1 + 16), (uint64_t)v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  BOOL v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) != 1;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for WeakRef<Image>?);
  return v7;
}

uint64_t CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v1) + 0x320))();
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = (void *)v4;
  type metadata accessor for TiledTextView();
  if (!swift_dynamicCastClass())
  {

LABEL_5:
    char v9 = 1;
    goto LABEL_6;
  }
  id v6 = TiledTextView.canvasGenerationToolOverlayController.getter();
  id v7 = CanvasGenerationToolOverlayController.imageGenerationController.getter();
  unsigned __int8 v8 = objc_msgSend(v7, sel_shouldShowImageGenerationUI);

  char v9 = v8 ^ 1;
LABEL_6:
  id v10 = (id)MGCopyAnswer();
  char v11 = [v10 BOOLValue];

  char v13 = 0;
  if ((v11 & 1) == 0 && (v9 & 1) == 0)
  {
    uint64_t v14 = (uint64_t)v2[1];
    if (*(void *)(v14 + 16) || v2[2][2])
    {
      MEMORY[0x270FA5388](v12);
      v16[1] = *(_OWORD *)(a1 + 16);
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v18 = v2;
      swift_bridgeObjectRetain();
      char v13 = specialized Sequence.allSatisfy(_:)((uint64_t (*)(char *))partial apply for closure #1 in implicit closure #3 in CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter, (char)v16, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
      char v13 = 0;
    }
  }
  return v13 & 1;
}

uint64_t closure #1 in implicit closure #3 in CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v7 - 8);
  double v63 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v9 - 8);
  id v58 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v59 = (uint64_t)&v56 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v65 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  id v64 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a4 + 16);
  uint64_t v66 = a3;
  uint64_t v62 = v15;
  uint64_t v16 = type metadata accessor for Capsule();
  uint64_t v61 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<TextBox>?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextBox?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<GraphElement>?);
  MEMORY[0x270FA5388](v25 - 8);
  unint64_t v27 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  WeakTagged_9.tagged3.getter();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<GraphElement>);
  LODWORD(a4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for WeakRef<GraphElement>?);
  if (a4 != 1)
  {
    char v35 = 0;
    return v35 & 1;
  }
  uint64_t v57 = v24;
  uint64_t v60 = v18;
  uint64_t v56 = v16;
  WeakTagged_9.tagged4.getter();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<TextBox>);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = v13;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v21, 1, v29) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for WeakRef<TextBox>?);
    uint64_t v32 = type metadata accessor for TextBox();
    uint64_t v33 = (uint64_t)v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v57, 1, 1, v32);
    uint64_t v34 = (uint64_t)v63;
  }
  else
  {
    uint64_t v36 = (uint64_t)v60;
    Canvas.updatablePaper2.getter((uint64_t)v60);
    uint64_t v33 = (uint64_t)v57;
    WeakRef.subscript.getter();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v36, v56);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v29);
    uint64_t v37 = type metadata accessor for TextBox();
    int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v33, 1, v37);
    uint64_t v34 = (uint64_t)v63;
    if (v38 != 1)
    {
      uint64_t v69 = v37;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v68);
      _s8PaperKit5ShapeVWObTm_0(v33, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for TextBox);
      goto LABEL_8;
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for TextBox?);
  memset(v68, 0, sizeof(v68));
  uint64_t v69 = 2;
LABEL_8:
  uint64_t v40 = v65;
  unsigned __int8 v41 = v64;
  uint64_t v42 = a1;
  uint64_t v43 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v42, v31);
  if (v69 == 2)
  {
    WeakTagged_9.tagged6.getter();
    uint64_t v44 = v31;
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v34, 1, v45) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v34, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v44);
      long long v70 = 0uLL;
      *(void *)&long long v71 = 0;
      *((void *)&v71 + 1) = 1;
    }
    else
    {
      Canvas.updatablePaper2.getter(v43);
      uint64_t v47 = (uint64_t)v58;
      WeakRef.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v43, v56);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v34, v45);
      uint64_t v48 = v59;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v47, v59, &demangling cache variable for type metadata for Shape?);
      uint64_t v49 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v48, 1, v49) == 1)
      {
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v44);
        outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for Shape?);
        long long v70 = 0u;
        long long v71 = 0u;
      }
      else
      {
        *((void *)&v71 + 1) = v49;
        double v50 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v70);
        _s8PaperKit5ShapeVWObTm_0(v48, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for Shape);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v44);
      }
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v68, &demangling cache variable for type metadata for Any???);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v31);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v68, (uint64_t)&v70, &demangling cache variable for type metadata for Any??);
  }
  if (*((void *)&v71 + 1) == 1)
  {
    CGFloat v51 = &demangling cache variable for type metadata for Any??;
    double v52 = &v70;
LABEL_22:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v52, v51);
    goto LABEL_23;
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v70, (uint64_t)v72, &demangling cache variable for type metadata for Any?);
  if (!v73)
  {
    CGFloat v51 = &demangling cache variable for type metadata for Any?;
    double v52 = (long long *)v72;
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    uint64_t v75 = 0;
    memset(v74, 0, sizeof(v74));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v74, &demangling cache variable for type metadata for ShapeTextBox?);
    char v35 = 1;
    return v35 & 1;
  }
  outlined init with take of FindResult(v74, (uint64_t)v76);
  uint64_t v53 = v77;
  uint64_t v54 = v78;
  __swift_project_boxed_opaque_existential_1(v76, v77);
  char v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 72))(v53, v54) ^ 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
  return v35 & 1;
}

uint64_t CanvasFormattingProxy.fillColor.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v4 = type metadata accessor for Shape();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v62 = (uint64_t)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v83 = *(void (***)(uint64_t, uint64_t))(v64 - 8);
  MEMORY[0x270FA5388](v64);
  double v63 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = v4;
  uint64_t v76 = *(void *)(v9 + 16);
  uint64_t v77 = v8;
  uint64_t v11 = type metadata accessor for Capsule();
  uint64_t v74 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  uint64_t v75 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v58 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v72 = (uint64_t)&v58 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v59 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v71 = (char *)&v58 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  unint64_t v82 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  MEMORY[0x270FA5388](v27);
  char v87 = (char *)&v58 - v29;
  uint64_t v78 = v2;
  uint64_t v30 = *(void *)(v2 + 8);
  uint64_t v31 = *(void *)(v30 + 56);
  uint64_t v80 = v30 + 56;
  uint64_t v32 = 1 << *(unsigned char *)(v30 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & v31;
  int64_t v81 = (unint64_t)(v32 + 63) >> 6;
  uint64_t v85 = v26 + 32;
  uint64_t v86 = v26 + 16;
  BOOL v84 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  long long v70 = (void (**)(char *, uint64_t, uint64_t))(v23 + 32);
  uint64_t v73 = (void (**)(uint64_t, uint64_t))(v74 + 1);
  uint64_t v74 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v61 = (void (**)(char *, uint64_t))(v83 + 1);
  uint64_t v66 = (void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v35 = (uint64_t)v21;
  uint64_t v36 = v28;
  uint64_t v83 = (void (**)(uint64_t, uint64_t))(v26 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v38 = 0;
  uint64_t v79 = v10;
  uint64_t v69 = v22;
  uint64_t v68 = v30;
  uint64_t v67 = v36;
  uint64_t v65 = v35;
  if (v34) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v41 = v38 + 1;
  if (__OFADD__(v38, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v41 >= v81)
  {
LABEL_30:
    uint64_t result = swift_release();
    goto LABEL_31;
  }
  unint64_t v42 = *(void *)(v80 + 8 * v41);
  ++v38;
  if (!v42)
  {
    int64_t v38 = v41 + 1;
    if (v41 + 1 >= v81) {
      goto LABEL_30;
    }
    unint64_t v42 = *(void *)(v80 + 8 * v38);
    if (!v42)
    {
      int64_t v38 = v41 + 2;
      if (v41 + 2 >= v81) {
        goto LABEL_30;
      }
      unint64_t v42 = *(void *)(v80 + 8 * v38);
      if (!v42)
      {
        int64_t v43 = v41 + 3;
        if (v43 < v81)
        {
          unint64_t v42 = *(void *)(v80 + 8 * v43);
          if (v42)
          {
            int64_t v38 = v43;
            goto LABEL_20;
          }
          while (1)
          {
            int64_t v38 = v43 + 1;
            if (__OFADD__(v43, 1)) {
              break;
            }
            if (v38 >= v81) {
              goto LABEL_30;
            }
            unint64_t v42 = *(void *)(v80 + 8 * v38);
            ++v43;
            if (v42) {
              goto LABEL_20;
            }
          }
LABEL_36:
          __break(1u);
          return result;
        }
        goto LABEL_30;
      }
    }
  }
LABEL_20:
  unint64_t v34 = (v42 - 1) & v42;
  for (unint64_t i = __clz(__rbit64(v42)) + (v38 << 6); ; unint64_t i = v39 | (v38 << 6))
  {
    uint64_t v44 = v87;
    (*(void (**)(char *, unint64_t, uint64_t))(v26 + 16))(v87, *(void *)(v30 + 48) + *(void *)(v26 + 72) * i, v25);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v36, v44, v25);
    WeakTagged_9.tagged6.getter();
    if ((*v84)(v35, 1, v22) == 1)
    {
      (*v83)(v36, v25);
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v35, &demangling cache variable for type metadata for WeakRef<Shape>?);
      if (!v34) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    uint64_t v45 = v82;
    (*v70)(v82, v35, v22);
    uint64_t v46 = v72;
    Canvas.updatablePaper2.getter(v72);
    uint64_t v47 = (uint64_t)v71;
    WeakRef.subscript.getter();
    uint64_t v48 = *v73;
    (*v73)(v46, v75);
    uint64_t v49 = *v74;
    if ((*v74)(v47, 1, v10) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for Shape?);
      goto LABEL_28;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    double v50 = v63;
    CRRegister.wrappedValue.getter();
    uint64_t v51 = v64;
    TaggedValue_9.tagged3.getter();
    (*v61)(v50, v51);
    int v52 = v89;
    uint64_t v53 = v62;
    outlined init with copy of Shape(v47, v62);
    if (v52 == 1) {
      break;
    }
    _s8PaperKit5ShapeVWOhTm_0(v53, (uint64_t (*)(void))type metadata accessor for Shape);
    _s8PaperKit5ShapeVWOhTm_0(v47, (uint64_t (*)(void))type metadata accessor for Shape);
    uint64_t v45 = v82;
LABEL_28:
    uint64_t v22 = v69;
    (*v66)(v45, v69);
    uint64_t v36 = v67;
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*v83)(v67, v25);
    uint64_t v10 = v79;
    uint64_t v30 = v68;
    uint64_t v35 = v65;
    if (!v34) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v39 = __clz(__rbit64(v34));
    v34 &= v34 - 1;
  }
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  uint64_t v54 = v88;
  _s8PaperKit5ShapeVWOhTm_0(v53, (uint64_t (*)(void))type metadata accessor for Shape);
  _s8PaperKit5ShapeVWOhTm_0(v47, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v45 = v82;
  if (v54) {
    goto LABEL_28;
  }
  uint64_t v55 = v58;
  Canvas.updatablePaper2.getter(v58);
  uint64_t v56 = (uint64_t)v59;
  uint64_t v57 = v69;
  WeakRef.subscript.getter();
  v48(v55, v75);
  if (v49(v56, 1, v79) == 1)
  {
    (*v66)(v45, v57);
    (*v83)(v67, v25);
    swift_release();
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for Shape?);
LABEL_31:
    void *v60 = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    (*v66)(v45, v57);
    (*v83)(v67, v25);
    swift_release();
    return _s8PaperKit5ShapeVWOhTm_0(v56, (uint64_t (*)(void))type metadata accessor for Shape);
  }
  return result;
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.fillColor.setter(uint64_t a1, uint64_t a2, void *a3)
{
  v53[0] = a3;
  uint64_t v67 = a1;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v4 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v57 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Shape();
  uint64_t v75 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v60 = (uint64_t)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v59 = (uint64_t)v53 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v65 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v15 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77 - 8);
  uint64_t v76 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v74 = (char *)v53 - v22;
  uint64_t v23 = *(void *)(a2 + 8);
  uint64_t v24 = *(void *)(v23 + 56);
  uint64_t v68 = v23 + 56;
  uint64_t v25 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & v24;
  int64_t v69 = (unint64_t)(v25 + 63) >> 6;
  uint64_t v72 = v18 + 32;
  uint64_t v73 = v18 + 16;
  long long v71 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  double v63 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v66 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  uint64_t v56 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v62 = (void (**)(char *, uint64_t))(v15 + 8);
  long long v70 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v75 = v23;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v29 = 0;
  uint64_t v64 = v14;
  uint64_t v61 = v20;
  uint64_t v55 = v6;
  while (v27)
  {
    unint64_t v30 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    unint64_t v31 = v30 | (v29 << 6);
LABEL_21:
    uint64_t v35 = v74;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v74, *(void *)(v75 + 48) + *(void *)(v18 + 72) * v31, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v35, v17);
    WeakTagged_9.tagged6.getter();
    uint64_t v36 = v77;
    if ((*v71)(v14, 1, v77) == 1)
    {
      (*v70)(v20, v17);
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for WeakRef<Shape>?);
    }
    else
    {
      uint64_t v37 = v18;
      (*v63)(v76, v14, v36);
      int64_t v38 = v65;
      WeakRef.subscript.getter();
      uint64_t v39 = (uint64_t)v38;
      uint64_t v40 = *v66;
      if ((*v66)(v39, 1, v6))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for Shape?);
LABEL_30:
        uint64_t v50 = v77;
        uint64_t v18 = v37;
        uint64_t v20 = v61;
LABEL_31:
        (*v62)(v76, v50);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v70)(v20, v17);
        uint64_t v14 = v64;
      }
      else
      {
        uint64_t v41 = v59;
        outlined init with copy of Shape(v39, v59);
        outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for Shape?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
        unint64_t v42 = v57;
        CRRegister.wrappedValue.getter();
        uint64_t v43 = v41;
        uint64_t v44 = v58;
        TaggedValue_9.tagged3.getter();
        uint64_t v45 = v42;
        uint64_t v46 = v60;
        (*v56)(v45, v44);
        int v47 = v79;
        outlined init with copy of Shape(v43, v46);
        if (v47 != 1)
        {
          _s8PaperKit5ShapeVWOhTm_0(v60, (uint64_t (*)(void))type metadata accessor for Shape);
          _s8PaperKit5ShapeVWOhTm_0(v59, (uint64_t (*)(void))type metadata accessor for Shape);
          uint64_t v6 = v55;
          goto LABEL_30;
        }
        uint64_t v48 = v55;
        uint64_t v49 = v60;
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
        CRRegister.wrappedValue.getter();
        uint64_t v54 = (void (*)(void *, void))v78[0];
        _s8PaperKit5ShapeVWOhTm_0(v49, (uint64_t (*)(void))type metadata accessor for Shape);
        _s8PaperKit5ShapeVWOhTm_0(v59, (uint64_t (*)(void))type metadata accessor for Shape);
        uint64_t v6 = v48;
        uint64_t v50 = v77;
        uint64_t v18 = v37;
        uint64_t v20 = v61;
        if (v54) {
          goto LABEL_31;
        }
        uint64_t v54 = (void (*)(void *, void))WeakRef.subscript.modify();
        if (!v40(v51, 1, v6))
        {
          id v80 = v53[0];
          id v52 = v53[0];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
          CRRegister.wrappedValue.setter();
        }
        v54(v78, 0);
        uint64_t v14 = v64;
        (*v62)(v76, v77);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v70)(v20, v17);
      }
    }
  }
  int64_t v32 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v32 >= v69) {
    return swift_release();
  }
  unint64_t v33 = *(void *)(v68 + 8 * v32);
  ++v29;
  if (v33) {
    goto LABEL_20;
  }
  int64_t v29 = v32 + 1;
  if (v32 + 1 >= v69) {
    return swift_release();
  }
  unint64_t v33 = *(void *)(v68 + 8 * v29);
  if (v33) {
    goto LABEL_20;
  }
  int64_t v29 = v32 + 2;
  if (v32 + 2 >= v69) {
    return swift_release();
  }
  unint64_t v33 = *(void *)(v68 + 8 * v29);
  if (v33)
  {
LABEL_20:
    unint64_t v27 = (v33 - 1) & v33;
    unint64_t v31 = __clz(__rbit64(v33)) + (v29 << 6);
    goto LABEL_21;
  }
  int64_t v34 = v32 + 3;
  if (v34 >= v69) {
    return swift_release();
  }
  unint64_t v33 = *(void *)(v68 + 8 * v34);
  if (v33)
  {
    int64_t v29 = v34;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v29 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v29 >= v69) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v68 + 8 * v29);
    ++v34;
    if (v33) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.strokeColor.getter@<X0>(uint64_t a1@<X0>, CGColor **a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v150 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v156 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v157);
  uint64_t v159 = (char *)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v155 = (char *)&v142 - v9;
  uint64_t v10 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v158 = (uint64_t)&v142 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v145 = *(void *)(v161 - 8);
  MEMORY[0x270FA5388](v161);
  unint64_t v160 = (char *)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v142 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v170 = (uint64_t)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v144 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  unint64_t v154 = (char *)&v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v173 = *(void *)(v188 - 8);
  MEMORY[0x270FA5388](v188);
  CGRect v187 = (char *)&v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  unint64_t v172 = (char *)&v142 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Signature?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v149 = (char *)&v142 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x270FA5388](v25 - 8);
  unint64_t v27 = (char *)&v142 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect v184 = (void *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Signature>);
  uint64_t v28 = *(v184 - 1);
  MEMORY[0x270FA5388](v184 - 1);
  unint64_t v148 = (char *)&v142 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v190 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v191 = v30;
  uint64_t v195 = type metadata accessor for Capsule();
  uint64_t v31 = *(void *)(v195 - 8);
  MEMORY[0x270FA5388](v195);
  uint64_t v153 = (uint64_t)&v142 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v152 = (uint64_t)&v142 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v151 = (uint64_t)&v142 - v36;
  MEMORY[0x270FA5388](v37);
  uint64_t v171 = (uint64_t)&v142 - v38;
  MEMORY[0x270FA5388](v39);
  uint64_t v146 = (uint64_t)&v142 - v40;
  MEMORY[0x270FA5388](v41);
  uint64_t v142 = (uint64_t)&v142 - v42;
  MEMORY[0x270FA5388](v43);
  uint64_t v166 = (uint64_t)&v142 - v44;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v45 - 8);
  uint64_t v143 = (char *)&v142 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v47);
  long long v165 = (char *)&v142 - v48;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v49 - 8);
  CGRect v183 = (char *)&v142 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v51 = *(void *)(v186 - 8);
  MEMORY[0x270FA5388](v186);
  CGRect v177 = (char *)&v142 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v53);
  MEMORY[0x270FA5388](v54);
  CGRect v181 = (char *)&v142 - v57;
  uint64_t v58 = *(void *)(v3 + 8);
  uint64_t v59 = *(void *)(v3 + 16);
  uint64_t v192 = v3;
  uint64_t v174 = v59;
  uint64_t v60 = *(void *)(v58 + 56);
  uint64_t v168 = v58 + 56;
  uint64_t v61 = 1 << *(unsigned char *)(v58 + 32);
  uint64_t v62 = -1;
  if (v61 < 64) {
    uint64_t v62 = ~(-1 << v61);
  }
  unint64_t v63 = v62 & v60;
  int64_t v169 = (unint64_t)(v61 + 63) >> 6;
  uint64_t v179 = v56 + 32;
  CGRect v180 = (void (**)(char *, uint64_t))(v56 + 16);
  CGRect v178 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  long long v164 = (void (**)(char *, uint64_t, uint64_t))(v51 + 32);
  uint64_t v64 = (void (**)(uint64_t, uint64_t))(v31 + 8);
  uint64_t v65 = v55;
  uint64_t v189 = v64;
  long long v162 = (void (**)(char *, uint64_t))(v51 + 8);
  uint64_t v66 = (uint64_t)v27;
  uint64_t v147 = v28;
  CGRect v175 = (uint64_t (**)(uint64_t, uint64_t, void *))(v28 + 48);
  uint64_t v182 = v56;
  CGRect v176 = (void (**)(uint64_t, uint64_t))(v56 + 8);
  uint64_t v185 = v58;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v68 = 0;
  uint64_t v163 = v53;
  if (!v63) {
    goto LABEL_5;
  }
LABEL_4:
  int64_t v69 = v15;
  uint64_t v193 = v68;
  uint64_t v194 = (v63 - 1) & v63;
  unint64_t v70 = __clz(__rbit64(v63)) | (v68 << 6);
  uint64_t v71 = v186;
  uint64_t v72 = (uint64_t)v183;
  while (1)
  {
    uint64_t v78 = v181;
    uint64_t v77 = v182;
    (*(void (**)(char *, unint64_t, uint64_t))(v182 + 16))(v181, *(void *)(v185 + 48) + *(void *)(v182 + 72) * v70, v53);
    (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v65, v78, v53);
    WeakTagged_9.tagged6.getter();
    if ((*v178)(v72, 1, v71) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v72, &demangling cache variable for type metadata for WeakRef<Shape>?);
      uint64_t v15 = v69;
    }
    else
    {
      uint64_t v15 = v69;
      uint64_t v79 = v72;
      uint64_t v80 = v65;
      uint64_t v81 = v66;
      (*v164)(v177, v79, v71);
      uint64_t v82 = v166;
      Canvas.updatablePaper2.getter(v166);
      uint64_t v83 = (uint64_t)v165;
      WeakRef.subscript.getter();
      BOOL v84 = *v189;
      (*v189)(v82, v195);
      uint64_t v85 = type metadata accessor for Shape();
      uint64_t v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 48);
      if (v86(v83, 1, v85) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v83, &demangling cache variable for type metadata for Shape?);
      }
      else
      {
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
        CRRegister.wrappedValue.getter();
        char v87 = v196;
        _s8PaperKit5ShapeVWOhTm_0(v83, (uint64_t (*)(void))type metadata accessor for Shape);
        if (!v87)
        {
          uint64_t v137 = v142;
          Canvas.updatablePaper2.getter(v142);
          uint64_t v138 = (uint64_t)v143;
          uint64_t v139 = v86;
          uint64_t v140 = v186;
          unint64_t v141 = v177;
          WeakRef.subscript.getter();
          v84(v137, v195);
          if (v139(v138, 1, v85) != 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
            CRRegister.wrappedValue.getter();
            (*v162)(v141, v140);
            (*v176)(v80, v163);
            swift_release();
            return _s8PaperKit5ShapeVWOhTm_0(v138, (uint64_t (*)(void))type metadata accessor for Shape);
          }
          (*v162)(v141, v140);
          (*v176)(v80, v163);
          swift_release();
          unint64_t v95 = &demangling cache variable for type metadata for Shape?;
          uint64_t v96 = v138;
          goto LABEL_65;
        }
      }
      (*v162)(v177, v186);
      uint64_t v66 = v81;
      uint64_t v53 = v163;
      uint64_t v65 = v80;
    }
    WeakTagged_9.tagged7.getter();
    int v88 = (*v175)(v66, 1, v184);
    unint64_t v63 = v194;
    if (v88 != 1)
    {
      uint64_t v89 = v147;
      uint64_t v90 = v148;
      id v91 = v184;
      (*(void (**)(char *, uint64_t, void *))(v147 + 32))(v148, v66, v184);
      uint64_t v92 = v146;
      Canvas.updatablePaper2.getter(v146);
      uint64_t v93 = (uint64_t)v149;
      WeakRef.subscript.getter();
      (*v189)(v92, v195);
      uint64_t v94 = type metadata accessor for Signature();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 48))(v93, 1, v94) != 1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
        CRRegister.wrappedValue.getter();
        (*(void (**)(char *, void *))(v89 + 8))(v90, v91);
        (*v176)(v65, v53);
        swift_release();
        return _s8PaperKit5ShapeVWOhTm_0(v93, (uint64_t (*)(void))type metadata accessor for Signature);
      }
      (*(void (**)(char *, void *))(v89 + 8))(v90, v91);
      (*v176)(v65, v53);
      swift_release();
      unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Signature?;
      uint64_t v96 = v93;
LABEL_65:
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v96, v95);
LABEL_66:
      *unint64_t v150 = 0;
      return result;
    }
    (*v176)(v65, v53);
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v66, &demangling cache variable for type metadata for WeakRef<Signature>?);
    uint64_t v68 = v193;
    if (v63) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v73 = v68 + 1;
    if (__OFADD__(v68, 1))
    {
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    uint64_t v71 = v186;
    uint64_t v72 = (uint64_t)v183;
    if (v73 >= v169) {
      goto LABEL_30;
    }
    unint64_t v74 = *(void *)(v168 + 8 * v73);
    int64_t v75 = v68 + 1;
    if (!v74)
    {
      int64_t v75 = v68 + 2;
      if (v68 + 2 >= v169) {
        goto LABEL_30;
      }
      unint64_t v74 = *(void *)(v168 + 8 * v75);
      if (!v74)
      {
        int64_t v75 = v68 + 3;
        if (v68 + 3 >= v169) {
          goto LABEL_30;
        }
        unint64_t v74 = *(void *)(v168 + 8 * v75);
        if (!v74) {
          break;
        }
      }
    }
LABEL_18:
    int64_t v69 = v15;
    uint64_t v193 = v75;
    uint64_t v194 = (v74 - 1) & v74;
    unint64_t v70 = __clz(__rbit64(v74)) + (v75 << 6);
  }
  uint64_t v76 = v68 + 4;
  if (v68 + 4 < v169)
  {
    unint64_t v74 = *(void *)(v168 + 8 * v76);
    if (!v74)
    {
      while (1)
      {
        int64_t v75 = v76 + 1;
        if (__OFADD__(v76, 1)) {
          break;
        }
        if (v75 >= v169) {
          goto LABEL_30;
        }
        unint64_t v74 = *(void *)(v168 + 8 * v75);
        ++v76;
        if (v74) {
          goto LABEL_18;
        }
      }
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    int64_t v75 = v68 + 4;
    goto LABEL_18;
  }
LABEL_30:
  swift_release();
  uint64_t v97 = *(void *)(v174 + 56);
  uint64_t v182 = v174 + 56;
  uint64_t v98 = 1 << *(unsigned char *)(v174 + 32);
  uint64_t v99 = -1;
  if (v98 < 64) {
    uint64_t v99 = ~(-1 << v98);
  }
  unint64_t v100 = v99 & v97;
  CGRect v183 = (char *)((unint64_t)(v98 + 63) >> 6);
  uint64_t v185 = v173 + 32;
  uint64_t v186 = v173 + 16;
  CGRect v181 = (char *)(v145 + 8);
  id v101 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
  uint64_t v102 = (void (**)(char *, uint64_t))(v144 + 8);
  uint64_t v103 = (void (**)(char *, uint64_t, uint64_t))(v144 + 32);
  uint64_t v104 = (void (**)(char *, uint64_t))(v173 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v105 = 0;
  CGFloat v167 = v15;
  CGRect v180 = v104;
  while (1)
  {
    if (v100)
    {
      uint64_t v193 = (v100 - 1) & v100;
      uint64_t v194 = v105;
      unint64_t v106 = __clz(__rbit64(v100)) | (v105 << 6);
      goto LABEL_51;
    }
    uint64_t v107 = v105 + 1;
    if (__OFADD__(v105, 1)) {
      goto LABEL_70;
    }
    if (v107 >= (uint64_t)v183)
    {
LABEL_61:
      uint64_t result = swift_release();
      goto LABEL_66;
    }
    unint64_t v108 = *(void *)(v182 + 8 * v107);
    uint64_t v109 = v105 + 1;
    if (!v108)
    {
      uint64_t v109 = v105 + 2;
      if (v105 + 2 >= (uint64_t)v183) {
        goto LABEL_61;
      }
      unint64_t v108 = *(void *)(v182 + 8 * v109);
      if (!v108)
      {
        uint64_t v109 = v105 + 3;
        if (v105 + 3 >= (uint64_t)v183) {
          goto LABEL_61;
        }
        unint64_t v108 = *(void *)(v182 + 8 * v109);
        if (!v108) {
          break;
        }
      }
    }
LABEL_50:
    uint64_t v193 = (v108 - 1) & v108;
    uint64_t v194 = v109;
    unint64_t v106 = __clz(__rbit64(v108)) + (v109 << 6);
LABEL_51:
    uint64_t v111 = v173;
    uint64_t v112 = v172;
    uint64_t v113 = v188;
    (*(void (**)(char *, unint64_t, uint64_t))(v173 + 16))(v172, *(void *)(v174 + 48) + *(void *)(v173 + 72) * v106, v188);
    (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v187, v112, v113);
    uint64_t v114 = v171;
    Canvas.updatablePaper2.getter(v171);
    WeakRef.subscript.getter();
    uint64_t v115 = *v189;
    (*v189)(v114, v195);
    uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    uint64_t v117 = *(void *)(v116 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v15, 1, v116) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
    }
    else
    {
      CGRect v184 = v115;
      uint64_t v118 = v170;
      uint64_t v119 = v160;
      CRRegister.value.getter();
      uint64_t v120 = v161;
      SharedTagged_2.tagged1.getter();
      uint64_t v121 = v120;
      uint64_t v15 = v167;
      (*(void (**)(char *, uint64_t))v181)(v119, v121);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v15, v116);
      uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
      uint64_t v123 = *(void *)(v122 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v118, 1, v122) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v170, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
        uint64_t v104 = v180;
      }
      else
      {
        uint64_t v124 = v151;
        Canvas.updatablePaper2.getter(v151);
        uint64_t v125 = v170;
        Ref.subscript.getter();
        ((void (*)(uint64_t, uint64_t))v184)(v124, v195);
        (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v125, v122);
        uint64_t v126 = v152;
        Canvas.updatablePaper2.getter(v152);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
        uint64_t v127 = v154;
        CRRegister.wrappedValue.getter();
        uint64_t v128 = (uint64_t)v156;
        uint64_t v129 = (uint64_t)v155;
        while (1)
        {
          swift_getWitnessTable();
          Ref.subscript.getter();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
          CRRegister.wrappedValue.getter();
          _s8PaperKit5ShapeVWOhTm_0(v129, type metadata accessor for PKStrokeInheritedProperties);
          if ((*v101)(v128, 1, v18) == 1) {
            break;
          }
          (*v102)(v127, v18);
          (*v103)(v127, v128, v18);
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v128, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
        _s8PaperKit5ShapeVWOhTm_0(v158, type metadata accessor for PKStrokeStruct);
        uint64_t v130 = v195;
        uint64_t v131 = (void (*)(uint64_t, uint64_t))v184;
        ((void (*)(uint64_t, uint64_t))v184)(v126, v195);
        uint64_t v132 = v153;
        Canvas.updatablePaper2.getter(v153);
        Ref.subscript.getter();
        v131(v132, v130);
        (*v102)(v127, v18);
        uint64_t v133 = (uint64_t)v159;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
        CRRegister.wrappedValue.getter();
        uint64_t v134 = v196;
        _s8PaperKit5ShapeVWOhTm_0(v133, type metadata accessor for PKStrokeInheritedProperties);
        uint64_t v15 = v167;
        uint64_t v104 = v180;
        if (v134)
        {
          id v135 = objc_msgSend(v134, sel_color);

          if (v135)
          {
            uint64_t v136 = (CGColor *)objc_msgSend(v135, sel_CGColor);
            if (v136)
            {
              Color.init(cgColor:)(v136, v150);

              (*v104)(v187, v188);
              return swift_release();
            }
          }
        }
      }
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v104)(v187, v188);
    unint64_t v100 = v193;
    uint64_t v105 = v194;
  }
  uint64_t v110 = v105 + 4;
  if (v105 + 4 >= (uint64_t)v183) {
    goto LABEL_61;
  }
  unint64_t v108 = *(void *)(v182 + 8 * v110);
  if (v108)
  {
    uint64_t v109 = v105 + 4;
    goto LABEL_50;
  }
  while (1)
  {
    uint64_t v109 = v110 + 1;
    if (__OFADD__(v110, 1)) {
      break;
    }
    if (v109 >= (uint64_t)v183) {
      goto LABEL_61;
    }
    unint64_t v108 = *(void *)(v182 + 8 * v109);
    ++v110;
    if (v108) {
      goto LABEL_50;
    }
  }
LABEL_72:
  __break(1u);
  return result;
}

void CanvasFormattingProxy.fillColor.setter(void **a1, uint64_t a2, uint64_t (*a3)(double))
{
  uint64_t v3 = *a1;
  Canvas.undoable(newChange:persistSelection:action:)(1, 0, a3);
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.strokeColor.setter(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v144 = a4;
  id v150 = a3;
  uint64_t v185 = a1;
  uint64_t v147 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v147);
  uint64_t v143 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v135 = *(void *)(v146 - 8);
  MEMORY[0x270FA5388](v146);
  uint64_t v138 = (char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v142 = (char *)&v130 - v8;
  uint64_t v9 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v137 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v141 = (char *)&v130 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v139 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v140 = (char *)&v130 - v16;
  uint64_t v145 = type metadata accessor for PKInk();
  uint64_t v134 = *(void *)(v145 - 8);
  MEMORY[0x270FA5388](v145);
  uint64_t v136 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v133 = *(void *)(v153 - 8);
  MEMORY[0x270FA5388](v153);
  uint64_t v152 = (char *)&v130 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v132 = *(void *)(v155 - 8);
  MEMORY[0x270FA5388](v155);
  uint64_t v151 = (char *)&v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v181 = (uint64_t)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v171 = (char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v131 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  unint64_t v154 = (char *)&v130 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v164 = *(void *)(v148 - 8);
  MEMORY[0x270FA5388](v148);
  uint64_t v182 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v163 = (char *)&v130 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v130 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Signature>);
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v170 = (void (**)(char *, uint64_t, uint64_t))((char *)&v130 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v162 = type metadata accessor for Shape();
  uint64_t v34 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162);
  uint64_t v149 = (uint64_t)&v130 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v36 - 8);
  unint64_t v172 = (uint64_t *)((char *)&v130 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v38 - 8);
  uint64_t v186 = (char *)&v130 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v40 = *(void *)(v184 - 8);
  MEMORY[0x270FA5388](v184);
  CGRect v180 = (char *)&v130 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v42);
  uint64_t v44 = (char *)&v130 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  CGRect v177 = (char *)&v130 - v47;
  uint64_t v48 = *(void *)(a2 + 8);
  uint64_t v165 = *(void *)(a2 + 16);
  uint64_t v49 = *(void *)(v48 + 56);
  uint64_t v166 = (void (*)(char *, uint64_t))(v48 + 56);
  uint64_t v50 = 1 << *(unsigned char *)(v48 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & v49;
  CGFloat v167 = (void (**)(char *, uint64_t))((unint64_t)(v50 + 63) >> 6);
  CGRect v175 = (void (**)(char *, uint64_t))(v46 + 4);
  CGRect v176 = (void (**)(char *, uint64_t))(v46 + 2);
  uint64_t v174 = (unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  uint64_t v159 = (void (**)(char *, uint64_t, uint64_t))(v40 + 32);
  uint64_t v161 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  uint64_t v158 = (void (**)(char *, uint64_t))(v40 + 8);
  CGRect v178 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v46;
  uint64_t v173 = (void (**)(char *, uint64_t))(v46 + 1);
  int64_t v169 = (unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  uint64_t v157 = (void (**)(char *, char *, uint64_t))(v32 + 32);
  uint64_t v156 = (void (**)(void (**)(char *, uint64_t, uint64_t), unsigned int (**)(uint64_t, uint64_t, uint64_t)))(v32 + 8);
  uint64_t v179 = v48;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v54 = 0;
  unint64_t v160 = v30;
  CGRect v183 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v31;
  while (v52)
  {
    unint64_t v55 = __clz(__rbit64(v52));
    v52 &= v52 - 1;
    unint64_t v56 = v55 | (v54 << 6);
LABEL_21:
    uint64_t v62 = v178;
    unint64_t v63 = v177;
    ((void (*)(char *, unint64_t, uint64_t))v178[2])(v177, *(void *)(v179 + 48) + (void)v178[9] * v56, v42);
    ((void (*)(char *, char *, uint64_t))v62[4])(v44, v63, v42);
    WeakTagged_9.tagged6.getter();
    uint64_t v64 = (uint64_t)v186;
    uint64_t v65 = v184;
    if ((*v174)(v186, 1, v184) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v64, &demangling cache variable for type metadata for WeakRef<Shape>?);
LABEL_27:
      WeakTagged_9.tagged7.getter();
      if ((*v169)(v30, 1, v31) == 1)
      {
        (*v173)(v44, v42);
        uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for WeakRef<Signature>?);
      }
      else
      {
        (*v157)((char *)v170, v30, v31);
        uint64_t v72 = (void (*)(void **, void))WeakRef.subscript.modify();
        uint64_t v74 = v73;
        uint64_t v75 = type metadata accessor for Signature();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 48))(v74, 1, v75))
        {
          id v189 = v150;
          id v76 = v150;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
          CRRegister.wrappedValue.setter();
        }
        v72(&v188, 0);
        uint64_t v30 = v160;
        uint64_t v31 = (uint64_t)v183;
        (*v156)(v170, v183);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v173)(v44, v42);
      }
    }
    else
    {
      (*v159)(v180, v64, v65);
      uint64_t v66 = v172;
      WeakRef.subscript.getter();
      uint64_t v67 = *v161;
      if ((*v161)((uint64_t)v66, 1, v162))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v172, &demangling cache variable for type metadata for Shape?);
        uint64_t v68 = v184;
LABEL_26:
        (*v158)(v180, v68);
        uint64_t v31 = (uint64_t)v183;
        goto LABEL_27;
      }
      int64_t v69 = v172;
      uint64_t v70 = v149;
      outlined init with copy of Shape((uint64_t)v172, v149);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v69, &demangling cache variable for type metadata for Shape?);
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      uint64_t v71 = v188;
      _s8PaperKit5ShapeVWOhTm_0(v70, (uint64_t (*)(void))type metadata accessor for Shape);
      uint64_t v68 = v184;
      if (v71) {
        goto LABEL_26;
      }
      uint64_t v77 = (void (*)(void **, void))WeakRef.subscript.modify();
      if (!v67(v78, 1, v162))
      {
        id v189 = v150;
        id v79 = v150;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
        CRRegister.wrappedValue.setter();
      }
      v77(&v188, 0);
      uint64_t v31 = (uint64_t)v183;
      (*v158)(v180, v184);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))*v173)(v44, v42);
      uint64_t v30 = v160;
    }
  }
  uint64_t v57 = v54 + 1;
  if (__OFADD__(v54, 1))
  {
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v58 = v181;
  uint64_t v59 = (uint64_t)v171;
  if (v57 >= (uint64_t)v167) {
    goto LABEL_34;
  }
  unint64_t v60 = *((void *)v166 + v57);
  ++v54;
  if (v60) {
    goto LABEL_20;
  }
  uint64_t v54 = v57 + 1;
  if (v57 + 1 >= (uint64_t)v167) {
    goto LABEL_34;
  }
  unint64_t v60 = *((void *)v166 + v54);
  if (v60) {
    goto LABEL_20;
  }
  uint64_t v54 = v57 + 2;
  if (v57 + 2 >= (uint64_t)v167) {
    goto LABEL_34;
  }
  unint64_t v60 = *((void *)v166 + v54);
  if (v60) {
    goto LABEL_20;
  }
  uint64_t v61 = v57 + 3;
  if (v61 >= (uint64_t)v167)
  {
LABEL_34:
    uint64_t result = swift_release();
    if (!v150) {
      return result;
    }
    id v189 = (id)v165;
    uint64_t v80 = *(void *)(v165 + 56);
    uint64_t v179 = v165 + 56;
    uint64_t v81 = 1 << *(unsigned char *)(v165 + 32);
    uint64_t v82 = -1;
    if (v81 < 64) {
      uint64_t v82 = ~(-1 << v81);
    }
    unint64_t v83 = v82 & v80;
    uint64_t v158 = (void (**)(char *, uint64_t))v150;
    uint64_t result = outlined retain of [ReflowElement]((uint64_t)&v189);
    uint64_t v84 = 0;
    CGRect v180 = (char *)((unint64_t)(v81 + 63) >> 6);
    uint64_t v186 = (char *)(v164 + 16);
    uint64_t v184 = v164 + 32;
    CGRect v183 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48);
    CGRect v178 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56);
    CGRect v177 = (char *)(v132 + 16);
    CGRect v176 = (void (**)(char *, uint64_t))(v133 + 8);
    CGRect v175 = (void (**)(char *, uint64_t))(v132 + 8);
    uint64_t v174 = (unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48);
    uint64_t v170 = (void (**)(char *, uint64_t, uint64_t))(v131 + 32);
    unint64_t v172 = (void *)(v135 + 8);
    uint64_t v173 = (void (**)(char *, uint64_t))(v134 + 56);
    unint64_t v160 = (char *)(v134 + 48);
    uint64_t v159 = (void (**)(char *, uint64_t, uint64_t))(v134 + 32);
    uint64_t v157 = (void (**)(char *, char *, uint64_t))(v134 + 8);
    int64_t v169 = (unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 8);
    uint64_t v85 = (void (**)(char *, uint64_t))(v164 + 8);
    uint64_t v86 = v155;
    uint64_t v87 = v148;
    CGFloat v167 = (void (**)(char *, uint64_t))(v164 + 8);
    if (v83) {
      goto LABEL_41;
    }
LABEL_42:
    uint64_t v90 = v84 + 1;
    if (!__OFADD__(v84, 1))
    {
      if (v90 < (uint64_t)v180)
      {
        unint64_t v91 = *(void *)(v179 + 8 * v90);
        ++v84;
        if (v91) {
          goto LABEL_55;
        }
        uint64_t v84 = v90 + 1;
        if (v90 + 1 >= (uint64_t)v180) {
          goto LABEL_67;
        }
        unint64_t v91 = *(void *)(v179 + 8 * v84);
        if (v91) {
          goto LABEL_55;
        }
        uint64_t v84 = v90 + 2;
        if (v90 + 2 >= (uint64_t)v180) {
          goto LABEL_67;
        }
        unint64_t v91 = *(void *)(v179 + 8 * v84);
        if (v91)
        {
LABEL_55:
          unint64_t v83 = (v91 - 1) & v91;
          for (unint64_t i = __clz(__rbit64(v91)) + (v84 << 6); ; unint64_t i = v88 | (v84 << 6))
          {
            uint64_t v93 = v164;
            uint64_t v94 = v163;
            (*(void (**)(char *, unint64_t, uint64_t))(v164 + 16))(v163, *(void *)(v165 + 48) + *(void *)(v164 + 72) * i, v87);
            (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v182, v94, v87);
            WeakRef.subscript.getter();
            if ((*v183)(v58, 1, v86))
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(v58, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
              (*v178)(v59, 1, 1, v168);
LABEL_40:
              (*v85)(v182, v87);
              uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
              if (!v83) {
                goto LABEL_42;
              }
              goto LABEL_41;
            }
            unint64_t v95 = v151;
            (*(void (**)(char *, uint64_t, uint64_t))v177)(v151, v181, v86);
            outlined destroy of StocksKitCurrencyCache.Provider?(v181, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
            uint64_t v96 = v152;
            CRRegister.value.getter();
            uint64_t v97 = v153;
            SharedTagged_2.tagged1.getter();
            uint64_t v98 = v97;
            uint64_t v86 = v155;
            (*v176)(v96, v98);
            uint64_t v99 = v95;
            uint64_t v59 = (uint64_t)v171;
            uint64_t v58 = v181;
            (*v175)(v99, v86);
            unsigned int v100 = (*v174)((char *)v59, 1, v168);
            id v101 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v173;
            if (v100 == 1) {
              goto LABEL_40;
            }
            (*v170)(v154, v59, v168);
            uint64_t v102 = v185;
            uint64_t v103 = (void (*)(void **, void))Ref.subscript.modify();
            PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(v102, v144);
            v103(&v188, 0);
            uint64_t v104 = (uint64_t)v141;
            Ref.subscript.getter();
            uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
            unint64_t v106 = v142;
            CRRegister.wrappedValue.getter();
            _s8PaperKit5ShapeVWOhTm_0(v104, type metadata accessor for PKStrokeStruct);
            uint64_t v107 = (uint64_t)v143;
            uint64_t v108 = v146;
            Ref.subscript.getter();
            uint64_t v109 = (void (*)(char *, uint64_t))*v172;
            ((void (*)(char *, uint64_t))*v172)(v106, v108);
            uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
            CRRegister.wrappedValue.getter();
            uint64_t v111 = v188;
            _s8PaperKit5ShapeVWOhTm_0(v107, type metadata accessor for PKStrokeInheritedProperties);
            if (v111)
            {
              uint64_t v161 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v110;
              uint64_t v162 = v105;
              uint64_t v166 = v109;
              uint64_t v112 = *v101;
              uint64_t v113 = 1;
              uint64_t v114 = v139;
              uint64_t v115 = v145;
              (*v101)(v139, 1, 1, v145);
              _sSo10CGColorRefaAB14CoreFoundation9_CFObjectSCWlTm_0(&lazy protocol witness table cache variable for type PKInk and conformance PKInk, MEMORY[0x263F14A90]);
              dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

              uint64_t v116 = *(uint64_t (**)(char *, uint64_t, uint64_t))v160;
              uint64_t v117 = v140;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v160)(v114, 1, v115) != 1)
              {
                (*v159)(v117, (uint64_t)v139, v115);
                uint64_t v113 = 0;
              }
              v112(v117, v113, 1, v115);
              int v118 = v116(v117, 1, v115);
              uint64_t v87 = v148;
              if (v118 != 1)
              {
                uint64_t v119 = v136;
                (*v159)(v136, (uint64_t)v117, v115);
                id v120 = objc_allocWithZone(MEMORY[0x263F825C8]);
                objc_msgSend(v120, sel_initWithCGColor_, v158);
                PKInk.color.setter();
                uint64_t v121 = (uint64_t)v137;
                uint64_t v122 = v168;
                Ref.subscript.getter();
                uint64_t v123 = v138;
                CRRegister.wrappedValue.getter();
                _s8PaperKit5ShapeVWOhTm_0(v121, type metadata accessor for PKStrokeStruct);
                Class isa = PKInk._bridgeToObjectiveC()().super.isa;
                uint64_t v125 = v146;
                uint64_t v126 = (void (*)(void **, void))Ref.subscript.modify();
                Class v187 = isa;
                CRRegister.wrappedValue.setter();
                v126(&v188, 0);
                uint64_t v127 = v123;
                uint64_t v87 = v148;
                v166(v127, v125);
                ((void (*)(char *, uint64_t))*v157)(v119, v145);
                ((void (*)(char *, uint64_t))*v169)(v154, v122);
                uint64_t v85 = v167;
                uint64_t result = ((uint64_t (*)(char *, uint64_t))*v167)(v182, v87);
                goto LABEL_65;
              }
            }
            else
            {
              uint64_t v117 = v140;
              (*v101)(v140, 1, 1, v145);
              uint64_t v87 = v148;
            }
            ((void (*)(char *, uint64_t))*v169)(v154, v168);
            uint64_t v128 = v167;
            (*v167)(v182, v87);
            uint64_t v129 = (uint64_t)v117;
            uint64_t v85 = v128;
            uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v129, &demangling cache variable for type metadata for PKInk?);
LABEL_65:
            uint64_t v86 = v155;
            uint64_t v58 = v181;
            uint64_t v59 = (uint64_t)v171;
            if (!v83) {
              goto LABEL_42;
            }
LABEL_41:
            unint64_t v88 = __clz(__rbit64(v83));
            v83 &= v83 - 1;
          }
        }
        uint64_t v92 = v90 + 3;
        if (v92 < (uint64_t)v180)
        {
          unint64_t v91 = *(void *)(v179 + 8 * v92);
          if (!v91)
          {
            while (1)
            {
              uint64_t v84 = v92 + 1;
              if (__OFADD__(v92, 1)) {
                goto LABEL_72;
              }
              if (v84 >= (uint64_t)v180) {
                goto LABEL_67;
              }
              unint64_t v91 = *(void *)(v179 + 8 * v84);
              ++v92;
              if (v91) {
                goto LABEL_55;
              }
            }
          }
          uint64_t v84 = v92;
          goto LABEL_55;
        }
      }
LABEL_67:

      return swift_release();
    }
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  unint64_t v60 = *((void *)v166 + v61);
  if (v60)
  {
    uint64_t v54 = v61;
LABEL_20:
    unint64_t v52 = (v60 - 1) & v60;
    unint64_t v56 = __clz(__rbit64(v60)) + (v54 << 6);
    uint64_t v31 = (uint64_t)v183;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v54 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      break;
    }
    if (v54 >= (uint64_t)v167) {
      goto LABEL_34;
    }
    unint64_t v60 = *((void *)v166 + v54);
    ++v61;
    if (v60) {
      goto LABEL_20;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.strokeWidth.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v80 = (uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Signature?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v61 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v68 = *(void *)(a1 + 16);
  uint64_t v70 = v7;
  uint64_t v69 = type metadata accessor for Capsule();
  uint64_t v8 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v60 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v64 = (uint64_t)&v58 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v72 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for Shape();
  uint64_t v17 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  uint64_t v59 = (uint64_t)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v75 = (char *)&v58 - v24;
  uint64_t v71 = v1;
  uint64_t v25 = *(void *)(v1 + 8);
  uint64_t v26 = *(void *)(v25 + 56);
  uint64_t v65 = v25 + 56;
  uint64_t v27 = 1 << *(unsigned char *)(v25 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & v26;
  uint64_t v73 = v23 + 32;
  uint64_t v74 = v23 + 16;
  int64_t v66 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v67 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  unint64_t v63 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v62 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v76 = v23;
  uint64_t v30 = (void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v78 = v25;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v32 = 0;
  id v79 = v14;
  while (1)
  {
    if (v29)
    {
      unint64_t v33 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      unint64_t v34 = v33 | (v32 << 6);
      goto LABEL_22;
    }
    int64_t v35 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v35 >= v66) {
      goto LABEL_33;
    }
    unint64_t v36 = *(void *)(v65 + 8 * v35);
    ++v32;
    if (!v36)
    {
      int64_t v32 = v35 + 1;
      if (v35 + 1 >= v66) {
        goto LABEL_33;
      }
      unint64_t v36 = *(void *)(v65 + 8 * v32);
      if (!v36)
      {
        int64_t v32 = v35 + 2;
        if (v35 + 2 >= v66) {
          goto LABEL_33;
        }
        unint64_t v36 = *(void *)(v65 + 8 * v32);
        if (!v36) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v29 = (v36 - 1) & v36;
    unint64_t v34 = __clz(__rbit64(v36)) + (v32 << 6);
LABEL_22:
    uint64_t v39 = v75;
    uint64_t v38 = v76;
    (*(void (**)(char *, unint64_t, uint64_t))(v76 + 16))(v75, *(void *)(v78 + 48) + *(void *)(v76 + 72) * v34, v19);
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v21, v39, v19);
    WeakTagged_9.tagged6.getter();
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, v40) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for WeakRef<Shape>?);
      uint64_t v42 = (uint64_t)v72;
      (*v62)(v72, 1, 1, v77);
LABEL_25:
      outlined destroy of StocksKitCurrencyCache.Provider?(v42, &demangling cache variable for type metadata for Shape?);
      goto LABEL_28;
    }
    uint64_t v43 = v64;
    Canvas.updatablePaper2.getter(v64);
    uint64_t v44 = v30;
    uint64_t v45 = v72;
    WeakRef.subscript.getter();
    uint64_t v42 = (uint64_t)v45;
    uint64_t v30 = v44;
    uint64_t v46 = v43;
    uint64_t v14 = v79;
    (*v67)(v46, v69);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v40);
    if ((*v63)(v42, 1, v77) == 1) {
      goto LABEL_25;
    }
    uint64_t v47 = v59;
    _s8PaperKit5ShapeVWObTm_0(v42, v59, (uint64_t (*)(void))type metadata accessor for Shape);
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    CRRegister.wrappedValue.getter();
    if (!v81)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.getter();
      double v57 = *(double *)&v81;

      if (v57 != 0.0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.getter();
        double v57 = *(double *)&v81;
      }
      _s8PaperKit5ShapeVWOhTm_0(v47, (uint64_t (*)(void))type metadata accessor for Shape);
      (*v44)(v21, v19);
      swift_release();
      return *(void *)&v57;
    }
    _s8PaperKit5ShapeVWOhTm_0(v47, (uint64_t (*)(void))type metadata accessor for Shape);
LABEL_28:
    uint64_t v48 = v80;
    WeakTagged_9.tagged7.getter();
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Signature>);
    uint64_t v50 = *(void *)(v49 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v80, &demangling cache variable for type metadata for WeakRef<Signature>?);
    }
    else
    {
      uint64_t v51 = v60;
      Canvas.updatablePaper2.getter(v60);
      uint64_t v52 = v80;
      uint64_t v53 = (uint64_t)v61;
      WeakRef.subscript.getter();
      (*v67)(v51, v69);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v49);
      uint64_t v54 = type metadata accessor for Signature();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v53, 1, v54) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v53, (uint64_t *)&demangling cache variable for type metadata for Signature?);
        uint64_t v14 = v79;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
        CRRegister.wrappedValue.getter();
        uint64_t v55 = (uint64_t)v81;
        char v56 = v82;
        _s8PaperKit5ShapeVWOhTm_0(v53, (uint64_t (*)(void))type metadata accessor for Signature);
        uint64_t v14 = v79;
        if ((v56 & 1) == 0)
        {
          (*v30)(v21, v19);
          swift_release();
          double v57 = (double)v55;
          return *(void *)&v57;
        }
      }
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v30)(v21, v19);
  }
  int64_t v37 = v35 + 3;
  if (v37 >= v66)
  {
LABEL_33:
    swift_release();
    double v57 = 0.0;
    return *(void *)&v57;
  }
  unint64_t v36 = *(void *)(v65 + 8 * v37);
  if (v36)
  {
    int64_t v32 = v37;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v32 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v32 >= v66) {
      goto LABEL_33;
    }
    unint64_t v36 = *(void *)(v65 + 8 * v32);
    ++v37;
    if (v36) {
      goto LABEL_21;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.strokeWidth.setter()
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.strokeWidth.setter);
}

void closure #1 in CanvasFormattingProxy.strokeWidth.setter()
{
  uint64_t v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.strokeWidth.setter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v82) = a4;
  uint64_t v80 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v57[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Signature>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v70 = &v57[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v67 = type metadata accessor for Shape();
  uint64_t v79 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v60 = &v57[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = &v57[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v16 - 8);
  unint64_t v83 = &v57[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  id v81 = &v57[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v21);
  uint64_t v84 = &v57[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v23);
  uint64_t v77 = &v57[-v25];
  uint64_t v26 = *(void *)(a2 + 8);
  uint64_t v27 = *(void *)(v26 + 56);
  uint64_t v68 = v26 + 56;
  uint64_t v28 = 1 << *(unsigned char *)(v26 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  int64_t v69 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v75 = v24 + 32;
  uint64_t v76 = v24 + 16;
  uint64_t v74 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48);
  uint64_t v64 = (void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 32);
  int64_t v66 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  unint64_t v63 = (void (**)(unsigned char *, uint64_t))(v19 + 8);
  if (v82) {
    double v31 = 0.0;
  }
  else {
    double v31 = *(double *)&a3;
  }
  uint64_t v78 = v24;
  uint64_t v73 = (void (**)(unsigned char *, uint64_t))(v24 + 8);
  uint64_t v71 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v62 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32);
  uint64_t v59 = *(void *)&v31 & 0x7FF0000000000000;
  uint64_t v58 = (uint64_t)v31;
  uint64_t v61 = (void (**)(unsigned char *, uint64_t))(v10 + 8);
  uint64_t v79 = v26;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v33 = 0;
  uint64_t v65 = v8;
  uint64_t v72 = v9;
  while (1)
  {
    uint64_t v34 = v18;
    if (!v30) {
      break;
    }
    unint64_t v35 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    int64_t v82 = v33;
    unint64_t v36 = v35 | (v33 << 6);
LABEL_24:
    uint64_t v41 = v78;
    uint64_t v42 = v77;
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(v78 + 16))(v77, *(void *)(v79 + 48) + *(void *)(v78 + 72) * v36, v21);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v41 + 32))(v84, v42, v21);
    WeakTagged_9.tagged6.getter();
    uint64_t v43 = (uint64_t)v83;
    if ((*v74)(v83, 1, v34) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v43, &demangling cache variable for type metadata for WeakRef<Shape>?);
      uint64_t v44 = v84;
LABEL_30:
      WeakTagged_9.tagged7.getter();
      if ((*v71)(v8, 1, v9) == 1)
      {
        (*v73)(v44, v21);
        uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakRef<Signature>?);
        uint64_t v18 = v34;
        int64_t v33 = v82;
      }
      else
      {
        (*v62)(v70, v8, v9);
        uint64_t v51 = (void (*)(void *, void))WeakRef.subscript.modify();
        uint64_t v53 = v52;
        uint64_t v54 = type metadata accessor for Signature();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v53, 1, v54);
        if (!result)
        {
          if (v59 == 0x7FF0000000000000) {
            goto LABEL_42;
          }
          if (v31 <= -9.22337204e18) {
            goto LABEL_43;
          }
          if (v31 >= 9.22337204e18) {
            goto LABEL_44;
          }
          double v85 = *(double *)&v58;
          char v86 = 0;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
          CRRegister.wrappedValue.setter();
        }
        v51(v87, 0);
        uint64_t v8 = v65;
        uint64_t v9 = v72;
        uint64_t v18 = v34;
        (*v61)(v70, v72);
        uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))*v73)(v84, v21);
        int64_t v33 = v82;
      }
    }
    else
    {
      (*v64)(v81, v43, v34);
      WeakRef.subscript.getter();
      uint64_t v45 = *v66;
      if ((*v66)((uint64_t)v15, 1, v67))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Shape?);
        uint64_t v44 = v84;
LABEL_29:
        (*v63)(v81, v34);
        uint64_t v9 = v72;
        goto LABEL_30;
      }
      uint64_t v46 = (uint64_t)v15;
      uint64_t v47 = (uint64_t)v15;
      uint64_t v48 = v60;
      outlined init with copy of Shape(v46, (uint64_t)v60);
      outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for Shape?);
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      uint64_t v49 = v87[0];
      uint64_t v50 = (uint64_t)v48;
      uint64_t v15 = (unsigned char *)v47;
      _s8PaperKit5ShapeVWOhTm_0(v50, (uint64_t (*)(void))type metadata accessor for Shape);
      uint64_t v44 = v84;
      if (v49) {
        goto LABEL_29;
      }
      uint64_t v55 = (void (*)(void *, void))WeakRef.subscript.modify();
      if (!v45(v56, 1, v67))
      {
        double v85 = v31;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.setter();
      }
      v55(v87, 0);
      uint64_t v9 = v72;
      uint64_t v18 = v34;
      (*v63)(v81, v34);
      uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))*v73)(v84, v21);
      uint64_t v8 = v65;
      int64_t v33 = v82;
    }
  }
  int64_t v37 = v33 + 1;
  if (__OFADD__(v33, 1))
  {
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v37 >= v69) {
    return swift_release();
  }
  unint64_t v38 = *(void *)(v68 + 8 * v37);
  int64_t v39 = v33 + 1;
  if (v38) {
    goto LABEL_23;
  }
  int64_t v39 = v33 + 2;
  if (v33 + 2 >= v69) {
    return swift_release();
  }
  unint64_t v38 = *(void *)(v68 + 8 * v39);
  if (v38) {
    goto LABEL_23;
  }
  int64_t v39 = v33 + 3;
  if (v33 + 3 >= v69) {
    return swift_release();
  }
  unint64_t v38 = *(void *)(v68 + 8 * v39);
  if (v38)
  {
LABEL_23:
    unint64_t v30 = (v38 - 1) & v38;
    int64_t v82 = v39;
    unint64_t v36 = __clz(__rbit64(v38)) + (v39 << 6);
    goto LABEL_24;
  }
  uint64_t v40 = v33 + 4;
  if (v33 + 4 >= v69) {
    return swift_release();
  }
  unint64_t v38 = *(void *)(v68 + 8 * v40);
  if (v38)
  {
    int64_t v39 = v33 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v39 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v39 >= v69) {
      return swift_release();
    }
    unint64_t v38 = *(void *)(v68 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_23;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t closure #1 in CanvasFormattingProxy.strokeIsRequired.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  uint64_t v37 = v8;
  MEMORY[0x270FA5388](v7);
  unint64_t v35 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void *)(a4 + 16);
  uint64_t v42 = a3;
  uint64_t v10 = type metadata accessor for Capsule();
  uint64_t v39 = *(void *)(v10 - 8);
  uint64_t v40 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v38 = (uint64_t)&v35 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  WeakTagged_9.tagged7.getter();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Signature>);
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for WeakRef<Signature>?);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, v18);
  if (v26 == 1)
  {
    WeakTagged_9.tagged6.getter();
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v14, 1, v27) == 1)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for WeakRef<Shape>?);
      char v29 = 0;
    }
    else
    {
      uint64_t v30 = v38;
      Canvas.updatablePaper2.getter(v38);
      WeakRef.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v30, v40);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v27);
      uint64_t v31 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v17, 1, v31) == 1)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Shape?);
        char v29 = 0;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
        int64_t v32 = v35;
        CRRegister.wrappedValue.getter();
        uint64_t v33 = v36;
        TaggedValue_9.tagged3.getter();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v33);
        char v29 = v44 ^ 1;
        (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
        _s8PaperKit5ShapeVWOhTm_0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Shape);
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    char v29 = 1;
  }
  return v29 & 1;
}

void CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)()
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  if (v3) {
    swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  double v0 = 1.0;
  if (static CRExtensible.== infix(_:_:)())
  {
    Canvas.screenScaleOverride.getter();
    if (v1) {
      double v0 = AnyCanvas.scaleFactorForNewElements.getter();
    }
  }
  if (one-time initialization token for defaultTextBoxAttributes != -1) {
    swift_once();
  }
  uint64_t v2 = static UIConstants.defaultTextBoxAttributes;
  swift_bridgeObjectRetain();
  Dictionary<>.scaleBy(_:)(v0);
  CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v2, 0);
}

uint64_t CanvasFormattingProxy.fontName.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  int64_t v69 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v76 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v77 = v8;
  uint64_t v75 = type metadata accessor for Capsule();
  int64_t v88 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v74 = (uint64_t)&v64 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Shape();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v68 = (uint64_t)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v64 - v24;
  uint64_t v78 = v1;
  uint64_t v26 = *(void *)(v1 + 8);
  uint64_t v27 = *(void *)(v26 + 56);
  uint64_t v80 = v26 + 56;
  uint64_t v28 = 1 << *(unsigned char *)(v26 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  int64_t v81 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v84 = v23 + 32;
  uint64_t v85 = v23 + 16;
  uint64_t v72 = (void (**)(uint64_t, uint64_t))(v88 + 8);
  uint64_t v71 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int64_t v66 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v65 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v31 = v23;
  int64_t v82 = (void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v70 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v86 = v26;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v33 = 0;
  uint64_t v67 = v5;
  unint64_t v83 = v21;
  uint64_t v73 = v25;
  while (1)
  {
    if (v30)
    {
      uint64_t v87 = (v30 - 1) & v30;
      int64_t v88 = v33;
      unint64_t v36 = __clz(__rbit64(v30)) | (v33 << 6);
      goto LABEL_23;
    }
    int64_t v37 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v37 >= v81) {
      goto LABEL_31;
    }
    unint64_t v38 = *(void *)(v80 + 8 * v37);
    int64_t v39 = v33 + 1;
    if (!v38)
    {
      int64_t v39 = v33 + 2;
      if (v33 + 2 >= v81) {
        goto LABEL_31;
      }
      unint64_t v38 = *(void *)(v80 + 8 * v39);
      if (!v38)
      {
        int64_t v39 = v33 + 3;
        if (v33 + 3 >= v81) {
          goto LABEL_31;
        }
        unint64_t v38 = *(void *)(v80 + 8 * v39);
        if (!v38) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v87 = (v38 - 1) & v38;
    int64_t v88 = v39;
    unint64_t v36 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_23:
    (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(v25, *(void *)(v86 + 48) + *(void *)(v31 + 72) * v36, v19);
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v21, v25, v19);
    WeakTagged_9.tagged6.getter();
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v12, 1, v41) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*v70)(v15, 1, 1, v16);
LABEL_5:
      uint64_t v21 = v83;
      (*v82)(v83, v19);
      uint64_t v34 = (uint64_t)v15;
      unint64_t v35 = &demangling cache variable for type metadata for Shape?;
      goto LABEL_6;
    }
    uint64_t v43 = v31;
    uint64_t v44 = v16;
    uint64_t v45 = v19;
    uint64_t v46 = v5;
    uint64_t v47 = v74;
    Canvas.updatablePaper2.getter(v74);
    WeakRef.subscript.getter();
    uint64_t v48 = v47;
    uint64_t v5 = v46;
    uint64_t v19 = v45;
    uint64_t v16 = v44;
    uint64_t v31 = v43;
    uint64_t v25 = v73;
    (*v72)(v48, v75);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v41);
    if ((*v71)(v15, 1, v16) == 1) {
      goto LABEL_5;
    }
    uint64_t v49 = v68;
    _s8PaperKit5ShapeVWObTm_0((uint64_t)v15, v68, (uint64_t (*)(void))type metadata accessor for Shape);
    (*v66)(v69, v49 + *(int *)(v16 + 52), v79);
    uint64_t v50 = (void *)CRAttributedString.attributedString.getter();
    id v51 = objc_msgSend(v50, sel_string);

    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = v53;

    if (v52 || v54 != 0xE000000000000000)
    {
      char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*v65)(v69, v79);
      uint64_t v5 = v67;
      if ((v55 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
        uint64_t v60 = swift_allocObject();
        *(_OWORD *)(v60 + 16) = xmmword_20C832C20;
        CRAttributedString.runs.getter();
        uint64_t v58 = Array<A>.fontName.getter(v60);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        _s8PaperKit5ShapeVWOhTm_0(v68, (uint64_t (*)(void))type metadata accessor for Shape);
        (*v82)(v83, v19);
        goto LABEL_40;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*v65)(v69, v79);
      uint64_t v5 = v67;
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.getter();
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v5, 1, v56) != 1)
    {
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      uint64_t v59 = v90;
      if (v90 == 1)
      {
        uint64_t v58 = 0x63697465766C6548;
      }
      else
      {
        uint64_t v62 = v91;
        uint64_t v61 = v92;
        uint64_t v63 = v89;
        swift_bridgeObjectRetain();
        outlined consume of Font?(v63, v59);
        if (v61) {
          uint64_t v58 = v62;
        }
        else {
          uint64_t v58 = 0x63697465766C6548;
        }
        uint64_t v5 = v67;
      }
      _s8PaperKit5ShapeVWOhTm_0(v68, (uint64_t (*)(void))type metadata accessor for Shape);
      (*v82)(v83, v19);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v5, v56);
      goto LABEL_40;
    }
    _s8PaperKit5ShapeVWOhTm_0(v68, (uint64_t (*)(void))type metadata accessor for Shape);
    uint64_t v21 = v83;
    (*v82)(v83, v19);
    uint64_t v34 = (uint64_t)v5;
    unint64_t v35 = &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?;
LABEL_6:
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v34, v35);
    unint64_t v30 = v87;
    int64_t v33 = v88;
  }
  uint64_t v40 = v33 + 4;
  if (v33 + 4 >= v81)
  {
LABEL_31:
    uint64_t v58 = 0;
LABEL_40:
    swift_release();
    return v58;
  }
  unint64_t v38 = *(void *)(v80 + 8 * v40);
  if (v38)
  {
    int64_t v39 = v33 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v39 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v39 >= v81) {
      goto LABEL_31;
    }
    unint64_t v38 = *(void *)(v80 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_22;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void closure #1 in CanvasFormattingProxy.fontName.setter()
{
  double v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.fontName.setter(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v167 = a6;
  uint64_t v166 = a5;
  uint64_t v184 = a4;
  uint64_t v182 = a3;
  uint64_t v164 = *a1;
  uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  int64_t v209 = *(void *)(v190 - 8);
  MEMORY[0x270FA5388](v190);
  uint64_t v193 = (char *)&v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v174 = (char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v162 = (uint64_t)&v155 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v161 = (uint64_t)&v155 - v14;
  MEMORY[0x270FA5388](v15);
  unint64_t v160 = (char *)&v155 - v16;
  uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v17 = *(void *)(v175 - 8);
  MEMORY[0x270FA5388](v175);
  uint64_t v157 = (char *)&v155 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v156 = (char *)&v155 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v168 = (char *)&v155 - v22;
  MEMORY[0x270FA5388](v23);
  id v189 = (char *)&v155 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v155 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Shape();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v172 = (uint64_t)&v155 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v196 = (uint64_t)&v155 - v32;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v33 - 8);
  unint64_t v35 = (char *)&v155 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v205 = (char *)&v155 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v206 - 8);
  uint64_t v207 = (char *)&v155 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v202 = (char *)&v155 - v42;
  uint64_t v165 = a2;
  uint64_t v43 = *(void *)(a2 + 8);
  uint64_t v44 = *(void *)(v43 + 56);
  uint64_t v194 = v43 + 56;
  uint64_t v45 = 1 << *(unsigned char *)(v43 + 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & v44;
  int64_t v195 = (unint64_t)(v45 + 63) >> 6;
  uint64_t v201 = v41 + 16;
  uint64_t v200 = v41 + 32;
  uint64_t v199 = (unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  uint64_t v188 = (void (**)(char *, char *, uint64_t))(v37 + 32);
  uint64_t v197 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  CGRect v180 = (void (**)(char *))(v17 + 16);
  CGRect v177 = (void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v48 = v175;
  uint64_t v159 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v209 + 56);
  uint64_t v170 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
  uint64_t v163 = (void (**)(char *, uint64_t, uint64_t))(v209 + 32);
  uint64_t v158 = (void (**)(char *, char *, uint64_t))(v209 + 16);
  int64_t v169 = (void (**)(char *, uint64_t))(v209 + 8);
  Class v187 = (void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v49 = v36;
  uint64_t v203 = v41;
  uint64_t v198 = (void (**)(char *, uint64_t))(v41 + 8);
  uint64_t v204 = v43;
  swift_bridgeObjectRetain();
  int64_t v50 = 0;
  uint64_t v183 = v28;
  CGRect v176 = a1;
  uint64_t v173 = v27;
  uint64_t v171 = v35;
  uint64_t v192 = v36;
  while (1)
  {
    if (v47)
    {
      uint64_t v208 = (v47 - 1) & v47;
      int64_t v209 = v50;
      unint64_t v53 = __clz(__rbit64(v47)) | (v50 << 6);
      goto LABEL_23;
    }
    int64_t v54 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
      goto LABEL_77;
    }
    if (v54 >= v195) {
      return swift_release();
    }
    unint64_t v55 = *(void *)(v194 + 8 * v54);
    int64_t v56 = v50 + 1;
    if (!v55)
    {
      int64_t v56 = v50 + 2;
      if (v50 + 2 >= v195) {
        return swift_release();
      }
      unint64_t v55 = *(void *)(v194 + 8 * v56);
      if (!v55)
      {
        int64_t v56 = v50 + 3;
        if (v50 + 3 >= v195) {
          return swift_release();
        }
        unint64_t v55 = *(void *)(v194 + 8 * v56);
        if (!v55) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v208 = (v55 - 1) & v55;
    int64_t v209 = v56;
    unint64_t v53 = __clz(__rbit64(v55)) + (v56 << 6);
LABEL_23:
    uint64_t v58 = v203;
    uint64_t v59 = v202;
    uint64_t v60 = v206;
    (*(void (**)(char *, unint64_t, uint64_t))(v203 + 16))(v202, *(void *)(v204 + 48) + *(void *)(v203 + 72) * v53, v206);
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    uint64_t v62 = v207;
    v61(v207, v59, v60);
    WeakTagged_9.tagged6.getter();
    if ((*v199)(v35, 1, v49) == 1)
    {
      (*v198)(v62, v60);
      uint64_t v51 = (uint64_t)v35;
      uint64_t v52 = &demangling cache variable for type metadata for WeakRef<Shape>?;
LABEL_5:
      outlined destroy of StocksKitCurrencyCache.Provider?(v51, v52);
      goto LABEL_6;
    }
    uint64_t v63 = v205;
    (*v188)(v205, v35, v49);
    WeakRef.subscript.getter();
    uint64_t v64 = *v197;
    if ((*v197)(v27, 1, v28) == 1)
    {
      (*v187)(v63, v49);
      (*v198)(v207, v60);
      uint64_t v51 = (uint64_t)v27;
      uint64_t v52 = &demangling cache variable for type metadata for Shape?;
      goto LABEL_5;
    }
    uint64_t v65 = (uint64_t)v27;
    uint64_t v66 = v196;
    _s8PaperKit5ShapeVWObTm_0(v65, v196, (uint64_t (*)(void))type metadata accessor for Shape);
    uint64_t v67 = v66 + *(int *)(v28 + 52);
    uint64_t v68 = *v180;
    uint64_t v191 = v67;
    v68(v189);
    int64_t v69 = (void *)CRAttributedString.attributedString.getter();
    id v70 = objc_msgSend(v69, sel_string);

    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v72;

    uint64_t v186 = v64;
    if (v71 || v73 != 0xE000000000000000)
    {
      char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v75 = *v177;
      (*v177)(v189, v48);
      if ((v74 & 1) == 0)
      {
        uint64_t v185 = v75;
        uint64_t v76 = CRAttributedString.count.getter();
        uint64_t v77 = v48;
        uint64_t v78 = v28;
        uint64_t KeyPath = swift_getKeyPath();
        uint64_t v80 = v64;
        int64_t v81 = v184;
        swift_bridgeObjectRetain();
        uint64_t v181 = WeakRef.subscript.modify();
        unint64_t v83 = v82;
        if (v80(v82, 1, v78) == 1) {
          goto LABEL_79;
        }
        uint64_t v84 = (uint64_t)&v83[*(int *)(v78 + 52)];
        swift_bridgeObjectRetain();
        specialized CRAttributedString<>.updateAttribute<A>(in:newValue:keypath:)(0, v76, KeyPath, v84, v182, v81);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n();
        ((void (*)(char *, uint64_t, uint64_t))v68)(v168, v84, v77);
        uint64_t v85 = (void *)CRAttributedString.attributedString.getter();
        id v86 = objc_msgSend(v85, sel_string);

        uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v89 = v88;

        if (v87 || v89 != 0xE000000000000000)
        {
          uint64_t v179 = v84;
          char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v91 = v185;
          v185(v168, v77);
          if ((v90 & 1) == 0)
          {
            uint64_t v92 = v156;
            uint64_t v93 = v179;
            ((void (*)(char *, uint64_t, uint64_t))v68)(v156, v179, v77);
            uint64_t v94 = v157;
            ((void (*)(char *, uint64_t, uint64_t))v68)(v157, v93, v77);
            unint64_t v95 = (void *)CRAttributedString.attributedString.getter();
            v91(v94, v77);
            id v96 = objc_msgSend(v95, sel_length);

            if (__OFSUB__(v96, 1)) {
              goto LABEL_78;
            }
            uint64_t v97 = v92;
            uint64_t v98 = (uint64_t)v160;
            CRAttributedString.attributes(at:effectiveRange:)();
            v91(v97, v77);
            (*v159)(v98, 0, 1, v190);
            uint64_t v99 = v161;
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v98, v161);
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v99, v162);
            type metadata accessor for ShapeSecondaryProperties();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
            CRRegister.wrappedValue.setter();
            outlined destroy of StocksKitCurrencyCache.Provider?(v99, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v98, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v185(v168, v77);
        }
        ((void (*)(long long *, void))v181)(&v214, 0);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*v177)(v189, v48);
    }
    uint64_t v100 = type metadata accessor for ShapeSecondaryProperties();
    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    uint64_t v102 = (uint64_t)v174;
    CRRegister.wrappedValue.getter();
    uint64_t v103 = v172;
    outlined init with copy of Shape(v196, v172);
    uint64_t v104 = v190;
    int v105 = (*v170)(v102, 1, v190);
    uint64_t v179 = v100;
    if (v105 == 1)
    {
      type metadata accessor for CanvasFormattingProxy();
      unint64_t v106 = v193;
      CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
      _s8PaperKit5ShapeVWOhTm_0(v103, (uint64_t (*)(void))type metadata accessor for Shape);
      outlined destroy of StocksKitCurrencyCache.Provider?(v102, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    }
    else
    {
      _s8PaperKit5ShapeVWOhTm_0(v103, (uint64_t (*)(void))type metadata accessor for Shape);
      unint64_t v106 = v193;
      (*v163)(v193, v102, v104);
    }
    uint64_t v49 = v192;
    uint64_t v107 = v184;
    uint64_t v191 = swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v185 = (void (*)(char *, uint64_t))lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    uint64_t v108 = *((void *)&v210 + 1);
    uint64_t v109 = v205;
    uint64_t v178 = v101;
    if (*((void *)&v210 + 1) != 1)
    {
      uint64_t v122 = v213;
      uint64_t v117 = (void *)*((void *)&v211 + 1);
      uint64_t v115 = v211;
      *(float *)&uint64_t v216 = v212;
      float v123 = v212;
      uint64_t v124 = v210;
      long long v214 = v210;
      long long v215 = v211;
      uint64_t v217 = v213;
      if (!*((void *)&v211 + 1)) {
        goto LABEL_61;
      }
      goto LABEL_58;
    }
    if (one-time initialization token for textBoxDefaultFont != -1) {
      swift_once();
    }
    id v110 = (id)static UIConstants.textBoxDefaultFont;
    id v111 = objc_msgSend(v110, sel_fontName);
    uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v108 = v113;

    id v114 = objc_msgSend(v110, sel_familyName);
    uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v117 = v116;

    objc_msgSend(v110, sel_pointSize);
    double v119 = v118;
    id v120 = objc_msgSend(v110, sel_fontDescriptor);
    unsigned __int8 v121 = objc_msgSend(v120, sel_symbolicTraits);

    if (v121)
    {
      swift_beginAccess();
      uint64_t v181 = static Font.Traits.italic;
      if ((v121 & 2) != 0)
      {
LABEL_50:
        swift_beginAccess();
        uint64_t v125 = static Font.Traits.bold;
        if ((static Font.Traits.bold & ~v181) == 0) {
          uint64_t v125 = 0;
        }
        v181 |= v125;
      }
    }
    else
    {
      uint64_t v181 = 0;
      if ((v121 & 2) != 0) {
        goto LABEL_50;
      }
    }
    swift_bridgeObjectRetain();
    v126._uint64_t countAndFlagsBits = 46;
    v126._object = (void *)0xE100000000000000;
    uint64_t v124 = v112;
    Swift::Bool v127 = String.hasPrefix(_:)(v126);
    swift_bridgeObjectRelease();
    uint64_t v107 = v184;
    unint64_t v106 = v193;
    if (v127)
    {
      swift_bridgeObjectRelease();
      uint64_t v124 = 0;
      uint64_t v108 = 0;
    }
    float v123 = v119;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v128._uint64_t countAndFlagsBits = 46;
    v128._object = (void *)0xE100000000000000;
    Swift::Bool v129 = String.hasPrefix(_:)(v128);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (v129)
    {
      swift_bridgeObjectRelease();
      *(void *)&long long v214 = v124;
      *((void *)&v214 + 1) = v108;
      *(float *)&uint64_t v216 = v123;
      uint64_t v122 = v181;
      uint64_t v217 = v181;
LABEL_61:
      swift_bridgeObjectRetain();
      v130._uint64_t countAndFlagsBits = 46;
      v130._object = (void *)0xE100000000000000;
      uint64_t v131 = v182;
      uint64_t v132 = v107;
      if (String.hasPrefix(_:)(v130))
      {
        swift_bridgeObjectRelease();
        uint64_t v131 = 0;
        uint64_t v132 = 0;
      }
      swift_bridgeObjectRelease();
      *(void *)&long long v215 = v131;
      *((void *)&v215 + 1) = v132;
      uint64_t v133 = v124;
      *(void *)&long long v210 = v124;
      *((void *)&v210 + 1) = v108;
      *(void *)&long long v211 = v131;
      *((void *)&v211 + 1) = v132;
      float v212 = v123;
      uint64_t v134 = v122;
      uint64_t v213 = v122;
      id v135 = Font.platformFont.getter();
      id v136 = objc_msgSend(v135, sel_fontName);

      uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v139 = v138;

      if (v108 && (v137 == v133 && v108 == v139 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v140._uint64_t countAndFlagsBits = 46;
        v140._object = (void *)0xE100000000000000;
        Swift::Bool v141 = String.hasPrefix(_:)(v140);
        swift_bridgeObjectRelease();
        if (v141)
        {
          swift_bridgeObjectRelease();
          uint64_t v137 = 0;
          uint64_t v139 = 0;
        }
        swift_bridgeObjectRelease();
        *(void *)&long long v214 = v137;
        *((void *)&v214 + 1) = v139;
        *(void *)&long long v210 = v137;
        *((void *)&v210 + 1) = v139;
        *(void *)&long long v211 = v131;
        *((void *)&v211 + 1) = v132;
        float v212 = v123;
        uint64_t v213 = v134;
        id v142 = Font.platformFont.getter();
        id v143 = objc_msgSend(v142, sel_familyName);

        uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v146 = v145;

        Font.familyName.setter(v144, v146);
      }
      unint64_t v106 = v193;
      uint64_t v49 = v192;
      uint64_t v109 = v205;
      goto LABEL_72;
    }
    *(void *)&long long v214 = v124;
    *((void *)&v214 + 1) = v108;
    *(void *)&long long v215 = v115;
    *((void *)&v215 + 1) = v117;
    *(float *)&uint64_t v216 = v123;
    uint64_t v122 = v181;
    uint64_t v217 = v181;
    uint64_t v109 = v205;
LABEL_58:
    if ((v115 != v182 || v117 != v107) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_61;
    }
LABEL_72:
    uint64_t v216 = v216;
    uint64_t v147 = v190;
    CRAttributedString.Attributes.subscript.setter();
    uint64_t v148 = (void (*)(long long *, void))WeakRef.subscript.modify();
    uint64_t v28 = v183;
    if (!v186(v149, 1, v183))
    {
      uint64_t v150 = (uint64_t)v160;
      (*v158)(v160, v106, v147);
      (*v159)(v150, 0, 1, v147);
      uint64_t v151 = v161;
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v150, v161);
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v151, v162);
      unint64_t v106 = v193;
      CRRegister.wrappedValue.setter();
      uint64_t v152 = v151;
      uint64_t v49 = v192;
      outlined destroy of StocksKitCurrencyCache.Provider?(v152, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      uint64_t v153 = v150;
      uint64_t v28 = v183;
      uint64_t v109 = v205;
      outlined destroy of StocksKitCurrencyCache.Provider?(v153, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    }
    v148(&v214, 0);
    (*v169)(v106, v147);
    _s8PaperKit5ShapeVWOhTm_0(v196, (uint64_t (*)(void))type metadata accessor for Shape);
    (*v187)(v109, v49);
    (*v198)(v207, v206);
    uint64_t v48 = v175;
    uint64_t v27 = v173;
    unint64_t v35 = v171;
LABEL_6:
    unint64_t v47 = v208;
    int64_t v50 = v209;
  }
  uint64_t v57 = v50 + 4;
  if (v50 + 4 >= v195) {
    return swift_release();
  }
  unint64_t v55 = *(void *)(v194 + 8 * v57);
  if (v55)
  {
    int64_t v56 = v50 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v56 = v57 + 1;
    if (__OFADD__(v57, 1)) {
      break;
    }
    if (v56 >= v195) {
      return swift_release();
    }
    unint64_t v55 = *(void *)(v194 + 8 * v56);
    ++v57;
    if (v55) {
      goto LABEL_22;
    }
  }
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

id CanvasFormattingProxy.fontSize.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v57 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v5 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v59 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v66 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v67 = v7;
  uint64_t v65 = type metadata accessor for Capsule();
  uint64_t v8 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v64 = (uint64_t)&v56 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for Shape();
  uint64_t v16 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  uint64_t v60 = (uint64_t)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v76 = (char *)&v56 - v23;
  uint64_t v68 = v1;
  uint64_t v24 = *(void *)(v1 + 8);
  uint64_t v25 = *(void *)(v24 + 56);
  uint64_t v70 = v24 + 56;
  uint64_t v26 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & v25;
  int64_t v71 = (unint64_t)(v26 + 63) >> 6;
  uint64_t v74 = v19 + 32;
  uint64_t v75 = v19 + 16;
  uint64_t v62 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  uint64_t v63 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  int64_t v56 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v73 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v61 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v77 = v24;
  swift_bridgeObjectRetain();
  int64_t v29 = 0;
  uint64_t v72 = v21;
  if (v28) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v32 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    swift_once();
LABEL_32:
    id result = objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_pointSize);
    if ((~*(void *)&v53 & 0x7FF0000000000000) != 0)
    {
      if (v53 > -9.22337204e18)
      {
        if (v53 < 9.22337204e18) {
          return (id)(uint64_t)v53;
        }
        goto LABEL_45;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }
  if (v32 >= v71)
  {
LABEL_31:
    swift_release();
    if (one-time initialization token for textBoxDefaultFont == -1) {
      goto LABEL_32;
    }
    goto LABEL_42;
  }
  unint64_t v33 = *(void *)(v70 + 8 * v32);
  ++v29;
  if (!v33)
  {
    int64_t v29 = v32 + 1;
    if (v32 + 1 >= v71) {
      goto LABEL_31;
    }
    unint64_t v33 = *(void *)(v70 + 8 * v29);
    if (!v33)
    {
      int64_t v29 = v32 + 2;
      if (v32 + 2 >= v71) {
        goto LABEL_31;
      }
      unint64_t v33 = *(void *)(v70 + 8 * v29);
      if (!v33)
      {
        int64_t v34 = v32 + 3;
        if (v34 < v71)
        {
          unint64_t v33 = *(void *)(v70 + 8 * v34);
          if (v33)
          {
            int64_t v29 = v34;
            goto LABEL_21;
          }
          while (1)
          {
            int64_t v29 = v34 + 1;
            if (__OFADD__(v34, 1)) {
              goto LABEL_41;
            }
            if (v29 >= v71) {
              goto LABEL_31;
            }
            unint64_t v33 = *(void *)(v70 + 8 * v29);
            ++v34;
            if (v33) {
              goto LABEL_21;
            }
          }
        }
        goto LABEL_31;
      }
    }
  }
LABEL_21:
  unint64_t v28 = (v33 - 1) & v33;
  for (unint64_t i = __clz(__rbit64(v33)) + (v29 << 6); ; unint64_t i = v30 | (v29 << 6))
  {
    unint64_t v35 = v76;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v76, *(void *)(v77 + 48) + *(void *)(v19 + 72) * i, v18);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v35, v18);
    WeakTagged_9.tagged6.getter();
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v12, 1, v36) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*v61)(v15, 1, 1, v78);
LABEL_6:
      uint64_t v21 = v72;
      (*v73)(v72, v18);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Shape?);
      if (!v28) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    uint64_t v38 = (uint64_t)v15;
    uint64_t v39 = v64;
    Canvas.updatablePaper2.getter(v64);
    WeakRef.subscript.getter();
    uint64_t v40 = v39;
    uint64_t v15 = (char *)v38;
    (*v63)(v40, v65);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v36);
    if ((*v62)(v38, 1, v78) == 1) {
      goto LABEL_6;
    }
    uint64_t v41 = v60;
    _s8PaperKit5ShapeVWObTm_0(v38, v60, (uint64_t (*)(void))type metadata accessor for Shape);
    (*v58)(v59, v41 + *(int *)(v78 + 52), v69);
    uint64_t v42 = (void *)CRAttributedString.attributedString.getter();
    id v43 = objc_msgSend(v42, sel_string);

    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;

    if (v44 || v46 != 0xE000000000000000) {
      break;
    }
    swift_bridgeObjectRelease();
    (*v56)(v59, v69);
    unint64_t v47 = v57;
LABEL_28:
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.getter();
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    uint64_t v50 = (uint64_t)v47;
    uint64_t v51 = *(void *)(v49 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v50, 1, v49) != 1)
    {
      id v54 = CRAttributedString.Attributes<>.fontSize.getter();
      _s8PaperKit5ShapeVWOhTm_0(v60, (uint64_t (*)(void))type metadata accessor for Shape);
      (*v73)(v72, v18);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v49);
      goto LABEL_38;
    }
    _s8PaperKit5ShapeVWOhTm_0(v60, (uint64_t (*)(void))type metadata accessor for Shape);
    uint64_t v21 = v72;
    (*v73)(v72, v18);
    outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    uint64_t v15 = (char *)v38;
    if (!v28) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v30 = __clz(__rbit64(v28));
    v28 &= v28 - 1;
  }
  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  (*v56)(v59, v69);
  unint64_t v47 = v57;
  if (v48) {
    goto LABEL_28;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_20C832C20;
  CRAttributedString.runs.getter();
  id v54 = Array<A>.fontSize.getter(v55);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  _s8PaperKit5ShapeVWOhTm_0(v60, (uint64_t (*)(void))type metadata accessor for Shape);
  (*v73)(v72, v18);
LABEL_38:
  swift_release();
  return v54;
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.fontSize.setter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v208 = a5;
  uint64_t v207 = a4;
  uint64_t KeyPath = a3;
  uint64_t v6 = a1;
  uint64_t v205 = *a1;
  uint64_t v253 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v7 = *(void *)(v253 - 8);
  MEMORY[0x270FA5388](v253);
  uint64_t v218 = (char *)&v185 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v259 = (char *)&v185 - v10;
  uint64_t v252 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  int64_t v261 = *(void *)(v252 - 8);
  MEMORY[0x270FA5388](v252);
  uint64_t v254 = (char *)&v185 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v12 - 8);
  long long v215 = (char *)&v185 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v201 = (uint64_t)&v185 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v200 = (uint64_t)&v185 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v199 = (char *)&v185 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v244 = (char *)&v185 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  uint64_t v260 = *(void *)(v245 - 8);
  MEMORY[0x270FA5388](v245);
  uint64_t v192 = (char *)&v185 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v249 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v23 = *(void *)(v249 - 8);
  MEMORY[0x270FA5388](v249);
  uint64_t v191 = (char *)&v185 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v248 = (char *)&v185 - v26;
  uint64_t v256 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v27 = *(void *)(v256 - 8);
  MEMORY[0x270FA5388](v256 - 8);
  uint64_t v188 = (char *)&v185 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v186 = (char *)&v185 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v194 = (char *)&v185 - v32;
  MEMORY[0x270FA5388](v33);
  v224 = (char *)&v185 - v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v193 = (char *)&v185 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = (char *)&v185 - v38;
  uint64_t v230 = type metadata accessor for Shape();
  uint64_t v40 = *(void *)(v230 - 8);
  MEMORY[0x270FA5388](v230 - 8);
  uint64_t v213 = (uint64_t)&v185 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  uint64_t v229 = (uint64_t)&v185 - v43;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v44 - 8);
  uint64_t v46 = (char *)&v185 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v47 = *(void *)(v255 - 8);
  MEMORY[0x270FA5388](v255);
  uint64_t v232 = (char *)&v185 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v49);
  MEMORY[0x270FA5388](v50);
  v242 = (char *)&v185 - v54;
  uint64_t v206 = a2;
  uint64_t v55 = *(void *)(a2 + 8);
  uint64_t v56 = *(void *)(v55 + 56);
  uint64_t v227 = v55 + 56;
  uint64_t v57 = 1 << *(unsigned char *)(v55 + 32);
  uint64_t v58 = -1;
  if (v57 < 64) {
    uint64_t v58 = ~(-1 << v57);
  }
  unint64_t v59 = v58 & v56;
  int64_t v228 = (unint64_t)(v57 + 63) >> 6;
  uint64_t v241 = v52 + 16;
  uint64_t v240 = v52 + 32;
  uint64_t v239 = (unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  uint64_t v223 = (void (**)(char *, char *, uint64_t))(v47 + 32);
  uint64_t v231 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  uint64_t v60 = v51;
  uint64_t v217 = (void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v216 = (void (**)(char *, uint64_t))(v27 + 8);
  uint64_t v61 = v253;
  uint64_t v190 = (void (**)(char *, uint64_t))(v260 + 8);
  id v189 = (void (**)(char *, char *, uint64_t))(v23 + 32);
  uint64_t v243 = (uint64_t (**)(char *, uint64_t, uint64_t))(v261 + 48);
  uint64_t v236 = (void (**)(char *, char *, uint64_t))(v261 + 32);
  float v62 = (float)KeyPath;
  char v251 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v250 = COERCE_UNSIGNED_INT((float)KeyPath);
  uint64_t v203 = &v264;
  unint64_t v233 = (void (**)(char *, uint64_t))(v261 + 8);
  Class v187 = (void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v63 = v53;
  uint64_t v64 = v52;
  uint64_t v198 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  long long v211 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t v204 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  int64_t v195 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v65 = v252;
  uint64_t v219 = (void (**)(char *, uint64_t))(v47 + 8);
  unint64_t v238 = (void (**)(uint64_t, uint64_t))(v52 + 8);
  uint64_t v246 = v55;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v67 = 0;
  long long v202 = xmmword_20C834980;
  float v212 = v46;
  uint64_t v226 = v6;
  long long v214 = v39;
  uint64_t v222 = v60;
  uint64_t v221 = v64;
  uint64_t v220 = v63;
  if (v59) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v72 = v67 + 1;
  if (__OFADD__(v67, 1)) {
    goto LABEL_114;
  }
  if (v72 >= v228) {
    return swift_release();
  }
  unint64_t v73 = *(void *)(v227 + 8 * v72);
  int64_t v74 = v67 + 1;
  if (!v73)
  {
    int64_t v74 = v67 + 2;
    if (v67 + 2 >= v228) {
      return swift_release();
    }
    unint64_t v73 = *(void *)(v227 + 8 * v74);
    if (!v73)
    {
      int64_t v74 = v67 + 3;
      if (v67 + 3 >= v228) {
        return swift_release();
      }
      unint64_t v73 = *(void *)(v227 + 8 * v74);
      if (!v73)
      {
        uint64_t v75 = v67 + 4;
        if (v67 + 4 < v228)
        {
          unint64_t v73 = *(void *)(v227 + 8 * v75);
          if (v73)
          {
            int64_t v74 = v67 + 4;
            goto LABEL_21;
          }
          while (1)
          {
            int64_t v74 = v75 + 1;
            if (__OFADD__(v75, 1)) {
              goto LABEL_117;
            }
            if (v74 >= v228) {
              break;
            }
            unint64_t v73 = *(void *)(v227 + 8 * v74);
            ++v75;
            if (v73) {
              goto LABEL_21;
            }
          }
        }
        return swift_release();
      }
    }
  }
LABEL_21:
  uint64_t v68 = (uint64_t)v39;
  uint64_t v69 = v6;
  uint64_t v70 = v61;
  uint64_t v260 = (v73 - 1) & v73;
  int64_t v261 = v74;
  for (unint64_t i = __clz(__rbit64(v73)) + (v74 << 6); ; unint64_t i = __clz(__rbit64(v59)) | (v67 << 6))
  {
    uint64_t v76 = v242;
    (*(void (**)(char *, unint64_t, uint64_t))(v64 + 16))(v242, *(void *)(v246 + 48) + *(void *)(v64 + 72) * i, v60);
    (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v63, v76, v60);
    uint64_t v77 = v63;
    WeakTagged_9.tagged6.getter();
    uint64_t v78 = v255;
    if ((*v239)(v46, 1, v255) == 1)
    {
      (*v238)(v77, v60);
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v46, &demangling cache variable for type metadata for WeakRef<Shape>?);
      uint64_t v63 = v77;
      goto LABEL_6;
    }
    uint64_t v79 = v232;
    (*v223)(v232, v46, v78);
    uint64_t v80 = v78;
    WeakRef.subscript.getter();
    int64_t v81 = *v231;
    uint64_t v82 = v230;
    if ((*v231)(v68, 1, v230) == 1)
    {
      (*v219)(v79, v80);
      uint64_t v63 = v220;
      uint64_t v60 = v222;
      (*v238)(v220, v222);
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v68, &demangling cache variable for type metadata for Shape?);
      uint64_t v64 = v221;
LABEL_6:
      int64_t v67 = v261;
      unint64_t v59 = v260;
      uint64_t v61 = v70;
      uint64_t v6 = v69;
      uint64_t v39 = (char *)v68;
      if (!v260) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    uint64_t v225 = v81;
    uint64_t v83 = v229;
    _s8PaperKit5ShapeVWObTm_0(v68, v229, (uint64_t (*)(void))type metadata accessor for Shape);
    uint64_t v84 = v83 + *(int *)(v82 + 52);
    uint64_t v85 = *v217;
    (*v217)(v224, v84, v256);
    id v86 = (void *)CRAttributedString.attributedString.getter();
    id v87 = objc_msgSend(v86, sel_string);

    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v90 = v89;

    uint64_t v61 = v70;
    if (!v88 && v90 == 0xE000000000000000)
    {
      swift_bridgeObjectRelease();
      (*v216)(v224, v256);
      goto LABEL_87;
    }
    char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v92 = *v216;
    (*v216)(v224, v256);
    if ((v91 & 1) == 0) {
      break;
    }
LABEL_87:
    uint64_t v258 = type metadata accessor for ShapeSecondaryProperties();
    uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    uint64_t v159 = (uint64_t)v215;
    long long v257 = (void *)v158;
    CRRegister.wrappedValue.getter();
    uint64_t v160 = v213;
    outlined init with copy of Shape(v229, v213);
    if ((*v211)(v159, 1, v61) == 1)
    {
      type metadata accessor for CanvasFormattingProxy();
      CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
      _s8PaperKit5ShapeVWOhTm_0(v160, (uint64_t (*)(void))type metadata accessor for Shape);
      outlined destroy of StocksKitCurrencyCache.Provider?(v159, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    }
    else
    {
      _s8PaperKit5ShapeVWOhTm_0(v160, (uint64_t (*)(void))type metadata accessor for Shape);
      (*v204)(v218, v159, v61);
    }
    uint64_t KeyPath = swift_getKeyPath();
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    uint64_t v161 = *((void *)&v263 + 1);
    if (*((void *)&v263 + 1) != 1)
    {
      uint64_t v172 = v267;
      uint64_t v167 = v264;
      uint64_t v169 = v265;
      uint64_t v164 = v263;
      goto LABEL_106;
    }
    if (one-time initialization token for textBoxDefaultFont != -1) {
      swift_once();
    }
    id v162 = (id)static UIConstants.textBoxDefaultFont;
    id v163 = objc_msgSend(v162, sel_fontName);
    uint64_t v164 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v161 = v165;

    id v166 = objc_msgSend(v162, sel_familyName);
    uint64_t v167 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v169 = v168;

    objc_msgSend(v162, sel_pointSize);
    id v170 = objc_msgSend(v162, sel_fontDescriptor);
    unsigned __int8 v171 = objc_msgSend(v170, sel_symbolicTraits);

    if (v171)
    {
      swift_beginAccess();
      uint64_t v172 = static Font.Traits.italic;
      if ((v171 & 2) != 0)
      {
LABEL_98:
        swift_beginAccess();
        uint64_t v173 = static Font.Traits.bold;
        if ((static Font.Traits.bold & ~v172) == 0) {
          uint64_t v173 = 0;
        }
        v172 |= v173;
      }
    }
    else
    {
      uint64_t v172 = 0;
      if ((v171 & 2) != 0) {
        goto LABEL_98;
      }
    }
    swift_bridgeObjectRetain();
    v174._uint64_t countAndFlagsBits = 46;
    v174._object = (void *)0xE100000000000000;
    Swift::Bool v175 = String.hasPrefix(_:)(v174);
    swift_bridgeObjectRelease();
    if (v175)
    {
      swift_bridgeObjectRelease();
      uint64_t v164 = 0;
      uint64_t v161 = 0;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v176._uint64_t countAndFlagsBits = 46;
    v176._object = (void *)0xE100000000000000;
    Swift::Bool v177 = String.hasPrefix(_:)(v176);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (v177)
    {
      swift_bridgeObjectRelease();
      uint64_t v167 = 0;
      uint64_t v169 = 0;
    }
    uint64_t v61 = v253;
LABEL_106:
    uint64_t v65 = v252;
    *(void *)&long long v263 = v164;
    *((void *)&v263 + 1) = v161;
    uint64_t v264 = v167;
    uint64_t v265 = v169;
    uint64_t v266 = v250;
    uint64_t v267 = v172;
    uint64_t v178 = v218;
    CRAttributedString.Attributes.subscript.setter();
    uint64_t v179 = v232;
    CGRect v180 = (void (*)(long long *, void))WeakRef.subscript.modify();
    if (!v225(v181, 1, v230))
    {
      uint64_t v182 = (uint64_t)v199;
      (*v195)(v199, v178, v61);
      (*v198)(v182, 0, 1, v61);
      uint64_t v183 = v200;
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v182, v200);
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v183, v201);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?(v183, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      uint64_t v184 = v182;
      uint64_t v179 = v232;
      outlined destroy of StocksKitCurrencyCache.Provider?(v184, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    }
    v180(&v263, 0);
    uint64_t v46 = v212;
    uint64_t v60 = v222;
    (*v251)(v178, v61);
    _s8PaperKit5ShapeVWOhTm_0(v229, (uint64_t (*)(void))type metadata accessor for Shape);
    (*v219)(v179, v255);
    uint64_t v63 = v220;
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*v238)(v220, v60);
    uint64_t v39 = v214;
    uint64_t v64 = v221;
    int64_t v67 = v261;
    unint64_t v59 = v260;
    uint64_t v6 = v226;
    if (!v260) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v68 = (uint64_t)v39;
    uint64_t v69 = v6;
    uint64_t v70 = v61;
    uint64_t v260 = (v59 - 1) & v59;
    int64_t v261 = v67;
  }
  long long v210 = v92;
  int64_t v209 = v85;
  uint64_t v197 = v84;
  uint64_t v93 = (uint64_t)v193;
  WeakRef.subscript.getter();
  uint64_t v94 = v230;
  unint64_t v95 = v225;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v225)(v93, 1, v230);
  if (result == 1) {
    goto LABEL_120;
  }
  id v96 = v194;
  uint64_t v97 = v256;
  v209(v194, v93 + *(int *)(v94 + 52), v256);
  _s8PaperKit5ShapeVWOhTm_0(v93, (uint64_t (*)(void))type metadata accessor for Shape);
  CRAttributedString.count.getter();
  v210(v96, v97);
  uint64_t v247 = swift_getKeyPath();
  uint64_t v98 = WeakRef.subscript.modify();
  uint64_t v100 = v99;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v95)(v99, 1, v94);
  uint64_t v101 = v254;
  if (result != 1)
  {
    uint64_t v102 = *(int *)(v94 + 52);
    uint64_t result = NSNotFound.getter();
    uint64_t v103 = v253;
    if (!result) {
      goto LABEL_118;
    }
    uint64_t v196 = (void (*)(char *, void))v98;
    uint64_t v104 = v100 + v102;
    int v105 = v192;
    CRAttributedString.subscript.getter();
    unint64_t v106 = v191;
    uint64_t v107 = v245;
    CRAttributedString.Substring.runs.getter();
    (*v190)(v105, v107);
    (*v189)(v248, v106, v249);
    uint64_t v108 = v244;
    CRAttributedString.Runs.next()();
    char v237 = *v243;
    int v109 = v237(v108, 1, v65);
    id v110 = (void *)MEMORY[0x263F8EE78];
    if (v109 == 1)
    {
LABEL_33:
      (*v187)(v248, v249);
      swift_bridgeObjectRelease();
      swift_release();
      id v111 = v188;
      uint64_t v112 = v256;
      uint64_t v113 = v209;
      v209(v188, v104, v256);
      id v114 = (void *)CRAttributedString.attributedString.getter();
      id v115 = objc_msgSend(v114, sel_string);

      uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v118 = v117;

      if (v116 || v118 != 0xE000000000000000)
      {
        char v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v151 = v210;
        v210(v111, v112);
        if ((v150 & 1) == 0)
        {
          uint64_t v152 = v194;
          v113(v194, v104, v112);
          uint64_t v153 = v186;
          v113(v186, v104, v112);
          unint64_t v154 = (void *)CRAttributedString.attributedString.getter();
          v151(v153, v112);
          id v155 = objc_msgSend(v154, sel_length);

          uint64_t result = (uint64_t)v155 - 1;
          if (__OFSUB__(v155, 1)) {
            goto LABEL_119;
          }
          uint64_t v156 = (uint64_t)v199;
          CRAttributedString.attributes(at:effectiveRange:)();
          v151(v152, v112);
          (*v198)(v156, 0, 1, v253);
          uint64_t v157 = v200;
          outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v156, v200);
          outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v157, v201);
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          CRRegister.wrappedValue.setter();
          outlined destroy of StocksKitCurrencyCache.Provider?(v157, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v156, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v210(v111, v112);
      }
      v196(v268, 0);
      uint64_t v61 = v253;
      goto LABEL_87;
    }
    uint64_t v235 = *v236;
    uint64_t v234 = v104;
    while (1)
    {
      v235(v101, v108, v65);
      CRAttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      unint64_t v119 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      uint64_t v120 = *((void *)&v263 + 1);
      long long v257 = v110;
      uint64_t v258 = v119;
      if (*((void *)&v263 + 1) == 1)
      {
        if (one-time initialization token for textBoxDefaultFont != -1) {
          swift_once();
        }
        id v121 = (id)static UIConstants.textBoxDefaultFont;
        id v122 = objc_msgSend(v121, sel_fontName);
        uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v120 = v124;

        id v125 = objc_msgSend(v121, sel_familyName);
        uint64_t KeyPath = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v127 = v126;

        objc_msgSend(v121, sel_pointSize);
        id v128 = objc_msgSend(v121, sel_fontDescriptor);
        unsigned __int8 v129 = objc_msgSend(v128, sel_symbolicTraits);

        if (v129)
        {
          swift_beginAccess();
          uint64_t v130 = static Font.Traits.italic;
        }
        else
        {
          uint64_t v130 = 0;
        }
        if ((v129 & 2) != 0)
        {
          swift_beginAccess();
          uint64_t v131 = static Font.Traits.bold;
          if ((static Font.Traits.bold & ~v130) == 0) {
            uint64_t v131 = 0;
          }
          v130 |= v131;
        }
        swift_bridgeObjectRetain();
        v132._uint64_t countAndFlagsBits = 46;
        v132._object = (void *)0xE100000000000000;
        Swift::Bool v133 = String.hasPrefix(_:)(v132);
        swift_bridgeObjectRelease();
        if (v133)
        {
          swift_bridgeObjectRelease();
          uint64_t v123 = 0;
          uint64_t v120 = 0;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v134._uint64_t countAndFlagsBits = 46;
        v134._object = (void *)0xE100000000000000;
        Swift::Bool v135 = String.hasPrefix(_:)(v134);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        if (v135)
        {
          swift_bridgeObjectRelease();
          uint64_t KeyPath = 0;
          uint64_t v127 = 0;
        }
      }
      else
      {
        uint64_t v130 = v267;
        uint64_t v127 = v265;
        uint64_t KeyPath = v264;
        uint64_t v123 = v263;
      }
      (*v251)(v259, v103);
      uint64_t result = CRAttributedString.Runs.Run.range.getter();
      uint64_t v137 = v136 - result;
      if (__OFSUB__(v136, result))
      {
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
        break;
      }
      uint64_t v138 = result;
      if (one-time initialization token for defaultValue != -1) {
        uint64_t result = swift_once();
      }
      uint64_t v139 = qword_2676CCEA0;
      uint64_t v140 = qword_2676CCEA8;
      float v141 = *(float *)&dword_2676CCEB0;
      uint64_t v142 = qword_2676CCEB8;
      if (v120)
      {
        if (!qword_2676CCE98) {
          goto LABEL_74;
        }
        if (v123 != static TextAttributeScope.FontAttribute.defaultValue || v120 != qword_2676CCE98)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            goto LABEL_74;
          }
        }
      }
      else if (qword_2676CCE98)
      {
        goto LABEL_74;
      }
      if (v127)
      {
        if (!v140) {
          goto LABEL_74;
        }
        if (KeyPath != v139 || v127 != v140)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            goto LABEL_74;
          }
        }
      }
      else if (v140)
      {
        goto LABEL_74;
      }
      if (v141 == v62 && v130 == v142)
      {
        if (__OFADD__(v138, v137)) {
          goto LABEL_115;
        }
        if (v138 + v137 < v138) {
          goto LABEL_116;
        }
        long long v263 = v202;
        id v143 = v203;
        *(_OWORD *)uint64_t v203 = 0u;
        *((_OWORD *)v143 + 1) = 0u;
        swift_retain();
        uint64_t v104 = v234;
        uint64_t v144 = (void (*)(char *, void))CRAttributedString.subscript.modify();
        CRAttributedString.Substring.subscript.setter();
        v144(v262, 0);
        swift_bridgeObjectRelease();
        goto LABEL_77;
      }
LABEL_74:
      if (__OFADD__(v138, v137)) {
        goto LABEL_112;
      }
      if (v138 + v137 < v138) {
        goto LABEL_113;
      }
      *(void *)&long long v263 = v123;
      *((void *)&v263 + 1) = v120;
      uint64_t v264 = KeyPath;
      uint64_t v265 = v127;
      uint64_t v266 = v250;
      uint64_t v267 = v130;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v104 = v234;
      uint64_t v145 = (void (*)(char *, void))CRAttributedString.subscript.modify();
      CRAttributedString.Substring.subscript.setter();
      v145(v262, 0);
      swift_bridgeObjectRelease();
LABEL_77:
      swift_bridgeObjectRelease();
      id v110 = v257;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v103 = v253;
      uint64_t v101 = v254;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        id v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110[2] + 1, 1, v110);
      }
      unint64_t v148 = v110[2];
      unint64_t v147 = v110[3];
      if (v148 >= v147 >> 1) {
        id v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v147 > 1), v148 + 1, 1, v110);
      }
      v110[2] = v148 + 1;
      uint64_t v149 = &v110[2 * v148];
      v149[4] = v138;
      v149[5] = v137;
      uint64_t v65 = v252;
      (*v233)(v101, v252);
      uint64_t v108 = v244;
      CRAttributedString.Runs.next()();
      if (v237(v108, 1, v65) == 1) {
        goto LABEL_33;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.textAlignment.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v70 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v77 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t v78 = v8;
  uint64_t v76 = type metadata accessor for Capsule();
  uint64_t v9 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v75 = (uint64_t)&v65 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Shape();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v69 = (uint64_t)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v85 = (char *)&v65 - v25;
  uint64_t v79 = v1;
  uint64_t v26 = *(void *)(v1 + 8);
  uint64_t v27 = *(void *)(v26 + 56);
  uint64_t v81 = v26 + 56;
  uint64_t v28 = 1 << *(unsigned char *)(v26 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  uint64_t v84 = v24 + 16;
  int64_t v82 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v83 = v24 + 32;
  int64_t v72 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  unint64_t v73 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  int64_t v67 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v66 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v86 = v24;
  uint64_t v87 = v26;
  uint64_t v31 = (void (**)(char *, uint64_t))(v24 + 8);
  int64_t v71 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v33 = 0;
  uint64_t v68 = v5;
  uint64_t v74 = v17;
  while (1)
  {
    if (v30)
    {
      uint64_t v88 = (v30 - 1) & v30;
      int64_t v89 = v33;
      unint64_t v36 = __clz(__rbit64(v30)) | (v33 << 6);
      goto LABEL_23;
    }
    int64_t v37 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v37 >= v82) {
      goto LABEL_31;
    }
    unint64_t v38 = *(void *)(v81 + 8 * v37);
    int64_t v39 = v33 + 1;
    if (!v38)
    {
      int64_t v39 = v33 + 2;
      if (v33 + 2 >= v82) {
        goto LABEL_31;
      }
      unint64_t v38 = *(void *)(v81 + 8 * v39);
      if (!v38)
      {
        int64_t v39 = v33 + 3;
        if (v33 + 3 >= v82) {
          goto LABEL_31;
        }
        unint64_t v38 = *(void *)(v81 + 8 * v39);
        if (!v38) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v88 = (v38 - 1) & v38;
    int64_t v89 = v39;
    unint64_t v36 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_23:
    uint64_t v41 = v86;
    uint64_t v42 = v85;
    (*(void (**)(char *, unint64_t, uint64_t))(v86 + 16))(v85, *(void *)(v87 + 48) + *(void *)(v86 + 72) * v36, v20);
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v22, v42, v20);
    WeakTagged_9.tagged6.getter();
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
    uint64_t v44 = *(void *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v13, 1, v43) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*v71)(v16, 1, 1, v17);
LABEL_5:
      (*v31)(v22, v20);
      uint64_t v34 = (uint64_t)v16;
      uint64_t v35 = &demangling cache variable for type metadata for Shape?;
      goto LABEL_6;
    }
    uint64_t v45 = v20;
    uint64_t v46 = v31;
    uint64_t v47 = v22;
    uint64_t v48 = v5;
    uint64_t v49 = v75;
    Canvas.updatablePaper2.getter(v75);
    WeakRef.subscript.getter();
    uint64_t v50 = v49;
    uint64_t v5 = v48;
    uint64_t v22 = v47;
    uint64_t v31 = v46;
    uint64_t v20 = v45;
    uint64_t v17 = v74;
    (*v73)(v50, v76);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v43);
    if ((*v72)(v16, 1, v17) == 1) {
      goto LABEL_5;
    }
    uint64_t v51 = v69;
    _s8PaperKit5ShapeVWObTm_0((uint64_t)v16, v69, (uint64_t (*)(void))type metadata accessor for Shape);
    (*v67)(v70, v51 + *(int *)(v17 + 52), v80);
    uint64_t v52 = (void *)CRAttributedString.attributedString.getter();
    id v53 = objc_msgSend(v52, sel_string);

    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v55;

    if (v54 || v56 != 0xE000000000000000)
    {
      char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*v66)(v70, v80);
      uint64_t v5 = v68;
      if ((v57 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
        uint64_t v61 = swift_allocObject();
        *(_OWORD *)(v61 + 16) = xmmword_20C832C20;
        CRAttributedString.runs.getter();
        uint64_t v62 = Array<A>.textAlignment.getter(v61);
        char v64 = v63;
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        _s8PaperKit5ShapeVWOhTm_0(v69, (uint64_t (*)(void))type metadata accessor for Shape);
        (*v31)(v22, v20);
        swift_release();
        if (v64) {
          return 4;
        }
        else {
          return v62;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*v66)(v70, v80);
      uint64_t v5 = v68;
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.getter();
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    uint64_t v59 = *(void *)(v58 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v5, 1, v58) != 1)
    {
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if (v91) {
        uint64_t v60 = 0;
      }
      else {
        uint64_t v60 = v90;
      }
      _s8PaperKit5ShapeVWOhTm_0(v69, (uint64_t (*)(void))type metadata accessor for Shape);
      (*v31)(v22, v20);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v5, v58);
      swift_release();
      return v60;
    }
    _s8PaperKit5ShapeVWOhTm_0(v69, (uint64_t (*)(void))type metadata accessor for Shape);
    (*v31)(v22, v20);
    uint64_t v34 = (uint64_t)v5;
    uint64_t v35 = &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?;
LABEL_6:
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v34, v35);
    unint64_t v30 = v88;
    int64_t v33 = v89;
  }
  uint64_t v40 = v33 + 4;
  if (v33 + 4 >= v82)
  {
LABEL_31:
    swift_release();
    return 4;
  }
  unint64_t v38 = *(void *)(v81 + 8 * v40);
  if (v38)
  {
    int64_t v39 = v33 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v39 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v39 >= v82) {
      goto LABEL_31;
    }
    unint64_t v38 = *(void *)(v81 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_22;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.fontSize.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(double))
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, a3);
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.textAlignment.setter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v137 = a5;
  uint64_t v136 = a4;
  uint64_t v147 = a3;
  uint64_t v6 = *a1;
  uint64_t v161 = a1;
  uint64_t v134 = v6;
  uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v7 = *(void *)(v146 - 8);
  MEMORY[0x270FA5388](v146);
  uint64_t v145 = (char *)v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v131 = (uint64_t)v122 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v130 = (uint64_t)v122 - v15;
  MEMORY[0x270FA5388](v16);
  unsigned __int8 v129 = (char *)v122 - v17;
  uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v18 = *(void *)(v157 - 8);
  MEMORY[0x270FA5388](v157 - 8);
  uint64_t v123 = (char *)v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  Swift::String v132 = (char *)v122 - v21;
  MEMORY[0x270FA5388](v22);
  id v125 = (char *)v122 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v122 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v124 = (char *)v122 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)v122 - v30;
  uint64_t v159 = type metadata accessor for Shape();
  uint64_t v178 = *(void *)(v159 - 8);
  MEMORY[0x270FA5388](v159);
  int64_t v33 = (char *)v122 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v158 = (uint64_t)v122 - v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v36 - 8);
  unint64_t v38 = (char *)v122 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
  uint64_t v39 = *(void *)(v171 - 8);
  MEMORY[0x270FA5388](v171);
  uint64_t v168 = (char *)v122 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v41);
  id v170 = (char *)v122 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43);
  uint64_t v47 = (char *)v122 - v46;
  uint64_t v135 = a2;
  uint64_t v48 = *(void *)(a2 + 8);
  uint64_t v49 = v47;
  uint64_t v50 = *(void *)(v48 + 56);
  uint64_t v155 = v48 + 56;
  uint64_t v51 = 1 << *(unsigned char *)(v48 + 32);
  uint64_t v52 = -1;
  if (v51 < 64) {
    uint64_t v52 = ~(-1 << v51);
  }
  unint64_t v53 = v52 & v50;
  int64_t v156 = (unint64_t)(v51 + 63) >> 6;
  uint64_t v164 = v45 + 32;
  uint64_t v165 = v45 + 16;
  id v163 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  unint64_t v154 = (void (**)(char *, uint64_t, uint64_t))(v39 + 32);
  uint64_t v160 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v178 + 48);
  uint64_t v149 = (void (**)(char *))(v18 + 16);
  unint64_t v148 = (void (**)(char *, uint64_t))(v18 + 8);
  id v128 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  float v141 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  Swift::Bool v133 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  uint64_t v126 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v140 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v54 = v38;
  uint64_t v55 = v44;
  uint64_t v152 = (void (**)(char *, uint64_t))(v39 + 8);
  uint64_t v56 = (uint64_t)v31;
  uint64_t v166 = v45;
  uint64_t v167 = v48;
  id v162 = (void (**)(char *, uint64_t))(v45 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v58 = 0;
  uint64_t v144 = v11;
  uint64_t v138 = v26;
  id v143 = v33;
  uint64_t v142 = v49;
  char v150 = v31;
  uint64_t v169 = (uint64_t)v54;
  uint64_t v153 = v55;
  if (v53) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v60 = v58 + 1;
  if (!__OFADD__(v58, 1))
  {
    if (v60 < v156)
    {
      unint64_t v61 = *(void *)(v155 + 8 * v60);
      int64_t v62 = v58 + 1;
      if (v61) {
        goto LABEL_21;
      }
      int64_t v62 = v58 + 2;
      if (v58 + 2 >= v156) {
        return swift_release();
      }
      unint64_t v61 = *(void *)(v155 + 8 * v62);
      if (v61) {
        goto LABEL_21;
      }
      int64_t v62 = v58 + 3;
      if (v58 + 3 >= v156) {
        return swift_release();
      }
      unint64_t v61 = *(void *)(v155 + 8 * v62);
      if (v61)
      {
LABEL_21:
        uint64_t v178 = (v61 - 1) & v61;
        int64_t v172 = v62;
        for (unint64_t i = __clz(__rbit64(v61)) + (v62 << 6); ; unint64_t i = __clz(__rbit64(v53)) | (v58 << 6))
        {
          uint64_t v64 = v166;
          (*(void (**)(char *, unint64_t, uint64_t))(v166 + 16))(v49, *(void *)(v167 + 48) + *(void *)(v166 + 72) * i, v55);
          uint64_t v65 = v170;
          (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v170, v49, v55);
          WeakTagged_9.tagged6.getter();
          uint64_t v66 = v169;
          uint64_t v67 = v171;
          if ((*v163)(v169, 1, v171) == 1)
          {
            (*v162)(v65, v55);
            uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v66, &demangling cache variable for type metadata for WeakRef<Shape>?);
            goto LABEL_6;
          }
          uint64_t v68 = v168;
          (*v154)(v168, v66, v67);
          WeakRef.subscript.getter();
          uint64_t v69 = *v160;
          uint64_t v70 = v159;
          if ((*v160)(v56, 1, v159) == 1)
          {
            (*v152)(v68, v67);
            uint64_t v55 = v153;
            (*v162)(v170, v153);
            uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for Shape?);
LABEL_6:
            int64_t v58 = v172;
            unint64_t v53 = v178;
            if (!v178) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
          uint64_t v71 = v158;
          _s8PaperKit5ShapeVWObTm_0(v56, v158, (uint64_t (*)(void))type metadata accessor for Shape);
          uint64_t v72 = v71 + *(int *)(v70 + 52);
          unint64_t v73 = *v149;
          uint64_t v151 = v72;
          v73(v26);
          uint64_t v74 = (void *)CRAttributedString.attributedString.getter();
          id v75 = objc_msgSend(v74, sel_string);

          uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v78 = v77;

          if (!v76 && v78 == 0xE000000000000000)
          {
            swift_bridgeObjectRelease();
            (*v148)(v26, v157);
            uint64_t v56 = (uint64_t)v150;
            uint64_t v79 = v145;
            goto LABEL_40;
          }
          uint64_t v139 = (void (*)(char *, uint64_t, uint64_t))v73;
          char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v81 = *v148;
          (*v148)(v26, v157);
          uint64_t v56 = (uint64_t)v150;
          uint64_t v79 = v145;
          if ((v80 & 1) == 0) {
            break;
          }
LABEL_40:
          type metadata accessor for ShapeSecondaryProperties();
          uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          uint64_t v111 = (uint64_t)v144;
          uint64_t v151 = v110;
          CRRegister.wrappedValue.getter();
          uint64_t v112 = v111;
          uint64_t v113 = (uint64_t)v143;
          outlined init with copy of Shape(v158, (uint64_t)v143);
          uint64_t v114 = v111;
          uint64_t v115 = v146;
          if ((*v141)(v114, 1, v146) == 1)
          {
            type metadata accessor for CanvasFormattingProxy();
            CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
            _s8PaperKit5ShapeVWOhTm_0(v113, (uint64_t (*)(void))type metadata accessor for Shape);
            outlined destroy of StocksKitCurrencyCache.Provider?(v112, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
          else
          {
            _s8PaperKit5ShapeVWOhTm_0(v113, (uint64_t (*)(void))type metadata accessor for Shape);
            (*v133)(v79, v112, v115);
          }
          swift_getKeyPath();
          uint64_t v174 = v147;
          char v175 = 0;
          lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
          CRAttributedString.Attributes.subscript.setter();
          uint64_t v116 = v79;
          uint64_t v117 = (void (*)(uint64_t *, void))WeakRef.subscript.modify();
          if (!v69(v118, 1, v159))
          {
            uint64_t v119 = (uint64_t)v129;
            (*v126)(v129, v116, v115);
            (*v128)(v119, 0, 1, v115);
            uint64_t v120 = v130;
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v119, v130);
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v120, v131);
            uint64_t v56 = (uint64_t)v150;
            CRRegister.wrappedValue.setter();
            uint64_t v121 = v120;
            uint64_t v26 = v138;
            outlined destroy of StocksKitCurrencyCache.Provider?(v121, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v119, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
          v117(&v174, 0);
          int64_t v58 = v172;
          (*v140)(v116, v115);
          _s8PaperKit5ShapeVWOhTm_0(v158, (uint64_t (*)(void))type metadata accessor for Shape);
          (*v152)(v168, v171);
          uint64_t v55 = v153;
          uint64_t result = ((uint64_t (*)(char *, uint64_t))*v162)(v170, v153);
          uint64_t v49 = v142;
          unint64_t v53 = v178;
          if (!v178) {
            goto LABEL_8;
          }
LABEL_7:
          uint64_t v178 = (v53 - 1) & v53;
          int64_t v172 = v58;
        }
        uint64_t v82 = (uint64_t)v124;
        WeakRef.subscript.getter();
        uint64_t v83 = v159;
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v69)(v82, 1, v159);
        if (result == 1) {
          goto LABEL_52;
        }
        uint64_t v84 = v125;
        uint64_t v85 = v157;
        v139(v125, v82 + *(int *)(v83 + 52), v157);
        _s8PaperKit5ShapeVWOhTm_0(v82, (uint64_t (*)(void))type metadata accessor for Shape);
        uint64_t v86 = CRAttributedString.count.getter();
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v81)(v84, v85);
        if (v86 < 0) {
          goto LABEL_50;
        }
        swift_getKeyPath();
        uint64_t v176 = v147;
        char v177 = 0;
        uint64_t v127 = (void (*)(uint64_t *, void))WeakRef.subscript.modify();
        uint64_t v88 = v87;
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v69)(v87, 1, v83);
        if (result == 1) {
          goto LABEL_53;
        }
        uint64_t v89 = v88 + *(int *)(v83 + 52);
        uint64_t v90 = v157;
        char v91 = (void (*)(char *, void))CRAttributedString.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
        lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
        uint64_t v92 = v89;
        CRAttributedString.Substring.subscript.setter();
        v91(v173, 0);
        v139(v132, v89, v90);
        uint64_t v93 = (void *)CRAttributedString.attributedString.getter();
        id v94 = objc_msgSend(v93, sel_string);

        uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v97 = v96;

        if (v95 || v97 != 0xE000000000000000)
        {
          uint64_t v98 = v92;
          char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v81(v132, v157);
          uint64_t v26 = v138;
          uint64_t v56 = (uint64_t)v150;
          if (v99)
          {
LABEL_39:
            v127(&v174, 0);
            goto LABEL_40;
          }
          uint64_t v100 = v125;
          uint64_t v101 = v157;
          uint64_t v102 = v139;
          v139(v125, v98, v157);
          uint64_t v103 = v123;
          v122[1] = v98;
          v102(v123, v98, v101);
          uint64_t v104 = (void *)CRAttributedString.attributedString.getter();
          v81(v103, v101);
          id v105 = objc_msgSend(v104, sel_length);

          uint64_t result = (uint64_t)v105 - 1;
          if (__OFSUB__(v105, 1)) {
            goto LABEL_51;
          }
          uint64_t v106 = (uint64_t)v129;
          uint64_t v107 = v157;
          CRAttributedString.attributes(at:effectiveRange:)();
          v81(v100, v107);
          (*v128)(v106, 0, 1, v146);
          uint64_t v108 = v130;
          outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v106, v130);
          outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v108, v131);
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          CRRegister.wrappedValue.setter();
          outlined destroy of StocksKitCurrencyCache.Provider?(v108, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          uint64_t v109 = v106;
          uint64_t v26 = v138;
          outlined destroy of StocksKitCurrencyCache.Provider?(v109, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        }
        else
        {
          swift_bridgeObjectRelease();
          v81(v132, v157);
          uint64_t v26 = v138;
        }
        uint64_t v56 = (uint64_t)v150;
        goto LABEL_39;
      }
      uint64_t v63 = v58 + 4;
      if (v58 + 4 < v156)
      {
        unint64_t v61 = *(void *)(v155 + 8 * v63);
        if (v61)
        {
          int64_t v62 = v58 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v62 = v63 + 1;
          if (__OFADD__(v63, 1)) {
            goto LABEL_49;
          }
          if (v62 >= v156) {
            return swift_release();
          }
          unint64_t v61 = *(void *)(v155 + 8 * v62);
          ++v63;
          if (v61) {
            goto LABEL_21;
          }
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}