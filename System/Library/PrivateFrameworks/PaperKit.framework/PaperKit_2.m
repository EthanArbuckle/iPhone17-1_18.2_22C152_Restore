char *keypath_get_selector_shouldHighlightTextAndODAfterNextAnalysis()
{
  return sel_shouldHighlightTextAndODAfterNextAnalysis;
}

id sub_20C43E6DC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shouldHighlightTextAndODAfterNextAnalysis);
  *a2 = (_BYTE)result;
  return result;
}

id sub_20C43E710(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShouldHighlightTextAndODAfterNextAnalysis_, *a1);
}

char *keypath_get_selector_shouldEnterVisualSearchAfterNextAnalysis()
{
  return sel_shouldEnterVisualSearchAfterNextAnalysis;
}

id sub_20C43E730@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shouldEnterVisualSearchAfterNextAnalysis);
  *a2 = (_BYTE)result;
  return result;
}

id sub_20C43E764(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShouldEnterVisualSearchAfterNextAnalysis_, *a1);
}

char *keypath_get_selector_shouldUpliftSubjectAfterNextAnalysis()
{
  return sel_shouldUpliftSubjectAfterNextAnalysis;
}

id sub_20C43E784@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shouldUpliftSubjectAfterNextAnalysis);
  *a2 = (_BYTE)result;
  return result;
}

id sub_20C43E7B8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShouldUpliftSubjectAfterNextAnalysis_, *a1);
}

unsigned char *storeEnumTagSinglePayload for PPKMarkupContainerViewControllerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *id result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C43E898);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPKMarkupContainerViewControllerError()
{
  return &type metadata for PPKMarkupContainerViewControllerError;
}

uint64_t ObjC metadata update function for MarkupContainerViewController()
{
  return type metadata accessor for MarkupContainerViewController();
}

void type metadata completion function for MarkupContainerViewController()
{
  type metadata accessor for CRAsset?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for MarkupContainerViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MarkupContainerViewController);
}

uint64_t dispatch thunk of MarkupContainerViewController.minimumContentInsets.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of MarkupContainerViewController.minimumContentInsets.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x290))();
}

uint64_t dispatch thunk of MarkupContainerViewController.minimumContentInsets.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x298))();
}

uint64_t dispatch thunk of MarkupContainerViewController.findInteractionEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.findInteractionEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.findInteractionEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isImageAnalysisEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isImageAnalysisEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isImageAnalysisEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.findInteraction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.documentIsLocked.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.canEncryptDocument.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x310))();
}

uint64_t dispatch thunk of MarkupContainerViewController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x318))();
}

uint64_t dispatch thunk of MarkupContainerViewController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
}

uint64_t dispatch thunk of MarkupContainerViewController.encryptPrivateMetadata.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x328))();
}

uint64_t dispatch thunk of MarkupContainerViewController.encryptPrivateMetadata.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x330))();
}

uint64_t dispatch thunk of MarkupContainerViewController.encryptPrivateMetadata.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x338))();
}

uint64_t dispatch thunk of MarkupContainerViewController.imageDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x340))();
}

uint64_t dispatch thunk of MarkupContainerViewController.imageDescription.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x348))();
}

uint64_t dispatch thunk of MarkupContainerViewController.imageDescription.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x350))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showThumbnailViewForMultipage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x358))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showThumbnailViewForMultipage.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x360))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showThumbnailViewForMultipage.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x368))();
}

uint64_t dispatch thunk of MarkupContainerViewController.load(fromData:with:placeholderImage:completionHandler:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x388))();
}

uint64_t dispatch thunk of MarkupContainerViewController.load(fromURL:with:placeholderImage:completionHandler:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x390))();
}

uint64_t dispatch thunk of MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x398))();
}

uint64_t dispatch thunk of MarkupContainerViewController.write(to:imageType:error:embeddingSourceImageAndEditModel:options:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10 = *(int **)((*MEMORY[0x263F8EED0] & *v4) + 0x3A8);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = dispatch thunk of MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:);
  return v13(a1, a2, a3, a4);
}

uint64_t dispatch thunk of MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  int v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of MarkupContainerViewController.dataRepresentation(withError:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.archivedModelData()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.contentViewScrollView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.annotationEditingEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.annotationEditingEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.annotationEditingEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.allEditingDisabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.allEditingDisabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.allEditingDisabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pencilAlwaysDraws.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pencilAlwaysDraws.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x400))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pencilAlwaysDraws.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x408))();
}

uint64_t dispatch thunk of MarkupContainerViewController.formFillingEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x410))();
}

uint64_t dispatch thunk of MarkupContainerViewController.formFillingEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x418))();
}

uint64_t dispatch thunk of MarkupContainerViewController.formFillingEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x420))();
}

uint64_t dispatch thunk of MarkupContainerViewController.setFormFillingEnabled(_:didUseBanner:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x428))();
}

uint64_t dispatch thunk of MarkupContainerViewController.toolbarHidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x430))();
}

uint64_t dispatch thunk of MarkupContainerViewController.toolbarHidden.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x438))();
}

uint64_t dispatch thunk of MarkupContainerViewController.toolbarHidden.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x440))();
}

uint64_t dispatch thunk of MarkupContainerViewController.validateUndo(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x448))();
}

uint64_t dispatch thunk of MarkupContainerViewController.validateRedo(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x450))();
}

uint64_t dispatch thunk of MarkupContainerViewController.undo(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x458))();
}

uint64_t dispatch thunk of MarkupContainerViewController.redo(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x460))();
}

uint64_t dispatch thunk of MarkupContainerViewController.revert(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x468))();
}

uint64_t dispatch thunk of MarkupContainerViewController.backgroundColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x470))();
}

uint64_t dispatch thunk of MarkupContainerViewController.backgroundColor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x478))();
}

uint64_t dispatch thunk of MarkupContainerViewController.backgroundColor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x480))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isTouchInThumbnailView(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x488))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isTouchInPageLabelView(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x490))();
}

uint64_t dispatch thunk of MarkupContainerViewController.isTouchInBannerView(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x498))();
}

uint64_t dispatch thunk of MarkupContainerViewController.acceptSingleTouch(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.bannerView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showBannerView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showBannerView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.showBannerView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pdfFrame.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pdfScrollView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pdfBackgroundColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pdfBackgroundColor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4F0))();
}

uint64_t dispatch thunk of MarkupContainerViewController.pdfBackgroundColor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4F8))();
}

uint64_t type metadata accessor for MarkupContainerViewControllerAnalysisDelegate()
{
  return self;
}

uint64_t type metadata accessor for PPKZeroCallbackCounter()
{
  return self;
}

void specialized MarkupContainerViewControllerAnalysisDelegate.contextWillPresentVisualSearchController(_:)(SEL *a1)
{
  uint64_t v3 = v1 + 16;
  uint64_t v4 = MEMORY[0x210550400](v1 + 16);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
    swift_beginAccess();
    v7 = (void *)MEMORY[0x210550400](v6);

    if (v7)
    {
      if (objc_msgSend(v7, sel_respondsToSelector_, *a1))
      {
        uint64_t v8 = MEMORY[0x210550400](v3);
        if (!v8)
        {
          swift_unknownObjectRelease();
          __break(1u);
          return;
        }
        v9 = (void *)v8;
        objc_msgSend(v7, *a1, v8, 1);
      }
      swift_unknownObjectRelease();
    }
  }
}

void specialized MarkupContainerViewControllerAnalysisDelegate.contextActiveInteractionTypesDidChange(_:)(SEL *a1)
{
  uint64_t v3 = v1 + 16;
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = v4 + OBJC_IVAR___PPKMarkupContainerViewController_delegate;
    swift_beginAccess();
    v7 = (void *)MEMORY[0x210550400](v6);

    if (v7)
    {
      if (objc_msgSend(v7, sel_respondsToSelector_, *a1))
      {
        uint64_t v8 = MEMORY[0x210550400](v3);
        if (!v8)
        {
          swift_unknownObjectRelease();
          __break(1u);
          return;
        }
        v9 = (void *)v8;
        objc_msgSend(v7, *a1, v8);
      }
      swift_unknownObjectRelease();
    }
  }
}

void partial apply for closure #1 in MarkupContainerViewController.editingMode.didset()
{
  closure #1 in MarkupContainerViewController.editingMode.didset(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_20C43FE08()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for specialized closure #1 in CanvasElementViewController.bannerViewConfiguration.didset()
{
  specialized closure #1 in CanvasElementViewController.bannerViewConfiguration.didset(v0[2], v0[3], v0[4]);
}

uint64_t sub_20C43FE5C()
{
  _Block_release(*(const void **)(v0 + 48));
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  v9 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:)
                                                                                 + async function pointer to @objc closure #1 in MarkupContainerViewController.write(to:imageType:embeddingSourceImageAndEditModel:options:));
  return v9(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_20C43FF94()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  v7[4] = a2;
  v7[5] = v6;
  v7[3] = a1;
  return MEMORY[0x270FA2498](closure #1 in static MarkupContainerViewController.write(context:fileCoordinator:originalAsset:pdfDocument:imagePaper:to:imageType:embeddingSourceImageAndEditModel:encryptPrivateMetadata:options:), 0, 0);
}

uint64_t sub_20C440100()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataOrURL() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 65) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64) + v3 + 7;
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  uint64_t v6 = v0 + v3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
  }
  unint64_t v8 = *(void *)(v0 + v5 + 8);
  if (v8 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + v5), v8);
  }
  return MEMORY[0x270FA0238](v0, ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t outlined init with take of DataOrURL(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataOrURL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DataOrURL() - 8);
  uint64_t v13 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v12 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  char v8 = *(unsigned char *)(v1 + 64);
  double v9 = *(double *)(v1
                 + ((((*(void *)(v3 + 64)
                     + ((*(unsigned __int8 *)(v3 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                     + 7) & 0xFFFFFFFFFFFFFFF8)
                   + 23) & 0xFFFFFFFFFFFFFFF8));
  v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(v9, a1, v13, v12, v4, v5, v6, v7, v8);
}

void partial apply for closure #1 in closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)()
{
  closure #1 in closure #1 in MarkupContainerViewController.load(from:with:placeholderImage:completionHandler:)(v0);
}

id partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, 0.0);
}

uint64_t sub_20C440458()
{
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #2 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void (**)(void))(v0 + 32);
  objc_msgSend(*(id *)(v0 + 16), sel_removeFromSuperview);
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
  *(void *)(v1 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView) = 0;

  if (v2) {
    v2();
  }
}

uint64_t specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[37] = a3;
  v4[38] = v3;
  v4[35] = a1;
  v4[36] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v4[39] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[40] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v4[41] = v5;
  v4[42] = *(void *)(v5 - 8);
  v4[43] = swift_task_alloc();
  v4[44] = type metadata accessor for DataOrURL();
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v4[47] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[48] = v6;
  v4[49] = *(void *)(v6 - 8);
  v4[50] = swift_task_alloc();
  v4[51] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  v4[52] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[53] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[54] = v8;
  v4[55] = v7;
  return MEMORY[0x270FA2498](specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:), v8, v7);
}

uint64_t specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:)()
{
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v3 = *(unsigned char **)(v0 + 304);
  uint64_t v36 = *(void *)(v0 + 280);
  uint64_t v4 = *(void **)&v3[OBJC_IVAR___PPKMarkupContainerViewController_context];
  uint64_t v5 = &v3[OBJC_IVAR___PPKMarkupContainerViewController_isImageAnalysisEnabled];
  char v6 = v3[OBJC_IVAR___PPKMarkupContainerViewController_editingMode];
  swift_beginAccess();
  LOBYTE(v5) = *v5;
  id v7 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CanvasElementViewController<Image>));
  id v8 = v4;
  double v9 = v3;
  *(void *)(v0 + 448) = specialized CanvasElementViewController.init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(v8, v6, 1, 0, (char)v5, (uint64_t)v3, (uint64_t)&protocol witness table for MarkupContainerViewController);

  uint64_t v10 = type metadata accessor for CRAsset();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v1, 1, 1, v10);
  uint64_t v12 = (uint64_t)&v9[OBJC_IVAR___PPKMarkupContainerViewController_originalAsset];
  swift_beginAccess();
  outlined assign with take of CRAsset?(v1, v12);
  swift_endAccess();
  outlined init with copy of DataOrURL(v36, v2, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v14 = *(void *)(v0 + 384);
  uint64_t v15 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 376);
  if (EnumCaseMultiPayload == 1)
  {
    v37 = v11;
    v17 = *(void (**)(uint64_t, void, uint64_t))(v15 + 32);
    v17(v16, *(void *)(v0 + 368), v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v16, 0, 1, v14);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) != 1)
    {
      uint64_t v18 = *(void *)(v0 + 408);
      uint64_t v35 = *(void *)(v0 + 416);
      uint64_t v20 = *(void *)(v0 + 392);
      uint64_t v19 = *(void *)(v0 + 400);
      uint64_t v21 = *(void *)(v0 + 384);
      v17(v18, *(void *)(v0 + 376), v21);
      uint64_t v22 = v18;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v18, v21);
      type metadata accessor for CRContext();
      *(_OWORD *)(v0 + 16) = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
      *(void *)(v0 + 48) = 0;
      v23 = (void *)MEMORY[0x21054C990](0, v0 + 16);
      outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
      CRContext.assetManager.getter();

      CRAsset.init(url:coordinated:assetManager:)();
      v37(v35, 0, 1, v10);
      swift_beginAccess();
      outlined assign with take of CRAsset?(v35, v12);
      swift_endAccess();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of DataOrURL(*(void *)(v0 + 368), (uint64_t (*)(void))type metadata accessor for DataOrURL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v16, 1, 1, v14);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 376), &demangling cache variable for type metadata for URL?);
LABEL_6:
  uint64_t v24 = *(void *)(v0 + 320);
  uint64_t v26 = *(void *)(v0 + 288);
  unint64_t v25 = *(void *)(v0 + 296);
  outlined init with copy of DataOrURL(*(void *)(v0 + 280), *(void *)(v0 + 360), (uint64_t (*)(void))type metadata accessor for DataOrURL);
  outlined copy of Data?(v26, v25);
  static TaskPriority.userInitiated.getter();
  uint64_t v27 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v24, 0, 1, v27);
  v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v28;
  void *v28 = v0;
  v28[1] = specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:);
  uint64_t v29 = *(void *)(v0 + 360);
  uint64_t v30 = *(void *)(v0 + 344);
  uint64_t v31 = *(void *)(v0 + 320);
  uint64_t v32 = *(void *)(v0 + 288);
  uint64_t v33 = *(void *)(v0 + 296);
  return Capsule<>.init(from:with:priority:)(v30, v29, v32, v33, v31);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 440);
  uint64_t v4 = *(void *)(v2 + 432);
  if (v0) {
    uint64_t v5 = specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:);
  }
  else {
    uint64_t v5 = specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 448);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id specialized MarkupContainerViewController.loadImage(from:with:placeholderImage:)()
{
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 312);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v2, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v5, 0, 1, v4);
  specialized CanvasElementViewController.updateViewForPaper(_:)(v5);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for Capsule<Image>?);
  uint64_t v6 = MarkupContainerViewController.imageDescription.getter();
  CanvasElementViewController<>.imageDescription.setter(v6, v7);
  id v8 = (unsigned char *)(v1 + direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled);
  swift_beginAccess();
  *id v8 = 1;
  double v9 = (uint64_t *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v9) {
    objc_msgSend(*(id *)(*v9 + direct field offset for CanvasView.canvasTiledView), sel_setSixChannelBlending_, 1);
  }
  id result = objc_msgSend(*(id *)(v0 + 448), sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v11 = result;
  id result = objc_msgSend(*(id *)(v0 + 304), sel_view);
  if (!result)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v12 = result;
  uint64_t v13 = *(void **)(v0 + 448);
  objc_msgSend(result, sel_bounds);
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;

  objc_msgSend(v11, sel_setFrame_, v15, v17, v19, v21);
  id result = objc_msgSend(v13, sel_view);
  if (!result)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v22 = result;
  uint64_t v23 = *(void *)(v0 + 304);
  objc_msgSend(result, sel_setAutoresizingMask_, 18);

  uint64_t v24 = *(void **)(v23 + OBJC_IVAR___PPKMarkupContainerViewController_placeholderImageScrollView);
  unint64_t v25 = *(void **)(v0 + 304);
  if (v24)
  {
    id v26 = v24;
    id result = objc_msgSend(v25, sel_view);
    if (!result)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v27 = result;
    id result = objc_msgSend(*(id *)(v0 + 448), sel_view);
    if (!result)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v28 = result;
    objc_msgSend(v27, sel_insertSubview_belowSubview_, result, v26);
  }
  else
  {
    id result = objc_msgSend(*(id *)(v0 + 304), sel_view);
    if (!result)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    uint64_t v27 = result;
    id result = objc_msgSend(*(id *)(v0 + 448), sel_view);
    if (!result)
    {
LABEL_43:
      __break(1u);
      return result;
    }
    v28 = result;
    objc_msgSend(v27, sel_addSubview_, result);
  }
  uint64_t v29 = *(void **)(v0 + 448);
  uint64_t v30 = *(char **)(v0 + 304);

  objc_msgSend(v30, sel_addChildViewController_, v29);
  objc_msgSend(v29, sel_didMoveToParentViewController_, v30);
  uint64_t v31 = OBJC_IVAR___PPKMarkupContainerViewController_imageViewController;
  uint64_t v32 = *(void **)&v30[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController];
  *(void *)&v30[OBJC_IVAR___PPKMarkupContainerViewController_imageViewController] = v29;
  id v33 = v29;

  uint64_t v34 = *v9;
  if (*v9)
  {
    *(unsigned char *)(v34 + direct field offset for CanvasView.allowsContentSnapping) = 0;
    uint64_t v35 = *(void **)(v34 + direct field offset for CanvasView.trackingPanGestureRecognizer);
    if (v35) {
      objc_msgSend(v35, sel_setEnabled_, 0);
    }
  }
  uint64_t v36 = *(void *)(v0 + 448) + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  swift_beginAccess();
  *(void *)(v36 + 8) = &protocol witness table for MarkupContainerViewController;
  swift_unknownObjectWeakAssign();
  uint64_t v37 = *v9;
  if (*v9)
  {
    uint64_t v38 = v37 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
    swift_beginAccess();
    *(void *)(v38 + 8) = &protocol witness table for MarkupContainerViewController;
    swift_unknownObjectWeakAssign();
    *(unsigned char *)(v37 + direct field offset for CanvasView.firstLayout) = 0;
  }
  v39 = *(void **)(v0 + 304);
  MarkupContainerViewController.configureLookAndStyle()();
  id result = objc_msgSend(v39, sel_view);
  if (!result)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v40 = result;
  uint64_t v41 = *(void *)(v0 + 448);
  uint64_t v42 = *(void *)(v0 + 304);
  objc_msgSend(result, sel_bounds);
  double v44 = v43;
  double v46 = v45;

  CanvasElementViewController<>.updateImageZoomScale(in:animated:zoomable:)(0, 0, v44, v46);
  uint64_t v47 = *(void *)(v41 + direct field offset for CanvasElementViewController.passThroughSubject);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<Capsule<Image>, Never>>);
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = v47;
  *(void *)(v0 + 272) = v48;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type AnyPublisher<Capsule<Image>, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<Image>, Never>);
  uint64_t v49 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(v42 + OBJC_IVAR___PPKMarkupContainerViewController_imageCancellable) = v49;
  swift_release();
  if (*v9)
  {
    v50 = *(void **)(*v9 + direct field offset for Canvas.paperView);
    type metadata accessor for ImageElementView(0);
    v51 = (char *)swift_dynamicCastClass();
    if (v51) {
      id v52 = v50;
    }
  }
  else
  {
    v51 = 0;
  }
  type metadata accessor for MarkupContainerViewControllerAnalysisDelegate();
  uint64_t v53 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  if (!v51) {
    goto LABEL_30;
  }
  v54 = (void *)MEMORY[0x210550400](&v51[direct field offset for ImageElementView.imageAnalysisDelegate]);
  swift_unknownObjectWeakAssign();
  swift_retain();
  v55 = v51;
  ImageElementView.imageAnalysisDelegate.didset(v54);

  swift_unknownObjectRelease();
  swift_release();
  v56 = *(void **)&v55[direct field offset for ImageElementView.mediaView];
  if (!v56)
  {
    swift_retain();
    v60 = v55;
    id v58 = ImageElementView.pendingImageAnalysisObservers.getter();
    objc_msgSend(v58, sel_addObject_, v53);
    goto LABEL_28;
  }
  swift_retain();
  v57 = v55;
  id v58 = v56;
  id v59 = objc_msgSend(v58, sel_imageAnalysisContext);
  if (!v59)
  {
LABEL_28:

    goto LABEL_29;
  }
  objc_msgSend(v59, sel_addAnalysisObserver_, v53);

  swift_unknownObjectRelease();
LABEL_29:

  swift_release();
LABEL_30:
  v72 = v51;
  *(void *)(*(void *)(v0 + 304) + OBJC_IVAR___PPKMarkupContainerViewController_analysisDelegate) = v53;
  swift_retain();
  swift_release();
  uint64_t v61 = *(void *)&v30[v31];
  if (v61)
  {
    v62 = (void **)(v61 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    v63 = (char *)*v62;
    if (*v62)
    {
      v64 = (_OWORD *)(*(void *)(v0 + 304) + OBJC_IVAR___PPKMarkupContainerViewController_minimumContentInsets);
      swift_beginAccess();
      v65 = &v63[direct field offset for CanvasView.minimumContentInsets];
      long long v66 = v64[1];
      *(_OWORD *)v65 = *v64;
      *((_OWORD *)v65 + 1) = v66;
      v67 = v63;
      specialized CanvasView.updateContentInsets()();
    }
  }
  swift_release();
  uint64_t v68 = *(void *)(v0 + 336);
  uint64_t v69 = *(void *)(v0 + 344);
  uint64_t v70 = *(void *)(v0 + 328);

  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v71 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v71();
}

void partial apply for closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:)(uint64_t a1)
{
  closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:)(a1, v1);
}

void partial apply for closure #1 in closure #1 in MarkupContainerViewController.loadImage(from:with:placeholderImage:)()
{
  closure #1 in closure #1 in MarkupContainerViewController.loadPDF(from:)(v0);
}

uint64_t outlined init with copy of DataOrURL(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of DataOrURL(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void partial apply for closure #1 in MarkupContainerViewController.loadPDF(from:)(uint64_t a1)
{
  closure #1 in MarkupContainerViewController.loadPDF(from:)(a1, v1);
}

uint64_t _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in MarkupContainerViewController.imageDescription.setter()
{
  return closure #1 in closure #1 in MarkupContainerViewController.imageDescription.setter();
}

void partial apply for closure #1 in MarkupContainerViewController.isImageAnalysisEnabled.didset()
{
  closure #1 in MarkupContainerViewController.isImageAnalysisEnabled.didset(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void partial apply for closure #1 in MarkupContainerViewController.findInteractionEnabled.didset()
{
  closure #1 in MarkupContainerViewController.findInteractionEnabled.didset(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t Array<A>.fontName.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v35 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    double v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v14 = v9 + 16;
    double v15 = v16;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v33 = *(void *)(v14 + 56);
    uint64_t v34 = v14;
    v31[1] = a1;
    uint64_t v32 = (void (**)(char *, uint64_t))(v14 - 8);
    swift_bridgeObjectRetain();
    do
    {
      v15(v11, v17, v8);
      v15(v4, (uint64_t)v11, v8);
      v15(v7, (uint64_t)v4, v8);
      double v18 = (uint64_t (**)@<X0>(uint64_t *@<X8>))&v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>)
                                                                     + 44)];
      *double v18 = closure #1 in CRAttributedString.Runs<>.familyNames.getter;
      v18[1] = 0;
      double v19 = (BOOL (**)(uint64_t))&v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>)
                                                      + 36)];
      *double v19 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      v19[1] = 0;
      double v20 = &v7[*(int *)(v5 + 44)];
      *(void *)double v20 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      *((void *)v20 + 1) = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
      uint64_t v21 = v5;
      uint64_t v22 = v4;
      uint64_t v23 = specialized Sequence<>.uniqueElements()();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>);
      (*v32)(v11, v8);
      uint64_t v24 = v23;
      uint64_t v4 = v22;
      uint64_t v5 = v21;
      specialized Array.append<A>(contentsOf:)(v24);
      v17 += v33;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v12 = v35;
  }
  unint64_t v25 = *(void *)(v12 + 16);
  if (v25 <= 1)
  {
    if (v25)
    {
      uint64_t v29 = *(void *)(v12 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v36._object = (void *)0x800000020C855600;
    v26._countAndFlagsBits = 0x656C7069746C754DLL;
    v26._object = (void *)0xE800000000000000;
    v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v27.value._object = (void *)0xEB00000000656C62;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v36._countAndFlagsBits = 0xD00000000000003FLL;
    return NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v36)._countAndFlagsBits;
  }
  return v29;
}

id Array<A>.fontSize.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v32 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    double v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v14 = v9 + 16;
    double v15 = v16;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v30 = *(void *)(v14 + 56);
    uint64_t v31 = v14;
    v28[1] = a1;
    uint64_t v29 = (void (**)(char *, uint64_t))(v14 - 8);
    swift_bridgeObjectRetain();
    do
    {
      v15(v11, v17, v8);
      v15(v4, (uint64_t)v11, v8);
      v15(v7, (uint64_t)v4, v8);
      double v18 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>)
                                                                   + 44)];
      *double v18 = closure #1 in CRAttributedString.Runs<>.fontSizes.getter;
      v18[1] = 0;
      double v19 = (BOOL (**)(uint64_t))&v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>)
                                                      + 36)];
      *double v19 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      v19[1] = 0;
      double v20 = &v7[*(int *)(v5 + 44)];
      *(void *)double v20 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      *((void *)v20 + 1) = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
      uint64_t v21 = v5;
      uint64_t v22 = v4;
      uint64_t v23 = specialized Sequence<>.uniqueElements()();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
      (*v29)(v11, v8);
      uint64_t v24 = v23;
      uint64_t v4 = v22;
      uint64_t v5 = v21;
      specialized Array.append<A>(contentsOf:)(v24);
      v17 += v30;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v12 = v32;
  }
  if (!*(void *)(v12 + 16))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for textBoxDefaultFont == -1) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  float v25 = *(float *)(v12 + 32);
  swift_bridgeObjectRelease();
  if ((~LODWORD(v25) & 0x7F800000) != 0)
  {
    if (v25 > -9.2234e18)
    {
      if (v25 < 9.2234e18) {
        return (id)(uint64_t)v25;
      }
      goto LABEL_17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  swift_once();
LABEL_11:
  id result = objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_pointSize);
  if ((~*(void *)&v27 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v27 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v27 < 9.22337204e18) {
    return (id)(uint64_t)v27;
  }
LABEL_21:
  __break(1u);
  return result;
}

BOOL Array<A>.hasMultipleFontSizes.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v31 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    double v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v14 = v9 + 16;
    double v15 = v16;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v29 = *(void *)(v14 + 56);
    uint64_t v30 = v14;
    v27[1] = a1;
    Swift::String v28 = (void (**)(char *, uint64_t))(v14 - 8);
    swift_bridgeObjectRetain();
    do
    {
      v15(v11, v17, v8);
      v15(v4, (uint64_t)v11, v8);
      v15(v7, (uint64_t)v4, v8);
      double v18 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>)
                                                                   + 44)];
      *double v18 = closure #1 in CRAttributedString.Runs<>.fontSizes.getter;
      v18[1] = 0;
      double v19 = (BOOL (**)(uint64_t))&v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>)
                                                      + 36)];
      *double v19 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      v19[1] = 0;
      double v20 = &v7[*(int *)(v5 + 44)];
      *(void *)double v20 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      *((void *)v20 + 1) = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
      uint64_t v21 = v5;
      uint64_t v22 = v4;
      uint64_t v23 = specialized Sequence<>.uniqueElements()();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
      (*v28)(v11, v8);
      uint64_t v24 = v23;
      uint64_t v4 = v22;
      uint64_t v5 = v21;
      specialized Array.append<A>(contentsOf:)(v24);
      v17 += v29;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v12 = v31;
  }
  unint64_t v25 = *(void *)(v12 + 16);
  swift_bridgeObjectRelease();
  return v25 > 1;
}

uint64_t Array<A>.textAlignment.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v27 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    double v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v14 = v9 + 16;
    double v15 = v16;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v25 = *(void *)(v14 + 56);
    uint64_t v26 = v14;
    v23[1] = a1;
    uint64_t v24 = (void (**)(char *, uint64_t))(v14 - 8);
    swift_bridgeObjectRetain();
    do
    {
      v15(v11, v17, v8);
      v15(v4, (uint64_t)v11, v8);
      v15(v7, (uint64_t)v4, v8);
      double v18 = &v7[*(int *)(v5 + 44)];
      *(void *)double v18 = closure #1 in CRAttributedString.Runs<>.alignments.getter;
      *((void *)v18 + 1) = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
      uint64_t v19 = specialized Sequence<>.uniqueElements()();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>);
      (*v24)(v11, v8);
      specialized Array.append<A>(contentsOf:)(v19);
      v17 += v25;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v12 = v27;
  }
  uint64_t v20 = *(void *)(v12 + 16);
  if (v20)
  {
    if (v20 == 1) {
      uint64_t v21 = *(void *)(v12 + 32);
    }
    else {
      uint64_t v21 = 0;
    }
  }
  else
  {
    uint64_t v21 = 4;
  }
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t Array<A>.textStyles.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
  MEMORY[0x270FA5388](v110);
  uint64_t v6 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  v101 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  v102 = (char *)&v99 - v11;
  MEMORY[0x270FA5388](v12);
  v103 = (char *)&v99 - v13;
  MEMORY[0x270FA5388](v14);
  double v16 = (char *)&v99 - v15;
  uint64_t v106 = *(void *)(a1 + 16);
  if (!v106)
  {
    uint64_t v41 = 7;
    return v41 | 8;
  }
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v18 = v8 + 16;
  uint64_t v17 = v19;
  uint64_t v109 = a1 + ((*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64));
  uint64_t v20 = *(void *)(v18 + 56);
  v107 = (void (**)(char *, uint64_t))(v18 - 8);
  uint64_t v108 = v20;
  uint64_t v99 = a1;
  swift_bridgeObjectRetain();
  uint64_t v21 = 0;
  while (2)
  {
    uint64_t v22 = v109 + v108 * v21++;
    v17(v16, v22, v7);
    v17(v4, (uint64_t)v16, v7);
    v17(v6, (uint64_t)v4, v7);
    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>);
    uint64_t v23 = (uint64_t (**)@<X0>(uint64_t@<X0>, char *@<X8>))&v6[*(int *)(v105 + 44)];
    void *v23 = closure #1 in CRAttributedString.Runs<>.isBold.getter;
    v23[1] = 0;
    uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>);
    uint64_t v24 = (BOOL (**)(unsigned __int8 *))&v6[*(int *)(v104 + 36)];
    *uint64_t v24 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v24[1] = 0;
    uint64_t v25 = &v6[*(int *)(v110 + 44)];
    *(void *)uint64_t v25 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((void *)v25 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    uint64_t v26 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    uint64_t result = specialized Collection.first.getter(v26);
    int64_t v28 = 0;
    char v29 = result & 1;
    uint64_t v30 = v26 + 56;
    uint64_t v31 = 1 << *(unsigned char *)(v26 + 32);
    if (v31 < 64) {
      uint64_t v32 = ~(-1 << v31);
    }
    else {
      uint64_t v32 = -1;
    }
    unint64_t v33 = v32 & *(void *)(v26 + 56);
    int64_t v34 = (unint64_t)(v31 + 63) >> 6;
    while (1)
    {
      if (v33)
      {
        unint64_t v35 = __clz(__rbit64(v33));
        v33 &= v33 - 1;
        unint64_t v36 = v35 | (v28 << 6);
        goto LABEL_8;
      }
      int64_t v37 = v28 + 1;
      if (__OFADD__(v28, 1))
      {
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
        goto LABEL_133;
      }
      if (v37 >= v34) {
        goto LABEL_28;
      }
      unint64_t v38 = *(void *)(v30 + 8 * v37);
      ++v28;
      if (!v38)
      {
        int64_t v28 = v37 + 1;
        if (v37 + 1 >= v34) {
          goto LABEL_28;
        }
        unint64_t v38 = *(void *)(v30 + 8 * v28);
        if (!v38)
        {
          int64_t v28 = v37 + 2;
          if (v37 + 2 >= v34) {
            goto LABEL_28;
          }
          unint64_t v38 = *(void *)(v30 + 8 * v28);
          if (!v38)
          {
            int64_t v28 = v37 + 3;
            if (v37 + 3 >= v34) {
              goto LABEL_28;
            }
            unint64_t v38 = *(void *)(v30 + 8 * v28);
            if (!v38)
            {
              int64_t v28 = v37 + 4;
              if (v37 + 4 >= v34) {
                goto LABEL_28;
              }
              unint64_t v38 = *(void *)(v30 + 8 * v28);
              if (!v38) {
                break;
              }
            }
          }
        }
      }
LABEL_27:
      unint64_t v33 = (v38 - 1) & v38;
      unint64_t v36 = __clz(__rbit64(v38)) + (v28 << 6);
LABEL_8:
      v29 &= *(unsigned char *)(*(void *)(v26 + 48) + v36);
    }
    int64_t v39 = v37 + 5;
    if (v39 < v34)
    {
      unint64_t v38 = *(void *)(v30 + 8 * v39);
      if (!v38)
      {
        while (1)
        {
          int64_t v28 = v39 + 1;
          if (__OFADD__(v39, 1)) {
            break;
          }
          if (v28 >= v34) {
            goto LABEL_28;
          }
          unint64_t v38 = *(void *)(v30 + 8 * v28);
          ++v39;
          if (v38) {
            goto LABEL_27;
          }
        }
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
      int64_t v28 = v39;
      goto LABEL_27;
    }
LABEL_28:
    uint64_t v100 = 1;
    swift_release();
    v40 = *v107;
    (*v107)(v16, v7);
    if (v29)
    {
      if (v21 == v106) {
        goto LABEL_33;
      }
      continue;
    }
    break;
  }
  uint64_t v100 = 0;
LABEL_33:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v42 = 0;
  while (2)
  {
    uint64_t v43 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      goto LABEL_132;
    }
    double v44 = v103;
    v17(v103, v109 + v42 * v108, v7);
    v17(v4, (uint64_t)v44, v7);
    v17(v6, (uint64_t)v4, v7);
    double v45 = (uint64_t (**)@<X0>(uint64_t@<X0>, char *@<X8>))&v6[*(int *)(v105 + 44)];
    *double v45 = closure #1 in CRAttributedString.Runs<>.isItalic.getter;
    v45[1] = 0;
    double v46 = (BOOL (**)(unsigned __int8 *))&v6[*(int *)(v104 + 36)];
    *double v46 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v46[1] = 0;
    uint64_t v47 = &v6[*(int *)(v110 + 44)];
    *(void *)uint64_t v47 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((void *)v47 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    uint64_t v48 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    uint64_t result = specialized Collection.first.getter(v48);
    int64_t v49 = 0;
    char v50 = result & 1;
    uint64_t v51 = v48 + 56;
    uint64_t v52 = 1 << *(unsigned char *)(v48 + 32);
    if (v52 < 64) {
      uint64_t v53 = ~(-1 << v52);
    }
    else {
      uint64_t v53 = -1;
    }
    unint64_t v54 = v53 & *(void *)(v48 + 56);
    int64_t v55 = (unint64_t)(v52 + 63) >> 6;
    while (2)
    {
      if (v54)
      {
        unint64_t v56 = __clz(__rbit64(v54));
        v54 &= v54 - 1;
        unint64_t v57 = v56 | (v49 << 6);
LABEL_40:
        v50 &= *(unsigned char *)(*(void *)(v48 + 48) + v57);
        continue;
      }
      break;
    }
    int64_t v58 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      goto LABEL_129;
    }
    if (v58 < v55)
    {
      unint64_t v59 = *(void *)(v51 + 8 * v58);
      ++v49;
      if (!v59)
      {
        int64_t v49 = v58 + 1;
        if (v58 + 1 >= v55) {
          goto LABEL_60;
        }
        unint64_t v59 = *(void *)(v51 + 8 * v49);
        if (!v59)
        {
          int64_t v49 = v58 + 2;
          if (v58 + 2 >= v55) {
            goto LABEL_60;
          }
          unint64_t v59 = *(void *)(v51 + 8 * v49);
          if (!v59)
          {
            int64_t v49 = v58 + 3;
            if (v58 + 3 >= v55) {
              goto LABEL_60;
            }
            unint64_t v59 = *(void *)(v51 + 8 * v49);
            if (!v59)
            {
              int64_t v49 = v58 + 4;
              if (v58 + 4 >= v55) {
                goto LABEL_60;
              }
              unint64_t v59 = *(void *)(v51 + 8 * v49);
              if (!v59)
              {
                int64_t v60 = v58 + 5;
                if (v60 >= v55) {
                  goto LABEL_60;
                }
                unint64_t v59 = *(void *)(v51 + 8 * v60);
                if (!v59)
                {
                  while (1)
                  {
                    int64_t v49 = v60 + 1;
                    if (__OFADD__(v60, 1)) {
                      break;
                    }
                    if (v49 >= v55) {
                      goto LABEL_60;
                    }
                    unint64_t v59 = *(void *)(v51 + 8 * v49);
                    ++v60;
                    if (v59) {
                      goto LABEL_59;
                    }
                  }
LABEL_135:
                  __break(1u);
LABEL_136:
                  __break(1u);
                  goto LABEL_137;
                }
                int64_t v49 = v60;
              }
            }
          }
        }
      }
LABEL_59:
      unint64_t v54 = (v59 - 1) & v59;
      unint64_t v57 = __clz(__rbit64(v59)) + (v49 << 6);
      goto LABEL_40;
    }
LABEL_60:
    swift_release();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v40)(v103, v7);
    if (v50)
    {
      uint64_t v42 = v43;
      if (v43 == v106)
      {
        swift_bridgeObjectRelease();
        v100 |= 2uLL;
        goto LABEL_64;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_64:
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v61 = 0;
  while (2)
  {
    uint64_t v62 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      goto LABEL_134;
    }
    v63 = v102;
    v17(v102, v109 + v61 * v108, v7);
    v17(v4, (uint64_t)v63, v7);
    v17(v6, (uint64_t)v4, v7);
    v64 = &v6[*(int *)(v105 + 44)];
    *(void *)v64 = closure #1 in CRAttributedString.Runs<>.isUndlerline.getter;
    *((void *)v64 + 1) = 0;
    v65 = (BOOL (**)(unsigned __int8 *))&v6[*(int *)(v104 + 36)];
    char *v65 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v65[1] = 0;
    long long v66 = &v6[*(int *)(v110 + 44)];
    *(void *)long long v66 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((void *)v66 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    uint64_t v67 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    uint64_t result = specialized Collection.first.getter(v67);
    int64_t v68 = 0;
    char v69 = result & 1;
    uint64_t v70 = v67 + 56;
    uint64_t v71 = 1 << *(unsigned char *)(v67 + 32);
    if (v71 < 64) {
      uint64_t v72 = ~(-1 << v71);
    }
    else {
      uint64_t v72 = -1;
    }
    unint64_t v73 = v72 & *(void *)(v67 + 56);
    int64_t v74 = (unint64_t)(v71 + 63) >> 6;
    while (2)
    {
      if (v73)
      {
        unint64_t v75 = __clz(__rbit64(v73));
        v73 &= v73 - 1;
        unint64_t v76 = v75 | (v68 << 6);
LABEL_71:
        v69 &= *(unsigned char *)(*(void *)(v67 + 48) + v76);
        continue;
      }
      break;
    }
    int64_t v77 = v68 + 1;
    if (__OFADD__(v68, 1)) {
      goto LABEL_130;
    }
    if (v77 < v74)
    {
      unint64_t v78 = *(void *)(v70 + 8 * v77);
      ++v68;
      if (!v78)
      {
        int64_t v68 = v77 + 1;
        if (v77 + 1 >= v74) {
          goto LABEL_91;
        }
        unint64_t v78 = *(void *)(v70 + 8 * v68);
        if (!v78)
        {
          int64_t v68 = v77 + 2;
          if (v77 + 2 >= v74) {
            goto LABEL_91;
          }
          unint64_t v78 = *(void *)(v70 + 8 * v68);
          if (!v78)
          {
            int64_t v68 = v77 + 3;
            if (v77 + 3 >= v74) {
              goto LABEL_91;
            }
            unint64_t v78 = *(void *)(v70 + 8 * v68);
            if (!v78)
            {
              int64_t v68 = v77 + 4;
              if (v77 + 4 >= v74) {
                goto LABEL_91;
              }
              unint64_t v78 = *(void *)(v70 + 8 * v68);
              if (!v78)
              {
                int64_t v79 = v77 + 5;
                if (v79 >= v74) {
                  goto LABEL_91;
                }
                unint64_t v78 = *(void *)(v70 + 8 * v79);
                if (!v78)
                {
                  while (1)
                  {
                    int64_t v68 = v79 + 1;
                    if (__OFADD__(v79, 1)) {
                      break;
                    }
                    if (v68 >= v74) {
                      goto LABEL_91;
                    }
                    unint64_t v78 = *(void *)(v70 + 8 * v68);
                    ++v79;
                    if (v78) {
                      goto LABEL_90;
                    }
                  }
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
                  return result;
                }
                int64_t v68 = v79;
              }
            }
          }
        }
      }
LABEL_90:
      unint64_t v73 = (v78 - 1) & v78;
      unint64_t v76 = __clz(__rbit64(v78)) + (v68 << 6);
      goto LABEL_71;
    }
LABEL_91:
    swift_release();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v40)(v102, v7);
    if ((v69 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_95;
    }
    uint64_t v61 = v62;
    if (v62 != v106) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  v100 |= 4uLL;
LABEL_95:
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v80 = 0;
  while (2)
  {
    uint64_t v81 = v80 + 1;
    if (__OFADD__(v80, 1)) {
      goto LABEL_136;
    }
    v82 = v101;
    v17(v101, v109 + v108 * v80, v7);
    v17(v4, (uint64_t)v82, v7);
    v17(v6, (uint64_t)v4, v7);
    v83 = &v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>)
                     + 44)];
    *(void *)v83 = closure #1 in CRAttributedString.Runs<>.isStrikethrough.getter;
    *((void *)v83 + 1) = 0;
    v84 = (BOOL (**)(unsigned __int8 *))&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>)
                                                              + 36)];
    *v84 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v84[1] = 0;
    v85 = &v6[*(int *)(v110 + 44)];
    *(void *)v85 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((void *)v85 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    uint64_t v86 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    uint64_t result = specialized Collection.first.getter(v86);
    int64_t v87 = 0;
    char v88 = result & 1;
    uint64_t v89 = v86 + 56;
    uint64_t v90 = 1 << *(unsigned char *)(v86 + 32);
    if (v90 < 64) {
      uint64_t v91 = ~(-1 << v90);
    }
    else {
      uint64_t v91 = -1;
    }
    unint64_t v92 = v91 & *(void *)(v86 + 56);
    int64_t v93 = (unint64_t)(v90 + 63) >> 6;
    while (2)
    {
      if (v92)
      {
        unint64_t v94 = __clz(__rbit64(v92));
        v92 &= v92 - 1;
        unint64_t v95 = v94 | (v87 << 6);
LABEL_102:
        v88 &= *(unsigned char *)(*(void *)(v86 + 48) + v95);
        continue;
      }
      break;
    }
    int64_t v96 = v87 + 1;
    if (__OFADD__(v87, 1)) {
      goto LABEL_131;
    }
    if (v96 < v93)
    {
      unint64_t v97 = *(void *)(v89 + 8 * v96);
      ++v87;
      if (!v97)
      {
        int64_t v87 = v96 + 1;
        if (v96 + 1 >= v93) {
          goto LABEL_122;
        }
        unint64_t v97 = *(void *)(v89 + 8 * v87);
        if (!v97)
        {
          int64_t v87 = v96 + 2;
          if (v96 + 2 >= v93) {
            goto LABEL_122;
          }
          unint64_t v97 = *(void *)(v89 + 8 * v87);
          if (!v97)
          {
            int64_t v87 = v96 + 3;
            if (v96 + 3 >= v93) {
              goto LABEL_122;
            }
            unint64_t v97 = *(void *)(v89 + 8 * v87);
            if (!v97)
            {
              int64_t v87 = v96 + 4;
              if (v96 + 4 >= v93) {
                goto LABEL_122;
              }
              unint64_t v97 = *(void *)(v89 + 8 * v87);
              if (!v97)
              {
                int64_t v98 = v96 + 5;
                if (v98 >= v93) {
                  goto LABEL_122;
                }
                unint64_t v97 = *(void *)(v89 + 8 * v98);
                if (!v97)
                {
                  while (1)
                  {
                    int64_t v87 = v98 + 1;
                    if (__OFADD__(v98, 1)) {
                      goto LABEL_138;
                    }
                    if (v87 >= v93) {
                      goto LABEL_122;
                    }
                    unint64_t v97 = *(void *)(v89 + 8 * v87);
                    ++v98;
                    if (v97) {
                      goto LABEL_121;
                    }
                  }
                }
                int64_t v87 = v98;
              }
            }
          }
        }
      }
LABEL_121:
      unint64_t v92 = (v97 - 1) & v97;
      unint64_t v95 = __clz(__rbit64(v97)) + (v87 << 6);
      goto LABEL_102;
    }
LABEL_122:
    swift_release();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v40)(v101, v7);
    if ((v88 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return v100;
    }
    uint64_t v80 = v81;
    if (v81 != v106) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v41 = v100;
  return v41 | 8;
}

uint64_t Array<A>.allowedTextStyles.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
  MEMORY[0x270FA5388](v67);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v61 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v58 - v11;
  uint64_t v63 = *(void *)(a1 + 16);
  if (!v63)
  {
    uint64_t v57 = 13;
    return v57 | 2;
  }
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v13 = v8 + 16;
  uint64_t v14 = v15;
  uint64_t v66 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
  uint64_t v16 = *(void *)(v13 + 56);
  v64 = (void (**)(char *, uint64_t))(v13 - 8);
  uint64_t v65 = v16;
  uint64_t v60 = a1;
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  uint64_t v59 = 12;
  while (2)
  {
    uint64_t v18 = v66 + v65 * v17++;
    v14(v12, v18, v7);
    v14(v4, (uint64_t)v12, v7);
    v14(v6, (uint64_t)v4, v7);
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>);
    uint64_t v19 = &v6[*(int *)(v62 + 44)];
    *(void *)uint64_t v19 = closure #1 in CRAttributedString.Runs<>.supportsBold.getter;
    *((void *)v19 + 1) = 0;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>);
    uint64_t v21 = (BOOL (**)(unsigned __int8 *))&v6[*(int *)(v20 + 36)];
    *uint64_t v21 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v21[1] = 0;
    uint64_t v22 = &v6[*(int *)(v67 + 44)];
    *(void *)uint64_t v22 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((void *)v22 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    uint64_t v23 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    uint64_t result = specialized Collection.first.getter(v23);
    int64_t v25 = 0;
    char v26 = result & 1;
    uint64_t v27 = v23 + 56;
    uint64_t v28 = 1 << *(unsigned char *)(v23 + 32);
    if (v28 < 64) {
      uint64_t v29 = ~(-1 << v28);
    }
    else {
      uint64_t v29 = -1;
    }
    unint64_t v30 = v29 & *(void *)(v23 + 56);
    int64_t v31 = (unint64_t)(v28 + 63) >> 6;
    while (1)
    {
      if (v30)
      {
        unint64_t v32 = __clz(__rbit64(v30));
        v30 &= v30 - 1;
        unint64_t v33 = v32 | (v25 << 6);
        goto LABEL_8;
      }
      int64_t v34 = v25 + 1;
      if (__OFADD__(v25, 1))
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      if (v34 >= v31) {
        goto LABEL_28;
      }
      unint64_t v35 = *(void *)(v27 + 8 * v34);
      ++v25;
      if (!v35)
      {
        int64_t v25 = v34 + 1;
        if (v34 + 1 >= v31) {
          goto LABEL_28;
        }
        unint64_t v35 = *(void *)(v27 + 8 * v25);
        if (!v35)
        {
          int64_t v25 = v34 + 2;
          if (v34 + 2 >= v31) {
            goto LABEL_28;
          }
          unint64_t v35 = *(void *)(v27 + 8 * v25);
          if (!v35)
          {
            int64_t v25 = v34 + 3;
            if (v34 + 3 >= v31) {
              goto LABEL_28;
            }
            unint64_t v35 = *(void *)(v27 + 8 * v25);
            if (!v35)
            {
              int64_t v25 = v34 + 4;
              if (v34 + 4 >= v31) {
                goto LABEL_28;
              }
              unint64_t v35 = *(void *)(v27 + 8 * v25);
              if (!v35) {
                break;
              }
            }
          }
        }
      }
LABEL_27:
      unint64_t v30 = (v35 - 1) & v35;
      unint64_t v33 = __clz(__rbit64(v35)) + (v25 << 6);
LABEL_8:
      v26 |= *(unsigned char *)(*(void *)(v23 + 48) + v33);
    }
    int64_t v36 = v34 + 5;
    if (v36 < v31)
    {
      unint64_t v35 = *(void *)(v27 + 8 * v36);
      if (!v35)
      {
        while (1)
        {
          int64_t v25 = v36 + 1;
          if (__OFADD__(v36, 1)) {
            break;
          }
          if (v25 >= v31) {
            goto LABEL_28;
          }
          unint64_t v35 = *(void *)(v27 + 8 * v25);
          ++v36;
          if (v35) {
            goto LABEL_27;
          }
        }
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        return result;
      }
      int64_t v25 = v36;
      goto LABEL_27;
    }
LABEL_28:
    swift_release();
    int64_t v37 = *v64;
    (*v64)(v12, v7);
    if (v26)
    {
      if (v17 == v63)
      {
        uint64_t v59 = 13;
        break;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v38 = 0;
  while (2)
  {
    uint64_t v39 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      goto LABEL_67;
    }
    v40 = v61;
    v14(v61, v66 + v38 * v65, v7);
    v14(v4, (uint64_t)v40, v7);
    v14(v6, (uint64_t)v4, v7);
    uint64_t v41 = &v6[*(int *)(v62 + 44)];
    *(void *)uint64_t v41 = closure #1 in CRAttributedString.Runs<>.supportsItalic.getter;
    *((void *)v41 + 1) = 0;
    uint64_t v42 = (BOOL (**)(unsigned __int8 *))&v6[*(int *)(v20 + 36)];
    *uint64_t v42 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v42[1] = 0;
    uint64_t v43 = &v6[*(int *)(v67 + 44)];
    *(void *)uint64_t v43 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *((void *)v43 + 1) = 0;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
    uint64_t v44 = specialized Sequence<>.uniqueElements()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
    uint64_t result = specialized Collection.first.getter(v44);
    int64_t v45 = 0;
    char v46 = result & 1;
    uint64_t v47 = v44 + 56;
    uint64_t v48 = 1 << *(unsigned char *)(v44 + 32);
    if (v48 < 64) {
      uint64_t v49 = ~(-1 << v48);
    }
    else {
      uint64_t v49 = -1;
    }
    unint64_t v50 = v49 & *(void *)(v44 + 56);
    int64_t v51 = (unint64_t)(v48 + 63) >> 6;
    while (2)
    {
      if (v50)
      {
        unint64_t v52 = __clz(__rbit64(v50));
        v50 &= v50 - 1;
        unint64_t v53 = v52 | (v45 << 6);
LABEL_38:
        v46 |= *(unsigned char *)(*(void *)(v44 + 48) + v53);
        continue;
      }
      break;
    }
    int64_t v54 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      goto LABEL_66;
    }
    if (v54 < v51)
    {
      unint64_t v55 = *(void *)(v47 + 8 * v54);
      ++v45;
      if (!v55)
      {
        int64_t v45 = v54 + 1;
        if (v54 + 1 >= v51) {
          goto LABEL_58;
        }
        unint64_t v55 = *(void *)(v47 + 8 * v45);
        if (!v55)
        {
          int64_t v45 = v54 + 2;
          if (v54 + 2 >= v51) {
            goto LABEL_58;
          }
          unint64_t v55 = *(void *)(v47 + 8 * v45);
          if (!v55)
          {
            int64_t v45 = v54 + 3;
            if (v54 + 3 >= v51) {
              goto LABEL_58;
            }
            unint64_t v55 = *(void *)(v47 + 8 * v45);
            if (!v55)
            {
              int64_t v45 = v54 + 4;
              if (v54 + 4 >= v51) {
                goto LABEL_58;
              }
              unint64_t v55 = *(void *)(v47 + 8 * v45);
              if (!v55)
              {
                int64_t v56 = v54 + 5;
                if (v56 >= v51) {
                  goto LABEL_58;
                }
                unint64_t v55 = *(void *)(v47 + 8 * v56);
                if (!v55)
                {
                  while (1)
                  {
                    int64_t v45 = v56 + 1;
                    if (__OFADD__(v56, 1)) {
                      goto LABEL_69;
                    }
                    if (v45 >= v51) {
                      goto LABEL_58;
                    }
                    unint64_t v55 = *(void *)(v47 + 8 * v45);
                    ++v56;
                    if (v55) {
                      goto LABEL_57;
                    }
                  }
                }
                int64_t v45 = v56;
              }
            }
          }
        }
      }
LABEL_57:
      unint64_t v50 = (v55 - 1) & v55;
      unint64_t v53 = __clz(__rbit64(v55)) + (v45 << 6);
      goto LABEL_38;
    }
LABEL_58:
    swift_release();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v37)(v61, v7);
    if ((v46 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return v59;
    }
    uint64_t v38 = v39;
    if (v39 != v63) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v57 = v59;
  return v57 | 2;
}

id CRAttributedString.Attributes<>.fontSize.getter()
{
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (v3 == 1)
  {
    if (one-time initialization token for textBoxDefaultFont != -1) {
      swift_once();
    }
    id result = objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_pointSize);
    if ((~*(void *)&v1 & 0x7FF0000000000000) != 0)
    {
      if (v1 > -9.22337204e18)
      {
        if (v1 < 9.22337204e18) {
          return (id)(uint64_t)v1;
        }
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  id result = (id)outlined consume of Font?(v2, v3);
  if ((~LODWORD(v4) & 0x7F800000) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v4 <= -9.2234e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v4 < 9.2234e18) {
    return (id)(uint64_t)v4;
  }
LABEL_17:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute);
  }
  return result;
}

unint64_t CRAttributedString.Attributes<>.textStyles.getter()
{
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (v5 == 1)
  {
    uint64_t v0 = 0;
  }
  else
  {
    swift_beginAccess();
    uint64_t v1 = static Font.Traits.bold;
    outlined consume of Font?(v4, v5);
    uint64_t v0 = (v1 & ~v6) == 0;
  }
  swift_getKeyPath();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (v5 != 1)
  {
    swift_beginAccess();
    uint64_t v2 = static Font.Traits.italic;
    outlined consume of Font?(v4, v5);
    if ((v2 & ~v6) == 0) {
      v0 |= 2uLL;
    }
  }
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  return v0 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 1)) & 0xF7 | (8 * (v4 & 1));
}

uint64_t outlined consume of Font?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute);
  }
  return result;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

{
  return (*(unsigned char *)(a1 + 4) & 1) == 0;
}

{
  uint64_t v2;

  uint64_t v2 = type metadata accessor for CRAsset();
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2) != 1;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = a1[1];
  if (result)
  {
    *a2 = *a1;
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  if (*(unsigned char *)(result + 4)) {
    __break(1u);
  }
  else {
    *a2 = *(_DWORD *)result;
  }
  return result;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(unsigned __int8 *a1)
{
  return *a1 != 2;
}

unsigned __int8 *specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 2) {
    __break(1u);
  }
  else {
    *a2 = v2 & 1;
  }
  return result;
}

char *AttributeStylingControl.init(contentInsets:useCompactStyle:)(char a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabel;
  id v12 = objc_allocWithZone(MEMORY[0x263F828E0]);
  uint64_t v13 = v5;
  *(void *)&v5[v11] = objc_msgSend(v12, sel_init);
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView;
  *(void *)&v13[v14] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_init);
  uint64_t v15 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton;
  *(void *)&v13[v15] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824E8]), sel_init);
  uint64_t v16 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentStackView;
  *(void *)&v13[v16] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  uint64_t v17 = *MEMORY[0x263F83570];
  double v18 = *MEMORY[0x263F81840];
  uint64_t v19 = (void *)*MEMORY[0x263F83470];
  uint64_t v20 = self;
  id v21 = v19;
  id v22 = objc_msgSend(v20, sel_traitCollectionWithPreferredContentSizeCategory_, v21);
  uint64_t result = (char *)objc_msgSend(self, sel__preferredFontForTextStyle_weight_, v17, v18);
  if (result)
  {
    uint64_t v24 = result;
    uint64_t v25 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabelFont;
    id v26 = objc_msgSend(result, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v22);

    *(void *)&v13[v25] = v26;
    uint64_t v27 = &v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title];
    *(void *)uint64_t v27 = 0;
    *((void *)v27 + 1) = 0;
    *(void *)&v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font] = 0;
    *(void *)&v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = 0;
    v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_wantsCapsuleCornerStyle] = 0;
    uint64_t v28 = (double *)&v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentInsets];
    double *v28 = a2;
    v28[1] = a3;
    void v28[2] = a4;
    v28[3] = a5;
    v13[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle] = a1 & 1;

    v92.receiver = v13;
    v92.super_class = (Class)type metadata accessor for AttributeStylingControl();
    uint64_t v29 = (char *)objc_msgSendSuper2(&v92, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    uint64_t v30 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton;
    int64_t v31 = *(void **)&v29[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton];
    unint64_t v32 = v29;
    objc_msgSend(v31, sel_setUserInteractionEnabled_, 1);
    objc_msgSend(v31, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v32, sel_addSubview_, v31);
    id v91 = self;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_20C8344C0;
    id v34 = objc_msgSend(v31, sel_topAnchor);
    id v35 = objc_msgSend(v32, sel_topAnchor);
    id v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v35);

    *(void *)(v33 + 32) = v36;
    id v37 = objc_msgSend(*(id *)&v29[v30], sel_leadingAnchor);
    id v38 = objc_msgSend(v32, sel_leadingAnchor);
    id v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v38);

    *(void *)(v33 + 40) = v39;
    id v40 = objc_msgSend(*(id *)&v29[v30], sel_bottomAnchor);
    id v41 = objc_msgSend(v32, sel_bottomAnchor);
    id v42 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v41);

    *(void *)(v33 + 48) = v42;
    id v43 = objc_msgSend(*(id *)&v29[v30], sel_trailingAnchor);
    id v44 = objc_msgSend(v32, (SEL)&selRef_setCornerCurve_ + 4);
    id v45 = objc_msgSend(v43, sel_constraintEqualToAnchor_, v44);

    *(void *)(v33 + 56) = v45;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v91, sel_activateConstraints_, isa);

    id v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
    objc_msgSend(v47, sel_setUserInteractionEnabled_, 0);
    objc_msgSend(v47, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    uint64_t v48 = *(void **)&v29[v30];
    objc_msgSend(v48, sel_addSubview_, v47);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_20C8344C0;
    id v50 = objc_msgSend(v47, sel_topAnchor);
    id v51 = objc_msgSend(v48, sel_topAnchor);
    unint64_t v52 = (double *)&v32[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentInsets];
    id v53 = objc_msgSend(v50, sel_constraintEqualToAnchor_constant_, v51, *(double *)&v32[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentInsets]);

    *(void *)(v49 + 32) = v53;
    id v54 = objc_msgSend(v47, sel_leadingAnchor);
    id v55 = objc_msgSend(*(id *)&v29[v30], sel_leadingAnchor);
    id v56 = objc_msgSend(v54, sel_constraintEqualToAnchor_constant_, v55, v52[1]);

    *(void *)(v49 + 40) = v56;
    id v57 = objc_msgSend(v47, sel_bottomAnchor);
    id v58 = objc_msgSend(*(id *)&v29[v30], sel_bottomAnchor);
    id v59 = objc_msgSend(v57, sel_constraintEqualToAnchor_constant_, v58, -v52[2]);

    *(void *)(v49 + 48) = v59;
    id v60 = objc_msgSend(v47, sel_trailingAnchor);
    id v61 = objc_msgSend(*(id *)&v29[v30], sel_trailingAnchor);
    id v62 = objc_msgSend(v60, sel_constraintEqualToAnchor_constant_, v61, -v52[3]);

    *(void *)(v49 + 56) = v62;
    specialized Array._endMutation()();
    Class v63 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v91, sel_activateConstraints_, v63);

    uint64_t v64 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentStackView;
    uint64_t v65 = *(void **)&v32[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentStackView];
    objc_msgSend(v65, sel_setAxis_, 0);
    objc_msgSend(v65, sel_setAlignment_, 3);
    objc_msgSend(v65, sel_setDistribution_, 0);
    objc_msgSend(v65, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v47, sel_addSubview_, v65);
    uint64_t v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_20C8344C0;
    id v67 = objc_msgSend(v65, sel_centerXAnchor);
    id v68 = objc_msgSend(v47, sel_centerXAnchor);
    id v69 = objc_msgSend(v67, sel_constraintEqualToAnchor_, v68);

    *(void *)(v66 + 32) = v69;
    id v70 = objc_msgSend(*(id *)&v32[v64], sel_centerYAnchor);
    id v71 = objc_msgSend(v47, sel_centerYAnchor);
    id v72 = objc_msgSend(v70, sel_constraintEqualToAnchor_, v71);

    *(void *)(v66 + 40) = v72;
    id v73 = objc_msgSend(*(id *)&v32[v64], sel_leadingAnchor);
    id v74 = objc_msgSend(v47, sel_leadingAnchor);
    id v75 = objc_msgSend(v73, sel_constraintGreaterThanOrEqualToAnchor_, v74);

    *(void *)(v66 + 48) = v75;
    id v76 = objc_msgSend(*(id *)&v32[v64], sel_trailingAnchor);
    id v77 = objc_msgSend(v47, sel_trailingAnchor);
    id v78 = objc_msgSend(v76, sel_constraintLessThanOrEqualToAnchor_, v77);

    *(void *)(v66 + 56) = v78;
    specialized Array._endMutation()();
    Class v79 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v91, sel_activateConstraints_, v79);

    uint64_t v80 = *(void **)&v32[v64];
    uint64_t v81 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView;
    objc_msgSend(v80, sel_addArrangedSubview_, *(void *)&v32[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView]);
    v82 = *(void **)&v32[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabel];
    objc_msgSend(v80, sel_addArrangedSubview_, v82);
    objc_msgSend(v82, sel_setNumberOfLines_, 1);
    objc_msgSend(v82, sel_setLineBreakMode_, 4);
    uint64_t v83 = one-time initialization token for titleLabelTextColor;
    id v84 = v82;
    if (v83 != -1) {
      swift_once();
    }
    objc_msgSend(v84, sel_setTextColor_, static AttributeStylingControl.titleLabelTextColor);

    v85 = *(void **)&v32[v81];
    LODWORD(v86) = 1148846080;
    objc_msgSend(v85, sel_setContentHuggingPriority_forAxis_, 1, v86);
    LODWORD(v87) = 1148846080;
    objc_msgSend(v85, sel_setContentHuggingPriority_forAxis_, 0, v87);
    LODWORD(v88) = 1148846080;
    objc_msgSend(v85, sel_setContentCompressionResistancePriority_forAxis_, 1, v88);
    LODWORD(v89) = 1148846080;
    objc_msgSend(v85, sel_setContentCompressionResistancePriority_forAxis_, 0, v89);
    AttributeStylingControl.updateUI()();
    id v90 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82A70]), sel_initWithDelegate_, v32);
    objc_msgSend(v32, sel_addInteraction_, v90);

    return v32;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributeStylingControl.updateUI()()
{
  objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton), sel_setEnabled_, objc_msgSend(v0, sel_isEnabled));
  uint64_t v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabel);
  int v2 = (void *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title);
  objc_msgSend(v1, sel_setHidden_, *(void *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title + 8) == 0);
  uint64_t v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView);
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image;
  objc_msgSend(v3, sel_setHidden_, *(void *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image) == 0);
  uint64_t v5 = v2[1];
  if (v5)
  {
    uint64_t v6 = *v2;
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)MEMORY[0x21054D080](v6, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  objc_msgSend(v1, sel_setText_, v7);

  uint64_t v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font);
  if (v8)
  {
    id v9 = *(id *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font);
  }
  else
  {
    id v9 = *(id *)((char *)v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabelFont);
    uint64_t v8 = 0;
  }
  id v10 = v8;
  objc_msgSend(v1, sel_setFont_, v9);

  if (*(void *)((char *)v0 + v4)) {
    id v11 = objc_msgSend(v3, sel_setImage_);
  }
  id v12 = (void *)MEMORY[0x263F8EED0];
  uint64_t v13 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v0) + 0x120))(v11);
  objc_msgSend(v0, sel_setBackgroundColor_, v13);

  uint64_t v14 = *(uint64_t (**)(void))((*v12 & *v0) + 0x118);
  return v14();
}

id one-time initialization function for titleLabelTextColor()
{
  id result = objc_msgSend(self, sel_secondaryLabelColor);
  static AttributeStylingControl.titleLabelTextColor = (uint64_t)result;
  return result;
}

Swift::Void __swiftcall AttributeStylingControl.layoutSubviews()()
{
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for AttributeStylingControl();
  objc_msgSendSuper2(&v5, sel_layoutSubviews);
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_wantsCapsuleCornerStyle;
  objc_msgSend(v0, sel_setClipsToBounds_, v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_wantsCapsuleCornerStyle]);
  double v2 = 0.0;
  if (v0[v1] == 1)
  {
    objc_msgSend(v0, sel_bounds);
    double v2 = CGRectGetHeight(v6) * 0.5;
  }
  id v3 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v3, sel_setCornerRadius_, v2);

  id v4 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton], sel_layer);
  objc_msgSend(v4, sel_setCornerRadius_, v2);
}

uint64_t AttributeStylingControl.addTarget(_:action:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CGRect v6 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton);
  outlined init with copy of Any?(a1, (uint64_t)v15);
  uint64_t v7 = v16;
  if (v16)
  {
    uint64_t v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
    uint64_t v9 = *(void *)(v7 - 8);
    double v10 = MEMORY[0x270FA5388](v8);
    id v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v13 = 0;
  }
  objc_msgSend(v6, sel_addTarget_action_forControlEvents_, v13, a2, a3);
  return swift_unknownObjectRelease();
}

uint64_t AttributeStylingControl.removeTarget(_:action:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CGRect v6 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton);
  outlined init with copy of Any?(a1, (uint64_t)v15);
  uint64_t v7 = v16;
  if (v16)
  {
    uint64_t v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
    uint64_t v9 = *(void *)(v7 - 8);
    double v10 = MEMORY[0x270FA5388](v8);
    id v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v13 = 0;
  }
  objc_msgSend(v6, sel_removeTarget_action_forControlEvents_, v13, a2, a3);
  return swift_unknownObjectRelease();
}

id @objc AttributeStylingControl.isSelected.getter(void *a1, uint64_t a2, SEL *a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for AttributeStylingControl();
  return objc_msgSendSuper2(&v5, *a3);
}

void @objc AttributeStylingControl.isSelected.setter(void *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  v8.receiver = a1;
  v8.super_class = (Class)type metadata accessor for AttributeStylingControl();
  CGRect v6 = *a4;
  id v7 = v8.receiver;
  objc_msgSendSuper2(&v8, v6, a3);
  AttributeStylingControl.updateUI()();
}

Swift::Void __swiftcall AttributeStylingControl.updateTintColor()()
{
  objc_msgSend(v0, sel_setTintColor_, 0);
}

UIColor_optional __swiftcall AttributeStylingControl.resolvedBackgroundColor()()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle);
  double v2 = self;
  uint64_t v3 = &selRef_quaternarySystemFillColor;
  if (!v1) {
    uint64_t v3 = &selRef_tertiarySystemFillColor;
  }
  id v4 = [v2 *v3];
  objc_super v5 = (objc_class *)v4;
  result.value.super.Class isa = v5;
  result.is_nil = v6;
  return result;
}

id AttributeStylingControl.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AttributeStylingControl();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AttributeStylingControl()
{
  return self;
}

void closure #1 in AttributeStylingControl.pointerInteraction(_:willEnter:animator:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_view);
  if (v1)
  {
    objc_super v2 = v1;
    id v3 = objc_msgSend(self, sel_opaqueSeparatorColor);
    objc_msgSend(v2, sel_setBackgroundColor_, v3);
  }
}

void closure #1 in AttributeStylingControl.pointerInteraction(_:willExit:animator:)(void *a1, void *a2)
{
  id v3 = objc_msgSend(a1, sel_view);
  if (v3)
  {
    id v4 = v3;
    id v5 = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a2) + 0x120))();
    objc_msgSend(v4, sel_setBackgroundColor_, v5);
  }
}

uint64_t sub_20C4456D4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in AttributeStylingControl.pointerInteraction(_:willExit:animator:)()
{
  closure #1 in AttributeStylingControl.pointerInteraction(_:willExit:animator:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t sub_20C445734()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in AttributeStylingControl.pointerInteraction(_:willEnter:animator:)()
{
  closure #1 in AttributeStylingControl.pointerInteraction(_:willEnter:animator:)(*(void **)(v0 + 16));
}

void specialized AttributeStylingControl.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabel;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentButton;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824E8]), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_contentStackView;
  *(void *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  uint64_t v5 = *MEMORY[0x263F83570];
  double v6 = *MEMORY[0x263F81840];
  id v7 = (void *)*MEMORY[0x263F83470];
  objc_super v8 = self;
  id v9 = v7;
  id v10 = objc_msgSend(v8, sel_traitCollectionWithPreferredContentSizeCategory_, v9);
  id v11 = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, v5, v6);
  if (!v11) {
    __break(1u);
  }
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabelFont;
  uint64_t v13 = v11;
  id v14 = objc_msgSend(v11, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v10);

  *(void *)&v0[v12] = v14;
  uint64_t v15 = &v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title];
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_wantsCapsuleCornerStyle] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

float *specialized TextFormattingState.update(from:shouldUseStyle:)(float *result, char a2)
{
  uint64_t v4 = result;
  uint64_t v5 = *((void *)result + 3);
  if (v5)
  {
    uint64_t v6 = *((void *)result + 2);
    swift_getKeyPath();
  }
  else
  {
    uint64_t v5 = *((void *)result + 1);
    if (!v5) {
      goto LABEL_6;
    }
    uint64_t v6 = *(void *)result;
    swift_getKeyPath();
  }
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  swift_bridgeObjectRetain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(void *)(v2 + 96) = v6;
  *(void *)(v2 + 104) = v5;
  *(unsigned char *)(v2 + 112) = 0;
  swift_bridgeObjectRelease();
  MiniMenuState._fontName.didset();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  UIColor_optional result = (float *)swift_release();
LABEL_6:
  if ((a2 & 1) == 0) {
    return result;
  }
  float v7 = v4[8];
  if ((~LODWORD(v7) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v7 <= -9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v7 >= 9.2234e18)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v8 = (uint64_t)v7;
  swift_getKeyPath();
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(void *)(v2 + 120) = v8;
  *(unsigned char *)(v2 + 128) = 0;
  MiniMenuState._fontSize.didset();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v9 = *((void *)v4 + 5);
  swift_beginAccess();
  LOBYTE(v8) = (static Font.Traits.bold & ~v9) == 0;
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(unsigned char *)(v2 + 129) = v8;
  *(unsigned char *)(v2 + 130) = 0;
  MiniMenuState._bold.didset();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  LOBYTE(v9) = (static Font.Traits.italic & ~v9) == 0;
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(unsigned char *)(v2 + 131) = v9;
  *(unsigned char *)(v2 + 132) = 0;
  MiniMenuState._italic.didset();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  return (float *)swift_release();
}

uint64_t MiniTextButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v63 = a1;
  uint64_t v3 = type metadata accessor for PopoverAttachmentAnchor();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v67 = v3;
  uint64_t v68 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v66 = (uint64_t *)((char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  uint64_t v57 = v7;
  MEMORY[0x270FA5388](v6);
  id v55 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.allowsSecureDrawing()>>.0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  uint64_t v60 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v65 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v61 = v12;
  uint64_t v62 = v13;
  MEMORY[0x270FA5388](v12);
  id v58 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v69 = v1[1];
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  id v53 = (void (*)(uint64_t *, void, uint64_t))*((void *)&v78 + 1);
  uint64_t v54 = v78;
  LODWORD(v52) = v79;
  uint64_t v15 = (_OWORD *)swift_allocObject();
  long long v16 = v2[1];
  v15[1] = *v2;
  v15[2] = v16;
  long long v17 = v2[3];
  void v15[3] = v2[2];
  v15[4] = v17;
  long long v69 = 0uLL;
  LOBYTE(v70) = 1;
  outlined retain of MiniTextButton((uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGSize?);
  State.init(wrappedValue:)();
  long long v18 = v78;
  char v19 = v79;
  uint64_t v20 = *((void *)&v79 + 1);
  type metadata accessor for MiniPopoverState();
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState, (void (*)(uint64_t))type metadata accessor for MiniPopoverState);
  uint64_t v21 = EnvironmentObject.init()();
  uint64_t v23 = v22;
  uint64_t v24 = static VerticalAlignment.firstTextBaseline.getter();
  long long v78 = v18;
  LOBYTE(v79) = v19;
  *((void *)&v79 + 1) = v20;
  *(void *)&long long v80 = v54;
  *((void *)&v80 + 1) = v53;
  LOBYTE(v81) = v52;
  *((void *)&v81 + 1) = v21;
  *(void *)&long long v82 = v23;
  *((void *)&v82 + 1) = closure #1 in MiniTextButton.body.getter;
  *(void *)&long long v83 = 0;
  *((void *)&v83 + 1) = partial apply for closure #2 in MiniTextButton.body.getter;
  *(void *)&long long v84 = v15;
  *((void *)&v84 + 1) = v24;
  *(void *)&long long v85 = closure #1 in MiniDivider.body.getter;
  *((void *)&v85 + 1) = 0;
  long long v77 = v2[2];
  State.projectedValue.getter();
  LODWORD(v51) = v70;
  uint64_t v25 = (_OWORD *)swift_allocObject();
  long long v26 = v2[1];
  v25[1] = *v2;
  v25[2] = v26;
  long long v27 = v2[3];
  v25[3] = v2[2];
  v25[4] = v27;
  outlined retain of MiniTextButton((uint64_t)v2);
  uint64_t v28 = static Anchor.Source<A>.bounds.getter();
  uint64_t v29 = v66;
  *uint64_t v66 = v28;
  LODWORD(v54) = *MEMORY[0x263F1A030];
  uint64_t v30 = *(void (**)(void))(v68 + 104);
  uint64_t v52 = v68 + 104;
  id v53 = (void (*)(uint64_t *, void, uint64_t))v30;
  v30(v29);
  long long v73 = v82;
  long long v74 = v83;
  long long v75 = v84;
  long long v76 = v85;
  long long v69 = v78;
  long long v70 = v79;
  long long v71 = v80;
  long long v72 = v81;
  *(void *)&long long v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier>);
  *((void *)&v49 + 1) = type metadata accessor for FontPicker(0);
  id v50 = (void *)lazy protocol witness table accessor for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>();
  uint64_t v31 = lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, (void (*)(uint64_t))type metadata accessor for FontPicker);
  unint64_t v32 = v55;
  uint64_t v33 = v66;
  View.popoverCore<A>(isPresented:attachmentAnchor:arrowEdges:isDetachable:content:)();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v34 = v67;
  id v35 = *(void (**)(uint64_t *, uint64_t))(v68 + 8);
  v68 += 8;
  id v51 = v35;
  v35(v33, v67);
  outlined release of ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier>((uint64_t)&v78);
  long long v69 = v49;
  *(void *)&long long v70 = v50;
  *((void *)&v70 + 1) = v31;
  id v50 = &opaque type descriptor for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v37 = v56;
  View.allowsSecureDrawing()();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v32, v37);
  long long v77 = v2[3];
  State.projectedValue.getter();
  LODWORD(v64) = v70;
  id v38 = (_OWORD *)swift_allocObject();
  long long v39 = v2[1];
  v38[1] = *v2;
  v38[2] = v39;
  long long v40 = v2[3];
  v38[3] = v2[2];
  v38[4] = v40;
  outlined retain of MiniTextButton((uint64_t)v2);
  uint64_t v41 = static Anchor.Source<A>.bounds.getter();
  id v42 = v66;
  *uint64_t v66 = v41;
  v53(v42, v54, v34);
  uint64_t v57 = type metadata accessor for ColorPickerRepresentable(0);
  *(void *)&long long v69 = v37;
  *((void *)&v69 + 1) = OpaqueTypeConformance2;
  *(void *)&long long v48 = swift_getOpaqueTypeConformance2();
  *((void *)&v48 + 1) = lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(&lazy protocol witness table cache variable for type ColorPickerRepresentable and conformance ColorPickerRepresentable, (void (*)(uint64_t))type metadata accessor for ColorPickerRepresentable);
  uint64_t v43 = v59;
  id v44 = v58;
  id v45 = v65;
  View.popoverCore<A>(isPresented:attachmentAnchor:arrowEdges:isDetachable:content:)();
  swift_release();
  swift_release();
  swift_release();
  v51(v42, v67);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v45, v43);
  *(void *)&long long v69 = v43;
  *((void *)&v69 + 1) = v57;
  long long v70 = v48;
  swift_getOpaqueTypeConformance2();
  uint64_t v46 = v61;
  View.allowsSecureDrawing()();
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v44, v46);
}

uint64_t closure #1 in MiniTextButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v27 = type metadata accessor for ContentShapeKinds();
  uint64_t v25 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v24 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = Image.init(systemName:)();
  id v9 = objc_msgSend(self, sel_labelColor);
  uint64_t v10 = MEMORY[0x21054A5D0](v9);
  uint64_t KeyPath = swift_getKeyPath();
  if (one-time initialization token for buttonFontSize != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  uint64_t v13 = static Font.system(size:weight:design:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for Font.Design?);
  uint64_t v14 = swift_getKeyPath();
  uint64_t v28 = v8;
  uint64_t v29 = KeyPath;
  uint64_t v30 = v10;
  uint64_t v31 = v14;
  uint64_t v32 = v13;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v23 = v8;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.accessibilityLabel(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v24;
  static ContentShapeKinds.interaction.getter();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>);
  uint64_t v17 = v26;
  long long v18 = (unsigned char *)(v26 + *(int *)(v16 + 36));
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContentShapeKindModifier<Circle>);
  uint64_t v20 = v25;
  uint64_t v21 = v27;
  (*(void (**)(unsigned char *, char *, uint64_t))(v25 + 16))(&v18[*(int *)(v19 + 40)], v15, v27);
  *long long v18 = 0;
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>((uint64_t)v7, v17);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v21);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
}

uint64_t closure #2 in MiniTextButton.body.getter(long long *a1)
{
  uint64_t v2 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextStyleSelector<MiniMenuState>);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v21 = *a1;
  uint64_t v5 = (uint64_t (*)())swift_allocObject();
  long long v6 = a1[1];
  *((_OWORD *)v5 + 1) = *a1;
  *((_OWORD *)v5 + 2) = v6;
  long long v7 = a1[3];
  *((_OWORD *)v5 + 3) = a1[2];
  *((_OWORD *)v5 + 4) = v7;
  uint64_t v8 = (uint64_t (*)())swift_allocObject();
  long long v9 = a1[1];
  *((_OWORD *)v8 + 1) = *a1;
  *((_OWORD *)v8 + 2) = v9;
  long long v10 = a1[3];
  *((_OWORD *)v8 + 3) = a1[2];
  *((_OWORD *)v8 + 4) = v10;
  char v18 = 0;
  outlined retain of MiniTextButton((uint64_t)a1);
  outlined retain of MiniTextButton((uint64_t)a1);
  outlined retain of ObservedObject<MiniMenuState>((uint64_t)&v21);
  State.init(wrappedValue:)();
  uint64_t v11 = v20;
  v4[16] = v19;
  *((void *)v4 + 3) = v11;
  char v18 = 0;
  State.init(wrappedValue:)();
  uint64_t v12 = v20;
  v4[32] = v19;
  *((void *)v4 + 5) = v12;
  uint64_t v13 = (uint64_t *)&v4[v2[11]];
  *uint64_t v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  *(void *)&v4[v2[12] + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v14 = (uint64_t (**)())&v4[v2[13]];
  uint64_t v15 = (uint64_t (**)())&v4[v2[14]];
  *(_OWORD *)uint64_t v4 = v21;
  *uint64_t v14 = partial apply for closure #1 in closure #2 in MiniTextButton.body.getter;
  v14[1] = v5;
  *uint64_t v15 = partial apply for closure #2 in closure #2 in MiniTextButton.body.getter;
  v15[1] = v8;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TextStyleSelector<MiniMenuState> and conformance TextStyleSelector<A>, &demangling cache variable for type metadata for TextStyleSelector<MiniMenuState>);
  View.allowsSecureDrawing()();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for TextStyleSelector<MiniMenuState>);
}

uint64_t closure #1 in closure #2 in MiniTextButton.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t closure #2 in closure #2 in MiniTextButton.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t closure #4 in MiniTextButton.body.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FontPicker(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  long long v7 = (void *)((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v20 = *a1;
  uint64_t v8 = (void *)*((void *)&v20 + 1);
  swift_getKeyPath();
  v19[3] = v8;
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v9 = v8[12];
  uint64_t v10 = v8[13];
  swift_bridgeObjectRetain();
  outlined release of ObservedObject<MiniMenuState>((uint64_t)&v20);
  swift_getKeyPath();
  v19[0] = v8;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v11 = v8[15];
  outlined release of ObservedObject<MiniMenuState>((uint64_t)&v20);
  uint64_t v12 = (void *)MEMORY[0x21054D080](v9, v10);
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(self, sel_fontDescriptorWithName_size_, v12, (double)v11);

  uint64_t v14 = (uint64_t (*)(uint64_t))swift_allocObject();
  long long v15 = a1[1];
  *((_OWORD *)v14 + 1) = *a1;
  *((_OWORD *)v14 + 2) = v15;
  long long v16 = a1[3];
  *((_OWORD *)v14 + 3) = a1[2];
  *((_OWORD *)v14 + 4) = v16;
  uint64_t *v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  swift_storeEnumTagMultiPayload();
  *(uint64_t *)((char *)v7 + *(int *)(v5 + 28)) = (uint64_t)v13;
  uint64_t v17 = (uint64_t (**)(uint64_t))((char *)v7 + *(int *)(v5 + 32));
  *uint64_t v17 = partial apply for closure #1 in closure #4 in MiniTextButton.body.getter;
  v17[1] = v14;
  outlined init with take of FontPicker((uint64_t)v7, a2);
  return outlined retain of MiniTextButton((uint64_t)a1);
}

uint64_t closure #1 in closure #4 in MiniTextButton.body.getter(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v3 = self;
  swift_retain();
  Font.init(_:)(&v6, (UIFont)objc_msgSend(v3, sel_fontWithDescriptor_size_, a1, 0.0, v5));
  specialized TextFormattingState.update(from:shouldUseStyle:)((float *)&v6, 0);
  outlined release of ObservedObject<MiniMenuState>((uint64_t)&v5);
  return outlined release of Font((uint64_t)&v6);
}

void closure #5 in MiniTextButton.body.getter(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v12 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  id v4 = *(id *)(*((void *)&v12 + 1) + 160);
  outlined release of ObservedObject<MiniMenuState>((uint64_t)&v12);
  long long v5 = (uint64_t (*)(void *))swift_allocObject();
  long long v6 = a1[1];
  *((_OWORD *)v5 + 1) = *a1;
  *((_OWORD *)v5 + 2) = v6;
  long long v7 = a1[3];
  *((_OWORD *)v5 + 3) = a1[2];
  *((_OWORD *)v5 + 4) = v7;
  *a2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = type metadata accessor for ColorPickerRepresentable(0);
  uint64_t v9 = (uint64_t (**)(void *))((char *)a2 + *(int *)(v8 + 20));
  uint64_t *v9 = partial apply for closure #1 in closure #5 in MiniTextButton.body.getter;
  v9[1] = v5;
  id v10 = objc_allocWithZone(MEMORY[0x263F825C8]);
  outlined retain of MiniTextButton((uint64_t)a1);
  id v11 = objc_msgSend(v10, sel_initWithCGColor_, v4);

  *(uint64_t *)((char *)a2 + *(int *)(v8 + 24)) = (uint64_t)v11;
}

uint64_t closure #1 in closure #5 in MiniTextButton.body.getter(void *a1, long long *a2)
{
  long long v6 = *a2;
  swift_retain();
  id v3 = objc_msgSend(a1, sel_CGColor);
  swift_getKeyPath();
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  id v4 = (CGColor *)v3;
  Color.cgColor.setter(v4);
  *(unsigned char *)(*((void *)&v6 + 1) + 168) = 0;
  swift_endAccess();

  MiniMenuState._fontColor.didset();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  return outlined release of ObservedObject<MiniMenuState>((uint64_t)&v6);
}

uint64_t protocol witness for View.body.getter in conformance MiniTextButton@<X0>(uint64_t a1@<X8>)
{
  return MiniTextButton.body.getter(a1);
}

uint64_t specialized MiniTextButton.init(state:isShowingTextStyleSelector:isShowingFontPopover:isShowingColorPopover:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MiniMenuState();
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
  uint64_t v2 = ObservedObject.init(wrappedValue:)();
  uint64_t v4 = v3;
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  return result;
}

uint64_t destroy for MiniTextButton()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MiniTextButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniTextButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MiniTextButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniTextButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniTextButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MiniTextButton()
{
  return &type metadata for MiniTextButton;
}

uint64_t associated type witness table accessor for View.Body : View in MiniTextButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #2 in MiniTextButton.body.getter()
{
  return closure #2 in MiniTextButton.body.getter((long long *)(v0 + 16));
}

uint64_t outlined retain of MiniTextButton(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #4 in MiniTextButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #4 in MiniTextButton.body.getter((long long *)(v1 + 16), a1);
}

uint64_t outlined release of ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier>(uint64_t a1)
{
  return a1;
}

void partial apply for closure #5 in MiniTextButton.body.getter(uint64_t *a1@<X8>)
{
  closure #5 in MiniTextButton.body.getter((long long *)(v1 + 16), a1);
}

uint64_t outlined release of ObservedObject<MiniMenuState>(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in closure #5 in MiniTextButton.body.getter(void *a1)
{
  return closure #1 in closure #5 in MiniTextButton.body.getter(a1, (long long *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #4 in MiniTextButton.body.getter(uint64_t a1)
{
  return closure #1 in closure #4 in MiniTextButton.body.getter(a1, (long long *)(v1 + 16));
}

uint64_t outlined init with take of FontPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FontPicker(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of Font(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in closure #2 in MiniTextButton.body.getter()
{
  return closure #1 in closure #2 in MiniTextButton.body.getter();
}

uint64_t objectdestroyTm_4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for closure #2 in closure #2 in MiniTextButton.body.getter()
{
  return closure #2 in closure #2 in MiniTextButton.body.getter();
}

uint64_t outlined retain of ObservedObject<MiniMenuState>(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C4479F4()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.allowsSecureDrawing()>>.0);
  type metadata accessor for ColorPickerRepresentable(255);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier>);
  type metadata accessor for FontPicker(255);
  lazy protocol witness table accessor for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, _ContentShapeKindModifier<Circle>>, <<opaque return type of View.allowsSecureDrawing()>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, (void (*)(uint64_t))type metadata accessor for FontPicker);
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState(&lazy protocol witness table cache variable for type ColorPickerRepresentable and conformance ColorPickerRepresentable, (void (*)(uint64_t))type metadata accessor for ColorPickerRepresentable);
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for SignatureLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C447B90);
}

uint64_t sub_20C447B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SignatureLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C447C10);
}

uint64_t sub_20C447C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SignatureLayout()
{
  uint64_t result = type metadata singleton initialization cache for SignatureLayout;
  if (!type metadata singleton initialization cache for SignatureLayout) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in SignatureLayout()
{
  return &protocol witness table for Signature;
}

void *SignatureLayout.createView<A>(in:canvas:parent:)(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v37[1] = a4;
  v37[2] = a5;
  id v38 = a1;
  id v39 = a3;
  id v40 = a2;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Signature>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  long long v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  long long v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  long long v20 = (char *)v37 - v19;
  (*(void (**)(char *, void, uint64_t, double))(v6 + 16))(v8, v37[0], v5, v18);
  uint64_t v21 = type metadata accessor for Signature();
  unint64_t v22 = lazy protocol witness table accessor for type Signature and conformance Signature();
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<Signature> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v41 = v21;
  unint64_t v42 = v22;
  uint64_t v43 = &protocol witness table for Signature;
  swift_getKeyPath();
  id v23 = v39;
  id v38 = v39;
  id v24 = v40;
  id v25 = v40;
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat x = v44.origin.x;
  CGFloat y = v44.origin.y;
  CGFloat width = v44.size.width;
  CGFloat height = v44.size.height;
  double MinX = CGRectGetMinX(v44);
  v45.origin.CGFloat x = x;
  v45.origin.CGFloat y = y;
  v45.size.CGFloat width = width;
  v45.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v45);
  v46.origin.CGFloat x = x;
  v46.origin.CGFloat y = y;
  v46.size.CGFloat width = width;
  v46.size.CGFloat height = height;
  double v32 = CGRectGetWidth(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  double v33 = CGRectGetHeight(v47);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, v13);
  id v34 = objc_allocWithZone((Class)type metadata accessor for SignatureView());
  id v35 = specialized SignatureView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v16, v24, v23, MinX, MinY, v32, v33);

  (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
  return v35;
}

unint64_t lazy protocol witness table accessor for type Ref<Signature> and conformance Ref<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Ref<Signature> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<Signature> and conformance Ref<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<Signature>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<Signature> and conformance Ref<A>);
  }
  return result;
}

uint64_t sub_20C448110()
{
  return 24;
}

__n128 sub_20C44811C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t BezierPath.init(path:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

uint64_t BezierPath.observableDifference(from:with:)()
{
  return 1;
}

uint64_t BezierPath.init(from:)@<X0>(CGPath **a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = type metadata accessor for ValueTypes_BezierPath();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (uint64_t *)((char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  dispatch thunk of CRDecoder.valueContainer()();
  if (v1) {
    return swift_release();
  }
  long long v70 = a1;
  uint64_t v8 = dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
  unint64_t v10 = v9;
  swift_release();
  uint64_t v65 = 0;
  long long v64 = 0u;
  long long v63 = 0u;
  outlined copy of Data._Representation(v8, v10);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (void (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath);
  Message.init(serializedData:extensions:partial:options:)();
  uint64_t v59 = v8;
  unint64_t v60 = v10;
  Mutable = CGPathCreateMutable();
  uint64_t v12 = *(void *)(*v6 + 16);
  uint64_t v58 = *v6;
  if (!v12)
  {
    swift_bridgeObjectRetain();
LABEL_43:
    swift_release();
    outlined consume of Data._Representation(v59, v60);
    swift_bridgeObjectRelease();
    uint64_t result = outlined destroy of ValueTypes_BezierPath((uint64_t)v6);
    *long long v70 = Mutable;
    return result;
  }
  uint64_t v13 = v6[1];
  uint64_t v14 = v13 + 32;
  p_b = &v69.b;
  p_tCGFloat x = &v69.tx;
  uint64_t v61 = v13;
  uint64_t v62 = *(void *)(v13 + 16);
  id v53 = &v68.b;
  uint64_t v52 = &v68.tx;
  uint64_t v57 = &v67.b;
  uint64_t v56 = &v67.tx;
  id v55 = &transform.b;
  uint64_t v54 = &transform.tx;
  uint64_t v15 = 0;
  long long v16 = (unsigned char *)(swift_bridgeObjectRetain() + 40);
  while (2)
  {
    if (*v16 != 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v44 = type metadata accessor for CRCodingError();
      lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, MEMORY[0x263F32D80]);
      swift_allocError();
      CGRect v46 = v45;
      unint64_t v47 = 0xD000000000000015;
      long long v48 = "Unknown path element.";
      goto LABEL_46;
    }
    switch(*((void *)v16 - 1))
    {
      case 1:
        uint64_t v21 = v15 + 2;
        if (__OFADD__(v15, 2)) {
          goto LABEL_51;
        }
        if (v62 < v21) {
          goto LABEL_45;
        }
        if (v15 < 0) {
          goto LABEL_52;
        }
        unint64_t v23 = *(void *)(v61 + 16);
        if (v15 >= v23) {
          goto LABEL_53;
        }
        if (v15 + 1 >= v23) {
          goto LABEL_54;
        }
        unint64_t v24 = *(void *)(v14 + 8 * v15);
        unint64_t v25 = *(void *)(v14 + 8 * (v15 + 1));
        uint64_t v26 = v57;
        CGFloat *v57 = 0.0;
        v26[1] = 0.0;
        v67.a = 1.0;
        v67.d = 1.0;
        uint64_t v27 = v56;
        CGFloat *v56 = 0.0;
        v27[1] = 0.0;
        CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(v25, v24), &v67);
        goto LABEL_7;
      case 2:
        uint64_t v21 = v15 + 4;
        if (__OFADD__(v15, 4)) {
          goto LABEL_55;
        }
        if (v62 < v21) {
          goto LABEL_45;
        }
        if (v15 < -2) {
          goto LABEL_56;
        }
        unint64_t v28 = *(void *)(v61 + 16);
        if (v15 + 2 >= v28) {
          goto LABEL_57;
        }
        if (v15 + 3 >= v28) {
          goto LABEL_58;
        }
        if (v15 >= v28) {
          goto LABEL_59;
        }
        if (v15 + 1 >= v28) {
          goto LABEL_60;
        }
        unint64_t v29 = *(void *)(v14 + 8 * (v15 + 2));
        unint64_t v30 = *(void *)(v14 + 8 * (v15 + 3));
        unint64_t v31 = *(void *)(v14 + 8 * v15);
        unint64_t v32 = *(void *)(v14 + 8 * (v15 + 1));
        double v33 = v53;
        *id v53 = 0.0;
        v33[1] = 0.0;
        v68.a = 1.0;
        v68.d = 1.0;
        id v34 = v52;
        *uint64_t v52 = 0.0;
        v34[1] = 0.0;
        CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(v30, v29), (CGPoint)__PAIR128__(v32, v31), &v68);
        goto LABEL_7;
      case 3:
        uint64_t v21 = v15 + 6;
        if (__OFADD__(v15, 6)) {
          goto LABEL_61;
        }
        if (v62 < v21) {
          goto LABEL_45;
        }
        if (v15 < -4) {
          goto LABEL_62;
        }
        unint64_t v35 = *(void *)(v61 + 16);
        if (v15 + 4 >= v35) {
          goto LABEL_63;
        }
        if (v15 + 5 >= v35) {
          goto LABEL_64;
        }
        if (v15 >= v35) {
          goto LABEL_65;
        }
        if (v15 + 1 >= v35) {
          goto LABEL_66;
        }
        if (v15 + 2 >= v35) {
          goto LABEL_67;
        }
        if (v15 + 3 >= v35) {
          goto LABEL_68;
        }
        unint64_t v36 = *(void *)(v14 + 8 * (v15 + 4));
        unint64_t v37 = *(void *)(v14 + 8 * (v15 + 5));
        unint64_t v38 = *(void *)(v14 + 8 * v15);
        unint64_t v39 = *(void *)(v14 + 8 * (v15 + 1));
        unint64_t v40 = *(void *)(v14 + 8 * (v15 + 2));
        unint64_t v41 = *(void *)(v14 + 8 * (v15 + 3));
        unint64_t v42 = p_b;
        CGFloat *p_b = 0.0;
        v42[1] = 0.0;
        v69.a = 1.0;
        v69.d = 1.0;
        uint64_t v43 = p_tx;
        *p_tCGFloat x = 0.0;
        v43[1] = 0.0;
        CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(v37, v36), (CGPoint)__PAIR128__(v39, v38), (CGPoint)__PAIR128__(v41, v40), &v69);
        goto LABEL_7;
      case 4:
        CGPathCloseSubpath(Mutable);
        goto LABEL_8;
      default:
        uint64_t v21 = v15 + 2;
        if (__OFADD__(v15, 2))
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          JUMPOUT(0x20C4488CCLL);
        }
        if (v62 >= v21)
        {
          if (v15 < 0) {
            goto LABEL_48;
          }
          unint64_t v22 = *(void *)(v61 + 16);
          if (v15 >= v22) {
            goto LABEL_49;
          }
          if (v15 + 1 >= v22) {
            goto LABEL_50;
          }
          unint64_t v17 = *(void *)(v14 + 8 * v15);
          unint64_t v18 = *(void *)(v14 + 8 * (v15 + 1));
          uint64_t v19 = v55;
          CGFloat *v55 = 0.0;
          v19[1] = 0.0;
          transform.a = 1.0;
          transform.d = 1.0;
          long long v20 = v54;
          CGFloat *v54 = 0.0;
          v20[1] = 0.0;
          CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(v18, v17), &transform);
LABEL_7:
          uint64_t v15 = v21;
LABEL_8:
          v16 += 16;
          if (!--v12) {
            goto LABEL_43;
          }
          continue;
        }
LABEL_45:
        swift_bridgeObjectRelease();
        uint64_t v44 = type metadata accessor for CRCodingError();
        lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, MEMORY[0x263F32D80]);
        swift_allocError();
        CGRect v46 = v45;
        unint64_t v47 = 0xD000000000000019;
        long long v48 = "Inconsistent point count.";
LABEL_46:
        *CGRect v45 = v47;
        v45[1] = (unint64_t)(v48 - 32) | 0x8000000000000000;
        (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v44 - 8) + 104))(v46, *MEMORY[0x263F32D70], v44);
        swift_willThrow();
        swift_release();

        outlined consume of Data._Representation(v59, v60);
        return outlined destroy of ValueTypes_BezierPath((uint64_t)v6);
    }
  }
}

uint64_t outlined destroy of ValueTypes_BezierPath(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ValueTypes_BezierPath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t BezierPath.encode(to:)()
{
  uint64_t v2 = type metadata accessor for ValueTypes_BezierPath();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (void *)((char *)aBlock - v6);
  uint64_t v8 = *v0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  void *v7 = MEMORY[0x263F8EE78];
  v7[1] = v9;
  UnknownStorage.init()();
  uint64_t NumberOfElements = CGPathGetNumberOfElements();
  uint64_t v11 = (void *)*v7;
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  void *v7 = v11;
  if (!isUniquelyReferenced_nonNull_native || NumberOfElements > v11[3] >> 1)
  {
    if (v11[2] <= NumberOfElements) {
      int64_t v13 = NumberOfElements;
    }
    else {
      int64_t v13 = v11[2];
    }
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 0, v11);
  }
  void *v7 = v11;
  uint64_t result = CGPathGetNumberOfPoints();
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t v15 = 2 * result;
  long long v16 = (void *)v7[1];
  unint64_t v17 = (void *)swift_isUniquelyReferenced_nonNull_native();
  v7[1] = v16;
  if (!v17 || v15 > v16[3] >> 1)
  {
    if (v16[2] <= v15) {
      int64_t v18 = v15;
    }
    else {
      int64_t v18 = v16[2];
    }
    long long v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17, v18, 0, v16);
  }
  v7[1] = v16;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v7;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = partial apply for closure #1 in BezierPath.encode(to:);
  *(void *)(v20 + 24) = v19;
  aBlock[4] = _sSPySo13CGPathElementVGIgy_ACIegy_TRTA_0;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  aBlock[3] = &block_descriptor_23;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v8, v21);
  _Block_release(v21);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v21) {
    goto LABEL_19;
  }
  outlined init with copy of ValueTypes_BezierPath((uint64_t)v7, (uint64_t)v4);
  lazy protocol witness table accessor for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath(&lazy protocol witness table cache variable for type ValueTypes_BezierPath and conformance ValueTypes_BezierPath, (void (*)(uint64_t))type metadata accessor for ValueTypes_BezierPath);
  uint64_t v22 = Message.serializedData(partial:)();
  unint64_t v24 = v23;
  outlined destroy of ValueTypes_BezierPath((uint64_t)v4);
  if (!v1)
  {
    Data.encode(to:)();
    outlined consume of Data._Representation(v22, v24);
  }
  outlined destroy of ValueTypes_BezierPath((uint64_t)v7);
  return swift_release();
}

uint64_t closure #1 in BezierPath.encode(to:)(uint64_t a1, uint64_t *a2)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      uint64_t v4 = (void *)*a2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (uint64_t)v4;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        *a2 = (uint64_t)v4;
      }
      unint64_t v7 = v4[2];
      unint64_t v6 = v4[3];
      unint64_t v8 = v7 + 1;
      if (v7 >= v6 >> 1)
      {
        unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
        unint64_t v8 = v7 + 1;
        uint64_t v4 = v42;
      }
      v4[2] = v8;
      uint64_t v9 = &v4[2 * v7];
      v9[4] = 0;
      *((unsigned char *)v9 + 40) = 1;
      goto LABEL_27;
    case 1:
      uint64_t v4 = (void *)*a2;
      char v27 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (uint64_t)v4;
      if ((v27 & 1) == 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        *a2 = (uint64_t)v4;
      }
      unint64_t v29 = v4[2];
      unint64_t v28 = v4[3];
      unint64_t v30 = v29 + 1;
      if (v29 >= v28 >> 1)
      {
        CGRect v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v4);
        unint64_t v30 = v29 + 1;
        uint64_t v4 = v45;
      }
      v4[2] = v30;
      unint64_t v31 = &v4[2 * v29];
      v31[4] = 1;
      *((unsigned char *)v31 + 40) = 1;
LABEL_27:
      *a2 = (uint64_t)v4;
      uint64_t v32 = **(void **)(a1 + 8);
      double v33 = (void *)a2[1];
      char v34 = swift_isUniquelyReferenced_nonNull_native();
      a2[1] = (uint64_t)v33;
      if ((v34 & 1) == 0)
      {
        double v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        a2[1] = (uint64_t)v33;
      }
      unint64_t v36 = v33[2];
      unint64_t v35 = v33[3];
      unint64_t v37 = v36 + 1;
      if (v36 >= v35 >> 1)
      {
        unint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v33);
        unint64_t v37 = v36 + 1;
        double v33 = v41;
      }
      v33[2] = v37;
      v33[v36 + 4] = v32;
      a2[1] = (uint64_t)v33;
      uint64_t v38 = *(void *)(*(void *)(a1 + 8) + 8);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      a2[1] = (uint64_t)v33;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36 + 2, 1, v33);
        double v33 = (void *)result;
        a2[1] = result;
      }
      unint64_t v40 = v33[2];
      unint64_t v39 = v33[3];
      if (v40 >= v39 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v33);
        double v33 = (void *)result;
      }
      v33[2] = v40 + 1;
      v33[v40 + 4] = v38;
      a2[1] = (uint64_t)v33;
      break;
    case 2:
      uint64_t v15 = (void *)*a2;
      char v16 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (uint64_t)v15;
      if ((v16 & 1) == 0)
      {
        uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        *a2 = (uint64_t)v15;
      }
      unint64_t v18 = v15[2];
      unint64_t v17 = v15[3];
      unint64_t v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v15);
        unint64_t v19 = v18 + 1;
        uint64_t v15 = v43;
      }
      v15[2] = v19;
      uint64_t v20 = &v15[2 * v18];
      v20[4] = 2;
      *((unsigned char *)v20 + 40) = 1;
      *a2 = (uint64_t)v15;
      uint64_t result = closure #1 in closure #1 in BezierPath.encode(to:)(*(uint64_t **)(a1 + 8), (uint64_t)a2);
      break;
    case 3:
      uint64_t v21 = (void *)*a2;
      char v22 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (uint64_t)v21;
      if ((v22 & 1) == 0)
      {
        uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        *a2 = (uint64_t)v21;
      }
      unint64_t v24 = v21[2];
      unint64_t v23 = v21[3];
      unint64_t v25 = v24 + 1;
      if (v24 >= v23 >> 1)
      {
        uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v21);
        unint64_t v25 = v24 + 1;
        uint64_t v21 = v44;
      }
      v21[2] = v25;
      uint64_t v26 = &v21[2 * v24];
      v26[4] = 3;
      *((unsigned char *)v26 + 40) = 1;
      *a2 = (uint64_t)v21;
      uint64_t result = closure #2 in closure #1 in BezierPath.encode(to:)(*(uint64_t **)(a1 + 8), (uint64_t)a2);
      break;
    case 4:
      unint64_t v10 = (void *)*a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a2 = (uint64_t)v10;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
        unint64_t v10 = (void *)result;
        *a2 = result;
      }
      unint64_t v13 = v10[2];
      unint64_t v12 = v10[3];
      if (v13 >= v12 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
        unint64_t v10 = (void *)result;
      }
      v10[2] = v13 + 1;
      uint64_t v14 = &v10[2 * v13];
      v14[4] = 4;
      *((unsigned char *)v14 + 40) = 1;
      *a2 = (uint64_t)v10;
      break;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x20C4490F4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in BezierPath.encode(to:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 8) = v5;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    uint64_t v5 = (void *)result;
    *(void *)(a2 + 8) = result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  unint64_t v9 = v8 + 1;
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v9;
  v5[v8 + 4] = v4;
  uint64_t v10 = a1[1];
  *(void *)(a2 + 8) = v5;
  unint64_t v11 = v5[3];
  unint64_t v12 = v8 + 2;
  if ((uint64_t)(v8 + 2) > (uint64_t)(v11 >> 1))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v8 + 2, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v12;
  v5[v9 + 4] = v10;
  uint64_t v13 = a1[2];
  *(void *)(a2 + 8) = v5;
  unint64_t v14 = v5[3];
  unint64_t v15 = v8 + 3;
  if ((uint64_t)(v8 + 3) > (uint64_t)(v14 >> 1))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v8 + 3, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v15;
  v5[v12 + 4] = v13;
  uint64_t v16 = a1[3];
  *(void *)(a2 + 8) = v5;
  unint64_t v17 = v5[3];
  if ((uint64_t)(v8 + 4) > (uint64_t)(v17 >> 1))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v8 + 4, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v8 + 4;
  v5[v15 + 4] = v16;
  *(void *)(a2 + 8) = v5;
  return result;
}

uint64_t closure #2 in closure #1 in BezierPath.encode(to:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 8) = v5;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    uint64_t v5 = (void *)result;
    *(void *)(a2 + 8) = result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  unint64_t v9 = v8 + 1;
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v9;
  v5[v8 + 4] = v4;
  uint64_t v10 = a1[1];
  *(void *)(a2 + 8) = v5;
  unint64_t v11 = v5[3];
  unint64_t v12 = v8 + 2;
  if ((uint64_t)(v8 + 2) > (uint64_t)(v11 >> 1))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v8 + 2, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v12;
  v5[v9 + 4] = v10;
  uint64_t v13 = a1[2];
  *(void *)(a2 + 8) = v5;
  unint64_t v14 = v5[3];
  unint64_t v15 = v8 + 3;
  if ((uint64_t)(v8 + 3) > (uint64_t)(v14 >> 1))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v8 + 3, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v15;
  v5[v12 + 4] = v13;
  uint64_t v16 = a1[3];
  *(void *)(a2 + 8) = v5;
  unint64_t v17 = v5[3];
  unint64_t v18 = v8 + 4;
  if ((uint64_t)(v8 + 4) > (uint64_t)(v17 >> 1))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v8 + 4, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v18;
  v5[v15 + 4] = v16;
  uint64_t v19 = a1[4];
  *(void *)(a2 + 8) = v5;
  unint64_t v20 = v5[3];
  unint64_t v21 = v8 + 5;
  if ((uint64_t)(v8 + 5) > (uint64_t)(v20 >> 1))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v8 + 5, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v21;
  v5[v18 + 4] = v19;
  uint64_t v22 = a1[5];
  *(void *)(a2 + 8) = v5;
  unint64_t v23 = v5[3];
  if ((uint64_t)(v8 + 6) > (uint64_t)(v23 >> 1))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v8 + 6, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v8 + 6;
  v5[v21 + 4] = v22;
  *(void *)(a2 + 8) = v5;
  return result;
}

uint64_t static BezierPath.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BezierPath()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

void protocol witness for CRType.observableDifference(from:with:) in conformance BezierPath(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance BezierPath@<X0>(CGPath **a1@<X8>)
{
  return BezierPath.init(from:)(a1);
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance BezierPath()
{
  return BezierPath.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance BezierPath()
{
  return MEMORY[0x270F17F70]();
}

uint64_t sub_20C449608()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in BezierPath.encode(to:)(uint64_t a1)
{
  return closure #1 in BezierPath.encode(to:)(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_20C449620()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sSPySo13CGPathElementVGIgy_ACIegy_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t outlined init with copy of ValueTypes_BezierPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ValueTypes_BezierPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for BezierPath()
{
  return &type metadata for BezierPath;
}

UIImage_optional __swiftcall ShapeOpacitySliderView.thumbImage(multiSelect:)(Swift::Bool multiSelect)
{
  if (*(void *)&v1[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_axis]) {
    double v2 = 37.0;
  }
  else {
    double v2 = 33.0;
  }
  if (multiSelect)
  {
    id v3 = objc_msgSend(self, sel_configurationWithPointSize_weight_, 3, v2 + -6.0);
    uint64_t v4 = (void *)MEMORY[0x21054D080](0x69632E73756E696DLL, 0xEC000000656C6372);
    id v5 = objc_msgSend(self, sel_systemImageNamed_, v4);

    if (v5)
    {
      id v6 = objc_msgSend(v5, sel_imageWithRenderingMode_, 2);

      id v5 = objc_msgSend(v6, sel_imageWithSymbolConfiguration_, v3);
    }
    objc_msgSend(v1, sel_value);
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithWhite_alpha_, fmax(1.0 - v7 + 0.2, 0.6), 1.0);
    objc_msgSend(v1, sel_setTintColor_, v8);
  }
  else
  {
    id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, v2, v2);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = 0x4004000000000000;
    *(void *)(v11 + 24) = v1;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 40) = 0;
    *(double *)(v11 + 48) = v2;
    *(double *)(v11 + 56) = v2;
    *(void *)(v11 + 64) = 0x4010000000000000;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = partial apply for closure #1 in ShapeOpacitySliderView.thumbImage(multiSelect:);
    *(void *)(v12 + 24) = v11;
    v17[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    v17[5] = v12;
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 1107296256;
    v17[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    v17[3] = &block_descriptor_24;
    uint64_t v13 = _Block_copy(v17);
    unint64_t v14 = v1;
    swift_retain();
    swift_release();
    id v5 = objc_msgSend(v10, sel_imageWithActions_, v13);

    _Block_release(v13);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t v16 = (objc_class *)swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
      goto LABEL_11;
    }
  }
  uint64_t v16 = (objc_class *)v5;
LABEL_11:
  result.value.super.Class isa = v16;
  result.is_nil = v9;
  return result;
}

void one-time initialization function for shortSliderLength()
{
  static ShapeOpacitySliderView.shortSliderLength = 0x406F400000000000;
}

id ShapeOpacitySliderView.init(axis:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_gradient;
  id v5 = objc_allocWithZone(MEMORY[0x263F157D0]);
  id v6 = v1;
  *(void *)&v1[v4] = objc_msgSend(v5, sel_init);
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_trackImage] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_axis] = a1;

  v16.receiver = v6;
  v16.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v8 = one-time initialization token for paperKitBundle;
  id v9 = v7;
  if (v8 != -1) {
    swift_once();
  }
  v17._object = (void *)0x800000020C855990;
  v10._uint64_t countAndFlagsBits = 0x7974696361704FLL;
  v10._object = (void *)0xE700000000000000;
  v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v17._uint64_t countAndFlagsBits = 0xD000000000000032;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v17)._countAndFlagsBits;
  unint64_t v14 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setAccessibilityLabel_, v14);

  return v9;
}

Swift::Void __swiftcall ShapeOpacitySliderView.didMoveToSuperview()()
{
  v30.receiver = v0;
  v30.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v30, sel_didMoveToSuperview);
  id v1 = objc_msgSend(v0, sel_superview);

  if (v1)
  {
    double v2 = self;
    id v3 = objc_msgSend(v2, sel_blackColor);
    id v4 = objc_msgSend(v3, sel_colorWithAlphaComponent_, 0.02);

    objc_msgSend(v0, sel_setBackgroundColor_, v4);
    id v5 = objc_msgSend(v0, sel_layer);
    objc_msgSend(v5, sel_setMasksToBounds_, 1);

    uint64_t v6 = OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_gradient;
    id v7 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_gradient];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_20C835740;
    id v9 = v7;
    id v10 = objc_msgSend(v2, sel_whiteColor);
    id v11 = objc_msgSend(v10, sel_CGColor);

    type metadata accessor for CGColorRef(0);
    uint64_t v13 = v12;
    *(void *)(v8 + 56) = v12;
    *(void *)(v8 + 32) = v11;
    id v14 = objc_msgSend(v2, sel_blackColor);
    id v15 = objc_msgSend(v14, sel_CGColor);

    *(void *)(v8 + 88) = v13;
    *(void *)(v8 + 64) = v15;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setColors_, isa);

    id v17 = objc_msgSend(v0, sel_traitCollection);
    id v18 = objc_msgSend(v17, sel_layoutDirection);

    if (v18 == (id)1) {
      double v19 = 1.0;
    }
    else {
      double v19 = 0.0;
    }
    if (v18 == (id)1) {
      double v20 = 0.0;
    }
    else {
      double v20 = 1.0;
    }
    objc_msgSend(*(id *)&v0[v6], sel_setStartPoint_, v19, 1.0);
    objc_msgSend(*(id *)&v0[v6], sel_setEndPoint_, v20, 1.0);
    id v21 = objc_msgSend(v0, sel_layer);
    objc_msgSend(v21, sel_insertSublayer_atIndex_, *(void *)&v0[v6], 0);

    id v22 = objc_msgSend(v0, sel_layer);
    id v23 = objc_msgSend(v2, sel_systemGrayColor);
    id v24 = objc_msgSend(v23, sel_colorWithAlphaComponent_, 0.2);

    id v25 = objc_msgSend(v24, sel_CGColor);
    objc_msgSend(v22, sel_setBorderColor_, v25);

    id v26 = objc_msgSend(v0, sel_layer);
    id v27 = objc_msgSend(v0, sel_traitCollection);
    objc_msgSend(v27, sel_displayScale);
    double v29 = v28;

    objc_msgSend(v26, sel_setBorderWidth_, 1.0 / v29);
  }
}

Swift::Void __swiftcall ShapeOpacitySliderView.layoutSubviews()()
{
  v25.receiver = v0;
  v25.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v25, sel_layoutSubviews);
  id v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setCornerRadius_, CGRectGetHeight(v26) * 0.5);

  id v2 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_gradient];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v2, sel_setFrame_);

  objc_msgSend(v0, sel_bounds);
  if (!CGRectIsEmpty(v27))
  {
    uint64_t v3 = OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_trackImage;
    id v4 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_trackImage];
    if (!v4
      || (objc_msgSend(v4, sel_size), double v6 = v5, v8 = v7, objc_msgSend(v0, sel_bounds), vabdd_f64(v6, v10) >= 0.001)
      || vabdd_f64(v8, v9) >= 0.001)
    {
      ShapeOpacitySliderView.makeTrackImage()();
      id v11 = *(void **)&v0[v3];
      *(void *)&v0[v3] = v12;

      objc_msgSend(v0, sel_setMinimumTrackImage_forState_, *(void *)&v0[v3], 0);
      objc_msgSend(v0, sel_setMaximumTrackImage_forState_, *(void *)&v0[v3], 0);
    }
  }
  if (*(void *)&v0[OBJC_IVAR____TtC8PaperKit22ShapeOpacitySliderView_axis] == 1)
  {
    CGAffineTransformMakeRotation(&t1, -1.57079633);
    long long v20 = *(_OWORD *)&t1.c;
    long long v21 = *(_OWORD *)&t1.a;
    tCGFloat x = t1.tx;
    tCGFloat y = t1.ty;
    objc_msgSend(v0, sel_bounds);
    CGAffineTransformMakeTranslation(&t1, v15 * 0.5 - v16 * 0.5, v16 * 0.5 - v15 * 0.5);
    long long v17 = *(_OWORD *)&t1.a;
    long long v18 = *(_OWORD *)&t1.c;
    long long v19 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v21;
    *(_OWORD *)&t1.c = v20;
    t1.tCGFloat x = tx;
    t1.tCGFloat y = ty;
    *(_OWORD *)&t2.a = v17;
    *(_OWORD *)&t2.c = v18;
    *(_OWORD *)&t2.tCGFloat x = v19;
    CGAffineTransformConcat(&v22, &t1, &t2);
    CGAffineTransform t1 = v22;
    objc_msgSend(v0, sel_setTransform_, &t1);
  }
}

void ShapeOpacitySliderView.makeTrackImage()()
{
  objc_msgSend(v0, sel_bounds);
  if (!CGRectIsEmpty(v14))
  {
    objc_msgSend(v0, sel_bounds);
    double v1 = CGRectGetHeight(v15) / 3.0;
    objc_msgSend(v0, sel_bounds);
    double v2 = floor(CGRectGetWidth(v16) / v1);
    if ((~*(void *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        if (v2 < 9.22337204e18)
        {
          uint64_t v3 = (uint64_t)v2;
          objc_msgSend(v0, sel_bounds);
          id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, v4, v5);
          id v7 = objc_msgSend(self, sel_blackColor);
          id v8 = objc_msgSend(v7, sel_colorWithAlphaComponent_, 0.15);

          uint64_t v9 = swift_allocObject();
          *(void *)(v9 + 16) = v8;
          *(void *)(v9 + 24) = 3;
          *(void *)(v9 + 32) = v3;
          *(double *)(v9 + 40) = v1;
          uint64_t v10 = swift_allocObject();
          *(void *)(v10 + 16) = partial apply for closure #1 in ShapeOpacitySliderView.makeTrackImage();
          *(void *)(v10 + 24) = v9;
          v13[4] = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
          v13[5] = v10;
          v13[0] = MEMORY[0x263EF8330];
          v13[1] = 1107296256;
          v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
          v13[3] = &block_descriptor_13_1;
          id v11 = _Block_copy(v13);
          id v12 = v8;
          swift_retain();
          swift_release();
          objc_msgSend(v6, sel_imageWithActions_, v11);

          _Block_release(v11);
          LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          swift_release();
          if ((v6 & 1) == 0) {
            return;
          }
LABEL_10:
          __break(1u);
          return;
        }
LABEL_9:
        __break(1u);
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
}

void closure #1 in ShapeOpacitySliderView.thumbImage(multiSelect:)(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGRect v16 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetLineWidth(v16, a3);

  long long v17 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  id v18 = objc_msgSend(self, sel_whiteColor);
  long long v19 = (CGColor *)objc_msgSend(v18, sel_CGColor);

  CGContextSetStrokeColorWithColor(v17, v19);
  objc_msgSend(a2, sel_value);
  CGFloat v21 = 1.0 - v20;
  CGAffineTransform v22 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  GenericGraCGFloat y = CGColorCreateGenericGray(v21, 1.0);
  CGContextSetFillColorWithColor(v22, GenericGray);

  id v24 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v27.origin.CGFloat x = a4;
  v27.origin.CGFloat y = a5;
  v27.size.CGFloat width = a6;
  v27.size.CGFloat height = a7;
  CGRect v28 = CGRectInset(v27, a8, a8);
  CGContextAddEllipseInRect(v24, v28);

  objc_super v25 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextDrawPath(v25, kCGPathFillStroke);
}

void closure #1 in ShapeOpacitySliderView.makeTrackImage()(void *a1, void *a2, uint64_t a3, uint64_t a4, CGFloat a5)
{
  uint64_t v10 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  id v11 = (CGColor *)objc_msgSend(a2, sel_CGColor);
  CGContextSetFillColorWithColor(v10, v11);

  if (a3 < 0) {
    goto LABEL_16;
  }
  if (a3)
  {
    if (a4 < 0)
    {
LABEL_17:
      __break(1u);
      return;
    }
    uint64_t v12 = 0;
    while (v12 != a3)
    {
      if (a4)
      {
        uint64_t v13 = 0;
        while (!__OFADD__(v12, v13))
        {
          if ((((_BYTE)v12 + (_BYTE)v13) & 1) == 0)
          {
            CGRect v14 = (CGContext *)objc_msgSend(a1, sel_CGContext);
            v15.origin.CGFloat x = (double)v13 * a5;
            v15.origin.CGFloat y = (double)v12 * a5;
            v15.size.CGFloat width = a5;
            v15.size.CGFloat height = a5;
            CGContextFillRect(v14, v15);
          }
          if (a4 == ++v13) {
            goto LABEL_5;
          }
        }
        __break(1u);
        break;
      }
LABEL_5:
      if (++v12 == a3) {
        return;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
}

uint64_t type metadata accessor for ShapeOpacitySliderView()
{
  return self;
}

uint64_t sub_20C44AAAC()
{
  return MEMORY[0x270FA0238](v0, 72, 7);
}

void partial apply for closure #1 in ShapeOpacitySliderView.thumbImage(multiSelect:)(void *a1)
{
  closure #1 in ShapeOpacitySliderView.thumbImage(multiSelect:)(a1, *(void **)(v1 + 24), *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56), *(CGFloat *)(v1 + 64));
}

uint64_t sub_20C44AAFC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t sub_20C44AB24()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in ShapeOpacitySliderView.makeTrackImage()(void *a1)
{
  closure #1 in ShapeOpacitySliderView.makeTrackImage()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(CGFloat *)(v1 + 40));
}

uint64_t sub_20C44AB6C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void CompactTextAlignmentControl.updateUI(selectedTextAlignmentDidChange:)(char a1)
{
  v14.receiver = v1;
  v14.super_class = (Class)swift_getObjectType();
  unsigned int v3 = objc_msgSendSuper2(&v14, sel_isHighlighted);
  double v4 = self;
  double v5 = &selRef_secondarySystemFillColor;
  if (!v3) {
    double v5 = &selRef_quaternarySystemFillColor;
  }
  id v6 = [v4 *v5];
  objc_msgSend(v1, sel_setBackgroundColor_, v6);

  if (a1)
  {
    if (v1[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment + 8])
    {
LABEL_5:
      unint64_t v7 = 0x800000020C850360;
      unint64_t v8 = 0xD000000000000010;
      goto LABEL_6;
    }
    unint64_t v8 = 0x696C612E74786574;
    uint64_t v13 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment];
    if (v13)
    {
      if (v13 == 3)
      {
        unint64_t v7 = 0xEC00000079666974;
        unint64_t v8 = 0x73756A2E74786574;
      }
      else
      {
        if (v13 != 2) {
          goto LABEL_5;
        }
        unint64_t v7 = 0xEF74686769726E67;
      }
    }
    else
    {
      unint64_t v7 = 0xEE007466656C6E67;
    }
LABEL_6:
    uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_imageView];
    id v10 = *(id *)&v1[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_symbolConfiguration];
    id v11 = (void *)MEMORY[0x21054D080](v8, v7);
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v11, v10);

    if (v12)
    {
      objc_msgSend(v9, sel_setImage_, v12);
    }
    else
    {
      __break(1u);
    }
  }
}

void CompactTextAlignmentControl.didTapSelf()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))&v0[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_viewControllerProvider])();
  if (v2)
  {
    unsigned int v3 = (void *)v2;
    type metadata accessor for TextAlignmentViewController();
    double v4 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    double v5 = *(char **)&v4[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_textAlignmentControl];
    char v6 = v0[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment + 8];
    unint64_t v7 = &v5[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment];
    *(void *)unint64_t v7 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment];
    v7[8] = v6;
    unint64_t v8 = v5;
    TextAlignmentControl.updateUI()();

    objc_msgSend(v4, sel_setModalPresentationStyle_, 7);
    id v9 = objc_msgSend(v4, sel_popoverPresentationController);
    if (v9)
    {
      id v10 = v9;
      objc_msgSend(v9, sel_setSourceView_, v1);
    }
    id v11 = objc_msgSend(v4, sel_popoverPresentationController);
    if (v11)
    {
      id v12 = v11;
      objc_msgSend(v1, sel_bounds);
      CGRect v23 = CGRectInset(v22, -2.0, -2.0);
      objc_msgSend(v12, sel_setSourceRect_, v23.origin.x, v23.origin.y, v23.size.width, v23.size.height);
    }
    id v13 = objc_msgSend(v4, sel_popoverPresentationController);
    if (v13)
    {
      objc_super v14 = v13;
      objc_msgSend(v13, sel_setDelegate_, v1);
    }
    id v15 = objc_msgSend(v4, sel_popoverPresentationController);
    if (v15)
    {
      CGRect v16 = v15;
      objc_msgSend(v15, sel__setIgnoresKeyboardNotifications_, 1);
    }
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v4;
    *(void *)(v17 + 24) = v1;
    v21[4] = partial apply for closure #1 in CompactTextAlignmentControl.didTapSelf();
    v21[5] = v17;
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 1107296256;
    v21[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v21[3] = &block_descriptor_25;
    id v18 = _Block_copy(v21);
    long long v19 = v4;
    id v20 = v1;
    swift_release();
    objc_msgSend(v3, sel_presentViewController_animated_completion_, v19, 1, v18);
    _Block_release(v18);
  }
}

uint64_t type metadata accessor for CompactTextAlignmentControl()
{
  return self;
}

uint64_t protocol witness for TextAlignmentWidget.selectedTextAlignment.getter in conformance CompactTextAlignmentControl()
{
  return *(void *)(v0 + OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment);
}

void protocol witness for TextAlignmentWidget.selectedTextAlignment.setter in conformance CompactTextAlignmentControl(uint64_t a1, char a2)
{
  uint64_t v3 = v2 + OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment;
  *(void *)uint64_t v3 = a1;
  *(unsigned char *)(v3 + 8) = a2 & 1;
  CompactTextAlignmentControl.updateUI(selectedTextAlignmentDidChange:)(1);
}

uint64_t sub_20C44B3B8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id partial apply for closure #1 in CompactTextAlignmentControl.didTapSelf()()
{
  return objc_msgSend(*(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_textAlignmentControl), sel_addTarget_action_forControlEvents_, *(void *)(v0 + 24), sel_textAlignmentValueDidChange_, 4096);
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

void specialized CompactTextAlignmentControl.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_imageView;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_init);
  uint64_t v2 = *MEMORY[0x263F83570];
  double v3 = *MEMORY[0x263F81840];
  double v4 = (void *)*MEMORY[0x263F83470];
  double v5 = self;
  id v6 = v4;
  id v7 = objc_msgSend(v5, sel_traitCollectionWithPreferredContentSizeCategory_, v6);
  id v8 = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, v2, v3);
  if (!v8) {
    __break(1u);
  }
  id v9 = v8;
  id v10 = objc_msgSend(v8, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v7);

  if (!v10) {
    __break(1u);
  }
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_symbolConfiguration;
  id v12 = objc_msgSend(self, sel_configurationWithFont_scale_, v10, 2);

  *(void *)&v0[v11] = v12;
  id v13 = &v0[OBJC_IVAR____TtC8PaperKit27CompactTextAlignmentControl_selectedTextAlignment];
  *(void *)id v13 = 0;
  v13[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t WeakTagged_3<>.docPage.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  return WeakTagged_3.tagged3.getter();
}

double SearchQueryResult.frame.getter()
{
  return *(double *)v0;
}

uint64_t (*PaperPage.frame.modify(void *a1, uint64_t a2, uint64_t a3))()
{
  id v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = PaperPage.frame.modify((uint64_t)v6, a2, a3);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t (*PaperPage.frame.modify(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  *(double *)a1 = (*(double (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*PaperPage.bounds.modify(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = PaperPage.bounds.modify((uint64_t)v6, a2, a3);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t (*PaperPage.bounds.modify(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  *(double *)a1 = (*(double (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  return UnknownCanvasElementView.flags.modify;
}

double PaperPage.rotation.getter()
{
  return 0.0;
}

uint64_t (*PaperPage.rotation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperPage.rotation.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

{
  *a1 = 0;
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperPage.updateFrom<A>(pdfPage:in:)()
{
  return protocol witness for CRValue.__hasDelta(from:) in conformance PKStrokeProperties();
}

{
  return protocol witness for CRValue.__hasDelta(from:) in conformance PKStrokeProperties();
}

uint64_t PaperPage.addDrawingAnnotation<A>(pdfPage:use:in:options:)()
{
  return PDFAnnotationElement.render<A>(in:id:capsule:options:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t PaperPage.addCanvasElement<A, B>(_:capsule:)@<X0>(uint64_t a1@<X8>)
{
  return PaperPage.addCanvasElement<A, B>(_:capsule:)(a1);
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t PaperPage.bounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

void PaperPage.axisAlignedRotationInDegrees.getter(uint64_t a1, uint64_t a2)
{
  double v2 = (*(double (**)(void))(a2 + 64))();
  double v3 = round((v2 + v2) / 3.14159265);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= 9.22337204e18) {
LABEL_7:
  }
    __break(1u);
}

void PaperPage.axisAlignedRotationInDegrees.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = round((double)a1 / 90.0) * 3.14159265 * 0.5;
  if (v5 >= 0.0) {
    double v6 = v5;
  }
  else {
    double v6 = v5 + 6.28318531;
  }
  double v7 = (*(double (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  v8.n128_f64[0] = fmod(v7 - v6, 6.28318531);
  if (v8.n128_f64[0] > 3.14159265) {
    v8.n128_f64[0] = v8.n128_f64[0] + -6.28318531;
  }
  if (v8.n128_f64[0] < -3.14159265) {
    v8.n128_f64[0] = v8.n128_f64[0] + 6.28318531;
  }
  if (fabs(v8.n128_f64[0]) > 0.01)
  {
    id v9 = *(void (**)(uint64_t, uint64_t, __n128))(a3 + 72);
    v8.n128_f64[0] = v6;
    v9(a2, a3, v8);
  }
}

PaperKit::TaggedPaperPage::Enum_optional __swiftcall TaggedPaperPage.Enum.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (PaperKit::TaggedPaperPage::Enum_optional)rawValue;
}

uint64_t TaggedPaperPage.Enum.rawValue.getter()
{
  return *v0;
}

PaperKit::TaggedPaperPage::Enum_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TaggedPaperPage.Enum(Swift::Int *a1)
{
  return TaggedPaperPage.Enum.init(rawValue:)(*a1);
}

uint64_t SharedTagged_3<>.paper.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  return MEMORY[0x270F177D8](v0);
}

uint64_t SharedTagged_3<>.image.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  return SharedTagged_3.tagged2.getter();
}

uint64_t SharedTagged_3<>.docPage.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  return MEMORY[0x270F177E8](v0);
}

uint64_t WeakTagged_3<>.paper.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  return MEMORY[0x270F17568](v0);
}

uint64_t WeakTagged_3<>.image.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  return WeakTagged_3.tagged2.getter();
}

unint64_t lazy protocol witness table accessor for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum;
  if (!lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum;
  if (!lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedPaperPage.Enum and conformance TaggedPaperPage.Enum);
  }
  return result;
}

uint64_t associated type witness table accessor for Tagged_3.Type1 : CRDT in TaggedPaperPage()
{
  return _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
}

uint64_t associated type witness table accessor for Tagged_3.Type2 : CRDT in TaggedPaperPage()
{
  return _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_2(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
}

uint64_t associated type witness table accessor for Tagged_3.Type3 : CRDT in TaggedPaperPage()
{
  return _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
}

uint64_t associated type witness table accessor for Tagged_3.Unknown : CRDT in TaggedPaperPage()
{
  return _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_2(&lazy protocol witness table cache variable for type UnknownPage and conformance UnknownPage, (void (*)(uint64_t))type metadata accessor for UnknownPage);
}

uint64_t _s8PaperKit0A0VAC9Coherence4CRDTAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_20C44BEDC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_20C44BEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnknownCanvasElementView.flags.modify(*(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_20C44BF20()
{
  return 16;
}

__n128 sub_20C44BF2C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_20C44BF38(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

void keypath_getTm_1(uint64_t a1@<X1>, uint64_t a2@<X2>, double (*a3)(void, void)@<X3>, uint64_t a4@<X8>)
{
  *(double *)a4 = a3(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *(void *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = v6;
  *(void *)(a4 + 24) = v7;
}

uint64_t sub_20C44BF8C()
{
  return 16;
}

__n128 sub_20C44BF98(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_20C44BFA4(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_20C44BFAC()
{
  return 16;
}

__n128 sub_20C44BFB8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for SearchQueryResult()
{
  return &type metadata for SearchQueryResult;
}

uint64_t dispatch thunk of PaperPage.frame.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PaperPage.frame.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PaperPage.bounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PaperPage.bounds.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PaperPage.bounds.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PaperPage.pdfContentsBounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PaperPage.rotation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PaperPage.rotation.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of PaperPage.rotation.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of PaperPage.pdfPageID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of PaperPage.setVellum<A>(opacity:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 96))();
}

uint64_t dispatch thunk of PaperPage.importElements<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 104))();
}

uint64_t dispatch thunk of PaperPage.importAnnotations<A>(from:scale:mediaBox:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 112))();
}

uint64_t dispatch thunk of PaperPage.createPageView<A>(id:in:pdfView:documentView:pdfPage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 120))();
}

uint64_t dispatch thunk of PaperPage.update<A>(pdfPage:id:use:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 128))();
}

uint64_t dispatch thunk of PaperPage.updateFrom<A>(pdfPage:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 136))();
}

uint64_t dispatch thunk of PaperPage.addDrawingAnnotation<A>(pdfPage:use:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a8 + 144) + **(int **)(a8 + 144));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of PaperPage.addCanvasElement<A, B>(_:capsule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 152))();
}

uint64_t dispatch thunk of PaperPage.shared(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of PaperPage.finishDecode(from:pageID:assetManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 168))();
}

uint64_t dispatch thunk of PaperPage.applyDifference<A>(id:in:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 176))();
}

uint64_t dispatch thunk of PaperPage.indexableTextContent<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 184))();
}

uint64_t dispatch thunk of PaperPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a9 + 192) + **(int **)(a9 + 192));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v9 + 16) = v17;
  *uint64_t v17 = v9;
  v17[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

ValueMetadata *type metadata accessor for TaggedPaperPage()
{
  return &type metadata for TaggedPaperPage;
}

unsigned char *storeEnumTagSinglePayload for TaggedPaperPage.Enum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C44C4ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TaggedPaperPage.Enum()
{
  return &type metadata for TaggedPaperPage.Enum;
}

Swift::OpaquePointer_optional __swiftcall LinkView.pasteboardRepresentation()()
{
  uint64_t v0 = 0;
  result.value._rawValue = v0;
  return result;
}

uint64_t LinkView.isSelected.setter(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit8LinkView_isSelected) = result;
  return result;
}

id LinkView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinkView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for LinkView()
{
  return self;
}

UIMenu closure #1 in LinkView.contextMenuInteraction(_:configurationForMenuAtLocation:)(uint64_t a1, UIMenuElementSize a2)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  swift__string._object = (void *)0x800000020C855B30;
  v3._uint64_t countAndFlagsBits = 0x7474412074696445;
  v3._object = (void *)0xEF746E656D686361;
  v4.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  swift__string._uint64_t countAndFlagsBits = 0xD000000000000022;
  Swift::String v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, swift__string);
  if ((unint64_t)a2 >> 62)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    swift_bridgeObjectRetain();
    uint64_t v8 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    a2 = v8;
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  v10.value.super.Class isa = 0;
  v10.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v6, (Swift::String_optional)0, v10, 0, 0xFFFFFFFFFFFFFFFFLL, a2, v9);
}

id specialized LinkView.contextMenuInteraction(_:configurationForMenuAtLocation:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit8LinkView_delegate;
  if (!MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit8LinkView_delegate)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  id v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 8))(v0, ObjectType, v2);
  swift_unknownObjectRelease();
  if (v4)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    Swift::String v6 = self;
    v9[4] = partial apply for closure #1 in LinkView.contextMenuInteraction(_:configurationForMenuAtLocation:);
    v9[5] = v5;
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
    v9[3] = &block_descriptor_26;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    id v4 = objc_msgSend(v6, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v7);
    swift_release();
    _Block_release(v7);
  }
  return v4;
}

uint64_t sub_20C44CAB8()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

UIMenu partial apply for closure #1 in LinkView.contextMenuInteraction(_:configurationForMenuAtLocation:)(uint64_t a1)
{
  return closure #1 in LinkView.contextMenuInteraction(_:configurationForMenuAtLocation:)(a1, *(UIMenuElementSize *)(v1 + 16));
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t dispatch thunk of FindResultProvider.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 24)
                                                                                     + **(int **)(a6 + 24));
  id v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *id v13 = v6;
  v13[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of FindResult.frames(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of FindResult.scrollToVisible(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of FindResult.draw(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

void TextAlignmentControl.init(axis:useCapsuleStyle:)(__objc2_class *a1, char a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_contentStackView;
  id v6 = objc_allocWithZone(MEMORY[0x263F82BF8]);
  uint64_t v7 = v2;
  *(void *)&v2[v5] = objc_msgSend(v6, sel_init);
  *(__objc2_class **)((char *)v7 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_regularCornerRadius) = (__objc2_class *)0x4020000000000000;
  *(_OWORD *)((char *)v7 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize) = xmmword_20C839CD0;
  *(_OWORD *)((char *)v7 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_minimumButtonSize) = xmmword_20C839CE0;
  uint64_t v8 = (char *)v7 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment;
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  *(__objc2_class **)((char *)v7 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_axis) = a1;
  Swift::OpaquePointer v9 = (unsigned char *)OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_useCapsuleStyle;
  *((unsigned char *)v7 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_useCapsuleStyle) = a2;
  char v196 = a2;
  if (a2)
  {
    id v10 = objc_msgSend(self, sel_configurationWithPointSize_weight_scale_, 6, 2, 19.0);
LABEL_6:
    unint64_t v22 = (unint64_t)v10;
    CGRect v23 = (void *)MEMORY[0x21054D080](0x696C612E74786574, 0xEE007466656C6E67);
    id v24 = self;
    id v25 = objc_msgSend(v24, sel_systemImageNamed_withConfiguration_, v23, v22);

    if (v25)
    {
      if (a1) {
        double v26 = 15.0;
      }
      else {
        double v26 = 0.0;
      }
      if (a1) {
        double v27 = 0.0;
      }
      else {
        double v27 = 13.0;
      }
      if (a1) {
        double v28 = 10.0;
      }
      else {
        double v28 = 0.0;
      }
      if (a1) {
        double v29 = 0.0;
      }
      else {
        double v29 = 10.0;
      }
      char v30 = v9[(void)v7];
      v195 = (objc_class *)type metadata accessor for AttributeStylingButton();
      id v31 = objc_allocWithZone(v195);
      id v32 = v25;
      double v33 = AttributeStylingControl.init(contentInsets:useCompactStyle:)((v30 & 1) == 0, v26, v27, v28, v29);
      char v34 = *(void **)&v33[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image];
      *(void *)&v33[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = v25;
      id v35 = v32;
      unint64_t v36 = v33;
      id v37 = v35;
      uint64_t v38 = v36;

      AttributeStylingControl.updateUI()();
      if (one-time initialization token for spacing != -1) {
        goto LABEL_78;
      }
      while (1)
      {
        double v39 = 0.0;
        -[__objc2_class setHitTestInsets:](v38, sel_setHitTestInsets_, 0.0, -*(double *)&static AttributeStylingButton.spacing, 0.0, -*(double *)&static AttributeStylingButton.spacing);
        [(__objc2_class *)v38 setIsAccessibilityElement:1];
        uint64_t v40 = *MEMORY[0x263F83260];
        [(__objc2_class *)v38 setAccessibilityTraits:*MEMORY[0x263F83260]];

        v191 = v37;
        *(__objc2_class **)((char *)v7 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_leftAlignmentButton) = v38;
        id v41 = (id)v22;
        unint64_t v42 = (void *)MEMORY[0x21054D080](0xD000000000000010, 0x800000020C850360);
        id v43 = objc_msgSend(v24, sel_systemImageNamed_withConfiguration_, v42, v41);

        if (!v43) {
          goto LABEL_102;
        }
        v198 = a1;
        if (a1) {
          double v44 = 10.0;
        }
        else {
          double v44 = 0.0;
        }
        if (!a1) {
          double v39 = 10.0;
        }
        v193 = v9;
        CGRect v45 = &v9[(void)v7];
        char v46 = v9[(void)v7];
        id v47 = objc_allocWithZone(v195);
        id v48 = v43;
        uint64_t v49 = AttributeStylingControl.init(contentInsets:useCompactStyle:)((v46 & 1) == 0, v44, v39, v44, v39);
        id v50 = *(void **)&v49[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image];
        *(void *)&v49[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = v43;
        id v51 = v48;
        uint64_t v52 = v49;
        id v53 = v51;
        uint64_t v54 = v52;

        AttributeStylingControl.updateUI()();
        -[__objc2_class setHitTestInsets:](v54, sel_setHitTestInsets_, 0.0, -*(double *)&static AttributeStylingButton.spacing, 0.0, -*(double *)&static AttributeStylingButton.spacing);
        [(__objc2_class *)v54 setIsAccessibilityElement:1];
        [(__objc2_class *)v54 setAccessibilityTraits:v40];

        v190 = v53;
        *(__objc2_class **)((char *)v7 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_centerAlignmentButton) = v54;
        id v55 = v41;
        uint64_t v56 = (void *)MEMORY[0x21054D080](0x696C612E74786574, 0xEF74686769726E67);
        id v57 = objc_msgSend(v24, sel_systemImageNamed_withConfiguration_, v56, v55);

        if (!v57) {
          goto LABEL_103;
        }
        char v58 = *v45;
        id v59 = objc_allocWithZone(v195);
        id v60 = v57;
        uint64_t v61 = AttributeStylingControl.init(contentInsets:useCompactStyle:)((v58 & 1) == 0, v44, v39, v44, v39);
        uint64_t v62 = *(void **)&v61[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image];
        *(void *)&v61[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = v57;
        id v63 = v60;
        long long v64 = v61;
        id v65 = v63;
        uint64_t v66 = v64;

        AttributeStylingControl.updateUI()();
        double v67 = 0.0;
        -[__objc2_class setHitTestInsets:](v66, sel_setHitTestInsets_, 0.0, -*(double *)&static AttributeStylingButton.spacing, 0.0, -*(double *)&static AttributeStylingButton.spacing);
        [(__objc2_class *)v66 setIsAccessibilityElement:1];
        [(__objc2_class *)v66 setAccessibilityTraits:v40];

        v189 = v65;
        *(__objc2_class **)((char *)v7 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_rightAlignmentButton) = v66;
        id v68 = v55;
        CGAffineTransform v69 = (void *)MEMORY[0x21054D080](0x73756A2E74786574, 0xEC00000079666974);
        id v70 = objc_msgSend(v24, sel_systemImageNamed_withConfiguration_, v69, v68);

        v188 = v68;
        if (!v70) {
          goto LABEL_104;
        }
        if (a1) {
          double v71 = 10.0;
        }
        else {
          double v71 = 0.0;
        }
        if (a1) {
          double v72 = 0.0;
        }
        else {
          double v72 = 10.0;
        }
        if (a1) {
          double v73 = 15.0;
        }
        else {
          double v73 = 0.0;
        }
        if (!a1) {
          double v67 = 13.0;
        }
        char v74 = v193[(void)v7];
        id v75 = objc_allocWithZone(v195);
        id v76 = v70;
        long long v77 = AttributeStylingControl.init(contentInsets:useCompactStyle:)((v74 & 1) == 0, v71, v72, v73, v67);
        long long v78 = *(void **)&v77[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image];
        *(void *)&v77[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = v70;
        id v79 = v76;
        long long v80 = v77;
        id v81 = v79;
        long long v82 = v80;

        AttributeStylingControl.updateUI()();
        -[__objc2_class setHitTestInsets:](v82, sel_setHitTestInsets_, 0.0, -*(double *)&static AttributeStylingButton.spacing, 0.0, -*(double *)&static AttributeStylingButton.spacing);
        [(__objc2_class *)v82 setIsAccessibilityElement:1];
        [(__objc2_class *)v82 setAccessibilityTraits:v40];

        v187 = v81;
        *(__objc2_class **)((char *)v7 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_justifiedAlignmentButton) = v82;

        v201.receiver = v7;
        v201.super_class = ObjectType;
        long long v83 = (char *)-[__objc2_class initWithFrame:](&v201, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
        objc_msgSend(v83, sel_setClipsToBounds_, 1);
        id v84 = objc_msgSend(v83, sel_layer);
        objc_msgSend(v84, sel_setCornerCurve_, *MEMORY[0x263F15A20]);

        uint64_t v85 = OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_contentStackView;
        double v86 = *(void **)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_contentStackView];
        objc_msgSend(v86, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
        objc_msgSend(v86, sel_setAxis_, v198);
        objc_msgSend(v86, sel_setAlignment_, 0);
        objc_msgSend(v86, sel_setDistribution_, (v196 & 1) == 0);
        objc_msgSend(v86, sel_setSpacing_, *(double *)&static AttributeStylingButton.spacing);
        objc_msgSend(v83, sel_addSubview_, v86);
        double v87 = (unsigned char *)self;
        uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v89 = swift_allocObject();
        uint64_t v192 = 4;
        *(_OWORD *)(v89 + 16) = xmmword_20C8344C0;
        id v90 = objc_msgSend(v86, sel_topAnchor);
        id v91 = objc_msgSend(v83, sel_topAnchor);
        id v92 = objc_msgSend(v90, sel_constraintEqualToAnchor_, v91);

        *(void *)(v89 + 32) = v92;
        id v93 = objc_msgSend(*(id *)&v83[v85], sel_leadingAnchor);
        id v94 = objc_msgSend(v83, sel_leadingAnchor);
        id v95 = objc_msgSend(v93, sel_constraintEqualToAnchor_, v94);

        *(void *)(v89 + 40) = v95;
        id v96 = objc_msgSend(*(id *)&v83[v85], sel_trailingAnchor);
        id v97 = objc_msgSend(v83, sel_trailingAnchor);
        id v98 = objc_msgSend(v96, sel_constraintEqualToAnchor_, v97);

        *(void *)(v89 + 48) = v98;
        id v99 = objc_msgSend(*(id *)&v83[v85], sel_bottomAnchor);
        id v100 = objc_msgSend(v83, sel_bottomAnchor);
        id v101 = objc_msgSend(v99, sel_constraintEqualToAnchor_, v100);

        *(void *)(v89 + 56) = v101;
        uint64_t v200 = v89;
        specialized Array._endMutation()();
        char v196 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v194 = v87;
        objc_msgSend(v87, sel_activateConstraints_, isa);

        uint64_t ObjectType = (objc_class *)v85;
        v103 = *(void **)&v83[v85];
        uint64_t v186 = OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_leftAlignmentButton;
        objc_msgSend(v103, sel_addArrangedSubview_, *(void *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_leftAlignmentButton]);
        uint64_t p_class_meths = OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_centerAlignmentButton;
        objc_msgSend(v103, sel_addArrangedSubview_, *(void *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_centerAlignmentButton]);
        uint64_t v105 = (__objc2_class *)OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_rightAlignmentButton;
        objc_msgSend(v103, sel_addArrangedSubview_, *(void *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_rightAlignmentButton]);
        Swift::OpaquePointer v9 = (unsigned char *)OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_justifiedAlignmentButton;
        objc_msgSend(v103, sel_addArrangedSubview_, *(void *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_justifiedAlignmentButton]);
        uint64_t v106 = &selRef_allowsFingerDrawing;
        id v107 = objc_msgSend(v103, sel_arrangedSubviews);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        unint64_t v108 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v108 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v183 = _CocoaArrayWrapper.endIndex.getter();
          unint64_t v109 = swift_bridgeObjectRelease();
          a1 = v198;
          if (!v183)
          {
LABEL_80:
            swift_bridgeObjectRelease();
            __break(1u);
LABEL_81:
            uint64_t v110 = (__objc2_class *)MEMORY[0x21054E050](0, v108);
            goto LABEL_44;
          }
        }
        else
        {
          a1 = v198;
          if (!*(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_80;
          }
        }
        v185 = v105;
        if ((v108 & 0xC000000000000001) != 0) {
          goto LABEL_81;
        }
        if (!*(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_84;
        }
        uint64_t v110 = (__objc2_class *)*(id *)(v108 + 32);
LABEL_44:
        uint64_t v105 = v110;
        swift_bridgeObjectRelease();
        id v111 = objc_msgSend(*(id *)((char *)ObjectType + (void)v83), sel_arrangedSubviews);
        unint64_t v108 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v108 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v7 = (__objc2_class **)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v7)
          {
LABEL_83:
            unint64_t v109 = swift_bridgeObjectRelease();
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            id v113 = (id)MEMORY[0x21054E050](v109, v108);
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v112 = v108 & 0xFFFFFFFFFFFFFF8;
          uint64_t v7 = *(__objc2_class ***)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v7) {
            goto LABEL_83;
          }
        }
        unint64_t v109 = (unint64_t)v7 - 1;
        if (__OFSUB__(v7, 1)) {
          goto LABEL_85;
        }
        v195 = (objc_class *)v9;
        uint64_t v184 = p_class_meths;
        if ((v108 & 0xC000000000000001) != 0) {
          goto LABEL_86;
        }
        if ((v109 & 0x8000000000000000) != 0)
        {
          __break(1u);
          goto LABEL_88;
        }
        if (v109 >= *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_99;
        }
        id v113 = *(id *)(v108 + 8 * v109 + 32);
LABEL_51:
        v114 = v113;
        swift_bridgeObjectRelease();
        uint64_t v115 = swift_allocObject();
        *(_OWORD *)(v115 + 16) = xmmword_20C8344C0;
        id v116 = [(__objc2_class *)v105 widthAnchor];
        v117 = v116;
        uint64_t p_class_meths = (uint64_t)&OBJC_PROTOCOL___UIAdaptivePresentationControllerDelegate.class_meths;
        v118 = (double *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize];
        if (a1) {
          v118 = (double *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize + 8];
        }
        uint64_t v7 = &off_2640D6000;
        id v119 = objc_msgSend(v116, sel_constraintEqualToConstant_, *v118);

        *(void *)(v115 + 32) = v119;
        v198 = v105;
        id v120 = [(__objc2_class *)v105 heightAnchor];
        v121 = v120;
        v122 = (double *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize];
        if (!a1) {
          ++v122;
        }
        id v123 = objc_msgSend(v120, sel_constraintEqualToConstant_, *v122);

        *(void *)(v115 + 40) = v123;
        id v124 = objc_msgSend(v114, sel_widthAnchor);
        v125 = v124;
        v126 = (double *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize];
        if (a1) {
          ++v126;
        }
        id v127 = objc_msgSend(v124, sel_constraintEqualToConstant_, *v126);

        *(void *)(v115 + 48) = v127;
        uint64_t v192 = (uint64_t)v114;
        id v128 = objc_msgSend(v114, sel_heightAnchor);
        v129 = v128;
        v130 = (double *)&v83[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize];
        if (!a1) {
          ++v130;
        }
        id v131 = objc_msgSend(v128, sel_constraintEqualToConstant_, *v130);

        *(void *)(v115 + 56) = v131;
        uint64_t v200 = v115;
        specialized Array._endMutation()();
        Class v132 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        Swift::OpaquePointer v9 = v194;
        objc_msgSend(v194, sel_activateConstraints_, v132);

        id v133 = objc_msgSend(*(id *)((char *)ObjectType + (void)v83), sel_arrangedSubviews);
        unint64_t v108 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v112 = v108 & 0xFFFFFFFFFFFFFF8;
        uint64_t v106 = (char **)(v108 >> 62);
        if (!(v108 >> 62))
        {
          uint64_t v134 = *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v134 >= 1) {
            uint64_t v88 = 1;
          }
          else {
            uint64_t v88 = *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (v134 < (unint64_t)v88) {
            goto LABEL_98;
          }
          goto LABEL_64;
        }
LABEL_88:
        if ((v108 & 0x8000000000000000) != 0) {
          uint64_t v7 = (__objc2_class **)v108;
        }
        else {
          uint64_t v7 = (__objc2_class **)v112;
        }
        swift_bridgeObjectRetain();
        uint64_t v134 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v134 < 0) {
          goto LABEL_107;
        }
        if (v134 >= 1) {
          uint64_t v88 = 1;
        }
        else {
          uint64_t v88 = v134;
        }
        swift_bridgeObjectRetain();
        uint64_t p_class_meths = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (p_class_meths < v88) {
          goto LABEL_98;
        }
        swift_bridgeObjectRetain();
        uint64_t p_class_meths = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (p_class_meths < v134)
        {
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          swift_once();
LABEL_76:
          v157._uint64_t countAndFlagsBits = (uint64_t)v7 - 5;
          v202._uint64_t countAndFlagsBits = (uint64_t)(v7 + 4);
          v202._object = (void *)0x800000020C855D60;
          v157._object = (void *)0x800000020C855D40;
          v158.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
          v158.value._object = (void *)0xEB00000000656C62;
          v159._uint64_t countAndFlagsBits = 0;
          v159._object = (void *)0xE000000000000000;
          uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v157, v158, paperKitBundle, v159, v202)._countAndFlagsBits;
          v161 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
          swift_bridgeObjectRelease();
          objc_msgSend(v106, sel_setAccessibilityLabel_, v161);

          Class v162 = paperKitBundle.super.isa;
          id v163 = *(id *)&v83[p_class_meths];
          v164._uint64_t countAndFlagsBits = (uint64_t)v7 - 3;
          v203._uint64_t countAndFlagsBits = (uint64_t)v7 + 34;
          v203._object = (void *)0x800000020C855DC0;
          v164._object = (void *)0x800000020C855DA0;
          v165.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
          v165.value._object = (void *)0xEB00000000656C62;
          v166._uint64_t countAndFlagsBits = 0;
          v166._object = (void *)0xE000000000000000;
          uint64_t v167 = NSLocalizedString(_:tableName:bundle:value:comment:)(v164, v165, (NSBundle)v162, v166, v203)._countAndFlagsBits;
          v168 = (void *)MEMORY[0x21054D080](v167);
          swift_bridgeObjectRelease();
          objc_msgSend(v163, sel_setAccessibilityLabel_, v168);

          Class v169 = paperKitBundle.super.isa;
          id v170 = *(id *)&v83[v88];
          v171._uint64_t countAndFlagsBits = (uint64_t)v7 - 4;
          v204._uint64_t countAndFlagsBits = (uint64_t)v7 + 33;
          v204._object = (void *)0x800000020C855E20;
          v171._object = (void *)0x800000020C855E00;
          v172.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
          v172.value._object = (void *)0xEB00000000656C62;
          v173._uint64_t countAndFlagsBits = 0;
          v173._object = (void *)0xE000000000000000;
          uint64_t v174 = NSLocalizedString(_:tableName:bundle:value:comment:)(v171, v172, (NSBundle)v169, v173, v204)._countAndFlagsBits;
          v175 = (void *)MEMORY[0x21054D080](v174);
          swift_bridgeObjectRelease();
          objc_msgSend(v170, sel_setAccessibilityLabel_, v175);

          Class v176 = paperKitBundle.super.isa;
          id v177 = *(id *)((char *)v195 + (void)v83);
          v205._uint64_t countAndFlagsBits = (uint64_t)v7 + 37;
          v205._object = (void *)0x800000020C855E80;
          v178._object = (void *)0x800000020C855E60;
          v178._uint64_t countAndFlagsBits = 0xD000000000000018;
          v179.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
          v179.value._object = (void *)0xEB00000000656C62;
          v180._uint64_t countAndFlagsBits = 0;
          v180._object = (void *)0xE000000000000000;
          uint64_t v181 = NSLocalizedString(_:tableName:bundle:value:comment:)(v178, v179, (NSBundle)v176, v180, v205)._countAndFlagsBits;
          v182 = (void *)MEMORY[0x21054D080](v181);
          swift_bridgeObjectRelease();
          objc_msgSend(v177, sel_setAccessibilityLabel_, v182);

          TextAlignmentControl.updateUI()();
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          return;
        }
LABEL_64:
        if ((v108 & 0xC000000000000001) != 0 && (unint64_t)v134 >= 2)
        {
          Swift::Int v135 = v88;
          do
          {
            uint64_t v7 = (__objc2_class **)(v135 + 1);
            _ArrayBuffer._typeCheckSlowPath(_:)(v135);
            Swift::Int v135 = (Swift::Int)v7;
          }
          while ((__objc2_class **)v134 != v7);
        }
        if (v106)
        {
          swift_bridgeObjectRetain();
          uint64_t v136 = _CocoaArrayWrapper.subscript.getter();
          uint64_t v137 = v138;
          uint64_t v88 = v139;
          unint64_t v22 = v140;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          uint64_t v136 = v108 & 0xFFFFFFFFFFFFFF8;
          uint64_t v137 = (v108 & 0xFFFFFFFFFFFFFF8) + 32;
          unint64_t v22 = (2 * v134) | 1;
        }
        id v24 = (void *)specialized Collection.dropLast(_:)(1, v136, v137, v88, v22);
        uint64_t v200 = MEMORY[0x263F8EE78];
        v144 = (__objc2_class **)(v143 >> 1);
        if (v142 == (__objc2_class **)(v143 >> 1))
        {
LABEL_75:
          swift_bridgeObjectRetain();
          Class v146 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v9, sel_activateConstraints_, v146);

          v147 = *(void **)&v83[v186];
          objc_msgSend(v147, sel_addTarget_action_forControlEvents_, v83, sel_didTapLeftAlignmentButton, 64);
          uint64_t p_class_meths = v184;
          objc_msgSend(*(id *)&v83[v184], sel_addTarget_action_forControlEvents_, v83, sel_didTapCenterAlignmentButton, 64);
          uint64_t v88 = (uint64_t)v185;
          objc_msgSend(*(id *)((char *)&v185->isa + (void)v83), sel_addTarget_action_forControlEvents_, v83, sel_didTapRightAlignmentButton, 64);
          objc_msgSend(*(id *)((char *)v195 + (void)v83), sel_addTarget_action_forControlEvents_, v83, sel_didTapJustifiedAlignmentButton, 64);
          id v148 = v147;
          uint64_t v7 = (__objc2_class **)0xD000000000000018;
          v149 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C855CC0);
          objc_msgSend(v148, sel_setAccessibilityIdentifier_, v149);

          id v150 = *(id *)&v83[v184];
          v151 = (void *)MEMORY[0x21054D080](0xD000000000000019, 0x800000020C855CE0);
          objc_msgSend(v150, sel_setAccessibilityIdentifier_, v151);

          id v152 = *(id *)((char *)&v185->isa + (void)v83);
          v153 = (void *)MEMORY[0x21054D080](0xD000000000000018, 0x800000020C855D00);
          objc_msgSend(v152, sel_setAccessibilityIdentifier_, v153);

          id v154 = *(id *)((char *)v195 + (void)v83);
          v155 = (void *)MEMORY[0x21054D080](0xD00000000000001ALL, 0x800000020C855D20);
          objc_msgSend(v154, sel_setAccessibilityIdentifier_, v155);

          uint64_t v156 = one-time initialization token for paperKitBundle;
          uint64_t v106 = (char **)*(id *)&v83[v186];
          if (v156 != -1) {
            goto LABEL_100;
          }
          goto LABEL_76;
        }
        uint64_t v38 = v141;
        id v37 = 0;
        while ((uint64_t)v142 < (uint64_t)v144)
        {
          unint64_t v22 = a1 == 0;
          uint64_t v7 = (__objc2_class **)((char *)v142 + 1);
          id v199 = (id)*((void *)&v38->isa + (void)v142);
          id v145 = v199;
          closure #1 in TextAlignmentControl.init(axis:useCapsuleStyle:)(&v199, &v200, a1 == 0, (uint64_t)v83);

          v142 = v7;
          if (v144 == v7) {
            goto LABEL_75;
          }
        }
        __break(1u);
LABEL_78:
        swift_once();
      }
    }
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v11 = a1;
  id v12 = v9;
  uint64_t v13 = *MEMORY[0x263F83570];
  double v14 = *MEMORY[0x263F81840];
  id v15 = (void *)*MEMORY[0x263F83470];
  uint64_t v16 = self;
  id v17 = v15;
  id v18 = objc_msgSend(v16, sel_traitCollectionWithPreferredContentSizeCategory_, v17);
  id v19 = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, v13, v14);
  if (v19)
  {
    uint64_t v20 = v19;
    id v21 = objc_msgSend(v19, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v18);

    if (!v21) {
      goto LABEL_106;
    }
    id v10 = objc_msgSend(self, sel_configurationWithFont_scale_, v21, 2);

    Swift::OpaquePointer v9 = v12;
    a1 = v11;
    goto LABEL_6;
  }
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  int64_t v5 = a5 >> 1;
  unint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v6 - result;
  if (__OFSUB__(v6, result))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v7 < 1)
  {
    uint64_t v7 = 0;
  }
  else if ((v6 & 0x8000000000000000) == 0)
  {
    int64_t v8 = a5 >> 1;
    if (v6 < v7)
    {
LABEL_10:
      if (v8 >= a4)
      {
        if (v5 >= a4)
        {
          if (v5 >= v8)
          {
            if ((v8 & 0x8000000000000000) == 0) {
              return a2;
            }
            goto LABEL_21;
          }
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  int64_t v8 = a4 + v7;
  if (!__OFADD__(a4, v7)) {
    goto LABEL_10;
  }
LABEL_22:
  __break(1u);
  return result;
}

void closure #1 in TextAlignmentControl.init(axis:useCapsuleStyle:)(id *a1, void *a2, char a3, uint64_t a4)
{
  id v7 = *a1;
  id v8 = objc_msgSend(*a1, sel_widthAnchor);
  Swift::OpaquePointer v9 = v8;
  id v10 = (double *)(a4 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_minimumButtonSize);
  if ((a3 & 1) == 0) {
    id v10 = (double *)(a4 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_minimumButtonSize + 8);
  }
  id v11 = objc_msgSend(v8, sel_constraintEqualToConstant_, *v10);

  id v12 = objc_msgSend(v7, sel_heightAnchor);
  uint64_t v13 = v12;
  double v14 = (double *)(a4 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_minimumButtonSize);
  if (a3) {
    ++v14;
  }
  id v15 = objc_msgSend(v12, sel_constraintEqualToConstant_, *v14);

  if (*a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v17 = v19 + 2;
    if (!__OFADD__(v19, 2))
    {
LABEL_7:
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v17, 1);
      specialized Array._endMutation()();
      id v11 = v11;
      MEMORY[0x21054D330]();
      if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v17 = v16 + 2;
    if (!__OFADD__(v16, 2)) {
      goto LABEL_7;
    }
  }
  __break(1u);
LABEL_14:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_8:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v18 = v15;
  MEMORY[0x21054D330]();
  if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
}

id TextAlignmentControl.updateUI()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_leftAlignmentButton);
  Swift::String v3 = (objc_class *)type metadata accessor for AttributeStylingButton();
  v16.receiver = v2;
  v16.super_class = v3;
  objc_msgSendSuper2(&v16, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  id v4 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_centerAlignmentButton);
  v15.receiver = v4;
  v15.super_class = v3;
  objc_msgSendSuper2(&v15, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  int64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_rightAlignmentButton);
  v14.receiver = v5;
  v14.super_class = v3;
  objc_msgSendSuper2(&v14, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  unint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_justifiedAlignmentButton);
  v13.receiver = v6;
  v13.super_class = v3;
  objc_msgSendSuper2(&v13, sel_setSelected_, 0);
  id result = AttributeStylingButton.isSelected.didset();
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment + 8) & 1) == 0)
  {
    switch(*(void *)(v1 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment))
    {
      case 0:
        Swift::OpaquePointer v9 = v2;
        id v8 = (objc_super *)&v9;
        goto LABEL_7;
      case 1:
        id v10 = v4;
        id v8 = (objc_super *)&v10;
        goto LABEL_7;
      case 2:
        id v11 = v5;
        id v8 = (objc_super *)&v11;
        goto LABEL_7;
      case 3:
        v12.receiver = v6;
        id v8 = &v12;
LABEL_7:
        v8->super_class = v3;
        -[objc_super setSelected:](v8, sel_setSelected_, 1, v9);
        id result = AttributeStylingButton.isSelected.didset();
        break;
      default:
        return result;
    }
  }
  return result;
}

Swift::Void __swiftcall TextAlignmentControl.layoutSubviews()()
{
  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v9, sel_layoutSubviews);
  id v1 = objc_msgSend(v0, sel_layer);
  if (v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_useCapsuleStyle] == 1)
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_axis];
    objc_msgSend(v0, sel_bounds);
    if (v2) {
      double Width = CGRectGetWidth(*(CGRect *)&v3);
    }
    else {
      double Width = CGRectGetHeight(*(CGRect *)&v3);
    }
    double v8 = Width * 0.5;
  }
  else
  {
    double v8 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_regularCornerRadius];
  }
  objc_msgSend(v1, sel_setCornerRadius_, v8);
}

uint64_t type metadata accessor for TextAlignmentControl()
{
  return self;
}

uint64_t protocol witness for TextAlignmentWidget.selectedTextAlignment.getter in conformance TextAlignmentControl()
{
  return *(void *)(v0 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment);
}

id protocol witness for TextAlignmentWidget.selectedTextAlignment.setter in conformance TextAlignmentControl(uint64_t a1, char a2)
{
  uint64_t v3 = v2 + OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment;
  *(void *)uint64_t v3 = a1;
  *(unsigned char *)(v3 + 8) = a2 & 1;
  return TextAlignmentControl.updateUI()();
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, char a2)
{
  unint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v5;
  uint64_t v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = MEMORY[0x21054E060](v7, v9, a2 & 1, v5);
  *uint64_t v2 = result;
  return result;
}

void specialized TextAlignmentControl.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_contentStackView;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_regularCornerRadius] = 0x4020000000000000;
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_maximumButtonSize] = xmmword_20C839CD0;
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_minimumButtonSize] = xmmword_20C839CE0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit20TextAlignmentControl_selectedTextAlignment];
  *(void *)uint64_t v2 = 0;
  v2[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t PKDrawingUUIDKeyPath.aes128Key.getter()
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v0 = type metadata accessor for Insecure.MD5();
  uint64_t v19 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Insecure.MD5Digest();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x21054CA80](v5);
  unint64_t v10 = v9;
  _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, 255, MEMORY[0x263F04840]);
  dispatch thunk of HashFunction.init()();
  switch(v10 >> 62)
  {
    case 1uLL:
      uint64_t v18 = v4;
      if (v8 >> 32 < (int)v8) {
        __break(1u);
      }
      uint64_t v17 = 0;
      outlined copy of Data._Representation(v8, v10);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v8, v8 >> 32);
      outlined consume of Data._Representation(v8, v10);
      uint64_t v4 = v18;
      goto LABEL_9;
    case 2uLL:
      uint64_t v17 = 0;
      uint64_t v18 = v4;
      uint64_t v12 = *(void *)(v8 + 16);
      uint64_t v11 = *(void *)(v8 + 24);
      outlined copy of Data._Representation(v8, v10);
      swift_retain();
      swift_retain();
      uint64_t v13 = v12;
      uint64_t v4 = v18;
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v13, v11);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      memset(v21, 0, 14);
      goto LABEL_7;
    default:
      v21[0] = v8;
      LOWORD(v21[1]) = v10;
      BYTE2(v21[1]) = BYTE2(v10);
      BYTE3(v21[1]) = BYTE3(v10);
      BYTE4(v21[1]) = BYTE4(v10);
      BYTE5(v21[1]) = BYTE5(v10);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_8:
      outlined consume of Data._Representation(v8, v10);
LABEL_9:
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v2, v0);
      outlined consume of Data._Representation(v8, v10);
      uint64_t v22 = v3;
      uint64_t v23 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type Insecure.MD5Digest and conformance Insecure.MD5Digest, 255, MEMORY[0x263F04868]);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
      (*(void (**)(uint64_t *, char *, uint64_t))(v4 + 16))(boxed_opaque_existential_1, v7, v3);
      __swift_project_boxed_opaque_existential_1(v21, v22);
      dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      uint64_t v15 = v20;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      return v15;
  }
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x263F8D3E8];
  v8[4] = MEMORY[0x263F07B80];
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x263F8D3E8]);
  uint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (uint64_t v4 = (unsigned char *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = specialized Data.InlineData.init(_:)(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = specialized Data.LargeSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = specialized Data.InlineSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  v28[5] = *MEMORY[0x263EF8340];
  v28[3] = MEMORY[0x263F06F78];
  v28[4] = MEMORY[0x263F06F68];
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v28, MEMORY[0x263F06F78]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(v5, v6);
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      closure #1 in Data.init<A>(_:)(v8, v13, &v27);
      outlined consume of Data._Representation(v5, v6);
LABEL_27:
      outlined consume of Data._Representation(a1, a2);
      uint64_t v24 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      objc_super v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      closure #1 in Data.init<A>(_:)(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      closure #1 in Data.init<A>(_:)(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t PKDrawingUUIDKeyPath.isEqual(_:)(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v34);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v30 - v11;
  double v14 = MEMORY[0x270FA5388](v13);
  objc_super v16 = (char *)&v30 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v17((char *)&v30 - v15, v1 + OBJC_IVAR____TtC8PaperKit20PKDrawingUUIDKeyPath_keypath, v2, v14);
  BOOL v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v18(v16, 0, 1, v2);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v33, (uint64_t)v36, &demangling cache variable for type metadata for Any?);
  id v32 = v9;
  if (v37)
  {
    type metadata accessor for PKDrawingUUIDKeyPath();
    if (swift_dynamicCast())
    {
      uint64_t v19 = v35;
      ((void (*)(char *, char *, uint64_t))v17)(v12, &v35[OBJC_IVAR____TtC8PaperKit20PKDrawingUUIDKeyPath_keypath], v2);

      uint64_t v20 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v20 = 1;
LABEL_6:
  v18(v12, v20, 1, v2);
  uint64_t v21 = (uint64_t)&v6[*(int *)(v34 + 48)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v16, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, v21, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v22((uint64_t)v6, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    int v23 = v22(v21, 1, v2);
    if (v23 == 1) {
      uint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
    }
    else {
      uint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    uint64_t v26 = (uint64_t)v32;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v6, (uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    if (v22(v21, 1, v2) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v26, v2);
      char v25 = 0;
      uint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    else
    {
      uint64_t v27 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v31, v21, v2);
      _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, 255, MEMORY[0x263F330F8]);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      double v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28(v27, v2);
      uint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v28((char *)v26, v2);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, v24);
  return v25 & 1;
}

id PKDrawingUUIDKeyPath.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PKDrawingUUIDKeyPath();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PKStrokeMaskWrapper(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16);
}

uint64_t PKStrokeMaskStruct.init(rawValue:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(MEMORY[0x263F14BB8]);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(v5, sel_initWithRawValue_, isa);
  outlined consume of Data._Representation(a1, a2);

  if (v7)
  {
    type metadata accessor for PKStrokeMaskWrapper();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    *(void *)(v2 + 16) = v8;
  }
  else
  {
    type metadata accessor for PKStrokeMaskStruct();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

uint64_t PKStrokeMaskStruct.rawValue.getter()
{
  id v1 = objc_msgSend(*(id *)(*(void *)(v0 + 16) + 16), sel_rawValue);
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t PKStrokeMaskStruct.__allocating_init(from:)(void *a1)
{
  return specialized PKStrokeMaskStruct.__allocating_init(from:)(a1);
}

uint64_t PKStrokeMaskStruct.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  id v2 = objc_msgSend(*(id *)(*(void *)(v1 + 16) + 16), sel_rawValue);
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  outlined consume of Data._Representation(v3, v5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t PKStrokeMaskStruct.deinit()
{
  swift_release();
  return v0;
}

uint64_t PKStrokeMaskStruct.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PKStrokeMaskStruct@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized PKStrokeMaskStruct.__allocating_init(rawValue:)(*(void *)a1, *(void *)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PKStrokeMaskStruct(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(*(void *)(*(void *)v1 + 16) + 16), sel_rawValue);
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeMaskStruct()
{
  return protocol witness for CRCodable.init(from:) in conformance PKStrokeMaskStruct();
}

{
  swift_getWitnessTable();
  swift_getWitnessTable();
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeMaskStruct()
{
  return protocol witness for CRCodable.encode(to:) in conformance PKStrokeMaskStruct();
}

{
  swift_getWitnessTable();
  swift_getWitnessTable();
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeMaskStruct(uint64_t a1)
{
  return protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeMaskStruct(a1);
}

{
  uint64_t WitnessTable;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  WitnessTable = swift_getWitnessTable();
  id v3 = swift_getWitnessTable();
  uint64_t v4 = MEMORY[0x263F32BD8];
  return MEMORY[0x270F17D98](a1, WitnessTable, v3, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PKStrokeMaskStruct(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PKStrokeMaskStruct@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized PKStrokeMaskStruct.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PKStrokeMaskStruct(void *a1)
{
  return PKStrokeMaskStruct.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokeMaskStruct@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKStrokeMaskStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokeMaskStruct();
  uint64_t v6 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, v5, (void (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct);
  uint64_t v8 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, v7, (void (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct);
  return MEMORY[0x270F17D90](a1, a2, v4, v6, v8);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance PKInk(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(v5, sel_initWithRawValue_, isa);
  outlined consume of Data._Representation(v3, v4);

  *a2 = v7;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PKInk(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(*v1, sel_rawValue);
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKInk()
{
  return protocol witness for CRCodable.init(from:) in conformance PKStrokeMaskStruct();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKInk()
{
  return protocol witness for CRCodable.encode(to:) in conformance PKStrokeMaskStruct();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKInk(uint64_t a1)
{
  return protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeMaskStruct(a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKInk(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = type metadata accessor for PKInk();
  uint64_t v5 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKInk and conformance PKInk, 255, (void (*)(uint64_t))type metadata accessor for PKInk);
  uint64_t v6 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type PKInk and conformance NSObject, 255, (void (*)(uint64_t))type metadata accessor for PKInk);
  return MEMORY[0x270F17D90](a1, a2, v4, v5, v6);
}

uint64_t CGRect.init(rawValue:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  specialized CGRect.init(rawValue:)(a1, a2, (uint64_t)v7);
  outlined consume of Data._Representation(a1, a2);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v7, a3, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t CGRect.rawValue.getter(double a1, double a2, double a3, double a4)
{
  v8[0] = _OSSwapInt64(*(unint64_t *)&a1);
  v8[1] = _OSSwapInt64(*(unint64_t *)&a2);
  v8[2] = _OSSwapInt64(*(unint64_t *)&a3);
  v8[3] = _OSSwapInt64(*(unint64_t *)&a4);
  return specialized Data.init<A>(_:)((uint64_t)v8, (uint64_t)&v9);
}

BOOL CGRect.isDefaultState.getter(double a1, double a2, double a3, double a4)
{
  v5.origin.CGFloat x = 0.0;
  v5.origin.CGFloat y = 0.0;
  v5.size.CGFloat width = 0.0;
  v5.size.CGFloat height = 0.0;
  return CGRectEqualToRect(*(CGRect *)&a1, v5);
}

double CGRect.init(defaultState:)()
{
  return 0.0;
}

double protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance CGRect@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CGRect@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  specialized CGRect.init(rawValue:)(*a1, v4, (uint64_t)v6);
  outlined consume of Data._Representation(v3, v4);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v6, a2, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CGRect@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CGRect.rawValue.getter(*v1, v1[1], v1[2], v1[3]);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CGRect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, type metadata accessor for CGRect);
  uint64_t v7 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, type metadata accessor for CGRect);
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGRect()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGRect()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CGRect(uint64_t a1)
{
  uint64_t v2 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, type metadata accessor for CGRect);
  uint64_t v3 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, 255, type metadata accessor for CGRect);
  uint64_t v4 = MEMORY[0x263F32BD8];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

double CGPoint.init(defaultState:)()
{
  return 0.0;
}

void protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance CGPoint(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CGPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, type metadata accessor for CGPoint);
  uint64_t v7 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, type metadata accessor for CGPoint);
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGPoint()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGPoint()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CGPoint(uint64_t a1)
{
  uint64_t v2 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, type metadata accessor for CGPoint);
  uint64_t v3 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, type metadata accessor for CGPoint);
  uint64_t v4 = MEMORY[0x263F32BD8];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

uint64_t CGPoint.init(rawValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = specialized CGPoint.init(rawValue:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  return v4;
}

uint64_t CGPoint.rawValue.getter(double a1, double a2)
{
  v4[0] = _OSSwapInt64(*(unint64_t *)&a1);
  v4[1] = _OSSwapInt64(*(unint64_t *)&a2);
  return specialized Data.init<A>(_:)((uint64_t)v4, (uint64_t)&v5);
}

BOOL CGSize.isDefaultState.getter(double a1, double a2)
{
  return a2 == 0.0 && a1 == 0.0;
}

double CGSize.init(defaultState:)()
{
  return 0.0;
}

BOOL protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance CGSize()
{
  return v0[1] == 0.0 && *v0 == 0.0;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CGPoint@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = specialized CGPoint.init(rawValue:)(*a1, v4);
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t result = outlined consume of Data._Representation(v3, v4);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v9 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CGPoint@<X0>(uint64_t *a1@<X8>)
{
  double v3 = v1[1];
  v6[0] = CFConvertDoubleHostToSwapped(*v1);
  v6[1] = CFConvertDoubleHostToSwapped(v3);
  uint64_t result = specialized Data.init<A>(_:)((uint64_t)v6, (uint64_t)&v7);
  *a1 = result;
  a1[1] = v5;
  return result;
}

__n128 protocol witness for CRType.copy(renamingReferences:) in conformance CGSize@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CGSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, type metadata accessor for CGSize);
  uint64_t v7 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, type metadata accessor for CGSize);
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGSize()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGSize()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CGSize(uint64_t a1)
{
  uint64_t v2 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, type metadata accessor for CGSize);
  uint64_t v3 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, type metadata accessor for CGSize);
  uint64_t v4 = MEMORY[0x263F32BD8];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

double CGFloat.init(from:)()
{
  dispatch thunk of CRDecoder.valueContainer()();
  if (!v0)
  {
    dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
    double v1 = v3;
    swift_release();
  }
  swift_release();
  return v1;
}

uint64_t CGFloat.encode(to:)()
{
  return Double.encode(to:)();
}

BOOL CGFloat.isDefaultState.getter(double a1)
{
  return a1 == 0.0;
}

double CGFloat.init(defaultState:)()
{
  return 0.0;
}

BOOL protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance CGFloat()
{
  return *v0 == 0.0;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CGFloat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  unint64_t v7 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGFloat@<X0>(void *a1@<X8>)
{
  dispatch thunk of CRDecoder.valueContainer()();
  if (v1) {
    return swift_release();
  }
  dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
  uint64_t v4 = v3;
  swift_release();
  uint64_t result = swift_release();
  *a1 = v4;
  return result;
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGFloat()
{
  return Double.encode(to:)();
}

uint64_t CGAffineTransform.init(rawValue:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  specialized CGAffineTransform.init(rawValue:)(a1, a2, (uint64_t)v7);
  outlined consume of Data._Representation(a1, a2);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v7, a3, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
}

uint64_t CGAffineTransform.rawValue.getter()
{
  v2[0] = _OSSwapInt64(*v0);
  v2[1] = _OSSwapInt64(v0[1]);
  v2[2] = _OSSwapInt64(v0[2]);
  v2[3] = _OSSwapInt64(v0[3]);
  v2[4] = _OSSwapInt64(v0[4]);
  v2[5] = _OSSwapInt64(v0[5]);
  return specialized Data.init<A>(_:)((uint64_t)v2, (uint64_t)&v3);
}

uint64_t CGAffineTransform.isDefaultState.getter()
{
  return static CGAffineTransform.== infix(_:_:)() & 1;
}

void CGAffineTransform.init(defaultState:)(void *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

uint64_t protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance CGAffineTransform()
{
  return static CGAffineTransform.== infix(_:_:)() & 1;
}

void protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance CGAffineTransform(void *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CGAffineTransform@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  specialized CGAffineTransform.init(rawValue:)(*a1, v4, (uint64_t)v6);
  outlined consume of Data._Representation(v3, v4);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v6, a2, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CGAffineTransform@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CGAffineTransform.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

__n128 protocol witness for CRType.copy(renamingReferences:) in conformance CGAffineTransform@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CGAffineTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, type metadata accessor for CGAffineTransform);
  uint64_t v7 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, type metadata accessor for CGAffineTransform);
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGAffineTransform()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGAffineTransform()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CGAffineTransform(uint64_t a1)
{
  uint64_t v2 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, type metadata accessor for CGAffineTransform);
  uint64_t v3 = _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, type metadata accessor for CGAffineTransform);
  uint64_t v4 = MEMORY[0x263F32BD8];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

PaperKit::PKStrokeClipPlane __swiftcall PKStrokeClipPlane.init(origin:normal:)(CGPoint origin, CGPoint normal)
{
  *uint64_t v2 = origin.x;
  v2[1] = origin.y;
  v2[2] = normal.x;
  v2[3] = normal.y;
  result.normal.CGFloat y = normal.y;
  result.normal.CGFloat x = normal.x;
  result.origin.CGFloat y = origin.y;
  result.origin.CGFloat x = origin.x;
  return result;
}

uint64_t PKStrokeClipPlane.init(rawValue:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unint64_t v4 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_44;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 != 32)
      {
LABEL_15:
        uint64_t result = outlined consume of Data._Representation(a1, a2);
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(unsigned char *)(a3 + 32) = 1;
        return result;
      }
      if (!v4)
      {
        uint64_t v40 = (void *)a1;
        __int16 v41 = a2;
        char v42 = BYTE2(a2);
        char v43 = BYTE3(a2);
        char v44 = BYTE4(a2);
        uint64_t v18 = (a2 >> 51) & 0x1F;
        char v45 = BYTE5(a2);
        uint64_t v17 = (char *)&v40;
        goto LABEL_27;
      }
      if (v4 == 1)
      {
        uint64_t v11 = (a1 >> 32) - (int)a1;
        if (a1 >> 32 < (int)a1)
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        uint64_t v12 = __DataStorage._bytes.getter();
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = __DataStorage._offset.getter();
          uint64_t v15 = (int)a1 - v14;
          if (__OFSUB__((int)a1, v14))
          {
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
          }
          uint64_t v16 = __DataStorage._length.getter();
          uint64_t v17 = (char *)(v13 + v15);
          if (v16 >= v11) {
            uint64_t v16 = (a1 >> 32) - (int)a1;
          }
          uint64_t v18 = v16 / 8;
        }
        else
        {
          __DataStorage._length.getter();
          uint64_t v17 = 0;
          uint64_t v18 = 0;
        }
LABEL_27:
        uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v17, v18);
        int64_t v29 = *(void *)(v28 + 16);
        if (v29) {
          goto LABEL_28;
        }
LABEL_39:
        swift_bridgeObjectRelease();
        id v31 = (void *)MEMORY[0x263F8EE78];
        unint64_t v35 = *(void *)(MEMORY[0x263F8EE78] + 16);
        if (v35) {
          goto LABEL_33;
        }
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v20 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v22 = (char *)__DataStorage._bytes.getter();
      if (v22)
      {
        uint64_t v23 = __DataStorage._offset.getter();
        if (__OFSUB__(v20, v23)) {
          goto LABEL_49;
        }
        v22 += v20 - v23;
      }
      BOOL v10 = __OFSUB__(v21, v20);
      uint64_t v24 = v21 - v20;
      if (v10) {
        goto LABEL_47;
      }
      uint64_t v25 = __DataStorage._length.getter();
      if (v22)
      {
        if (v25 >= v24) {
          uint64_t v26 = v24;
        }
        else {
          uint64_t v26 = v25;
        }
        uint64_t v27 = v26 / 8;
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v22, v27);
      swift_release();
      swift_release();
      int64_t v29 = *(void *)(v28 + 16);
      if (!v29) {
        goto LABEL_39;
      }
LABEL_28:
      uint64_t v40 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
      uint64_t v30 = 0;
      id v31 = v40;
      do
      {
        unint64_t v32 = _OSSwapInt64(*(void *)(v28 + 8 * v30 + 32));
        uint64_t v40 = v31;
        unint64_t v34 = v31[2];
        unint64_t v33 = v31[3];
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          id v31 = v40;
        }
        ++v30;
        void v31[2] = v34 + 1;
        v31[v34 + 4] = v32;
      }
      while (v29 != v30);
      swift_bridgeObjectRelease();
      unint64_t v35 = v31[2];
      if (!v35) {
        goto LABEL_40;
      }
LABEL_33:
      if (v35 == 1)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      if (v35 < 3)
      {
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      if (v35 == 3) {
        goto LABEL_43;
      }
      uint64_t v36 = v31[4];
      uint64_t v37 = v31[5];
      uint64_t v38 = v31[6];
      uint64_t v39 = v31[7];
      swift_bridgeObjectRelease();
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      *(void *)a3 = v36;
      *(void *)(a3 + 8) = v37;
      *(void *)(a3 + 16) = v38;
      *(void *)(a3 + 24) = v39;
      *(unsigned char *)(a3 + 32) = 0;
      return result;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_45;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t PKStrokeClipPlane.rawValue.getter()
{
  unint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  unint64_t v3 = v0[1];
  v5[0] = _OSSwapInt64(*v0);
  v5[1] = _OSSwapInt64(v3);
  v5[2] = _OSSwapInt64(v1);
  v5[3] = _OSSwapInt64(v2);
  return specialized Data.init<A>(_:)((uint64_t)v5, (uint64_t)&v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PKStrokeClipPlane.CodingKeys()
{
  if (*v0) {
    return 0x6C616D726F6ELL;
  }
  else {
    return 0x6E696769726FLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PKStrokeClipPlane.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PKStrokeClipPlane.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PKStrokeClipPlane.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PKStrokeClipPlane.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PKStrokeClipPlane.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PKStrokeClipPlane.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PKStrokeClipPlane.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v9 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = v8;
  uint64_t v16 = v9;
  char v14 = 0;
  type metadata accessor for CGPoint(0);
  _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, type metadata accessor for CGPoint);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v15 = v10;
    uint64_t v16 = v11;
    char v14 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t PKStrokeClipPlane.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<PKStrokeClipPlane.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for CGPoint(0);
    char v13 = 0;
    _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, type metadata accessor for CGPoint);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v9 = v12;
    char v13 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    long long v10 = v12;
    *a2 = v9;
    a2[1] = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PKStrokeClipPlane@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return PKStrokeClipPlane.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PKStrokeClipPlane(void *a1)
{
  return PKStrokeClipPlane.encode(to:)(a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PKStrokeClipPlane@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PKStrokeClipPlane.init(rawValue:)(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PKStrokeClipPlane@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PKStrokeClipPlane.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKStrokeClipPlane()
{
  Hasher.init(_seed:)();
  uint64_t v0 = PKStrokeClipPlane.rawValue.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PKStrokeClipPlane()
{
  uint64_t v0 = PKStrokeClipPlane.rawValue.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  return outlined consume of Data._Representation(v0, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKStrokeClipPlane()
{
  Hasher.init(_seed:)();
  uint64_t v0 = PKStrokeClipPlane.rawValue.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

__n128 protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokeClipPlane@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKStrokeClipPlane(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  unint64_t v7 = lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PKStrokeClipPlane()
{
  uint64_t v0 = PKStrokeClipPlane.rawValue.getter();
  unint64_t v2 = v1;
  uint64_t v3 = PKStrokeClipPlane.rawValue.getter();
  unint64_t v5 = v4;
  char v6 = specialized static Data.== infix(_:_:)(v0, v2, v3, v4);
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v6 & 1;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeClipPlane()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeClipPlane()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeClipPlane(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  unint64_t v3 = lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
  uint64_t v4 = MEMORY[0x263F32BD8];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

uint64_t Quad.init(rawValue:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  unint64_t v4 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_52;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 != 64)
      {
LABEL_15:
        uint64_t result = outlined consume of Data._Representation(a1, a2);
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(unsigned char *)(a3 + 64) = 1;
        return result;
      }
      if (!v4)
      {
        char v44 = (void *)a1;
        __int16 v45 = a2;
        char v46 = BYTE2(a2);
        char v47 = BYTE3(a2);
        char v48 = BYTE4(a2);
        uint64_t v18 = (a2 >> 51) & 0x1F;
        char v49 = BYTE5(a2);
        uint64_t v17 = (char *)&v44;
        goto LABEL_27;
      }
      if (v4 == 1)
      {
        uint64_t v11 = (a1 >> 32) - (int)a1;
        if (a1 >> 32 < (int)a1)
        {
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        uint64_t v12 = __DataStorage._bytes.getter();
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = __DataStorage._offset.getter();
          uint64_t v15 = (int)a1 - v14;
          if (__OFSUB__((int)a1, v14)) {
            goto LABEL_57;
          }
          uint64_t v16 = __DataStorage._length.getter();
          uint64_t v17 = (char *)(v13 + v15);
          if (v16 >= v11) {
            uint64_t v16 = (a1 >> 32) - (int)a1;
          }
          uint64_t v18 = v16 / 8;
        }
        else
        {
          __DataStorage._length.getter();
          uint64_t v17 = 0;
          uint64_t v18 = 0;
        }
LABEL_27:
        uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v17, v18);
        int64_t v29 = *(void *)(v28 + 16);
        if (v29) {
          goto LABEL_28;
        }
LABEL_43:
        swift_bridgeObjectRelease();
        id v31 = (void *)MEMORY[0x263F8EE78];
        unint64_t v35 = *(void *)(MEMORY[0x263F8EE78] + 16);
        if (v35) {
          goto LABEL_33;
        }
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      uint64_t v20 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v22 = (char *)__DataStorage._bytes.getter();
      if (v22)
      {
        uint64_t v23 = __DataStorage._offset.getter();
        if (__OFSUB__(v20, v23))
        {
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
        }
        v22 += v20 - v23;
      }
      BOOL v10 = __OFSUB__(v21, v20);
      uint64_t v24 = v21 - v20;
      if (v10)
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      uint64_t v25 = __DataStorage._length.getter();
      if (v22)
      {
        if (v25 >= v24) {
          uint64_t v26 = v24;
        }
        else {
          uint64_t v26 = v25;
        }
        uint64_t v27 = v26 / 8;
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v22, v27);
      swift_release();
      swift_release();
      int64_t v29 = *(void *)(v28 + 16);
      if (!v29) {
        goto LABEL_43;
      }
LABEL_28:
      char v44 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
      uint64_t v30 = 0;
      id v31 = v44;
      do
      {
        unint64_t v32 = _OSSwapInt64(*(void *)(v28 + 8 * v30 + 32));
        char v44 = v31;
        unint64_t v34 = v31[2];
        unint64_t v33 = v31[3];
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          id v31 = v44;
        }
        ++v30;
        void v31[2] = v34 + 1;
        v31[v34 + 4] = v32;
      }
      while (v29 != v30);
      swift_bridgeObjectRelease();
      unint64_t v35 = v31[2];
      if (!v35) {
        goto LABEL_44;
      }
LABEL_33:
      if (v35 == 1)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      if (v35 < 3)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      if (v35 == 3)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      if (v35 < 5)
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      if (v35 == 5)
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      if (v35 < 7)
      {
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      if (v35 == 7) {
        goto LABEL_51;
      }
      uint64_t v36 = v31[4];
      uint64_t v37 = v31[5];
      uint64_t v38 = v31[6];
      uint64_t v39 = v31[7];
      uint64_t v40 = v31[8];
      uint64_t v41 = v31[9];
      uint64_t v42 = v31[11];
      uint64_t v43 = v31[10];
      swift_bridgeObjectRelease();
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      *(void *)a3 = v36;
      *(void *)(a3 + 8) = v37;
      *(void *)(a3 + 16) = v38;
      *(void *)(a3 + 24) = v39;
      *(void *)(a3 + 32) = v40;
      *(void *)(a3 + 40) = v41;
      *(void *)(a3 + 48) = v43;
      *(void *)(a3 + 56) = v42;
      *(unsigned char *)(a3 + 64) = 0;
      return result;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_53;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t Quad.rawValue.getter()
{
  unint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  unint64_t v3 = v0[4];
  unint64_t v4 = v0[5];
  unint64_t v5 = v0[6];
  unint64_t v6 = v0[7];
  unint64_t v7 = v0[1];
  v9[0] = _OSSwapInt64(*v0);
  v9[1] = _OSSwapInt64(v7);
  v9[2] = _OSSwapInt64(v1);
  v9[3] = _OSSwapInt64(v2);
  v9[4] = _OSSwapInt64(v3);
  v9[5] = _OSSwapInt64(v4);
  void v9[6] = _OSSwapInt64(v5);
  v9[7] = _OSSwapInt64(v6);
  return specialized Data.init<A>(_:)((uint64_t)v9, (uint64_t)&v10);
}

uint64_t Quad.isDefaultState.getter()
{
  uint64_t v0 = Quad.rawValue.getter();
  unint64_t v2 = v1;
  uint64_t v3 = Quad.rawValue.getter();
  unint64_t v5 = v4;
  char v6 = specialized static Data.== infix(_:_:)(v0, v2, v3, v4);
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v6 & 1;
}

double Quad.init(defaultState:)@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance Quad()
{
  uint64_t v0 = Quad.rawValue.getter();
  unint64_t v2 = v1;
  uint64_t v3 = Quad.rawValue.getter();
  unint64_t v5 = v4;
  char v6 = specialized static Data.== infix(_:_:)(v0, v2, v3, v4);
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v6 & 1;
}

double protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance Quad@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Quad@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Quad.init(rawValue:)(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Quad@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Quad.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

__n128 protocol witness for CRType.copy(renamingReferences:) in conformance Quad@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  long long v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Quad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type Quad and conformance Quad();
  unint64_t v7 = lazy protocol witness table accessor for type Quad and conformance Quad();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Quad()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Quad()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Quad(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Quad and conformance Quad();
  unint64_t v3 = lazy protocol witness table accessor for type Quad and conformance Quad();
  uint64_t v4 = MEMORY[0x263F32BD8];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  unint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  unint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      unint64_t v3 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      unint64_t v3 = (void *)swift_allocObject();
      uint64_t v4 = _swift_stdlib_malloc_size(v3);
      unint64_t v5 = v4 - 32;
      if (v4 < 32) {
        unint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    uint64_t v1 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, (uint64_t)(v3 + 4), v2, v1);
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, MEMORY[0x263F8DC70]);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for ReflowElement);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for CanvasElementResizeHandle);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for ShapeView);
}

{
  unint64_t v4;
  uint64_t v5;
  void *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  uint64_t v4 = a4 >> 1;
  unint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    if (v5 <= 0)
    {
      uint64_t v8 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0) {
          goto LABEL_17;
        }
        uint64_t v10 = a2 + 168 * a3;
        if (v10 < (unint64_t)&v8[21 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 168 * v5) {
          goto LABEL_17;
        }
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
      uint64_t v8 = (void *)swift_allocObject();
      uint64_t v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 168);
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  __n128 result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for SynapseLinkItem);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
    uint64_t v4 = 8 * a2;
    unint64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 3);
    uint64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
    uint64_t v4 = 4 * a2;
    unint64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 29;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 2);
    uint64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 4 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  unint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  int64_t v6 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      void v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      specialized Sequence._copySequenceContents(initializing:)(&v11, (char *)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      if (v10 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v4 <= 0)
    {
      unint64_t v5 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      unint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v5;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, char *, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a3) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (result - v10 != 0x8000000000000000 || v9 != -1)
    {
      v11[2] = v4;
      v11[3] = 2 * ((uint64_t)(result - v10) / v9);
      uint64_t v14 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a3) - 8);
      uint64_t v15 = a4(&v16, (char *)v11+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), v4, a1);
      swift_bridgeObjectRetain();
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      if (v15 == v4) {
        return (size_t)v11;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void))
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v10 = v6;
    if (v6 <= 0)
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      if (v5 != a3)
      {
LABEL_7:
        if (v6 < 0) {
          goto LABEL_19;
        }
        unint64_t v14 = a2 + 8 * a3;
        if (v14 < (unint64_t)&v11[v10 + 4] && (unint64_t)(v11 + 4) < v14 + v10 * 8) {
          goto LABEL_19;
        }
        a5(0);
        swift_arrayInitWithCopy();
        return (uint64_t)v11;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v6;
      v11[3] = (2 * (v13 >> 3)) | 1;
      if (v5 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for Insecure.MD5();
      _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, 255, MEMORY[0x263F04840]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned char *closure #1 in Data.init<A>(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x20C4540A0);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  outlined copy of Data._Representation(a3, a4);
                  outlined copy of Data._Representation(a1, a2);
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  outlined copy of Data._Representation(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v21, v22, v20, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              outlined consume of Data._Representation(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  unint64_t v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  unint64_t v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t specialized PKStrokeMaskStruct.__allocating_init(rawValue:)(uint64_t a1, unint64_t a2)
{
  type metadata accessor for PKStrokeMaskStruct();
  uint64_t v4 = swift_allocObject();
  id v5 = objc_allocWithZone(MEMORY[0x263F14BB8]);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(v5, sel_initWithRawValue_, isa);
  outlined consume of Data._Representation(a1, a2);

  if (v7)
  {
    type metadata accessor for PKStrokeMaskWrapper();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    *(void *)(v4 + 16) = v8;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v4;
}

uint64_t type metadata accessor for PKStrokeMaskStruct()
{
  return self;
}

uint64_t type metadata accessor for PKStrokeMaskWrapper()
{
  return self;
}

uint64_t specialized PKStrokeMaskStruct.__allocating_init(from:)(void *a1)
{
  uint64_t v3 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    id v5 = objc_allocWithZone(MEMORY[0x263F14BB8]);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v7 = objc_msgSend(v5, sel_initWithRawValue_, isa);
    outlined consume of Data._Representation(v10, v11);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    if (v7)
    {
      type metadata accessor for PKStrokeMaskWrapper();
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v7;
      type metadata accessor for PKStrokeMaskStruct();
      uint64_t v3 = swift_allocObject();
      *(void *)(v3 + 16) = v8;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return v3;
    }
    uint64_t v3 = type metadata accessor for CRCodingError();
    _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, 255, MEMORY[0x263F32D80]);
    swift_allocError();
    void *v9 = 0x2E6B73616D206F4ELL;
    v9[1] = 0xE800000000000000;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v9, *MEMORY[0x263F32D70], v3);
    swift_willThrow();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t specialized CGRect.init(rawValue:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unint64_t v4 = a2 >> 62;
  char v5 = 1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result)) {
        goto LABEL_45;
      }
      uint64_t v10 = (int)v10;
LABEL_6:
      if (v10 == 32)
      {
        if (v4)
        {
          if (v4 != 1)
          {
            uint64_t v24 = *(void *)(result + 16);
            uint64_t v25 = *(void *)(result + 24);
            swift_retain();
            swift_retain();
            uint64_t v26 = (char *)__DataStorage._bytes.getter();
            if (v26)
            {
              uint64_t v27 = __DataStorage._offset.getter();
              if (__OFSUB__(v24, v27)) {
                goto LABEL_50;
              }
              v26 += v24 - v27;
            }
            BOOL v13 = __OFSUB__(v25, v24);
            uint64_t v28 = v25 - v24;
            if (v13) {
              goto LABEL_48;
            }
            uint64_t v29 = __DataStorage._length.getter();
            if (v26)
            {
              if (v29 >= v28) {
                uint64_t v30 = v28;
              }
              else {
                uint64_t v30 = v29;
              }
              uint64_t v31 = v30 / 8;
            }
            else
            {
              uint64_t v31 = 0;
            }
            uint64_t v32 = specialized _copyCollectionToContiguousArray<A>(_:)(v26, v31);
            swift_release();
            swift_release();
            int64_t v33 = *(void *)(v32 + 16);
            if (v33)
            {
LABEL_28:
              uint64_t v40 = (void *)MEMORY[0x263F8EE78];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
              uint64_t v34 = 0;
              unint64_t v35 = v40;
              do
              {
                unint64_t v36 = _OSSwapInt64(*(void *)(v32 + 8 * v34 + 32));
                uint64_t v40 = v35;
                unint64_t v38 = v35[2];
                unint64_t v37 = v35[3];
                if (v38 >= v37 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
                  unint64_t v35 = v40;
                }
                ++v34;
                v35[2] = v38 + 1;
                v35[v38 + 4] = v36;
              }
              while (v33 != v34);
              swift_bridgeObjectRelease();
              unint64_t v39 = v35[2];
              if (v39)
              {
LABEL_33:
                if (v39 != 1)
                {
                  if (v39 >= 3)
                  {
                    if (v39 != 3)
                    {
                      uint64_t v6 = v35[4];
                      uint64_t v7 = v35[5];
                      uint64_t v8 = v35[6];
                      uint64_t v9 = v35[7];
                      unint64_t result = swift_bridgeObjectRelease();
                      char v5 = 0;
                      goto LABEL_37;
                    }
                    goto LABEL_44;
                  }
LABEL_43:
                  __break(1u);
LABEL_44:
                  __break(1u);
LABEL_45:
                  __break(1u);
LABEL_46:
                  __break(1u);
                  goto LABEL_47;
                }
LABEL_42:
                __break(1u);
                goto LABEL_43;
              }
LABEL_41:
              __break(1u);
              goto LABEL_42;
            }
LABEL_40:
            swift_bridgeObjectRelease();
            unint64_t v35 = (void *)MEMORY[0x263F8EE78];
            unint64_t v39 = *(void *)(MEMORY[0x263F8EE78] + 16);
            if (v39) {
              goto LABEL_33;
            }
            goto LABEL_41;
          }
          uint64_t v14 = (int)result;
          uint64_t v15 = (result >> 32) - (int)result;
          if (result >> 32 < (int)result)
          {
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
            goto LABEL_49;
          }
          uint64_t v16 = __DataStorage._bytes.getter();
          if (v16)
          {
            uint64_t v17 = v16;
            uint64_t v18 = __DataStorage._offset.getter();
            BOOL v13 = __OFSUB__(v14, v18);
            uint64_t v19 = v14 - v18;
            if (v13)
            {
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
            }
            uint64_t v20 = __DataStorage._length.getter();
            uint64_t v21 = (char *)(v17 + v19);
            if (v20 >= v15) {
              uint64_t v20 = v15;
            }
            uint64_t v22 = v20 / 8;
          }
          else
          {
            __DataStorage._length.getter();
            uint64_t v21 = 0;
            uint64_t v22 = 0;
          }
        }
        else
        {
          uint64_t v40 = (void *)result;
          __int16 v41 = a2;
          char v42 = BYTE2(a2);
          char v43 = BYTE3(a2);
          unint64_t v23 = a2 >> 40;
          char v44 = BYTE4(a2);
          uint64_t v22 = (a2 >> 51) & 0x1F;
          char v45 = v23;
          uint64_t v21 = (char *)&v40;
        }
        uint64_t v32 = specialized _copyCollectionToContiguousArray<A>(_:)(v21, v22);
        int64_t v33 = *(void *)(v32 + 16);
        if (v33) {
          goto LABEL_28;
        }
        goto LABEL_40;
      }
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      char v5 = 1;
LABEL_37:
      *(void *)a3 = v6;
      *(void *)(a3 + 8) = v7;
      *(void *)(a3 + 16) = v8;
      *(void *)(a3 + 24) = v9;
      *(unsigned char *)(a3 + 32) = v5;
      return result;
    case 2uLL:
      uint64_t v12 = *(void *)(result + 16);
      uint64_t v11 = *(void *)(result + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_46;
    case 3uLL:
      goto LABEL_37;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t CFConvertDoubleHostToSwapped(double a1)
{
  return bswap64(*(unint64_t *)&a1);
}

uint64_t specialized CGPoint.init(rawValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unint64_t v2 = a2 >> 62;
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_41;
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 16)
      {
        if (v2)
        {
          if (v2 != 1)
          {
            uint64_t v18 = *(void *)(a1 + 16);
            uint64_t v19 = *(void *)(a1 + 24);
            swift_retain();
            swift_retain();
            uint64_t v20 = (char *)__DataStorage._bytes.getter();
            if (v20)
            {
              uint64_t v21 = __DataStorage._offset.getter();
              if (__OFSUB__(v18, v21)) {
                goto LABEL_46;
              }
              v20 += v18 - v21;
            }
            BOOL v7 = __OFSUB__(v19, v18);
            uint64_t v22 = v19 - v18;
            if (v7) {
              goto LABEL_44;
            }
            uint64_t v23 = __DataStorage._length.getter();
            if (v20)
            {
              if (v23 >= v22) {
                uint64_t v24 = v22;
              }
              else {
                uint64_t v24 = v23;
              }
              uint64_t v25 = v24 / 8;
            }
            else
            {
              uint64_t v25 = 0;
            }
            uint64_t v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v20, v25);
            swift_release();
            swift_release();
            int64_t v27 = *(void *)(v26 + 16);
            if (v27)
            {
LABEL_28:
              unint64_t v35 = (void *)MEMORY[0x263F8EE78];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
              uint64_t v28 = 0;
              uint64_t v29 = v35;
              do
              {
                unint64_t v30 = _OSSwapInt64(*(void *)(v26 + 8 * v28 + 32));
                unint64_t v35 = v29;
                unint64_t v32 = v29[2];
                unint64_t v31 = v29[3];
                if (v32 >= v31 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
                  uint64_t v29 = v35;
                }
                ++v28;
                v29[2] = v32 + 1;
                v29[v32 + 4] = v30;
              }
              while (v27 != v28);
              swift_bridgeObjectRelease();
              uint64_t v33 = v29[2];
              if (v33)
              {
LABEL_33:
                if (v33 != 1)
                {
                  uint64_t v3 = v29[4];
                  swift_bridgeObjectRelease();
                  return v3;
                }
                goto LABEL_40;
              }
LABEL_39:
              __break(1u);
LABEL_40:
              __break(1u);
LABEL_41:
              __break(1u);
LABEL_42:
              __break(1u);
              goto LABEL_43;
            }
LABEL_38:
            swift_bridgeObjectRelease();
            uint64_t v29 = (void *)MEMORY[0x263F8EE78];
            uint64_t v33 = *(void *)(MEMORY[0x263F8EE78] + 16);
            if (v33) {
              goto LABEL_33;
            }
            goto LABEL_39;
          }
          uint64_t v8 = (int)a1;
          uint64_t v9 = (a1 >> 32) - (int)a1;
          if (a1 >> 32 < (int)a1)
          {
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          uint64_t v10 = __DataStorage._bytes.getter();
          if (v10)
          {
            uint64_t v11 = v10;
            uint64_t v12 = __DataStorage._offset.getter();
            BOOL v7 = __OFSUB__(v8, v12);
            uint64_t v13 = v8 - v12;
            if (v7)
            {
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
            }
            uint64_t v14 = __DataStorage._length.getter();
            uint64_t v15 = (char *)(v11 + v13);
            if (v14 >= v9) {
              uint64_t v14 = v9;
            }
            uint64_t v16 = v14 / 8;
          }
          else
          {
            __DataStorage._length.getter();
            uint64_t v15 = 0;
            uint64_t v16 = 0;
          }
        }
        else
        {
          unint64_t v35 = (void *)a1;
          __int16 v36 = a2;
          char v37 = BYTE2(a2);
          char v38 = BYTE3(a2);
          unint64_t v17 = a2 >> 40;
          char v39 = BYTE4(a2);
          uint64_t v16 = (a2 >> 51) & 0x1F;
          char v40 = v17;
          uint64_t v15 = (char *)&v35;
        }
        uint64_t v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v15, v16);
        int64_t v27 = *(void *)(v26 + 16);
        if (v27) {
          goto LABEL_28;
        }
        goto LABEL_38;
      }
      return 0;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_42;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized CGAffineTransform.init(rawValue:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  unint64_t v4 = a2 >> 62;
  char v5 = 1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v12) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result)) {
        goto LABEL_49;
      }
      uint64_t v12 = (int)v12;
LABEL_6:
      if (v12 == 48)
      {
        if (v4)
        {
          if (v4 != 1)
          {
            uint64_t v26 = *(void *)(result + 16);
            uint64_t v27 = *(void *)(result + 24);
            swift_retain();
            swift_retain();
            uint64_t v28 = (char *)__DataStorage._bytes.getter();
            if (v28)
            {
              uint64_t v29 = __DataStorage._offset.getter();
              if (__OFSUB__(v26, v29)) {
                goto LABEL_54;
              }
              v28 += v26 - v29;
            }
            BOOL v15 = __OFSUB__(v27, v26);
            uint64_t v30 = v27 - v26;
            if (v15) {
              goto LABEL_52;
            }
            uint64_t v31 = __DataStorage._length.getter();
            if (v28)
            {
              if (v31 >= v30) {
                uint64_t v32 = v30;
              }
              else {
                uint64_t v32 = v31;
              }
              uint64_t v33 = v32 / 8;
            }
            else
            {
              uint64_t v33 = 0;
            }
            uint64_t v34 = specialized _copyCollectionToContiguousArray<A>(_:)(v28, v33);
            swift_release();
            swift_release();
            int64_t v35 = *(void *)(v34 + 16);
            if (v35)
            {
LABEL_28:
              char v42 = (void *)MEMORY[0x263F8EE78];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35, 0);
              uint64_t v36 = 0;
              char v37 = v42;
              do
              {
                unint64_t v38 = _OSSwapInt64(*(void *)(v34 + 8 * v36 + 32));
                char v42 = v37;
                unint64_t v40 = v37[2];
                unint64_t v39 = v37[3];
                if (v40 >= v39 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
                  char v37 = v42;
                }
                ++v36;
                v37[2] = v40 + 1;
                v37[v40 + 4] = v38;
              }
              while (v35 != v36);
              swift_bridgeObjectRelease();
              unint64_t v41 = v37[2];
              if (v41)
              {
LABEL_33:
                if (v41 != 1)
                {
                  if (v41 >= 3)
                  {
                    if (v41 != 3)
                    {
                      if (v41 >= 5)
                      {
                        if (v41 != 5)
                        {
                          uint64_t v6 = v37[4];
                          uint64_t v7 = v37[5];
                          uint64_t v8 = v37[6];
                          uint64_t v9 = v37[7];
                          uint64_t v10 = v37[8];
                          uint64_t v11 = v37[9];
                          unint64_t result = swift_bridgeObjectRelease();
                          char v5 = 0;
                          goto LABEL_39;
                        }
                        goto LABEL_48;
                      }
LABEL_47:
                      __break(1u);
LABEL_48:
                      __break(1u);
LABEL_49:
                      __break(1u);
LABEL_50:
                      __break(1u);
                      goto LABEL_51;
                    }
LABEL_46:
                    __break(1u);
                    goto LABEL_47;
                  }
LABEL_45:
                  __break(1u);
                  goto LABEL_46;
                }
LABEL_44:
                __break(1u);
                goto LABEL_45;
              }
LABEL_43:
              __break(1u);
              goto LABEL_44;
            }
LABEL_42:
            swift_bridgeObjectRelease();
            char v37 = (void *)MEMORY[0x263F8EE78];
            unint64_t v41 = *(void *)(MEMORY[0x263F8EE78] + 16);
            if (v41) {
              goto LABEL_33;
            }
            goto LABEL_43;
          }
          uint64_t v16 = (int)result;
          uint64_t v17 = (result >> 32) - (int)result;
          if (result >> 32 < (int)result)
          {
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          uint64_t v18 = __DataStorage._bytes.getter();
          if (v18)
          {
            uint64_t v19 = v18;
            uint64_t v20 = __DataStorage._offset.getter();
            BOOL v15 = __OFSUB__(v16, v20);
            uint64_t v21 = v16 - v20;
            if (v15)
            {
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
            }
            uint64_t v22 = __DataStorage._length.getter();
            uint64_t v23 = (char *)(v19 + v21);
            if (v22 >= v17) {
              uint64_t v22 = v17;
            }
            uint64_t v24 = v22 / 8;
          }
          else
          {
            __DataStorage._length.getter();
            uint64_t v23 = 0;
            uint64_t v24 = 0;
          }
        }
        else
        {
          char v42 = (void *)result;
          __int16 v43 = a2;
          char v44 = BYTE2(a2);
          char v45 = BYTE3(a2);
          unint64_t v25 = a2 >> 40;
          char v46 = BYTE4(a2);
          uint64_t v24 = (a2 >> 51) & 0x1F;
          char v47 = v25;
          uint64_t v23 = (char *)&v42;
        }
        uint64_t v34 = specialized _copyCollectionToContiguousArray<A>(_:)(v23, v24);
        int64_t v35 = *(void *)(v34 + 16);
        if (v35) {
          goto LABEL_28;
        }
        goto LABEL_42;
      }
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      char v5 = 1;
LABEL_39:
      *(void *)a3 = v6;
      *(void *)(a3 + 8) = v7;
      *(void *)(a3 + 16) = v8;
      *(void *)(a3 + 24) = v9;
      *(void *)(a3 + 32) = v10;
      *(void *)(a3 + 40) = v11;
      *(unsigned char *)(a3 + 48) = v5;
      return result;
    case 2uLL:
      uint64_t v14 = *(void *)(result + 16);
      uint64_t v13 = *(void *)(result + 24);
      BOOL v15 = __OFSUB__(v13, v14);
      uint64_t v12 = v13 - v14;
      if (!v15) {
        goto LABEL_6;
      }
      goto LABEL_50;
    case 3uLL:
      goto LABEL_39;
    default:
      uint64_t v12 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t lazy protocol witness table accessor for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane.CodingKeys and conformance PKStrokeClipPlane.CodingKeys);
  }
  return result;
}

uint64_t base witness table accessor for CRType in PKStrokeMaskStruct(uint64_t a1, uint64_t a2)
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, a2, (void (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct);
}

uint64_t base witness table accessor for CRCodable in PKStrokeMaskStruct(uint64_t a1, uint64_t a2)
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, a2, (void (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct);
}

uint64_t base witness table accessor for CRType in PKInk()
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKInk and conformance PKInk, 255, (void (*)(uint64_t))type metadata accessor for PKInk);
}

unint64_t type metadata accessor for PKInk()
{
  unint64_t result = lazy cache variable for type metadata for PKInk;
  if (!lazy cache variable for type metadata for PKInk)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PKInk);
  }
  return result;
}

uint64_t base witness table accessor for CRCodable in PKInk()
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type PKInk and conformance PKInk, 255, (void (*)(uint64_t))type metadata accessor for PKInk);
}

uint64_t base witness table accessor for CRType in CGPoint()
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, type metadata accessor for CGPoint);
}

uint64_t base witness table accessor for CRCodable in CGPoint()
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, 255, type metadata accessor for CGPoint);
}

uint64_t base witness table accessor for CRType in CGSize()
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, type metadata accessor for CGSize);
}

uint64_t base witness table accessor for CRCodable in CGSize()
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, type metadata accessor for CGSize);
}

uint64_t base witness table accessor for CRType in CGAffineTransform()
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, type metadata accessor for CGAffineTransform);
}

uint64_t base witness table accessor for CRCodable in CGAffineTransform()
{
  return _sSo7CGPointVABSE12CoreGraphicsWlTm_0(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, 255, type metadata accessor for CGAffineTransform);
}

uint64_t ObjC metadata update function for PKDrawingUUIDKeyPath()
{
  return type metadata accessor for PKDrawingUUIDKeyPath();
}

uint64_t type metadata accessor for PKDrawingUUIDKeyPath()
{
  uint64_t result = type metadata singleton initialization cache for PKDrawingUUIDKeyPath;
  if (!type metadata singleton initialization cache for PKDrawingUUIDKeyPath) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PKDrawingUUIDKeyPath()
{
  uint64_t result = type metadata accessor for CRKeyPath();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PKStrokeMaskStruct(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PKStrokeMaskStruct);
}

uint64_t dispatch thunk of PKStrokeMaskStruct.__allocating_init(rawValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PKStrokeMaskStruct.rawValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PKStrokeMaskStruct.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of PKStrokeMaskStruct.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

ValueMetadata *type metadata accessor for PKStrokeClipPlane()
{
  return &type metadata for PKStrokeClipPlane;
}

unsigned char *storeEnumTagSinglePayload for PKStrokeClipPlane.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C4557ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PKStrokeClipPlane.CodingKeys()
{
  return &unk_26C155D48;
}

uint64_t specialized PKStrokeClipPlane.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E696769726FLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616D726F6ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

unint64_t _OSSwapInt64(unint64_t a1)
{
  return bswap64(a1);
}

uint64_t CanvasAttachment.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v10);
  if (!v11)
  {
    outlined destroy of Any?((uint64_t)v10);
    goto LABEL_7;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    char v7 = 0;
    return v7 & 1;
  }
  if (*(void *)(v1 + OBJC_IVAR____TtC8PaperKit16CanvasAttachment_type) != *(void *)&v9[OBJC_IVAR____TtC8PaperKit16CanvasAttachment_type])
  {

    goto LABEL_7;
  }
  type metadata accessor for CGPathRef(0);
  int v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit16CanvasAttachment_boundingPath);
  unsigned int v4 = *(void **)&v9[OBJC_IVAR____TtC8PaperKit16CanvasAttachment_boundingPath];
  lazy protocol witness table accessor for type CGPathRef and conformance CGPathRef();
  id v5 = v3;
  id v6 = v4;
  char v7 = static _CFObject.== infix(_:_:)();

  return v7 & 1;
}

uint64_t type metadata accessor for CanvasAttachment()
{
  return self;
}

uint64_t CanvasAttachmentProvider.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v17);
  if (!v18)
  {
    outlined destroy of Any?((uint64_t)v17);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    unsigned __int8 v14 = 0;
    return v14 & 1;
  }
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit24CanvasAttachmentProvider_paperkitAttachments;
  unint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit24CanvasAttachmentProvider_paperkitAttachments);
  if (!(v5 >> 62))
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
    unint64_t v6 = v5;
LABEL_5:
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHCanvasAttachment);
  unint64_t v6 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!(v6 >> 62)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRelease();
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit24CanvasAttachmentProvider_paperkitAttachments;
  unint64_t v9 = *(void *)&v16[OBJC_IVAR____TtC8PaperKit24CanvasAttachmentProvider_paperkitAttachments];
  if (!(v9 >> 62))
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
    unint64_t v10 = v9;
LABEL_8:
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHCanvasAttachment);
  unint64_t v10 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!(v10 >> 62)) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  swift_bridgeObjectRelease();
  if (v7 != v11)
  {

    goto LABEL_13;
  }
  unint64_t v12 = *(void *)(v2 + v4);
  uint64_t v13 = *(void *)&v16[v8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned __int8 v14 = specialized static Array<A>.== infix(_:_:)(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v14 & 1;
}

uint64_t @objc CanvasAttachment.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  outlined destroy of Any?((uint64_t)v10);
  return v8 & 1;
}

uint64_t type metadata accessor for CanvasAttachmentProvider()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type CGPathRef and conformance CGPathRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef;
  if (!lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef)
  {
    type metadata accessor for CGPathRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef);
  }
  return result;
}

uint64_t PDFAnnotation.quadPoints.getter()
{
  if (objc_msgSend(v0, sel_valueForAnnotationKey_, *MEMORY[0x263F147A8]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  outlined init with take of Any?((uint64_t)v15, (uint64_t)v16);
  if (!v16[3])
  {
    outlined destroy of Any?((uint64_t)v16);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSValue]);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  if (!(v14 >> 62))
  {
    uint64_t v1 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v1) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v1)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
LABEL_8:
  v16[0] = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1 & ~(v1 >> 63), 0);
  if ((v1 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v16[0];
    do
    {
      if ((v14 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x21054E050](v3);
      }
      else {
        id v5 = *(id *)(v14 + 8 * v3 + 32);
      }
      id v6 = v5;
      objc_msgSend(v5, sel_CGPointValue);
      uint64_t v8 = v7;
      uint64_t v10 = v9;

      v16[0] = v4;
      unint64_t v12 = *(void *)(v4 + 16);
      unint64_t v11 = *(void *)(v4 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v4 = v16[0];
      }
      ++v3;
      *(void *)(v4 + 16) = v12 + 1;
      uint64_t v13 = v4 + 16 * v12;
      *(void *)(v13 + 32) = v8;
      *(void *)(v13 + 40) = v10;
    }
    while (v1 != v3);
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

void PDFAnnotation.quadPoints.setter(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v4 = self;
      id v5 = (double *)(a1 + 40);
      do
      {
        id v6 = objc_msgSend(v4, sel_valueWithCGPoint_, *(v5 - 1), *v5);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v5 += 2;
        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for NSValue();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setValue_forAnnotationKey_, isa, *MEMORY[0x263F147A8]);
  }
  else
  {
    uint64_t v7 = *MEMORY[0x263F147A8];
    objc_msgSend(v1, sel_removeValueForAnnotationKey_, v7);
  }
}

Swift::Bool __swiftcall PDFAnnotation.shouldMirrorAsPDFAnnotationElement()()
{
  if (objc_msgSend(v0, sel_valueForAnnotationKey_, *MEMORY[0x263F147B0]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v39, 0, sizeof(v39));
  }
  outlined init with take of Any?((uint64_t)v39, (uint64_t)v40);
  if (!v41)
  {
    outlined destroy of Any?((uint64_t)v40);
    goto LABEL_16;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    char v12 = 0;
    return v12 & 1;
  }
  uint64_t v1 = (void *)MEMORY[0x21054D080]();
  swift_bridgeObjectRelease();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5) {
    goto LABEL_13;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_14:

    char v12 = 1;
    return v12 & 1;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11) {
    goto LABEL_13;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_14;
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18) {
    goto LABEL_13;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_14;
  }
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23) {
    goto LABEL_13;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_14;
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28) {
    goto LABEL_13;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v29) {
    goto LABEL_14;
  }
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;
  if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v32 == v33)
  {
LABEL_13:
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v34) {
    goto LABEL_14;
  }
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;
  if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v37 == v38) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

unint64_t type metadata accessor for NSValue()
{
  unint64_t result = lazy cache variable for type metadata for NSValue;
  if (!lazy cache variable for type metadata for NSValue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSValue);
  }
  return result;
}

uint64_t PKStrokePathStruct.path.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PKStrokePath();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t PKStrokePathStruct.path.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PKStrokePath();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*PKStrokePathStruct.path.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PKStrokePathStruct.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for PKStrokePath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v80 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v74 = (char *)v61 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?));
  uint64_t v77 = *(void *)(v10 - 8);
  uint64_t v78 = v10;
  MEMORY[0x270FA5388](v10);
  id v75 = (void *)((char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  id v79 = (void *)((char *)v61 - v13);
  MEMORY[0x270FA5388](v14);
  id v76 = (void *)((char *)v61 - v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (void *)((char *)v61 - v17);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  double v71 = (char *)v61 - v23;
  dispatch thunk of CRDecoder.crdtContainer()();
  if (v2) {
    return swift_release();
  }
  uint64_t v24 = dispatch thunk of CRDecoder.CRDTContainer.decodeCustomSiblings()();
  swift_release();
  uint64_t v70 = v6;
  unint64_t v73 = *(void *)(v24 + 16);
  if (!v73)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v25 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
  uint64_t v62 = v24;
  unint64_t v72 = v24 + v25;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v24 + v25, (uint64_t)v18, &demangling cache variable for type metadata for (Data, CRVersion?));
  uint64_t v27 = *v18;
  uint64_t v26 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v18[1];
  id v28 = objc_allocWithZone(MEMORY[0x263F14BC0]);
  CGAffineTransform v69 = v26;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v30 = objc_msgSend(v28, sel_initWithRawValue_, isa);

  if (v30)
  {
    id v31 = v30;
    uint64_t v68 = v27;
    uint64_t v32 = v71;
    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();
    outlined consume of Data._Representation(v68, (unint64_t)v69);

    uint64_t v33 = v70;
    char v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
    uint64_t v35 = v32;
    uint64_t v36 = 0;
  }
  else
  {
    outlined consume of Data._Representation(v27, (unint64_t)v69);
    uint64_t v33 = v70;
    uint64_t v32 = v71;
    char v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
    uint64_t v35 = v71;
    uint64_t v36 = 1;
  }
  CGAffineTransform v69 = v34;
  v34(v35, v36, 1, v5);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18 + *(int *)(v78 + 48), (uint64_t *)&demangling cache variable for type metadata for CRVersion?);
  uint64_t v70 = *(void *)(v33 + 48);
  double v71 = (char *)(v33 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v70)(v32, 1, v5) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(a2, v32, v5);
    unint64_t v37 = v73;
    if (*(void *)(v62 + 16) < v73) {
      goto LABEL_20;
    }
    if (v73 != 1)
    {
      v61[1] = 0;
      v61[2] = a1;
      uint64_t v68 = (uint64_t)v76 + *(int *)(v78 + 48);
      uint64_t v66 = v33 + 56;
      double v67 = (void (**)(char *, uint64_t, uint64_t))(v33 + 16);
      id v63 = (void (**)(char *, uint64_t))(v33 + 8);
      long long v64 = (void (**)(uint64_t, char *, uint64_t))(v33 + 40);
      uint64_t v38 = 1;
      uint64_t v65 = a2;
      while (v37 != v38)
      {
        unint64_t v39 = v76;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v72 + *(void *)(v77 + 72) * v38, (uint64_t)v76, &demangling cache variable for type metadata for (Data, CRVersion?));
        uint64_t v41 = v78;
        unint64_t v40 = v79;
        uint64_t v42 = (uint64_t)v79 + *(int *)(v78 + 48);
        uint64_t v43 = *v39;
        unint64_t v44 = v39[1];
        *id v79 = v43;
        v40[1] = v44;
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v68, v42, (uint64_t *)&demangling cache variable for type metadata for CRVersion?);
        (*v67)(v80, a2, v5);
        uint64_t v45 = *(int *)(v41 + 48);
        char v46 = v75;
        uint64_t v47 = (uint64_t)v75 + v45;
        *id v75 = v43;
        v46[1] = v44;
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v42, (uint64_t)v46 + v45, (uint64_t *)&demangling cache variable for type metadata for CRVersion?);
        id v48 = objc_allocWithZone(MEMORY[0x263F14BC0]);
        outlined copy of Data._Representation(v43, v44);
        Class v49 = Data._bridgeToObjectiveC()().super.isa;
        id v50 = objc_msgSend(v48, sel_initWithRawValue_, v49);

        if (v50)
        {
          id v51 = v50;
          static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();
          outlined consume of Data._Representation(v43, v44);

          uint64_t v52 = v21;
          uint64_t v53 = 0;
        }
        else
        {
          outlined consume of Data._Representation(v43, v44);
          uint64_t v52 = v21;
          uint64_t v53 = 1;
        }
        v69(v52, v53, 1, v5);
        outlined destroy of StocksKitCurrencyCache.Provider?(v47, (uint64_t *)&demangling cache variable for type metadata for CRVersion?);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v70)(v21, 1, v5) == 1) {
          goto LABEL_21;
        }
        ++v38;
        uint64_t v54 = v80;
        Class v55 = PKStrokePath._bridgeToObjectiveC()().super.isa;
        Class v56 = PKStrokePath._bridgeToObjectiveC()().super.isa;
        id v57 = [(objc_class *)v55 dataApplying:v56];

        char v58 = v74;
        static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

        id v59 = *v63;
        (*v63)(v54, v5);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v79, &demangling cache variable for type metadata for (Data, CRVersion?));
        v59(v21, v5);
        a2 = v65;
        (*v64)(v65, v58, v5);
        unint64_t v37 = v73;
        if (v73 == v38) {
          goto LABEL_16;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_22:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for versionUUID()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  __swift_allocate_value_buffer(v3, static PKStrokePathStruct.versionUUID);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static PKStrokePathStruct.versionUUID);
  UUID.init(uuidString:)();
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

void PKStrokePathStruct.encode(to:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRVersion?);
  MEMORY[0x270FA5388](v0 - 8);
  unint64_t v25 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexSet?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CRVersion();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CRVersion.init()();
  if (one-time initialization token for versionUUID != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v5, (uint64_t)static PKStrokePathStruct.versionUUID);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, v5);
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  unint64_t v15 = (unint64_t)[(objc_class *)isa _immutablePointsCount];

  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    IndexSet.init(integersIn:)();
    uint64_t v16 = type metadata accessor for IndexSet();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 0, 1, v16);
    CRVersion.subscript.setter();
    uint64_t v17 = v26;
    dispatch thunk of CREncoder.crdtContainer()();
    if (!v17)
    {
      Class v18 = PKStrokePath._bridgeToObjectiveC()().super.isa;
      id v19 = [(objc_class *)v18 rawValue];

      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      uint64_t v23 = (uint64_t)v25;
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v25, v12, v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      dispatch thunk of CREncoder.CRDTContainer.encodeCustom(_:version:)();
      outlined consume of Data._Representation(v20, v22);
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v23, (uint64_t *)&demangling cache variable for type metadata for CRVersion?);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

uint64_t PKStrokePathStruct.merge(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v24 - v8;
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v11 = [(objc_class *)isa _immutablePointsCount];

  Class v12 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v13 = [(objc_class *)v12 _immutablePointsCount];

  outlined init with copy of PKStrokePathStruct(a1, (uint64_t)v9);
  if ((uint64_t)v13 < (uint64_t)v11)
  {
    outlined destroy of PKStrokePathStruct((uint64_t)v9);
LABEL_5:
    uint64_t v23 = type metadata accessor for PKStrokePath();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 24))(v2, a1, v23);
  }
  Class v14 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v15 = [(objc_class *)v14 _immutablePointsCount];

  Class v16 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v17 = [(objc_class *)v16 _immutablePointsCount];

  outlined init with copy of PKStrokePathStruct((uint64_t)v9, (uint64_t)v6);
  if (v15 == v17)
  {
    Class v18 = PKStrokePath._bridgeToObjectiveC()().super.isa;
    id v19 = [(objc_class *)v18 count];

    Class v20 = PKStrokePath._bridgeToObjectiveC()().super.isa;
    id v21 = [(objc_class *)v20 count];

    outlined destroy of PKStrokePathStruct((uint64_t)v6);
    uint64_t result = outlined destroy of PKStrokePathStruct((uint64_t)v9);
    if ((uint64_t)v21 >= (uint64_t)v19) {
      return result;
    }
    goto LABEL_5;
  }
  outlined destroy of PKStrokePathStruct((uint64_t)v6);
  return outlined destroy of PKStrokePathStruct((uint64_t)v9);
}

uint64_t type metadata accessor for PKStrokePathStruct(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokePathStruct);
}

uint64_t outlined init with copy of PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokePathStruct(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PKStrokePathStruct(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PKStrokePathStruct(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PKStrokePathStruct.Partial.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?)?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of CRDecoder.crdtContainer()();
  if (v1) {
    return swift_release();
  }
  uint64_t v9 = dispatch thunk of CRDecoder.CRDTContainer.decodeCustomSiblings()();
  uint64_t result = swift_release();
  if (*(void *)(v9 + 16) != 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?));
  uint64_t v12 = *(void *)(v11 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v9 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), (uint64_t)v5, &demangling cache variable for type metadata for (Data, CRVersion?));
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(v5, 0, 1, v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?));
  Class v14 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v13 - 8) + 48);
  uint64_t v24 = v13;
  uint64_t result = v14(v5, 1);
  if (result == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v15 = *v5;
  unint64_t v16 = v5[1];
  id v17 = objc_allocWithZone(MEMORY[0x263F14BC0]);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v19 = objc_msgSend(v17, sel_initWithRawValue_, isa);

  if (v19)
  {
    id v20 = v19;
    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();
    outlined consume of Data._Representation(v15, v16);

    uint64_t v21 = type metadata accessor for PKStrokePath();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 0, 1, v21);
  }
  else
  {
    outlined consume of Data._Representation(v15, v16);
    uint64_t v21 = type metadata accessor for PKStrokePath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 1, 1, v21);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5 + *(int *)(v24 + 48), (uint64_t *)&demangling cache variable for type metadata for CRVersion?);
  type metadata accessor for PKStrokePath();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, v21);
  if (result != 1)
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(a1, v8, v21);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t PKStrokePathStruct.Partial.encode(to:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRVersion?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = dispatch thunk of CREncoder.crdtContainer()();
  if (!v0)
  {
    Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
    id v6 = [(objc_class *)isa rawValue];

    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    CRVersion.init()();
    uint64_t v10 = type metadata accessor for CRVersion();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 0, 1, v10);
    dispatch thunk of CREncoder.CRDTContainer.encodeCustom(_:version:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for CRVersion?);
    outlined consume of Data._Representation(v7, v9);
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokePathStruct.Partial@<X0>(uint64_t a1@<X8>)
{
  return PKStrokePathStruct.Partial.init(from:)(a1);
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokePathStruct.Partial()
{
  return PKStrokePathStruct.Partial.encode(to:)();
}

uint64_t PKStrokePathStruct.delta(_:from:)@<X0>(char *a1@<X8>)
{
  return PKStrokePathStruct.partialCRDT(from:)(a1);
}

uint64_t PKStrokePathStruct.partialCRDT(from:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = type metadata accessor for PKStrokePath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  Class v13 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v14 = [(objc_class *)isa deltaTo:v13];

  if (v14)
  {
    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v4, (uint64_t)v7, &demangling cache variable for type metadata for PKStrokePath?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for PKStrokePath?);
    uint64_t v15 = type metadata accessor for PKStrokePathStruct.Partial(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    id v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v17(v11, v7, v8);
    v17(a1, v11, v8);
    uint64_t v18 = type metadata accessor for PKStrokePathStruct.Partial(0);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a1, 0, 1, v18);
  }
}

uint64_t type metadata accessor for PKStrokePathStruct.Partial(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokePathStruct.Partial);
}

id PKStrokePathStruct.Partial.canMerge(delta:)()
{
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  Class v1 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v2 = [(objc_class *)isa canApplyDelta:v1];

  return v2;
}

id PKStrokePathStruct.Partial.merge(delta:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PKStrokePath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  Class v7 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v8 = [(objc_class *)isa canApplyDelta:v7];

  if (v8)
  {
    Class v9 = PKStrokePath._bridgeToObjectiveC()().super.isa;
    Class v10 = PKStrokePath._bridgeToObjectiveC()().super.isa;
    id v11 = [(objc_class *)v9 dataApplying:v10];

    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v1, v5, v2);
  }
  return v8;
}

uint64_t static PKStrokePathStruct.initPartialCRDT(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?)?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (void *)((char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = dispatch thunk of CRDecoder.crdtContainer()();
  if (!v1)
  {
    uint64_t v10 = dispatch thunk of CRDecoder.CRDTContainer.decodeCustomSiblings()();
    uint64_t result = swift_release();
    if (*(void *)(v10 + 16) == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?));
      uint64_t v12 = *(void *)(v11 - 8);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v10 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), (uint64_t)v5, &demangling cache variable for type metadata for (Data, CRVersion?));
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(v5, 0, 1, v11);
      swift_bridgeObjectRelease();
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CRVersion?));
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v5, 1, v13);
      if (result != 1)
      {
        uint64_t v14 = *v5;
        unint64_t v15 = v5[1];
        id v16 = objc_allocWithZone(MEMORY[0x263F14BC0]);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v18 = objc_msgSend(v16, sel_initWithRawValue_, isa);

        if (v18)
        {
          id v19 = v18;
          static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();
          outlined consume of Data._Representation(v14, v15);

          uint64_t v20 = type metadata accessor for PKStrokePath();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 0, 1, v20);
        }
        else
        {
          outlined consume of Data._Representation(v14, v15);
          uint64_t v20 = type metadata accessor for PKStrokePath();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5 + *(int *)(v13 + 48), (uint64_t *)&demangling cache variable for type metadata for CRVersion?);
        type metadata accessor for PKStrokePath();
        uint64_t v21 = *(void *)(v20 - 8);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v8, 1, v20);
        if (result != 1) {
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(a1, v8, v20);
        }
LABEL_12:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t static PKStrokePathStruct.encode(partialCRDT:to:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRVersion?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = dispatch thunk of CREncoder.crdtContainer()();
  if (!v0)
  {
    Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
    id v6 = [(objc_class *)isa rawValue];

    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    CRVersion.init()();
    uint64_t v10 = type metadata accessor for CRVersion();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 0, 1, v10);
    dispatch thunk of CREncoder.CRDTContainer.encodeCustom(_:version:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for CRVersion?);
    outlined consume of Data._Representation(v7, v9);
    return swift_release();
  }
  return result;
}

uint64_t PKStrokePathStruct.copy(renamingReferences:)@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PKStrokePathStruct(v1, a1);
}

{
  uint64_t v1;

  return outlined init with copy of PKStrokePathStruct(v1, a1);
}

BOOL static PKStrokePathStruct.== infix(_:_:)()
{
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v1 = [(objc_class *)isa _immutablePointsCount];

  Class v2 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v3 = [(objc_class *)v2 _immutablePointsCount];

  return v1 == v3;
}

uint64_t PKStrokePathStruct.actionUndoingDifference(from:)()
{
  return 1;
}

uint64_t PKStrokePathStruct.observableDifference(from:with:)()
{
  return 1;
}

BOOL PKStrokePathStruct.hasDelta(from:)()
{
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v1 = [(objc_class *)isa _immutablePointsCount];

  Class v2 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v3 = [(objc_class *)v2 _immutablePointsCount];

  return (uint64_t)v1 < (uint64_t)v3;
}

Swift::Bool __swiftcall PKStrokePathStruct.needToFinalizeTimestamps()()
{
  return 0;
}

uint64_t base witness table accessor for CRCodable in PKStrokePathStruct.Partial()
{
  return lazy protocol witness table accessor for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial(&lazy protocol witness table cache variable for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct.Partial);
}

uint64_t base witness table accessor for CRMergeable in PKStrokePathStruct()
{
  return lazy protocol witness table accessor for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
}

uint64_t lazy protocol witness table accessor for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CRType in PKStrokePathStruct()
{
  return lazy protocol witness table accessor for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PKStrokePathStruct()
{
  return lazy protocol witness table accessor for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial(&lazy protocol witness table cache variable for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct.Partial);
}

uint64_t protocol witness for CRDT.context.getter in conformance PKStrokePathStruct(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
  return MEMORY[0x270F17CC8](a1, v2);
}

BOOL protocol witness for CRDT.hasDelta(from:) in conformance PKStrokePathStruct()
{
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v1 = [(objc_class *)isa _immutablePointsCount];

  Class v2 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v3 = [(objc_class *)v2 _immutablePointsCount];

  return (uint64_t)v1 < (uint64_t)v3;
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PKStrokePathStruct@<X0>(char *a1@<X8>)
{
  return PKStrokePathStruct.partialCRDT(from:)(a1);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokePathStruct@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PKStrokePathStruct.init(from:)(a1, a2);
}

void protocol witness for CRCodable.encode(to:) in conformance PKStrokePathStruct()
{
}

uint64_t base witness table accessor for CRCodable in PKStrokePathStruct()
{
  return lazy protocol witness table accessor for type PKStrokePathStruct.Partial and conformance PKStrokePathStruct.Partial(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokePathStruct@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PKStrokePathStruct(v1, a1);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PKStrokePathStruct()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PKStrokePathStruct()
{
  return CRDT.init(serializedData:)();
}

uint64_t getEnumTagSinglePayload for PKStrokePathStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for PKStrokePathStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t initializeBufferWithCopyOfBuffer for PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokePath();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for PKStrokePathStruct(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PKStrokePath();
  id v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PKStrokePathStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokePathStruct.Partial(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C459084);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokePath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PKStrokePathStruct.Partial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C459108);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStrokePath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PKStrokePathStruct()
{
  uint64_t result = type metadata accessor for PKStrokePath();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *UnknownPageView.init(frame:)(double a1, double a2, double a3, double a4)
{
  swift_unknownObjectWeakInit();
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit15UnknownPageView_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  id v9 = objc_allocWithZone(MEMORY[0x263F82828]);
  uint64_t v10 = v4;
  id v11 = objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit15UnknownPageView_questionMarkView;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit15UnknownPageView_questionMarkView] = v11;
  objc_msgSend(v11, sel_setContentMode_, 1);
  objc_msgSend(*(id *)&v10[v12], sel_setClipsToBounds_, 1);
  id v13 = *(id *)&v10[v12];
  uint64_t v14 = (void *)MEMORY[0x21054D080](0xD00000000000001ALL, 0x800000020C84FB10);
  id v15 = objc_msgSend(self, sel_systemImageNamed_, v14);

  objc_msgSend(v13, sel_setImage_, v15);
  uint64_t v16 = one-time initialization token for imageMissingIconColor;
  id v17 = *(id *)&v10[v12];
  if (v16 != -1) {
    swift_once();
  }
  objc_msgSend(v17, sel_setTintColor_, static UIConstants.imageMissingIconColor);

  v25.receiver = v10;
  v25.super_class = (Class)type metadata accessor for UnknownPageView();
  id v18 = (char *)objc_msgSendSuper2(&v25, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v19 = *(void *)&v18[OBJC_IVAR____TtC8PaperKit15UnknownPageView_questionMarkView];
  uint64_t v20 = v18;
  objc_msgSend(v20, sel_addSubview_, v19);
  uint64_t v21 = one-time initialization token for imageMissingBackgroundColor;
  uint64_t v22 = v20;
  if (v21 != -1) {
    swift_once();
  }
  objc_msgSend(v22, sel_setBackgroundColor_, static UIConstants.imageMissingBackgroundColor);
  uint64_t v23 = (void *)MEMORY[0x21054D080](0xD000000000000028, 0x800000020C84FB30);
  objc_msgSend(v22, sel_setAccessibilityIdentifier_, v23);

  return v22;
}

Swift::Void __swiftcall UnknownPageView.layoutSubviews()()
{
  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for UnknownPageView();
  objc_msgSendSuper2(&v14, sel_layoutSubviews);
  id v1 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit15UnknownPageView_questionMarkView];
  objc_msgSend(v0, sel_bounds);
  CGFloat v3 = v2;
  CGFloat v5 = v4;
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  objc_msgSend(v0, sel_bounds);
  CGFloat v11 = v10 * 0.2;
  objc_msgSend(v0, sel_bounds);
  CGFloat v13 = v12 * 0.2;
  v15.origin.CGFloat x = v3;
  v15.origin.CGFloat y = v5;
  v15.size.CGFloat width = v7;
  v15.size.CGFloat height = v9;
  CGRect v16 = CGRectInset(v15, v11, v13);
  objc_msgSend(v1, sel_setFrame_, v16.origin.x, v16.origin.y, v16.size.width, v16.size.height);
}

id UnknownPageView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UnknownPageView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UnknownPageView()
{
  return self;
}

uint64_t protocol witness for PageOverlayView.textualContextProvider.setter in conformance UnknownPageView(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + OBJC_IVAR____TtC8PaperKit15UnknownPageView_textualContextProvider + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void protocol witness for PageOverlayView.viewControllerForPresentingUI.setter in conformance UnknownPageView(void *a1)
{
  swift_unknownObjectWeakAssign();
}

Swift::Void __swiftcall InlineDrawingTiledTextView.didMoveToWindow()()
{
  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for InlineDrawingTiledTextView();
  objc_msgSendSuper2(&v18, sel_didMoveToWindow);
  id v1 = objc_msgSend(v0, sel_window);

  uint64_t v2 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit26InlineDrawingTiledTextView_inlineDrawingCanvasElementController];
  CGFloat v3 = &v2[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_delegate];
  if (v1)
  {
    *((void *)v3 + 1) = &protocol witness table for InlineDrawingTiledTextView;
    uint64_t v4 = swift_unknownObjectWeakAssign();
    uint64_t v5 = MEMORY[0x210550400](v4);
    double v6 = v0;
    swift_unknownObjectRelease();
    if (v5)
    {
      CGFloat v7 = (char *)objc_allocWithZone((Class)type metadata accessor for ToolPickerController());
      double v8 = v2;
      id v9 = specialized ToolPickerController.init(delegate:)(v8, v7);
      double v10 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController];
      *(void *)&v8[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController] = v9;
    }
    else
    {
      double v10 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController];
      *(void *)&v2[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController] = 0;
    }

    id v17 = objc_msgSend(v6, sel_selectionInteraction);
    objc_msgSend(v17, sel_setDelegate_, v6);
  }
  else
  {
    *((void *)v3 + 1) = 0;
    uint64_t v11 = swift_unknownObjectWeakAssign();
    uint64_t v12 = MEMORY[0x210550400](v11);
    swift_unknownObjectRelease();
    if (v12)
    {
      CGFloat v13 = (char *)objc_allocWithZone((Class)type metadata accessor for ToolPickerController());
      objc_super v14 = v2;
      id v15 = specialized ToolPickerController.init(delegate:)(v14, v13);
      CGRect v16 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController];
      *(void *)&v14[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController] = v15;
    }
    else
    {
      CGRect v16 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController];
      *(void *)&v2[OBJC_IVAR____TtC8PaperKit36InlineDrawingCanvasElementController_toolPickerController] = 0;
    }

    id v17 = objc_msgSend(v0, sel_selectionInteraction);
    objc_msgSend(v17, sel_setDelegate_, 0);
  }
}

id InlineDrawingTiledTextView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InlineDrawingTiledTextView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for InlineDrawingTiledTextView()
{
  return self;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 0;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v3, a1) : *(id *)(a1 + 32 + 8 * v3);
      uint64_t v5 = v4;
      if (__OFADD__(v3++, 1)) {
        break;
      }
      uint64_t v7 = InlineDrawingTextAttachmentView.acceptedDropLayouts.getter();
      uint64_t v8 = *(void *)(v7 + 16);
      if (v8)
      {
        uint64_t v9 = v7 + 40;
        while (((*(uint64_t (**)(void *))(*(void *)v9 + 32))(v5) & 1) == 0)
        {
          v9 += 16;
          if (!--v8) {
            goto LABEL_4;
          }
        }
        uint64_t v10 = swift_bridgeObjectRelease();
        MEMORY[0x21054D330](v10);
        if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        if (v3 == v2)
        {
LABEL_17:
          swift_bridgeObjectRelease();
          return v12;
        }
      }
      else
      {
LABEL_4:

        swift_bridgeObjectRelease();
        if (v3 == v2) {
          goto LABEL_17;
        }
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

{
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  id v14;
  id v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v21 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_21;
  }
  id v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; id v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 0;
    uint64_t v19 = v3;
    uint64_t v20 = v3 & 0xC000000000000001;
    CGRect v16 = v2;
    id v17 = v3 + 32;
    objc_super v18 = v4;
    while (1)
    {
      double v6 = v20 ? (id)MEMORY[0x21054E050](v5, v3) : *(id *)(v17 + 8 * v5);
      uint64_t v7 = v6;
      if (__OFADD__(v5++, 1)) {
        break;
      }
      uint64_t v9 = InlineDrawingTextAttachmentView.acceptedDropLayouts.getter();
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        uint64_t v11 = (uint64_t *)(v9 + 40);
        while (1)
        {
          uint64_t v12 = *v11;
          uint64_t v2 = objc_msgSend(v7, sel_itemProvider, v16);
          CGFloat v13 = (*(uint64_t (**)(void))(v12 + 32))();

          if (v13) {
            break;
          }
          v11 += 2;
          if (!--v10)
          {

            swift_bridgeObjectRelease();
            id v4 = v18;
            uint64_t v3 = v19;
            goto LABEL_5;
          }
        }
        swift_bridgeObjectRelease();
        objc_super v14 = objc_msgSend(v7, sel_itemProvider);

        id v4 = v18;
        uint64_t v3 = v19;
        if (v14)
        {
          MEMORY[0x21054D330]();
          if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
LABEL_5:
      if (v5 == v4)
      {
        swift_bridgeObjectRelease();
        return v21;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

void specialized InlineDrawingTiledTextView.inlineDrawingCanvasElementControllerCurrentAttachment(_:)()
{
  id v1 = v0;
  id v2 = objc_msgSend(v0, sel_visibleAttachments);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = objc_msgSend(v1, sel_standInAttachmentView);
  if (v4)
  {
    id v5 = v4;
    MEMORY[0x21054D330]();
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (!(v3 >> 62))
  {
    uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_7;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_19;
  }
LABEL_7:
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
    CGFloat x = 0.0;
    double v12 = 0.0;
    do
    {
      CGFloat v29 = v12;
      CGFloat v30 = x;
      CGFloat v31 = height;
      CGFloat v32 = width;
      if ((v3 & 0xC000000000000001) != 0) {
        id v13 = (id)MEMORY[0x21054E050](v8, v3);
      }
      else {
        id v13 = *(id *)(v3 + 8 * v8 + 32);
      }
      objc_super v14 = v13;
      objc_msgSend(v13, sel_bounds, *(void *)&y);
      objc_msgSend(v14, sel_convertRect_toCoordinateSpace_, v1);
      CGFloat v16 = v15;
      CGFloat v18 = v17;
      CGFloat v20 = v19;
      CGFloat v22 = v21;
      objc_msgSend(v1, sel_bounds);
      v36.origin.CGFloat x = v23;
      v36.origin.CGFloat y = v24;
      v36.size.CGFloat width = v25;
      v36.size.CGFloat height = v26;
      v33.origin.CGFloat x = v16;
      v33.origin.CGFloat y = v18;
      v33.size.CGFloat width = v20;
      v33.size.CGFloat height = v22;
      CGRect v34 = CGRectIntersection(v33, v36);
      CGFloat x = v34.origin.x;
      CGFloat width = v34.size.width;
      CGFloat height = v34.size.height;
      CGFloat y = v34.origin.y;
      double v27 = CGRectGetHeight(v34);
      v35.origin.CGFloat x = v30;
      v35.origin.CGFloat y = v29;
      v35.size.CGFloat width = v32;
      v35.size.CGFloat height = v31;
      if (CGRectGetHeight(v35) >= v27)
      {

        CGFloat width = v32;
        CGFloat height = v31;
        CGFloat x = v30;
        double v12 = v29;
      }
      else
      {

        type metadata accessor for InlineDrawingTextAttachmentView();
        uint64_t v7 = (void *)swift_dynamicCastClass();
        if (!v7) {

        }
        double v12 = y;
      }
      ++v8;
    }
    while (v6 != v8);
    goto LABEL_19;
  }
  __break(1u);
}

void specialized InlineDrawingTiledTextView.selectionInteraction(_:canPerformAction:withSender:inAttachment:)()
{
  specialized InlineDrawingTiledTextView.inlineDrawingCanvasElementControllerCurrentAttachment(_:)();
  if (v0)
  {
    id v1 = v0;
    if (static Selector.== infix(_:_:)())
    {
      id v2 = objc_msgSend(self, sel_generalPasteboard);
      id v3 = objc_msgSend(v2, sel_itemProviders);

      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
      unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v5 = v1;
      unint64_t v6 = specialized Sequence.compactMap<A>(_:)(v4);
      swift_bridgeObjectRelease();

      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
      }
      else
      {
      }
      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
}

uint64_t AnalyticsEventEncoder.container<A>(keyedBy:)()
{
  id v1 = *(void **)(v0 + 40);
  type metadata accessor for KeyedContainer();
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_getWitnessTable();
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t AnalyticsEventEncoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnalyticsEventEncoder()
{
  return self;
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance AnalyticsEventEncoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Encoder.userInfo.getter in conformance AnalyticsEventEncoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance AnalyticsEventEncoder()
{
  return AnalyticsEventEncoder.container<A>(keyedBy:)();
}

void protocol witness for Encoder.unkeyedContainer() in conformance AnalyticsEventEncoder()
{
}

id protocol witness for Encoder.singleValueContainer() in conformance AnalyticsEventEncoder@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  id v7 = *(id *)(v3 + 40);
  char v5 = *(unsigned char *)(v3 + 32);
  *(void *)(a1 + 24) = &unk_26C155F30;
  *(void *)(a1 + 32) = lazy protocol witness table accessor for type SingleValueContainer and conformance SingleValueContainer();
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRetain();
  return v7;
}

unint64_t lazy protocol witness table accessor for type SingleValueContainer and conformance SingleValueContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type SingleValueContainer and conformance SingleValueContainer;
  if (!lazy protocol witness table cache variable for type SingleValueContainer and conformance SingleValueContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleValueContainer and conformance SingleValueContainer);
  }
  return result;
}

void KeyedContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v24[2] = a2;
  v24[1] = a3;
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  CGFloat v25 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v24 - v9;
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v26 = v6;
  id v13 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v13((char *)v24 - v14, a1, v15, v12);
  type metadata accessor for NSObject();
  int v16 = swift_dynamicCast();
  double v17 = (void *)v27;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v10, a1, a4);
  if (v16) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    uint64_t v19 = v26;
    ((void (*)(char *, char *, uint64_t))v13)(v25, v10, a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawRepresentable);
    if (swift_dynamicCast())
    {
      __swift_project_boxed_opaque_existential_1(&v27, *((uint64_t *)&v28 + 1));
      *((void *)&v31 + 1) = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v30);
      dispatch thunk of RawRepresentable.rawValue.getter();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v10, a4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
      if (*((void *)&v31 + 1))
      {
        if (swift_dynamicCast()) {
          double v17 = v32;
        }
        else {
          double v17 = 0;
        }
        if (v17) {
          goto LABEL_14;
        }
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v29 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v10, a4);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v27, &demangling cache variable for type metadata for RawRepresentable?);
      long long v30 = 0u;
      long long v31 = 0u;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, a4);
  if (v17)
  {
LABEL_14:
    CGFloat v20 = *(void **)(v24[0] + 16);
    id v21 = v17;
    uint64_t v22 = dispatch thunk of CodingKey.stringValue.getter();
    CGFloat v23 = (void *)MEMORY[0x21054D080](v22);
    swift_bridgeObjectRelease();
    objc_msgSend(v20, sel_setValue_forKey_, v21, v23);

    return;
  }
LABEL_17:
  lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError();
  swift_allocError();
  swift_willThrow();
}

void KeyedContainer.encodeNil(forKey:)()
{
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    id v1 = *(void **)(v0 + 16);
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
    uint64_t v3 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v4 = (void *)MEMORY[0x21054D080](v3);
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setValue_forKey_, v2, v4);
  }
}

void KeyedContainer.nestedContainer<A>(keyedBy:forKey:)()
{
}

void KeyedContainer.nestedUnkeyedContainer(forKey:)()
{
}

void KeyedContainer.superEncoder()()
{
}

void KeyedContainer.superEncoder(forKey:)()
{
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance KeyedContainer<A>()
{
  return swift_bridgeObjectRetain();
}

void protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance KeyedContainer<A>()
{
}

void protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedContainer<A>(char a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8D4F8]);
}

{
  char v3;

  char v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8E498]);
}

{
  char v3;

  char v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8E778]);
}

void protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a1;
  v4[1] = a2;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)v4, a3, a4, MEMORY[0x263F8D310]);
}

void protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedContainer<A>(uint64_t a1, uint64_t a2, double a3)
{
  double v3 = a3;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a1, a2, MEMORY[0x263F8D538]);
}

void protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedContainer<A>(uint64_t a1, uint64_t a2, float a3)
{
  float v3 = a3;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a1, a2, MEMORY[0x263F8D5C8]);
}

void protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8D6C8]);
}

{
  uint64_t v3;

  uint64_t v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8E5C0]);
}

{
  uint64_t v3;

  uint64_t v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8D9D0]);
}

{
  uint64_t v3;

  uint64_t v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8E970]);
}

void protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedContainer<A>(__int16 a1, uint64_t a2, uint64_t a3)
{
  __int16 v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8E4F0]);
}

{
  __int16 v3;

  __int16 v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8E888]);
}

void protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedContainer<A>(int a1, uint64_t a2, uint64_t a3)
{
  int v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8E548]);
}

{
  int v3;

  int v3 = a1;
  KeyedContainer.encode<A>(_:forKey:)((uint64_t)&v3, a2, a3, MEMORY[0x263F8E8F8]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedContainer<A>()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

void protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance KeyedContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(a1, a2, a3, a4, MEMORY[0x263F8E3C0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(a1, a2, a3, a4, MEMORY[0x263F8E3E8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(a1, a2, a3, a4, MEMORY[0x263F8E410]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(a1, a2, a3, a4, MEMORY[0x263F8E3D8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(a1, a2, a3, a4, MEMORY[0x263F8E3F8]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(a1, a2, a3, a4, MEMORY[0x263F8E3E0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(a1, a2, a3, a4, MEMORY[0x263F8E408]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance KeyedContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

void protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance KeyedContainer<A>()
{
}

void SingleValueContainer.encodeNil()()
{
  if (v0[8] == 1)
  {
    id v1 = v0;
    uint64_t v2 = *(void *)(*(void *)v0 + 16);
    if (v2)
    {
      outlined init with copy of FindResult(*(void *)v0 + 40 * v2 - 8, (uint64_t)v9);
      __swift_project_boxed_opaque_existential_1(v9, v9[3]);
      uint64_t v3 = dispatch thunk of CodingKey.stringValue.getter();
      uint64_t v5 = v4;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      uint64_t v6 = (void *)*((void *)v1 + 2);
      id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
      uint64_t v8 = (void *)MEMORY[0x21054D080](v3, v5);
      swift_bridgeObjectRelease();
      objc_msgSend(v6, sel_setValue_forKey_, v7, v8);
    }
  }
}

void specialized SingleValueContainer.encode<A>(_:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    outlined init with copy of FindResult(*(void *)v0 + 40 * v1 - 8, (uint64_t)v10);
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    uint64_t v3 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v5 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    v6.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    id v7 = *(void **)(v2 + 16);
    uint64_t v8 = v6.super.super.isa;
    uint64_t v9 = (void *)MEMORY[0x21054D080](v3, v5);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setValue_forKey_, v8, v9);
  }
  else
  {
    lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError();
    swift_allocError();
    swift_willThrow();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSNumber v6;
  void *v7;
  objc_class *v8;
  void *v9;
  void v10[4];

  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    outlined init with copy of FindResult(*(void *)v0 + 40 * v1 - 8, (uint64_t)v10);
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    uint64_t v3 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v5 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    v6.super.super.Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    id v7 = *(void **)(v2 + 16);
    uint64_t v8 = v6.super.super.isa;
    uint64_t v9 = (void *)MEMORY[0x21054D080](v3, v5);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setValue_forKey_, v8, v9);
  }
  else
  {
    lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError();
    swift_allocError();
    swift_willThrow();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSNumber v6;
  void *v7;
  objc_class *v8;
  void *v9;
  void v10[4];

  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    outlined init with copy of FindResult(*(void *)v0 + 40 * v1 - 8, (uint64_t)v10);
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    uint64_t v3 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v5 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    v6.super.super.Class isa = Float._bridgeToObjectiveC()().super.super.isa;
    id v7 = *(void **)(v2 + 16);
    uint64_t v8 = v6.super.super.isa;
    uint64_t v9 = (void *)MEMORY[0x21054D080](v3, v5);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setValue_forKey_, v8, v9);
  }
  else
  {
    lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError();
    swift_allocError();
    swift_willThrow();
  }
}

void specialized SingleValueContainer.encode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2;
    outlined init with copy of FindResult(*(void *)v2 + 40 * v3 - 8, (uint64_t)v14);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v9 = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    swift_bridgeObjectRetain();
    uint64_t v10 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void **)(v4 + 16);
    id v12 = v10;
    id v13 = (void *)MEMORY[0x21054D080](v7, v9);
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setValue_forKey_, v12, v13);
  }
  else
  {
    lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError();
    swift_allocError();
    swift_willThrow();
  }
}

void specialized SingleValueContainer.encode<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (v3)
  {
    uint64_t v5 = v2;
    outlined init with copy of FindResult(*(void *)v2 + 40 * v3 - 8, (uint64_t)v14);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v9 = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    uint64_t v10 = (void *)a2(a1);
    uint64_t v11 = *(void **)(v5 + 16);
    id v12 = v10;
    id v13 = (void *)MEMORY[0x21054D080](v7, v9);
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setValue_forKey_, v12, v13);
  }
  else
  {
    lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError();
    swift_allocError();
    swift_willThrow();
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void v14[4];

  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (v3)
  {
    uint64_t v5 = v2;
    outlined init with copy of FindResult(*(void *)v2 + 40 * v3 - 8, (uint64_t)v14);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v9 = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    uint64_t v10 = (void *)a2(a1);
    uint64_t v11 = *(void **)(v5 + 16);
    id v12 = v10;
    id v13 = (void *)MEMORY[0x21054D080](v7, v9);
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setValue_forKey_, v12, v13);
  }
  else
  {
    lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError();
    swift_allocError();
    swift_willThrow();
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void v14[4];

  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (v3)
  {
    uint64_t v5 = v2;
    outlined init with copy of FindResult(*(void *)v2 + 40 * v3 - 8, (uint64_t)v14);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v9 = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    uint64_t v10 = (void *)a2(a1);
    uint64_t v11 = *(void **)(v5 + 16);
    id v12 = v10;
    id v13 = (void *)MEMORY[0x21054D080](v7, v9);
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setValue_forKey_, v12, v13);
  }
  else
  {
    lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError();
    swift_allocError();
    swift_willThrow();
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void v14[4];

  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (v3)
  {
    uint64_t v5 = v2;
    outlined init with copy of FindResult(*(void *)v2 + 40 * v3 - 8, (uint64_t)v14);
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v9 = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    uint64_t v10 = (void *)a2(a1);
    uint64_t v11 = *(void **)(v5 + 16);
    id v12 = v10;
    id v13 = (void *)MEMORY[0x21054D080](v7, v9);
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setValue_forKey_, v12, v13);
  }
  else
  {
    lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError();
    swift_allocError();
    swift_willThrow();
  }
}

void SingleValueContainer.encode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(*(void *)v2 + 16);
  if (v9)
  {
    outlined init with copy of FindResult(*(void *)v2 + 40 * v9 - 8, (uint64_t)v17);
    __swift_project_boxed_opaque_existential_1(v17, (uint64_t)v17[3]);
    uint64_t v10 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v12 = v11;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    type metadata accessor for NSObject();
    if (swift_dynamicCast())
    {
      id v13 = *(void **)(v3 + 16);
      id v14 = v17[0];
      uint64_t v15 = (void *)MEMORY[0x21054D080](v10, v12);
      swift_bridgeObjectRelease();
      objc_msgSend(v13, sel_setValue_forKey_, v14, v15);

      return;
    }
    swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError();
  swift_allocError();
  swift_willThrow();
}

void protocol witness for SingleValueEncodingContainer.encodeNil() in conformance SingleValueContainer()
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueContainer()
{
}

{
  specialized SingleValueContainer.encode<A>(_:)();
}

{
  specialized SingleValueContainer.encode<A>(_:)();
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueContainer(uint64_t a1, uint64_t a2)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueContainer(uint64_t a1)
{
}

{
  specialized SingleValueContainer.encode<A>(_:)(a1, MEMORY[0x263F07DF0]);
}

{
  specialized SingleValueContainer.encode<A>(_:)(a1, MEMORY[0x263F07DF8]);
}

{
  specialized SingleValueContainer.encode<A>(_:)(a1, MEMORY[0x263F07E08]);
}

{
  specialized SingleValueContainer.encode<A>(_:)(a1, MEMORY[0x263F07E10]);
}

{
  specialized SingleValueContainer.encode<A>(_:)(a1, MEMORY[0x263F07D78]);
}

{
  specialized SingleValueContainer.encode<A>(_:)(a1, MEMORY[0x263F07E28]);
}

{
  specialized SingleValueContainer.encode<A>(_:)(a1, MEMORY[0x263F07E30]);
}

{
  specialized SingleValueContainer.encode<A>(_:)(a1, MEMORY[0x263F07E38]);
}

{
  specialized SingleValueContainer.encode<A>(_:)(a1, MEMORY[0x263F07E48]);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueContainer()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

void protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance SingleValueContainer(uint64_t a1, uint64_t a2)
{
}

uint64_t specialized AnalyticsEventEncoder.encode<A>(_:)()
{
  v3[3] = type metadata accessor for AnalyticsEventEncoder();
  v3[4] = lazy protocol witness table accessor for type AnalyticsEventEncoder and conformance AnalyticsEventEncoder();
  v3[0] = v0;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  if (!v1) {
    return ~(*(void *)(v0 + 40) >> 1) & 0x4000000000000000 | *(void *)(v0 + 40);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnalyticsEventEncoder and conformance AnalyticsEventEncoder()
{
  unint64_t result = lazy protocol witness table cache variable for type AnalyticsEventEncoder and conformance AnalyticsEventEncoder;
  if (!lazy protocol witness table cache variable for type AnalyticsEventEncoder and conformance AnalyticsEventEncoder)
  {
    type metadata accessor for AnalyticsEventEncoder();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsEventEncoder and conformance AnalyticsEventEncoder);
  }
  return result;
}

uint64_t type metadata accessor for KeyedContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for KeyedContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

void destroy for KeyedContainer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t initializeBufferWithCopyOfBuffer for KeyedContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for KeyedContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  id v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for KeyedContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  id v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for KeyedContainer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyedContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for SingleValueContainer()
{
  return &unk_26C155F30;
}

uint64_t associated type witness table accessor for KeyedEncodingContainerProtocol.Key : CodingKey in KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

unint64_t lazy protocol witness table accessor for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError()
{
  unint64_t result = lazy protocol witness table cache variable for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError;
  if (!lazy protocol witness table cache variable for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError;
  if (!lazy protocol witness table cache variable for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsEventEncoder.EncodingError and conformance AnalyticsEventEncoder.EncodingError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnalyticsEventEncoder.EncodingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x20C45C3BCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsEventEncoder.EncodingError()
{
  return &type metadata for AnalyticsEventEncoder.EncodingError;
}

uint64_t PrincipalLine.encode(to:)(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PrincipalLine.CodingKeys>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  double v16 = a2;
  double v17 = a3;
  char v18 = 0;
  type metadata accessor for CGPoint(0);
  _s8PaperKit15PKDrawingStructVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, type metadata accessor for CGPoint);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    double v16 = a4;
    double v17 = a5;
    char v18 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PrincipalLine.CodingKeys()
{
  if (*v0) {
    return 6581861;
  }
  else {
    return 0x7472617473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PrincipalLine.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PrincipalLine.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PrincipalLine.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PrincipalLine.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void protocol witness for Decodable.init(from:) in conformance PrincipalLine(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = specialized PrincipalLine.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PrincipalLine(void *a1)
{
  return PrincipalLine.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

double ReflowWord.baseline.getter()
{
  return *(double *)(v0 + 184);
}

double ReflowWord.baselineDelta.getter()
{
  objc_msgSend(*(id *)(v0 + 280), sel__canvasBounds);
  CGRectGetWidth(v5);
  objc_msgSend(*(id *)(v0 + 280), sel__canvasBounds);
  CGRectGetHeight(v6);
  return UnknownCanvasElementView.flags.modify(v1, v2);
}

uint64_t ReflowWord.init(reflowableTextToken:drawing:scale:image:)(void *a1, void *a2, void *a3, CGFloat a4)
{
  uint64_t v5 = v4;
  id v114 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v111 = *(void *)(v9 - 8);
  uint64_t v112 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v110 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v108 = *(void *)(v11 - 8);
  uint64_t v109 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v106 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v13 - 8);
  v117 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v15 - 8);
  double v17 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v116 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  *(void *)&CGFloat v123 = (char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v115 = (char *)&v105 - v21;
  *(unsigned char *)(v4 + 312) = 0;
  *(void *)(v4 + 344) = 1;
  *(void *)(v4 + 304) = a3;
  id v107 = a3;
  swift_retain();
  id v22 = objc_msgSend(a1, sel_string);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  *(void *)(v5 + 320) = v23;
  *(void *)(v5 + 328) = v25;
  self;
  id v113 = a1;
  uint64_t v26 = (void *)swift_dynamicCastObjCClass();
  if (!v26)
  {
    unint64_t v32 = MEMORY[0x263F8EE78];
    goto LABEL_24;
  }
  id v27 = objc_msgSend(v26, sel_strokeIdentifiers);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHStrokeIdentifier);
  unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v29 = result;
    uint64_t v105 = v5;
    if (result) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v29 = *(uint64_t *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v105 = v5;
    if (*(double *)&v29 != 0.0)
    {
LABEL_4:
      if (v29 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v31 = 0;
      id v120 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v116 + 56);
      unint64_t v121 = v28 & 0xC000000000000001;
      id v119 = (unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48);
      unint64_t v32 = MEMORY[0x263F8EE78];
      v118 = (void (**)(char *, char *, uint64_t))(v116 + 32);
      CGFloat v122 = *(double *)&v29;
      do
      {
        if (v121) {
          MEMORY[0x21054E050](v31, v28);
        }
        else {
          swift_unknownObjectRetain();
        }
        type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
        uint64_t v33 = swift_dynamicCastClass();
        if (v33)
        {
          CGRect v34 = (void *)v33;
          swift_unknownObjectRetain();
          id v35 = objc_msgSend(v34, sel_strokeUUID);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
          lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
          WeakRef.init(id:)();
          swift_unknownObjectRelease();
          (*v120)(v17, 0, 1, v18);
        }
        else
        {
          (*v120)(v17, 1, 1, v18);
        }
        swift_unknownObjectRelease();
        if ((*v119)(v17, 1, v18) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
        }
        else
        {
          CGRect v36 = *v118;
          unint64_t v37 = v115;
          (*v118)(v115, v17, v18);
          v36(*(char **)&v123, v37, v18);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1, v32);
          }
          unint64_t v39 = *(void *)(v32 + 16);
          unint64_t v38 = *(void *)(v32 + 24);
          if (v39 >= v38 >> 1) {
            unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v32);
          }
          *(void *)(v32 + 16) = v39 + 1;
          v36((char *)(v32+ ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80))+ *(void *)(v116 + 72) * v39), *(char **)&v123, v18);
        }
        ++v31;
      }
      while (*(void *)&v122 != v31);
      goto LABEL_23;
    }
  }
  unint64_t v32 = MEMORY[0x263F8EE78];
LABEL_23:
  swift_bridgeObjectRelease_n();
  uint64_t v5 = v105;
LABEL_24:
  *(void *)(v5 + 288) = v32;
  id v40 = v114;
  objc_msgSend(v114, sel__canvasBounds, v105);
  IsEmptCGFloat y = CGRectIsEmpty(v142);
  uint64_t v42 = v113;
  if (IsEmpty || (objc_msgSend(v40, sel__canvasBounds), !CGRect.isFinite.getter(v43, v44, v45, v46)))
  {
    objc_msgSend(v40, sel_bounds);
    objc_msgSend(v40, sel_set_canvasBounds_);
  }
  objc_msgSend(v40, sel__canvasBounds);
  double v48 = v47;
  double v50 = v49;
  double v52 = v51;
  double v54 = v53;
  if (fabs(a4 + -1.0) <= 0.01)
  {
    id v55 = v40;
  }
  else
  {
    CGAffineTransformMakeScale(&v124, a4, a4);
    CGAffineTransform v135 = v124;
    id v55 = PKDrawingCoherence.applyTransform(_:transformInk:)((uint64_t)&v135, 0);
  }
  *(void *)(v5 + 280) = v55;
  id v56 = v55;
  objc_msgSend(v56, sel__canvasBounds);
  CGRect v144 = CGRectIntegral(v143);
  objc_msgSend(v56, sel_set_canvasBounds_, v144.origin.x, v144.origin.y, v144.size.width, v144.size.height);

  objc_msgSend(v42, sel_bounds);
  v124.CGFloat a = v57;
  v124.CGFloat b = 0.0;
  v124.CGFloat c = 0.0;
  v124.CGFloat d = v59;
  v124.tCGFloat x = v58 - v57 * 0.0;
  v124.tCGFloat y = v60 - v59 * 0.0;
  t2.CGFloat a = 1.0 / v52;
  t2.CGFloat b = 0.0;
  t2.CGFloat c = 0.0;
  t2.CGFloat d = 1.0 / v54;
  t2.tCGFloat x = 0.0 - v48 * (1.0 / v52);
  t2.tCGFloat y = 0.0 - v50 * (1.0 / v54);
  CGAffineTransformConcat(&v133, &v124, &t2);
  CGFloat a = v133.a;
  CGFloat b = v133.b;
  CGFloat c = v133.c;
  CGFloat d = v133.d;
  tCGFloat x = v133.tx;
  tCGFloat y = v133.ty;
  objc_msgSend(v42, sel_principalLines);
  CGFloat v122 = v129;
  CGFloat v123 = v128;
  v124.CGFloat a = a;
  v124.CGFloat b = b;
  v124.CGFloat c = c;
  v124.CGFloat d = d;
  v124.tCGFloat x = tx;
  v124.tCGFloat y = ty;
  CGPoint v67 = CGPointApplyAffineTransform(v127, &v124);
  v124.CGFloat a = a;
  v124.CGFloat b = b;
  v124.CGFloat c = c;
  v124.CGFloat d = d;
  v124.tCGFloat x = tx;
  v124.tCGFloat y = ty;
  v136.CGFloat y = v122;
  v136.CGFloat x = v123;
  CGPoint v68 = CGPointApplyAffineTransform(v136, &v124);
  *(CGPoint *)(v5 + 152) = v67;
  *(CGPoint *)(v5 + 168) = v68;
  objc_msgSend(v42, sel_principalLines);
  v137.CGFloat x = v124.a;
  v137.CGFloat y = v124.b;
  CGFloat v122 = v124.d;
  CGFloat v123 = v124.c;
  v124.CGFloat a = a;
  v124.CGFloat b = b;
  v124.CGFloat c = c;
  v124.CGFloat d = d;
  v124.tCGFloat x = tx;
  v124.tCGFloat y = ty;
  CGPoint v69 = CGPointApplyAffineTransform(v137, &v124);
  v124.CGFloat a = a;
  v124.CGFloat b = b;
  v124.CGFloat c = c;
  v124.CGFloat d = d;
  v124.tCGFloat x = tx;
  v124.tCGFloat y = ty;
  v138.CGFloat y = v122;
  v138.CGFloat x = v123;
  CGPoint v70 = CGPointApplyAffineTransform(v138, &v124);
  *(CGPoint *)(v5 + 248) = v69;
  *(CGPoint *)(v5 + 264) = v70;
  objc_msgSend(v42, sel_principalLines);
  CGPoint v139 = *(CGPoint *)&v124.tx;
  CGFloat v122 = v126;
  CGFloat v123 = v125;
  v124.CGFloat a = a;
  v124.CGFloat b = b;
  v124.CGFloat c = c;
  v124.CGFloat d = d;
  v124.tCGFloat x = tx;
  v124.tCGFloat y = ty;
  CGPoint v71 = CGPointApplyAffineTransform(v139, &v124);
  v124.CGFloat a = a;
  v124.CGFloat b = b;
  v124.CGFloat c = c;
  v124.CGFloat d = d;
  v124.tCGFloat x = tx;
  v124.tCGFloat y = ty;
  v140.CGFloat y = v122;
  v140.CGFloat x = v123;
  CGPoint v72 = CGPointApplyAffineTransform(v140, &v124);
  *(CGPoint *)(v5 + 184) = v71;
  *(CGPoint *)(v5 + 200) = v72;
  objc_msgSend(v42, sel_principalLines);
  CGFloat v122 = v132;
  CGFloat v123 = v131;
  v124.CGFloat a = a;
  v124.CGFloat b = b;
  v124.CGFloat c = c;
  v124.CGFloat d = d;
  v124.tCGFloat x = tx;
  v124.tCGFloat y = ty;
  CGPoint v73 = CGPointApplyAffineTransform(v130, &v124);
  v124.CGFloat a = a;
  v124.CGFloat b = b;
  v124.CGFloat c = c;
  v124.CGFloat d = d;
  v124.tCGFloat x = tx;
  v124.tCGFloat y = ty;
  v141.CGFloat y = v122;
  v141.CGFloat x = v123;
  CGPoint v74 = CGPointApplyAffineTransform(v141, &v124);
  *(CGPoint *)(v5 + 216) = v73;
  *(CGPoint *)(v5 + 232) = v74;
  *(void *)(v5 + 336) = objc_msgSend(v42, sel_textSize);
  double v75 = *(double *)(v5 + 184);
  double v76 = *(double *)(v5 + 200);
  if (v75 < 0.0)
  {
    double v77 = 0.0 - v75 / (v76 - v75);
    double v75 = v75 + (v76 - v75) * v77;
    double v78 = *(double *)(v5 + 192) + v77 * (*(double *)(v5 + 208) - *(double *)(v5 + 192));
    *(double *)(v5 + 184) = v75;
    *(double *)(v5 + 192) = v78;
  }
  if (v76 > 1.0)
  {
    double v79 = v76 - v75;
    double v80 = 1.0 - v75 / v79;
    double v81 = v75 + v79 * v80;
    double v82 = *(double *)(v5 + 192) + v80 * (*(double *)(v5 + 208) - *(double *)(v5 + 192));
    *(double *)(v5 + 200) = v81;
    *(double *)(v5 + 208) = v82;
  }
  long long v83 = *(char **)(v5 + 280);
  id v84 = &v83[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  uint64_t v85 = v108;
  uint64_t v86 = v109;
  double v87 = v106;
  (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v106, v84, v109);
  swift_getKeyPath();
  _s8PaperKit15PKDrawingStructVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  uint64_t v88 = v83;
  uint64_t v89 = v110;
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v86);
  id v90 = v88;
  id v91 = specialized Sequence.compactMap<A>(_:)(v89, (uint64_t)v90);

  (*(void (**)(char *, uint64_t))(v111 + 8))(v89, v112);
  *(void *)(v5 + 296) = v91;
  uint64_t v92 = swift_release();
  double v94 = UnknownCanvasElementView.flags.modify(v92, v93);
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(void *)(v5 + 96) = 0;
  *(double *)(v5 + 104) = v94;
  *(void *)(v5 + 112) = v95;
  *(void *)(v5 + 120) = -1;
  *(void *)(v5 + 128) = 0;
  *(unsigned char *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  swift_retain_n();
  objc_msgSend(v90, sel__canvasBounds);
  uint64_t v97 = v96;
  uint64_t v99 = v98;
  uint64_t v101 = v100;
  uint64_t v103 = v102;

  swift_release();
  *(void *)(v5 + 16) = v97;
  *(void *)(v5 + 24) = v99;
  *(void *)(v5 + 32) = v101;
  *(void *)(v5 + 40) = v103;
  swift_release();
  long long v104 = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v5 + 64) = v104;
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(v5 + 184);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)(v5 + 200);
  return v5;
}

unint64_t ReflowWord.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x656E696C65736162;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656E694C706F74;
      break;
    case 2:
    case 10:
      unint64_t result = 0x65646E6563736564;
      break;
    case 3:
      unint64_t result = 0x694C6E616964656DLL;
      break;
    case 4:
      unint64_t result = 0x676E6977617264;
      break;
    case 5:
      unint64_t result = 0x6F72745374786574;
      break;
    case 6:
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0x74686769654878;
      break;
    case 9:
      unint64_t result = 0x7265646E65637361;
      break;
    case 11:
      unint64_t result = 0x694C657669746361;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ReflowWord.CodingKeys@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ReflowWord.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ReflowWord.CodingKeys()
{
  return ReflowWord.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReflowWord.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ReflowWord.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance ReflowWord.CodingKeys@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ReflowWord.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReflowWord.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowWord.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReflowWord.init(from:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v68 = *(void *)(v4 - 8);
  uint64_t v69 = v4;
  MEMORY[0x270FA5388](v4);
  CGRect v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v72 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v58 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReflowWord.CodingKeys>);
  uint64_t v70 = *(void *)(v13 - 8);
  uint64_t v71 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v2 + 304) = 0;
  *(unsigned char *)(v2 + 312) = 0;
  *(void *)(v2 + 344) = 1;
  uint64_t v16 = a1[3];
  CGPoint v74 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys();
  swift_retain();
  CGPoint v73 = v15;
  uint64_t v17 = v75;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);

    outlined consume of PaperKitPDFDocument??(*(id *)(v2 + 344));
    type metadata accessor for ReflowWord();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v65 = v9;
    CGPoint v67 = v12;
    uint64_t v18 = v72;
    uint64_t v66 = v7;
    uint64_t v75 = v2;
    uint64_t v19 = v70;
    char v78 = 0;
    unint64_t v20 = lazy protocol witness table accessor for type PrincipalLine and conformance PrincipalLine();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v21 = v80;
    uint64_t v22 = v75;
    *(_OWORD *)(v75 + 184) = v79;
    *(_OWORD *)(v22 + 200) = v21;
    char v78 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v23 = v80;
    *(_OWORD *)(v22 + 216) = v79;
    *(_OWORD *)(v22 + 232) = v23;
    char v78 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v24 = v80;
    *(_OWORD *)(v22 + 248) = v79;
    *(_OWORD *)(v22 + 264) = v24;
    char v78 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v25 = v80;
    *(_OWORD *)(v22 + 152) = v79;
    *(_OWORD *)(v22 + 168) = v25;
    uint64_t v26 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
    char v78 = 4;
    _s8PaperKit15PKDrawingStructVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PKDrawingCoherence and conformance PKDrawingCoherence, (void (*)(uint64_t))type metadata accessor for PKDrawingCoherence);
    Class v64 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v58 = v20;
    id v61 = (id)v79;
    uint64_t v28 = v79 + OBJC_IVAR___PKDrawingCoherence_model;
    uint64_t v60 = v79 + OBJC_IVAR___PKDrawingCoherence_model;
    swift_beginAccess();
    double v59 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    uint64_t v62 = v18 + 16;
    uint64_t v29 = v65;
    uint64_t v30 = v28;
    uint64_t v31 = v66;
    v59(v65, v30, v66);
    unint64_t v32 = v67;
    Capsule.copy()();
    id v63 = *(void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v72 = v18 + 8;
    v63(v29, v31);
    uint64_t v33 = v64;
    CGRect v34 = (char *)objc_allocWithZone(v64);
    id v35 = v32;
    CGRect v36 = v59;
    v59(&v34[OBJC_IVAR___PKDrawingCoherence_model], (uint64_t)v35, v31);
    v77.receiver = v34;
    v77.super_class = v33;
    id v37 = objc_msgSendSuper2(&v77, sel_init);
    unint64_t v38 = v67;
    v63(v67, v31);
    *(void *)(v22 + 280) = v37;
    v36(v38, v60, v31);
    swift_getKeyPath();
    _s8PaperKit15PKDrawingStructVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    Capsule<>.subscript.getter();
    swift_release();
    v63(v38, v31);
    id v39 = v61;
    id v40 = specialized Sequence.compactMap<A>(_:)(v6, (uint64_t)v39);

    (*(void (**)(char *, uint64_t))(v68 + 8))(v6, v69);
    *(void *)(v22 + 296) = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    char v76 = 5;
    lazy protocol witness table accessor for type [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance <A> [A](&lazy protocol witness table cache variable for type [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance <A> [A], &lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v22 + 288) = v79;
    *(void *)(v22 + 320) = 0;
    *(void *)(v22 + 328) = 0;
    char v76 = 8;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    double v41 = *(double *)&v79;
    char v76 = 9;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    double v42 = *(double *)&v79;
    char v76 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    double v43 = *(double *)&v79;
    LOBYTE(v79) = 11;
    id v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F35CC8]), sel_initWithXHeight_ascenderHeight_descenderHeight_activeLines_, KeyedDecodingContainer.decode(_:forKey:)(), v41, v42, v43);
    uint64_t v45 = v75;
    *(void *)(v75 + 336) = v44;
    uint64_t v46 = swift_release();
    double v48 = UnknownCanvasElementView.flags.modify(v46, v47);
    *(_OWORD *)(v45 + 16) = 0u;
    *(_OWORD *)(v45 + 32) = 0u;
    *(_OWORD *)(v45 + 48) = 0u;
    *(_OWORD *)(v45 + 64) = 0u;
    *(_OWORD *)(v45 + 80) = 0u;
    *(void *)(v45 + 96) = 0;
    *(double *)(v45 + 104) = v48;
    *(void *)(v45 + 112) = v49;
    *(void *)(v45 + 120) = -1;
    *(void *)(v45 + 128) = 0;
    *(unsigned char *)(v45 + 136) = 0;
    *(void *)(v45 + 144) = 0;
    char v76 = 6;
    swift_retain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v50 = v80;
    uint64_t v51 = v75;
    *(_OWORD *)(v75 + 88) = v79;
    *(_OWORD *)(v51 + 104) = v50;
    swift_retain();
    objc_msgSend(v39, sel__canvasBounds);
    *(void *)(v51 + 16) = v52;
    *(void *)(v51 + 24) = v53;
    *(void *)(v51 + 32) = v54;
    *(void *)(v51 + 40) = v55;
    swift_release();
    LOBYTE(v79) = 7;
    swift_retain();
    uint64_t v56 = v71;
    double v57 = v73;
    LOBYTE(v40) = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v57, v56);

    uint64_t v2 = v75;
    *(unsigned char *)(v75 + 136) = v40 & 1;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
    swift_release();
  }
  return v2;
}

__n128 closure #2 in ReflowWord.init(reflowableTextToken:drawing:scale:image:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  double v82 = a3;
  uint64_t v80 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v4 - 8);
  CGPoint v67 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v69);
  uint64_t v70 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v83.n128_u64[0] = (unint64_t)&v64 - v8;
  uint64_t v9 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v81 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v89 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v71 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CGPoint v74 = *(void (***)(char *, uint64_t))(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v68 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v66 = (char *)&v64 - v18;
  MEMORY[0x270FA5388](v19);
  Class v64 = (char *)&v64 - v20;
  MEMORY[0x270FA5388](v21);
  long long v23 = (char *)&v64 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v65 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  v84.n128_u64[0] = (unint64_t)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a2 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v30 = v15 + 16;
  char v78 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v79 = v29;
  v78(v23, v29, v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v31 = type metadata accessor for PKDrawingStruct();
  uint64_t v76 = _s8PaperKit15PKDrawingStructVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  uint64_t v77 = v31;
  Ref.subscript.getter();
  unint64_t v32 = *(void (***)(char *, uint64_t))(v15 + 8);
  uint64_t v73 = v14;
  uint64_t v80 = v15 + 8;
  ((void (*)(char *, uint64_t))v32)(v23, v14);
  uint64_t v33 = v71;
  uint64_t v34 = v72;
  CRRegister.value.getter();
  uint64_t v35 = v75;
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v33, v35);
  v74[1](v13, v34);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v37 = *(void *)(v36 - 8);
  unint64_t v38 = v26;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v26, 1, v36) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    result.n128_u64[0] = 0;
    id v40 = v82;
    __n128 *v82 = 0u;
    v40[1] = 0u;
    v40[2] = 0u;
    v40[3].n128_u8[0] = 1;
  }
  else
  {
    double v41 = v64;
    double v43 = v78;
    uint64_t v42 = v79;
    v78(v64, v79, v73);
    uint64_t v75 = v30;
    Ref.subscript.getter();
    id v44 = v41;
    uint64_t v45 = v73;
    CGPoint v74 = v32;
    ((void (*)(char *, uint64_t))v32)(v44, v73);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
    uint64_t v46 = v66;
    v43(v66, v42, v45);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.getter();
    uint64_t v89 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct> and conformance Capsule<A>, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
    uint64_t v47 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
    double v48 = (void (**)(unint64_t, uint64_t))(v65 + 8);
    uint64_t v49 = (void (**)(unint64_t, uint64_t, uint64_t))(v65 + 32);
    uint64_t v50 = v45;
    uint64_t v51 = (uint64_t)v67;
    uint64_t v52 = v46;
    uint64_t v53 = v83.n128_u64[0];
    while (1)
    {
      uint64_t v54 = v52;
      uint64_t v55 = v50;
      Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeInheritedProperties(v53, type metadata accessor for PKStrokeInheritedProperties);
      if ((*v47)(v51, 1, v27) == 1) {
        break;
      }
      unint64_t v56 = v84.n128_u64[0];
      (*v48)(v84.n128_u64[0], v27);
      (*v49)(v56, v51, v27);
      uint64_t v50 = v55;
      uint64_t v52 = v54;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v51, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    outlined destroy of PKStrokeInheritedProperties(v81, type metadata accessor for PKStrokeStruct);
    double v57 = v74;
    ((void (*)(char *, uint64_t))v74)(v54, v55);
    unint64_t v58 = v68;
    v78(v68, v79, v55);
    uint64_t v59 = (uint64_t)v70;
    unint64_t v60 = v84.n128_u64[0];
    Ref.subscript.getter();
    ((void (*)(char *, uint64_t))v57)(v58, v55);
    (*v48)(v60, v27);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
    CRRegister.wrappedValue.getter();
    __n128 v83 = v86;
    __n128 v84 = v85;
    unint64_t v61 = v87;
    unint64_t v62 = v88;
    outlined destroy of PKStrokeInheritedProperties(v59, type metadata accessor for PKStrokeInheritedProperties);
    id v63 = v82;
    __n128 result = v83;
    __n128 *v82 = v84;
    v63[1] = result;
    v63[2].n128_u64[0] = v61;
    v63[2].n128_u64[1] = v62;
    v63[3].n128_u8[0] = 0;
  }
  return result;
}

uint64_t ReflowWord.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReflowWord.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = *(_OWORD *)(v3 + 200);
  long long v20 = *(_OWORD *)(v3 + 184);
  long long v21 = v9;
  char v19 = 0;
  lazy protocol witness table accessor for type PrincipalLine and conformance PrincipalLine();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v10 = *(_OWORD *)(v3 + 232);
    long long v20 = *(_OWORD *)(v3 + 216);
    long long v21 = v10;
    char v19 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + 264);
    long long v20 = *(_OWORD *)(v3 + 248);
    long long v21 = v11;
    char v19 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 168);
    long long v20 = *(_OWORD *)(v3 + 152);
    long long v21 = v12;
    char v19 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v20 = *(void *)(v3 + 280);
    char v19 = 4;
    type metadata accessor for PKDrawingCoherence(0);
    _s8PaperKit15PKDrawingStructVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type PKDrawingCoherence and conformance PKDrawingCoherence, (void (*)(uint64_t))type metadata accessor for PKDrawingCoherence);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v20 = *(void *)(v3 + 288);
    char v19 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    lazy protocol witness table accessor for type [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance <A> [A](&lazy protocol witness table cache variable for type [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance <A> [A], &lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + 104);
    long long v20 = *(_OWORD *)(v3 + 88);
    long long v21 = v13;
    char v19 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v20) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    objc_msgSend(*(id *)(v3 + 336), sel_xHeight);
    *(void *)&long long v20 = v14;
    char v19 = 8;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    objc_msgSend(*(id *)(v3 + 336), sel_ascenderHeight);
    *(void *)&long long v20 = v15;
    char v19 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    objc_msgSend(*(id *)(v3 + 336), sel_descenderHeight);
    *(void *)&long long v20 = v16;
    char v19 = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    objc_msgSend(*(id *)(v3 + 336), sel_activeLines);
    LOBYTE(v20) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id ReflowWord._layer.getter()
{
  uint64_t v1 = *(void **)(v0 + 344);
  id v2 = v1;
  if (v1 == (void *)1)
  {
    id v2 = closure #1 in ReflowWord._layer.getter(v0);
    uint64_t v3 = *(void **)(v0 + 344);
    *(void *)(v0 + 344) = v2;
    id v4 = v2;
    outlined consume of PaperKitPDFDocument??(v3);
  }
  outlined copy of CALayer??(v1);
  return v2;
}

id closure #1 in ReflowWord._layer.getter(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
  uint64_t v3 = *(void **)(a1 + 304);
  if (v3 && (id v4 = objc_msgSend(v3, sel_CGImage)) != 0)
  {
    uint64_t v7 = v4;
    type metadata accessor for CGImageRef(0);
    uint64_t v5 = _bridgeAnythingToObjectiveC<A>(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  objc_msgSend(v2, sel_setContents_, v5);
  swift_unknownObjectRelease();
  return v2;
}

uint64_t closure #1 in ReflowWord.generateImage()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a1;
  v4[4] = a4;
  type metadata accessor for MainActor();
  v4[5] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in ReflowWord.generateImage(), v6, v5);
}

uint64_t closure #1 in ReflowWord.generateImage()()
{
  swift_release();
  id v1 = ReflowWord._layer.getter();
  if (v1)
  {
    id v2 = *(void **)(*(void *)(v0 + 32) + 304);
    if (v2 && (id v3 = objc_msgSend(v2, sel_CGImage)) != 0)
    {
      *(void *)(v0 + 16) = v3;
      type metadata accessor for CGImageRef(0);
      uint64_t v4 = _bridgeAnythingToObjectiveC<A>(_:)();
    }
    else
    {
      uint64_t v4 = 0;
    }
    objc_msgSend(v1, sel_setContents_, v4);
    swift_unknownObjectRelease();
  }
  **(unsigned char **)(v0 + 24) = v1 == 0;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

Swift::Void __swiftcall ReflowWord.updateLayer()()
{
  id v1 = ReflowWord._layer.getter();
  if (v1)
  {
    if (one-time initialization token for showDebugUI != -1)
    {
      id v18 = v1;
      swift_once();
      id v1 = v18;
    }
    if (static ReflowTextView.showDebugUI == 1)
    {
      id v17 = v1;
      id v2 = self;
      id v3 = objc_msgSend(v2, sel_redColor);
      id v4 = objc_msgSend(v3, sel_colorWithAlphaComponent_, 0.1);

      id v5 = objc_msgSend(v4, sel_CGColor);
      objc_msgSend(v17, sel_setBorderColor_, v5);

      type metadata accessor for CALayer();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v17, sel_setSublayers_, isa);

      id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F15880]), sel_init);
      objc_msgSend(v7, sel_setLineWidth_, 0.5);
      id v8 = objc_msgSend(v2, sel_redColor);
      id v9 = objc_msgSend(v8, sel_colorWithAlphaComponent_, 0.7);

      id v10 = objc_msgSend(v9, sel_CGColor);
      objc_msgSend(v7, sel_setStrokeColor_, v10);

      objc_msgSend(v7, sel_setFillColor_, 0);
      CGMutablePathRef v11 = closure #1 in ReflowWord.updateLayer()((double *)v0, 0.0, 0.0, *(CGFloat *)(v0 + 64), *(CGFloat *)(v0 + 72));
      objc_msgSend(v7, sel_setPath_, v11);

      objc_msgSend(v17, sel_addSublayer_, v7);
      if (*(unsigned char *)(v0 + 136) == 1)
      {
        id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F158E8]), sel_init);
        long long v13 = (void *)MEMORY[0x21054D080](46786, 0xA200000000000000);
        objc_msgSend(v12, sel_setString_, v13);

        objc_msgSend(v12, sel_setFontSize_, 24.0);
        id v14 = v12;
        objc_msgSend(v17, sel_frame);
        objc_msgSend(v14, sel_setFrame_, CGRectGetWidth(v20), 0.0, 30.0, 30.0);

        id v15 = objc_msgSend(v2, sel_systemBlueColor);
        id v16 = objc_msgSend(v15, sel_CGColor);

        objc_msgSend(v14, sel_setForegroundColor_, v16);
        objc_msgSend(v17, sel_addSublayer_, v14);
      }
      id v1 = v17;
    }
  }
}

CGMutablePathRef closure #1 in ReflowWord.updateLayer()(double *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGMutablePathRef Mutable = CGPathCreateMutable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_20C835740;
  double v12 = a1[23];
  double v13 = a1[24];
  v26.origin.CGFloat x = a2;
  v26.origin.CGFloat y = a3;
  v26.size.CGFloat width = a4;
  v26.size.CGFloat height = a5;
  double MinX = CGRectGetMinX(v26);
  v27.origin.CGFloat x = a2;
  v27.origin.CGFloat y = a3;
  v27.size.CGFloat width = a4;
  v27.size.CGFloat height = a5;
  double v15 = MinX + v12 * CGRectGetWidth(v27);
  v28.origin.CGFloat x = a2;
  v28.origin.CGFloat y = a3;
  v28.size.CGFloat width = a4;
  v28.size.CGFloat height = a5;
  double MinY = CGRectGetMinY(v28);
  v29.origin.CGFloat x = a2;
  v29.origin.CGFloat y = a3;
  v29.size.CGFloat width = a4;
  v29.size.CGFloat height = a5;
  CGFloat Height = CGRectGetHeight(v29);
  *(double *)(v11 + 32) = v15;
  *(double *)(v11 + 40) = MinY + v13 * Height;
  double v18 = a1[25];
  double v19 = a1[26];
  v30.origin.CGFloat x = a2;
  v30.origin.CGFloat y = a3;
  v30.size.CGFloat width = a4;
  v30.size.CGFloat height = a5;
  double v20 = CGRectGetMinX(v30);
  v31.origin.CGFloat x = a2;
  v31.origin.CGFloat y = a3;
  v31.size.CGFloat width = a4;
  v31.size.CGFloat height = a5;
  double v21 = v20 + v18 * CGRectGetWidth(v31);
  v32.origin.CGFloat x = a2;
  v32.origin.CGFloat y = a3;
  v32.size.CGFloat width = a4;
  v32.size.CGFloat height = a5;
  double v22 = CGRectGetMinY(v32);
  v33.origin.CGFloat x = a2;
  v33.origin.CGFloat y = a3;
  v33.size.CGFloat width = a4;
  v33.size.CGFloat height = a5;
  CGFloat v23 = CGRectGetHeight(v33);
  *(double *)(v11 + 48) = v21;
  *(double *)(v11 + 56) = v22 + v19 * v23;
  v25.CGFloat a = 1.0;
  v25.CGFloat b = 0.0;
  v25.CGFloat c = 0.0;
  v25.CGFloat d = 1.0;
  v25.tCGFloat x = 0.0;
  v25.tCGFloat y = 0.0;
  CGMutablePathRef.addLines(between:transform:)((Swift::OpaquePointer)v11, &v25);
  swift_bridgeObjectRelease();
  return Mutable;
}

uint64_t ReflowWord.debugDescription.getter()
{
  _StringGuts.grow(_:)(19);
  v1._uint64_t countAndFlagsBits = 0x57776F6C6665523CLL;
  v1._object = (void *)0xED0000203A64726FLL;
  String.append(_:)(v1);
  if (*(void *)(v0 + 328))
  {
    uint64_t v2 = *(void *)(v0 + 320);
    id v3 = *(void **)(v0 + 328);
  }
  else
  {
    id v3 = (void *)0xE300000000000000;
    uint64_t v2 = 4079420;
  }
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

void ReflowWord.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  Swift::String v1 = *(void **)(v0 + 344);
  outlined consume of PaperKitPDFDocument??(v1);
}

id *ReflowWord.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  outlined consume of PaperKitPDFDocument??(v0[43]);
  return v0;
}

uint64_t ReflowWord.__deallocating_deinit()
{
  ReflowWord.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReflowWord()
{
  return self;
}

ValueMetadata *type metadata accessor for PrincipalLine()
{
  return &type metadata for PrincipalLine;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ReflowWord@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ReflowWord();
  uint64_t v5 = swift_allocObject();
  uint64_t result = ReflowWord.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReflowWord(void *a1)
{
  return ReflowWord.encode(to:)(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowWord()
{
  return ReflowWord.debugDescription.getter();
}

uint64_t outlined destroy of PKStrokeInheritedProperties(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowWord.CodingKeys and conformance ReflowWord.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrincipalLine and conformance PrincipalLine()
{
  unint64_t result = lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine;
  if (!lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine;
  if (!lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine and conformance PrincipalLine);
  }
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(char *a1, uint64_t a2)
{
  uint64_t v36 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v37 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::String v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v7 - 8);
  id v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  double v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v28 = *(void *)(v40 - 8);
  double v14 = MEMORY[0x270FA5388](v40);
  id v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v11 + 16))(v13, v36, v10, v14);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v35 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v36 = v16;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v17 = v37;
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  if (v34(v9, 1, v4) == 1)
  {
    double v18 = (void *)MEMORY[0x263F8EE78];
LABEL_3:
    (*(void (**)(char *, uint64_t))(v28 + 8))(v36, v40);
  }
  else
  {
    double v20 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v19 = v17 + 32;
    CGRect v33 = v20;
    double v21 = (void (**)(char *, uint64_t, __n128))(v19 - 24);
    double v18 = (void *)MEMORY[0x263F8EE78];
    uint64_t v29 = a2;
    uint64_t v37 = v19;
    v20(v6, v9, v4);
    while (1)
    {
      __n128 v24 = closure #2 in ReflowWord.init(reflowableTextToken:drawing:scale:image:)((uint64_t)v6, a2, v38);
      if (v2) {
        break;
      }
      (*v21)(v6, v4, v24);
      if ((v39 & 1) == 0)
      {
        __n128 v31 = v38[1];
        __n128 v32 = v38[0];
        __n128 v30 = v38[2];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
        }
        unint64_t v26 = v18[2];
        unint64_t v25 = v18[3];
        if (v26 >= v25 >> 1) {
          double v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v18);
        }
        v18[2] = v26 + 1;
        double v22 = &v18[6 * v26];
        __n128 v23 = v31;
        void v22[2] = v32;
        v22[3] = v23;
        v22[4] = v30;
        a2 = v29;
      }
      dispatch thunk of IteratorProtocol.next()();
      if (v34(v9, 1, v4) == 1) {
        goto LABEL_3;
      }
      v33(v6, v9, v4);
    }
    (*v21)(v6, v4, v24);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v36, v40);
    swift_bridgeObjectRelease();
  }
  return v18;
}

uint64_t specialized PrincipalLine.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7472617473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6581861 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

double specialized PrincipalLine.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PrincipalLine.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  type metadata accessor for CGPoint(0);
  char v9 = 0;
  _s8PaperKit15PKDrawingStructVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, type metadata accessor for CGPoint);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  double v6 = v10;
  char v9 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

unint64_t lazy protocol witness table accessor for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys;
  if (!lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys;
  if (!lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys;
  if (!lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys;
  if (!lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrincipalLine.CodingKeys and conformance PrincipalLine.CodingKeys);
  }
  return result;
}

unint64_t type metadata accessor for CALayer()
{
  unint64_t result = lazy cache variable for type metadata for CALayer;
  if (!lazy cache variable for type metadata for CALayer)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CALayer);
  }
  return result;
}

id outlined copy of CALayer??(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t _s8PaperKit15PKDrawingStructVAC9Coherence4CRDTAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(a2, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PrincipalLine.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C460470);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PrincipalLine.CodingKeys()
{
  return &unk_26C1560E0;
}

uint64_t getEnumTagSinglePayload for ReflowWord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReflowWord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C460604);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReflowWord.CodingKeys()
{
  return &type metadata for ReflowWord.CodingKeys;
}

unint64_t specialized ReflowWord.CodingKeys.init(rawValue:)(unint64_t result)
{
  if (result >= 0xC) {
    return 12;
  }
  return result;
}

uint64_t specialized ReflowWord.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656E696C65736162 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E694C706F74 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65646E6563736564 && a2 == 0xED0000656E694C72 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x694C6E616964656DLL && a2 == 0xEA0000000000656ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676E6977617264 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F72745374786574 && a2 == 0xEB0000000073656BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000020C8564A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000020C8564C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x74686769654878 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7265646E65637361 && a2 == 0xEE00746867696548 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x65646E6563736564 && a2 == 0xEF74686769654872 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x694C657669746361 && a2 == 0xEB0000000073656ELL)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

id protocol witness for PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(a3, a4, (uint64_t)&unk_26C156258, (uint64_t)closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)partial apply, (uint64_t)&block_descriptor_8_1);
}

id PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(a3, a4, (uint64_t)&unk_26C156258, (uint64_t)closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)partial apply, (uint64_t)&block_descriptor_8_1);
}

BOOL PaperDocumentViewDelegate.documentViewShouldAllowEditing(_:)(uint64_t a1)
{
  Swift::String v1 = (unsigned char *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  return *v1 != 0;
}

uint64_t PaperDocumentViewDelegate.documentView(_:shouldOpenLink:)()
{
  return 1;
}

UIMenu closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(uint64_t a1, UIMenuElementSize a2)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6.value.super.Class isa = 0;
  v6.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v3, (Swift::String_optional)0, v6, 0, 0xFFFFFFFFFFFFFFFFLL, a2, v5);
}

id protocol witness for PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:) in conformance PaperDocumentViewDelegate_Checker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(a3, a4, (uint64_t)&unk_26C156208, (uint64_t)partial apply for closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:), (uint64_t)&block_descriptor_27);
}

BOOL protocol witness for PaperDocumentViewDelegate.documentViewShouldAllowEditing(_:) in conformance PaperDocumentViewDelegate_Checker(uint64_t a1)
{
  Swift::String v1 = (unsigned char *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  return *v1 != 0;
}

id thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?)(uint64_t a1)
{
  Swift::String v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  Swift::String v3 = (void *)v1(v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:detectedFormInContent:withAutofill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentViewShouldAllowEditing(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:willPresentViewController:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:didDismissViewController:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:shouldOpenLink:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:thumbnailViewDidCollapse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:drawingWillChangeIn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:didChangeEditingMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:openFormFilling:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentView(_:contentFrameDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentViewDidScroll(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentViewDidBeginUsingTool(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of PaperDocumentViewDelegate.documentViewDidEndUsingTool(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t type metadata accessor for PaperDocumentViewDelegate_Checker()
{
  return self;
}

id specialized PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  char v9 = self;
  v13[4] = a4;
  v13[5] = v8;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
  v13[3] = a5;
  double v10 = _Block_copy(v13);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  id v11 = objc_msgSend(v9, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v10);
  swift_release();
  _Block_release(v10);
  return v11;
}

uint64_t sub_20C4612A4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

UIMenu partial apply for closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(uint64_t a1)
{
  return closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:)(a1, *(UIMenuElementSize *)(v1 + 16));
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

id PasswordViewController.textField.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit22PasswordViewController____lazy_storage___textField;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit22PasswordViewController____lazy_storage___textField);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit22PasswordViewController____lazy_storage___textField);
  }
  else
  {
    id v4 = closure #1 in PasswordViewController.textField.getter(v0);
    Swift::OpaquePointer v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

Swift::Bool __swiftcall PasswordViewController.textFieldShouldReturn(_:)(UITextField *a1)
{
  uint64_t v2 = v1;
  if (MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit22PasswordViewController_delegate]))
  {
    id v4 = [(UITextField *)a1 text];
    if (v4)
    {
      Swift::OpaquePointer v5 = v4;
      id v6 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;
    }
    else
    {
      id v6 = 0;
      uint64_t v8 = (void *)0xE000000000000000;
    }
    char v9 = PaperDocumentViewController.passwordViewController(_:shouldUnlockWithPassword:)(v1, v6, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    if (v9) {
      return 1;
    }
  }
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  Class isa = paperKitBundle.super.isa;
  v34._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v34._object = (void *)0x800000020C856640;
  v12._object = (void *)0x800000020C856620;
  v12._uint64_t countAndFlagsBits = 0xD000000000000010;
  v13.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v13.value._object = (void *)0xEB00000000656C62;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, paperKitBundle, v14, v34);
  v35._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v16._uint64_t countAndFlagsBits = 0xD000000000000020;
  v35._object = (void *)0x800000020C856690;
  v16._object = (void *)0x800000020C856660;
  v17.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v17.value._object = (void *)0xEB00000000656C62;
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)isa, v18, v35);
  double v20 = (void *)MEMORY[0x21054D080](v15._countAndFlagsBits, v15._object);
  swift_bridgeObjectRelease();
  double v21 = (void *)MEMORY[0x21054D080](v19._countAndFlagsBits, v19._object);
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(self, sel_alertControllerWithTitle_message_preferredStyle_, v20, v21, 1);

  v36._uint64_t countAndFlagsBits = 0xD000000000000027;
  v36._object = (void *)0x800000020C8566B0;
  v23._uint64_t countAndFlagsBits = 19279;
  v23._object = (void *)0xE200000000000000;
  v24.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v24.value._object = (void *)0xEB00000000656C62;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, paperKitBundle, v25, v36);
  uint64_t v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v27;
  *(void *)(v28 + 24) = a1;
  swift_retain();
  uint64_t v29 = a1;
  __n128 v30 = (void *)MEMORY[0x21054D080](v26._countAndFlagsBits, v26._object);
  swift_bridgeObjectRelease();
  aBlock[4] = partial apply for closure #1 in PasswordViewController.textFieldShouldReturn(_:);
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  aBlock[3] = &block_descriptor_28;
  __n128 v31 = _Block_copy(aBlock);
  swift_release();
  id v32 = objc_msgSend(self, sel_actionWithTitle_style_handler_, v30, 0, v31);
  _Block_release(v31);
  swift_release();

  objc_msgSend(v22, sel_addAction_, v32);
  objc_msgSend(v2, sel_presentViewController_animated_completion_, v22, 1, 0);

  return 0;
}

id closure #1 in PasswordViewController.textField.getter(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CF0]), sel_init);
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v2, sel_setSecureTextEntry_, 1);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81650]), sel_init);
  objc_msgSend(v3, sel_setAlignment_, 1);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v25._object = (void *)0x800000020C8566E0;
  v4._uint64_t countAndFlagsBits = 0x64726F7773736150;
  v4._object = (void *)0xE800000000000000;
  v5.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v25._uint64_t countAndFlagsBits = 0xD000000000000023;
  Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, paperKitBundle, v6, v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C835740;
  char v9 = (void *)*MEMORY[0x263F81540];
  *(void *)(inited + 32) = *MEMORY[0x263F81540];
  uint64_t v10 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
  *(void *)(inited + 40) = v3;
  id v11 = (void *)*MEMORY[0x263F81500];
  *(void *)(inited + 64) = v10;
  *(void *)(inited + 72) = v11;
  Swift::String v12 = self;
  id v13 = v9;
  id v14 = v3;
  id v15 = v11;
  id v16 = objc_msgSend(v12, sel_placeholderTextColor);
  *(void *)(inited + 104) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(void *)(inited + 80) = v16;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  id v17 = objc_allocWithZone(MEMORY[0x263F086A0]);
  Swift::String v18 = (void *)MEMORY[0x21054D080](v7._countAndFlagsBits, v7._object);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v20 = objc_msgSend(v17, sel_initWithString_attributes_, v18, isa);

  objc_msgSend(v2, sel_setAttributedPlaceholder_, v20);
  id v21 = v2;
  id v22 = objc_msgSend(v12, sel_systemBackgroundColor);
  objc_msgSend(v21, sel_setBackgroundColor_, v22);

  id v23 = objc_msgSend(v12, sel_secondaryLabelColor);
  objc_msgSend(v21, sel_setTextColor_, v23);

  objc_msgSend(v21, sel_setTextAlignment_, 1);
  objc_msgSend(v21, sel_setDelegate_, a1);
  objc_msgSend(v21, sel_setReturnKeyType_, 1);

  return v21;
}

Swift::Void __swiftcall PasswordViewController.loadView()()
{
  v38.receiver = v0;
  v38.super_class = (Class)type metadata accessor for PasswordViewController();
  objc_msgSendSuper2(&v38, sel_loadView);
  id v1 = objc_msgSend(v0, sel_view);
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v3 = self;
    id v4 = objc_msgSend(v3, sel_secondarySystemBackgroundColor);
    objc_msgSend(v2, sel_setBackgroundColor_, v4);

    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
    objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v6._uint64_t countAndFlagsBits = 0xD000000000000024;
    v39._object = (void *)0x800000020C856600;
    v6._object = (void *)0x800000020C8565D0;
    v7.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v7.value._object = (void *)0xEB00000000656C62;
    v8._uint64_t countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v39._uint64_t countAndFlagsBits = 0xD000000000000019;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, paperKitBundle, v8, v39)._countAndFlagsBits;
    uint64_t v10 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setText_, v10);

    id v11 = objc_msgSend(v3, sel_secondaryLabelColor);
    objc_msgSend(v5, sel_setTextColor_, v11);

    id v12 = PasswordViewController.textField.getter();
    objc_msgSend(v2, sel_addSubview_, v5);
    objc_msgSend(v2, sel_addSubview_, v12);
    id v13 = objc_msgSend(v12, sel_bottomAnchor);
    id v14 = objc_msgSend(v2, sel_centerYAnchor);
    id v36 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

    LODWORD(v15) = 1144750080;
    objc_msgSend(v36, sel_setPriority_, v15);
    id v16 = objc_msgSend(v12, sel_bottomAnchor);
    id v17 = objc_msgSend(v2, sel_keyboardLayoutGuide);
    id v18 = objc_msgSend(v17, sel_topAnchor);

    id v35 = objc_msgSend(v16, sel_constraintLessThanOrEqualToAnchor_constant_, v18, -2.0);
    id v37 = self;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_20C83B680;
    id v20 = objc_msgSend(v12, sel_widthAnchor);
    id v21 = objc_msgSend(v5, sel_widthAnchor);
    id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

    *(void *)(v19 + 32) = v22;
    id v23 = objc_msgSend(v12, sel_centerXAnchor);
    id v24 = objc_msgSend(v2, sel_centerXAnchor);
    id v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

    *(void *)(v19 + 40) = v25;
    id v26 = objc_msgSend(v5, sel_centerXAnchor);
    id v27 = objc_msgSend(v2, sel_centerXAnchor);
    id v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

    *(void *)(v19 + 48) = v28;
    id v29 = objc_msgSend(v5, sel_bottomAnchor);
    id v30 = objc_msgSend(v12, sel_topAnchor);
    id v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_constant_, v30, -*(double *)&v0[OBJC_IVAR____TtC8PaperKit22PasswordViewController_distanceFromLabelToTextField]);

    *(void *)(v19 + 56) = v31;
    *(void *)(v19 + 64) = v35;
    *(void *)(v19 + 72) = v36;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    id v32 = v35;
    id v33 = v36;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v37, sel_activateConstraints_, isa);
  }
}

void closure #1 in PasswordViewController.textFieldShouldReturn(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x210550400](v4);
  if (v5)
  {
    Swift::String v6 = (void *)v5;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a3;
    aBlock[4] = partial apply for closure #1 in closure #1 in PasswordViewController.textFieldShouldReturn(_:);
    aBlock[5] = v7;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_19_1;
    Swift::String v8 = _Block_copy(aBlock);
    id v9 = a3;
    swift_release();
    objc_msgSend(v6, sel_dismissViewControllerAnimated_completion_, 1, v8);
    _Block_release(v8);
  }
}

id closure #1 in closure #1 in PasswordViewController.textFieldShouldReturn(_:)(void *a1)
{
  id v2 = (void *)MEMORY[0x21054D080](0, 0xE000000000000000);
  objc_msgSend(a1, sel_setText_, v2);

  return objc_msgSend(a1, sel_becomeFirstResponder);
}

id PasswordViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit22PasswordViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit22PasswordViewController_distanceFromLabelToTextField] = 0x4034000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit22PasswordViewController_distanceFromTopOfKeyboard] = 0x4000000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit22PasswordViewController____lazy_storage___textField] = 0;
  if (a2)
  {
    uint64_t v7 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for PasswordViewController();
  id v8 = objc_msgSendSuper2(&v10, sel_initWithNibName_bundle_, v7, a3);

  return v8;
}

id PasswordViewController.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit22PasswordViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit22PasswordViewController_distanceFromLabelToTextField] = 0x4034000000000000;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit22PasswordViewController_distanceFromTopOfKeyboard] = 0x4000000000000000;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit22PasswordViewController____lazy_storage___textField] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for PasswordViewController();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id PasswordViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PasswordViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PasswordViewController()
{
  return self;
}

uint64_t sub_20C4624A4()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C4624DC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in PasswordViewController.textFieldShouldReturn(_:)(uint64_t a1)
{
  closure #1 in PasswordViewController.textFieldShouldReturn(_:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t sub_20C46253C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #1 in closure #1 in PasswordViewController.textFieldShouldReturn(_:)()
{
  return closure #1 in closure #1 in PasswordViewController.textFieldShouldReturn(_:)(*(void **)(v0 + 16));
}

unint64_t protocol witness for CalculateDocumentObserver.calculateDocumentObserverGraphableVariables() in conformance AnyCanvas()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9Calculate0D10ExpressionC5TokenCG_AH0F4TypeOs5NeverOTg5016_s9Calculate0A10e33C8PaperKitE13isDeclarationSbvgAC9fG59OAC0G0Ccfu_33_379fbffcc6deb0f3d8ef6a760e37c069AiGTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v16 = type metadata accessor for CalculateExpression.TokenType();
  uint64_t v4 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  Swift::String v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    if (!v7) {
      return v8;
    }
    uint64_t v17 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0) {
      break;
    }
    uint64_t v10 = 0;
    uint64_t v8 = v17;
    unint64_t v15 = a1 & 0xC000000000000001;
    v14[0] = v2;
    v14[1] = v4 + 32;
    unint64_t v11 = a1;
    while (v7 != v10)
    {
      if (v15) {
        MEMORY[0x21054E050](v10, a1);
      }
      else {
        swift_retain();
      }
      CalculateExpression.Token.type.getter();
      swift_release();
      uint64_t v17 = v8;
      unint64_t v13 = *(void *)(v8 + 16);
      unint64_t v12 = *(void *)(v8 + 24);
      unint64_t v2 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v8 = v17;
      }
      ++v10;
      *(void *)(v8 + 16) = v2;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v13, v6, v16);
      a1 = v11;
      if (v7 == v10) {
        return v8;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

BOOL CalculateExpression.isActuallyGraphable.getter()
{
  if (CalculateExpression.isGraphable.getter()) {
    return 1;
  }
  Swift::String v6 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v7 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v5[0] = 8;
  char v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if ((v0 & 1) == 0) {
    return 0;
  }
  CalculateExpression.graphableVariable.getter();
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  if (v2) {
    return 1;
  }
  uint64_t v4 = *(void *)(CalculateExpression.graphableVariables.getter() + 16);
  swift_bridgeObjectRelease();
  return v4 != 0;
}

uint64_t CalculateExpression.isDeclaration.getter()
{
  uint64_t v0 = type metadata accessor for CalculateExpression.TokenType();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  Swift::String v6 = (char *)&v46 - v5;
  MEMORY[0x270FA5388](v7);
  id v9 = (char *)&v46 - v8;
  CalculateExpression.plain.getter();
  unint64_t v10 = dispatch thunk of CalculateExpression.PlainExpression.tokens.getter();
  swift_release();
  uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9Calculate0D10ExpressionC5TokenCG_AH0F4TypeOs5NeverOTg5016_s9Calculate0A10e33C8PaperKitE13isDeclarationSbvgAC9fG59OAC0G0Ccfu_33_379fbffcc6deb0f3d8ef6a760e37c069AiGTf3nnnpk_nTf1cn_n(v10);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v13 = MEMORY[0x263F8EE78];
  unint64_t v55 = *(void *)(v11 + 16);
  uint64_t v56 = MEMORY[0x263F8EE78];
  if (v55)
  {
    uint64_t v54 = v3;
    unint64_t v14 = 0;
    uint64_t v52 = v1 + 16;
    LODWORD(v51) = *MEMORY[0x263F2FC00];
    uint64_t v49 = (void (**)(uint64_t, char *, uint64_t))(v1 + 32);
    *(void *)&long long v50 = v1 + 104;
    unint64_t v47 = v1 + 8;
    uint64_t v48 = v1;
    uint64_t v53 = v11;
    while (v14 < *(void *)(v11 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
      uint64_t v16 = *(void *)(v1 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v9, v11 + v15 + v16 * v14, v0);
      (*(void (**)(char *, void, uint64_t))(v1 + 104))(v6, v51, v0);
      lazy protocol witness table accessor for type MathExpression and conformance MathExpression((unint64_t *)&lazy protocol witness table cache variable for type CalculateExpression.TokenType and conformance CalculateExpression.TokenType, 255, MEMORY[0x263F2FC58]);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v18 = *(void (**)(char *, uint64_t))(v1 + 8);
      v18(v6, v0);
      if (v17)
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v9, v0);
      }
      else
      {
        uint64_t v19 = *v49;
        (*v49)((uint64_t)v54, v9, v0);
        uint64_t v20 = v56;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1);
          uint64_t v20 = v56;
        }
        unint64_t v22 = *(void *)(v20 + 16);
        unint64_t v21 = *(void *)(v20 + 24);
        if (v22 >= v21 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
          uint64_t v20 = v56;
        }
        *(void *)(v20 + 16) = v22 + 1;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v19)(v20 + v15 + v22 * v16, v54, v0);
        uint64_t v56 = v20;
        uint64_t v1 = v48;
      }
      ++v14;
      uint64_t v11 = v53;
      if (v55 == v14)
      {
        uint64_t v13 = v56;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  if (*(void *)(v13 + 16) >= 2uLL) {
    unint64_t v23 = 2;
  }
  else {
    unint64_t v23 = *(void *)(v13 + 16);
  }
  uint64_t v24 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  uint64_t v26 = v13 + v25;
  unint64_t v55 = (2 * v23) | 1;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CalculateExpression.TokenType>);
  id v28 = *(void (***)(uint64_t, char *, uint64_t))(v1 + 72);
  uint64_t v52 = v25 + 2 * (void)v28;
  uint64_t v53 = v27;
  uint64_t v51 = v24 | 7;
  uint64_t v29 = swift_allocObject();
  long long v50 = xmmword_20C835740;
  *(_OWORD *)(v29 + 16) = xmmword_20C835740;
  uint64_t v48 = v25;
  uint64_t v30 = v29 + v25;
  id v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  v31(v30, *MEMORY[0x263F2FC48], v0);
  uint64_t v49 = v28;
  uint64_t v32 = *MEMORY[0x263F2FC28];
  v31((uint64_t)v28 + v30, v32, v0);
  swift_retain();
  uint64_t v54 = (char *)v26;
  uint64_t v33 = v26;
  unint64_t v34 = v55;
  specialized static ArraySlice<A>.== infix(_:_:)(v33, 0, v55, v30, 0, 5uLL);
  LOBYTE(v30) = v35;
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v30) {
    goto LABEL_19;
  }
  if (*(void *)(v13 + 16) < v23)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v47 = v23;
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = v50;
  uint64_t v37 = v48;
  uint64_t v38 = v36 + v48;
  v31(v36 + v48, *MEMORY[0x263F2FC20], v0);
  Swift::String v39 = v49;
  v31((uint64_t)v49 + v38, v32, v0);
  swift_retain();
  specialized static ArraySlice<A>.== infix(_:_:)((uint64_t)v54, 0, v34, v38, 0, 5uLL);
  LOBYTE(v38) = v40;
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v38)
  {
LABEL_19:
    swift_release();
    char v41 = 1;
    return v41 & 1;
  }
  if (*(void *)(v13 + 16) >= v47)
  {
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = v50;
    unint64_t v43 = v34;
    uint64_t v44 = v42 + v37;
    v31(v42 + v37, *MEMORY[0x263F2FC40], v0);
    v31((uint64_t)v39 + v44, v32, v0);
    specialized static ArraySlice<A>.== infix(_:_:)((uint64_t)v54, 0, v43, v44, 0, 5uLL);
    char v41 = v45;
    swift_release();
    swift_bridgeObjectRelease();
    return v41 & 1;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t CalculateExpression.shouldShowErrors.getter()
{
  uint64_t v0 = type metadata accessor for CalculateExpression.TokenType();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  char v45 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v38 - v4;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v38 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v38 - v10;
  if ((CalculateExpression.isLikelyMath.getter() & 1) == 0) {
    return 0;
  }
  CalculateExpression.plain.getter();
  unint64_t v12 = dispatch thunk of CalculateExpression.PlainExpression.tokens.getter();
  swift_release();
  if (v12 >> 62) {
    goto LABEL_34;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  swift_bridgeObjectRelease();
  if (v13 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CalculateExpression.TokenType>);
    uint64_t v14 = *(void *)(v1 + 72);
    unint64_t v15 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_20C835740;
    uint64_t v17 = *MEMORY[0x263F2FC48];
    unint64_t v43 = v1;
    id v18 = *(void (**)(void))(v1 + 104);
    ((void (*)(unint64_t, uint64_t, uint64_t))v18)(v16 + v15, v17, v0);
    uint64_t v44 = (void (**)(char *, void, uint64_t))(v16 + v15);
    unint64_t v41 = v16 + v15 + v14;
    v18();
    CalculateExpression.plain.getter();
    uint64_t v19 = dispatch thunk of CalculateExpression.PlainExpression.tokens.getter();
    uint64_t result = swift_release();
    uint64_t v42 = v16;
    if ((v19 & 0xC000000000000001) != 0)
    {
      MEMORY[0x21054E050](0, v19);
    }
    else
    {
      if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      swift_retain();
    }
    swift_bridgeObjectRelease();
    CalculateExpression.Token.type.getter();
    swift_release();
    unint64_t v21 = v43;
    char v40 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
    v40(v8, (unint64_t)v44, v0);
    uint64_t v39 = lazy protocol witness table accessor for type MathExpression and conformance MathExpression((unint64_t *)&lazy protocol witness table cache variable for type CalculateExpression.TokenType and conformance CalculateExpression.TokenType, 255, MEMORY[0x263F2FC58]);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v23 = *(void (**)(char *, uint64_t))(v21 + 8);
    swift_bridgeObjectRetain();
    v23(v8, v0);
    if (v22)
    {
      swift_bridgeObjectRelease();
      v23(v11, v0);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      return 0;
    }
    v40(v8, v41, v0);
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    v23(v8, v0);
    swift_bridgeObjectRelease();
    v23(v11, v0);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v1 = v43;
    if (v24) {
      return 0;
    }
  }
  if ((CalculateExpression.isDeclaration.getter() & 1) == 0
    || CalculateExpression.isActuallyGraphable.getter()
    || (uint64_t result = CalculateExpression.referenceCount.getter()) != 0)
  {
    CalculateExpression.plain.getter();
    unint64_t v25 = dispatch thunk of CalculateExpression.PlainExpression.tokens.getter();
    swift_release();
    if (v25 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      if (v26) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v26)
      {
LABEL_16:
        unint64_t v43 = v25 & 0xC000000000000001;
        LODWORD(v42) = *MEMORY[0x263F2FC48];
        uint64_t v44 = (void (**)(char *, void, uint64_t))(v1 + 104);
        uint64_t v8 = (char *)(v1 + 8);
        LODWORD(v40) = *MEMORY[0x263F2FC30];
        LODWORD(v39) = *MEMORY[0x263F2FC20];
        uint64_t v1 = 4;
        unint64_t v41 = v25;
        uint64_t v38 = (char *)v26;
        do
        {
          uint64_t v27 = v1 - 4;
          if (v43)
          {
            MEMORY[0x21054E050](v1 - 4, v25);
            uint64_t v11 = (char *)(v1 - 3);
            if (__OFADD__(v27, 1)) {
              goto LABEL_33;
            }
          }
          else
          {
            swift_retain();
            uint64_t v11 = (char *)(v1 - 3);
            if (__OFADD__(v27, 1))
            {
LABEL_33:
              __break(1u);
LABEL_34:
              swift_bridgeObjectRetain();
              uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_4;
            }
          }
          CalculateExpression.Token.type.getter();
          id v28 = v45;
          uint64_t v29 = *v44;
          (*v44)(v45, v42, v0);
          char v30 = static CalculateExpression.TokenType.== infix(_:_:)();
          id v31 = *(void (**)(char *, uint64_t))v8;
          (*(void (**)(char *, uint64_t))v8)(v28, v0);
          v31(v5, v0);
          if (v30)
          {
            uint64_t v32 = *(void *)(dispatch thunk of CalculateExpression.Token.errors.getter() + 16);
            swift_bridgeObjectRelease();
            if (!v32) {
              goto LABEL_31;
            }
          }
          CalculateExpression.Token.type.getter();
          uint64_t v33 = v45;
          v29(v45, v40, v0);
          char v34 = static CalculateExpression.TokenType.== infix(_:_:)();
          v31(v33, v0);
          v31(v5, v0);
          if ((v34 & 1) != 0
            || (CalculateExpression.Token.type.getter(),
                char v35 = CalculateExpression.TokenType.isConstant.getter(),
                v31(v5, v0),
                (v35 & 1) != 0))
          {
LABEL_31:
            swift_release();
LABEL_32:
            swift_bridgeObjectRelease_n();
            return 1;
          }
          CalculateExpression.Token.type.getter();
          uint64_t v36 = v45;
          v29(v45, v39, v0);
          char v37 = static CalculateExpression.TokenType.== infix(_:_:)();
          v31(v36, v0);
          v31(v5, v0);
          swift_release();
          if (v37) {
            goto LABEL_32;
          }
          ++v1;
          unint64_t v25 = v41;
        }
        while (v11 != v38);
      }
    }
    swift_bridgeObjectRelease_n();
    return 0;
  }
  return result;
}

uint64_t protocol witness for CalculateMathItem.expressionString.getter in conformance PKMathRecognitionItem()
{
  id v1 = objc_msgSend(*v0, sel_expression);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id protocol witness for CalculateMathItem.sortIndex.getter in conformance PKMathRecognitionItem()
{
  return objc_msgSend(*v0, sel_sortIndex);
}

void protocol witness for CalculateMathItem.uuid.getter in conformance PKMathRecognitionItem()
{
  id v1 = objc_msgSend(*v0, sel_uuid);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

id protocol witness for CalculateMathItem.strokeGroupIdentifier.getter in conformance PKMathRecognitionItem()
{
  id v1 = objc_msgSend(*v0, sel_strokeGroupIdentifier);
  return v1;
}

uint64_t String.stringByInsertingLaTeXSpaces()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 4 * v2;
  while (1)
  {
    v4._uint64_t countAndFlagsBits = String.subscript.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    if (v3 == (unint64_t)String.index(_:offsetBy:)() >> 14) {
      break;
    }
    v5._uint64_t countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
  }
  return 0;
}

uint64_t CalculateExpression.pkTokens.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v3 - 8);
  id v114 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for CalculateExpression.TokenType();
  unint64_t v5 = *(void *)(v110 - 8);
  MEMORY[0x270FA5388](v110);
  uint64_t v109 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = MEMORY[0x263F8EE78];
  uint64_t v7 = CalculateExpression.expression.getter();
  unint64_t v9 = v8;
  CalculateExpression.plain.getter();
  unint64_t v10 = dispatch thunk of CalculateExpression.PlainExpression.tokens.getter();
  swift_release();
  if (v10 >> 62)
  {
LABEL_89:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(NSObject **)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v119 = v9;
  uint64_t v113 = v7;
  if (v11)
  {
    BOOL v115 = 0;
    unint64_t v12 = 0;
    unint64_t v108 = v10 & 0xC000000000000001;
    uint64_t v101 = v10 & 0xFFFFFFFFFFFFFF8;
    unint64_t v103 = v10;
    unint64_t v100 = v10 + 32;
    id v107 = (uint64_t (**)(unint64_t, uint64_t))(v5 + 88);
    int v106 = *MEMORY[0x263F2FC30];
    int v102 = *MEMORY[0x263F2FC48];
    uint64_t v99 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v13 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v13 = v7 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v14 = 11;
    if (((v9 >> 60) & ((v7 & 0x800000000000000) == 0)) == 0) {
      uint64_t v14 = 7;
    }
    uint64_t v112 = v14 | (v13 << 16);
    unint64_t v105 = 4 * v13;
    unint64_t v15 = 15;
    uint64_t v111 = v2;
    long long v104 = v11;
    while (1)
    {
      if (v108)
      {
        uint64_t v17 = MEMORY[0x21054E050](v12, v103);
        BOOL v18 = __OFADD__(v12, 1);
        uint64_t v19 = ((char *)&v12->isa + 1);
        if (v18) {
          goto LABEL_82;
        }
      }
      else
      {
        if ((unint64_t)v12 >= *(void *)(v101 + 16))
        {
          __break(1u);
          goto LABEL_89;
        }
        uint64_t v17 = *(void *)(v100 + 8 * (void)v12);
        swift_retain();
        BOOL v18 = __OFADD__(v12, 1);
        uint64_t v19 = ((char *)&v12->isa + 1);
        if (v18)
        {
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
      }
      uint64_t v116 = v19;
      uint64_t v1 = dispatch thunk of CalculateExpression.Token.text.getter();
      unint64_t v21 = v20;
      if (String.count.getter() < 2)
      {
        uint64_t v117 = 0;
        unint64_t v121 = 0xE000000000000000;
      }
      else
      {
        uint64_t v117 = String.stringByInsertingLaTeXSpaces()(v1, v21);
        unint64_t v121 = v22;
      }
      id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B80]), sel_init);
      objc_msgSend(v23, sel_setIsTrigonometric_, dispatch thunk of CalculateExpression.Token.isTrigonometric.getter() & 1);
      unint64_t v5 = (unint64_t)v109;
      CalculateExpression.Token.type.getter();
      int v24 = (*v107)(v5, v110);
      if (v24 == v106)
      {
        objc_msgSend(v23, sel_setType_, 1);
      }
      else if (v24 == v102)
      {
        objc_msgSend(v23, sel_setType_, 2);
      }
      else
      {
        objc_msgSend(v23, sel_setType_, 0);
        (*v99)(v109, v110);
      }
      if (v105 < v15 >> 14) {
        goto LABEL_83;
      }
      id v122 = v23;
      unint64_t v120 = v17;
      swift_bridgeObjectRetain();
      uint64_t v25 = String.subscript.getter();
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      swift_bridgeObjectRelease();
      uint64_t v125 = v25;
      uint64_t v126 = v27;
      uint64_t v127 = v29;
      uint64_t v128 = v31;
      unint64_t v123 = v1;
      unint64_t v124 = v21;
      unint64_t v5 = type metadata accessor for Locale();
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(*(void *)(v5 - 8) + 56);
      uint64_t v33 = (uint64_t)v114;
      v32(v114, 1, 1, v5);
      lazy protocol witness table accessor for type Substring and conformance Substring();
      unint64_t v118 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v34 = StringProtocol.range<A>(of:options:range:locale:)();
      LOBYTE(v27) = v35;
      outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      if (v27)
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = HIBYTE(v121) & 0xF;
        if ((v121 & 0x2000000000000000) == 0) {
          uint64_t v36 = v117 & 0xFFFFFFFFFFFFLL;
        }
        if (!v36) {
          goto LABEL_59;
        }
        swift_bridgeObjectRetain();
        uint64_t v37 = String.subscript.getter();
        uint64_t v39 = v38;
        uint64_t v41 = v40;
        uint64_t v43 = v42;
        uint64_t v1 = v117;
        swift_bridgeObjectRelease();
        uint64_t v125 = v37;
        uint64_t v126 = v39;
        uint64_t v127 = v41;
        uint64_t v128 = v43;
        unint64_t v21 = v121;
        unint64_t v123 = v1;
        unint64_t v124 = v121;
        uint64_t v44 = (uint64_t)v114;
        v32(v114, 1, 1, v5);
        uint64_t v34 = StringProtocol.range<A>(of:options:range:locale:)();
        unint64_t v5 = v45;
        outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for Locale?);
        swift_bridgeObjectRelease();
        if (v5)
        {
LABEL_59:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v68 = type metadata accessor for Logger();
          __swift_project_value_buffer(v68, (uint64_t)logger);
          uint64_t v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v69, v70))
          {
            uint64_t v71 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v71 = 0;
            _os_log_impl(&dword_20C2D7000, v69, v70, "Error parsing Calculate tokens", v71, 2u);
            MEMORY[0x210550270](v71, -1, -1);
          }

          swift_release();
          return MEMORY[0x263F8EE78];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v7 = v113;
      uint64_t v2 = v111;
      unint64_t v10 = v120;
      if ((v21 & 0x1000000000000000) != 0) {
        Swift::Int v46 = String.UTF16View._foreignCount()();
      }
      else {
        Swift::Int v46 = String.UTF16View._nativeGetOffset(for:)();
      }
      Swift::Int v47 = v46;
      if (objc_msgSend(v122, sel_type, v99)
        || (dispatch thunk of CalculateExpression.Token.isTrigonometric.getter() & 1) != 0)
      {
        unint64_t v123 = MEMORY[0x263F8EE78];
        if (CalculateExpression.shouldShowErrors.getter())
        {
          uint64_t v117 = v34;
          unint64_t v121 = dispatch thunk of CalculateExpression.Token.errors.getter();
          uint64_t v48 = *(void *)(v121 + 16);
          if (v48)
          {
            uint64_t v49 = (void **)(v121 + 32);
            do
            {
              long long v50 = *v49;
              swift_getErrorValue();
              id v51 = v50;
              uint64_t v52 = Error.localizedDescription.getter();
              unint64_t v54 = v53;
              uint64_t v55 = HIBYTE(v53) & 0xF;
              if ((v53 & 0x2000000000000000) == 0) {
                uint64_t v55 = v52 & 0xFFFFFFFFFFFFLL;
              }
              if (v55)
              {
                uint64_t v56 = v52;
                id v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B70]), sel_init);
                unint64_t v58 = (void *)MEMORY[0x21054D080](v56, v54);
                swift_bridgeObjectRelease();
                objc_msgSend(v57, sel_setErrorString_, v58);

                uint64_t v59 = (void *)_convertErrorToNSError(_:)();
                id v60 = objc_msgSend(v59, sel_localizedFailureReason);

                objc_msgSend(v57, sel_setErrorReasonString_, v60);
                id v61 = v57;
                MEMORY[0x21054D330]();
                if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
              else
              {
                swift_bridgeObjectRelease();
              }

              ++v49;
              --v48;
            }
            while (v48);
          }
          swift_bridgeObjectRelease();
          uint64_t v2 = v111;
          unint64_t v10 = v120;
        }
        uint64_t v125 = v7;
        uint64_t v126 = v119;
        uint64_t v62 = String.Index.utf16Offset<A>(in:)();
        id v63 = (void *)MEMORY[0x21054D080](v1, v21);
        swift_bridgeObjectRelease();
        id v64 = v122;
        objc_msgSend(v122, sel_setText_, v63);

        objc_msgSend(v64, sel_setCharacterRange_, v62, v47);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKMathRecognitionError);
        swift_bridgeObjectRetain();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v64, sel_setErrors_, isa);

        id v66 = v64;
        MEMORY[0x21054D330]();
        if (*(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        unint64_t v5 = v123;
        unint64_t v12 = v116;
        if (v115)
        {
          swift_bridgeObjectRelease();
          BOOL v16 = 1;
        }
        else
        {
          if (v123 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v67 = *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          BOOL v16 = v67 != 0;
        }
        BOOL v115 = v16;
        uint64_t v11 = v104;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = v104;
        unint64_t v12 = v116;
      }
      unint64_t v9 = v119;
      unint64_t v15 = String.index(_:offsetBy:)();
      swift_release();

      if (v12 == v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_65;
      }
    }
  }
  swift_bridgeObjectRelease();
  BOOL v115 = 0;
LABEL_65:
  uint64_t v73 = CalculateExpression.error.getter();
  if (v73)
  {
    uint64_t v7 = v73;
    if ((CalculateExpression.shouldShowErrors.getter() & 1) == 0) {
      goto LABEL_78;
    }
    if (CalculateExpression.isGraphable.getter()) {
      goto LABEL_78;
    }
    CalculateExpression.graphableVariable.getter();
    uint64_t v75 = v74;
    swift_bridgeObjectRelease();
    if (v75) {
      goto LABEL_78;
    }
    uint64_t v76 = *(void *)(CalculateExpression.graphableVariables.getter() + 16);
    swift_bridgeObjectRelease();
    if (v76 == 1 || v115) {
      goto LABEL_78;
    }
    swift_getErrorValue();
    uint64_t v77 = Error.localizedDescription.getter();
    unint64_t v79 = v78;
    swift_bridgeObjectRelease();
    uint64_t v80 = HIBYTE(v79) & 0xF;
    if ((v79 & 0x2000000000000000) == 0) {
      uint64_t v80 = v77 & 0xFFFFFFFFFFFFLL;
    }
    if (!v80)
    {
LABEL_78:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_getErrorValue();
      uint64_t v1 = Error.localizedDescription.getter();
      unint64_t v5 = v81;
      if (one-time initialization token for mathLogger != -1) {
        swift_once();
      }
      uint64_t v82 = type metadata accessor for Logger();
      __swift_project_value_buffer(v82, (uint64_t)mathLogger);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v83))
      {
        uint64_t v84 = swift_slowAlloc();
        id v122 = (id)swift_slowAlloc();
        uint64_t v125 = (uint64_t)v122;
        *(_DWORD *)uint64_t v84 = 136380931;
        uint64_t v85 = CalculateExpression.expression.getter();
        unint64_t v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v84 + 12) = 2080;
        swift_bridgeObjectRetain();
        unint64_t v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v5, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_20C2D7000, v11, v83, "Found expression error for: %{private}s => %s", (uint8_t *)v84, 0x16u);
        id v87 = v122;
        swift_arrayDestroy();
        unint64_t v9 = v119;
        MEMORY[0x210550270](v87, -1, -1);
        MEMORY[0x210550270](v84, -1, -1);
      }
      else
      {
LABEL_84:

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      id v88 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B70]), sel_init);
      uint64_t v89 = (void *)MEMORY[0x21054D080](v1, v5);
      swift_bridgeObjectRelease();
      objc_msgSend(v88, sel_setErrorString_, v89);

      id v90 = (void *)_convertErrorToNSError(_:)();
      id v91 = objc_msgSend(v90, sel_localizedFailureReason);

      objc_msgSend(v88, sel_setErrorReasonString_, v91);
      id v92 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14B80]), sel_init);
      objc_msgSend(v92, sel_setType_, 5);
      uint64_t v93 = v113;
      objc_msgSend(v92, sel_setCharacterRange_, 0, String.count.getter());
      double v94 = (void *)MEMORY[0x21054D080](v93, v9);
      swift_bridgeObjectRelease();
      objc_msgSend(v92, sel_setText_, v94);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v95 = swift_allocObject();
      *(_OWORD *)(v95 + 16) = xmmword_20C835790;
      *(void *)(v95 + 32) = v88;
      uint64_t v125 = v95;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKMathRecognitionError);
      id v96 = v88;
      Class v97 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v92, sel_setErrors_, v97);

      id v98 = v92;
      MEMORY[0x21054D330]();
      if (*(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v129;
}

Class @objc CalculateDocumentProvider.recognizedExpressions.getter(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t *a5)
{
  id v7 = a1;
  uint64_t v8 = swift_bridgeObjectRetain();
  a4(v8);

  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v9.super.isa;
}

uint64_t CalculateDocumentProvider.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v29);
  if (!v30)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for Any?);
    goto LABEL_25;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_25:
    unsigned __int8 v25 = 0;
    return v25 & 1;
  }
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables);
  uint64_t v5 = *(void *)&v28[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v6 = specialized static Set.== infix(_:_:)(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions;
  unint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions);
  if (!(v8 >> 62))
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
    unint64_t v9 = v8;
LABEL_6:
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHMathExpression);
  unint64_t v9 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!(v9 >> 62)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_7:
  swift_bridgeObjectRelease();
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions;
  unint64_t v12 = *(void *)&v28[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions];
  if (!(v12 >> 62))
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
    unint64_t v13 = v12;
LABEL_9:
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHMathExpression);
  unint64_t v13 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!(v13 >> 62)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  if (v10 != v14) {
    goto LABEL_24;
  }
  uint64_t v15 = OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults;
  unint64_t v16 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults);
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v18 = OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults;
  unint64_t v19 = *(void *)&v28[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults];
  if (!(v19 >> 62))
  {
    if (v17 == *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_15;
    }
LABEL_24:

    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v17 != v26) {
    goto LABEL_24;
  }
LABEL_15:
  unint64_t v20 = *(void *)(v2 + v7);
  uint64_t v21 = *(void *)&v28[v11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned __int8 v22 = specialized static Array<A>.== infix(_:_:)(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0) {
    goto LABEL_24;
  }
  unint64_t v23 = *(void *)(v2 + v15);
  uint64_t v24 = *(void *)&v28[v18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned __int8 v25 = specialized static Array<A>.== infix(_:_:)(v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v25 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CalculateDocumentProvider.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CalculateDocumentProvider.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CalculateDocumentProvider.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CalculateDocumentProvider.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CalculateDocumentProvider.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CalculateDocumentProvider.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CalculateDocumentProvider.CodingKeys(unint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0x800000020C84E320;
  unint64_t v4 = 0xEB00000000736E6FLL;
  unint64_t v5 = 0x6973736572707865;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000011;
    unint64_t v4 = 0x800000020C84E340;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0xD000000000000011;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance CalculateDocumentProvider.CodingKeys()
{
  unint64_t v1 = 0x6973736572707865;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000011;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000011;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance CalculateDocumentProvider.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CalculateDocumentProvider.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CalculateDocumentProvider.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CalculateDocumentProvider.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CalculateDocumentProvider.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t type metadata accessor for CalculateDocumentProvider()
{
  return self;
}

char *CalculateDocumentProvider.__allocating_init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CalculateDocumentProvider.CodingKeys>);
  uint64_t v13 = *(void *)(v4 - 8);
  uint64_t v14 = v4;
  MEMORY[0x270FA5388](v4);
  BOOL v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(objc_allocWithZone(v1), sel_init);
  uint64_t v8 = a1[3];
  uint64_t v15 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  lazy protocol witness table accessor for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys();
  unint64_t v9 = (char *)v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
  }
  else
  {
    uint64_t v10 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    char v16 = 0;
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
    uint64_t v11 = v14;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v9[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables] = v17;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MathExpression]);
    char v16 = 1;
    lazy protocol witness table accessor for type [MathExpression] and conformance <A> [A](&lazy protocol witness table cache variable for type [MathExpression] and conformance <A> [A], &lazy protocol witness table cache variable for type MathExpression and conformance MathExpression);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v9[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions] = v17;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MathExpressionEvaluationResult]);
    char v16 = 2;
    lazy protocol witness table accessor for type [MathExpressionEvaluationResult] and conformance <A> [A](&lazy protocol witness table cache variable for type [MathExpressionEvaluationResult] and conformance <A> [A], &lazy protocol witness table cache variable for type MathExpressionEvaluationResult and conformance MathExpressionEvaluationResult);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v11);

    *(void *)&v9[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults] = v17;
    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return v9;
}

char *protocol witness for Decodable.init(from:) in conformance CalculateDocumentProvider@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  unint64_t result = CalculateDocumentProvider.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t CalculateDocumentProvider.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CalculateDocumentProvider.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables);
  HIBYTE(v10) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions);
    HIBYTE(v10) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MathExpression]);
    lazy protocol witness table accessor for type [MathExpression] and conformance <A> [A](&lazy protocol witness table cache variable for type [MathExpression] and conformance <A> [A], &lazy protocol witness table cache variable for type MathExpression and conformance MathExpression);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults);
    HIBYTE(v10) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MathExpressionEvaluationResult]);
    lazy protocol witness table accessor for type [MathExpressionEvaluationResult] and conformance <A> [A](&lazy protocol witness table cache variable for type [MathExpressionEvaluationResult] and conformance <A> [A], &lazy protocol witness table cache variable for type MathExpressionEvaluationResult and conformance MathExpressionEvaluationResult);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CalculateDocumentProvider(void *a1)
{
  return CalculateDocumentProvider.encode(to:)(a1);
}

BOOL MathExpression.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v8);
  if (v9)
  {
    if (swift_dynamicCast())
    {
      BOOL v3 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit14MathExpression_expression) == *(void *)&v7[OBJC_IVAR____TtC8PaperKit14MathExpression_expression]
        && *(void *)(v1 + OBJC_IVAR____TtC8PaperKit14MathExpression_expression + 8) == *(void *)&v7[OBJC_IVAR____TtC8PaperKit14MathExpression_expression + 8];
      if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit14MathExpression_expressionType);
        uint64_t v5 = *(void *)&v7[OBJC_IVAR____TtC8PaperKit14MathExpression_expressionType];

        return v4 == v5;
      }
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t @objc CalculateDocumentProvider.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  return v8 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MathExpression.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MathExpression.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MathExpression.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MathExpression.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MathExpression.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of MathExpression.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance MathExpression.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MathExpression.CodingKeys(void *a1@<X8>)
{
  unint64_t v2 = 0xEA00000000006E6FLL;
  if (*v1) {
    unint64_t v2 = 0xEE00657079546E6FLL;
  }
  *a1 = 0x6973736572707865;
  a1[1] = v2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MathExpression.CodingKeys()
{
  return 0x6973736572707865;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MathExpression.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of MathExpression.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance MathExpression.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MathExpression.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MathExpression.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t type metadata accessor for MathExpression()
{
  return self;
}

char *MathExpression.__allocating_init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MathExpression.CodingKeys>);
  uint64_t v16 = *(void *)(v4 - 8);
  uint64_t v17 = v4;
  MEMORY[0x270FA5388](v4);
  id v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(objc_allocWithZone(v1), sel_init);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys();
  char v8 = (char *)v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
  }
  else
  {
    uint64_t v10 = v16;
    uint64_t v9 = v17;
    char v19 = 0;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = (uint64_t *)&v8[OBJC_IVAR____TtC8PaperKit14MathExpression_expression];
    *uint64_t v13 = v11;
    v13[1] = v14;
    swift_bridgeObjectRelease();
    char v18 = 1;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v9);

    *(void *)&v8[OBJC_IVAR____TtC8PaperKit14MathExpression_expressionType] = v15;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

char *protocol witness for Decodable.init(from:) in conformance MathExpression@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  unint64_t result = MathExpression.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t MathExpression.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MathExpression.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MathExpression(void *a1)
{
  return MathExpression.encode(to:)(a1);
}

id @objc MathExpression.expression.getter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t *)(a1 + *a3);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  swift_bridgeObjectRetain();
  id v6 = (void *)MEMORY[0x21054D080](v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t @objc MathExpression.expression.setter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = (uint64_t *)(a1 + *a4);
  uint64_t *v7 = v6;
  v7[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t MathExpressionEvaluationResult.strokes.getter()
{
  uint64_t v1 = type metadata accessor for PKDrawing();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing);
  if (!v5) {
    return MEMORY[0x263F8EE78];
  }
  id v6 = v5;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = objc_allocWithZone(MEMORY[0x263F14BD0]);
  PKDrawing._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  id v11 = objc_msgSend(v7, sel_initWithDrawing_, v10);

  if (v11)
  {
    id v12 = objc_msgSend(v11, sel_orderedStrokes);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHStroke);
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v6 = v12;
  }
  else
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
  }

  return v13;
}

BOOL MathExpressionEvaluationResult.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = type metadata accessor for PKDrawing();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v56);
  if (v57)
  {
    if (swift_dynamicCast())
    {
      uint64_t v8 = v55;
      BOOL v9 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string) == *(void *)&v55[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string]
        && *(void *)(v1 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string + 8) == *(void *)&v55[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string + 8];
      if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        uint64_t v10 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_strokeGroupIdentifier];
        id v11 = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_strokeGroupIdentifier);
        id v12 = v10;
        char v13 = static NSObject.== infix(_:_:)();

        if (v13)
        {
          uint64_t v54 = OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing;
          uint64_t v14 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing);
          uint64_t v15 = &selRef_strokeUUID;
          if (v14)
          {
            id v16 = v14;
            static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
            id v17 = objc_allocWithZone(MEMORY[0x263F14BD0]);
            PKDrawing._bridgeToObjectiveC()(v18);
            unint64_t v20 = v19;
            (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
            id v21 = objc_msgSend(v17, sel_initWithDrawing_, v20);

            if (v21)
            {
              id v22 = objc_msgSend(v21, sel_orderedStrokes);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHStroke);
              unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              id v16 = v22;
              uint64_t v15 = &selRef_strokeUUID;
            }
            else
            {
              unint64_t v23 = MEMORY[0x263F8EE78];
            }
          }
          else
          {
            unint64_t v23 = MEMORY[0x263F8EE78];
          }
          if (v23 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          uint64_t v25 = OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing;
          uint64_t v26 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing];
          if (v26)
          {
            uint64_t v53 = v24;
            id v27 = v26;
            static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
            id v28 = objc_allocWithZone(MEMORY[0x263F14BD0]);
            PKDrawing._bridgeToObjectiveC()(v29);
            uint64_t v31 = v30;
            (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
            id v32 = objc_msgSend(v28, v15[34], v31);

            if (v32)
            {
              id v33 = objc_msgSend(v32, sel_orderedStrokes);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHStroke);
              unint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              id v27 = v33;
            }
            else
            {
              unint64_t v34 = MEMORY[0x263F8EE78];
            }

            uint64_t v24 = v53;
          }
          else
          {
            unint64_t v34 = MEMORY[0x263F8EE78];
          }
          if (v34 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if (v24 == v35)
          {
            uint64_t v36 = *(void **)(v2 + v54);
            if (v36)
            {
              objc_msgSend(v36, sel_bounds);
              CGFloat v38 = v37;
              CGFloat v40 = v39;
              CGFloat v42 = v41;
              double v44 = v43;
              unint64_t v45 = *(void **)&v8[v25];
              if (v45)
              {
LABEL_29:
                objc_msgSend(v45, sel_bounds);
LABEL_35:
                BOOL v50 = CGRect.almostEqual(_:threshold:)(v46, v47, v48, v49, 0.1, v38, v40, v42, v44);

                return v50;
              }
            }
            else
            {
              CGFloat v38 = *MEMORY[0x263F001A0];
              CGFloat v40 = *(double *)(MEMORY[0x263F001A0] + 8);
              CGFloat v42 = *(double *)(MEMORY[0x263F001A0] + 16);
              double v44 = *(double *)(MEMORY[0x263F001A0] + 24);
              unint64_t v45 = *(void **)&v8[v25];
              if (v45) {
                goto LABEL_29;
              }
            }
            CGFloat v46 = *MEMORY[0x263F001A0];
            CGFloat v47 = *(double *)(MEMORY[0x263F001A0] + 8);
            CGFloat v48 = *(double *)(MEMORY[0x263F001A0] + 16);
            CGFloat v49 = *(double *)(MEMORY[0x263F001A0] + 24);
            goto LABEL_35;
          }
        }
      }
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v56, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MathExpressionEvaluationResult.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MathExpressionEvaluationResult.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MathExpressionEvaluationResult.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MathExpressionEvaluationResult.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MathExpressionEvaluationResult.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of MathExpressionEvaluationResult.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance MathExpression.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MathExpression.CodingKeys@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MathExpressionEvaluationResult.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x676E69727473;
  if (*v1) {
    uint64_t v2 = 0x44676E6977617264;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xEB00000000617461;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MathExpressionEvaluationResult.CodingKeys()
{
  if (*v0) {
    return 0x44676E6977617264;
  }
  else {
    return 0x676E69727473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MathExpressionEvaluationResult.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of MathExpressionEvaluationResult.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance MathExpression.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MathExpression.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MathExpressionEvaluationResult.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MathExpressionEvaluationResult.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t type metadata accessor for MathExpressionEvaluationResult()
{
  return self;
}

char *MathExpressionEvaluationResult.__allocating_init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MathExpressionEvaluationResult.CodingKeys>);
  uint64_t v25 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::Int v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(objc_allocWithZone(v1), sel_init);
  uint64_t v8 = a1[3];
  uint64_t v26 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  lazy protocol witness table accessor for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys();
  BOOL v9 = (char *)v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    uint64_t v12 = (uint64_t)v26;
  }
  else
  {
    uint64_t v10 = v25;
    LOBYTE(v27[0]) = 0;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = (uint64_t *)&v9[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string];
    *uint64_t v14 = v11;
    v14[1] = v15;
    swift_bridgeObjectRelease();
    LOBYTE(v27[0]) = 1;
    char v16 = KeyedDecodingContainer.contains(_:)();
    if (v16)
    {
      LOBYTE(v28) = 1;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v19 = v27[0];
      unint64_t v23 = v27[1];
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_20C835740;
      *(void *)(v20 + 32) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
      *(void *)(v20 + 40) = type metadata accessor for PKDrawingCoherence(0);
      uint64_t v24 = v19;
      unint64_t v21 = v23;
      static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v4);
      swift_bridgeObjectRelease();

      outlined consume of Data._Representation(v24, v21);
      uint64_t v18 = (uint64_t)v26;
      if (v27[3])
      {
        if (swift_dynamicCast()) {
          uint64_t v22 = v28;
        }
        else {
          uint64_t v22 = 0;
        }
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for Any?);
        uint64_t v22 = 0;
      }
      id v17 = *(void **)&v9[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing];
      *(void *)&v9[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing] = v22;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v4);
      id v17 = v9;
      uint64_t v18 = (uint64_t)v26;
    }

    uint64_t v12 = v18;
  }
  __swift_destroy_boxed_opaque_existential_1(v12);
  return v9;
}

char *protocol witness for Decodable.init(from:) in conformance MathExpressionEvaluationResult@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  uint64_t result = MathExpressionEvaluationResult.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t MathExpressionEvaluationResult.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  v20[2] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<MathExpressionEvaluationResult.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20[0]) = 0;
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing);
  if (v10)
  {
    uint64_t v11 = self;
    v20[0] = 0;
    id v12 = v10;
    id v13 = objc_msgSend(v11, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v12, 1, v20);
    id v14 = v20[0];
    if (v13)
    {
      uint64_t v15 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      id v17 = v16;

      v20[0] = v15;
      v20[1] = v17;
      v19[7] = 1;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);

      return outlined consume of Data._Representation((uint64_t)v15, (unint64_t)v17);
    }
    uint64_t v18 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MathExpressionEvaluationResult(void *a1)
{
  return MathExpressionEvaluationResult.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DrawingIdentifier()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v1, sel_hash));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DrawingIdentifier()
{
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(*v0, sel_hash));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DrawingIdentifier()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v1, sel_hash));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DrawingIdentifier()
{
  return static NSObject.== infix(_:_:)() & 1;
}

void *one-time initialization function for controllers()
{
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static CalculateDocumentController.controllers = result;
  return result;
}

id CalculateDocumentController.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers] = MEMORY[0x263F8EE78];
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForResults;
  uint64_t v6 = v0;
  *(void *)&v0[v5] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForTokens;
  *(void *)&v6[v7] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionUUIDs] = MEMORY[0x263F8EE88];
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionStrokeGroups;
  *(void *)&v6[v8] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_resultDrawings;
  *(void *)&v6[v9] = specialized Dictionary.init(dictionaryLiteral:)(v4);

  uint64_t v10 = (objc_class *)type metadata accessor for CalculateDocumentController();
  v15.receiver = v6;
  v15.super_class = v10;
  id v11 = objc_msgSendSuper2(&v15, sel_init);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v3, 1, 1, v12);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in CalculateDocumentController.init(), v13);
  swift_release();
  return v11;
}

uint64_t closure #1 in CalculateDocumentController.init()()
{
  return MEMORY[0x270FA2498](closure #1 in CalculateDocumentController.init(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 16) = type metadata accessor for MainActor();
  *(void *)(v0 + 24) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in CalculateDocumentController.init(), v2, v1);
}

{
  uint64_t v1;

  swift_release();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return MEMORY[0x270FA2498](closure #1 in CalculateDocumentController.init(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 32) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in CalculateDocumentController.init(), v2, v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in CalculateDocumentController.trackExpressions(in:)()
{
  dispatch thunk of CalculateDocument.expressions.getter();
  swift_bridgeObjectRelease();
  dispatch thunk of CalculateDocument.declaredSymbols.getter();
  return swift_bridgeObjectRelease();
}

void (*implicit closure #1 in CalculateDocumentController.trackExpressions(in:)())()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = v1;
  return partial apply for closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:);
}

void closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x210550400](a1 + 16);
  if (v10)
  {
    id v11 = (void *)v10;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v13 = Strong;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v24 = static OS_dispatch_queue.main.getter();
      uint64_t v14 = swift_allocObject();
      uint64_t v25 = v7;
      uint64_t v15 = v14;
      swift_unknownObjectWeakInit();
      uint64_t v16 = swift_allocObject();
      swift_weakInit();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v15;
      *(void *)(v17 + 24) = v16;
      aBlock[4] = partial apply for closure #1 in closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:);
      aBlock[5] = v17;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_29;
      uint64_t v18 = _Block_copy(aBlock);
      uint64_t v23 = v13;
      uint64_t v19 = v18;
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v26 = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type MathExpression and conformance MathExpression((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
      uint64_t v22 = v6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v20 = (void *)v24;
      MEMORY[0x21054DA10](0, v9, v5, v19);
      _Block_release(v19);

      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v22);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

void closure #1 in closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v3, sel_sendExpressionsChanged, 0);
      id v4 = objc_msgSend(v3, sel_performSelector_withObject_afterDelay_, sel_sendExpressionsChanged, 0, 0.1);
      MEMORY[0x270FA5388](v4);
      withObservationTracking<A>(_:onChange:)();

      swift_release();
    }
    else
    {
    }
  }
}

Swift::Bool __swiftcall CalculateDocumentController.updateGraphableVariables()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v60 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v66 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v67 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v65[0] = 8;
  char v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  if (v5)
  {
    uint64_t v58 = v2;
    unint64_t v64 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v6 = v1 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers;
    swift_beginAccess();
    uint64_t v7 = *(void *)(*(void *)v6 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)v6 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of WeakObserver(v8, (uint64_t)v61);
        if (MEMORY[0x210550400](v61))
        {
          uint64_t v9 = v62;
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(ObjectType, v9);
          uint64_t v12 = swift_unknownObjectRelease();
          MEMORY[0x270FA5388](v12);
          *(&v51 - 2) = (uint64_t)&v64;
          specialized Sequence.forEach(_:)(v11, (void (*)(char *, uint64_t, uint64_t))partial apply for closure #1 in CalculateDocumentController.updateGraphableVariables());
          outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v61);
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v61);
        }
        v8 += 16;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
    uint64_t v14 = v1 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document;
    uint64_t v15 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document);
    uint64_t v17 = v58;
    if (v15)
    {
      uint64_t v18 = v15;
      uint64_t v19 = *(void *)(v14 + 8);
      uint64_t v20 = swift_getObjectType();
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v20, v19))
      {
        unint64_t v21 = dispatch thunk of CalculateDocument.expressions.getter();
        swift_unknownObjectRelease();
        LOBYTE(v15) = swift_release();
        if (v21 >> 62)
        {
LABEL_55:
          swift_bridgeObjectRetain();
          uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
          LOBYTE(v15) = swift_bridgeObjectRelease();
          if (!v22) {
            goto LABEL_56;
          }
LABEL_16:
          uint64_t v51 = 0;
          int v13 = 0;
          unint64_t v23 = 0;
          unint64_t v59 = v21 & 0xC000000000000001;
          uint64_t v57 = v21 & 0xFFFFFFFFFFFFFF8;
          uint64_t v24 = (void (**)(char *, uint64_t))(v3 + 8);
          *(void *)&long long v16 = 136380931;
          long long v55 = v16;
          uint64_t v54 = MEMORY[0x263F8EE58] + 8;
          while (1)
          {
            LODWORD(v56) = v13;
            unint64_t v25 = v23;
            uint64_t v26 = (uint64_t)v60;
            while (1)
            {
              if (v59)
              {
                LOBYTE(v15) = MEMORY[0x21054E050](v25, v21);
                unint64_t v23 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_59;
                }
              }
              else
              {
                if (v25 >= *(void *)(v57 + 16)) {
                  goto LABEL_60;
                }
                LOBYTE(v15) = swift_retain();
                unint64_t v23 = v25 + 1;
                if (__OFADD__(v25, 1))
                {
LABEL_59:
                  __break(1u);
LABEL_60:
                  __break(1u);
                  return v15;
                }
              }
              uint64_t v27 = v22;
              CalculateExpression.id.getter();
              unint64_t v28 = v64;
              if (*(void *)(v64 + 16) && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26), (v30 & 1) != 0))
              {
                uint64_t v31 = (uint64_t *)(*(void *)(v28 + 56) + 16 * v29);
                uint64_t v32 = *v31;
                unint64_t v33 = v31[1];
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v32 = 0;
                unint64_t v33 = 0;
              }
              (*v24)(v60, v17);
              uint64_t v34 = CalculateExpression.graphableVariable.getter();
              if (v35) {
                break;
              }
              if (v33) {
                goto LABEL_40;
              }
              LOBYTE(v15) = swift_release();
LABEL_19:
              ++v25;
              uint64_t v22 = v27;
              uint64_t v26 = (uint64_t)v60;
              if (v23 == v27)
              {
                LOBYTE(v13) = (_BYTE)v56;
                goto LABEL_57;
              }
            }
            if (!v33)
            {
              swift_bridgeObjectRelease();
              goto LABEL_40;
            }
            if (v34 == v32 && v35 == v33) {
              break;
            }
            char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v36)
            {
              swift_release();
              LOBYTE(v15) = swift_bridgeObjectRelease();
              uint64_t v17 = v58;
              goto LABEL_19;
            }
            uint64_t v17 = v58;
LABEL_40:
            if (one-time initialization token for mathLogger != -1) {
              swift_once();
            }
            uint64_t v37 = type metadata accessor for Logger();
            __swift_project_value_buffer(v37, (uint64_t)mathLogger);
            swift_bridgeObjectRetain_n();
            swift_retain_n();
            CGFloat v38 = Logger.logObject.getter();
            os_log_type_t v39 = static os_log_type_t.default.getter();
            int v40 = v39;
            if (os_log_type_enabled(v38, v39))
            {
              uint64_t v41 = swift_slowAlloc();
              int v53 = v40;
              uint64_t v42 = v41;
              uint64_t v52 = swift_slowAlloc();
              uint64_t v63 = v52;
              *(_DWORD *)uint64_t v42 = v55;
              uint64_t v56 = v38;
              uint64_t v43 = CalculateExpression.expression.getter();
              *(void *)(v42 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v63);
              swift_release_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v42 + 12) = 2080;
              if (v33) {
                uint64_t v45 = v32;
              }
              else {
                uint64_t v45 = 0x3E656E6F6E3CLL;
              }
              if (v33) {
                unint64_t v46 = v33;
              }
              else {
                unint64_t v46 = 0xE600000000000000;
              }
              swift_bridgeObjectRetain();
              uint64_t v47 = v45;
              uint64_t v17 = v58;
              *(void *)(v42 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v46, &v63);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_20C2D7000, v56, (os_log_type_t)v53, "Update graphable variable for expression: %{private}s, variable: %s", (uint8_t *)v42, 0x16u);
              uint64_t v48 = v52;
              swift_arrayDestroy();
              MEMORY[0x210550270](v48, -1, -1);
              MEMORY[0x210550270](v42, -1, -1);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_release_n();
            }
            CalculateExpression.graphableVariable.setter();
            LOBYTE(v15) = swift_release();
            int v13 = 1;
            uint64_t v22 = v27;
            if (v23 == v27)
            {
LABEL_57:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_58;
            }
          }
          swift_release();
          swift_bridgeObjectRelease();
          LOBYTE(v15) = swift_bridgeObjectRelease();
          goto LABEL_19;
        }
      }
      else
      {
        swift_beginAccess();
        swift_unknownObjectRetain();
        uint64_t v49 = swift_bridgeObjectRetain();
        unint64_t v21 = specialized Sequence.compactMap<A>(_:)(v49, v18, v19);
        swift_bridgeObjectRelease();
        LOBYTE(v15) = swift_unknownObjectRelease_n();
        if (v21 >> 62) {
          goto LABEL_55;
        }
      }
    }
    else
    {
      unint64_t v21 = MEMORY[0x263F8EE78];
      if (MEMORY[0x263F8EE78] >> 62) {
        goto LABEL_55;
      }
    }
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v22)
    {
LABEL_56:
      LOBYTE(v13) = 0;
      goto LABEL_57;
    }
    goto LABEL_16;
  }
  LOBYTE(v13) = 0;
LABEL_58:
  LOBYTE(v15) = v13 & 1;
  return v15;
}

uint64_t closure #1 in CalculateDocumentController.updateGraphableVariables()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a3, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  *a4 = v15;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void CalculateDocumentController.mathResultDrawing(_:forItem:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = &v2[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_resultDrawings];
  swift_beginAccess();
  uint64_t v11 = *(void *)v10;
  if (!*(void *)(*(void *)v10 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v14 = *(void **)(*(void *)(v11 + 56) + 8 * v12);
  id v15 = v14;
  swift_bridgeObjectRelease();
  id v16 = v15;
  if (!v15)
  {
LABEL_9:
    if (!a1) {
      return;
    }
    uint64_t v14 = 0;
    goto LABEL_11;
  }
  uint64_t v17 = v16;
  swift_unknownObjectRelease();
  if (!a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    swift_beginAccess();
    uint64_t v20 = (void *)specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

    goto LABEL_12;
  }
  if (v17 == a1 || (objc_msgSend(a1, sel_isEqual_, v17) & 1) != 0) {
    goto LABEL_13;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  swift_beginAccess();
  id v18 = a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v22 = *(void *)v10;
  *(void *)uint64_t v10 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v18, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v10 = v22;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_12:
  swift_endAccess();
  objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v3, sel_sendExpressionsChanged, 0);
  objc_msgSend(v3, sel_performSelector_withObject_afterDelay_, sel_sendExpressionsChanged, 0, 0.1);
  uint64_t v17 = v14;
LABEL_13:
}

uint64_t CalculateDocumentController.updateTokens(expression:itemUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = CalculateExpression.pkTokens.getter();
  BOOL v6 = CalculateExpression.isActuallyGraphable.getter();
  unint64_t v23 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v24 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v22[0] = 8;
  char v7 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  if (v7)
  {
    uint64_t v8 = CalculateExpression.graphableVariables.getter();
    uint64_t v9 = CalculateExpression.graphableVariable.getter();
    if (!v10) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v9 = CalculateExpression.graphableVariable.getter();
    if (!v10) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (specialized Sequence<>.contains(_:)(v9, v10, (void *)v8))
  {
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_20C832C20;
    *(void *)(v8 + 32) = v11;
    *(void *)(v8 + 40) = v12;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_8:
  uint64_t v13 = v3 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers;
  swift_beginAccess();
  uint64_t v14 = *(void *)(*(void *)v13 + 16);
  if (v14)
  {
    uint64_t v15 = *(void *)v13 + 32;
    swift_bridgeObjectRetain();
    BOOL v16 = v6;
    do
    {
      outlined init with copy of WeakObserver(v15, (uint64_t)v20);
      if (MEMORY[0x210550400](v20))
      {
        uint64_t v17 = v21;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint64_t))(v17 + 24))(v5, a2, v16, v8, ObjectType, v17);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v20);
      v15 += 16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(uint64_t a1, uint64_t isUniquelyReferenced_nonNull_native, uint64_t a3, unint64_t a4)
{
  unint64_t v242 = a4;
  uint64_t v200 = a1;
  uint64_t v207 = type metadata accessor for CalculateExpression.Base();
  char v7 = *(uint64_t **)(v207 - 8);
  MEMORY[0x270FA5388](v207);
  v206 = (char *)&v199 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = type metadata accessor for DispatchWorkItemFlags();
  v239 = *(char **)(v218 - 8);
  MEMORY[0x270FA5388](v218);
  v217 = (char *)&v199 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v216 = type metadata accessor for DispatchQoS();
  uint64_t v235 = *(void *)(v216 - 8);
  MEMORY[0x270FA5388](v216);
  uint64_t v11 = (void (**)(int64_t, uint64_t))((char *)&v199 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v224 = (uint64_t)&v199 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  v232 = (char *)&v199 - v15;
  MEMORY[0x270FA5388](v16);
  v221 = (char *)&v199 - v17;
  uint64_t v18 = type metadata accessor for UUID();
  unint64_t v243 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  v226 = (char *)&v199 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v246 = (uint64_t)&v199 - v21;
  MEMORY[0x270FA5388](v22);
  unint64_t v24 = (char *)&v199 - v23;
  MEMORY[0x270FA5388](v25);
  v215 = (char *)&v199 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v229 = (uint64_t)&v199 - v28;
  MEMORY[0x270FA5388](v29);
  v233 = (char *)&v199 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (uint64_t)&v199 - v32;
  double v35 = MEMORY[0x270FA5388](v34);
  int64_t v37 = (int64_t)&v199 - v36;
  v228 = v4;
  CGFloat v38 = &v4[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  if (MEMORY[0x210550400](&v4[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document], v35))
  {
    v213 = v24;
    uint64_t v227 = a3;
    uint64_t v241 = *((void *)v38 + 1);
    if (one-time initialization token for mathLogger != -1) {
      goto LABEL_130;
    }
    while (1)
    {
      uint64_t v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)mathLogger);
      uint64_t v40 = v200;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v41 = v227;
      swift_bridgeObjectRetain();
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      uint64_t v223 = isUniquelyReferenced_nonNull_native;
      v234 = (char *)v7;
      if (v44)
      {
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 134218496;
        *(void *)&long long aBlock = *(void *)(v40 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2048;
        *(void *)&long long aBlock = *(void *)(v223 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 22) = 2048;
        *(void *)&long long aBlock = *(void *)(v41 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20C2D7000, v42, v43, "CalculateDocumentController mathDidUpdateExpressions: updated: %ld, new: %ld, removed: %ld", (uint8_t *)v45, 0x20u);
        char isUniquelyReferenced_nonNull_native = v223;
        MEMORY[0x210550270](v45, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v214 = v11;
      uint64_t v46 = *(void *)(v242 + 16);
      uint64_t v47 = v241;
      uint64_t v219 = v33;
      if (v46)
      {
        char v7 = (uint64_t *)(v242 + 32);
        v245 = (void (**)(int64_t, uint64_t))(v243 + 16);
        uint64_t v11 = (void (**)(int64_t, uint64_t))(v243 + 8);
        swift_bridgeObjectRetain();
        uint64_t v244 = MEMORY[0x263F8EE80];
        uint64_t v33 = 40;
        while (1)
        {
          outlined init with copy of FindResult((uint64_t)v7, (uint64_t)&aBlock);
          uint64_t v49 = *((void *)&v248 + 1);
          BOOL v50 = v249;
          __swift_project_boxed_opaque_existential_1(&aBlock, *((uint64_t *)&v248 + 1));
          (*((void (**)(uint64_t, uint64_t (*)()))v50 + 3))(v49, v50);
          outlined init with copy of FindResult((uint64_t)&aBlock, (uint64_t)&v253);
          uint64_t v51 = v244;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v251 = v51;
          unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
          uint64_t v54 = *(void *)(v51 + 16);
          BOOL v55 = (v52 & 1) == 0;
          uint64_t v56 = v54 + v55;
          if (__OFADD__(v54, v55))
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
            goto LABEL_129;
          }
          char v57 = v52;
          if (*(void *)(v51 + 24) >= v56)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, isUniquelyReferenced_nonNull_native);
            unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
            if ((v57 & 1) != (v59 & 1))
            {
LABEL_140:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return;
            }
            unint64_t v53 = v58;
          }
          id v60 = (void *)v251;
          if (v57)
          {
            uint64_t v244 = v251;
            uint64_t v48 = *(void *)(v251 + 56) + 40 * v53;
            __swift_destroy_boxed_opaque_existential_1(v48);
            outlined init with take of FindResult(&v253, v48);
          }
          else
          {
            *(void *)(v251 + 8 * (v53 >> 6) + 64) |= 1 << v53;
            (*(void (**)(unint64_t, int64_t, uint64_t))(v243 + 16))(v60[6] + *(void *)(v243 + 72) * v53, v37, v18);
            outlined init with take of FindResult(&v253, v60[7] + 40 * v53);
            uint64_t v61 = v60[2];
            BOOL v62 = __OFADD__(v61, 1);
            uint64_t v63 = v61 + 1;
            if (v62) {
              goto LABEL_125;
            }
            v60[2] = v63;
            uint64_t v244 = v251;
          }
          swift_bridgeObjectRelease();
          (*v11)(v37, v18);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
          v7 += 5;
          if (!--v46)
          {
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = v223;
            uint64_t v47 = v241;
            uint64_t v33 = v219;
            goto LABEL_21;
          }
        }
      }
      uint64_t v244 = MEMORY[0x263F8EE80];
LABEL_21:
      id v208 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, 1);
      unint64_t v252 = MEMORY[0x263F8EE78];
      uint64_t v64 = v200;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Set.union<A>(_:)(v64, isUniquelyReferenced_nonNull_native);
      int64_t v37 = 0;
      uint64_t v66 = *(void *)(v65 + 56);
      int64_t v220 = v65 + 56;
      int64_t v225 = v65;
      uint64_t v67 = 1 << *(unsigned char *)(v65 + 32);
      uint64_t v68 = -1;
      if (v67 < 64) {
        uint64_t v68 = ~(-1 << v67);
      }
      unint64_t v69 = v68 & v66;
      v231 = &v228[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionUUIDs];
      char v7 = (uint64_t *)&v228[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionStrokeGroups];
      int64_t v222 = (unint64_t)(v67 + 63) >> 6;
      unint64_t v242 = v243 + 16;
      v238 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v243 + 56);
      unint64_t v237 = v243 + 48;
      v236 = (void (**)(uint64_t, uint64_t, uint64_t))(v243 + 32);
      uint64_t v11 = (void (**)(int64_t, uint64_t))(v243 + 8);
      uint64_t v230 = v47 + 48;
      uint64_t v209 = v47 + 32;
      v212 = &v248;
      v211 = (void (**)(char *, uint64_t))(v239 + 8);
      v210 = (void (**)(void, uint64_t))(v235 + 8);
      Swift::String v205 = (void *)*MEMORY[0x263F2FCD0];
      unsigned int v204 = *MEMORY[0x263F2FBD0];
      Swift::String v203 = (void (**)(char *, void, uint64_t))(v234 + 104);
      uint64_t v202 = v47 + 24;
      long long v201 = xmmword_20C832C20;
      os_log_type_t v70 = v232;
      v245 = (void (**)(int64_t, uint64_t))(v243 + 8);
      v239 = &v228[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionStrokeGroups];
      char isUniquelyReferenced_nonNull_native = (uint64_t)v221;
      while (1)
      {
        if (v69)
        {
          uint64_t v235 = (v69 - 1) & v69;
          unint64_t v71 = __clz(__rbit64(v69)) | (v37 << 6);
          goto LABEL_42;
        }
        int64_t v72 = v37 + 1;
        if (__OFADD__(v37, 1)) {
          goto LABEL_126;
        }
        if (v72 >= v222) {
          break;
        }
        unint64_t v73 = *(void *)(v220 + 8 * v72);
        ++v37;
        if (!v73)
        {
          int64_t v37 = v72 + 1;
          if (v72 + 1 >= v222) {
            break;
          }
          unint64_t v73 = *(void *)(v220 + 8 * v37);
          if (!v73)
          {
            int64_t v37 = v72 + 2;
            if (v72 + 2 >= v222) {
              break;
            }
            unint64_t v73 = *(void *)(v220 + 8 * v37);
            if (!v73)
            {
              int64_t v74 = v72 + 3;
              if (v74 >= v222) {
                break;
              }
              unint64_t v73 = *(void *)(v220 + 8 * v74);
              if (!v73)
              {
                while (1)
                {
                  int64_t v37 = v74 + 1;
                  if (__OFADD__(v74, 1)) {
                    goto LABEL_128;
                  }
                  if (v37 >= v222) {
                    goto LABEL_64;
                  }
                  unint64_t v73 = *(void *)(v220 + 8 * v37);
                  ++v74;
                  if (v73) {
                    goto LABEL_41;
                  }
                }
              }
              int64_t v37 = v74;
            }
          }
        }
LABEL_41:
        uint64_t v235 = (v73 - 1) & v73;
        unint64_t v71 = __clz(__rbit64(v73)) + (v37 << 6);
LABEL_42:
        unint64_t v75 = v243;
        uint64_t v76 = *(void (**)(uint64_t, unint64_t, uint64_t))(v243 + 16);
        v76(isUniquelyReferenced_nonNull_native, *(void *)(v225 + 48) + *(void *)(v243 + 72) * v71, v18);
        uint64_t v77 = *(char **)(v75 + 56);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v77)(isUniquelyReferenced_nonNull_native, 0, 1, v18);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(isUniquelyReferenced_nonNull_native, 1, v18) == 1)goto LABEL_65; {
        (*v236)(v33, isUniquelyReferenced_nonNull_native, v18);
        }
        uint64_t v78 = v244;
        uint64_t v79 = *(void *)(v244 + 16);
        v234 = (char *)v37;
        if (v79 && (unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v33), (v81 & 1) != 0))
        {
          outlined init with copy of FindResult(*(void *)(v78 + 56) + 40 * v80, (uint64_t)&aBlock);
        }
        else
        {
          v249 = 0;
          long long v248 = 0u;
          long long aBlock = 0u;
        }
        uint64_t v82 = *v11;
        (*v11)(v33, v18);
        if (*((void *)&v248 + 1))
        {
          outlined init with take of FindResult(&aBlock, (uint64_t)&v253);
          uint64_t v83 = *((void *)&v254 + 1);
          uint64_t v84 = v255;
          __swift_project_boxed_opaque_existential_1(&v253, *((uint64_t *)&v254 + 1));
          double v85 = (*(double (**)(uint64_t, uint64_t))(v84 + 16))(v83, v84);
          uint64_t v86 = *((void *)&v254 + 1);
          uint64_t v87 = v255;
          __swift_project_boxed_opaque_existential_1(&v253, *((uint64_t *)&v254 + 1));
          id v88 = v233;
          (*(void (**)(uint64_t, uint64_t))(v87 + 24))(v86, v87);
          uint64_t v89 = v215;
          v76((uint64_t)v215, (unint64_t)v88, v18);
          swift_beginAccess();
          uint64_t v90 = v229;
          specialized Set._Variant.insert(_:)(v229, v89);
          v82(v90, v18);
          swift_endAccess();
          uint64_t v91 = (uint64_t)v213;
          v76((uint64_t)v213, (unint64_t)v88, v18);
          uint64_t v92 = *((void *)&v254 + 1);
          uint64_t v93 = v255;
          __swift_project_boxed_opaque_existential_1(&v253, *((uint64_t *)&v254 + 1));
          uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 32))(v92, v93);
          swift_beginAccess();
          if (v94)
          {
            char v95 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v251 = *v7;
            uint64_t *v7 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v94, v91, v95);
            uint64_t *v7 = v251;
            swift_bridgeObjectRelease();
            v82(v91, v18);
          }
          else
          {
            id v96 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v91);
            v82(v91, v18);
          }
          swift_endAccess();
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v98 = (*(uint64_t (**)(char *, uint64_t))(v241 + 48))(v233, ObjectType);
          if (v98)
          {
            uint64_t v99 = v98;
            uint64_t v100 = CalculateExpression.expression.getter();
            uint64_t v102 = v101;
            uint64_t v103 = *((void *)&v254 + 1);
            uint64_t v104 = v255;
            __swift_project_boxed_opaque_existential_1(&v253, *((uint64_t *)&v254 + 1));
            if (v100 == (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 8))(v103, v104) && v102 == v105)
            {
              swift_bridgeObjectRelease_n();
              uint64_t v106 = v218;
              uint64_t v33 = v219;
            }
            else
            {
              char v125 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v106 = v218;
              uint64_t v33 = v219;
              if ((v125 & 1) == 0)
              {
                uint64_t v126 = *((void *)&v254 + 1);
                uint64_t v127 = v255;
                __swift_project_boxed_opaque_existential_1(&v253, *((uint64_t *)&v254 + 1));
                (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v126, v127);
                CalculateExpression.expression.setter();
              }
            }
            *(double *)&long long aBlock = v85;
            (*(void (**)(uint64_t, long long *, uint64_t))(v241 + 32))(v99, &aBlock, ObjectType);
            uint64_t v128 = swift_retain();
            MEMORY[0x21054D330](v128);
            if (*(void *)((v252 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v252 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
            unint64_t v118 = (void *)static OS_dispatch_queue.main.getter();
            outlined init with copy of FindResult((uint64_t)&v253, (uint64_t)&v251);
            uint64_t v129 = swift_allocObject();
            CGPoint v130 = v228;
            *(void *)(v129 + 16) = v228;
            *(void *)(v129 + 24) = v99;
            outlined init with take of FindResult(&v251, v129 + 32);
            v249 = partial apply for closure #2 in CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:);
            uint64_t v250 = v129;
            *(void *)&long long aBlock = MEMORY[0x263EF8330];
            *((void *)&aBlock + 1) = 1107296256;
            *(void *)&long long v248 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            *((void *)&v248 + 1) = &block_descriptor_96;
            double v131 = _Block_copy(&aBlock);
            swift_retain();
            double v132 = v130;
            swift_release();
            unint64_t v123 = v214;
            static DispatchQoS.unspecified.getter();
            *(void *)&long long aBlock = MEMORY[0x263F8EE78];
            lazy protocol witness table accessor for type MathExpression and conformance MathExpression((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
            unint64_t v124 = v217;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            MEMORY[0x21054DA10](0, v123, v124, v131);
            _Block_release(v131);
            swift_release();
          }
          else
          {
            uint64_t v107 = *((void *)&v254 + 1);
            uint64_t v108 = v255;
            __swift_project_boxed_opaque_existential_1(&v253, *((uint64_t *)&v254 + 1));
            (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v107, v108);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
            initeCGFloat d = swift_initStackObject();
            *(_OWORD *)(inited + 16) = v201;
            uint64_t v110 = v205;
            *(void *)(inited + 32) = v205;
            *(void *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
            id v111 = v208;
            *(void *)(inited + 40) = v208;
            id v112 = v110;
            id v113 = v111;
            specialized Dictionary.init(dictionaryLiteral:)(inited);
            uint64_t v114 = *((void *)&v254 + 1);
            uint64_t v115 = v255;
            __swift_project_boxed_opaque_existential_1(&v253, *((uint64_t *)&v254 + 1));
            (*(void (**)(uint64_t, uint64_t))(v115 + 24))(v114, v115);
            (*v203)(v206, v204, v207);
            type metadata accessor for CalculateExpression();
            swift_allocObject();
            uint64_t v116 = CalculateExpression.init(_:options:base:id:)();
            uint64_t v117 = swift_retain();
            MEMORY[0x21054D330](v117);
            if (*(void *)((v252 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v252 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            *(double *)&long long aBlock = v85;
            (*(void (**)(uint64_t, long long *, uint64_t))(v241 + 24))(v116, &aBlock, ObjectType);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
            unint64_t v118 = (void *)static OS_dispatch_queue.main.getter();
            outlined init with copy of FindResult((uint64_t)&v253, (uint64_t)&v251);
            uint64_t v119 = swift_allocObject();
            unint64_t v120 = v228;
            *(void *)(v119 + 16) = v228;
            *(void *)(v119 + 24) = v116;
            outlined init with take of FindResult(&v251, v119 + 32);
            v249 = partial apply for closure #3 in CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:);
            uint64_t v250 = v119;
            *(void *)&long long aBlock = MEMORY[0x263EF8330];
            *((void *)&aBlock + 1) = 1107296256;
            *(void *)&long long v248 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            *((void *)&v248 + 1) = &block_descriptor_90;
            unint64_t v121 = _Block_copy(&aBlock);
            id v122 = v120;
            swift_retain();
            swift_release();
            unint64_t v123 = v214;
            static DispatchQoS.unspecified.getter();
            *(void *)&long long aBlock = MEMORY[0x263F8EE78];
            lazy protocol witness table accessor for type MathExpression and conformance MathExpression((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
            uint64_t v106 = v218;
            unint64_t v124 = v217;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            MEMORY[0x21054DA10](0, v123, v124, v121);
            _Block_release(v121);
            swift_release();
            uint64_t v33 = v219;
          }

          (*v211)(v124, v106);
          (*v210)(v123, v216);
          uint64_t v11 = v245;
          v82((int64_t)v233, v18);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v253);
          os_log_type_t v70 = v232;
          char v7 = (uint64_t *)v239;
          char isUniquelyReferenced_nonNull_native = (uint64_t)v221;
        }
        else
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for CalculateMathItem?);
        }
        int64_t v37 = (int64_t)v234;
        unint64_t v69 = v235;
      }
LABEL_64:
      uint64_t v77 = (char *)*v238;
      (*v238)(isUniquelyReferenced_nonNull_native, 1, 1, v18);
LABEL_65:
      swift_release();
      char isUniquelyReferenced_nonNull_native = v227;
      uint64_t v133 = *(void *)(v227 + 56);
      int64_t v222 = v227 + 56;
      uint64_t v134 = 1 << *(unsigned char *)(v227 + 32);
      uint64_t v135 = -1;
      if (v134 < 64) {
        uint64_t v135 = ~(-1 << v134);
      }
      int64_t v37 = v135 & v133;
      v234 = &v228[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForTokens];
      char v7 = (uint64_t *)&v228[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForResults];
      uint64_t v11 = (void (**)(int64_t, uint64_t))&v228[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_resultDrawings];
      int64_t v225 = (unint64_t)(v134 + 63) >> 6;
      v221 = (char *)(v241 + 40);
      swift_bridgeObjectRetain();
      uint64_t v136 = 0;
      v233 = v77;
      while (2)
      {
        if (v37)
        {
          unint64_t v137 = __clz(__rbit64(v37));
          uint64_t v138 = (v37 - 1) & v37;
          uint64_t v235 = v136;
          unint64_t v139 = v137 | (v136 << 6);
          goto LABEL_85;
        }
        int64_t v140 = v136 + 1;
        if (__OFADD__(v136, 1)) {
          goto LABEL_127;
        }
        int64_t v37 = (int64_t)v226;
        if (v140 >= v225)
        {
LABEL_107:
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v77)(v70, 1, 1, v18);
          swift_release();
          goto LABEL_108;
        }
        unint64_t v141 = *(void *)(v222 + 8 * v140);
        int64_t v142 = v136 + 1;
        if (v141) {
          goto LABEL_84;
        }
        int64_t v142 = v136 + 2;
        if (v136 + 2 >= v225) {
          goto LABEL_107;
        }
        unint64_t v141 = *(void *)(v222 + 8 * v142);
        if (v141) {
          goto LABEL_84;
        }
        int64_t v142 = v136 + 3;
        if (v136 + 3 >= v225) {
          goto LABEL_107;
        }
        unint64_t v141 = *(void *)(v222 + 8 * v142);
        if (v141) {
          goto LABEL_84;
        }
        uint64_t v143 = v136 + 4;
        if (v136 + 4 >= v225) {
          goto LABEL_107;
        }
        unint64_t v141 = *(void *)(v222 + 8 * v143);
        if (v141)
        {
          int64_t v142 = v136 + 4;
LABEL_84:
          uint64_t v138 = (v141 - 1) & v141;
          uint64_t v235 = v142;
          unint64_t v139 = __clz(__rbit64(v141)) + (v142 << 6);
LABEL_85:
          unint64_t v144 = v243;
          uint64_t v33 = *(void *)(v243 + 72);
          (*(void (**)(char *, unint64_t, uint64_t))(v243 + 16))(v70, *(void *)(isUniquelyReferenced_nonNull_native + 48) + v33 * v139, v18);
          ((void (*)(char *, void, uint64_t, uint64_t))v77)(v70, 0, 1, v18);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v70, 1, v18) != 1)
          {
            int64_t v145 = v138;
            Class v146 = v11;
            v147 = v7;
            uint64_t v148 = v246;
            (*v236)(v246, (uint64_t)v70, v18);
            v149 = (uint64_t *)v234;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            unint64_t v150 = specialized __RawDictionaryStorage.find<A>(_:)(v148);
            char v152 = v151;
            swift_bridgeObjectRelease();
            if (v152)
            {
              char v153 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v154 = *v149;
              *(void *)&long long v251 = *v149;
              uint64_t *v149 = 0x8000000000000000;
              if ((v153 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v154 = v251;
              }
              (*v245)(*(void *)(v154 + 48) + v150 * v33, v18);
              uint64_t v155 = v251;
              outlined init with take of WeakCalculateExpression(*(void *)(v251 + 56) + 8 * v150, (uint64_t)&v253);
              specialized _NativeDictionary._delete(at:)(v150, v155);
              uint64_t *v149 = v155;
              swift_bridgeObjectRelease();
            }
            else
            {
              *(void *)&long long v253 = 0;
            }
            BYTE8(v253) = (v152 & 1) == 0;
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v253, &demangling cache variable for type metadata for WeakCalculateExpression?);
            swift_endAccess();
            char v7 = v147;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            unint64_t v156 = specialized __RawDictionaryStorage.find<A>(_:)(v246);
            char v158 = v157;
            swift_bridgeObjectRelease();
            if (v158)
            {
              char v159 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v160 = *v147;
              *(void *)&long long v251 = *v147;
              uint64_t *v147 = 0x8000000000000000;
              uint64_t v11 = v146;
              if ((v159 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v160 = v251;
              }
              (*v245)(*(void *)(v160 + 48) + v156 * v33, v18);
              uint64_t v161 = v251;
              outlined init with take of WeakCalculateExpression(*(void *)(v251 + 56) + 8 * v156, (uint64_t)&v253);
              specialized _NativeDictionary._delete(at:)(v156, v161);
              uint64_t *v7 = v161;
              swift_bridgeObjectRelease();
            }
            else
            {
              *(void *)&long long v253 = 0;
              uint64_t v11 = v146;
            }
            int64_t v37 = v145;
            BYTE8(v253) = (v158 & 1) == 0;
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v253, &demangling cache variable for type metadata for WeakCalculateExpression?);
            swift_endAccess();
            swift_beginAccess();
            uint64_t v162 = v224;
            uint64_t v163 = v246;
            specialized Set._Variant.remove(_:)(v246, v224);
            outlined destroy of StocksKitCurrencyCache.Provider?(v162, &demangling cache variable for type metadata for UUID?);
            swift_endAccess();
            swift_beginAccess();
            swift_bridgeObjectRetain();
            unint64_t v164 = specialized __RawDictionaryStorage.find<A>(_:)(v163);
            LOBYTE(v163) = v165;
            swift_bridgeObjectRelease();
            Swift::String v166 = 0;
            uint64_t v77 = v233;
            if (v163)
            {
              uint64_t v167 = v239;
              int v168 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v169 = *(void *)v167;
              *(void *)&long long v253 = *(void *)v167;
              *(void *)uint64_t v167 = 0x8000000000000000;
              if (!v168)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v169 = v253;
              }
              (*v245)(*(void *)(v169 + 48) + v164 * v33, v18);
              uint64_t v170 = v253;
              Swift::String v166 = *(void **)(*(void *)(v253 + 56) + 8 * v164);
              specialized _NativeDictionary._delete(at:)(v164, v253);
              *(void *)uint64_t v167 = v170;
              swift_bridgeObjectRelease();
            }
            swift_endAccess();

            swift_beginAccess();
            swift_bridgeObjectRetain();
            unint64_t v171 = specialized __RawDictionaryStorage.find<A>(_:)(v246);
            char v173 = v172;
            swift_bridgeObjectRelease();
            uint64_t v174 = 0;
            if (v173)
            {
              int v175 = swift_isUniquelyReferenced_nonNull_native();
              Class v176 = *v11;
              *(void *)&long long v253 = *v11;
              char *v11 = (void (*)(int64_t, uint64_t))0x8000000000000000;
              if (!v175)
              {
                specialized _NativeDictionary.copy()();
                Class v176 = (void (*)(int64_t, uint64_t))v253;
              }
              (*v245)(*((void *)v176 + 6) + v171 * v33, v18);
              id v177 = (void (*)(int64_t, uint64_t))v253;
              uint64_t v174 = *(void **)(*(void *)(v253 + 56) + 8 * v171);
              specialized _NativeDictionary._delete(at:)(v171, v253);
              char *v11 = v177;
              swift_bridgeObjectRelease();
            }
            swift_endAccess();

            uint64_t v178 = swift_getObjectType();
            uint64_t v179 = v241;
            if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v241 + 48))(v246, v178, v241))
            {
              (*(void (**)(void))(v179 + 40))();
              swift_release();
            }
            (*v245)(v246, v18);
            char isUniquelyReferenced_nonNull_native = v227;
            os_log_type_t v70 = v232;
            uint64_t v136 = v235;
            continue;
          }
          char isUniquelyReferenced_nonNull_native = v227;
          swift_release();
          int64_t v37 = (int64_t)v226;
LABEL_108:
          uint64_t v180 = v252;
          uint64_t v181 = v223;
          uint64_t v182 = v244;
          if (v252 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v183 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v183) {
              goto LABEL_132;
            }
LABEL_110:
            if (v183 < 1)
            {
              __break(1u);
              goto LABEL_140;
            }
            uint64_t v184 = 0;
            unint64_t v243 = v180 & 0xC000000000000001;
            uint64_t v246 = v180;
            v185 = v245;
            do
            {
              if (v243)
              {
                uint64_t v186 = MEMORY[0x21054E050](v184, v180);
              }
              else
              {
                uint64_t v186 = *(void *)(v180 + 8 * v184 + 32);
                swift_retain();
              }
              CalculateExpression.id.getter();
              if (*(void *)(v182 + 16)
                && (unint64_t v187 = specialized __RawDictionaryStorage.find<A>(_:)(v37), (v188 & 1) != 0))
              {
                outlined init with copy of FindResult(*(void *)(v182 + 56) + 40 * v187, (uint64_t)&v253);
              }
              else
              {
                uint64_t v255 = 0;
                long long v253 = 0u;
                long long v254 = 0u;
              }
              v189 = *v185;
              (*v185)(v37, v18);
              if (*((void *)&v254 + 1))
              {
                outlined init with take of FindResult(&v253, (uint64_t)&aBlock);
                uint64_t v190 = *((void *)&v248 + 1);
                v191 = v249;
                __swift_project_boxed_opaque_existential_1(&aBlock, *((uint64_t *)&v248 + 1));
                uint64_t v192 = (void (*)(uint64_t, uint64_t (*)()))*((void *)v191 + 3);
                uint64_t v193 = v229;
                uint64_t v194 = v190;
                uint64_t v181 = v223;
                v195 = v191;
                int64_t v37 = (int64_t)v226;
                v192(v194, v195);
                CalculateDocumentController.trackTokens(for:itemUUID:)(v186, v193);
                swift_release();
                uint64_t v196 = v193;
                uint64_t v182 = v244;
                v189(v196, v18);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
              }
              else
              {
                swift_release();
                outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v253, &demangling cache variable for type metadata for CalculateMathItem?);
              }
              uint64_t v180 = v246;
              ++v184;
            }
            while (v183 != v184);
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = v227;
          }
          else
          {
            uint64_t v183 = *(void *)((v252 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v183) {
              goto LABEL_110;
            }
LABEL_132:
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          if (*(void *)(v181 + 16) || *(void *)(v200 + 16) || *(void *)(isUniquelyReferenced_nonNull_native + 16))
          {
            v197 = self;
            v198 = v228;
            objc_msgSend(v197, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v228, sel_sendExpressionsChanged, 0);
            objc_msgSend(v198, sel_performSelector_withObject_afterDelay_, sel_sendExpressionsChanged, 0, 0.1);
          }
          swift_unknownObjectRelease();

          return;
        }
        break;
      }
      while (1)
      {
        int64_t v142 = v143 + 1;
        if (__OFADD__(v143, 1)) {
          break;
        }
        if (v142 >= v225) {
          goto LABEL_107;
        }
        unint64_t v141 = *(void *)(v222 + 8 * v142);
        ++v143;
        if (v141) {
          goto LABEL_84;
        }
      }
LABEL_129:
      __break(1u);
LABEL_130:
      swift_once();
    }
  }
}

void specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v12.n128_f64[0] = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v15 = 0;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v17 = a1 + 56;
  uint64_t v16 = v18;
  uint64_t v19 = 1 << *(unsigned char *)(v17 - 24);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v16;
  uint64_t v28 = v17;
  int64_t v29 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v31 = v5 + 16;
  uint64_t v32 = (void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
  uint64_t v30 = v5 + 48;
  if ((v20 & v16) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v22 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (unint64_t i = v22 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v15 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v14, *(void *)(v33 + 48) + *(void *)(v5 + 72) * i, v4, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1) {
      goto LABEL_25;
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v14, v4);
    specialized Set._Variant.insert(_:)((uint64_t)v10, v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (v21) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v29) {
      goto LABEL_24;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v29) {
        goto LABEL_24;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v15);
      if (!v25)
      {
        int64_t v15 = v24 + 2;
        if (v24 + 2 >= v29) {
          goto LABEL_24;
        }
        unint64_t v25 = *(void *)(v28 + 8 * v15);
        if (!v25)
        {
          int64_t v15 = v24 + 3;
          if (v24 + 3 >= v29) {
            goto LABEL_24;
          }
          unint64_t v25 = *(void *)(v28 + 8 * v15);
          if (!v25) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v21 = (v25 - 1) & v25;
  }
  int64_t v26 = v24 + 4;
  if (v26 >= v29)
  {
LABEL_24:
    (*v32)(v14, 1, 1, v4, v12);
LABEL_25:
    swift_release();
    return;
  }
  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    int64_t v15 = v26;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v15 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v15 >= v29) {
      goto LABEL_24;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v15);
    ++v26;
    if (v25) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t closure #2 in CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a3[3];
  uint64_t v10 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
  CalculateDocumentController.trackResult(for:itemUUID:)(a2, (uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t CalculateDocumentController.findMatchingGraphableForOrphanedGraphable(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GraphableExpression();
  uint64_t v46 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  BOOL v44 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v54 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document;
  uint64_t v14 = MEMORY[0x210550400](v13);
  if (!v14) {
    goto LABEL_21;
  }
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v13 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
  uint64_t v51 = ObjectType;
  uint64_t v52 = v16;
  uint64_t v19 = v18(ObjectType, v16);
  if (!v19)
  {
    swift_unknownObjectRelease();
LABEL_21:
    uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
    return v31(a2, 1, 1, v7);
  }
  uint64_t v43 = v19;
  unint64_t v20 = dispatch thunk of CalculateDocument.expressions.getter();
  unint64_t v21 = v20;
  if (v20 >> 62) {
    goto LABEL_29;
  }
  for (uint64_t i = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v41 = v9;
    uint64_t v42 = a2;
    unint64_t v55 = v21 & 0xC000000000000001;
    uint64_t v49 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
    uint64_t v50 = v15;
    uint64_t v47 = (unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
    uint64_t v48 = v52 + 64;
    uint64_t v9 = 4;
    uint64_t v53 = i;
    while (1)
    {
      uint64_t v23 = v9 - 4;
      if (!v55) {
        break;
      }
      uint64_t v24 = MEMORY[0x21054E050](v9 - 4, v21);
      uint64_t v15 = v9 - 3;
      if (__OFADD__(v23, 1)) {
        goto LABEL_28;
      }
LABEL_13:
      uint64_t v25 = v7;
      uint64_t v26 = CalculateExpression.expression.getter();
      uint64_t v28 = v27;
      a2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      if (v26 == v58 && v28 == v59)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
        {
          swift_release();
          uint64_t v7 = v25;
          goto LABEL_7;
        }
      }
      uint64_t v7 = v25;
      CRRegister.wrappedValue.getter();
      a2 = (uint64_t)v54;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      int v30 = (*v49)(a2, 1, v56);
      outlined destroy of StocksKitCurrencyCache.Provider?(a2, &demangling cache variable for type metadata for UUID?);
      if (v30 != 1)
      {
        swift_bridgeObjectRelease();
        CalculateExpression.expression.getter();
        uint64_t v33 = v44;
        CalculateExpression.id.getter();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v56);
        uint64_t v58 = 0;
        uint64_t v34 = v42;
        GraphableExpression.init(expression:identifier:graphableVariable:color:)(0xE000000000000000, v42);
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        double v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
        uint64_t v36 = v34;
LABEL_27:
        uint64_t v40 = 0;
        return v35(v36, v40, 1, v7);
      }
      (*(void (**)(uint64_t, uint64_t))(v52 + 64))(v24, v51);
      swift_release();
      if ((*v47)(v6, 1, v25) != 1)
      {
        swift_unknownObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v37 = v41;
        outlined init with take of GraphableExpression((uint64_t)v6, v41);
        uint64_t v38 = v37;
        uint64_t v39 = v42;
        outlined init with take of GraphableExpression(v38, v42);
        double v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
        uint64_t v36 = v39;
        goto LABEL_27;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
LABEL_7:
      ++v9;
      if (v15 == v53)
      {
        swift_release();
        swift_bridgeObjectRelease();
        a2 = v42;
        goto LABEL_31;
      }
    }
    uint64_t v24 = *(void *)(v21 + 8 * v9);
    swift_retain();
    uint64_t v15 = v9 - 3;
    if (!__OFADD__(v23, 1)) {
      goto LABEL_13;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    ;
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_31:
  swift_unknownObjectRelease();
  double v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
  uint64_t v36 = a2;
  uint64_t v40 = 1;
  return v35(v36, v40, 1, v7);
}

uint64_t CalculateDocumentController.sendResultForExpression(_:itemUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)CalculateExpression.result.getter();
  if (v3)
  {
    uint64_t v4 = v3;
    if ((objc_msgSend(v3, sel_isTrivial) & 1) == 0)
    {
      id v11 = objc_msgSend(v4, sel_formattedResult);
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v12;

      uint64_t v7 = (void *)CalculateExpression.result.getter();
      if (v7) {
        goto LABEL_5;
      }
      goto LABEL_7;
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = (void *)CalculateExpression.result.getter();
  if (v7)
  {
LABEL_5:
    uint64_t v8 = v7;
    id v9 = objc_msgSend(v7, sel_unitType);

    char v10 = v9 == (id)16;
    goto LABEL_8;
  }
LABEL_7:
  char v10 = 0;
LABEL_8:
  CalculateDocumentController.sendResult(_:itemUUID:needsAttribution:)(v5, v6, a2, v10);
  return swift_bridgeObjectRelease();
}

uint64_t CalculateDocumentController.sendResult(_:itemUUID:needsAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = v4 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers;
  uint64_t result = swift_beginAccess();
  uint64_t v11 = *(void *)(*(void *)v9 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)v9 + 32;
    swift_bridgeObjectRetain();
    uint64_t v13 = a4 & 1;
    do
    {
      outlined init with copy of WeakObserver(v12, (uint64_t)v16);
      if (MEMORY[0x210550400](v16))
      {
        uint64_t v14 = v17;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8))(a1, a2, a3, v13, ObjectType, v14);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v16);
      v12 += 16;
      --v11;
    }
    while (v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall CalculateDocumentController.sendExpressionsChanged()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of WeakObserver(v4, (uint64_t)v7);
      if (MEMORY[0x210550400](v7))
      {
        uint64_t v5 = v8;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v7);
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
}

void CalculateDocumentController.trackResult(for:itemUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - v11;
  if (CalculateExpression.isActuallyGraphable.getter() || (CalculateExpression.isDeclaration.getter() & 1) != 0)
  {
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)&v25);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v25, &demangling cache variable for type metadata for WeakCalculateExpression?);
    swift_endAccess();
    return;
  }
  if ((CalculateExpression.needsEvaluation.getter() & 1) == 0) {
    CalculateDocumentController.sendResultForExpression(_:itemUUID:)(a1, a2);
  }
  CalculateExpression.id.getter();
  uint64_t v13 = v2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForResults;
  swift_beginAccess();
  if (*(void *)(*(void *)v13 + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
    if (v14)
    {
      outlined init with copy of WeakCalculateExpression();
      char v26 = 0;
    }
    else
    {
      uint64_t v25 = 0;
      char v26 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = 0;
    char v26 = 1;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  if (v26)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v25, &demangling cache variable for type metadata for WeakCalculateExpression?);
LABEL_16:
    CalculateExpression.id.getter();
    swift_weakInit();
    uint64_t v16 = swift_weakAssign();
    outlined init with take of WeakCalculateExpression(v16, (uint64_t)&v27);
    char v28 = 0;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v27, (uint64_t)v9);
    uint64_t v17 = swift_endAccess();
    MEMORY[0x270FA5388](v17);
    *(&v25 - 4) = v3;
    *(&v25 - 3) = a1;
    *(&v25 - 2) = a2;
    withObservationTracking<A>(_:onChange:)();
    return;
  }
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v25, &demangling cache variable for type metadata for WeakCalculateExpression?);
  if (!Strong) {
    goto LABEL_16;
  }
  swift_release();
  if (Strong != a1) {
    goto LABEL_16;
  }
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)mathLogger);
  swift_retain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v25 = v22;
    *(_DWORD *)unint64_t v21 = 136380675;
    uint64_t v23 = CalculateExpression.expression.getter();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v19, v20, "Already tracked result for: %{private}s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v22, -1, -1);
    MEMORY[0x210550270](v21, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

void (*implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v8;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  return partial apply for closure #2 in implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:);
}

void CalculateDocumentController.trackTokens(for:itemUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - v11;
  if ((CalculateExpression.needsEvaluation.getter() & 1) == 0) {
    CalculateDocumentController.updateTokens(expression:itemUUID:)(a1, a2);
  }
  CalculateExpression.id.getter();
  uint64_t v13 = v2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForTokens;
  swift_beginAccess();
  if (*(void *)(*(void *)v13 + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
    if (v14)
    {
      outlined init with copy of WeakCalculateExpression();
      char v26 = 0;
    }
    else
    {
      uint64_t v25 = 0;
      char v26 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = 0;
    char v26 = 1;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  if (v26)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v25, &demangling cache variable for type metadata for WeakCalculateExpression?);
LABEL_13:
    CalculateExpression.id.getter();
    swift_weakInit();
    uint64_t v16 = swift_weakAssign();
    outlined init with take of WeakCalculateExpression(v16, (uint64_t)&v27);
    char v28 = 0;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v27, (uint64_t)v9);
    uint64_t v17 = swift_endAccess();
    MEMORY[0x270FA5388](v17);
    *(&v25 - 4) = v3;
    *(&v25 - 3) = a1;
    *(&v25 - 2) = a2;
    withObservationTracking<A>(_:onChange:)();
    return;
  }
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v25, &demangling cache variable for type metadata for WeakCalculateExpression?);
  if (!Strong) {
    goto LABEL_13;
  }
  swift_release();
  if (Strong != a1) {
    goto LABEL_13;
  }
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)mathLogger);
  swift_retain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v25 = v22;
    *(_DWORD *)unint64_t v21 = 136380675;
    uint64_t v23 = CalculateExpression.expression.getter();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v19, v20, "Already tracked tokens for: %{private}s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v22, -1, -1);
    MEMORY[0x210550270](v21, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t closure #1 in CalculateDocumentController.trackTokens(for:itemUUID:)()
{
  CalculateExpression.plain.getter();
  swift_release();
  CalculateExpression.graphableVariable.getter();
  return swift_bridgeObjectRelease();
}

void (*implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v8;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  return partial apply for closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:);
}

void closure #2 in implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v34 = a5;
  uint64_t v32 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v39 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v37 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x210550400](a1 + 16);
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v29 = Strong;
      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)(a3, (uint64_t)v41);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v41, &demangling cache variable for type metadata for WeakCalculateExpression?);
      swift_endAccess();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v31 = static OS_dispatch_queue.main.getter();
      uint64_t v28 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v18 = swift_allocObject();
      swift_weakInit();
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v12);
      uint64_t v19 = *(unsigned __int8 *)(v13 + 80);
      uint64_t v30 = v10;
      uint64_t v20 = v32;
      uint64_t v21 = (v19 + 32) & ~v19;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v28;
      *(void *)(v22 + 24) = v18;
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22 + v21, (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
      aBlock[4] = v35;
      aBlock[5] = v22;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = v36;
      uint64_t v23 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      unint64_t v24 = v37;
      static DispatchQoS.unspecified.getter();
      v41[0] = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type MathExpression and conformance MathExpression((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      uint64_t v25 = v39;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      char v26 = (void *)v31;
      MEMORY[0x21054DA10](0, v24, v25, v23);
      _Block_release(v23);

      swift_release();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v20);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v30);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

void closure #1 in closure #2 in implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      a4();

      swift_release();
    }
    else
    {
    }
  }
}

unint64_t CalculateDocumentController.calculateDocumentProvider.getter()
{
  uint64_t v1 = v0;
  uint64_t v70 = type metadata accessor for UUID();
  Swift::Int v2 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v4 = (char *)v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = MEMORY[0x263F8EE88];
  uint64_t v74 = MEMORY[0x263F8EE78];
  uint64_t v72 = MEMORY[0x263F8EE78];
  uint64_t v5 = v0 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document;
  if (!MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document)
    || (uint64_t v6 = *(void *)(v5 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        Swift::Int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6),
        swift_unknownObjectRelease(),
        !v8))
  {
LABEL_61:
    BOOL v62 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CalculateDocumentProvider()), sel_init);
    *(void *)&v62[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables] = v73;
    swift_bridgeObjectRelease();
    *(void *)&v62[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions] = v74;
    swift_bridgeObjectRelease();
    *(void *)&v62[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults] = v72;
    swift_bridgeObjectRelease();
    return (unint64_t)v62;
  }
  Swift::Int v69 = v2;
  v63[1] = v8;
  uint64_t v9 = dispatch thunk of CalculateDocument.declaredSymbols.getter();
  uint64_t v10 = v9;
  int64_t v11 = 0;
  uint64_t v12 = v9 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v9 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_7;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v21 >= v16) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v12 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v12 + 8 * v11);
      if (!v22)
      {
        int64_t v11 = v21 + 2;
        if (v21 + 2 >= v16) {
          goto LABEL_23;
        }
        unint64_t v22 = *(void *)(v12 + 8 * v11);
        if (!v22) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_7:
    uint64_t v19 = (Swift::Int *)(*(void *)(v10 + 48) + 16 * v18);
    Swift::Int v8 = *v19;
    Swift::Int v20 = v19[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v71, v8, v20);
    swift_bridgeObjectRelease();
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v16)
  {
LABEL_23:
    swift_release();
    unint64_t result = dispatch thunk of CalculateDocument.expressions.getter();
    Swift::Int v8 = result;
    if (result >> 62) {
      goto LABEL_59;
    }
    uint64_t v25 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v25) {
      goto LABEL_25;
    }
LABEL_60:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_61;
  }
  unint64_t v22 = *(void *)(v12 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v12 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_58:
  __break(1u);
LABEL_59:
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v25 = result;
  if (!result) {
    goto LABEL_60;
  }
LABEL_25:
  if (v25 >= 1)
  {
    char v26 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionUUIDs);
    uint64_t v27 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_resultDrawings);
    unint64_t v65 = v8 & 0xC000000000000001;
    uint64_t v67 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionStrokeGroups);
    swift_beginAccess();
    uint64_t v66 = v26;
    swift_beginAccess();
    uint64_t v64 = v27;
    swift_beginAccess();
    uint64_t v28 = 0;
    uint64_t v68 = (void (**)(char *, uint64_t))(v69 + 8);
    Swift::Int v69 = v8;
    while (1)
    {
      if (v65) {
        MEMORY[0x21054E050](v28, v8);
      }
      else {
        swift_retain();
      }
      CalculateExpression.id.getter();
      uint64_t v29 = CalculateExpression.expression.getter();
      uint64_t v31 = v30;
      uint64_t v32 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MathExpression()), sel_init);
      uint64_t v33 = *v67;
      if (*(void *)(*v67 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
        if (v35)
        {
          uint64_t v36 = *(void **)(*(void *)(v33 + 56) + 8 * v34);
          id v37 = v36;
        }
        else
        {
          uint64_t v36 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v38 = *v66;
      swift_bridgeObjectRetain();
      char v39 = specialized Set.contains(_:)((uint64_t)v4, v38);
      swift_bridgeObjectRelease();
      v32[OBJC_IVAR____TtC8PaperKit14MathExpression_isAssociatedWithCurrentSession] = v39 & 1;
      uint64_t v40 = *(void **)&v32[OBJC_IVAR____TtC8PaperKit14MathExpression_strokeGroupIdentifier];
      *(void *)&v32[OBJC_IVAR____TtC8PaperKit14MathExpression_strokeGroupIdentifier] = v36;
      id v41 = v36;

      uint64_t v42 = (uint64_t *)&v32[OBJC_IVAR____TtC8PaperKit14MathExpression_expression];
      *uint64_t v42 = v29;
      v42[1] = v31;
      swift_bridgeObjectRelease();
      uint64_t v43 = v32;
      MEMORY[0x21054D330]();
      if (*(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v36) {
        break;
      }
      (*v68)(v4, v70);

      swift_release();
LABEL_28:
      Swift::Int v8 = v69;
      if (v25 == ++v28) {
        goto LABEL_60;
      }
    }
    id v44 = v41;
    uint64_t v45 = (void *)CalculateExpression.result.getter();
    if (v45)
    {
      uint64_t v46 = v45;
      if (objc_msgSend(v45, sel_isTrivial))
      {

        swift_release();
LABEL_55:
        (*v68)(v4, v70);
        goto LABEL_28;
      }
      id v47 = objc_msgSend(v46, sel_formattedResult);
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v50 = v49;

      uint64_t v51 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MathExpressionEvaluationResult()), sel_init);
      uint64_t v52 = (uint64_t *)&v51[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string];
      *uint64_t v52 = v48;
      v52[1] = v50;
      swift_bridgeObjectRelease();
      uint64_t v53 = *(void **)&v51[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_strokeGroupIdentifier];
      *(void *)&v51[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_strokeGroupIdentifier] = v44;
      id v54 = v44;

      uint64_t v55 = *v64;
      if (*(void *)(*v64 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
        if (v57)
        {
          uint64_t v58 = *(void **)(*(void *)(v55 + 56) + 8 * v56);
          id v59 = v58;
        }
        else
        {
          uint64_t v58 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v58 = 0;
      }
      id v60 = *(void **)&v51[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing];
      *(void *)&v51[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing] = v58;

      uint64_t v61 = v51;
      MEMORY[0x21054D330]();
      if (*(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
    swift_release();
    goto LABEL_55;
  }
  __break(1u);
  return result;
}

uint64_t CalculateDocumentController.resultForExpressionWithUUID(_:locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document;
  if (MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document))
  {
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t ObjectType = swift_getObjectType();
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, ObjectType, v6))
    {
      uint64_t v8 = CalculateExpression.result.getter();
      if (v8)
      {
        uint64_t v9 = (void *)v8;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale>);
        uint64_t v10 = type metadata accessor for Locale();
        uint64_t v11 = *(void *)(v10 - 8);
        unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        uint64_t v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_20C832C20;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16))(v13 + v12, a2, v10);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v9, sel_setLocales_, isa);

        if ((objc_msgSend(v9, sel_isTrivial) & 1) == 0)
        {
          id v17 = objc_msgSend(v9, sel_formattedResult);
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          swift_unknownObjectRelease();
          swift_release();

          return v15;
        }
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_release();
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  return 0;
}

id CalculateDocumentController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CalculateDocumentController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CalculateDocumentController()
{
  return self;
}

uint64_t getEnumTagSinglePayload for WeakCalculateExpression(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WeakCalculateExpression(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WeakCalculateExpression()
{
  return &type metadata for WeakCalculateExpression;
}

uint64_t initializeWithCopy for WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for WeakObserver(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WeakObserver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WeakObserver()
{
  return &type metadata for WeakObserver;
}

unint64_t lazy protocol witness table accessor for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [MathExpression] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MathExpression]);
    lazy protocol witness table accessor for type MathExpression and conformance MathExpression(a2, v5, (void (*)(uint64_t))type metadata accessor for MathExpression);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [MathExpressionEvaluationResult] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MathExpressionEvaluationResult]);
    lazy protocol witness table accessor for type MathExpression and conformance MathExpression(a2, v5, (void (*)(uint64_t))type metadata accessor for MathExpressionEvaluationResult);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys);
  }
  return result;
}

uint64_t sub_20C46D810()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C46D848()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)()
{
  closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)(*(void *)(v0 + 16));
}

uint64_t objectdestroy_50Tm()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)()
{
  closure #1 in closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)(*(void *)(v0 + 16));
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in CalculateDocumentController.trackExpressions(in:)()
{
  return closure #1 in CalculateDocumentController.trackExpressions(in:)();
}

void (*partial apply for implicit closure #1 in CalculateDocumentController.trackExpressions(in:)())()
{
  return implicit closure #1 in CalculateDocumentController.trackExpressions(in:)();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v10 = MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    uint64_t v5 = MEMORY[0x263F8EE78];
    do
    {
      outlined init with copy of WeakObserver(v4, (uint64_t)v9);
      if (MEMORY[0x210550400](v9))
      {
        swift_unknownObjectRelease();
        outlined init with take of WeakObserver((uint64_t)v9, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1);
        }
        uint64_t v5 = v10;
        unint64_t v7 = *(void *)(v10 + 16);
        unint64_t v6 = *(void *)(v10 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v5 = v10;
        }
        *(void *)(v5 + 16) = v7 + 1;
        outlined init with take of WeakObserver((uint64_t)v8, v5 + 16 * v7 + 32);
      }
      else
      {
        outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v9);
      }
      v4 += 16;
      --v3;
    }
    while (v3);
    return v10;
  }
  return result;
}

uint64_t specialized static CalculateDocumentController.cleanupStaleControllers()()
{
  unint64_t v0 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  if (one-time initialization token for controllers == -1) {
    goto LABEL_2;
  }
LABEL_40:
  swift_once();
LABEL_2:
  swift_beginAccess();
  uint64_t v1 = static CalculateDocumentController.controllers;
  char v35 = (char *)static CalculateDocumentController.controllers + 64;
  uint64_t v2 = 1 << *((unsigned char *)static CalculateDocumentController.controllers + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *((void *)static CalculateDocumentController.controllers + 8);
  int64_t v36 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  if (v4)
  {
LABEL_5:
    unint64_t v6 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v7 = v6 | (v5 << 6);
    goto LABEL_17;
  }
  while (1)
  {
    while (1)
    {
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      if (v5 >= v36) {
        goto LABEL_37;
      }
      unint64_t v9 = *(void *)&v35[8 * v5];
      if (!v9)
      {
        int64_t v10 = v5 + 1;
        if (v5 + 1 >= v36) {
          goto LABEL_37;
        }
        unint64_t v9 = *(void *)&v35[8 * v10];
        if (!v9)
        {
          int64_t v10 = v5 + 2;
          if (v5 + 2 >= v36) {
            goto LABEL_37;
          }
          unint64_t v9 = *(void *)&v35[8 * v10];
          if (!v9)
          {
            int64_t v10 = v5 + 3;
            if (v5 + 3 >= v36)
            {
LABEL_37:
              swift_release();
              static CalculateDocumentController.controllers = (_UNKNOWN *)v0;
              return swift_bridgeObjectRelease();
            }
            unint64_t v9 = *(void *)&v35[8 * v10];
            if (!v9)
            {
              while (1)
              {
                int64_t v5 = v10 + 1;
                if (__OFADD__(v10, 1)) {
                  goto LABEL_39;
                }
                if (v5 >= v36) {
                  goto LABEL_37;
                }
                unint64_t v9 = *(void *)&v35[8 * v5];
                ++v10;
                if (v9) {
                  goto LABEL_16;
                }
              }
            }
          }
        }
        int64_t v5 = v10;
      }
LABEL_16:
      unint64_t v4 = (v9 - 1) & v9;
      unint64_t v7 = __clz(__rbit64(v9)) + (v5 << 6);
LABEL_17:
      uint64_t v11 = 8 * v7;
      unint64_t v12 = *(void **)(v1[6] + v11);
      uint64_t v13 = *(char **)(v1[7] + v11);
      uint64_t v14 = &v13[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers];
      swift_beginAccess();
      id v15 = v12;
      int64_t v16 = v13;
      uint64_t v17 = swift_bridgeObjectRetain();
      uint64_t v18 = specialized _ArrayProtocol.filter(_:)(v17);
      swift_bridgeObjectRelease();
      *(void *)uint64_t v14 = v18;
      swift_bridgeObjectRelease();
      if (*(void *)(*(void *)v14 + 16))
      {
        uint64_t v19 = MEMORY[0x210550400](&v16[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document]);
        swift_unknownObjectRelease();
        if (v19) {
          break;
        }
      }

      if (v4) {
        goto LABEL_5;
      }
    }
    id v20 = v15;
    int64_t v21 = v16;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
    uint64_t v25 = *(void *)(v0 + 16);
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    char v28 = v23;
    if (*(void *)(v0 + 24) >= v27)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v23) {
          goto LABEL_32;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v28) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_42;
      }
      unint64_t v24 = v29;
      if (v28)
      {
LABEL_32:
        uint64_t v32 = *(void *)(v0 + 56);
        uint64_t v33 = 8 * v24;

        *(void *)(v32 + v33) = v21;
        goto LABEL_33;
      }
    }
    specialized _NativeDictionary._insert(at:key:value:)(v24, (uint64_t)v20, (uint64_t)v21, (void *)v0);
    id v31 = v20;
LABEL_33:

    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_42:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of WeakObserver(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t outlined init with take of WeakObserver(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t partial apply for closure #1 in CalculateDocumentController.trackTokens(for:itemUUID:)()
{
  return closure #1 in CalculateDocumentController.trackTokens(for:itemUUID:)();
}

void (*partial apply for implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)())()
{
  return implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)(v0[2], v0[3], v0[4]);
}

uint64_t outlined init with copy of WeakCalculateExpression()
{
  return swift_weakCopyInit();
}

void partial apply for closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)()
{
}

void partial apply for closure #1 in closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)()
{
}

void partial apply for closure #1 in closure #2 in implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:)(void (*a1)(void))
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  closure #1 in closure #2 in implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:)(*(void *)(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

void partial apply for closure #1 in CalculateDocumentController.trackResult(for:itemUUID:)()
{
  unint64_t v0 = (void *)CalculateExpression.result.getter();
}

void (*partial apply for implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:)())()
{
  return implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:)(v0[2], v0[3], v0[4]);
}

void partial apply for closure #2 in implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:)()
{
}

void partial apply for closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for UUID() - 8);
  closure #2 in implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:)(*(void *)(v4 + 16), *(void *)(v4 + 24), v4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a1, a2, a3, a4);
}

uint64_t objectdestroy_62Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for closure #1 in closure #2 in implicit closure #3 in CalculateDocumentController.trackResult(for:itemUUID:)()
{
}

uint64_t lazy protocol witness table accessor for type MathExpression and conformance MathExpression(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroy_86Tm()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #2 in CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)()
{
  return closure #2 in CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(v0[2], v0[3], v0 + 4);
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t partial apply for closure #1 in CalculateDocumentController.updateGraphableVariables()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in CalculateDocumentController.updateGraphableVariables()(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: String));
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v25 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v26 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v22 = *(void *)(v25 + 8 * v12);
      if (!v22)
      {
        int64_t v12 = v21 + 2;
        if (v21 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v22 = *(void *)(v25 + 8 * v12);
        if (!v22)
        {
          int64_t v12 = v21 + 3;
          if (v21 + 3 >= v26) {
            return swift_release();
          }
          unint64_t v22 = *(void *)(v25 + 8 * v12);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v22 - 1) & v22;
    unint64_t v14 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v6, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v16);
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v14);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    id v20 = &v6[*(int *)(v4 + 48)];
    *(void *)id v20 = v18;
    *((void *)v20 + 1) = v19;
    swift_bridgeObjectRetain();
    a2(v6, v18, v19);
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: String));
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v12 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v12 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_20C46E45C()
{
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in CalculateDocumentController.init()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return MEMORY[0x270FA2498](closure #1 in CalculateDocumentController.init(), 0, 0);
}

ValueMetadata *type metadata accessor for DrawingIdentifier()
{
  return &type metadata for DrawingIdentifier;
}

ValueMetadata *type metadata accessor for MathExpressionEvaluationResult.CodingKeys()
{
  return &type metadata for MathExpressionEvaluationResult.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for MathExpressionEvaluationResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C46E62CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MathExpression.CodingKeys()
{
  return &type metadata for MathExpression.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for CalculateDocumentProvider.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C46E730);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculateDocumentProvider.CodingKeys()
{
  return &type metadata for CalculateDocumentProvider.CodingKeys;
}

unint64_t lazy protocol witness table accessor for type DrawingIdentifier and conformance DrawingIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DrawingIdentifier and conformance DrawingIdentifier;
  if (!lazy protocol witness table cache variable for type DrawingIdentifier and conformance DrawingIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DrawingIdentifier and conformance DrawingIdentifier);
  }
  return result;
}

unint64_t specialized CalculateDocumentProvider.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CalculateDocumentProvider.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t UUID.init(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 != 16)
      {
LABEL_13:
        uint64_t v9 = type metadata accessor for CRCodingError();
        lazy protocol witness table accessor for type CRCodingError and conformance CRCodingError();
        swift_allocError();
        strcpy(v10, "Invalid UUID.");
        *((_WORD *)v10 + 7) = -4864;
        (*(void (**)(char *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v10, *MEMORY[0x263F32D70], v9);
        swift_willThrow();
        return outlined consume of Data._Representation(a1, a2);
      }
      if (v2)
      {
        if (v2 != 1)
        {
          uint64_t v12 = *(void *)(a1 + 16);
          swift_retain();
          swift_retain();
          if (!__DataStorage._bytes.getter())
          {
LABEL_25:
            __DataStorage._length.getter();
            __break(1u);
            JUMPOUT(0x20C46EE8CLL);
          }
          if (!__OFSUB__(v12, __DataStorage._offset.getter()))
          {
            __DataStorage._length.getter();
            swift_release();
            swift_release();
            goto LABEL_18;
          }
          goto LABEL_22;
        }
        if ((int)a1 <= a1 >> 32)
        {
          if (!__DataStorage._bytes.getter())
          {
LABEL_24:
            __DataStorage._length.getter();
            __break(1u);
            goto LABEL_25;
          }
          if (!__OFSUB__((int)a1, __DataStorage._offset.getter()))
          {
            __DataStorage._length.getter();
            goto LABEL_18;
          }
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
LABEL_18:
      UUID.init(uuid:)();
      return outlined consume of Data._Representation(a1, a2);
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_20;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t lazy protocol witness table accessor for type CRCodingError and conformance CRCodingError()
{
  unint64_t result = lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError;
  if (!lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError)
  {
    type metadata accessor for CRCodingError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError);
  }
  return result;
}

uint64_t UUID.data()()
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  __srCGFloat c = UUID.uuid.getter();
  char v10 = v0;
  char v11 = v1;
  char v12 = v2;
  char v13 = v3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  UUID.uuid.getter();
  return specialized Data.init(bytes:count:)(&__src, 16);
}

uint64_t specialized Data.init(bytes:count:)(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t StepperButton.addTarget(_:action:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton);
  outlined init with copy of Any?(a1, (uint64_t)v15);
  uint64_t v7 = v16;
  if (v16)
  {
    BOOL v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
    uint64_t v9 = *(void *)(v7 - 8);
    double v10 = MEMORY[0x270FA5388](v8);
    char v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v13 = 0;
  }
  objc_msgSend(v6, sel_addTarget_action_forControlEvents_, v13, a2, a3);
  return swift_unknownObjectRelease();
}

char *StepperButton.init(image:)(void *a1)
{
  char v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton;
  id v6 = objc_allocWithZone(MEMORY[0x263F824E8]);
  uint64_t v7 = v2;
  *(void *)&v2[v5] = objc_msgSend(v6, sel_init);
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit13StepperButton_imageView;
  *(void *)&v7[v8] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_init);
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit13StepperButton_imageConfiguration;
  *(void *)&v7[v9] = objc_msgSend(self, sel_configurationWithPointSize_weight_scale_, 7, 2, 19.0);
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit13StepperButton_image] = a1;
  id v44 = a1;

  v45.receiver = v7;
  v45.super_class = ObjectType;
  double v10 = (char *)objc_msgSendSuper2(&v45, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton;
  char v12 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton];
  uint64_t v13 = v10;
  objc_msgSend(v12, sel_setUserInteractionEnabled_, 1);
  objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v13, sel_addSubview_, v12);
  id v43 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_20C8344C0;
  id v15 = objc_msgSend(v12, sel_topAnchor);
  id v16 = objc_msgSend(v13, sel_topAnchor);
  id v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(void *)(v14 + 32) = v17;
  id v18 = objc_msgSend(*(id *)&v10[v11], sel_leadingAnchor);
  id v19 = objc_msgSend(v13, sel_leadingAnchor);
  id v20 = objc_msgSend(v18, (SEL)&off_2640D62E8 + 6, v19);

  *(void *)(v14 + 40) = v20;
  id v21 = objc_msgSend(*(id *)&v10[v11], sel_bottomAnchor);
  id v22 = objc_msgSend(v13, sel_bottomAnchor);
  id v23 = objc_msgSend(v21, (SEL)&off_2640D62E8 + 6, v22);

  *(void *)(v14 + 48) = v23;
  id v24 = objc_msgSend(*(id *)&v10[v11], sel_trailingAnchor);
  id v25 = objc_msgSend(v13, sel_trailingAnchor);
  id v26 = objc_msgSend(v24, (SEL)&off_2640D62E8 + 6, v25);

  *(void *)(v14 + 56) = v26;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v43, sel_activateConstraints_, isa);

  uint64_t v28 = OBJC_IVAR____TtC8PaperKit13StepperButton_imageView;
  unint64_t v29 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit13StepperButton_image];
  uint64_t v30 = *(void *)&v13[OBJC_IVAR____TtC8PaperKit13StepperButton_imageConfiguration];
  id v31 = *(id *)&v13[OBJC_IVAR____TtC8PaperKit13StepperButton_imageView];
  id v32 = objc_msgSend(v29, sel_imageWithConfiguration_, v30);
  objc_msgSend(v31, sel_setImage_, v32);

  uint64_t v33 = *(void **)&v13[v28];
  objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(*(id *)&v10[v11], sel_addSubview_, v33);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_20C8344D0;
  id v35 = objc_msgSend(v33, sel_centerXAnchor);
  id v36 = objc_msgSend(v13, sel_centerXAnchor);
  id v37 = objc_msgSend(v35, sel_constraintEqualToAnchor_, v36);

  *(void *)(v34 + 32) = v37;
  id v38 = objc_msgSend(*(id *)&v13[v28], sel_centerYAnchor);
  id v39 = objc_msgSend(v13, sel_centerYAnchor);
  id v40 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v39);

  *(void *)(v34 + 40) = v40;
  specialized Array._endMutation()();
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v43, sel_activateConstraints_, v41);

  StepperButton.updateUI()();
  return v13;
}

void StepperButton.updateUI()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  char v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton];
  v19.receiver = v0;
  v19.super_class = ObjectType;
  objc_msgSend(v2, sel_setEnabled_, objc_msgSendSuper2(&v19, sel_isEnabled));
  v18.receiver = v0;
  v18.super_class = ObjectType;
  LODWORD(v2) = objc_msgSendSuper2(&v18, sel_isHighlighted);
  uint64_t v3 = self;
  char v4 = &selRef_tertiarySystemFillColor;
  if (!v2) {
    char v4 = &selRef_quaternarySystemFillColor;
  }
  id v5 = [v3 *v4];
  objc_msgSend(v0, sel_setBackgroundColor_, v5);

  id v6 = objc_msgSend(v0, sel_traitCollection);
  id v7 = objc_msgSend(v6, sel_userInterfaceStyle);

  uint64_t v8 = self;
  uint64_t v9 = v8;
  if (v7 == (id)2) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 2;
  }
  if (v7 == (id)2) {
    uint64_t v11 = &selRef_systemGrayColor;
  }
  else {
    uint64_t v11 = &selRef_systemGray3Color;
  }
  if (v7 == (id)2) {
    char v12 = &selRef_systemGray3Color;
  }
  else {
    char v12 = &selRef_systemGrayColor;
  }
  id v13 = [v8 *v11];
  id v14 = [v9 *v12];
  id v15 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit13StepperButton_imageView];
  v17.receiver = v0;
  v17.super_class = ObjectType;
  if (objc_msgSendSuper2(&v17, sel_isEnabled)) {
    id v16 = v13;
  }
  else {
    id v16 = v14;
  }
  objc_msgSend(v15, sel_setTintColor_, v16);
  objc_msgSend(v15, sel_setOverrideUserInterfaceStyle_, v10);
}

id @objc StepperButton.isSelected.getter(void *a1, uint64_t a2, SEL *a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v5, *a3);
}

void @objc StepperButton.isSelected.setter(void *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  v8.receiver = a1;
  v8.super_class = (Class)swift_getObjectType();
  id v6 = *a4;
  id v7 = v8.receiver;
  objc_msgSendSuper2(&v8, v6, a3);
  StepperButton.updateUI()();
}

uint64_t StepperButton.removeTarget(_:action:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton);
  outlined init with copy of Any?(a1, (uint64_t)v15);
  uint64_t v7 = v16;
  if (v16)
  {
    objc_super v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
    uint64_t v9 = *(void *)(v7 - 8);
    double v10 = MEMORY[0x270FA5388](v8);
    char v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v13 = 0;
  }
  objc_msgSend(v6, sel_removeTarget_action_forControlEvents_, v13, a2, a3);
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for StepperButton()
{
  return self;
}

void specialized StepperButton.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824E8]), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit13StepperButton_imageView;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit13StepperButton_imageConfiguration;
  *(void *)&v0[v3] = objc_msgSend(self, sel_configurationWithPointSize_weight_scale_, 7, 2, 19.0);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

BOOL static CanvasCalculateDocumentIndex.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

void CanvasCalculateDocumentIndex.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

BOOL static CanvasCalculateDocumentIndex.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

Swift::Int CanvasCalculateDocumentIndex.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance CanvasCalculateDocumentIndex(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance CanvasCalculateDocumentIndex(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance CanvasCalculateDocumentIndex(double *a1, double *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance CanvasCalculateDocumentIndex(double *a1, double *a2)
{
  return *a2 < *a1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CanvasCalculateDocumentIndex()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CanvasCalculateDocumentIndex()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL static CalculateDocumentExpressionSolvingBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void CalculateDocumentExpressionSolvingBehavior.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int CalculateDocumentExpressionSolvingBehavior.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CanvasCalculateDocument.document.getter()
{
  return 0;
}

uint64_t CanvasCalculateDocument.shouldAutosolveNewExpressions.getter()
{
  return 1;
}

uint64_t CanvasCalculateDocument.expression(withId:)()
{
  return 0;
}

uint64_t CanvasCalculateDocument.expression(for:)()
{
  return 0;
}

uint64_t CanvasCalculateDocument.graphableExpression(for:)@<X0>(uint64_t a1@<X8>)
{
  return CanvasCalculateDocument.graphableExpression(for:)(a1);
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  Swift::UInt64 v2 = type metadata accessor for GraphableExpression();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

unint64_t lazy protocol witness table accessor for type CanvasCalculateDocumentIndex and conformance CanvasCalculateDocumentIndex()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasCalculateDocumentIndex and conformance CanvasCalculateDocumentIndex;
  if (!lazy protocol witness table cache variable for type CanvasCalculateDocumentIndex and conformance CanvasCalculateDocumentIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasCalculateDocumentIndex and conformance CanvasCalculateDocumentIndex);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CalculateDocumentExpressionSolvingBehavior and conformance CalculateDocumentExpressionSolvingBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type CalculateDocumentExpressionSolvingBehavior and conformance CalculateDocumentExpressionSolvingBehavior;
  if (!lazy protocol witness table cache variable for type CalculateDocumentExpressionSolvingBehavior and conformance CalculateDocumentExpressionSolvingBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateDocumentExpressionSolvingBehavior and conformance CalculateDocumentExpressionSolvingBehavior);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CalculateDocumentExpressionSolvingBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C4702ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculateDocumentExpressionSolvingBehavior()
{
  return &type metadata for CalculateDocumentExpressionSolvingBehavior;
}

uint64_t dispatch thunk of CanvasCalculateDocument.document.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.shouldAutosolveNewExpressions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.insert(_:atIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.move(_:toIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.expression(withId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.expression(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.graphableExpression(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocument.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocument.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocument.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

void AnyCanvasElementView.canvas.getter()
{
}

uint64_t AnyCanvasElementView.isEditingCanvasElement.getter()
{
  Swift::UInt v1 = v0;
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v33);
  unsigned int v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v32 = (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v30 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  id v15 = (char *)&v30 - v14;
  uint64_t v16 = (void *)MEMORY[0x263F8EED0];
  objc_super v17 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0x88))(v13);
  if (v17)
  {
    objc_super v18 = v17;
    (*(void (**)(void))((*v16 & *v17) + 0x300))();

    objc_super v19 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v20 = v19(v15, 0, 1, v2);
  }
  else
  {
    objc_super v19 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v20 = v19(v15, 1, 1, v2);
  }
  (*(void (**)(uint64_t))((*v16 & *v1) + 0xE0))(v20);
  v19(v12, 0, 1, v2);
  uint64_t v21 = (uint64_t)&v6[*(int *)(v33 + 48)];
  outlined init with copy of CRKeyPath?((uint64_t)v15, (uint64_t)v6);
  outlined init with copy of CRKeyPath?((uint64_t)v12, v21);
  id v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v22((uint64_t)v6, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    int v23 = v22(v21, 1, v2);
    if (v23 == 1) {
      id v24 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
    }
    else {
      id v24 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    uint64_t v26 = v32;
    outlined init with copy of CRKeyPath?((uint64_t)v6, v32);
    if (v22(v21, 1, v2) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v26, v2);
      char v25 = 0;
      id v24 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    else
    {
      uint64_t v27 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v31, v21, v2);
      lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath();
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28(v27, v2);
      id v24 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v28((char *)v26, v2);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, v24);
  return v25 & 1;
}

id AnyCanvasElementView.isElementFirstResponder.getter()
{
  return objc_msgSend(v0, sel_isFirstResponder);
}

uint64_t AnyCanvasElementView.resizeHandles.getter()
{
  char v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
  if ((~v1 & 6) != 0)
  {
    if ((v1 & 2) == 0) {
      return MEMORY[0x263F8EE88];
    }
    uint64_t v2 = &outlined read-only object #1 of AnyCanvasElementView.resizeHandles.getter;
  }
  else
  {
    uint64_t v2 = &outlined read-only object #0 of AnyCanvasElementView.resizeHandles.getter;
  }
  return specialized Set.init<A>(_:)((uint64_t)v2);
}

double AnyCanvasElementView.subscript.getter()
{
  return 0.0;
}

double AnyCanvasElementView.selectionCoordinateSpace.getter@<D0>(_OWORD *a1@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x263F8EED0] & *v1) + 0x1A8))(v5);
  long long v3 = v5[1];
  *a1 = v5[0];
  a1[1] = v3;
  double result = *(double *)&v6;
  a1[2] = v6;
  return result;
}

void __swiftcall AnyCanvasElementView.boundsTransform()(CGAffineTransform *__return_ptr retstr)
{
  v12.origin.CGFloat x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x138))();
  CGFloat x = v12.origin.x;
  CGFloat y = v12.origin.y;
  CGFloat width = v12.size.width;
  CGFloat height = v12.size.height;
  CGFloat v7 = -CGRectGetMinX(v12);
  v13.origin.CGFloat x = x;
  v13.origin.CGFloat y = y;
  v13.size.CGFloat width = width;
  v13.size.CGFloat height = height;
  CGFloat MinY = CGRectGetMinY(v13);
  CGAffineTransformMakeTranslation(&v11, v7, -MinY);
  long long v9 = *(_OWORD *)&v11.c;
  long long v10 = *(_OWORD *)&v11.tx;
  *(_OWORD *)&retstr->CGFloat a = *(_OWORD *)&v11.a;
  *(_OWORD *)&retstr->CGFloat c = v9;
  *(_OWORD *)&retstr->tCGFloat x = v10;
}

void __swiftcall AnyCanvasElementView.paperBoundsTransform()(CGAffineTransform *__return_ptr retstr)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement;
  uint64_t v5 = MEMORY[0x210550400](v4);
  if (v5)
  {
    long long v6 = (void *)v5;
    (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x263F8EED0] & *v2) + 0x2A0))(v26);
    long long v22 = v26[1];
    long long v23 = v26[0];
    CGFloat v7 = v27;
    CGFloat v8 = v28;
    AnyCanvasElementView.paperBoundsTransform()(&v30);
    CGAffineTransformMakeScale(&t1, v30.a, v30.a);
    long long v9 = *(_OWORD *)&t1.a;
    long long v10 = *(_OWORD *)&t1.c;
    long long v11 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v23;
    *(_OWORD *)&t1.CGFloat c = v22;
    t1.tCGFloat x = v7;
    t1.tCGFloat y = v8;
    *(_OWORD *)&t2.CGFloat a = v9;
    *(_OWORD *)&t2.CGFloat c = v10;
    *(_OWORD *)&t2.tCGFloat x = v11;
    CGAffineTransformConcat(&v24, &t1, &t2);
    CGFloat a = v24.a;
    CGFloat b = v24.b;
    CGFloat c = v24.c;
    CGFloat d = v24.d;
    tCGFloat x = v24.tx;
    tCGFloat y = v24.ty;
  }
  else
  {
    objc_super v18 = (void *)MEMORY[0x210550400](v4);
    if (v18)
    {
    }
    else
    {
      objc_super v19 = (void *)MEMORY[0x263F8EED0];
      uint64_t v20 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x88))();
      if (v20)
      {
        uint64_t v21 = v20;
        (*(void (**)(_OWORD *__return_ptr))((*v19 & *v20) + 0x5D0))(v26);

        outlined init with take of CGAffineTransform?((uint64_t)v26, (uint64_t)&v30);
        if ((v31 & 1) == 0)
        {
          CGFloat a = v30.a;
          CGFloat b = v30.b;
          CGFloat c = v30.c;
          CGFloat d = v30.d;
          tCGFloat x = v30.tx;
          tCGFloat y = v30.ty;
          goto LABEL_6;
        }
      }
    }
    (*(void (**)(CGAffineTransform *__return_ptr))((*MEMORY[0x263F8EED0] & *v2) + 0x2A0))(&t1);
    CGFloat a = t1.a;
    CGFloat b = t1.b;
    CGFloat c = t1.c;
    CGFloat d = t1.d;
    tCGFloat x = t1.tx;
    tCGFloat y = t1.ty;
  }
LABEL_6:
  retstr->CGFloat a = a;
  retstr->CGFloat b = b;
  retstr->CGFloat c = c;
  retstr->CGFloat d = d;
  retstr->tCGFloat x = tx;
  retstr->tCGFloat y = ty;
}

Swift::Void __swiftcall AnyCanvasElementView.didBeginDrawing()()
{
  char v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
  if (v2)
  {
    id v3 = v2;
    (*(void (**)())((*v1 & *v2) + 0x5D8))();
  }
}

Swift::Void __swiftcall AnyCanvasElementView.didEndDrawing()()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
  if (v1)
  {
    id v2 = (id)v1;
    AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
  }
}

Swift::Bool __swiftcall AnyCanvasElementView.intersects(_:canvasBounds:)(__C::CGRect _, __C::CGRect canvasBounds)
{
  CGFloat height = _.size.height;
  CGFloat width = _.size.width;
  CGFloat y = _.origin.y;
  CGFloat x = _.origin.x;
  CGFloat v7 = (void *)MEMORY[0x210550400]((char *)v2 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, (__n128)_.origin, *(__n128 *)&_.origin.y, (__n128)_.size, *(__n128 *)&_.size.height, (__n128)canvasBounds.origin, *(__n128 *)&canvasBounds.origin.y, (__n128)canvasBounds.size, *(__n128 *)&canvasBounds.size.height);
  if (!v7)
  {
    objc_msgSend(v2, sel_bounds);
    CGFloat v12 = x;
    CGFloat v13 = y;
    double v14 = width;
    double v15 = height;
    return CGRectIntersectsRect(v25, *(CGRect *)&v12);
  }

  (*(void (**)(CGAffineTransform *__return_ptr))((*MEMORY[0x263F8EED0] & *v2) + 0x190))(&v21);
  CGFloat a = v21.a;
  CGFloat b = v21.b;
  CGFloat c = v21.c;
  CGFloat d = v21.d;
  CGAffineTransform v20 = v21;
  tCGFloat y = v21.ty;
  tCGFloat x = v21.tx;
  v22.origin.CGFloat x = 0.0;
  v22.origin.CGFloat y = 0.0;
  v22.size.CGFloat width = 1.0;
  v22.size.CGFloat height = 1.0;
  CGRect v23 = CGRectApplyAffineTransform(v22, &v20);
  v26.origin.CGFloat x = x;
  v26.origin.CGFloat y = y;
  v26.size.CGFloat width = width;
  v26.size.CGFloat height = height;
  if (CGRectIntersectsRect(v23, v26))
  {
    v20.CGFloat a = a;
    v20.CGFloat b = b;
    v20.CGFloat c = c;
    v20.CGFloat d = d;
    v20.tCGFloat x = tx;
    v20.tCGFloat y = ty;
    CGAffineTransformInvert(&v19, &v20);
    CGAffineTransform v20 = v19;
    v24.origin.CGFloat x = x;
    v24.origin.CGFloat y = y;
    v24.size.CGFloat width = width;
    v24.size.CGFloat height = height;
    CGRect v25 = CGRectApplyAffineTransform(v24, &v20);
    CGFloat v12 = 0.0;
    CGFloat v13 = 0.0;
    double v14 = 1.0;
    double v15 = 1.0;
    return CGRectIntersectsRect(v25, *(CGRect *)&v12);
  }
  return 0;
}

id AnyCanvasElementView.dragInteractionPreviewForLifting(item:session:)()
{
  id v1 = objc_allocWithZone(MEMORY[0x263F82CB8]);
  return objc_msgSend(v1, sel_initWithView_, v0);
}

void AnyCanvasElementView.identity.getter()
{
}

void AnyCanvasElementView.sharedCanvasElement.getter()
{
}

id AnyCanvasElementView.init(frame:canvas:parentCanvasElement:)(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v6[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging] = 0;
  v6[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isContextMenuInteractionVisible] = 0;
  v6[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDetectedFormField] = 0;
  v6[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_startsNewAutofillContext] = 0;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  v6[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected] = 0;
  v18.receiver = v6;
  v18.super_class = (Class)type metadata accessor for AnyCanvasElementView();
  id v13 = objc_msgSendSuper2(&v18, sel_initWithFrame_, a3, a4, a5, a6);
  id v14 = objc_msgSend(v13, sel_layer);
  id v15 = objc_msgSend(self, sel_blueColor);
  id v16 = objc_msgSend(v15, sel_CGColor);

  objc_msgSend(v14, sel_setBorderColor_, v16);
  return v13;
}

void AnyCanvasElementView.modelBounds.getter()
{
}

void AnyCanvasElementView.uneditedModelFrame.getter()
{
}

void AnyCanvasElementView.modelFrame.getter()
{
}

void AnyCanvasElementView.modelFrame.setter()
{
}

void AnyCanvasElementView.uneditedModelCoordinateSpace.getter()
{
}

void AnyCanvasElementView.modelCoordinateSpace.getter()
{
}

void AnyCanvasElementView.modelCoordinateSpace.setter()
{
}

void AnyCanvasElementView.uneditedModelHitTestPath.getter()
{
}

void AnyCanvasElementView.modelHitTestPath.getter()
{
}

void AnyCanvasElementView.flags.getter()
{
}

uint64_t AnyCanvasElementView.isSelected.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected);
}

uint64_t AnyCanvasElementView.isSelected.setter(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = result;
  return result;
}

Swift::Void __swiftcall AnyCanvasElementView.updateFrame()()
{
  CGFloat v1 = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
  CGFloat v3 = v2;
  CGFloat v5 = v4;
  CGFloat v7 = v6;
  CGFloat v8 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  double v9 = specialized static AnyCanvasElementView.convert(_:to:)(v8, v1, v3, v5, v7);
  double v11 = v10;
  double v13 = v12;
  double v15 = v14;

  objc_msgSend(v0, sel_setFrame_, v9, v11, v13, v15);
  objc_msgSend(v0, sel_setNeedsLayout);
}

id AnyCanvasElementView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnyCanvasElementView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AnyCanvasElementView()
{
  return self;
}

void @objc AnyCanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(void))
{
  id v9 = a3;
  id v10 = a4;
  swift_unknownObjectRetain();
  id v11 = a1;
  a6();

  swift_unknownObjectRelease();
}

void specialized AnyCanvasElementView.init(coder:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging] = 0;
  v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isContextMenuInteractionVisible] = 0;
  v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDetectedFormField] = 0;
  v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_startsNewAutofillContext] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double specialized static AnyCanvasElementView.convert(_:to:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  if (a1)
  {
    AnyCanvasElementView.paperBoundsTransform()(&v34);
    long long v31 = *(_OWORD *)&v34.a;
    long long v32 = *(_OWORD *)&v34.c;
    long long v30 = *(_OWORD *)&v34.tx;
    id v10 = objc_msgSend(a1, sel_window);
    double v11 = 1.0;
    double v12 = 1.0;
    if (v10)
    {
      double v13 = v10;
      id v14 = objc_msgSend(v10, sel_screen);

      objc_msgSend(v14, sel_scale);
      double v12 = v15;
    }
    id v16 = (void *)MEMORY[0x263F8EED0];
    objc_super v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x88))();
    if (v17)
    {
      objc_super v18 = v17;
      CGAffineTransform v19 = (void *)(*(uint64_t (**)(void))((*v16 & *v17) + 0x308))();

      if (v19)
      {
        objc_msgSend(v19, sel_zoomScale);
        double v11 = v20;
      }
    }
    long long v22 = v31;
    long long v21 = v32;
    long long v23 = v30;
  }
  else
  {
    long long v21 = xmmword_20C8356C0;
    long long v22 = xmmword_20C835600;
    long long v23 = 0uLL;
    double v11 = 1.0;
    double v12 = 1.0;
  }
  *(_OWORD *)&v33.CGFloat a = v22;
  *(_OWORD *)&v33.CGFloat c = v21;
  *(_OWORD *)&v33.tCGFloat x = v23;
  v35.origin.CGFloat x = a2;
  v35.origin.CGFloat y = a3;
  v35.size.CGFloat width = a4;
  v35.size.CGFloat height = a5;
  CGRect v36 = CGRectApplyAffineTransform(v35, &v33);
  v37.origin.CGFloat x = CGRect.rounded(scale:)(v11 * v12, v36.origin.x, v36.origin.y, v36.size.width, v36.size.height);
  CGFloat x = v37.origin.x;
  CGFloat y = v37.origin.y;
  CGFloat width = v37.size.width;
  CGFloat height = v37.size.height;
  double MinX = CGRectGetMinX(v37);
  v38.origin.CGFloat x = x;
  v38.origin.CGFloat y = y;
  v38.size.CGFloat width = width;
  v38.size.CGFloat height = height;
  CGRectGetMinY(v38);
  v39.origin.CGFloat x = x;
  v39.origin.CGFloat y = y;
  v39.size.CGFloat width = width;
  v39.size.CGFloat height = height;
  CGRectGetWidth(v39);
  v40.origin.CGFloat x = x;
  v40.origin.CGFloat y = y;
  v40.size.CGFloat width = width;
  v40.size.CGFloat height = height;
  CGRectGetHeight(v40);
  return MinX;
}

void specialized AnyCanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)()
{
  *((unsigned char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isContextMenuInteractionVisible) = 1;
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
  if (v1)
  {
    objc_super v2 = (void *)v1;
    CGFloat v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    double v4 = v3;

    if (v3)
    {
      v4[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = *((unsigned char *)v0
                                                                                        + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging);
      objc_msgSend(v4, sel_setHidden_);
    }
    else
    {
      __break(1u);
    }
  }
}

void specialized AnyCanvasElementView.contextMenuInteraction(_:willEndFor:animator:)()
{
  *((unsigned char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isContextMenuInteractionVisible) = 0;
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
  if (v1)
  {
    objc_super v2 = (void *)v1;
    CGFloat v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    double v4 = v3;

    if (v3)
    {
      v4[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = *((unsigned char *)v0
                                                                                        + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging);
      objc_msgSend(v4, sel_setHidden_);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t outlined init with take of CGAffineTransform?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CRKeyPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath()
{
  unint64_t result = lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath;
  if (!lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath)
  {
    type metadata accessor for CRKeyPath();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath);
  }
  return result;
}

double TextBox.frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t TextBox.frame.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*TextBox.frame.modify(void *a1))()
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t TextBox.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for TextBox.$frame : TextBox(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  CGFloat v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t TextBox.$frame.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*TextBox.$frame.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double TextBox.rotation.getter()
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for TextBox()
{
  uint64_t result = type metadata singleton initialization cache for TextBox;
  if (!type metadata singleton initialization cache for TextBox) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double key path getter for TextBox.rotation : TextBox@<D0>(double *a1@<X8>)
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for TextBox.rotation : TextBox()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t TextBox.rotation.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*TextBox.rotation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t TextBox.$rotation.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for TextBox.$rotation : TextBox(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for TextBox();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t TextBox.$rotation.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for TextBox();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*TextBox.$rotation.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for TextBox() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t TextBox.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TextBox() + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t TextBox.text.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TextBox() + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

double (*TextBox.text.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t TextBox.isFixedWidth.getter()
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for TextBox.isFixedWidth : TextBox@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for TextBox.isFixedWidth : TextBox()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t TextBox.isFixedWidth.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*TextBox.isFixedWidth.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t TextBox.$isFixedWidth.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for TextBox.$isFixedWidth : TextBox(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for TextBox();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t TextBox.$isFixedWidth.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for TextBox();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*TextBox.$isFixedWidth.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  void v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for TextBox() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t TextBox.additionalFields.getter()
{
  type metadata accessor for TextBox();
  return swift_bridgeObjectRetain();
}

uint64_t TextBox.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for TextBox() + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*TextBox.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static TextBox.fields.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_2676CB738;
  uint64_t v4 = qword_2676CB740;
  uint64_t v3 = unk_2676CB748;
  uint64_t v5 = qword_2676CB750;
  uint64_t v6 = qword_2676CB758;
  uint64_t v7 = qword_2676CB760;
  uint64_t v8 = qword_2676CB768;
  uint64_t v10 = qword_2676CB770;
  uint64_t v9 = *(void *)byte_2676CB778;
  uint64_t v11 = qword_2676CB780;
  uint64_t v12 = qword_2676CB788;
  *a1 = static TextBox.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t TextBox.init()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  CRRegister.init(wrappedValue:)();
  uint64_t v2 = type metadata accessor for TextBox();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a1 + *(int *)(v2 + 32)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t TextBox.minAppFormatVersion.getter()
{
  return 2;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance TextBox()
{
  return CRStruct_4.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance TextBox()
{
  return CRStruct_4.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance TextBox(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F170F0](a1, v2);
}

uint64_t protocol witness for static CRStruct_Base_4.fields.getter in conformance TextBox@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_2676CB738;
  uint64_t v4 = qword_2676CB740;
  uint64_t v3 = unk_2676CB748;
  uint64_t v5 = qword_2676CB750;
  uint64_t v6 = qword_2676CB758;
  uint64_t v7 = qword_2676CB760;
  uint64_t v8 = qword_2676CB768;
  uint64_t v10 = qword_2676CB770;
  uint64_t v9 = *(void *)byte_2676CB778;
  uint64_t v11 = qword_2676CB780;
  uint64_t v12 = qword_2676CB788;
  *a1 = static TextBox.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance TextBox(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17160](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.init() in conformance TextBox@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  CRRegister.init(wrappedValue:)();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a2 + *(int *)(a1 + 32)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance TextBox(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17100](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17128](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17158](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance TextBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17130](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17150](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17138](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17118](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17110](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance TextBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F170F8](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F170E0](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance TextBox()
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return CRStruct_4.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F170E8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  return MEMORY[0x270F17140](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance TextBox()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance TextBox()
{
  return CRDT.init(serializedData:)();
}

uint64_t TextBox.textResizeBehavior.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  uint64_t result = CRRegister.wrappedValue.getter();
  if (v5 == 1)
  {
    uint64_t v3 = qword_26C14CCF0;
  }
  else
  {
    uint64_t v4 = unk_26C14CD20;
    if ((unk_26C14CD20 & ~qword_26C14CD18) == 0) {
      uint64_t v4 = 0;
    }
    uint64_t v3 = v4 | qword_26C14CD18;
  }
  *a1 = v3;
  return result;
}

uint64_t protocol witness for ShapeTextBox.text.getter in conformance TextBox@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for ShapeTextBox.text.setter in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

unsigned char *protocol witness for ShapeTextBox.textResizeBehavior.setter in conformance TextBox(unsigned char *result)
{
  if ((*result & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
    return (unsigned char *)CRRegister.wrappedValue.setter();
  }
  return result;
}

uint64_t protocol witness for ShapeTextBox.isFixedWidth.getter in conformance TextBox()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  CRRegister.wrappedValue.getter();
  return v1;
}

void protocol witness for ShapeTextBox.textContentType.getter in conformance TextBox(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for ShapeTextBox.emptyStringAttributes.getter in conformance TextBox@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for ShapeTextBox.emptyStringAttributes.setter in conformance TextBox(uint64_t a1)
{
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

double protocol witness for ShapeTextBox.opacity.getter in conformance TextBox()
{
  return 1.0;
}

uint64_t TextBox.shared(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  double v3 = MEMORY[0x270FA5388](v2);
  v7[15] = 3;
  (*(void (**)(unsigned char *, uint64_t, double))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t TextBox.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRAsset();
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t TextBox.indexableTextContent<A>(in:)()
{
  return specialized TextBox.indexableTextContent<A>(in:)();
}

uint64_t TextBox.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = v4;
  outlined init with take of CGRect?(a4 + 24, v5 + 16);
  return MEMORY[0x270FA2498](TextBox.render<A>(in:id:capsule:options:), 0, 0);
}

uint64_t TextBox.render<A>(in:id:capsule:options:)()
{
  unsigned __int8 v1 = (CGContext *)v0[7];
  uint64_t v2 = v0[8];
  double v3 = specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(v2, (uint64_t)(v0 + 2));
  specialized static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(v2, v1, v3, v4, v5, v6);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

void specialized static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(uint64_t a1, CGContext *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGContextRef v65 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  *(void *)&long long v64 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v16 = (char *)&v57 - v15;
  uint64_t v17 = a1 + *(int *)(type metadata accessor for Shape() + 52);
  *(void *)&long long v63 = *(void *)(v12 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v63)(v16, v17, v11);
  objc_super v18 = (void *)CRAttributedString.attributedString.getter();
  id v19 = objc_msgSend(v18, sel_string);

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  if (v20) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v22 == 0xE000000000000000;
  }
  if (v23)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }
  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    if ((v24 & 1) == 0)
    {
      CGRect v25 = v65;
      CGContextSaveGState(v65);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.value.getter();
      CGFloat a = t1.a;
      v69.origin.CGFloat x = a3;
      v69.origin.CGFloat y = a4;
      v69.size.CGFloat width = a5;
      v69.size.CGFloat height = a6;
      double MidX = CGRectGetMidX(v69);
      v70.origin.CGFloat x = a3;
      v70.origin.CGFloat y = a4;
      v70.size.CGFloat width = a5;
      v70.size.CGFloat height = a6;
      double MidY = CGRectGetMidY(v70);
      CGAffineTransformMakeRotation(&t1, a);
      long long v58 = *(_OWORD *)&t1.a;
      long long v57 = *(_OWORD *)&t1.c;
      CGFloat v29 = -MidX;
      tCGFloat x = t1.tx;
      tCGFloat y = t1.ty;
      CGAffineTransformMakeTranslation(&t1, v29, -MidY);
      CGFloat v32 = t1.a;
      CGFloat b = t1.b;
      CGFloat v62 = a4;
      CGFloat v61 = a3;
      CGFloat c = t1.c;
      CGFloat d = t1.d;
      double v60 = a6;
      CGFloat v59 = a5;
      CGFloat v36 = t1.tx;
      CGFloat v37 = t1.ty;
      *(_OWORD *)&t2.CGFloat a = v58;
      *(_OWORD *)&t2.CGFloat c = v57;
      t2.tCGFloat x = tx;
      t2.tCGFloat y = ty;
      CGAffineTransformConcat(&v66, &t1, &t2);
      long long v58 = *(_OWORD *)&v66.a;
      long long v57 = *(_OWORD *)&v66.c;
      CGFloat v38 = v66.tx;
      CGFloat v39 = v66.ty;
      t1.CGFloat a = v32;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tCGFloat x = v36;
      t1.tCGFloat y = v37;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.CGFloat a = v58;
      *(_OWORD *)&t1.CGFloat c = v57;
      t1.tCGFloat x = v38;
      t1.tCGFloat y = v39;
      CGAffineTransformConcat(&v66, &t1, &t2);
      CGAffineTransform t1 = v66;
      CGRect v40 = v25;
      CGContextConcatCTM(v25, &t1);
      UIGraphicsPushContext(v25);
      id v41 = objc_allocWithZone(MEMORY[0x263F81680]);
      id v42 = objc_msgSend(v41, sel_initWithSize_, v59, v60);
      double v60 = *(double *)&v42;
      uint64_t v43 = v64;
      ((void (*)(void, uint64_t, uint64_t))v63)(v64, v17, v11);
      id v44 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
      id v45 = CRTextStorage.init(_:)(v43);
      id v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F816B8]), sel_init);
      id v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81688]), sel_init);
      objc_msgSend(v47, sel_setTextStorage_, v45);
      objc_msgSend(v47, sel_addTextLayoutManager_, v46);
      objc_msgSend(v46, sel_setTextContainer_, v42);
      id v48 = objc_msgSend(v46, sel_documentRange);
      id v49 = objc_msgSend(v48, sel_location);

      CGAffineTransformMakeTranslation(&t1, v61, v62);
      long long v64 = *(_OWORD *)&t1.a;
      long long v63 = *(_OWORD *)&t1.c;
      long long v50 = *(_OWORD *)&t1.tx;
      uint64_t v51 = swift_allocObject();
      long long v52 = v63;
      *(_OWORD *)(v51 + 16) = v64;
      *(_OWORD *)(v51 + 32) = v52;
      *(_OWORD *)(v51 + 48) = v50;
      *(void *)(v51 + 64) = v40;
      uint64_t v53 = swift_allocObject();
      *(void *)(v53 + 16) = partial apply for closure #1 in draw #1 <A>() in static ShapeTextBoxRendering.render<A>(_:in:renderFrame:);
      *(void *)(v53 + 24) = v51;
      *(void *)&t1.tCGFloat x = partial apply for thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
      *(void *)&t1.tCGFloat y = v53;
      *(void *)&t1.CGFloat a = MEMORY[0x263EF8330];
      *(void *)&t1.CGFloat b = 1107296256;
      *(void *)&t1.CGFloat c = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
      *(void *)&t1.CGFloat d = &block_descriptor_30;
      id v54 = _Block_copy(&t1);
      swift_unknownObjectRetain();
      uint64_t v55 = v40;
      swift_retain();
      swift_release();
      id v56 = objc_msgSend(v46, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, v49, 4, v54);

      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();

      _Block_release(v54);
      LOBYTE(v45) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v45)
      {
        __break(1u);
      }
      else
      {
        UIGraphicsPopContext();
        CGContextRestoreGState(v55);
      }
    }
  }
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  CGContext *v25;
  CGFloat a;
  double MidX;
  double MidY;
  CGFloat v29;
  CGFloat tx;
  CGFloat ty;
  CGFloat v32;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGContext *v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  long long v50;
  uint64_t v51;
  long long v52;
  uint64_t v53;
  void *v54;
  CGContext *v55;
  id v56;
  long long v57;
  long long v58;
  CGFloat v59;
  double v60;
  CGFloat v61;
  CGFloat v62;
  long long v63;
  long long v64;
  CGContextRef v65;
  CGAffineTransform v66;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v69;
  CGRect v70;

  CGContextRef v65 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  *(void *)&long long v64 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v16 = (char *)&v57 - v15;
  uint64_t v17 = a1 + *(int *)(type metadata accessor for TextBox() + 24);
  *(void *)&long long v63 = *(void *)(v12 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v63)(v16, v17, v11);
  objc_super v18 = (void *)CRAttributedString.attributedString.getter();
  id v19 = objc_msgSend(v18, sel_string);

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  if (v20) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v22 == 0xE000000000000000;
  }
  if (v23)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }
  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    if ((v24 & 1) == 0)
    {
      CGRect v25 = v65;
      CGContextSaveGState(v65);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.wrappedValue.getter();
      CGFloat a = t1.a;
      v69.origin.CGFloat x = a3;
      v69.origin.CGFloat y = a4;
      v69.size.CGFloat width = a5;
      v69.size.CGFloat height = a6;
      double MidX = CGRectGetMidX(v69);
      v70.origin.CGFloat x = a3;
      v70.origin.CGFloat y = a4;
      v70.size.CGFloat width = a5;
      v70.size.CGFloat height = a6;
      double MidY = CGRectGetMidY(v70);
      CGAffineTransformMakeRotation(&t1, a);
      long long v58 = *(_OWORD *)&t1.a;
      long long v57 = *(_OWORD *)&t1.c;
      CGFloat v29 = -MidX;
      tCGFloat x = t1.tx;
      tCGFloat y = t1.ty;
      CGAffineTransformMakeTranslation(&t1, v29, -MidY);
      CGFloat v32 = t1.a;
      CGFloat b = t1.b;
      CGFloat v62 = a4;
      CGFloat v61 = a3;
      CGFloat c = t1.c;
      CGFloat d = t1.d;
      double v60 = a6;
      CGFloat v59 = a5;
      CGFloat v36 = t1.tx;
      CGFloat v37 = t1.ty;
      *(_OWORD *)&t2.CGFloat a = v58;
      *(_OWORD *)&t2.CGFloat c = v57;
      t2.tCGFloat x = tx;
      t2.tCGFloat y = ty;
      CGAffineTransformConcat(&v66, &t1, &t2);
      long long v58 = *(_OWORD *)&v66.a;
      long long v57 = *(_OWORD *)&v66.c;
      CGFloat v38 = v66.tx;
      CGFloat v39 = v66.ty;
      t1.CGFloat a = v32;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tCGFloat x = v36;
      t1.tCGFloat y = v37;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.CGFloat a = v58;
      *(_OWORD *)&t1.CGFloat c = v57;
      t1.tCGFloat x = v38;
      t1.tCGFloat y = v39;
      CGAffineTransformConcat(&v66, &t1, &t2);
      CGAffineTransform t1 = v66;
      CGRect v40 = v25;
      CGContextConcatCTM(v25, &t1);
      UIGraphicsPushContext(v25);
      id v41 = objc_allocWithZone(MEMORY[0x263F81680]);
      id v42 = objc_msgSend(v41, sel_initWithSize_, v59, v60);
      double v60 = *(double *)&v42;
      uint64_t v43 = v64;
      ((void (*)(void, uint64_t, uint64_t))v63)(v64, v17, v11);
      id v44 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
      id v45 = CRTextStorage.init(_:)(v43);
      id v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F816B8]), sel_init);
      id v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81688]), sel_init);
      objc_msgSend(v47, sel_setTextStorage_, v45);
      objc_msgSend(v47, sel_addTextLayoutManager_, v46);
      objc_msgSend(v46, sel_setTextContainer_, v42);
      id v48 = objc_msgSend(v46, sel_documentRange);
      id v49 = objc_msgSend(v48, sel_location);

      CGAffineTransformMakeTranslation(&t1, v61, v62);
      long long v64 = *(_OWORD *)&t1.a;
      long long v63 = *(_OWORD *)&t1.c;
      long long v50 = *(_OWORD *)&t1.tx;
      uint64_t v51 = swift_allocObject();
      long long v52 = v63;
      *(_OWORD *)(v51 + 16) = v64;
      *(_OWORD *)(v51 + 32) = v52;
      *(_OWORD *)(v51 + 48) = v50;
      *(void *)(v51 + 64) = v40;
      uint64_t v53 = swift_allocObject();
      *(void *)(v53 + 16) = closure #1 in draw #1 <A>() in static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)partial apply;
      *(void *)(v53 + 24) = v51;
      *(void *)&t1.tCGFloat x = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
      *(void *)&t1.tCGFloat y = v53;
      *(void *)&t1.CGFloat a = MEMORY[0x263EF8330];
      *(void *)&t1.CGFloat b = 1107296256;
      *(void *)&t1.CGFloat c = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
      *(void *)&t1.CGFloat d = &block_descriptor_30_0;
      id v54 = _Block_copy(&t1);
      swift_unknownObjectRetain();
      uint64_t v55 = v40;
      swift_retain();
      swift_release();
      id v56 = objc_msgSend(v46, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, v49, 4, v54);

      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();

      _Block_release(v54);
      LOBYTE(v45) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v45)
      {
        __break(1u);
      }
      else
      {
        UIGraphicsPopContext();
        CGContextRestoreGState(v55);
      }
    }
  }
}

double specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v31 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double x = v32.origin.x;
  CGFloat y = v32.origin.y;
  CGFloat width = v32.size.width;
  CGFloat height = v32.size.height;
  uint64_t v15 = type metadata accessor for Shape();
  id v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v10, a1 + *(int *)(v15 + 52), v4);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  CGFloat v17 = v32.origin.x;
  CRRegister.wrappedValue.getter();
  char x_low = LOBYTE(v32.origin.x);
  outlined init with take of CGRect?(a2, (uint64_t)&v32);
  if ((v33 & 1) == 0)
  {
    double v19 = CGRectGetWidth(v32) + -48.0;
    if (x_low) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  double v19 = 1.79769313e308;
  if ((x_low & 1) == 0)
  {
LABEL_5:
    v34.origin.double x = x;
    v34.origin.CGFloat y = y;
    v34.size.CGFloat width = width;
    v34.size.CGFloat height = height;
    double v19 = CGRectGetWidth(v34);
  }
LABEL_6:
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81680]), sel_initWithSize_, v19, 1.79769313e308);
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81648]), sel_init);
  objc_msgSend(v21, sel_addTextContainer_, v20);
  v16(v7, (uint64_t)v10, v4);
  id v22 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
  id v23 = CRTextStorage.init(_:)((uint64_t)v7);
  objc_msgSend(v23, sel_addLayoutManager_, v21);
  objc_msgSend(v21, sel_usedRectForTextContainer_, v20);
  double v26 = v25;
  if (v17 == 0.0)
  {
    v35.origin.double x = x;
    v35.origin.CGFloat y = y;
    v35.size.CGFloat width = width;
    v35.size.CGFloat height = height;
    double v28 = CGRectGetMidX(v35) - v26 * 0.5;
    v36.origin.double x = x;
    v36.origin.CGFloat y = y;
    v36.size.CGFloat width = width;
    v36.size.CGFloat height = height;
    CGRectGetMidY(v36);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  else if (LOBYTE(v17))
  {
    v37.origin.double x = x;
    v37.origin.CGFloat y = y;
    v37.size.CGFloat width = width;
    v37.size.CGFloat height = height;
    double MidX = CGRectGetMidX(v37);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    return MidX + v26 * -0.5;
  }
  else
  {
    double v27 = v24;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);

    return x + v27;
  }
  return v28;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  CGFloat y;
  double x;
  CGFloat height;
  CGFloat width;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  int x_low;
  double v20;
  id v21;
  id v22;
  id v23;
  id v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double MidX;
  uint64_t v32;
  CGRect v33;
  char v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v32 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double x = v33.origin.x;
  CGFloat y = v33.origin.y;
  CGFloat width = v33.size.width;
  CGFloat height = v33.size.height;
  uint64_t v15 = type metadata accessor for TextBox();
  id v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v10, a1 + *(int *)(v15 + 24), v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  CRRegister.wrappedValue.getter();
  if (LOBYTE(v33.origin.x) == 1)
  {
    CGFloat v17 = qword_26C14CCF0;
  }
  else
  {
    objc_super v18 = unk_26C14CD20;
    if ((unk_26C14CD20 & ~qword_26C14CD18) == 0) {
      objc_super v18 = 0;
    }
    CGFloat v17 = v18 | qword_26C14CD18;
  }
  CRRegister.wrappedValue.getter();
  char x_low = LOBYTE(v33.origin.x);
  outlined init with take of CGRect?(a2, (uint64_t)&v33);
  if ((v34 & 1) == 0)
  {
    id v20 = CGRectGetWidth(v33) + -48.0;
    if (!x_low) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  id v20 = 1.79769313e308;
  if (x_low)
  {
LABEL_10:
    v35.origin.double x = x;
    v35.origin.CGFloat y = y;
    v35.size.CGFloat width = width;
    v35.size.CGFloat height = height;
    id v20 = CGRectGetWidth(v35);
  }
LABEL_11:
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81680]), sel_initWithSize_, v20, 1.79769313e308);
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81648]), sel_init);
  objc_msgSend(v22, sel_addTextContainer_, v21);
  v16(v7, (uint64_t)v10, v4);
  id v23 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
  double v24 = CRTextStorage.init(_:)((uint64_t)v7);
  objc_msgSend(v24, sel_addLayoutManager_, v22);
  objc_msgSend(v22, sel_usedRectForTextContainer_, v21);
  double v27 = v26;
  if (v17)
  {
    if (v17)
    {
      v38.origin.double x = x;
      v38.origin.CGFloat y = y;
      v38.size.CGFloat width = width;
      v38.size.CGFloat height = height;
      double MidX = CGRectGetMidX(v38);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      return MidX + v27 * -0.5;
    }
    else
    {
      double v28 = v25;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);

      return x + v28;
    }
  }
  else
  {
    v36.origin.double x = x;
    v36.origin.CGFloat y = y;
    v36.size.CGFloat width = width;
    v36.size.CGFloat height = height;
    CGFloat v29 = CGRectGetMidX(v36) - v27 * 0.5;
    v37.origin.double x = x;
    v37.origin.CGFloat y = y;
    v37.size.CGFloat width = width;
    v37.size.CGFloat height = height;
    CGRectGetMidY(v37);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  return v29;
}

__C::CGRect __swiftcall TextBox.renderFrame(in:)(__C::CGRect_optional *in)
{
  double v2 = specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(v1, (uint64_t)in);
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  CGFloat v28 = v4 - v8 * 0.0;
  CGFloat v29 = v2 - v6 * 0.0;
  v33.origin.double x = v2;
  v33.origin.CGFloat y = v4;
  v33.size.CGFloat width = v6;
  CGFloat v26 = v6;
  CGFloat v27 = v8;
  v33.size.CGFloat height = v8;
  double MidX = CGRectGetMidX(v33);
  v34.origin.double x = v2;
  v34.origin.CGFloat y = v4;
  v34.size.CGFloat width = v6;
  v34.size.CGFloat height = v8;
  double MidY = CGRectGetMidY(v34);
  CGAffineTransformMakeRotation(&t1, t1.a);
  long long v22 = *(_OWORD *)&t1.c;
  long long v24 = *(_OWORD *)&t1.a;
  CGFloat v11 = -MidY;
  tdouble x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v11);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v18 = t1.tx;
  CGFloat v19 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v24;
  *(_OWORD *)&t2.CGFloat c = v22;
  t2.tdouble x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v30, &t1, &t2);
  long long v23 = *(_OWORD *)&v30.c;
  long long v25 = *(_OWORD *)&v30.a;
  CGFloat v20 = v30.tx;
  CGFloat v21 = v30.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tdouble x = v18;
  t1.tCGFloat y = v19;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v25;
  *(_OWORD *)&t1.CGFloat c = v23;
  t1.tdouble x = v20;
  t1.tCGFloat y = v21;
  CGAffineTransformConcat(&v30, &t1, &t2);
  t1.CGFloat a = v26;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = v27;
  t1.tdouble x = v29;
  t1.tCGFloat y = v28;
  CGAffineTransform t2 = v30;
  CGAffineTransformConcat(&v30, &t1, &t2);
  CGAffineTransform t1 = v30;
  v35.origin.double x = 0.0;
  v35.origin.CGFloat y = 0.0;
  v35.size.CGFloat width = 1.0;
  v35.size.CGFloat height = 1.0;
  return (__C::CGRect)CGRectApplyAffineTransform(v35, &t1);
}

Swift::Void __swiftcall TextBox.apply(_:)(CGAffineTransform *a1)
{
  long long v4 = *(_OWORD *)&a1->c;
  long long v5 = *(_OWORD *)&a1->a;
  tdouble x = a1->tx;
  tCGFloat y = a1->ty;
  specialized CanvasElement.coordinateSpace.getter(&v8);
  CGAffineTransform t1 = v8;
  *(_OWORD *)&t2.CGFloat a = v5;
  *(_OWORD *)&t2.CGFloat c = v4;
  t2.tdouble x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v6, &t1, &t2);
  CGAffineTransform t1 = v6;
  specialized CanvasElement.coordinateSpace.setter((uint64_t)&t1);
  type metadata accessor for TextBox();
  CRAttributedString<>.apply(_:)(&a1->a);
}

void TextBox.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3, __C::CGRect_optional *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v78 = a5;
  uint64_t v79 = a7;
  CGAffineTransform v66 = (__C::CGRect_optional *)a2;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v15 - 8);
  CGFloat v17 = &v61[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v80 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  uint64_t v76 = &v61[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v65 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  CGFloat v21 = &v61[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v64 = *a1;
  uint64_t v75 = *a6;
  uint64_t v74 = a6[1];
  uint64_t v73 = a6[2];
  uint64_t v72 = a6[3];
  uint64_t v71 = a6[4];
  uint64_t v70 = a6[5];
  uint64_t v69 = a6[6];
  uint64_t v68 = a6[7];
  uint64_t v67 = a6[8];
  int v22 = *((unsigned __int8 *)a6 + 74);
  int v23 = *((unsigned __int16 *)a6 + 36);
  type metadata accessor for CanvasElementPDFAnnotation();
  uint64_t v24 = swift_dynamicCastClass();
  if (v24)
  {
    long long v25 = (void *)v24;
    uint64_t v63 = a8;
    int v62 = v23 | (v22 << 16);
    *(unsigned char *)(v24 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 2;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
    id v29 = a3;
    CGAffineTransform v30 = (void *)MEMORY[0x21054D080](v26, v28);
    swift_bridgeObjectRelease();
    objc_msgSend(v25, sel_setType_, v30);

    __C::CGRect v84 = TextBox.renderFrame(in:)(a4);
    CGFloat x = v84.origin.x;
    double y = v84.origin.y;
    CGFloat width = v84.size.width;
    CGFloat height = v84.size.height;
    id v35 = objc_msgSend(v25, sel_page);
    uint64_t v36 = v9;
    if (v35)
    {
      CGRect v37 = v35;
      objc_msgSend(v35, sel_boundsForBox_, 0);
      double v39 = v38;
      double v41 = v40;

      v85.origin.CGFloat x = x;
      v85.origin.double y = y;
      v85.size.CGFloat width = width;
      v85.size.CGFloat height = height;
      CGFloat MinX = CGRectGetMinX(v85);
      v86.origin.CGFloat x = x;
      v86.origin.double y = y;
      v86.size.CGFloat width = width;
      v86.size.CGFloat height = height;
      double v43 = v41 + v39 + v39 - CGRectGetMaxY(v86);
      v87.origin.CGFloat x = x;
      v87.origin.double y = y;
      v87.size.CGFloat width = width;
      v87.size.CGFloat height = height;
      CGFloat v44 = CGRectGetWidth(v87);
      v88.origin.CGFloat x = x;
      v88.origin.double y = y;
      v88.size.CGFloat width = width;
      v88.size.CGFloat height = height;
      CGFloat height = CGRectGetHeight(v88);
      CGFloat width = v44;
      CGFloat x = MinX;
      double y = v43;
    }
    uint64_t v45 = v80;
    id v46 = v29;
    v89.origin.CGFloat x = x;
    v89.origin.double y = y;
    v89.size.CGFloat width = width;
    v89.size.CGFloat height = height;
    CGRect v90 = CGRectIntegral(v89);
    objc_msgSend(v25, sel_setBounds_, v90.origin.x, v90.origin.y, v90.size.width, v90.size.height);

    id v47 = v46;
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v21, v65);
    objc_msgSend(v25, sel_setModificationDate_, isa);

    outlined init with copy of SharedTagged_9<TaggedCanvasElement>?((uint64_t)v66, (uint64_t)v17);
    uint64_t v49 = v77;
    int v50 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v45 + 48))(v17, 1, v77);
    uint64_t v51 = v63;
    if (v50 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      uint64_t v53 = v78;
      uint64_t v52 = v79;
LABEL_12:
      v81[0] = v75;
      v81[1] = v74;
      v81[2] = v73;
      v81[3] = v72;
      v81[4] = v71;
      v81[5] = v70;
      v81[6] = v69;
      v81[7] = v68;
      v81[8] = v67;
      __int16 v82 = v62;
      char v83 = BYTE2(v62);
      uint64_t v60 = type metadata accessor for TextBox();
      CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)((uint64_t)a4, v36, v53, (uint64_t)v81, v52, v60, v51, (uint64_t)&protocol witness table for TextBox);

      return;
    }
    CGAffineTransform v66 = a4;
    uint64_t v80 = v9;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v45 + 32))(v76, v17, v49);
    unint64_t v54 = v64;
    unint64_t v55 = v64;
    uint64_t v53 = v78;
    if (v64 >> 62)
    {
      if (v64 >> 62 != 1)
      {
        (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v76, v49);
        uint64_t v52 = v79;
        goto LABEL_11;
      }
      unint64_t v55 = v64 & 0x3FFFFFFFFFFFFFFFLL;
    }
    outlined copy of PaperDocument.PDFDocumentUse(v64);
    uint64_t v56 = type metadata accessor for TextBox();
    uint64_t v57 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
    long long v58 = (void *)v55;
    CGFloat v59 = v76;
    uint64_t v52 = v79;
    specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(v58, (uint64_t)v76, 1, v53, v56, v79, v57, (uint64_t)&protocol witness table for TextBox, v51);
    outlined consume of PaperDocument.PDFDocumentUse(v54);
    (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v59, v49);
LABEL_11:
    uint64_t v36 = v80;
    a4 = v66;
    goto LABEL_12;
  }
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance TextBox(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  double v3 = MEMORY[0x270FA5388](v2);
  v7[15] = 3;
  (*(void (**)(unsigned char *, uint64_t, double))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance TextBox()
{
  return specialized TextBox.indexableTextContent<A>(in:)();
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance TextBox(double *a1)
{
  long long v5 = *((_OWORD *)a1 + 1);
  long long v6 = *(_OWORD *)a1;
  CGFloat v2 = a1[4];
  CGFloat v3 = a1[5];
  specialized CanvasElement.coordinateSpace.getter(&v9);
  CGAffineTransform t1 = v9;
  *(_OWORD *)&t2.CGFloat a = v6;
  *(_OWORD *)&t2.CGFloat c = v5;
  t2.tCGFloat x = v2;
  t2.tdouble y = v3;
  CGAffineTransformConcat(&v7, &t1, &t2);
  CGAffineTransform t1 = v7;
  specialized CanvasElement.coordinateSpace.setter((uint64_t)&t1);
  return CRAttributedString<>.apply(_:)(a1);
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance TextBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = v4;
  outlined init with take of CGRect?(a4 + 24, v5 + 16);
  return MEMORY[0x270FA2498](protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance TextBox, 0, 0);
}

uint64_t specialized TextBox.indexableTextContent<A>(in:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_20C832C20;
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v1 = (void *)CRAttributedString.attributedString.getter();
  id v2 = objc_msgSend(v1, sel_string);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v5;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v5;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t outlined init with copy of SharedTagged_9<TaggedCanvasElement>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for CRStruct_Base_4 in TextBox()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
}

uint64_t base witness table accessor for CRStruct_Base in TextBox()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
}

uint64_t associated type witness table accessor for CRStruct_Base_4.Type_3 : CRDT in TextBox()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
}

uint64_t associated type witness table accessor for CRStruct_Base_4.Type_4 : CRDT in TextBox()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Bool> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
}

uint64_t base witness table accessor for CRDT in TextBox()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
}

uint64_t base witness table accessor for CRMergeable in TextBox()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
}

uint64_t base witness table accessor for CRType in TextBox()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in TextBox()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_4<TextBox> and conformance CRStructMergeableDelta_4<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_4<TextBox>);
}

uint64_t base witness table accessor for CRCodable in TextBox()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_3(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
}

uint64_t sub_20C476768()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C4767AC()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C476808()
{
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for TextBox(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    CGAffineTransform v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[7];
    CGFloat v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TextBox(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextBox(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextBox(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TextBox(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for TextBox(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C477148);
}

uint64_t sub_20C477148(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_10:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_9:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_10;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_9;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_9;
  }
  unint64_t v17 = *(void *)(a1 + a3[8]);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for TextBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C477318);
}

uint64_t sub_20C477318(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Bool>);
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(void *)(a1 + a4[8]) = (a2 - 1);
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = a4[7];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for TextBox()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    _s9Coherence10CRRegisterVy12CoreGraphics7CGFloatVAfA7CRValue8PaperKityHCg_GMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], MEMORY[0x263F32C50]);
    if (v1 <= 0x3F)
    {
      _s9Coherence10CRRegisterVy12CoreGraphics7CGFloatVAfA7CRValue8PaperKityHCg_GMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for CRAttributedString<TextAttributeScope>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope, (uint64_t)&type metadata for TextAttributeScope, MEMORY[0x263F32EE8]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<Bool>();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void _s9Coherence10CRRegisterVy12CoreGraphics7CGFloatVAfA7CRValue8PaperKityHCg_GMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for CRRegister<Bool>()
{
  if (!lazy cache variable for type metadata for CRRegister<Bool>)
  {
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Bool>);
    }
  }
}

uint64_t sub_20C477754()
{
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #1 in draw #1 <A>() in static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(void *a1)
{
  return closure #1 in draw #1 <A>() in static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(a1, (double *)(v1 + 16), *(void *)(v1 + 64));
}

uint64_t sub_20C477798()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1)
{
  return thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

uint64_t sub_20C4777C8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t initializeWithCopy for MagicPaperUsageScratchToDeleteEvent(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for MagicPaperUsageScratchToDeleteEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for MagicPaperUsageScratchToDeleteEvent(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for MagicPaperUsageScratchToDeleteEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for MagicPaperUsageScratchToDeleteEvent()
{
  return &type metadata for MagicPaperUsageScratchToDeleteEvent;
}

unint64_t MagicPaperUsageScratchToDeleteEvent.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 7:
      unint64_t result = 1868852853;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t MagicPaperUsageScratchToDeleteEvent.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 7:
      unint64_t result = 1868852853;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MagicPaperUsageScratchToDeleteEvent.ContentType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized MagicPaperUsageScratchToDeleteEvent.ContentType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MagicPaperUsageScratchToDeleteEvent.ContentType()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = MagicPaperUsageScratchToDeleteEvent.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == MagicPaperUsageScratchToDeleteEvent.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MagicPaperUsageScratchToDeleteEvent.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys()
{
  MagicPaperUsageScratchToDeleteEvent.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MagicPaperUsageScratchToDeleteEvent.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageScratchToDeleteEvent.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MagicPaperUsageScratchToDeleteEvent.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys()
{
  return MagicPaperUsageScratchToDeleteEvent.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageScratchToDeleteEvent.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Void __swiftcall MagicPaperUsageScratchToDeleteEvent.finalize()()
{
  if ((*(unsigned char *)(v0 + 73) & 1) == 0)
  {
    uint64_t v1 = v0;
    unint64_t v2 = (void *)MEMORY[0x210550400](v0 + 80);
    id v3 = objc_msgSend(self, sel_activePencil);
    unsigned __int8 v4 = objc_msgSend(v3, sel_isConnected);

    *(unsigned char *)(v1 + 1) = v4;
    static Locale.preferredLanguages.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v5 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 8) = v5;
    *(void *)(v1 + 16) = v7;
    if (v2)
    {
      char v8 = v2;
      specialized MagicPaperUsageAnalyticsEvent.countGroups(in:)(v8);
    }
    *(unsigned char *)(v1 + 73) = 1;
  }
}

uint64_t MagicPaperUsageScratchToDeleteEvent.encode(to:)(void *a1)
{
  id v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MagicPaperUsageScratchToDeleteEvent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v10[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[8] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[7] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[6] = *v3;
    v10[5] = 9;
    lazy protocol witness table accessor for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t protocol witness for static AnalyticsEvent.eventName.getter in conformance MagicPaperUsageScratchToDeleteEvent()
{
  return 0xD000000000000029;
}

uint64_t protocol witness for AnalyticsEvent.isFinalized.getter in conformance MagicPaperUsageScratchToDeleteEvent()
{
  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t protocol witness for AnalyticsEvent.undoEvent() in conformance MagicPaperUsageScratchToDeleteEvent@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 72) == 1)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 1;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    return result;
  }
  uint64_t result = outlined init with copy of MagicPaperUsageScratchToDeleteEvent(v1, a1);
  *(_WORD *)(a1 + 72) = 1;
  uint64_t v4 = *(void *)(v1 + 56);
  BOOL v5 = __OFSUB__(0, v4);
  uint64_t v6 = -v4;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 56) = v6;
    uint64_t v7 = *(void *)(v1 + 64);
    BOOL v5 = __OFSUB__(0, v7);
    uint64_t v8 = -v7;
    if (!v5)
    {
      *(void *)(a1 + 64) = v8;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MagicPaperUsageScratchToDeleteEvent(void *a1)
{
  return MagicPaperUsageScratchToDeleteEvent.encode(to:)(a1);
}

unint64_t instantiation function for generic protocol witness table for MagicPaperUsageScratchToDeleteEvent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MagicPaperUsageScratchToDeleteEvent and conformance MagicPaperUsageScratchToDeleteEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type MagicPaperUsageScratchToDeleteEvent and conformance MagicPaperUsageScratchToDeleteEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageScratchToDeleteEvent and conformance MagicPaperUsageScratchToDeleteEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent and conformance MagicPaperUsageScratchToDeleteEvent;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent and conformance MagicPaperUsageScratchToDeleteEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent and conformance MagicPaperUsageScratchToDeleteEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent and conformance MagicPaperUsageScratchToDeleteEvent;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent and conformance MagicPaperUsageScratchToDeleteEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent and conformance MagicPaperUsageScratchToDeleteEvent);
  }
  return result;
}

uint64_t outlined init with copy of MagicPaperUsageScratchToDeleteEvent(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.CodingKeys and conformance MagicPaperUsageScratchToDeleteEvent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageScratchToDeleteEvent.ContentType and conformance MagicPaperUsageScratchToDeleteEvent.ContentType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MagicPaperUsageScratchToDeleteEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MagicPaperUsageScratchToDeleteEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C478794);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageScratchToDeleteEvent.CodingKeys()
{
  return &type metadata for MagicPaperUsageScratchToDeleteEvent.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for MagicPaperUsageScratchToDeleteEvent.ContentType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C478898);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageScratchToDeleteEvent.ContentType()
{
  return &type metadata for MagicPaperUsageScratchToDeleteEvent.ContentType;
}

uint64_t specialized MagicPaperUsageScratchToDeleteEvent.ContentType.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 5) {
    return 4;
  }
  else {
    return (0x302010004uLL >> (8 * a1));
  }
}

unint64_t specialized MagicPaperUsageScratchToDeleteEvent.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MagicPaperUsageScratchToDeleteEvent.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

void CanvasCollaborationAvatarView.update(animated:)(char a1)
{
  id v3 = objc_msgSend(v1, sel_superview);

  if (v3 && (v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview] & 1) == 0)
  {
    CanvasCollaborationAvatarView.updateImage()();
    CanvasCollaborationAvatarView.updateLabelPresence(removeIfHidden:)(0);
    id v4 = CanvasCollaborationAvatarView.label.getter();
    id v5 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v4, sel_setFont_, v5);

    objc_msgSend(v1, sel_setBackgroundColor_, *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_color]);
    if (a1) {
      double v6 = 0.375;
    }
    else {
      double v6 = 0.0;
    }
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v1;
    int v8 = v1;
    id v9 = objc_msgSend(v8, sel_layer);
    objc_msgSend(v9, sel_setMasksToBounds_, 1);

    id v10 = objc_msgSend(v8, sel_layer);
    id v11 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v11, sel_lineHeight);
    double v13 = v12;

    double v14 = 15.0;
    if (v13 + 6.0 > 30.0) {
      double v14 = (v13 + 6.0) * 0.5;
    }
    objc_msgSend(v10, sel_setCornerRadius_, v14);

    id v15 = CanvasCollaborationAvatarView.label.getter();
    uint64_t v16 = (void *)MEMORY[0x21054D080](*(void *)&v8[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_name], *(void *)&v8[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_name + 8]);
    objc_msgSend(v15, sel_setText_, v16);

    objc_msgSend(v8, sel_layoutIfNeeded);
    unint64_t v17 = self;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v8;
    uint64_t v27 = partial apply for closure #2 in CanvasCollaborationAvatarView.update(animated:);
    uint64_t v28 = v18;
    uint64_t v23 = MEMORY[0x263EF8330];
    uint64_t v24 = 1107296256;
    long long v25 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v26 = &block_descriptor_31;
    uint64_t v19 = _Block_copy(&v23);
    uint64_t v20 = v8;
    swift_release();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = partial apply for closure #1 in CanvasCollaborationAvatarView.update(animated:);
    *(void *)(v21 + 24) = v7;
    uint64_t v27 = (id (*)())partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
    uint64_t v28 = v21;
    uint64_t v23 = MEMORY[0x263EF8330];
    uint64_t v24 = 1107296256;
    long long v25 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v26 = &block_descriptor_9_0;
    int v22 = _Block_copy(&v23);
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v19, v22, v6, 0.0, 0.85, 0.0);
    swift_release();
    _Block_release(v22);
    _Block_release(v19);
  }
}

void CanvasCollaborationAvatarView.frameAnchorPoint.setter(double a1, double a2)
{
  id v3 = (double *)&v2[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorPoint];
  *id v3 = a1;
  v3[1] = a2;
  CanvasCollaborationAvatarView.update(animated:)(0);
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer;
  id v5 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
  if (v5) {
    objc_msgSend(v5, sel_invalidate);
  }
  double v6 = self;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v2;
  void v12[4] = partial apply for closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer();
  v12[5] = v7;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  v12[3] = &block_descriptor_23;
  int v8 = _Block_copy(v12);
  id v9 = v2;
  swift_release();
  id v10 = objc_msgSend(v6, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v8, 5.0);
  _Block_release(v8);
  id v11 = *(void **)&v2[v4];
  *(void *)&v2[v4] = v10;
}

id CanvasCollaborationAvatarView.init(name:color:boundingSuperview:fetchImage:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorIsInverted] = 0;
  v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 0;
  v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_hasDisplayedInWindow] = 0;
  v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autocollapseTimer] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewTopConstraint] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewBottomConstraint] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewLeadingConstraint] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelHeightConstraint] = 0;
  id v15 = &v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_name];
  *id v15 = a1;
  v15[1] = a2;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_color] = a3;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_boundingSuperview] = a4;
  uint64_t v16 = &v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_fetchImage];
  *uint64_t v16 = a5;
  v16[1] = a6;
  unint64_t v17 = &v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorPoint];
  *unint64_t v17 = 0;
  v17[1] = 0;
  v31.receiver = v7;
  v31.super_class = ObjectType;
  id v18 = a3;
  id v19 = a4;
  swift_retain();
  id v20 = objc_msgSendSuper2(&v31, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v20, sel_setAlpha_, 0.0);
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v20, sel_handleTap_);
  objc_msgSend(v20, sel_addGestureRecognizer_, v21);

  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827D0]), sel_initWithTarget_action_, v20, sel_handleHoverWithRecognizer_);
  objc_msgSend(v20, sel_addGestureRecognizer_, v22);

  id v23 = v20;
  id v24 = CanvasCollaborationAvatarView.imageView.getter();
  objc_msgSend(v23, sel_addSubview_, v24);

  id v25 = v23;
  id v26 = CanvasCollaborationAvatarView.label.getter();
  objc_msgSend(v25, sel_addSubview_, v26);

  uint64_t v27 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_20C8344C0;
  *(void *)(v28 + 32) = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewTopConstraint, (SEL *)&selRef_topAnchor);
  *(void *)(v28 + 40) = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewBottomConstraint, (SEL *)&selRef_bottomAnchor);
  *(void *)(v28 + 48) = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewLeadingConstraint, (SEL *)&selRef_leadingAnchor);
  *(void *)(v28 + 56) = CanvasCollaborationAvatarView.imageViewWidthConstraint.getter();
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_activateConstraints_, isa);

  CanvasCollaborationAvatarView.update(animated:)(0);
  swift_release();
  return v25;
}

id CanvasCollaborationAvatarView.imageView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView;
  Swift::String v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    Swift::String v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id CanvasCollaborationAvatarView.label.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label;
  Swift::String v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v5 = objc_msgSend(self, sel_whiteColor);
    objc_msgSend(v4, sel_setTextColor_, v5);

    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    Swift::String v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id CanvasCollaborationAvatarView.imageViewTopConstraint.getter(uint64_t *a1, SEL *a2)
{
  uint64_t v3 = *a1;
  id v4 = *(void **)&v2[*a1];
  if (v4)
  {
    id v5 = *(id *)&v2[*a1];
  }
  else
  {
    id v7 = CanvasCollaborationAvatarView.imageView.getter();
    id v8 = [v7 *a2];

    id v9 = [v2 *a2];
    id v10 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v9);

    id v11 = *(void **)&v2[v3];
    *(void *)&v2[v3] = v10;
    id v5 = v10;

    id v4 = 0;
  }
  id v12 = v4;
  return v5;
}

id CanvasCollaborationAvatarView.imageViewWidthConstraint.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint;
  Swift::String v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint];
  }
  else
  {
    id v4 = CanvasCollaborationAvatarView.imageView.getter();
    id v5 = objc_msgSend(v4, sel_widthAnchor);

    int v6 = v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded];
    id v7 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v7, sel_lineHeight);
    double v9 = v8;

    if (v9 + 6.0 > 30.0) {
      double v10 = v9 + 6.0;
    }
    else {
      double v10 = 30.0;
    }
    if (v6 == 1)
    {
      id v11 = objc_msgSend(v0, sel_traitCollection);
      id v12 = objc_msgSend(v11, sel_preferredContentSizeCategory);

      LOBYTE(v11) = UIContentSizeCategory.isAccessibilityCategory.getter();
      double v13 = 10.0;
      if ((v11 & 1) == 0) {
        double v13 = 6.0;
      }
      double v10 = v10 - v13;
    }
    id v14 = objc_msgSend(v5, sel_constraintEqualToConstant_, v10);

    id v15 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v14;
    id v3 = v14;

    Swift::String v2 = 0;
  }
  id v16 = v2;
  return v3;
}

void CanvasCollaborationAvatarView.init(coder:)(void *a1)
{
  v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorIsInverted] = 0;
  v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 0;
  v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_hasDisplayedInWindow] = 0;
  v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autocollapseTimer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewTopConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewBottomConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewLeadingConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelHeightConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CanvasCollaborationAvatarView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v11.receiver = v1;
  v11.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v11, sel_traitCollectionDidChange_, isa);
  if (isa) {
    Class isa = (Class)[(objc_class *)isa preferredContentSizeCategory];
  }
  id v3 = objc_msgSend(v1, sel_traitCollection);
  id v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

  if (!isa)
  {

    goto LABEL_11;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
  {

    swift_bridgeObjectRelease_n();
    return;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
LABEL_11:
  }
    CanvasCollaborationAvatarView.update(animated:)(0);
}

Swift::Void __swiftcall CanvasCollaborationAvatarView.didMoveToWindow()()
{
  id v1 = objc_msgSend(v0, sel_window);

  if (v1 && (v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_hasDisplayedInWindow] & 1) == 0)
  {
    double v2 = CanvasCollaborationAvatarView.adjustedFrame.getter();
    CGFloat v4 = v3;
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    uint64_t v9 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorIsInverted;
    id v10 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v10, sel_lineHeight);

    int v11 = v0[v9];
    id v12 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v12, sel_lineHeight);
    double v14 = v13;

    double v15 = v14 + 6.0;
    double v16 = 3.0;
    if (v11) {
      double v16 = -3.0;
    }
    double v17 = 10.0;
    if (v11) {
      double v17 = -10.0;
    }
    double v18 = v15 / v16;
    if (v15 > 30.0) {
      CGFloat v19 = v18;
    }
    else {
      CGFloat v19 = v17;
    }
    v22.origin.CGFloat x = v2;
    v22.origin.double y = v4;
    v22.size.CGFloat width = v6;
    v22.size.CGFloat height = v8;
    CGRect v23 = CGRectOffset(v22, 0.0, v19);
    objc_msgSend(v0, sel_setFrame_, v23.origin.x, v23.origin.y, v23.size.width, v23.size.height);
    v21.CGFloat a = 1.0;
    v21.CGFloat b = 0.0;
    v21.CGFloat c = 0.0;
    v21.CGFloat d = 1.0;
    v21.tCGFloat x = 0.0;
    v21.tdouble y = 0.0;
    CGAffineTransformScale(&v20, &v21, 0.5, 0.5);
    CGAffineTransform v21 = v20;
    objc_msgSend(v0, sel_setTransform_, &v21);
    objc_msgSend(v0, sel_setAlpha_, 0.0);
    objc_msgSend(v0, sel_layoutIfNeeded);
    CanvasCollaborationAvatarView.update(animated:)(1);
  }
}

double CanvasCollaborationAvatarView.adjustedFrame.getter()
{
  CanvasCollaborationAvatarView.contentWidth.getter();
  double v2 = v1;
  id v3 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  objc_msgSend(v3, sel_lineHeight);

  double v4 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorPoint] + v2 * -0.5;
  double v5 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_boundingSuperview];
  id v6 = objc_msgSend(v0, sel_superview);
  objc_msgSend(v5, sel_convertPoint_fromView_, v6, v4, 0.0);
  double v8 = v7;

  id v9 = objc_msgSend(v0, sel_superview);
  objc_msgSend(v5, sel_convertPoint_fromView_, v9, v2 + v4, 0.0);
  double v11 = v10;

  objc_msgSend(v5, sel_bounds);
  double Width = CGRectGetWidth(v15);
  if (v8 < 8.0) {
    return v4 + 8.0 - v8;
  }
  double v13 = Width + -8.0;
  if (v13 < v11) {
    return v4 - vabdd_f64(v13, v11);
  }
  return v4;
}

void CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  v3[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview] = 1;
  objc_msgSend(v3, sel_frame);
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorIsInverted;
  id v15 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  objc_msgSend(v15, sel_lineHeight);

  int v16 = v3[v14];
  id v17 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  objc_msgSend(v17, sel_lineHeight);
  double v19 = v18;

  double v20 = v19 + 6.0;
  double v21 = 3.0;
  if (v16) {
    double v21 = -3.0;
  }
  double v22 = 10.0;
  if (v16) {
    double v22 = -10.0;
  }
  double v23 = v20 / v21;
  if (v20 > 30.0) {
    CGFloat v24 = v23;
  }
  else {
    CGFloat v24 = v22;
  }
  v42.origin.CGFloat x = v7;
  v42.origin.CGFloat y = v9;
  v42.size.CGFloat width = v11;
  v42.size.CGFloat height = v13;
  CGRect v43 = CGRectOffset(v42, 0.0, v24);
  CGFloat x = v43.origin.x;
  CGFloat y = v43.origin.y;
  CGFloat width = v43.size.width;
  CGFloat height = v43.size.height;
  id v29 = (void *)swift_allocObject();
  v29[2] = v3;
  v29[3] = a1;
  v29[4] = a2;
  CGAffineTransform v30 = self;
  objc_super v31 = (CGFloat *)swift_allocObject();
  *((void *)v31 + 2) = v3;
  v31[3] = x;
  v31[4] = y;
  v31[5] = width;
  v31[6] = height;
  double v40 = partial apply for closure #2 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:);
  double v41 = v31;
  uint64_t v36 = MEMORY[0x263EF8330];
  uint64_t v37 = 1107296256;
  double v38 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  double v39 = &block_descriptor_32_1;
  CGRect v32 = _Block_copy(&v36);
  CGRect v33 = v3;
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(a1);
  swift_release();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for closure #1 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:);
  *(void *)(v34 + 24) = v29;
  double v40 = _sIg_Ieg_TRTA_0;
  double v41 = (CGFloat *)v34;
  uint64_t v36 = MEMORY[0x263EF8330];
  uint64_t v37 = 1107296256;
  double v38 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  double v39 = &block_descriptor_38_0;
  id v35 = _Block_copy(&v36);
  swift_retain();
  swift_release();
  objc_msgSend(v30, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v32, v35, 0.375, 0.0, 0.85, 0.0);
  swift_release();
  _Block_release(v35);
  _Block_release(v32);
}

id closure #2 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(void *a1, double a2, double a3, double a4, double a5)
{
  objc_msgSend(a1, sel_setAlpha_, 0.0);
  objc_msgSend(a1, sel_setFrame_, a2, a3, a4, a5);
  v12.CGFloat a = 1.0;
  v12.CGFloat b = 0.0;
  v12.CGFloat c = 0.0;
  v12.CGFloat d = 1.0;
  v12.tCGFloat x = 0.0;
  v12.tCGFloat y = 0.0;
  CGAffineTransformScale(&v11, &v12, 0.5, 0.5);
  CGAffineTransform v12 = v11;
  return objc_msgSend(a1, sel_setTransform_, &v12);
}

void CanvasCollaborationAvatarView.contentWidth.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded;
  if (v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] == 1)
  {
    id v2 = objc_msgSend(v0, sel_traitCollection);
    id v3 = objc_msgSend(v2, sel_preferredContentSizeCategory);

    UIContentSizeCategory.isAccessibilityCategory.getter();
    int v4 = v0[v1];
    id v5 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v5, sel_lineHeight);

    if (v4 == 1)
    {
      id v6 = objc_msgSend(v0, sel_traitCollection);
      id v7 = objc_msgSend(v6, sel_preferredContentSizeCategory);

      UIContentSizeCategory.isAccessibilityCategory.getter();
    }
    CanvasCollaborationAvatarView.nameWidth.getter();
    if (v0[v1] == 1)
    {
      id v8 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
      objc_msgSend(v8, sel_lineHeight);
    }
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_boundingSuperview], sel_frame);
  }
  else
  {
    id v9 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v9, sel_lineHeight);
  }
}

double CanvasCollaborationAvatarView.nameWidth.getter()
{
  uint64_t v1 = (void *)MEMORY[0x21054D080](*(void *)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_name), *(void *)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_name + 8));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  id v3 = (void *)*MEMORY[0x263F814F0];
  *(void *)(inited + 32) = *MEMORY[0x263F814F0];
  id v4 = v3;
  id v5 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  *(void *)(inited + 64) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  *(void *)(inited + 40) = v5;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_sizeWithAttributes_, isa);
  double v8 = v7;

  return ceil(v8);
}

double CanvasCollaborationAvatarView.labelWidth.getter()
{
  CanvasCollaborationAvatarView.contentWidth.getter();
  double v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded;
  double v4 = 0.0;
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded) == 1
    && ((id v5 = objc_msgSend(v0, sel_traitCollection),
         id v6 = objc_msgSend(v5, sel_preferredContentSizeCategory),
         v5,
         LOBYTE(v5) = UIContentSizeCategory.isAccessibilityCategory.getter(),
         v6,
         (v5 & 1) == 0)
      ? (double v4 = 3.0)
      : (double v4 = 5.0),
        *((unsigned char *)v0 + v3) == 1))
  {
    id v7 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v7, sel_lineHeight);
    double v9 = v8;

    if (v9 + 6.0 > 30.0) {
      double v10 = v9 + 6.0;
    }
    else {
      double v10 = 30.0;
    }
    id v11 = objc_msgSend(v0, sel_traitCollection);
    id v12 = objc_msgSend(v11, sel_preferredContentSizeCategory);

    LOBYTE(v11) = UIContentSizeCategory.isAccessibilityCategory.getter();
    double v13 = 10.0;
    if ((v11 & 1) == 0) {
      double v13 = 6.0;
    }
    double v14 = v10 - v13;
  }
  else
  {
    id v15 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v15, sel_lineHeight);
    double v17 = v16;

    if (v17 + 6.0 > 30.0) {
      double v14 = v17 + 6.0;
    }
    else {
      double v14 = 30.0;
    }
  }
  double v18 = 0.0;
  if (*((unsigned char *)v0 + v3) == 1)
  {
    id v19 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v19, sel_lineHeight);
    double v21 = v20;

    double v18 = 9.0;
    if (v21 + 6.0 > 30.0) {
      double v18 = (v21 + 6.0) * 0.5 * 0.6;
    }
    if (v18 <= 12.0) {
      double v18 = 12.0;
    }
  }
  return v2 - v4 - v14 + -6.0 - v18;
}

id CanvasCollaborationAvatarView.labelWidthConstraint.getter(uint64_t *a1, SEL *a2)
{
  uint64_t v3 = *a1;
  double v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v7 = CanvasCollaborationAvatarView.label.getter();
    id v8 = [v7 *a2];

    id v9 = objc_msgSend(v8, sel_constraintEqualToConstant_, 0.0);
    double v10 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v9;
    id v5 = v9;

    double v4 = 0;
  }
  id v11 = v4;
  return v5;
}

void CanvasCollaborationAvatarView.updateImage()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = CanvasCollaborationAvatarView.imageView.getter();
  id v5 = objc_msgSend(v4, sel_image);

  if (!v5)
  {
    uint64_t v6 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded;
    int v7 = v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded];
    id v8 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v8, sel_lineHeight);
    double v10 = v9;

    if (v10 + 6.0 > 30.0) {
      double v11 = v10 + 6.0;
    }
    else {
      double v11 = 30.0;
    }
    if (v7 == 1)
    {
      id v12 = objc_msgSend(v0, sel_traitCollection);
      id v13 = objc_msgSend(v12, sel_preferredContentSizeCategory);

      LOBYTE(v12) = UIContentSizeCategory.isAccessibilityCategory.getter();
      double v14 = 10.0;
      if ((v12 & 1) == 0) {
        double v14 = 6.0;
      }
      double v11 = v11 - v14;
    }
    int v15 = v0[v6];
    id v16 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v16, sel_lineHeight);
    double v18 = v17;

    if (v18 + 6.0 > 30.0) {
      double v19 = v18 + 6.0;
    }
    else {
      double v19 = 30.0;
    }
    if (v15 == 1)
    {
      id v20 = objc_msgSend(v0, sel_traitCollection);
      id v21 = objc_msgSend(v20, sel_preferredContentSizeCategory);

      LOBYTE(v20) = UIContentSizeCategory.isAccessibilityCategory.getter();
      double v22 = 6.0;
      if (v20) {
        double v22 = 10.0;
      }
      double v19 = v19 - v22;
    }
    uint64_t v23 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v3, 1, 1, v23);
    uint64_t v24 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for MainActor();
    id v25 = v0;
    swift_retain();
    uint64_t v26 = static MainActor.shared.getter();
    uint64_t v27 = swift_allocObject();
    uint64_t v28 = MEMORY[0x263F8F500];
    *(void *)(v27 + 16) = v26;
    *(void *)(v27 + 24) = v28;
    *(void *)(v27 + 32) = v25;
    *(double *)(v27 + 40) = v11;
    *(double *)(v27 + 48) = v19;
    *(void *)(v27 + 56) = v24;
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasCollaborationAvatarView.updateImage(), v27);
    swift_release();
  }
}

void CanvasCollaborationAvatarView.updateLabelPresence(removeIfHidden:)(char a1)
{
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded) == 1)
  {
    id v2 = CanvasCollaborationAvatarView.label.getter();
    id v3 = objc_msgSend(v2, sel_superview);

    if (v3) {
      return;
    }
    id v4 = CanvasCollaborationAvatarView.labelWidthConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint, (SEL *)&selRef_widthAnchor);
    objc_msgSend(v4, sel_setActive_, 0);

    id v5 = CanvasCollaborationAvatarView.label.getter();
    objc_msgSend(v1, sel_addSubview_, v5);

    uint64_t v6 = self;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_20C8344C0;
    id v8 = CanvasCollaborationAvatarView.label.getter();
    id v9 = objc_msgSend(v8, sel_leadingAnchor);

    id v10 = CanvasCollaborationAvatarView.imageView.getter();
    id v11 = objc_msgSend(v10, sel_trailingAnchor);

    id v12 = objc_msgSend(v9, sel_constraintEqualToAnchor_constant_, v11, 6.0);
    *(void *)(v7 + 32) = v12;
    id v13 = CanvasCollaborationAvatarView.label.getter();
    id v14 = objc_msgSend(v13, sel_centerYAnchor);

    id v15 = CanvasCollaborationAvatarView.imageView.getter();
    id v16 = objc_msgSend(v15, sel_centerYAnchor);

    id v17 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v16);
    *(void *)(v7 + 40) = v17;
    *(void *)(v7 + 48) = CanvasCollaborationAvatarView.labelWidthConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint, (SEL *)&selRef_widthAnchor);
    *(void *)(v7 + 56) = CanvasCollaborationAvatarView.labelWidthConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelHeightConstraint, (SEL *)&selRef_heightAnchor);
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    id isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_activateConstraints_, isa);
  }
  else
  {
    if ((a1 & 1) == 0) {
      return;
    }
    id isa = CanvasCollaborationAvatarView.label.getter();
    objc_msgSend(isa, sel_removeFromSuperview);
  }
}

void closure #1 in CanvasCollaborationAvatarView.update(animated:)(void *a1)
{
  CanvasCollaborationAvatarView.updateLabelPresence(removeIfHidden:)(1);
  id v2 = objc_msgSend(a1, sel_window);

  if (v2) {
    *((unsigned char *)a1 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_hasDisplayedInWindow) = 1;
  }
}

id closure #2 in CanvasCollaborationAvatarView.update(animated:)(void *a1)
{
  v6[0] = 0x3FF0000000000000;
  v6[1] = 0;
  void v6[2] = 0;
  v6[3] = 0x3FF0000000000000;
  v6[4] = 0;
  v6[5] = 0;
  objc_msgSend(a1, sel_setTransform_, v6);
  CanvasCollaborationAvatarView.updateFrameAndConstraints()();
  objc_msgSend(a1, sel_setAlpha_, 1.0);
  id v2 = CanvasCollaborationAvatarView.label.getter();
  id v3 = v2;
  double v4 = 0.0;
  if (*((unsigned char *)a1 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded)) {
    double v4 = 1.0;
  }
  objc_msgSend(v2, sel_setAlpha_, v4);

  return objc_msgSend(a1, sel_layoutIfNeeded);
}

void CanvasCollaborationAvatarView.updateFrameAndConstraints()()
{
  objc_msgSend(v0, sel_setFrame_, CanvasCollaborationAvatarView.adjustedFrame.getter());
  id v1 = CanvasCollaborationAvatarView.imageViewWidthConstraint.getter();
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded;
  int v3 = v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded];
  id v4 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  objc_msgSend(v4, sel_lineHeight);
  double v6 = v5;

  if (v6 + 6.0 > 30.0) {
    double v7 = v6 + 6.0;
  }
  else {
    double v7 = 30.0;
  }
  if (v3 == 1)
  {
    id v8 = objc_msgSend(v0, sel_traitCollection);
    id v9 = objc_msgSend(v8, sel_preferredContentSizeCategory);

    LOBYTE(v8) = UIContentSizeCategory.isAccessibilityCategory.getter();
    double v10 = 10.0;
    if ((v8 & 1) == 0) {
      double v10 = 6.0;
    }
    double v7 = v7 - v10;
  }
  objc_msgSend(v1, sel_setConstant_, v7);

  id v11 = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewLeadingConstraint, (SEL *)&selRef_leadingAnchor);
  double v12 = 0.0;
  double v13 = 0.0;
  if (v0[v2] == 1)
  {
    id v14 = objc_msgSend(v0, sel_traitCollection, 0.0);
    id v15 = objc_msgSend(v14, sel_preferredContentSizeCategory);

    LOBYTE(v14) = UIContentSizeCategory.isAccessibilityCategory.getter();
    double v13 = 3.0;
    if (v14) {
      double v13 = 5.0;
    }
  }
  objc_msgSend(v11, sel_setConstant_, v13);

  id v16 = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewTopConstraint, (SEL *)&selRef_topAnchor);
  if (v0[v2] == 1)
  {
    id v17 = objc_msgSend(v0, sel_traitCollection);
    id v18 = objc_msgSend(v17, sel_preferredContentSizeCategory);

    LOBYTE(v17) = UIContentSizeCategory.isAccessibilityCategory.getter();
    if (v17) {
      double v12 = 5.0;
    }
    else {
      double v12 = 3.0;
    }
  }
  objc_msgSend(v16, sel_setConstant_, v12);

  id v19 = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewBottomConstraint, (SEL *)&selRef_bottomAnchor);
  double v20 = 0.0;
  if (v0[v2] == 1)
  {
    id v21 = objc_msgSend(v0, sel_traitCollection, 0.0);
    id v22 = objc_msgSend(v21, sel_preferredContentSizeCategory);

    LOBYTE(v21) = UIContentSizeCategory.isAccessibilityCategory.getter();
    double v20 = 3.0;
    if (v21) {
      double v20 = 5.0;
    }
  }
  objc_msgSend(v19, sel_setConstant_, -v20);

  id v23 = CanvasCollaborationAvatarView.labelWidthConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint, (SEL *)&selRef_widthAnchor);
  double v24 = CanvasCollaborationAvatarView.labelWidth.getter();
  if (v24 <= 0.0) {
    double v24 = 0.0;
  }
  objc_msgSend(v23, sel_setConstant_, v24);

  id v28 = CanvasCollaborationAvatarView.labelWidthConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelHeightConstraint, (SEL *)&selRef_heightAnchor);
  id v25 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  objc_msgSend(v25, sel_lineHeight);
  double v27 = v26;

  objc_msgSend(v28, sel_setConstant_, v27);
}

uint64_t closure #1 in CanvasCollaborationAvatarView.updateImage()(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 64) = a7;
  *(double *)(v7 + 48) = a1;
  *(double *)(v7 + 56) = a2;
  *(void *)(v7 + 40) = a6;
  type metadata accessor for MainActor();
  *(void *)(v7 + 72) = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v7 + 80) = v9;
  *(void *)(v7 + 88) = v8;
  return MEMORY[0x270FA2498](closure #1 in CanvasCollaborationAvatarView.updateImage(), v9, v8);
}

uint64_t closure #1 in CanvasCollaborationAvatarView.updateImage()()
{
  double v5 = (uint64_t (*)(__n128, __n128))(*(void *)(v0[5]
                                                          + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_fetchImage)
                                              + **(int **)(v0[5]
                                                         + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_fetchImage));
  id v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  void *v1 = v0;
  v1[1] = closure #1 in CanvasCollaborationAvatarView.updateImage();
  v2.n128_u64[0] = v0[6];
  v3.n128_u64[0] = v0[7];
  return v5(v2, v3);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  id v1 = v0[13];
  swift_release();
  if (v1)
  {
    __n128 v2 = (void *)v0[13];
    __n128 v3 = v0[8] + 16;
    swift_beginAccess();
    id v4 = MEMORY[0x210550400](v3);
    if (v4)
    {
      double v5 = (void *)v4;
      uint64_t v6 = CanvasCollaborationAvatarView.imageView.getter();

      uint64_t v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v2);
      objc_msgSend(v6, sel_setImage_, v7);
    }
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t closure #1 in CanvasCollaborationAvatarView.updateImage()(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  uint64_t v4 = *(void *)(v2 + 80);
  return MEMORY[0x270FA2498](closure #1 in CanvasCollaborationAvatarView.updateImage(), v4, v3);
}

void closure #1 in CanvasCollaborationAvatarView.resetAutocollapseTimer()(uint64_t a1, unsigned char *a2)
{
  if (a2[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] == 1)
  {
    a2[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 0;
    CanvasCollaborationAvatarView.update(animated:)(1);
    uint64_t v3 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer;
    uint64_t v4 = *(void **)&a2[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
    if (v4) {
      objc_msgSend(v4, sel_invalidate);
    }
    double v5 = self;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    v11[4] = closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer()partial apply;
    v11[5] = v6;
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 1107296256;
    v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
    v11[3] = &block_descriptor_72_0;
    uint64_t v7 = _Block_copy(v11);
    uint64_t v8 = a2;
    swift_release();
    id v9 = objc_msgSend(v5, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v7, 5.0);
    _Block_release(v7);
    double v10 = *(void **)&a2[v3];
    *(void *)&a2[v3] = v9;
  }
}

void CanvasCollaborationAvatarView.handleHover(recognizer:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_state);
  if (v2 == (id)3)
  {
    if (v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] != 1) {
      return;
    }
    v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 0;
    CanvasCollaborationAvatarView.update(animated:)(1);
    uint64_t v3 = (void **)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
    uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
    if (v8) {
      objc_msgSend(v8, sel_invalidate);
    }
    double v5 = self;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v1;
    id v18 = closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer()partial apply;
    uint64_t v19 = v9;
    uint64_t v14 = MEMORY[0x263EF8330];
    uint64_t v15 = 1107296256;
    uint64_t v7 = &block_descriptor_45;
    goto LABEL_11;
  }
  if (v2 == (id)1 && (v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] & 1) == 0)
  {
    v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 1;
    CanvasCollaborationAvatarView.update(animated:)(1);
    uint64_t v3 = (void **)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
    uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
    if (v4) {
      objc_msgSend(v4, sel_invalidate);
    }
    double v5 = self;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v1;
    id v18 = closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer()partial apply;
    uint64_t v19 = v6;
    uint64_t v14 = MEMORY[0x263EF8330];
    uint64_t v15 = 1107296256;
    uint64_t v7 = &block_descriptor_52;
LABEL_11:
    id v16 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
    id v17 = v7;
    double v10 = _Block_copy(&v14);
    uint64_t v11 = v1;
    swift_release();
    id v12 = objc_msgSend(v5, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v10, 5.0, v14, v15);
    _Block_release(v10);
    double v13 = *v3;
    *uint64_t v3 = v12;
  }
}

uint64_t type metadata accessor for CanvasCollaborationAvatarView()
{
  return self;
}

id specialized static CanvasCollaborationAvatarView.labelFont.getter()
{
  uint64_t v0 = *MEMORY[0x263F835F0];
  id v1 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F835F0]);
  objc_msgSend(v1, sel_pointSize);
  double v3 = v2 * 2.99;
  uint64_t v4 = self;
  objc_msgSend(v1, sel_pointSize);
  id v5 = objc_msgSend(v4, sel_systemFontOfSize_weight_);
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82770]), sel_initForTextStyle_, v0);
  id v7 = objc_msgSend(v6, sel_scaledFontForFont_maximumPointSize_, v5, v3);

  return v7;
}

uint64_t sub_20C47BA40()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in CanvasCollaborationAvatarView.update(animated:)()
{
  closure #1 in CanvasCollaborationAvatarView.update(animated:)(*(void **)(v0 + 16));
}

id partial apply for closure #2 in CanvasCollaborationAvatarView.update(animated:)()
{
  return closure #2 in CanvasCollaborationAvatarView.update(animated:)(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t sub_20C47BAA0()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C47BAD8()
{
  swift_unknownObjectRelease();

  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in CanvasCollaborationAvatarView.updateImage()(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  double v7 = v1[5];
  double v8 = v1[6];
  uint64_t v9 = *((void *)v1 + 7);
  double v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CanvasCollaborationAvatarView.updateImage()(v7, v8, a1, v4, v5, v6, v9);
}

void partial apply for closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer()()
{
}

uint64_t sub_20C47BC24()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 40, 7);
}

id partial apply for closure #1 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)()
{
  id v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(id))(v0 + 24);
  id result = objc_msgSend(v1, sel_removeFromSuperview);
  *((unsigned char *)v1 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview) = 0;
  *((unsigned char *)v1 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded) = 0;
  if (v2) {
    return (id)v2(result);
  }
  return result;
}

uint64_t sub_20C47BCCC()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

id partial apply for closure #2 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)()
{
  return closure #2 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(*(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_20C47BD14()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void specialized CanvasCollaborationAvatarView.init(frame:)()
{
  v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorIsInverted] = 0;
  v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 0;
  v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_hasDisplayedInWindow] = 0;
  v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autocollapseTimer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewTopConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewBottomConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewLeadingConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelHeightConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CanvasCollaborationAvatarView.handleTap(_:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded;
  v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = (v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] & 1) == 0;
  CanvasCollaborationAvatarView.update(animated:)(1);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer;
  double v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
  if (v3) {
    objc_msgSend(v3, sel_invalidate);
  }
  uint64_t v4 = self;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v0;
  id v22 = (void (*)(uint64_t))closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer()partial apply;
  uint64_t v23 = v5;
  uint64_t v18 = MEMORY[0x263EF8330];
  uint64_t v19 = 1107296256;
  double v20 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  id v21 = &block_descriptor_59;
  uint64_t v6 = _Block_copy(&v18);
  double v7 = v0;
  swift_release();
  id v8 = objc_msgSend(v4, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v6, 5.0);
  _Block_release(v6);
  uint64_t v9 = *(void **)&v0[v2];
  *(void *)&v0[v2] = v8;

  if (v0[v1] == 1)
  {
    uint64_t v10 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autocollapseTimer;
    uint64_t v11 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autocollapseTimer];
    if (v11) {
      objc_msgSend(v11, sel_invalidate);
    }
    uint64_t v12 = self;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v7;
    id v22 = partial apply for closure #1 in CanvasCollaborationAvatarView.resetAutocollapseTimer();
    uint64_t v23 = v13;
    uint64_t v18 = MEMORY[0x263EF8330];
    uint64_t v19 = 1107296256;
    double v20 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
    id v21 = &block_descriptor_65;
    uint64_t v14 = _Block_copy(&v18);
    uint64_t v15 = v7;
    swift_release();
    id v16 = objc_msgSend(v12, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v14, 2.5);
    _Block_release(v14);
    id v17 = *(void **)&v7[v10];
    *(void *)&v7[v10] = v16;
  }
}

void partial apply for closure #1 in CanvasCollaborationAvatarView.resetAutocollapseTimer()(uint64_t a1)
{
  closure #1 in CanvasCollaborationAvatarView.resetAutocollapseTimer()(a1, *(unsigned char **)(v1 + 16));
}

uint64_t CanvasGenerationTool.nameAndPointerDescription.getter()
{
  v0._uint64_t countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._object = (void *)0x800000020C84F5F0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = 8250;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 15913;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  return 0;
}

Swift::Void __swiftcall ContainerCanvasElementView.enterFormFillingMode()()
{
}

void sub_20C47C284(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, id a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a1)
  {
    uint64_t v24 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x620))();
    if (v24)
    {
      double v41 = (void *)v24;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CanvasElementViewController<Image>);
      uint64_t v25 = swift_dynamicCastClass();
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = v25 + direct field offset for CanvasElementViewController.formDelegate;
        swift_beginAccess();
        if (MEMORY[0x210550400](v27))
        {
          uint64_t v28 = *(void *)(v27 + 8);
          uint64_t ObjectType = swift_getObjectType();
          CGAffineTransform v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 16);
          id v31 = v41;
          v30(v26, 1, ObjectType, v28);
          swift_unknownObjectRelease();
        }
        else
        {
        }
        CGRect v32 = a1;
LABEL_19:

        return;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPageView<PaperDocumentPage>);
      uint64_t v33 = swift_dynamicCastClass();
      if (v33)
      {
        uint64_t v34 = MEMORY[0x210550400](v33 + direct field offset for PaperDocumentPageView.documentView);
        if (v34)
        {
          id v35 = (void *)v34;
          uint64_t v36 = v34 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
          swift_beginAccess();
          if (MEMORY[0x210550400](v36))
          {
            uint64_t v37 = *(void *)(v36 + 8);
            uint64_t v38 = swift_getObjectType();
            double v39 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v37 + 80);
            double v40 = a1;
            v39(v35, 1, v38, v37);

            swift_unknownObjectRelease();
            return;
          }

          CGRect v32 = v41;
          goto LABEL_19;
        }

        CGRect v32 = v41;
        goto LABEL_14;
      }
    }
    CGRect v32 = a1;
LABEL_14:
    goto LABEL_19;
  }
}

void ContainerCanvasElementView.addCanvasElements<A>(_:)()
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v5);
  v4[11] = (char *)v4 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = type metadata accessor for Capsule();
  uint64_t v6 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  v4[10] = (char *)v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[0] = v2;
  MEMORY[0x270FA5388](v3);
  ContainerCanvasElementView.canvas.getter();
}

uint64_t closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = a6;
  uint64_t v10 = (void *)(*MEMORY[0x263F8EED0] & *a1);
  uint64_t v20 = v10[149];
  uint64_t v11 = v10[150];
  uint64_t v19 = *(void *)(v11 + 16);
  uint64_t v12 = type metadata accessor for Capsule();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v17 - v14;
  uint64_t v21 = a4;
  uint64_t v22 = v11;
  uint64_t v23 = v10[151];
  uint64_t v24 = a5;
  uint64_t v25 = v18;
  uint64_t v26 = a2;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_9<TaggedCanvasElement>]);
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & *a3) + 0x5C8))(0);
  CanvasElementView.canvasElement.getter((uint64_t)v15);
  v27[0] = 4;
  AnyCanvas.merge<A>(_:from:)((uint64_t)v15, v27, v20, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t closure #1 in closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v14 = *a1;
  uint64_t v15 = (uint64_t (*)(uint64_t *, void))Capsule.Ref<>.root.modify();
  uint64_t v16 = ContainerCanvasElement.addCanvasElements<A, B>(_:capsule:)(a2, (uint64_t)a1, *(void *)(v14 + *MEMORY[0x263F33088]), a3, a4, a5, a6);
  uint64_t result = v15(&v18, 0);
  *a7 = v16;
  return result;
}

void ContainerCanvasElementView.remove(members:)()
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v3 = (char *)&v1 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  ContainerCanvasElementView.canvas.getter();
}

uint64_t closure #1 in ContainerCanvasElementView.remove(members:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v21 = a6;
  uint64_t v10 = (void *)(*MEMORY[0x263F8EED0] & *a1);
  uint64_t v11 = v10[149];
  uint64_t v12 = v10[150];
  uint64_t v19 = *(void *)(v12 + 16);
  uint64_t v20 = v11;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v18 - v15;
  char v30 = 0;
  uint64_t v22 = v12;
  uint64_t v23 = v10[151];
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  char v27 = a5 & 1;
  uint64_t v28 = &v30;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t result = swift_endAccess();
  if (v30 == 1)
  {
    CanvasElementView.canvasElement.getter((uint64_t)v16);
    v29[0] = 4;
    AnyCanvas.merge<A>(_:from:)((uint64_t)v16, v29, v20, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  return result;
}

uint64_t closure #1 in closure #1 in ContainerCanvasElementView.remove(members:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, BOOL *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v80 = a6;
  uint64_t v81 = a3;
  uint64_t v12 = *a1;
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v78 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v72 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v77 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v16 - 8);
  id v96 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  int64_t v111 = *(void *)(v95 - 8);
  MEMORY[0x270FA5388](v95);
  uint64_t v94 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v93 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v21 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v91 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  CGRect v90 = (char *)&v71 - v24;
  MEMORY[0x270FA5388](v25);
  CGRect v88 = (char *)&v71 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  char v30 = (char *)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = *(void *)(v12 + *MEMORY[0x263F33088]);
  uint64_t v104 = v99;
  uint64_t v105 = a7;
  uint64_t v101 = a8;
  uint64_t v106 = a8;
  swift_getKeyPath();
  uint64_t v102 = a7;
  uint64_t v98 = a1;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  uint64_t v74 = CROrderedSet.count.getter();
  id v31 = *(uint64_t (**)(char *, uint64_t))(v28 + 8);
  uint64_t v75 = v30;
  uint64_t v97 = v27;
  uint64_t v76 = v28 + 8;
  uint64_t v73 = v31;
  v31(v30, v27);
  uint64_t v32 = *(void *)(a2 + 56);
  uint64_t v82 = a2 + 56;
  uint64_t v33 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & v32;
  int64_t v83 = (unint64_t)(v33 + 63) >> 6;
  uint64_t v87 = v21 + 16;
  uint64_t v86 = v21 + 32;
  uint64_t v92 = v21;
  uint64_t v85 = v21 + 8;
  __C::CGRect v84 = (void (**)(char *, uint64_t))(v111 + 8);
  uint64_t v100 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v37 = 0;
  uint64_t v38 = v89;
  double v39 = v90;
  while (1)
  {
    if (v35)
    {
      uint64_t v103 = (v35 - 1) & v35;
      int64_t v111 = v37;
      unint64_t v40 = __clz(__rbit64(v35)) | (v37 << 6);
      goto LABEL_5;
    }
    int64_t v51 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v51 >= v83) {
      goto LABEL_21;
    }
    unint64_t v52 = *(void *)(v82 + 8 * v51);
    int64_t v53 = v37 + 1;
    if (!v52)
    {
      int64_t v53 = v37 + 2;
      if (v37 + 2 >= v83) {
        goto LABEL_21;
      }
      unint64_t v52 = *(void *)(v82 + 8 * v53);
      if (!v52)
      {
        int64_t v53 = v37 + 3;
        if (v37 + 3 >= v83) {
          goto LABEL_21;
        }
        unint64_t v52 = *(void *)(v82 + 8 * v53);
        if (!v52) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v103 = (v52 - 1) & v52;
    int64_t v111 = v53;
    unint64_t v40 = __clz(__rbit64(v52)) + (v53 << 6);
LABEL_5:
    uint64_t v41 = v92;
    CGRect v42 = *(void (**)(char *, unint64_t, uint64_t))(v92 + 16);
    uint64_t v43 = v88;
    v42(v88, *(void *)(v100 + 48) + *(void *)(v92 + 72) * v40, v38);
    uint64_t v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 32))(v39, v43, v38);
    MEMORY[0x270FA5388](v44);
    uint64_t v45 = v102;
    *(&v71 - 4) = v99;
    *(&v71 - 3) = v45;
    *(&v71 - 2) = v101;
    swift_getKeyPath();
    id v46 = v91;
    v42(v91, (unint64_t)v39, v38);
    WeakTagged_9.tag.getter();
    uint64_t v109 = v107;
    char v110 = v108;
    MEMORY[0x21054B9C0](v38);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    id v47 = v94;
    SharedTagged_9.init(_:id:)();
    id v48 = *(void (**)(char *, uint64_t))(v41 + 8);
    v48(v46, v38);
    uint64_t v49 = (void (*)(uint64_t *, void))Capsule.Ref<>.subscript.modify();
    uint64_t v50 = (uint64_t)v93;
    CROrderedSet.remove(_:)();
    (*v84)(v47, v95);
    outlined destroy of StocksKitCurrencyCache.Provider?(v50, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    v49(&v107, 0);
    swift_release();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v48)(v39, v38);
    int64_t v37 = v111;
    unint64_t v35 = v103;
  }
  uint64_t v54 = v37 + 4;
  if (v37 + 4 < v83)
  {
    unint64_t v52 = *(void *)(v82 + 8 * v54);
    if (!v52)
    {
      while (1)
      {
        int64_t v53 = v54 + 1;
        if (__OFADD__(v54, 1)) {
          goto LABEL_29;
        }
        if (v53 >= v83) {
          goto LABEL_21;
        }
        unint64_t v52 = *(void *)(v82 + 8 * v53);
        ++v54;
        if (v52) {
          goto LABEL_20;
        }
      }
    }
    int64_t v53 = v37 + 4;
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v55 = swift_release();
  uint64_t v56 = v81;
  MEMORY[0x270FA5388](v55);
  uint64_t v57 = v102;
  *(&v71 - 4) = v99;
  *(&v71 - 3) = v57;
  *(&v71 - 2) = v101;
  if (v58)
  {
    swift_getKeyPath();
    uint64_t v59 = (uint64_t)v77;
    uint64_t v60 = (uint64_t)v98;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    uint64_t v61 = v78;
    uint64_t v62 = v79;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v59, 1, v79))
    {
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    }
    else
    {
      uint64_t v67 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v72, v59, v62);
      outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      uint64_t v109 = v56;
      swift_bridgeObjectRetain();
      uint64_t v68 = (void (*)(uint64_t *, void))Ref.subscript.modify();
      uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      uint64_t v70 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>, (uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      PKDrawingStruct.deleteStrokes<A, B>(_:in:)((uint64_t)&v109, v60, v69, v70);
      swift_bridgeObjectRelease();
      v68(&v107, 0);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v67, v62);
    }
    BOOL v66 = 1;
  }
  else
  {
    swift_getKeyPath();
    uint64_t v63 = v75;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    uint64_t v64 = v97;
    uint64_t v65 = CROrderedSet.count.getter();
    uint64_t result = v73(v63, v64);
    BOOL v66 = v65 != v74;
  }
  *uint64_t v80 = v66;
  return result;
}

uint64_t closure #2 in ContainerCanvasElementView.recordRemoveMembersAnalytics(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (!result) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v3) {
      goto LABEL_13;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = (void *)MEMORY[0x263F8EED0];
  do
  {
    if ((a2 & 0xC000000000000001) != 0) {
      double v7 = (void *)MEMORY[0x21054E050](v5, a2);
    }
    else {
      double v7 = *(id *)(a2 + 8 * v5 + 32);
    }
    id v8 = v7;
    uint64_t v9 = (*(uint64_t (**)(void))((*v6 & *v7) + 0x2D0))();
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      uint64_t v11 = *(void *)(v9 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
      swift_retain();

      *(unsigned char *)(v11 + 48) = 0;
      FormTextFieldAnalytics.recordEvent()();

      swift_release();
    }
    else
    {
    }
    ++v5;
  }
  while (v3 != v5);
LABEL_13:
  return swift_bridgeObjectRelease();
}

void ContainerCanvasElementView.duplicate(members:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  MEMORY[0x270FA5388](v0);
  ContainerCanvasElementView.canvas.getter();
}

uint64_t sub_20C47E6B0(void *a1)
{
  if (a1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))((*MEMORY[0x263F8EED0] & *a1) + 0x668))(v3, v2, v1, v4 & 1);
    if (one-time initialization token for canvasElementPasteOffset != -1) {
      swift_once();
    }
    ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)();
  }
  return MEMORY[0x263F8EE88];
}

void ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v9 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v8 = &v5[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v6);
  double v7 = &v5[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  MEMORY[0x270FA5388](v4);
  ContainerCanvasElementView.canvas.getter();
}

void sub_20C47E9A0(void *a1)
{
  if (a1)
  {
    *(void *)(v7 - 152) = v3;
    v9.n128_f64[0] = MEMORY[0x270FA5388](a1);
    uint64_t v11 = (void *)MEMORY[0x263F8EED0];
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t (*)(), __n128))((*MEMORY[0x263F8EED0] & *v10) + 0x478))(0, 1, partial apply for closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:), v9);
    (*(void (**)(uint64_t))((*v11 & *v2) + 0x488))(v12);
    swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Capsule<>.subscript.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    *(void *)(v7 - 144) = CROrderedSet.map<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v5);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v6, 1, v13) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v6, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      uint64_t v15 = MEMORY[0x263F8EE78];
    }
    else
    {
      type metadata accessor for Paper();
      lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      uint64_t v16 = *(void *)(v7 - 128);
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v6, v13);
      uint64_t v17 = *(void *)(v7 - 120);
      uint64_t v18 = *(void *)(v7 - 112);
      uint64_t v19 = *(void *)(v7 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v16 + *(int *)(*(void *)(v7 - 136) + 20), v19);
      outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v16, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v15 = CROrderedSet.map<A>(_:)();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    uint64_t v20 = a1;
    id v21 = objc_msgSend(v20, sel_window);
    if (v21)
    {
      uint64_t v22 = v21;
      id v23 = objc_msgSend(self, sel_activeToolPickerForWindow_, v21);
      if (v23)
      {
        uint64_t v24 = v23;
        id v25 = objc_msgSend(v23, sel__visibilityUpdatesEnabled);
        objc_msgSend(v24, sel__setVisibilityUpdatesEnabled_, 0);
        uint64_t v26 = *(void *)(v7 - 144);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v27 = specialized Set.init<A>(_:)(v26);
        swift_bridgeObjectRelease();
        uint64_t v28 = specialized Set.init<A>(_:)(v15);
        swift_bridgeObjectRelease();
        AnyCanvas.selection.setter(v27, v28, 6, 0);
        objc_msgSend(v24, sel__setVisibilityUpdatesEnabled_, v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_11;
      }
    }
    uint64_t v29 = *(void *)(v7 - 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v30 = specialized Set.init<A>(_:)(v29);
    swift_bridgeObjectRelease();
    uint64_t v31 = specialized Set.init<A>(_:)(v15);
    swift_bridgeObjectRelease();
    AnyCanvas.selection.setter(v30, v31, 6, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v20;
LABEL_11:

    if (*(void *)&v20[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView])
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      __break(1u);
    }
  }
}

void ContainerCanvasElementView.pasteDrawing(fromURL:at:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v22 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  __n128 v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = Data.init(contentsOf:options:)();
  unint64_t v15 = v14;
  uint64_t v19 = v7;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  type metadata accessor for PKDrawingCoherence(0);
  outlined copy of Data._Representation(v13, v15);
  id v16 = specialized PKDrawingCoherence.__allocating_init(data:)();
  outlined consume of Data._Representation(v13, v15);
  int v17 = v22 & 1;
  Capsule<>.init(drawing:)((uint64_t)v16);
  outlined consume of Data._Representation(v13, v15);
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v12, v9, v6);
  ContainerCanvasElementView.pastePaper(_:andStrokes:at:)((uint64_t)v12, 1, v20, v21, v17);
}

void ContainerCanvasElementView.pastePaper(_:andStrokes:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v48 = a5;
  v37[16] = a3;
  uint64_t v53 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v6 - 8);
  id v47 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v46 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  unint64_t v52 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v9 - 8);
  v37[12] = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v44 = (char *)v37 - v12;
  MEMORY[0x270FA5388](v13);
  v37[5] = (char *)v37 - v14;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v50 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  v37[6] = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  int64_t v51 = (char *)v37 - v17;
  MEMORY[0x270FA5388](v18);
  void v37[3] = (char *)v37 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v41 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  unint64_t v40 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v38);
  double v39 = (char *)v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v45 = (char *)v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  v37[17] = (char *)v37 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  MEMORY[0x270FA5388](v27);
  uint64_t v43 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v55 = (char *)v37 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  MEMORY[0x270FA5388](v32);
  v37[11] = (char *)v37 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  v37[4] = (char *)v37 - v35;
  MEMORY[0x270FA5388](v36);
  uint64_t v42 = v5;
  ContainerCanvasElementView.canvas.getter();
}

void ContainerCanvasElementView.pasteElements(fromURL:andStrokes:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v9[9] = a5;
  FileVersionPolicCGFloat y = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  MEMORY[0x270FA5388](FileVersionPolicy);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = v6;
  MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v9 - v8;
  ContainerCanvasElementView.canvas.getter();
}

uint64_t sub_20C480C98(uint64_t a1)
{
  if (a1)
  {
    *(void *)(v10 - 112) = v8;
    *(_DWORD *)(v10 - 188) = v5;
    *(void *)(v10 - 184) = v3;
    *(void *)(v10 - 176) = v1;
    *(void *)(v10 - 168) = v2;
    uint64_t v11 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_context;
    *(void *)(v10 - 104) = a1;
    *(void *)(v10 - 128) = *(void *)(a1 + v11);
    *(void *)(v10 - 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
    uint64_t v12 = type metadata accessor for CRCodableVersion();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(void *)(v13 + 72);
    unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_20C835740;
    unint64_t v17 = v16 + v15;
    uint64_t v18 = *(void (**)(unint64_t, void, uint64_t))(v13 + 104);
    v18(v16 + v15, *MEMORY[0x263F32EB0], v12);
    v18(v17 + v14, *MEMORY[0x263F32EB8], v12);
    uint64_t v19 = one-time initialization token for allReadableFileFormatVersions;
    id v20 = *(id *)(v10 - 128);
    if (v19 != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F32FB0], v9);
    static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
    int v21 = *(_DWORD *)(v10 - 156) & 1;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v9);

    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(v10 - 152);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)(v10 - 144) + 32))(v22, v7, *(void *)(v10 - 136));
    ContainerCanvasElementView.pastePaper(_:andStrokes:at:)(v22, *(_DWORD *)(v10 - 188) & 1, *(void *)(v10 - 184), *(void *)(v10 - 176), v21);
  }
  return MEMORY[0x263F8EE88];
}

uint64_t closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:at:)(uint64_t a1)
{
  return closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:at:)(a1);
}

{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  return WeakRef.init<A>(_:)();
}

uint64_t closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(void *a1, uint64_t a2, char a3, uint64_t a4, double a5, double a6)
{
  v19[1] = a4;
  uint64_t v10 = (void *)(*MEMORY[0x263F8EED0] & *a1);
  uint64_t v11 = v10[149];
  uint64_t v12 = v10[150];
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = type metadata accessor for Capsule();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)v19 - v16;
  v19[4] = v12;
  v19[5] = v10[151];
  void v19[6] = a2;
  *(double *)&v19[7] = a5;
  *(double *)&unsigned char v19[8] = a6;
  char v20 = a3;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  CanvasElementView.canvasElement.getter((uint64_t)v17);
  v21[0] = 4;
  AnyCanvas.merge<A>(_:from:)((uint64_t)v17, v21, v11, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t closure #1 in closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, CGFloat a6, CGFloat a7)
{
  uint64_t v166 = a5;
  uint64_t v165 = a4;
  LODWORD(v167) = a3;
  uint64_t v11 = *a1;
  uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v155 = *(void *)(v156 - 8);
  MEMORY[0x270FA5388](v156);
  unint64_t v141 = (char *)v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v144 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162);
  uint64_t v161 = (char *)v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v160);
  char v159 = (char *)v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v143 = *(void *)(v178 - 8);
  MEMORY[0x270FA5388](v178);
  uint64_t v181 = (char *)v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v142 = *(void *)(v180 - 8);
  MEMORY[0x270FA5388](v180);
  char v172 = (char *)v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v171 = (char *)v139 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v170 = (char *)v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v174 = (char *)v139 - v22;
  uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v175 = *(void *)(v147 - 8);
  MEMORY[0x270FA5388](v147);
  uint64_t v182 = (char *)v139 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v11 + *MEMORY[0x263F33088]);
  uint64_t v149 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v148 = (char *)v139 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v27 - 8);
  char v173 = (char *)v139 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v145 = *(void *)(v177 - 8);
  MEMORY[0x270FA5388](v177);
  Class v176 = (char *)v139 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v30 - 8);
  Class v146 = (char *)v139 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v154 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)v139 - v33);
  uint64_t v152 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v152);
  char v151 = (char *)v139 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v153 = (uint64_t)v139 - v36;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v186 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v163 = (char *)v139 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v39 - 8);
  uint64_t v41 = (char *)v139 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v158 = (void (**)(void, void))__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v164 = (uint64_t)*(v158 - 1);
  MEMORY[0x270FA5388](v158);
  char v157 = (char *)v139 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v196 = *(v185 - 1);
  MEMORY[0x270FA5388](v185);
  uint64_t v44 = (char *)v139 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Paper();
  uint64_t v45 = lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v179 = a2;
  uint64_t v169 = v45;
  Capsule.Ref.import<A>(_:)();
  uint64_t v150 = v24;
  uint64_t v188 = v24;
  uint64_t v189 = v165;
  uint64_t v190 = v166;
  uint64_t KeyPath = (void (*)(char *, char *, uint64_t))swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  Capsule<>.subscript.getter();
  swift_release();
  unint64_t v187 = a1;
  uint64_t v46 = (void (*)(CGAffineTransform *, void))Capsule.Ref<>.subscript.modify();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  id v47 = v185;
  CROrderedSet.append<A>(contentsOf:)();
  int v48 = *(void (**)(char *, void *))(v196 + 8);
  v196 += 8;
  v48(v44, v47);
  v46(&t1, 0);
  swift_release();
  swift_getKeyPath();
  uint64_t v49 = v157;
  Capsule<>.subscript.getter();
  uint64_t v50 = v158;
  swift_release();
  CROrderedSet.makeIterator()();
  int64_t v51 = v163;
  v48(v44, v47);
  CROrderedSet.Iterator.next()();
  uint64_t v52 = v186;
  uint64_t v53 = (void *)(v186 + 48);
  uint64_t v54 = *(unsigned int (**)(void, void, void))(v186 + 48);
  if (v54(v41, 1, v37) != 1)
  {
    uint64_t KeyPath = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    uint64_t v186 = v52 + 32;
    uint64_t v183 = (void (**)(char *, uint64_t))(v52 + 8);
    v185 = v53;
    do
    {
      KeyPath(v51, v41, v37);
      uint64_t v196 = SharedTagged_9.subscript.modify();
      uint64_t v55 = v51;
      uint64_t v57 = *(void *)(v56 + 24);
      uint64_t v58 = v54;
      uint64_t v59 = v37;
      uint64_t v60 = v41;
      uint64_t v61 = v49;
      uint64_t v62 = v50;
      uint64_t v63 = *(void *)(v56 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v56, v57);
      uint64_t v64 = *(uint64_t (**)(CGAffineTransform *, uint64_t, uint64_t))(v63 + 24);
      uint64_t v65 = v57;
      int64_t v51 = v55;
      uint64_t v66 = v63;
      uint64_t v50 = v62;
      uint64_t v49 = v61;
      uint64_t v41 = v60;
      uint64_t v37 = v59;
      uint64_t v54 = v58;
      uint64_t v67 = (void (*)(CGAffineTransform *, void))v64(&t2, v65, v66);
      double v69 = v68[1] + a7;
      *uint64_t v68 = *v68 + a6;
      v68[1] = v69;
      v67(&t2, 0);
      ((void (*)(CGAffineTransform *, void))v196)(&t1, 0);
      (*v183)(v55, v37);
      CROrderedSet.Iterator.next()();
    }
    while (v58(v41, 1, v37) != 1);
  }
  uint64_t result = (*(uint64_t (**)(char *, void))(v164 + 8))(v49, v50);
  if (v167)
  {
    swift_getKeyPath();
    uint64_t v71 = (uint64_t)v154;
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v72 = v155;
    uint64_t v73 = (char *)(v155 + 48);
    uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
    uint64_t v75 = v156;
    if (v74(v71, 1, v156) != 1)
    {
      uint64_t v76 = (uint64_t)v151;
      Ref.subscript.getter();
      uint64_t v77 = (char *)(v72 + 8);
      uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
      v78(v71, v75);
      uint64_t v79 = v153;
      outlined init with take of Shape(v76, v153, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      uint64_t v80 = v79 + *(int *)(v152 + 20);
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      if (*(void *)&t1.a == *(void *)&t2.a)
      {
        uint64_t v82 = v79;
        return outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v82, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      }
      uint64_t v154 = v74;
      char v157 = v73;
      int64_t v140 = (void (*)(char *, uint64_t))v78;
      char v151 = v77;
      CGAffineTransformMakeTranslation(&t1, a6, a7);
      CGFloat a = t1.a;
      CGFloat b = t1.b;
      CGFloat c = t1.c;
      CGFloat d = t1.d;
      tCGFloat x = t1.tx;
      tCGFloat y = t1.ty;
      v139[1] = v81;
      v139[2] = v80;
      CROrderedSet.makeIterator()();
      uint64_t v89 = v173;
      CROrderedSet.Iterator.next()();
      CGRect v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v175 + 48);
      uint64_t v91 = v147;
      uint64_t v168 = v175 + 48;
      uint64_t v167 = v90;
      unsigned int v92 = v90(v89, 1, v147);
      uint64_t v93 = (uint64_t)v174;
      uint64_t v94 = (uint64_t)v187;
      if (v92 != 1)
      {
        uint64_t v164 = *(void *)(v175 + 32);
        uint64_t v196 = v143 + 8;
        uint64_t v186 = v142 + 8;
        char v158 = (void (**)(void, void))(v144 + 8);
        v175 += 32;
        uint64_t v163 = (char *)(v175 - 24);
        ((void (*)(char *, char *, uint64_t))v164)(v182, v89, v91);
        while (1)
        {
          char v110 = v171;
          Ref.subscript.getter();
          int64_t v111 = v181;
          uint64_t v112 = v180;
          CRRegister.value.getter();
          uint64_t v113 = v178;
          SharedTagged_2.tagged1.getter();
          v185 = *(void **)v196;
          ((void (*)(char *, uint64_t))v185)(v111, v113);
          uint64_t KeyPath = *(void (**)(char *, char *, uint64_t))v186;
          ((void (*)(char *, uint64_t))KeyPath)(v110, v112);
          uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
          uint64_t v115 = *(void *)(v114 - 8);
          uint64_t v116 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
          unsigned int v117 = v116(v93, 1, v114);
          uint64_t v169 = v115;
          uint64_t v183 = (void (**)(char *, uint64_t))v116;
          uint64_t v179 = v114;
          if (v117 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v93, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
          }
          else
          {
            uint64_t v118 = (uint64_t)v159;
            Ref.subscript.getter();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
            uint64_t v119 = v161;
            CRRegister.wrappedValue.getter();
            outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v118, type metadata accessor for PKStrokeStruct);
            (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v93, v114);
            uint64_t v120 = v162;
            unint64_t v121 = (void (*)(char *, void))Ref.subscript.modify();
            type metadata accessor for PKStrokeInheritedProperties(0);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
            id v122 = (void (*)(char *, void))CRRegister.wrappedValue.modify();
            unint64_t v124 = v123;
            long long v125 = v123[1];
            long long v126 = v123[2];
            *(_OWORD *)&t1.CGFloat a = *v123;
            *(_OWORD *)&t1.CGFloat c = v125;
            *(_OWORD *)&t1.tCGFloat x = v126;
            t2.CGFloat a = a;
            t2.CGFloat b = b;
            t2.CGFloat c = c;
            t2.CGFloat d = d;
            t2.tCGFloat x = tx;
            t2.tCGFloat y = ty;
            CGAffineTransformConcat(&v191, &t1, &t2);
            long long v127 = *(_OWORD *)&v191.c;
            long long v128 = *(_OWORD *)&v191.tx;
            *unint64_t v124 = *(_OWORD *)&v191.a;
            v124[1] = v127;
            v124[2] = v128;
            uint64_t v129 = (uint64_t)v187;
            v122(v193, 0);
            v121(v194, 0);
            CGPoint v130 = v119;
            uint64_t v94 = v129;
            uint64_t v113 = v178;
            (*v158)(v130, v120);
          }
          double v131 = v172;
          Ref.subscript.getter();
          double v132 = v181;
          uint64_t v133 = v180;
          CRRegister.value.getter();
          uint64_t v134 = v91;
          uint64_t v135 = (uint64_t)v170;
          SharedTagged_2.tagged1.getter();
          ((void (*)(char *, uint64_t))v185)(v132, v113);
          ((void (*)(char *, uint64_t))KeyPath)(v131, v133);
          uint64_t v136 = v179;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v183)(v135, 1, v179) == 1)
          {
            char v108 = v182;
            (*(void (**)(char *, uint64_t))v163)(v182, v134);
            outlined destroy of StocksKitCurrencyCache.Provider?(v135, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
            uint64_t v93 = (uint64_t)v174;
            uint64_t v91 = v134;
          }
          else
          {
            uint64_t v100 = (void (*)(CGAffineTransform *, void))Ref.subscript.modify();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
            uint64_t v101 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
            uint64_t v102 = v136;
            uint64_t v104 = v103;
            unint64_t v105 = *v103;
            unint64_t v106 = *v103 & 0xFFFF000000000000;
            LODWORD(v191.a) = *v103;
            WORD2(v191.a) = WORD2(v105);
            _So13PKStrokeFlagsa34__Unnamed_union___Anonymous_field0V02__c10_struct___e1_F0V_isPastedStroke_setter(&v191);
            *uint64_t v104 = v106 | LODWORD(v191.a) | ((unint64_t)WORD2(v191.a) << 32);
            uint64_t v94 = (uint64_t)v187;
            v101(&t2, 0);
            v100(&t1, 0);
            uint64_t v107 = v182;
            (*(void (**)(char *, uint64_t))v163)(v182, v134);
            (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v135, v102);
            uint64_t v93 = (uint64_t)v174;
            uint64_t v91 = v134;
            char v108 = v107;
          }
          uint64_t v109 = v173;
          CROrderedSet.Iterator.next()();
          if (v167(v109, 1, v91) == 1) {
            break;
          }
          ((void (*)(char *, char *, uint64_t))v164)(v108, v109, v91);
        }
      }
      (*(void (**)(char *, uint64_t))(v145 + 8))(v176, v177);
      uint64_t v95 = (void (*)(CGAffineTransform *, void))Capsule.Ref<>.root.modify();
      uint64_t v96 = v150;
      uint64_t v97 = v166;
      ContainerCanvasElement.ensureHasDrawing<A>(in:)(v94, v150, v166);
      v95(&t1, 0);
      uint64_t v98 = v148;
      Capsule.Ref<>.root.getter();
      uint64_t v71 = (uint64_t)v146;
      (*(void (**)(uint64_t, uint64_t))(v97 + 48))(v96, v97);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v98, v96);
      uint64_t v99 = v156;
      if (!v154(v71, 1, v156))
      {
        unint64_t v137 = v141;
        (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v141, v71, v99);
        outlined destroy of StocksKitCurrencyCache.Provider?(v71, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
        uint64_t v138 = (void (*)(CGAffineTransform *, void))Ref.subscript.modify();
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
        CROrderedSet.append<A>(contentsOf:)();
        v138(&t1, 0);
        v140(v137, v99);
        uint64_t v82 = v153;
        return outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v82, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
      }
      outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v153, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
    }
    return outlined destroy of StocksKitCurrencyCache.Provider?(v71, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  }
  return result;
}

uint64_t closure #2 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, a1, v3, v5);
  SharedTagged_9.tag.getter();
  uint64_t v9 = v11;
  char v10 = v12;
  MEMORY[0x21054BDF0](v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void ContainerCanvasElementView.subelementView(at:with:)()
{
}

void *sub_20C482CE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (!a1) {
    return 0;
  }
  uint64_t v24 = a1;
  id v25 = objc_msgSend(v20, sel_hitTest_withEvent_, v21, v23, v22);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v24) + 0x2F8))();
    uint64_t v29 = v28;
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 56))(ObjectType, v29);

    id v32 = v26;
    uint64_t v33 = specialized Sequence.first(where:)(v31, v32);
    swift_bridgeObjectRelease();

    uint64_t v24 = v32;
  }
  else
  {
    uint64_t v33 = 0;
  }

  return v33;
}

uint64_t ContainerCanvasElementView.canConvertToHandwriting(members:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263F8EED0] & *v2;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v62 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v71 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v65 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v66 = (uint64_t)&v61 - v12;
  uint64_t v13 = *(void *)(*(void *)(v5 + 1200) + 16);
  uint64_t v70 = *(void *)(v5 + 1192);
  uint64_t v69 = v13;
  uint64_t v68 = type metadata accessor for Capsule();
  uint64_t v67 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  uint64_t v15 = (char *)&v61 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<TextBox>?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextBox?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v72 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v73 = (char *)&v61 - v29;
  unint64_t v30 = ContainerCanvasElementView.pencilKitAttachmentViews()();
  unint64_t v31 = v30;
  if (!(v30 >> 62))
  {
    uint64_t result = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_3;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_37;
  }
LABEL_3:
  if ((v31 & 0xC000000000000001) != 0)
  {
    id v33 = (id)MEMORY[0x21054E050](0, v31);
    goto LABEL_6;
  }
  if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v33 = *(id *)(v31 + 32);
LABEL_6:
    id v74 = v33;
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 16) != 1 || *(void *)(a2 + 16))
    {

      return 0;
    }
    specialized Collection.first.getter(a1, (uint64_t)v24);
    uint64_t v34 = v72;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v24, 1, v25) == 1)
    {

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      return 0;
    }
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v73, v24, v25);
    WeakTagged_9.tagged4.getter();
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<TextBox>);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v18, 1, v35) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for WeakRef<TextBox>?);
      uint64_t v37 = type metadata accessor for TextBox();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v21, 1, 1, v37);
    }
    else
    {
      CanvasElementView.canvasElement.getter((uint64_t)v15);
      WeakRef.subscript.getter();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v15, v68);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v35);
      uint64_t v38 = type metadata accessor for TextBox();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v21, 1, v38) != 1)
      {
        uint64_t v76 = v38;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v75);
        outlined init with take of Shape((uint64_t)v21, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for TextBox);
LABEL_16:
        uint64_t v40 = (uint64_t)v71;
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v27, v73, v25);
        if (v76 == 2)
        {
          WeakTagged_9.tagged6.getter();
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>);
          uint64_t v42 = *(void *)(v41 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v40, &demangling cache variable for type metadata for WeakRef<Shape>?);
            uint64_t v43 = *(void (**)(char *, uint64_t))(v34 + 8);
            v43(v27, v25);
            long long v77 = 0uLL;
            *(void *)&long long v78 = 0;
            *((void *)&v78 + 1) = 1;
          }
          else
          {
            CanvasElementView.canvasElement.getter((uint64_t)v15);
            uint64_t v45 = (uint64_t)v65;
            WeakRef.subscript.getter();
            (*(void (**)(char *, uint64_t))(v67 + 8))(v15, v68);
            (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
            uint64_t v46 = v66;
            outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v45, v66, &demangling cache variable for type metadata for Shape?);
            uint64_t v47 = type metadata accessor for Shape();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v46, 1, v47) == 1)
            {
              uint64_t v43 = *(void (**)(char *, uint64_t))(v34 + 8);
              v43(v27, v25);
              outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for Shape?);
              long long v77 = 0u;
              long long v78 = 0u;
            }
            else
            {
              *((void *)&v78 + 1) = v47;
              int v48 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v77);
              outlined init with take of Shape(v46, (uint64_t)v48, (uint64_t (*)(void))type metadata accessor for Shape);
              uint64_t v43 = *(void (**)(char *, uint64_t))(v34 + 8);
              v43(v27, v25);
            }
          }
          id v44 = v74;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v75, &demangling cache variable for type metadata for Any???);
        }
        else
        {
          uint64_t v43 = *(void (**)(char *, uint64_t))(v34 + 8);
          v43(v27, v25);
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v75, (uint64_t)&v77, &demangling cache variable for type metadata for Any??);
          id v44 = v74;
        }
        if (*((void *)&v78 + 1) == 1)
        {
          uint64_t v49 = &demangling cache variable for type metadata for Any??;
          uint64_t v50 = &v77;
        }
        else
        {
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v77, (uint64_t)v79, &demangling cache variable for type metadata for Any?);
          if (v80)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
            if (swift_dynamicCast())
            {
              outlined init with take of FindResult(v81, (uint64_t)&v83);
              uint64_t v51 = v84;
              uint64_t v52 = v85;
              __swift_project_boxed_opaque_existential_1(&v83, v84);
              if ((*(uint64_t (**)(uint64_t, uint64_t))(v52 + 80))(v51, v52))
              {
                uint64_t v53 = v84;
                uint64_t v54 = v85;
                __swift_project_boxed_opaque_existential_1(&v83, v84);
                uint64_t v55 = v62;
                (*(void (**)(uint64_t, uint64_t))(v54 + 16))(v53, v54);
                uint64_t v56 = v64;
                uint64_t v57 = (void *)CRAttributedString.attributedString.getter();
                (*(void (**)(char *, uint64_t))(v63 + 8))(v55, v56);
                id v58 = objc_msgSend(v57, sel_string);

                if (!v58)
                {
                  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  id v58 = (id)MEMORY[0x21054D080](v59);
                  swift_bridgeObjectRelease();
                }
                id v60 = objc_msgSend(v44, sel_canConvertTextToHandwriting_, v58);

                v43(v73, v25);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
                return (uint64_t)v60;
              }
              v43(v73, v25);

              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
              return 0;
            }
LABEL_34:
            uint64_t v82 = 0;
            memset(v81, 0, sizeof(v81));

            v43(v73, v25);
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v81, &demangling cache variable for type metadata for ShapeTextBox?);
            return 0;
          }
          uint64_t v49 = &demangling cache variable for type metadata for Any?;
          uint64_t v50 = (long long *)v79;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v50, v49);
        goto LABEL_34;
      }
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for TextBox?);
    memset(v75, 0, sizeof(v75));
    uint64_t v76 = 2;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in ContainerCanvasElementView.convertToHandwriting(members:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v75 = a8;
  uint64_t v74 = a7;
  uint64_t v80 = a6;
  uint64_t v82 = a5;
  uint64_t v81 = a4;
  unint64_t v78 = a2;
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v77 = (uint64_t)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent();
  MEMORY[0x270FA5388](v79 - 8);
  uint64_t v20 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for PKDrawing();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (uint64_t *)((char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = *(void *)(a3 + 16);
  unint64_t v83 = a1;
  uint64_t v76 = a3;
  if (v25)
  {
    *(void *)&long long v84 = v20;
    uint64_t v28 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v26 = v22 + 16;
    uint64_t v27 = v28;
    uint64_t v14 = a3 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
    uint64_t v29 = *(void *)(v26 + 56);
    swift_bridgeObjectRetain();
    uint64_t v30 = 0;
    do
    {
      v27(v24, v14, v21);
      uint64_t v20 = *(void *)(PKDrawing.strokes.getter() + 16);
      swift_bridgeObjectRelease();
      BOOL v31 = __OFADD__(v30, v20);
      v30 += v20;
      if (v31)
      {
        __break(1u);
        goto LABEL_41;
      }
      (*(void (**)(uint64_t *, uint64_t))(v26 - 8))(v24, v21);
      v14 += v29;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
    uint64_t v20 = v84;
    a1 = v83;
    if (v83 >> 62) {
      goto LABEL_18;
    }
LABEL_6:
    uint64_t v21 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v21) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  uint64_t v30 = 0;
  if (!(a1 >> 62)) {
    goto LABEL_6;
  }
LABEL_18:
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  if (v21)
  {
LABEL_7:
    if (v21 < 1) {
      __break(1u);
    }
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v14 = 0;
      uint64_t v24 = (uint64_t *)MEMORY[0x263F8EE78];
      do
      {
        MEMORY[0x21054E050](v14, a1);
        long long v86 = 0uLL;
        LOBYTE(v87) = 1;
        static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)();
        swift_unknownObjectRelease();
        if ((v87 & 1) == 0)
        {
          long long v84 = v86;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
          }
          unint64_t v33 = v24[2];
          unint64_t v32 = v24[3];
          if (v33 >= v32 >> 1) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v24);
          }
          v24[2] = v33 + 1;
          *(_OWORD *)&v24[2 * v33 + 4] = v84;
        }
        ++v14;
      }
      while (v21 != v14);
    }
    else
    {
      uint64_t v35 = 0;
      uint64_t v24 = (uint64_t *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v36 = *(void **)(a1 + 8 * v35 + 32);
        long long v86 = 0uLL;
        LOBYTE(v87) = 1;
        id v37 = v36;
        static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)();

        if (v87)
        {
          a1 = v83;
        }
        else
        {
          long long v84 = v86;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
          }
          a1 = v83;
          unint64_t v39 = v24[2];
          unint64_t v38 = v24[3];
          if (v39 >= v38 >> 1) {
            uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v24);
          }
          v24[2] = v39 + 1;
          *(_OWORD *)&v24[2 * v39 + 4] = v84;
        }
        ++v35;
      }
      while (v21 != v35);
    }
    swift_bridgeObjectRelease();
    uint64_t v34 = v24[2];
    if (v34) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v24 = (uint64_t *)MEMORY[0x263F8EE78];
  uint64_t v34 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (v34)
  {
LABEL_31:
    uint64_t v25 = 0;
    uint64_t v40 = v24 + 5;
    while (1)
    {
      uint64_t v41 = *v40;
      v40 += 2;
      BOOL v31 = __OFADD__(v25, v41);
      v25 += v41;
      if (v31) {
        break;
      }
      if (!--v34) {
        goto LABEL_34;
      }
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_20:
  uint64_t v25 = 0;
LABEL_34:
  swift_bridgeObjectRelease();
  uint64_t v42 = String.count.getter();
  if (__OFSUB__(v42, v25))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v70 = a9;
  uint64_t v69 = (v42 - v25) & ~((v42 - v25) >> 63);
  uint64_t v24 = (uint64_t *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v80) + 0x320))();
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v43 = *(void *)(v14 - 8);
  uint64_t v44 = v77;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v77, v74, v14);
  uint64_t v21 = *(void *)(v43 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v21)(v44, 0, 1, v14);
  if (!(v78 >> 62))
  {
    uint64_t v45 = *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_37;
  }
LABEL_43:
  swift_bridgeObjectRetain();
  uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_37:
  uint64_t v74 = a14;
  uint64_t v72 = a13;
  uint64_t v71 = a12;
  *(void *)&long long v84 = a11;
  uint64_t v73 = a10;
  *(unsigned char *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 25) = 0;
  *(void *)(v20 + 8) = 0;
  *(void *)(v20 + 16) = 0;
  *(_OWORD *)(v20 + 6CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
  *(_OWORD *)(v20 + 76) = 0u;
  *(_DWORD *)(v20 + 92) = 0;
  *(_OWORD *)(v20 + 28) = 0u;
  *(_OWORD *)(v20 + 44) = 0u;
  uint64_t v46 = v79;
  uint64_t v47 = v20 + *(int *)(v79 + 68);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21)(v47, 1, 1, v14);
  *(unsigned char *)(v20 + *(int *)(v46 + 72)) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v20 + 24) = 0;
  outlined assign with take of Date?(v77, v47);
  *(void *)(v20 + 32) = v30;
  *(void *)(v20 + 72) = v25;
  *(void *)(v20 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v45;
  *(void *)(v20 + 88) = v69;
  swift_unknownObjectWeakAssign();

  int v48 = (void *)MEMORY[0x21054D080](v81, v82);
  id v49 = specialized static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(v48, v83, v78, v76, v75);

  uint64_t v50 = (void *)MEMORY[0x263F8EED0];
  uint64_t v51 = *(double (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v70) + 0x100);
  uint64_t v52 = swift_bridgeObjectRetain();
  double v53 = v51(v52);
  double v55 = v54;
  double v57 = v56;
  double v59 = v58;
  type metadata accessor for ReflowLayoutManager();
  swift_allocObject();
  uint64_t v60 = specialized ReflowLayoutManager.init(contents:frame:addSpaces:)((unint64_t)v49, 0, v53, v55, v57, v59);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v61._rawValue = *(void **)(v60 + 80);
  swift_beginAccess();
  uint64_t v62 = v20;
  v63._rawValue = *(void **)(v60 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ReflowLayoutManager.layoutText(contents:lines:)(v61, v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for $currentAnalyticsEvents != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnalyticsEvent>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(void *)(inited + 56) = v79;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent((unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent, (void (*)(uint64_t))type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  outlined init with copy of MagicPaperUsageHandwritingSynthesisEvent(v62, (uint64_t)boxed_opaque_existential_1);
  TaskLocal.get()();
  uint64_t v66 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v66);
  *(void *)&long long v86 = v85;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnalyticsEvent]);
  swift_task_localValuePush();
  uint64_t v87 = v71;
  uint64_t v88 = v72;
  uint64_t v89 = v74;
  CGRect v90 = v80;
  id v91 = v49;
  uint64_t v92 = v60;
  uint64_t v93 = v73;
  uint64_t v94 = v84;
  (*(void (**)(uint64_t, void, uint64_t (*)(), long long *))((*v50 & *v80) + 0x478))(1, 0, partial apply for closure #1 in closure #4 in closure #3 in ContainerCanvasElementView.convertToHandwriting(members:), &v86);
  swift_task_localValuePop();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnalyticsEvent);
  swift_arrayDestroy();
  outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v62, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent);
  return swift_release();
}

uint64_t closure #1 in closure #4 in closure #3 in ContainerCanvasElementView.convertToHandwriting(members:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = a4 + 16;
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *a1) + 0x4C8))(a2, a3);
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v6);
  if (result)
  {
    uint64_t v8 = a5;
    specialized CanvasMembers.init(_:)(v8);

    ContainerCanvasElementView.remove(members:)();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [NSValue], @guaranteed [CHReflowableTextToken], @guaranteed [PKDrawing]) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSValue);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CHReflowableTextToken);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for PKDrawing();
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t ContainerCanvasElementView.unorderedTransientSubelementViews.getter()
{
  uint64_t v0 = (void *)specialized ContainerCanvasElementView.formFillingView.getter();
  if (v0)
  {
    id v1 = v0;
    uint64_t v2 = FormFillingView.unorderedFormFields.getter();

    return v2;
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE78];
    return specialized Dictionary.init(dictionaryLiteral:)(v4);
  }
}

uint64_t ContainerCanvasElementView.transientFormFields.getter()
{
  uint64_t v0 = (void *)specialized ContainerCanvasElementView.formFillingView.getter();
  if (!v0) {
    return MEMORY[0x263F8EE78];
  }
  id v1 = v0;
  uint64_t v2 = FormFillingView.formFields.getter();

  return v2;
}

Swift::Void __swiftcall ContainerCanvasElementView.addFormFieldViews(_:)(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall ContainerCanvasElementView.addFormFieldViews(_:transiently:)(Swift::OpaquePointer _, Swift::Bool transiently)
{
  if ((unint64_t)_._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return;
    }
  }
  ContainerCanvasElementView.createFormFillingViewIfNeeded()();
  uint64_t v5 = (void *)specialized ContainerCanvasElementView.formFillingView.getter();
  if (v5)
  {
    id v6 = v5;
    FormFillingView.add(_:)(_);
  }
  if (!transiently)
  {
    if (v4 < 1)
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = 0;
      uint64_t v8 = (void *)MEMORY[0x263F8EED0];
      do
      {
        if (((unint64_t)_._rawValue & 0xC000000000000001) != 0) {
          uint64_t v9 = (void *)MEMORY[0x21054E050](v7, _._rawValue);
        }
        else {
          uint64_t v9 = *((id *)_._rawValue + v7 + 4);
        }
        uint64_t v10 = v9;
        uint64_t v11 = (void *)(*(uint64_t (**)(void))((*v8 & *v9) + 0x2D0))();
        if (v11)
        {
          uint64_t v12 = v11;
          (*(void (**)(uint64_t))((*v8 & *v11) + 0x150))(1);
        }
        ++v7;
      }
      while (v4 != v7);
      swift_bridgeObjectRelease();
    }
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.setFormFieldGroups(_:)(Swift::OpaquePointer a1)
{
  if (*((void *)a1._rawValue + 2))
  {
    ContainerCanvasElementView.createFormFillingViewIfNeeded()();
    uint64_t v2 = specialized ContainerCanvasElementView.formFillingView.getter();
    if (v2)
    {
      *(Swift::OpaquePointer *)(v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView_formFieldGroups) = a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.addWidgets(_:)(Swift::OpaquePointer a1)
{
  ContainerCanvasElementView.createFormFillingViewIfNeeded()();
  uint64_t v1 = specialized ContainerCanvasElementView.formFillingView.getter();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    swift_beginAccess();
    id v3 = v2;
    unint64_t v4 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v4);
    swift_endAccess();
    FormFillingView.updateUI()();
  }
}

void ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a5;
  uint64_t v26 = a1;
  uint64_t v27 = a4;
  uint64_t v25 = a3;
  int v14 = a2;
  uint64_t v13 = *MEMORY[0x263F8EED0] & *v5;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v19 = (char *)&v12 - v7;
  uint64_t v17 = *(void *)(*(void *)(v13 + 1200) + 16);
  uint64_t v18 = type metadata accessor for Capsule();
  uint64_t v16 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v8 = type metadata accessor for CRKeyPath();
  uint64_t v23 = *(void *)(v8 - 8);
  uint64_t v24 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v22 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = type metadata accessor for WeakRef();
  MEMORY[0x270FA5388](v11);
  ContainerCanvasElementView.canvas.getter();
}

void sub_20C484BDC(void *a1)
{
  if (a1)
  {
    *(void *)(v6 - 224) = *(void *)(*(void *)(v6 - 96) + 16);
    *(void *)(v6 - 208) = type metadata accessor for Capsule();
    Capsule<>.rootID.getter();
    WeakRef.init(id:)();
    CanvasElementView.canvasElement.getter(v3);
    uint64_t v8 = *(void *)(v6 - 160);
    WeakRef.subscript.getter();
    (*(void (**)(uint64_t, void))(*(void *)(v6 - 184) + 8))(v3, *(void *)(v6 - 168));
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v8, 1, v5);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v6 - 152) + 8))(v8, *(void *)(v6 - 144));
    if (v9 == 1)
    {
      v11.n128_f64[0] = MEMORY[0x270FA5388](v10);
      uint64_t v12 = (void *)MEMORY[0x263F8EED0];
      (*(void (**)(void, void, uint64_t (*)(), __n128))((*MEMORY[0x263F8EED0] & *a1) + 0x478))(0, 0, partial apply for closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:), v11);
    }
    else
    {
      uint64_t v13 = *(void *)(v6 - 112);
      uint64_t v14 = *(void *)(v6 - 104);
      uint64_t v12 = (void *)MEMORY[0x263F8EED0];
      if (*(_DWORD *)(v6 - 196))
      {
        v15.n128_f64[0] = MEMORY[0x270FA5388](v10);
        (*(void (**)(void, void, uint64_t (*)(), __n128))((*v12 & *a1) + 0x478))(0, 0, partial apply for closure #2 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:), v15);
      }
      else
      {
        *(unsigned char *)(v6 - 81) = 4;
        AnyCanvas.merge<A>(_:from:)(v14, (unsigned __int8 *)(v6 - 81), v13, *(void *)(v6 - 224));
      }
    }
    uint64_t v16 = *(void *)(v6 - 136);
    (*(void (**)(void))((*v12 & *a1) + 0x5C8))(0);
    Capsule<>.rootID.getter();
    uint64_t v17 = ContainerCanvasElementView.unorderedSubelementViews.getter();
    if (*(void *)(v17 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16), (v19 & 1) != 0))
    {
      uint64_t v20 = *(void **)(*(void *)(v17 + 56) + 8 * v18);
      id v21 = v20;
    }
    else
    {
      uint64_t v20 = 0;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void))(*(void *)(v6 - 128) + 8))(v16, *(void *)(v6 - 120));
    ContainerCanvasElementView.reparentViewIfNeeded(_:)(v20);
  }
}

uint64_t closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = a6;
  uint64_t v20 = a3;
  int v9 = (void *)(*MEMORY[0x263F8EED0] & *a1);
  uint64_t v19 = v9[149];
  uint64_t v10 = v9[150];
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = type metadata accessor for Capsule();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  __n128 v15 = (char *)&v17 - v14;
  uint64_t v21 = a4;
  uint64_t v22 = v10;
  uint64_t v23 = v9[151];
  uint64_t v24 = a5;
  uint64_t v25 = v18;
  uint64_t v26 = a2;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  CanvasElementView.canvasElement.getter((uint64_t)v15);
  v27[0] = 4;
  AnyCanvas.merge<A>(_:from:)((uint64_t)v15, v27, v19, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t closure #1 in closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t KeyPath = a5;
  uint64_t v36 = a7;
  uint64_t v34 = a4;
  id v49 = a1;
  uint64_t v32 = *a1;
  uint64_t v41 = type metadata accessor for CRKeyPath();
  uint64_t v39 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  unint64_t v33 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v11);
  BOOL v31 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v30 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Capsule();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = type metadata accessor for Ref();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v29 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, a2, v14, v20);
  swift_retain();
  Ref.init<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  uint64_t v42 = *(void *)(v32 + *MEMORY[0x263F33088]);
  uint64_t v43 = a3;
  uint64_t v44 = v34;
  uint64_t v45 = KeyPath;
  uint64_t v23 = v36;
  uint64_t v46 = a6;
  uint64_t v47 = v36;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = v31;
  Capsule<>.root.getter();
  uint64_t v25 = v33;
  Capsule<>.rootID.getter();
  uint64_t v26 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 88))(v25, a3, v23);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v41);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v24, a3);
  uint64_t v27 = (void (*)(char *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v40);
  v27(v48, 0);
  return swift_release();
}

uint64_t key path setter for ContainerCanvasElement.subelements : <A><A1>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 48);
  uint64_t v6 = *(void *)(a4 + a3 - 24);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  double v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v10, a1, v8);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 80))(v10, v5, v6);
}

void ContainerCanvasElementView.reparentViewIfNeeded(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    unint64_t v33 = a1;
    unint64_t v8 = ContainerCanvasElementView.transientFormFields.getter();
    char v9 = specialized Sequence<>.contains(_:)((uint64_t)v33, v8);
    swift_bridgeObjectRelease();
    if (v9)
    {
      ContainerCanvasElementView.createSubelementsContainerViewIfNeeded()();
      uint64_t v10 = specialized ContainerCanvasElementView.subelementsContainerView.getter();
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        swift_unknownObjectWeakAssign();
        uint64_t v12 = (void *)MEMORY[0x263F8EED0];
        uint64_t v13 = *(void (**)(void))((*MEMORY[0x263F8EED0] & *v33) + 0xE0);
        id v14 = v11;
        v13();
        uint64_t v15 = (void *)((char *)v2 + *(void *)((*v12 & *v2) + 0x4D8));
        swift_beginAccess();
        uint64_t v16 = v33;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v34 = *v15;
        *uint64_t v15 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
        *uint64_t v15 = v34;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        swift_endAccess();
        objc_msgSend(v14, sel_addSubview_, v16);
        uint64_t v18 = specialized ContainerCanvasElementView.formFillingView.getter();
        if (!v18) {
          goto LABEL_19;
        }
        uint64_t v19 = (void *)v18;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        initeCGFloat d = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_20C835790;
        *(void *)(inited + 32) = v16;
        unint64_t v35 = inited;
        uint64_t v21 = v19;
        specialized Array._endMutation()();
        unint64_t v22 = v35;
        if (v35 >> 62)
        {
          uint64_t v27 = v16;
          swift_bridgeObjectRetain();
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v23) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v23 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v24 = v16;
          if (!v23) {
            goto LABEL_16;
          }
        }
        if (v23 < 1)
        {
LABEL_23:
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v23; ++i)
        {
          if ((v22 & 0xC000000000000001) != 0)
          {
            MEMORY[0x21054E050](i, v22);
            swift_unknownObjectRelease();
          }
        }
LABEL_16:
        uint64_t v28 = (uint64_t *)&v21[OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields];
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v29 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v28, v22);
        swift_bridgeObjectRelease();
        if ((unint64_t)*v28 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v30 = v31;
          if (v31 >= v29) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v30 = *(void *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v30 >= v29)
          {
LABEL_18:
            specialized Array.replaceSubrange<A>(_:with:)(v29, v30, (void (*)(void))type metadata accessor for AnyCanvasElementView);
            swift_endAccess();
            swift_bridgeObjectRelease();

LABEL_19:
            ContainerCanvasElementView.canvas.getter();
          }
        }
        __break(1u);
        goto LABEL_23;
      }
    }
    id v26 = v33;
  }
}

uint64_t closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)MEMORY[0x263F8EED0];
  uint64_t v12 = *(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *a2) + 0x2D0);
  uint64_t v13 = (void *)v12(v8);
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = (*(uint64_t (**)(void))((*v11 & *v13) + 0xF0))();
    unint64_t v33 = v16;
    uint64_t v34 = v15;
  }
  else
  {
    unint64_t v33 = 0xE000000000000000;
    uint64_t v34 = 0;
  }
  uint64_t v17 = (void *)((uint64_t (*)(void))v12)();
  if (v17)
  {
    uint64_t v18 = v17;
    (*(void (**)(void, unint64_t))((*v11 & *v17) + 0xF8))(0, 0xE000000000000000);
  }
  uint64_t v19 = swift_unknownObjectWeakAssign();
  (*(void (**)(uint64_t))((*v11 & *a2) + 0xE0))(v19);
  swift_beginAccess();
  double v20 = (void *)specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  swift_endAccess();

  uint64_t v21 = specialized ContainerCanvasElementView.formFillingView.getter();
  if (v21)
  {
    unint64_t v22 = (void *)v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C835790;
    *(void *)(inited + 32) = a2;
    unint64_t v35 = (void *)inited;
    id v24 = v22;
    specialized Array._endMutation()();
    v25._rawValue = v35;
    id v26 = a2;
    FormFillingView.add(_:)(v25);
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = v34;
  void v27[2] = a2;
  v27[3] = v28;
  void v27[4] = v33;
  v27[5] = a3;
  uint64_t v29 = *(void (**)(uint64_t (*)(uint64_t), void *))((*v11 & *a1) + 0x470);
  uint64_t v30 = a2;
  id v31 = a3;
  v29(partial apply for closure #1 in closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:), v27);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)MEMORY[0x263F8EED0];
  __n128 v8 = (void *)(*(uint64_t (**)(void))((*a2 & *MEMORY[0x263F8EED0]) + 0x2D0))();
  if (v8)
  {
    uint64_t v9 = v8;
    (*(void (**)(uint64_t, uint64_t))((*v7 & *v8) + 0xF8))(a3, a4);
  }
  return ContainerCanvasElementView.reparentViewIfNeeded(_:)(a2);
}

void protocol witness for AnyContainerCanvasElementView.remove(members:) in conformance ContainerCanvasElementView<A>()
{
}

void protocol witness for AnyContainerCanvasElementView.duplicate(members:) in conformance ContainerCanvasElementView<A>()
{
}

void protocol witness for AnyContainerCanvasElementView.pasteDrawing(fromURL:at:) in conformance ContainerCanvasElementView<A>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void protocol witness for AnyContainerCanvasElementView.pasteElements(fromURL:andStrokes:at:) in conformance ContainerCanvasElementView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
}

uint64_t partial apply for closure #2 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[9];
  unsigned __int8 v5 = 4;
  return AnyCanvas.merge<A>(_:from:)(v3, &v5, v1, *(void *)(v2 + 16));
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)()
{
  return closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(*(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(void *a1)
{
  return closure #1 in closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(a1, v1[7], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_20C486068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 24) + 72))(*(void *)(a3 + a2 - 48));
}

uint64_t sub_20C4860B0()
{
  return 48;
}

__n128 sub_20C4860BC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

void *specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(MEMORY[0x263F07508], &demangling cache variable for type metadata for _SetStorage<UUID>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  long long v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      id v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      uint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        uint64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    __n128 result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CalculateExpression>);
  uint64_t v2 = *v0;
  long long v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      id v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    __n128 result = (void *)swift_retain();
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, &demangling cache variable for type metadata for _SetStorage<SharedTagged_3<TaggedPaperPage>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Float>);
  uint64_t v2 = *v0;
  long long v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      id v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSTextAlignment>);
  uint64_t v2 = *v0;
  long long v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      id v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Bool>);
  uint64_t v2 = *v0;
  long long v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      id v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>);
}

{
  return specialized _NativeSet.copy()(MEMORY[0x263F330F8], &demangling cache variable for type metadata for _SetStorage<CRKeyPath>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ResizeHandleType>);
  uint64_t v2 = *v0;
  long long v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      id v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, &demangling cache variable for type metadata for _SetStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  uint64_t v2 = *v0;
  long long v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      id v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(MEMORY[0x263F33060], &demangling cache variable for type metadata for _SetStorage<CRAsset>);
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Color>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<NSObject>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<UIColor>);
}

void *specialized _NativeSet.copy()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  id result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  id v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    id result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v25 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  id result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  id v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    id result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    id v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    unint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    int64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    int64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *int64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()(MEMORY[0x263F07508], &demangling cache variable for type metadata for _SetStorage<UUID>);
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x263F07508], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508], MEMORY[0x263F07518]);
    *int64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    id v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    unint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    int64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    int64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *int64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()(MEMORY[0x263F330F8], &demangling cache variable for type metadata for _SetStorage<CRKeyPath>);
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x263F330F8], (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8], MEMORY[0x263F33108]);
    *int64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  swift_bridgeObjectRetain();
  uint64_t v29 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v28 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    int64_t v24 = v2;
    uint64_t v25 = v6;
    id v26 = a2;
    uint64_t v27 = ~v11;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    int64_t v14 = v6 + 16;
    uint64_t v13 = v15;
    unint64_t v16 = *(void *)(v14 + 56);
    while (1)
    {
      v13(v8, *(void *)(v9 + 48) + v16 * v12, v5);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v14 - 8))(v8, v5);
      if (v17) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v27;
      if (((*(void *)(v28 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = 1;
        uint64_t v6 = v25;
        a2 = v26;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    char v19 = v24;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v21 = *v19;
    uint64_t v30 = *v19;
    *char v19 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>);
      int64_t v21 = v30;
    }
    uint64_t v6 = v25;
    a2 = v26;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 32))(v26, *(void *)(v21 + 48) + v16 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x263F32D58]);
    *char v19 = v30;
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  swift_bridgeObjectRetain();
  uint64_t v29 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v28 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    int64_t v24 = v2;
    uint64_t v25 = v6;
    id v26 = a2;
    uint64_t v27 = ~v11;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    int64_t v14 = v6 + 16;
    uint64_t v13 = v15;
    unint64_t v16 = *(void *)(v14 + 56);
    while (1)
    {
      v13(v8, *(void *)(v9 + 48) + v16 * v12, v5);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v14 - 8))(v8, v5);
      if (v17) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v27;
      if (((*(void *)(v28 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = 1;
        uint64_t v6 = v25;
        a2 = v26;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    char v19 = v24;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v21 = *v19;
    uint64_t v30 = *v19;
    *char v19 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      int64_t v21 = v30;
    }
    uint64_t v6 = v25;
    a2 = v26;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 32))(v26, *(void *)(v21 + 48) + v16 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, MEMORY[0x263F330C0]);
    *char v19 = v30;
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  swift_bridgeObjectRetain();
  uint64_t v29 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v28 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    int64_t v24 = v2;
    uint64_t v25 = v6;
    id v26 = a2;
    uint64_t v27 = ~v11;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    int64_t v14 = v6 + 16;
    uint64_t v13 = v15;
    unint64_t v16 = *(void *)(v14 + 56);
    while (1)
    {
      v13(v8, *(void *)(v9 + 48) + v16 * v12, v5);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v14 - 8))(v8, v5);
      if (v17) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v27;
      if (((*(void *)(v28 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = 1;
        uint64_t v6 = v25;
        a2 = v26;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    char v19 = v24;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v21 = *v19;
    uint64_t v30 = *v19;
    *char v19 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, &demangling cache variable for type metadata for _SetStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      int64_t v21 = v30;
    }
    uint64_t v6 = v25;
    a2 = v26;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 32))(v26, *(void *)(v21 + 48) + v16 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, (unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, MEMORY[0x263F32FE0]);
    *char v19 = v30;
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v5 = a1;
    char v6 = __CocoaSet.contains(_:)();

    if (v6)
    {
      uint64_t v7 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v8 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(v8);
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    goto LABEL_12;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v10;
    do
    {
      unint64_t v11 = (v11 + 1) & v14;
      if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_12;
      }
      id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
      char v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v2;
  uint64_t v20 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<NSObject>);
    uint64_t v18 = v20;
  }
  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v11);
  specialized _NativeSet._delete(at:)(v11);
  *uint64_t v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Set._Variant.remove(_:)(unsigned __int8 a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 8;
  }
  uint64_t v7 = *(void *)(v3 + 48);
  if (*(unsigned __int8 *)(v7 + v6) != a1)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        return 8;
      }
    }
    while (*(unsigned __int8 *)(v7 + v6) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v1;
  uint64_t v13 = *v1;
  uint64_t *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v10 = v13;
  }
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v10 + 48) + v6);
  specialized _NativeSet._delete(at:)(v6);
  uint64_t *v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  Swift::Int v4 = specialized _NativeSet.init(_:capacity:)(v3, v2);
  Swift::Int v16 = v4;
  Swift::Int v5 = *(void *)(v4 + 40);
  swift_retain();
  Swift::Int v6 = NSObject._rawHashValue(seed:)(v5);
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v9 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:
      swift_release();
      uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v8);
      specialized _NativeSet._delete(at:)(v8);
      if (static NSObject.== infix(_:_:)())
      {
        Swift::Int *v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v11;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
        char v13 = static NSObject.== infix(_:_:)();

        if (v13) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void specialized _NativeSet._delete(at:)(int64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v41 = a3;
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v37 - v9;
  uint64_t v11 = *v5;
  uint64_t v12 = *v5 + 56;
  uint64_t v13 = -1 << *(unsigned char *)(*v5 + 32);
  unint64_t v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(void *)(v12 + 8 * (v14 >> 6))) != 0)
  {
    uint64_t v37 = v5;
    uint64_t v15 = ~v13;
    swift_retain();
    uint64_t v16 = _HashTable.previousHole(before:)();
    uint64_t v17 = v11;
    if ((*(void *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      unint64_t v39 = (v16 + 1) & v15;
      char v19 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v18 = v8 + 16;
      uint64_t v38 = v19;
      uint64_t v44 = *(void *)(v18 + 56);
      uint64_t v40 = v18;
      uint64_t v20 = (void (**)(char *, uint64_t))(v18 - 8);
      do
      {
        uint64_t v21 = v12;
        int64_t v22 = v44 * v14;
        v38(v10, *(void *)(v17 + 48) + v44 * v14, v7);
        uint64_t v23 = v17;
        lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent(v41, v42);
        uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v20)(v10, v7);
        unint64_t v25 = v24 & v15;
        if (a1 >= (uint64_t)v39)
        {
          if (v25 >= v39 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            uint64_t v17 = v23;
            uint64_t v28 = *(void *)(v23 + 48);
            int64_t v29 = v44 * a1;
            unint64_t v30 = v28 + v44 * a1;
            unint64_t v31 = v28 + v22 + v44;
            if (v44 * a1 < v22 || v30 >= v31)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v14;
            }
            else
            {
              a1 = v14;
              if (v29 != v22)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v25 >= v39 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }
        uint64_t v17 = v23;
LABEL_5:
        unint64_t v14 = (v14 + 1) & v15;
        uint64_t v12 = v21;
      }
      while (((*(void *)(v21 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    *(void *)(v12 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    Swift::Int v5 = v37;
  }
  else
  {
    *(void *)(v12 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v33 = *v5;
  uint64_t v34 = *(void *)(*v5 + 16);
  BOOL v35 = __OFSUB__(v34, 1);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v33 + 16) = v36;
    ++*(_DWORD *)(v33 + 36);
  }
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v41 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = MEMORY[0x270FA5388](v6);
  char v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v4;
  uint64_t v12 = *v4 + 56;
  uint64_t v13 = -1 << *(unsigned char *)(*v4 + 32);
  unint64_t v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(void *)(v12 + 8 * (v14 >> 6))) != 0)
  {
    uint64_t v37 = v4;
    uint64_t v15 = ~v13;
    swift_retain();
    uint64_t v16 = _HashTable.previousHole(before:)();
    uint64_t v17 = v11;
    if ((*(void *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      unint64_t v39 = (v16 + 1) & v15;
      char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
      uint64_t v18 = v7 + 16;
      uint64_t v38 = v19;
      uint64_t v44 = *(void *)(v18 + 56);
      uint64_t v40 = v18;
      uint64_t v20 = (void (**)(char *, uint64_t))(v18 - 8);
      do
      {
        uint64_t v21 = v12;
        int64_t v22 = v44 * v14;
        v38(v10, *(void *)(v17 + 48) + v44 * v14, v6);
        uint64_t v23 = v17;
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(v42, v41);
        uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v20)(v10, v6);
        unint64_t v25 = v24 & v15;
        if (a1 >= (uint64_t)v39)
        {
          if (v25 >= v39 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            uint64_t v17 = v23;
            uint64_t v28 = *(void *)(v23 + 48);
            int64_t v29 = v44 * a1;
            unint64_t v30 = v28 + v44 * a1;
            unint64_t v31 = v28 + v22 + v44;
            if (v44 * a1 < v22 || v30 >= v31)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v14;
            }
            else
            {
              a1 = v14;
              if (v29 != v22)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v25 >= v39 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }
        uint64_t v17 = v23;
LABEL_5:
        unint64_t v14 = (v14 + 1) & v15;
        uint64_t v12 = v21;
      }
      while (((*(void *)(v21 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    *(void *)(v12 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    Swift::Int v4 = v37;
  }
  else
  {
    *(void *)(v12 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v33 = *v4;
  uint64_t v34 = *(void *)(*v4 + 16);
  BOOL v35 = __OFSUB__(v34, 1);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v33 + 16) = v36;
    ++*(_DWORD *)(v33 + 36);
  }
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *uint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  unsigned char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        id v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          Swift::Int v12 = *(void *)(v3 + 48);
          Swift::Int v13 = (unsigned char *)(v12 + v2);
          unint64_t v14 = (unsigned char *)(v12 + v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *Swift::Int v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  uint64_t v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(void))type metadata accessor for SignatureItem);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(void))type metadata accessor for ReflowElement);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v3 = v5;
  }
  uint64_t v14 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?)
                  - 8);
  unint64_t v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v16 = *(void *)(v14 + 72);
  uint64_t v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_33;
  }
  if (v19 < 0)
  {
LABEL_35:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v17 + v16;
  unint64_t v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v23 = *(void *)(v5 + 16);
  BOOL v24 = __OFADD__(v23, v9);
  uint64_t v25 = v23 + v9;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1) {
    outlined init with copy of PageId?(a3, v17);
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?(a3, &demangling cache variable for type metadata for CollectionOfOne<PageId?>);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = a3;
    int64_t v4 = a2;
    uint64_t v5 = a1;
    if (!(*v3 >> 62))
    {
      unint64_t v9 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v9 >= a2) {
        goto LABEL_4;
      }
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((uint64_t)v9 < v4) {
    goto LABEL_39;
  }
LABEL_4:
  uint64_t v6 = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v7 = v8 >> 62;
  if (!(v8 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v11 = v10 - v6;
    if (!__OFSUB__(v10, v6)) {
      goto LABEL_7;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + v32;
    if (!__OFADD__(v12, v32)) {
      goto LABEL_9;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v11 = v10 - v6;
  if (__OFSUB__(v10, v6)) {
    goto LABEL_43;
  }
LABEL_7:
  unint64_t v9 = *v3;
  uint64_t v32 = v11;
  if (*v3 >> 62) {
    goto LABEL_44;
  }
  uint64_t v12 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v13 = v12 + v11;
  if (__OFADD__(v12, v11)) {
    goto LABEL_46;
  }
LABEL_9:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  unint64_t v30 = v7;
  unint64_t v31 = v8;
  uint64_t v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v15 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_19;
    }
    uint64_t v12 = 1;
  }
  if (v9 >> 62) {
    goto LABEL_47;
  }
  uint64_t v16 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v16 <= v13) {
    uint64_t v16 = v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = MEMORY[0x21054E060](v12, v16, 1, v9);
  swift_bridgeObjectRelease();
  *uint64_t v3 = v9;
  uint64_t v15 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  uint64_t v17 = v15 + 32 + 8 * v5;
  type metadata accessor for ReflowElement();
  swift_arrayDestroy();
  uint64_t v18 = v32;
  if (!v32) {
    goto LABEL_29;
  }
  if (!(v9 >> 62))
  {
    uint64_t v19 = *(void *)(v15 + 16);
    uint64_t v20 = v19 - v4;
    if (!__OFSUB__(v19, v4)) {
      goto LABEL_22;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = v32;
  uint64_t v20 = v28 - v4;
  if (__OFSUB__(v28, v4)) {
    goto LABEL_50;
  }
LABEL_22:
  if (v20 < 0)
  {
LABEL_55:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v21 = (char *)(v17 + 8 * v10);
  int64_t v22 = (char *)(v15 + 32 + 8 * v4);
  if (v21 != v22 || v21 >= &v22[8 * v20])
  {
    memmove(v21, v22, 8 * v20);
    uint64_t v18 = v32;
  }
  if (v9 >> 62)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v24 = v29 + v32;
    if (!__OFADD__(v29, v32)) {
      goto LABEL_28;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v23 = *(void *)(v15 + 16);
  uint64_t v24 = v23 + v18;
  if (__OFADD__(v23, v18)) {
    goto LABEL_53;
  }
LABEL_28:
  *(void *)(v15 + 16) = v24;
LABEL_29:
  if (v10 >= 1)
  {
    if (v30)
    {
      unint64_t v25 = swift_bridgeObjectRetain();
      id v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v25);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)(v26 + 4), v26[2], v10);
      swift_release();
      goto LABEL_34;
    }
    if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) == v10)
    {
      swift_arrayInitWithCopy();
      goto LABEL_34;
    }
    goto LABEL_54;
  }
LABEL_34:
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a4;
    uint64_t v9 = a3;
    uint64_t v5 = a2;
    uint64_t v7 = a1;
    unint64_t v8 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v25 < v5) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v11 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v10 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + v10;
    if (!__OFADD__(v12, v10)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v8 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v12 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v13 = v12 + v10;
  if (__OFADD__(v12, v10)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v8 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v4 = v8;
  uint64_t v28 = v9;
  uint64_t v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v12 = 1;
  }
  if (v8 >> 62) {
    goto LABEL_39;
  }
  uint64_t v16 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13) {
    uint64_t v16 = v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = MEMORY[0x21054E060](v12, v16, 1, v8);
  swift_bridgeObjectRelease();
  *int64_t v4 = v8;
  uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  uint64_t v17 = (void *)(v15 + 32 + 8 * v7);
  v6(0);
  swift_arrayDestroy();
  if (v10)
  {
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v19 = v26 - v5;
      if (!__OFSUB__(v26, v5))
      {
LABEL_21:
        if (v19 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v20 = (char *)(v17 + 1);
        unint64_t v21 = (char *)(v15 + 32 + 8 * v5);
        if (v17 + 1 != (void *)v21 || v20 >= &v21[8 * v19]) {
          memmove(v20, v21, 8 * v19);
        }
        if (!(v8 >> 62))
        {
          uint64_t v22 = *(void *)(v15 + 16);
          uint64_t v23 = v22 + v10;
          if (!__OFADD__(v22, v10))
          {
LABEL_27:
            *(void *)(v15 + 16) = v23;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v23 = v27 + v10;
        if (!__OFADD__(v27, v10)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v19 = v18 - v5;
      if (!__OFSUB__(v18, v5)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  *uint64_t v17 = v28;
  return specialized Array._endMutation()();
}

uint64_t specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
  {
    if (result)
    {
      type metadata accessor for ReflowElement();
      return swift_arrayInitWithCopy();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized Set._subtract<A>(_:)(uint64_t a1)
{
}

{
  specialized Set._subtract<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, (void (*)(char *))specialized Set._Variant.remove(_:));
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;

  uint64_t v3 = type metadata accessor for UUID();
  int64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v23 - v11;
  if (!*(void *)(*(void *)v1 + 16)) {
    return;
  }
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v23 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = v15 & v13;
  uint64_t v26 = v4 + 16;
  uint64_t v27 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v24 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v25 = v4 + 48;
  uint64_t v28 = a1;
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  if (!v16) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (uint64_t i = v18 | (v17 << 6); ; uint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v12, *(void *)(v28 + 48) + *(void *)(v4 + 72) * i, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1) {
      goto LABEL_26;
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    specialized Set._Variant.remove(_:)((uint64_t)v6, (uint64_t)v9);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v16) {
      goto LABEL_5;
    }
LABEL_6:
    uint64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v24) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v20);
    ++v17;
    if (!v21)
    {
      uint64_t v17 = v20 + 1;
      if (v20 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v23 + 8 * v17);
      if (!v21)
      {
        uint64_t v17 = v20 + 2;
        if (v20 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v23 + 8 * v17);
        if (!v21)
        {
          uint64_t v17 = v20 + 3;
          if (v20 + 3 >= v24) {
            goto LABEL_25;
          }
          unint64_t v21 = *(void *)(v23 + 8 * v17);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_21:
    uint64_t v16 = (v21 - 1) & v21;
  }
  uint64_t v22 = v20 + 4;
  if (v22 >= v24)
  {
LABEL_25:
    (*v27)(v12, 1, 1, v3);
LABEL_26:
    swift_release();
    return;
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21)
  {
    uint64_t v17 = v22;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v24) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
}

void specialized Set._subtract<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(char *))
{
  uint64_t v32 = a2;
  uint64_t v33 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v28 - v15;
  if (!*(void *)(*(void *)v4 + 16)) {
    return;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v28 = a1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v31 = v11 + 16;
  int64_t v29 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v30 = v11 + 32;
  uint64_t v21 = a1;
  swift_bridgeObjectRetain();
  int64_t v22 = 0;
  while (1)
  {
    if (v20)
    {
      unint64_t v23 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v24 = v23 | (v22 << 6);
      goto LABEL_6;
    }
    int64_t v25 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v29) {
      goto LABEL_24;
    }
    unint64_t v26 = *(void *)(v28 + 8 * v25);
    ++v22;
    if (!v26)
    {
      int64_t v22 = v25 + 1;
      if (v25 + 1 >= v29) {
        goto LABEL_24;
      }
      unint64_t v26 = *(void *)(v28 + 8 * v22);
      if (!v26)
      {
        int64_t v22 = v25 + 2;
        if (v25 + 2 >= v29) {
          goto LABEL_24;
        }
        unint64_t v26 = *(void *)(v28 + 8 * v22);
        if (!v26)
        {
          int64_t v22 = v25 + 3;
          if (v25 + 3 >= v29) {
            goto LABEL_24;
          }
          unint64_t v26 = *(void *)(v28 + 8 * v22);
          if (!v26) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v20 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(void *)(v21 + 48) + *(void *)(v11 + 72) * v24, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    v33(v13);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, v32);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  int64_t v27 = v25 + 4;
  if (v27 >= v29)
  {
LABEL_24:
    swift_release();
    return;
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26)
  {
    int64_t v22 = v27;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v22 >= v29) {
      goto LABEL_24;
    }
    unint64_t v26 = *(void *)(v28 + 8 * v22);
    ++v27;
    if (v26) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
}

double specialized CRRegister<>.bounds(in:)(objc_class *a1, uint64_t a2)
{
  return specialized CRRegister<>.bounds(in:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>, (unint64_t *)&lazy protocol witness table cache variable for type Capsule<Paper> and conformance Capsule<A>, (void (*)(void *__return_ptr, double *, char *))partial apply for closure #1 in CRRegister<>.bounds(in:));
}

{
  return specialized CRRegister<>.bounds(in:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>, &lazy protocol witness table cache variable for type Capsule<PKDrawingStruct> and conformance Capsule<A>, (void (*)(void *__return_ptr, double *, char *))closure #1 in CRRegister<>.bounds(in:)partial apply);
}

double specialized CRRegister<>.bounds(in:)(objc_class *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void (*a5)(void *__return_ptr, double *, char *))
{
  void (*v86)(void *__return_ptr, double *, char *);
  uint64_t v87;
  void *v88;
  unint64_t *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t *v98;
  void *v99;
  objc_class *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  objc_class *isa;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111[3];
  objc_class *v112;
  unint64_t *v113;
  void *v114;
  PKStrokePath_optional v115;
  PKInk_optional v116;

  long long v86 = a5;
  char v108 = a4;
  uint64_t v109 = a2;
  id isa = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v99 = (uint64_t *)((char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v83 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  uint64_t v97 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  long long v84 = (char *)&v82 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v102 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v82 - v14;
  unint64_t v105 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v105);
  uint64_t v103 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  char v110 = (char *)&v82 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v100 = (objc_class *)((char *)&v82 - v20);
  MEMORY[0x270FA5388](v21);
  unint64_t v23 = (char *)&v82 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v98 = *(unint64_t **)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v101 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v82 - v27;
  uint64_t v93 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v93);
  uint64_t v94 = (char *)&v82 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v95 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v92 = (char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v104 = (uint64_t)&v82 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v34 = *(v33 - 1);
  MEMORY[0x270FA5388](v33);
  uint64_t v36 = (char *)&v82 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v37 - 8);
  unint64_t v39 = (char *)&v82 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v91 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v91);
  CGRect v90 = (char *)&v82 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v41);
  uint64_t v107 = (uint64_t)&v82 - v42;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v112 = (objc_class *)v43;
  uint64_t v113 = (unint64_t *)lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(v108, a3);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v111);
  (*(void (**)(uint64_t *, objc_class *, uint64_t))(*(void *)(v43 - 8) + 16))(boxed_opaque_existential_1, isa, v43);
  uint64_t v89 = v113;
  id isa = v112;
  uint64_t v88 = __swift_project_boxed_opaque_existential_1(v111, (uint64_t)v112);
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  uint64_t v45 = (uint64_t)v39;
  uint64_t v46 = *(void (**)(char *, unint64_t *))(v34 + 8);
  char v108 = v33;
  v46(v36, v33);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v45, 1, v47) == 1)
  {
    id v49 = v97;
    outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    __swift_project_boxed_opaque_existential_1(v111, (uint64_t)v112);
    CRRegister.value.getter();
    uint64_t v50 = (uint64_t)v99;
    uint64_t v51 = v108;
    SharedTagged_2.tagged2.getter();
    v46(v36, v51);
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
    uint64_t v53 = *(void *)(v52 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v50, 1, v52) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      double v54 = *MEMORY[0x263F001A0];
    }
    else
    {
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v50, v52);
      uint64_t v73 = v83;
      uint64_t v74 = v84;
      uint64_t v75 = v85;
      uint64_t v76 = (*(uint64_t (**)(char *, char *, uint64_t))(v83 + 32))(v84, v49, v85);
      double v77 = MEMORY[0x270FA5388](v76);
      *(&v82 - 2) = (uint64_t)v111;
      double v54 = specialized Sequence.reduce<A>(_:_:)(v86, (uint64_t)(&v82 - 4), v77, v78, v79, v80);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
    }
  }
  else
  {
    uint64_t v55 = (uint64_t)v90;
    Ref.subscript.getter();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v45, v47);
    outlined init with take of Shape(v55, v107, type metadata accessor for PKStrokeStruct);
    uint64_t v109 = (uint64_t)v113;
    char v108 = __swift_project_boxed_opaque_existential_1(v111, (uint64_t)v112);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    uint64_t v56 = (uint64_t)v94;
    CRRegister.wrappedValue.getter();
    uint64_t v57 = v95;
    double v58 = v92;
    uint64_t v59 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v92, v56 + *(int *)(v93 + 32), v96);
    outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v56, type metadata accessor for PKStrokeProperties);
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
    id isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
    char v108 = v113;
    uint64_t v109 = (uint64_t)v112;
    uint64_t v99 = __swift_project_boxed_opaque_existential_1(v111, (uint64_t)v112);
    uint64_t v97 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.getter();
    uint64_t v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 6);
    Swift::OpaquePointer v61 = (void (**)(char *, uint64_t))(v98 + 1);
    for (uint64_t i = (void (**)(char *, char *, uint64_t))(v98 + 4); ; (*i)(v28, v15, v24))
    {
      __swift_project_boxed_opaque_existential_1(v111, (uint64_t)v112);
      Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      CRRegister.wrappedValue.getter();
      outlined destroy of MagicPaperUsageHandwritingSynthesisEvent((uint64_t)v23, type metadata accessor for PKStrokeInheritedProperties);
      Swift::OpaquePointer v63 = *v60;
      if ((*v60)(v15, 1, v24) == 1) {
        break;
      }
      (*v61)(v28, v24);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    uint64_t v64 = (uint64_t)v100;
    Ref.subscript.getter();
    char v108 = (unint64_t *)*v61;
    uint64_t v109 = (uint64_t)v61;
    ((void (*)(char *, uint64_t))v108)(v28, v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    CRRegister.wrappedValue.getter();
    uint64_t v99 = v114;
    outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v64, type metadata accessor for PKStrokeInheritedProperties);
    uint64_t v98 = v113;
    uint64_t v100 = v112;
    uint64_t v96 = (uint64_t)__swift_project_boxed_opaque_existential_1(v111, (uint64_t)v112);
    uint64_t v65 = v101;
    CRRegister.wrappedValue.getter();
    uint64_t v66 = (uint64_t)v102;
    uint64_t v67 = (uint64_t)v110;
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v111, (uint64_t)v112);
      Ref.subscript.getter();
      CRRegister.wrappedValue.getter();
      outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v67, type metadata accessor for PKStrokeInheritedProperties);
      if (v63((char *)v66, 1, v24) == 1) {
        break;
      }
      ((void (*)(char *, uint64_t))v108)(v65, v24);
      (*i)(v65, (char *)v66, v24);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v66, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    uint64_t v68 = (uint64_t)v103;
    Ref.subscript.getter();
    ((void (*)(char *, uint64_t))v108)(v65, v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
    CRRegister.wrappedValue.getter();
    outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v68, type metadata accessor for PKStrokeInheritedProperties);
    v116.value.super.id isa = (Class)&v114;
    uint64_t v69 = isa;
    uint64_t v70 = v107;
    v115.value.super.id isa = isa;
    uint64_t v71 = v99;
    v115.is_nil = (char)v99;
    *(void *)&double v54 = (unint64_t)PKStrokeStruct.bounds(path:ink:transform:)(v115, v116, v72);

    outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v104, type metadata accessor for PKStrokePathStruct);
    outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(v70, type metadata accessor for PKStrokeStruct);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
  return v54;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  uint64_t v46 = a2;
  uint64_t v45 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v42 = (char *)&v35 - v10;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v36 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v48 = MEMORY[0x263F8EE78];
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v11;
  uint64_t v40 = v9 + 32;
  uint64_t v41 = v9 + 16;
  unint64_t v39 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v43 = v9;
  int64_t v37 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v47 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v17 = (uint64_t)v44;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v20 < v37)
    {
      unint64_t v21 = *(void *)(v36 + 8 * v20);
      ++v16;
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 2;
      if (v20 + 2 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 3;
      if (v20 + 3 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21)
      {
LABEL_23:
        unint64_t v14 = (v21 - 1) & v21;
        for (unint64_t i = __clz(__rbit64(v21)) + (v16 << 6); ; unint64_t i = v18 | (v16 << 6))
        {
          uint64_t v24 = v42;
          uint64_t v23 = v43;
          (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, *(void *)(v47 + 48) + *(void *)(v43 + 72) * i, v5);
          uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v8, v24, v5);
          uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v46) + 0x2F8))(v25);
          uint64_t v28 = v27;
          uint64_t ObjectType = swift_getObjectType();
          MEMORY[0x21054B9C0](v5);
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 32))(ObjectType, v28);

          if (*(void *)(v30 + 16) && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v32 & 1) != 0))
          {
            id v33 = *(id *)(*(void *)(v30 + 56) + 8 * v31);
            swift_bridgeObjectRelease();
            (*v39)(v17, v45);
            uint64_t v34 = (*v38)(v8, v5);
            MEMORY[0x21054D330](v34);
            if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            uint64_t result = specialized Array._endMutation()();
            if (!v14) {
              goto LABEL_8;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            (*v39)(v17, v45);
            uint64_t result = (*v38)(v8, v5);
            if (!v14) {
              goto LABEL_8;
            }
          }
LABEL_7:
          unint64_t v18 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
        }
      }
      int64_t v22 = v20 + 4;
      if (v22 < v37)
      {
        unint64_t v21 = *(void *)(v36 + 8 * v22);
        if (v21)
        {
          int64_t v16 = v22;
          goto LABEL_23;
        }
        while (1)
        {
          int64_t v16 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_32;
          }
          if (v16 >= v37) {
            break;
          }
          unint64_t v21 = *(void *)(v36 + 8 * v16);
          ++v22;
          if (v21) {
            goto LABEL_23;
          }
        }
      }
    }
LABEL_30:
    swift_release();
    return v48;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t (**v38)(char *, uint64_t);
  void (**v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v46 = a2;
  uint64_t v45 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v42 = (char *)&v35 - v10;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v36 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v48 = MEMORY[0x263F8EE78];
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v11;
  uint64_t v40 = v9 + 32;
  uint64_t v41 = v9 + 16;
  unint64_t v39 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v43 = v9;
  int64_t v37 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v47 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v17 = (uint64_t)v44;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v20 < v37)
    {
      unint64_t v21 = *(void *)(v36 + 8 * v20);
      ++v16;
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 2;
      if (v20 + 2 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 3;
      if (v20 + 3 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21)
      {
LABEL_23:
        unint64_t v14 = (v21 - 1) & v21;
        for (unint64_t i = __clz(__rbit64(v21)) + (v16 << 6); ; unint64_t i = v18 | (v16 << 6))
        {
          uint64_t v24 = v42;
          uint64_t v23 = v43;
          (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, *(void *)(v47 + 48) + *(void *)(v43 + 72) * i, v5);
          uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v8, v24, v5);
          uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v46) + 0x2F8))(v25);
          uint64_t v28 = v27;
          uint64_t ObjectType = swift_getObjectType();
          MEMORY[0x21054B9C0](v5);
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 32))(ObjectType, v28);

          if (*(void *)(v30 + 16) && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v32 & 1) != 0))
          {
            id v33 = *(id *)(*(void *)(v30 + 56) + 8 * v31);
            swift_bridgeObjectRelease();
            (*v39)(v17, v45);
            uint64_t v34 = (*v38)(v8, v5);
            MEMORY[0x21054D330](v34);
            if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            uint64_t result = specialized Array._endMutation()();
            if (!v14) {
              goto LABEL_8;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            (*v39)(v17, v45);
            uint64_t result = (*v38)(v8, v5);
            if (!v14) {
              goto LABEL_8;
            }
          }
LABEL_7:
          unint64_t v18 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
        }
      }
      int64_t v22 = v20 + 4;
      if (v22 < v37)
      {
        unint64_t v21 = *(void *)(v36 + 8 * v22);
        if (v21)
        {
          int64_t v16 = v22;
          goto LABEL_23;
        }
        while (1)
        {
          int64_t v16 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_32;
          }
          if (v16 >= v37) {
            break;
          }
          unint64_t v21 = *(void *)(v36 + 8 * v16);
          ++v22;
          if (v21) {
            goto LABEL_23;
          }
        }
      }
    }
LABEL_30:
    swift_release();
    return v48;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  unint64_t v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t result = MEMORY[0x263F8EE78];
  int64_t v20 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *(void *)(type metadata accessor for CRKeyPath() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a2) + 0x2F8);
    uint64_t v9 = *(void *)(v6 + 72);
    uint64_t v10 = swift_bridgeObjectRetain();
    do
    {
      uint64_t v11 = (void *)v8(v10);
      uint64_t v13 = v12;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(ObjectType, v13);

      if (*(void *)(v15 + 16) && (int64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v17 & 1) != 0))
      {
        unint64_t v18 = *(id *)(*(void *)(v15 + 56) + 8 * v16);
        uint64_t v19 = swift_bridgeObjectRelease();
        MEMORY[0x21054D330](v19);
        if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t v10 = specialized Array._endMutation()();
      }
      else
      {
        uint64_t v10 = swift_bridgeObjectRelease();
      }
      v7 += v9;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v20;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t (**v38)(char *, uint64_t);
  void (**v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v46 = a2;
  uint64_t v45 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = (char *)&v35 - v10;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v36 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v48 = MEMORY[0x263F8EE78];
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v11;
  uint64_t v40 = v9 + 32;
  uint64_t v41 = v9 + 16;
  unint64_t v39 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v43 = v9;
  int64_t v37 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v47 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v17 = (uint64_t)v44;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v20 < v37)
    {
      unint64_t v21 = *(void *)(v36 + 8 * v20);
      ++v16;
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 2;
      if (v20 + 2 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 3;
      if (v20 + 3 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21)
      {
LABEL_23:
        unint64_t v14 = (v21 - 1) & v21;
        for (unint64_t i = __clz(__rbit64(v21)) + (v16 << 6); ; unint64_t i = v18 | (v16 << 6))
        {
          uint64_t v24 = v42;
          uint64_t v23 = v43;
          (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, *(void *)(v47 + 48) + *(void *)(v43 + 72) * i, v5);
          uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v7, v24, v5);
          uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v46) + 0x2F8))(v25);
          uint64_t v28 = v27;
          uint64_t ObjectType = swift_getObjectType();
          MEMORY[0x21054B9C0](v5);
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 32))(ObjectType, v28);

          if (*(void *)(v30 + 16) && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v32 & 1) != 0))
          {
            id v33 = *(id *)(*(void *)(v30 + 56) + 8 * v31);
            swift_bridgeObjectRelease();
            (*v39)(v17, v45);
            uint64_t v34 = (*v38)(v7, v5);
            MEMORY[0x21054D330](v34);
            if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            uint64_t result = specialized Array._endMutation()();
            if (!v14) {
              goto LABEL_8;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            (*v39)(v17, v45);
            uint64_t result = (*v38)(v7, v5);
            if (!v14) {
              goto LABEL_8;
            }
          }
LABEL_7:
          unint64_t v18 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
        }
      }
      int64_t v22 = v20 + 4;
      if (v22 < v37)
      {
        unint64_t v21 = *(void *)(v36 + 8 * v22);
        if (v21)
        {
          int64_t v16 = v22;
          goto LABEL_23;
        }
        while (1)
        {
          int64_t v16 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_32;
          }
          if (v16 >= v37) {
            break;
          }
          unint64_t v21 = *(void *)(v36 + 8 * v16);
          ++v22;
          if (v21) {
            goto LABEL_23;
          }
        }
      }
    }
LABEL_30:
    swift_release();
    return v48;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(uint64_t, uint64_t);
  uint64_t (**v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  uint64_t v3 = v2;
  id v49 = a1;
  uint64_t v50 = a2;
  uint64_t v47 = type metadata accessor for CRKeyPath();
  unint64_t v39 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v51 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v41 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v52 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v40 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v54 = MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v49, v10, v15);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  dispatch thunk of Sequence.makeIterator()();
  unint64_t v18 = *(void *)((*MEMORY[0x263F8EED0] & *v50) + 0x4D8);
  uint64_t v45 = *(void *)((*MEMORY[0x263F8EED0] & *v50) + 0x4D0);
  uint64_t v46 = (void *)((char *)v50 + v18);
  swift_beginAccess();
  uint64_t v19 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v48 = v17;
  id v49 = v14;
  uint64_t v44 = v19;
  dispatch thunk of IteratorProtocol.next()();
  int64_t v20 = v41;
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  uint64_t v43 = v41 + 48;
  if (v42(v9, 1, v5) == 1)
  {
    unint64_t v21 = MEMORY[0x263F8EE78];
LABEL_16:
    (*(void (**)(char *, uint64_t))(v40 + 8))(v48, v49);
    return v21;
  }
  else
  {
    uint64_t v23 = *(void *)(v20 + 32);
    int64_t v22 = v20 + 32;
    uint64_t v41 = v23;
    uint64_t v24 = (void (**)(uint64_t, uint64_t))(v39 + 8);
    uint64_t v25 = (uint64_t (**)(char *, uint64_t))(v22 - 24);
    while (1)
    {
      uint64_t v26 = v22;
      ((void (*)(char *, char *, uint64_t))v41)(v52, v9, v5);
      MEMORY[0x21054BEC0](v5);
      uint64_t v27 = *v46;
      uint64_t v28 = *(void **)((char *)v50 + v45);
      swift_bridgeObjectRetain();
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = FormFillingView.unorderedFormFields.getter();
      }
      else
      {
        uint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v53 = v27;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v30, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v53);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      char v32 = v53;
      swift_bridgeObjectRelease();
      id v33 = v51;
      if (*(void *)(v32 + 16) && (uint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v51), (v35 & 1) != 0))
      {
        uint64_t v36 = *(id *)(*(void *)(v32 + 56) + 8 * v34);
        swift_bridgeObjectRelease();
        (*v24)(v33, v47);
        int64_t v37 = (*v25)(v52, v5);
        MEMORY[0x21054D330](v37);
        if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_bridgeObjectRelease();
        (*v24)(v33, v47);
        (*v25)(v52, v5);
      }
      dispatch thunk of IteratorProtocol.next()();
      int64_t v22 = v26;
      if (v42(v9, 1, v5) == 1)
      {
        unint64_t v21 = v54;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t (**v38)(char *, uint64_t);
  void (**v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v46 = a2;
  uint64_t v45 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = (char *)&v35 - v10;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v36 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v48 = MEMORY[0x263F8EE78];
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v11;
  uint64_t v40 = v9 + 32;
  uint64_t v41 = v9 + 16;
  unint64_t v39 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v43 = v9;
  int64_t v37 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v47 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v17 = (uint64_t)v44;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v20 < v37)
    {
      unint64_t v21 = *(void *)(v36 + 8 * v20);
      ++v16;
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 2;
      if (v20 + 2 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21) {
        goto LABEL_23;
      }
      int64_t v16 = v20 + 3;
      if (v20 + 3 >= v37) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (v21)
      {
LABEL_23:
        unint64_t v14 = (v21 - 1) & v21;
        for (unint64_t i = __clz(__rbit64(v21)) + (v16 << 6); ; unint64_t i = v18 | (v16 << 6))
        {
          uint64_t v24 = v42;
          uint64_t v23 = v43;
          (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, *(void *)(v47 + 48) + *(void *)(v43 + 72) * i, v5);
          uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v7, v24, v5);
          uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v46) + 0x2F8))(v25);
          uint64_t v28 = v27;
          uint64_t ObjectType = swift_getObjectType();
          MEMORY[0x21054B9C0](v5);
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 32))(ObjectType, v28);

          if (*(void *)(v30 + 16) && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v32 & 1) != 0))
          {
            id v33 = *(id *)(*(void *)(v30 + 56) + 8 * v31);
            swift_bridgeObjectRelease();
            (*v39)(v17, v45);
            uint64_t v34 = (*v38)(v7, v5);
            MEMORY[0x21054D330](v34);
            if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            uint64_t result = specialized Array._endMutation()();
            if (!v14) {
              goto LABEL_8;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            (*v39)(v17, v45);
            uint64_t result = (*v38)(v7, v5);
            if (!v14) {
              goto LABEL_8;
            }
          }
LABEL_7:
          unint64_t v18 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
        }
      }
      int64_t v22 = v20 + 4;
      if (v22 < v37)
      {
        unint64_t v21 = *(void *)(v36 + 8 * v22);
        if (v21)
        {
          int64_t v16 = v22;
          goto LABEL_23;
        }
        while (1)
        {
          int64_t v16 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_32;
          }
          if (v16 >= v37) {
            break;
          }
          unint64_t v21 = *(void *)(v36 + 8 * v16);
          ++v22;
          if (v21) {
            goto LABEL_23;
          }
        }
      }
    }
LABEL_30:
    swift_release();
    return v48;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void *specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v5 - 4, a1) : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if (objc_msgSend(a2, sel_isDescendantOfView_, v6))
      {
        swift_bridgeObjectRelease();
        return v7;
      }

      ++v5;
      if (v8 == v4) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v5 & 0xC000000000000001;
    uint64_t v19 = v3;
    uint64_t v20 = v5 + 32;
    uint64_t v23 = v5;
    unint64_t v24 = a2 & 0xC000000000000001;
    unint64_t v9 = a2 >> 62;
    unint64_t v21 = v5 & 0xC000000000000001;
    uint64_t v22 = v6;
    while (1)
    {
      if (v8)
      {
        id v10 = (id)MEMORY[0x21054E050](v7, v5);
        if (!v9) {
          goto LABEL_6;
        }
      }
      else
      {
        id v10 = *(id *)(v20 + 8 * v7);
        if (!v9)
        {
LABEL_6:
          uint64_t v11 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v11) {
            goto LABEL_14;
          }
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (!v11)
      {
LABEL_14:

        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
LABEL_7:
      if (v24) {
        id v12 = (id)MEMORY[0x21054E050](0, a2);
      }
      else {
        id v12 = *(id *)(a2 + 32);
      }
      uint64_t v5 = (uint64_t)v12;
      type metadata accessor for AnyCanvasElementView();
      char v13 = static NSObject.== infix(_:_:)();

      if (v13)
      {
LABEL_31:

        swift_bridgeObjectRelease();
        return v7;
      }
      if (v11 != 1) {
        break;
      }

      swift_bridgeObjectRelease();
LABEL_26:
      uint64_t v6 = v22;
      uint64_t v5 = v23;
      unint64_t v9 = a2 >> 62;
      unint64_t v8 = v21;
LABEL_27:
      if (__OFADD__(v7++, 1)) {
        goto LABEL_34;
      }
      if (v7 == v6) {
        return 0;
      }
    }
    if (v24)
    {
      uint64_t v5 = 1;
      while (1)
      {
        MEMORY[0x21054E050](v5, a2);
        uint64_t v3 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          break;
        }
        char v14 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if (v14) {
          goto LABEL_31;
        }
        ++v5;
        if (v3 == v11) {
          goto LABEL_25;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v15 = 5;
      while (1)
      {
        uint64_t v3 = v15 - 3;
        if (__OFADD__(v15 - 4, 1)) {
          break;
        }
        uint64_t v5 = (uint64_t)*(id *)(a2 + 8 * v15);
        char v16 = static NSObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_31;
        }
        ++v15;
        if (v3 == v11)
        {
LABEL_25:

          swift_bridgeObjectRelease();
          uint64_t v3 = v19;
          goto LABEL_26;
        }
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t *a1, unint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v37 = a2;
  unint64_t v6 = specialized Collection.firstIndex(where:)(v5, a2);
  char v8 = v7;
  uint64_t v9 = v2;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if ((v8 & 1) == 0)
  {
    unint64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_82;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_83:
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 != v32) {
        goto LABEL_6;
      }
    }
    else if (v10 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      uint64_t v35 = v9;
      unint64_t v36 = v37 & 0xC000000000000001;
      uint64_t v34 = a1;
      while (1)
      {
        uint64_t v11 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v12 = (id)MEMORY[0x21054E050](v10);
        }
        else
        {
          if ((v10 & 0x8000000000000000) != 0) {
            goto LABEL_71;
          }
          if (v10 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_72;
          }
          id v12 = *(id *)(v11 + 8 * v10 + 32);
        }
        char v13 = v12;
        if (v37 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
          if (!v14) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v14 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v14) {
            goto LABEL_22;
          }
        }
        if (v36) {
          id v15 = (id)MEMORY[0x21054E050](0, v37);
        }
        else {
          id v15 = *(id *)(v37 + 32);
        }
        char v16 = v15;
        type metadata accessor for AnyCanvasElementView();
        char v17 = static NSObject.== infix(_:_:)();

        if (v17)
        {

          swift_bridgeObjectRelease();
          BOOL v18 = __OFADD__(v10++, 1);
          if (v18) {
            goto LABEL_73;
          }
          goto LABEL_43;
        }
        if (v14 != 1)
        {
          if (v36)
          {
            uint64_t v28 = 1;
            while (1)
            {
              MEMORY[0x21054E050](v28, v37);
              a1 = (uint64_t *)(v28 + 1);
              if (__OFADD__(v28, 1)) {
                break;
              }
              uint64_t v9 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if (v9) {
                goto LABEL_59;
              }
              ++v28;
              if (a1 == (uint64_t *)v14) {
                goto LABEL_57;
              }
            }
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
            goto LABEL_74;
          }
          uint64_t v9 = 5;
          while (1)
          {
            a1 = (uint64_t *)(v9 - 3);
            if (__OFADD__(v9 - 4, 1)) {
              break;
            }
            id v29 = *(id *)(v37 + 8 * v9);
            char v30 = static NSObject.== infix(_:_:)();

            if (v30)
            {
LABEL_59:

              swift_bridgeObjectRelease();
              a1 = v34;
              uint64_t v9 = v35;
              BOOL v18 = __OFADD__(v10++, 1);
              if (v18) {
                goto LABEL_73;
              }
              goto LABEL_43;
            }
            ++v9;
            if (a1 == (uint64_t *)v14)
            {
LABEL_57:

              swift_bridgeObjectRelease();
              a1 = v34;
              uint64_t v9 = v35;
              if (v6 != v10) {
                goto LABEL_23;
              }
              goto LABEL_41;
            }
          }
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
LABEL_22:

        swift_bridgeObjectRelease();
        if (v6 == v10) {
          goto LABEL_41;
        }
LABEL_23:
        uint64_t v19 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v20 = (id)MEMORY[0x21054E050](v6, *a1);
          uint64_t v19 = *a1;
          if ((*a1 & 0xC000000000000001) == 0) {
            goto LABEL_27;
          }
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_76;
          }
          if (v6 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_77;
          }
          id v20 = *(id *)(v19 + 8 * v6 + 32);
          if ((v19 & 0xC000000000000001) == 0)
          {
LABEL_27:
            if ((v10 & 0x8000000000000000) != 0) {
              goto LABEL_78;
            }
            if (v10 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_79;
            }
            id v21 = *(id *)(v19 + 8 * v10 + 32);
            goto LABEL_30;
          }
        }
        id v21 = (id)MEMORY[0x21054E050](v10, v19);
        uint64_t v19 = *a1;
LABEL_30:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v19;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v19 < 0 || (v19 & 0x4000000000000000) != 0)
        {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          *a1 = v19;
        }
        uint64_t v23 = *(void **)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
        *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x2CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v21;

        specialized Array._endMutation()();
        uint64_t v24 = *a1;
        int v25 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v24;
        if (!v25 || v24 < 0 || (v24 & 0x4000000000000000) != 0)
        {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
          *a1 = v24;
        }
        if ((v10 & 0x8000000000000000) != 0) {
          goto LABEL_80;
        }
        if (v10 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_81;
        }
        uint64_t v26 = *(void **)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v10 + 0x20);
        *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v10 + 0x2CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v20;

        specialized Array._endMutation()();
LABEL_41:
        BOOL v18 = __OFADD__(v6++, 1);
        if (v18) {
          goto LABEL_75;
        }
        BOOL v18 = __OFADD__(v10++, 1);
        if (v18) {
          goto LABEL_73;
        }
LABEL_43:
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v27 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v10 == v27) {
          return v6;
        }
      }
    }
    return v6;
  }
  if (!((unint64_t)*a1 >> 62)) {
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t sub_20C48BE7C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(void *a1)
{
  return closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_20C48BEC4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void specialized ContainerCanvasElementView.recordRemoveMembersAnalytics(_:)()
{
  v4[1] = *MEMORY[0x263F8EED0] & *v0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x270FA5388](v1);
  MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)v4 - v3;
  unint64_t v5 = v0;
  ContainerCanvasElementView.canvas.getter();
}

void specialized ContainerCanvasElementView.convertToHandwriting(members:)()
{
  uint64_t v0 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v0);
  v19[12] = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[11] = v1;
  MEMORY[0x270FA5388](v2);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v19[19] = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  v19[10] = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v19[18] = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  v19[16] = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v21 = (char *)v19 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v23 = (char *)v19 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v9 - 8);
  v19[17] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v19[13] = (char *)v19 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  MEMORY[0x270FA5388](v13);
  void v19[9] = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v19[14] = (char *)v19 - v16;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  v19[15] = (char *)v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  ContainerCanvasElementView.canvas.getter();
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute);
  }
  return result;
}

uint64_t sub_20C48D5AC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C48D5E4()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v8 + 8, v5);
}

uint64_t partial apply for closure #3 in ContainerCanvasElementView.convertToHandwriting(members:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  long long v12 = *(_OWORD *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 32);
  uint64_t v8 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #3 in ContainerCanvasElementView.convertToHandwriting(members:)(a1, a2, a3, *(void *)(v3 + 40), *(void *)(v3 + 48), *(void **)(v3 + 56), v3 + v9, *(void *)(v3 + v10), *(void **)(v3 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v3 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v3+ ((((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v12, *((uint64_t *)&v12 + 1), v7);
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t outlined init with copy of MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #4 in closure #3 in ContainerCanvasElementView.convertToHandwriting(members:)()
{
  return closure #1 in closure #4 in closure #3 in ContainerCanvasElementView.convertToHandwriting(members:)(*(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void **)(v0 + 72));
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.remove(members:)()
{
  return closure #1 in ContainerCanvasElementView.remove(members:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_20C48D8B4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #3 in ContainerCanvasElementView.remove(members:)()
{
  FormFillingView.add(_:)(v0[2]);
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElementView.remove(members:)(void *a1)
{
  return closure #1 in closure #1 in ContainerCanvasElementView.remove(members:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(BOOL **)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_20C48D94C()
{
  return 24;
}

__n128 sub_20C48D958(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C48D974()
{
  return 24;
}

__n128 sub_20C48D980(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C48D994()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 33, 7);
}

unint64_t partial apply for implicit closure #1 in Analytics.recordRemoveCanvasElementEvent(type:)()
{
  return implicit closure #1 in Analytics.recordRemoveCanvasElementEvent(type:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_20C48D9D8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in ContainerCanvasElementView.recordRemoveMembersAnalytics(_:)(uint64_t a1)
{
  return closure #2 in ContainerCanvasElementView.recordRemoveMembersAnalytics(_:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined destroy of MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)()
{
  return closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 48), *(void *)(v0 + 56), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(void *a1)
{
  return closure #1 in closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(a1, *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48));
}

uint64_t outlined init with take of Shape(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *_So13PKStrokeFlagsa34__Unnamed_union___Anonymous_field0V02__c10_struct___e1_F0V_isPastedStroke_setter(void *result)
{
  *result |= 0x80000000000uLL;
  return result;
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)()
{
  return closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)(*(void **)(v0 + 40), *(void *)(v0 + 48), *(void **)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

unint64_t partial apply for implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)()
{
  return implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)(a1, v2[7], v2[2], v2[4], v2[5], v2[6], a2);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for ReflowElement);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 < v3) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 - v9;
  if (__OFADD__(v10, v8)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v7;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v7 >> 62) {
    goto LABEL_39;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = MEMORY[0x21054E060](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *uint64_t v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v6(0);
  swift_arrayDestroy();
  if (v8)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v22 - v3;
      if (!__OFSUB__(v22, v3))
      {
LABEL_21:
        if (v16 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v17 = (const void *)(v13 + 32 + 8 * v3);
        if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v17 + 8 * v16) {
          memmove((void *)(v13 + 32 + 8 * v5), v17, 8 * v16);
        }
        if (!(v7 >> 62))
        {
          uint64_t v18 = *(void *)(v13 + 16);
          uint64_t v19 = v18 + v8;
          if (!__OFADD__(v18, v8))
          {
LABEL_27:
            *(void *)(v13 + 16) = v19;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v19 = v23 + v8;
        if (!__OFADD__(v23, v8)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v3;
      if (!__OFSUB__(v15, v3)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  return specialized Array._endMutation()();
}

uint64_t lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of PageId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PageId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageOverlayView);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      void v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void closure #1 in CRRegister<>.bounds(in:)partial apply(CGFloat *a1@<X0>, CGRect *a2@<X8>)
{
}

uint64_t protocol witness for PaperKitLiveStreamMessenger.send(thumbnail:) in conformance ExtensionViewController.LiveStreamMessenger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PaperKitLiveStreamMessenger.send(thumbnail:)(a1, a2, a3, a4);
}

uint64_t PaperKitLiveStreamMessenger.send(thumbnail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t PaperKitLiveStreamMessengerLink.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(a1, a2, a4, a5);
}

void PaperKitLiveStreamMessengerLink.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a2;
  uint64_t v5 = type metadata accessor for CRAsset();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v9 - 8);
  int64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_semaphore_t v12 = dispatch_semaphore_create(0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v15 = (v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = 0;
  *((void *)v16 + 3) = 0;
  uint64_t v17 = v21;
  *((void *)v16 + 4) = v20;
  *((void *)v16 + 5) = v17;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v16[v14], v8, v5);
  *(void *)&v16[v15] = v22;
  *(void *)&v16[(v15 + 15) & 0xFFFFFFFFFFFFFFF8] = v12;
  swift_unknownObjectRetain();
  uint64_t v18 = v12;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in PaperKitLiveStreamMessengerLink.send(_:), (uint64_t)v16);
  swift_release();
  OS_dispatch_semaphore.wait()();
}

uint64_t closure #1 in PaperKitLiveStreamMessengerLink.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a7;
  v8[8] = a8;
  void v8[5] = a5;
  v8[6] = a6;
  dispatch_semaphore_t v12 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static ImageThumbnailManager.generateThumbnailMessage(from:)
                                        + async function pointer to specialized static ImageThumbnailManager.generateThumbnailMessage(from:));
  uint64_t v10 = (void *)swift_task_alloc();
  v8[9] = v10;
  void *v10 = v8;
  v10[1] = closure #1 in PaperKitLiveStreamMessengerLink.send(_:);
  return v12(a4);
}

uint64_t closure #1 in PaperKitLiveStreamMessengerLink.send(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  v3[10] = a2;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in PaperKitLiveStreamMessengerLink.send(_:), 0, 0);
}

uint64_t closure #1 in PaperKitLiveStreamMessengerLink.send(_:)()
{
  unint64_t v1 = v0[10];
  if (v1 >> 60 != 15)
  {
    uint64_t v2 = v0[3];
    (*(void (**)(uint64_t, void, void))(v0[8] + 32))(v2, v0[10], v0[7]);
    outlined consume of Data?(v2, v1);
  }
  OS_dispatch_semaphore.signal()();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t protocol witness for CRMulticastLink.send(_:) in conformance PaperKitLiveStreamMessengerLink<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PaperKitLiveStreamMessengerLink.send(_:)(a1, a2, *v3, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void protocol witness for CRMulticastLink.send(_:) in conformance PaperKitLiveStreamMessengerLink<A>(uint64_t a1, uint64_t a2)
{
  PaperKitLiveStreamMessengerLink.send(_:)(a1, *v2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v71 = a6;
  uint64_t v72 = a7;
  uint64_t v75 = a5;
  uint64_t v62 = a4;
  uint64_t v60 = a3;
  uint64_t v53 = a2;
  id v61 = a1;
  uint64_t v73 = a9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v67 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v68 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v69 = AssociatedTypeWitness;
  uint64_t v70 = *(void *)(v68 + 64);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v66 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v74 = (char *)&v53 - v16;
  uint64_t v56 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  uint64_t v55 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  double v54 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = a10;
  uint64_t v57 = a8;
  uint64_t v18 = type metadata accessor for Capsule();
  uint64_t v19 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v53 - v20;
  uint64_t v22 = type metadata accessor for CRKeyPath();
  uint64_t v63 = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>);
  uint64_t v26 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v64 = v23;
  uint64_t v27 = (v26 + 32) & ~v26;
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_20C835740;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v28 + v27, v53, v22);
  swift_bridgeObjectRetain();
  CRKeyPath.init(_:)();
  v76[0] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance [A]();
  uint64_t v59 = v25;
  CRKeyPath.init<A>(_:)();
  type metadata accessor for CRMulticastSyncManager();
  uint64_t v29 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v21, v60, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v21, 0, 1, v18);
  id v30 = v61;
  MEMORY[0x21054CA80]();
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v62, v56);
  uint64_t v31 = CRMulticastSyncManager.__allocating_init(_:model:appFormat:identifier:catchup:)();
  uint64_t v33 = v72;
  uint64_t v32 = v73;
  v76[3] = type metadata accessor for PaperKitLiveStreamMessengerLink();
  v76[4] = swift_getWitnessTable();
  v76[0] = v65;
  swift_unknownObjectRetain();
  uint64_t v60 = v31;
  CRMulticastSyncManager.setLink(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
  uint64_t v34 = ObjectIdentifier.debugDescription.getter();
  id v61 = v35;
  uint64_t v62 = v34;
  unint64_t v36 = v74;
  (*(void (**)(uint64_t, uint64_t))(v32 + 40))(v33, v32);
  uint64_t v37 = type metadata accessor for TaskPriority();
  uint64_t v38 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v67, 1, 1, v37);
  uint64_t v39 = swift_allocObject();
  swift_weakInit();
  uint64_t v41 = v68;
  uint64_t v40 = v69;
  uint64_t v42 = v66;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v66, v36, v69);
  type metadata accessor for MainActor();
  uint64_t v43 = v71;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v44 = static MainActor.shared.getter();
  unint64_t v45 = (*(unsigned __int8 *)(v41 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  unint64_t v46 = (v70 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v47 = (char *)swift_allocObject();
  uint64_t v48 = MEMORY[0x263F8F500];
  *((void *)v47 + 2) = v44;
  *((void *)v47 + 3) = v48;
  uint64_t v49 = v57;
  *((void *)v47 + 4) = v72;
  *((void *)v47 + 5) = v49;
  uint64_t v50 = v58;
  *((void *)v47 + 6) = v73;
  *((void *)v47 + 7) = v50;
  *((void *)v47 + 8) = v75;
  *((void *)v47 + 9) = v43;
  id v51 = v61;
  *((void *)v47 + 1CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v62;
  *((void *)v47 + 11) = v51;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v47[v45], v42, v40);
  *(void *)&v47[v46] = v39;
  swift_release();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v38, (uint64_t)&async function pointer to partial apply for closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:), (uint64_t)v47);
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v74, v40);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v59, v63);
  return v60;
}

uint64_t closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned char v8[16] = a8;
  v8[17] = v16;
  v8[14] = a6;
  v8[15] = a7;
  v8[12] = a4;
  v8[13] = a5;
  swift_getAssociatedTypeWitness();
  v8[18] = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[19] = AssociatedTypeWitness;
  v8[20] = *(void *)(AssociatedTypeWitness - 8);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  uint64_t v10 = swift_checkMetadataState();
  v8[23] = v10;
  unsigned char v8[24] = *(void *)(v10 - 8);
  v8[25] = swift_task_alloc();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v8[26] = v11;
  v8[27] = *(void *)(v11 - 8);
  v8[28] = swift_task_alloc();
  v8[29] = type metadata accessor for MainActor();
  v8[30] = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[31] = v13;
  v8[32] = v12;
  return MEMORY[0x270FA2498](closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:), v13, v12);
}

uint64_t closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)()
{
  uint64_t v19 = v0;
  if (one-time initialization token for multipeerLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[33] = __swift_project_value_buffer(v1, (uint64_t)multipeerLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[15];
  if (v4)
  {
    uint64_t v16 = v0[12];
    unint64_t v6 = v0[13];
    uint64_t v17 = v0[14];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v18 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v6, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v5, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_20C2D7000, v2, v3, "Started forwarding %s message stream for %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v8, -1, -1);
    MEMORY[0x210550270](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(void, void, void))(v0[24] + 16))(v0[25], v0[16], v0[23]);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v9 = static MainActor.shared.getter();
  v0[34] = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[35] = AssociatedConformanceWitness;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[36] = v11;
  void *v11 = v0;
  v11[1] = closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:);
  uint64_t v12 = v0[26];
  uint64_t v13 = v0[22];
  uint64_t v14 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA1E88](v0 + 5, v9, v14, v13, v12, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_release();
  os_log_type_t v3 = *(void *)(v2 + 256);
  BOOL v4 = *(void *)(v2 + 248);
  if (v0) {
    unint64_t v5 = closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:);
  }
  else {
    unint64_t v5 = closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;

  uint64_t v33 = v0;
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  v0[37] = v1;
  v0[38] = v2;
  if (v2 >> 60 == 15)
  {
    (*(void (**)(void, void))(v0[27] + 8))(v0[28], v0[26]);
    swift_release();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    os_log_type_t v3 = Logger.logObject.getter();
    BOOL v4 = static os_log_type_t.debug.getter();
    unint64_t v5 = os_log_type_enabled(v3, v4);
    unint64_t v6 = v0[15];
    if (v5)
    {
      uint64_t v29 = v0[14];
      uint64_t v8 = v0[12];
      uint64_t v7 = v0[13];
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v32 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      swift_bridgeObjectRetain();
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v6, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_20C2D7000, v3, v4, "Ended forwarding %s message stream for %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v10, -1, -1);
      MEMORY[0x210550270](v9, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  if (swift_weakLoadStrong())
  {
    if (CRMulticastSyncManager.isValidMessage(_:)())
    {
      swift_bridgeObjectRetain();
      outlined copy of Data?(v1, v2);
      swift_bridgeObjectRetain();
      outlined copy of Data?(v1, v2);
      uint64_t v11 = Logger.logObject.getter();
      uint64_t v12 = static os_log_type_t.debug.getter();
      uint64_t v13 = os_log_type_enabled(v11, v12);
      uint64_t v14 = v0[13];
      if (v13)
      {
        uint64_t v31 = v11;
        uint64_t v15 = v0[12];
        uint64_t v16 = swift_slowAlloc();
        id v30 = swift_slowAlloc();
        v0[9] = v30;
        *(_DWORD *)uint64_t v16 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)(v16 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v0 + 9);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v16 + 12) = 2048;
        switch(v2 >> 62)
        {
          case 1uLL:
            outlined consume of Data?(v1, v2);
            LODWORD(v17) = HIDWORD(v1) - v1;
            if (__OFSUB__(HIDWORD(v1), v1))
            {
              __break(1u);
              JUMPOUT(0x20C48FC0CLL);
            }
            uint64_t v17 = (int)v17;
            break;
          case 2uLL:
            uint64_t v22 = *(void *)(v1 + 16);
            uint64_t v21 = *(void *)(v1 + 24);
            outlined consume of Data?(v1, v2);
            uint64_t v17 = v21 - v22;
            if (__OFSUB__(v21, v22))
            {
              __break(1u);
              goto LABEL_25;
            }
            break;
          case 3uLL:
LABEL_25:
            outlined consume of Data?(v1, v2);
            uint64_t v17 = 0;
            break;
          default:
            outlined consume of Data?(v1, v2);
            uint64_t v17 = BYTE6(v2);
            break;
        }
        uint64_t v11 = v31;
        *(void *)(v16 + 14) = v17;
        outlined consume of Data?(v1, v2);
        _os_log_impl(&dword_20C2D7000, v31, v12, "Receive %s data %ld", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x210550270](v30, -1, -1);
        MEMORY[0x210550270](v16, -1, -1);
      }
      else
      {
        outlined consume of Data?(v1, v2);
        swift_bridgeObjectRelease_n();
        outlined consume of Data?(v1, v2);
      }

      CRMulticastSyncManager.receive(_:)();
      swift_release();
      outlined consume of Data?(v0[37], v0[38]);
      uint64_t v23 = static MainActor.shared.getter();
      v0[34] = v23;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v0[35] = AssociatedConformanceWitness;
      uint64_t v25 = (void *)swift_task_alloc();
      v0[36] = v25;
      *uint64_t v25 = v0;
      v25[1] = closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:);
      uint64_t v26 = v0[26];
      uint64_t v27 = v0[22];
      uint64_t v28 = MEMORY[0x263F8F500];
      return MEMORY[0x270FA1E88](v0 + 5, v23, v28, v27, v26, AssociatedConformanceWitness);
    }
    swift_release();
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v20 = (void *)swift_task_alloc();
  v0[39] = v20;
  *uint64_t v20 = v0;
  v20[1] = closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:);
  return ImageThumbnailManager.receiveThumbnailMessage(_:)(v1, v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 256);
  os_log_type_t v3 = *(void *)(v1 + 248);
  return MEMORY[0x270FA2498](closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  outlined consume of Data?(v0[37], v0[38]);
  uint64_t v1 = static MainActor.shared.getter();
  v0[34] = v1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[35] = AssociatedConformanceWitness;
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[36] = v3;
  *os_log_type_t v3 = v0;
  v3[1] = closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:);
  BOOL v4 = v0[26];
  unint64_t v5 = v0[22];
  unint64_t v6 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA1E88](v0 + 5, v1, v6, v5, v4, AssociatedConformanceWitness);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  os_log_type_t v3 = v0[19];
  BOOL v4 = v0[20];
  swift_release();
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v5(v2, v1, v3);
  swift_getAssociatedConformanceWitness();
  unint64_t v6 = _getErrorEmbeddedNSError<A>(_:)();
  uint64_t v7 = v0[21];
  if (v6)
  {
    (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  }
  else
  {
    uint64_t v8 = v0[19];
    swift_allocError();
    v5(v9, v7, v8);
  }
  (*(void (**)(void, void))(v0[27] + 8))(v0[28], v0[26]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v45 = a7;
  uint64_t v46 = a8;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v47 = a3;
  uint64_t v44 = a10;
  uint64_t v42 = a4;
  uint64_t v43 = a9;
  uint64_t v10 = *a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v13;
  uint64_t v14 = (uint64_t *)(v10 + *MEMORY[0x263F32F38]);
  uint64_t v15 = *v14;
  uint64_t v41 = v14[1];
  type metadata accessor for Capsule();
  uint64_t v16 = type metadata accessor for AsyncStream();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v23 = ObjectIdentifier.debugDescription.getter();
  uint64_t v38 = v24;
  uint64_t v39 = v23;
  CRMulticastSyncManager.updates.getter();
  uint64_t v25 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v13, 1, 1, v25);
  uint64_t v26 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v22, v16);
  unint64_t v27 = (*(unsigned __int8 *)(v17 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v28 = (v18 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = (char *)swift_allocObject();
  *((void *)v29 + 2) = 0;
  *((void *)v29 + 3) = 0;
  uint64_t v30 = v46;
  *((void *)v29 + 4) = v45;
  *((void *)v29 + 5) = v30;
  uint64_t v31 = v43;
  *((void *)v29 + 6) = v15;
  *((void *)v29 + 7) = v31;
  uint64_t v32 = v41;
  uint64_t v33 = v42;
  *((void *)v29 + 8) = v44;
  *((void *)v29 + 9) = v32;
  *((void *)v29 + 1CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v47;
  *((void *)v29 + 11) = v33;
  uint64_t v34 = v38;
  *((void *)v29 + 12) = v39;
  *((void *)v29 + 13) = v34;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v29[v27], v19, v16);
  *(void *)&v29[v28] = v26;
  uint64_t v35 = &v29[(v28 + 15) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v36 = v49;
  *(void *)uint64_t v35 = v48;
  *((void *)v35 + 1) = v36;
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v40, (uint64_t)async function pointer to partial apply for closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:), (uint64_t)v29);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v16);
}

uint64_t closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 136) = v15;
  *(void *)(v8 + 144) = v16;
  *(void *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 112) = v13;
  *(void *)(v8 + 96) = a7;
  *(void *)(v8 + 104) = a8;
  *(void *)(v8 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = a5;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 72) = a4;
  uint64_t v9 = type metadata accessor for Capsule();
  *(void *)(v8 + 152) = v9;
  *(void *)(v8 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(void *)(v9 - 8);
  *(void *)(v8 + 168) = swift_task_alloc();
  type metadata accessor for Optional();
  *(void *)(v8 + 176) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AsyncStream.Iterator();
  *(void *)(v8 + 184) = v10;
  *(void *)(v8 + 192) = *(void *)(v10 - 8);
  *(void *)(v8 + 20CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:), 0, 0);
}

uint64_t closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)()
{
  uint64_t v16 = v0;
  if (one-time initialization token for multipeerLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[26] = __swift_project_value_buffer(v1, (uint64_t)multipeerLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[12];
  if (v4)
  {
    uint64_t v13 = v0[9];
    unint64_t v6 = v0[10];
    uint64_t v14 = v0[11];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v6, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v5, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_20C2D7000, v2, v3, "Started merging %s multicast stream for %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v8, -1, -1);
    MEMORY[0x210550270](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  type metadata accessor for AsyncStream();
  AsyncStream.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[27] = v9;
  void *v9 = v0;
  v9[1] = closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:);
  uint64_t v10 = v0[22];
  uint64_t v11 = v0[23];
  return MEMORY[0x270FA1F68](v10, 0, 0, v11);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  uint64_t v21 = v0;
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[19];
  os_log_type_t v3 = v0[20];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    BOOL v4 = v0[14] + 16;
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[21], v1, v2);
    unint64_t v5 = MEMORY[0x210550400](v4);
    v0[28] = v5;
    if (v5)
    {
      unint64_t v6 = (void *)swift_task_alloc();
      v0[29] = v6;
      *unint64_t v6 = v0;
      v6[1] = closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:);
      uint64_t v8 = v0[17];
      uint64_t v7 = v0[18];
      return LiveEditable.endedLiveEditing()(v8, v7);
    }
    (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  }
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.debug.getter();
  uint64_t v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[12];
  if (v12)
  {
    uint64_t v14 = v0[10];
    uint64_t v19 = v0[11];
    uint64_t v15 = v0[9];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v20 = v17;
    *(_DWORD *)uint64_t v16 = 136315394;
    swift_bridgeObjectRetain();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_20C2D7000, v10, v11, "Ended merging %s multicast stream for %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v17, -1, -1);
    MEMORY[0x210550270](v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 24CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 120);
  swift_release();
  v2(v1);
  return MEMORY[0x270FA2498](closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  os_log_type_t v3 = v0[19];
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  BOOL v4 = (void *)swift_task_alloc();
  v0[27] = v4;
  *BOOL v4 = v0;
  v4[1] = closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:);
  unint64_t v5 = v0[22];
  unint64_t v6 = v0[23];
  return MEMORY[0x270FA1F68](v5, 0, 0, v6);
}

uint64_t dispatch thunk of PaperKitLiveStreamMessenger.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PaperKitLiveStreamMessenger.send(thumbnail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PaperKitLiveStreamMessenger.messages.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_20C490ED0()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C490F08()
{
  type metadata accessor for Capsule();
  uint64_t v1 = type metadata accessor for AsyncStream();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 112) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, v6 + 16, v5);
}

uint64_t partial apply for closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(uint64_t a1)
{
  type metadata accessor for Capsule();
  uint64_t v3 = *(void *)(type metadata accessor for AsyncStream() - 8);
  uint64_t v12 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v4 = v1[11];
  uint64_t v10 = v1[10];
  uint64_t v5 = v1[12];
  uint64_t v6 = v1[13];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(a1, v12, v11, v10, v4, v5, v6, v7);
}

unint64_t lazy protocol witness table accessor for type [CRKeyPath] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CRKeyPath]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for PaperKitLiveStreamMessengerLink()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_20C491260()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C491298()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 96) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[8];
  uint64_t v7 = v1[9];
  uint64_t v9 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v12 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(a1, v4, v5, v6, v7, v9, v8, v12);
}

uint64_t type metadata instantiation function for PaperKitLiveStreamMessengerLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t sub_20C49153C()
{
  uint64_t v1 = type metadata accessor for CRAsset();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in PaperKitLiveStreamMessengerLink.send(_:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for CRAsset() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + v4);
  uint64_t v7 = *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = swift_task_alloc();
  long long v9 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v8;
  *(void *)uint64_t v8 = v1;
  *(void *)(v8 + 8) = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  *(_OWORD *)(v8 + 56) = v9;
  *(void *)(v8 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v6;
  *(void *)(v8 + 48) = v7;
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static ImageThumbnailManager.generateThumbnailMessage(from:)
                                        + async function pointer to specialized static ImageThumbnailManager.generateThumbnailMessage(from:));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v8 + 72) = v10;
  void *v10 = v8;
  v10[1] = closure #1 in PaperKitLiveStreamMessengerLink.send(_:);
  return v12(v5);
}

void __swiftcall UIView.transformForConvertingFromView(_:)(CGAffineTransform *__return_ptr retstr, UIView *a2)
{
  long long v4 = xmmword_20C8356C0;
  long long v5 = xmmword_20C835600;
  long long v6 = 0uLL;
  if (v2 != a2)
  {
    -[UIView convertRect:fromCoordinateSpace:](v2, sel_convertRect_fromCoordinateSpace_, a2, 0.0, 0.0, 1.0, 1.0);
    CGFloat x = v14.origin.x;
    CGFloat y = v14.origin.y;
    double width = v14.size.width;
    double height = v14.size.height;
    v15.origin.CGFloat x = 0.0;
    v15.origin.CGFloat y = 0.0;
    v15.size.double width = 1.0;
    v15.size.double height = 1.0;
    BOOL v11 = CGRectEqualToRect(v14, v15);
    long long v6 = 0uLL;
    long long v5 = xmmword_20C835600;
    long long v4 = xmmword_20C8356C0;
    if (!v11)
    {
      CGAffineTransformMakeTranslation(&v13, x, y);
      CGAffineTransformScale(&v12, &v13, width + 0.0, height + 0.0);
      long long v5 = *(_OWORD *)&v12.a;
      long long v4 = *(_OWORD *)&v12.c;
      long long v6 = *(_OWORD *)&v12.tx;
    }
  }
  *(_OWORD *)&retstr->CGFloat a = v5;
  *(_OWORD *)&retstr->CGFloat c = v4;
  *(_OWORD *)&retstr->tCGFloat x = v6;
}

Swift::Void __swiftcall CanvasElementPDFAnnotationAppearanceStreamView.draw(_:)(__C::CGRect a1)
{
  double height = a1.size.height;
  double width = a1.size.width;
  double y = a1.origin.y;
  double x = a1.origin.x;
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotationAppearanceStreamView();
  objc_msgSendSuper2(&v13, sel_drawRect_, x, y, width, height);
  uint64_t v6 = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit46CanvasElementPDFAnnotationAppearanceStreamView_annotation]);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = UIGraphicsGetCurrentContext();
    if (v8)
    {
      long long v9 = v8;
      objc_msgSend(v7, sel_bounds);
      CGFloat v11 = -v10;
      objc_msgSend(v7, sel_bounds);
      CGContextTranslateCTM(v9, v11, -v12);
      objc_msgSend(v7, sel_drawWithBox_inContext_, 0, v9);

      uint64_t v7 = v9;
    }
  }
}

uint64_t type metadata accessor for CanvasElementPDFAnnotationAppearanceStreamView()
{
  return self;
}

id CanvasElementPDFAnnotationAppearanceStreamView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void CanvasElementPDFAnnotationAppearanceStreamView.init(frame:)()
{
}

id CanvasElementPDFAnnotationAppearanceStreamView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotationAppearanceStreamView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for CanvasElementPDFAnnotationAppearanceStreamView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CanvasElementPDFAnnotationAppearanceStreamView);
}

uint64_t type metadata completion function for CanvasViewTiledViewDelegate()
{
  return swift_initClassMetadata2();
}

void CanvasViewTiledViewDelegate.canvas.getter()
{
}

uint64_t @objc CanvasViewTiledViewDelegate.canvasView(_:beganStroke:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for PKStroke();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  double v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = a3;
  id v12 = a4;
  id v13 = a1;
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t @objc CanvasViewTiledViewDelegate.canvasView(_:shouldBeginDrawingWith:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  char v9 = specialized CanvasViewTiledViewDelegate.canvasView(_:shouldBeginDrawingWith:)();

  return v9 & 1;
}

unint64_t CanvasViewTiledViewDelegate.tiledViewAttachmentViews()()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + direct field offset for CanvasViewTiledViewDelegate.canvas);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  objc_super v2 = (void *)v1;
  id v3 = (id)specialized Canvas.paperView.getter();

  unint64_t v4 = ContainerCanvasElementView.pencilKitAttachmentViews()();
  return v4;
}

Class @objc CanvasViewTiledViewDelegate.tiledViewAttachmentViews()(void *a1)
{
  id v1 = a1;
  CanvasViewTiledViewDelegate.tiledViewAttachmentViews()();

  type metadata accessor for PKAttachmentView();
  v2.super.id isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v2.super.isa;
}

uint64_t @objc CanvasViewTiledViewDelegate._canvasViewSnapshottingDisabled(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  LOBYTE(a1) = specialized CanvasViewTiledViewDelegate._canvasViewSnapshottingDisabled(_:)();

  return a1 & 1;
}

void @objc CanvasViewTiledViewDelegate.init()()
{
}

id CanvasViewTiledViewDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasViewTiledViewDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc CanvasViewTiledViewDelegate.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasViewTiledViewDelegate()
{
  return __swift_instantiateGenericMetadata();
}

id specialized CanvasViewTiledViewDelegate.init(canvas:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasViewTiledViewDelegate();
  return objc_msgSendSuper2(&v2, sel_init);
}

id specialized CanvasViewTiledViewDelegate.__allocating_init(canvas:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for CanvasViewTiledViewDelegate());
  return specialized CanvasViewTiledViewDelegate.init(canvas:)();
}

uint64_t specialized CanvasViewTiledViewDelegate.canvasView(_:shouldBeginDrawingWith:)()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + direct field offset for CanvasViewTiledViewDelegate.canvas);
  if (!v1) {
    return 1;
  }
  objc_super v2 = (void *)v1;
  id v3 = (char *)CanvasView.paperViewController.getter();

  if (!v3) {
    return 1;
  }
  id v4 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker];
  objc_msgSend(v4, sel__dismissPopovers);
  id v5 = v4;
  unsigned int v6 = objc_msgSend(v5, sel__isHandwritingToolSelected);

  return v6 ^ 1;
}

uint64_t specialized CanvasViewTiledViewDelegate._canvasViewSnapshottingDisabled(_:)()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + direct field offset for CanvasViewTiledViewDelegate.canvas);
  if (!v1) {
    goto LABEL_5;
  }
  objc_super v2 = (void *)v1;
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  if (!MEMORY[0x210550400](v3))
  {

LABEL_5:
    char v6 = 0;
    return v6 & 1;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v4) = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v4 + 56))(v2, ObjectType, v4);
  swift_unknownObjectRelease();

  char v6 = v4 ^ 1;
  return v6 & 1;
}

void specialized CanvasViewTiledViewDelegate.init()()
{
}

unint64_t type metadata accessor for PKAttachmentView()
{
  unint64_t result = lazy cache variable for type metadata for PKAttachmentView;
  if (!lazy cache variable for type metadata for PKAttachmentView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
  }
  return result;
}

id SynapseLinkItem.icon.getter()
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_linkPreviewMetadata));
  if (v1)
  {
    objc_super v2 = v1;
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    outlined copy of Data._Representation(v3, v5);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v7 = objc_msgSend(self, sel_metadataWithDataRepresentation_, isa);
    outlined consume of Data._Representation(v3, v5);

    id v8 = objc_msgSend(v7, sel_icon);
    if (v8
      && (char v9 = v8, v10 = objc_msgSend(v8, sel_platformImage), v9, v10)
      || (id v11 = objc_msgSend(v7, sel_image)) != 0
      && (id v12 = v11,
          id v10 = objc_msgSend(v11, sel_platformImage),
          v12,
          v10))
    {
      outlined consume of Data._Representation(v3, v5);
    }
    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)logger);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_20C2D7000, v20, v21, "Unarchived linkPreviewMetadata doesn't have an icon image.", v22, 2u);
        MEMORY[0x210550270](v22, -1, -1);
      }

      id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_init);
      outlined consume of Data._Representation(v3, v5);
    }
    return v10;
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)logger);
    CGRect v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_20C2D7000, v14, v15, "Synapse item's linkPreviewMetadata is nil.", v16, 2u);
      MEMORY[0x210550270](v16, -1, -1);
    }

    id v17 = objc_allocWithZone(MEMORY[0x263F827E8]);
    return objc_msgSend(v17, sel_init);
  }
}

id SynapseLinkItem.synapseItem.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem);
}

uint64_t SynapseLinkItem.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

uint64_t SynapseLinkItem.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*SynapseLinkItem.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

id SynapseLinkItem.init(synapseItem:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem] = a1;
  v10.receiver = v1;
  v10.super_class = ObjectType;
  id v4 = a1;
  id v5 = objc_msgSendSuper2(&v10, sel_init);
  uint64_t v6 = self;
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel_defaultCenter, v10.receiver, v10.super_class);
  objc_msgSend(v8, sel_addObserver_selector_name_object_, v7, sel_linkPreviewDidFinishLoadingWithNotification_, *MEMORY[0x263F7C250], v4);

  return v7;
}

uint64_t SynapseLinkItem.targetURL.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_itemURL));
  if (v3)
  {
    id v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }
  return v6(v8, v9, 1, v7);
}

uint64_t SynapseLinkItem.title.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v1 - 8);
  id v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem);
  id v9 = objc_msgSend(v8, sel_displayTitle, v5);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    id v12 = objc_msgSend(v8, sel_itemURL);
    if (v12)
    {
      uint64_t v13 = v12;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v14 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 0, 1, v14);
    }
    else
    {
      uint64_t v14 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    }
    outlined init with take of URL?((uint64_t)v3, (uint64_t)v7);
    type metadata accessor for URL();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1, v14) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      uint64_t v11 = URL.host.getter();
      uint64_t v17 = v16;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v14);
      if (v17)
      {
        if (String.count.getter() < 31) {
          return v11;
        }
        swift_bridgeObjectRelease();
      }
    }
    id v18 = objc_msgSend(v8, sel_sourceLastKnownName);
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      if (one-time initialization token for noTitleString != -1) {
        swift_once();
      }
      uint64_t v11 = static SynapseLinkItem.noTitleString;
      swift_bridgeObjectRetain();
    }
  }
  return v11;
}

uint64_t SynapseLinkItem.subtitle.getter()
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_sourceLastKnownName));
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t SynapseLinkItem.dataRepresentation.getter()
{
  v17[1] = *(id *)MEMORY[0x263EF8340];
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem);
  v17[0] = 0;
  id v2 = objc_msgSend(v1, sel_dataRepresentationWithError_, v17);
  id v3 = v17[0];
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    double v5 = v3;
    uint64_t v6 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    id v8 = v6;
    id v9 = v6;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      v17[0] = v13;
      *(_DWORD *)id v12 = 136315138;
      swift_getErrorValue();
      uint64_t v14 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v10, v11, "%s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v13, -1, -1);
      MEMORY[0x210550270](v12, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  return v4;
}

Swift::Void __swiftcall SynapseLinkItem.loadPreviewIfNeeded()()
{
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_loadFullPreviewIfNeeded);
}

void SynapseLinkItem.linkPreviewDidFinishLoading(notification:)()
{
  if (objc_msgSend(self, sel_isMainThread))
  {
    Notification.object.getter();
    if (v6)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
      if (swift_dynamicCast())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if ((static NSObject.== infix(_:_:)() & 1) != 0
          && (uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate, swift_beginAccess(),
                                                                             MEMORY[0x210550400](v1)))
        {
          uint64_t v2 = *(void *)(v1 + 8);
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v2 + 8))(v0, &protocol witness table for SynapseLinkItem, ObjectType, v2);

          swift_unknownObjectRelease();
        }
        else
        {
        }
      }
    }
    else
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t one-time initialization function for noTitleString()
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v5._object = (void *)0x800000020C857030;
  v0._uint64_t countAndFlagsBits = 0x656C746954206F4ELL;
  v0._object = (void *)0xE800000000000000;
  v1.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v1.value._object = (void *)0xEB00000000656C62;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0xD000000000000054;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, v1, paperKitBundle, v2, v5);
  uint64_t result = v4._countAndFlagsBits;
  static SynapseLinkItem.noTitleString = (__int128)v4;
  return result;
}

id SynapseLinkItem.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SynapseLinkItem.init()()
{
}

id SynapseLinkItem.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for LinkItem.delegate.getter in conformance SynapseLinkItem()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

uint64_t protocol witness for LinkItem.delegate.setter in conformance SynapseLinkItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for LinkItem.delegate.modify in conformance SynapseLinkItem(void *a1))()
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

void SynapseLinkItem.delegate.modify(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t protocol witness for LinkItem.targetURL.getter in conformance SynapseLinkItem@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_itemURL));
  if (v3)
  {
    uint64_t v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }
  return v6(v8, v9, 1, v7);
}

uint64_t protocol witness for LinkItem.subtitle.getter in conformance SynapseLinkItem()
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_sourceLastKnownName));
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id protocol witness for LinkItem.loadPreviewIfNeeded() in conformance SynapseLinkItem()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_loadFullPreviewIfNeeded);
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C493634@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_20C493690(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for SynapseLinkItem()
{
  return self;
}

uint64_t method lookup function for SynapseLinkItem(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SynapseLinkItem);
}

void ReflowSpace.minWidth.getter()
{
  if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1) {
    swift_once();
  }
  CGRectGetWidth(*(CGRect *)(v0 + 16));
}

double ReflowSpace.initialBaselineOnLine.getter()
{
  return 0.0;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance ReflowSpace.CodingKeys@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ReflowSpace.CodingKeys()
{
  return 0x656D617266;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReflowSpace.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656D617266 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ReflowSpace.CodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ReflowSpace.CodingKeys@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReflowSpace.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowSpace.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReflowSpace.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReflowSpace.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of PaperKitPDFDocument??(*(id *)(v1 + 160));
    type metadata accessor for ReflowSpace();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(unsigned char *)(v1 + 152) = 0;
    swift_release();
    *(void *)(v1 + 96) = 0;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 104) = xmmword_20C835600;
    *(void *)(v1 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = -1;
    *(void *)(v1 + 128) = 0;
    *(unsigned char *)(v1 + 136) = 0;
    *(void *)(v1 + 144) = 0;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type CGRect and conformance CGRect);
    swift_retain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    long long v8 = v10[1];
    *(_OWORD *)(v1 + 16) = v10[0];
    *(_OWORD *)(v1 + 32) = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_release();
  }
  return v1;
}

uint64_t ReflowSpace.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReflowSpace.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v8 = *(_OWORD *)(v2 + 32);
  v10[0] = *(_OWORD *)(v2 + 16);
  v10[1] = v8;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type CGRect and conformance CGRect);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id ReflowSpace._layer.getter()
{
  uint64_t v1 = *(void **)(v0 + 160);
  id v2 = v1;
  if (v1 == (void *)1)
  {
    if (one-time initialization token for showDebugUI != -1) {
      swift_once();
    }
    if (static ReflowTextView.showDebugUI == 1)
    {
      id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
      objc_msgSend(v2, sel_setBorderWidth_, 0.5);
      id v3 = objc_msgSend(self, sel_blueColor);
      id v4 = objc_msgSend(v3, sel_colorWithAlphaComponent_, 0.1);

      id v5 = objc_msgSend(v4, sel_CGColor);
      objc_msgSend(v2, sel_setBorderColor_, v5);
    }
    else
    {
      id v2 = 0;
    }
    uint64_t v6 = *(void **)(v0 + 160);
    *(void *)(v0 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v2;
    id v7 = v2;
    outlined consume of PaperKitPDFDocument??(v6);
  }
  outlined copy of CALayer??(v1);
  return v2;
}

uint64_t ReflowSpace.debugDescription.getter()
{
  _StringGuts.grow(_:)(20);
  v1._uint64_t countAndFlagsBits = 0x53776F6C6665523CLL;
  v1._object = (void *)0xEE00203A65636170;
  String.append(_:)(v1);
  if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1) {
    swift_once();
  }
  CGRectGetWidth(*(CGRect *)(v0 + 16));
  v2._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

void ReflowSpace.__ivar_destroyer()
{
  outlined consume of PaperKitPDFDocument??(*(id *)(v0 + 160));
}

uint64_t ReflowSpace.__deallocating_deinit()
{
  outlined consume of PaperKitPDFDocument??(*(id *)(v0 + 160));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReflowSpace()
{
  return self;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ReflowSpace@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ReflowSpace();
  uint64_t v5 = swift_allocObject();
  uint64_t result = ReflowSpace.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReflowSpace(void *a1)
{
  return ReflowSpace.encode(to:)(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowSpace()
{
  return ReflowSpace.debugDescription.getter();
}

unint64_t lazy protocol witness table accessor for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CGRect and conformance CGRect(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CGRect(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ReflowSpace.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x20C49415CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReflowSpace.CodingKeys()
{
  return &type metadata for ReflowSpace.CodingKeys;
}

BOOL specialized Ref<>.containsStrokes<A>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v44 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v43 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v48 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v39 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v40 = (char *)&v38 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  uint64_t v45 = v2;
  v23(v17, v2, v14, v20);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  WeakRef.init<A>(_:)();
  char v24 = specialized Set.contains(_:)((uint64_t)v22, v50);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  if (v24)
  {
    return 1;
  }
  else
  {
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    uint64_t v26 = v49;
    Ref.subscript.getter();
    unint64_t v27 = v44;
    CRRegister.value.getter();
    uint64_t v28 = v47;
    uint64_t v29 = (uint64_t)v48;
    SharedTagged_2.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v27, v28);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v5);
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v29, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      return 0;
    }
    else
    {
      uint64_t v32 = v39;
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
      uint64_t v33 = v40;
      uint64_t v34 = v41;
      uint64_t v35 = v42;
      uint64_t v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 32))(v40, v32, v42);
      MEMORY[0x270FA5388](v36);
      *(&v38 - 2) = v50;
      *(&v38 - 1) = v26;
      BOOL v25 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Ref<>.containsStrokes<A>(_:in:), (uint64_t)(&v38 - 4));
      (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v35);
    }
  }
  return v25;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v25 = a3 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v28 = v7 + 32;
  uint64_t v29 = v7 + 16;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v7 + 8;
  uint64_t v31 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (v16)
  {
    unint64_t v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v20 = v19 | (v18 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(void *)(v31 + 48) + *(void *)(v7 + 72) * v20, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    char v24 = v30(v9);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v3) {
      goto LABEL_28;
    }
    if (v24)
    {
      a2 = 1;
LABEL_28:
      swift_release();
      return a2 & 1;
    }
  }
  if (__OFADD__(v18++, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v18 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v18);
  if (v22)
  {
LABEL_18:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_19;
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v26)
  {
LABEL_27:
    a2 = 0;
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
LABEL_17:
    int64_t v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v26) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

BOOL specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2)
{
  char v24 = a1;
  uint64_t v25 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v22 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v23 = *(void *)(v28 - 8);
  double v13 = MEMORY[0x270FA5388](v28);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v12, v27, v9, v13);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CRSequence<A>, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v27 = v15;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v26 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CRSequence<A>.Iterator, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  unint64_t v16 = (uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v17 = (void (**)(char *, char *, uint64_t))(v22 + 32);
  int64_t v18 = (void (**)(char *, uint64_t))(v22 + 8);
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    int v19 = (*v16)(v8, 1, v3);
    if (v19 == 1) {
      break;
    }
    (*v17)(v5, v8, v3);
    char v20 = v24(v5);
    (*v18)(v5, v3);
    if (v2) {
      break;
    }
  }
  while ((v20 & 1) == 0);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v28);
  return v19 != 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t (**v16)(char *, uint64_t, uint64_t);
  void (**v17)(char *, char *, uint64_t);
  void (**v18)(char *, uint64_t);
  int v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  char v24 = a1;
  uint64_t v25 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v22 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v23 = *(void *)(v28 - 8);
  double v13 = MEMORY[0x270FA5388](v28);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v12, v27, v9, v13);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v27 = v15;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v26 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  unint64_t v16 = (uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v17 = (void (**)(char *, char *, uint64_t))(v22 + 32);
  int64_t v18 = (void (**)(char *, uint64_t))(v22 + 8);
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    int v19 = (*v16)(v8, 1, v3);
    if (v19 == 1) {
      break;
    }
    (*v17)(v5, v8, v3);
    char v20 = v24(v5);
    (*v18)(v5, v3);
    if (v2) {
      break;
    }
  }
  while ((v20 & 1) == 0);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v28);
  return v19 != 1;
}

uint64_t (*ReflowLayoutManager.spacingAdjustment.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t ReflowLayoutManager.init(frame:initialFrame:contents:lines:layoutLines:strokesToReflow:textScalePercentage:usageBounds:lineHeights:spacingAdjustment:allowScaling:selectionAffinity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, long long a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v26 = MEMORY[0x263F8EE78];
  *(void *)(v20 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = MEMORY[0x263F8EE78];
  *(void *)(v20 + 88) = v26;
  *(void *)(v20 + 96) = v26;
  long long v27 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *(_OWORD *)(v20 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *MEMORY[0x263F001A0];
  *(void *)(v20 + 104) = v26;
  *(void *)(v20 + 112) = 100;
  *(_OWORD *)(v20 + 136) = v27;
  *(void *)(v20 + 152) = v26;
  *(_OWORD *)(v20 + 176) = 0u;
  *(_OWORD *)(v20 + 192) = 0u;
  *(_OWORD *)(v20 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
  *(_OWORD *)(v20 + 203) = 0u;
  *(unsigned char *)(v20 + 219) = 1;
  *(void *)(v20 + 224) = 0;
  *(double *)(v20 + 16) = a9;
  *(double *)(v20 + 24) = a10;
  *(double *)(v20 + 32) = a11;
  *(double *)(v20 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = a12;
  *(double *)(v20 + 48) = a13;
  *(double *)(v20 + 56) = a14;
  *(double *)(v20 + 64) = a15;
  *(double *)(v20 + 72) = a16;
  swift_beginAccess();
  *(void *)(v20 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = a1;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v20 + 88) = a2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v20 + 96) = a3;
  swift_bridgeObjectRelease();
  *(void *)(v20 + 104) = a4;
  swift_bridgeObjectRelease();
  *(void *)(v20 + 112) = a5;
  *(_OWORD *)(v20 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = a17;
  *(void *)(v20 + 136) = a18;
  *(void *)(v20 + 144) = a19;
  *(void *)(v20 + 152) = a6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a7, v20 + 160, (uint64_t *)&demangling cache variable for type metadata for ReflowSpacingAdjustment?);
  swift_release();
  *(unsigned char *)(v20 + 219) = a8;
  *(void *)(v20 + 224) = a20;
  return v20;
}

uint64_t ReflowLayoutManager.copy()()
{
  double v1 = *(double *)(v0 + 32);
  double v20 = *(double *)(v0 + 24);
  double v21 = *(double *)(v0 + 16);
  double v2 = *(double *)(v0 + 40);
  double v3 = *(double *)(v0 + 48);
  double v4 = *(double *)(v0 + 56);
  double v5 = *(double *)(v0 + 64);
  double v6 = *(double *)(v0 + 72);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v0 + 80);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v0 + 88);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 104);
  uint64_t v11 = *(void *)(v0 + 112);
  long long v19 = *(_OWORD *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v14 = *(void *)(v0 + 152);
  swift_beginAccess();
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v0 + 160, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for ReflowSpacingAdjustment?);
  char v15 = *(unsigned char *)(v0 + 219);
  uint64_t v16 = *(void *)(v0 + 224);
  type metadata accessor for ReflowLayoutManager();
  uint64_t v17 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of ReflowSpacingAdjustment?((uint64_t)v22);
  ReflowLayoutManager.init(frame:initialFrame:contents:lines:layoutLines:strokesToReflow:textScalePercentage:usageBounds:lineHeights:spacingAdjustment:allowScaling:selectionAffinity:)(v7, v8, v9, v10, v11, v14, (uint64_t)v22, v15, v21, v20, v1, v2, v3, v4, v5, v6, v19, v12, v13,
    v16);
  return v17;
}

uint64_t closure #1 in static ReflowLayoutManager.process(lines:in:)@<X0>(id *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, double *a5@<X4>, double *a6@<X5>, uint64_t *a7@<X8>)
{
  unint64_t v121 = a5;
  uint64_t v120 = a4;
  uint64_t v118 = a3;
  id v116 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v13 - 8);
  char v15 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v126 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  *(void *)&double v133 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  long long v127 = (char *)&v116 - v19;
  MEMORY[0x270FA5388](v20);
  long long v125 = (char *)&v116 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  double v23 = MEMORY[0x270FA5388](v22 - 8);
  unsigned int v117 = (char *)&v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = *a1;
  id v26 = objc_msgSend(*a1, sel_strokeIdentifiers, v23);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHStrokeIdentifier);
  uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v119 = v25;
  id v28 = objc_msgSend(v25, sel_nonTextStrokeIdentifiers);
  unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v134 = v27;
  specialized Array.append<A>(contentsOf:)(v29);
  double v30 = *(double *)&v134;
  if (v134 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v31 = result;
  }
  else
  {
    uint64_t v31 = *(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  unint64_t v123 = v12;
  unint64_t v124 = a7;
  id v122 = a6;
  if (v31)
  {
    if (v31 >= 1)
    {
      uint64_t v33 = 0;
      uint64_t v129 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v126 + 56);
      unint64_t v130 = *(void *)&v30 & 0xC000000000000001;
      uint64_t v34 = MEMORY[0x263F8EE78];
      uint64_t v35 = (unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48);
      long long v128 = (void (**)(char *, char *, uint64_t))(v126 + 32);
      *(void *)&double MaxY = (v126 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      double v132 = v30;
      while (1)
      {
        if (v130) {
          MEMORY[0x21054E050](v33, *(void *)&v30);
        }
        else {
          swift_unknownObjectRetain();
        }
        type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
        uint64_t v36 = (void *)swift_dynamicCastClass();
        if (v36)
        {
          id v37 = objc_msgSend(v36, sel_strokeUUID);
          uint64_t v38 = v127;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v39 = *v128;
          (*v128)(v15, v38, v16);
          (*v129)(v15, 0, 1, v16);
          swift_unknownObjectRelease();
          if ((*v35)(v15, 1, v16) != 1) {
            goto LABEL_16;
          }
        }
        else
        {
          (*v129)(v15, 1, 1, v16);
          swift_unknownObjectRelease();
          if ((*v35)(v15, 1, v16) != 1)
          {
            uint64_t v39 = *v128;
LABEL_16:
            uint64_t v40 = v125;
            v39(v125, v15, v16);
            v39(*(char **)&v133, v40, v16);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1, v34);
            }
            unint64_t v42 = *(void *)(v34 + 16);
            unint64_t v41 = *(void *)(v34 + 24);
            if (v42 >= v41 >> 1) {
              uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, v34);
            }
            *(void *)(v34 + 16) = v42 + 1;
            v39((char *)(v34+ ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80))+ *(void *)(v126 + 72) * v42), *(char **)&v133, v16);
            goto LABEL_7;
          }
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
LABEL_7:
        double v30 = v132;
        if (v31 == ++v33) {
          goto LABEL_22;
        }
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
LABEL_22:
    swift_bridgeObjectRelease_n();
    id v43 = objc_msgSend(v116, sel_strokes);
    type metadata accessor for PKStroke();
    uint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v45 = specialized _ArrayProtocol.filter(_:)(v44, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v46 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v46);
    uint64_t v47 = type metadata accessor for PKDrawing();
    uint64_t v48 = *(void *)(v47 - 8);
    uint64_t v49 = v117;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v117, 1, 1, v47);
    unint64_t v134 = v45;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStroke]);
    uint64_t v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    uint64_t v52 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v49, 1, v47) != 1)
    {
      PKDrawing._bridgeToObjectiveC()(v51);
      uint64_t v52 = v53;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
    }
    id v54 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PKDrawingCoherence(0)), sel_initWithStrokes_fromDrawing_, v50, v52);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    objc_msgSend(v54, sel_bounds);
    objc_msgSend(v54, sel_set_canvasBounds_);
    objc_msgSend(v54, sel__canvasBounds);
    CGFloat x = v135.origin.x;
    CGFloat y = v135.origin.y;
    CGFloat width = v135.size.width;
    CGFloat height = v135.size.height;
    double MinX = CGRectGetMinX(v135);
    v136.origin.CGFloat x = x;
    v136.origin.CGFloat y = y;
    v136.size.CGFloat width = width;
    v136.size.CGFloat height = height;
    double MinY = CGRectGetMinY(v136);
    v137.origin.CGFloat x = x;
    v137.origin.CGFloat y = y;
    v137.size.CGFloat width = width;
    v137.size.CGFloat height = height;
    double MaxX = CGRectGetMaxX(v137);
    v138.origin.CGFloat x = x;
    v138.origin.CGFloat y = y;
    v138.size.CGFloat width = width;
    v138.size.CGFloat height = height;
    double v62 = CGRectGetMinY(v138);
    v139.origin.CGFloat x = x;
    v139.origin.CGFloat y = y;
    v139.size.CGFloat width = width;
    v139.size.CGFloat height = height;
    double v132 = CGRectGetMinX(v139);
    v140.origin.CGFloat x = x;
    v140.origin.CGFloat y = y;
    v140.size.CGFloat width = width;
    v140.size.CGFloat height = height;
    double MaxY = CGRectGetMaxY(v140);
    v141.origin.CGFloat x = x;
    v141.origin.CGFloat y = y;
    v141.size.CGFloat width = width;
    v141.size.CGFloat height = height;
    double v133 = CGRectGetMaxX(v141);
    v142.origin.CGFloat x = x;
    v142.origin.CGFloat y = y;
    v142.size.CGFloat width = width;
    v142.size.CGFloat height = height;
    double v63 = CGRectGetMaxY(v142);
    uint64_t v64 = v120;
    double v65 = v120[5];
    double v66 = v120[6];
    double v67 = v120[7] - v65;
    double v68 = v120[8] - v66;
    double v69 = v67 * v67 + v68 * v68;
    double v70 = ((MinX - v65) * v67 + (MinY - v66) * v68) / v69;
    double v71 = v67 * v70;
    double v72 = v66 + v68 * v70;
    double v73 = sqrt(v69);
    double v74 = v68 / v73;
    double v75 = MinX - (v65 + v71);
    double v76 = -v67 / v73;
    double v77 = v76 * (MinY - v72) + v68 / v73 * v75;
    BOOL v79 = v77 <= -200.0 || v77 >= 200.0 || (*(void *)&v77 & 0x7FF0000000000000) == 0x7FF0000000000000;
    uint64_t v81 = (uint64_t)v123;
    double v80 = v124;
    uint64_t v83 = v121;
    uint64_t v82 = v122;
    if (!v79)
    {
      double v84 = *v121;
      if (v77 > *v121) {
        double v84 = v77;
      }
      double *v121 = v84;
      double v85 = *v82;
      if (*v82 >= v77) {
        double v85 = v77;
      }
      double *v82 = v85;
      double v65 = v64[5];
      double v66 = v64[6];
      double v67 = v64[7] - v65;
      double v68 = v64[8] - v66;
      double v69 = v67 * v67 + v68 * v68;
      double v86 = sqrt(v69);
      double v74 = v68 / v86;
      double v76 = -v67 / v86;
    }
    double v87 = ((MaxX - v65) * v67 + (v62 - v66) * v68) / v69;
    double v88 = v76 * (v62 - (v66 + v68 * v87)) + v74 * (MaxX - (v65 + v67 * v87));
    if (v88 > -200.0 && v88 < 200.0 && (*(void *)&v88 & 0x7FF0000000000000) != 0x7FF0000000000000)
    {
      double v91 = *v83;
      if (v88 > *v83) {
        double v91 = v88;
      }
      double *v83 = v91;
      double v92 = *v82;
      if (*v82 >= v88) {
        double v92 = v88;
      }
      double *v82 = v92;
      double v65 = v64[5];
      double v66 = v64[6];
      double v67 = v64[7] - v65;
      double v68 = v64[8] - v66;
      double v69 = v67 * v67 + v68 * v68;
      double v93 = sqrt(v69);
      double v74 = v68 / v93;
      double v76 = -v67 / v93;
    }
    double v94 = ((v132 - v65) * v67 + (MaxY - v66) * v68) / v69;
    double v95 = v76 * (MaxY - (v66 + v68 * v94)) + v74 * (v132 - (v65 + v67 * v94));
    if (v95 > -200.0 && v95 < 200.0 && (*(void *)&v95 & 0x7FF0000000000000) != 0x7FF0000000000000)
    {
      double v98 = *v83;
      if (v95 > *v83) {
        double v98 = v95;
      }
      double *v83 = v98;
      double v99 = *v82;
      if (*v82 >= v95) {
        double v99 = v95;
      }
      double *v82 = v99;
      double v65 = v64[5];
      double v66 = v64[6];
      double v67 = v64[7] - v65;
      double v68 = v64[8] - v66;
      double v69 = v67 * v67 + v68 * v68;
      double v100 = sqrt(v69);
      double v74 = v68 / v100;
      double v76 = -v67 / v100;
    }
    double v101 = ((v133 - v65) * v67 + (v63 - v66) * v68) / v69;
    double v102 = v76 * (v63 - (v66 + v68 * v101)) + v74 * (v133 - (v65 + v67 * v101));
    if (v102 > -200.0 && v102 < 200.0 && (*(void *)&v102 & 0x7FF0000000000000) != 0x7FF0000000000000)
    {
      double v105 = *v83;
      if (v102 > *v83) {
        double v105 = v102;
      }
      double *v83 = v105;
      if (*v82 < v102) {
        double v102 = *v82;
      }
      double *v82 = v102;
    }
    type metadata accessor for ReflowWord();
    swift_allocObject();
    id v106 = v119;
    id v107 = v54;
    uint64_t v108 = ReflowWord.init(reflowableTextToken:drawing:scale:image:)(v106, v107, 0, 1.0);
    id v109 = *(id *)(v108 + 280);
    objc_msgSend(v109, sel__canvasBounds);
    id v110 = objc_msgSend(v109, sel_imageFromRect_scale_);

    int64_t v111 = *(void **)(v108 + 304);
    *(void *)(v108 + 304) = v110;

    uint64_t v112 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v81, 1, 1, v112);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v113 = static MainActor.shared.getter();
    uint64_t v114 = (void *)swift_allocObject();
    uint64_t v115 = MEMORY[0x263F8F500];
    v114[2] = v113;
    v114[3] = v115;
    v114[4] = v108;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(v81, (uint64_t)&async function pointer to partial apply for closure #1 in ReflowWord.generateImage(), (uint64_t)v114);

    uint64_t result = swift_release();
    *double v80 = v108;
  }
  return result;
}

uint64_t ReflowLayoutManager.init(contents:frame:strokesToReflow:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v7 = a2;
  CGFloat v11 = MEMORY[0x263F8EE78];
  uint64_t v212 = *MEMORY[0x263EF8340];
  *(void *)(v6 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = MEMORY[0x263F8EE78];
  long long v12 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *(_OWORD *)(v6 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *MEMORY[0x263F001A0];
  *(CGFloat *)(v6 + 88) = v11;
  unint64_t v187 = (CGFloat *)(v6 + 88);
  *(CGFloat *)(v6 + 96) = v11;
  *(CGFloat *)(v6 + 104) = v11;
  *(void *)(v6 + 112) = 100;
  *(_OWORD *)(v6 + 136) = v12;
  *(CGFloat *)(v6 + 152) = v11;
  *(_OWORD *)(v6 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 203) = 0u;
  *(unsigned char *)(v6 + 219) = 1;
  *(void *)(v6 + 224) = 0;
  *(CGFloat *)(v6 + 48) = a3;
  *(CGFloat *)(v6 + 56) = a4;
  *(CGFloat *)(v6 + 64) = a5;
  *(CGFloat *)(v6 + 72) = a6;
  *(CGFloat *)(v6 + 16) = a3;
  *(CGFloat *)(v6 + 24) = a4;
  *(CGFloat *)(v6 + 32) = a5;
  *(CGFloat *)(v6 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = a6;
  v203.CGFloat a = v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = v13 - 1;
    for (uint64_t i = 32; ; i += 168)
    {
      long long v16 = *(_OWORD *)(a1 + i + 144);
      *(_OWORD *)v210 = *(_OWORD *)(a1 + i + 128);
      *(_OWORD *)&v210[16] = v16;
      uint64_t v211 = *(void *)(a1 + i + 160);
      long long v17 = *(_OWORD *)(a1 + i + 80);
      long long v206 = *(_OWORD *)(a1 + i + 64);
      long long v207 = v17;
      long long v18 = *(_OWORD *)(a1 + i + 112);
      long long v208 = *(_OWORD *)(a1 + i + 96);
      long long v209 = v18;
      long long v19 = *(_OWORD *)(a1 + i + 16);
      *(_OWORD *)unsigned int v204 = *(_OWORD *)(a1 + i);
      *(_OWORD *)&v204[16] = v19;
      long long v20 = *(_OWORD *)(a1 + i + 48);
      *(_OWORD *)&v204[32] = *(_OWORD *)(a1 + i + 32);
      long long v205 = v20;
      CGFloat v21 = *(double *)v204;
      outlined retain of ReflowTextLine((uint64_t)v204);
      if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1) {
        swift_once();
      }
      uint64_t v22 = static UIConstants.handwritingReflowMinimumSpaceWidth;
      type metadata accessor for ReflowSpace();
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 1;
      *(unsigned char *)(v23 + 152) = 0;
      double v25 = UnknownCanvasElementView.flags.modify(v23, v24);
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 64) = 0u;
      *(_OWORD *)(v23 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
      *(void *)(v23 + 96) = 0;
      *(double *)(v23 + 104) = v25;
      *(void *)(v23 + 112) = v26;
      *(void *)(v23 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = -1;
      *(void *)(v23 + 128) = 0;
      *(unsigned char *)(v23 + 136) = 0;
      *(void *)(v23 + 144) = 0;
      *(void *)(v23 + 16) = 0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = v22;
      *(void *)(v23 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0x4000000000000000;
      v202.CGFloat a = v21;
      swift_bridgeObjectRetain();
      uint64_t v27 = swift_retain();
      MEMORY[0x21054D330](v27);
      if (*(void *)((*(void *)&v202.a & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v202.a & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      outlined release of ReflowTextLine((uint64_t)v204);
      specialized Array.append<A>(contentsOf:)(*(unint64_t *)&v202.a);
      if (!v14) {
        break;
      }
      --v14;
    }
    swift_bridgeObjectRelease();
    CGFloat a = v203.a;
    uint64_t v6 = v184;
    uint64_t v7 = a2;
    CGFloat v11 = MEMORY[0x263F8EE78];
  }
  else
  {
    CGFloat a = v11;
  }
  swift_beginAccess();
  *(CGFloat *)(v6 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = a;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v6 + 88) = a1;
  swift_bridgeObjectRelease();
  *(void *)(v6 + 104) = v7;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(v6 + 88);
  v203.CGFloat a = v11;
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  CGFloat v30 = v11;
  uint64_t v31 = *(void *)(v29 + 16);
  swift_bridgeObjectRetain();
  uint64_t v32 = 0;
  uint64_t v33 = 32;
  while (v31 != v32)
  {
    long long v34 = *(_OWORD *)(v29 + v33);
    long long v35 = *(_OWORD *)(v29 + v33 + 32);
    *(_OWORD *)&v204[16] = *(_OWORD *)(v29 + v33 + 16);
    *(_OWORD *)&v204[32] = v35;
    *(_OWORD *)unsigned int v204 = v34;
    long long v36 = *(_OWORD *)(v29 + v33 + 48);
    long long v37 = *(_OWORD *)(v29 + v33 + 64);
    long long v38 = *(_OWORD *)(v29 + v33 + 96);
    long long v207 = *(_OWORD *)(v29 + v33 + 80);
    long long v208 = v38;
    long long v205 = v36;
    long long v206 = v37;
    long long v39 = *(_OWORD *)(v29 + v33 + 112);
    long long v40 = *(_OWORD *)(v29 + v33 + 128);
    long long v41 = *(_OWORD *)(v29 + v33 + 144);
    uint64_t v211 = *(void *)(v29 + v33 + 160);
    *(_OWORD *)v210 = v40;
    *(_OWORD *)&v210[16] = v41;
    long long v209 = v39;
    double v42 = *(double *)&v204[40];
    long long v44 = v205;
    double v43 = *(double *)&v206;
    uint64_t v45 = *(void *)v204;
    outlined retain of ReflowTextLine((uint64_t)v204);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v219.origin.CGFloat x = a3;
    v219.origin.CGFloat y = a4;
    v219.size.CGFloat width = a5;
    v219.size.CGFloat height = a6;
    double MinX = CGRectGetMinX(v219);
    v203.CGFloat a = v30;
    unint64_t v48 = *(void *)(*(void *)&v30 + 16);
    unint64_t v47 = *(void *)(*(void *)&v30 + 24);
    if (v48 >= v47 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
      CGFloat v30 = v203.a;
    }
    double v49 = sqrt((*((double *)&v44 + 1) - v42) * (*((double *)&v44 + 1) - v42)+ (v43 - *(double *)&v44) * (v43 - *(double *)&v44));
    double v50 = (*((double *)&v44 + 1) - v42) / v49;
    double v51 = (v43 - *(double *)&v44) / v49;
    double v52 = (MinX - v42) / v50;
    long long v53 = v209;
    long long v54 = v207;
    long long v55 = v208;
    double v56 = *(double *)v210;
    uint64_t v57 = *(void *)&v210[24];
    double v58 = *((double *)&v206 + 1);
    uint64_t v59 = *(void *)&v204[32];
    uint64_t v60 = *(void *)&v30 + 168 * v48;
    long long v61 = *(_OWORD *)&v210[8];
    *(_OWORD *)(v60 + 48) = *(_OWORD *)&v204[16];
    *(void *)(*(void *)&v30 + 16) = v48 + 1;
    *(void *)(v60 + 32) = v45;
    *(void *)(v60 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v45;
    *(void *)(v60 + 64) = v59;
    *(double *)(v60 + 72) = v42 + v50 * v52 - a3;
    *(double *)(v60 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(double *)&v44 + v51 * v52 - a4;
    *(double *)(v60 + 88) = *((double *)&v44 + 1) - a3;
    *(double *)(v60 + 96) = v43 - a4;
    *(double *)(v60 + 104) = v58 - a3;
    *(double *)(v60 + 112) = *(double *)&v54 - a4;
    *(double *)(v60 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *((double *)&v54 + 1) - a3;
    *(double *)(v60 + 128) = *(double *)&v55 - a4;
    *(double *)(v60 + 136) = *((double *)&v55 + 1) - a3;
    *(double *)(v60 + 144) = *(double *)&v53 - a4;
    *(double *)(v60 + 152) = *((double *)&v53 + 1) - a3;
    *(double *)(v60 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v56 - a4;
    *(void *)(v60 + 192) = v32;
    *(_OWORD *)(v60 + 168) = v61;
    *(void *)(v60 + 184) = v57;
    v33 += 168;
    if (++v32 == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
  }
  swift_bridgeObjectRelease_n();
  CGFloat *v187 = v30;
  swift_bridgeObjectRelease();
  CGFloat v62 = *v187;
  uint64_t v63 = *(void *)(*(void *)v187 + 16);
  if (!v63) {
    goto LABEL_135;
  }
  swift_bridgeObjectRetain();
  unint64_t v64 = 0;
  double v188 = a3;
  double v189 = a4;
  do
  {
    uint64_t v65 = *(void *)&v62 + 32 + 168 * v64;
    long long v66 = *(_OWORD *)v65;
    long long v67 = *(_OWORD *)(v65 + 32);
    *(_OWORD *)&v204[16] = *(_OWORD *)(v65 + 16);
    *(_OWORD *)&v204[32] = v67;
    *(_OWORD *)unsigned int v204 = v66;
    long long v68 = *(_OWORD *)(v65 + 48);
    long long v69 = *(_OWORD *)(v65 + 64);
    long long v70 = *(_OWORD *)(v65 + 96);
    long long v207 = *(_OWORD *)(v65 + 80);
    long long v208 = v70;
    long long v205 = v68;
    long long v206 = v69;
    long long v71 = *(_OWORD *)(v65 + 112);
    long long v72 = *(_OWORD *)(v65 + 128);
    long long v73 = *(_OWORD *)(v65 + 144);
    uint64_t v211 = *(void *)(v65 + 160);
    *(_OWORD *)v210 = v72;
    *(_OWORD *)&v210[16] = v73;
    long long v209 = v71;
    uint64_t v74 = *(void *)v204;
    if (*(void *)v204 >> 62)
    {
      outlined retain of ReflowTextLine((uint64_t)v204);
      swift_bridgeObjectRetain();
      uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
      if (!v75) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v75 = *(void *)((*(void *)v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
      outlined retain of ReflowTextLine((uint64_t)v204);
      swift_bridgeObjectRetain();
      if (!v75) {
        goto LABEL_28;
      }
    }
    if (v75 < 1) {
      goto LABEL_115;
    }
    uint64_t v76 = 0;
    uint64_t v77 = v211;
    double v193 = *(double *)&v205;
    double v194 = *(double *)&v204[40];
    double v191 = *(double *)&v206 - *(double *)&v205;
    double v192 = *((double *)&v205 + 1) - *(double *)&v204[40];
    double v190 = v192 * v192 + v191 * v191;
    do
    {
      if ((v74 & 0xC000000000000001) != 0)
      {
        uint64_t v78 = MEMORY[0x21054E050](v76, v74);
      }
      else
      {
        uint64_t v78 = *(void *)(v74 + 8 * v76 + 32);
        swift_retain();
      }
      ++v76;
      double v79 = *(double *)(v78 + 24) - v189;
      *(double *)(v78 + 16) = *(double *)(v78 + 16) - v188;
      *(double *)(v78 + 24) = v79;
      double v80 = *(double *)(v78 + 56) - v189;
      *(double *)(v78 + 48) = *(double *)(v78 + 48) - v188;
      *(double *)(v78 + 56) = v80;
      *(void *)(v78 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v77;
      v213.CGFloat x = (*(double (**)(void))(*(void *)v78 + 240))();
      CGFloat v82 = v81;
      CGFloat v84 = v83;
      double v85 = *(double *)(v78 + 32);
      double v86 = *(double *)(v78 + 40);
      CGFloat v87 = *(double *)(v78 + 16) - v85 * 0.0;
      CGFloat v88 = *(double *)(v78 + 24) - v86 * 0.0;
      v203.CGFloat b = 0.0;
      v203.CGFloat c = 0.0;
      v203.CGFloat a = v85;
      v203.CGFloat d = v86;
      v203.tCGFloat x = v87;
      v203.tCGFloat y = v88;
      CGPoint v89 = CGPointApplyAffineTransform(v213, &v203);
      v203.CGFloat b = 0.0;
      v203.CGFloat c = 0.0;
      v203.CGFloat a = v85;
      v203.CGFloat d = v86;
      v203.tCGFloat x = v87;
      v203.tCGFloat y = v88;
      v214.CGFloat x = v82;
      v214.CGFloat y = v84;
      CGPoint v90 = CGPointApplyAffineTransform(v214, &v203);
      double v91 = (v192 * (v89.x - v194) + v191 * (v89.y - v193)) / v190;
      CGFloat v92 = v194 + v192 * v91;
      CGFloat v93 = v193 + v191 * v91;
      double v94 = (v192 * (v90.x - v194) + v191 * (v90.y - v193)) / v190;
      CGFloat v198 = v194 + v192 * v94;
      v203.CGFloat b = 0.0;
      v203.CGFloat c = 0.0;
      v203.CGFloat a = v85;
      v203.CGFloat d = v86;
      v203.tCGFloat x = v87;
      pointCGFloat a = v193 + v191 * v94;
      v203.tCGFloat y = v88;
      CGAffineTransformInvert(&v202, &v203);
      CGFloat v95 = v202.a;
      CGFloat b = v202.b;
      CGFloat c = v202.c;
      CGFloat d = v202.d;
      tCGFloat x = v202.tx;
      tCGFloat y = v202.ty;
      CGAffineTransform v203 = v202;
      v215.CGFloat x = v92;
      v215.CGFloat y = v93;
      CGPoint v101 = CGPointApplyAffineTransform(v215, &v203);
      v203.CGFloat a = v95;
      v203.CGFloat b = b;
      v203.CGFloat c = c;
      v203.CGFloat d = d;
      v203.tCGFloat x = tx;
      v203.tCGFloat y = ty;
      v216.CGFloat x = v198;
      v216.CGFloat y = pointa;
      CGPoint v102 = CGPointApplyAffineTransform(v216, &v203);
      (*(void (**)(double, double, double, double))(*(void *)v78 + 248))(v101.x, v101.y, v102.x, v102.y);
      swift_release();
    }
    while (v75 != v76);
LABEL_28:
    ++v64;
    swift_bridgeObjectRelease();
    outlined release of ReflowTextLine((uint64_t)v204);
    if (v64 == v63) {
      goto LABEL_31;
    }
  }
  while (v64 < *(void *)(*(void *)&v62 + 16));
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease();
  CGFloat v103 = *v187;
  uint64_t v104 = *(void *)(*(void *)v187 + 16);
  if (!v104) {
    goto LABEL_135;
  }
  swift_bridgeObjectRetain();
  uint64_t v105 = 0;
  id v106 = (void *)MEMORY[0x263F8EE78];
  uint64_t v107 = 1;
  CGPoint v199 = (CGPoint)vdupq_n_s64(0x8000000000000000);
  while (1)
  {
    long long v108 = *(_OWORD *)(*(void *)&v103 + v105 + 32);
    long long v109 = *(_OWORD *)(*(void *)&v103 + v105 + 64);
    *(_OWORD *)&v204[16] = *(_OWORD *)(*(void *)&v103 + v105 + 48);
    *(_OWORD *)&v204[32] = v109;
    *(_OWORD *)unsigned int v204 = v108;
    long long v110 = *(_OWORD *)(*(void *)&v103 + v105 + 80);
    long long v111 = *(_OWORD *)(*(void *)&v103 + v105 + 96);
    long long v112 = *(_OWORD *)(*(void *)&v103 + v105 + 128);
    long long v207 = *(_OWORD *)(*(void *)&v103 + v105 + 112);
    long long v208 = v112;
    long long v205 = v110;
    long long v206 = v111;
    long long v113 = *(_OWORD *)(*(void *)&v103 + v105 + 144);
    long long v114 = *(_OWORD *)(*(void *)&v103 + v105 + 160);
    long long v115 = *(_OWORD *)(*(void *)&v103 + v105 + 176);
    uint64_t v211 = *(void *)(*(void *)&v103 + v105 + 192);
    *(_OWORD *)v210 = v114;
    *(_OWORD *)&v210[16] = v115;
    long long v209 = v113;
    uint64_t v116 = *(void *)v204;
    if (*(void *)v204 >> 62) {
      break;
    }
    uint64_t v117 = *(void *)((*(void *)v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined retain of ReflowTextLine((uint64_t)v204);
    swift_bridgeObjectRetain();
    if (v117) {
      goto LABEL_35;
    }
LABEL_54:
    swift_bridgeObjectRelease();
    outlined release of ReflowTextLine((uint64_t)v204);
    if (v104 == v107) {
      goto LABEL_69;
    }
LABEL_67:
    v105 += 168;
    ++v107;
  }
  outlined retain of ReflowTextLine((uint64_t)v204);
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_54;
  }
LABEL_35:
  if ((v116 & 0xC000000000000001) != 0)
  {
    uint64_t v118 = (float64x2_t *)MEMORY[0x21054E050](0, v116);
  }
  else
  {
    if (!*(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_116;
    }
    uint64_t v118 = *(float64x2_t **)(v116 + 32);
    swift_retain();
  }
  uint64_t v119 = swift_bridgeObjectRelease();
  double v120 = *(double *)&v204[40];
  double v121 = *(double *)&v205;
  v217.CGFloat x = (*(double (**)(uint64_t))(*(void *)&v118->f64[0] + 240))(v119);
  v203.CGFloat b = 0.0;
  v203.CGFloat c = 0.0;
  float64x2_t v122 = v118[4];
  float64x2_t v123 = vaddq_f64(v118[3], vmulq_f64(v122, (float64x2_t)v199));
  v203.CGFloat a = v118[4].f64[0];
  v203.CGFloat d = v122.f64[1];
  *(float64x2_t *)&v203.tCGFloat x = v123;
  CGPoint v124 = CGPointApplyAffineTransform(v217, &v203);
  outlined release of ReflowTextLine((uint64_t)v204);
  double v125 = sqrt((v124.x - v120) * (v124.x - v120) + (v124.y - v121) * (v124.y - v121));
  if (!v105) {
    goto LABEL_48;
  }
  if ((unint64_t)(v107 - 2) >= *(void *)(*(void *)v187 + 16)) {
    goto LABEL_120;
  }
  unint64_t v126 = *(void *)(*(void *)v187 + v105 - 136);
  if (!(v126 >> 62))
  {
    uint64_t v127 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v127) {
      goto LABEL_42;
    }
LABEL_58:
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  swift_bridgeObjectRetain();
  uint64_t v127 = _CocoaArrayWrapper.endIndex.getter();
  if (!v127) {
    goto LABEL_58;
  }
LABEL_42:
  unint64_t v128 = v127 - 1;
  if (__OFSUB__(v127, 1)) {
    goto LABEL_128;
  }
  if ((v126 & 0xC000000000000001) != 0)
  {
    uint64_t v129 = MEMORY[0x21054E050](v128, v126);
  }
  else
  {
    if ((v128 & 0x8000000000000000) != 0) {
      goto LABEL_129;
    }
    if (v128 >= *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_130;
    }
    uint64_t v129 = *(void *)(v126 + 8 * v128 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  char v130 = *(unsigned char *)(v129 + 136);
  swift_release();
  if (v130)
  {
LABEL_48:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v106[2] + 1, 1, v106);
    }
    unint64_t v132 = v106[2];
    unint64_t v131 = v106[3];
    if (v132 >= v131 >> 1) {
      id v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v131 > 1), v132 + 1, 1, v106);
    }
    v106[2] = v132 + 1;
    double v133 = (double *)&v106[v132];
    goto LABEL_65;
  }
LABEL_59:
  unint64_t v134 = v106[2];
  if (!v134) {
    goto LABEL_127;
  }
  if (v125 < *(double *)&v106[v134 + 3])
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v106);
    }
    if (v134 > v106[2]) {
      goto LABEL_134;
    }
    double v133 = (double *)&v106[v134 - 1];
LABEL_65:
    v133[4] = v125;
  }
  swift_release();
  if (v104 != v107) {
    goto LABEL_67;
  }
LABEL_69:
  swift_bridgeObjectRelease();
  uint64_t v135 = *(void *)(*(void *)v187 + 16);
  if (!v135) {
    goto LABEL_135;
  }
  uint64_t v136 = *(void *)v187 + 32;
  swift_bridgeObjectRetain();
  unint64_t v137 = 0;
  uint64_t v200 = v135 - 1;
  unint64_t v138 = -1;
  uint64_t v139 = -136;
  float64x2_t point = (float64x2_t)vdupq_n_s64(0x8000000000000000);
  while (2)
  {
    long long v140 = *(_OWORD *)(v136 + v139 + 136);
    long long v141 = *(_OWORD *)(v136 + v139 + 168);
    *(_OWORD *)&v204[16] = *(_OWORD *)(v136 + v139 + 152);
    *(_OWORD *)&v204[32] = v141;
    *(_OWORD *)unsigned int v204 = v140;
    long long v142 = *(_OWORD *)(v136 + v139 + 184);
    long long v143 = *(_OWORD *)(v136 + v139 + 200);
    long long v144 = *(_OWORD *)(v136 + v139 + 232);
    long long v207 = *(_OWORD *)(v136 + v139 + 216);
    long long v208 = v144;
    long long v205 = v142;
    long long v206 = v143;
    long long v145 = *(_OWORD *)(v136 + v139 + 248);
    long long v146 = *(_OWORD *)(v136 + v139 + 264);
    long long v147 = *(_OWORD *)(v136 + v139 + 280);
    uint64_t v211 = *(void *)(v136 + v139 + 296);
    *(_OWORD *)v210 = v146;
    *(_OWORD *)&v210[16] = v147;
    long long v209 = v145;
    uint64_t v148 = *(void *)v204;
    if (*(void *)v204 >> 62)
    {
      outlined retain of ReflowTextLine((uint64_t)v204);
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_88;
      }
LABEL_73:
      if ((v148 & 0xC000000000000001) != 0)
      {
        uint64_t v150 = (float64x2_t *)MEMORY[0x21054E050](0, v148);
      }
      else
      {
        if (!*(void *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_117;
        }
        uint64_t v150 = *(float64x2_t **)(v148 + 32);
        swift_retain();
      }
      uint64_t v151 = swift_bridgeObjectRelease();
      if (v139 == -136)
      {
        int v152 = 1;
LABEL_93:
        double v158 = *(double *)&v204[40];
        double v159 = *(double *)&v205;
        v218.CGFloat x = (*(double (**)(uint64_t))(*(void *)&v150->f64[0] + 240))(v151);
        v203.CGFloat b = 0.0;
        v203.CGFloat c = 0.0;
        float64x2_t v160 = v150[4];
        float64x2_t v161 = vaddq_f64(v150[3], vmulq_f64(v160, point));
        v203.CGFloat a = v150[4].f64[0];
        v203.CGFloat d = v160.f64[1];
        *(float64x2_t *)&v203.tCGFloat x = v161;
        CGPoint v162 = CGPointApplyAffineTransform(v218, &v203);
        outlined release of ReflowTextLine((uint64_t)v204);
        double v163 = sqrt((v162.x - v158) * (v162.x - v158) + (v162.y - v159) * (v162.y - v159));
        if (v152)
        {
          if (__OFADD__(v138++, 1)) {
            goto LABEL_122;
          }
          swift_beginAccess();
          uint64_t v165 = *(void **)v187;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)unint64_t v187 = v165;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v165 = specialized _ArrayBuffer._consumeAndCreateNew()(v165);
            *(void *)unint64_t v187 = v165;
          }
          if (v137 >= v165[2]) {
            goto LABEL_124;
          }
          *(double *)&v165[(unint64_t)v139 / 8 + 23] = v163;
        }
        else
        {
          if ((v138 & 0x8000000000000000) != 0) {
            goto LABEL_123;
          }
          if (v138 >= v106[2]) {
            goto LABEL_125;
          }
          uint64_t v167 = v106[v138 + 4];
          swift_beginAccess();
          uint64_t v168 = *(void **)v187;
          char v169 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)unint64_t v187 = v168;
          if ((v169 & 1) == 0)
          {
            uint64_t v168 = specialized _ArrayBuffer._consumeAndCreateNew()(v168);
            *(void *)unint64_t v187 = v168;
          }
          if (v137 >= v168[2]) {
            goto LABEL_126;
          }
          v168[(unint64_t)v139 / 8 + 23] = v167;
        }
        CGFloat v170 = *v187;
        swift_endAccess();
        if (v137 >= *(void *)(*(void *)&v170 + 16)) {
          goto LABEL_118;
        }
        double v171 = *(double *)(*(void *)&v170 + v139 + 184);
        swift_beginAccess();
        char v172 = *(void **)v187;
        char v173 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)unint64_t v187 = v172;
        if ((v173 & 1) == 0)
        {
          char v172 = specialized _ArrayBuffer._consumeAndCreateNew()(v172);
          *(void *)unint64_t v187 = v172;
        }
        if (v137 >= v172[2]) {
          goto LABEL_119;
        }
        *(double *)&v172[(unint64_t)v139 / 8 + 24] = v163 - v171;
        swift_endAccess();
        swift_release();
        goto LABEL_110;
      }
      if (v137 - 1 >= *(void *)(*(void *)v187 + 16)) {
        goto LABEL_121;
      }
      uint64_t v153 = v136;
      unint64_t v154 = *(void *)(*(void *)v187 + v139);
      if (v154 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v155 = _CocoaArrayWrapper.endIndex.getter();
        if (v155) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v155 = *(void *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v155)
        {
LABEL_81:
          unint64_t v156 = v155 - 1;
          if (__OFSUB__(v155, 1)) {
            goto LABEL_131;
          }
          if ((v154 & 0xC000000000000001) != 0)
          {
            uint64_t v157 = MEMORY[0x21054E050](v156, v154);
          }
          else
          {
            if ((v156 & 0x8000000000000000) != 0) {
              goto LABEL_132;
            }
            if (v156 >= *(void *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_133;
            }
            uint64_t v157 = *(void *)(v154 + 8 * v156 + 32);
            swift_retain();
          }
          swift_bridgeObjectRelease();
          int v152 = *(unsigned __int8 *)(v157 + 136);
          uint64_t v151 = swift_release();
          goto LABEL_92;
        }
      }
      uint64_t v151 = swift_bridgeObjectRelease();
      int v152 = 0;
LABEL_92:
      uint64_t v136 = v153;
      goto LABEL_93;
    }
    uint64_t v149 = *(void *)((*(void *)v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined retain of ReflowTextLine((uint64_t)v204);
    swift_bridgeObjectRetain();
    if (v149) {
      goto LABEL_73;
    }
LABEL_88:
    swift_bridgeObjectRelease();
    outlined release of ReflowTextLine((uint64_t)v204);
LABEL_110:
    if (v200 != v137)
    {
      v139 += 168;
      ++v137;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  CGFloat v174 = *v187;
  uint64_t v175 = *(void *)(*(void *)v187 + 16);
  if (!v175) {
LABEL_135:
  }
    __break(1u);
  uint64_t v176 = (2 * v175) | 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
  uint64_t v177 = swift_allocObject();
  *(_OWORD *)(v177 + 16) = xmmword_20C832C20;
  double v179 = UnknownCanvasElementView.flags.modify(v177, v178);
  *(void *)(v177 + 32) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v177 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
  *(_OWORD *)(v177 + 56) = 0u;
  *(_OWORD *)(v177 + 72) = 0u;
  *(double *)(v177 + 88) = v179;
  *(void *)(v177 + 96) = v180;
  *(void *)(v177 + 104) = 0;
  *(void *)(v177 + 112) = 0;
  *(double *)(v177 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v179;
  *(void *)(v177 + 128) = v180;
  *(void *)(v177 + 136) = 0;
  *(void *)(v177 + 144) = 0;
  *(double *)(v177 + 152) = v179;
  *(void *)(v177 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v180;
  *(_OWORD *)(v177 + 168) = 0u;
  *(_OWORD *)(v177 + 184) = 0u;
  swift_bridgeObjectRetain_n();
  *(CGFloat *)unsigned int v204 = v174;
  *(void *)&v204[8] = *(void *)&v174 + 32;
  *(void *)&v204[16] = 1;
  *(void *)&v204[24] = v176;
  specialized ArraySlice.append<A>(contentsOf:)(v177);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  long long v181 = *(_OWORD *)&v204[16];
  CGPoint v201 = *(CGPoint *)v204;
  *(CGFloat *)unsigned int v204 = v174;
  *(CGPoint *)&v204[8] = v201;
  *(_OWORD *)&v204[24] = v181;
  uint64_t v182 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8PaperKit14ReflowTextLineVGs10ArraySliceVyAJGG_AJs5NeverOTg503_s8f5Kit19h52LayoutManagerC8contents5frame09strokesToC0ACSayAA0C8iJ56VG_So6CGRectVSay06PencilB08PKStrokeVGtcfcA2H_AHt_tXEfU1_So0Z0VTf1cn_n(v204, v188, v189, a5, a6);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v184 + 88) = v182;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v184;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8PaperKit14ReflowTextLineVGs10ArraySliceVyAJGG_AJs5NeverOTg503_s8f5Kit19h52LayoutManagerC8contents5frame09strokesToC0ACSayAA0C8iJ56VG_So6CGRectVSay06PencilB08PKStrokeVGtcfcA2H_AHt_tXEfU1_So0Z0VTf1cn_n(void *result, CGFloat a2, CGFloat a3, double a4, CGFloat a5)
{
  uint64_t v65 = result[3];
  uint64_t v68 = result[4] >> 1;
  if (__OFSUB__(v68, v65))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v6 = v5;
  uint64_t v63 = result[2];
  uint64_t v64 = *result;
  unint64_t v11 = *(void *)(*result + 16);
  if (v68 - v65 >= (uint64_t)v11) {
    uint64_t v12 = *(void *)(*result + 16);
  }
  else {
    uint64_t v12 = v68 - v65;
  }
  uint64_t v116 = MEMORY[0x263F8EE78];
  uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = v116;
    if (v12)
    {
      swift_bridgeObjectRetain();
      uint64_t result = (void *)swift_unknownObjectRetain();
      char v15 = 0;
      unint64_t v16 = 0;
      uint64_t v67 = v65;
      while (1)
      {
        if (v15)
        {
          _s8PaperKit14ReflowTextLineV_ACtSgWOi0_(v103);
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v103, (uint64_t)__src, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
          char v15 = 1;
        }
        else
        {
          unint64_t v17 = v11;
          if (v16 == v11) {
            goto LABEL_13;
          }
          if (v16 >= v11) {
            goto LABEL_45;
          }
          uint64_t v18 = v64 + 32 + 168 * v16;
          long long v19 = *(_OWORD *)v18;
          long long v20 = *(_OWORD *)(v18 + 32);
          v103[1] = *(_OWORD *)(v18 + 16);
          v103[2] = v20;
          v103[0] = v19;
          long long v21 = *(_OWORD *)(v18 + 48);
          long long v22 = *(_OWORD *)(v18 + 64);
          long long v23 = *(_OWORD *)(v18 + 96);
          v103[5] = *(_OWORD *)(v18 + 80);
          v103[6] = v23;
          v103[3] = v21;
          v103[4] = v22;
          long long v24 = *(_OWORD *)(v18 + 112);
          long long v25 = *(_OWORD *)(v18 + 128);
          long long v26 = *(_OWORD *)(v18 + 144);
          *(void *)&v103[10] = *(void *)(v18 + 160);
          v103[9] = v26;
          v103[8] = v25;
          v103[7] = v24;
          unint64_t v17 = v16 + 1;
          if (v67 == v68)
          {
LABEL_13:
            _s8PaperKit14ReflowTextLineV_ACtSgWOi0_(v103);
            outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v103, (uint64_t)__src, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
            char v15 = 1;
          }
          else
          {
            if (v67 < v65 || v67 >= v68) {
              goto LABEL_46;
            }
            uint64_t v27 = (long long *)(v63 + 168 * v67);
            long long v28 = *v27;
            long long v29 = v27[2];
            long long v93 = v27[1];
            long long v94 = v29;
            long long v92 = v28;
            long long v30 = v27[3];
            long long v31 = v27[4];
            long long v32 = v27[6];
            long long v97 = v27[5];
            long long v98 = v32;
            long long v95 = v30;
            long long v96 = v31;
            long long v33 = v27[7];
            long long v34 = v27[8];
            long long v35 = v27[9];
            uint64_t v102 = *((void *)v27 + 20);
            long long v100 = v34;
            long long v101 = v35;
            long long v99 = v33;
            ++v67;
            __src[1] = v103[1];
            __src[0] = v103[0];
            __src[5] = v103[5];
            __src[4] = v103[4];
            __src[2] = v103[2];
            __src[3] = v103[3];
            *(void *)&__src[10] = *(void *)&v103[10];
            __src[9] = v103[9];
            __src[8] = v103[8];
            __src[6] = v103[6];
            __src[7] = v103[7];
            *(_OWORD *)((char *)&__src[18] + 8) = v34;
            *(_OWORD *)((char *)&__src[19] + 8) = v35;
            *((void *)&__src[20] + 1) = v102;
            *(_OWORD *)((char *)&__src[14] + 8) = v96;
            *(_OWORD *)((char *)&__src[15] + 8) = v97;
            *(_OWORD *)((char *)&__src[16] + 8) = v32;
            *(_OWORD *)((char *)&__src[17] + 8) = v33;
            *(_OWORD *)((char *)&__src[10] + 8) = v92;
            *(_OWORD *)((char *)&__src[11] + 8) = v93;
            *(_OWORD *)((char *)&__src[12] + 8) = v94;
            *(_OWORD *)((char *)&__src[13] + 8) = v95;
            UnknownCanvasElementView.flags.modify(__src, v14);
            outlined retain of ReflowTextLine((uint64_t)v103);
            outlined retain of ReflowTextLine((uint64_t)&v92);
            char v15 = 0;
          }
          unint64_t v16 = v17;
        }
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)__src, (uint64_t)&v92, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v92, (uint64_t)v103, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
        uint64_t result = (void *)_s8PaperKit14ReflowTextLineVSgWOg((uint64_t *)v103);
        if (result == 1) {
          goto LABEL_49;
        }
        closure #3 in ReflowLayoutManager.init(contents:frame:strokesToReflow:)(__src, (uint64_t)&v105, a2, a3, a4, a5);
        if (v6) {
          break;
        }
        uint64_t v6 = 0;
        memcpy(__dst, __src, sizeof(__dst));
        uint64_t result = (void *)outlined release of (ReflowTextLine, ReflowTextLine)((uint64_t)__dst);
        long long v77 = v109;
        long long v79 = v110;
        long long v71 = v106;
        long long v73 = v107;
        long long v75 = v108;
        long long v85 = v113;
        long long v87 = v114;
        long long v81 = v111;
        long long v83 = v112;
        uint64_t v89 = v115;
        unint64_t v37 = *(void *)(v13 + 16);
        unint64_t v36 = *(void *)(v13 + 24);
        long long v69 = v105;
        uint64_t v116 = v13;
        if (v37 >= v36 >> 1)
        {
          uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
          uint64_t v13 = v116;
        }
        *(void *)(v13 + 16) = v37 + 1;
        uint64_t v38 = v13 + 168 * v37;
        *(_OWORD *)(v38 + 48) = v71;
        *(_OWORD *)(v38 + 64) = v73;
        *(_OWORD *)(v38 + 32) = v69;
        *(_OWORD *)(v38 + 112) = v79;
        *(_OWORD *)(v38 + 128) = v81;
        *(_OWORD *)(v38 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v75;
        *(_OWORD *)(v38 + 96) = v77;
        *(void *)(v38 + 192) = v89;
        *(_OWORD *)(v38 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v85;
        *(_OWORD *)(v38 + 176) = v87;
        *(_OWORD *)(v38 + 144) = v83;
        if (!--v12) {
          goto LABEL_25;
        }
      }
      swift_release();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      memcpy(__dst, __src, sizeof(__dst));
      outlined release of (ReflowTextLine, ReflowTextLine)((uint64_t)__dst);
      return (void *)v13;
    }
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_unknownObjectRetain();
    unint64_t v16 = 0;
    char v15 = 0;
    uint64_t v67 = v65;
LABEL_25:
    if ((v15 & 1) != 0 || v11 == v16)
    {
LABEL_39:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return (void *)v13;
    }
    unint64_t v39 = v11 - v16;
    if (v11 >= v16) {
      unint64_t v40 = v11 - v16;
    }
    else {
      unint64_t v40 = 0;
    }
    uint64_t v41 = 168 * v16 + 32;
    uint64_t v42 = v67;
    double v43 = (long long *)(v63 + 168 * v67);
    while (v40)
    {
      long long v44 = *(_OWORD *)(v64 + v41);
      long long v45 = *(_OWORD *)(v64 + v41 + 32);
      long long v93 = *(_OWORD *)(v64 + v41 + 16);
      long long v94 = v45;
      long long v92 = v44;
      long long v46 = *(_OWORD *)(v64 + v41 + 48);
      long long v47 = *(_OWORD *)(v64 + v41 + 64);
      long long v48 = *(_OWORD *)(v64 + v41 + 96);
      long long v97 = *(_OWORD *)(v64 + v41 + 80);
      long long v98 = v48;
      long long v95 = v46;
      long long v96 = v47;
      long long v49 = *(_OWORD *)(v64 + v41 + 112);
      long long v50 = *(_OWORD *)(v64 + v41 + 128);
      long long v51 = *(_OWORD *)(v64 + v41 + 144);
      uint64_t v102 = *(void *)(v64 + v41 + 160);
      long long v100 = v50;
      long long v101 = v51;
      long long v99 = v49;
      if (v68 == v42) {
        goto LABEL_39;
      }
      if (v67 < v65 || v42 >= v68) {
        goto LABEL_44;
      }
      long long v52 = *v43;
      long long v53 = v43[2];
      __dst[1] = v43[1];
      __dst[2] = v53;
      __dst[0] = v52;
      long long v54 = v43[3];
      long long v55 = v43[4];
      long long v56 = v43[6];
      __dst[5] = v43[5];
      __dst[6] = v56;
      __dst[3] = v54;
      __dst[4] = v55;
      long long v57 = v43[7];
      long long v58 = v43[8];
      long long v59 = v43[9];
      *(void *)&__dst[10] = *((void *)v43 + 20);
      __dst[8] = v58;
      __dst[9] = v59;
      __dst[7] = v57;
      v103[0] = v92;
      v103[1] = v93;
      v103[4] = v96;
      v103[5] = v97;
      v103[2] = v94;
      v103[3] = v95;
      *(void *)&v103[10] = v102;
      v103[9] = v101;
      v103[8] = v100;
      v103[6] = v98;
      v103[7] = v99;
      *(_OWORD *)((char *)&v103[18] + 8) = v58;
      *(_OWORD *)((char *)&v103[19] + 8) = v59;
      *((void *)&v103[20] + 1) = *(void *)&__dst[10];
      *(_OWORD *)((char *)&v103[14] + 8) = __dst[4];
      *(_OWORD *)((char *)&v103[15] + 8) = __dst[5];
      *(_OWORD *)((char *)&v103[16] + 8) = v56;
      *(_OWORD *)((char *)&v103[17] + 8) = v57;
      *(_OWORD *)((char *)&v103[10] + 8) = __dst[0];
      *(_OWORD *)((char *)&v103[11] + 8) = __dst[1];
      *(_OWORD *)((char *)&v103[12] + 8) = __dst[2];
      *(_OWORD *)((char *)&v103[13] + 8) = __dst[3];
      memcpy(__src, v103, sizeof(__src));
      outlined retain of ReflowTextLine((uint64_t)&v92);
      outlined retain of ReflowTextLine((uint64_t)__dst);
      closure #3 in ReflowLayoutManager.init(contents:frame:strokesToReflow:)(__src, (uint64_t)&v105, a2, a3, a4, a5);
      if (v6)
      {
        outlined release of (ReflowTextLine, ReflowTextLine)((uint64_t)v103);
        swift_release();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return (void *)v13;
      }
      uint64_t v6 = 0;
      unint64_t v66 = v39;
      uint64_t result = (void *)outlined release of (ReflowTextLine, ReflowTextLine)((uint64_t)v103);
      long long v78 = v109;
      long long v80 = v110;
      long long v72 = v106;
      long long v74 = v107;
      long long v76 = v108;
      long long v86 = v113;
      long long v88 = v114;
      long long v82 = v111;
      long long v84 = v112;
      uint64_t v90 = v115;
      unint64_t v61 = *(void *)(v13 + 16);
      unint64_t v60 = *(void *)(v13 + 24);
      long long v70 = v105;
      uint64_t v116 = v13;
      if (v61 >= v60 >> 1)
      {
        uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
        uint64_t v13 = v116;
      }
      *(void *)(v13 + 16) = v61 + 1;
      uint64_t v62 = v13 + 168 * v61;
      *(_OWORD *)(v62 + 48) = v72;
      *(_OWORD *)(v62 + 64) = v74;
      *(_OWORD *)(v62 + 32) = v70;
      *(_OWORD *)(v62 + 112) = v80;
      *(_OWORD *)(v62 + 128) = v82;
      *(_OWORD *)(v62 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v76;
      *(_OWORD *)(v62 + 96) = v78;
      *(void *)(v62 + 192) = v90;
      *(_OWORD *)(v62 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v86;
      *(_OWORD *)(v62 + 176) = v88;
      --v40;
      *(_OWORD *)(v62 + 144) = v84;
      v41 += 168;
      double v43 = (long long *)((char *)v43 + 168);
      ++v42;
      unint64_t v39 = v66 - 1;
      if (v66 == 1) {
        goto LABEL_39;
      }
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

double closure #3 in ReflowLayoutManager.init(contents:frame:strokesToReflow:)@<D0>(void *__src@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, double MaxX@<D2>, CGFloat Width@<D3>)
{
  memcpy(v25, __src, sizeof(v25));
  outlined retain of (ReflowTextLine, ReflowTextLine)((uint64_t)v25);
  outlined release of ReflowTextLine((uint64_t)&v25[10] + 8);
  uint64_t v13 = *(void *)&v25[0];
  if (*(void *)&v25[0] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    if (!v14) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((*(void *)&v25[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v14) {
      goto LABEL_27;
    }
  }
  unint64_t v15 = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
    __break(1u);
  }
  else if ((v13 & 0xC000000000000001) == 0)
  {
    if ((v15 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v15 < *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v16 = *(void *)(v13 + 8 * v15 + 32);
      swift_retain();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v16 = MEMORY[0x21054E050](v15, v13);
LABEL_8:
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v16 + 136))
  {
LABEL_18:
    swift_release();
LABEL_28:
    double v20 = 0.0;
    goto LABEL_29;
  }
  v26.origin.CGFloat x = a3;
  v26.origin.CGFloat y = a4;
  v26.size.CGFloat width = MaxX;
  v26.size.CGFloat height = Width;
  double Width = CGRectGetWidth(v26);
  double MaxX = CGRectGetMaxX(*(CGRect *)(v16 + 16));
  uint64_t v6 = *((void *)&v25[10] + 1);
  if (!(*((void *)&v25[10] + 1) >> 62))
  {
    uint64_t v17 = *(void *)((*((void *)&v25[10] + 1) & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_26:
    swift_release();
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
LABEL_11:
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = MEMORY[0x21054E050](0, v6);
LABEL_14:
    double MaxX = Width - MaxX;
    swift_bridgeObjectRelease();
    if (one-time initialization token for handwritingReflowMinimumSpaceWidth == -1) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v7 = *(void *)(v6 + 32);
    swift_retain();
    goto LABEL_14;
  }
  __break(1u);
LABEL_32:
  swift_once();
LABEL_15:
  double v18 = *(double *)&static UIConstants.handwritingReflowMinimumSpaceWidth;
  if (v18 + CGRectGetWidth(*(CGRect *)(v7 + 16)) >= MaxX)
  {
    swift_release();
    goto LABEL_18;
  }
  double v19 = CGRectGetWidth(*(CGRect *)(v7 + 16));
  swift_release();
  swift_release();
  double v20 = MaxX - (v18 + v19 * 0.5);
LABEL_29:
  uint64_t v21 = *(void *)&v25[10];
  uint64_t v22 = *((void *)&v25[9] + 1);
  uint64_t v23 = *((void *)&v25[0] + 1);
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v23;
  *(_OWORD *)(a2 + 16) = v25[1];
  *(double *)(a2 + 32) = v20;
  *(_OWORD *)(a2 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(_OWORD *)((char *)&v25[2] + 8);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)((char *)&v25[3] + 8);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)((char *)&v25[4] + 8);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)((char *)&v25[5] + 8);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)((char *)&v25[6] + 8);
  *(_OWORD *)(a2 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(_OWORD *)((char *)&v25[7] + 8);
  double result = *((double *)&v25[8] + 1);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)((char *)&v25[8] + 8);
  *(void *)(a2 + 152) = v22;
  *(void *)(a2 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v21;
  return result;
}

BOOL ReflowLayoutManager.canReplaceStrokesAtomically(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v38 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  long long v51 = (char *)&v33 - v7;
  if (!*(void *)(a1 + 16)) {
    return 1;
  }
  swift_beginAccess();
  unint64_t v8 = *(void *)(v1 + 80);
  if (v8 >> 62) {
    goto LABEL_36;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v40 = 0;
    unint64_t v10 = 0;
    unint64_t v44 = v8 & 0xC000000000000001;
    uint64_t v35 = v8 & 0xFFFFFFFFFFFFFF8;
    unint64_t v34 = v8 + 32;
    uint64_t v50 = v38 + 16;
    unint64_t v11 = (void (**)(char *, uint64_t))(v38 + 8);
    uint64_t v36 = v9;
    uint64_t v37 = a1;
    unint64_t v39 = v8;
    while (v44)
    {
      uint64_t v12 = MEMORY[0x21054E050](v10, v8);
      BOOL v13 = __OFADD__(v10++, 1);
      if (v13) {
        goto LABEL_34;
      }
LABEL_13:
      type metadata accessor for ReflowWord();
      uint64_t v14 = swift_dynamicCastClass();
      if (v14)
      {
        uint64_t v15 = a1;
        uint64_t v16 = *(void *)(v14 + 288);
        uint64_t v17 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
        swift_bridgeObjectRetain();
        uint64_t v47 = v17;
        uint64_t v18 = Set.init(minimumCapacity:)();
        uint64_t v46 = *(void *)(v16 + 16);
        if (v46)
        {
          uint64_t v42 = v12;
          unint64_t v43 = v10;
          uint64_t v19 = 0;
          uint64_t v20 = *(unsigned __int8 *)(v38 + 80);
          uint64_t v41 = v16;
          uint64_t v45 = v16 + ((v20 + 32) & ~v20);
          uint64_t v49 = *(void *)(v38 + 72);
          uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
          do
          {
            uint64_t v48 = v19;
            v21(v51, v45 + v49 * v19, v3);
            swift_bridgeObjectRetain();
            uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v25 = -1 << *(unsigned char *)(v18 + 32);
            unint64_t v26 = v24 & ~v25;
            if ((*(void *)(v18 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
            {
              uint64_t v27 = ~v25;
              while (1)
              {
                v21(v5, *(void *)(v18 + 48) + v26 * v49, v3);
                lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
                char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
                long long v29 = *v11;
                (*v11)(v5, v3);
                if (v28) {
                  break;
                }
                unint64_t v26 = (v26 + 1) & v27;
                if (((*(void *)(v18 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
                  goto LABEL_16;
                }
              }
              swift_bridgeObjectRelease();
              v29(v51, v3);
            }
            else
            {
LABEL_16:
              swift_bridgeObjectRelease();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v23 = v51;
              v21(v5, (uint64_t)v51, v3);
              uint64_t v52 = v18;
              specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v5, v26, isUniquelyReferenced_nonNull_native);
              uint64_t v18 = v52;
              swift_bridgeObjectRelease();
              (*v11)(v23, v3);
            }
            uint64_t v19 = v48 + 1;
          }
          while (v48 + 1 != v46);
          swift_bridgeObjectRelease();
          uint64_t v9 = v36;
          a1 = v37;
          unint64_t v8 = v39;
          unint64_t v10 = v43;
        }
        else
        {
          swift_bridgeObjectRelease();
          a1 = v15;
          unint64_t v8 = v39;
        }
        if (specialized Set.isDisjoint(with:)(a1, v18))
        {
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v30 = specialized Set.isSubset(of:)(a1, v18);
          swift_release();
          if ((v30 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0;
          }
          uint64_t v31 = *(void *)(v18 + 16);
          swift_bridgeObjectRelease();
          BOOL v13 = __OFADD__(v40, v31);
          v40 += v31;
          if (v13)
          {
            __break(1u);
            return 1;
          }
        }
      }
      else
      {
        swift_release();
      }
      if (v10 == v9) {
        goto LABEL_38;
      }
    }
    if (v10 >= *(void *)(v35 + 16)) {
      goto LABEL_35;
    }
    uint64_t v12 = *(void *)(v34 + 8 * v10);
    swift_retain();
    BOOL v13 = __OFADD__(v10++, 1);
    if (!v13) {
      goto LABEL_13;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
  }
  uint64_t v40 = 0;
LABEL_38:
  swift_bridgeObjectRelease();
  return v40 == *(void *)(a1 + 16);
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v47 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v39 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v46 = (char *)&v39 - v11;
  unint64_t v12 = *(void *)(a2 + 16);
  if (!v12) {
    return 1;
  }
  unint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return 1;
  }
  if (v12 >= v13) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = a2;
  }
  if (v12 >= v13) {
    a1 = a2;
  }
  uint64_t v15 = *(void *)(v14 + 56);
  uint64_t v41 = v14 + 56;
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  uint64_t v39 = ~v16;
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v40 = (unint64_t)(63 - v16) >> 6;
  uint64_t v42 = v47 + 32;
  uint64_t v50 = a1 + 56;
  uint64_t v51 = v47 + 16;
  uint64_t v19 = (void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v45 = v14;
  swift_bridgeObjectRetain();
  uint64_t v52 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v49)
  {
    unint64_t v43 = v18;
    uint64_t v44 = i;
    if (!v18) {
      break;
    }
    uint64_t v48 = (v18 - 1) & v18;
    int64_t v49 = i;
    unint64_t v22 = __clz(__rbit64(v18)) | (i << 6);
LABEL_29:
    uint64_t v27 = v46;
    uint64_t v28 = v47;
    uint64_t v29 = *(void *)(v47 + 72);
    char v30 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
    v30(v46, *(void *)(v45 + 48) + v29 * v22, v4);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v9, v27, v4);
    if (*(void *)(v52 + 16))
    {
      uint64_t v31 = v52;
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
      unint64_t v34 = v32 & ~v33;
      if ((*(void *)(v50 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34))
      {
        uint64_t v35 = ~v33;
        while (1)
        {
          v30(v6, *(void *)(v52 + 48) + v34 * v29, v4);
          lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
          char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v37 = (uint64_t (*)(char *, uint64_t))*v19;
          (*v19)(v6, v4);
          if (v36) {
            break;
          }
          unint64_t v34 = (v34 + 1) & v35;
          if (((*(void *)(v50 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
            goto LABEL_12;
          }
        }
        swift_bridgeObjectRelease();
        v37(v9, v4);
        uint64_t v38 = 0;
        goto LABEL_37;
      }
    }
LABEL_12:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v19)(v9, v4);
    unint64_t v18 = v48;
  }
  int64_t v23 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v23 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v23);
  int64_t v25 = i + 1;
  if (v24) {
    goto LABEL_28;
  }
  int64_t v25 = i + 2;
  if (i + 2 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v25);
  if (v24) {
    goto LABEL_28;
  }
  int64_t v25 = i + 3;
  if (i + 3 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v25);
  if (v24)
  {
LABEL_28:
    uint64_t v48 = (v24 - 1) & v24;
    int64_t v49 = v25;
    unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_29;
  }
  uint64_t v26 = i + 4;
  if (i + 4 >= v40)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t v38 = 1;
LABEL_37:
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v38;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v26);
  if (v24)
  {
    int64_t v25 = i + 4;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v25 >= v40) {
      goto LABEL_39;
    }
    unint64_t v24 = *(void *)(v41 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_28;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t ReflowLayoutManager.replaceStrokes(_:with:)(unint64_t *a1, unint64_t a2)
{
  CGFloat v170 = a1;
  uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v155 = *(void *)(v174 - 8);
  MEMORY[0x270FA5388](v174);
  char v173 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v169);
  uint64_t v168 = (char *)&v152 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v154 = *(void *)(v172 - 8);
  MEMORY[0x270FA5388](v172);
  uint64_t v167 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  double v171 = (char *)&v152 - v13;
  unint64_t v14 = type metadata accessor for IndexSet();
  uint64_t v156 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t j = (uint64_t)&v152 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v185 = a2;
  swift_bridgeObjectRetain();
  IndexSet.init()();
  double v159 = (Swift::Int *)(v2 + 80);
  swift_beginAccess();
  unint64_t v153 = v2;
  unint64_t v17 = *(void *)(v2 + 80);
  if (!(v17 >> 62))
  {
    Swift::Int v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_3;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    Swift::Int v18 = _CocoaArrayWrapper.endIndex.getter();
LABEL_3:
    Swift::Int v160 = j;
    unint64_t v158 = a2;
    unint64_t v157 = v14;
    if (v18)
    {
      if (v18 < 1) {
        goto LABEL_365;
      }
      Swift::Int v6 = 0;
      uint64_t v178 = 0;
      uint64_t v175 = (void (**)(unint64_t, uint64_t))(v17 & 0xC000000000000001);
      uint64_t v164 = (void (**)(char *, uint64_t, uint64_t))(v154 + 16);
      uint64_t v163 = v154 + 8;
      CGPoint v162 = (uint64_t (**)(char *, uint64_t, uint64_t))(v155 + 16);
      float64x2_t v161 = (void (**)(char *, uint64_t))(v155 + 8);
      unint64_t v166 = v17;
      Swift::Int v165 = v18;
      uint64_t v7 = v172;
      uint64_t v19 = (void (***)(unint64_t, uint64_t, uint64_t))(v154 + 8);
      do
      {
        if (v175)
        {
          unint64_t v14 = MEMORY[0x21054E050](v6, v17);
        }
        else
        {
          unint64_t v14 = *(void *)(v17 + 8 * v6 + 32);
          swift_retain();
        }
        type metadata accessor for ReflowWord();
        uint64_t v20 = swift_dynamicCastClass();
        if (v20)
        {
          uint64_t v21 = v20;
          unint64_t v177 = v14;
          uint64_t v22 = *(void *)(v20 + 280) + OBJC_IVAR___PKDrawingCoherence_model;
          swift_beginAccess();
          int64_t v23 = *v164;
          unint64_t v24 = v171;
          (*v164)(v171, v22, v7);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
          uint64_t v25 = (uint64_t)v168;
          Capsule<>.root.getter();
          uint64_t v176 = *v19;
          ((void (*)(char *, uint64_t))v176)(v24, v7);
          uint64_t v26 = *(void *)(v21 + 280) + OBJC_IVAR___PKDrawingCoherence_model;
          swift_beginAccess();
          uint64_t v3 = (uint64_t)v167;
          v23(v167, v26, v7);
          uint64_t v27 = v173;
          uint64_t v28 = v174;
          uint64_t v29 = (*v162)(v173, v25 + *(int *)(v169 + 20), v174);
          unint64_t v5 = (unint64_t)&v152;
          MEMORY[0x270FA5388](v29);
          uint64_t v150 = v170;
          uint64_t v151 = v3;
          uint64_t j = v178;
          BOOL v30 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Ref<>.containsStrokes<A>(_:in:), (uint64_t)v148);
          uint64_t v178 = j;
          (*v161)(v27, v28);
          ((void (*)(uint64_t, uint64_t))v176)(v3, v7);
          outlined destroy of PKDrawingStruct(v25);
          if (v30) {
            IndexSet.insert(_:)(v6);
          }
          unint64_t v17 = v166;
          Swift::Int v18 = v165;
          unint64_t v14 = v177;
        }
        ++v6;
        swift_release();
      }
      while (v18 != v6);
    }
    else
    {
      uint64_t v178 = 0;
    }
    swift_bridgeObjectRelease();
    Swift::Int v18 = v160;
    char v31 = IndexSet.isEmpty.getter();
    unint64_t v4 = v158;
    if (v31)
    {
      if (v158 >> 62) {
        goto LABEL_367;
      }
      unint64_t v14 = *(void *)((v158 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v14)
      {
LABEL_368:
        uint64_t v139 = (objc_class *)type metadata accessor for ReflowLayoutManager.TextPosition();
        long long v140 = objc_allocWithZone(v139);
        *(void *)&v140[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index] = 0;
        v140[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity] = 0;
        v179.receiver = v140;
        v179.super_class = v139;
        objc_msgSendSuper2(&v179, sel_init);
        goto LABEL_369;
      }
    }
LABEL_18:
    unint64_t v32 = IndexSet.first.getter();
    if (v33) {
      goto LABEL_47;
    }
    unint64_t v34 = v32;
    Swift::Int v18 = *v159;
    if ((*v159 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      a2 = MEMORY[0x21054E050](v34, v18);
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    if ((v32 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_373;
    }
    if (v32 < *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      break;
    }
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    swift_bridgeObjectRetain_n();
    uint64_t v143 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v143 < v7)
    {
LABEL_380:
      __break(1u);
LABEL_381:
      __break(1u);
LABEL_382:
      __break(1u);
LABEL_383:
      __break(1u);
LABEL_384:
      __break(1u);
LABEL_385:
      __break(1u);
LABEL_386:
      swift_bridgeObjectRetain_n();
      uint64_t v144 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v144 >= (uint64_t)v4) {
        goto LABEL_112;
      }
LABEL_387:
      __break(1u);
LABEL_388:
      __break(1u);
LABEL_389:
      __break(1u);
LABEL_390:
      __break(1u);
      goto LABEL_391;
    }
    while (1)
    {
      if (v7 < 0) {
        goto LABEL_381;
      }
      if (v14)
      {
        swift_bridgeObjectRetain();
        a2 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        a2 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if ((uint64_t)a2 < (uint64_t)v17) {
        goto LABEL_382;
      }
      if ((v17 & 0x8000000000000000) != 0) {
        goto LABEL_383;
      }
      if ((v18 & 0xC000000000000001) != 0)
      {
        if (v17 < v7) {
          goto LABEL_396;
        }
        if (v7 != v17)
        {
          if (v7 >= v17) {
            goto LABEL_405;
          }
          type metadata accessor for ReflowElement();
          Swift::Int v59 = v7;
          do
          {
            uint64_t j = v59 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v59);
            Swift::Int v59 = j;
          }
          while (v17 != j);
        }
      }
      if (v14)
      {
        swift_bridgeObjectRetain();
        unint64_t v14 = _CocoaArrayWrapper.subscript.getter();
        unint64_t v177 = v60;
        uint64_t v7 = v61;
        unint64_t v17 = v62;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        unint64_t v14 = v18 & 0xFFFFFFFFFFFFFF8;
        unint64_t v177 = (v18 & 0xFFFFFFFFFFFFFF8) + 32;
        unint64_t v17 = (2 * v17) | 1;
      }
      Swift::Int v18 = v160;
      uint64_t v3 = v17 >> 1;
      unint64_t v5 = MEMORY[0x263F8EE78];
      if (v7 != v17 >> 1) {
        break;
      }
LABEL_106:
      swift_unknownObjectRelease();
      uint64_t v83 = IndexSet.first.getter();
      uint64_t v7 = v169;
      if (v84) {
        goto LABEL_426;
      }
      unint64_t v4 = v83;
      uint64_t v85 = IndexSet.last.getter();
      if (v86) {
        goto LABEL_427;
      }
      if (v85 < (uint64_t)v4) {
        goto LABEL_384;
      }
      unint64_t v14 = v85 + 1;
      if (__OFADD__(v85, 1)) {
        goto LABEL_385;
      }
      Swift::Int v18 = *v159;
      uint64_t j = (unint64_t)*v159 >> 62;
      if (j) {
        goto LABEL_386;
      }
      int64_t v87 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v87 < (uint64_t)v4) {
        goto LABEL_387;
      }
LABEL_112:
      if ((v4 & 0x8000000000000000) != 0) {
        goto LABEL_388;
      }
      if (j)
      {
        swift_bridgeObjectRetain();
        a2 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        a2 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if ((uint64_t)a2 < (uint64_t)v14) {
        goto LABEL_389;
      }
      if ((v14 & 0x8000000000000000) != 0) {
        goto LABEL_390;
      }
      if ((v18 & 0xC000000000000001) == 0) {
        goto LABEL_124;
      }
      if (v14 < v4)
      {
        while (1)
        {
          __break(1u);
LABEL_398:
          __break(1u);
LABEL_399:
          swift_unknownObjectRelease();
LABEL_127:
          uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, v17, v6, v5);
LABEL_134:
          swift_unknownObjectRelease();
          Swift::Int v18 = *v159;
          uint64_t j = v158;
          unint64_t v5 = (unint64_t)v175;
          if ((*v159 & 0xC000000000000001) != 0)
          {
LABEL_391:
            swift_bridgeObjectRetain();
            a2 = MEMORY[0x21054E050](v7, v18);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v7 < 0)
            {
              __break(1u);
LABEL_393:
              __break(1u);
              goto LABEL_394;
            }
            if ((unint64_t)v7 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_393;
            }
            a2 = *(void *)(v18 + 8 * v7 + 32);
            swift_retain();
          }
          LODWORD(v167) = *(unsigned __int8 *)(a2 + 136);
          swift_release();
          Swift::Int v18 = (Swift::Int)v159;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          specialized Array.replaceSubrange<A>(_:with:)(v4, v14, j);
          swift_endAccess();
          unint64_t v14 = v153;
          uint64_t v7 = v153 + 96;
          swift_beginAccess();
          long long v95 = *(char **)(*(void *)(v14 + 96) + 16);
          CGFloat v170 = (unint64_t *)v3;
          if (v95)
          {
            uint64_t v169 = v4;
            unint64_t v4 = 0;
            char v96 = 0;
            uint64_t v97 = ((unint64_t)v3 >> 62) & 1;
            if (v3 < 0) {
              LODWORD(v97) = 1;
            }
            LODWORD(v174) = v97;
            unint64_t v177 = v3 & 0xC000000000000001;
            double v171 = (char *)(v3 + 32);
            uint64_t v176 = (void (**)(unint64_t, uint64_t, uint64_t))v7;
            char v173 = v95;
            while (1)
            {
              Swift::Int v6 = v4 + 1;
              uint64_t v98 = *(void *)v7;
              unint64_t v99 = *(void *)(*(void *)v7 + 16);
              if (v96)
              {
                if (v4 >= v99) {
                  goto LABEL_333;
                }
                unint64_t v14 = *(void *)(v98 + 168 * v4 + 32);
                if (v174)
                {
                  swift_bridgeObjectRetain();
                  swift_retain();
                  swift_bridgeObjectRetain();
                  uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
                  swift_release();
                  if (!v100) {
                    goto LABEL_422;
                  }
                }
                else
                {
                  uint64_t v100 = *(void *)(v3 + 16);
                  swift_retain();
                  swift_bridgeObjectRetain();
                  if (!v100) {
                    goto LABEL_422;
                  }
                }
                unint64_t v101 = v100 - 1;
                if (__OFSUB__(v100, 1)) {
                  goto LABEL_335;
                }
                if (v177)
                {
                  Swift::Int v18 = MEMORY[0x21054E050](v101, v3);
                }
                else
                {
                  if ((v101 & 0x8000000000000000) != 0) {
                    goto LABEL_337;
                  }
                  if (v101 >= *(void *)(v3 + 16)) {
                    goto LABEL_338;
                  }
                  Swift::Int v18 = *(void *)&v171[8 * v101];
                  swift_retain();
                }
                swift_release();
                if (v14 >> 62)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v102 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v102) {
                    goto LABEL_232;
                  }
                }
                else
                {
                  uint64_t v102 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  if (!v102) {
                    goto LABEL_232;
                  }
                }
                BOOL v81 = __OFSUB__(v102, 1);
                a2 = v102 - 1;
                if (v81) {
                  goto LABEL_345;
                }
                uint64_t j = v14 & 0xC000000000000001;
                if ((v14 & 0xC000000000000001) != 0)
                {
                  unint64_t v17 = MEMORY[0x21054E050](a2, v14);
                  swift_unknownObjectRelease();
                  unint64_t v5 = (unint64_t)v175;
                  if (v17 != v18) {
                    goto LABEL_161;
                  }
                }
                else
                {
                  unint64_t v5 = (unint64_t)v175;
                  if ((a2 & 0x8000000000000000) != 0) {
                    goto LABEL_346;
                  }
                  if (a2 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                    goto LABEL_347;
                  }
                  if (*(void *)(v14 + 8 * a2 + 32) != v18)
                  {
LABEL_161:
                    if (a2)
                    {
                      uint64_t v3 = v14 & 0xFFFFFFFFFFFFFF8;
                      unint64_t v5 = v14 + 32;
                      while (1)
                      {
                        BOOL v81 = __OFSUB__(a2--, 1);
                        if (v81) {
                          break;
                        }
                        if (j)
                        {
                          unint64_t v17 = MEMORY[0x21054E050](a2, v14);
                          swift_unknownObjectRelease();
                          if (v17 == v18) {
                            goto LABEL_170;
                          }
                        }
                        else
                        {
                          if ((a2 & 0x8000000000000000) != 0) {
                            goto LABEL_330;
                          }
                          if (a2 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                            goto LABEL_331;
                          }
                          if (*(void *)(v5 + 8 * a2) == v18)
                          {
LABEL_170:
                            swift_bridgeObjectRelease();
                            unint64_t v5 = (unint64_t)v175;
                            uint64_t v3 = (uint64_t)v170;
                            goto LABEL_243;
                          }
                        }
                        if (!a2) {
                          goto LABEL_232;
                        }
                      }
                      __break(1u);
LABEL_323:
                      __break(1u);
LABEL_324:
                      __break(1u);
                      goto LABEL_325;
                    }
LABEL_232:
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_beginAccess();
                    unint64_t v14 = *(void *)v7;
                    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    *(void *)uint64_t v7 = v14;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    {
                      unint64_t v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v14);
                      *(void *)uint64_t v7 = v14;
                    }
                    unint64_t v5 = (unint64_t)v175;
                    uint64_t v3 = (uint64_t)v170;
                    a2 = (unint64_t)v173;
                    if (v4 >= *(void *)(v14 + 16)) {
                      goto LABEL_343;
                    }
                    unint64_t v110 = v14 + 168 * v4;
                    unint64_t v14 = *(void *)(v110 + 32);
                    *(void *)(v110 + 32) = MEMORY[0x263F8EE78];
                    swift_endAccess();
                    swift_bridgeObjectRelease();
                    if (v6 == a2) {
                      goto LABEL_280;
                    }
LABEL_268:
                    char v96 = 1;
                    goto LABEL_144;
                  }
                }
                swift_bridgeObjectRelease();
LABEL_243:
                swift_release();
                swift_beginAccess();
                unint64_t v14 = *(void *)v7;
                char v113 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)uint64_t v7 = v14;
                if ((v113 & 1) == 0)
                {
                  unint64_t v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v14);
                  *(void *)uint64_t v7 = v14;
                }
                if (v4 >= *(void *)(v14 + 16)) {
                  goto LABEL_354;
                }
                uint64_t v114 = a2 + 1;
                if (__OFADD__(a2, 1)) {
                  goto LABEL_355;
                }
                if (v114 < 0) {
                  goto LABEL_356;
                }
                Swift::Int v18 = v14 + 168 * v4 + 32;
                specialized Array.replaceSubrange<A>(_:with:)(0, v114);
                swift_endAccess();
                a2 = (unint64_t)v173;
                if ((char *)v6 == v173)
                {
LABEL_280:
                  unint64_t v4 = v169;
                  break;
                }
                goto LABEL_143;
              }
              if (v4 >= v99) {
                goto LABEL_334;
              }
              unint64_t v14 = *(void *)(v98 + 168 * v4 + 32);
              if (v174)
              {
                swift_bridgeObjectRetain();
                swift_retain();
                swift_bridgeObjectRetain();
                Swift::Int v18 = _CocoaArrayWrapper.endIndex.getter();
                swift_release();
                if (!v18) {
                  goto LABEL_423;
                }
              }
              else
              {
                Swift::Int v18 = *(void *)(v3 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                if (!v18) {
                  goto LABEL_423;
                }
              }
              if (v177)
              {
                a2 = MEMORY[0x21054E050](0, v3);
              }
              else
              {
                if (!*(void *)(v3 + 16)) {
                  goto LABEL_336;
                }
                a2 = *(void *)(v3 + 32);
                swift_retain();
              }
              swift_release();
              if (v14 >> 62)
              {
                swift_bridgeObjectRetain();
                unint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                unint64_t v17 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              uint64_t v172 = v4 + 1;
              if (!v17)
              {
                swift_bridgeObjectRelease();
                uint64_t j = 0;
                unint64_t v14 = 1;
                goto LABEL_199;
              }
              uint64_t j = v14 & 0xC000000000000001;
              if ((v14 & 0xC000000000000001) != 0)
              {
                uint64_t v111 = MEMORY[0x21054E050](0, v14);
                swift_unknownObjectRelease();
                if (v111 == a2)
                {
                  swift_bridgeObjectRelease();
                  uint64_t j = 0;
                  unint64_t v14 = 0;
LABEL_279:
                  uint64_t v7 = (uint64_t)v176;
                  goto LABEL_199;
                }
                uint64_t v7 = (uint64_t)v176;
                if (v17 == 1)
                {
LABEL_184:
                  swift_bridgeObjectRelease();
                  uint64_t j = 0;
                  unint64_t v14 = 1;
LABEL_198:
                  unint64_t v5 = (unint64_t)v175;
                  goto LABEL_199;
                }
                uint64_t v112 = MEMORY[0x21054E050](1, v14);
                swift_unknownObjectRelease();
                if (v112 == a2)
                {
                  swift_bridgeObjectRelease();
                  unint64_t v14 = 0;
                  uint64_t j = 1;
                  unint64_t v5 = (unint64_t)v175;
                  goto LABEL_279;
                }
                unint64_t v5 = v14 & 0xFFFFFFFFFFFFFF8;
                uint64_t v7 = (uint64_t)v176;
              }
              else
              {
                unint64_t v5 = v14 & 0xFFFFFFFFFFFFFF8;
                unint64_t v103 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (!v103) {
                  goto LABEL_344;
                }
                if (*(void *)(v14 + 32) == a2)
                {
                  swift_bridgeObjectRelease();
                  uint64_t j = 0;
                  unint64_t v14 = 0;
                  goto LABEL_198;
                }
                if (v17 == 1) {
                  goto LABEL_184;
                }
                if (v103 < 2) {
                  goto LABEL_366;
                }
                if (*(void *)(v14 + 40) == a2)
                {
                  swift_bridgeObjectRelease();
                  unint64_t v14 = 0;
                  uint64_t j = 1;
                  goto LABEL_198;
                }
              }
              uint64_t v3 = 0;
              Swift::Int v6 = v17 - 2;
              while (v6 != v3)
              {
                unint64_t v17 = v3 + 2;
                if (j)
                {
                  uint64_t v104 = MEMORY[0x21054E050](v3 + 2, v14);
                  swift_unknownObjectRelease();
                  BOOL v105 = v104 == a2;
                  uint64_t v7 = (uint64_t)v176;
                  if (v105) {
                    goto LABEL_196;
                  }
                }
                else
                {
                  if (v17 >= *(void *)(v5 + 16)) {
                    goto LABEL_342;
                  }
                  if (*(void *)(v14 + 8 * v3 + 48) == a2)
                  {
LABEL_196:
                    swift_bridgeObjectRelease();
                    unint64_t v14 = 0;
                    uint64_t j = v3 + 2;
                    goto LABEL_223;
                  }
                }
                ++v3;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_329;
                }
              }
              swift_bridgeObjectRelease();
              uint64_t j = 0;
              unint64_t v14 = 1;
LABEL_223:
              unint64_t v5 = (unint64_t)v175;
              uint64_t v3 = (uint64_t)v170;
LABEL_199:
              swift_release();
              if (v4 >= *(void *)(*(void *)v7 + 16)) {
                goto LABEL_339;
              }
              BOOL v81 = __OFSUB__(v18, 1);
              unint64_t v106 = v18 - 1;
              if (v81) {
                goto LABEL_340;
              }
              unint64_t v17 = *(void *)(*(void *)v7 + 168 * v4 + 32);
              if (v177)
              {
                swift_retain();
                swift_bridgeObjectRetain();
                Swift::Int v18 = MEMORY[0x21054E050](v106, v3);
                swift_release();
                if (!(v17 >> 62)) {
                  goto LABEL_203;
                }
              }
              else
              {
                if ((v106 & 0x8000000000000000) != 0) {
                  goto LABEL_352;
                }
                if (v106 >= *(void *)(v3 + 16)) {
                  goto LABEL_353;
                }
                Swift::Int v18 = *(void *)&v171[8 * v106];
                swift_bridgeObjectRetain();
                swift_retain();
                if (!(v17 >> 62))
                {
LABEL_203:
                  uint64_t v7 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  if (!v7) {
                    goto LABEL_256;
                  }
                  goto LABEL_204;
                }
              }
              swift_bridgeObjectRetain();
              uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v7) {
                goto LABEL_256;
              }
LABEL_204:
              a2 = v7 - 1;
              if (__OFSUB__(v7, 1)) {
                goto LABEL_348;
              }
              if ((v17 & 0xC000000000000001) != 0)
              {
                uint64_t v115 = MEMORY[0x21054E050](v7 - 1, v17);
                swift_unknownObjectRelease();
                if (v115 != v18)
                {
                  if (a2)
                  {
                    while (1)
                    {
                      BOOL v81 = __OFSUB__(a2--, 1);
                      if (v81) {
                        break;
                      }
                      uint64_t v116 = MEMORY[0x21054E050](a2, v17);
                      swift_unknownObjectRelease();
                      if (v116 == v18) {
                        goto LABEL_257;
                      }
                      if (!a2)
                      {
                        swift_bridgeObjectRelease();
                        unint64_t v17 = 1;
                        goto LABEL_258;
                      }
                    }
LABEL_421:
                    __break(1u);
LABEL_422:
                    swift_release();
                    __break(1u);
LABEL_423:
                    swift_release();
                    __break(1u);
LABEL_424:
                    __break(1u);
                    goto LABEL_425;
                  }
LABEL_256:
                  swift_bridgeObjectRelease();
                  a2 = 0;
                  unint64_t v17 = 1;
                  goto LABEL_258;
                }
              }
              else
              {
                if ((a2 & 0x8000000000000000) != 0) {
                  goto LABEL_349;
                }
                unint64_t v107 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (a2 >= v107) {
                  goto LABEL_350;
                }
                if (*(void *)(v17 + 32 + 8 * a2) != v18)
                {
                  if (v7 != 1)
                  {
                    unint64_t v108 = v7 - 2;
                    uint64_t v7 = (uint64_t)v176;
                    while (1)
                    {
                      BOOL v81 = __OFSUB__(a2--, 1);
                      if (v81) {
                        goto LABEL_323;
                      }
                      if (v108 >= v107) {
                        goto LABEL_324;
                      }
                      if (*(void *)(v17 + 32 + 8 * a2) == v18)
                      {
                        swift_bridgeObjectRelease();
                        unint64_t v17 = 0;
                        goto LABEL_259;
                      }
                      if (!a2)
                      {
                        swift_bridgeObjectRelease();
                        unint64_t v17 = 1;
                        goto LABEL_259;
                      }
                    }
                  }
                  goto LABEL_256;
                }
              }
LABEL_257:
              swift_bridgeObjectRelease();
              unint64_t v17 = 0;
LABEL_258:
              uint64_t v7 = (uint64_t)v176;
LABEL_259:
              swift_release();
              if ((v14 & 1) == 0)
              {
                if (v17)
                {
                  swift_beginAccess();
                  Swift::Int v18 = *(void *)v7;
                  char v117 = swift_isUniquelyReferenced_nonNull_native();
                  *(void *)uint64_t v7 = v18;
                  if ((v117 & 1) == 0)
                  {
                    Swift::Int v18 = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v18);
                    *(void *)uint64_t v7 = v18;
                  }
                  if (v4 >= *(void *)(v18 + 16))
                  {
                    __break(1u);
LABEL_359:
                    __break(1u);
LABEL_360:
                    __break(1u);
LABEL_361:
                    __break(1u);
LABEL_362:
                    __break(1u);
LABEL_363:
                    __break(1u);
LABEL_364:
                    __break(1u);
LABEL_365:
                    __break(1u);
LABEL_366:
                    __break(1u);
LABEL_367:
                    swift_bridgeObjectRetain();
                    unint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (!v14) {
                      goto LABEL_368;
                    }
                    goto LABEL_18;
                  }
                  unint64_t v118 = v18 + 168 * v4;
                  unint64_t v120 = *(void *)(v118 + 32);
                  Swift::Int v18 = v118 + 32;
                  unint64_t v119 = v120;
                  if (v120 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    unint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    unint64_t v17 = *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  }
                  unint64_t v4 = v169;
                  a2 = (unint64_t)v173;
                  if ((uint64_t)v17 < j) {
                    goto LABEL_360;
                  }
                  specialized Array.replaceSubrange<A>(_:with:)(j, v17);
                  swift_endAccess();
                  Swift::Int v6 = v172;
                  if (v172 == a2) {
                    break;
                  }
                  goto LABEL_268;
                }
                if ((uint64_t)a2 < j) {
                  goto LABEL_359;
                }
                swift_beginAccess();
                Swift::Int v18 = *(void *)v7;
                char v121 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)uint64_t v7 = v18;
                if ((v121 & 1) == 0)
                {
                  Swift::Int v18 = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v18);
                  *(void *)uint64_t v7 = v18;
                }
                if (v4 >= *(void *)(v18 + 16)) {
                  goto LABEL_361;
                }
                if (__OFADD__(a2, 1)) {
                  goto LABEL_362;
                }
                v18 += 168 * v4 + 32;
                specialized Array.replaceSubrange<A>(_:with:)(j, a2 + 1);
                swift_endAccess();
              }
              a2 = (unint64_t)v173;
              Swift::Int v6 = v172;
              if ((char *)v172 == v173) {
                goto LABEL_280;
              }
LABEL_143:
              char v96 = 0;
LABEL_144:
              unint64_t v4 = v6;
              if (v6 == a2) {
                goto LABEL_328;
              }
            }
          }
          Swift::Int v6 = v158;
          if (v167)
          {
            unint64_t v180 = v158;
            if (v168)
            {
              swift_bridgeObjectRetain();
              unint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
              if (v14)
              {
LABEL_286:
                uint64_t j = v6 & 0xC000000000000001;
                unint64_t v17 = v6 & 0xFFFFFFFFFFFFFF8;
                uint64_t v3 = v6 + 32;
                do
                {
                  BOOL v81 = __OFSUB__(v14--, 1);
                  if (v81) {
                    goto LABEL_351;
                  }
                  if (j)
                  {
                    Swift::Int v18 = MEMORY[0x21054E050](v14, v6);
                  }
                  else
                  {
                    if ((v14 & 0x8000000000000000) != 0) {
                      goto LABEL_363;
                    }
                    if (v14 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                      goto LABEL_364;
                    }
                    Swift::Int v18 = *(void *)(v3 + 8 * v14);
                    swift_retain();
                  }
                  type metadata accessor for ReflowWord();
                  a2 = swift_dynamicCastClass();
                  uint64_t v122 = swift_release();
                  if (a2)
                  {
                    a2 = (unint64_t)&v152;
                    MEMORY[0x270FA5388](v122);
                    uint64_t v150 = &v180;
                    unint64_t v186 = v14;
                    uint64_t v133 = v178;
                    partial apply for specialized closure #1 in BidirectionalCollection.last(where:)(&v186, &v183);
                    if (!v133) {
                      unint64_t v14 = v183;
                    }
                    goto LABEL_312;
                  }
                }
                while (v14);
              }
            }
            else
            {
              unint64_t v14 = *(void *)((v158 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v14) {
                goto LABEL_286;
              }
            }
            a2 = (unint64_t)&v152;
            unint64_t v14 = 0;
LABEL_312:
            swift_bridgeObjectRelease();
            if (v14)
            {
              *(unsigned char *)(v14 + 136) = 1;
              swift_release();
            }
          }
          unint64_t v14 = specialized Set.init<A>(_:)(v5);
          swift_bridgeObjectRelease();
          if ((uint64_t)v4 <= 0) {
            unint64_t v134 = 0;
          }
          else {
            unint64_t v134 = v4 - 1;
          }
          if (v168)
          {
            swift_bridgeObjectRetain();
            uint64_t v135 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v135 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          BOOL v81 = __OFADD__(v134, v135);
          unint64_t v136 = v134 + v135;
          if (!v81)
          {
            unint64_t v137 = (objc_class *)type metadata accessor for ReflowLayoutManager.TextPosition();
            unint64_t v138 = objc_allocWithZone(v137);
            *(void *)&v138[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index] = v136;
            v138[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity] = (uint64_t)v4 > 0;
            v181.receiver = v138;
            v181.super_class = v137;
            objc_msgSendSuper2(&v181, sel_init);
            Swift::Int v18 = v160;
            goto LABEL_370;
          }
LABEL_394:
          __break(1u);
LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
        }
      }
      if (v4 == v14) {
        goto LABEL_124;
      }
      if (v4 < v14)
      {
        type metadata accessor for ReflowElement();
        Swift::Int v88 = v4;
        do
        {
          Swift::Int v89 = v88 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v88);
          Swift::Int v88 = v89;
        }
        while (v14 != v89);
LABEL_124:
        uint64_t v175 = (void (**)(unint64_t, uint64_t))v5;
        if (j)
        {
          swift_bridgeObjectRetain();
          a2 = _CocoaArrayWrapper.subscript.getter();
          unint64_t v17 = v90;
          Swift::Int v6 = v91;
          unint64_t v5 = v92;
          swift_bridgeObjectRelease_n();
          if ((v5 & 1) == 0) {
            goto LABEL_127;
          }
        }
        else
        {
          a2 = v18 & 0xFFFFFFFFFFFFFF8;
          unint64_t v17 = (v18 & 0xFFFFFFFFFFFFFF8) + 32;
          unint64_t v5 = (2 * v14) | 1;
          Swift::Int v6 = v4;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        uint64_t v93 = swift_dynamicCastClass();
        if (!v93)
        {
          swift_unknownObjectRelease();
          uint64_t v93 = MEMORY[0x263F8EE78];
        }
        uint64_t v94 = *(void *)(v93 + 16);
        swift_release();
        if (!__OFSUB__(v5 >> 1, v6))
        {
          if (v94 == (v5 >> 1) - v6)
          {
            uint64_t v3 = swift_dynamicCastClass();
            if (!v3)
            {
              swift_unknownObjectRelease();
              uint64_t v3 = MEMORY[0x263F8EE78];
            }
            goto LABEL_134;
          }
          goto LABEL_399;
        }
        goto LABEL_398;
      }
LABEL_406:
      __break(1u);
LABEL_407:
      swift_bridgeObjectRetain();
      unint64_t v17 = MEMORY[0x21054E050](v18, a2);
      swift_bridgeObjectRelease();
      type metadata accessor for ReflowSpace();
      uint64_t v145 = swift_dynamicCastClass();
      swift_unknownObjectRelease();
      if (v145) {
        goto LABEL_57;
      }
LABEL_58:
      uint64_t v169 = v14;
      Swift::Int v18 = v160;
      uint64_t v54 = IndexSet.first.getter();
      if (v55) {
        goto LABEL_424;
      }
      uint64_t v7 = v54;
      uint64_t v56 = IndexSet.last.getter();
      if (v57)
      {
LABEL_425:
        __break(1u);
LABEL_426:
        __break(1u);
LABEL_427:
        __break(1u);
LABEL_428:
        LODWORD(v15CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0;
        uint64_t v149 = 1092;
        v148[0] = 2;
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if (v56 < v7) {
        goto LABEL_377;
      }
      unint64_t v17 = v56 + 1;
      if (__OFADD__(v56, 1)) {
        goto LABEL_378;
      }
      Swift::Int v18 = *v159;
      unint64_t v14 = (unint64_t)*v159 >> 62;
      if (v14) {
        goto LABEL_379;
      }
      uint64_t v58 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v58 < v7) {
        goto LABEL_380;
      }
    }
    uint64_t v176 = (void (**)(unint64_t, uint64_t, uint64_t))(v154 + 16);
    uint64_t v175 = (void (**)(unint64_t, uint64_t))(v154 + 8);
    CGFloat v170 = (unint64_t *)(v155 + 8);
    uint64_t v167 = (char *)v14;
    swift_unknownObjectRetain();
    a2 = (unint64_t)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>;
    unint64_t v17 = (unint64_t)v171;
    unint64_t v4 = (unint64_t)v173;
    while (v7 < v3)
    {
      type metadata accessor for ReflowWord();
      uint64_t v63 = swift_dynamicCastClass();
      if (v63)
      {
        uint64_t v64 = *(void *)(v63 + 280) + OBJC_IVAR___PKDrawingCoherence_model;
        swift_beginAccess();
        uint64_t v65 = v172;
        (*v176)(v17, v64, v172);
        swift_getKeyPath();
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
        swift_retain_n();
        Capsule<>.subscript.getter();
        swift_release();
        (*v175)(v17, v65);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
        uint64_t v66 = v174;
        uint64_t v67 = v178;
        uint64_t v68 = CROrderedSet.map<A>(_:)();
        uint64_t v178 = v67;
        swift_release();
        ((void (*)(unint64_t, uint64_t))*v170)(v4, v66);
        swift_release();
      }
      else
      {
        uint64_t v68 = MEMORY[0x263F8EE78];
      }
      Swift::Int v6 = *(void *)(v68 + 16);
      unint64_t v14 = *(void *)(v5 + 16);
      uint64_t j = v14 + v6;
      if (__OFADD__(v14, v6)) {
        goto LABEL_326;
      }
      int v69 = swift_isUniquelyReferenced_nonNull_native();
      if (v69 && j <= *(void *)(v5 + 24) >> 1)
      {
        if (*(void *)(v68 + 16)) {
          goto LABEL_96;
        }
      }
      else
      {
        if ((uint64_t)v14 <= j) {
          int64_t v70 = v14 + v6;
        }
        else {
          int64_t v70 = v14;
        }
        unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v69, v70, 1, v5);
        if (*(void *)(v68 + 16))
        {
LABEL_96:
          unint64_t v14 = *(void *)(v5 + 16);
          uint64_t j = (*(void *)(v5 + 24) >> 1) - v14;
          uint64_t v71 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>)
                          - 8);
          uint64_t v72 = *(void *)(v71 + 72);
          if (j < v6) {
            goto LABEL_332;
          }
          unint64_t v73 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
          unint64_t v74 = v5 + v73 + v72 * v14;
          unint64_t v75 = v68 + v73;
          Swift::Int v76 = v72 * v6;
          unint64_t v77 = v74 + v76;
          unint64_t v78 = v75 + v76;
          if (v75 < v77 && v74 < v78) {
            goto LABEL_428;
          }
          swift_arrayInitWithCopy();
          if (v6)
          {
            uint64_t v80 = *(void *)(v5 + 16);
            BOOL v81 = __OFADD__(v80, v6);
            Swift::Int v82 = v80 + v6;
            if (v81) {
              goto LABEL_341;
            }
            *(void *)(v5 + 16) = v82;
          }
          goto LABEL_82;
        }
      }
      if (v6) {
        goto LABEL_327;
      }
LABEL_82:
      ++v7;
      swift_bridgeObjectRelease();
      if (v3 == v7)
      {
        unint64_t v14 = (unint64_t)v167;
        swift_unknownObjectRelease();
        Swift::Int v18 = v160;
        goto LABEL_106;
      }
    }
LABEL_325:
    __break(1u);
LABEL_326:
    __break(1u);
LABEL_327:
    __break(1u);
LABEL_328:
    __break(1u);
LABEL_329:
    __break(1u);
LABEL_330:
    __break(1u);
LABEL_331:
    __break(1u);
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
LABEL_335:
    __break(1u);
LABEL_336:
    __break(1u);
LABEL_337:
    __break(1u);
LABEL_338:
    __break(1u);
LABEL_339:
    __break(1u);
LABEL_340:
    __break(1u);
LABEL_341:
    __break(1u);
LABEL_342:
    __break(1u);
LABEL_343:
    __break(1u);
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
LABEL_351:
    __break(1u);
LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
LABEL_354:
    __break(1u);
LABEL_355:
    __break(1u);
LABEL_356:
    __break(1u);
  }
  a2 = *(void *)(v18 + 8 * v32 + 32);
  swift_retain();
LABEL_23:
  unint64_t v14 = *(void *)(a2 + 120);
  swift_release();
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v3 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  Swift::Int v18 = v160;
  if (!v3)
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = IndexSet.last.getter();
    if ((v37 & 1) == 0) {
      goto LABEL_48;
    }
    goto LABEL_33;
  }
  if (v3 < 1) {
    goto LABEL_395;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      unint64_t v17 = MEMORY[0x21054E050](i, v4);
      type metadata accessor for ReflowWord();
      if (swift_dynamicCastClass()) {
        *(void *)(v17 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v14;
      }
      swift_unknownObjectRelease();
    }
  }
  else
  {
    type metadata accessor for ReflowWord();
    for (uint64_t j = 0; j != v3; ++j)
    {
      unint64_t v17 = *(void *)(v4 + 8 * j + 32);
      if (swift_dynamicCastClass()) {
        *(void *)(v17 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v14;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_47:
  Swift::Int v18 = v160;
  uint64_t v36 = IndexSet.last.getter();
  if ((v53 & 1) == 0)
  {
LABEL_48:
    unint64_t v14 = v36;
    uint64_t v168 = (char *)(v4 >> 62);
    if (!(v4 >> 62))
    {
      if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_58;
      }
      goto LABEL_50;
    }
LABEL_373:
    swift_bridgeObjectRetain();
    uint64_t v142 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v142) {
      goto LABEL_58;
    }
LABEL_50:
    Swift::Int v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
    }
    else if (!((unint64_t)*v159 >> 62))
    {
      unint64_t v17 = *(void *)((*v159 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v18 >= (uint64_t)v17) {
        goto LABEL_58;
      }
LABEL_53:
      a2 = *v159;
      if ((*v159 & 0xC000000000000001) != 0) {
        goto LABEL_407;
      }
      if (v18 < 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v18 < *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        type metadata accessor for ReflowSpace();
        if (!swift_dynamicCastClass()) {
          goto LABEL_58;
        }
LABEL_57:
        IndexSet.insert(_:)(v18);
        goto LABEL_58;
      }
      __break(1u);
      goto LABEL_411;
    }
    swift_bridgeObjectRetain();
    unint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 >= (uint64_t)v17) {
      goto LABEL_58;
    }
    goto LABEL_53;
  }
LABEL_33:
  unint64_t v38 = v153;
  uint64_t v3 = v153 + 160;
  swift_beginAccess();
  unint64_t v39 = v38;
  unint64_t v14 = *(void *)(v38 + 160);
  if (!v14) {
    goto LABEL_41;
  }
  uint64_t v40 = *(void *)(v39 + 168);
  unint64_t v41 = *(void *)(v39 + 80);
  swift_bridgeObjectRetain();
  uint64_t v42 = swift_retain();
  uint64_t j = specialized Collection<>.firstIndex(of:)(v42, v41);
  char v44 = v43;
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
  {
    if ((v40 & 1) == 0)
    {
      if (one-time initialization token for handwritingReflowMinimumSpaceWidth == -1)
      {
LABEL_37:
        uint64_t v45 = static UIConstants.handwritingReflowMinimumSpaceWidth;
        type metadata accessor for ReflowSpace();
        uint64_t v46 = swift_allocObject();
        *(void *)(v46 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 1;
        *(unsigned char *)(v46 + 152) = 0;
        double v48 = UnknownCanvasElementView.flags.modify(v46, v47);
        *(_OWORD *)(v46 + 48) = 0u;
        *(_OWORD *)(v46 + 64) = 0u;
        *(_OWORD *)(v46 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
        *(void *)(v46 + 96) = 0;
        *(double *)(v46 + 104) = v48;
        *(void *)(v46 + 112) = v49;
        *(void *)(v46 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = -1;
        *(void *)(v46 + 128) = 0;
        *(unsigned char *)(v46 + 136) = 0;
        *(void *)(v46 + 144) = 0;
        *(void *)(v46 + 16) = 0;
        *(void *)(v46 + 24) = 0;
        *(void *)(v46 + 32) = v45;
        *(void *)(v46 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0x4000000000000000;
        MEMORY[0x21054D330]();
        if (*(void *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v50 = j;
LABEL_306:
        a2 = v185;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        specialized Array.replaceSubrange<A>(_:with:)(v50, v50, a2);
        swift_endAccess();
        *(_OWORD *)(v3 + 16) = 0u;
        *(_OWORD *)(v3 + 32) = 0u;
        *(_OWORD *)(v3 + 43) = 0u;
        *(_OWORD *)uint64_t v3 = 0u;
        swift_release();
        if (a2 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v130 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v130 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        BOOL v81 = __OFADD__(j, v130);
        j += v130;
        Swift::Int v18 = v160;
        if (!v81)
        {
          unint64_t v131 = (objc_class *)type metadata accessor for ReflowLayoutManager.TextPosition();
          unint64_t v132 = objc_allocWithZone(v131);
          *(void *)&v132[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index] = j;
          v132[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity] = 0;
          v182.receiver = v132;
          v182.super_class = v131;
          objc_msgSendSuper2(&v182, sel_init);
          swift_release();
          goto LABEL_369;
        }
        __break(1u);
LABEL_405:
        __break(1u);
        goto LABEL_406;
      }
LABEL_411:
      swift_once();
      goto LABEL_37;
    }
    if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1) {
      swift_once();
    }
    uint64_t v123 = static UIConstants.handwritingReflowMinimumSpaceWidth;
    type metadata accessor for ReflowSpace();
    uint64_t v124 = swift_allocObject();
    *(void *)(v124 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 1;
    *(unsigned char *)(v124 + 152) = 0;
    double v126 = UnknownCanvasElementView.flags.modify(v124, v125);
    *(_OWORD *)(v124 + 48) = 0u;
    *(_OWORD *)(v124 + 64) = 0u;
    *(_OWORD *)(v124 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
    *(void *)(v124 + 96) = 0;
    *(double *)(v124 + 104) = v126;
    *(void *)(v124 + 112) = v127;
    *(void *)(v124 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = -1;
    *(void *)(v124 + 128) = 0;
    *(unsigned char *)(v124 + 136) = 0;
    *(void *)(v124 + 144) = 0;
    *(void *)(v124 + 16) = 0;
    *(void *)(v124 + 24) = 0;
    *(void *)(v124 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0x4000000000000000;
    *(void *)(v124 + 32) = v123;
    if (v4 >> 62
      && (swift_bridgeObjectRetain(), uint64_t v146 = _CocoaArrayWrapper.endIndex.getter(), swift_bridgeObjectRelease(), v146 < 0))
    {
      __break(1u);
    }
    else
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, 0, v124);
      uint64_t v124 = *v159;
      if ((*v159 & 0xC000000000000001) == 0)
      {
        if (j < 0)
        {
          __break(1u);
        }
        else if ((unint64_t)j < *(void *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          type metadata accessor for ReflowWord();
          uint64_t v128 = swift_dynamicCastClass();
          if (!v128) {
            goto LABEL_305;
          }
          uint64_t v129 = v128;
          swift_retain();
LABEL_304:
          *(unsigned char *)(v129 + 136) = 0;
          swift_release();
LABEL_305:
          uint64_t v50 = j + 1;
          if (__OFADD__(j, 1)) {
            goto LABEL_420;
          }
          goto LABEL_306;
        }
        __break(1u);
LABEL_418:
        swift_unknownObjectRelease();
        uint64_t v50 = j + 1;
        if (__OFADD__(j, 1))
        {
LABEL_420:
          __break(1u);
          goto LABEL_421;
        }
        goto LABEL_306;
      }
    }
    swift_bridgeObjectRetain();
    MEMORY[0x21054E050](j, v124);
    swift_bridgeObjectRelease();
    type metadata accessor for ReflowWord();
    uint64_t v147 = swift_dynamicCastClass();
    if (v147)
    {
      uint64_t v129 = v147;
      goto LABEL_304;
    }
    goto LABEL_418;
  }
  swift_release();
  Swift::Int v18 = v160;
LABEL_41:
  uint64_t v51 = (objc_class *)type metadata accessor for ReflowLayoutManager.TextPosition();
  uint64_t v52 = objc_allocWithZone(v51);
  *(void *)&v52[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index] = 0;
  v52[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity] = 0;
  v184.receiver = v52;
  v184.super_class = v51;
  objc_msgSendSuper2(&v184, sel_init);
LABEL_369:
  unint64_t v14 = MEMORY[0x263F8EE88];
LABEL_370:
  (*(void (**)(Swift::Int, unint64_t))(v156 + 8))(v18, v157);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t closure #1 in closure #1 in ReflowLayoutManager.replaceStrokes(_:with:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  return WeakRef.init<A>(_:)();
}

Swift::Void __swiftcall ReflowLayoutManager.layoutText(contents:lines:)(Swift::OpaquePointer contents, Swift::OpaquePointer lines)
{
  uint64_t v11 = v2;
  long long v14 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *(_OWORD *)(v2 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *MEMORY[0x263F001A0];
  *(_OWORD *)(v2 + 136) = v14;
  unint64_t v110 = (void **)(v2 + 96);
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 96) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  unint64_t v109 = *((void *)lines._rawValue + 2);
  if (!v109) {
    goto LABEL_73;
  }
  long long v16 = *((_OWORD *)lines._rawValue + 11);
  long long v187 = *((_OWORD *)lines._rawValue + 10);
  long long v188 = v16;
  uint64_t v189 = *((void *)lines._rawValue + 24);
  float64x2_t v17 = *((float64x2_t *)lines._rawValue + 7);
  float64x2_t v183 = *((float64x2_t *)lines._rawValue + 6);
  float64x2_t v184 = v17;
  float64x2_t v18 = *((float64x2_t *)lines._rawValue + 8);
  float64x2_t v186 = *((float64x2_t *)lines._rawValue + 9);
  float64x2_t v185 = v18;
  long long v19 = *((_OWORD *)lines._rawValue + 3);
  long long v179 = *((_OWORD *)lines._rawValue + 2);
  long long v180 = v19;
  long long v20 = *((_OWORD *)lines._rawValue + 4);
  float64x2_t v182 = *((float64x2_t *)lines._rawValue + 5);
  long long v181 = v20;
  uint64_t v4 = *((void *)&v179 + 1);
  *((void *)&v166 + 1) = *((void *)&v179 + 1);
  uint64_t v122 = *((void *)&v180 + 1);
  double v116 = *(double *)&v180;
  long long v167 = v180;
  double v6 = *((double *)&v20 + 1);
  double v21 = *(double *)&v20;
  double v8 = v182.f64[1];
  double height = v182.f64[0];
  *((void *)&v168 + 1) = *((void *)&v20 + 1);
  float64x2_t v169 = v182;
  double v117 = v183.f64[1];
  double v10 = v183.f64[0];
  float64x2_t v170 = v183;
  double v126 = v184.f64[1];
  double v111 = v184.f64[0];
  float64x2_t v171 = v184;
  float64x2_t v172 = v185;
  double v5 = v186.f64[1];
  double v9 = v186.f64[0];
  double v118 = v185.f64[1];
  float64x2_t v173 = v186;
  double v132 = v185.f64[0];
  double v133 = *(double *)&v187;
  *(_OWORD *)uint64_t v174 = v187;
  uint64_t v119 = *((void *)&v187 + 1);
  double v127 = *((double *)&v188 + 1);
  uint64_t v121 = v188;
  *(_OWORD *)&v174[16] = v188;
  uint64_t v175 = v189;
  outlined retain of ReflowTextLine((uint64_t)&v179);
  swift_bridgeObjectRelease();
  *(void *)&long long v166 = v15;
  double Width = CGRectGetWidth(*(CGRect *)(v2 + 16));
  double v115 = vabdd_f64(Width, CGRectGetWidth(*(CGRect *)(v2 + 48)));
  double v124 = v21;
  double v23 = v21 - v115;
  if (v21 - v115 < 0.0) {
    double v23 = 0.0;
  }
  *(double *)&long long v168 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_20C835790;
  type metadata accessor for ReflowSpace();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 1;
  *(unsigned char *)(v25 + 152) = 0;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(void *)(v25 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0;
  uint64_t v26 = outlined retain of ReflowTextLine((uint64_t)&v179);
  double v28 = UnknownCanvasElementView.flags.modify(v26, v27);
  *(void *)(v25 + 88) = 0;
  *(void *)(v25 + 96) = 0;
  *(double *)(v25 + 104) = v28;
  *(void *)(v25 + 112) = v29;
  *(void *)(v25 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = -1;
  *(void *)(v25 + 128) = 0;
  *(unsigned char *)(v25 + 136) = 0;
  *(void *)(v25 + 144) = 0;
  *(void *)(v25 + 16) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0x4000000000000000;
  *(void *)(v24 + 32) = v25;
  *(void *)&v177[0] = v24;
  specialized Array._endMutation()();
  uint64_t v3 = v24;
  swift_bridgeObjectRelease();
  uint64_t v112 = v11 + 160;
  swift_beginAccess();
  if (*(void *)(v11 + 160))
  {
    double v31 = *(double *)(v11 + 192);
    double v30 = *(double *)(v11 + 200);
    char v33 = ReflowLayoutManager.spacingAdjustment.modify();
    if (*v32)
    {
      unint64_t v34 = v32;
      v32[6] = specialized ReflowLayoutManager.closestLine(to:lines:)((uint64_t)lines._rawValue, v31, v30);
      *((unsigned char *)v34 + 56) = v35 & 1;
    }
    ((void (*)(_OWORD *, void))v33)(v177, 0);
  }
  if ((unint64_t)contents._rawValue >> 62) {
    goto LABEL_74;
  }
  uint64_t v36 = *(void *)(((unint64_t)contents._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    double v130 = height - v127;
    double v131 = v6 + 0.0;
    double height = v127;
    double v128 = v10 - v127;
    double v129 = v8 + 0.0;
    double v38 = v116;
    if (!v36)
    {
      swift_bridgeObjectRelease();
      uint64_t v41 = -1;
      double v86 = v117;
      double v85 = v118;
      double v10 = v111;
      double v87 = v126;
      goto LABEL_61;
    }
    int64_t v39 = 0;
    unint64_t v40 = 0;
    uint64_t v114 = (char *)lines._rawValue + 32;
    uint64_t v104 = v36;
    unint64_t v105 = (unint64_t)contents._rawValue & 0xC000000000000001;
    unint64_t v102 = (unint64_t)contents._rawValue & 0xFFFFFFFFFFFFFF8;
    rawValue = contents._rawValue;
    unint64_t v101 = (char *)contents._rawValue + 32;
    uint64_t v41 = -1;
    *(void *)&long long v37 = 0;
    long long v113 = v37;
    double v8 = v116;
    double v10 = v111;
LABEL_12:
    double v116 = v38;
    if (v105)
    {
      lines._rawValue = (void *)MEMORY[0x21054E050](v40, rawValue);
      BOOL v42 = __OFADD__(v40, 1);
      unint64_t v43 = v40 + 1;
      if (!v42) {
        goto LABEL_18;
      }
      goto LABEL_71;
    }
    if (v40 < *(void *)(v102 + 16)) {
      break;
    }
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
  }
  lines._rawValue = *(void **)&v101[8 * v40];
  swift_retain();
  BOOL v42 = __OFADD__(v40, 1);
  unint64_t v43 = v40 + 1;
  if (v42)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
LABEL_18:
  unint64_t v106 = v43;
  while (1)
  {
    uint64_t v44 = *(void *)(v11 + 112);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v112, (uint64_t)v176, (uint64_t *)&demangling cache variable for type metadata for ReflowSpacingAdjustment?);
    CGFloat v45 = *(double *)(v11 + 16);
    CGFloat v46 = *(double *)(v11 + 24);
    double v6 = *(double *)(v11 + 32);
    double height = *(double *)(v11 + 40);
    outlined retain of ReflowSpacingAdjustment?((uint64_t)v176);
    v190.origin.CGFloat x = v45;
    v190.origin.CGFloat y = v46;
    v190.size.CGFloat width = v6;
    v190.size.double height = height;
    double v47 = CGRectGetWidth(v190);
    *(void *)&long long v155 = v3;
    *((void *)&v155 + 1) = v4;
    *(double *)&long long v156 = v8;
    *((void *)&v156 + 1) = v122;
    *(double *)&long long v157 = v124;
    *((double *)&v157 + 1) = v131;
    v158.f64[0] = v130;
    v158.f64[1] = v129;
    v159.f64[0] = v128;
    v159.f64[1] = v117;
    v160.f64[0] = v10;
    v160.f64[1] = v126;
    v161.f64[0] = v132;
    v161.f64[1] = v118;
    v162.f64[0] = v9;
    v162.f64[1] = v5;
    *(double *)&long long v163 = v133;
    *((void *)&v163 + 1) = v119;
    *(void *)&long long v164 = v121;
    *((double *)&v164 + 1) = v127;
    uint64_t v165 = v41;
    v177[5] = v160;
    v177[4] = v159;
    uint64_t v178 = v41;
    v177[9] = v164;
    v177[8] = v163;
    v177[6] = v161;
    v177[7] = v162;
    v177[3] = v158;
    v177[2] = v157;
    v177[1] = v156;
    v177[0] = v155;
    outlined retain of ReflowTextLine((uint64_t)&v155);
    BOOL v48 = ReflowTextLine.add(_:textScalePercentage:spacingAdjustment:maxWidth:previousLine:adjustment:)(lines._rawValue, v44, (uint64_t)v176, (uint64_t)v177, v47, v115);
    outlined release of ReflowTextLine((uint64_t)&v155);
    outlined release of ReflowSpacingAdjustment?((uint64_t)v176);
    if (v48) {
      break;
    }
    if (v39 >= v109)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    unint64_t v49 = *(void *)&v114[168 * v39 + 8];
    if (!v49) {
      goto LABEL_34;
    }
    if (v49 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3)
      {
LABEL_33:
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v3 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v3) {
        goto LABEL_33;
      }
    }
    unint64_t v50 = v3 - 1;
    if (__OFSUB__(v3, 1)) {
      goto LABEL_68;
    }
    if ((v49 & 0xC000000000000001) != 0)
    {
      uint64_t v51 = MEMORY[0x21054E050](v50, v49);
    }
    else
    {
      if ((v50 & 0x8000000000000000) != 0) {
        goto LABEL_69;
      }
      if (v50 >= *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_70;
      }
      uint64_t v51 = *(void *)(v49 + 8 * v50 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    char v52 = *(unsigned char *)(v51 + 136);
    swift_release();
    if (v52)
    {
      contents._rawValue = (void *)(*((void *)lines._rawValue + 15) <= v39);
      uint64_t v4 = 1;
      goto LABEL_35;
    }
LABEL_34:
    contents._rawValue = 0;
    uint64_t v4 = 0;
LABEL_35:
    type metadata accessor for ReflowWord();
    uint64_t v53 = swift_dynamicCastClass();
    long long v152 = *(_OWORD *)v174;
    long long v153 = *(_OWORD *)&v174[16];
    uint64_t v154 = v175;
    float64x2_t v148 = v170;
    float64x2_t v149 = v171;
    float64x2_t v150 = v172;
    float64x2_t v151 = v173;
    long long v144 = v166;
    long long v145 = v167;
    long long v146 = v168;
    float64x2_t v147 = v169;
    outlined retain of ReflowTextLine((uint64_t)&v144);
    outlined retain of ReflowTextLine((uint64_t)&v144);
    outlined release of ReflowTextLine((uint64_t)&v155);
    swift_beginAccess();
    uint64_t v54 = *v110;
    outlined retain of ReflowTextLine((uint64_t)&v144);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v110 = v54;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54[2] + 1, 1, v54);
      *unint64_t v110 = v54;
    }
    unint64_t v57 = v54[2];
    unint64_t v56 = v54[3];
    uint64_t v3 = v57 + 1;
    if (v57 >= v56 >> 1)
    {
      uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v54);
      *unint64_t v110 = v54;
    }
    uint64_t v41 = v154;
    double v130 = v147.f64[0];
    double v131 = *((double *)&v146 + 1);
    double v128 = v148.f64[0];
    double v129 = v147.f64[1];
    double v8 = *((double *)&v153 + 1);
    double v58 = v150.f64[1];
    double v5 = v151.f64[1];
    double v9 = v151.f64[0];
    double v6 = v148.f64[1];
    double height = v149.f64[1];
    double v10 = v149.f64[0];
    double v132 = v150.f64[0];
    double v133 = *(double *)&v152;
    v54[2] = v3;
    Swift::Int v59 = &v54[21 * v57];
    long long v60 = v144;
    long long v61 = v146;
    *((_OWORD *)v59 + 3) = v145;
    *((_OWORD *)v59 + 4) = v61;
    *((_OWORD *)v59 + 2) = v60;
    float64x2_t v62 = v147;
    float64x2_t v63 = v148;
    float64x2_t v64 = v150;
    *((float64x2_t *)v59 + 7) = v149;
    *((float64x2_t *)v59 + 8) = v64;
    *((float64x2_t *)v59 + 5) = v62;
    *((float64x2_t *)v59 + 6) = v63;
    float64x2_t v65 = v151;
    long long v66 = v152;
    long long v67 = v153;
    v59[24] = v154;
    *((_OWORD *)v59 + 1CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v66;
    *((_OWORD *)v59 + 11) = v67;
    *((float64x2_t *)v59 + 9) = v65;
    swift_endAccess();
    if (v53) {
      int v68 = LODWORD(contents._rawValue) ^ 1;
    }
    else {
      int v68 = 1;
    }
    outlined release of ReflowTextLine((uint64_t)&v144);
    double v126 = height;
    double v127 = v8;
    if (v39 < (uint64_t)(v109 - 1) && v68)
    {
      double v111 = v10;
      double v69 = v9;
      double v70 = v6;
      double v71 = v58;
      ++v39;
      uint64_t v72 = &v114[168 * v39];
      long long v73 = *((_OWORD *)v72 + 9);
      *(_OWORD *)uint64_t v142 = *((_OWORD *)v72 + 8);
      *(_OWORD *)&v142[16] = v73;
      uint64_t v143 = *((void *)v72 + 20);
      float64x2_t v74 = *((float64x2_t *)v72 + 5);
      float64x2_t v138 = *((float64x2_t *)v72 + 4);
      float64x2_t v139 = v74;
      float64x2_t v75 = *((float64x2_t *)v72 + 7);
      float64x2_t v140 = *((float64x2_t *)v72 + 6);
      float64x2_t v141 = v75;
      long long v76 = *((_OWORD *)v72 + 1);
      long long v134 = *(_OWORD *)v72;
      long long v135 = v76;
      float64x2_t v77 = *((float64x2_t *)v72 + 3);
      long long v136 = *((_OWORD *)v72 + 2);
      float64x2_t v137 = v77;
      outlined retain of ReflowTextLine((uint64_t)&v134);
      outlined release of ReflowTextLine((uint64_t)&v144);
      double v78 = *(double *)&v135;
      if (*(double *)&v136 - v115 < 0.0) {
        double v79 = 0.0;
      }
      else {
        double v79 = *(double *)&v136 - v115;
      }
      double v80 = *((double *)&v136 + 1) + 0.0;
      float64x2_t v125 = vaddq_f64((float64x2_t)(unint64_t)v113, v137);
      float64x2_t v123 = vaddq_f64((float64x2_t)(unint64_t)v113, v138);
      float64x2_t v120 = vaddq_f64((float64x2_t)(unint64_t)v113, v139);
      double v81 = *(double *)&v113 + *(double *)v142;
      float64x2_t v107 = v141;
      float64x2_t v108 = vaddq_f64((float64x2_t)(unint64_t)v113, v140);
      swift_bridgeObjectRelease();
      uint64_t v175 = v143;
      *(double *)&long long v167 = v78;
      *((void *)&v167 + 1) = *((void *)&v135 + 1);
      *(_OWORD *)&v174[8] = *(_OWORD *)&v142[8];
      *(void *)&v174[24] = *(void *)&v142[24];
      *((void *)&v166 + 1) = *((void *)&v134 + 1);
      *(void *)&long long v166 = MEMORY[0x263F8EE78];
      *(double *)&long long v168 = v79;
      *((double *)&v168 + 1) = v80;
      float64x2_t v169 = v125;
      float64x2_t v170 = v123;
      float64x2_t v171 = v120;
      float64x2_t v172 = v108;
      float64x2_t v173 = vaddq_f64((float64x2_t)(unint64_t)v113, v107);
      *(double *)uint64_t v174 = v81;
      if ((v4 & 1) == 0 && v78 >= v116) {
        double v78 = v116;
      }
      double v58 = v71;
      double v6 = v70;
      double v9 = v69;
      double v10 = v111;
    }
    else
    {
      outlined release of ReflowTextLine((uint64_t)&v144);
      long long v166 = MEMORY[0x263F8EE78];
      *(void *)&v174[8] = 0;
      *(void *)&v174[16] = 0;
      *((double *)&v168 + 1) = v131 + 0.0;
      v169.f64[0] = v130 + v8;
      v169.f64[1] = v129 + 0.0;
      v170.f64[0] = v128 + v8;
      v170.f64[1] = v6 + 0.0;
      v171.f64[0] = v8 + v10;
      v171.f64[1] = height + 0.0;
      v172.f64[0] = v8 + v132;
      v172.f64[1] = v58 + 0.0;
      v173.f64[0] = v8 + v9;
      v173.f64[1] = v5 + 0.0;
      *(double *)uint64_t v174 = v8 + v133;
      double v78 = v116;
      long long v167 = *(unint64_t *)&v116;
      *(void *)&long long v168 = 0;
      *(double *)&v174[24] = v8;
      if (__OFADD__(v41, 1)) {
        goto LABEL_67;
      }
      uint64_t v175 = v41 + 1;
      *((void *)&v82 + 1) = *((void *)&v113 + 1);
      *(double *)&long long v82 = *(double *)&v113 + v8;
      long long v113 = v82;
    }
    uint64_t v121 = v153;
    double v118 = v58;
    uint64_t v119 = *((void *)&v152 + 1);
    double v124 = *(double *)&v146;
    uint64_t v122 = *((void *)&v145 + 1);
    double v8 = *(double *)&v145;
    uint64_t v4 = *((void *)&v144 + 1);
    uint64_t v3 = v144;
    double v117 = v6;
    if (LODWORD(contents._rawValue) && !v53)
    {
      double v116 = v78;
      break;
    }
    double v116 = v78;
  }
  CGRect v191 = CGRectUnion(*(CGRect *)(v11 + 120), *(CGRect *)((char *)lines._rawValue + 48));
  CGFloat x = v191.origin.x;
  CGFloat y = v191.origin.y;
  double v6 = v191.size.width;
  double height = v191.size.height;
  swift_release();
  *(CGFloat *)(v11 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = x;
  *(CGFloat *)(v11 + 128) = y;
  *(double *)(v11 + 136) = v6;
  *(double *)(v11 + 144) = height;
  unint64_t v40 = v106;
  if (v106 != v104)
  {
    double v38 = v116;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  double v116 = v8;
  double v86 = v117;
  double v85 = v118;
  double v87 = v126;
  double height = v127;
LABEL_61:
  long long v163 = *(_OWORD *)v174;
  long long v164 = *(_OWORD *)&v174[16];
  uint64_t v165 = v175;
  float64x2_t v159 = v170;
  float64x2_t v160 = v171;
  float64x2_t v161 = v172;
  float64x2_t v162 = v173;
  long long v155 = v166;
  long long v156 = v167;
  long long v157 = v168;
  float64x2_t v158 = v169;
  swift_beginAccess();
  Swift::Int v88 = *v110;
  outlined retain of ReflowTextLine((uint64_t)&v155);
  char v89 = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v110 = v88;
  if ((v89 & 1) == 0)
  {
    Swift::Int v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88[2] + 1, 1, v88);
    *unint64_t v110 = v88;
  }
  unint64_t v91 = v88[2];
  unint64_t v90 = v88[3];
  if (v91 >= v90 >> 1)
  {
    Swift::Int v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v90 > 1), v91 + 1, 1, v88);
    *unint64_t v110 = v88;
  }
  v88[2] = v91 + 1;
  unint64_t v92 = &v88[21 * v91];
  long long v93 = v155;
  long long v94 = v157;
  *((_OWORD *)v92 + 3) = v156;
  *((_OWORD *)v92 + 4) = v94;
  *((_OWORD *)v92 + 2) = v93;
  float64x2_t v95 = v158;
  float64x2_t v96 = v159;
  float64x2_t v97 = v161;
  *((float64x2_t *)v92 + 7) = v160;
  *((float64x2_t *)v92 + 8) = v97;
  *((float64x2_t *)v92 + 5) = v95;
  *((float64x2_t *)v92 + 6) = v96;
  float64x2_t v98 = v162;
  long long v99 = v163;
  long long v100 = v164;
  v92[24] = v165;
  *((_OWORD *)v92 + 1CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v99;
  *((_OWORD *)v92 + 11) = v100;
  *((float64x2_t *)v92 + 9) = v98;
  swift_endAccess();
  *(void *)&long long v144 = v3;
  *((void *)&v144 + 1) = v4;
  *(double *)&long long v145 = v116;
  *((void *)&v145 + 1) = v122;
  *(double *)&long long v146 = v124;
  *((double *)&v146 + 1) = v131;
  v147.f64[0] = v130;
  v147.f64[1] = v129;
  v148.f64[0] = v128;
  v148.f64[1] = v86;
  v149.f64[0] = v10;
  v149.f64[1] = v87;
  v150.f64[0] = v132;
  v150.f64[1] = v85;
  v151.f64[0] = v9;
  v151.f64[1] = v5;
  *(double *)&long long v152 = v133;
  *((void *)&v152 + 1) = v119;
  *(void *)&long long v153 = v121;
  *((double *)&v153 + 1) = height;
  uint64_t v154 = v41;
  outlined release of ReflowTextLine((uint64_t)&v144);
  outlined release of ReflowTextLine((uint64_t)&v155);
}

Swift::Void __swiftcall ReflowLayoutManager.scaleTextToFit()()
{
  if ((~*(void *)(v0 + 16) & 0x7FF0000000000000) != 0)
  {
    BOOL v1 = (~*(void *)(v0 + 24) & 0x7FF0000000000000) == 0
      || (*(void *)(v0 + 32) & 0x7FF0000000000000) == 0x7FF0000000000000;
    if (!v1 && (*(void *)(v0 + 40) & 0x7FF0000000000000) != 0x7FF0000000000000)
    {
      swift_beginAccess();
      v3._rawValue = *(void **)(v0 + 80);
      swift_beginAccess();
      v4._rawValue = *(void **)(v0 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ReflowLayoutManager.layoutText(contents:lines:)(v3, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(unsigned char *)(v0 + 219) == 1)
      {
        swift_beginAccess();
        if (!*(void *)(v0 + 160))
        {
          double MaxY = CGRectGetMaxY(*(CGRect *)(v0 + 120));
          double Height = CGRectGetHeight(*(CGRect *)(v0 + 16));
          if (one-time initialization token for handwritingReflowVerticalOverflow != -1)
          {
LABEL_38:
            double v18 = Height;
            swift_once();
            double Height = v18;
          }
          double v7 = *(double *)&static UIConstants.handwritingReflowVerticalOverflow;
          if (Height + *(double *)&static UIConstants.handwritingReflowVerticalOverflow >= MaxY) {
            uint64_t v8 = *(void *)(v0 + 112);
          }
          else {
            uint64_t v8 = 10;
          }
          double MaxY = CGRectGetMaxY(*(CGRect *)(v0 + 120));
          double Height = v7 + CGRectGetHeight(*(CGRect *)(v0 + 16));
          uint64_t v9 = *(void *)(v0 + 112);
          if (Height >= MaxY) {
            uint64_t v10 = 1000;
          }
          else {
            uint64_t v10 = *(void *)(v0 + 112);
          }
          while (1)
          {
            if (__OFADD__(v8, v10))
            {
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
            double Height = round((double)(v8 + v10) * 0.5 / 5.0);
            if ((~*(void *)&Height & 0x7FF0000000000000) == 0) {
              goto LABEL_34;
            }
            if (Height <= -9.22337204e18) {
              goto LABEL_35;
            }
            if (Height >= 9.22337204e18) {
              goto LABEL_36;
            }
            uint64_t v11 = 5 * (uint64_t)Height;
            if ((unsigned __int128)((uint64_t)Height * (__int128)5) >> 64 != v11 >> 63) {
              goto LABEL_37;
            }
            *(void *)(v0 + 112) = v11;
            v12._rawValue = *(void **)(v0 + 80);
            v13._rawValue = *(void **)(v0 + 88);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            ReflowLayoutManager.layoutText(contents:lines:)(v12, v13);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v14 = *(void *)(v0 + 112);
            double MaxY = CGRectGetMaxY(*(CGRect *)(v0 + 120));
            double Height = CGRectGetHeight(*(CGRect *)(v0 + 16))
                   + *(double *)&static UIConstants.handwritingReflowVerticalOverflow;
            if (v9 == v14) {
              break;
            }
            uint64_t v9 = *(void *)(v0 + 112);
            if (Height < MaxY) {
              uint64_t v10 = *(void *)(v0 + 112);
            }
            else {
              uint64_t v8 = *(void *)(v0 + 112);
            }
            if (v8 >= v10) {
              return;
            }
          }
          if (Height < MaxY)
          {
            uint64_t v15 = *(void *)(v0 + 112);
            if (v15 >= 11)
            {
              *(void *)(v0 + 112) = v15 - 5;
              v16._rawValue = *(void **)(v0 + 80);
              v17._rawValue = *(void **)(v0 + 88);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              ReflowLayoutManager.layoutText(contents:lines:)(v16, v17);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }
        }
      }
    }
  }
}

uint64_t ReflowLayoutManager.strokeTransforms()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (uint64_t)&v112 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v139 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v6 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  float64x2_t v151 = (char *)&v112 - v8;
  uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform));
  MEMORY[0x270FA5388](v141);
  float64x2_t v140 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v10 = *(void *)(v132 - 8);
  MEMORY[0x270FA5388](v132);
  double v131 = (char *)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v12 = *(void *)(v130 - 8);
  MEMORY[0x270FA5388](v130);
  double v129 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, [CGAffineTransform]>);
  MEMORY[0x270FA5388](v128);
  double v127 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, [CGAffineTransform]>.Iterator);
  MEMORY[0x270FA5388](v126);
  float64x2_t v147 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v125 = v0[2];
  double v124 = v0[3];
  CGFloat v16 = COERCE_DOUBLE(specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]));
  swift_beginAccess();
  double v133 = v0;
  CGFloat v17 = v0[10];
  if (*(void *)&v17 >> 62) {
    goto LABEL_49;
  }
  uint64_t v18 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v18)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    return *(void *)&v16;
  }
  while (1)
  {
    unint64_t v134 = *(void *)&v17 & 0xC000000000000001;
    double v115 = v133 + 12;
    swift_beginAccess();
    unint64_t v19 = 0;
    uint64_t v114 = *(void *)&v17 & 0xFFFFFFFFFFFFFF8;
    uint64_t v113 = *(void *)&v17 + 32;
    float64x2_t v123 = (void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v122 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v121 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    float64x2_t v120 = (void (**)(uint64_t, uint64_t))(v10 + 8);
    uint64_t v119 = (void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
    double v118 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48);
    float64x2_t v150 = (CGFloat *)(v139 + 32);
    uint64_t v138 = v139 + 16;
    uint64_t v142 = (void (**)(char *, uint64_t))(v139 + 8);
    double v112 = 0.02;
    double v117 = v17;
    uint64_t v116 = v18;
    while (1)
    {
      if (v134)
      {
        uint64_t v10 = MEMORY[0x21054E050](v19, *(void *)&v17);
        BOOL v20 = __OFADD__(v19++, 1);
        if (v20) {
          goto LABEL_44;
        }
      }
      else
      {
        if (v19 >= *(void *)(v114 + 16)) {
          goto LABEL_48;
        }
        uint64_t v10 = *(void *)(v113 + 8 * v19);
        swift_retain();
        BOOL v20 = __OFADD__(v19++, 1);
        if (v20) {
          goto LABEL_44;
        }
      }
      type metadata accessor for ReflowWord();
      uint64_t v21 = swift_dynamicCastClass();
      if (v21) {
        break;
      }
LABEL_7:
      swift_release();
      if (v19 == v18) {
        goto LABEL_50;
      }
    }
    uint64_t v22 = v21;
    double v23 = round(*(double *)(v21 + 80));
    if ((~*(void *)&v23 & 0x7FF0000000000000) == 0) {
      goto LABEL_45;
    }
    if (v23 <= -9.22337204e18) {
      goto LABEL_46;
    }
    if (v23 < 9.22337204e18) {
      break;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRetain_n();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18) {
      goto LABEL_50;
    }
  }
  unint64_t v24 = (uint64_t)v23;
  unint64_t v137 = v19;
  uint64_t v136 = v10;
  if ((uint64_t)v23 < 0 || *(void *)(*(void *)v115 + 16) <= v24)
  {
    swift_retain();
    double v33 = 0.0;
  }
  else
  {
    uint64_t v25 = (double *)(*(void *)v115 + 168 * v24);
    double v26 = v25[11] - v25[9];
    double v27 = v25[12] - v25[10];
    double v28 = sqrt(v26 * v26 + v27 * v27);
    double v29 = atan2(v27 / v28, v26 / v28);
    swift_retain();
    double v30 = ReflowWord.baselineDelta.getter();
    double v32 = atan2(v31, v30);
    if ((*(unsigned char *)(v22 + 312) & (vabdd_f64(v29, v32) > v112)) != 0) {
      double v33 = v29 - v32;
    }
    else {
      double v33 = 0.0;
    }
  }
  unint64_t v34 = (char *)*(id *)(v22 + 280);
  objc_msgSend(v34, sel__canvasBounds);
  CGFloat x = v155.origin.x;
  CGFloat y = v155.origin.y;
  CGFloat width = v155.size.width;
  CGFloat height = v155.size.height;
  double v39 = *(double *)(v22 + 184);
  double v40 = *(double *)(v22 + 192);
  double MinX = CGRectGetMinX(v155);
  v156.origin.CGFloat x = x;
  v156.origin.CGFloat y = y;
  v156.size.CGFloat width = width;
  v156.size.CGFloat height = height;
  double v42 = MinX + v39 * CGRectGetWidth(v156);
  v157.origin.CGFloat x = x;
  v157.origin.CGFloat y = y;
  v157.size.CGFloat width = width;
  v157.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v157);
  v158.origin.CGFloat x = x;
  v158.origin.CGFloat y = y;
  v158.size.CGFloat width = width;
  v158.size.CGFloat height = height;
  CGFloat v44 = CGRectGetHeight(v158);
  CGAffineTransformMakeTranslation(&t1, -v42, -(MinY + v40 * v44));
  long long v149 = *(_OWORD *)&t1.a;
  long long v148 = *(_OWORD *)&t1.c;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeRotation(&t1, v33);
  long long v47 = *(_OWORD *)&t1.a;
  long long v48 = *(_OWORD *)&t1.c;
  long long v49 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v149;
  *(_OWORD *)&t1.CGFloat c = v148;
  t1.tCGFloat x = tx;
  t1.tCGFloat y = ty;
  *(_OWORD *)&t2.CGFloat a = v47;
  *(_OWORD *)&t2.CGFloat c = v48;
  *(_OWORD *)&t2.tCGFloat x = v49;
  CGAffineTransformConcat(&v152, &t1, &t2);
  long long v149 = *(_OWORD *)&v152.a;
  long long v148 = *(_OWORD *)&v152.c;
  CGFloat v50 = v152.tx;
  CGFloat v51 = v152.ty;
  CGAffineTransformMakeScale(&t1, (double)*((uint64_t *)v133 + 14) / 100.0, (double)*((uint64_t *)v133 + 14) / 100.0);
  long long v52 = *(_OWORD *)&t1.a;
  long long v53 = *(_OWORD *)&t1.c;
  long long v54 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v149;
  *(_OWORD *)&t1.CGFloat c = v148;
  t1.tCGFloat x = v50;
  t1.tCGFloat y = v51;
  *(_OWORD *)&t2.CGFloat a = v52;
  *(_OWORD *)&t2.CGFloat c = v53;
  *(_OWORD *)&t2.tCGFloat x = v54;
  CGAffineTransformConcat(&v152, &t1, &t2);
  long long v149 = *(_OWORD *)&v152.a;
  long long v148 = *(_OWORD *)&v152.c;
  CGFloat a = v152.tx;
  CGFloat v55 = v152.ty;
  CGFloat v56 = *(double *)(v22 + 48);
  CGFloat v57 = *(double *)(v22 + 56);
  CGFloat v58 = *(double *)(v22 + 64);
  CGFloat v59 = *(double *)(v22 + 72);
  double v61 = *(double *)(v22 + 184);
  double v60 = *(double *)(v22 + 192);
  v159.origin.CGFloat x = v56;
  v159.origin.CGFloat y = v57;
  v159.size.CGFloat width = v58;
  v159.size.CGFloat height = v59;
  double v62 = CGRectGetMinX(v159);
  v160.origin.CGFloat x = v56;
  v160.origin.CGFloat y = v57;
  v160.size.CGFloat width = v58;
  v160.size.CGFloat height = v59;
  double v63 = v62 + v61 * CGRectGetWidth(v160);
  v161.origin.CGFloat x = v56;
  v161.origin.CGFloat y = v57;
  v161.size.CGFloat width = v58;
  v161.size.CGFloat height = v59;
  double v64 = CGRectGetMinY(v161);
  v162.origin.CGFloat x = v56;
  v162.origin.CGFloat y = v57;
  v162.size.CGFloat width = v58;
  v162.size.CGFloat height = v59;
  CGFloat v65 = CGRectGetHeight(v162);
  CGAffineTransformMakeTranslation(&t1, v125 + v63, v124 + v64 + v60 * v65);
  long long v66 = *(_OWORD *)&t1.a;
  long long v67 = *(_OWORD *)&t1.c;
  long long v68 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v149;
  *(_OWORD *)&t1.CGFloat c = v148;
  t1.tCGFloat x = a;
  t1.tCGFloat y = v55;
  *(_OWORD *)&t2.CGFloat a = v66;
  *(_OWORD *)&t2.CGFloat c = v67;
  *(_OWORD *)&t2.tCGFloat x = v68;
  CGAffineTransformConcat(&v152, &t1, &t2);
  CGFloat a = v152.a;
  CGFloat b = v152.b;
  CGFloat c = v152.c;
  CGFloat d = v152.d;
  CGFloat v69 = v152.tx;
  CGFloat v70 = v152.ty;
  id v135 = v34;
  double v71 = &v34[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  uint64_t v72 = v129;
  uint64_t v73 = v130;
  (*v123)(v129, v71, v130);
  swift_getKeyPath();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  uint64_t v12 = (uint64_t)v131;
  Capsule<>.subscript.getter();
  swift_release();
  (*v122)(v72, v73);
  uint64_t v74 = *(void *)(v22 + 296);
  uint64_t v10 = (uint64_t)v127;
  uint64_t v75 = v132;
  (*v121)(v127, v12, v132);
  *(void *)&long long v149 = *(int *)(v128 + 52);
  *(void *)(v10 + v149) = v74;
  long long v76 = *v120;
  swift_bridgeObjectRetain();
  v76(v12, v75);
  (*v119)(v12, v10, v75);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v77 = (uint64_t)v147;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v78 = v126;
  double v79 = (void *)(v77 + *(int *)(v126 + 52));
  *double v79 = *(void *)(v10 + v149);
  v79[1] = 0;
  *(void *)&long long v148 = *(int *)(v78 + 56);
  *(unsigned char *)(v77 + v148) = 0;
  *(void *)&long long v149 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  double v80 = v118;
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
    dispatch thunk of IteratorProtocol.next()();
    if ((*v80)(v3, 1, v4) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v3, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
LABEL_5:
      *(unsigned char *)(v77 + v148) = 1;
LABEL_6:
      outlined destroy of StocksKitCurrencyCache.Provider?(v77, &demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, [CGAffineTransform]>.Iterator);

      uint64_t v10 = v136;
      swift_release();
      CGFloat v17 = v117;
      uint64_t v18 = v116;
      unint64_t v19 = v137;
      goto LABEL_7;
    }
    CGFloat v17 = *v150;
    (*(void (**)(char *, uint64_t, uint64_t))v150)(v151, v3, v4);
    unint64_t v82 = v79[1];
    unint64_t v83 = *(void *)(*v79 + 16);
    if (v82 == v83)
    {
      (*v142)(v151, v4);
      goto LABEL_5;
    }
    if (v82 >= v83)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v10 = v3;
    unint64_t v84 = v82 + 1;
    double v85 = (double *)(*v79 + 48 * v82);
    CGFloat v87 = v85[8];
    CGFloat v86 = v85[9];
    CGFloat v89 = v85[6];
    CGFloat v88 = v85[7];
    CGFloat v91 = v85[4];
    CGFloat v90 = v85[5];
    v79[1] = v84;
    uint64_t v3 = (uint64_t)v140;
    unint64_t v92 = (CGFloat *)&v140[*(int *)(v141 + 48)];
    (*(void (**)(char *, char *, uint64_t))&v17)(v140, v151, v4);
    *unint64_t v92 = v91;
    v92[1] = v90;
    v92[2] = v89;
    v92[3] = v88;
    v92[4] = v87;
    v92[5] = v86;
    (*(void (**)(char *, uint64_t, uint64_t))&v17)(v6, v3, v4);
    t1.CGFloat a = v91;
    t1.CGFloat b = v90;
    t1.CGFloat c = v89;
    t1.CGFloat d = v88;
    t1.tCGFloat x = v87;
    t1.tCGFloat y = v86;
    t2.CGFloat a = a;
    t2.CGFloat b = b;
    t2.CGFloat c = c;
    t2.CGFloat d = d;
    t2.tCGFloat x = v69;
    t2.tCGFloat y = v70;
    CGAffineTransformConcat(&v152, &t1, &t2);
    CGFloat v93 = v152.a;
    CGFloat v94 = v152.b;
    CGFloat v95 = v152.c;
    CGFloat v96 = v152.d;
    CGFloat v97 = v152.tx;
    CGFloat v98 = v152.ty;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v100 = (uint64_t)v6;
    double v6 = (char *)isUniquelyReferenced_nonNull_native;
    t1.CGFloat a = v16;
    uint64_t v12 = v100;
    CGFloat v17 = v16;
    unint64_t v102 = specialized __RawDictionaryStorage.find<A>(_:)(v100);
    uint64_t v103 = *(void *)(*(void *)&v16 + 16);
    BOOL v104 = (v101 & 1) == 0;
    uint64_t v105 = v103 + v104;
    if (__OFADD__(v103, v104)) {
      goto LABEL_42;
    }
    uint64_t v3 = v101;
    if (*(void *)(*(void *)&v16 + 24) < v105) {
      break;
    }
    if ((v6 & 1) == 0)
    {
      CGFloat v17 = COERCE_DOUBLE(&t1);
      specialized _NativeDictionary.copy()();
    }
    double v6 = (char *)v12;
    CGFloat v16 = t1.a;
    if (v3)
    {
LABEL_25:
      double v81 = (CGFloat *)(*(void *)(*(void *)&v16 + 56) + 48 * v102);
      *double v81 = v93;
      v81[1] = v94;
      long long v81[2] = v95;
      v81[3] = v96;
      v81[4] = v97;
      v81[5] = v98;
      goto LABEL_26;
    }
LABEL_38:
    *(void *)(*(void *)&v16 + 8 * (v102 >> 6) + 64) |= 1 << v102;
    (*(void (**)(unint64_t, char *, uint64_t))(v139 + 16))(*(void *)(*(void *)&v16 + 48) + *(void *)(v139 + 72) * v102, v6, v4);
    float64x2_t v108 = (CGFloat *)(*(void *)(*(void *)&v16 + 56) + 48 * v102);
    *float64x2_t v108 = v93;
    v108[1] = v94;
    v108[2] = v95;
    v108[3] = v96;
    v108[4] = v97;
    v108[5] = v98;
    uint64_t v109 = *(void *)(*(void *)&v16 + 16);
    BOOL v20 = __OFADD__(v109, 1);
    uint64_t v110 = v109 + 1;
    if (v20) {
      goto LABEL_43;
    }
    *(void *)(*(void *)&v16 + 16) = v110;
LABEL_26:
    swift_bridgeObjectRelease();
    (*v142)(v6, v4);
    uint64_t v77 = (uint64_t)v147;
    uint64_t v3 = v10;
    if (v147[v148]) {
      goto LABEL_6;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v105, (int)v6);
  CGFloat v17 = t1.a;
  double v6 = (char *)v12;
  unint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v3 & 1) == (v107 & 1))
  {
    unint64_t v102 = v106;
    CGFloat v16 = t1.a;
    if (v3) {
      goto LABEL_25;
    }
    goto LABEL_38;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int ReflowLayoutManager.reflowWords(for:)(uint64_t a1)
{
  uint64_t v73 = a1;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v77 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  double v71 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v70);
  CGFloat v69 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v5 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  long long v68 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v66 = (char *)&v55 - v8;
  uint64_t v58 = type metadata accessor for IndexSet();
  unint64_t v9 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexSet.init()();
  uint64_t v12 = (Swift::Int *)(v1 + 80);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v1 + 80);
  unint64_t v57 = v9;
  CGFloat v59 = v11;
  CGFloat v56 = (uint64_t *)(v1 + 80);
  if ((unint64_t)v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    if (!v14) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v14) {
      goto LABEL_14;
    }
  }
  if (v14 < 1)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((uint64_t)v9 < v37) {
      goto LABEL_20;
    }
    while (1)
    {
LABEL_29:
      Swift::Int result = IndexSet.first.getter();
      if (v41) {
        goto LABEL_82;
      }
      uint64_t v13 = result;
      Swift::Int result = IndexSet.last.getter();
      if (v42) {
        goto LABEL_83;
      }
      if (result < v13) {
        break;
      }
      unint64_t v9 = result + 1;
      if (__OFADD__(result, 1)) {
        goto LABEL_65;
      }
      Swift::Int v2 = *v12;
      uint64_t v43 = *v12 & 0xFFFFFFFFFFFFFF8;
      uint64_t v12 = (Swift::Int *)((unint64_t)*v12 >> 62);
      if (!v12)
      {
        uint64_t v44 = *(void *)(v43 + 16);
        Swift::Int result = swift_bridgeObjectRetain();
        if (v44 < v13) {
          goto LABEL_67;
        }
        goto LABEL_35;
      }
LABEL_66:
      swift_bridgeObjectRetain_n();
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
      Swift::Int result = swift_bridgeObjectRelease();
      if (v53 < v13)
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
LABEL_35:
      if (v13 < 0) {
        goto LABEL_68;
      }
      if (v12)
      {
        swift_bridgeObjectRetain();
        uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
        Swift::Int result = swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v45 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v45 < (uint64_t)v9) {
        goto LABEL_69;
      }
      if ((v9 & 0x8000000000000000) != 0) {
        goto LABEL_70;
      }
      if ((v2 & 0xC000000000000001) == 0) {
        goto LABEL_47;
      }
      if (v9 >= v13)
      {
        if (v13 != v9)
        {
          if (v13 >= v9) {
            goto LABEL_80;
          }
          type metadata accessor for ReflowElement();
          Swift::Int v46 = v13;
          do
          {
            Swift::Int v47 = v46 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v46);
            Swift::Int v46 = v47;
          }
          while (v9 != v47);
        }
LABEL_47:
        if (v12)
        {
          swift_bridgeObjectRetain();
          uint64_t v37 = _CocoaArrayWrapper.subscript.getter();
          uint64_t v12 = v48;
          uint64_t v13 = v49;
          unint64_t v9 = v50;
          swift_bridgeObjectRelease_n();
          if ((v9 & 1) == 0) {
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v37 = v2 & 0xFFFFFFFFFFFFFF8;
          uint64_t v12 = (Swift::Int *)((v2 & 0xFFFFFFFFFFFFFF8) + 32);
          unint64_t v9 = (2 * v9) | 1;
          if ((v9 & 1) == 0) {
            goto LABEL_51;
          }
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        uint64_t v51 = swift_dynamicCastClass();
        if (!v51)
        {
          swift_unknownObjectRelease();
          uint64_t v51 = MEMORY[0x263F8EE78];
        }
        uint64_t v52 = *(void *)(v51 + 16);
        swift_release();
        if (__OFSUB__(v9 >> 1, v13)) {
          goto LABEL_77;
        }
        if (v52 != (v9 >> 1) - v13) {
          goto LABEL_78;
        }
        uint64_t v32 = swift_dynamicCastClass();
        swift_unknownObjectRelease();
        uint64_t v33 = v58;
        unint64_t v34 = v57;
        if (!v32)
        {
          uint64_t v32 = MEMORY[0x263F8EE78];
          goto LABEL_58;
        }
        goto LABEL_59;
      }
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      swift_bridgeObjectRetain();
      unint64_t v9 = MEMORY[0x21054E050](v9, v13);
      swift_bridgeObjectRelease();
      type metadata accessor for ReflowSpace();
      uint64_t v54 = swift_dynamicCastClass();
      swift_unknownObjectRelease();
      if (v54) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  Swift::Int v2 = 0;
  uint64_t v15 = 0;
  unint64_t v74 = v13 & 0xC000000000000001;
  CGFloat v65 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  double v64 = (void (**)(char *, uint64_t))(v5 + 8);
  double v63 = (uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 16);
  double v62 = (void (**)(char *, uint64_t))(v77 + 8);
  uint64_t v61 = v13;
  uint64_t v60 = v14;
  uint64_t v16 = v67;
  uint64_t v17 = (uint64_t)v69;
  uint64_t v18 = v64;
  do
  {
    if (v74)
    {
      uint64_t v19 = MEMORY[0x21054E050](v2, v13);
    }
    else
    {
      uint64_t v19 = *(void *)(v13 + 8 * v2 + 32);
      swift_retain();
    }
    type metadata accessor for ReflowWord();
    uint64_t v20 = swift_dynamicCastClass();
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v77 = v19;
      uint64_t v22 = *(void *)(v20 + 280);
      uint64_t v76 = v15;
      uint64_t v23 = v22 + OBJC_IVAR___PKDrawingCoherence_model;
      swift_beginAccess();
      unint64_t v24 = *v65;
      uint64_t v25 = v66;
      (*v65)(v66, v23, v16);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
      Capsule<>.root.getter();
      uint64_t v75 = *v18;
      v75(v25, v16);
      uint64_t v26 = *(void *)(v21 + 280) + OBJC_IVAR___PKDrawingCoherence_model;
      swift_beginAccess();
      double v27 = v68;
      v24(v68, v26, v16);
      double v28 = v71;
      uint64_t v29 = v72;
      uint64_t v30 = (*v63)(v71, v17 + *(int *)(v70 + 20), v72);
      MEMORY[0x270FA5388](v30);
      *(&v55 - 2) = v73;
      *(&v55 - 1) = (uint64_t)v27;
      uint64_t v15 = v76;
      BOOL v31 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Ref<>.containsStrokes<A>(_:in:), (uint64_t)(&v55 - 4));
      (*v62)(v28, v29);
      v75(v27, v16);
      outlined destroy of PKDrawingStruct(v17);
      if (v31) {
        IndexSet.insert(_:)(v2);
      }
      uint64_t v13 = v61;
      uint64_t v14 = v60;
    }
    ++v2;
    swift_release();
  }
  while (v14 != v2);
LABEL_14:
  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t)v59;
  if (IndexSet.isEmpty.getter())
  {
    uint64_t v32 = MEMORY[0x263F8EE78];
    uint64_t v33 = v58;
    unint64_t v34 = v57;
LABEL_59:
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v14, v33);
    return v32;
  }
  Swift::Int result = IndexSet.last.getter();
  if (v36)
  {
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  unint64_t v9 = result + 1;
  uint64_t v12 = v56;
  if (__OFADD__(result, 1)) {
    goto LABEL_61;
  }
  uint64_t v13 = *v56;
  if ((unint64_t)*v56 >> 62) {
    goto LABEL_62;
  }
  uint64_t v37 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if ((uint64_t)v9 >= v37) {
    goto LABEL_29;
  }
LABEL_20:
  Swift::Int result = IndexSet.last.getter();
  if ((v38 & 1) == 0)
  {
    unint64_t v9 = result + 1;
    if (__OFADD__(result, 1)) {
      goto LABEL_72;
    }
    uint64_t v13 = *v12;
    if ((*v12 & 0xC000000000000001) != 0) {
      goto LABEL_73;
    }
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v9 < *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      type metadata accessor for ReflowSpace();
      if (!swift_dynamicCastClass()) {
        goto LABEL_29;
      }
LABEL_26:
      Swift::Int result = IndexSet.last.getter();
      if (v39) {
        goto LABEL_85;
      }
      if (!__OFADD__(result++, 1))
      {
        IndexSet.insert(_:)(result);
        goto LABEL_29;
      }
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    swift_unknownObjectRelease();
LABEL_51:
    uint64_t v32 = specialized _copyCollectionToContiguousArray<A>(_:)(v37, (uint64_t)v12, v13, v9);
    uint64_t v33 = v58;
    unint64_t v34 = v57;
LABEL_58:
    swift_unknownObjectRelease();
    goto LABEL_59;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

id ReflowLayoutManager.TextPosition.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReflowLayoutManager.TextPosition();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id ReflowLayoutManager.closestPosition(to:)(double a1, double a2)
{
  uint64_t v7 = (unint64_t *)(v2 + 96);
  swift_beginAccess();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = specialized ReflowLayoutManager.closestLine(to:lines:)(v8, a1, a2);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  id result = 0;
  if (v11) {
    return result;
  }
  if (v9 < 0) {
    goto LABEL_42;
  }
  unint64_t v13 = *v7;
  uint64_t v14 = *(void *)(*v7 + 16);
  if (v14 < (unint64_t)v9) {
    goto LABEL_43;
  }
  if (!v9)
  {
    uint64_t v4 = 0;
    if (v14 > 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v15 = v9 - 1;
  for (uint64_t i = 32; ; i += 168)
  {
    long long v17 = *(_OWORD *)(v13 + i);
    long long v18 = *(_OWORD *)(v13 + i + 32);
    long long v51 = *(_OWORD *)(v13 + i + 16);
    long long v52 = v18;
    long long v50 = v17;
    long long v19 = *(_OWORD *)(v13 + i + 48);
    long long v20 = *(_OWORD *)(v13 + i + 64);
    long long v21 = *(_OWORD *)(v13 + i + 96);
    long long v55 = *(_OWORD *)(v13 + i + 80);
    long long v56 = v21;
    long long v53 = v19;
    long long v54 = v20;
    long long v22 = *(_OWORD *)(v13 + i + 112);
    long long v23 = *(_OWORD *)(v13 + i + 128);
    long long v24 = *(_OWORD *)(v13 + i + 144);
    uint64_t v60 = *(void *)(v13 + i + 160);
    long long v58 = v23;
    long long v59 = v24;
    long long v57 = v22;
    unint64_t v11 = v50;
    if ((unint64_t)v50 >> 62) {
      break;
    }
    uint64_t v25 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v26 = __OFADD__(v4, v25);
    v4 += v25;
    if (v26) {
      goto LABEL_12;
    }
LABEL_8:
    if (!v15) {
      goto LABEL_13;
    }
    --v15;
  }
  outlined retain of ReflowTextLine((uint64_t)&v50);
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  outlined release of ReflowTextLine((uint64_t)&v50);
  BOOL v26 = __OFADD__(v4, v27);
  v4 += v27;
  if (!v26) {
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  swift_bridgeObjectRelease();
  unint64_t v13 = *v7;
  if (v9 < *(void *)(*v7 + 16))
  {
LABEL_14:
    unint64_t v3 = *(void *)(v13 + 168 * v9 + 32);
    if (v3 >> 62) {
      goto LABEL_44;
    }
    uint64_t v28 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v28; uint64_t v28 = _CocoaArrayWrapper.endIndex.getter())
    {
      unint64_t v13 = 0;
      while (1)
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          unint64_t v11 = MEMORY[0x21054E050](v13, v3);
        }
        else
        {
          unint64_t v11 = *(void *)(v3 + 8 * v13 + 32);
          swift_retain();
        }
        if (CGRectGetMaxX(*(CGRect *)(v11 + 48)) <= a1)
        {
          swift_release();
        }
        else
        {
          char v29 = (*(uint64_t (**)(void))(*(void *)v11 + 144))();
          swift_release();
          if ((v29 & 1) == 0) {
            goto LABEL_31;
          }
        }
        unint64_t v30 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        ++v13;
        if (v30 == v28) {
          goto LABEL_26;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      swift_bridgeObjectRetain();
    }
LABEL_26:
    swift_bridgeObjectRelease();
    if (v9 >= *(void *)(*v7 + 16)) {
      goto LABEL_72;
    }
    unint64_t v11 = *(void *)(*v7 + 168 * v9 + 32);
    if (v11 >> 62) {
      goto LABEL_73;
    }
    unint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_32;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  while (2)
  {
    swift_bridgeObjectRelease();
LABEL_32:
    if (v9 >= *(void *)(*v7 + 16))
    {
      __break(1u);
LABEL_47:
      swift_bridgeObjectRetain();
      int64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)v13 >= v31) {
        goto LABEL_48;
      }
LABEL_35:
      if (v9 >= *(void *)(*v7 + 16)) {
        goto LABEL_76;
      }
      uint64_t v32 = *v7 + 168 * v9;
      long long v33 = *(_OWORD *)(v32 + 32);
      long long v34 = *(_OWORD *)(v32 + 64);
      long long v51 = *(_OWORD *)(v32 + 48);
      long long v52 = v34;
      long long v50 = v33;
      long long v35 = *(_OWORD *)(v32 + 80);
      long long v36 = *(_OWORD *)(v32 + 96);
      long long v37 = *(_OWORD *)(v32 + 128);
      long long v55 = *(_OWORD *)(v32 + 112);
      long long v56 = v37;
      long long v53 = v35;
      long long v54 = v36;
      long long v38 = *(_OWORD *)(v32 + 144);
      long long v39 = *(_OWORD *)(v32 + 160);
      long long v40 = *(_OWORD *)(v32 + 176);
      uint64_t v60 = *(void *)(v32 + 192);
      long long v58 = v39;
      long long v59 = v40;
      long long v57 = v38;
      unint64_t v11 = v50;
      if ((v50 & 0xC000000000000001) == 0)
      {
        if ((v13 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v13 < *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          char v41 = *(double **)(v50 + 8 * v13 + 32);
          swift_retain();
LABEL_40:
          CGFloat v42 = v41[6];
          CGFloat v43 = v41[7];
          CGFloat v44 = v41[8];
          CGFloat v45 = v41[9];
          swift_release();
          v61.origin.CGFloat x = v42;
          v61.origin.CGFloat y = v43;
          v61.size.CGFloat width = v44;
          v61.size.CGFloat height = v45;
          unint64_t v11 = CGRectGetMidX(v61) <= a1;
          goto LABEL_67;
        }
        __break(1u);
LABEL_80:
        __break(1u);
        break;
      }
LABEL_77:
      outlined retain of ReflowTextLine((uint64_t)&v50);
      char v41 = (double *)MEMORY[0x21054E050](v13, v11);
      outlined release of ReflowTextLine((uint64_t)&v50);
      goto LABEL_40;
    }
    unint64_t v11 = *(void *)(*v7 + 168 * v9 + 32);
    if (v11 >> 62) {
      goto LABEL_47;
    }
    int64_t v31 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((uint64_t)v13 < v31) {
      goto LABEL_35;
    }
LABEL_48:
    if (v9 >= *(void *)(*v7 + 16)) {
      goto LABEL_80;
    }
    uint64_t v7 = *(unint64_t **)(*v7 + 168 * v9 + 32);
    if (!((unint64_t)v7 >> 62))
    {
      unint64_t v13 = *(void *)(((unint64_t)v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id result = (id)swift_bridgeObjectRetain();
      if (v13) {
        goto LABEL_51;
      }
LABEL_66:
      swift_bridgeObjectRelease();
      unint64_t v11 = 1;
LABEL_67:
      uint64_t v7 = (unint64_t *)(v4 + v13);
      if (!__OFADD__(v4, v13))
      {
        Swift::Int v47 = (objc_class *)type metadata accessor for ReflowLayoutManager.TextPosition();
        long long v48 = objc_allocWithZone(v47);
        *(void *)&v48[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index] = v7;
        v48[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity] = v11;
        v49.receiver = v48;
        v49.super_class = v47;
        return objc_msgSendSuper2(&v49, sel_init);
      }
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      swift_bridgeObjectRetain();
      unint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      continue;
    }
    break;
  }
  swift_bridgeObjectRetain();
  id result = (id)_CocoaArrayWrapper.endIndex.getter();
  unint64_t v13 = (unint64_t)result;
  if (!result) {
    goto LABEL_66;
  }
LABEL_51:
  BOOL v26 = __OFSUB__(v13--, 1);
  if (v26)
  {
    __break(1u);
    goto LABEL_84;
  }
  int64_t v31 = (unint64_t)v7 & 0xC000000000000001;
  if (((unint64_t)v7 & 0xC000000000000001) != 0)
  {
LABEL_84:
    uint64_t v46 = MEMORY[0x21054E050](v13, v7);
    unint64_t v11 = v46;
LABEL_56:
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 144))(v46);
    swift_release();
    if ((v9 & 1) != 0 && v13)
    {
      while (1)
      {
        BOOL v26 = __OFSUB__(v13--, 1);
        if (v26)
        {
          __break(1u);
          goto LABEL_71;
        }
        if (v31)
        {
          unint64_t v11 = MEMORY[0x21054E050](v13, v7);
        }
        else
        {
          if ((v13 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }
          if (v13 >= *(void *)(((unint64_t)v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_75;
          }
          unint64_t v11 = v7[v13 + 4];
          swift_retain();
        }
        uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v11 + 144))();
        swift_release();
        if ((v9 & 1) == 0 || !v13) {
          goto LABEL_66;
        }
      }
    }
    goto LABEL_66;
  }
  if ((v13 & 0x8000000000000000) == 0)
  {
    if (v13 >= *(void *)(((unint64_t)v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_86;
    }
    unint64_t v11 = v7[v13 + 4];
    uint64_t v46 = swift_retain();
    goto LABEL_56;
  }
  __break(1u);
LABEL_86:
  __break(1u);
  return result;
}

uint64_t ReflowLayoutManager.caretRect(for:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index);
  uint64_t v4 = (void *)(v1 + 96);
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 96);
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7) {
    goto LABEL_44;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = 32;
  while (1)
  {
    long long v9 = *(_OWORD *)(v6 + v8);
    long long v10 = *(_OWORD *)(v6 + v8 + 32);
    v61[1] = *(_OWORD *)(v6 + v8 + 16);
    v61[2] = v10;
    v61[0] = v9;
    long long v11 = *(_OWORD *)(v6 + v8 + 48);
    long long v12 = *(_OWORD *)(v6 + v8 + 64);
    long long v13 = *(_OWORD *)(v6 + v8 + 96);
    v61[5] = *(_OWORD *)(v6 + v8 + 80);
    v61[6] = v13;
    void v61[3] = v11;
    unsigned char v61[4] = v12;
    long long v14 = *(_OWORD *)(v6 + v8 + 112);
    long long v15 = *(_OWORD *)(v6 + v8 + 128);
    long long v16 = *(_OWORD *)(v6 + v8 + 144);
    uint64_t v62 = *(void *)(v6 + v8 + 160);
    char v61[8] = v15;
    v61[9] = v16;
    v61[7] = v14;
    uint64_t v17 = *(void *)&v61[0];
    uint64_t v63 = *(void *)&v61[0];
    if (*(void *)&v61[0] >> 62) {
      break;
    }
    uint64_t v18 = *(void *)((*(void *)&v61[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined retain of ReflowTextLine((uint64_t)v61);
    if (v3 < v18) {
      goto LABEL_9;
    }
LABEL_5:
    outlined release of ReflowTextLine((uint64_t)v61);
    BOOL v19 = __OFSUB__(v3, v18);
    v3 -= v18;
    if (v19)
    {
      __break(1u);
      goto LABEL_31;
    }
    v8 += 168;
    if (!--v7)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(*v4 + 16);
      if (!v27) {
        goto LABEL_44;
      }
      uint64_t v28 = *v4 + 168 * v27;
      long long v29 = *(_OWORD *)(v28 - 136);
      long long v30 = *(_OWORD *)(v28 - 104);
      v51[1] = *(_OWORD *)(v28 - 120);
      long long v52 = v30;
      v51[0] = v29;
      long long v31 = *(_OWORD *)(v28 - 88);
      long long v32 = *(_OWORD *)(v28 - 72);
      long long v33 = *(_OWORD *)(v28 - 40);
      long long v55 = *(_OWORD *)(v28 - 56);
      long long v56 = v33;
      long long v53 = v31;
      long long v54 = v32;
      long long v34 = *(_OWORD *)(v28 - 24);
      long long v35 = *(_OWORD *)(v28 - 8);
      long long v36 = *(_OWORD *)(v28 + 8);
      uint64_t v60 = *(void *)(v28 + 24);
      long long v58 = v35;
      long long v59 = v36;
      long long v57 = v34;
      uint64_t v3 = *(void *)&v51[0];
      v64[0] = *(void *)&v51[0];
      uint64_t v4 = (void *)(*(void *)&v51[0] & 0xFFFFFFFFFFFFFF8);
      if (!(*(void *)&v51[0] >> 62))
      {
        uint64_t v37 = *(void *)((*(void *)&v51[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        outlined retain of ReflowTextLine((uint64_t)v51);
        outlined retain of [ReflowElement]((uint64_t)v64);
        if (v37) {
          goto LABEL_18;
        }
        goto LABEL_32;
      }
LABEL_31:
      outlined retain of ReflowTextLine((uint64_t)v51);
      outlined retain of [ReflowElement]((uint64_t)v64);
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      if (v37)
      {
LABEL_18:
        unint64_t v38 = v37 - 1;
        if (__OFSUB__(v37, 1))
        {
          __break(1u);
        }
        else if ((v3 & 0xC000000000000001) == 0)
        {
          if ((v38 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v38 < v4[2])
          {
            long long v39 = *(double **)(v3 + 8 * v38 + 32);
            swift_retain();
LABEL_23:
            outlined release of [ReflowElement]((uint64_t)v64);
            CGFloat v40 = v39[6];
            CGFloat v41 = v39[7];
            CGFloat v42 = v39[8];
            CGFloat v43 = v39[9];
            v66.origin.CGFloat x = v40;
            v66.origin.CGFloat y = v41;
            v66.size.CGFloat width = v42;
            v66.size.CGFloat height = v43;
            CGFloat MaxX = CGRectGetMaxX(v66);
            v67.origin.CGFloat x = v40;
            v67.origin.CGFloat y = v41;
            v67.size.CGFloat width = v42;
            v67.size.CGFloat height = v43;
            CGFloat MaxY = CGRectGetMaxY(v67);
            swift_release();
            uint64_t v46 = v51;
            CGFloat v47 = MaxX;
            CGFloat v48 = MaxY;
            goto LABEL_33;
          }
          __break(1u);
          goto LABEL_38;
        }
        long long v39 = (double *)MEMORY[0x21054E050](v38, v3);
        goto LABEL_23;
      }
LABEL_32:
      outlined release of [ReflowElement]((uint64_t)v64);
      CGFloat v47 = *((CGFloat *)&v52 + 1);
      *(void *)&CGFloat v48 = v53;
      uint64_t v46 = v51;
      goto LABEL_33;
    }
  }
  outlined retain of ReflowTextLine((uint64_t)v61);
  outlined retain of [ReflowElement]((uint64_t)&v63);
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  outlined release of [ReflowElement]((uint64_t)&v63);
  if (v3 >= v18) {
    goto LABEL_5;
  }
LABEL_9:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v20 = v17 & 0xC000000000000001;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity))
  {
    if (!v20)
    {
      if (v3 < 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v3 < *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        long long v21 = (double *)swift_retain();
        goto LABEL_14;
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
LABEL_38:
    long long v21 = (double *)MEMORY[0x21054E050](v3, v17);
LABEL_14:
    CGFloat v22 = v21[6];
    CGFloat v23 = v21[7];
    CGFloat v24 = v21[8];
    CGFloat v25 = v21[9];
    swift_release();
    v65.origin.CGFloat x = v22;
    v65.origin.CGFloat y = v23;
    v65.size.CGFloat width = v24;
    v65.size.CGFloat height = v25;
    double MinX = CGRectGetMaxX(v65);
LABEL_29:
    double v50 = MinX;
    v69.origin.CGFloat x = v22;
    v69.origin.CGFloat y = v23;
    v69.size.CGFloat width = v24;
    v69.size.CGFloat height = v25;
    CGFloat v48 = CGRectGetMaxY(v69);
    uint64_t v46 = v61;
    CGFloat v47 = v50;
LABEL_33:
    ReflowTextLine.caretRect(at:)((CGPoint)__PAIR128__(*(unint64_t *)&v48, *(unint64_t *)&v47));
    return outlined release of ReflowTextLine((uint64_t)v46);
  }
  if (v20)
  {
    objc_super v49 = (double *)MEMORY[0x21054E050](v3, v17);
    goto LABEL_28;
  }
  if (v3 < 0) {
    goto LABEL_42;
  }
  if ((unint64_t)v3 < *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    objc_super v49 = (double *)swift_retain();
LABEL_28:
    CGFloat v22 = v49[6];
    CGFloat v23 = v49[7];
    CGFloat v24 = v49[8];
    CGFloat v25 = v49[9];
    swift_release();
    v68.origin.CGFloat x = v22;
    v68.origin.CGFloat y = v23;
    v68.size.CGFloat width = v24;
    v68.size.CGFloat height = v25;
    double MinX = CGRectGetMinX(v68);
    goto LABEL_29;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void ReflowLayoutManager.caretRect(for:point:)(uint64_t a1, double a2, double a3)
{
  double v5 = round(*(double *)(a1 + 80));
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    return;
  }
  if (v5 >= 9.22337204e18) {
    goto LABEL_41;
  }
  unint64_t v8 = (uint64_t)v5;
  if (((uint64_t)v5 & 0x8000000000000000) == 0)
  {
    swift_beginAccess();
    uint64_t v9 = *(void *)(v3 + 96);
    if (*(void *)(v9 + 16) > v8)
    {
      uint64_t v10 = v9 + 168 * v8;
      long long v41 = *(_OWORD *)(v10 + 144);
      long long v42 = *(_OWORD *)(v10 + 160);
      long long v43 = *(_OWORD *)(v10 + 176);
      uint64_t v44 = *(void *)(v10 + 192);
      long long v37 = *(_OWORD *)(v10 + 80);
      long long v38 = *(_OWORD *)(v10 + 96);
      long long v39 = *(_OWORD *)(v10 + 112);
      long long v40 = *(_OWORD *)(v10 + 128);
      long long v34 = *(_OWORD *)(v10 + 32);
      long long v35 = *(_OWORD *)(v10 + 48);
      long long v36 = *(_OWORD *)(v10 + 64);
      goto LABEL_36;
    }
  }
  uint64_t v11 = v3 + 96;
  swift_beginAccess();
  uint64_t v12 = *(void *)(v3 + 96);
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13) {
    goto LABEL_43;
  }
  swift_bridgeObjectRetain();
  unint64_t v14 = 0;
  do
  {
    if (v14 >= *(void *)(v12 + 16)) {
      goto LABEL_38;
    }
    uint64_t v15 = v12 + 32 + 168 * v14;
    long long v16 = *(_OWORD *)v15;
    long long v17 = *(_OWORD *)(v15 + 32);
    long long v35 = *(_OWORD *)(v15 + 16);
    long long v36 = v17;
    long long v34 = v16;
    long long v18 = *(_OWORD *)(v15 + 48);
    long long v19 = *(_OWORD *)(v15 + 64);
    long long v20 = *(_OWORD *)(v15 + 96);
    long long v39 = *(_OWORD *)(v15 + 80);
    long long v40 = v20;
    long long v37 = v18;
    long long v38 = v19;
    long long v21 = *(_OWORD *)(v15 + 112);
    long long v22 = *(_OWORD *)(v15 + 128);
    long long v23 = *(_OWORD *)(v15 + 144);
    uint64_t v44 = *(void *)(v15 + 160);
    long long v42 = v22;
    long long v43 = v23;
    long long v41 = v21;
    uint64_t v24 = v34;
    v45[0] = v34;
    if ((unint64_t)v34 >> 62)
    {
      swift_bridgeObjectRetain_n();
      outlined retain of [ReflowElement]((uint64_t)v45);
      outlined retain of ReflowTextLine((uint64_t)&v34);
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      outlined release of [ReflowElement]((uint64_t)v45);
      if (!v25) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      outlined retain of [ReflowElement]((uint64_t)v45);
      outlined retain of ReflowTextLine((uint64_t)&v34);
      if (!v25) {
        goto LABEL_9;
      }
    }
    if ((v24 & 0xC000000000000001) != 0)
    {
      uint64_t v28 = MEMORY[0x21054E050](0, v24);
      swift_unknownObjectRelease();
      if (v28 == a1) {
        goto LABEL_34;
      }
      if (v25 != 1)
      {
        uint64_t v29 = MEMORY[0x21054E050](1, v24);
        swift_unknownObjectRelease();
        if (v29 == a1)
        {
LABEL_34:
          outlined release of [ReflowElement]((uint64_t)v45);
          outlined release of [ReflowElement]((uint64_t)v45);
          swift_bridgeObjectRelease();
          ReflowTextLine.caretRect(at:)((CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
          outlined release of ReflowTextLine((uint64_t)&v34);
          return;
        }
        if (v25 != 2)
        {
          uint64_t v30 = 2;
          do
          {
            uint64_t v31 = MEMORY[0x21054E050](v30, v24);
            uint64_t v32 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_42;
            }
            uint64_t v33 = v31;
            swift_unknownObjectRelease();
            if (v33 == a1) {
              goto LABEL_34;
            }
            ++v30;
          }
          while (v32 != v25);
        }
      }
    }
    else
    {
      if (*(void *)(v24 + 32) == a1) {
        goto LABEL_34;
      }
      if (v25 != 1)
      {
        if (*(void *)(v24 + 40) == a1) {
          goto LABEL_34;
        }
        if (v25 != 2)
        {
          uint64_t v26 = 6;
          while (1)
          {
            uint64_t v27 = v26 - 3;
            if (__OFADD__(v26 - 4, 1)) {
              break;
            }
            if (*(void *)(v24 + 8 * v26) == a1) {
              goto LABEL_34;
            }
            ++v26;
            if (v27 == v25) {
              goto LABEL_9;
            }
          }
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
      }
    }
LABEL_9:
    ++v14;
    outlined release of [ReflowElement]((uint64_t)v45);
    outlined release of [ReflowElement]((uint64_t)v45);
    outlined release of ReflowTextLine((uint64_t)&v34);
  }
  while (v14 != v13);
  swift_bridgeObjectRelease();
  if (!*(void *)(*(void *)v11 + 16)) {
    goto LABEL_43;
  }
LABEL_36:
  ReflowTextLine.caretRect(at:)((CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
}

uint64_t ReflowLayoutManager.textSize(for:)(void *a1, uint64_t a2)
{
  uint64_t v100 = a2;
  uint64_t v4 = type metadata accessor for PKDrawing();
  unint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v87 - v12;
  MEMORY[0x270FA5388](v14);
  long long v16 = (char *)&v87 - v15;
  uint64_t v90 = v2 + 96;
  swift_beginAccess();
  uint64_t v17 = *(void *)(v2 + 96);
  uint64_t v95 = *(void *)(v17 + 16);
  if (!v95)
  {
LABEL_32:
    if (one-time initialization token for handwritingReflowDefaultTextSize != -1) {
LABEL_98:
    }
      swift_once();
    id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F35CC8]), sel_initWithXHeight_ascenderHeight_descenderHeight_activeLines_, 6, *(double *)&static UIConstants.handwritingReflowDefaultTextSize, *(double *)&static UIConstants.handwritingReflowDefaultTextSize, *(double *)&static UIConstants.handwritingReflowDefaultTextSize);
    goto LABEL_34;
  }
  CGFloat v88 = v10;
  CGFloat v89 = v13;
  CGFloat v87 = v7;
  CGFloat v91 = v16;
  unint64_t v92 = a1;
  uint64_t v93 = v4;
  unint64_t v94 = v5;
  CGFloat v97 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v17 + 32);
  uint64_t v18 = swift_bridgeObjectRetain();
  unint64_t v19 = 0;
  uint64_t v20 = 1;
  uint64_t v96 = v18;
  while (1)
  {
    if (v19 >= *(void *)(v18 + 16)) {
      goto LABEL_91;
    }
    long long v21 = (char *)v97 + 168 * v19;
    long long v22 = *(_OWORD *)v21;
    long long v23 = *((_OWORD *)v21 + 2);
    v112[1] = *((_OWORD *)v21 + 1);
    v112[2] = v23;
    v112[0] = v22;
    long long v24 = *((_OWORD *)v21 + 3);
    long long v25 = *((_OWORD *)v21 + 4);
    long long v26 = *((_OWORD *)v21 + 6);
    v112[5] = *((_OWORD *)v21 + 5);
    v112[6] = v26;
    v112[3] = v24;
    v112[4] = v25;
    long long v27 = *((_OWORD *)v21 + 7);
    long long v28 = *((_OWORD *)v21 + 8);
    long long v29 = *((_OWORD *)v21 + 9);
    uint64_t v113 = *((void *)v21 + 20);
    v112[8] = v28;
    v112[9] = v29;
    v112[7] = v27;
    uint64_t v30 = *(void *)&v112[0];
    uint64_t v114 = *(void *)&v112[0];
    uint64_t v98 = *(void *)&v112[0] >> 62;
    if (*(void *)&v112[0] >> 62)
    {
      swift_bridgeObjectRetain();
      outlined retain of [ReflowElement]((uint64_t)&v114);
      outlined retain of ReflowTextLine((uint64_t)v112);
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      outlined release of [ReflowElement]((uint64_t)&v114);
      uint64_t v99 = v35;
      if (!v35) {
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v31 = *(void *)((*(void *)&v112[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      outlined retain of [ReflowElement]((uint64_t)&v114);
      outlined retain of ReflowTextLine((uint64_t)v112);
      uint64_t v99 = v31;
      if (!v31) {
        goto LABEL_3;
      }
    }
    uint64_t v4 = (v30 & 0xC000000000000001) == 0;
    if ((v30 & 0xC000000000000001) != 0)
    {
      uint64_t v36 = MEMORY[0x21054E050](0, v30);
      swift_unknownObjectRelease();
      if (v36 == v100) {
        break;
      }
      if (v99 == 1) {
        goto LABEL_3;
      }
      uint64_t v37 = MEMORY[0x21054E050](1, v30);
      swift_unknownObjectRelease();
      if (v37 == v100) {
        goto LABEL_36;
      }
      a1 = (void *)(v30 & 0xFFFFFFFFFFFFFF8);
      goto LABEL_13;
    }
    a1 = (void *)(v30 & 0xFFFFFFFFFFFFFF8);
    unint64_t v32 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v32) {
      goto LABEL_92;
    }
    if (*(void *)(v30 + 32) == v100) {
      break;
    }
    if (v99 != 1)
    {
      if (v32 < 2) {
        goto LABEL_93;
      }
      if (*(void *)(v30 + 40) == v100) {
        goto LABEL_36;
      }
LABEL_13:
      uint64_t v4 = 0;
      uint64_t v33 = v99 - 2;
      while (v33 != v4)
      {
        unint64_t v34 = v4 + 2;
        if ((v30 & 0xC000000000000001) != 0)
        {
          unint64_t v5 = MEMORY[0x21054E050](v4 + 2, v30);
          swift_unknownObjectRelease();
          if (v5 == v100)
          {
            outlined release of [ReflowElement]((uint64_t)&v114);
            uint64_t v20 = v4 + 2;
            if (v4 + 2 < 0) {
              goto LABEL_94;
            }
            uint64_t v4 = 0;
            uint64_t v38 = v99;
            if (v98) {
              goto LABEL_37;
            }
            goto LABEL_29;
          }
        }
        else
        {
          if (v34 >= a1[2]) {
            goto LABEL_87;
          }
          if (*(void *)(v30 + 8 * v4 + 48) == v100)
          {
            uint64_t v20 = v4 + 2;
            uint64_t v4 = 1;
            goto LABEL_36;
          }
        }
        ++v4;
        if (__OFADD__(v34, 1))
        {
          __break(1u);
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }
      }
    }
LABEL_3:
    ++v19;
    outlined release of [ReflowElement]((uint64_t)&v114);
    outlined release of ReflowTextLine((uint64_t)v112);
    uint64_t v18 = v96;
    if (v19 == v95)
    {
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void *)(*(void *)v90 + 16);
      a1 = v92;
      uint64_t v4 = v93;
      unint64_t v5 = v94;
      if (!v40) {
        goto LABEL_32;
      }
      uint64_t v41 = *(void *)v90 + 168 * v40;
      long long v42 = *(_OWORD *)(v41 - 136);
      long long v43 = *(_OWORD *)(v41 - 104);
      long long v102 = *(_OWORD *)(v41 - 120);
      long long v103 = v43;
      long long v101 = v42;
      long long v44 = *(_OWORD *)(v41 - 88);
      long long v45 = *(_OWORD *)(v41 - 72);
      long long v46 = *(_OWORD *)(v41 - 40);
      long long v106 = *(_OWORD *)(v41 - 56);
      long long v107 = v46;
      long long v104 = v44;
      long long v105 = v45;
      long long v47 = *(_OWORD *)(v41 - 24);
      long long v48 = *(_OWORD *)(v41 - 8);
      long long v49 = *(_OWORD *)(v41 + 8);
      uint64_t v111 = *(void *)(v41 + 24);
      long long v109 = v48;
      long long v110 = v49;
      long long v108 = v47;
      outlined retain of ReflowTextLine((uint64_t)&v101);
      id v50 = ReflowTextLine.textSize.getter();
      outlined release of ReflowTextLine((uint64_t)&v101);
LABEL_34:
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, 1, 1, v4);
      return (uint64_t)v50;
    }
  }
  uint64_t v20 = 0;
LABEL_36:
  outlined release of [ReflowElement]((uint64_t)&v114);
  uint64_t v38 = v99;
  if (!v98)
  {
LABEL_29:
    uint64_t v39 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined retain of [ReflowElement]((uint64_t)&v114);
    goto LABEL_39;
  }
LABEL_37:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_100;
  }
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
  outlined release of [ReflowElement]((uint64_t)&v114);
LABEL_39:
  if (v39 < v20) {
    goto LABEL_95;
  }
  if (v20) {
    char v52 = v4;
  }
  else {
    char v52 = 1;
  }
  if ((v52 & 1) == 0)
  {
    type metadata accessor for ReflowElement();
    Swift::Int v53 = 0;
    do
    {
      Swift::Int v54 = v53 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v53);
      Swift::Int v53 = v54;
    }
    while (v20 != v54);
  }
  LODWORD(v10CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v4;
  if (v98)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.subscript.getter();
    a1 = v57;
    uint64_t v55 = v58;
    unint64_t v5 = v59;
    outlined release of [ReflowElement]((uint64_t)&v114);
    outlined release of [ReflowElement]((uint64_t)&v114);
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v56 = v30 & 0xFFFFFFFFFFFFFF8;
    a1 = (void *)((v30 & 0xFFFFFFFFFFFFFF8) + 32);
    unint64_t v5 = (2 * v20) | 1;
  }
  *(void *)&long long v101 = v56;
  *((void *)&v101 + 1) = a1;
  *(void *)&long long v102 = v55;
  *((void *)&v102 + 1) = v5;
  int64_t v60 = v5 >> 1;
  if (v5 >> 1 != v55)
  {
    uint64_t v4 = v5 >> 1;
    while (!__OFSUB__(v4--, 1))
    {
      if (v4 < v55 || v4 >= v60) {
        goto LABEL_89;
      }
      unint64_t v5 = a1[v4];
      type metadata accessor for ReflowWord();
      uint64_t v62 = swift_dynamicCastClass();
      if (v62)
      {
        unint64_t v5 = (unint64_t)&v87;
        MEMORY[0x270FA5388](v62);
        *(&v87 - 2) = (char *)&v101;
        uint64_t v115 = v4;
        a1 = 0;
        partial apply for specialized closure #1 in BidirectionalCollection.last(where:)(&v115, &v116);
        uint64_t v63 = v116;
        goto LABEL_57;
      }
      if (v4 == v55) {
        goto LABEL_56;
      }
    }
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
LABEL_56:
  unint64_t v5 = (unint64_t)&v87;
  uint64_t v63 = 0;
LABEL_57:
  uint64_t v64 = v93;
  swift_unknownObjectRelease();
  if (v63)
  {
    type metadata accessor for ReflowWord();
    uint64_t v65 = swift_dynamicCastClass();
    if (v65)
    {
      a1 = *(id *)(v65 + 280);
      swift_release();
      uint64_t v4 = v94;
      unint64_t v5 = v94 + 56;
      CGRect v66 = v89;
      CGFloat v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56);
      v97(v89, 1, 1, v64);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKDrawing and conformance PKDrawing, MEMORY[0x263F14AB8]);
      dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v66, 1, v64) != 1)
      {
        CGRect v67 = *(void (**)(char *, char *, uint64_t))(v94 + 32);
        CGRect v68 = v87;
        v67(v87, v89, v64);
        swift_bridgeObjectRelease();
        uint64_t v69 = (uint64_t)v91;
        v67(v91, v68, v64);
        v97((char *)v69, 0, 1, v64);
        uint64_t v70 = (uint64_t)v92;
LABEL_84:
        id v50 = ReflowTextLine.textSize.getter();
        outlined release of ReflowTextLine((uint64_t)v112);
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v69, v70, &demangling cache variable for type metadata for PKDrawing?);
        return (uint64_t)v50;
      }
    }
    else
    {
      swift_release();
    }
  }
  if (v38 < v20) {
    goto LABEL_96;
  }
  if (v98)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = outlined release of [ReflowElement]((uint64_t)&v114);
  }
  else
  {
    uint64_t v71 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  if (v71 < v38) {
    goto LABEL_97;
  }
  if (((v20 != v38) & ~v100) == 0)
  {
LABEL_72:
    if (v98)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      a1 = v74;
      uint64_t v20 = v75;
      unint64_t v77 = v76;
      outlined release of [ReflowElement]((uint64_t)&v114);
      outlined release of [ReflowElement]((uint64_t)&v114);
      uint64_t v38 = v77 >> 1;
    }
    else
    {
      a1 = (void *)((v30 & 0xFFFFFFFFFFFFFF8) + 32);
    }
    uint64_t v4 = v96;
    if (v20 == v38)
    {
LABEL_79:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v69 = (uint64_t)v91;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v91, 1, 1, v64);
      uint64_t v70 = (uint64_t)v92;
      goto LABEL_84;
    }
    while (v20 < v38)
    {
      type metadata accessor for ReflowWord();
      uint64_t v78 = swift_dynamicCastClass();
      if (v78)
      {
        uint64_t v79 = v78;
        swift_retain();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        id v80 = *(id *)(v79 + 280);
        swift_release();
        unint64_t v81 = v94;
        unint64_t v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56);
        unint64_t v83 = v88;
        v82(v88, 1, 1, v64);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKDrawing and conformance PKDrawing, MEMORY[0x263F14AB8]);
        dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

        int v84 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48))(v83, 1, v64);
        uint64_t v70 = (uint64_t)v92;
        uint64_t v69 = (uint64_t)v91;
        if (v84 == 1)
        {
          uint64_t v85 = (uint64_t)v91;
          uint64_t v86 = 1;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v91, v83, v64);
          uint64_t v85 = v69;
          uint64_t v86 = 0;
        }
        v82((char *)v85, v86, 1, v64);
        goto LABEL_84;
      }
      if (v38 == ++v20) {
        goto LABEL_79;
      }
    }
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  if (v20 < v38)
  {
    type metadata accessor for ReflowElement();
    Swift::Int v72 = v20;
    do
    {
      Swift::Int v73 = v72 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v72);
      Swift::Int v72 = v73;
    }
    while (v38 != v73);
    goto LABEL_72;
  }
LABEL_100:
  __break(1u);
  return result;
}

id ReflowLayoutManager.textSize(for:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (void *)((char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v36 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for PKStroke();
  uint64_t v8 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v11 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = MEMORY[0x263F8EE78];
  if (v14)
  {
    v29[0] = v5;
    v29[1] = v1;
    uint64_t v37 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v16 = v8 + 16;
    uint64_t v18 = a1 + ((*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64));
    uint64_t v31 = *(void *)(v16 + 56);
    unint64_t v32 = v17;
    v29[2] = v11 + 32;
    uint64_t v30 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v33 = v16;
    do
    {
      uint64_t v19 = v35;
      v32(v10, v18, v35);
      Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
      id v21 = [(objc_class *)isa _strokeUUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      WeakRef.init(id:)();
      (*v30)(v10, v19);
      uint64_t v15 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v37;
      }
      unint64_t v23 = *(void *)(v15 + 16);
      unint64_t v22 = *(void *)(v15 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v15 = v37;
      }
      *(void *)(v15 + 16) = v23 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v23, v13, v34);
      v18 += v31;
      --v14;
    }
    while (v14);
    unint64_t v5 = (void *)v29[0];
  }
  uint64_t v24 = specialized Set.init<A>(_:)(v15);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v26 = specialized Sequence.first(where:)(v25, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v26)
  {
    uint64_t v27 = ReflowLayoutManager.textSize(for:)(v5, v26);
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for PKDrawing?);
  }
  else
  {
    if (one-time initialization token for handwritingReflowDefaultTextSize != -1) {
      swift_once();
    }
    return objc_msgSend(objc_allocWithZone(MEMORY[0x263F35CC8]), sel_initWithXHeight_ascenderHeight_descenderHeight_activeLines_, 6, *(double *)&static UIConstants.handwritingReflowDefaultTextSize, *(double *)&static UIConstants.handwritingReflowDefaultTextSize, *(double *)&static UIConstants.handwritingReflowDefaultTextSize);
  }
  return (id)v27;
}

uint64_t ReflowLayoutManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReflowLayoutManager()
{
  return self;
}

uint64_t type metadata accessor for ReflowLayoutManager.TextPosition()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ReflowLayoutManager.TextPosition.Affinity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C49F318);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReflowLayoutManager.TextPosition.Affinity()
{
  return &type metadata for ReflowLayoutManager.TextPosition.Affinity;
}

uint64_t destroy for ReflowSpacingAdjustment()
{
  return swift_release();
}

uint64_t initializeWithCopy for ReflowSpacingAdjustment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ReflowSpacingAdjustment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  return a1;
}

__n128 __swift_memcpy59_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 43) = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ReflowSpacingAdjustment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReflowSpacingAdjustment(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 59)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReflowSpacingAdjustment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 58) = 0;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 59) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 59) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReflowSpacingAdjustment()
{
  return &type metadata for ReflowSpacingAdjustment;
}

unint64_t lazy protocol witness table accessor for type ReflowLayoutManager.TextPosition.Affinity and conformance ReflowLayoutManager.TextPosition.Affinity()
{
  unint64_t result = lazy protocol witness table cache variable for type ReflowLayoutManager.TextPosition.Affinity and conformance ReflowLayoutManager.TextPosition.Affinity;
  if (!lazy protocol witness table cache variable for type ReflowLayoutManager.TextPosition.Affinity and conformance ReflowLayoutManager.TextPosition.Affinity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowLayoutManager.TextPosition.Affinity and conformance ReflowLayoutManager.TextPosition.Affinity);
  }
  return result;
}

BOOL specialized Array._hoistableIsNativeTypeChecked()(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

uint64_t specialized Array._getCount()(unint64_t a1)
{
  if (!(a1 >> 62)) {
    return *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  return result;
}

uint64_t specialized Set.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v37 - v9;
  MEMORY[0x270FA5388](v11);
  long long v49 = (char *)&v37 - v12;
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v48 = a2 + 56;
  uint64_t v15 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v39 = ~v15;
  if (-v15 < 64) {
    uint64_t v16 = ~(-1 << -(char)v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  int64_t v40 = (unint64_t)(63 - v15) >> 6;
  uint64_t v52 = v5 + 16;
  uint64_t v45 = v5 + 32;
  uint64_t v50 = a1 + 56;
  uint64_t v18 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  long long v51 = v10;
  uint64_t v43 = a2;
  uint64_t v38 = v5;
  int64_t v46 = 0;
  unint64_t v47 = v17;
  if (!v17) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v41 = (v17 - 1) & v17;
  int64_t v42 = v20;
  for (unint64_t i = __clz(__rbit64(v17)) | (v20 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    uint64_t v26 = *(void *)(v5 + 72);
    uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    long long v28 = v49;
    v27(v49, *(void *)(a2 + 48) + v26 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v28, v4);
    uint64_t v29 = *(void *)(a1 + 16);
    uint64_t v44 = (unint64_t)v18 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    if (!v29 {
      || (lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>), uint64_t v30 = dispatch thunk of Hashable._rawHashValue(seed:)(), v31 = -1 << *(unsigned char *)(a1 + 32), v32 = v30 & ~v31, ((*(void *)(v50 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0))
    }
    {
      (*v18)(v51, v4);
LABEL_30:
      uint64_t v13 = 0;
      goto LABEL_31;
    }
    uint64_t v33 = a1;
    uint64_t v34 = ~v31;
    while (1)
    {
      v27(v7, *(void *)(v33 + 48) + v32 * v26, v4);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v36 = *v18;
      (*v18)(v7, v4);
      if (v35) {
        break;
      }
      unint64_t v32 = (v32 + 1) & v34;
      if (((*(void *)(v50 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      {
        v36(v51, v4);
        goto LABEL_30;
      }
    }
    uint64_t v10 = v51;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v51, v4);
    unint64_t v17 = v41;
    int64_t v20 = v42;
    a2 = v43;
    a1 = v33;
    uint64_t v5 = v38;
    int64_t v46 = v42;
    unint64_t v47 = v41;
    if (v41) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v22 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v22 >= v40) {
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v48 + 8 * v22);
    int64_t v24 = v20 + 1;
    if (!v23)
    {
      int64_t v24 = v20 + 2;
      if (v20 + 2 >= v40) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v48 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v20 + 3;
        if (v20 + 3 >= v40) {
          goto LABEL_34;
        }
        unint64_t v23 = *(void *)(v48 + 8 * v24);
        if (!v23) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v41 = (v23 - 1) & v23;
    int64_t v42 = v24;
  }
  uint64_t v25 = v20 + 4;
  if (v20 + 4 >= v40)
  {
LABEL_34:
    uint64_t v13 = 1;
LABEL_31:
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v13;
  }
  unint64_t v23 = *(void *)(v48 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v20 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v40) {
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v48 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_21;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

unint64_t specialized closure #1 in BidirectionalCollection.last(where:)(unint64_t result, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0) {
    return MEMORY[0x21054E050]();
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.reserveCapacity(_:)(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void **)v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull(), *(void *)v1 = v4, (result & 1) == 0))
  {
    uint64_t v9 = v4;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x263F8EE78];
  }
  uint64_t v9 = *(void **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (void)v9 + 32) {
    goto LABEL_31;
  }
  uint64_t result = swift_release();
  while (1)
  {
    if (v7 >= v2) {
      goto LABEL_28;
    }
    uint64_t v9 = *(void **)v1;
LABEL_9:
    uint64_t v10 = *(void *)(v1 + 16);
    uint64_t v7 = v5 - v10;
    if (__OFSUB__(v5, v10))
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v11 = *(void *)(v1 + 8);
    if (v7 <= v2 ? v2 : v5 - v10) {
      break;
    }
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    if (v5 >= v10) {
      goto LABEL_17;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    unint64_t v19 = *(void *)(result + 24);
    uint64_t result = swift_release();
    unint64_t v20 = (v19 >> 1) - (void)v9;
    BOOL v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21) {
      goto LABEL_40;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size_0(v4);
  uint64_t v13 = result - 32;
  if (result < 32) {
    uint64_t v13 = result - 25;
  }
  void v4[2] = v7;
  v4[3] = (2 * (v13 >> 3)) | 1;
  if (v5 < v10) {
    goto LABEL_30;
  }
LABEL_17:
  if ((v7 & 0x8000000000000000) == 0)
  {
    unint64_t v14 = (unint64_t)(v4 + 4);
    unint64_t v15 = v11 + 8 * v10;
    if (v15 >= (unint64_t)&v4[v7 + 4] || v14 >= v15 + 8 * v7)
    {
      type metadata accessor for ReflowElement();
      swift_arrayInitWithCopy();
      if (!__OFSUB__(0, v10))
      {
        uint64_t v17 = v4[2];
        uint64_t v18 = v10 + v17;
        if (!__OFADD__(v10, v17))
        {
          if (v18 >= v10)
          {
            uint64_t result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(void *)(v1 + 8) = v14 - 8 * v10;
              *(void *)(v1 + 16) = v10;
              *(void *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(void *)uint64_t v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

size_t specialized ArraySlice.reserveCapacity(_:)(size_t result)
{
  int64_t v2 = result;
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void **)v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull(), *(void *)v1 = v4, (result & 1) == 0))
  {
    uint64_t v9 = v4;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  int64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x263F8EE78];
  }
  uint64_t v9 = *(void **)(result + 16);
  if (v8 + 168 * v6 + 168 * v7 == result + 168 * (void)v9 + 32) {
    goto LABEL_29;
  }
  uint64_t result = swift_release();
  while (1)
  {
    if (v7 >= v2) {
      goto LABEL_26;
    }
    uint64_t v9 = *(void **)v1;
LABEL_9:
    uint64_t v10 = *(void *)(v1 + 16);
    int64_t v7 = v5 - v10;
    if (__OFSUB__(v5, v10))
    {
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v11 = *(void *)(v1 + 8);
    if (!(v7 <= v2 ? v2 : v5 - v10)) {
      break;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
    uint64_t v4 = (void *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size_0(v4);
    void v4[2] = v7;
    v4[3] = 2 * ((uint64_t)(result - 32) / 168);
    if (v5 >= v10) {
      goto LABEL_15;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    unint64_t v18 = *(void *)(result + 24);
    uint64_t result = swift_release();
    unint64_t v19 = (v18 >> 1) - (void)v9;
    BOOL v20 = __OFADD__(v7, v19);
    v7 += v19;
    if (v20) {
      goto LABEL_38;
    }
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  if (v5 < v10) {
    goto LABEL_28;
  }
LABEL_15:
  if ((v7 & 0x8000000000000000) == 0)
  {
    unint64_t v13 = (unint64_t)(v4 + 4);
    unint64_t v14 = v11 + 168 * v10;
    if (v14 >= (unint64_t)&v4[21 * v7 + 4] || v13 >= v14 + 168 * v7)
    {
      swift_arrayInitWithCopy();
      if (!__OFSUB__(0, v10))
      {
        uint64_t v16 = v4[2];
        uint64_t v17 = v10 + v16;
        if (!__OFADD__(v10, v16))
        {
          if (v17 >= v10)
          {
            uint64_t result = swift_unknownObjectRelease();
            if ((v17 & 0x8000000000000000) == 0)
            {
              *(void *)(v1 + 8) = v13 - 168 * v10;
              *(void *)(v1 + 16) = v10;
              *(void *)(v1 + 24) = (2 * v17) | 1;
LABEL_26:
              *(void *)uint64_t v1 = v4;
              return result;
            }
            goto LABEL_36;
          }
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
LABEL_39:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.append<A>(contentsOf:)(uint64_t result)
{
  unint64_t v2 = result;
  if ((unint64_t)result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = v1[2];
  unint64_t v4 = v1[3];
  uint64_t v6 = (v4 >> 1) - v5;
  if (__OFSUB__(v4 >> 1, v5))
  {
    __break(1u);
    goto LABEL_38;
  }
  if ((v4 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v7 = v1[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  uint64_t v9 = *(void *)(v8 + 16);
  if (v7 + 8 * v5 + 8 * v6 != v8 + 8 * v9 + 32)
  {
    swift_release();
LABEL_9:
    uint64_t v10 = v6;
    goto LABEL_11;
  }
  unint64_t v11 = *(void *)(v8 + 24);
  uint64_t result = swift_release();
  uint64_t v12 = (v11 >> 1) - v9;
  BOOL v13 = __OFADD__(v6, v12);
  uint64_t v10 = v6 + v12;
  if (v13)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_11:
  uint64_t result = v6 + v3;
  if (__OFADD__(v6, v3))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v10 < result)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    uint64_t v14 = 2 * v10;
    if (v14 > result) {
      uint64_t result = v14;
    }
  }
  uint64_t result = specialized ArraySlice.reserveCapacity(_:)(result);
  uint64_t v16 = v1[2];
  unint64_t v15 = v1[3];
  uint64_t v17 = (v15 >> 1) - v16;
  if (__OFSUB__(v15 >> 1, v16)) {
    goto LABEL_39;
  }
  unint64_t v18 = v1[1] + 8 * v16 + 8 * v17;
  if ((v15 & 1) == 0)
  {
LABEL_22:
    uint64_t v21 = v17;
    goto LABEL_24;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  uint64_t v20 = *(void *)(v19 + 16);
  if (v18 != v19 + 8 * v20 + 32)
  {
    uint64_t result = swift_release();
    goto LABEL_22;
  }
  unint64_t v22 = *(void *)(v19 + 24);
  uint64_t result = swift_release();
  uint64_t v23 = (v22 >> 1) - v20;
  BOOL v13 = __OFADD__(v17, v23);
  uint64_t v21 = v17 + v23;
  if (v13)
  {
LABEL_45:
    __break(1u);
    return result;
  }
LABEL_24:
  uint64_t v24 = v21 - v17;
  if (__OFSUB__(v21, v17))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = specialized Array._copyContents(initializing:)(v18, v21 - v17, v2);
  if (v26 < v3)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  unint64_t v27 = result;
  unint64_t v28 = v25;
  uint64_t v29 = v26;
  if (v26 <= 0) {
    goto LABEL_29;
  }
  uint64_t result = v17 + v26;
  if (__OFADD__(v17, v26)) {
    goto LABEL_42;
  }
  specialized _SliceBuffer.count.setter(result);
LABEL_29:
  if (v29 == v24)
  {
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v27, v28);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = v4[2];
  uint64_t v6 = v4[3] >> 1;
  uint64_t v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 16);
  BOOL v11 = __OFSUB__(v10, a2);
  uint64_t v12 = v10 - a2;
  if (v11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v15 = v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v33 = v15 - v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  __dst = (char *)(v9 + 32);
  uint64_t v17 = v9 + 32 + 8 * a2;
  uint64_t v31 = (char *)(v17 + 8 * a3);
  uint64_t v18 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v7);
  unint64_t v32 = a4;
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v30 = v9;
    uint64_t v20 = v4[2];
    uint64_t v21 = (char *)(v4[1] + 8 * v20);
    type metadata accessor for ReflowElement();
    swift_arrayDestroy();
    if (a2 < 0) {
      goto LABEL_43;
    }
    unint64_t v22 = &v21[8 * a2];
    if (__dst != v21 || __dst >= v22) {
      memmove(__dst, v21, 8 * a2);
    }
    swift_arrayDestroy();
    v32(v17, a3);
    if (v14 < 0) {
      goto LABEL_43;
    }
    uint64_t v23 = &v22[8 * v33];
    if (v31 != v23 || v31 >= &v23[8 * v14]) {
      memmove(v31, v23, 8 * v14);
    }
    swift_arrayDestroy();
    *(void *)(v19 + 16) = 0;
    swift_release();
    uint64_t v9 = v30;
LABEL_23:
    swift_retain();
    uint64_t result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      uint64_t v28 = *(void *)(v9 + 16);
      BOOL v11 = __OFADD__(v20, v28);
      uint64_t v29 = v20 + v28;
      if (!v11)
      {
        if (v29 >= v20)
        {
          if ((v29 & 0x8000000000000000) == 0)
          {
            *unint64_t v4 = v9;
            v4[1] = &__dst[-8 * v20];
            void v4[2] = v20;
            v4[3] = (2 * v29) | 1;
            return result;
          }
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v20 = v4[2];
  BOOL v11 = __OFADD__(v20, a2);
  uint64_t v24 = v20 + a2;
  if (v11)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v24 < v20)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (__OFSUB__(v24, v20))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  type metadata accessor for ReflowElement();
  swift_arrayInitWithCopy();
  a4((uint64_t)&__dst[8 * (v24 - v20)], a3);
  uint64_t v25 = v24 + v33;
  if (__OFADD__(v24, v33))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v26 = v4[3] >> 1;
  if (v26 < v25)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!__OFSUB__(v26, v25))
  {
    swift_arrayInitWithCopy();
    goto LABEL_23;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *__dst;

  uint64_t v5 = v4[2];
  uint64_t v6 = v4[3] >> 1;
  uint64_t v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 16);
  BOOL v11 = __OFSUB__(v10, a2);
  uint64_t v12 = v10 - a2;
  if (v11)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v15 = v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v34 = v15 - v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  __dst = (char *)(v9 + 32);
  uint64_t v17 = v9 + 32 + 168 * a2;
  uint64_t v33 = (char *)(v17 + 168 * a3);
  uint64_t v18 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v7);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v31 = a4;
    unint64_t v32 = v9;
    uint64_t v20 = v4[2];
    uint64_t v21 = (char *)(v4[1] + 168 * v20);
    swift_arrayDestroy();
    if (a2 < 0) {
      goto LABEL_46;
    }
    unint64_t v22 = &v21[168 * a2];
    if (__dst != v21 || __dst >= v22) {
      memmove(__dst, v21, 168 * a2);
    }
    swift_arrayDestroy();
    v31(v17, a3);
    if (v14 < 0) {
      goto LABEL_46;
    }
    uint64_t v23 = &v22[168 * v34];
    if (v33 != v23 || v33 >= &v23[168 * v14]) {
      memmove(v33, v23, 168 * v14);
    }
    swift_arrayDestroy();
    *(void *)(v19 + 16) = 0;
    swift_release();
    uint64_t v9 = v32;
LABEL_26:
    swift_retain();
    uint64_t result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      uint64_t v29 = *(void *)(v9 + 16);
      BOOL v11 = __OFADD__(v20, v29);
      uint64_t v30 = v20 + v29;
      if (!v11)
      {
        if (v30 >= v20)
        {
          if ((v30 & 0x8000000000000000) == 0)
          {
            *unint64_t v4 = v9;
            v4[1] = &__dst[-168 * v20];
            void v4[2] = v20;
            v4[3] = (2 * v30) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v20 = v4[2];
  uint64_t v25 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v25 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v25, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  swift_arrayInitWithCopy();
  a4((uint64_t)&__dst[168 * a2], a3);
  uint64_t v26 = v25 + v34;
  if (__OFADD__(v25, v34))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  unint64_t v27 = v4[3] >> 1;
  if (v27 < v26)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!__OFSUB__(v27, v26))
  {
    swift_arrayInitWithCopy();
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _SliceBuffer.count.setter(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7) {
    return result;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x263F8EE78];
  }
  uint64_t v8 = *(void *)(result + 16);
  BOOL v5 = __OFADD__(v8, v7);
  uint64_t v9 = v8 + v7;
  if (v5) {
    goto LABEL_13;
  }
  *(void *)(result + 16) = v9;
  uint64_t result = swift_release();
  uint64_t v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(void *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v5 = v2[3];
  uint64_t v34 = v2[2];
  uint64_t v6 = (v5 >> 1) - v34;
  if (__OFSUB__(v5 >> 1, v34)) {
    goto LABEL_59;
  }
  unint64_t v3 = a2;
  uint64_t v4 = a1;
  if (a1 >> 62) {
LABEL_60:
  }
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  else {
    uint64_t result = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v36 = result;
  if (result != v3)
  {
    unint64_t v35 = v4 & 0xC000000000000001;
    if ((v4 & 0xC000000000000001) == 0)
    {
      if ((v3 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) > v3)
      {
        uint64_t v8 = *(void *)(v4 + 8 * v3 + 32);
        uint64_t result = swift_retain();
        goto LABEL_12;
      }
      __break(1u);
      goto LABEL_64;
    }
    uint64_t result = MEMORY[0x21054E050](v3, v4);
    uint64_t v8 = result;
LABEL_12:
    unint64_t v37 = v3 + 1;
    if (!__OFADD__(v3, 1))
    {
      uint64_t v32 = v4 & 0xFFFFFFFFFFFFFF8;
      uint64_t v29 = v4 + 32;
      uint64_t v30 = v2;
      while (1)
      {
        if (__OFADD__(v6, 1)) {
          goto LABEL_52;
        }
        uint64_t v38 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v6, v6 + 1, *v2, v2[1], v34, v5);
        uint64_t v9 = (void (*)(uint64_t, uint64_t))specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
        specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v38, v6, 0, v9);
        swift_release();
        swift_release();
        uint64_t v10 = v2[2];
        unint64_t v5 = v2[3];
        uint64_t v34 = v10;
        uint64_t v11 = (v5 >> 1) - v10;
        if (__OFSUB__(v5 >> 1, v10))
        {
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        uint64_t v31 = v6 + 1;
        unint64_t v33 = v5 >> 1;
        uint64_t v12 = v4;
        unint64_t v3 = *v2;
        uint64_t v13 = v2[1];
        if (v5)
        {
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_unknownObjectRetain();
          uint64_t v14 = swift_dynamicCastClass();
          uint64_t v15 = v34;
          if (!v14)
          {
            swift_unknownObjectRelease();
            uint64_t v14 = MEMORY[0x263F8EE78];
          }
          uint64_t v16 = *(void *)(v14 + 16);
          if (v13 + 8 * v34 + 8 * v11 != v14 + 8 * v16 + 32)
          {
            swift_release();
            uint64_t v4 = v11;
            if (v6 >= v11) {
              goto LABEL_40;
            }
            goto LABEL_25;
          }
          uint64_t v2 = *(uint64_t **)(v14 + 24);
          swift_release();
          uint64_t v17 = ((unint64_t)v2 >> 1) - v16;
          uint64_t v4 = v11 + v17;
          if (__OFADD__(v11, v17)) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v4 = (v5 >> 1) - v10;
        }
        uint64_t v15 = v34;
        if (v6 >= v4) {
          goto LABEL_40;
        }
LABEL_25:
        *(void *)(v13 + 8 * v15 + 8 * v6) = v8;
        uint64_t v18 = v36;
        unint64_t v19 = v37;
        if (v37 != v36)
        {
          uint64_t v20 = v15;
          uint64_t v21 = 0;
          uint64_t v2 = (uint64_t *)(~v6 + v4);
          uint64_t v22 = v13 + 8 * v6 + 8 * v20 + 8;
          while (1)
          {
            uint64_t v6 = (uint64_t)v21 + v19;
            if (v35)
            {
              uint64_t v8 = MEMORY[0x21054E050]((char *)v21 + v19, v12);
              uint64_t v18 = v6 + 1;
              if (__OFADD__(v6, 1)) {
                goto LABEL_49;
              }
            }
            else
            {
              if (v6 < 0) {
                goto LABEL_50;
              }
              if ((unint64_t)v6 >= *(void *)(v32 + 16)) {
                goto LABEL_51;
              }
              uint64_t v8 = *(void *)(v29 + 8 * v37 + 8 * (void)v21);
              swift_retain();
              uint64_t v18 = v6 + 1;
              if (__OFADD__(v6, 1))
              {
LABEL_49:
                __break(1u);
LABEL_50:
                __break(1u);
LABEL_51:
                __break(1u);
LABEL_52:
                __break(1u);
                goto LABEL_53;
              }
            }
            if (v2 == v21)
            {
              uint64_t v6 = v4;
              goto LABEL_39;
            }
            *(void *)(v22 + 8 * (void)v21) = v8;
            uint64_t v21 = (uint64_t *)((char *)v21 + 1);
            unint64_t v19 = v37;
            if (v18 == v36)
            {
              uint64_t v8 = 0;
              uint64_t v6 = (uint64_t)v21 + v31;
              unint64_t v37 = v36;
              goto LABEL_40;
            }
          }
        }
        uint64_t v8 = 0;
        ++v6;
LABEL_39:
        unint64_t v37 = v18;
LABEL_40:
        uint64_t v23 = v6 - v11;
        uint64_t v2 = v30;
        if (__OFSUB__(v6, v11)) {
          goto LABEL_54;
        }
        uint64_t v4 = v12;
        if (v23)
        {
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_unknownObjectRetain();
          uint64_t v24 = swift_dynamicCastClass();
          if (!v24)
          {
            swift_unknownObjectRelease();
            uint64_t v24 = MEMORY[0x263F8EE78];
          }
          uint64_t v25 = *(void *)(v24 + 16);
          BOOL v26 = __OFADD__(v25, v23);
          uint64_t v27 = v25 + v23;
          if (v26) {
            goto LABEL_55;
          }
          *(void *)(v24 + 16) = v27;
          swift_release();
          unint64_t v28 = v33 + v23;
          if (__OFADD__(v33, v23)) {
            goto LABEL_56;
          }
          if ((v28 & 0x8000000000000000) != 0) {
            goto LABEL_57;
          }
          unint64_t v5 = v5 & 1 | (2 * v28);
          v30[3] = v5;
        }
        if (!v8) {
          goto LABEL_5;
        }
      }
    }
LABEL_64:
    __break(1u);
    return result;
  }
LABEL_5:
  return swift_bridgeObjectRelease();
}

uint64_t specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_34;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = a4 + 8 * a5 + 8 * v8;
  if (v13 == v11 + 8 * v12 + 32)
  {
    unint64_t v15 = *(void *)(v11 + 24);
    uint64_t result = swift_release();
    uint64_t v16 = (v15 >> 1) - v12;
    uint64_t v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    uint64_t v14 = v8;
  }
  swift_unknownObjectRetain();
  uint64_t v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    if (v13 == v17 + 8 * v18 + 32)
    {
      unint64_t v20 = *(void *)(v17 + 24);
      uint64_t result = swift_release();
      uint64_t v21 = (v20 >> 1) - v18;
      BOOL v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
  uint64_t v19 = *(void *)(v17 + 16);
  if (v13 == v17 + 8 * v19 + 32)
  {
    unint64_t v23 = *(void *)(v17 + 24);
    uint64_t result = swift_release();
    uint64_t v24 = (v23 >> 1) - v19;
    BOOL v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22) {
      goto LABEL_21;
    }
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7) {
    uint64_t v25 = v7;
  }
  else {
    uint64_t v25 = v8;
  }
  if (v25 <= v6) {
    uint64_t v26 = v6;
  }
  else {
    uint64_t v26 = v25;
  }
  if (!v26) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v27 = (void *)swift_allocObject();
  int64_t v28 = _swift_stdlib_malloc_size_0(v27);
  uint64_t v29 = v28 - 32;
  if (v28 < 32) {
    uint64_t v29 = v28 - 25;
  }
  void v27[2] = v6;
  v27[3] = (2 * (v29 >> 3)) | 1;
  return (uint64_t)v27;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  size_t v28;

  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_32:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_32;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = a4 + 168 * a5 + 168 * v8;
  if (v13 == v11 + 168 * v12 + 32)
  {
    unint64_t v15 = *(void *)(v11 + 24);
    uint64_t result = swift_release();
    uint64_t v16 = (v15 >> 1) - v12;
    uint64_t v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
  else
  {
    swift_release();
    uint64_t v14 = v8;
  }
  swift_unknownObjectRetain();
  uint64_t v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    if (v13 == v17 + 168 * v18 + 32)
    {
      unint64_t v20 = *(void *)(v17 + 24);
      uint64_t result = swift_release();
      uint64_t v21 = (v20 >> 1) - v18;
      BOOL v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
  uint64_t v19 = *(void *)(v17 + 16);
  if (v13 == v17 + 168 * v19 + 32)
  {
    unint64_t v23 = *(void *)(v17 + 24);
    uint64_t result = swift_release();
    uint64_t v24 = (v23 >> 1) - v19;
    BOOL v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22) {
      goto LABEL_21;
    }
LABEL_37:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7) {
    uint64_t v25 = v7;
  }
  else {
    uint64_t v25 = v8;
  }
  if (v25 <= v6) {
    uint64_t v26 = v6;
  }
  else {
    uint64_t v26 = v25;
  }
  if (!v26) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
  uint64_t v27 = (void *)swift_allocObject();
  int64_t v28 = _swift_stdlib_malloc_size_0(v27);
  void v27[2] = v6;
  v27[3] = 2 * ((uint64_t)(v28 - 32) / 168);
  return (uint64_t)v27;
}

uint64_t (*specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(uint64_t a1)
{
  uint64_t isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!isUniquelyReferenced_nonNull) {
    return 0;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (v8 + 8 * v6 + 8 * v7 != v9 + 8 * v10 + 32)
  {
    swift_release();
LABEL_8:
    uint64_t v11 = v7;
    goto LABEL_10;
  }
  unint64_t v12 = *(void *)(v9 + 24);
  uint64_t result = swift_release();
  uint64_t v14 = (v12 >> 1) - v10;
  BOOL v15 = __OFADD__(v7, v14);
  uint64_t v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1) {
      return 0;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x263F8EE78];
    }
    uint64_t v16 = v8 + 8 * v6 - a1;
    uint64_t v17 = v16 - 32;
    uint64_t v18 = v16 - 25;
    if (v17 >= 0) {
      uint64_t v18 = v17;
    }
    uint64_t isUniquelyReferenced_nonNull = v7 + (v18 >> 3);
    if (!__OFADD__(v7, v18 >> 3))
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4) {
        return a1;
      }
LABEL_21:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

{
  void *v1;
  uint64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  uint64_t isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!isUniquelyReferenced_nonNull) {
    return 0;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (v8 + 168 * v6 + 168 * v7 != v9 + 168 * v10 + 32)
  {
    swift_release();
LABEL_8:
    uint64_t v11 = v7;
    goto LABEL_10;
  }
  unint64_t v12 = *(void *)(v9 + 24);
  uint64_t result = swift_release();
  uint64_t v14 = (v12 >> 1) - v10;
  BOOL v15 = __OFADD__(v7, v14);
  uint64_t v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1) {
      return 0;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x263F8EE78];
    }
    uint64_t v16 = (v8 + 168 * v6 - a1 - 32) / 168;
    uint64_t isUniquelyReferenced_nonNull = v7 + v16;
    if (!__OFADD__(v7, v16))
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4) {
        return a1;
      }
LABEL_19:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v44 = a2;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v3 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  int64_t v42 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v41);
  int64_t v40 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v6 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v38 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v37 = (char *)&v30 - v9;
  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_3:
      unint64_t v45 = a1 & 0xC000000000000001;
      uint64_t v34 = (void (**)(char *, uint64_t))(v6 + 8);
      unint64_t v35 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      unint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
      uint64_t v32 = (void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v11 = 4;
      unint64_t v36 = a1;
      uint64_t v31 = v10;
      uint64_t v12 = (uint64_t)v40;
      do
      {
        uint64_t v13 = v11 - 4;
        if (v45)
        {
          uint64_t v6 = MEMORY[0x21054E050](v11 - 4, a1);
          BOOL v14 = __OFADD__(v13, 1);
          uint64_t v3 = v11 - 3;
          if (v14) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(a1 + 8 * v11);
          swift_retain();
          BOOL v14 = __OFADD__(v13, 1);
          uint64_t v3 = v11 - 3;
          if (v14)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        type metadata accessor for ReflowWord();
        uint64_t v15 = swift_dynamicCastClass();
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v46 = v3;
          uint64_t v17 = *(void *)(v15 + 280) + OBJC_IVAR___PKDrawingCoherence_model;
          swift_beginAccess();
          uint64_t v18 = *v35;
          uint64_t v19 = v37;
          uint64_t v20 = v39;
          (*v35)(v37, v17, v39);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
          swift_retain();
          Capsule<>.root.getter();
          uint64_t v47 = v6;
          uint64_t v48 = *v34;
          v48(v19, v20);
          uint64_t v21 = *(void *)(v16 + 280) + OBJC_IVAR___PKDrawingCoherence_model;
          swift_beginAccess();
          BOOL v22 = v38;
          v18(v38, v21, v20);
          unint64_t v23 = v42;
          uint64_t v24 = v43;
          uint64_t v25 = (*v33)(v42, v12 + *(int *)(v41 + 20), v43);
          MEMORY[0x270FA5388](v25);
          *(&v30 - 2) = v44;
          *(&v30 - 1) = (uint64_t)v22;
          uint64_t v26 = v49;
          BOOL v27 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in PKDrawingStruct.containsStrokes<A>(_:in:), (uint64_t)(&v30 - 4));
          uint64_t v49 = v26;
          (*v32)(v23, v24);
          uint64_t v28 = v47;
          swift_release();
          v48(v22, v20);
          outlined destroy of PKDrawingStruct(v12);
          if (v27)
          {
            swift_bridgeObjectRelease();
            return v28;
          }
          a1 = v36;
          uint64_t v10 = v31;
          uint64_t v3 = v46;
        }
        swift_release();
        ++v11;
      }
      while (v3 != v10);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (**v42)(char *, char *, uint64_t);
  unsigned int (**v43)(char *, uint64_t, uint64_t);
  void (**v44)(char *, uint64_t, uint64_t, uint64_t);
  char *v45;
  void (**v46)(char *, uint64_t);
  void (**v47)(char *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  unint64_t v45 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v48 = (char *)&v31 - v12;
  if (!(a1 >> 62))
  {
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  if (!v13) {
    goto LABEL_19;
  }
LABEL_3:
  BOOL v14 = 0;
  uint64_t v15 = a1 & 0xC000000000000001;
  uint64_t v47 = (void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  uint64_t v43 = (unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  uint64_t v44 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
  int64_t v42 = (void (**)(char *, char *, uint64_t))(v38 + 32);
  uint64_t v46 = (void (**)(char *, uint64_t))(v38 + 8);
  uint64_t v31 = (v38 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  uint64_t v32 = a1 + 32;
  unint64_t v33 = a2;
  uint64_t v34 = a1;
  unint64_t v35 = v3;
  unint64_t v36 = a1 & 0xC000000000000001;
  unint64_t v37 = v13;
  while (1)
  {
    if (v15)
    {
      uint64_t v16 = MEMORY[0x21054E050](v14, a1);
      uint64_t v17 = __OFADD__(v14, 1);
      uint64_t v18 = v14 + 1;
      if (v17) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v32 + 8 * v14);
      swift_retain();
      uint64_t v17 = __OFADD__(v14, 1);
      uint64_t v18 = v14 + 1;
      if (v17)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    uint64_t v39 = v18;
    int64_t v40 = v16;
    swift_getKeyPath();
    uint64_t v49 = v40;
    lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (void (*)(uint64_t))type metadata accessor for GraphableExpressionState);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v40 + 24) == 1) {
      break;
    }
    swift_release();
LABEL_18:
    uint64_t v15 = v36;
    BOOL v14 = v39;
    if (v39 == v37) {
      goto LABEL_19;
    }
  }
  uint64_t v19 = v40;
  swift_getKeyPath();
  uint64_t v49 = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v20 = v19 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  swift_beginAccess();
  uint64_t v21 = *v47;
  (*v47)(v48, v20, v9);
  BOOL v22 = a2;
  unint64_t v23 = *(void *)(a2 + 16);
  if (v23)
  {
    uint64_t v24 = v38;
    uint64_t v25 = v22 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    swift_bridgeObjectRetain();
    uint64_t v41 = *(void *)(v24 + 72);
    while (1)
    {
      v21(v8, v25, v9);
      uint64_t v26 = *v44;
      (*v44)(v8, 0, 1, v9);
      if ((*v43)(v8, 1, v9) == 1) {
        break;
      }
      BOOL v27 = v45;
      (*v42)(v45, v8, v9);
      lazy protocol witness table accessor for type GraphableExpressionsState and conformance GraphableExpressionsState((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v29 = *v46;
      (*v46)(v27, v9);
      if (v28)
      {
        a2 = v33;
        swift_bridgeObjectRelease();
        v29(v48, v9);
        swift_release();
        a1 = v34;
        uint64_t v3 = v35;
        goto LABEL_18;
      }
      v25 += v41;
      if (!--v23) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    uint64_t v26 = *v44;
    swift_bridgeObjectRetain();
LABEL_21:
    v26(v8, 1, 1, v9);
  }
  swift_bridgeObjectRelease();
  (*v46)(v48, v9);
  swift_bridgeObjectRelease();
  return v40;
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0)
  {
LABEL_2:
    return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  uint64_t v10 = *(void *)(v9 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v10 != (a4 >> 1) - a3)
  {
LABEL_13:
    swift_unknownObjectRelease();
    goto LABEL_2;
  }
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v55 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  CGRect v61 = (char *)v38 - v12;
  uint64_t v13 = type metadata accessor for PKStroke();
  MEMORY[0x270FA5388](v13);
  uint64_t v41 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18.n128_f64[0] = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)v38 - v16;
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v62 = MEMORY[0x263F8EE78];
  uint64_t v51 = *(void *)(a1 + 16);
  if (v51)
  {
    v38[1] = v2;
    uint64_t v21 = 0;
    unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
    uint64_t v22 = v17 + 16;
    uint64_t v46 = v23;
    unint64_t v39 = (*(unsigned __int8 *)(v22 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 64);
    uint64_t v45 = a1 + v39;
    uint64_t v52 = *(void *)(v22 + 56);
    uint64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v57 = v9 + 16;
    Swift::Int v54 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v42 = v9;
    unint64_t v59 = v9 + 56;
    int64_t v60 = (void (**)(char *, uint64_t))(v9 + 8);
    int64_t v40 = (void (**)(char *, char *, uint64_t))(v22 + 16);
    uint64_t v43 = (void (**)(char *, uint64_t))(v22 - 8);
    uint64_t v49 = v13;
    uint64_t v50 = a2;
    uint64_t v47 = (char *)v38 - v16;
    uint64_t v48 = v22;
    do
    {
      uint64_t v53 = v21;
      v46(v19, v45 + v52 * v21, v13, v18);
      Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
      id v26 = [(objc_class *)isa _strokeUUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = *(void *)(a2 + 16);
      uint64_t v28 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v59;
      if (v27)
      {
        unint64_t v44 = v59 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        uint64_t v29 = a2 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
        uint64_t v58 = *(void *)(v42 + 72);
        uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          v30(v7, v29, v8);
          uint64_t v24 = *v28;
          (*v28)(v7, 0, 1, v8);
          if ((*v56)(v7, 1, v8) == 1) {
            break;
          }
          uint64_t v31 = v55;
          (*v54)(v55, v7, v8);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
          char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v33 = *v60;
          (*v60)(v31, v8);
          if (v32)
          {
            a2 = v50;
            swift_bridgeObjectRelease();
            v33(v61, v8);
            uint64_t v34 = *v40;
            uint64_t v19 = v47;
            uint64_t v13 = v49;
            (*v40)(v41, v47, v49);
            uint64_t v35 = v62;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1);
              uint64_t v35 = v62;
            }
            unint64_t v37 = *(void *)(v35 + 16);
            unint64_t v36 = *(void *)(v35 + 24);
            if (v37 >= v36 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
              uint64_t v35 = v62;
            }
            *(void *)(v35 + 16) = v37 + 1;
            v34((char *)(v35 + v39 + v37 * v52), v41, v13);
            uint64_t v62 = v35;
            goto LABEL_6;
          }
          uint64_t v28 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v59;
          v29 += v58;
          if (!--v27) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v59;
        swift_bridgeObjectRetain();
LABEL_4:
        v24(v7, 1, 1, v8);
      }
      a2 = v50;
      swift_bridgeObjectRelease();
      (*v60)(v61, v8);
      uint64_t v19 = v47;
      uint64_t v13 = v49;
      (*v43)(v47, v49);
LABEL_6:
      uint64_t v21 = v53 + 1;
    }
    while (v53 + 1 != v51);
    return v62;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo27CHReflowableTextResultTokenCG_8PaperKit10ReflowWordCs5NeverOTg503_s8h5Kit19j39LayoutManagerC7process5lines2inSayAA0C8e54LineVG8contents_Say06PencilB08PKStrokeVG09strokesToC0tr54So012CHReflowableiJ0CG_AA18PKDrawingCoherenceCtFZAA0C4k8CSo0pI11fG6CXEfU_AI18PKDrawingCoherenceCSay0xI00Z0VGAI0jeU0V12CoreGraphics7CGFloatVAYTf1cn_nTf4ngnnnn_n(unint64_t a1, void *a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v9) {
      break;
    }
    uint64_t v20 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v9 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v11 = 0;
    while (v9 != v11)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x21054E050](v11, a1);
      }
      else {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
      }
      uint64_t v13 = v12;
      id v18 = v12;
      closure #1 in static ReflowLayoutManager.process(lines:in:)(&v18, a2, a3, a4, a5, a6, &v19);

      if (v6) {
        return swift_release();
      }
      ++v11;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v9 == v11) {
        return v20;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized ReflowLayoutManager.init(contents:frame:addSpaces:)(unint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7 = v6;
  unint64_t v10 = a1;
  unint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = MEMORY[0x263F8EE78];
  *(void *)(v6 + 88) = v11;
  long long v12 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *(_OWORD *)(v6 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *MEMORY[0x263F001A0];
  *(void *)(v6 + 96) = v11;
  *(void *)(v6 + 104) = v11;
  *(void *)(v6 + 112) = 100;
  *(_OWORD *)(v6 + 136) = v12;
  *(void *)(v6 + 152) = v11;
  *(_OWORD *)(v6 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 203) = 0u;
  *(unsigned char *)(v6 + 219) = 1;
  *(void *)(v6 + 224) = 0;
  *(double *)(v6 + 48) = a3;
  *(double *)(v6 + 56) = a4;
  *(double *)(v6 + 64) = a5;
  *(double *)(v6 + 72) = a6;
  *(double *)(v6 + 16) = a3;
  *(double *)(v6 + 24) = a4;
  *(double *)(v6 + 32) = a5;
  *(double *)(v6 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = a6;
  unint64_t v56 = a1 >> 62;
  if (a2)
  {
    unint64_t v59 = v11;
    if (a1 >> 62) {
      goto LABEL_37;
    }
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v13)
    {
      do
      {
        if (v13 < 1) {
          goto LABEL_84;
        }
        uint64_t v55 = v7;
        unint64_t v11 = 0;
        unint64_t v57 = v10 & 0xC000000000000001;
        while (1)
        {
          if (v57)
          {
            uint64_t v7 = MEMORY[0x21054E050](v11, v10);
          }
          else
          {
            uint64_t v7 = *(void *)(v10 + 8 * v11 + 32);
            swift_retain();
          }
          uint64_t v15 = one-time initialization token for handwritingReflowMinimumSpaceWidth;
          swift_retain();
          if (v15 != -1) {
            swift_once();
          }
          uint64_t v16 = static UIConstants.handwritingReflowMinimumSpaceWidth;
          type metadata accessor for ReflowSpace();
          uint64_t v17 = swift_allocObject();
          *(void *)(v17 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 1;
          *(unsigned char *)(v17 + 152) = 0;
          double v19 = UnknownCanvasElementView.flags.modify(v17, v18);
          *(_OWORD *)(v17 + 48) = 0u;
          *(_OWORD *)(v17 + 64) = 0u;
          *(_OWORD *)(v17 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
          *(void *)(v17 + 96) = 0;
          *(double *)(v17 + 104) = v19;
          *(void *)(v17 + 112) = v20;
          *(void *)(v17 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = -1;
          *(void *)(v17 + 128) = 0;
          *(unsigned char *)(v17 + 136) = 0;
          *(void *)(v17 + 144) = 0;
          *(void *)(v17 + 16) = 0;
          *(void *)(v17 + 24) = 0;
          *(void *)(v17 + 32) = v16;
          *(void *)(v17 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0x4000000000000000;
          swift_release();
          if (v59 >> 62) {
            break;
          }
          uint64_t v21 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v22 = v21 + 2;
          if (__OFADD__(v21, 2)) {
            goto LABEL_36;
          }
LABEL_13:
          unint64_t v23 = v10;
          uint64_t v24 = v13;
          uint64_t v25 = 0;
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
            || (v59 & 0x8000000000000000) != 0
            || (v59 & 0x4000000000000000) != 0)
          {
            goto LABEL_18;
          }
          if (v22 > *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          {
            uint64_t v25 = 1;
LABEL_18:
            if (v59 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v26 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            if (v26 <= v22) {
              uint64_t v27 = v22;
            }
            else {
              uint64_t v27 = v26;
            }
            unint64_t v59 = MEMORY[0x21054E060](v25, v27, 1, v59);
          }
          specialized Array._endMutation()();
          uint64_t v28 = swift_retain();
          MEMORY[0x21054D330](v28);
          if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v29 = swift_retain();
          MEMORY[0x21054D330](v29);
          if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          ++v11;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
          swift_release();
          uint64_t v13 = v24;
          BOOL v30 = v24 == v11;
          unint64_t v10 = v23;
          if (v30)
          {
            swift_bridgeObjectRelease();
            unint64_t v32 = v59;
            uint64_t v7 = v55;
            unint64_t v11 = MEMORY[0x263F8EE78];
            goto LABEL_39;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v22 = v31 + 2;
        if (!__OFADD__(v31, 2)) {
          goto LABEL_13;
        }
LABEL_36:
        __break(1u);
LABEL_37:
        swift_bridgeObjectRetain();
        uint64_t result = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v13 = result;
      }
      while (result);
    }
    swift_bridgeObjectRelease();
    unint64_t v32 = MEMORY[0x263F8EE78];
LABEL_39:
    swift_beginAccess();
    *(void *)(v6 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v32;
  }
  else
  {
    swift_beginAccess();
    *(void *)(v6 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v10;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  unint64_t v58 = v11;
  if (v56)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v33 = result;
    if (!result) {
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v33 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v33) {
      goto LABEL_59;
    }
  }
  if (v33 < 1)
  {
    __break(1u);
    goto LABEL_82;
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v33; ++i)
    {
      MEMORY[0x21054E050](i, v10);
      type metadata accessor for ReflowWord();
      if (swift_dynamicCastClass())
      {
        MEMORY[0x21054D330]();
        if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    type metadata accessor for ReflowWord();
    for (uint64_t j = 0; j != v33; ++j)
    {
      if (swift_dynamicCastClass())
      {
        uint64_t v36 = swift_retain();
        MEMORY[0x21054D330](v36);
        if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
LABEL_59:
  swift_bridgeObjectRelease();
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v37 = result;
    if (result)
    {
LABEL_61:
      if (v37 >= 1)
      {
        unint64_t v38 = v11;
        uint64_t v39 = 0;
        double v40 = 0.0;
        do
        {
          if ((v58 & 0xC000000000000001) != 0)
          {
            uint64_t v41 = MEMORY[0x21054E050](v39, v58);
          }
          else
          {
            uint64_t v41 = *(void *)(v58 + 8 * v39 + 32);
            swift_retain();
          }
          double v42 = (*(double *)(v41 + 256) + *(double *)(v41 + 272)) * 0.5
              - (*(double *)(v41 + 224) + *(double *)(v41 + 240)) * 0.5;
          objc_msgSend(*(id *)(v41 + 280), sel__canvasBounds);
          double Height = CGRectGetHeight(v60);
          swift_release();
          if (v40 <= v42 * Height) {
            double v40 = v42 * Height;
          }
          ++v39;
        }
        while (v37 != v39);
        swift_bridgeObjectRelease_n();
        double v44 = v40 * 1.2;
        unint64_t v11 = v38;
        goto LABEL_72;
      }
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
  }
  else
  {
    uint64_t v37 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v37) {
      goto LABEL_61;
    }
  }
  swift_bridgeObjectRelease_n();
  double v44 = 0.0;
LABEL_72:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_20C832C20;
  double v47 = UnknownCanvasElementView.flags.modify(v45, v46);
  *(void *)(v45 + 32) = v11;
  *(_OWORD *)(v45 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
  *(_OWORD *)(v45 + 56) = 0u;
  *(_OWORD *)(v45 + 72) = 0u;
  *(double *)(v45 + 88) = v47;
  *(void *)(v45 + 96) = v48;
  *(void *)(v45 + 104) = 0;
  *(void *)(v45 + 112) = 0;
  *(double *)(v45 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v47;
  *(void *)(v45 + 128) = v48;
  *(void *)(v45 + 136) = 0;
  *(void *)(v45 + 144) = 0;
  *(double *)(v45 + 152) = v47;
  *(void *)(v45 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v48;
  *(void *)(v45 + 168) = 0;
  *(void *)(v45 + 176) = 0;
  *(double *)(v45 + 184) = v44;
  *(void *)(v45 + 192) = 0;
  swift_beginAccess();
  *(void *)(v7 + 88) = v45;
  swift_bridgeObjectRelease();
  *(void *)(v7 + 104) = v11;
  uint64_t result = swift_bridgeObjectRelease();
  if (!v33) {
    return v7;
  }
  if (v33 >= 1)
  {
    if ((v10 & 0xC000000000000001) != 0)
    {
      uint64_t v49 = 0;
      do
      {
        uint64_t v50 = MEMORY[0x21054E050](v49++, v10);
        double v51 = *(double *)(v50 + 24) - a4;
        *(double *)(v50 + 16) = *(double *)(v50 + 16) - a3;
        *(double *)(v50 + 24) = v51;
        swift_unknownObjectRelease();
      }
      while (v33 != v49);
    }
    else
    {
      uint64_t v52 = (uint64_t *)(v10 + 32);
      do
      {
        uint64_t v53 = *v52++;
        double v54 = *(double *)(v53 + 24) - a4;
        *(double *)(v53 + 16) = *(double *)(v53 + 16) - a3;
        *(double *)(v53 + 24) = v54;
        --v33;
      }
      while (v33);
    }
    return v7;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
  return result;
}

uint64_t specialized ReflowLayoutManager.closestLine(to:lines:)(uint64_t a1, double a2, double a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v48 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v7 = v48;
  uint64_t v8 = a1 + 32;
  for (int64_t i = v3 - 1; ; --i)
  {
    long long v10 = *(_OWORD *)(v8 + 144);
    long long v45 = *(_OWORD *)(v8 + 128);
    long long v46 = v10;
    uint64_t v47 = *(void *)(v8 + 160);
    long long v11 = *(_OWORD *)(v8 + 80);
    long long v41 = *(_OWORD *)(v8 + 64);
    long long v42 = v11;
    long long v12 = *(_OWORD *)(v8 + 112);
    long long v43 = *(_OWORD *)(v8 + 96);
    long long v44 = v12;
    long long v13 = *(_OWORD *)(v8 + 16);
    v38[0] = *(_OWORD *)v8;
    v38[1] = v13;
    long long v14 = *(_OWORD *)(v8 + 48);
    long long v39 = *(_OWORD *)(v8 + 32);
    long long v40 = v14;
    double v16 = *((double *)&v45 + 1);
    double v15 = *(double *)&v46;
    double v17 = *((double *)&v39 + 1);
    long long v19 = v14;
    double v18 = *(double *)&v41;
    outlined retain of ReflowTextLine((uint64_t)v38);
    outlined release of ReflowTextLine((uint64_t)v38);
    uint64_t v48 = v7;
    unint64_t v21 = *(void *)(v7 + 16);
    unint64_t v20 = *(void *)(v7 + 24);
    if (v21 >= v20 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      uint64_t v7 = v48;
    }
    double v22 = (v16 + v15) * 0.5;
    double v23 = sqrt((*((double *)&v19 + 1) - v17) * (*((double *)&v19 + 1) - v17)+ (v18 - *(double *)&v19) * (v18 - *(double *)&v19));
    double v24 = v22 * ((v18 - *(double *)&v19) / v23);
    double v25 = v22 * (-(*((double *)&v19 + 1) - v17) / v23);
    double v26 = v17 + v24;
    double v27 = *(double *)&v19 + v25;
    double v28 = *((double *)&v19 + 1) + v24 - (v17 + v24);
    double v29 = v18 + v25 - (*(double *)&v19 + v25);
    double v30 = ((a2 - v26) * v28 + (a3 - v27) * v29) / (v28 * v28 + v29 * v29);
    *(void *)(v7 + 16) = v21 + 1;
    *(double *)(v7 + 8 * v21 + 32) = sqrt((v26 + v28 * v30 - a2) * (v26 + v28 * v30 - a2)+ (v27 + v29 * v30 - a3) * (v27 + v29 * v30 - a3))- v22;
    if (!i) {
      break;
    }
    v8 += 168;
  }
  if (v21)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    double v33 = *(double *)(v7 + 32);
    uint64_t v34 = v7 + 40;
    do
    {
      double v35 = *(double *)(v34 + 8 * v31);
      if (v35 < v33) {
        uint64_t v32 = v31 + 1;
      }
      uint64_t v36 = v31 + 1;
      if (v35 < v33) {
        double v33 = *(double *)(v34 + 8 * v31);
      }
      ++v31;
    }
    while (v21 != v36);
  }
  else
  {
    uint64_t v32 = 0;
  }
  swift_release();
  return v32;
}

uint64_t outlined retain of ReflowTextLine(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ReflowTextLine(uint64_t a1)
{
  return a1;
}

char *specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = *v3;
  uint64_t v8 = v7 + 32 + 8 * a1;
  type metadata accessor for ReflowElement();
  uint64_t result = (char *)swift_arrayDestroy();
  BOOL v10 = __OFSUB__(a3, v4);
  uint64_t v11 = a3 - v4;
  if (v10)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v11) {
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  BOOL v10 = __OFSUB__(v12, a2);
  uint64_t v13 = v12 - a2;
  if (v10) {
    goto LABEL_18;
  }
  if (v13 < 0)
  {
LABEL_21:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = (char *)(v8 + 8 * a3);
  long long v14 = (char *)(v7 + 32 + 8 * a2);
  if (result != v14 || result >= &v14[8 * v13]) {
    uint64_t result = (char *)memmove(result, v14, 8 * v13);
  }
  uint64_t v16 = *(void *)(v7 + 16);
  BOOL v10 = __OFADD__(v16, v11);
  uint64_t v17 = v16 + v11;
  if (v10) {
    goto LABEL_19;
  }
  *(void *)(v7 + 16) = v17;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = *v3;
  uint64_t v8 = v7 + 32 + 168 * a1;
  uint64_t result = (char *)swift_arrayDestroy();
  BOOL v10 = __OFSUB__(a3, v4);
  uint64_t v11 = a3 - v4;
  if (v10)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v11) {
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  BOOL v10 = __OFSUB__(v12, a2);
  uint64_t v13 = v12 - a2;
  if (v10) {
    goto LABEL_15;
  }
  if (v13 < 0)
  {
LABEL_18:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = (char *)(v8 + 168 * a3);
  long long v14 = (char *)(v7 + 32 + 168 * a2);
  if (result != v14 || result >= &v14[168 * v13]) {
    uint64_t result = (char *)memmove(result, v14, 168 * v13);
  }
  double v15 = *(void *)(v7 + 16);
  BOOL v10 = __OFADD__(v15, v11);
  uint64_t v16 = v15 + v11;
  if (v10) {
    goto LABEL_16;
  }
  *(void *)(v7 + 16) = v16;
LABEL_11:
  if (a3 > 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

void *specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(void *result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24) >> 1;
  uint64_t v4 = v3 - v2;
  if (__OFSUB__(v3, v2)) {
    goto LABEL_56;
  }
  uint64_t v5 = result[4];
  uint64_t v6 = result[3] >> 1;
  if (v5 == v6) {
    return result;
  }
  uint64_t v39 = result[2];
  if (v5 < v39 || v5 >= v6) {
    goto LABEL_57;
  }
  uint64_t v8 = v5 + 1;
  uint64_t v33 = result[1];
  uint64_t v9 = *(void *)(v33 + 8 * v5);
  uint64_t result = (void *)swift_retain();
  uint64_t v32 = v6 - 1;
  uint64_t v34 = v6;
  while (1)
  {
    uint64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    uint64_t v40 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v4, v4 + 1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
    uint64_t v11 = (void (*)(uint64_t, uint64_t))specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
    specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v40, v4, 0, v11);
    swift_release();
    uint64_t result = (void *)swift_release();
    uint64_t v13 = *(void *)(v1 + 16);
    unint64_t v12 = *(void *)(v1 + 24);
    unint64_t v36 = v12 >> 1;
    uint64_t v14 = (v12 >> 1) - v13;
    if (__OFSUB__(v12 >> 1, v13)) {
      goto LABEL_50;
    }
    uint64_t v37 = v9;
    uint64_t v15 = *(void *)(v1 + 8);
    if (v12)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      uint64_t v16 = swift_dynamicCastClass();
      if (!v16)
      {
        swift_unknownObjectRelease();
        uint64_t v16 = MEMORY[0x263F8EE78];
      }
      uint64_t v17 = *(void *)(v16 + 16);
      if (v15 + 8 * v13 + 8 * v14 == v16 + 8 * v17 + 32)
      {
        char v21 = v12;
        unint64_t v22 = *(void *)(v16 + 24);
        uint64_t result = (void *)swift_release();
        uint64_t v23 = (v22 >> 1) - v17;
        uint64_t v18 = v14 + v23;
        if (__OFADD__(v14, v23)) {
          goto LABEL_55;
        }
        LOBYTE(v12) = v21;
        if (v4 >= v18)
        {
LABEL_25:
          uint64_t v9 = v37;
          BOOL v19 = __OFSUB__(v4, v14);
          uint64_t v20 = v4 - v14;
          if (v19) {
            goto LABEL_51;
          }
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t result = (void *)swift_release();
        uint64_t v18 = (v12 >> 1) - v13;
        if (v4 >= v14) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      uint64_t v18 = (v12 >> 1) - v13;
      if (v4 >= v14) {
        goto LABEL_25;
      }
    }
    *(void *)(v15 + 8 * v13 + 8 * v4) = v37;
    if (v8 == v34)
    {
      uint64_t v9 = 0;
      ++v4;
      uint64_t v8 = v34;
      BOOL v19 = __OFSUB__(v10, v14);
      uint64_t v20 = v10 - v14;
      if (v19) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v38 = v18;
      uint64_t v35 = v4;
      if (v8 < v39 || v8 >= v34)
      {
LABEL_48:
        __break(1u);
        break;
      }
      uint64_t v24 = 0;
      uint64_t v25 = v15 + 8 * v4 + 8 * v13 + 8;
      uint64_t v26 = v33 + 8 * v8;
      uint64_t v27 = v8 + 1;
      while (1)
      {
        if (~v35 + v38 == v24)
        {
          uint64_t v4 = v38;
          v8 += v24 + 1;
          uint64_t v9 = *(void *)(v26 + 8 * v24);
          goto LABEL_38;
        }
        *(void *)(v25 + 8 * v24) = *(void *)(v26 + 8 * v24);
        if (v32 - v8 == v24) {
          break;
        }
        uint64_t v28 = v27 + v24;
        uint64_t result = (void *)swift_retain();
        if (v27 + v24 >= v39)
        {
          ++v24;
          if (v28 < v34) {
            continue;
          }
        }
        goto LABEL_48;
      }
      uint64_t v9 = 0;
      uint64_t v4 = v35 + v24 + 2;
      uint64_t v8 = v34;
LABEL_38:
      uint64_t result = (void *)swift_retain();
      BOOL v19 = __OFSUB__(v4, v14);
      uint64_t v20 = v4 - v14;
      if (v19) {
        goto LABEL_51;
      }
    }
LABEL_39:
    if (v20)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      uint64_t result = (void *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        uint64_t result = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v29 = result[2];
      BOOL v19 = __OFADD__(v29, v20);
      uint64_t v30 = v29 + v20;
      if (v19) {
        goto LABEL_52;
      }
      result[2] = v30;
      uint64_t result = (void *)swift_release();
      uint64_t v31 = v36 + v20;
      if (__OFADD__(v36, v20)) {
        goto LABEL_53;
      }
      if (v31 < 0) {
        goto LABEL_54;
      }
      *(void *)(v1 + 24) = v12 & 1 | (2 * v31);
    }
    if (!v9) {
      return result;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

void *specialized ArraySlice.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v8 = v4[2];
  unint64_t v7 = v4[3];
  uint64_t v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    uint64_t v15 = v9;
    goto LABEL_10;
  }
  uint64_t v12 = v4[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    uint64_t v13 = MEMORY[0x263F8EE78];
  }
  uint64_t v14 = *(void *)(v13 + 16);
  if (v12 + 8 * v8 + 8 * v9 != v13 + 8 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  unint64_t v16 = *(void *)(v13 + 24);
  swift_release();
  uint64_t v17 = (v16 >> 1) - v14;
  BOOL v18 = __OFADD__(v9, v17);
  uint64_t v15 = v9 + v17;
  if (v18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  uint64_t v19 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v15 < v19)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    uint64_t v20 = 2 * v15;
    if (v20 > v19) {
      uint64_t v19 = v20;
    }
  }
  uint64_t result = (void *)specialized ArraySlice.reserveCapacity(_:)(v19);
  uint64_t v23 = v4[2];
  unint64_t v22 = v4[3];
  uint64_t v24 = (v22 >> 1) - v23;
  if (__OFSUB__(v22 >> 1, v23)) {
    goto LABEL_40;
  }
  unint64_t v25 = v4[1] + 8 * v23 + 8 * v24;
  if ((v22 & 1) == 0)
  {
LABEL_21:
    uint64_t v28 = v24;
    goto LABEL_23;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v26 = swift_dynamicCastClass();
  if (!v26)
  {
    swift_unknownObjectRelease();
    uint64_t v26 = MEMORY[0x263F8EE78];
  }
  uint64_t v27 = *(void *)(v26 + 16);
  if (v25 != v26 + 8 * v27 + 32)
  {
    uint64_t result = (void *)swift_release();
    goto LABEL_21;
  }
  unint64_t v29 = *(void *)(v26 + 24);
  uint64_t result = (void *)swift_release();
  uint64_t v30 = (v29 >> 1) - v27;
  BOOL v18 = __OFADD__(v24, v30);
  uint64_t v28 = v24 + v30;
  if (v18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  uint64_t v31 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      uint64_t v6 = 0;
      unint64_t v5 = a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v31 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0) {
    goto LABEL_48;
  }
  unint64_t v32 = a2 + 8 * a3;
  if (v32 < v25 + 8 * v6 && v25 < v32 + 8 * v6) {
    goto LABEL_48;
  }
  type metadata accessor for ReflowElement();
  uint64_t result = (void *)swift_arrayInitWithCopy();
  if (v6)
  {
    if (__OFADD__(v24, v6))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t result = (void *)specialized _SliceBuffer.count.setter(v24 + v6);
  }
LABEL_34:
  if (v6 == v31)
  {
    v35[0] = a1;
    v35[1] = a2;
    v35[2] = a3;
    v35[3] = a4;
    v35[4] = v5;
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v35);
  }
  return result;
}

uint64_t specialized static ReflowLayoutManager.process(lines:in:)(unint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  uint64_t v142 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_105;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
LABEL_3:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v113 = v2 & 0xC000000000000001;
    uint64_t v106 = v2 + 32;
    uint64_t v107 = v2 & 0xFFFFFFFFFFFFFF8;
    CGFloat v111 = *(double *)(MEMORY[0x263F000D0] + 8);
    CGFloat v112 = *MEMORY[0x263F000D0];
    CGFloat v110 = *(double *)(MEMORY[0x263F000D0] + 16);
    CGFloat v120 = *(double *)(MEMORY[0x263F000D0] + 24);
    CGFloat v121 = *(double *)(MEMORY[0x263F000D0] + 40);
    CGFloat v122 = *(double *)(MEMORY[0x263F000D0] + 32);
    uint64_t v6 = &selRef_strokeUUID;
    unint64_t v7 = (void *)MEMORY[0x263F8EE78];
    uint64_t v108 = v3;
    uint64_t v109 = v2;
    while (1)
    {
      if (v113)
      {
        id v8 = (id)MEMORY[0x21054E050](v4, v2);
      }
      else
      {
        if (v4 >= *(void *)(v107 + 16)) {
          goto LABEL_101;
        }
        id v8 = *(id *)(v106 + 8 * v4);
      }
      uint64_t v9 = v8;
      BOOL v10 = __OFADD__(v4, 1);
      unint64_t v11 = v4 + 1;
      if (v10) {
        goto LABEL_95;
      }
      double v139 = 0.0;
      double v140 = 0.0;
      objc_msgSend(v8, sel_principalLines);
      tCGFloat x = v130.tx;
      tCGFloat y = v130.ty;
      long long v14 = v131;
      objc_msgSend(v9, sel_bounds);
      v143.CGFloat x = denormalizePrincipalLine(tx, ty, *(double *)&v14, *((double *)&v14 + 1), v15, v16, v17);
      CGFloat v126 = v19;
      CGFloat v128 = v18;
      v130.double a = v112;
      v130.double b = v111;
      v130.double c = v110;
      v130.double d = v120;
      v130.tCGFloat x = v122;
      v130.tCGFloat y = v121;
      *(CGPoint *)uint64_t v20 = CGPointApplyAffineTransform(v143, &v130);
      v130.double a = v112;
      v130.double b = v111;
      v130.double c = v110;
      v130.double d = v120;
      v130.tCGFloat x = v122;
      v130.tCGFloat y = v121;
      v144.CGFloat y = v126;
      v144.CGFloat x = v128;
      *(CGPoint *)&v20[16] = CGPointApplyAffineTransform(v144, &v130);
      v141[5] = *(double *)v20;
      v141[6] = *(double *)&v20[8];
      v141[7] = *(double *)&v20[16];
      v141[8] = *(double *)&v20[24];
      objc_msgSend(v9, sel_principalLines);
      long long v21 = v134;
      long long v22 = v135;
      objc_msgSend(v9, sel_bounds);
      v145.CGFloat x = denormalizePrincipalLine(*(double *)&v21, *((double *)&v21 + 1), *(double *)&v22, *((double *)&v22 + 1), v23, v24, v25);
      CGFloat v27 = v26;
      CGFloat v29 = v28;
      v130.double a = v112;
      v130.double b = v111;
      v130.double c = v110;
      v130.double d = v120;
      v130.tCGFloat x = v122;
      v130.tCGFloat y = v121;
      *(CGPoint *)long long v41 = CGPointApplyAffineTransform(v145, &v130);
      v130.double a = v112;
      v130.double b = v111;
      v130.double c = v110;
      v130.double d = v120;
      v130.tCGFloat x = v122;
      v130.tCGFloat y = v121;
      v146.CGFloat x = v27;
      v146.CGFloat y = v29;
      *(CGPoint *)&v41[16] = CGPointApplyAffineTransform(v146, &v130);
      objc_msgSend(v9, sel_principalLines);
      double a = v130.a;
      double b = v130.b;
      double c = v130.c;
      double d = v130.d;
      objc_msgSend(v9, sel_bounds);
      v147.CGFloat x = denormalizePrincipalLine(a, b, c, d, v34, v35, v36);
      CGFloat v38 = v37;
      CGFloat v40 = v39;
      v130.double a = v112;
      v130.double b = v111;
      v130.double c = v110;
      v130.double d = v120;
      v130.tCGFloat x = v122;
      v130.tCGFloat y = v121;
      *(CGPoint *)&v41[32] = CGPointApplyAffineTransform(v147, &v130);
      v130.double a = v112;
      v130.double b = v111;
      v130.double c = v110;
      v130.double d = v120;
      v130.tCGFloat x = v122;
      v130.tCGFloat y = v121;
      v148.CGFloat x = v38;
      v148.CGFloat y = v40;
      *(CGPoint *)&v41[48] = CGPointApplyAffineTransform(v148, &v130);
      [v9 v6[72]];
      if (*(double *)&v41[40] - *(double *)&v41[8] <= v42) {
        [v9 v6[72]];
      }
      else {
        double v43 = (*(double *)&v41[40] - *(double *)&v41[8]) * 1.2;
      }
      double v119 = v43;
      id v44 = objc_msgSend(v9, sel_tokens, v106);
      type metadata accessor for CHReflowableTextResultToken();
      unint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v46 = a2;
      unint64_t v47 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo27CHReflowableTextResultTokenCG_8PaperKit10ReflowWordCs5NeverOTg503_s8h5Kit19j39LayoutManagerC7process5lines2inSayAA0C8e54LineVG8contents_Say06PencilB08PKStrokeVG09strokesToC0tr54So012CHReflowableiJ0CG_AA18PKDrawingCoherenceCtFZAA0C4k8CSo0pI11fG6CXEfU_AI18PKDrawingCoherenceCSay0xI00Z0VGAI0jeU0V12CoreGraphics7CGFloatVAYTf1cn_nTf4ngnnnn_n(v45, v46, (uint64_t)&v142, v141, &v140, &v139);
      swift_bridgeObjectRelease();

      double v48 = v139;
      double v49 = v140;
      if (v139 > v140)
      {
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        if (!v3) {
          break;
        }
        goto LABEL_3;
      }
      double v117 = v9;
      unint64_t v50 = v47 >> 62;
      if (objc_msgSend(v9, sel_hasEndingLineBreak))
      {
        if (v50)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
          if (!v51)
          {
LABEL_23:
            swift_bridgeObjectRelease();
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v51 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v51) {
            goto LABEL_23;
          }
        }
        unint64_t v52 = v51 - 1;
        if (__OFSUB__(v51, 1)) {
          goto LABEL_102;
        }
        if ((v47 & 0xC000000000000001) != 0)
        {
          uint64_t v53 = MEMORY[0x21054E050](v52, v47);
        }
        else
        {
          if ((v52 & 0x8000000000000000) != 0) {
            goto LABEL_103;
          }
          if (v52 >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_104;
          }
          uint64_t v53 = *(void *)(v47 + 8 * v52 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        *(unsigned char *)(v53 + 136) = 1;
        swift_release();
      }
LABEL_24:
      double v118 = v7;
      if (v50)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if (v54 < 1)
        {
          __break(1u);
LABEL_109:
          __break(1u);
          return result;
        }
        swift_bridgeObjectRetain();
        uint64_t v104 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if (v104 < 1) {
          goto LABEL_109;
        }
        swift_bridgeObjectRetain();
        uint64_t v105 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v105 < v54) {
          goto LABEL_98;
        }
      }
      else
      {
        uint64_t v54 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v54) {
          goto LABEL_97;
        }
        swift_bridgeObjectRetain();
      }
      unint64_t v129 = v47 & 0xC000000000000001;
      if ((v47 & 0xC000000000000001) != 0 && v54 != 1)
      {
        type metadata accessor for ReflowWord();
        Swift::Int v55 = 1;
        do
        {
          Swift::Int v56 = v55 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v55);
          Swift::Int v55 = v56;
        }
        while (v54 != v56);
      }
      unint64_t v116 = v11;
      uint64_t v115 = v5;
      if (!v50)
      {
        uint64_t v57 = (v47 & 0xFFFFFFFFFFFFFF8) + 32;
        unint64_t v58 = (2 * v54) | 1;
        *(void *)&v130.double a = MEMORY[0x263F8EE78];
        uint64_t v2 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain();
        uint64_t v127 = 1;
        if (!v2) {
          goto LABEL_40;
        }
LABEL_35:
        if (v129)
        {
          uint64_t v2 = MEMORY[0x21054E050](0, v47);
        }
        else
        {
          if (!*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_100;
          }
          uint64_t v2 = *(void *)(v47 + 32);
          swift_retain();
        }
        int64_t v62 = v58 >> 1;
        unint64_t v125 = (v58 >> 1) - v127;
        if (v58 >> 1 == v127)
        {
LABEL_39:
          swift_release();
          goto LABEL_40;
        }
        if (v50)
        {
          swift_bridgeObjectRetain();
          uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v79 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v80 = 0;
        uint64_t v123 = v79 - 1;
        uint64_t v124 = v57 + 8 * v127;
        while (2)
        {
          if (v127 + v80 >= v62)
          {
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
            goto LABEL_96;
          }
          uint64_t v81 = *(void *)(v124 + 8 * v80);
          CGFloat v82 = *(double *)(v2 + 16);
          CGFloat v83 = *(double *)(v2 + 24);
          CGFloat v85 = *(double *)(v2 + 32);
          CGFloat v84 = *(double *)(v2 + 40);
          swift_retain();
          swift_retain();
          v149.origin.CGFloat x = v82;
          v149.origin.CGFloat y = v83;
          v149.size.CGFloat width = v85;
          v149.size.CGFloat height = v84;
          double MaxX = CGRectGetMaxX(v149);
          double MinX = CGRectGetMinX(*(CGRect *)(v81 + 16));
          type metadata accessor for ReflowSpace();
          uint64_t v88 = swift_allocObject();
          *(void *)(v88 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 1;
          *(unsigned char *)(v88 + 152) = 0;
          double v90 = UnknownCanvasElementView.flags.modify(v88, v89);
          *(_OWORD *)(v88 + 48) = 0u;
          *(_OWORD *)(v88 + 64) = 0u;
          *(_OWORD *)(v88 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
          *(void *)(v88 + 96) = 0;
          *(double *)(v88 + 104) = v90;
          *(void *)(v88 + 112) = v91;
          *(void *)(v88 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = -1;
          *(void *)(v88 + 128) = 0;
          *(unsigned char *)(v88 + 136) = 0;
          *(void *)(v88 + 144) = 0;
          *(double *)(v88 + 16) = MaxX;
          *(void *)(v88 + 24) = 0;
          *(double *)(v88 + 32) = MinX - MaxX;
          *(void *)(v88 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0x4000000000000000;
          swift_release();
          swift_release();
          CGFloat v92 = v130.a;
          uint64_t v93 = *(void *)&v130.a >> 62;
          if (*(void *)&v130.a >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v102 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            uint64_t v95 = v102 + 2;
            if (__OFADD__(v102, 2)) {
              goto LABEL_92;
            }
          }
          else
          {
            uint64_t v94 = *(void *)((*(void *)&v130.a & 0xFFFFFFFFFFFFFF8) + 0x10);
            uint64_t v95 = v94 + 2;
            if (__OFADD__(v94, 2)) {
              goto LABEL_92;
            }
          }
          uint64_t v96 = 0;
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
            || (*(void *)&v92 & 0x8000000000000000) != 0
            || (*(void *)&v92 & 0x4000000000000000) != 0)
          {
LABEL_61:
            if (v93)
            {
              swift_bridgeObjectRetain();
              uint64_t v97 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v97 = *(void *)((*(void *)&v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            if (v97 <= v95) {
              uint64_t v98 = v95;
            }
            else {
              uint64_t v98 = v97;
            }
            *(void *)&v130.double a = MEMORY[0x21054E060](v96, v98, 1, *(void *)&v92);
          }
          else if (v95 > *(void *)((*(void *)&v92 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          {
            uint64_t v96 = 1;
            goto LABEL_61;
          }
          specialized Array._endMutation()();
          uint64_t v99 = swift_retain();
          MEMORY[0x21054D330](v99);
          if (*(void *)((*(void *)&v130.a & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v130.a & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v100 = swift_retain();
          MEMORY[0x21054D330](v100);
          if (*(void *)((*(void *)&v130.a & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v130.a & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
          swift_release();
          if (v123 == v80) {
            goto LABEL_40;
          }
          unint64_t v101 = v80 + 1;
          if (v129)
          {
            uint64_t v2 = MEMORY[0x21054E050](v80 + 1, v47);
            if (__OFADD__(v101, 1)) {
              goto LABEL_93;
            }
          }
          else
          {
            if (v101 >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_94;
            }
            uint64_t v2 = *(void *)(v47 + 8 * v80 + 40);
            swift_retain();
            if (__OFADD__(v101, 1)) {
              goto LABEL_93;
            }
          }
          if (v125 == ++v80) {
            goto LABEL_39;
          }
          continue;
        }
      }
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      uint64_t v57 = v59;
      uint64_t v127 = v60;
      unint64_t v58 = v61;
      swift_bridgeObjectRelease_n();
      *(void *)&v130.double a = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v2) {
        goto LABEL_35;
      }
LABEL_40:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      CGFloat v63 = v130.a;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v64 = v54 - 1;
      if (v129)
      {
        swift_bridgeObjectRetain();
        MEMORY[0x21054E050](v54 - 1, v47);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = xmmword_20C835790;
        uint64_t v67 = MEMORY[0x21054E050](v54 - 1, v47);
        uint64_t v65 = v108;
        uint64_t v2 = v109;
        unint64_t v4 = v116;
        uint64_t v6 = &selRef_strokeUUID;
        unint64_t v7 = v118;
      }
      else
      {
        uint64_t v65 = v108;
        uint64_t v2 = v109;
        unint64_t v4 = v116;
        uint64_t v6 = &selRef_strokeUUID;
        unint64_t v7 = v118;
        if (v64 >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_99;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = xmmword_20C835790;
        uint64_t v67 = *(void *)(v47 + 8 * v64 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      *(void *)(v66 + 32) = v67;
      *(void *)&v130.double a = v66;
      specialized Array._endMutation()();
      specialized Array.append<A>(contentsOf:)(*(unint64_t *)&v130.a);
      v130.double a = v63;
      memset(&v130.b, 0, 32);
      v130.tCGFloat y = *(CGFloat *)v20;
      long long v131 = *(_OWORD *)&v20[8];
      *(void *)&long long v132 = *(void *)&v20[24];
      *((void *)&v132 + 1) = *(void *)v41;
      long long v133 = *(_OWORD *)&v41[8];
      long long v134 = *(_OWORD *)&v41[24];
      long long v135 = *(_OWORD *)&v41[40];
      *(void *)&long long v136 = *(void *)&v41[56];
      *((double *)&v136 + 1) = v48;
      *(double *)&long long v137 = v49;
      *((double *)&v137 + 1) = v119;
      uint64_t v138 = 0;
      outlined retain of ReflowTextLine((uint64_t)&v130);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      }
      uint64_t v5 = v115;
      unint64_t v69 = v7[2];
      unint64_t v68 = v7[3];
      if (v69 >= v68 >> 1) {
        unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v7);
      }
      v7[2] = v69 + 1;
      uint64_t v70 = &v7[21 * v69];
      long long v71 = *(_OWORD *)&v130.a;
      long long v72 = *(_OWORD *)&v130.tx;
      *((_OWORD *)v70 + 3) = *(_OWORD *)&v130.c;
      *((_OWORD *)v70 + 4) = v72;
      *((_OWORD *)v70 + 2) = v71;
      long long v73 = v131;
      long long v74 = v132;
      long long v75 = v134;
      *((_OWORD *)v70 + 7) = v133;
      *((_OWORD *)v70 + 8) = v75;
      *((_OWORD *)v70 + 5) = v73;
      *((_OWORD *)v70 + 6) = v74;
      long long v76 = v135;
      long long v77 = v136;
      long long v78 = v137;
      v70[24] = v138;
      *((_OWORD *)v70 + 1CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v77;
      *((_OWORD *)v70 + 11) = v78;
      *((_OWORD *)v70 + 9) = v76;

      outlined release of ReflowTextLine((uint64_t)&v130);
      if (v4 == v65)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v7;
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(uint64_t result, unint64_t a2)
{
  unint64_t v3 = v2[3];
  uint64_t v65 = v2[2];
  uint64_t v4 = (v3 >> 1) - v65;
  if (__OFSUB__(v3 >> 1, v65))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  unint64_t v5 = a2;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(result + 16);
  if (v7 == a2)
  {
    _s8PaperKit14ReflowTextLineVSgWOi0_((uint64_t)v82);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v82, (uint64_t)&v92, &demangling cache variable for type metadata for ReflowTextLine?);
  }
  else
  {
    if (v7 <= a2)
    {
LABEL_53:
      __break(1u);
      return result;
    }
    uint64_t v8 = result + 168 * a2;
    long long v9 = *(_OWORD *)(v8 + 144);
    long long v10 = *(_OWORD *)(v8 + 176);
    long long v89 = *(_OWORD *)(v8 + 160);
    long long v90 = v10;
    long long v11 = *(_OWORD *)(v8 + 80);
    long long v12 = *(_OWORD *)(v8 + 112);
    long long v85 = *(_OWORD *)(v8 + 96);
    long long v86 = v12;
    long long v13 = *(_OWORD *)(v8 + 112);
    long long v14 = *(_OWORD *)(v8 + 144);
    long long v87 = *(_OWORD *)(v8 + 128);
    long long v88 = v14;
    long long v15 = *(_OWORD *)(v8 + 48);
    v82[0] = *(_OWORD *)(v8 + 32);
    v82[1] = v15;
    long long v16 = *(_OWORD *)(v8 + 80);
    long long v18 = *(_OWORD *)(v8 + 32);
    long long v17 = *(_OWORD *)(v8 + 48);
    long long v83 = *(_OWORD *)(v8 + 64);
    long long v84 = v16;
    long long v19 = *(_OWORD *)(v8 + 176);
    long long v100 = v89;
    long long v101 = v19;
    long long v96 = v85;
    long long v97 = v13;
    long long v99 = v9;
    long long v98 = v87;
    long long v92 = v18;
    long long v93 = v17;
    uint64_t v91 = *(void *)(v8 + 192);
    uint64_t v102 = *(void *)(v8 + 192);
    unint64_t v5 = a2 + 1;
    long long v95 = v11;
    long long v94 = v83;
    UnknownCanvasElementView.flags.modify(&v92, a2);
    outlined retain of ReflowTextLine((uint64_t)v82);
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v92, (uint64_t)v81, &demangling cache variable for type metadata for ReflowTextLine?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v81, (uint64_t)v82, &demangling cache variable for type metadata for ReflowTextLine?);
  uint64_t result = _s8PaperKit14ReflowTextLineVSgWOg((uint64_t *)v82);
  if (result != 1)
  {
    int64_t v62 = v2;
    while (!__OFADD__(v4, 1))
    {
      uint64_t v80 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v4, v4 + 1, *v2, v2[1], v65, v3);
      uint64_t v20 = (void (*)(uint64_t, uint64_t))specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
      specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v80, v4, 0, v20);
      swift_release();
      uint64_t result = swift_release();
      uint64_t v21 = v2[2];
      unint64_t v22 = v2[3];
      uint64_t v65 = v21;
      uint64_t v23 = (v22 >> 1) - v21;
      if (__OFSUB__(v22 >> 1, v21)) {
        goto LABEL_45;
      }
      uint64_t v24 = v2[1];
      uint64_t v64 = v2[3];
      unint64_t v63 = v22 >> 1;
      if (v22)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        uint64_t v25 = swift_dynamicCastClass();
        if (!v25)
        {
          swift_unknownObjectRelease();
          uint64_t v25 = MEMORY[0x263F8EE78];
        }
        uint64_t v26 = *(void *)(v25 + 16);
        if (v24 + 168 * v65 + 168 * v23 == v25 + 168 * v26 + 32)
        {
          unint64_t v28 = *(void *)(v25 + 24);
          uint64_t result = swift_release();
          uint64_t v29 = (v28 >> 1) - v26;
          uint64_t v27 = v23 + v29;
          if (__OFADD__(v23, v29)) {
            goto LABEL_51;
          }
        }
        else
        {
          swift_release();
          uint64_t v27 = v23;
        }
      }
      else
      {
        uint64_t v27 = (v22 >> 1) - v21;
      }
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v92, (uint64_t)v78, &demangling cache variable for type metadata for ReflowTextLine?);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for ReflowTextLine?);
      uint64_t result = _s8PaperKit14ReflowTextLineVSgWOg(v79);
      if (result != 1 && v4 < v27)
      {
        if (v5 <= v7) {
          unint64_t v30 = v7;
        }
        else {
          unint64_t v30 = v5;
        }
        unint64_t v61 = v30;
        uint64_t v31 = v24 + 168 * v65;
        do
        {
          uint64_t v32 = v31;
          uint64_t v33 = v31 + 168 * v4;
          uint64_t v34 = v4 + 1;
          while (1)
          {
            uint64_t v4 = v34;
            uint64_t result = outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v78, (uint64_t)v76, &demangling cache variable for type metadata for ReflowTextLine?);
            long long v37 = v76[1];
            long long v36 = v76[2];
            *(_OWORD *)uint64_t v33 = v76[0];
            *(_OWORD *)(v33 + 16) = v37;
            *(_OWORD *)(v33 + 32) = v36;
            long long v38 = v76[6];
            long long v40 = v76[3];
            long long v39 = v76[4];
            *(_OWORD *)(v33 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v76[5];
            *(_OWORD *)(v33 + 96) = v38;
            *(_OWORD *)(v33 + 48) = v40;
            *(_OWORD *)(v33 + 64) = v39;
            long long v42 = v76[8];
            long long v41 = v76[9];
            long long v43 = v76[7];
            *(void *)(v33 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v77;
            *(_OWORD *)(v33 + 128) = v42;
            *(_OWORD *)(v33 + 144) = v41;
            *(_OWORD *)(v33 + 112) = v43;
            if (v5 != v7) {
              break;
            }
            _s8PaperKit14ReflowTextLineVSgWOi0_((uint64_t)v66);
            outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v66, (uint64_t)&v92, &demangling cache variable for type metadata for ReflowTextLine?);
            outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v92, (uint64_t)v78, &demangling cache variable for type metadata for ReflowTextLine?);
            outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for ReflowTextLine?);
            uint64_t result = _s8PaperKit14ReflowTextLineVSgWOg(v79);
            if (result != 1)
            {
              v33 += 168;
              uint64_t v34 = v4 + 1;
              if (v4 < v27) {
                continue;
              }
            }
            unint64_t v5 = v7;
            goto LABEL_35;
          }
          if (v5 == v61) {
            goto LABEL_50;
          }
          uint64_t v44 = v6 + 32 + 168 * v5;
          long long v45 = *(_OWORD *)(v44 + 112);
          long long v46 = *(_OWORD *)(v44 + 144);
          long long v73 = *(_OWORD *)(v44 + 128);
          long long v74 = v46;
          long long v47 = *(_OWORD *)(v44 + 48);
          long long v48 = *(_OWORD *)(v44 + 80);
          long long v69 = *(_OWORD *)(v44 + 64);
          long long v70 = v48;
          long long v49 = *(_OWORD *)(v44 + 80);
          long long v50 = *(_OWORD *)(v44 + 112);
          long long v71 = *(_OWORD *)(v44 + 96);
          long long v72 = v50;
          long long v51 = *(_OWORD *)(v44 + 16);
          v66[0] = *(_OWORD *)v44;
          v66[1] = v51;
          long long v52 = *(_OWORD *)(v44 + 48);
          long long v54 = *(_OWORD *)v44;
          long long v53 = *(_OWORD *)(v44 + 16);
          long long v67 = *(_OWORD *)(v44 + 32);
          long long v68 = v52;
          long long v55 = *(_OWORD *)(v44 + 144);
          long long v100 = v73;
          long long v101 = v55;
          long long v96 = v69;
          long long v97 = v49;
          long long v99 = v45;
          long long v98 = v71;
          long long v92 = v54;
          long long v93 = v53;
          uint64_t v75 = *(void *)(v44 + 160);
          uint64_t v102 = *(void *)(v44 + 160);
          ++v5;
          long long v95 = v47;
          long long v94 = v67;
          UnknownCanvasElementView.flags.modify(&v92, v35);
          outlined retain of ReflowTextLine((uint64_t)v66);
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v92, (uint64_t)v78, &demangling cache variable for type metadata for ReflowTextLine?);
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v78, (uint64_t)v79, &demangling cache variable for type metadata for ReflowTextLine?);
          uint64_t result = _s8PaperKit14ReflowTextLineVSgWOg(v79);
          if (result == 1) {
            break;
          }
          uint64_t v31 = v32;
        }
        while (v4 < v27);
      }
LABEL_35:
      BOOL v56 = __OFSUB__(v4, v23);
      uint64_t v57 = v4 - v23;
      if (v56) {
        goto LABEL_46;
      }
      uint64_t v2 = v62;
      if (v57)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        uint64_t result = swift_dynamicCastClass();
        if (!result)
        {
          swift_unknownObjectRelease();
          uint64_t result = MEMORY[0x263F8EE78];
        }
        uint64_t v58 = *(void *)(result + 16);
        BOOL v56 = __OFADD__(v58, v57);
        uint64_t v59 = v58 + v57;
        if (v56) {
          goto LABEL_47;
        }
        *(void *)(result + 16) = v59;
        uint64_t result = swift_release();
        unint64_t v60 = v63 + v57;
        if (__OFADD__(v63, v57)) {
          goto LABEL_48;
        }
        if ((v60 & 0x8000000000000000) != 0) {
          goto LABEL_49;
        }
        uint64_t v64 = v64 & 1 | (2 * v60);
        v62[3] = v64;
      }
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v92, (uint64_t)v81, &demangling cache variable for type metadata for ReflowTextLine?);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v81, (uint64_t)v82, &demangling cache variable for type metadata for ReflowTextLine?);
      uint64_t result = _s8PaperKit14ReflowTextLineVSgWOg((uint64_t *)v82);
      unint64_t v3 = v64;
      if (result == 1) {
        return result;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  return result;
}

uint64_t specialized ArraySlice.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  int64_t v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_39;
  }
  int64_t v6 = *(void *)(a1 + 16);
  if ((v2 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v7 = v1[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  uint64_t v9 = *(void *)(v8 + 16);
  if (v7 + 168 * v3 + 168 * v4 != v8 + 168 * v9 + 32)
  {
    swift_release();
LABEL_7:
    int64_t v10 = v4;
    goto LABEL_9;
  }
  unint64_t v11 = *(void *)(v8 + 24);
  swift_release();
  uint64_t v12 = (v11 >> 1) - v9;
  BOOL v13 = __OFADD__(v4, v12);
  int64_t v10 = v4 + v12;
  if (v13)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_9:
  int64_t v14 = v4 + v6;
  if (__OFADD__(v4, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v10 < v14)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    uint64_t v15 = 2 * v10;
    if (v15 > v14) {
      int64_t v14 = v15;
    }
  }
  uint64_t result = specialized ArraySlice.reserveCapacity(_:)(v14);
  uint64_t v18 = v1[2];
  unint64_t v17 = v1[3];
  uint64_t v19 = (v17 >> 1) - v18;
  if (__OFSUB__(v17 >> 1, v18)) {
    goto LABEL_40;
  }
  unint64_t v20 = v1[1] + 168 * v18 + 168 * v19;
  if ((v17 & 1) == 0)
  {
LABEL_20:
    uint64_t v23 = v19;
    goto LABEL_22;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    uint64_t v21 = MEMORY[0x263F8EE78];
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (v20 != v21 + 168 * v22 + 32)
  {
    uint64_t result = swift_release();
    goto LABEL_20;
  }
  unint64_t v24 = *(void *)(v21 + 24);
  uint64_t result = swift_release();
  uint64_t v25 = (v24 >> 1) - v22;
  BOOL v13 = __OFADD__(v19, v25);
  uint64_t v23 = v19 + v25;
  if (v13)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_22:
  int64_t v26 = v23 - v19;
  if (__OFSUB__(v23, v19))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (!v6) {
    goto LABEL_33;
  }
  if (v26 < v6) {
    goto LABEL_42;
  }
  if (a1 + 32 < v20 + 168 * v6 && v20 < a1 + 32 + 168 * v6) {
    goto LABEL_47;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (v6 > 0)
  {
    if (!__OFADD__(v19, v6))
    {
      uint64_t result = specialized _SliceBuffer.count.setter(v19 + v6);
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_33:
  if (v6 == v26)
  {
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(a1, v6);
  }
  return result;
}

uint64_t outlined release of (ReflowTextLine, ReflowTextLine)(uint64_t a1)
{
  return a1;
}

double _s8PaperKit14ReflowTextLineV_ACtSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t outlined retain of (ReflowTextLine, ReflowTextLine)(uint64_t a1)
{
  return a1;
}

uint64_t _s8PaperKit14ReflowTextLineVSgWOg(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double _s8PaperKit14ReflowTextLineVSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 16CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double denormalizePrincipalLine(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (a7 == 0.0) {
    a7 = 1.0;
  }
  return a5 + a1 * a7;
}

unint64_t type metadata accessor for CHReflowableTextResultToken()
{
  unint64_t result = lazy cache variable for type metadata for CHReflowableTextResultToken;
  if (!lazy cache variable for type metadata for CHReflowableTextResultToken)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CHReflowableTextResultToken);
  }
  return result;
}

uint64_t sub_20C4A4AC0()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ReflowWord.generateImage()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ReflowWord.generateImage()(a1, v4, v5, v6);
}

BOOL partial apply for specialized closure #1 in PKDrawingStruct.containsStrokes<A>(_:in:)()
{
  return specialized Ref<>.containsStrokes<A>(_:in:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined retain of [ReflowElement](uint64_t a1)
{
  return a1;
}

uint64_t outlined release of [ReflowElement](uint64_t a1)
{
  return a1;
}

uint64_t *partial apply for specialized closure #1 in BidirectionalCollection.last(where:)@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(v2 + 16);
  uint64_t v4 = *result;
  uint64_t v5 = v3[3] >> 1;
  if (*result >= v3[2])
  {
    BOOL v7 = __OFSUB__(v4, v5);
    BOOL v6 = v4 - v5 < 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v6 = 0;
  }
  if (v6 != v7)
  {
    *a2 = *(void *)(v3[1] + 8 * v4);
    return (uint64_t *)swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined retain of ReflowSpacingAdjustment?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ReflowSpacingAdjustment?(uint64_t a1)
{
  return a1;
}

unint64_t partial apply for specialized closure #1 in BidirectionalCollection.last(where:)@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized closure #1 in BidirectionalCollection.last(where:)(*a1, **(void **)(v2 + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in Ref<>.containsStrokes<A>(_:in:)()
{
  return partial apply for specialized closure #1 in PKDrawingStruct.containsStrokes<A>(_:in:)() & 1;
}

uint64_t type metadata completion function for CanvasViewRulerHostingDelegate()
{
  return swift_initClassMetadata2();
}

void CanvasViewRulerHostingDelegate.canvas.getter()
{
}

void __swiftcall CanvasViewRulerHostingDelegate.rulerHostingView()(UIView_optional *__return_ptr retstr)
{
  if (!MEMORY[0x210550400](v1 + direct field offset for CanvasViewRulerHostingDelegate.canvas)) {
    __break(1u);
  }
}

id @objc CanvasViewRulerHostingDelegate.rulerHostingView()@<X0>(UIView_optional *a1@<X8>)
{
  CanvasViewRulerHostingDelegate.rulerHostingView()(a1);
  return v1;
}

void @objc CanvasViewRulerHostingDelegate.init()()
{
}

id CanvasViewRulerHostingDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasViewRulerHostingDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc CanvasViewRulerHostingDelegate.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasViewRulerHostingDelegate()
{
  return __swift_instantiateGenericMetadata();
}

id specialized CanvasViewRulerHostingDelegate.init(canvas:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasViewRulerHostingDelegate();
  return objc_msgSendSuper2(&v2, sel_init);
}

id specialized CanvasViewRulerHostingDelegate.__allocating_init(canvas:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for CanvasViewRulerHostingDelegate());
  return specialized CanvasViewRulerHostingDelegate.init(canvas:)();
}

void specialized CanvasViewRulerHostingDelegate.init()()
{
}

char *SignatureCreationViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_panelSize] = xmmword_20C83CBB0;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_downArrowImagePadding] = 0x4020000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButtonBottomPadding] = 0x402C000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButtonImagePadding] = 0x4020000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineInset] = 0x4040000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLinePadding] = 0x4028000000000000;
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureMarkPadding] = 0x4020000000000000;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineColor;
  id v6 = objc_allocWithZone(MEMORY[0x263F825C8]);
  BOOL v7 = v3;
  *(void *)&v3[v5] = objc_msgSend(v6, sel_initWithWhite_alpha_, 0.6, 0.7);
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_buttonImageConfiguration;
  uint64_t v9 = self;
  *(void *)&v7[v8] = objc_msgSend(v9, sel_configurationWithScale_, 2);
  uint64_t v10 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_xmarkImageConfiguration;
  *(void *)&v7[v10] = objc_msgSend(v9, sel_configurationWithPointSize_weight_scale_, 2, 3, 0.0);
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signaturePenWidth] = 0x3FF0000000000000;
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar;
  *(void *)&v7[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F829A0]), sel_init);
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView;
  *(void *)&v7[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14AD0]), sel_init);
  uint64_t v13 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineView;
  *(void *)&v7[v13] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButton] = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder] = 0;
  int64_t v14 = &v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  *(void *)int64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  uint64_t v15 = &v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion];
  *(void *)uint64_t v15 = UnknownCanvasElementView.flags.modify;
  *((void *)v15 + 1) = 0;
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction] = 0;

  v19.receiver = v7;
  v19.super_class = (Class)type metadata accessor for SignatureCreationViewController();
  long long v16 = (char *)objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  objc_msgSend(v16, sel_setModalTransitionStyle_, 0);
  objc_msgSend(v16, sel_setModalPresentationStyle_, 2);
  objc_msgSend(v16, sel_setModalInPresentation_, 1);
  objc_msgSend(v16, sel_setPreferredContentSize_, *(double *)&v16[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_panelSize], *(double *)&v16[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_panelSize + 8]);
  id v17 = *(id *)&v16[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar];
  objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  return v16;
}

Swift::Void __swiftcall SignatureCreationViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v184 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UITraitOverrides();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v184 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIConfigurationTextAttributesTransformer?);
  MEMORY[0x270FA5388](v9 - 8);
  *(void *)&long long v195 = (char *)v184 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v201 = type metadata accessor for UIButton.Configuration();
  uint64_t v199 = *(void *)(v201 - 8);
  MEMORY[0x270FA5388](v201);
  uint64_t v196 = (char *)v184 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v200 = (char *)v184 - v13;
  MEMORY[0x270FA5388](v14);
  v197 = (char *)v184 - v15;
  long long v16 = (objc_class *)type metadata accessor for SignatureCreationViewController();
  v208.receiver = v0;
  v208.super_class = v16;
  objc_msgSendSuper2(&v208, sel_viewDidLoad);
  id v17 = objc_msgSend(v0, sel_view);
  if (!v17)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v18 = v17;
  objc_super v19 = self;
  id v20 = objc_msgSend(v19, sel_systemBackgroundColor);
  objc_msgSend(v18, sel_setBackgroundColor_, v20);

  id v21 = objc_msgSend(v1, sel_view);
  if (!v21)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v22 = v21;
  id v188 = v19;
  v184[0] = v8;
  v184[1] = v6;
  uint64_t v189 = v5;
  uint64_t v23 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar];
  objc_msgSend(v21, sel_addSubview_, v23);

  uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = swift_allocObject();
  long long v194 = xmmword_20C8344D0;
  *(_OWORD *)(v24 + 16) = xmmword_20C8344D0;
  id v25 = objc_msgSend(v23, sel_widthAnchor);
  id v26 = objc_msgSend(v1, sel_view);
  if (!v26)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v27 = v26;
  uint64_t v186 = v3;
  uint64_t v187 = v2;
  id v28 = objc_msgSend(v26, sel_widthAnchor);

  id v29 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v28);
  *(void *)(v24 + 32) = v29;
  id v30 = objc_msgSend(v23, sel_topAnchor);
  id v31 = objc_msgSend(v1, sel_view);
  if (!v31)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v32 = v31;
  uint64_t v33 = self;
  id v34 = objc_msgSend(v32, sel_safeAreaLayoutGuide);

  id v35 = objc_msgSend(v34, sel_topAnchor);
  id v36 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v35);

  *(void *)(v24 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v36;
  *(void *)&long long v205 = v24;
  specialized Array._endMutation()();
  uint64_t v203 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v202 = v33;
  objc_msgSend(v33, sel_activateConstraints_, isa);

  long long v38 = v197;
  static UIButton.Configuration.plain()();
  long long v205 = *(_OWORD *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  SignatureDescription.localizedTitle()();
  UIButton.Configuration.title.setter();
  id v39 = *(id *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_buttonImageConfiguration];
  long long v40 = (void *)MEMORY[0x21054D080](0x2E6E6F7276656863, 0xEC0000006E776F64);
  id v198 = self;
  id v41 = objc_msgSend(v198, sel_systemImageNamed_withConfiguration_, v40, v39);

  *(void *)&long long v193 = v39;
  UIButton.Configuration.image.setter();
  UIButton.Configuration.imagePadding.setter();
  UIButton.Configuration.imagePlacement.setter();
  *(void *)(swift_allocObject() + 16) = v1;
  long long v42 = v1;
  uint64_t v43 = v195;
  UIConfigurationTextAttributesTransformer.init(_:)();
  uint64_t v44 = type metadata accessor for UIConfigurationTextAttributesTransformer();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 0, 1, v44);
  UIButton.Configuration.titleTextAttributesTransformer.setter();
  id v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F829C8]), sel_init);
  uint64_t v46 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
  CGRect v190 = *(void (**)(char *, char *, uint64_t))(v199 + 16);
  v190(v200, v38, v201);
  uint64_t v47 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  *(void *)(swift_allocObject() + 16) = v42;
  long long v48 = v42;
  uint64_t v191 = v47;
  UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v192 = v46;
  long long v49 = (void *)UIButton.init(configuration:primaryAction:)();
  objc_msgSend(v45, sel_setTitleView_, v49);

  uint64_t v50 = swift_allocObject();
  long long v195 = xmmword_20C835790;
  *(_OWORD *)(v50 + 16) = xmmword_20C835790;
  *(void *)(v50 + 32) = v45;
  *(void *)&long long v205 = v50;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UINavigationItem);
  id v51 = v45;
  Class v52 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_setItems_, v52);

  id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824A8]), sel_initWithBarButtonSystemItem_target_action_, 0, v48, sel_doneAction_);
  uint64_t v54 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem;
  long long v55 = *(void **)&v48[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem];
  *(void *)&v48[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem] = v53;

  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = v195;
  uint64_t v57 = *(void **)&v48[v54];
  if (!v57)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  *(void *)(v56 + 32) = v57;
  *(void *)&long long v205 = v56;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItem);
  id v58 = v57;
  Class v59 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v51, sel_setRightBarButtonItems_, v59);

  unint64_t v60 = *(void **)&v48[v54];
  if (!v60)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  objc_msgSend(v60, sel_setEnabled_, 0);
  id v61 = objc_msgSend(v48, sel_presentationController);
  uint64_t v62 = v201;
  if (!v61 || (unint64_t v63 = v61, v64 = objc_msgSend(v61, sel_presentationStyle), v63, v64 != (id)7))
  {
    id v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824A8]), sel_initWithBarButtonSystemItem_target_action_, 1, v48, sel_cancelAction_);
    uint64_t v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = v195;
    *(void *)(v66 + 32) = v65;
    *(void *)&long long v205 = v66;
    specialized Array._endMutation()();
    id v67 = v65;
    Class v68 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v51, sel_setLeftBarButtonItems_, v68);
  }
  long long v69 = v196;
  static UIButton.Configuration.plain()();
  id v70 = objc_msgSend(v48, sel_traitCollection);
  id v71 = objc_msgSend(v70, sel_userInterfaceIdiom);

  if (v71 == (id)6)
  {
    long long v72 = v200;
    static UIButton.Configuration.borderedProminent()();
    uint64_t v73 = v199;
    (*(void (**)(char *, uint64_t))(v199 + 8))(v69, v62);
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v69, v72, v62);
  }
  id v185 = v51;
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v209._uint64_t countAndFlagsBits = 0xD000000000000024;
  v209._object = (void *)0x800000020C857590;
  v74._uint64_t countAndFlagsBits = 0x7261656C43;
  v74._object = (void *)0xE500000000000000;
  v75.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v75.value._object = (void *)0xEB00000000656C62;
  v76._uint64_t countAndFlagsBits = 0;
  v76._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v74, v75, paperKitBundle, v76, v209);
  UIButton.Configuration.title.setter();
  id v77 = (id)v193;
  long long v78 = (void *)MEMORY[0x21054D080](0xD000000000000016, 0x800000020C8575C0);
  id v79 = objc_msgSend(v198, sel_systemImageNamed_withConfiguration_, v78, v77);

  UIButton.Configuration.image.setter();
  UIButton.Configuration.imagePadding.setter();
  v190(v200, v69, v62);
  *(void *)(swift_allocObject() + 16) = v48;
  uint64_t v80 = v48;
  UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v81 = (void *)UIButton.init(configuration:primaryAction:)();
  objc_msgSend(v81, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v81, sel_setEnabled_, 0);
  id v82 = objc_msgSend(v80, sel_view);
  if (!v82) {
    goto LABEL_41;
  }
  long long v83 = v82;
  objc_msgSend(v82, sel_addSubview_, v81);

  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = v194;
  id v85 = objc_msgSend(v81, sel_centerXAnchor);
  id v86 = objc_msgSend(v80, sel_view);
  if (!v86)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  long long v87 = v86;
  *(void *)&long long v194 = v23;
  id v88 = objc_msgSend(v86, sel_centerXAnchor);

  id v89 = objc_msgSend(v85, sel_constraintEqualToAnchor_, v88);
  *(void *)(v84 + 32) = v89;
  id v90 = objc_msgSend(v81, sel_bottomAnchor);
  id v91 = objc_msgSend(v80, sel_view);
  if (!v91)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  long long v92 = v91;
  id v93 = objc_msgSend(v91, sel_safeAreaLayoutGuide);

  id v94 = objc_msgSend(v93, sel_bottomAnchor);
  id v95 = objc_msgSend(v90, sel_constraintEqualToAnchor_constant_, v94, -14.0);

  *(void *)(v84 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v95;
  *(void *)&long long v205 = v84;
  specialized Array._endMutation()();
  Class v96 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v202, sel_activateConstraints_, v96);

  long long v97 = *(void **)&v80[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButton];
  *(void *)&v80[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButton] = v81;
  id v98 = v81;

  long long v99 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  if (one-time initialization token for signatureInstructionString != -1) {
    swift_once();
  }
  long long v100 = (void *)MEMORY[0x21054D080](static UIConstants.signatureInstructionString, *((void *)&static UIConstants.signatureInstructionString + 1));
  objc_msgSend(v99, sel_setText_, v100);

  objc_msgSend(v99, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  *(void *)&long long v195 = *(void *)&v80[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineColor];
  objc_msgSend(v99, sel_setTextColor_);
  objc_msgSend(v99, sel_setTextAlignment_, 1);
  id v101 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x263F835B8]);
  objc_msgSend(v99, sel_setFont_, v101);

  id v102 = objc_msgSend(v80, sel_view);
  if (!v102) {
    goto LABEL_44;
  }
  long long v103 = v102;
  objc_msgSend(v102, sel_addSubview_, v99);

  uint64_t v104 = swift_allocObject();
  long long v193 = xmmword_20C837410;
  *(_OWORD *)(v104 + 16) = xmmword_20C837410;
  uint64_t v105 = v99;
  id v106 = objc_msgSend(v99, sel_centerXAnchor);
  id v107 = objc_msgSend(v80, sel_view);
  if (!v107)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v108 = v107;
  id v109 = objc_msgSend(v107, sel_centerXAnchor);

  id v110 = objc_msgSend(v106, sel_constraintEqualToAnchor_, v109);
  *(void *)(v104 + 32) = v110;
  id v111 = objc_msgSend(v105, sel_widthAnchor);
  id v112 = objc_msgSend(v80, sel_view);
  if (!v112)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  unint64_t v113 = v112;
  id v114 = objc_msgSend(v112, sel_safeAreaLayoutGuide);

  id v115 = objc_msgSend(v114, sel_widthAnchor);
  id v116 = objc_msgSend(v111, sel_constraintEqualToAnchor_, v115);

  *(void *)(v104 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v116;
  uint64_t v200 = v105;
  id v117 = objc_msgSend(v105, sel_bottomAnchor);
  id v118 = objc_msgSend(v98, sel_topAnchor);
  id v119 = objc_msgSend(v117, sel_constraintEqualToAnchor_constant_, v118, -8.0);

  *(void *)(v104 + 48) = v119;
  *(void *)&long long v205 = v104;
  specialized Array._endMutation()();
  Class v120 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v202, sel_activateConstraints_, v120);

  id v121 = *(id *)&v80[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_xmarkImageConfiguration];
  CGFloat v122 = (void *)MEMORY[0x21054D080](0x6B72616D78, 0xE500000000000000);
  id v123 = objc_msgSend(v198, sel_systemImageNamed_withConfiguration_, v122, v121);

  uint64_t v124 = v195;
  if (v123)
  {
    id v125 = objc_msgSend(v123, sel_imageWithRenderingMode_, 2);
  }
  else
  {
    id v125 = 0;
  }
  id v126 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v125);

  objc_msgSend(v126, sel_setTintColor_, v124);
  objc_msgSend(v126, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v127 = objc_msgSend(v80, sel_view);
  if (!v127) {
    goto LABEL_47;
  }
  CGFloat v128 = v127;
  objc_msgSend(v127, sel_addSubview_, v126);

  unint64_t v129 = *(void **)&v80[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineView];
  objc_msgSend(v129, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v129, sel_setBackgroundColor_, v124);
  id v130 = objc_msgSend(v80, sel_view);
  if (!v130)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  long long v131 = v130;
  id v198 = v98;
  objc_msgSend(v130, sel_addSubview_, v129);

  uint64_t v132 = swift_allocObject();
  *(_OWORD *)(v132 + 16) = xmmword_20C83B680;
  id v133 = objc_msgSend(v126, sel_leadingAnchor);
  id v134 = objc_msgSend(v80, sel_view);
  if (!v134)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  long long v135 = v134;
  id v136 = objc_msgSend(v134, sel_safeAreaLayoutGuide);

  id v137 = objc_msgSend(v136, sel_leadingAnchor);
  id v138 = objc_msgSend(v133, sel_constraintEqualToAnchor_constant_, v137, 32.0);

  *(void *)(v132 + 32) = v138;
  id v139 = objc_msgSend(v126, sel_bottomAnchor);
  id v140 = objc_msgSend(v200, sel_topAnchor);
  id v141 = objc_msgSend(v139, sel_constraintEqualToAnchor_constant_, v140, -12.0);

  *(void *)(v132 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v141;
  id v142 = objc_msgSend(v129, sel_heightAnchor);
  id v143 = objc_msgSend(v142, sel_constraintEqualToConstant_, 1.0);

  *(void *)(v132 + 48) = v143;
  id v144 = objc_msgSend(v129, sel_bottomAnchor);
  id v145 = objc_msgSend(v126, sel_bottomAnchor);
  id v146 = objc_msgSend(v144, sel_constraintEqualToAnchor_, v145);

  *(void *)(v132 + 56) = v146;
  id v147 = objc_msgSend(v129, sel_leadingAnchor);
  *(void *)&long long v195 = v126;
  id v148 = objc_msgSend(v126, sel_trailingAnchor);
  id v149 = objc_msgSend(v147, sel_constraintEqualToAnchor_constant_, v148, 8.0);

  *(void *)(v132 + 64) = v149;
  id v150 = objc_msgSend(v129, sel_trailingAnchor);
  id v151 = objc_msgSend(v80, sel_view);
  if (!v151)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  CGAffineTransform v152 = v151;
  id v153 = objc_msgSend(v151, sel_safeAreaLayoutGuide);

  id v154 = objc_msgSend(v153, sel_trailingAnchor);
  id v155 = objc_msgSend(v150, sel_constraintEqualToAnchor_constant_, v154, -32.0);

  *(void *)(v132 + 72) = v155;
  *(void *)&long long v205 = v132;
  specialized Array._endMutation()();
  Class v156 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v202, sel_activateConstraints_, v156);

  id v157 = objc_msgSend(v80, sel_view);
  if (!v157)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  CGRect v158 = v157;
  CGRect v159 = *(void **)&v80[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView];
  objc_msgSend(v157, sel_insertSubview_atIndex_, v159, 0);

  id v160 = objc_msgSend(v80, sel_traitCollection);
  id v161 = objc_msgSend(v160, sel_userInterfaceIdiom);

  uint64_t v162 = v199;
  if (v161 == (id)6)
  {
    uint64_t v163 = v184[0];
    MEMORY[0x21054DBA0]();
    UIMutableTraits.userInterfaceStyle.setter();
    MEMORY[0x21054DBB0](v163);
  }
  (*(void (**)(char *, void, uint64_t))(v186 + 104))(v189, *MEMORY[0x263F14A48], v187);
  id v164 = objc_msgSend(v188, sel_blackColor);
  uint64_t v206 = type metadata accessor for PKInkingTool();
  uint64_t v207 = MEMORY[0x263F14A50];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v205);
  PKInkingTool.init(_:color:width:)();
  PKCanvasView.tool.setter();
  objc_msgSend(v159, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v159, sel_setDrawingPolicy_, 1);
  objc_msgSend(v159, sel_setDelegate_, v80);
  uint64_t v165 = swift_allocObject();
  *(_OWORD *)(v165 + 16) = v193;
  id v166 = objc_msgSend(v159, sel_widthAnchor);
  id v167 = objc_msgSend(v80, (SEL)&selRef_setTextColor_);
  if (!v167) {
    goto LABEL_52;
  }
  long long v168 = v167;
  id v169 = objc_msgSend(v167, sel_safeAreaLayoutGuide);

  id v170 = objc_msgSend(v169, sel_widthAnchor);
  id v171 = objc_msgSend(v166, sel_constraintEqualToAnchor_, v170);

  *(void *)(v165 + 32) = v171;
  id v172 = objc_msgSend(v159, sel_topAnchor);
  id v173 = objc_msgSend((id)v194, sel_bottomAnchor);
  id v174 = objc_msgSend(v172, sel_constraintEqualToAnchor_, v173);

  *(void *)(v165 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v174;
  id v175 = objc_msgSend(v159, sel_bottomAnchor);
  id v176 = objc_msgSend(v80, sel_view);
  if (v176)
  {
    unint64_t v177 = v176;
    id v178 = objc_msgSend(v176, sel_safeAreaLayoutGuide);

    id v179 = objc_msgSend(v178, sel_bottomAnchor);
    id v180 = objc_msgSend(v175, sel_constraintEqualToAnchor_, v179);

    *(void *)(v165 + 48) = v180;
    *(void *)&long long v205 = v165;
    specialized Array._endMutation()();
    Class v181 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v202, sel_activateConstraints_, v181);

    float64x2_t v182 = *(void (**)(char *, uint64_t))(v162 + 8);
    uint64_t v183 = v201;
    v182(v196, v201);
    v182(v197, v183);
    return;
  }
LABEL_53:
  __break(1u);
}

uint64_t closure #1 in SignatureCreationViewController.viewDidLoad()(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar), sel_standardAppearance);
  id v3 = objc_msgSend(v2, sel_titleTextAttributes);

  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return MEMORY[0x270EEF080](v4);
}

Swift::Bool __swiftcall SignatureCreationViewController.becomeFirstResponder()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_view);
  if (v2)
  {
    id v3 = v2;
    id v4 = objc_msgSend(v2, sel_firstResponder);

    v10.receiver = v1;
    v10.super_class = (Class)type metadata accessor for SignatureCreationViewController();
    unsigned int v5 = objc_msgSendSuper2(&v10, sel_becomeFirstResponder);
    if (v5)
    {
      if (!v4
        || (type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIResponder),
            uint64_t v6 = v1,
            id v7 = v4,
            char v8 = static NSObject.== infix(_:_:)(),
            v7,
            v6,
            (v8 & 1) == 0))
      {
        id v7 = *(id *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder];
        *(void *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder] = v4;
      }
    }
    else
    {
      id v7 = v4;
    }

    LOBYTE(v2) = v5;
  }
  else
  {
    __break(1u);
  }
  return (char)v2;
}

Swift::Void __swiftcall SignatureCreationViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for SignatureCreationViewController();
  objc_msgSendSuper2(&v10, sel_viewDidAppear_, a1);
  if ((objc_msgSend(v1, sel_isFirstResponder) & 1) == 0) {
    objc_msgSend(v1, sel_becomeFirstResponder);
  }
  id v3 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v4 = *MEMORY[0x263F83318];
  id v5 = objc_msgSend(self, sel_mainQueue);
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  void v9[4] = partial apply for closure #1 in SignatureCreationViewController.viewDidAppear(_:);
  v9[5] = v6;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v9[3] = &block_descriptor_85_0;
  id v7 = _Block_copy(v9);
  swift_release();
  id v8 = objc_msgSend(v3, sel_addObserverForName_object_queue_usingBlock_, v4, 0, v5, v7);
  _Block_release(v7);
  swift_unknownObjectRelease();
}

void closure #1 in SignatureCreationViewController.viewDidAppear(_:)()
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v9 = objc_msgSend(Strong, sel_firstResponder);

  if (!v9) {
    return;
  }
  self;
  uint64_t v1 = (void *)swift_dynamicCastObjCClass();
  if (!v1) {
    goto LABEL_10;
  }
  id v2 = objc_msgSend(v1, sel_textFields);
  if (!v2) {
    goto LABEL_10;
  }
  id v3 = v2;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITextField);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v5 = v9;
    if (v8) {
      goto LABEL_6;
    }
  }
  else
  {
    id v5 = v9;
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      if ((v4 & 0xC000000000000001) != 0)
      {
        id v6 = (id)MEMORY[0x21054E050](0, v4);
      }
      else
      {
        if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v6 = *(id *)(v4 + 32);
      }
      id v7 = v6;
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_becomeFirstResponder);

LABEL_10:

      return;
    }
  }

  swift_bridgeObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Void __swiftcall SignatureCreationViewController.viewDidDisappear(_:)(Swift::Bool a1)
{
  objc_msgSend(v1, sel_resignFirstResponder);
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder];
  if (v4)
  {
    id v5 = v4;
    objc_msgSend(v5, sel_becomeFirstResponder);
    id v6 = *(void **)&v1[v3];
    *(void *)&v1[v3] = 0;
  }
  id v7 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v7, sel_removeObserver_name_object_, v1, *MEMORY[0x263F83318], 0);

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for SignatureCreationViewController();
  objc_msgSendSuper2(&v8, sel_viewDidDisappear_, a1);
}

Swift::Void __swiftcall SignatureCreationViewController.updateTitle()()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar), sel_topItem);
  if (!v1)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v2 = v1;
  id v9 = objc_msgSend(v1, sel_titleView);

  if (!v9)
  {
LABEL_11:
    __break(1u);
    return;
  }
  self;
  uint64_t v3 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription);
  unint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8);
  if (v4 >= 6)
  {
    swift_bridgeObjectRetain();
    objc_super v8 = (void *)MEMORY[0x21054D080](v5, v4);
    objc_msgSend(v3, sel_setTitle_forState_, v8, 0);

    outlined consume of SignatureDescription(v5, v4);
  }
  else
  {
    uint64_t countAndFlagsBits = SignatureDescription.localizedTitle()()._countAndFlagsBits;
    id v7 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_setTitle_forState_, v7, 0);
  }
}

void SignatureCreationViewController.clearSignature(with:)(void *a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  uint64_t v13 = partial apply for closure #1 in SignatureCreationViewController.clearSignature(with:);
  uint64_t v14 = v3;
  uint64_t v9 = MEMORY[0x263EF8330];
  uint64_t v10 = 1107296256;
  uint64_t v11 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  uint64_t v12 = &block_descriptor_57;
  unint64_t v4 = _Block_copy(&v9);
  id v5 = v1;
  swift_release();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  uint64_t v13 = partial apply for closure #2 in SignatureCreationViewController.clearSignature(with:);
  uint64_t v14 = v6;
  uint64_t v9 = MEMORY[0x263EF8330];
  uint64_t v10 = 1107296256;
  uint64_t v11 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  uint64_t v12 = &block_descriptor_63_0;
  id v7 = _Block_copy(&v9);
  id v8 = v5;
  swift_release();
  objc_msgSend(a1, sel_animateAlongsideTransition_completion_, v4, v7);
  _Block_release(v7);
  _Block_release(v4);
}

CGMutablePathRef drawingPath #1 () in SignatureCreationViewController.doneAction(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PKStroke();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PKDrawing();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGMutablePathRef Mutable = CGPathCreateMutable();
  id v11 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView), sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = PKDrawing.strokes.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    transform.double a = 1.0;
    transform.double b = 0.0;
    transform.double c = 0.0;
    transform.double d = 1.0;
    transform.tCGFloat x = 0.0;
    transform.tCGFloat y = 0.0;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v14 = v3 + 16;
    uint64_t v22 = v12;
    uint64_t v23 = v15;
    unint64_t v16 = v12 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v17 = *(void *)(v14 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v14 - 8);
    do
    {
      v23(v5, v16, v2);
      Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
      (*v18)(v5, v2);
      id v20 = (const CGPath *)[(objc_class *)isa _newPathRepresentation];

      CGMutablePathRef.addPath(_:transform:)(v20, &transform);
      v16 += v17;
      --v13;
    }
    while (v13);
  }
  swift_bridgeObjectRelease();
  return Mutable;
}

Swift::Void __swiftcall SignatureCreationViewController.clearAction()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PKDrawing();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)SignatureLogger);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_20C2D7000, v7, v8, "cleared drawing", v9, 2u);
    MEMORY[0x210550270](v9, -1, -1);
  }

  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView);
  PKDrawing.init()();
  PKDrawing._bridgeToObjectiveC()(v11);
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v10, sel_setDrawing_, v13);
}

Swift::Void __swiftcall SignatureCreationViewController.descriptionAction()()
{
  id v53 = v0;
  id v54 = objc_msgSend(self, sel_alertControllerWithTitle_message_preferredStyle_, 0, 0, 0);
  id v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar], sel_topItem);
  if (!v1)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_titleView);

  if (!v3)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v5 = objc_msgSend(v54, sel_popoverPresentationController);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = v5;
  id v7 = objc_msgSend(v4, sel_imageView);
  if (!v7)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  os_log_type_t v8 = v7;
  objc_msgSend(v6, sel_setSourceView_, v7);

LABEL_6:
  id v9 = objc_msgSend(v54, sel_popoverPresentationController);
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = objc_msgSend(v4, sel_imageView);
    if (v11)
    {
      uint64_t v12 = v11;
      objc_msgSend(v11, sel_bounds);
      double v14 = v13;
      double v16 = v15;
      double v18 = v17;
      double v20 = v19;

      objc_msgSend(v10, sel_setSourceRect_, v14, v16, v18, v20);
      goto LABEL_9;
    }
LABEL_23:
    __break(1u);
    return;
  }
LABEL_9:
  Class v52 = v3;
  id v21 = objc_msgSend(v54, sel_popoverPresentationController);
  if (v21)
  {
    uint64_t v22 = v21;
    objc_msgSend(v21, sel_setPermittedArrowDirections_, 1);
  }
  uint64_t v23 = qword_26C14CC50;
  if (qword_26C14CC50)
  {
    uint64_t v24 = (unint64_t *)&unk_26C14CC68;
    do
    {
      uint64_t v33 = *(v24 - 1);
      unint64_t v34 = *v24;
      if (*v24)
      {
        outlined copy of SignatureDescription(*(v24 - 1), *v24);
        outlined copy of SignatureDescription(v33, v34);
        outlined consume of SignatureDescription(v33, v34);
        outlined consume of SignatureDescription(0, 0);
        uint64_t aBlock = v33;
        uint64_t v56 = v34;
        Swift::String v25 = SignatureDescription.localizedTitle()();
        uint64_t v26 = swift_allocObject();
        swift_unknownObjectUnownedInit();
        uint64_t v27 = swift_allocObject();
        swift_unknownObjectUnownedInit();
        id v28 = (void *)swift_allocObject();
        void v28[2] = v33;
        v28[3] = v34;
        v28[4] = v53;
        v28[5] = v26;
        void v28[6] = v27;
        id v29 = v53;
        swift_retain();
        swift_retain();
        id v30 = (void *)MEMORY[0x21054D080](v25._countAndFlagsBits, v25._object);
        swift_bridgeObjectRelease();
        Class v59 = partial apply for closure #1 in SignatureCreationViewController.descriptionAction();
        unint64_t v60 = v28;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v56 = 1107296256;
        uint64_t v57 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
        id v58 = &block_descriptor_33;
        id v31 = _Block_copy(&aBlock);
        swift_release();
        id v32 = objc_msgSend(self, sel_actionWithTitle_style_handler_, v30, 0, v31);
        _Block_release(v31);
        swift_release();
        swift_release();

        objc_msgSend(v54, sel_addAction_, v32);
      }
      else
      {
        outlined consume of SignatureDescription(*(v24 - 1), 0);
        outlined consume of SignatureDescription(0, 0);
      }
      v24 += 2;
      --v23;
    }
    while (v23);
  }
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v61._uint64_t countAndFlagsBits = 0xD000000000000022;
  v61._object = (void *)0x800000020C857460;
  v35._uint64_t countAndFlagsBits = 0x6C6562614C206F4ELL;
  v35._object = (void *)0xE800000000000000;
  v36.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._uint64_t countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v61);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v40 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v39;
  *(void *)(v41 + 24) = v40;
  swift_retain();
  swift_retain();
  long long v42 = (void *)MEMORY[0x21054D080](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  Class v59 = partial apply for closure #2 in SignatureCreationViewController.descriptionAction();
  unint64_t v60 = (void *)v41;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v56 = 1107296256;
  uint64_t v57 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  id v58 = &block_descriptor_35_1;
  uint64_t v43 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v44 = self;
  id v45 = objc_msgSend(v44, sel_actionWithTitle_style_handler_, v42, 2, v43);
  _Block_release(v43);
  swift_release();
  swift_release();

  objc_msgSend(v54, sel_addAction_, v45);
  v62._object = (void *)0x800000020C8529F0;
  v46._uint64_t countAndFlagsBits = 0x6C65636E6143;
  v46._object = (void *)0xE600000000000000;
  v47.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v47.value._object = (void *)0xEB00000000656C62;
  v48._uint64_t countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  v62._uint64_t countAndFlagsBits = 0xD000000000000017;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, paperKitBundle, v48, v62)._countAndFlagsBits;
  uint64_t v50 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
  swift_bridgeObjectRelease();
  id v51 = objc_msgSend(v44, sel_actionWithTitle_style_handler_, v50, 1, 0);

  objc_msgSend(v54, sel_addAction_, v51);
  objc_msgSend(v53, sel_presentViewController_animated_completion_, v54, 1, 0);
}

void showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()(char *a1)
{
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)SignatureLogger);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl(&dword_20C2D7000, v3, v4, "show custom label alert", v5, 2u);
    MEMORY[0x210550270](v5, -1, -1);
  }

  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v42._uint64_t countAndFlagsBits = 0xD000000000000026;
  v42._object = (void *)0x800000020C857490;
  v6._uint64_t countAndFlagsBits = 0x4C206D6F74737543;
  v6._object = (void *)0xEC0000006C656261;
  v7.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v7.value._object = (void *)0xEB00000000656C62;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, paperKitBundle, v8, v42)._countAndFlagsBits;
  uint64_t v10 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(self, sel_alertControllerWithTitle_message_preferredStyle_, v10, 0, 1);

  uint64_t v12 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v40 = partial apply for closure #1 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction();
  uint64_t v41 = v12;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v37 = 1107296256;
  Swift::String v38 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  uint64_t v39 = &block_descriptor_39;
  double v13 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v11, sel_addTextFieldWithConfigurationHandler_, v13);
  _Block_release(v13);
  v43._uint64_t countAndFlagsBits = 0xD000000000000017;
  v43._object = (void *)0x800000020C8529F0;
  v14._uint64_t countAndFlagsBits = 0x6C65636E6143;
  v14._object = (void *)0xE600000000000000;
  v15.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v15.value._object = (void *)0xEB00000000656C62;
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, paperKitBundle, v16, v43);
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  swift_retain();
  double v19 = (void *)MEMORY[0x21054D080](v17._countAndFlagsBits, v17._object);
  swift_bridgeObjectRelease();
  uint64_t v40 = partial apply for closure #2 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction();
  uint64_t v41 = v18;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v37 = 1107296256;
  Swift::String v38 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  uint64_t v39 = &block_descriptor_43;
  double v20 = _Block_copy(&aBlock);
  swift_release();
  id v21 = self;
  id v22 = objc_msgSend(v21, sel_actionWithTitle_style_handler_, v19, 1, v20);
  _Block_release(v20);
  swift_release();

  objc_msgSend(v11, sel_addAction_, v22);
  v44._object = (void *)0x800000020C8574E0;
  v23._uint64_t countAndFlagsBits = 1701736260;
  v23._object = (void *)0xE400000000000000;
  v24.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v24.value._object = (void *)0xEB00000000656C62;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v44._uint64_t countAndFlagsBits = 0xD000000000000015;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, paperKitBundle, v25, v44);
  uint64_t v27 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v28 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v28;
  *(void *)(v29 + 24) = v27;
  swift_retain();
  swift_retain();
  id v30 = (void *)MEMORY[0x21054D080](v26._countAndFlagsBits, v26._object);
  swift_bridgeObjectRelease();
  uint64_t v40 = partial apply for closure #3 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction();
  uint64_t v41 = v29;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v37 = 1107296256;
  Swift::String v38 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  uint64_t v39 = &block_descriptor_51;
  id v31 = _Block_copy(&aBlock);
  swift_release();
  id v32 = objc_msgSend(v21, sel_actionWithTitle_style_handler_, v30, 0, v31);
  _Block_release(v31);
  swift_release();
  swift_release();

  uint64_t v33 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction;
  unint64_t v34 = *(void **)&a1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction];
  *(void *)&a1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction] = v32;

  Swift::String v35 = *(void **)&a1[v33];
  if (v35)
  {
    objc_msgSend(v35, sel_setEnabled_, 0);
    if (*(void *)&a1[v33])
    {
      objc_msgSend(v11, sel_addAction_);
      objc_msgSend(a1, sel_presentViewController_animated_completion_, v11, 1, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void closure #1 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()(void *a1)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v13._object = (void *)0x800000020C857500;
  v2._uint64_t countAndFlagsBits = 0x6C6562614CLL;
  v2._object = (void *)0xE500000000000000;
  v3.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v13._uint64_t countAndFlagsBits = 0xD000000000000032;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v13)._countAndFlagsBits;
  Swift::String v6 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setPlaceholder_, v6);

  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v8 = *(void *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  unint64_t v9 = *(void *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8];
  outlined copy of SignatureDescription(v8, v9);

  if (v9 >= 6)
  {
    uint64_t v10 = (void *)MEMORY[0x21054D080](v8, v9);
    outlined consume of SignatureDescription(v8, v9);
    objc_msgSend(a1, sel_setText_, v10);
  }
  else
  {
    outlined consume of SignatureDescription(v8, v9);
  }
  id v11 = (id)swift_unknownObjectUnownedLoadStrong();
  objc_msgSend(a1, sel_addTarget_action_forControlEvents_, v11, sel_updateDoneButtonState_, 0x20000);
}

void closure #2 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()()
{
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  id v1 = *(id *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction];
  *(void *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction] = 0;
}

void closure #3 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()()
{
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)SignatureLogger);
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    Swift::String_optional v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String_optional v3 = 0;
    _os_log_impl(&dword_20C2D7000, v1, v2, "set custom label", v3, 2u);
    MEMORY[0x210550270](v3, -1, -1);
  }

  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v5 = objc_msgSend(Strong, sel_textFields);

  if (!v5) {
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITextField);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_8;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_17;
  }
LABEL_8:
  if ((v6 & 0xC000000000000001) != 0)
  {
    id v7 = (id)MEMORY[0x21054E050](0, v6);
  }
  else
  {
    if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v7 = *(id *)(v6 + 32);
  }
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v8, sel_text);

  if (v9)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    Swift::String v13 = (char *)swift_unknownObjectUnownedLoadStrong();
    Swift::String v14 = (uint64_t *)&v13[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
    uint64_t v15 = *(void *)&v13[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
    unint64_t v16 = *(void *)&v13[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8];
    *Swift::String v14 = v10;
    v14[1] = v12;
    outlined consume of SignatureDescription(v15, v16);
    SignatureCreationViewController.updateTitle()();

    Swift::String v17 = (char *)swift_unknownObjectUnownedLoadStrong();
    id v19 = *(id *)&v17[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction];
    *(void *)&v17[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction] = 0;
  }
}

void closure #1 in SignatureCreationViewController.descriptionAction()(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 >= 6)
  {
    showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()(a4);
  }
  else
  {
    if (one-time initialization token for SignatureLogger != -1) {
      swift_once();
    }
    uint64_t v11 = __swift_project_value_buffer(v7, (uint64_t)SignatureLogger);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
    outlined copy of SignatureDescription(a2, a3);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v12, v13))
    {
      outlined consume of SignatureDescription(a2, a3);
      goto LABEL_11;
    }
    Swift::String v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)Swift::String v14 = 134217984;
    uint64_t v15 = specialized Collection<>.firstIndex(of:)(a2, a3, (uint64_t)&outlined read-only object #0 of static SignatureDescription.allCases.getter);
    if ((v16 & 1) == 0)
    {
      v22[1] = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of SignatureDescription(a2, a3);
      _os_log_impl(&dword_20C2D7000, v12, v13, "set standard label %ld", v14, 0xCu);
      MEMORY[0x210550270](v14, -1, -1);
LABEL_11:

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v18 = (uint64_t *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
      uint64_t v19 = *(void *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
      unint64_t v20 = *(void *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8];
      *uint64_t v18 = a2;
      v18[1] = a3;
      outlined copy of SignatureDescription(a2, a3);
      outlined consume of SignatureDescription(v19, v20);
      SignatureCreationViewController.updateTitle()();

      id v21 = (void *)swift_unknownObjectUnownedLoadStrong();
      objc_msgSend(v21, sel_dismissViewControllerAnimated_completion_, 1, 0);

      return;
    }
    __break(1u);
  }
}

void closure #2 in SignatureCreationViewController.descriptionAction()()
{
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)SignatureLogger);
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    Swift::String_optional v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String_optional v3 = 0;
    _os_log_impl(&dword_20C2D7000, v1, v2, "clear label", v3, 2u);
    MEMORY[0x210550270](v3, -1, -1);
  }

  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  id v5 = &Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  uint64_t v6 = *(void *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  unint64_t v7 = *(void *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  outlined consume of SignatureDescription(v6, v7);
  SignatureCreationViewController.updateTitle()();

  id v8 = (id)swift_unknownObjectUnownedLoadStrong();
  objc_msgSend(v8, sel_dismissViewControllerAnimated_completion_, 1, 0);
}

Swift::Void __swiftcall SignatureCreationViewController.updateDoneButtonState(_:)(UITextField *a1)
{
  os_log_type_t v2 = [(UITextField *)a1 text];
  if (v2)
  {
    Swift::String_optional v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    swift_bridgeObjectRelease();
    uint64_t v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0) {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v8 = v7 != 0;
  }
  else
  {
    BOOL v8 = 0;
  }
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction);
  if (v9)
  {
    objc_msgSend(v9, sel_setEnabled_, v8);
  }
}

id SignatureCreationViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureCreationViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SignatureCreationViewController()
{
  return self;
}

uint64_t sub_20C4A9788()
{
  swift_unknownObjectUnownedDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C4A97C0()
{
  if (*(void *)(v0 + 24) >= 6uLL) {
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in SignatureCreationViewController.descriptionAction()(uint64_t a1)
{
  closure #1 in SignatureCreationViewController.descriptionAction()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32));
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

void partial apply for closure #2 in SignatureCreationViewController.descriptionAction()()
{
}

void partial apply for closure #1 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()(void *a1)
{
}

void partial apply for closure #2 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()()
{
}

void partial apply for closure #3 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()()
{
}

uint64_t sub_20C4A9868()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #1 in SignatureCreationViewController.clearSignature(with:)()
{
  return objc_msgSend(*(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView), sel_setAlpha_, 0.0);
}

void partial apply for closure #2 in SignatureCreationViewController.clearSignature(with:)()
{
  objc_msgSend(*(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView), sel_setAlpha_, 1.0);
  SignatureCreationViewController.clearAction()();
}

void specialized SignatureCreationViewController.init(coder:)()
{
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_panelSize] = xmmword_20C83CBB0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_downArrowImagePadding] = 0x4020000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButtonBottomPadding] = 0x402C000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButtonImagePadding] = 0x4020000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineInset] = 0x4040000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLinePadding] = 0x4028000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureMarkPadding] = 0x4020000000000000;
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineColor;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithWhite_alpha_, 0.6, 0.7);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_buttonImageConfiguration;
  Swift::String_optional v3 = self;
  *(void *)&v0[v2] = objc_msgSend(v3, sel_configurationWithScale_, 2);
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_xmarkImageConfiguration;
  *(void *)&v0[v4] = objc_msgSend(v3, sel_configurationWithPointSize_weight_scale_, 2, 3, 0.0);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signaturePenWidth] = 0x3FF0000000000000;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar;
  *(void *)&v0[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F829A0]), sel_init);
  uint64_t v6 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView;
  *(void *)&v0[v6] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14AD0]), sel_init);
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineView;
  *(void *)&v0[v7] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder] = 0;
  BOOL v8 = &v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  *(void *)BOOL v8 = 0;
  *((void *)v8 + 1) = 0;
  uint64_t v9 = &v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion];
  *(void *)uint64_t v9 = UnknownCanvasElementView.flags.modify;
  *((void *)v9 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized SignatureCreationViewController.doneAction(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v85 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for UUID();
  uint64_t v84 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  id v88 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PKDrawing();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  os_log_type_t v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v87 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView];
  id v14 = objc_msgSend(v87, sel_drawing, v11);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = PKDrawing.strokes.getter();
  uint64_t v83 = v10;
  char v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v13, v9);
  uint64_t v17 = *(void *)(v15 + 16);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    if (one-time initialization token for SignatureLogger != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)SignatureLogger);
    long long v72 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v74))
    {
      Swift::String_optional v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String_optional v75 = 0;
      _os_log_impl(&dword_20C2D7000, v72, v74, "signature creation with empty signature ignored", v75, 2u);
      MEMORY[0x210550270](v75, -1, -1);
    }
    goto LABEL_12;
  }
  uint64_t v81 = v4;
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v82 = v9;
  uint64_t v79 = v6;
  uint64_t v80 = v5;
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)SignatureLogger);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v21 = 0;
    _os_log_impl(&dword_20C2D7000, v19, v20, "created signature", v21, 2u);
    MEMORY[0x210550270](v21, -1, -1);
  }

  id v22 = (uint64_t *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  uint64_t v23 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  unint64_t v24 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8];
  outlined copy of SignatureDescription(v23, v24);
  Swift::String v25 = (void *)MEMORY[0x21054D080](0xD000000000000024, 0x800000020C857540);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v23;
  *(void *)(v26 + 24) = v24;
  id v94 = partial apply for closure #1 in static SignatureAnalytics.created(_:);
  uint64_t v95 = v26;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v91 = 1107296256;
  long long v78 = &v92;
  long long v92 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  id v93 = &block_descriptor_75;
  uint64_t v27 = _Block_copy(&aBlock);
  uint64_t v28 = v1;
  outlined copy of SignatureDescription(v23, v24);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v27);

  outlined consume of SignatureDescription(v23, v24);
  id v29 = v87;
  id v30 = objc_msgSend(v87, sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  PKDrawing.bounds.getter();
  double v32 = v31;
  double v34 = v33;
  double v36 = v35;
  double v38 = v37;
  uint64_t v39 = v82;
  v16(v13, v82);
  id v40 = objc_msgSend(v1, sel_view);
  if (v40)
  {
    uint64_t v41 = v40;
    objc_msgSend(v40, sel_convertRect_fromCoordinateSpace_, v29, v32, v34, v36, v38);
    CGFloat v43 = v42;
    CGFloat v45 = v44;
    CGFloat v47 = v46;
    CGFloat v49 = v48;

    v96.origin.CGFloat x = v43;
    v96.origin.CGFloat y = v45;
    v96.size.CGFloat width = v47;
    v96.size.CGFloat height = v49;
    double MaxY = CGRectGetMaxY(v96);
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineView], sel_frame);
    double v51 = MaxY - CGRectGetMaxY(v97);
    Class v52 = v88;
    UUID.init()();
    id v53 = v85;
    static Date.now.getter();
    uint64_t v54 = *v22;
    unint64_t v77 = v22[1];
    outlined copy of SignatureDescription(v54, v77);
    CGMutablePathRef v76 = drawingPath #1 () in SignatureCreationViewController.doneAction(_:)((uint64_t)v1);
    id v55 = objc_msgSend(v29, sel_drawing);
    uint64_t v56 = (uint64_t)v81;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v83 + 56))(v56, 0, 1, v39);
    uint64_t v57 = (objc_class *)type metadata accessor for SignatureItem();
    id v58 = objc_allocWithZone(v57);
    uint64_t v59 = v84;
    uint64_t v60 = v86;
    (*(void (**)(unsigned char *, char *, uint64_t))(v84 + 16))(&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_uniqueID], v52, v86);
    *(double *)&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_baselineOffset] = v51;
    Swift::String v61 = &v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate];
    uint64_t v62 = v79;
    unint64_t v63 = *(void (**)(unsigned char *, char *, uint64_t))(v79 + 16);
    id v87 = v28;
    uint64_t v64 = v80;
    v63(&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate], v53, v80);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v61, 0, 1, v64);
    v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_shouldPersist] = 1;
    id v65 = (uint64_t *)&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
    unint64_t v66 = v77;
    uint64_t *v65 = v54;
    v65[1] = v66;
    *(void *)&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_path] = v76;
    outlined init with copy of PKDrawing?(v56, (uint64_t)&v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing]);
    v58[OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned] = 1;
    v89.receiver = v58;
    v89.super_class = v57;
    id v67 = objc_msgSendSuper2(&v89, sel_init);
    outlined destroy of PKDrawing?(v56);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v53, v64);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v88, v60);
    type metadata accessor for SignatureManager();
    swift_initStaticObject();
    SignatureManager.saveSignature(_:)(v67);
    uint64_t v68 = swift_allocObject();
    id v69 = v87;
    *(void *)(v68 + 16) = v87;
    *(void *)(v68 + 24) = v67;
    id v94 = partial apply for closure #1 in SignatureCreationViewController.doneAction(_:);
    uint64_t v95 = v68;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v91 = 1107296256;
    long long v92 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    id v93 = &block_descriptor_81;
    id v70 = _Block_copy(&aBlock);
    id v71 = v69;
    long long v72 = v67;
    swift_release();
    objc_msgSend(v71, sel_dismissViewControllerAnimated_completion_, 1, v70);
    _Block_release(v70);
LABEL_12:

    return;
  }
  __break(1u);
}

void specialized SignatureCreationViewController.cancelAction(_:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for SignatureLogger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)SignatureLogger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_20C2D7000, v3, v4, "cancelled creation", v5, 2u);
    MEMORY[0x210550270](v5, -1, -1);
  }

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v1;
  void v9[4] = partial apply for closure #1 in SignatureCreationViewController.cancelAction(_:);
  v9[5] = v6;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v9[3] = &block_descriptor_69;
  uint64_t v7 = _Block_copy(v9);
  id v8 = v1;
  swift_release();
  objc_msgSend(v8, sel_dismissViewControllerAnimated_completion_, 1, v7);
  _Block_release(v7);
}

id specialized SignatureCreationViewController.canvasViewDrawingDidChange(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PKDrawing();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView), sel_drawing, v4);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = PKDrawing.strokes.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  id result = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem);
  if (result)
  {
    objc_msgSend(result, sel_setEnabled_, v9 != 0);
    id result = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButton);
    if (result)
    {
      objc_msgSend(result, sel_setEnabled_, v9 != 0);
      return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar), sel_setNeedsLayout);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in SignatureCreationViewController.cancelAction(_:)()
{
  uint64_t v1 = *(void (**)(void))(*(void *)(v0 + 16)
                                     + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion);
  swift_retain();
  v1(0);
  return swift_release();
}

uint64_t sub_20C4AA774()
{
  if (*(void *)(v0 + 24) >= 6uLL) {
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x270FA0238](v0, 32, 7);
}

unint64_t partial apply for closure #1 in static SignatureAnalytics.created(_:)()
{
  return closure #1 in static SignatureAnalytics.created(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined init with copy of PKDrawing?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PKDrawing?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20C4AA884()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in SignatureCreationViewController.doneAction(_:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void (**)(uint64_t))(*(void *)(v0 + 16)
                                      + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion);
  swift_retain();
  v2(v1);
  return swift_release();
}

void partial apply for closure #1 in SignatureCreationViewController.viewDidAppear(_:)()
{
}

uint64_t partial apply for closure #1 in SignatureCreationViewController.viewDidLoad()(uint64_t a1)
{
  return closure #1 in SignatureCreationViewController.viewDidLoad()(a1, *(void *)(v1 + 16));
}

void partial apply for closure #2 in SignatureCreationViewController.viewDidLoad()()
{
}

void partial apply for closure #3 in SignatureCreationViewController.viewDidLoad()()
{
}

id Color.uiColor.getter()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone(MEMORY[0x263F825C8]);
  return objc_msgSend(v2, sel_initWithCGColor_, v1);
}

void static Color.clear.getter(CGColorRef *a1@<X8>)
{
}

void static Color.black.getter(CGColorRef *a1@<X8>)
{
}

uint64_t static Color.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

{
  return MEMORY[0x270F043C0]();
}

id Color.cgColor.getter()
{
  return *v0;
}

id key path getter for Color.cgColor : Color@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  id v2 = *a1;
  *a2 = v2;
  return v2;
}

void key path setter for Color.cgColor : Color(id *a1)
{
}

void Color.cgColor.setter(CGColor *a1)
{
  id v2 = a1;
  uint64_t v3 = CGColorGetColorSpace(a1);
  if (one-time initialization token for extendedSRGBColorSpace != -1) {
    swift_once();
  }
  int v4 = CFEqual(v3, (CFTypeRef)static Color.extendedSRGBColorSpace);

  if (v4) {
    goto LABEL_6;
  }
  CGColorRef CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.extendedSRGBColorSpace, kCGRenderingIntentDefault, v2, 0);
  if (CopyByMatchingToColorSpace)
  {
    uint64_t v6 = CopyByMatchingToColorSpace;

    id v2 = v6;
LABEL_6:

    id *v1 = v2;
    return;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Color.init(platformColor:)(void *a1@<X0>, void *a2@<X8>)
{
  Color.init(cgColor:)((CGColor *)objc_msgSend(a1, sel_CGColor), &v4);

  *a2 = v4;
}

void (*Color.cgColor.modify(void **a1))(void **a1, char a2)
{
  id v2 = *v1;
  *a1 = *v1;
  a1[1] = v1;
  id v3 = v2;
  return Color.cgColor.modify;
}

void Color.cgColor.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    Color.cgColor.setter(v3);
  }
  else
  {
    Color.cgColor.setter((CGColor *)v2);
  }
}

CGColorSpaceRef one-time initialization function for extendedSRGBColorSpace()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (result) {
    static Color.extendedSRGBColorSpace = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

void Color.init(red:green:blue:alpha:)(CGColorRef *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  v9[0] = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  uint64_t v6 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (v6)
  {
    id v7 = v6;
    CGColorRef v8 = CGColorCreate(v6, v9);

    if (v8)
    {
      *a1 = v8;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void Color.init(cgColor:)(CGColor *a1@<X0>, CGColor **a2@<X8>)
{
  id v2 = a1;
  int v4 = CGColorGetColorSpace(a1);
  if (one-time initialization token for extendedSRGBColorSpace != -1) {
    swift_once();
  }
  int v5 = CFEqual(v4, (CFTypeRef)static Color.extendedSRGBColorSpace);

  if (!v5)
  {
    CGColorRef CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.extendedSRGBColorSpace, kCGRenderingIntentDefault, v2, 0);

    id v2 = CopyByMatchingToColorSpace;
  }
  *a2 = v2;
}

void static Color.white.getter(CGColorRef *a1@<X8>)
{
}

void static Color.gray.getter(CGColorRef *a1@<X8>)
{
}

void Color.red.getter()
{
  id v1 = *v0;
  uint64_t v2 = CGColorRef.components.getter();

  if (v2)
  {
    if (*(void *)(v2 + 16))
    {
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void Color.green.getter()
{
  id v1 = *v0;
  uint64_t v2 = CGColorRef.components.getter();

  if (v2)
  {
    if (*(void *)(v2 + 16) >= 2uLL)
    {
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void Color.blue.getter()
{
  id v1 = *v0;
  uint64_t v2 = CGColorRef.components.getter();

  if (v2)
  {
    if (*(void *)(v2 + 16) >= 3uLL)
    {
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void Color.alpha.getter()
{
  id v1 = *v0;
  uint64_t v2 = CGColorRef.components.getter();

  if (v2)
  {
    if (*(void *)(v2 + 16) >= 4uLL)
    {
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

double *Color.almostEqual(_:)(void **a1)
{
  uint64_t v2 = *a1;
  id v3 = *v1;
  CGColorSpaceRef result = (double *)CGColorRef.components.getter();
  if (!result) {
    goto LABEL_30;
  }
  if (!*((void *)result + 2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  double v5 = result[4];

  swift_bridgeObjectRelease();
  id v6 = v2;
  CGColorSpaceRef result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!*((void *)result + 2)) {
    goto LABEL_23;
  }
  double v7 = result[4];

  swift_bridgeObjectRelease();
  if (vabdd_f64(v5, v7) >= 0.01) {
    return 0;
  }
  id v8 = v3;
  CGColorSpaceRef result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (*((void *)result + 2) < 2uLL) {
    goto LABEL_24;
  }
  double v9 = result[5];

  swift_bridgeObjectRelease();
  id v10 = v6;
  CGColorSpaceRef result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (*((void *)result + 2) < 2uLL) {
    goto LABEL_25;
  }
  double v11 = result[5];

  swift_bridgeObjectRelease();
  if (vabdd_f64(v9, v11) >= 0.01) {
    return 0;
  }
  id v12 = v8;
  CGColorSpaceRef result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*((void *)result + 2) < 3uLL) {
    goto LABEL_26;
  }
  double v13 = result[6];

  swift_bridgeObjectRelease();
  id v14 = v10;
  CGColorSpaceRef result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (*((void *)result + 2) < 3uLL) {
    goto LABEL_27;
  }
  double v15 = result[6];

  swift_bridgeObjectRelease();
  if (vabdd_f64(v13, v15) >= 0.01) {
    return 0;
  }
  id v16 = v12;
  CGColorSpaceRef result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (*((void *)result + 2) < 4uLL) {
    goto LABEL_28;
  }
  double v17 = result[7];

  swift_bridgeObjectRelease();
  id v18 = v14;
  CGColorSpaceRef result = (double *)CGColorRef.components.getter();
  if (result)
  {
    if (*((void *)result + 2) >= 4uLL)
    {
      double v19 = result[7];

      swift_bridgeObjectRelease();
      return (double *)(vabdd_f64(v17, v19) < 0.01);
    }
    goto LABEL_29;
  }
LABEL_37:
  __break(1u);
  return result;
}

void static Color.random()(CGColorRef *a1@<X8>)
{
  double v2 = (double)specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL) * 1.11022302e-16 + 0.0;
  double v3 = (double)specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL) * 1.11022302e-16 + 0.0;
  double v4 = (double)specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL) * 1.11022302e-16 + 0.0;
  Color.init(red:green:blue:alpha:)(a1, v2, v3, v4, 1.0);
}

uint64_t Color.init(from:)@<X0>(CGColorRef *a1@<X8>)
{
  v56[4] = *(CGFloat *)MEMORY[0x263EF8340];
  dispatch thunk of CRDecoder.valueContainer()();
  if (v1) {
    return swift_release();
  }
  uint64_t v3 = dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
  unint64_t v5 = v4;
  swift_release();
  unint64_t v7 = v5 >> 62;
  switch(v5 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(v3) - v3;
      if (__OFSUB__(HIDWORD(v3), v3)) {
        goto LABEL_52;
      }
      uint64_t v8 = (int)v8;
LABEL_9:
      if (v8 != 16)
      {
LABEL_18:
        uint64_t v22 = type metadata accessor for CRCodingError();
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, MEMORY[0x263F32D80]);
        swift_allocError();
        void *v23 = 0x6F6C6F6320646142;
        v23[1] = 0xEA00000000002E72;
        (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v23, *MEMORY[0x263F32D70], v22);
        swift_willThrow();
        swift_release();
        return outlined consume of Data._Representation(v3, v5);
      }
      CGFloat v49 = a1;
      if (v7)
      {
        if (v7 == 1)
        {
          uint64_t v12 = v3;
          uint64_t v3 = (int)v3;
          uint64_t v13 = (v12 >> 32) - (int)v3;
          if (v12 >> 32 < (int)v3)
          {
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          uint64_t v14 = v12;
          outlined copy of Data._Representation(v12, v5);
          uint64_t v15 = __DataStorage._bytes.getter();
          if (v15)
          {
            uint64_t v16 = v15;
            uint64_t v17 = __DataStorage._offset.getter();
            BOOL v11 = __OFSUB__(v3, v17);
            uint64_t v18 = v3 - v17;
            if (v11)
            {
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
            }
            uint64_t v19 = __DataStorage._length.getter();
            os_log_type_t v20 = (char *)(v16 + v18);
            if (v19 >= v13) {
              uint64_t v19 = v13;
            }
            uint64_t v21 = v19 / 4;
          }
          else
          {
            __DataStorage._length.getter();
            os_log_type_t v20 = 0;
            uint64_t v21 = 0;
          }
          uint64_t v24 = specialized _copyCollectionToContiguousArray<A>(_:)(v20, v21);
          uint64_t v3 = v14;
          outlined consume of Data._Representation(v14, v5);
        }
        else
        {
          uint64_t v25 = *(void *)(v3 + 16);
          uint64_t v26 = *(void *)(v3 + 24);
          swift_retain();
          swift_retain();
          uint64_t v27 = __DataStorage._bytes.getter();
          if (v27)
          {
            uint64_t v28 = v27;
            uint64_t v29 = __DataStorage._offset.getter();
            if (__OFSUB__(v25, v29)) {
              goto LABEL_57;
            }
            id v30 = (char *)(v28 + v25 - v29);
          }
          else
          {
            id v30 = 0;
          }
          if (__OFSUB__(v26, v25)) {
            goto LABEL_55;
          }
          uint64_t v31 = __DataStorage._length.getter();
          if (v30)
          {
            if (v31 >= v26 - v25) {
              uint64_t v32 = v26 - v25;
            }
            else {
              uint64_t v32 = v31;
            }
            uint64_t v33 = v32 / 4;
          }
          else
          {
            uint64_t v33 = 0;
          }
          uint64_t v24 = specialized _copyCollectionToContiguousArray<A>(_:)(v30, v33);
          swift_release();
          swift_release();
        }
      }
      else
      {
        uint64_t v50 = (double *)v3;
        __int16 v51 = v5;
        char v52 = BYTE2(v5);
        char v53 = BYTE3(v5);
        char v54 = BYTE4(v5);
        char v55 = BYTE5(v5);
        uint64_t v24 = specialized _copyCollectionToContiguousArray<A>(_:)((char *)&v50, (v5 >> 50) & 0x3F);
      }
      int64_t v34 = *(void *)(v24 + 16);
      if (v34)
      {
        uint64_t v48 = v3;
        uint64_t v50 = (double *)MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
        uint64_t v35 = 0;
        double v36 = v50;
        do
        {
          LODWORD(v37) = _OSSwapInt32(*(_DWORD *)(v24 + 4 * v35 + 32));
          uint64_t v50 = v36;
          unint64_t v39 = *((void *)v36 + 2);
          unint64_t v38 = *((void *)v36 + 3);
          if (v39 >= v38 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
            double v36 = v50;
          }
          ++v35;
          *((void *)v36 + 2) = v39 + 1;
          v36[v39 + 4] = v37;
        }
        while (v34 != v35);
        swift_bridgeObjectRelease();
        uint64_t v3 = v48;
      }
      else
      {
        swift_bridgeObjectRelease();
        double v36 = (double *)MEMORY[0x263F8EE78];
      }
      unint64_t v40 = *((void *)v36 + 2);
      if (!v40)
      {
        __break(1u);
        goto LABEL_49;
      }
      if (v40 == 1)
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      if (v40 < 3)
      {
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      if (v40 == 3) {
        goto LABEL_51;
      }
      CGFloat v41 = v36[4];
      CGFloat v42 = v36[5];
      CGFloat v43 = v36[6];
      CGFloat v44 = v36[7];
      swift_bridgeObjectRelease();
      v56[0] = v41;
      v56[1] = v42;
      v56[2] = v43;
      v56[3] = v44;
      CGFloat v45 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
      if (!v45)
      {
        __break(1u);
        goto LABEL_59;
      }
      double v46 = v45;
      CGColorRef v47 = CGColorCreate(v45, v56);

      if (!v47)
      {
LABEL_59:
        __break(1u);
        JUMPOUT(0x20C4AB83CLL);
      }
      swift_release();
      uint64_t result = outlined consume of Data._Representation(v3, v5);
      *CGFloat v49 = v47;
      return result;
    case 2uLL:
      uint64_t v10 = *(void *)(v3 + 16);
      uint64_t v9 = *(void *)(v3 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_9;
      }
      goto LABEL_53;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v8 = BYTE6(v5);
      goto LABEL_9;
  }
}

void Color.encode(to:)()
{
  uint64_t v1 = *v0;
  if (CGColorGetNumberOfComponents(v1) != 4)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  double v2 = v1;
  uint64_t v3 = CGColorRef.components.getter();

  if (!v3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!*(void *)(v3 + 16)) {
    goto LABEL_12;
  }
  double v4 = *(double *)(v3 + 32);
  swift_bridgeObjectRelease();
  *(float *)&unsigned int v5 = v4;
  v21[0] = _OSSwapInt32(v5);
  id v6 = v2;
  uint64_t v7 = CGColorRef.components.getter();

  if (!v7)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(v7 + 16) < 2uLL) {
    goto LABEL_13;
  }
  double v8 = *(double *)(v7 + 40);
  swift_bridgeObjectRelease();
  *(float *)&unsigned int v9 = v8;
  v21[1] = _OSSwapInt32(v9);
  uint64_t v10 = v6;
  uint64_t v11 = CGColorRef.components.getter();

  if (!v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(void *)(v11 + 16) < 3uLL) {
    goto LABEL_14;
  }
  double v12 = *(double *)(v11 + 48);
  swift_bridgeObjectRelease();
  *(float *)&unsigned int v13 = v12;
  v21[2] = _OSSwapInt32(v13);
  uint64_t v14 = v10;
  uint64_t v15 = CGColorRef.components.getter();

  if (v15)
  {
    if (*(void *)(v15 + 16) >= 4uLL)
    {
      double v16 = *(double *)(v15 + 56);
      swift_bridgeObjectRelease();
      *(float *)&unsigned int v17 = v16;
      uint64_t v21[3] = _OSSwapInt32(v17);
      uint64_t v18 = specialized Data.init<A>(_:)((uint64_t)v21, (uint64_t)&v22);
      unint64_t v20 = v19;
      Data.encode(to:)();
      outlined consume of Data._Representation(v18, v20);
      return;
    }
    goto LABEL_15;
  }
LABEL_19:
  __break(1u);
}

void Color.withAlphaComponent(_:)(CGColorRef *a1@<X8>, CGFloat a2@<D0>)
{
  id v5 = *v2;
  uint64_t v6 = CGColorRef.components.getter();
  if (!v6) {
    goto LABEL_13;
  }
  if (!*(void *)(v6 + 16))
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  CGFloat v7 = *(double *)(v6 + 32);
  swift_bridgeObjectRelease();
  id v8 = v5;
  uint64_t v9 = CGColorRef.components.getter();

  if (!v9)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(void *)(v9 + 16) < 2uLL) {
    goto LABEL_11;
  }
  CGFloat v10 = *(double *)(v9 + 40);
  swift_bridgeObjectRelease();
  id v11 = v8;
  uint64_t v12 = CGColorRef.components.getter();

  if (!v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(void *)(v12 + 16) < 3uLL) {
    goto LABEL_12;
  }
  CGFloat v13 = *(double *)(v12 + 48);

  swift_bridgeObjectRelease();
  v17[0] = v7;
  v17[1] = v10;
  id v17[2] = v13;
  v17[3] = a2;
  uint64_t v14 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (!v14)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v15 = v14;
  CGColorRef v16 = CGColorCreate(v14, v17);

  if (v16)
  {
    *a1 = v16;
    return;
  }
LABEL_17:
  __break(1u);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Color.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Color.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Color.CodingKeys(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 6579570;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6E65657267;
      goto LABEL_3;
    case 2:
      *a1 = 1702194274;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x6168706C61;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Color.CodingKeys()
{
  uint64_t result = 6579570;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E65657267;
      break;
    case 2:
      uint64_t result = 1702194274;
      break;
    case 3:
      uint64_t result = 0x6168706C61;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Color.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Color.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Color.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Color.CodingKeys and conformance Color.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Color.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Color.CodingKeys and conformance Color.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Color.init(from:)(void *a1@<X0>, CGColorRef *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Color.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Color.CodingKeys and conformance Color.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    goto LABEL_3;
  }
  char v17 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  CGFloat v9 = v18;
  char v17 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  CGFloat v10 = v18;
  char v17 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  CGFloat v11 = v18;
  char v17 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v16[0] = v9;
  v16[1] = v10;
  v16[2] = v11;
  v16[3] = v18;
  uint64_t v12 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (v12)
  {
    CGFloat v13 = v12;
    CGColorRef v14 = CGColorCreate(v12, v16);

    if (v14)
    {
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
      *a2 = v14;
LABEL_3:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void *Color.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Color.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Color.CodingKeys and conformance Color.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  id v9 = v8;
  unint64_t result = (void *)CGColorRef.components.getter();
  if (!result) {
    goto LABEL_18;
  }
  if (!result[2])
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v11 = result[4];

  swift_bridgeObjectRelease();
  uint64_t v19 = v11;
  HIBYTE(v18) = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2) {
    return (void *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  id v12 = v9;
  unint64_t result = (void *)CGColorRef.components.getter();
  if (!result) {
    goto LABEL_19;
  }
  if (result[2] < 2uLL) {
    goto LABEL_15;
  }
  uint64_t v13 = result[5];

  swift_bridgeObjectRelease();
  uint64_t v19 = v13;
  HIBYTE(v18) = 1;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  id v14 = v12;
  unint64_t result = (void *)CGColorRef.components.getter();
  if (!result) {
    goto LABEL_20;
  }
  if (result[2] >= 3uLL)
  {
    uint64_t v15 = result[6];

    swift_bridgeObjectRelease();
    uint64_t v19 = v15;
    HIBYTE(v18) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    id v16 = v14;
    unint64_t result = (void *)CGColorRef.components.getter();
    if (!result) {
      goto LABEL_21;
    }
    if (result[2] >= 4uLL)
    {
      uint64_t v17 = result[7];

      swift_bridgeObjectRelease();
      uint64_t v19 = v17;
      HIBYTE(v18) = 3;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      return (void *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

void Color.hash(into:)()
{
  uint64_t v1 = *v0;
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
  id v2 = v1;
  _CFObject.hash(into:)();
}

Swift::Int Color.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color()
{
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance Color(void *a1@<X0>, CGColorRef *a2@<X8>)
{
}

void *protocol witness for Encodable.encode(to:) in conformance Color(void *a1)
{
  return Color.encode(to:)(a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Color(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type Color and conformance Color();
  unint64_t v7 = lazy protocol witness table accessor for type Color and conformance Color();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Color@<X0>(CGColorRef *a1@<X8>)
{
  return Color.init(from:)(a1);
}

void protocol witness for CRCodable.encode(to:) in conformance Color()
{
}

void Color.isDefaultState.getter()
{
  memset(v3, 0, 24);
  v3[3] = 1.0;
  uint64_t v0 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (v0)
  {
    uint64_t v1 = v0;
    CGColorRef v2 = CGColorCreate(v0, v3);

    if (v2)
    {
      type metadata accessor for CGColorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
      static _CFObject.== infix(_:_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void Color.init(defaultState:)(CGColorRef *a1@<X8>)
{
  memset(v5, 0, 24);
  v5[3] = 1.0;
  CGColorRef v2 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (v2)
  {
    uint64_t v3 = v2;
    CGColorRef v4 = CGColorCreate(v2, v5);

    if (v4)
    {
      *a1 = v4;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color.CodingKeys and conformance Color.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys;
  if (!lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys;
  if (!lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys;
  if (!lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys;
  if (!lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys);
  }
  return result;
}

id sub_20C4ACBE4@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  CGColorRef v2 = *a1;
  *a2 = v2;
  return v2;
}

void sub_20C4ACBF0(id *a1)
{
}

ValueMetadata *type metadata accessor for Color()
{
  return &type metadata for Color;
}

unsigned char *storeEnumTagSinglePayload for Color.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C4ACCF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Color.CodingKeys()
{
  return &type metadata for Color.CodingKeys;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t __buf = 0;
    arc4random_buf(&__buf, 8uLL);
    unint64_t result = (__buf * (unsigned __int128)v1) >> 64;
    if (__buf * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > __buf * v1)
      {
        do
        {
          unint64_t __buf = 0;
          arc4random_buf(&__buf, 8uLL);
        }
        while (v2 > __buf * v1);
        return (__buf * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized Color.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Color.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t _OSSwapInt32(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v53 = type metadata accessor for CRKeyPath();
  uint64_t v2 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  unsigned int v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v55 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v55);
  CGFloat v43 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  CGFloat v42 = (char *)&v38 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  id v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  char v52 = (char *)&v38 - v17;
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v46 = a1 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v50 = v13 + 32;
  uint64_t v51 = v13 + 16;
  CGFloat v49 = (void (**)(char *, uint64_t))(v2 + 8);
  int64_t v47 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v48 = v13 + 8;
  uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v40 = v8;
  CGFloat v45 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v54 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  unint64_t v44 = MEMORY[0x263F8EE78];
  if (!v21) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v25 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (unint64_t i = v25 | (v24 << 6); ; unint64_t i = __clz(__rbit64(v29)) + (v24 << 6))
  {
    uint64_t v27 = v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v52, *(void *)(v54 + 48) + *(void *)(v13 + 72) * i, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v27, v12);
    WeakRef.id.getter();
    CRKeyPath.uuid.getter();
    (*v49)(v4, v53);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    if ((*v22)(v7, 1, v55) == 1)
    {
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
      if (v21) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v31 = *v45;
      (*v45)(v42, v7, v55);
      CGFloat v41 = v31;
      v31(v43, v42, v55);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, v44);
      }
      unint64_t v33 = *(void *)(v44 + 16);
      unint64_t v32 = *(void *)(v44 + 24);
      unint64_t v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        unint64_t v39 = v33 + 1;
        uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v44);
        unint64_t v34 = v39;
        unint64_t v44 = v37;
      }
      uint64_t v35 = v43;
      unint64_t v36 = v44;
      *(void *)(v44 + 16) = v34;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v41)(v36+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v33, v35, v55);
      if (v21) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v28 >= v47) {
      goto LABEL_29;
    }
    unint64_t v29 = *(void *)(v46 + 8 * v28);
    ++v24;
    if (!v29)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v47) {
        goto LABEL_29;
      }
      unint64_t v29 = *(void *)(v46 + 8 * v24);
      if (!v29)
      {
        int64_t v24 = v28 + 2;
        if (v28 + 2 >= v47) {
          goto LABEL_29;
        }
        unint64_t v29 = *(void *)(v46 + 8 * v24);
        if (!v29)
        {
          int64_t v24 = v28 + 3;
          if (v28 + 3 >= v47) {
            goto LABEL_29;
          }
          unint64_t v29 = *(void *)(v46 + 8 * v24);
          if (!v29) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v21 = (v29 - 1) & v29;
  }
  int64_t v30 = v28 + 4;
  if (v30 >= v47)
  {
LABEL_29:
    swift_release();
    return v44;
  }
  unint64_t v29 = *(void *)(v46 + 8 * v30);
  if (v29)
  {
    int64_t v24 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v24 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v24 >= v47) {
      goto LABEL_29;
    }
    unint64_t v29 = *(void *)(v46 + 8 * v24);
    ++v30;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;

  uint64_t v14 = MEMORY[0x263F8EE78];
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  unsigned int v4 = -1;
  if (v3 < 64) {
    unsigned int v4 = ~(-1 << v3);
  }
  uint64_t v5 = v4 & *(void *)(a1 + 56);
  uint64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)(*(void *)(a1 + 48) + 8 * i));
    MEMORY[0x21054D330]();
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = specialized Array._endMutation()();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v6) {
      goto LABEL_25;
    }
    uint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      uint64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_25;
      }
      uint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        uint64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_25;
        }
        uint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          uint64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_25;
          }
          uint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v5 = (v12 - 1) & v12;
  }
  uint64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_25:
    swift_release();
    return v14;
  }
  uint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    uint64_t v8 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_25;
    }
    uint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int (**v22)(char *, uint64_t, uint64_t);
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t i;
  char *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  void (*v31)(char *, char *, uint64_t);
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  unint64_t v44;
  void (**v45)(char *, char *, uint64_t);
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  void (**v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  uint64_t v53 = type metadata accessor for CRKeyPath();
  uint64_t v2 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  unsigned int v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  CGFloat v43 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  CGFloat v42 = (char *)&v38 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  char v52 = (char *)&v38 - v17;
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v46 = a1 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v50 = v13 + 32;
  uint64_t v51 = v13 + 16;
  CGFloat v49 = (void (**)(char *, uint64_t))(v2 + 8);
  int64_t v47 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v48 = v13 + 8;
  uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v40 = v8;
  CGFloat v45 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v54 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  unint64_t v44 = MEMORY[0x263F8EE78];
  if (!v21) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v25 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (unint64_t i = v25 | (v24 << 6); ; unint64_t i = __clz(__rbit64(v29)) + (v24 << 6))
  {
    uint64_t v27 = v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v52, *(void *)(v54 + 48) + *(void *)(v13 + 72) * i, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v27, v12);
    WeakRef.id.getter();
    CRKeyPath.uuid.getter();
    (*v49)(v4, v53);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((*v22)(v7, 1, v55) == 1)
    {
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
      if (v21) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v31 = *v45;
      (*v45)(v42, v7, v55);
      CGFloat v41 = v31;
      v31(v43, v42, v55);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, v44);
      }
      unint64_t v33 = *(void *)(v44 + 16);
      unint64_t v32 = *(void *)(v44 + 24);
      unint64_t v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        unint64_t v39 = v33 + 1;
        uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v44);
        unint64_t v34 = v39;
        unint64_t v44 = v37;
      }
      uint64_t v35 = v43;
      unint64_t v36 = v44;
      *(void *)(v44 + 16) = v34;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v41)(v36+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v33, v35, v55);
      if (v21) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v28 >= v47) {
      goto LABEL_29;
    }
    unint64_t v29 = *(void *)(v46 + 8 * v28);
    ++v24;
    if (!v29)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v47) {
        goto LABEL_29;
      }
      unint64_t v29 = *(void *)(v46 + 8 * v24);
      if (!v29)
      {
        int64_t v24 = v28 + 2;
        if (v28 + 2 >= v47) {
          goto LABEL_29;
        }
        unint64_t v29 = *(void *)(v46 + 8 * v24);
        if (!v29)
        {
          int64_t v24 = v28 + 3;
          if (v28 + 3 >= v47) {
            goto LABEL_29;
          }
          unint64_t v29 = *(void *)(v46 + 8 * v24);
          if (!v29) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v21 = (v29 - 1) & v29;
  }
  int64_t v30 = v28 + 4;
  if (v30 >= v47)
  {
LABEL_29:
    swift_release();
    return v44;
  }
  unint64_t v29 = *(void *)(v46 + 8 * v30);
  if (v29)
  {
    int64_t v24 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v24 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v24 >= v47) {
      goto LABEL_29;
    }
    unint64_t v29 = *(void *)(v46 + 8 * v24);
    ++v30;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPress);
    lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, &lazy cache variable for type metadata for UIPress);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v29;
    uint64_t v28 = v30;
    uint64_t v3 = v31;
    uint64_t v2 = v32;
    unint64_t v4 = v33;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v28 = a1 + 56;
    uint64_t v3 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  int64_t v27 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v26 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v8 = v2;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_38;
    }
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPress);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = v34;
    swift_unknownObjectRelease();
    if (!v34) {
      goto LABEL_38;
    }
LABEL_31:
    id v15 = v11;
    id v16 = objc_msgSend(v15, sel_key);
    if (v16)
    {
      id v17 = v16;
      id v18 = objc_msgSend(v17, sel_characters);
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      unint64_t v21 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
      }
      unint64_t v23 = v21[2];
      unint64_t v22 = v21[3];
      if (v23 >= v22 >> 1) {
        unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v21);
      }
      v21[2] = v23 + 1;
      uint64_t v26 = v21;
      int64_t v24 = &v21[2 * v23];
      v24[4] = v25;
      v24[5] = v20;
    }
    else
    {
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v10 = v9 | (v2 << 6);
LABEL_30:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  int64_t v12 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v12 >= v27) {
      goto LABEL_38;
    }
    unint64_t v13 = *(void *)(v28 + 8 * v12);
    ++v2;
    if (!v13)
    {
      uint64_t v2 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_38;
      }
      unint64_t v13 = *(void *)(v28 + 8 * v2);
      if (!v13)
      {
        uint64_t v2 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_38;
        }
        unint64_t v13 = *(void *)(v28 + 8 * v2);
        if (!v13)
        {
          uint64_t v2 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_38;
          }
          unint64_t v13 = *(void *)(v28 + 8 * v2);
          if (!v13)
          {
            uint64_t v2 = v8 + 5;
            if (v8 + 5 >= v27) {
              goto LABEL_38;
            }
            unint64_t v13 = *(void *)(v28 + 8 * v2);
            if (!v13)
            {
              uint64_t v14 = v8 + 6;
              while (v27 != v14)
              {
                unint64_t v13 = *(void *)(v28 + 8 * v14++);
                if (v13)
                {
                  uint64_t v2 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              outlined consume of [AnyHashable : Any].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v2 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

void CanvasElementResizeView.selection.setter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  uint64_t v84 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v95 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  id v94 = (char *)&v72 - v13;
  uint64_t v93 = type metadata accessor for CRKeyPath();
  uint64_t v96 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  id v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v5 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas;
  id v17 = (char *)MEMORY[0x210550400](v5 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (!v17)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  id v18 = &OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v19 = *(void *)&v17[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v19)
  {
    if (*(unsigned char *)(v19 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) == 1)
    {

      goto LABEL_7;
    }
    int v77 = a4;
    uint64_t v20 = *(void *)&v17[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
    if (v20)
    {
      char v21 = *(unsigned char *)(v20 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing);

      if (v21) {
        goto LABEL_7;
      }
    }
    else
    {
    }
    uint64_t v78 = a2;
    unint64_t v22 = (void *)MEMORY[0x210550400](v16);
    uint64_t v83 = v16;
    if (v22)
    {
      unint64_t v23 = v22;
      int64_t v24 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v22) + 0x320))();

      if (v24)
      {
        type metadata accessor for TiledTextView();
        if (swift_dynamicCastClass())
        {
          id v73 = v24;
          unint64_t v25 = TiledTextView.paperAttachments.getter();
          unint64_t v79 = v25;
          if (v25 >> 62) {
            goto LABEL_48;
          }
          uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v26)
          {
            while (1)
            {
              uint64_t v27 = 0;
              unint64_t v81 = v79 & 0xC000000000000001;
              unint64_t v74 = v79 + 32;
              uint64_t v89 = v10 + 32;
              uint64_t v90 = v10 + 16;
              uint64_t v87 = v96 + 32;
              uint64_t v88 = v10 + 8;
              uint64_t v91 = v15;
              uint64_t v76 = v5;
              uint64_t v75 = a1;
              uint64_t v80 = v26;
              while (1)
              {
                if (v81)
                {
                  uint64_t v29 = (char *)MEMORY[0x21054E050](v27, v79);
                  BOOL v30 = __OFADD__(v27, 1);
                  uint64_t v31 = v27 + 1;
                  if (v30) {
                    goto LABEL_47;
                  }
                }
                else
                {
                  uint64_t v29 = (char *)*(id *)(v74 + 8 * v27);
                  BOOL v30 = __OFADD__(v27, 1);
                  uint64_t v31 = v27 + 1;
                  if (v30) {
                    goto LABEL_47;
                  }
                }
                uint64_t v85 = v31;
                uint64_t v86 = v29;
                uint64_t v32 = MEMORY[0x210550400](v16);
                if (!v32) {
                  break;
                }
                unint64_t v33 = (void *)v32;
                type metadata accessor for AnyCanvas();
                uint64_t v28 = v86;
                char v34 = static NSObject.== infix(_:_:)();

                if ((v34 & 1) == 0) {
                  break;
                }
LABEL_18:

                uint64_t v27 = v85;
                if (v85 == v80) {
                  goto LABEL_49;
                }
              }
              uint64_t v35 = *(void *)&v86[*v18];
              if (!v35) {
                goto LABEL_69;
              }
              uint64_t v82 = *v18;
              id v18 = *(uint64_t **)(v35 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
              int64_t v36 = v18[2];
              if (!v36) {
                break;
              }
              v97[0] = MEMORY[0x263F8EE78];
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
              uint64_t v5 = specialized Set.startIndex.getter(v18);
              a1 = v37;
              char v39 = v38 & 1;
              long long v92 = v18 + 7;
              while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *((unsigned char *)v18 + 32))
              {
                if (((*(unint64_t *)((char *)v92 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
                  goto LABEL_45;
                }
                if (*((_DWORD *)v18 + 9) != a1) {
                  goto LABEL_46;
                }
                uint64_t v40 = v94;
                (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v94, v18[6] + *(void *)(v10 + 72) * v5, v9);
                CGFloat v41 = v95;
                (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v95, v40, v9);
                MEMORY[0x21054BA70](v9);
                (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
                uint64_t v42 = v97[0];
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1);
                  uint64_t v42 = v97[0];
                }
                unint64_t v44 = *(void *)(v42 + 16);
                unint64_t v43 = *(void *)(v42 + 24);
                uint64_t v16 = v44 + 1;
                if (v44 >= v43 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
                  uint64_t v42 = v97[0];
                }
                *(void *)(v42 + 16) = v16;
                unint64_t v45 = v42
                    + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))
                    + *(void *)(v96 + 72) * v44;
                id v15 = v91;
                (*(void (**)(unint64_t, char *, uint64_t))(v96 + 32))(v45, v91, v93);
                v97[0] = v42;
                uint64_t v46 = specialized _NativeSet.index(after:)(v5, a1, v39 & 1, v18);
                uint64_t v5 = v46;
                a1 = v47;
                char v39 = v48 & 1;
                if (!--v36)
                {
                  outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v46, v47, v48 & 1);
                  swift_bridgeObjectRelease();
                  uint64_t v5 = v76;
                  a1 = v75;
                  goto LABEL_40;
                }
              }
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              swift_bridgeObjectRetain();
              uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
              if (!v26) {
                goto LABEL_49;
              }
            }
            uint64_t v42 = MEMORY[0x263F8EE78];
LABEL_40:
            uint64_t v49 = *(void *)(v42 + 16);
            swift_bridgeObjectRelease();
            uint64_t v16 = v83;
            id v18 = &OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
            id v50 = v86;
            if (v49)
            {
              uint64_t v51 = *(void **)&v86[v82];
              if (!v51) {
                goto LABEL_70;
              }
              uint64_t v28 = v51;
              CanvasElementResizeView.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
            }
            else
            {
              uint64_t v28 = v86;
            }
            goto LABEL_18;
          }
LABEL_49:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
    }
    uint64_t v52 = v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v53 = *(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    uint64_t v54 = *(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
    uint64_t v55 = *(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
    char v56 = *(unsigned char *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (specialized static Set.== infix(_:_:)(v53, a1))
    {
      char v57 = specialized static Set.== infix(_:_:)(v54, v78);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v58 = v77;
      if (v57)
      {
        if (v56)
        {
          if (v77) {
            goto LABEL_67;
          }
        }
        else if ((v77 & 1) == 0 && v55 == v84)
        {
          goto LABEL_67;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v58 = v77;
    }
    uint64_t v59 = (void *)MEMORY[0x210550400](v83);
    if (!v59)
    {
LABEL_67:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    char v60 = v58;
    Swift::String v61 = v59;
    uint64_t v62 = swift_bridgeObjectRetain();
    uint64_t v63 = specialized Sequence.compactMap<A>(_:)(v62, v61);
    swift_bridgeObjectRelease();

    uint64_t v64 = v78;
    *(void *)uint64_t v52 = a1;
    *(void *)(v52 + 8) = v64;
    *(void *)(v52 + 16) = v84;
    *(unsigned char *)(v52 + 24) = v60 & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CanvasElementResizeView.selectionChanged(oldCanvasElements:)((Swift::OpaquePointer)v63);
    swift_bridgeObjectRelease();
    v97[3] = &type metadata for PencilAndPaperFeatureFlags;
    v97[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
    LOBYTE(v97[0]) = 0;
    char v65 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
    if (v65) {
      CanvasElementResizeView.ensureStrokesAreSelected()();
    }
    uint64_t v66 = MEMORY[0x210550400](v83);
    if (v66)
    {
      id v67 = (void *)v66;
      if (*(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController))
      {
        uint64_t v68 = *(void *)v52;
        uint64_t v69 = *(void *)(v52 + 8);
        uint64_t v70 = *(void *)(v52 + 16);
        char v71 = *(unsigned char *)(v52 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MiniMenuState.update(from:in:)(v68, v69, v70, v71, v67);

        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
  }
}

uint64_t CanvasElementResizeView.resizingStrokes.getter()
{
  uint64_t v1 = type metadata accessor for PKDrawing();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v21 - v7;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24)) {
    return MEMORY[0x263F8EE88];
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16) != 6) {
    return MEMORY[0x263F8EE88];
  }
  uint64_t v9 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v6);
  if (!v9) {
    return MEMORY[0x263F8EE88];
  }
  uint64_t v10 = v9;
  uint64_t v11 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v9) + 0x2F8))();
  uint64_t v13 = v12;

  uint64_t ObjectType = swift_getObjectType();
  id v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);

  if (!v15) {
    return MEMORY[0x263F8EE88];
  }
  id v16 = objc_msgSend(v15, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v4, v1);
  type metadata accessor for PKDrawingCoherence(0);
  if ((swift_dynamicCast() & 1) == 0) {
    return MEMORY[0x263F8EE88];
  }
  id v17 = (void *)v21[1];
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = specialized _NativeSet.filter(_:)(v18, v17);

  return v19;
}

Swift::Void __swiftcall CanvasElementResizeView.selectionChanged(oldCanvasElements:)(Swift::OpaquePointer oldCanvasElements)
{
  CanvasElementResizeView.addControlHandles()();
  objc_msgSend(v1, sel_layoutSubviews);
  unint64_t v45 = v1;
  CanvasElementResizeView.endTransform(cancel:)(1);
  if ((unint64_t)oldCanvasElements._rawValue >> 62) {
    goto LABEL_49;
  }
  uint64_t v3 = *(void *)(((unint64_t)oldCanvasElements._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  rawValue = oldCanvasElements._rawValue;
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v44 = (unint64_t)oldCanvasElements._rawValue & 0xC000000000000001;
    CGFloat v41 = (char *)oldCanvasElements._rawValue + 32;
    unint64_t v42 = (unint64_t)oldCanvasElements._rawValue & 0xFFFFFFFFFFFFFF8;
    do
    {
      if (v44)
      {
        uint64_t v5 = (void *)MEMORY[0x21054E050](v4, rawValue);
      }
      else
      {
        if (v4 >= *(void *)(v42 + 16)) {
          goto LABEL_47;
        }
        uint64_t v5 = *(id *)&v41[8 * v4];
      }
      double v6 = v5;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      id v8 = v45;
      uint64_t v9 = swift_bridgeObjectRetain();
      unint64_t v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);
      swift_bridgeObjectRelease();

      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = (void *)_CocoaArrayWrapper.endIndex.getter();
        if (!v11) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v11 = *(void **)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v11) {
          goto LABEL_5;
        }
      }
      if ((v10 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x21054E050](0, v10);
      }
      else {
        id v12 = *(id *)(v10 + 32);
      }
      uint64_t v13 = v12;
      type metadata accessor for AnyCanvasElementView();
      char v14 = static NSObject.== infix(_:_:)();

      if (v14)
      {
LABEL_17:
        swift_bridgeObjectRelease_n();
        goto LABEL_6;
      }
      if (v11 != (void *)1)
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          MEMORY[0x21054E050](1, v10);
          char v15 = static NSObject.== infix(_:_:)();
          swift_unknownObjectRelease();
          if (v15) {
            goto LABEL_17;
          }
          if (v11 != (void *)2)
          {
            uint64_t v16 = 2;
            do
            {
              MEMORY[0x21054E050](v16, v10);
              oldCanvasElements._rawValue = (void *)(v16 + 1);
              if (__OFADD__(v16, 1)) {
                goto LABEL_46;
              }
              char v17 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if (v17) {
                goto LABEL_17;
              }
              ++v16;
            }
            while (oldCanvasElements._rawValue != v11);
          }
        }
        else
        {
          id v18 = *(id *)(v10 + 40);
          char v19 = static NSObject.== infix(_:_:)();

          if (v19) {
            goto LABEL_17;
          }
          if (v11 != (void *)2)
          {
            uint64_t v20 = 6;
            while (1)
            {
              oldCanvasElements._rawValue = (void *)(v20 - 3);
              if (__OFADD__(v20 - 4, 1)) {
                break;
              }
              id v21 = *(id *)(v10 + 8 * v20);
              char v22 = static NSObject.== infix(_:_:)();

              if (v22) {
                goto LABEL_17;
              }
              ++v20;
              if (oldCanvasElements._rawValue == v11) {
                goto LABEL_5;
              }
            }
LABEL_48:
            __break(1u);
LABEL_49:
            swift_bridgeObjectRetain();
            uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
            goto LABEL_3;
          }
        }
      }
LABEL_5:
      swift_bridgeObjectRelease_n();
      (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x230))(0);
LABEL_6:
    }
    while (v4 != v3);
  }
  swift_bridgeObjectRelease();
  unint64_t v23 = v45;
  uint64_t v24 = swift_bridgeObjectRetain();
  unint64_t v25 = specialized Sequence.compactMap<A>(_:)(v24, (uint64_t)v23);
  swift_bridgeObjectRelease();

  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v26) {
      goto LABEL_51;
    }
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v26) {
      goto LABEL_51;
    }
  }
  if (v26 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v26; ++i)
  {
    if ((v25 & 0xC000000000000001) != 0) {
      uint64_t v28 = (void *)MEMORY[0x21054E050](i, v25);
    }
    else {
      uint64_t v28 = *(id *)(v25 + 8 * i + 32);
    }
    uint64_t v29 = v28;
    (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v28) + 0x230))(1);
  }
LABEL_51:
  swift_bridgeObjectRelease();
  UIAccessibilityNotifications v30 = *MEMORY[0x263F831C0];
  uint64_t v31 = *(void *)&v23[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController];
  if (v31
    && (uint64_t v32 = *(void **)(v31 + 16)) != 0
    && (id v33 = objc_msgSend(v32, sel_view)) != 0)
  {
    uint64_t v46 = v33;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    char v34 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  }
  else
  {
    char v34 = 0;
  }
  UIAccessibilityPostNotification(v30, v34);
  swift_unknownObjectRelease();
  uint64_t v35 = v23;
  uint64_t v36 = swift_bridgeObjectRetain();
  unint64_t v37 = specialized Sequence.compactMap<A>(_:)(v36, (uint64_t)v35);
  swift_bridgeObjectRelease();

  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v39._object = (void *)0xE900000000000073;
  v39._uint64_t countAndFlagsBits = 0x746E656D656C6520;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  uint64_t v40 = (void *)MEMORY[0x21054D080](0x676E697A69736552, 0xE900000000000020);
  swift_bridgeObjectRelease();
  objc_msgSend(v35, sel_setAccessibilityLabel_, v40);
}

char *CanvasElementResizeView.init(frame:canvas:)(void *a1, double a2, double a3, double a4, double a5)
{
  *(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController) = 0;
  *(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_moreButton) = 0;
  *(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_contextMenuInteraction) = 0;
  *(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_tapGestureRecognizer) = 0;
  *(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_doubleTapGestureRecognizer) = 0;
  uint64_t v10 = v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation;
  *(void *)uint64_t v10 = 0;
  *(void *)(v10 + 8) = 0;
  *(unsigned char *)(v10 + 16) = 1;
  *(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage) = 0;
  *(unsigned char *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_suppressMiniMenu) = 0;
  uint64_t v11 = v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v12 = MEMORY[0x263F8EE88];
  *(void *)uint64_t v11 = MEMORY[0x263F8EE88];
  *(void *)(v11 + 8) = v12;
  *(void *)(v11 + 16) = 6;
  *(unsigned char *)(v11 + 24) = 0;
  *(void *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement) = 0;
  id v34 = a1;
  ResizeView.init(frame:canvas:resizeHandles:)(v34, 0, a2, a3, a4, a5);
  char v14 = (char *)v13;
  char v15 = (void *)MEMORY[0x21054D080](0xD000000000000027, 0x800000020C857790);
  objc_msgSend(v14, sel_setAccessibilityIdentifier_, v15);

  type metadata accessor for MiniMenuController();
  swift_allocObject();
  uint64_t v16 = MiniMenuController.init()();
  v16[5] = &protocol witness table for CanvasElementResizeView;
  uint64_t v17 = swift_unknownObjectWeakAssign();
  if (MEMORY[0x210550400](v17))
  {
    uint64_t v18 = v16[5];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
    id v21 = v14;
    char v22 = (void *)v20(ObjectType, v18);
    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v23 = v14;
    char v22 = 0;
  }
  swift_unknownObjectWeakAssign();

  *(void *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController] = v16;
  swift_release();
  id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v14, sel_tapped_);
  uint64_t v25 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_tapGestureRecognizer;
  uint64_t v26 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_tapGestureRecognizer];
  *(void *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_tapGestureRecognizer] = v24;

  uint64_t result = *(char **)&v14[v25];
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = (char *)objc_msgSend(result, sel_setDelegate_, v14);
  if (!*(void *)&v14[v25])
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v14, sel_addGestureRecognizer_);
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v14, sel_doubleTapped_);
  uint64_t v29 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_doubleTapGestureRecognizer;
  UIAccessibilityNotifications v30 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_doubleTapGestureRecognizer];
  *(void *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_doubleTapGestureRecognizer] = v28;

  uint64_t result = *(char **)&v14[v29];
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(result, sel_setNumberOfTapsRequired_, 2);
  uint64_t result = *(char **)&v14[v29];
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(result, sel_setDelegate_, v14);
  uint64_t result = *(char **)&v14[v25];
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!*(void *)&v14[v29])
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (char *)objc_msgSend(result, sel_requireGestureRecognizerToFail_);
  if (*(void *)&v14[v29])
  {
    objc_msgSend(v14, sel_addGestureRecognizer_);
    id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F826B8]), sel_initWithDelegate_, v14);
    objc_msgSend(v31, sel__setLiftDelay_, 0.5);
    objc_msgSend(v31, sel__setPointerLiftDelay_, 0.5);
    objc_msgSend(v31, sel__setAllowsPointerDragBeforeLiftDelay_, 0);
    uint64_t v32 = v14;
    id v33 = v31;
    objc_msgSend(v32, sel_addInteraction_, v33);

    return v32;
  }
LABEL_18:
  __break(1u);
  return result;
}

Swift::Void __swiftcall CanvasElementResizeView.didMoveToWindow()()
{
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for CanvasElementResizeView();
  objc_msgSendSuper2(&v6, sel_didMoveToWindow);
  id v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_layer);
  id v2 = objc_msgSend(v0, sel_window);
  uint64_t v3 = v2;
  if (!v2 || (id v4 = objc_msgSend(v2, sel_tintColor)) == 0)
  {
    if (one-time initialization token for resizeHandleColor != -1) {
      swift_once();
    }
    id v4 = (id)static UIConstants.resizeHandleColor;
  }

  id v5 = objc_msgSend(v4, sel_CGColor);
  objc_msgSend(v1, sel_setBorderColor_, v5);

  if (*(void *)(*(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection] + 16)
    || *(void *)(*(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8] + 16))
  {
    CanvasElementResizeView.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
  }
}

void CanvasElementResizeView.controlHandleCoordinateSpaceScaled.getter(_OWORD *a1@<X8>)
{
  id v3 = v1;
  uint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = specialized Sequence.compactMap<A>(_:)(v4, (uint64_t)v3);
  swift_bridgeObjectRelease();

  if (!(v5 >> 62))
  {
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    CGFloat v11 = 1.0;
    CGFloat v13 = 0.0;
    CGFloat v14 = 0.0;
    CGFloat v12 = 0.0;
    CGFloat v9 = 0.0;
    CGFloat v10 = 1.0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v15) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v5 & 0xC000000000000001) != 0)
  {
    objc_super v6 = (void *)MEMORY[0x21054E050](0, v5);
    goto LABEL_6;
  }
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    objc_super v6 = *(id *)(v5 + 32);
LABEL_6:
    uint64_t v7 = v6;
    uint64_t v8 = swift_bridgeObjectRelease();
    (*(void (**)(void *__return_ptr, uint64_t))((*MEMORY[0x263F8EED0] & *v7) + 0x1A8))(v21, v8);

    CGFloat v10 = *(double *)v21;
    CGFloat v9 = *(double *)&v21[1];
    CGFloat v12 = *(double *)&v21[2];
    CGFloat v11 = *(double *)&v21[3];
    CGFloat v14 = *(double *)&v21[4];
    CGFloat v13 = *(double *)&v21[5];
LABEL_9:
    ResizeView.modelToViewTransform.getter((long long *)&v22);
    t1.double a = v10;
    t1.double b = v9;
    t1.double c = v12;
    t1.double d = v11;
    t1.tCGFloat x = v14;
    t1.tCGFloat y = v13;
    CGAffineTransform t2 = v22;
    CGAffineTransformConcat(&v18, &t1, &t2);
    long long v16 = *(_OWORD *)&v18.c;
    long long v17 = *(_OWORD *)&v18.tx;
    *a1 = *(_OWORD *)&v18.a;
    a1[1] = v16;
    a1[2] = v17;
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementResizeView.addControlHandles()()
{
  id v1 = (unint64_t *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_controlHandles];
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v3) {
      goto LABEL_10;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_29;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v5 = (id)MEMORY[0x21054E050](i, v2);
    }
    else {
      id v5 = *(id *)(v2 + 8 * i + 32);
    }
    objc_super v6 = v5;
    objc_msgSend(v5, sel_removeFromSuperview);
  }
LABEL_10:
  swift_bridgeObjectRelease();
  unint64_t *v1 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  uint64_t v7 = &v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v3 = v0;
  uint64_t v8 = swift_bridgeObjectRetain();
  unint64_t v2 = specialized Sequence.compactMap<A>(_:)(v8, v3);
  swift_bridgeObjectRelease();

  if (*(void *)(*((void *)v7 + 1) + 16)) {
    goto LABEL_27;
  }
  if (!(v2 >> 62))
  {
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
    {
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_29:
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 != 1) {
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_26;
  }
LABEL_14:
  if ((v2 & 0xC000000000000001) != 0)
  {
    CGFloat v9 = (void *)MEMORY[0x21054E050](0, v2);
    goto LABEL_17;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    CGFloat v9 = *(id *)(v2 + 32);
LABEL_17:
    CGFloat v10 = v9;
    uint64_t v11 = swift_bridgeObjectRelease();
    id v21 = v10;
    uint64_t v22 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v10) + 0x150))(v11);
    uint64_t v12 = *(void *)(v22 + 16);
    if (v12)
    {
      CGFloat v13 = (unsigned __int8 *)(v22 + 32);
      do
      {
        unsigned __int8 v15 = *v13++;
        unsigned __int8 v14 = v15;
        if ((v2 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          id v16 = (id)MEMORY[0x21054E050](0, v2);
          swift_bridgeObjectRelease();
        }
        else
        {
          id v16 = *(id *)(v2 + 32);
        }
        v23[0] = v14;
        id v17 = objc_allocWithZone((Class)type metadata accessor for ControlHandleView());
        id v18 = ControlHandleView.init(elementView:controlPoint:)(v16, v23);
        swift_beginAccess();
        char v19 = (char *)v18;
        MEMORY[0x21054D330]();
        if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        objc_msgSend(*(id *)&v19[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer], sel_addTarget_action_, v3, sel_controlHandleMoved_);
        objc_msgSend((id)v3, sel_addSubview_, v19);

        --v12;
      }
      while (v12);
    }

LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  __break(1u);
}

void CanvasElementResizeView.showRectangularSelection.getter()
{
  id v1 = v0;
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v4 <= 1)
  {
    uint64_t v5 = *(void *)(CanvasElementResizeView.resizingStrokes.getter() + 16);
    swift_bridgeObjectRelease();
    if (!v5)
    {
      id v6 = v1;
      uint64_t v7 = swift_bridgeObjectRetain();
      unint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7, (uint64_t)v6);
      swift_bridgeObjectRelease();

      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v12)
        {
LABEL_8:
          if ((v8 & 0xC000000000000001) != 0)
          {
            CGFloat v9 = (void *)MEMORY[0x21054E050](0, v8);
          }
          else
          {
            if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              return;
            }
            CGFloat v9 = *(id *)(v8 + 32);
          }
          CGFloat v10 = v9;
          uint64_t v11 = swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v10) + 0x108))(v11);

          return;
        }
      }
      else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
  }
}

unint64_t CanvasElementResizeView.showRectangularHandles.getter()
{
  CanvasElementResizeView.showRectangularSelection.getter();
  if (v0) {
    return (CanvasElementResizeView.modifiableProperties.getter() >> 1) & 1;
  }
  else {
    return 0;
  }
}

double CanvasElementResizeView.selectionCornerRadius.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Link>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  double v9 = 0.0;
  if (*(void *)(v8 + 16) == 1)
  {
    specialized Collection.first.getter(v8, (uint64_t)v4);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1, v10) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Link>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
LABEL_5:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Link>?);
      return v9;
    }
    WeakTagged_9.tagged5.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v10);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Link>);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v7, 1, v13) == 1) {
      goto LABEL_5;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Link>?);
    uint64_t v15 = *(void *)(CanvasElementResizeView.resizingStrokes.getter() + 16);
    swift_bridgeObjectRelease();
    if (!v15)
    {
      if (one-time initialization token for resizeCornerRadius != -1) {
        swift_once();
      }
      double v16 = *(double *)&static UIConstants.resizeCornerRadius;
      id v17 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
      if (v17)
      {
        id v18 = v17;
        char v19 = (void *)MEMORY[0x263F8EED0];
        uint64_t v20 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v17) + 0x308))();
        if (v20)
        {
          id v21 = v20;
          objc_msgSend(v20, sel_zoomScale);
          double v23 = v22;
        }
        else
        {
          double v23 = 1.0;
        }
        (*(void (**)(void *__return_ptr))((*v19 & *v18) + 0x5D0))(v28);
        outlined init with take of CGAffineTransform?((uint64_t)v28, (uint64_t)v29);
        if (v30)
        {

          double v25 = 1.0;
        }
        else
        {
          double v26 = *(double *)v29;
          double v27 = *(double *)&v29[1];

          double v25 = sqrt(v26 * v26 + v27 * v27);
        }
        double v24 = v23 * v25;
      }
      else
      {
        double v24 = 1.0;
      }
      return v16 * v24;
    }
  }
  return v9;
}

uint64_t CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace.getter@<X0>(long long *a1@<X8>)
{
  uint64_t result = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (result)
  {
    uint64_t v4 = (void *)result;
    *(void *)&v32.double a = CanvasElementResizeView.resizingStrokes.getter();
    uint64_t v5 = *(double (**)(CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v4) + 0x3D8);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    uint64_t v7 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>, (uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    CGFloat x = v5(&v32, v6, v7);
    CGFloat y = v9;
    CGFloat width = v11;
    CGFloat height = v13;
    swift_bridgeObjectRelease();
    uint64_t v15 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform];
    if ((v1[OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform + 48] & 1) == 0)
    {
      long long v16 = v15[1];
      *(_OWORD *)&v32.double a = *v15;
      *(_OWORD *)&v32.double c = v16;
      *(_OWORD *)&v32.tCGFloat x = v15[2];
      CGFloat v17 = x;
      *(CGFloat *)&long long v16 = y;
      CGFloat v18 = width;
      CGFloat v19 = height;
      CGRect v33 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v16 - 8), &v32);
      CGFloat x = v33.origin.x;
      CGFloat y = v33.origin.y;
      CGFloat width = v33.size.width;
      CGFloat height = v33.size.height;
    }
    uint64_t v20 = v1;
    uint64_t v21 = swift_bridgeObjectRetain();
    unint64_t v22 = specialized Sequence.compactMap<A>(_:)(v21, (uint64_t)v20);
    swift_bridgeObjectRelease();

    double v23 = *(void **)&v20[OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer];
    if (v23)
    {
      objc_msgSend(v23, sel_rotation);
      CGFloat v25 = v24;
    }
    else
    {
      CGFloat v25 = 0.0;
    }
    specialized static CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace(for:strokeBounds:rotateSingleElements:multiSelectionRotation:)(v22, 1, (long long *)&v32, x, y, width, height, v25);
    long long v30 = *(_OWORD *)&v32.c;
    long long v31 = *(_OWORD *)&v32.a;
    long long v29 = *(_OWORD *)&v32.tx;

    uint64_t result = swift_bridgeObjectRelease();
    long long v28 = v29;
    long long v26 = v30;
    long long v27 = v31;
  }
  else
  {
    long long v26 = xmmword_20C8356C0;
    long long v27 = xmmword_20C835600;
    long long v28 = 0uLL;
  }
  *a1 = v27;
  a1[1] = v26;
  a1[2] = v28;
  return result;
}

unsigned __int8 *CanvasElementResizeView.availableSelectionHandles(for:)(double a1, double a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  v42[2] = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  id v5 = v2;
  uint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = specialized Sequence.compactMap<A>(_:)(v6, (uint64_t)v5);
  swift_bridgeObjectRelease();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v43 = v5;
    if (v8) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v43 = v5;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v44 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
  if (v8 < 0)
  {
    __break(1u);
LABEL_38:
    swift_once();
    goto LABEL_26;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v44;
  do
  {
    if ((v7 & 0xC000000000000001) != 0) {
      double v11 = (void *)MEMORY[0x21054E050](v9, v7);
    }
    else {
      double v11 = *(id *)(v7 + 8 * v9 + 32);
    }
    uint64_t v12 = v11;
    uint64_t v13 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x148))();

    uint64_t v44 = v10;
    unint64_t v15 = *(void *)(v10 + 16);
    unint64_t v14 = *(void *)(v10 + 24);
    if (v15 >= v14 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      uint64_t v10 = v44;
    }
    ++v9;
    *(void *)(v10 + 16) = v15 + 1;
    *(void *)(v10 + 8 * v15 + 32) = v13;
  }
  while (v8 != v9);
  swift_bridgeObjectRelease();
  id v5 = v43;
LABEL_14:
  uint64_t v16 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of CanvasElementResizeView.availableSelectionHandles(for:));
  uint64_t v17 = *(void *)(v10 + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    v42[1] = v16;
    do
    {
      uint64_t v19 = *(void *)(v10 + 8 * v18 + 32);
      char v20 = *(unsigned char *)(v16 + 32);
      unsigned int v21 = v20 & 0x3F;
      unint64_t v22 = (unint64_t)((1 << v20) + 63) >> 6;
      size_t v23 = 8 * v22;
      swift_bridgeObjectRetain();
      uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
      if (v21 <= 0xD
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x270FA5388](isStackAllocationSafe);
        bzero((char *)v42 - ((v23 + 15) & 0x3FFFFFFFFFFFFFF0), v23);
        Swift::Int v25 = specialized closure #1 in _NativeSet.intersection(_:)((Swift::Int)v42 - ((v23 + 15) & 0x3FFFFFFFFFFFFFF0), v22, v16, v19);
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v26 = (void *)swift_slowAlloc();
        bzero(v26, v23);
        Swift::Int v25 = specialized closure #1 in _NativeSet.intersection(_:)((Swift::Int)v26, v22, v16, v19);
        swift_bridgeObjectRelease();
        MEMORY[0x210550270](v26, -1, -1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v18;
      uint64_t v16 = v25;
    }
    while (v17 != v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v16 = v25;
    id v5 = v43;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v44 = v16;
  if ((CanvasElementResizeView.modifiableProperties.getter() & 4) == 0)
  {
    specialized Set._Variant.remove(_:)(1u);
    specialized Set._Variant.remove(_:)(5u);
LABEL_43:
    specialized Set._Variant.remove(_:)(7u);
    specialized Set._Variant.remove(_:)(3u);
    goto LABEL_44;
  }
  if (one-time initialization token for resizeMiddleHandlesMinSelectionSize != -1) {
    goto LABEL_38;
  }
LABEL_26:
  if (*(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize > a1)
  {
    specialized Set._Variant.remove(_:)(1u);
    specialized Set._Variant.remove(_:)(5u);
  }
  id v27 = v5;
  uint64_t v28 = swift_bridgeObjectRetain();
  unint64_t v29 = specialized Sequence.compactMap<A>(_:)(v28, (uint64_t)v27);
  swift_bridgeObjectRelease();

  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v30 == 1)
  {
    id v31 = v27;
    uint64_t v32 = swift_bridgeObjectRetain();
    unint64_t v33 = specialized Sequence.compactMap<A>(_:)(v32, (uint64_t)v31);
    swift_bridgeObjectRelease();

    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v37) {
        goto LABEL_33;
      }
    }
    else if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_33:
      if ((v33 & 0xC000000000000001) != 0)
      {
        id v34 = (void *)MEMORY[0x21054E050](0, v33);
      }
      else
      {
        if (!*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          __break(1u);
        }
        id v34 = *(id *)(v33 + 32);
      }
      uint64_t v35 = v34;
      uint64_t v36 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v35) + 0x118))(v36);

      goto LABEL_44;
    }
    swift_bridgeObjectRelease();
  }
  if (*(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize > a2) {
    goto LABEL_43;
  }
LABEL_44:
  id v38 = v5;
  Swift::String v39 = (unsigned __int8 *)swift_bridgeObjectRetain();
  uint64_t v40 = specialized Sequence.compactMap<A>(_:)(v39, (uint64_t)v38);
  swift_bridgeObjectRelease_n();

  return v40;
}

unint64_t CanvasElementResizeView.canDrag.getter()
{
  return CanvasElementResizeView.modifiableProperties.getter() & 1;
}

BOOL CanvasElementResizeView.canRotate.getter()
{
  return CanvasElementResizeView.modifiableProperties.getter() > 7;
}

unint64_t CanvasElementResizeView.canChangeAspectRatio.getter()
{
  return (CanvasElementResizeView.modifiableProperties.getter() >> 2) & 1;
}

void __swiftcall CanvasElementResizeView.hitTestChrome(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  Class isa = with.value.super.isa;
  CGFloat y = _.y;
  CGFloat x = _.x;
  if ((objc_msgSend(v3, sel_isHidden) & 1) == 0)
  {
    v7.value.super.Class isa = isa;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v8, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v7);
    if (!v9.value.super.isa)
    {
      v9.value.super.Class isa = isa;
      ResizeView.hitTestChrome(_:with:)(v10, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v9);
    }
  }
}

void __swiftcall CanvasElementResizeView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  uint64_t v4 = v3;
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  if (objc_msgSend(v3, sel_isHidden)) {
    return;
  }
  if ((objc_msgSend(v3, sel_isHidden) & 1) == 0)
  {
    v8.value.super.Class isa = isa;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v9, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v8);
    if (v16.value.super.isa) {
      return;
    }
    v16.value.super.Class isa = isa;
    ResizeView.hitTestChrome(_:with:)(v17, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v16);
    if (v18) {
      return;
    }
  }
  uint64_t v36 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v37 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v35[0] = 0;
  char v10 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = MEMORY[0x210550400](&v4[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
    if (v11)
    {
      uint64_t v12 = (void *)v11;
      objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_frame);
      v38.double x = x;
      v38.double y = y;
      if (CGRectContainsPoint(v40, v38)
        && (uint64_t v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v12) + 0x320))()) != 0)
      {
        unint64_t v14 = v13;
        id v15 = objc_msgSend(v13, sel_selectionInteraction);

        LOBYTE(v14) = objc_msgSend(v15, sel_currentSelectionHasStrokes);
        if (v14) {
          return;
        }
      }
      else
      {
      }
    }
  }
  uint64_t v19 = v4;
  uint64_t v20 = swift_bridgeObjectRetain();
  unint64_t v21 = specialized Sequence.compactMap<A>(_:)(v20, (uint64_t)v19);
  swift_bridgeObjectRelease();

  if (!(v21 >> 62))
  {
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v22) {
      goto LABEL_15;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    objc_msgSend(*(id *)&v19[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_frame);
    v39.double x = x;
    v39.double y = y;
    if (CGRectContainsPoint(v41, v39))
    {
      CanvasElementResizeView.ensureStrokesAreSelected()();
LABEL_24:
      uint64_t v32 = v19;
    }
    return;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_22;
  }
LABEL_15:
  uint64_t v23 = 4;
  while (1)
  {
    if ((v21 & 0xC000000000000001) != 0) {
      double v24 = (void *)MEMORY[0x21054E050](v23 - 4, v21);
    }
    else {
      double v24 = *(id *)(v21 + 8 * v23);
    }
    Swift::Int v25 = v24;
    uint64_t v26 = v23 - 3;
    if (__OFADD__(v23 - 4, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    objc_msgSend(v24, sel_convertPoint_fromCoordinateSpace_, v19, x, y);
    double v28 = v27;
    double v30 = v29;
    id v31 = objc_msgSend(v25, sel_hitTest_withEvent_, isa);
    if (v31) {
      break;
    }

    ++v23;
    if (v26 == v22) {
      goto LABEL_22;
    }
  }
  unint64_t v33 = v31;
  swift_bridgeObjectRelease();
  CanvasElementResizeView.ensureStrokesAreSelected()();
  self;
  if (swift_dynamicCastObjCClass())
  {
    objc_msgSend(v19, sel_convertPoint_toCoordinateSpace_, v33, x, y);
    objc_msgSend(v33, sel_hitTest_withEvent_, isa);

    return;
  }
  char v34 = (*(uint64_t (**)(double, double))((*MEMORY[0x263F8EED0] & *v25) + 0xC0))(v28, v30);

  if ((v34 & 1) == 0)
  {

    goto LABEL_24;
  }
}

Swift::Void __swiftcall CanvasElementResizeView.controlHandleMoved(_:)(UIPanGestureRecognizer *a1)
{
  id v3 = [(UIPanGestureRecognizer *)a1 view];
  if (v3)
  {
    id v49 = v3;
    type metadata accessor for ControlHandleView();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (id *)(id)v1;
      uint64_t v7 = swift_bridgeObjectRetain();
      unint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7, (uint64_t)v6);
      swift_bridgeObjectRelease();

      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        UIEvent_optional v9 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        char v10 = v49;
        if (v9)
        {
LABEL_5:
          if ((v8 & 0xC000000000000001) != 0)
          {
            uint64_t v11 = (void *)MEMORY[0x21054E050](0, v8);
          }
          else
          {
            if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_43;
            }
            uint64_t v11 = *(id *)(v8 + 32);
          }
          UIEvent_optional v9 = v11;
          swift_bridgeObjectRelease();
          uint64_t v6 = v6;
          uint64_t v12 = swift_bridgeObjectRetain();
          unint64_t v1 = specialized Sequence.compactMap<A>(_:)(v12, (uint64_t)v6);
          swift_bridgeObjectRelease();

          if (v1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v22)
            {
LABEL_10:
              if ((v1 & 0xC000000000000001) == 0)
              {
                if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
LABEL_45:
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  JUMPOUT(0x20C4B0F1CLL);
                }
                uint64_t v13 = *(id *)(v1 + 32);
                goto LABEL_13;
              }
LABEL_43:
              uint64_t v13 = (void *)MEMORY[0x21054E050](0, v1);
LABEL_13:
              unint64_t v14 = v13;
              uint64_t v15 = swift_bridgeObjectRelease();
              (*(void (**)(void *__return_ptr, uint64_t))((*MEMORY[0x263F8EED0] & *v14) + 0x1A8))(v51, v15);

              CGFloat v17 = *(double *)v51;
              CGFloat v16 = *(double *)&v51[1];
              CGFloat v19 = *(double *)&v51[2];
              CGFloat v18 = *(double *)&v51[3];
              CGFloat v21 = *(double *)&v51[4];
              CGFloat v20 = *(double *)&v51[5];
LABEL_24:
              ResizeView.modelToViewTransform.getter((long long *)&v52);
              t1.CGFloat a = v17;
              t1.double b = v16;
              t1.double c = v19;
              t1.double d = v18;
              t1.tdouble x = v21;
              t1.tdouble y = v20;
              CGAffineTransform t2 = v52;
              CGAffineTransformConcat(&v56, &t1, &t2);
              switch((unint64_t)[(UIPanGestureRecognizer *)a1 state])
              {
                case 0uLL:
                  goto LABEL_39;
                case 1uLL:
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
                  uint64_t v36 = swift_allocObject();
                  *(_OWORD *)(v36 + 16) = xmmword_20C835790;
                  *(void *)(v36 + 32) = v9;
                  *(void *)&t1.CGFloat a = v36;
                  specialized Array._endMutation()();
                  CGFloat a = t1.a;
                  UIEvent_optional v9 = v9;
                  CanvasElementResizeView.beginTransform(elements:)(*(Swift::OpaquePointer *)&a);
                  swift_bridgeObjectRelease();
                  LOBYTE(t1.a) = *(unsigned char *)(v5 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint);
                  double v38 = (*(double (**)(CGAffineTransform *, CGAffineTransform *, void, uint64_t))((*MEMORY[0x263F8EED0] & *v9) + 0x158))(&t1, &v56, 0, 1);
                  CGPoint v39 = (char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_originalControlPointLocation;
                  *(double *)CGPoint v39 = v38;
                  *((void *)v39 + 1) = v40;
                  CGRect v41 = *(id *)((char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
                  *(id *)((char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = (id)v5;
                  id v42 = v49;
                  outlined consume of ResizeView.ActiveHandle(v41);

                  goto LABEL_40;
                case 2uLL:
                  [(UIPanGestureRecognizer *)a1 translationInView:v6];
                  double v25 = v24;
                  double v27 = v26;
                  char v28 = *(unsigned char *)(v5 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint);
                  double v29 = (void *)MEMORY[0x210550400]((char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
                  if (v29)
                  {
                    double v30 = v29;
                    id v31 = (void *)MEMORY[0x263F8EED0];
                    uint64_t v32 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v29) + 0x308))();
                    if (v32)
                    {
                      unint64_t v33 = v32;
                      objc_msgSend(v32, sel_zoomScale);
                      double v35 = v34;
                    }
                    else
                    {
                      double v35 = 1.0;
                    }
                    (*(void (**)(CGAffineTransform *__return_ptr))((*v31 & *v30) + 0x5D0))(&t2);
                    outlined init with take of CGAffineTransform?((uint64_t)&t2, (uint64_t)&t1);
                    if (v55)
                    {

                      double v44 = 1.0;
                    }
                    else
                    {
                      double v45 = t1.a;
                      double b = t1.b;

                      double v44 = sqrt(v45 * v45 + b * b);
                    }
                    double v43 = v35 * v44;
                  }
                  else
                  {
                    double v43 = 1.0;
                  }
                  double v47 = v25
                      + *(double *)((char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_originalControlPointLocation);
                  double v48 = v27
                      + *(double *)((char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_originalControlPointLocation + 8);
                  v50[0] = v28;
                  (*(void (**)(unsigned char *, CGAffineTransform *, double, void, double, double))((*MEMORY[0x263F8EED0] & *v9) + 0x160))(v50, &v56, COERCE_DOUBLE(*(void *)&v43), 0, v47, v48);
                  objc_msgSend(v6, sel_setNeedsLayout);
                  goto LABEL_39;
                case 3uLL:
                  Swift::Bool v23 = 0;
                  goto LABEL_31;
                case 4uLL:
                case 5uLL:
                  Swift::Bool v23 = 1;
LABEL_31:
                  CanvasElementResizeView.endTransform(cancel:)(v23);
LABEL_39:

LABEL_40:
                  return;
                default:
                  goto LABEL_45;
              }
            }
          }
          else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_10;
          }
          swift_bridgeObjectRelease();
          CGFloat v18 = 1.0;
          CGFloat v20 = 0.0;
          CGFloat v21 = 0.0;
          CGFloat v19 = 0.0;
          CGFloat v16 = 0.0;
          CGFloat v17 = 1.0;
          goto LABEL_24;
        }
      }
      else
      {
        UIEvent_optional v9 = *(void **)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        char v10 = v49;
        if (v9) {
          goto LABEL_5;
        }
      }

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall CanvasElementResizeView.ensureStrokesAreSelected()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PKDrawing();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v6)
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EED0];
    unint64_t v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x2F8);
    double v25 = v6;
    UIEvent_optional v9 = (void *)v8();
    uint64_t v11 = v10;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(ObjectType, v11);

    if (v13)
    {
      id v14 = objc_msgSend(v13, sel_drawing);

      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
      PKDrawing._bridgeToObjectiveC()(v15);
      CGFloat v17 = v16;
      id v18 = objc_msgSend(v16, sel_uuid);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24))
      {

        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v20 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
        uint64_t v21 = (*(uint64_t (**)(void))((*v7 & *v25) + 0x320))();
        if (v21)
        {
          uint64_t v22 = (void *)v21;
          uint64_t v23 = swift_bridgeObjectRetain();
          specialized Sequence.compactMap<A>(_:)(v23);
          swift_bridgeObjectRelease();
          type metadata accessor for UUID();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v22, sel_setSelectedStrokeIds_selectionType_forAttachment_, isa, v20, v18);
        }
        swift_unknownObjectRelease();
      }
    }
    else
    {
      id v19 = v25;
    }
  }
}

Swift::Void __swiftcall CanvasElementResizeView.beginTransform()()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  CanvasElementResizeView.beginTransform(elements:)((Swift::OpaquePointer)v3);
  swift_bridgeObjectRelease();
  v1[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 1;
  uint64_t v4 = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    AnyCanvas.isResizingChanged()();
  }
  CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace.getter(v18);
  uint64_t v6 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace];
  long long v7 = v18[1];
  *(_OWORD *)uint64_t v6 = v18[0];
  *((_OWORD *)v6 + 1) = v7;
  *((_OWORD *)v6 + 2) = v18[2];
  CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace.getter(v19);
  long long v13 = v19[1];
  long long v14 = v19[0];
  CGFloat v8 = v20;
  CGFloat v9 = v21;
  ResizeView.modelToViewTransform.getter((long long *)&v22);
  *(_OWORD *)&t1.CGFloat a = v14;
  *(_OWORD *)&t1.double c = v13;
  t1.tdouble x = v8;
  t1.tdouble y = v9;
  CGAffineTransform t2 = v22;
  CGAffineTransformConcat(&v15, &t1, &t2);
  long long v10 = *(_OWORD *)&v15.c;
  long long v11 = *(_OWORD *)&v15.tx;
  uint64_t v12 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)&v15.a;
  *((_OWORD *)v12 + 1) = v10;
  *((_OWORD *)v12 + 2) = v11;
}

Swift::Void __swiftcall CanvasElementResizeView.beginTransform(elements:)(Swift::OpaquePointer elements)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle;
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
  outlined copy of ResizeView.ActiveHandle(v5);
  CanvasElementResizeView.endTransform(cancel:)(1);
  uint64_t v6 = *(void **)(v1 + v4);
  *(void *)(v2 + v4) = v5;
  outlined copy of ResizeView.ActiveHandle(v5);
  outlined consume of ResizeView.ActiveHandle(v6);
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements;
  *(Swift::OpaquePointer *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements) = elements;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v8 = *(void *)(v2 + v7);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v9) {
      goto LABEL_10;
    }
  }
  if (v9 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v10 = 0;
  long long v11 = (void *)MEMORY[0x263F8EED0];
  do
  {
    if ((v8 & 0xC000000000000001) != 0) {
      uint64_t v12 = (void *)MEMORY[0x21054E050](v10, v8);
    }
    else {
      uint64_t v12 = *(id *)(v8 + 8 * v10 + 32);
    }
    long long v13 = v12;
    ++v10;
    (*(void (**)(void))((*v11 & *v12) + 0x1E8))();
  }
  while (v9 != v10);
LABEL_10:
  swift_bridgeObjectRelease();
  id v19 = &type metadata for PencilAndPaperFeatureFlags;
  unint64_t v20 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v18[0] = 0;
  char v14 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  if ((v14 & 1) != 0
    && (CanvasElementResizeView.ensureStrokesAreSelected()(),
        (CGAffineTransform v15 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas)) != 0))
  {
    CGFloat v16 = v15;
    CGFloat v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v15) + 0x320))();

    objc_msgSend(v17, sel_transformingSelectionBegan);
    outlined consume of ResizeView.ActiveHandle(v5);
  }
  else
  {
    outlined consume of ResizeView.ActiveHandle(v5);
  }
}

Swift::Void __swiftcall CanvasElementResizeView.updateTransform(with:)(CGAffineTransform *with)
{
  uint64_t v2 = v1;
  double a = with->a;
  CGFloat b = with->b;
  CGFloat c = with->c;
  CGFloat d = with->d;
  tdouble x = with->tx;
  tdouble y = with->ty;
  uint64_t v10 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements;
  uint64_t v11 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements];
  if ((unint64_t)v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v46 = v1;
    if (v12) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v46 = v1;
  if (!v12) {
    goto LABEL_11;
  }
LABEL_3:
  if (v12 < 1)
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v13 = v10;
  uint64_t v14 = 0;
  CGAffineTransform v15 = (void *)MEMORY[0x263F8EED0];
  do
  {
    if ((v11 & 0xC000000000000001) != 0) {
      CGFloat v16 = (void *)MEMORY[0x21054E050](v14, v11);
    }
    else {
      CGFloat v16 = *(id *)(v11 + 8 * v14 + 32);
    }
    CGFloat v17 = v16;
    ++v14;
    (*(void (**)(CGAffineTransform *__return_ptr))((*v15 & *v16) + 0x1A0))(&v49);
    CGAffineTransform t1 = v49;
    t2.double a = a;
    t2.CGFloat b = b;
    t2.CGFloat c = c;
    t2.CGFloat d = d;
    t2.tdouble x = tx;
    t2.tdouble y = ty;
    CGAffineTransformConcat(&v47, &t1, &t2);
    CGAffineTransform v51 = v47;
    (*(void (**)(CGAffineTransform *))((*v15 & *v17) + 0x1B0))(&v51);
  }
  while (v12 != v14);
  swift_bridgeObjectRelease();
  uint64_t v2 = v46;
  uint64_t v10 = v13;
LABEL_12:
  unint64_t v18 = *(void *)&v2[v10];
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (!v11) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_21;
    }
  }
  if (v11 < 1)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v19 = 0;
  do
  {
    if ((v18 & 0xC000000000000001) != 0) {
      id v20 = (id)MEMORY[0x21054E050](v19, v18);
    }
    else {
      id v20 = *(id *)(v18 + 8 * v19 + 32);
    }
    double v21 = v20;
    ++v19;
    objc_msgSend(v20, sel_layoutIfNeeded);
    objc_msgSend(v21, sel_setNeedsDisplay);
  }
  while (v11 != v19);
LABEL_21:
  swift_bridgeObjectRelease();
  *(void *)&t1.CGFloat d = &type metadata for PencilAndPaperFeatureFlags;
  *(void *)&t1.tdouble x = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(t1.a) = 0;
  char v22 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&t1);
  if (v22)
  {
    uint64_t v23 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
    if (v23)
    {
      double v24 = v23;
      double v25 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v23) + 0x320))();

      t1.double a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tdouble x = tx;
      t1.tdouble y = ty;
      objc_msgSend(v25, sel_transformingSelectionChanged_, &t1);
    }
  }
  t1.double a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tdouble x = tx;
  t1.tdouble y = ty;
  double a = 0.01;
  if (!CGAffineTransform.almostEqual(_:scaleThreshold:translationThreshold:)(&t1.a, 0.01, 0.1))
  {
    double v26 = v2;
    uint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v11 = specialized Sequence.compactMap<A>(_:)(v27, (uint64_t)v26);
    swift_bridgeObjectRelease();

    uint64_t v45 = v10;
    if (!((unint64_t)v11 >> 62))
    {
      uint64_t v28 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v28)
      {
LABEL_27:
        if (v28 < 1)
        {
          __break(1u);
          goto LABEL_60;
        }
        uint64_t v29 = 0;
        double v30 = (void *)MEMORY[0x263F8EED0];
        do
        {
          if ((v11 & 0xC000000000000001) != 0) {
            id v31 = (void *)MEMORY[0x21054E050](v29, v11);
          }
          else {
            id v31 = *(id *)(v11 + 8 * v29 + 32);
          }
          uint64_t v32 = v31;
          (*(void (**)(CGAffineTransform *__return_ptr))((*v30 & *v31) + 0x200))(&t2);
          if ((LOBYTE(t2.a) & 0x20) != 0)
          {
            uint64_t v33 = unk_26C14D000;
            if ((unk_26C14D000 & ~qword_26C14CFF8) == 0) {
              uint64_t v33 = 0;
            }
            uint64_t v34 = v33 | qword_26C14CFF8;
            double v35 = (void (*)(CGAffineTransform *, void))(*(uint64_t (**)(CGAffineTransform *))((*v30 & *v32) + 0x210))(&t2);
            *v36 &= ~v34;
            v35(&t2, 0);
          }

          ++v29;
        }
        while (v28 != v29);
      }
LABEL_40:
      swift_bridgeObjectRelease_n();
      uint64_t v10 = v45;
      uint64_t v2 = v46;
      goto LABEL_41;
    }
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    if (v28) {
      goto LABEL_27;
    }
    goto LABEL_40;
  }
LABEL_41:
  if (fabs(sqrt(with->a * with->a + with->b * with->b) + -1.0) < a) {
    goto LABEL_55;
  }
  unint64_t v37 = *(void *)&v2[v10];
  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    if (v38)
    {
LABEL_44:
      if (v38 >= 1)
      {
        uint64_t v39 = 0;
        uint64_t v40 = (void *)MEMORY[0x263F8EED0];
        do
        {
          if ((v37 & 0xC000000000000001) != 0) {
            CGRect v41 = (void *)MEMORY[0x21054E050](v39, v37);
          }
          else {
            CGRect v41 = *(id *)(v37 + 8 * v39 + 32);
          }
          id v42 = v41;
          if ((*(uint64_t (**)(void))((*v40 & *v41) + 0x118))())
          {
            double v43 = (void *)(*(uint64_t (**)(void))((*v40 & *v42) + 0x2D0))();
            if (v43)
            {
              double v44 = v43;
              (*(void (**)(void))((*v40 & *v43) + 0x148))();
            }
          }
          ++v39;
        }
        while (v38 != v39);
        goto LABEL_54;
      }
LABEL_60:
      __break(1u);
      return;
    }
  }
  else
  {
    uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v38) {
      goto LABEL_44;
    }
  }
LABEL_54:
  swift_bridgeObjectRelease();
LABEL_55:
  if (fabs(tx) >= a || fabs(ty) >= a) {
    CanvasElementResizeView.updateCanvasElementFlagsAfterPositionChanged()();
  }
  objc_msgSend(v2, sel_setNeedsLayout);
}

Swift::Void __swiftcall CanvasElementResizeView.endTransform(cancel:)(Swift::Bool cancel)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  uint64_t v5 = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t v38 = &type metadata for PencilAndPaperFeatureFlags;
    unint64_t v39 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
    v37[0] = 0;
    char v7 = isFeatureEnabled(_:)();
    uint64_t v8 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    if (v7)
    {
      uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v6) + 0x320))(v8);
      uint64_t v10 = v9;
      uint64_t v11 = &selRef_transformingSelectionCancelled;
      if (!cancel) {
        uint64_t v11 = &selRef_transformingSelectionEnded;
      }
      [v9 *v11];
    }
    uint64_t v12 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements;
    unint64_t v13 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements];
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v31) {
        goto LABEL_8;
      }
    }
    else if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_8:
      unint64_t v14 = *(void *)&v2[v12];
      if (!cancel)
      {
        if ((v14 & 0x8000000000000000) != 0 || (v14 & 0x4000000000000000) != 0)
        {
          unint64_t v35 = swift_bridgeObjectRetain();
          uint64_t v15 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v35);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v15 = v14 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
        }
        CGFloat v16 = (void *)MEMORY[0x263F8EED0];
        char v17 = (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x263F8EED0] & *v6) + 0x508))(v15, 0);
        swift_release();
        unint64_t v14 = *(void *)&v2[v12];
        if (v17)
        {
          unint64_t v18 = swift_bridgeObjectRetain();
          specialized AnyCanvas.undoableEndLiveEdits<A>(for:)(v18);
          uint64_t v19 = swift_bridgeObjectRelease();
          id v20 = (void *)(*(uint64_t (**)(uint64_t))((*v16 & *v6) + 0x320))(v19);
          if (v20)
          {
            double v21 = v20;
            id v22 = objc_msgSend(v20, sel_selectionInteraction);

            objc_msgSend(v22, sel_didResizeExternalElements);
          }
          goto LABEL_33;
        }
      }
      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
        if (v26) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v26 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v26)
        {
LABEL_22:
          uint64_t v36 = v4;
          if (v26 < 1)
          {
            __break(1u);
            return;
          }
          uint64_t v27 = 0;
          uint64_t v28 = (void *)MEMORY[0x263F8EED0];
          do
          {
            if ((v14 & 0xC000000000000001) != 0) {
              uint64_t v29 = (void *)MEMORY[0x21054E050](v27, v14);
            }
            else {
              uint64_t v29 = *(id *)(v14 + 8 * v27 + 32);
            }
            double v30 = v29;
            ++v27;
            (*(void (**)(void, uint64_t))((*v28 & *v29) + 0x1F0))(0, 1);
            objc_msgSend(v30, sel_layoutIfNeeded);
            objc_msgSend(v30, sel_setNeedsDisplay);
          }
          while (v26 != v27);
          swift_bridgeObjectRelease();
          uint64_t v4 = v36;
          goto LABEL_33;
        }
      }
      swift_bridgeObjectRelease();
LABEL_33:
      *(void *)&v2[v12] = MEMORY[0x263F8EE78];

      swift_bridgeObjectRelease();
      goto LABEL_34;
    }

LABEL_34:
    uint64_t v32 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle];
    *(void *)&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
    outlined consume of ResizeView.ActiveHandle(v32);
    v2[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
    uint64_t v33 = MEMORY[0x210550400](v4);
    if (v33)
    {
      uint64_t v34 = (void *)v33;
      AnyCanvas.isResizingChanged()();
    }
    objc_msgSend(v2, sel_setNeedsLayout);
    return;
  }
  uint64_t v23 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle];
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
  outlined consume of ResizeView.ActiveHandle(v23);
  v1[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
  uint64_t v24 = MEMORY[0x210550400](v4);
  if (v24)
  {
    double v25 = (void *)v24;
    AnyCanvas.isResizingChanged()();
  }
  objc_msgSend(v2, sel_setNeedsLayout);
}

void CanvasElementResizeView.rotationSnapOffset.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements;
  unint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v3 == 1)
  {
    unint64_t v4 = *(void *)(v0 + v1);
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_6:
        if ((v4 & 0xC000000000000001) == 0)
        {
          if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          uint64_t v6 = *(id *)(v4 + 32);
          goto LABEL_9;
        }
LABEL_14:
        uint64_t v6 = (void *)MEMORY[0x21054E050](0, v4);
LABEL_9:
        char v7 = v6;
        uint64_t v8 = swift_bridgeObjectRelease();
        (*(void (**)(void *__return_ptr, uint64_t))((*MEMORY[0x263F8EED0] & *v7) + 0x1A0))(v10, v8);

        CGAffineTransform.decompose(initialRotation:)((uint64_t)v9, 0.0);
        return;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v5) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_14;
  }
}

unint64_t CanvasElementResizeView.modifiableProperties.getter()
{
  id v2 = v0;
  uint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = 0;
  unint64_t v5 = specialized Sequence.compactMap<A>(_:)(v3, (uint64_t)v2);
  swift_bridgeObjectRelease();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      if (v6 < 1)
      {
        __break(1u);
        goto LABEL_32;
      }
      id v7 = v2;
      uint64_t v8 = 0;
      uint64_t v1 = 15;
      uint64_t v9 = (void *)MEMORY[0x263F8EED0];
      do
      {
        if ((v5 & 0xC000000000000001) != 0) {
          uint64_t v10 = (void *)MEMORY[0x21054E050](v8, v5);
        }
        else {
          uint64_t v10 = *(id *)(v5 + 8 * v8 + 32);
        }
        uint64_t v11 = v10;
        ++v8;
        uint64_t v12 = (*(uint64_t (**)(void))((*v9 & *v10) + 0x1F8))();

        v1 &= v12;
      }
      while (v6 != v8);
      swift_bridgeObjectRelease();
      id v2 = v7;
      if ((v1 & 4) == 0) {
        goto LABEL_34;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = 15;
LABEL_13:
  id v13 = v2;
  uint64_t v14 = swift_bridgeObjectRetain();
  unint64_t v15 = specialized Sequence.compactMap<A>(_:)(v14, (uint64_t)v13);
  swift_bridgeObjectRelease();

  if (v15 >> 62) {
    goto LABEL_30;
  }
  uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    if (v16 < 2) {
      break;
    }
    id v17 = v13;
    uint64_t v18 = swift_bridgeObjectRetain();
    unint64_t v4 = specialized Sequence.compactMap<A>(_:)(v18, (uint64_t)v17);
    swift_bridgeObjectRelease();

    if (v4 >> 62)
    {
LABEL_32:
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      if (!v19)
      {
LABEL_33:
        swift_bridgeObjectRelease_n();
        break;
      }
    }
    else
    {
      uint64_t v19 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v19) {
        goto LABEL_33;
      }
    }
    uint64_t v20 = 4;
    double v21 = (void *)MEMORY[0x263F8EED0];
    while (1)
    {
      id v22 = (v4 & 0xC000000000000001) != 0
          ? (void *)MEMORY[0x21054E050](v20 - 4, v4)
          : *(id *)(v4 + 8 * v20);
      id v13 = v22;
      uint64_t v23 = v20 - 3;
      if (__OFADD__(v20 - 4, 1)) {
        break;
      }
      (*(void (**)(double *__return_ptr))((*v21 & *v22) + 0x1A0))(v26);

      if ((fabs(v26[0]) >= 1.0e-12 || fabs(v26[3]) >= 1.0e-12) && (fabs(v26[1]) >= 1.0e-12 || fabs(v26[2]) >= 1.0e-12))
      {
        swift_bridgeObjectRelease_n();
        v1 &= ~4uLL;
        goto LABEL_34;
      }
      ++v20;
      if (v23 == v19) {
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_34:
  uint64_t v24 = *(void *)(CanvasElementResizeView.resizingStrokes.getter() + 16);
  swift_bridgeObjectRelease();
  if (v24) {
    return v1 & 0xFFFFFFFFFFFFFFFBLL;
  }
  else {
    return v1;
  }
}

Swift::Void __swiftcall CanvasElementResizeView.updateCanvasElementsAfterResize()()
{
  id v1 = v0;
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_13;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (void *)MEMORY[0x21054E050](v5, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * v5 + 32);
      }
      uint64_t v8 = v7;
      uint64_t v9 = (*(uint64_t (**)(void))((*v6 & *v7) + 0x2D0))();
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        uint64_t v11 = *(void *)(v9 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
        swift_retain();

        *(unsigned char *)(v11 + 5CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 1;
        FormTextFieldAnalytics.recordEvent()();

        swift_release();
      }
      else
      {
      }
      ++v5;
    }
    while (v4 != v5);
    goto LABEL_13;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementResizeView.updateCanvasElementFlagsAfterPositionChanged()()
{
  id v1 = v0;
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_14;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (void *)MEMORY[0x21054E050](v5, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * v5 + 32);
      }
      uint64_t v8 = v7;
      (*(void (**)(void *__return_ptr))((*v6 & *v7) + 0x200))(v11);
      if ((v11[0] & 0x40) != 0)
      {
        uint64_t v10 = (void (*)(void *, void))(*(uint64_t (**)(void *))((*v6 & *v8) + 0x210))(v11);
        if ((*v9 & 0x40) != 0) {
          *v9 &= ~0x40uLL;
        }
        v10(v11, 0);
      }

      ++v5;
    }
    while (v4 != v5);
    goto LABEL_14;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementResizeView.updateCanvasElementsAfterPositionChanged()()
{
  id v1 = v0;
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_13;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (void *)MEMORY[0x21054E050](v5, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * v5 + 32);
      }
      uint64_t v8 = v7;
      uint64_t v9 = (*(uint64_t (**)(void))((*v6 & *v7) + 0x2D0))();
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        uint64_t v11 = *(void *)(v9 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
        swift_retain();

        *(unsigned char *)(v11 + 51) = 1;
        FormTextFieldAnalytics.recordEvent()();

        swift_release();
      }
      else
      {
      }
      ++v5;
    }
    while (v4 != v5);
    goto LABEL_13;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementResizeView.nudge(by:)(CGPoint by)
{
  uint64_t v2 = v1;
  CGAffineTransformMakeTranslation(&v30, by.x, by.y);
  CGFloat a = v30.a;
  CGFloat b = v30.b;
  CGFloat c = v30.c;
  CGFloat d = v30.d;
  tdouble x = v30.tx;
  tdouble y = v30.ty;
  unint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements);
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = (void *)MEMORY[0x263F8EED0];
  if (v10)
  {
    if (v10 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v12 = 0;
    do
    {
      if ((v9 & 0xC000000000000001) != 0) {
        id v13 = (void *)MEMORY[0x21054E050](v12, v9);
      }
      else {
        id v13 = *(id *)(v9 + 8 * v12 + 32);
      }
      uint64_t v14 = v13;
      ++v12;
      unint64_t v15 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*v11 & *v13) + 0x1B8))(v29);
      id v17 = v16;
      long long v18 = v16[1];
      long long v19 = v16[2];
      *(_OWORD *)&t1.CGFloat a = *v16;
      *(_OWORD *)&t1.CGFloat c = v18;
      *(_OWORD *)&t1.tdouble x = v19;
      t2.CGFloat a = a;
      t2.CGFloat b = b;
      t2.CGFloat c = c;
      t2.CGFloat d = d;
      t2.tdouble x = tx;
      t2.tdouble y = ty;
      CGAffineTransformConcat(&v26, &t1, &t2);
      long long v20 = *(_OWORD *)&v26.c;
      long long v21 = *(_OWORD *)&v26.tx;
      *id v17 = *(_OWORD *)&v26.a;
      v17[1] = v20;
      id v17[2] = v21;
      v15(v29, 0);
    }
    while (v10 != v12);
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v22)
  {
    uint64_t v23 = (void *)v22;
    uint64_t v24 = CanvasElementResizeView.resizingStrokes.getter();
    size_t v25 = specialized _copyCollectionToContiguousArray<A>(_:)(v24);
    swift_bridgeObjectRelease();
    (*(void (**)(size_t, CGAffineTransform *, uint64_t))((*v11 & *v23) + 0x410))(v25, &v30, 1);

    swift_release();
  }
}

uint64_t CanvasElementResizeView.handlePressesBegan(_:with:)(uint64_t a1, objc_class *a2)
{
  v5.value.super.super.Class isa = (Class)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v5.value.super.super.isa)
  {
    Class isa = v5.value.super.super.isa;
    id v7 = &v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    if (*(void *)(*(void *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection] + 16)
      || *(void *)(*((void *)v7 + 1) + 16))
    {
      v5.value.super.super.Class isa = a2;
      if (ResizeView.updateGestureModifiersState(_:)(v5)
        || (v8.value.super.super.Class isa = a2, (ResizeView.handlePressesBegan(_:with:)(a1, v8) & 1) != 0))
      {
        char v9 = 1;
LABEL_42:

        return v9 & 1;
      }
      id v10 = objc_msgSend(v2, sel_window);
      if (v10)
      {
        uint64_t v11 = v10;
        if (!a2) {
          goto LABEL_17;
        }
        id v12 = [(objc_class *)a2 touchesForWindow:v10];
        if (!v12) {
          goto LABEL_17;
        }
        id v13 = v12;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
        lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, &lazy cache variable for type metadata for UITouch);
        uint64_t v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v15 = (v14 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(void *)(v14 + 16);
        swift_bridgeObjectRelease();
        if (v15)
        {
          char v9 = 0;
        }
        else
        {
LABEL_17:
          uint64_t v16 = swift_bridgeObjectRetain();
          id v17 = (void *)specialized Collection.first.getter(v16);
          swift_bridgeObjectRelease();
          if (v17 && (id v18 = objc_msgSend(v17, sel_key), v17, v18))
          {
            id v19 = objc_msgSend(v18, sel_keyCode);

            switch((unint64_t)v19)
            {
              case '*':
              case 'L':
                uint64_t v20 = *(void *)v7;
                long long v21 = (void *)*((void *)v7 + 1);
                uint64_t v22 = (const char *)*((void *)v7 + 2);
                char v23 = v7[24];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char v9 = 1;
                AnyCanvas.performSelectionAction(_:_:at:)(4, v20, v21, v22, v23, 0, 0, 1);
                swift_bridgeObjectRelease();
                goto LABEL_22;
              case 'O':
                if (a2) {
                  BOOL v27 = ((unint64_t)[(objc_class *)a2 modifierFlags] >> 17) & 1;
                }
                else {
                  LOBYTE(v27) = 0;
                }
                double v28 = 1.0;
                goto LABEL_35;
              case 'P':
                if (a2) {
                  BOOL v27 = ((unint64_t)[(objc_class *)a2 modifierFlags] >> 17) & 1;
                }
                else {
                  LOBYTE(v27) = 0;
                }
                double v28 = -1.0;
LABEL_35:
                double v29 = 0.0;
                break;
              case 'Q':
                if (a2) {
                  BOOL v27 = ((unint64_t)[(objc_class *)a2 modifierFlags] >> 17) & 1;
                }
                else {
                  LOBYTE(v27) = 0;
                }
                double v28 = 0.0;
                double v29 = 1.0;
                break;
              case 'R':
                if (a2) {
                  BOOL v27 = ((unint64_t)[(objc_class *)a2 modifierFlags] >> 17) & 1;
                }
                else {
                  LOBYTE(v27) = 0;
                }
                double v28 = 0.0;
                double v29 = -1.0;
                break;
              default:
                goto LABEL_21;
            }
            ResizeView.startNudging(by:largerJump:)((CGPoint)__PAIR128__(*(unint64_t *)&v29, *(unint64_t *)&v28), v27);
            char v9 = 1;
          }
          else
          {
LABEL_21:
            uint64_t v24 = v2;
            uint64_t v25 = swift_bridgeObjectRetain();
            unint64_t v26 = specialized Sequence.compactMap<A>(_:)(v25, (uint64_t)v24);
            swift_bridgeObjectRelease();

            char v9 = specialized CanvasElementResizeView.chainPressesBegan(_:to:with:)(a1, v26);
LABEL_22:
            swift_bridgeObjectRelease();
          }
        }

        goto LABEL_42;
      }
    }
    char v9 = 0;
    goto LABEL_42;
  }
  char v9 = 0;
  return v9 & 1;
}

Swift::Bool __swiftcall CanvasElementResizeView.gestureRecognizerShouldBegin(_:)(UIGestureRecognizer *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController];
  if (v4)
  {
    UIPressesEvent_optional v5 = *(void **)(v4 + 16);
    if (v5)
    {
      swift_retain();
      id v6 = objc_msgSend(v5, sel_view);
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)(v4 + 24);
        swift_getKeyPath();
        _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        if (*(unsigned char *)(v8 + 32))
        {
          [(UIGestureRecognizer *)a1 locationInView:v7];
          CGFloat v10 = v9;
          CGFloat v12 = v11;
          objc_msgSend(v7, sel_bounds);
          v16.double x = v10;
          v16.double y = v12;
          BOOL v13 = CGRectContainsPoint(v17, v16);
          swift_release();

          if (v13) {
            return 0;
          }
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
      }
    }
  }
  v15.receiver = v2;
  v15.super_class = (Class)type metadata accessor for CanvasElementResizeView();
  return [(UIGestureRecognizer *)&v15 gestureRecognizerShouldBegin:a1];
}

Swift::Void __swiftcall CanvasElementResizeView.tapped(_:)(UITapGestureRecognizer *a1)
{
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController];
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    swift_getKeyPath();
    _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (void (*)(uint64_t))type metadata accessor for MiniMenuState);
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(unsigned char *)(v4 + 32) = (*(unsigned char *)(v4 + 32) & 1) == 0;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
  }
  UIPressesEvent_optional v5 = v1;
  uint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = specialized Sequence.compactMap<A>(_:)(v6, (uint64_t)v5);
  swift_bridgeObjectRelease();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v8 != 1) {
    return;
  }
  double v9 = v5;
  uint64_t v10 = swift_bridgeObjectRetain();
  unint64_t v11 = specialized Sequence.compactMap<A>(_:)(v10, (uint64_t)v9);
  swift_bridgeObjectRelease();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_8;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v11 & 0xC000000000000001) != 0)
  {
    CGFloat v12 = (void *)MEMORY[0x21054E050](0, v11);
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    CGFloat v12 = *(id *)(v11 + 32);
  }
  BOOL v13 = v12;
  uint64_t v14 = swift_bridgeObjectRelease();
  objc_super v15 = (void *)MEMORY[0x263F8EED0];
  CGPoint v16 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v13) + 0x2D0))(v14);

  if (v16)
  {
    objc_msgSend(v16, sel_bounds);
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    CGFloat v22 = v21;
    CGFloat v24 = v23;
    [(UITapGestureRecognizer *)a1 locationInView:v16];
    v28.double x = v25;
    v28.double y = v26;
    v29.origin.double x = v18;
    v29.origin.double y = v20;
    v29.size.CGFloat width = v22;
    v29.size.CGFloat height = v24;
    if (CGRectContainsPoint(v29, v28) && ((*(uint64_t (**)(void))((*v15 & *v16) + 0x98))() & 1) == 0) {
      objc_msgSend(v16, sel_becomeFirstResponder);
    }
  }
}

Swift::Void __swiftcall CanvasElementResizeView.doubleTapped(_:)(UITapGestureRecognizer *a1)
{
  uint64_t v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v6);
  if (!v9) {
    return;
  }
  uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v9) + 0x2F8);
  uint64_t v32 = v9;
  unint64_t v11 = (void *)v10();
  [(UITapGestureRecognizer *)a1 locationInView:v11];
  double v13 = v12;
  double v15 = v14;

  CGPoint v16 = (void *)v10();
  id v17 = objc_msgSend(v16, sel_hitTest_withEvent_, 0, v13, v15);

  if (v17)
  {
    type metadata accessor for AnyCanvasElementView();
    uint64_t v18 = swift_dynamicCastClass();
    if (v18)
    {
      double v19 = (void *)v18;
      CGFloat v20 = (void *)MEMORY[0x210550400](v18 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
      if (v20)
      {

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>);
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
        uint64_t v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16) = xmmword_20C832C20;
        (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v19) + 0xE8))(v21);
        SharedTagged_9.tag.getter();
        uint64_t v33 = v35;
        char v34 = v36;
        MEMORY[0x21054BDF0](v4);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        WeakTagged_9.init(_:id:)();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        if (*(void *)(v21 + 16)) {
          uint64_t v22 = specialized Set.init(_nonEmptyArrayLiteral:)(v21);
        }
        else {
          uint64_t v22 = MEMORY[0x263F8EE88];
        }
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        CanvasElementResizeView.selection.setter(v22, MEMORY[0x263F8EE88], 6, 0);
        CGFloat v24 = (void *)MEMORY[0x263F8EED0];
        if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v19) + 0xD8))(v25))
        {
          type metadata accessor for ShapeView();
          uint64_t v26 = swift_dynamicCastClass();
          if (v26)
          {
            id v27 = v17;
            CGPoint v28 = v32;
            ShapeView.addTextBox(canvas:)(v32);
          }
          CGRect v29 = (void *)(*(uint64_t (**)(uint64_t))((*v24 & *v19) + 0x2D0))(v26);
          if (v29)
          {
            CGAffineTransform v30 = v29;
            objc_msgSend(v29, sel_becomeFirstResponder, v31);
          }
        }

        return;
      }
    }
  }
  double v23 = v32;
}

UIContextMenuConfiguration_optional __swiftcall CanvasElementResizeView.contextMenuInteraction(_:configurationForMenuAtLocation:)(UIContextMenuInteraction _, CGPoint configurationForMenuAtLocation)
{
  double y = configurationForMenuAtLocation.y;
  double x = configurationForMenuAtLocation.x;
  if ((objc_msgSend(v2, sel_isHidden) & 1) == 0)
  {
    v6.value.super.Class isa = 0;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v7, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v6);
    if (v19.value.super.isa)
    {

      goto LABEL_7;
    }
    ResizeView.hitTestChrome(_:with:)(v20, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v19);
    uint64_t v22 = v21;

    if (v22) {
      goto LABEL_7;
    }
  }
  uint64_t v8 = MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (!v8)
  {
LABEL_7:
    uint64_t v18 = 0;
    goto LABEL_8;
  }
  uint64_t v10 = (void *)v8;
  unint64_t v11 = &v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v12 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v13 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  uint64_t v14 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  char v15 = v11[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AnyCanvas.contextMenuInteraction(_:members:configurationForMenuAtLocation:)((uint64_t)_.super.isa, v12, v13, v14, v15, x, y);
  id v17 = v16;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = v17;
LABEL_8:
  result.value.super.Class isa = v18;
  result.is_nil = v9;
  return result;
}

UITargetedPreview_optional __swiftcall CanvasElementResizeView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(UIContextMenuInteraction _, UIContextMenuConfiguration previewForHighlightingMenuWithConfiguration)
{
  uint64_t v5 = (objc_class *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v5)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v2;
    uint64_t v9 = swift_bridgeObjectRetain();
    unint64_t v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);
    swift_bridgeObjectRelease();

    if ((v10 & 0x8000000000000000) != 0 || (v10 & 0x4000000000000000) != 0)
    {
      v11._rawValue = specialized _copyCollectionToContiguousArray<A>(_:)(v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      v11._rawValue = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
    }
    unint64_t v12 = (unint64_t)AnyCanvas.contextMenuInteraction(_:canvasElementViews:previewForHighlightingMenuWithConfiguration:)(_, v11, previewForHighlightingMenuWithConfiguration);

    swift_release();
    uint64_t v5 = (objc_class *)v12;
  }
  result.value.super.Class isa = v5;
  result.is_nil = v6;
  return result;
}

uint64_t CanvasElementResizeView.__ivar_destroyer()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id CanvasElementResizeView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementResizeView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasElementResizeView()
{
  return self;
}

void specialized static CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace(for:strokeBounds:rotateSingleElements:multiSelectionRotation:)(unint64_t a1@<X0>, char a2@<W1>, long long *a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>, CGFloat a8@<D4>)
{
  unint64_t v16 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v17) {
      goto LABEL_3;
    }
  }
  long long v41 = xmmword_20C8356C0;
  long long v42 = xmmword_20C835600;
  long long v43 = 0uLL;
  if ((~*(void *)&a4 & 0x7FF0000000000000) == 0
    || (~*(void *)&a5 & 0x7FF0000000000000) == 0
    || (~*(void *)&a6 & 0x7FF0000000000000) == 0
    || (~*(void *)&a7 & 0x7FF0000000000000) == 0)
  {
    goto LABEL_35;
  }
LABEL_3:
  CGFloat r2 = a7;
  CGFloat v65 = a6;
  CGFloat rect2_24 = a5;
  CGFloat rect2_8 = a4;
  if ((a2 & 1) == 0) {
    goto LABEL_9;
  }
  if (v16)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 == 1) {
      goto LABEL_8;
    }
LABEL_9:
    CGFloat v19 = *(double *)(MEMORY[0x263F001A0] + 8);
    CGFloat v20 = *(double *)(MEMORY[0x263F001A0] + 16);
    recCGAffineTransform t2 = *MEMORY[0x263F001A0];
    if (v17)
    {
      if (v17 >= 1)
      {
        CGFloat x = *MEMORY[0x263F001A0];
        CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
        CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
        CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
        swift_bridgeObjectRetain();
        uint64_t v25 = 0;
        uint64_t v26 = (void *)MEMORY[0x263F8EED0];
        CGFloat v27 = height;
        do
        {
          if ((a1 & 0xC000000000000001) != 0) {
            uint64_t v35 = (void *)MEMORY[0x21054E050](v25, a1);
          }
          else {
            uint64_t v35 = *(id *)(a1 + 8 * v25 + 32);
          }
          char v36 = v35;
          if (a8 == 0.0)
          {
            CGPoint v28 = (double *)v75;
            (*(void (**)(_OWORD *__return_ptr))((*v26 & *v35) + 0x190))(v75);
          }
          else
          {
            CGPoint v28 = (double *)v74;
            (*(void (**)(void *__return_ptr))((*v26 & *v35) + 0x1A0))(v74);
          }
          CGFloat v29 = v28[4];
          CGFloat v30 = v28[5];
          long long v31 = *((_OWORD *)v28 + 1);
          ++v25;
          *(_OWORD *)&t1.CGFloat a = *(_OWORD *)v28;
          *(_OWORD *)&t1.CGFloat c = v31;
          t1.tCGFloat x = v29;
          t1.tCGFloat y = v30;
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          *(void *)&long long v31 = 1.0;
          double v34 = 1.0;
          CGRect v82 = CGRectApplyAffineTransform(*(CGRect *)(&v31 - 1), &t1);
          v76.origin.CGFloat x = x;
          v76.origin.CGFloat y = y;
          v76.size.CGFloat width = width;
          v76.size.CGFloat height = height;
          CGRect v77 = CGRectUnion(v76, v82);
          CGFloat x = v77.origin.x;
          CGFloat y = v77.origin.y;
          CGFloat width = v77.size.width;
          CGFloat height = v77.size.height;
        }
        while (v17 != v25);
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      __break(1u);
      goto LABEL_37;
    }
    CGFloat x = *MEMORY[0x263F001A0];
    CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
    CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
    CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
    CGFloat v27 = height;
LABEL_21:
    v78.origin.CGFloat x = x;
    v78.origin.CGFloat y = y;
    v78.size.CGFloat width = width;
    v78.size.CGFloat height = height;
    v83.origin.CGFloat x = rect2_8;
    v83.origin.CGFloat y = rect2_24;
    v83.size.CGFloat width = v65;
    v83.size.CGFloat height = r2;
    CGRect v79 = CGRectUnion(v78, v83);
    double v37 = v79.origin.x;
    double v38 = v79.origin.y;
    double v39 = v79.size.width;
    double v40 = v79.size.height;
    v84.origin.CGFloat x = rect2;
    v84.origin.CGFloat y = v19;
    v84.size.CGFloat width = v20;
    v84.size.CGFloat height = v27;
    if (CGRectEqualToRect(v79, v84))
    {
      long long v41 = xmmword_20C8356C0;
      long long v42 = xmmword_20C835600;
      long long v43 = 0uLL;
    }
    else
    {
      r2CGFloat a = v37 - v39 * 0.0;
      CGFloat v66 = v38 - v40 * 0.0;
      v80.origin.CGFloat x = v37;
      v80.origin.CGFloat y = v38;
      v80.size.CGFloat width = v39;
      v80.size.CGFloat height = v40;
      double MidX = CGRectGetMidX(v80);
      v81.origin.CGFloat x = v37;
      v81.origin.CGFloat y = v38;
      v81.size.CGFloat width = v39;
      v81.size.CGFloat height = v40;
      double MidY = CGRectGetMidY(v81);
      CGAffineTransformMakeRotation(&t1, a8);
      rect2_8CGFloat a = *(_OWORD *)&t1.c;
      rect2_24CGFloat a = *(_OWORD *)&t1.a;
      tCGFloat x = t1.tx;
      rect2CGFloat a = t1.ty;
      CGAffineTransformMakeTranslation(&t1, -MidX, -MidY);
      CGFloat a = t1.a;
      CGFloat b = t1.b;
      CGFloat c = t1.c;
      CGFloat d = t1.d;
      CGFloat v51 = t1.tx;
      tCGFloat y = t1.ty;
      *(_OWORD *)&t2.CGFloat a = rect2_24a;
      *(_OWORD *)&t2.CGFloat c = rect2_8a;
      t2.tCGFloat x = tx;
      t2.tCGFloat y = rect2a;
      CGAffineTransformConcat(&v71, &t1, &t2);
      rect2_8CGFloat b = *(_OWORD *)&v71.c;
      rect2_24CGFloat b = *(_OWORD *)&v71.a;
      CGFloat v54 = v71.ty;
      rect2CGFloat b = v71.tx;
      t1.CGFloat a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tCGFloat x = v51;
      t1.tCGFloat y = ty;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.CGFloat a = rect2_24b;
      *(_OWORD *)&t1.CGFloat c = rect2_8b;
      t1.tCGFloat x = rect2b;
      t1.tCGFloat y = v54;
      CGAffineTransformConcat(&v71, &t1, &t2);
      t1.CGFloat a = v39;
      t1.CGFloat b = 0.0;
      t1.CGFloat c = 0.0;
      t1.CGFloat d = v40;
      t1.tCGFloat x = r2a;
      t1.tCGFloat y = v66;
      CGAffineTransform t2 = v71;
      CGAffineTransformConcat(&v71, &t1, &t2);
      long long v42 = *(_OWORD *)&v71.a;
      long long v41 = *(_OWORD *)&v71.c;
      long long v43 = *(_OWORD *)&v71.tx;
    }
    goto LABEL_35;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1) {
    goto LABEL_9;
  }
LABEL_8:
  if (CGRect.isFinite.getter(a4, a5, a6, a7)) {
    goto LABEL_9;
  }
  if (!v17)
  {
    CGFloat x = *MEMORY[0x263F001A0];
    CGFloat v19 = *(double *)(MEMORY[0x263F001A0] + 8);
    CGFloat v20 = *(double *)(MEMORY[0x263F001A0] + 16);
    CGFloat v27 = *(double *)(MEMORY[0x263F001A0] + 24);
    recCGAffineTransform t2 = *MEMORY[0x263F001A0];
    CGFloat y = v19;
    CGFloat width = v20;
    CGFloat height = v27;
    goto LABEL_21;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    CGAffineTransform v52 = (void *)MEMORY[0x21054E050](0, a1);
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    CGAffineTransform v52 = *(id *)(a1 + 32);
LABEL_28:
    (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x263F8EED0] & *v52) + 0x190))(v75);
    long long v67 = v75[1];
    r2CGFloat b = v75[0];
    rect2_24CGFloat c = v75[2];

    long long v43 = rect2_24c;
    long long v41 = v67;
    long long v42 = r2b;
LABEL_35:
    *a3 = v42;
    a3[1] = v41;
    a3[2] = v43;
    return;
  }
  __break(1u);
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a2;
  double v37 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v6 - 8);
  CGAffineTransform v49 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v8 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  double v48 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v10 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  unint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = a3;
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v39 = a3 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v45 = a4 + OBJC_IVAR___PKDrawingCoherence_model;
  uint64_t result = swift_beginAccess();
  uint64_t v38 = 0;
  int64_t v18 = 0;
  long long v43 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v44 = v10 + 16;
  long long v42 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v46 = v10;
  int64_t v40 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v41 = v10 + 8;
  uint64_t v19 = v10;
  uint64_t v21 = v47;
  CGFloat v20 = v48;
  uint64_t v23 = (uint64_t)v49;
  uint64_t v22 = v50;
  while (1)
  {
    if (v16)
    {
      unint64_t v24 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v52 = v18;
      unint64_t v25 = v24 | (v18 << 6);
      goto LABEL_5;
    }
    int64_t v29 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v29 >= v40) {
      goto LABEL_24;
    }
    unint64_t v30 = *(void *)(v39 + 8 * v29);
    int64_t v31 = v18 + 1;
    if (!v30)
    {
      int64_t v31 = v18 + 2;
      if (v18 + 2 >= v40) {
        goto LABEL_24;
      }
      unint64_t v30 = *(void *)(v39 + 8 * v31);
      if (!v30)
      {
        int64_t v31 = v18 + 3;
        if (v18 + 3 >= v40) {
          goto LABEL_24;
        }
        unint64_t v30 = *(void *)(v39 + 8 * v31);
        if (!v30) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v16 = (v30 - 1) & v30;
    int64_t v52 = v31;
    unint64_t v25 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_5:
    unint64_t v26 = v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v12, *(void *)(v51 + 48) + *(void *)(v19 + 72) * v25, v21);
    (*v43)(v20, v45, v22);
    type metadata accessor for PKDrawingStruct();
    _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    WeakRef.subscript.getter();
    (*v42)(v20, v22);
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    int v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v23, 1, v27);
    outlined destroy of StocksKitCurrencyCache.Provider?(v23, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v21);
    int64_t v18 = v52;
    if (v28 != 1)
    {
      *(unint64_t *)((char *)v37 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      if (__OFADD__(v38++, 1))
      {
        __break(1u);
LABEL_24:
        uint64_t v34 = v51;
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v37, v36, v38, v34);
      }
    }
  }
  uint64_t v32 = v18 + 4;
  if (v18 + 4 >= v40) {
    goto LABEL_24;
  }
  unint64_t v30 = *(void *)(v39 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v18 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v31 >= v40) {
      goto LABEL_24;
    }
    unint64_t v30 = *(void *)(v39 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

unsigned __int8 *specialized Sequence.compactMap<A>(_:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v26 = MEMORY[0x263F8EE78];
  unint64_t v24 = a1 + 56;
  uint64_t v4 = 1 << a1[32];
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *((void *)a1 + 7);
  int64_t v25 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = (unsigned __int8 *)swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v22 = a2;
  uint64_t v23 = result;
  while (1)
  {
    while (1)
    {
LABEL_5:
      if (v6)
      {
        unint64_t v9 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v10 = v9 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_47;
        }
        if (v8 >= v25)
        {
LABEL_45:
          swift_release();
          return (unsigned __int8 *)v26;
        }
        unint64_t v12 = *(void *)&v24[8 * v8];
        if (!v12)
        {
          int64_t v13 = v8 + 1;
          if (v8 + 1 >= v25) {
            goto LABEL_45;
          }
          unint64_t v12 = *(void *)&v24[8 * v13];
          if (v12) {
            goto LABEL_16;
          }
          int64_t v13 = v8 + 2;
          if (v8 + 2 >= v25) {
            goto LABEL_45;
          }
          unint64_t v12 = *(void *)&v24[8 * v13];
          if (v12) {
            goto LABEL_16;
          }
          int64_t v13 = v8 + 3;
          if (v8 + 3 >= v25) {
            goto LABEL_45;
          }
          unint64_t v12 = *(void *)&v24[8 * v13];
          if (v12)
          {
LABEL_16:
            int64_t v8 = v13;
          }
          else
          {
            int64_t v21 = v8 + 4;
            if (v8 + 4 >= v25) {
              goto LABEL_45;
            }
            unint64_t v12 = *(void *)&v24[8 * v21];
            for (v8 += 4; !v12; ++v21)
            {
              int64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_48;
              }
              if (v8 >= v25) {
                goto LABEL_45;
              }
              unint64_t v12 = *(void *)&v24[8 * v8];
            }
          }
        }
        unint64_t v6 = (v12 - 1) & v12;
        unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
      }
      int v14 = *(unsigned __int8 *)(*((void *)v3 + 6) + v10);
      unint64_t v15 = *(void *)(a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles);
      if (!(v15 >> 62)) {
        break;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      if (v16) {
        goto LABEL_20;
      }
LABEL_4:
      uint64_t result = (unsigned __int8 *)swift_bridgeObjectRelease_n();
    }
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v16) {
      goto LABEL_4;
    }
LABEL_20:
    uint64_t v17 = (v15 & 0xC000000000000001) != 0
        ? (unsigned __int8 *)MEMORY[0x21054E050](0, v15)
        : (unsigned __int8 *)*(id *)(v15 + 32);
    if (v17[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] != v14) {
      break;
    }
LABEL_33:
    uint64_t v20 = swift_bridgeObjectRelease_n();
    MEMORY[0x21054D330](v20);
    if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = (unsigned __int8 *)specialized Array._endMutation()();
  }

  if (v16 == 1) {
    goto LABEL_4;
  }
  uint64_t v18 = 5;
  while (1)
  {
    uint64_t result = (v15 & 0xC000000000000001) != 0
           ? (unsigned __int8 *)MEMORY[0x21054E050](v18 - 4, v15)
           : (unsigned __int8 *)*(id *)(v15 + 8 * v18);
    uint64_t v19 = v18 - 3;
    if (__OFADD__(v18 - 4, 1)) {
      break;
    }
    if (result[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] == v14)
    {
      a2 = v22;
      uint64_t v3 = v23;
      goto LABEL_33;
    }

    ++v18;
    if (v19 == v16)
    {
      uint64_t result = (unsigned __int8 *)swift_bridgeObjectRelease_n();
      a2 = v22;
      uint64_t v3 = v23;
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void specialized CanvasElementResizeView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_moreButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_contextMenuInteraction] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_tapGestureRecognizer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_doubleTapGestureRecognizer] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  v1[16] = 1;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_suppressMiniMenu] = 0;
  objc_super v2 = &v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v3 = MEMORY[0x263F8EE88];
  *(void *)objc_super v2 = MEMORY[0x263F8EE88];
  *((void *)v2 + 1) = v3;
  *((void *)v2 + 2) = 6;
  v2[24] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements] = MEMORY[0x263F8EE78];
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized CanvasElementResizeView.chainPressesBegan(_:to:with:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = (void *)specialized Collection.first.getter(v4);
  swift_bridgeObjectRelease();
  if (!v5) {
    return 0;
  }
  id v6 = objc_msgSend(v5, sel_key);

  if (!v6) {
    return 0;
  }
  if ((objc_msgSend(v6, sel_modifierFlags) & 0x100000) != 0) {
    goto LABEL_23;
  }
  id v7 = objc_msgSend(v6, sel_characters);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  swift_bridgeObjectRelease();
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11) {
    goto LABEL_23;
  }
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v32 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (!result)
      {

        swift_bridgeObjectRelease();
        return 0;
      }
      goto LABEL_10;
    }
  }
  else if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
  {
    uint64_t result = swift_bridgeObjectRetain();
LABEL_10:
    if ((a2 & 0xC000000000000001) != 0)
    {
      int64_t v13 = (void *)MEMORY[0x21054E050](0, a2);
    }
    else
    {
      if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_37:
        __break(1u);
        return result;
      }
      int64_t v13 = *(id *)(a2 + 32);
    }
    int v14 = v13;
    uint64_t v15 = swift_bridgeObjectRelease();
    uint64_t v16 = (void *)MEMORY[0x263F8EED0];
    uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v14) + 0x2D0))(v15);

    if (v17)
    {
      if (((*(uint64_t (**)(void))((*v16 & *v17) + 0x98))() & 1) == 0
        && objc_msgSend(v17, sel_becomeFirstResponder))
      {
        id v18 = objc_msgSend(v6, sel_keyCode);
        if (v18 != (id)40)
        {
          if (v18 == (id)44)
          {
            uint64_t v19 = *(void **)((char *)v17 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
            if (v19)
            {
              id v20 = v19;
              uint64_t result = (uint64_t)objc_msgSend(v20, sel_text);
              if (result)
              {
                int64_t v21 = (void *)result;
                uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v24 = v23;

                v25._uint64_t countAndFlagsBits = 32;
                v25._object = (void *)0xE100000000000000;
                String.append(_:)(v25);
                if (v24)
                {
                  uint64_t v26 = (void *)MEMORY[0x21054D080](v22, v24);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v26 = 0;
                }
                objc_msgSend(v20, sel_setText_, v26);

                goto LABEL_30;
              }
              goto LABEL_37;
            }
          }
          else
          {
            uint64_t v27 = *(void **)((char *)v17 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
            if (v27)
            {
              id v28 = v27;
              specialized Sequence.compactMap<A>(_:)(a1);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
              lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
              uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
              uint64_t v31 = v30;
              swift_bridgeObjectRelease();
              uint64_t v26 = (void *)MEMORY[0x21054D080](v29, v31);
              swift_bridgeObjectRelease();
              objc_msgSend(v28, sel_setText_, v26);

LABEL_30:
            }
          }
        }
        objc_msgSend(v17, sel_setNeedsLayout);

        return 1;
      }
    }
  }
LABEL_23:

  return 0;
}

uint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void outlined consume of ResizeView.ActiveHandle(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

uint64_t _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id outlined copy of ResizeView.ActiveHandle(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

uint64_t specialized CanvasElementResizeView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(void *a1)
{
  uint64_t result = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = v1;
    uint64_t v6 = swift_bridgeObjectRetain();
    unint64_t v7 = specialized Sequence.compactMap<A>(_:)(v6, (uint64_t)v5);
    swift_bridgeObjectRelease();

    if ((v7 & 0x8000000000000000) != 0 || (v7 & 0x4000000000000000) != 0)
    {
      specialized _copyCollectionToContiguousArray<A>(_:)(v7);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(a1, sel_setPreferredCommitStyle_, 1);

    return swift_release();
  }
  return result;
}

uint64_t static ViewBuilder.buildExpression<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t MiniPopoverState.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MiniPopoverState()
{
  return self;
}

uint64_t type metadata instantiation function for MiniPopoverButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 56);
}

uint64_t destroy for MiniPopoverButton()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MiniPopoverButton(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniPopoverButton(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_retain();
  swift_release();
  *(void *)(a1 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *((void *)a2 + 5);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  uint64_t v5 = *((void *)a2 + 10);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(void *)(a1 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *((void *)a2 + 12);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(void *)(a1 + 96) = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for MiniPopoverButton(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniPopoverButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniPopoverButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MiniPopoverButton()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance MiniPopoverState@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for MiniPopoverState();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MiniPopoverButton<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MiniPopoverButtonStyle.makeBody(configuration:)()
{
  uint64_t v0 = type metadata accessor for LiftHoverEffect();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  long long v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  if (one-time initialization token for buttonSize != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v7, v4);
  uint64_t v11 = &v10[*(int *)(v8 + 36)];
  long long v12 = v14[1];
  *(_OWORD *)uint64_t v11 = v14[0];
  *((_OWORD *)v11 + 1) = v12;
  *((_OWORD *)v11 + 2) = v14[2];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static CustomHoverEffect<>.lift.getter();
  lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type CGSize and conformance CGSize(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, 255, MEMORY[0x263F18DF8]);
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return outlined destroy of ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>((uint64_t)v10);
}

uint64_t MiniPopoverButton.knownPopoverSize.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGSize?>);
  State.wrappedValue.getter();
  return v1;
}

uint64_t MiniPopoverButton.$isPopoverVisible.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  Binding.projectedValue.getter();
  return v1;
}

uint64_t MiniPopoverButton.arrowEdge(proxy:knownPopoverSize:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = type metadata accessor for GlobalCoordinateSpace();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    if (one-time initialization token for estimatedPopoverSize != -1) {
      swift_once();
    }
    double v63 = *(double *)&qword_2676E9830;
  }
  else
  {
    double v63 = *(double *)&a3;
  }
  static CoordinateSpaceProtocol<>.global.getter();
  GeometryProxy.frame<A>(in:)();
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v18 = (double *)specialized MiniPopoverButton.popoverState.getter();
  double v19 = v18[6];
  double v20 = v18[7];
  double v21 = v18[8];
  double v22 = v18[9];
  if (one-time initialization token for popoverMargin != -1) {
    swift_once();
  }
  double v64 = UIEdgeInsetsInsetRect(v19, v20, v21, v22, *(double *)&static MiniMenuConstants.popoverMargin, *((double *)&static MiniMenuConstants.popoverMargin + 1));
  CGFloat v65 = v23;
  CGFloat v61 = v24;
  CGFloat v62 = v25;
  uint64_t v26 = (double *)specialized MiniPopoverButton.popoverState.getter();
  CGFloat v27 = v26[2];
  CGFloat v28 = v26[3];
  CGFloat v29 = v26[4];
  CGFloat v30 = v26[5];
  v67.origin.CGFloat x = v11;
  v67.origin.CGFloat y = v13;
  v67.size.CGFloat width = v15;
  v67.size.CGFloat height = v17;
  CGFloat MinY = CGRectGetMinY(v67);
  CGFloat v66 = v17;
  CGFloat v32 = v13;
  CGFloat v33 = v11;
  double v34 = MinY;
  v68.origin.CGFloat x = v27;
  v68.origin.CGFloat y = v28;
  v68.size.CGFloat width = v29;
  v68.size.CGFloat height = v30;
  if (CGRectGetMaxY(v68) < v34) {
    goto LABEL_11;
  }
  v69.origin.CGFloat x = v33;
  v69.origin.CGFloat y = v32;
  v69.size.CGFloat width = v15;
  v69.size.CGFloat height = v66;
  v83.origin.CGFloat x = v27;
  v83.origin.CGFloat y = v28;
  v83.size.CGFloat width = v29;
  v83.size.CGFloat height = v30;
  CGRect v70 = CGRectIntersection(v69, v83);
  v84.origin.CGFloat x = v27;
  v84.origin.CGFloat y = v28;
  v84.size.CGFloat width = v29;
  v84.size.CGFloat height = v30;
  BOOL v35 = CGRectEqualToRect(v70, v84);
  CGFloat v60 = v33;
  if (!v35) {
    goto LABEL_12;
  }
  v71.origin.CGFloat x = v33;
  v71.origin.CGFloat y = v32;
  v71.size.CGFloat width = v15;
  CGFloat v36 = v15;
  CGFloat v37 = v66;
  v71.size.CGFloat height = v66;
  double v38 = CGRectGetMinY(v71);
  v72.origin.CGFloat x = v27;
  v72.origin.CGFloat y = v28;
  v72.size.CGFloat width = v29;
  v72.size.CGFloat height = v30;
  double v58 = v38 - CGRectGetMinY(v72);
  v73.origin.CGFloat x = v27;
  v73.origin.CGFloat y = v28;
  v73.size.CGFloat width = v29;
  v73.size.CGFloat height = v30;
  double MaxY = CGRectGetMaxY(v73);
  v74.origin.CGFloat x = v60;
  v74.origin.CGFloat y = v32;
  v74.size.CGFloat width = v36;
  v74.size.CGFloat height = v37;
  CGFloat v15 = v36;
  CGFloat v33 = v60;
  if (v58 < MaxY - CGRectGetMaxY(v74))
  {
LABEL_11:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Edge, CGFloat)>);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_20C835740;
    *(unsigned char *)(v40 + 32) = 0;
    v75.origin.CGFloat x = v64;
    v75.size.CGFloat height = v65;
    CGFloat v42 = v61;
    CGFloat v41 = v62;
    v75.origin.CGFloat y = v61;
    v75.size.CGFloat width = v62;
    double v43 = CGRectGetMaxY(v75);
    v76.origin.CGFloat x = v33;
    v76.origin.CGFloat y = v32;
    v76.size.CGFloat width = v15;
    CGFloat v44 = v33;
    CGFloat v45 = v66;
    v76.size.CGFloat height = v66;
    double v46 = v43 - CGRectGetMaxY(v76);
    *(double *)(v40 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v46;
    *(unsigned char *)(v40 + 48) = 2;
    v77.origin.CGFloat x = v44;
    v77.origin.CGFloat y = v32;
    v77.size.CGFloat width = v15;
    v77.size.CGFloat height = v45;
    double v47 = CGRectGetMinY(v77);
    v78.origin.CGFloat x = v64;
    v78.size.CGFloat height = v65;
    v78.origin.CGFloat y = v42;
    v78.size.CGFloat width = v41;
    double v48 = CGRectGetMinY(v78);
    uint64_t v49 = 0;
  }
  else
  {
LABEL_12:
    CGFloat v59 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Edge, CGFloat)>);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_20C835740;
    uint64_t v49 = 2;
    *(unsigned char *)(v40 + 32) = 2;
    v79.origin.CGFloat x = v33;
    v79.origin.CGFloat y = v32;
    v79.size.CGFloat width = v15;
    CGFloat v50 = v66;
    v79.size.CGFloat height = v66;
    double v51 = CGRectGetMinY(v79);
    CGFloat v52 = v64;
    CGFloat v53 = v65;
    v80.origin.CGFloat x = v64;
    CGFloat v55 = v61;
    CGFloat v54 = v62;
    v80.origin.CGFloat y = v61;
    v80.size.CGFloat width = v62;
    v80.size.CGFloat height = v65;
    double v46 = v51 - CGRectGetMinY(v80);
    *(double *)(v40 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v46;
    *(unsigned char *)(v40 + 48) = 0;
    v81.origin.CGFloat x = v52;
    v81.origin.CGFloat y = v55;
    v81.size.CGFloat width = v54;
    v81.size.CGFloat height = v53;
    double v47 = CGRectGetMaxY(v81);
    v82.size.CGFloat width = v59;
    v82.origin.CGFloat x = v60;
    v82.origin.CGFloat y = v32;
    v82.size.CGFloat height = v50;
    double v48 = CGRectGetMaxY(v82);
  }
  *(double *)(v40 + 56) = v47 - v48;
  if (v63 > v46)
  {
    if (v63 <= *(double *)(v40 + 56)) {
      uint64_t v49 = *(unsigned __int8 *)(v40 + 48);
    }
    else {
      uint64_t v49 = 2;
    }
  }
  swift_bridgeObjectRelease();
  return v49;
}

uint64_t MiniPopoverButton.body.getter@<X0>(void *a1@<X0>, long long *a2@<X8>)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  *(void *)(v4 + 16) = v5;
  *(void *)(v4 + 24) = v6;
  uint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  *(void *)(v4 + 32) = v8;
  *(void *)(v4 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v7;
  long long v9 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v4 + 128) = v9;
  *(void *)(v4 + 144) = *(void *)(v2 + 96);
  long long v10 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)v2;
  *(_OWORD *)(v4 + 64) = v10;
  long long v11 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v4 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v4 + 96) = v11;
  outlined retain of MiniPopoverButton<A, B>(v2);
  uint64_t v30 = v5;
  type metadata accessor for Button();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _GeometryActionModifier<CGSize>);
  uint64_t v29 = v6;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v44 = v7;
  unint64_t v45 = lazy protocol witness table accessor for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  *(void *)&long long v56 = OpaqueTypeMetadata2;
  *((void *)&v56 + 1) = v13;
  uint64_t v57 = OpaqueTypeConformance2;
  uint64_t v58 = WitnessTable;
  swift_getOpaqueTypeConformance2();
  *(void *)&long long v46 = GeometryReader.init(content:)();
  *((void *)&v46 + 1) = v16;
  if (one-time initialization token for buttonSize != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  type metadata accessor for GeometryReader();
  uint64_t v17 = swift_getWitnessTable();
  View.frame(width:height:alignment:)();
  swift_release();
  long long v32 = v56;
  uint64_t v33 = v57;
  char v34 = v58;
  uint64_t v35 = v59;
  char v36 = v60;
  long long v37 = v61;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v30;
  *(void *)(v18 + 24) = v29;
  *(void *)(v18 + 32) = v8;
  *(void *)(v18 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v7;
  long long v19 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v18 + 112) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v18 + 128) = v19;
  *(void *)(v18 + 144) = *(void *)(v2 + 96);
  long long v20 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v18 + 48) = *(_OWORD *)v2;
  *(_OWORD *)(v18 + 64) = v20;
  long long v21 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v18 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v18 + 96) = v21;
  outlined retain of MiniPopoverButton<A, B>(v2);
  type metadata accessor for ModifiedContent();
  uint64_t v42 = v17;
  uint64_t v43 = MEMORY[0x263F18860];
  swift_getWitnessTable();
  View.onAppear(perform:)();
  swift_release();
  swift_release();
  uint64_t v22 = v52;
  uint64_t v23 = v54;
  long long v32 = v46;
  uint64_t v33 = v47;
  char v34 = v48;
  uint64_t v35 = v49;
  char v36 = v50;
  long long v37 = v51;
  uint64_t v38 = v52;
  uint64_t v39 = v53;
  uint64_t v40 = v54;
  uint64_t v41 = v55;
  uint64_t v24 = type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  double v25 = *(void (**)(long long *, long long *, uint64_t))(*(void *)(v24 - 8) + 16);
  v25(&v56, &v32, v24);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v22);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v23);
  uint64_t v26 = v62;
  uint64_t v27 = v64;
  long long v46 = v56;
  uint64_t v47 = v57;
  char v48 = v58;
  uint64_t v49 = v59;
  char v50 = v60;
  long long v51 = v61;
  uint64_t v52 = v62;
  uint64_t v53 = v63;
  uint64_t v54 = v64;
  uint64_t v55 = v65;
  v25(a2, &v46, v24);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v26);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v27);
}

uint64_t closure #1 in MiniPopoverButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, char *a7@<X8>)
{
  unint64_t v60 = a6;
  uint64_t v61 = a5;
  CGRect v76 = a7;
  CGRect v77 = a4;
  uint64_t v74 = a1;
  uint64_t v9 = type metadata accessor for PopoverAttachmentAnchor();
  uint64_t v72 = *(void *)(v9 - 8);
  uint64_t v73 = v9;
  MEMORY[0x270FA5388](v9);
  CGRect v71 = (uint64_t *)((char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for Button();
  uint64_t v66 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v59 - v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v15 = lazy protocol witness table accessor for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle();
  uint64_t v86 = v11;
  uint64_t v87 = &type metadata for MiniPopoverButtonStyle;
  uint64_t v88 = WitnessTable;
  unint64_t v89 = v15;
  uint64_t v59 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v68 = OpaqueTypeMetadata2;
  uint64_t v75 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  CGRect v78 = (char *)&v59 - v17;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _GeometryActionModifier<CGSize>);
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v86 = v11;
  uint64_t v87 = &type metadata for MiniPopoverButtonStyle;
  uint64_t v88 = WitnessTable;
  unint64_t v89 = v15;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v65 = OpaqueTypeConformance2;
  unint64_t v20 = lazy protocol witness table accessor for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>();
  unint64_t v21 = v60;
  unint64_t v84 = v60;
  unint64_t v85 = v20;
  uint64_t v63 = v18;
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v86 = OpaqueTypeMetadata2;
  uint64_t v87 = (ValueMetadata *)v18;
  uint64_t v88 = OpaqueTypeConformance2;
  unint64_t v89 = v64;
  uint64_t v70 = swift_getOpaqueTypeMetadata2();
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v62 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  CGRect v67 = (char *)&v59 - v24;
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = v77;
  *(void *)(v25 + 16) = a3;
  *(void *)(v25 + 24) = v26;
  uint64_t v27 = v61;
  *(void *)(v25 + 32) = v61;
  *(void *)(v25 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v21;
  unint64_t v28 = v21;
  long long v29 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v25 + 112) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v25 + 128) = v29;
  *(void *)(v25 + 144) = *(void *)(a2 + 96);
  long long v30 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v25 + 48) = *(_OWORD *)a2;
  *(_OWORD *)(v25 + 64) = v30;
  long long v31 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v25 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v25 + 96) = v31;
  uint64_t v79 = a3;
  CGRect v80 = v26;
  long long v32 = v26;
  uint64_t v81 = v27;
  unint64_t v82 = v28;
  unint64_t v33 = v28;
  uint64_t v83 = a2;
  outlined retain of MiniPopoverButton<A, B>(a2);
  Button.init(action:label:)();
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v13, v11);
  uint64_t v86 = a3;
  uint64_t v87 = v32;
  uint64_t v88 = v27;
  unint64_t v89 = v28;
  type metadata accessor for MiniPopoverButton();
  uint64_t v66 = MiniPopoverButton.$isPopoverVisible.getter();
  uint64_t v35 = v34;
  LODWORD(v59) = v36;
  uint64_t v37 = static Anchor.Source<A>.bounds.getter();
  uint64_t v39 = (uint64_t)v71;
  uint64_t v38 = v72;
  *CGRect v71 = v37;
  uint64_t v40 = v73;
  (*(void (**)(uint64_t, void, uint64_t))(v38 + 104))(v39, *MEMORY[0x263F1A030], v73);
  MiniPopoverButton.knownPopoverSize.getter();
  uint64_t v43 = MiniPopoverButton.arrowEdge(proxy:knownPopoverSize:)(v74, v42, v42, v41 & 1);
  uint64_t v44 = swift_allocObject();
  unint64_t v45 = v77;
  *(void *)(v44 + 16) = a3;
  *(void *)(v44 + 24) = v45;
  *(void *)(v44 + 32) = v27;
  *(void *)(v44 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v33;
  long long v46 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v44 + 112) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v44 + 128) = v46;
  *(void *)(v44 + 144) = *(void *)(a2 + 96);
  long long v47 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v44 + 48) = *(_OWORD *)a2;
  *(_OWORD *)(v44 + 64) = v47;
  long long v48 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v44 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v44 + 96) = v48;
  outlined retain of MiniPopoverButton<A, B>(a2);
  swift_checkMetadataState();
  uint64_t v49 = v62;
  uint64_t v50 = v43;
  uint64_t v51 = v68;
  uint64_t v52 = v78;
  View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)(v66, v35, v59 & 1, v39, v50);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v52, v51);
  uint64_t v53 = v69;
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
  uint64_t v55 = v67;
  uint64_t v56 = v70;
  v54(v67, v49, v70);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v53 + 8);
  v57(v49, v56);
  v54(v76, v55, v56);
  return ((uint64_t (*)(char *, uint64_t))v57)(v55, v56);
}

uint64_t closure #1 in closure #1 in MiniPopoverButton.body.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  outlined retain of ReflowSpacingAdjustment?((uint64_t)&v3);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  MEMORY[0x21054A870](&v2);
  Binding.wrappedValue.setter();
  outlined release of ReflowSpacingAdjustment?((uint64_t)&v3);
  return swift_release();
}

uint64_t closure #2 in closure #1 in MiniPopoverButton.body.getter@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(void))(v8 + 72))();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v11(v10, v7, a1);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v7, a1);
  v11(a2, v10, a1);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a1);
}

uint64_t closure #3 in closure #1 in MiniPopoverButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = a4;
  long long v32 = a6;
  uint64_t v31 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _GeometryActionModifier<CGSize>);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v29 - v17;
  (*(void (**)(double))(a1 + 88))(v16);
  type metadata accessor for CGSize(0);
  uint64_t v20 = v19;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v29;
  *(void *)(v21 + 24) = a3;
  *(void *)(v21 + 32) = v30;
  *(void *)(v21 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = a5;
  long long v22 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v21 + 112) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v21 + 128) = v22;
  *(void *)(v21 + 144) = *(void *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v21 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v21 + 64) = v23;
  long long v24 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v21 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v21 + 96) = v24;
  outlined retain of MiniPopoverButton<A, B>(a1);
  lazy protocol witness table accessor for type CGSize and conformance CGSize(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, type metadata accessor for CGSize);
  View.onGeometryChange<A>(for:of:action:)(v20, (uint64_t)specialized implicit closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter, 0, (uint64_t)partial apply for closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter, v21, a3, v20, a5);
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, a3);
  unint64_t v25 = lazy protocol witness table accessor for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>();
  uint64_t v33 = a5;
  unint64_t v34 = v25;
  swift_getWitnessTable();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v26(v18, v14, v11);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27(v14, v11);
  v26(v32, v18, v11);
  return ((uint64_t (*)(char *, uint64_t))v27)(v18, v11);
}

uint64_t specialized implicit closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = GeometryProxy.size.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t View.onGeometryChange<A>(for:of:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v15[0] = _GeometryActionModifier.init(value:action:)();
  v15[1] = v10;
  _OWORD v15[2] = v11;
  void v15[3] = v12;
  uint64_t v13 = type metadata accessor for _GeometryActionModifier();
  swift_retain();
  swift_retain();
  MEMORY[0x21054A570](v15, a6, v13, a8);
  swift_release();
  return swift_release();
}

void closure #2 in MiniPopoverButton.body.getter(void (**a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v23 = v8;
  *((void *)&v23 + 1) = v9;
  *(void *)&long long v24 = v10;
  *((void *)&v24 + 1) = v11;
  type metadata accessor for MiniPopoverButton();
  MiniPopoverButton.knownPopoverSize.getter();
  if (v12)
  {
    type metadata accessor for SecureHostingController();
    a1[11]();
    uint64_t v13 = (void *)specialized SecureHostingController.__allocating_init(rootView:)((uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a3);
    id v14 = objc_msgSend(v13, sel_view);
    if (v14)
    {
      uint64_t v15 = v14;
      objc_msgSend(v14, sel_intrinsicContentSize);
      uint64_t v17 = v16;
      uint64_t v19 = v18;

      long long v20 = *((_OWORD *)a1 + 1);
      long long v23 = *(_OWORD *)a1;
      long long v24 = v20;
      v21[1] = v17;
      void v21[2] = v19;
      char v22 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGSize?>);
      State.wrappedValue.setter();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t protocol witness for View.body.getter in conformance MiniPopoverButton<A, B>@<X0>(void *a1@<X0>, long long *a2@<X8>)
{
  return MiniPopoverButton.body.getter(a1, a2);
}

uint64_t partial apply for closure #1 in MiniPopoverButton.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in MiniPopoverButton.body.getter(a1, v2 + 48, *(void *)(v2 + 16), *(ValueMetadata **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t outlined retain of MiniPopoverButton<A, B>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle;
  if (!lazy protocol witness table cache variable for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>;
  if (!lazy protocol witness table cache variable for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _GeometryActionModifier<CGSize>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #2 in MiniPopoverButton.body.getter()
{
  return partial apply for closure #2 in MiniPopoverButton.body.getter((uint64_t (*)(void *, void, void, void, void))closure #2 in MiniPopoverButton.body.getter);
}

uint64_t specialized MiniPopoverButton.popoverState.getter()
{
  uint64_t result = *(void *)(v0 + 56);
  if (!result)
  {
    type metadata accessor for MiniPopoverState();
    lazy protocol witness table accessor for type CGSize and conformance CGSize((unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState, v2, (void (*)(uint64_t))type metadata accessor for MiniPopoverState);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in MiniPopoverButton.body.getter()
{
  return partial apply for closure #2 in MiniPopoverButton.body.getter((uint64_t (*)(void *, void, void, void, void))closure #1 in closure #1 in MiniPopoverButton.body.getter);
}

uint64_t partial apply for closure #2 in MiniPopoverButton.body.getter(uint64_t (*a1)(void *, void, void, void, void))
{
  return a1(v1 + 6, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #2 in closure #1 in MiniPopoverButton.body.getter@<X0>(char *a1@<X8>)
{
  return closure #2 in closure #1 in MiniPopoverButton.body.getter(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #3 in closure #1 in MiniPopoverButton.body.getter@<X0>(char *a1@<X8>)
{
  return closure #3 in closure #1 in MiniPopoverButton.body.getter((uint64_t)(v1 + 6), v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t objectdestroyTm_5()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 152, 7);
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter()
{
  return closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter();
}

ValueMetadata *type metadata accessor for MiniPopoverButtonStyle()
{
  return &type metadata for MiniPopoverButtonStyle;
}

uint64_t sub_20C4B7F0C()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in MiniPopoverButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>);
    lazy protocol witness table accessor for type CGSize and conformance CGSize(&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, 255, MEMORY[0x263F1A0D0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CGSize and conformance CGSize(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20C4B828C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned Int) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

NSString *one-time initialization function for PaperKitPDFThumbnailViewDidSelectPageNotification()
{
  uint64_t result = (NSString *)MEMORY[0x21054D080](0xD000000000000031, 0x800000020C857950);
  PaperKitPDFThumbnailViewDidSelectPageNotification = result;
  return result;
}

NSNotificationName PaperKitPDFThumbnailViewDidSelectPageNotification.getter()
{
  if (one-time initialization token for PaperKitPDFThumbnailViewDidSelectPageNotification != -1) {
    swift_once();
  }
  NSNotificationName v0 = PaperKitPDFThumbnailViewDidSelectPageNotification;
  return v0;
}

void key path setter for PaperDocumentThumbnailView.documentView : PaperDocumentThumbnailView(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  id v2 = v1;
  PaperDocumentThumbnailView.documentView.didset();
}

void PaperDocumentThumbnailView.documentView.didset()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x210550400](v2);
  swift_unknownObjectWeakAssign();

  uint64_t v4 = *(void **)(v0 + v1);
  uint64_t v5 = MEMORY[0x210550400](v2);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t v7 = (id *)(v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    id v8 = *v7;
    id v9 = v4;
  }
  else
  {
    id v10 = v4;
    id v8 = 0;
  }
  objc_msgSend(v4, sel_setPDFView_, v8);

  uint64_t v11 = MEMORY[0x210550400](v2);
  if (v11)
  {
    char v12 = (void *)v11;
    swift_unknownObjectWeakAssign();
  }
  PaperDocumentThumbnailView.allowsDocumentStructureEditingChanged()();
}

uint64_t PaperDocumentThumbnailView.documentView.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

void PaperDocumentThumbnailView.documentView.setter(void *a1)
{
}

void (*PaperDocumentThumbnailView.documentView.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  CGFloat v3[4] = v1;
  void v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v5);
  return PaperDocumentThumbnailView.documentView.modify;
}

void PaperDocumentThumbnailView.documentView.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

    PaperDocumentThumbnailView.documentView.didset();
  }
  free(v3);
}

BOOL static PaperDocumentThumbnailView.ThumbnailLayout.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void PaperDocumentThumbnailView.ThumbnailLayout.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PaperDocumentThumbnailView.ThumbnailLayout.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PaperDocumentThumbnailView.thumbnailLayout.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

id PaperDocumentThumbnailView.thumbnailLayout.setter(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout);
  swift_beginAccess();
  *uint64_t v3 = v2;
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setLayoutMode_, v2 ^ 1u);
}

void (*PaperDocumentThumbnailView.thumbnailLayout.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout;
  v3[3] = v1;
  CGFloat v3[4] = v4;
  swift_beginAccess();
  return PaperDocumentThumbnailView.thumbnailLayout.modify;
}

void PaperDocumentThumbnailView.thumbnailLayout.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0) {
    objc_msgSend(*(id *)(v3[3] + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setLayoutMode_, (*(unsigned char *)(v3[3] + v3[4]) & 1) == 0);
  }
  free(v3);
}

id PaperDocumentThumbnailView.contentInset.getter()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_contentInset);
}

id PaperDocumentThumbnailView.contentInset.setter()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setContentInset_);
}

void (*PaperDocumentThumbnailView.contentInset.modify(void *a1))(double **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  CGFloat v3[4] = v1;
  void v3[5] = v4;
  objc_msgSend(*(id *)(v1 + v4), sel_contentInset);
  *uint64_t v3 = v5;
  v3[1] = v6;
  v3[2] = v7;
  v3[3] = v8;
  return PaperDocumentThumbnailView.contentInset.modify;
}

void PaperDocumentThumbnailView.contentInset.modify(double **a1)
{
  uint64_t v1 = *a1;
  objc_msgSend(*(id *)(*((void *)*a1 + 4) + *((void *)*a1 + 5)), sel_setContentInset_, **a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

id PaperDocumentThumbnailView.thumbnailSize.getter()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_thumbnailSize);
}

id PaperDocumentThumbnailView.thumbnailSize.setter()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setThumbnailSize_);
}

id (*PaperDocumentThumbnailView.thumbnailSize.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  a1[2] = v1;
  a1[3] = v3;
  objc_msgSend(*(id *)(v1 + v3), sel_thumbnailSize);
  *a1 = v4;
  a1[1] = v5;
  return PaperDocumentThumbnailView.thumbnailSize.modify;
}

id PaperDocumentThumbnailView.thumbnailSize.modify(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 16) + *(void *)(a1 + 24)), sel_setThumbnailSize_, *(double *)a1, *(double *)(a1 + 8));
}

void PaperDocumentThumbnailView.updateThumbnailSize()()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  id v2 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView];
  id v3 = objc_msgSend(v0, sel_traitCollection);
  CGSize v4 = PaperDocumentThumbnailView.defaultThumbnailViewCellSize(for:)((UITraitCollection)v3);

  objc_msgSend(v2, sel_setThumbnailSize_, v4.width, v4.height);
  id v9 = *(id *)&v0[v1];
  id v5 = objc_msgSend(v0, sel_traitCollection);
  uint64_t v6 = v5;
  if (v0[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_supportsLargeThumbnails] == 1)
  {
    id v7 = objc_msgSend(v5, sel_horizontalSizeClass);

    BOOL v8 = v7 == (id)2;
  }
  else
  {

    BOOL v8 = 0;
  }
  objc_msgSend(v9, sel_setLargeThumbnails_, v8);
}

double PaperDocumentThumbnailView.defaultThumbnailWidth(for:)(id a1)
{
  if (v1[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_supportsLargeThumbnails] == 1
    && objc_msgSend(a1, sel_horizontalSizeClass) == (id)2)
  {
    if (one-time initialization token for largeThumbnailViewWidth != -1) {
      swift_once();
    }
    double v3 = *(double *)&static UIConstants.largeThumbnailViewWidth;
  }
  else
  {
    double v3 = 81.0;
  }
  id v4 = objc_msgSend(self, sel_defaultMetrics);
  objc_msgSend(v4, sel_scaledValueForValue_compatibleWithTraitCollection_, a1, v3);
  double v6 = v5;

  id v7 = objc_msgSend(v1, sel_window);
  if (v7)
  {
    BOOL v8 = v7;
    id v9 = objc_msgSend(v7, sel_screen);

    objc_msgSend(v9, sel_scale);
    double v11 = v10;
  }
  else
  {
    double v11 = 1.0;
  }
  double v12 = (v3 + (v6 - v3) * 0.5) * v11;
  double v13 = floor(v12);
  double v14 = v12 - v13;
  double v15 = ceil(v12);
  if (v14 < 0.49) {
    double v15 = v13;
  }
  return v15 / v11;
}

CGSize __swiftcall PaperDocumentThumbnailView.defaultThumbnailViewCellSize(for:)(UITraitCollection a1)
{
  PaperDocumentThumbnailView.defaultThumbnailWidth(for:)(a1.super.isa);
  id v2 = objc_msgSend(v1, sel_window);
  if (v2)
  {
    id v4 = v2;
    id v5 = objc_msgSend(v2, sel_screen);

    objc_msgSend(v5, sel_scale);
  }
  double v6 = UnknownCanvasElementView.flags.modify(v2, v3);
  result.CGFloat height = v7;
  result.CGFloat width = v6;
  return result;
}

char *PaperDocumentThumbnailView.init(frame:supportsLargeThumbnails:)(char a1, double a2, double a3, double a4, double a5)
{
  double v6 = v5;
  swift_getObjectType();
  swift_unknownObjectWeakInit();
  v6[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout] = 1;
  id v12 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentThumbnailView.ThumbnailDelegate());
  double v13 = v6;
  id v14 = objc_msgSend(v12, sel_init);
  *(void *)&v13[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailDelegate] = v14;
  id v15 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PPKPDFThumbnailView()), sel_initWithFrame_, 0.0, 0.0, 100.0, 100.0);
  uint64_t v16 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  *(void *)&v13[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView] = v15;
  objc_msgSend(v15, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(*(id *)&v13[v16], sel_setAllowsPageReordering_, 1);
  objc_msgSend(*(id *)&v13[v16], sel_setThumbnailContextMenuDelegate_, v14);
  objc_msgSend(*(id *)&v13[v16], sel_setThumbnailDataSourceDelegate_, v14);
  v13[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_supportsLargeThumbnails] = a1;

  v39.receiver = v13;
  v39.super_class = (Class)type metadata accessor for PaperDocumentThumbnailView();
  uint64_t v17 = (char *)objc_msgSendSuper2(&v39, sel_initWithFrame_, a2, a3, a4, a5);
  PaperDocumentThumbnailView.updateThumbnailSize()();
  swift_unknownObjectWeakAssign();
  uint64_t v18 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  objc_msgSend(v17, sel_addSubview_, *(void *)&v17[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView]);
  uint64_t v19 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_20C8344C0;
  id v21 = objc_msgSend(*(id *)&v17[v18], sel_leadingAnchor);
  id v22 = objc_msgSend(v17, sel_leadingAnchor);
  id v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

  *(void *)(v20 + 32) = v23;
  id v24 = objc_msgSend(*(id *)&v17[v18], sel_trailingAnchor);
  id v25 = objc_msgSend(v17, sel_trailingAnchor);
  id v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

  *(void *)(v20 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v26;
  id v27 = objc_msgSend(*(id *)&v17[v18], sel_topAnchor);
  id v28 = objc_msgSend(v17, sel_topAnchor);
  id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

  *(void *)(v20 + 48) = v29;
  id v30 = objc_msgSend(*(id *)&v17[v18], sel_bottomAnchor);
  id v31 = objc_msgSend(v17, sel_bottomAnchor);
  id v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

  *(void *)(v20 + 56) = v32;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_activateConstraints_, isa);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_20C832C20;
  uint64_t v35 = type metadata accessor for UITraitHorizontalSizeClass();
  uint64_t v36 = MEMORY[0x263F81F30];
  *(void *)(v34 + 32) = v35;
  *(void *)(v34 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v36;
  uint64_t v37 = v17;
  UIView.registerForTraitChanges<A>(_:handler:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return v37;
}

Swift::Void __swiftcall PaperDocumentThumbnailView.allowsDocumentStructureEditingChanged()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView);
  uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v2);
  if (!v3)
  {
    id v8 = v1;
LABEL_6:
    id v7 = 0;
    goto LABEL_7;
  }
  id v4 = (void *)v3;
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) != 1)
  {
    id v9 = v1;

    goto LABEL_6;
  }
  id v5 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument);
  id v6 = v1;
  id v7 = objc_msgSend(v5, sel_allowsDocumentAssembly);

LABEL_7:
  objc_msgSend(v1, sel_setAllowsPageReordering_, v7);
}

uint64_t PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CRStableAsset();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  id v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v30 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, v8, v17);
  URL.pathExtension.getter();
  CRStableAsset.init(url:extension:)();
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 1, 1, v20);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v19, v12);
  unint64_t v21 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v22 = (v14 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  id v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = 0;
  *((void *)v23 + 3) = 0;
  id v24 = v30;
  *((void *)v23 + 4) = v30;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v23[v21], v15, v12);
  uint64_t v25 = v32;
  *(void *)&v23[v22] = v31;
  id v26 = &v23[(v22 + 15) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v27 = v33;
  *(void *)id v26 = v25;
  *((void *)v26 + 1) = v27;
  id v28 = v24;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:), (uint64_t)v23);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
}

uint64_t closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  void v8[5] = a4;
  uint64_t v9 = type metadata accessor for URL();
  v8[10] = v9;
  v8[11] = *(void *)(v9 - 8);
  v8[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:), 0, 0);
}

uint64_t closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)()
{
  uint64_t v1 = MEMORY[0x210550400](*(void *)(v0 + 40) + OBJC_IVAR____TtCC8PaperKit26PaperDocumentThumbnailView17ThumbnailDelegate_thumbnailView);
  *(void *)(v0 + 104) = v1;
  if (v1)
  {
    type metadata accessor for MainActor();
    *(void *)(v0 + 112) = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:), v3, v2);
  }
  else
  {
    (*(void (**)(void))(v0 + 64))();
    swift_task_dealloc();
    id v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

{
  uint64_t v0;
  char *v1;
  char *v2;
  uint64_t v4;

  uint64_t v1 = *(char **)(v0 + 104);
  swift_release();
  uint64_t v2 = &v1[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView];
  swift_beginAccess();
  *(void *)(v0 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = MEMORY[0x210550400](v2);

  return MEMORY[0x270FA2498](closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  if (*(void *)(v0 + 120))
  {
    CRStableAsset.url.getter();
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v1;
    void *v1 = v0;
    v1[1] = closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:);
    uint64_t v2 = *(void *)(v0 + 96);
    uint64_t v3 = *(void *)(v0 + 56);
    return PaperDocumentView.insertFile(at:at:)(v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 64))(0);
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 64))(*(void *)(v0 + 136));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 120);
  uint64_t v3 = *(void *)(*(void *)v1 + 96);
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v5 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return MEMORY[0x270FA2498](closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:), 0, 0);
}

uint64_t PaperDocumentThumbnailView.ThumbnailDelegate.menuElements(for:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtCC8PaperKit26PaperDocumentThumbnailView17ThumbnailDelegate_thumbnailView);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = (void *)v5;
  uint64_t v7 = v5 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  swift_beginAccess();
  uint64_t v8 = (void *)MEMORY[0x210550400](v7);

  if (!v8) {
    return 0;
  }
  uint64_t v9 = a2(a1);

  return v9;
}

id PaperDocumentThumbnailView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperDocumentThumbnailView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PaperDocumentThumbnailView()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type PaperDocumentThumbnailView.ThumbnailLayout and conformance PaperDocumentThumbnailView.ThumbnailLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type PaperDocumentThumbnailView.ThumbnailLayout and conformance PaperDocumentThumbnailView.ThumbnailLayout;
  if (!lazy protocol witness table cache variable for type PaperDocumentThumbnailView.ThumbnailLayout and conformance PaperDocumentThumbnailView.ThumbnailLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentThumbnailView.ThumbnailLayout and conformance PaperDocumentThumbnailView.ThumbnailLayout);
  }
  return result;
}

uint64_t sub_20C4BA454@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v3);
  *a2 = result;
  return result;
}

uint64_t sub_20C4BA4B0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

id sub_20C4BA504(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return PaperDocumentThumbnailView.thumbnailLayout.setter(&v2);
}

id sub_20C4BA53C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_contentInset);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

id sub_20C4BA580(double *a1, void *a2)
{
  return objc_msgSend(*(id *)(*a2 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setContentInset_, *a1, a1[1], a1[2], a1[3]);
}

id sub_20C4BA5A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_thumbnailSize);
  *a2 = v4;
  a2[1] = v5;
  return result;
}

id sub_20C4BA5E4(double *a1, void *a2)
{
  return objc_msgSend(*(id *)(*a2 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setThumbnailSize_, *a1, a1[1]);
}

uint64_t method lookup function for PaperDocumentThumbnailView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PaperDocumentThumbnailView);
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.documentView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.documentView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.documentView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailLayout.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailLayout.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailLayout.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.contentInset.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.contentInset.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.contentInset.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailSize.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailSize.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailSize.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

unsigned char *storeEnumTagSinglePayload for PaperDocumentThumbnailView.ThumbnailLayout(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *id result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C4BA9B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaperDocumentThumbnailView.ThumbnailLayout()
{
  return &type metadata for PaperDocumentThumbnailView.ThumbnailLayout;
}

uint64_t type metadata accessor for PaperDocumentThumbnailView.ThumbnailDelegate()
{
  return self;
}

uint64_t sub_20C4BAA10()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C4BAA48()
{
  uint64_t v1 = type metadata accessor for CRStableAsset();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CRStableAsset() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = *(void *)((char *)v1 + v6);
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = (void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  id v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  *id v15 = v2;
  v15[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)(a1, v7, v8, v9, v11, v10, v13, v14);
}

void specialized closure #1 in PaperDocumentThumbnailView.init(frame:supportsLargeThumbnails:)()
{
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v30 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v30 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v30 + 1;
    if (!v12)
    {
      int64_t v13 = v30 + 2;
      if (v30 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v30 + 3;
        if (v30 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v30 + 4;
          if (v30 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v30 = v13;
LABEL_28:
    uint64_t v16 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v33[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    id v15 = *(void **)&v33[0];
    *(void *)&v32[0] = v16;
    id v17 = v16;
    id v18 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIFont?);
    swift_dynamicCast();
    uint64_t v19 = *(void *)&v33[0];
    outlined init with take of Any((_OWORD *)((char *)v33 + 8), v31);
    outlined init with take of Any(v31, v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v6 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v22) & ~*(void *)(v6 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v6 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v8 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v19;
    uint64_t result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(void *)(v2 + 56) + 32 * v8));
    ++*(void *)(v2 + 16);
  }
  int64_t v14 = v30 + 5;
  if (v30 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v2;
  }
  unint64_t v12 = *(void *)(v29 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v30 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  long long v28;
  long long v29;
  uint64_t v30;
  _OWORD v31[2];
  long long v32;
  long long v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;

  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  BOOL v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  unint64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      int64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    int64_t v14 = *(void *)(v27 + 8 * v13);
    id v15 = v8 + 1;
    if (!v14)
    {
      id v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      int64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        id v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        int64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          id v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          int64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    unint64_t v8 = v15;
LABEL_28:
    id v17 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v39 + 8);
    *(void *)&v39[0] = v17;
    v37[0] = v39[0];
    v37[1] = v39[1];
    uint64_t v38 = v40;
    *(void *)&v36[0] = v17;
    type metadata accessor for NSAttributedStringKey(0);
    id v18 = v17;
    swift_dynamicCast();
    outlined init with take of Any((_OWORD *)((char *)v37 + 8), v31);
    uint64_t v32 = v28;
    uint64_t v33 = v29;
    uint64_t v34 = v30;
    outlined init with take of Any(v31, v35);
    int64_t v28 = v32;
    uint64_t v29 = v33;
    int64_t v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    Swift::Int v20 = result & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        char v24 = v21 == v23;
        if (v21 == v23) {
          uint64_t v21 = 0;
        }
        v22 |= v24;
        unint64_t v25 = *(void *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    unint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)unint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  uint64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v2;
  }
  int64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    id v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    id v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    int64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  _OWORD v29[4];
  _OWORD v30[2];
  _OWORD v31[3];

  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFDocumentWriteOption, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  BOOL v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v28 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v28 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v28 + 1;
    if (!v12)
    {
      int64_t v13 = v28 + 2;
      if (v28 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v28 + 3;
        if (v28 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v28 + 4;
          if (v28 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v28 = v13;
LABEL_28:
    id v15 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v31[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    *(void *)&v30[0] = v15;
    uint64_t v16 = *(id *)&v31[0];
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v17 = *(void *)&v31[0];
    outlined init with take of Any((_OWORD *)((char *)v31 + 8), v29);
    outlined init with take of Any(v29, v31);
    outlined init with take of Any(v31, v30);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    id v18 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    Swift::Int v20 = v18 & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        char v24 = v21 == v23;
        if (v21 == v23) {
          uint64_t v21 = 0;
        }
        v22 |= v24;
        unint64_t v25 = *(void *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v8 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v17;
    uint64_t result = (uint64_t)outlined init with take of Any(v30, (_OWORD *)(*(void *)(v2 + 56) + 32 * v8));
    ++*(void *)(v2 + 16);
  }
  int64_t v14 = v28 + 5;
  if (v28 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v2;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v28 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  _OWORD v29[4];
  _OWORD v30[2];
  _OWORD v31[3];

  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorAttributeName, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  BOOL v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v28 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v28 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v28 + 1;
    if (!v12)
    {
      int64_t v13 = v28 + 2;
      if (v28 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v28 + 3;
        if (v28 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v28 + 4;
          if (v28 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v28 = v13;
LABEL_28:
    id v15 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v31[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    *(void *)&v30[0] = v15;
    uint64_t v16 = *(id *)&v31[0];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIFontDescriptorTraitKey : UIFontWeight]);
    swift_dynamicCast();
    id v17 = *(void *)&v31[0];
    outlined init with take of Any((_OWORD *)((char *)v31 + 8), v29);
    outlined init with take of Any(v29, v31);
    outlined init with take of Any(v31, v30);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    id v18 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    Swift::Int v20 = v18 & ~v19;
    uint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        char v24 = v21 == v23;
        if (v21 == v23) {
          uint64_t v21 = 0;
        }
        v22 |= v24;
        unint64_t v25 = *(void *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v8 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v17;
    uint64_t result = (uint64_t)outlined init with take of Any(v30, (_OWORD *)(*(void *)(v2 + 56) + 32 * v8));
    ++*(void *)(v2 + 16);
  }
  int64_t v14 = v28 + 5;
  if (v28 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v2;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v28 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t FormFillingView.unorderedFormFields.getter()
{
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
  uint64_t v1 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    if (*(void *)(MEMORY[0x263F8EE78] + 16))
    {
LABEL_12:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>);
      uint64_t v14 = static _DictionaryStorage.allocate(capacity:)();
LABEL_16:
      uint64_t v18 = v14;
      uint64_t v15 = swift_bridgeObjectRetain();
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v15, 1, &v18);
      swift_bridgeObjectRelease();
      return v18;
    }
LABEL_15:
    uint64_t v14 = MEMORY[0x263F8EE80];
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t v18 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v18;
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        unint64_t v9 = (void *)MEMORY[0x21054E050](v7, v5);
      }
      else {
        unint64_t v9 = *(id *)(v5 + 8 * v7 + 32);
      }
      unint64_t v10 = v9;
      uint64_t v11 = *(int *)(v17 + 48);
      (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v9) + 0xE0))();
      *(void *)&v3[v11] = v10;
      uint64_t v18 = v8;
      unint64_t v13 = *(void *)(v8 + 16);
      unint64_t v12 = *(void *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v8 = v18;
      }
      ++v7;
      *(void *)(v8 + 16) = v13 + 1;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v3, v8+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(void *)(v1 + 72) * v13, &demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16)) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t FormFillingView.formFields.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas);
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x2F8))();
    swift_bridgeObjectRetain();

    id v4 = objc_msgSend(v5, sel_effectiveUserInterfaceLayoutDirection);
    LOBYTE(v4) = v4 == 0;
    if (v2 < 0) {
      goto LABEL_8;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v2 < 0)
    {
LABEL_8:
      unint64_t v8 = swift_bridgeObjectRetain();
      uint64_t v6 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v8);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  if ((v2 & 0x4000000000000000) != 0) {
    goto LABEL_8;
  }
  uint64_t v6 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
LABEL_7:
  uint64_t v9 = v6;
  specialized MutableCollection<>.sort(by:)(&v9, (char)v4);
  swift_bridgeObjectRelease();
  return v9;
}

void *FormFillingView.activeWidget.getter()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (v2 >> 62) {
    goto LABEL_14;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v8 = objc_msgSend(v5, sel_uiControl);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease_n();

        return v6;
      }

      ++v4;
      if (v7 == v3) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  return 0;
}

void FormFillingView.init(frame:canvas:)(void *a1, double a2, double a3, double a4, double a5)
{
  swift_unknownObjectWeakInit();
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields] = MEMORY[0x263F8EE78];
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_formFieldGroups] = v11;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets] = v11;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture] = 0;
  unint64_t v12 = &OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_doubleTapGesture] = 0;
  unint64_t v13 = &OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_editMenuInteraction] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcFormRegions] = v11;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis] = 0;
  uint64_t v14 = self;
  uint64_t v15 = v5;
  id v16 = objc_msgSend(v14, sel_preferredInsertionOrder);
  type metadata accessor for AFTextContentType(0);
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v44 = v11;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    uint64_t v19 = 0;
    uint64_t v20 = v11;
    do
    {
      id v21 = *(id *)(v17 + 8 * v19 + 32);
      FormContentType.init(_:)((__C::AFTextContentType)v21);
      id v22 = (id)specialized FormContentType.uiTextContentType.getter();

      uint64_t v44 = v20;
      unint64_t v24 = *(void *)(v20 + 16);
      unint64_t v23 = *(void *)(v20 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        uint64_t v20 = v44;
      }
      ++v19;
      *(void *)(v20 + 16) = v24 + 1;
      *(void *)(v20 + 8 * v24 + 32) = v22;
    }
    while (v18 != v19);
    swift_bridgeObjectRelease();
    unint64_t v13 = &OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture;
    unint64_t v12 = &OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit15FormFillingView_preferredTextContentTypes] = v20;
  uint64_t v25 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  type metadata accessor for FormPageAnalytics();
  swift_allocObject();
  *(void *)&v15[v25] = FormPageAnalytics.init()();
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit15FormFillingView_signatureFieldsSigned] = 0;
  swift_unknownObjectWeakAssign();

  v43.receiver = v15;
  v43.super_class = (Class)type metadata accessor for FormFillingView();
  BOOL v26 = (char *)objc_msgSendSuper2(&v43, sel_initWithFrame_, a2, a3, a4, a5);
  *(void *)(*(void *)&v26[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics] + 128) = &protocol witness table for FormFillingView;
  swift_unknownObjectWeakAssign();
  id v27 = objc_allocWithZone(MEMORY[0x263F82CB0]);
  int64_t v28 = v26;
  id v29 = objc_msgSend(v27, sel_initWithTarget_action_, v28, sel_tap_);
  uint64_t v30 = OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture;
  uint64_t v31 = *(void **)&v28[OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture];
  *(void *)&v28[OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture] = v29;

  if (!*(void *)&v28[v30])
  {
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v28, sel_addGestureRecognizer_);
  id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v28, sel_doubleTap_);
  uint64_t v33 = v12[1];
  uint64_t v34 = *(void **)&v28[v33];
  *(void *)&v28[v33] = v32;

  uint64_t v35 = *(void **)&v28[v33];
  if (!v35)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v35, sel_setNumberOfTapsRequired_, 2);
  uint64_t v36 = *(void **)&v28[v30];
  if (!v36)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (!*(void *)&v28[v33])
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v36, sel_requireGestureRecognizerToFail_);
  if (!*(void *)&v28[v33])
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v28, sel_addGestureRecognizer_);
  id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82718]), sel_initWithDelegate_, v28);
  uint64_t v38 = v13[2];
  objc_super v39 = *(void **)&v28[v38];
  *(void *)&v28[v38] = v37;

  if (*(void *)&v28[v38])
  {
    id v40 = objc_msgSend(v28, sel_addInteraction_);
    (*(void (**)(uint64_t *__return_ptr, id))((*MEMORY[0x263F8EED0] & *a1) + 0x2C8))(&v44, v40);
    BOOL v41 = v44 != 1;
    uint64_t v42 = v28;
    objc_msgSend(v42, sel_setHidden_, v41);

    return;
  }
LABEL_20:
  __break(1u);
}

Swift::Void __swiftcall FormFillingView.tap(_:)(UITapGestureRecognizer *a1)
{
  unint64_t v2 = (unint64_t)v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas];
  uint64_t v5 = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas]);
  if (!v5) {
    return;
  }
  CGRect v76 = (void *)v5;
  [(UITapGestureRecognizer *)a1 locationInView:v1];
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  unint64_t v10 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x263F8EED0] & *v76) + 0x2C8))(v77);
  int v11 = LOBYTE(v77[0]);
  unint64_t v12 = (void *)(*(uint64_t (**)(void))((*v10 & *v76) + 0x2F8))();
  uint64_t v14 = v13;
  uint64_t ObjectType = swift_getObjectType();
  if (v11 != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 216))(ObjectType, v14);

    uint64_t v24 = MEMORY[0x210550400](v4);
    if (v24)
    {
      uint64_t v25 = (void *)v24;
      AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
    }
    BOOL v26 = FormFillingView.activeWidget.getter();
    if (v26)
    {
      id v27 = v26;
      id v28 = objc_msgSend(v26, sel_page);
      if (v28)
      {
        id v29 = v28;
        id v30 = objc_msgSend(v28, sel_view);

        if (!v30)
        {
          __break(1u);
          goto LABEL_69;
        }
        objc_msgSend(v30, sel_removeControlForAnnotation_, v27);

        uint64_t v31 = v27;
        id v27 = v30;
      }
      else
      {
        uint64_t v31 = v76;
      }

      id v32 = v27;
    }
    else
    {
      id v32 = v76;
    }

    *(unsigned char *)(*(void *)(v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics) + 19) = 49;
    return;
  }
  unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 64))(ObjectType, v14);

  if (!(v16 >> 62))
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease_n();
    id v22 = FormFillingView.widget(at:)(v7, v9);
    if (v22)
    {
      unint64_t v23 = v22;
      AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
      objc_msgSend(v23, sel_addControl);

LABEL_40:

      return;
    }
    uint64_t v50 = *(void *)((char *)v76 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (v50)
    {
      uint64_t v51 = (void *)(v50 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      if (*(void *)(*v51 + 16) || *(void *)(v51[1] + 16))
      {
        (*(void (**)(void, uint64_t, CGFloat, CGFloat))((*v10 & *v76) + 0x4D0))(0, 1, v7, v9);
        goto LABEL_40;
      }
      uint64_t v52 = FormFillingView.activeWidget.getter();
      if (!v52)
      {
        objc_msgSend((id)v2, sel_bounds);
        uint64_t v61 = OBJC_IVAR____TtC8PaperKit15FormFillingView_editMenuInteraction;
        uint64_t v62 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView_editMenuInteraction);
        if (v62)
        {
          CGFloat v63 = v57;
          CGFloat v64 = v58;
          CGFloat v65 = v59;
          CGFloat v66 = v60;
          objc_msgSend(v62, sel_locationInView_, v2);
          v82.CGFloat x = v67;
          v82.CGFloat y = v68;
          v85.origin.CGFloat x = v63;
          v85.origin.CGFloat y = v64;
          v85.size.CGFloat width = v65;
          v85.size.CGFloat height = v66;
          BOOL v69 = CGRectContainsPoint(v85, v82);
          unint64_t v70 = AnyCanvas.formFieldElements.getter();
          if (v70 >> 62) {
            uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
          }
          else {
            uint64_t v71 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if (!v71 || v69) {
            goto LABEL_40;
          }
          [(UITapGestureRecognizer *)a1 locationInView:v2];
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIEditMenuConfiguration);
          uint64_t v78 = 0;
          memset(v77, 0, sizeof(v77));
          uint64_t v72 = UIEditMenuConfiguration.init(identifier:sourcePoint:)();
          uint64_t v73 = *(void **)(v2 + v61);
          if (v73)
          {
            uint64_t v74 = (void *)v72;
            id v75 = v73;
            objc_msgSend(v75, sel_presentEditMenuWithConfiguration_, v74);

            goto LABEL_40;
          }
LABEL_73:
          __break(1u);
          return;
        }
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      uint64_t v53 = v52;
      id v54 = objc_msgSend(v52, sel_page);
      if (!v54)
      {
LABEL_53:
        (*(void (**)(void, uint64_t, CGFloat, CGFloat))((*v10 & *v76) + 0x4D0))(0, 1, v7, v9);

        goto LABEL_40;
      }
      uint64_t v55 = v54;
      id v56 = objc_msgSend(v54, sel_view);

      if (v56)
      {
        objc_msgSend(v56, sel_removeControlForAnnotation_, v53);

        goto LABEL_53;
      }
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
LABEL_63:
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  if (!v17) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v18 = 4;
  while (1)
  {
    if ((v16 & 0xC000000000000001) != 0) {
      id v19 = (id)MEMORY[0x21054E050](v18 - 4, v16);
    }
    else {
      id v19 = *(id *)(v16 + 8 * v18);
    }
    uint64_t v20 = v19;
    uint64_t v21 = v18 - 3;
    if (__OFADD__(v18 - 4, 1))
    {
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    objc_msgSend(v19, sel_frame);
    v80.CGFloat x = v7;
    v80.CGFloat y = v9;
    if (CGRectContainsPoint(v83, v80)) {
      break;
    }

    ++v18;
    if (v21 == v17) {
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v33 = FormFillingView.activeWidget.getter();
  if (v33)
  {
    uint64_t v34 = v33;
    id v35 = objc_msgSend(v33, sel_page);
    if (v35)
    {
      uint64_t v36 = v35;
      id v37 = objc_msgSend(v35, sel_view);

      if (!v37) {
        goto LABEL_70;
      }
      objc_msgSend(v37, sel_removeControlForAnnotation_, v34);

      uint64_t v34 = v37;
    }
  }
  uint64_t v38 = (void **)(v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields);
  swift_beginAccess();
  unint64_t v2 = (unint64_t)*v38;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v16 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v16)
    {
LABEL_28:
      uint64_t v39 = 4;
      do
      {
        id v40 = (v2 & 0xC000000000000001) != 0
            ? (UITapGestureRecognizer *)MEMORY[0x21054E050](v39 - 4, v2)
            : (UITapGestureRecognizer *)*(id *)(v2 + 8 * v39);
        a1 = v40;
        unint64_t v10 = (void *)(v39 - 3);
        if (__OFADD__(v39 - 4, 1)) {
          goto LABEL_62;
        }
        [(UITapGestureRecognizer *)v40 frame];
        v81.CGFloat x = v7;
        v81.CGFloat y = v9;
        BOOL v41 = CGRectContainsPoint(v84, v81);

        if (v41)
        {
          swift_bridgeObjectRelease_n();
          objc_msgSend(v20, sel_becomeFirstResponder);

          goto LABEL_47;
        }
        ++v39;
      }
      while (v10 != (void *)v16);
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v42 = v20;
  uint64_t v43 = specialized CanvasMembers.init(_:)(v42);
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  char v49 = v48;

  AnyCanvas.selection.setter(v43, v45, v47, v49 & 1);
LABEL_47:
}

Swift::Void __swiftcall FormFillingView.doubleTap(_:)(UITapGestureRecognizer *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas]);
  if (!v4) {
    return;
  }
  uint64_t v61 = (void *)v4;
  [(UITapGestureRecognizer *)a1 locationInView:v2];
  CGFloat x = v5;
  CGFloat y = v7;
  CGFloat v9 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(CGAffineTransform *__return_ptr))((*MEMORY[0x263F8EED0] & *v61) + 0x2C8))(&v62);
  if (LOBYTE(v62.a) != 1)
  {
    unint64_t v10 = (void *)(*(uint64_t (**)(void))((*v9 & *v61) + 0x2F8))();
    uint64_t v12 = v11;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v12 + 216))(ObjectType, v12);

    *(unsigned char *)(*(void *)&v2[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics] + 19) = 50;
  }
  unint64_t v14 = AnyCanvas.formFieldElements.getter();
  unint64_t v15 = v14;
  if (v14 >> 62) {
    goto LABEL_33;
  }
  uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v16; uint64_t v16 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v17 = 4;
    while (1)
    {
      id v18 = (v15 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x21054E050](v17 - 4, v15)
          : *(id *)(v15 + 8 * v17);
      id v19 = v18;
      uint64_t v20 = v17 - 3;
      if (__OFADD__(v17 - 4, 1)) {
        break;
      }
      objc_msgSend(v18, sel_frame);
      v64.CGFloat x = x;
      v64.CGFloat y = y;
      if (CGRectContainsPoint(v65, v64))
      {
        swift_bridgeObjectRelease_n();
        objc_msgSend(v19, sel_becomeFirstResponder);

        goto LABEL_16;
      }

      ++v17;
      if (v20 == v16) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
  }
LABEL_13:
  swift_bridgeObjectRelease_n();
  uint64_t v21 = FormFillingView.widget(at:)(x, y);
  if (!v21)
  {
    if (one-time initialization token for defaultFormFieldSize != -1) {
      swift_once();
    }
    CGFloat height = *((double *)&static FormFillingView.defaultFormFieldSize + 1);
    CGFloat width = *(double *)&static FormFillingView.defaultFormFieldSize;
    uint64_t v25 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis];
    if (v25)
    {
      id v26 = v25;
      if (!objc_msgSend(v26, sel_respondsToSelector_, sel_proposedFormRegionForPoint_existingFields_formSize_))goto LABEL_26; {
      objc_msgSend(v2, sel_frame);
      }
      double v28 = v27;
      double v30 = v29;
      CGFloat v31 = x / v27;
      CGFloat v32 = y / v29;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v34 = objc_msgSend(v26, sel_proposedFormRegionForPoint_existingFields_formSize_, isa, v31, v32, v28, v30);

      CGAffineTransformMakeScale(&v62, v28, v30);
      if (v34)
      {
        CGFloat a = v62.a;
        CGFloat b = v62.b;
        CGFloat c = v62.c;
        CGFloat d = v62.d;
        tCGFloat y = v62.ty;
        tCGFloat x = v62.tx;
        id v39 = objc_msgSend(v34, sel_quad);
        if (!v39) {
          goto LABEL_36;
        }
        id v40 = v39;
        objc_msgSend(v39, sel_boundingBox);
        CGFloat v42 = v41;
        CGFloat v44 = v43;
        CGFloat v46 = v45;
        CGFloat v48 = v47;

        v62.CGFloat a = a;
        v62.CGFloat b = b;
        v62.CGFloat c = c;
        v62.CGFloat d = d;
        v62.tCGFloat x = tx;
        v62.tCGFloat y = ty;
        v66.origin.CGFloat x = v42;
        v66.origin.CGFloat y = v44;
        v66.size.CGFloat width = v46;
        v66.size.CGFloat height = v48;
        CGRect v67 = CGRectApplyAffineTransform(v66, &v62);
        CGFloat x = v67.origin.x;
        CGFloat y = v67.origin.y;
        CGFloat width = v67.size.width;
        CGFloat height = v67.size.height;
      }
      else
      {
LABEL_26:
      }
    }
    char v49 = FormFillingView.addTextBox(at:analytics_documentType:)(5u, x, y, width, height);
    uint64_t v50 = v61;
    if (v49)
    {
      uint64_t v51 = specialized CanvasMembers.init(_:)(v49);
      AnyCanvas.selection.setter(v51, v53, v54, v52 & 1);

      uint64_t v50 = v61;
    }

    uint64_t v55 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
    uint64_t v56 = *(void *)(v55 + 40);
    BOOL v57 = __OFADD__(v56, 1);
    uint64_t v58 = v56 + 1;
    if (!v57)
    {
      *(void *)(v55 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v58;
      return;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return;
  }
  id v22 = v21;
  objc_msgSend(v21, sel_addControl);

LABEL_16:
}

Swift::Void __swiftcall FormFillingView.updateUI()()
{
  uint64_t v1 = v0;
  unint64_t v2 = (void *)MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas]);
  if (!v2) {
    return;
  }
  uint64_t v3 = v2;
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & *v2) + 0x2C8))(v30);
  int v4 = LOBYTE(v30[0]);
  if ((objc_msgSend(v1, sel_isHidden) & 1) == 0 && v4 != 1) {
    AnyCanvas.selectedCanvasElementIds.setter(MEMORY[0x263F8EE78]);
  }
  objc_msgSend(v1, sel_setHidden_, v4 != 1);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);
  unint64_t v5 = AnyCanvas.formFieldElements.getter();
  unint64_t v6 = v5;
  int v28 = v4;
  double v27 = v3;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_7:
      if (v7 < 1)
      {
        __break(1u);
        return;
      }
      for (uint64_t i = 0; i != v7; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0) {
          id v9 = (id)MEMORY[0x21054E050](i, v6);
        }
        else {
          id v9 = *(id *)(v6 + 8 * i + 32);
        }
        unint64_t v10 = v9;
        objc_msgSend(v9, sel_setNeedsLayout, v27);
      }
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v11 = &v1[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets];
  swift_beginAccess();
  uint64_t v12 = *(void *)v11;
  if (*(void *)v11 >> 62) {
    goto LABEL_36;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  int v14 = v28;
  for (uint64_t j = v13; j; uint64_t j = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v15 = 4;
    uint64_t v16 = 0;
    if ((v12 & 0xC000000000000001) != 0)
    {
LABEL_17:
      uint64_t v17 = (char *)MEMORY[0x21054E050](v16, v12);
      goto LABEL_19;
    }
    while (1)
    {
      uint64_t v17 = (char *)*(id *)(v12 + 8 * v15);
LABEL_19:
      id v18 = v17;
      uint64_t v19 = v16 + 1;
      if (__OFADD__(v16, 1)) {
        break;
      }
      if (v14 == 1)
      {
        if (one-time initialization token for formFieldBackgroundColor != -1) {
          swift_once();
        }
        uint64_t v20 = (void *)static UIConstants.formFieldBackgroundColor;
        id v21 = (id)static UIConstants.formFieldBackgroundColor;
      }
      else
      {
        uint64_t v20 = 0;
      }
      id v22 = *(void **)&v18[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor];
      *(void *)&v18[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = v20;
      id v23 = v20;
      if (v20)
      {
        if (v22)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
          uint64_t v24 = v22;
          id v25 = v23;
          char v26 = static NSObject.== infix(_:_:)();

          int v14 = v28;
          if (v26)
          {

            id v18 = v24;
LABEL_31:

            goto LABEL_32;
          }
        }
      }
      else if (!v22)
      {
        goto LABEL_31;
      }
      objc_msgSend(v18, sel_updateAnnotationEffect, v27);

LABEL_32:
      if (v19 == j) {
        goto LABEL_37;
      }
      uint64_t v16 = ++v15 - 4;
      if ((v12 & 0xC000000000000001) != 0) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain_n();
    int v14 = v28;
  }
LABEL_37:

  swift_bridgeObjectRelease_n();
}

void __swiftcall FormFillingView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  void *(*v13)(void *__return_ptr);
  void *v14;
  int v15;
  int v16;
  unsigned int v17;
  id v18;
  unsigned int v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  BOOL v31;
  char *v32;
  id v33;
  uint64_t v34;
  void *v35;
  char *v36;
  void *v37;
  id v38;
  id v39;
  int v40;
  void *v41;
  void v42[4];
  CGPoint v43;
  CGPoint v44;
  CGRect v45;
  CGRect v46;

  int v4 = v3;
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  double v8 = (void *)MEMORY[0x210550400](&v3[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas], *(void *)&with.is_nil);
  if (!v8) {
    return;
  }
  id v9 = v8;
  unint64_t v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v8) + 0x320))();
  if (!v11) {
    goto LABEL_30;
  }
  uint64_t v12 = (void *)v11;
  if (isa && [(objc_class *)isa type] == (id)11) {
    goto LABEL_9;
  }
  uint64_t v13 = *(void *(**)(void *__return_ptr))((*v10 & *v9) + 0x2C8);
  int v14 = v13(v42);
  uint64_t v15 = LOBYTE(v42[0]);
  ((void (*)(void *__return_ptr, void *))v13)(v42, v14);
  uint64_t v16 = LOBYTE(v42[0]);
  uint64_t v17 = isa ? [(objc_class *)isa PK_isEventFromPencil] : 0;
  id v18 = objc_msgSend(v12, sel_selectionInteraction);
  objc_msgSend(v4, sel_convertPoint_toCoordinateSpace_, v12, x, y);
  uint64_t v19 = objc_msgSend(v18, sel_hasStrokesAtLocation_);

  if (v19)
  {
LABEL_9:

    return;
  }
  uint64_t v20 = FormFillingView.widget(at:)(x, y);
  if (v20)
  {
    id v21 = v20;
    if (v15 == 1 || v16 == 3)
    {
      if (v17) {
        objc_msgSend(v20, sel_addControl);
      }
      id v22 = objc_msgSend(v21, sel_uiControl);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
      if (swift_dynamicCast())
      {
        id v23 = v41;
        objc_msgSend(v4, sel_convertPoint_toCoordinateSpace_, v41, x, y);
        uint64_t v24 = objc_msgSend(v41, sel_hitTest_withEvent_, isa);
LABEL_35:
        v24;

        return;
      }
    }
LABEL_40:

    uint64_t v36 = v4;
    return;
  }
  id v25 = AnyCanvas.formFieldElements.getter();
  char v26 = v25;
  id v40 = v16;
  if (!(v25 >> 62))
  {
    double v27 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v27) {
      goto LABEL_19;
    }
    goto LABEL_26;
  }
LABEL_46:
  swift_bridgeObjectRetain();
  double v27 = _CocoaArrayWrapper.endIndex.getter();
  if (!v27)
  {
LABEL_26:
    swift_bridgeObjectRelease_n();
    if (v15 == 1)
    {
      objc_msgSend(v4, sel_bounds);
      v44.double x = x;
      v44.double y = y;
      CGFloat v31 = CGRectContainsPoint(v46, v44);

      if (v31) {
LABEL_28:
      }
        CGFloat v32 = v4;
      return;
    }

LABEL_30:
    return;
  }
LABEL_19:
  int v28 = 4;
  while (1)
  {
    if ((v26 & 0xC000000000000001) != 0) {
      double v29 = (id)MEMORY[0x21054E050](v28 - 4, v26);
    }
    else {
      double v29 = *(id *)(v26 + 8 * v28);
    }
    id v21 = v29;
    double v30 = v28 - 3;
    if (__OFADD__(v28 - 4, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    objc_msgSend(v29, sel_frame);
    v43.double x = x;
    v43.double y = y;
    if (CGRectContainsPoint(v45, v43)) {
      break;
    }

    ++v28;
    if (v30 == v27) {
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease_n();
  objc_msgSend(v21, sel_convertPoint_fromCoordinateSpace_, v4, x, y);
  uint64_t v33 = objc_msgSend(v21, sel_hitTest_withEvent_, isa);
  if (v33)
  {
    id v23 = v33;
    self;
    id v34 = swift_dynamicCastObjCClass();
    if (v34)
    {
      id v35 = (void *)v34;
      objc_msgSend(v4, sel_convertPoint_toCoordinateSpace_, v34, x, y);
      uint64_t v24 = objc_msgSend(v35, sel_hitTest_withEvent_, isa);
      goto LABEL_35;
    }
  }
  if (v40 == 3)
  {

    return;
  }
  if (v15 == 1) {
    goto LABEL_40;
  }
  id v37 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis];
  if (!v37)
  {

    goto LABEL_30;
  }
  uint64_t v38 = v37;
  id v39 = objc_msgSend(v38, sel_recognitionConfidence);

  if (v39 == (id)2) {
    goto LABEL_28;
  }
}

Swift::Bool __swiftcall FormFillingView.hitTestIncludingHiddenFields(_:with:)(CGPoint _, UIEvent_optional with)
{
  uint64_t v3 = v2;
  Class isa = with.value.super.isa;
  CGFloat y = _.y;
  CGFloat x = _.x;
  uint64_t v7 = MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas, *(void *)&with.is_nil);
  if (v7)
  {
    double v8 = (void *)v7;
    if (isa && [(objc_class *)isa type] == (id)11)
    {

LABEL_17:
      LOBYTE(v7) = 0;
      return v7;
    }
    id v9 = FormFillingView.widget(at:)(x, y);
    if (!v9)
    {
      unint64_t v11 = AnyCanvas.formFieldElements.getter();
      swift_beginAccess();
      unint64_t v12 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v12);
      if (v11 >> 62) {
        goto LABEL_21;
      }
      uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v13; uint64_t v13 = _CocoaArrayWrapper.endIndex.getter())
      {
        uint64_t v14 = 4;
        while (1)
        {
          id v15 = (v11 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x21054E050](v14 - 4, v11)
              : *(id *)(v11 + 8 * v14);
          uint64_t v16 = v15;
          uint64_t v17 = v14 - 3;
          if (__OFADD__(v14 - 4, 1)) {
            break;
          }
          objc_msgSend(v15, sel_frame);
          v20.CGFloat x = x;
          v20.CGFloat y = y;
          BOOL v18 = CGRectContainsPoint(v21, v20);

          if (v18)
          {

            swift_bridgeObjectRelease_n();
            LOBYTE(v7) = 1;
            return v7;
          }
          ++v14;
          if (v17 == v13) {
            goto LABEL_16;
          }
        }
        __break(1u);
LABEL_21:
        swift_bridgeObjectRetain();
      }
LABEL_16:

      swift_bridgeObjectRelease_n();
      goto LABEL_17;
    }
    unint64_t v10 = v9;

    LOBYTE(v7) = 1;
  }
  return v7;
}

void *FormFillingView.widget(at:)(CGFloat a1, CGFloat a2)
{
  unint64_t v5 = (unint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets);
  swift_beginAccess();
  unint64_t v6 = *v5;
  if (v6 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain_n();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v7)
    {
LABEL_3:
      unint64_t v8 = v6 & 0xC000000000000001;
      uint64_t v9 = 4;
      unint64_t v10 = &selRef_magicPaperViewControllerImageGenerationEvent_;
      unint64_t v26 = v6;
      do
      {
        if (v8) {
          id v14 = (id)MEMORY[0x21054E050](v9 - 4, v6);
        }
        else {
          id v14 = *(id *)(v6 + 8 * v9);
        }
        unint64_t v12 = v14;
        uint64_t v15 = v9 - 3;
        if (__OFADD__(v9 - 4, 1))
        {
          __break(1u);
          goto LABEL_21;
        }
        id v16 = [v14 v10[405]];
        if (v16)
        {
          uint64_t v13 = v16;
          id v17 = objc_msgSend(v16, sel_document);
          if (!v17) {
            goto LABEL_6;
          }
          BOOL v18 = v17;
          id v19 = objc_msgSend(v13, sel_view);
          if (!v19)
          {
            unint64_t v11 = v18;
LABEL_5:

            unint64_t v12 = v13;
            uint64_t v13 = v11;
LABEL_6:

            unint64_t v12 = v13;
            goto LABEL_7;
          }
          unint64_t v11 = v19;
          id v20 = objc_msgSend(v19, sel_pageViewForPageAtIndex_, objc_msgSend(v18, sel_indexForPage_, v13));
          if (!v20)
          {

            unint64_t v12 = v13;
            uint64_t v13 = v18;
            unint64_t v10 = &selRef_magicPaperViewControllerImageGenerationEvent_;
            goto LABEL_5;
          }
          CGRect v21 = v20;
          uint64_t v22 = v7;
          unint64_t v23 = v8;
          objc_msgSend(v12, sel_bounds);
          objc_msgSend(v11, sel_convertRect_fromPage_, v13);
          objc_msgSend(v21, sel_convertRect_fromCoordinateSpace_, v11);
          v27.CGFloat x = a1;
          v27.CGFloat y = a2;
          BOOL v24 = CGRectContainsPoint(v28, v27);

          if (v24)
          {
            swift_bridgeObjectRelease_n();
            return v12;
          }
          unint64_t v8 = v23;
          uint64_t v7 = v22;
          unint64_t v6 = v26;
          unint64_t v10 = &selRef_magicPaperViewControllerImageGenerationEvent_;
        }
LABEL_7:

        ++v9;
      }
      while (v15 != v7);
    }
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

Swift::Void __swiftcall FormFillingView.add(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  if (!((unint64_t)a1._rawValue >> 62))
  {
    uint64_t v4 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    unint64_t v8 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v8);
    swift_endAccess();
    FormFillingView.updateUI()();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_10;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x21054E050](i, a1._rawValue);
      }
      else {
        id v6 = *((id *)a1._rawValue + i + 4);
      }
      uint64_t v7 = v6;
      objc_msgSend(v2, sel_addSubview_, v6);
    }
    goto LABEL_10;
  }
  __break(1u);
}

double one-time initialization function for defaultFormFieldSize()
{
  double result = 150.0;
  static FormFillingView.defaultFormFieldSize = xmmword_20C83D1B0;
  return result;
}

void *FormFillingView.addTextBox(at:analytics_documentType:)(unsigned __int8 a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v6 = v5;
  unint64_t v12 = (void *)MEMORY[0x210550400](v6 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v12;
  LOBYTE(v23) = 1;
  specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v12, 0, 0, 0, 0, 1, (unsigned __int8 *)&v23, 0x7FFFFFFFFFFFFFFFLL, a2, a3, a4, a5, 0, 0, 0xAu, a1);
  uint64_t v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C835790;
  *(void *)(inited + 32) = v15;
  unint64_t v23 = (void *)inited;
  specialized Array._endMutation()();
  v17._rawValue = v23;
  BOOL v18 = v15;
  FormFillingView.add(_:)(v17);
  uint64_t v19 = swift_bridgeObjectRelease();
  uint64_t v20 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v18) + 0x2D0))(v19);
  if (v20)
  {
    CGRect v21 = (void *)v20;
    swift_retain();

    FormTextFieldAnalytics.recordEvent()();
    swift_release();
  }

  return v18;
}

void FormFillingView.frameForFormElement(element:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v19);
  type metadata accessor for CanvasElementPDFAnnotation();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  id v3 = objc_msgSend(v18, sel_page);
  if (!v3)
  {

LABEL_7:
    outlined init with copy of Any(a1, (uint64_t)v19);
    type metadata accessor for AnyCanvasElementView();
    if (swift_dynamicCast())
    {
      objc_msgSend(v18, sel_frame);
    }
    return;
  }
  uint64_t v4 = v3;
  id v5 = objc_msgSend(v18, sel_page);
  if (!v5)
  {
    double v10 = 0.0;
    double v12 = 0.0;
    double v14 = 0.0;
    double v16 = 0.0;
    goto LABEL_11;
  }
  uint64_t v6 = v5;
  id v7 = objc_msgSend(v5, sel_view);
  if (v7)
  {
    unint64_t v8 = v7;
    objc_msgSend(v18, sel_bounds);
    objc_msgSend(v8, sel_convertRect_fromPage_, v6);
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;

LABEL_11:
    id v17 = objc_msgSend(v4, sel_view);
    objc_msgSend(v1, sel_convertRect_fromView_, v17, v10, v12, v14, v16);

    return;
  }
  __break(1u);
}

uint64_t FormFillingView.allFormElements.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas]);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  id v3 = (void *)v2;
  unint64_t v4 = AnyCanvas.formFieldElements.getter();
  if (v4 >> 62)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    unint64_t v5 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    unint64_t v5 = v4;
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = (unint64_t *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets];
  swift_beginAccess();
  unint64_t v7 = *v6;
  if (*v6 >> 62)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    swift_bridgeObjectRetain();
    unint64_t v8 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    unint64_t v8 = v7;
  }
  swift_bridgeObjectRelease();
  unint64_t v15 = v5;
  specialized Array.append<A>(contentsOf:)(v8);
  uint64_t v9 = specialized _arrayForceCast<A, B>(_:)(v5);
  uint64_t v10 = swift_bridgeObjectRelease();
  double v11 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x2F8))(v10);
  id v12 = objc_msgSend(v11, sel_effectiveUserInterfaceLayoutDirection);

  unint64_t v15 = v9;
  id v13 = v1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v15, v13, v12 == 0);
  swift_bridgeObjectRelease();

  return v15;
}

void FormFillingView.focusNextField(from:direction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  id v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas, v11);
  if (v14)
  {
    unint64_t v15 = (void *)v14;
    uint64_t v16 = FormFillingView.allFormElements.getter();
    uint64_t v57 = 0;
    memset(v56, 0, sizeof(v56));
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v53, &demangling cache variable for type metadata for AnyHashable?);
    uint64_t v44 = v5;
    uint64_t v43 = v6;
    uint64_t v42 = v9;
    uint64_t v41 = v10;
    if (*((void *)&v54 + 1))
    {
      long long aBlock = v53;
      long long v46 = v54;
      double v47 = v55;
    }
    else
    {
      double v47 = 0;
      long long v46 = 0u;
      long long aBlock = 0u;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v53, &demangling cache variable for type metadata for AnyHashable?);
    }
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&aBlock, (uint64_t)v51, &demangling cache variable for type metadata for AnyHashable?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyHashable?);
    lazy protocol witness table accessor for type AnyHashable? and conformance <A> A?();
    AnyHashable.init<A>(_:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v16 + 32;
      while ((MEMORY[0x21054DFB0](v19, &v53) & 1) == 0)
      {
        ++v18;
        v19 += 40;
        if (v17 == v18) {
          goto LABEL_9;
        }
      }
      outlined destroy of AnyHashable((uint64_t)&v53);
      if (a2)
      {
        if (v18)
        {
          unint64_t v22 = v18 - 1;
          unint64_t v23 = *(void *)(v16 + 16);
          goto LABEL_21;
        }
      }
      else
      {
        unint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        unint64_t v23 = *(void *)(v16 + 16);
        if ((uint64_t)v22 < (uint64_t)v23)
        {
          if ((v22 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
LABEL_21:
          if (v22 < v23)
          {
            uint64_t v21 = v16 + 32 + 40 * v22;
            goto LABEL_23;
          }
          goto LABEL_57;
        }
      }
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v56, &demangling cache variable for type metadata for AnyHashable?);

      swift_bridgeObjectRelease();
      return;
    }
LABEL_9:
    outlined destroy of AnyHashable((uint64_t)&v53);
    uint64_t v20 = *(void *)(v16 + 16);
    if (a2)
    {
      if (v20)
      {
        uint64_t v21 = v16 + 40 * v20 - 8;
LABEL_23:
        outlined init with copy of AnyHashable(v21, (uint64_t)&aBlock);
LABEL_24:
        swift_bridgeObjectRelease();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v56, &demangling cache variable for type metadata for AnyHashable?);
        outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&aBlock, (uint64_t)v56, &demangling cache variable for type metadata for AnyHashable?);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v56, (uint64_t)&v48, &demangling cache variable for type metadata for AnyHashable?);
        if (*((void *)&v46 + 1))
        {
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)&aBlock, (uint64_t)&v53, &demangling cache variable for type metadata for AnyHashable?);
          if (*((void *)&v49 + 1))
          {
            v51[0] = v48;
            v51[1] = v49;
            uint64_t v52 = v50;
            char v24 = MEMORY[0x21054DFB0](&v53, v51);
            outlined destroy of AnyHashable((uint64_t)v51);
            outlined destroy of AnyHashable((uint64_t)&v53);
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
            if (v24)
            {
LABEL_40:
              outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v56, (uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
              if (*((void *)&v46 + 1))
              {
                v31.Class isa = AnyHashable._bridgeToObjectiveC()().isa;
                outlined destroy of AnyHashable((uint64_t)&aBlock);
                type metadata accessor for AnyCanvasElementView();
                CGFloat v32 = (void *)swift_dynamicCastClass();
                if (v32)
                {
                  objc_msgSend(v32, sel_becomeFirstResponder);

                  goto LABEL_53;
                }
              }
              else
              {
                outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
              }
              outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v56, (uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
              if (*((void *)&v46 + 1))
              {
                v33.Class isa = AnyHashable._bridgeToObjectiveC()().isa;
                outlined destroy of AnyHashable((uint64_t)&aBlock);
                type metadata accessor for CanvasElementPDFAnnotation();
                uint64_t v34 = swift_dynamicCastClass();
                if (v34)
                {
                  id v35 = (void *)v34;
                  if (!objc_msgSend(self, sel_isMainThread))
                  {
                    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
                    uint64_t v36 = (void *)static OS_dispatch_queue.main.getter();
                    uint64_t v37 = swift_allocObject();
                    *(void *)(v37 + 16) = v35;
                    double v47 = partial apply for closure #1 in FormFillingView.focusNextField(from:direction:);
                    *(void *)&long long v48 = v37;
                    *(void *)&long long aBlock = MEMORY[0x263EF8330];
                    *((void *)&aBlock + 1) = 1107296256;
                    *(void *)&long long v46 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
                    *((void *)&v46 + 1) = &block_descriptor_70_0;
                    uint64_t v38 = _Block_copy(&aBlock);
                    id v39 = v33.isa;
                    swift_release();
                    static DispatchQoS.unspecified.getter();
                    *(void *)&long long aBlock = MEMORY[0x263F8EE78];
                    _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
                    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
                    uint64_t v40 = v44;
                    dispatch thunk of SetAlgebra.init<A>(_:)();
                    MEMORY[0x21054DA10](0, v13, v8, v38);

                    _Block_release(v38);
                    (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v40);
                    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v42);
                    goto LABEL_53;
                  }
                  objc_msgSend(v35, sel_addControl);
                }
              }
              else
              {

                outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
              }
LABEL_53:
              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v56, &demangling cache variable for type metadata for AnyHashable?);
              return;
            }
LABEL_32:
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
            if (*((void *)&v46 + 1))
            {
              v25.Class isa = AnyHashable._bridgeToObjectiveC()().isa;
              outlined destroy of AnyHashable((uint64_t)&aBlock);
              type metadata accessor for CanvasElementPDFAnnotation();
              unint64_t v26 = (void *)swift_dynamicCastClass();
              if (v26)
              {
                CGPoint v27 = v26;
                id v28 = objc_msgSend(v26, sel_page);
                if (!v28)
                {

                  goto LABEL_40;
                }
                double v29 = v28;
                id v30 = objc_msgSend(v28, sel_view);

                if (v30)
                {
                  objc_msgSend(v30, sel_removeControlForAnnotation_, v27);

                  goto LABEL_40;
                }
LABEL_59:
                __break(1u);
                return;
              }
            }
            else
            {
              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
            }
            AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
            goto LABEL_40;
          }
          outlined destroy of AnyHashable((uint64_t)&v53);
        }
        else if (!*((void *)&v49 + 1))
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
          goto LABEL_40;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for (AnyHashable?, AnyHashable?));
        goto LABEL_32;
      }
    }
    else if (v20)
    {
      uint64_t v21 = v16 + 32;
      goto LABEL_23;
    }
    double v47 = 0;
    long long v46 = 0u;
    long long aBlock = 0u;
    goto LABEL_24;
  }
}

void FormFillingView.populateTextFields(with:currentField:)(void *a1, unint64_t a2)
{
  uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v5 = *(char **)(v196 - 8);
  double v6 = MEMORY[0x270FA5388](v196);
  long long v195 = (char *)&v170 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas], v6);
  if (!v8) {
    return;
  }
  id v198 = v2;
  v194._rawValue = a1;
  id v186 = v8;
  unint64_t v9 = AnyCanvas.formFieldElements.getter();
  uint64_t v10 = v9;
  long long v193 = v5;
  if (v9 >> 62) {
    goto LABEL_198;
  }
  uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v12 = (id)a2;
  if (!v11)
  {
LABEL_16:
    swift_bridgeObjectRelease();

    return;
  }
  while (2)
  {
    v13._rawValue = 0;
    while (1)
    {
      if ((v10 & 0xC000000000000001) != 0) {
        uint64_t v14 = (void *)MEMORY[0x21054E050](v13._rawValue, v10);
      }
      else {
        uint64_t v14 = *(id *)(v10 + 8 * (uint64_t)v13._rawValue + 32);
      }
      unint64_t v15 = v14;
      uint64_t v16 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v14) + 0x2D0))();
      if (!v16)
      {
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      uint64_t v17 = (void *)v16;
      uint64_t v18 = *(void **)(v16 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
      id v19 = v18;

      if (v18) {
        break;
      }

      unint64_t v23 = (char *)v13._rawValue + 1;
      if (__OFADD__(v13._rawValue, 1))
      {
LABEL_189:
        __break(1u);
LABEL_190:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_186;
      }
LABEL_15:
      ++v13._rawValue;
      if (v23 == (char *)v11) {
        goto LABEL_16;
      }
    }
    type metadata accessor for TextBoxTextView();
    unint64_t v20 = (unint64_t)(id)a2;
    id v21 = v19;
    char v22 = static NSObject.== infix(_:_:)();

    if ((v22 & 1) == 0)
    {
      unint64_t v23 = (char *)v13._rawValue + 1;
      if (__OFADD__(v13._rawValue, 1)) {
        goto LABEL_189;
      }
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
    id v197 = (id)v20;

    unint64_t v24 = AnyCanvas.formFieldElements.getter();
    unint64_t v25 = v24;
    unint64_t v26 = v24 >> 62;
    if (!(v24 >> 62))
    {
      unint64_t v27 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v28 = v27;
      if ((uint64_t)v27 >= (uint64_t)v13._rawValue) {
        goto LABEL_20;
      }
LABEL_205:
      __break(1u);
      goto LABEL_206;
    }
    while (2)
    {
      uint64_t v168 = _CocoaArrayWrapper.endIndex.getter();
      if (v168 < (uint64_t)v13._rawValue) {
        goto LABEL_221;
      }
      unint64_t v27 = v168;
      swift_bridgeObjectRetain();
      uint64_t v169 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v169 < (uint64_t)v13._rawValue) {
        goto LABEL_222;
      }
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v28 < (uint64_t)v27)
      {
        __break(1u);
        goto LABEL_205;
      }
LABEL_20:
      if ((v27 & 0x8000000000000000) != 0)
      {
LABEL_206:
        __break(1u);
LABEL_207:
        swift_bridgeObjectRetain();
        v13._rawValue = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        rawValue = v194._rawValue;
        if (v13._rawValue) {
          goto LABEL_31;
        }
        goto LABEL_42;
      }
      if ((v25 & 0xC000000000000001) == 0 || (void *)v27 == v13._rawValue) {
        goto LABEL_26;
      }
      if ((unint64_t)v13._rawValue >= v27)
      {
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }
      type metadata accessor for AnyCanvasElementView();
      Swift::Int v29 = (Swift::Int)v13._rawValue;
      do
      {
        Swift::Int v30 = v29 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v29);
        Swift::Int v29 = v30;
      }
      while (v27 != v30);
LABEL_26:
      if (v26)
      {
        swift_bridgeObjectRetain();
        uint64_t v31 = _CocoaArrayWrapper.subscript.getter();
        a2 = v33;
        v13._rawValue = v34;
        unint64_t v32 = v35;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v31 = v25 & 0xFFFFFFFFFFFFFF8;
        a2 = (v25 & 0xFFFFFFFFFFFFFF8) + 32;
        unint64_t v32 = (2 * v27) | 1;
      }
      uint64_t v36 = v198;
      unint64_t v26 = 0;
      unint64_t v20 = specialized Sequence.compactMap<A>(_:)(v31, a2, (uint64_t)v13._rawValue, v32, (uint64_t)v36);
      swift_unknownObjectRelease();
      float64x2_t v184 = v36;

      uint64_t v28 = v20 >> 62;
      if (v20 >> 62) {
        goto LABEL_207;
      }
      v13._rawValue = *(void **)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      rawValue = v194._rawValue;
      if (!v13._rawValue)
      {
LABEL_42:
        v13._rawValue = v197;
        goto LABEL_63;
      }
LABEL_31:
      unint64_t v25 = 0;
      unint64_t v38 = v20 & 0xC000000000000001;
      unint64_t v26 = (unint64_t)&OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_startsNewAutofillContext;
      a2 = v20;
      while (1)
      {
        id v39 = v38 ? (unsigned char *)MEMORY[0x21054E050](v25, v20) : *(id *)(v20 + 8 * v25 + 32);
        char v40 = v39[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_startsNewAutofillContext];

        unint64_t v27 = v25 + 1;
        BOOL v41 = __OFADD__(v25, 1);
        if (v40) {
          break;
        }
        if (v41) {
          goto LABEL_195;
        }
        ++v25;
        BOOL v77 = (void *)v27 == v13._rawValue;
        rawValue = v194._rawValue;
        unint64_t v20 = a2;
        if (v77) {
          goto LABEL_42;
        }
      }
      if (v41) {
        goto LABEL_212;
      }
      if ((v27 & 0x8000000000000000) != 0)
      {
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
        goto LABEL_216;
      }
      if (v28)
      {
        swift_bridgeObjectRetain();
        unint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((v26 & 0x8000000000000000) != 0) {
          goto LABEL_214;
        }
      }
      uint64_t v10 = (uint64_t)v194._rawValue;
      if (v38 && v25 != -1)
      {
        unint64_t v26 = type metadata accessor for ShapeView();
        Swift::Int v42 = 0;
        unint64_t v43 = v25 + 1;
        do
        {
          Swift::Int v44 = v42 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v42);
          Swift::Int v42 = v44;
        }
        while (v43 != v44);
      }
      if (v28)
      {
        swift_bridgeObjectRetain();
        unint64_t v25 = _CocoaArrayWrapper.subscript.getter();
        a2 = v45;
        v13._rawValue = v46;
        unint64_t v27 = v47;
        swift_bridgeObjectRelease_n();
        if (v27) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      v13._rawValue = 0;
      unint64_t v25 = a2 & 0xFFFFFFFFFFFFFF8;
      a2 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
      unint64_t v27 = (2 * v27) | 1;
      if ((v27 & 1) == 0)
      {
LABEL_55:
        unint64_t v20 = specialized _copyCollectionToContiguousArray<A>(_:)(v25, a2, (uint64_t)v13._rawValue, v27);
        v13._rawValue = v197;
        rawValue = (void *)v10;
        goto LABEL_62;
      }
LABEL_56:
      unint64_t v26 = type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      uint64_t v48 = swift_dynamicCastClass();
      if (!v48)
      {
        swift_unknownObjectRelease();
        uint64_t v48 = MEMORY[0x263F8EE78];
      }
      uint64_t v49 = *(void *)(v48 + 16);
      swift_release();
      if (__OFSUB__(v27 >> 1, v13._rawValue)) {
        goto LABEL_215;
      }
      if (v49 != (v27 >> 1) - (unint64_t)v13._rawValue)
      {
LABEL_216:
        swift_unknownObjectRelease();
        goto LABEL_55;
      }
      unint64_t v20 = swift_dynamicCastClass();
      swift_unknownObjectRelease();
      v13._rawValue = v197;
      rawValue = (void *)v10;
      if (!v20)
      {
        unint64_t v20 = MEMORY[0x263F8EE78];
LABEL_62:
        swift_unknownObjectRelease();
      }
LABEL_63:
      uint64_t v174 = OBJC_IVAR____TtC8PaperKit15FormFillingView_formFieldGroups;
      uint64_t v50 = *(void *)&v184[OBJC_IVAR____TtC8PaperKit15FormFillingView_formFieldGroups];
      uint64_t v51 = *(char **)(v50 + 16);
      uint64_t v52 = &selRef_strokeUUID;
      unint64_t v185 = v20;
      uint64_t v189 = v51;
      if (!v51)
      {
        int v176 = 0;
        uint64_t v177 = 0;
        goto LABEL_89;
      }
      uint64_t v192 = (void (**)(char *, char *, uint64_t))(v50 + 32);
      uint64_t v53 = swift_bridgeObjectRetain();
      unint64_t v25 = 0;
      uint64_t v191 = (unint64_t *)v53;
LABEL_66:
      if (v25 >= *(void *)(v53 + 16))
      {
        __break(1u);
        continue;
      }
      break;
    }
    v54._rawValue = v192[v25];
    CGRect v190 = (void (*)(char *, char *, uint64_t))((unint64_t)v54._rawValue >> 62);
    id v198 = (char *)v25;
    if (!((unint64_t)v54._rawValue >> 62))
    {
      uint64_t v55 = *(void *)(((unint64_t)v54._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v55) {
        goto LABEL_69;
      }
      goto LABEL_65;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v55)
    {
LABEL_65:
      unint64_t v25 = (unint64_t)(v198 + 1);
      swift_bridgeObjectRelease_n();
      rawValue = v194._rawValue;
      v13._rawValue = v197;
      unint64_t v20 = v185;
      uint64_t v52 = &selRef_strokeUUID;
      uint64_t v53 = (uint64_t)v191;
      if ((char *)v25 == v189)
      {
        int v176 = 0;
        uint64_t v177 = 0;
        goto LABEL_88;
      }
      goto LABEL_66;
    }
LABEL_69:
    a2 = (unint64_t)v54._rawValue & 0xC000000000000001;
    uint64_t v56 = 4;
LABEL_72:
    if (a2) {
      uint64_t v57 = (void *)MEMORY[0x21054E050](v56 - 4, v54._rawValue);
    }
    else {
      uint64_t v57 = *((id *)v54._rawValue + v56);
    }
    uint64_t v58 = v57;
    uint64_t v59 = v56 - 3;
    if (__OFADD__(v56 - 4, 1))
    {
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      id v167 = (id)a2;
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (!v11) {
        goto LABEL_16;
      }
      continue;
    }
    break;
  }
  uint64_t v60 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v57) + 0x2D0))();
  if (!v60
    || (uint64_t v61 = (void *)v60,
        uint64_t v10 = *(void *)(v60 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView),
        unint64_t v26 = (unint64_t)(id)v10,
        v61,
        !v10))
  {

    goto LABEL_71;
  }
  uint64_t v10 = (uint64_t)v197;
  char v62 = static NSObject.== infix(_:_:)();

  if ((v62 & 1) == 0)
  {
LABEL_71:
    ++v56;
    if (v59 == v55) {
      goto LABEL_65;
    }
    goto LABEL_72;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v52 = &selRef_strokeUUID;
  id v63 = objc_msgSend((id)v10, sel_textContentType);
  if (!v63) {
    goto LABEL_220;
  }
  CGPoint v64 = v63;
  rawValue = v194._rawValue;
  FormFillingView.populateTextFieldGroup(_:using:textContentType:)(v54, v194, (__C::UITextContentType)v63);

  unint64_t v20 = v185;
  if (v190)
  {
    swift_bridgeObjectRetain();
    uint64_t v177 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v177 = *(void *)(((unint64_t)v54._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  int v176 = 1;
  v13._rawValue = v197;
LABEL_88:
  swift_bridgeObjectRelease();
LABEL_89:
  uint64_t v65 = *(void *)&v184[OBJC_IVAR____TtC8PaperKit15FormFillingView_preferredTextContentTypes];
  uint64_t v189 = *(char **)(v65 + 16);
  if (!v189)
  {
LABEL_185:
    swift_bridgeObjectRelease();
LABEL_186:
    uint64_t v165 = (char *)MEMORY[0x210550400]((char *)v13._rawValue + OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView);

    if (v165)
    {
      uint64_t v166 = *(void *)&v165[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
      swift_retain();

      *(void *)(v166 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v177;
      swift_release();
    }
    return;
  }
  uint64_t v171 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  uint64_t v188 = v65 + 32;
  uint64_t v66 = v20 & 0xFFFFFFFFFFFFFF8;
  uint64_t v178 = v20 & 0xFFFFFFFFFFFFFF8;
  if ((v20 & 0x8000000000000000) != 0) {
    uint64_t v66 = v20;
  }
  uint64_t v170 = v66;
  unint64_t v175 = v20 & 0xC000000000000001;
  uint64_t v191 = (unint64_t *)(v193 + 8);
  uint64_t v192 = (void (**)(char *, char *, uint64_t))(v193 + 16);
  uint64_t v187 = v65;
  swift_bridgeObjectRetain();
  unint64_t v67 = 0;
  unint64_t v179 = v20 >> 62;
LABEL_97:
  BOOL v69 = *(void **)(v188 + 8 * v67);
  id v198 = (char *)(v67 + 1);
  unint64_t v70 = v69;
  id v71 = [v13._rawValue v52[134]];
  if (!v71)
  {

    if (!rawValue[2]) {
      goto LABEL_94;
    }
    goto LABEL_106;
  }
  uint64_t v72 = v71;
  uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v75 = v74;
  BOOL v77 = v73 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v75 == v76;
  if (v77)
  {

    swift_bridgeObjectRelease_n();
    v13._rawValue = v197;
LABEL_94:

    goto LABEL_95;
  }
  char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._rawValue = v197;
  if ((v78 & 1) != 0 || !rawValue[2]) {
    goto LABEL_94;
  }
LABEL_106:
  unint64_t v70 = v70;
  uint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(v70);
  if ((v80 & 1) == 0)
  {

    goto LABEL_94;
  }
  CGPoint v81 = (uint64_t *)(rawValue[7] + 16 * v79);
  uint64_t v83 = *v81;
  unint64_t v82 = v81[1];
  swift_bridgeObjectRetain();

  if (v179)
  {
    swift_bridgeObjectRetain();
    uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
    if (v84) {
      goto LABEL_109;
    }
LABEL_182:

    swift_bridgeObjectRelease();
LABEL_183:
    swift_bridgeObjectRelease();
    v13._rawValue = v197;
LABEL_95:
    unint64_t v67 = (unint64_t)v198;
    uint64_t v68 = v187;
    if (v198 != v189) {
      goto LABEL_96;
    }
    swift_bridgeObjectRelease();
    goto LABEL_185;
  }
  uint64_t v84 = *(void *)(v178 + 16);
  swift_bridgeObjectRetain();
  if (!v84) {
    goto LABEL_182;
  }
LABEL_109:
  uint64_t v173 = v83;
  unint64_t v180 = v82;
  long long v193 = v70;
  if (v175)
  {
    uint64_t v85 = 0;
    do
    {
      uint64_t v86 = (void *)MEMORY[0x21054E050](v85, v20);
      uint64_t v87 = v85 + 1;
      if (__OFADD__(v85, 1)) {
        goto LABEL_193;
      }
      unint64_t v27 = (unint64_t)v86;
      uint64_t v88 = (char *)v86 + *(void *)((*MEMORY[0x263F8EED0] & *v86) + 0x380);
      swift_beginAccess();
      uint64_t v90 = v195;
      uint64_t v89 = v196;
      CGRect v190 = *v192;
      v190(v195, v88, v196);
      swift_getKeyPath();
      _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
      Capsule<>.subscript.getter();
      swift_release();
      a2 = *v191;
      uint64_t v91 = v90;
      uint64_t v10 = (uint64_t)v193;
      ((void (*)(char *, uint64_t))*v191)(v91, v89);
      char v199 = v200;
      specialized FormContentType.uiTextContentType.getter();
      uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v94 = v93;
      if (v92 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v94 == v95) {
        goto LABEL_125;
      }
      char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v96) {
        goto LABEL_126;
      }
      swift_unknownObjectRelease();
      ++v85;
    }
    while (v87 != v84);

    swift_bridgeObjectRelease();
    uint64_t v52 = &selRef_strokeUUID;
    rawValue = v194._rawValue;
    goto LABEL_183;
  }
  uint64_t v97 = 0;
  while (1)
  {
    uint64_t v98 = v97 + 1;
    if (__OFADD__(v97, 1)) {
      goto LABEL_196;
    }
    long long v99 = *(void **)(v20 + 8 * v97 + 32);
    long long v100 = (char *)v99 + *(void *)((*MEMORY[0x263F8EED0] & *v99) + 0x380);
    swift_beginAccess();
    id v101 = v195;
    uint64_t v102 = v196;
    CGRect v190 = *v192;
    v190(v195, v100, v196);
    swift_getKeyPath();
    _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    unint64_t v27 = v99;
    Capsule<>.subscript.getter();
    swift_release();
    a2 = *v191;
    uint64_t v103 = v102;
    uint64_t v10 = (uint64_t)v193;
    ((void (*)(char *, uint64_t))*v191)(v101, v103);
    char v199 = v200;
    specialized FormContentType.uiTextContentType.getter();
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v106 = v105;
    if (v104 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v106 == v107) {
      break;
    }
    char v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v108) {
      goto LABEL_126;
    }

    ++v97;
    rawValue = v194._rawValue;
    if (v98 == v84)
    {

      swift_bridgeObjectRelease();
      uint64_t v52 = &selRef_strokeUUID;
      goto LABEL_183;
    }
  }
LABEL_125:
  swift_bridgeObjectRelease_n();
LABEL_126:
  uint64_t v109 = *(void *)&v184[v174];
  uint64_t v52 = &selRef_strokeUUID;
  uint64_t v181 = *(void *)(v109 + 16);
  if (v181)
  {
    uint64_t v183 = v109 + 32;
    uint64_t v172 = v109;
    swift_bridgeObjectRetain_n();
    uint64_t v110 = 0;
    while (1)
    {
      v13._rawValue = *(void **)(v183 + 8 * v110);
      unint64_t v182 = (unint64_t)v13._rawValue >> 62;
      if ((unint64_t)v13._rawValue >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        if (!v10) {
          goto LABEL_128;
        }
      }
      else
      {
        uint64_t v10 = *(void *)(((unint64_t)v13._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v10) {
          goto LABEL_128;
        }
      }
      if (((unint64_t)v13._rawValue & 0xC000000000000001) != 0) {
        id v111 = (id)MEMORY[0x21054E050](0, v13._rawValue);
      }
      else {
        id v111 = *((id *)v13._rawValue + 4);
      }
      id v112 = v111;
      type metadata accessor for AnyCanvasElementView();
      char v113 = static NSObject.== infix(_:_:)();

      if (v113)
      {
LABEL_149:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v20 = v185;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v121 = v27 + *(void *)((*MEMORY[0x263F8EED0] & *(void *)v27) + 0x380);
        swift_beginAccess();
        CGFloat v122 = v195;
        uint64_t v123 = v196;
        v190(v195, (char *)v121, v196);
        swift_getKeyPath();
        _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
        Capsule<>.subscript.getter();
        swift_release();
        ((void (*)(char *, uint64_t))a2)(v122, v123);
        char v199 = v200;
        id v124 = (id)specialized FormContentType.uiTextContentType.getter();
        unint64_t v26 = (unint64_t)v194._rawValue;
        unint64_t v25 = (unint64_t)v184;
        FormFillingView.populateTextFieldGroup(_:using:textContentType:)(v13, v194, (__C::UITextContentType)v124);

        uint64_t v52 = &selRef_strokeUUID;
        id v125 = v193;
        if (v182)
        {
          swift_bridgeObjectRetain();
          uint64_t v126 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v126 = *(void *)(((unint64_t)v13._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        BOOL v127 = __OFADD__(v177, v126);
        v177 += v126;
        if (v127)
        {
          __break(1u);
LABEL_210:
          __break(1u);
          goto LABEL_211;
        }
        unint64_t v25 = *(void *)&v184[v171];
        swift_retain();
        swift_bridgeObjectRelease();

        uint64_t v128 = *(void *)(v25 + 56);
        BOOL v127 = __OFADD__(v128, v126);
        uint64_t v129 = v128 + v126;
        if (v127) {
          goto LABEL_210;
        }
        *(void *)(v25 + 56) = v129;
        swift_release();
        v13._rawValue = v197;
        unint64_t v67 = (unint64_t)v198;
        if (v198 == v189) {
          goto LABEL_190;
        }
        rawValue = (void *)v26;
        int v176 = 1;
        uint64_t v68 = v187;
LABEL_96:
        if (v67 >= *(void *)(v68 + 16)) {
          goto LABEL_192;
        }
        goto LABEL_97;
      }
      if (v10 != 1)
      {
        if (((unint64_t)v13._rawValue & 0xC000000000000001) != 0)
        {
          uint64_t v114 = 1;
          while (1)
          {
            MEMORY[0x21054E050](v114, v13._rawValue);
            uint64_t v115 = v114 + 1;
            if (__OFADD__(v114, 1)) {
              goto LABEL_194;
            }
            char v116 = static NSObject.== infix(_:_:)();
            swift_unknownObjectRelease();
            if (v116) {
              goto LABEL_149;
            }
            ++v114;
            if (v115 == v10) {
              goto LABEL_128;
            }
          }
        }
        uint64_t v117 = 5;
        do
        {
          uint64_t v118 = v117 - 3;
          if (__OFADD__(v117 - 4, 1)) {
            goto LABEL_197;
          }
          id v119 = *((id *)v13._rawValue + v117);
          char v120 = static NSObject.== infix(_:_:)();

          if (v120) {
            goto LABEL_149;
          }
          ++v117;
        }
        while (v118 != v10);
      }
LABEL_128:
      ++v110;
      swift_bridgeObjectRelease_n();
      unint64_t v20 = v185;
      uint64_t v52 = &selRef_strokeUUID;
      if (v110 == v181)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v10 = (uint64_t)v193;
        break;
      }
    }
  }
  id v130 = v186;
  id v131 = v186;
  ShapeView.addTextBox(canvas:)(v130);

  a2 = direct field offset for ShapeView._textBoxView;
  uint64_t v132 = *(void **)(v27 + direct field offset for ShapeView._textBoxView);
  if (!v132
    || (id v133 = v132,
        specialized TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(0),
        v133,
        (id v134 = *(char **)(v27 + a2)) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_166:
    swift_bridgeObjectRelease();
    v13._rawValue = v197;
LABEL_167:
    id v144 = *(void **)(v27 + a2);
    if (v144)
    {
      id v145 = v144;
      objc_msgSend(v145, sel_resignFirstResponder);
    }
    rawValue = v194._rawValue;
    goto LABEL_95;
  }
  long long v135 = *(void **)&v134[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  v13._rawValue = v197;
  if (!v135)
  {
    swift_bridgeObjectRelease();
LABEL_171:
    swift_bridgeObjectRelease();
    goto LABEL_167;
  }
  id v136 = v134;
  id v137 = v135;
  id v138 = objc_msgSend(v137, sel_text);
  if (!v138) {
    goto LABEL_223;
  }
  id v139 = v138;
  uint64_t v140 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v142 = v141;

  swift_bridgeObjectRelease();
  uint64_t v143 = HIBYTE(v142) & 0xF;
  if ((v142 & 0x2000000000000000) == 0) {
    uint64_t v143 = v140 & 0xFFFFFFFFFFFFLL;
  }
  if (v143)
  {
    swift_bridgeObjectRelease();

    goto LABEL_166;
  }
  unint64_t v146 = v180;
  uint64_t v147 = HIBYTE(v180) & 0xF;
  uint64_t v148 = v173;
  if ((v180 & 0x2000000000000000) == 0) {
    uint64_t v147 = v173 & 0xFFFFFFFFFFFFLL;
  }
  v13._rawValue = v197;
  if (!v147)
  {
    swift_bridgeObjectRelease();

    goto LABEL_171;
  }
  id v149 = v137;
  id v150 = (void *)MEMORY[0x21054D080](v148, v146);
  swift_bridgeObjectRelease();
  objc_msgSend(v149, sel_setText_, v150);

  if (__OFADD__(v177, 1)) {
    goto LABEL_218;
  }
  uint64_t v151 = *(void *)&v184[v171];
  uint64_t v152 = *(void *)(v151 + 56);
  BOOL v127 = __OFADD__(v152, 1);
  uint64_t v153 = v152 + 1;
  if (v127) {
    goto LABEL_219;
  }
  ++v177;
  *(void *)(v151 + 56) = v153;
  uint64_t v154 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics;
  uint64_t v155 = *(void *)&v136[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
  *(_WORD *)(v155 + 18) = 270;
  *(unsigned char *)(v155 + 64) = 3;
  uint64_t v156 = *(void *)&v136[v154];
  swift_retain();
  id v157 = [v149 v52[134]];
  if (!v157) {
    goto LABEL_224;
  }
  CGRect v158 = *(void **)(v156 + 32);
  *(void *)(v156 + 32) = v157;
  swift_release();

  uint64_t v159 = *(void *)&v136[v154];
  swift_retain();
  id v160 = objc_msgSend(v149, sel_text);
  if (v160)
  {
    id v161 = v160;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v162 = v185;
    swift_bridgeObjectRelease();

    uint64_t v163 = String.count.getter();
    swift_bridgeObjectRelease();
    *(void *)(v159 + 56) = v163;
    swift_release();
    uint64_t v164 = *(void *)&v136[v154];
    unint64_t v20 = v162;
    *(unsigned char *)(v164 + 64) = 3;
    int v176 = 1;
    specialized TextBoxView.updateCanvasElement(shouldRegisterUndo:)(1);

    v13._rawValue = v197;
    uint64_t v52 = &selRef_strokeUUID;
    uint64_t v10 = (uint64_t)v193;
    goto LABEL_167;
  }
LABEL_225:
  __break(1u);
}

Swift::Void __swiftcall FormFillingView.populateTextFieldGroup(_:using:textContentType:)(Swift::OpaquePointer _, Swift::OpaquePointer using, __C::UITextContentType textContentType)
{
  if (!*((void *)using._rawValue + 2)) {
    goto LABEL_40;
  }
  uint64_t v6 = v4;
  unint64_t rawValue = (unint64_t)_._rawValue;
  id v10 = textContentType._rawValue;
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if (v12)
  {
    uint64_t v13 = *((void *)using._rawValue + 7) + 16 * v11;
    unint64_t v7 = *(void *)v13;
    unint64_t v5 = *(void *)(v13 + 8);
    swift_bridgeObjectRetain();

    uint64_t v4 = String.count.getter();
    unint64_t v3 = rawValue >> 62;
    if (rawValue >> 62) {
      goto LABEL_41;
    }
    id v10 = *(id *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      double v14 = ceil((double)v4 / (double)(uint64_t)v10);
      if ((~*(void *)&v14 & 0x7FF0000000000000) == 0) {
        break;
      }
      if (v14 <= -9.22337204e18) {
        goto LABEL_43;
      }
      if (v14 >= 9.22337204e18) {
        goto LABEL_44;
      }
      if (v3)
      {
        swift_bridgeObjectRetain();
        unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        if (!v3)
        {
LABEL_35:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
      }
      else
      {
        unint64_t v3 = *(void *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v3) {
          goto LABEL_35;
        }
      }
      uint64_t v63 = v7;
      uint64_t v58 = (id *)rawValue;
      uint64_t v59 = v6 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas;
      uint64_t v15 = 4;
      unint64_t v60 = rawValue & 0xC000000000000001;
      unint64_t v57 = v3;
      while (1)
      {
        id v17 = v60 ? (id)MEMORY[0x21054E050](v15 - 4, rawValue) : *(id *)(rawValue + 8 * v15);
        uint64_t v16 = v17;
        uint64_t v4 = v15 - 3;
        if (__OFADD__(v15 - 4, 1)) {
          break;
        }
        type metadata accessor for ShapeView();
        uint64_t v18 = swift_dynamicCastClass();
        if (v18)
        {
          uint64_t v19 = v18;
          char v62 = v16;
          id v61 = v16;
          swift_bridgeObjectRetain();
          uint64_t v20 = String.count.getter();
          if (v20 >= (uint64_t)v14) {
            uint64_t v20 = (uint64_t)v14;
          }
          uint64_t v4 = specialized Collection.prefix(_:)(v20);
          uint64_t v22 = v21;
          uint64_t v24 = v23;
          uint64_t v26 = v25;
          swift_bridgeObjectRelease();
          uint64_t v6 = MEMORY[0x21054D150](v4, v22, v24, v26);
          unint64_t v7 = v27;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          unint64_t v3 = String.count.getter();
          swift_bridgeObjectRelease();
          uint64_t v28 = String.count.getter();
          BOOL v29 = __OFSUB__(v3, v28);
          unint64_t v30 = v3 - v28;
          if (v29) {
            goto LABEL_39;
          }
          unint64_t v31 = specialized BidirectionalCollection.suffix(_:)(v30, v63, v5);
          uint64_t v33 = v32;
          uint64_t v35 = v34;
          uint64_t v37 = v36;
          swift_bridgeObjectRelease();
          uint64_t v63 = MEMORY[0x21054D150](v31, v33, v35, v37);
          unint64_t v5 = v38;
          swift_bridgeObjectRelease();
          id v39 = (void *)MEMORY[0x210550400](v59);
          ShapeView.addTextBox(canvas:)(v39);

          uint64_t v40 = direct field offset for ShapeView._textBoxView;
          BOOL v41 = *(void **)(v19 + direct field offset for ShapeView._textBoxView);
          if (!v41) {
            goto LABEL_32;
          }
          id v42 = v41;
          specialized TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(0);

          unint64_t v43 = *(char **)(v19 + v40);
          if (!v43) {
            goto LABEL_32;
          }
          Swift::Int v44 = *(void **)&v43[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
          if (!v44) {
            goto LABEL_32;
          }
          uint64_t v45 = HIBYTE(v7) & 0xF;
          if ((v7 & 0x2000000000000000) == 0) {
            uint64_t v45 = v6 & 0xFFFFFFFFFFFFLL;
          }
          if (v45)
          {
            id v10 = v44;
            long long v46 = v43;
            unint64_t v47 = (void *)MEMORY[0x21054D080](v6, v7);
            unint64_t v7 = (unint64_t)v10;
            swift_bridgeObjectRelease();
            objc_msgSend(v10, sel_setText_, v47);

            uint64_t v48 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics;
            uint64_t v49 = *(void *)&v46[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
            *(_WORD *)(v49 + 18) = 270;
            *(unsigned char *)(v49 + 64) = 3;
            uint64_t v50 = *(void *)&v46[v48];
            swift_retain();
            id v51 = objc_msgSend(v10, sel_textContentType);
            if (!v51) {
              goto LABEL_45;
            }
            id v10 = *(id *)(v50 + 32);
            *(void *)(v50 + 32) = v51;
            swift_release();

            uint64_t v6 = *(void *)&v46[v48];
            swift_retain();
            id v52 = objc_msgSend((id)v7, sel_text);
            if (!v52) {
              goto LABEL_46;
            }
            uint64_t v53 = v52;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v54 = String.count.getter();
            swift_bridgeObjectRelease();
            *(void *)(v6 + 56) = v54;
            swift_release();
            specialized TextBoxView.updateCanvasElement(shouldRegisterUndo:)(1);
          }
          else
          {
LABEL_32:
            swift_bridgeObjectRelease();
          }
          uint64_t v55 = *(void **)(v19 + v40);
          uint64_t v4 = v15 - 3;
          if (v55)
          {
            id v56 = v55;
            objc_msgSend(v56, sel_resignFirstResponder);
          }
          unint64_t v3 = v57;
          unint64_t rawValue = (unint64_t)v58;
          uint64_t v16 = v62;
        }

        ++v15;
        if (v4 == v3) {
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      swift_bridgeObjectRetain();
      id v10 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }

  __break(1u);
}

void closure #1 in FormFillingView.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  id v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v11 = MEMORY[0x210550400](a2 + 16);
  if (v11)
  {
    char v12 = (void *)v11;
    uint64_t v13 = (void *)MEMORY[0x210550400](v11 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas);

    if (v13)
    {
      unint64_t v14 = AnyCanvas.formFieldElements.getter();
      unint64_t v15 = v14;
      if (v14 >> 62)
      {
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        if (v16) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v16)
        {
LABEL_5:
          uint64_t v35 = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16 & ~(v16 >> 63), 0);
          if (v16 < 0)
          {
            __break(1u);
            return;
          }
          v26[0] = v13;
          uint64_t v17 = 0;
          uint64_t v18 = (void (**)(char *, uint64_t))(v5 + 8);
          v26[1] = v8 + 32;
          unint64_t v27 = v15 & 0xC000000000000001;
          uint64_t v28 = v16;
          unint64_t v29 = v15;
          do
          {
            if (v27) {
              uint64_t v19 = (void *)MEMORY[0x21054E050](v17, v15);
            }
            else {
              uint64_t v19 = *(id *)(v15 + 8 * v17 + 32);
            }
            uint64_t v20 = v19;
            (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v19) + 0xE8))();
            SharedTagged_9.tag.getter();
            uint64_t v31 = v33;
            char v32 = v34;
            MEMORY[0x21054BDF0](v4);
            lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
            WeakTagged_9.init(_:id:)();
            (*v18)(v7, v4);

            uint64_t v21 = v35;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
              uint64_t v21 = v35;
            }
            unint64_t v23 = *(void *)(v21 + 16);
            unint64_t v22 = *(void *)(v21 + 24);
            if (v23 >= v22 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
              uint64_t v21 = v35;
            }
            ++v17;
            *(void *)(v21 + 16) = v23 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v21+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v23, v10, v30);
            unint64_t v15 = v29;
          }
          while (v28 != v17);
          swift_bridgeObjectRelease();
          uint64_t v13 = (void *)v26[0];
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v21 = MEMORY[0x263F8EE78];
LABEL_18:
      uint64_t v24 = specialized Set.init<A>(_:)(v21);
      swift_bridgeObjectRelease();
      uint64_t v25 = specialized Set.init<A>(_:)(MEMORY[0x263F8EE78]);
      AnyCanvas.selection.setter(v24, v25, 6, 0);
    }
  }
}

unint64_t FormFillingView.calculateCountTextFieldsUsed(with:)()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics);
  swift_retain();
  unint64_t result = AnyCanvas.formFieldElements.getter();
  unint64_t v3 = result;
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result)
    {
LABEL_3:
      if (v4 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = 0;
      uint64_t v6 = (void *)MEMORY[0x263F8EED0];
      do
      {
        if ((v3 & 0xC000000000000001) != 0) {
          unint64_t v7 = (void *)MEMORY[0x21054E050](v5, v3);
        }
        else {
          unint64_t v7 = *(id *)(v3 + 8 * v5 + 32);
        }
        uint64_t v8 = v7;
        uint64_t v9 = (void *)(*(uint64_t (**)(void))((*v6 & *v7) + 0x2D0))();
        if (!v9) {
          goto LABEL_5;
        }
        id v10 = v9;
        uint64_t v11 = (*(uint64_t (**)(void))((*v6 & *v9) + 0xF0))();
        unint64_t v13 = v12;

        swift_bridgeObjectRelease();
        uint64_t v14 = HIBYTE(v13) & 0xF;
        if ((v13 & 0x2000000000000000) == 0) {
          uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
        }
        if (v14)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
LABEL_5:
        }
        ++v5;
      }
      while (v4 != v5);
      swift_bridgeObjectRelease();
      uint64_t v15 = v17;
      if (v17 < 0) {
        goto LABEL_24;
      }
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = MEMORY[0x263F8EE78];
  if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_21;
  }
LABEL_19:
  if ((v15 & 0x4000000000000000) != 0) {
    goto LABEL_24;
  }
  uint64_t v16 = *(void *)(v15 + 16);
LABEL_21:
  swift_release();
  *(void *)(v1 + 72) = v16;
  return swift_release();
}

unint64_t FormFillingView.calculateCountTextFieldsWithAutofillUsedExplicitly(with:)()
{
  uint64_t v1 = v0;
  unint64_t result = AnyCanvas.formFieldElements.getter();
  unint64_t v3 = result;
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result)
    {
LABEL_3:
      if (v4 < 1) {
        goto LABEL_23;
      }
      uint64_t v5 = 0;
      uint64_t v6 = (void *)MEMORY[0x263F8EED0];
      do
      {
        if ((v3 & 0xC000000000000001) != 0) {
          unint64_t v7 = (void *)MEMORY[0x21054E050](v5, v3);
        }
        else {
          unint64_t v7 = *(id *)(v3 + 8 * v5 + 32);
        }
        uint64_t v8 = v7;
        uint64_t v9 = (*(uint64_t (**)(void))((*v6 & *v7) + 0x2D0))();
        if (v9 {
          && (id v10 = (void *)v9,
        }
              uint64_t v11 = *(void *)(v9 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics),
              swift_retain(),
              v10,
              LODWORD(v1CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = *(unsigned __int8 *)(v11 + 64),
              swift_release(),
              v10 == 2))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v5;
      }
      while (v4 != v5);
      swift_bridgeObjectRelease();
      uint64_t v12 = v17;
      if (v17 < 0) {
        goto LABEL_21;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = MEMORY[0x263F8EE78];
  if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_19;
  }
LABEL_17:
  if ((v12 & 0x4000000000000000) != 0) {
    goto LABEL_21;
  }
  uint64_t v13 = *(void *)(v12 + 16);
LABEL_19:
  unint64_t result = swift_release();
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit15FormFillingView_signatureFieldsSigned);
  BOOL v15 = __OFADD__(v13, v14);
  uint64_t v16 = v13 + v14;
  if (!v15)
  {
    *(void *)(*(void *)(v1 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics) + 88) = v16;
    return result;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

unint64_t FormFillingView.calculateCountTextFieldsWithNoTextEntry(with:)()
{
  uint64_t v1 = v0;
  unint64_t result = AnyCanvas.formFieldElements.getter();
  unint64_t v3 = result;
  uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v33 = MEMORY[0x263F8EE78];
  if (!(result >> 62))
  {
    uint64_t v5 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v16 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_19;
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v5 = result;
  if (!result) {
    goto LABEL_18;
  }
LABEL_3:
  if (v5 < 1)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v6 = 0;
  unint64_t v7 = (void *)MEMORY[0x263F8EED0];
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      uint64_t v8 = (void *)MEMORY[0x21054E050](v6, v3);
    }
    else {
      uint64_t v8 = *(id *)(v3 + 8 * v6 + 32);
    }
    uint64_t v9 = v8;
    id v10 = (void *)(*(uint64_t (**)(void))((*v7 & *v8) + 0x2D0))();
    if (!v10) {
      goto LABEL_5;
    }
    uint64_t v11 = v10;
    uint64_t v12 = (*(uint64_t (**)(void))((*v7 & *v10) + 0xF0))();
    unint64_t v14 = v13;

    swift_bridgeObjectRelease();
    uint64_t v15 = HIBYTE(v14) & 0xF;
    if ((v14 & 0x2000000000000000) == 0) {
      uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (v15)
    {
LABEL_5:
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v6;
  }
  while (v5 != v6);
  swift_bridgeObjectRelease();
  uint64_t v16 = v33;
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v33 < 0) {
    goto LABEL_37;
  }
LABEL_19:
  if ((v16 & 0x4000000000000000) == 0)
  {
    uint64_t v17 = *(void *)(v16 + 16);
    goto LABEL_21;
  }
LABEL_37:
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
LABEL_21:
  swift_release();
  uint64_t v18 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets);
  swift_beginAccess();
  uint64_t v19 = *v18;
  uint64_t v32 = v4;
  if (!((unint64_t)*v18 >> 62))
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_23;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t v30 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }
  swift_bridgeObjectRetain();
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_39;
  }
LABEL_23:
  if (v20 >= 1)
  {
    for (uint64_t i = 0; i != v20; ++i)
    {
      if ((v19 & 0xC000000000000001) != 0) {
        id v22 = (id)MEMORY[0x21054E050](i, v19);
      }
      else {
        id v22 = *(id *)(v19 + 8 * i + 32);
      }
      unint64_t v23 = v22;
      id v24 = objc_msgSend(v22, sel_widgetStringValue);
      if (!v24) {
        goto LABEL_25;
      }
      uint64_t v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;

      swift_bridgeObjectRelease();
      uint64_t v29 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0) {
        uint64_t v29 = v26 & 0xFFFFFFFFFFFFLL;
      }
      if (v29)
      {
LABEL_25:
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = v32;
    if (v32 < 0) {
      goto LABEL_44;
    }
LABEL_40:
    if ((v30 & 0x4000000000000000) == 0)
    {
      uint64_t v31 = *(void *)(v30 + 16);
LABEL_42:
      unint64_t result = swift_release();
      if (!__OFADD__(v17, v31))
      {
        *(void *)(*(void *)(v1 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics) + 112) = v17 + v31;
        return result;
      }
      __break(1u);
      goto LABEL_46;
    }
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_42;
  }
LABEL_47:
  __break(1u);
  return result;
}

id FormFillingView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FormFillingView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FormFillingView()
{
  return self;
}

PaperKit::FormContentType_optional key path getter for Shape.textContentType : Shape@<W0>(unsigned char *a1@<X8>)
{
  result.value = Shape.textContentType.getter(&v3).value;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.textContentType : Shape(unsigned __int8 *a1)
{
  uint64_t v2 = *a1;
  char v3 = 0;
  type metadata accessor for Shape();
  return ShapeSecondaryProperties.textContentType.setter(&v2);
}

void specialized TextBoxView.updateCanvasElement(shouldRegisterUndo:)(int a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v66 = *(void (***)(char *, uint64_t, uint64_t))(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v55 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v67 = v1;
  unint64_t v14 = &v1[direct field offset for TextBoxView.canvasElementView];
  uint64_t v15 = (void *)MEMORY[0x210550400](&v1[direct field offset for TextBoxView.canvasElementView], v11);
  if (v15)
  {
    uint64_t v16 = v15;
    CGPoint v64 = v14;
    int v62 = a1;
    uint64_t v17 = (char *)v15 + *(void *)((*MEMORY[0x263F8EED0] & *v15) + 0x380);
    swift_beginAccess();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    uint64_t v63 = v17;
    uint64_t v58 = v18;
    uint64_t v59 = v10 + 16;
    uint64_t v19 = ((uint64_t (*)(char *, char *, uint64_t))v18)(v13, v17, v9);
    MEMORY[0x270FA5388](v19);
    uint64_t v65 = v16;
    uint64_t v20 = v9;
    uint64_t v21 = v13;
    uint64_t v22 = v10;
    uint64_t v57 = type metadata accessor for Shape();
    *(&v55 - 4) = v57;
    uint64_t v23 = _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    *(&v55 - 3) = v23;
    *(&v55 - 2) = (uint64_t)&protocol witness table for Shape;
    swift_getKeyPath();
    uint64_t v56 = v23;
    Capsule<>.subscript.getter();
    swift_release();
    id v24 = *(void (***)(char *, uint64_t, uint64_t))(v22 + 8);
    unint64_t v60 = v21;
    uint64_t v61 = v22 + 8;
    uint64_t v25 = v21;
    uint64_t v26 = v20;
    unint64_t v27 = v65;
    ((void (*)(char *, uint64_t))v24)(v25, v26);
    unint64_t v28 = v67;
    uint64_t v29 = *(void *)&v67[direct field offset for TextBoxView.textStorage]
        + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
    swift_beginAccess();
    uint64_t v30 = v66;
    v66[2](v5, v29, v3);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    LOBYTE(v29) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v31 = v30[1];
    ((void (*)(char *, uint64_t))v31)(v5, v3);
    uint64_t v32 = ((uint64_t (*)(char *, uint64_t))v31)(v8, v3);
    if ((v29 & 1) == 0)
    {
      uint64_t v66 = v24;
      MEMORY[0x270FA5388](v32);
      *(&v55 - 2) = (uint64_t)v28;
      uint64_t v33 = v63;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      uint64_t v34 = swift_endAccess();
      uint64_t v35 = (void *)MEMORY[0x263F8EED0];
      char v36 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v27) + 0x1E0))(v34);
      uint64_t v37 = v28;
      unint64_t v38 = v64;
      id v39 = v35;
      if ((v36 & 1) == 0)
      {
        uint64_t v40 = (void *)MEMORY[0x210550400](v64);
        if (v40)
        {
          BOOL v41 = v40;
          id v42 = (void *)(*(uint64_t (**)(void))((*v35 & *v40) + 0x88))();

          if (v42)
          {
            unint64_t v43 = (void *)(*(uint64_t (**)(void))((*v35 & *v42) + 0x2F8))();
            uint64_t v45 = v44;

            uint64_t ObjectType = swift_getObjectType();
            uint64_t v47 = v26;
            uint64_t v48 = v60;
            v58(v60, v33, v47);
            (*(void (**)(char *, void, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v45 + 200))(v48, v62 & 1, v57, v56, &protocol witness table for Shape, ObjectType, v45);

            uint64_t v49 = v47;
            unint64_t v27 = v65;
            ((void (*)(char *, uint64_t))v66)(v48, v49);
          }
        }
      }
      objc_msgSend(v37, sel_setNeedsLayout);
      uint64_t v50 = (void *)MEMORY[0x210550400](v38);
      if (v50)
      {
        id v51 = v50;
        id v52 = (char *)(*(uint64_t (**)(void))((*v39 & *v50) + 0x88))();

        if (v52)
        {
          uint64_t v53 = *(void **)&v52[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
          id v54 = v53;

          if (!v53)
          {
            __break(1u);
            return;
          }
          objc_msgSend(v54, sel_setNeedsLayout);
        }
      }
      objc_msgSend(v37, sel_setNeedsDisplay);
    }
  }
}

uint64_t specialized closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v43 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (uint64_t)&v41 - v6;
  MEMORY[0x270FA5388](v7);
  BOOL v41 = (char *)&v41 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v44 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v46 = (char *)&v41 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v41 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(a2 + direct field offset for TextBoxView.textStorage)
      + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v21(v19, v20, v9);
  _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  uint64_t v47 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  uint64_t v23 = v22 + *(int *)(type metadata accessor for Shape() + 52);
  CRAttributedString.merge(_:)();
  id v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24(v19, v9);
  uint64_t v45 = v23;
  v21(v16, v23, v9);
  uint64_t v25 = (void *)CRAttributedString.attributedString.getter();
  id v26 = objc_msgSend(v25, sel_string);

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  if (v27) {
    BOOL v30 = 0;
  }
  else {
    BOOL v30 = v29 == 0xE000000000000000;
  }
  if (v30)
  {
    swift_bridgeObjectRelease();
    v24(v16, v9);
    return v47(v48, 0);
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v24(v16, v9);
  if (v31) {
    return v47(v48, 0);
  }
  uint64_t v33 = v45;
  uint64_t v32 = v46;
  v21(v46, v45, v9);
  uint64_t v34 = v44;
  v21(v44, v33, v9);
  uint64_t v35 = (void *)CRAttributedString.attributedString.getter();
  v24(v34, v9);
  id v36 = objc_msgSend(v35, sel_length);

  uint64_t result = (uint64_t)v36 - 1;
  if (!__OFSUB__(v36, 1))
  {
    uint64_t v38 = (uint64_t)v41;
    CRAttributedString.attributes(at:effectiveRange:)();
    v24(v32, v9);
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
    uint64_t v40 = v42;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v38, v42, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v40, v43, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?(v40, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v38, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    return v47(v48, 0);
  }
  __break(1u);
  return result;
}

void specialized TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(int a1)
{
  uint64_t v2 = v1;
  LODWORD(v171) = a1;
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v170 = (char *)v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v151 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v166 = (char *)v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v167 = *(void *)(v11 - 8);
  *(void *)&long long v168 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v165 = (char *)v151 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v151 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  v20.n128_f64[0] = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)v151 - v21;
  uint64_t v23 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  uint64_t v169 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView;
  if (v23
    || (id v51 = &v2[direct field offset for TextBoxView.canvasElementView],
        uint64_t v160 = v19,
        (uint64_t v163 = (char *)MEMORY[0x210550400](&v2[direct field offset for TextBoxView.canvasElementView], v20.n128_f64[0])) == 0))
  {
LABEL_2:
    id v24 = v2;
    uint64_t v25 = v4;
    if (v171) {
      goto LABEL_3;
    }
    return;
  }
  if (v2[direct field offset for TextBoxView.shouldAddTextboxView] != 1)
  {

    goto LABEL_2;
  }
  id v161 = v22;
  uint64_t v164 = v8;
  uint64_t v159 = v13;
  objc_msgSend(v2, sel_bounds);
  double v53 = v52;
  double v55 = v54;
  double v57 = v56;
  double v59 = v58;
  unint64_t v60 = *(void **)&v2[direct field offset for TextBoxView.textContainer];
  id v61 = objc_allocWithZone((Class)type metadata accessor for TextBoxTextView());
  id v62 = v60;
  uint64_t v63 = v2;
  uint64_t v156 = (char *)TextBoxTextView.init(textBoxView:frame:textContainer:)(v63, v60, v53, v55, v57, v59);
  id v157 = v63;
  objc_msgSend(v156, sel_setDelegate_, v63);
  CGPoint v64 = (void *)MEMORY[0x210550400](v51);
  if (v64)
  {
    uint64_t v65 = v64;
    uint64_t v66 = (void *)MEMORY[0x263F8EED0];
    unint64_t v67 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v64) + 0x88))();

    if (v67)
    {
      uint64_t v68 = (void *)(*(uint64_t (**)(void))((*v66 & *v67) + 0x2F8))();

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<PaperDocumentPage>);
      BOOL v69 = (void *)swift_dynamicCastClass();
      if (v69)
      {
        unint64_t v70 = *(void **)((char *)v69 + *(void *)((*v66 & *v69) + 0x4D0));
        if (v70)
        {
          *((void *)&v173 + 1) = type metadata accessor for FormFillingView();
          uint64_t v174 = &protocol witness table for FormFillingView;
          *(void *)&long long v172 = v70;
        }
        else
        {
          uint64_t v174 = 0;
          long long v172 = 0u;
          long long v173 = 0u;
        }
        uint64_t v84 = &v156[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
        swift_beginAccess();
        id v85 = v70;
        outlined assign with take of FormAutofillDelegate?((uint64_t)&v172, (uint64_t)v84);
        swift_endAccess();
      }
    }
  }
  uint64_t v86 = (void *)MEMORY[0x210550400](v51);
  if (v86)
  {
    uint64_t v87 = v86;
    uint64_t v88 = (void *)MEMORY[0x263F8EED0];
    uint64_t v89 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v86) + 0x88))();

    if (v89)
    {
      uint64_t v90 = (void *)(*(uint64_t (**)(void))((*v88 & *v89) + 0x2F8))();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ContainerCanvasElementView<Image>);
      uint64_t v91 = (void *)swift_dynamicCastClass();
      if (v91)
      {
        uint64_t v92 = *(void **)((char *)v91 + *(void *)((*v88 & *v91) + 0x4D0));
        if (v92)
        {
          *((void *)&v173 + 1) = type metadata accessor for FormFillingView();
          uint64_t v174 = &protocol witness table for FormFillingView;
          *(void *)&long long v172 = v92;
        }
        else
        {
          uint64_t v174 = 0;
          long long v172 = 0u;
          long long v173 = 0u;
        }
        uint64_t v93 = &v156[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
        swift_beginAccess();
        id v94 = v92;
        outlined assign with take of FormAutofillDelegate?((uint64_t)&v172, (uint64_t)v93);
        swift_endAccess();
      }
    }
  }
  uint64_t v152 = v16;
  uint64_t v162 = v3;
  uint64_t v155 = v4;
  CGRect v158 = v2;
  uint64_t v95 = self;
  char v96 = v156;
  id v97 = objc_msgSend(v95, sel_clearColor);
  objc_msgSend(v96, sel_setBackgroundColor_, v97);

  uint64_t v98 = one-time initialization token for textBoxTextContainerInset;
  uint64_t v37 = v96;
  if (v98 != -1) {
    goto LABEL_64;
  }
  while (1)
  {
    objc_msgSend(v37, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_26ACC4578, unk_26ACC4580);

    objc_msgSend(v37, sel_setAllowsEditingTextAttributes_, 1);
    objc_msgSend(v37, sel_setScrollEnabled_, 0);
    long long v99 = *(void **)&v157[direct field offset for TextBoxView.textStorage];
    long long v100 = v37;
    id v101 = objc_msgSend(v99, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v102 = String.count.getter();
    swift_bridgeObjectRelease();
    objc_msgSend(v100, sel_setSelectedRange_, v102, 0);

    objc_msgSend(v100, sel_setClipsToBounds_, 0);
    uint64_t v103 = &v163[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v163) + 0x380)];
    swift_beginAccess();
    uint64_t v154 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v104 = v161;
    uint64_t v105 = (char *)v14;
    uint64_t v106 = v159;
    uint64_t v107 = v154(v161, v103, v159);
    MEMORY[0x270FA5388](v107);
    uint64_t v153 = (void (*)(char *, uint64_t))type metadata accessor for Shape();
    v151[-4] = v153;
    uint64_t v108 = _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    v151[-3] = v108;
    v151[-2] = &protocol witness table for Shape;
    swift_getKeyPath();
    uint64_t v109 = v100;
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v156 = v105;
    uint64_t v110 = (void (*)(char *, uint64_t))*((void *)v105 + 1);
    v110(v104, v106);
    char v175 = v172;
    id v111 = (id)specialized FormContentType.uiTextContentType.getter();
    objc_msgSend(v109, sel_setTextContentType_, v111);

    uint64_t v112 = v160;
    uint64_t v113 = v154((char *)v160, v103, v106);
    MEMORY[0x270FA5388](v113);
    v151[-4] = v153;
    v151[-3] = v108;
    v151[-2] = &protocol witness table for Shape;
    swift_getKeyPath();
    uint64_t v114 = (uint64_t)v166;
    Capsule<>.subscript.getter();
    swift_release();
    v110((char *)v112, v106);
    uint64_t v116 = v167;
    uint64_t v115 = v168;
    if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v167 + 48))(v114, 1, v168) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v114, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      uint64_t v117 = v158;
      uint64_t v118 = v169;
      id v119 = v157;
    }
    else
    {
      char v120 = v165;
      (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v165, v114, v115);
      unint64_t v121 = v109;
      id v119 = v157;
      id v122 = objc_msgSend(v157, sel_traitCollection);
      id v123 = objc_msgSend(v122, sel_userInterfaceStyle);

      CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v123 == (id)2);
      type metadata accessor for NSAttributedStringKey(0);
      _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v121, sel_setTypingAttributes_, isa);

      (*(void (**)(char *, uint64_t))(v116 + 8))(v120, v115);
      uint64_t v117 = v158;
      uint64_t v118 = v169;
    }
    objc_msgSend(v119, sel_addSubview_, v109);
    *((unsigned char *)v119 + direct field offset for TextBoxView.hideText) = 1;
    objc_msgSend(v119, sel_setNeedsDisplay);
    id v125 = *(void **)&v117[v118];
    *(void *)&v117[v118] = v109;
    uint64_t v126 = v109;

    BOOL v127 = (char *)objc_msgSend(v126, sel_inputAssistantItem);
    uint64_t v128 = (void *)MEMORY[0x21054D080](0x6D726F6674786574, 0xEA00000000007461);
    id v129 = objc_msgSend(self, sel_systemImageNamed_, v128);

    id v130 = objc_allocWithZone(MEMORY[0x263F824A8]);
    id v131 = v119;
    id v132 = objc_msgSend(v130, sel_initWithImage_style_target_action_, v129, 0, v131, sel_textFormat_);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v133 = swift_allocObject();
    long long v168 = xmmword_20C835790;
    *(_OWORD *)(v133 + 16) = xmmword_20C835790;
    uint64_t v134 = swift_allocObject();
    *(_OWORD *)(v134 + 16) = v168;
    *(void *)(v134 + 32) = v132;
    *(void *)&long long v172 = v134;
    specialized Array._endMutation()();
    id v135 = objc_allocWithZone(MEMORY[0x263F824B8]);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItem);
    id v136 = (char *)v132;
    Class v137 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v138 = objc_msgSend(v135, sel_initWithBarButtonItems_representativeItem_, v137, 0);

    *(void *)(v133 + 32) = v138;
    *(void *)&long long v172 = v133;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItemGroup);
    Class v139 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v127, sel_setTrailingBarButtonGroups_, v139);

    objc_msgSend(v131, sel_contentScaleFactor);
    specialized TextBoxView._applyScaleToView(scale:view:)(v126, v140);
    if ((v171 & 1) == 0)
    {

      unint64_t v142 = v163;
LABEL_60:

      uint64_t v28 = v136;
      goto LABEL_61;
    }
    id v24 = v117;
    id v141 = objc_msgSend(self, sel_defaultCenter);
    objc_msgSend(v141, sel_addObserver_selector_name_object_, v131, sel_firstResponderDidChange_, *MEMORY[0x263F83E28], 0);

    uint64_t v25 = v155;
    uint64_t v3 = v162;
    uint64_t v13 = v159;
    uint64_t v14 = (uint64_t)v156;
    uint64_t v8 = v164;
    uint64_t v22 = v161;
    uint64_t v16 = v152;
LABEL_3:
    id v26 = &v24[direct field offset for TextBoxView.canvasElementView];
    uint64_t v27 = MEMORY[0x210550400](&v24[direct field offset for TextBoxView.canvasElementView], v20);
    if (!v27) {
      return;
    }
    uint64_t v28 = (char *)v27;
    id v161 = v22;
    uint64_t v164 = v8;
    uint64_t v171 = v26;
    uint64_t v29 = (void *)MEMORY[0x210550400](v26);
    BOOL v30 = (void *)MEMORY[0x263F8EED0];
    if (!v29) {
      goto LABEL_49;
    }
    char v31 = v29;
    uint64_t v32 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v29) + 0x88))();

    if (!v32) {
      goto LABEL_49;
    }
    AnyCanvas.selectedCanvasElementIds.getter();
    uint64_t v165 = v33;

    uint64_t v34 = &v28[*(void *)((*v30 & *(void *)v28) + 0x380)];
    swift_beginAccess();
    uint64_t v35 = *(char **)(v14 + 16);
    uint64_t v163 = v34;
    uint64_t v160 = v14 + 16;
    id v157 = v35;
    ((void (*)(char *, char *, uint64_t))v35)(v16, v34, v13);
    uint64_t v36 = _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    uint64_t v37 = v164;
    uint64_t v154 = (uint64_t (*)(char *, char *, uint64_t))v36;
    Capsule<>.rootID.getter();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v39 = v16;
    uint64_t v40 = v165;
    uint64_t v159 = v13;
    uint64_t v156 = (char *)(v14 + 8);
    v38(v39, v13);
    *(void *)&long long v168 = *((void *)v40 + 2);
    uint64_t v153 = v38;
    if (!(void)v168)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v37, v3);
      goto LABEL_26;
    }
    CGRect v158 = v24;
    uint64_t v41 = v3;
    unint64_t v42 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v43 = &v40[v42];
    uint64_t v44 = v40;
    uint64_t v45 = v170;
    uint64_t v167 = *(void *)(v25 + 16);
    ((void (*)(char *, char *, uint64_t))v167)(v170, v43, v41);
    uint64_t v46 = _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    swift_bridgeObjectRetain();
    uint64_t v166 = (char *)v46;
    char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v155 = v25;
    uint64_t v50 = *(void (**)(char *, uint64_t))(v25 + 8);
    uint64_t v49 = v25 + 8;
    uint64_t v48 = v50;
    uint64_t v162 = v41;
    v50(v45, v41);
    if (v47)
    {
      swift_bridgeObjectRelease();
LABEL_48:
      v48(v37, v162);
      swift_bridgeObjectRelease();
      id v24 = v158;
      BOOL v30 = (void *)MEMORY[0x263F8EED0];
      goto LABEL_49;
    }
    if ((void)v168 == 1) {
      break;
    }
    v151[1] = v49 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v152 = v28;
    uint64_t v72 = *(void *)(v155 + 72);
    uint64_t v73 = &v44[v72 + v42];
    uint64_t v14 = 1;
    uint64_t v74 = v170;
    uint64_t v75 = v162;
    while (1)
    {
      ((void (*)(char *, char *, uint64_t))v167)(v74, v73, v75);
      uint64_t v76 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        break;
      }
      char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
      v48(v74, v75);
      if (v77)
      {
        swift_bridgeObjectRelease();
        uint64_t v37 = v164;
        uint64_t v28 = v152;
        goto LABEL_48;
      }
      ++v14;
      v73 += v72;
      uint64_t v37 = v164;
      if (v76 == (void)v168)
      {
        swift_bridgeObjectRelease();
        id v24 = v158;
        uint64_t v71 = v162;
        uint64_t v28 = v152;
        BOOL v30 = (void *)MEMORY[0x263F8EED0];
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_64:
    swift_once();
  }
  swift_bridgeObjectRelease();
  id v24 = v158;
  uint64_t v71 = v162;
  BOOL v30 = (void *)MEMORY[0x263F8EED0];
LABEL_25:
  v48(v37, v71);
LABEL_26:
  swift_bridgeObjectRelease();
  char v78 = (void *)MEMORY[0x210550400](v171);
  uint64_t v79 = v159;
  if (v78)
  {
    char v80 = v78;
    CGPoint v81 = (void *)(*(uint64_t (**)(void))((*v30 & *v78) + 0x88))();

    if (v81)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>);
      uint64_t v82 = swift_allocObject();
      *(_OWORD *)(v82 + 16) = xmmword_20C832C20;
      uint64_t v83 = v161;
      ((void (*)(char *, char *, uint64_t))v157)(v161, v163, v79);
      Capsule<>.rootID.getter();
      v153(v83, v79);
      AnyCanvas.selectedCanvasElementIds.setter(v82);
    }
  }
LABEL_49:
  uint64_t v143 = (void *)MEMORY[0x210550400](v171);
  if (v143)
  {
    id v144 = v143;
    unint64_t v142 = (char *)(*(uint64_t (**)(void))((*v30 & *v143) + 0x88))();

    if (v142)
    {
      id v145 = v24;
      unint64_t v146 = (char *)objc_msgSend(v142, sel_window);
      if (v146)
      {
        BOOL v127 = v146;
        uint64_t v147 = (char *)objc_msgSend(self, sel_activeToolPickerForWindow_, v146);
        if (v147)
        {
          id v136 = v147;
          id v148 = objc_msgSend(v147, sel__visibilityUpdatesEnabled);
          objc_msgSend(v136, sel__setVisibilityUpdatesEnabled_, 0);
          id v149 = *(void **)&v24[v169];
          if (v149) {
            objc_msgSend(v149, sel_becomeFirstResponder);
          }
          objc_msgSend(v136, sel__setVisibilityUpdatesEnabled_, v148);

          unint64_t v142 = v28;
          goto LABEL_60;
        }
      }
      id v150 = *(void **)&v24[v169];
      if (v150) {
        objc_msgSend(v150, sel_becomeFirstResponder);
      }
      BOOL v127 = v145;
      id v136 = v28;
      goto LABEL_60;
    }
  }
LABEL_61:
}

void specialized TextBoxView._applyScaleToView(scale:view:)(void *a1, double a2)
{
  objc_msgSend(a1, sel_setContentScaleFactor_);
  id v4 = objc_msgSend(a1, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v6) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v6) {
      goto LABEL_10;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v8 = (id)MEMORY[0x21054E050](i, v5);
    }
    else {
      id v8 = *(id *)(v5 + 8 * i + 32);
    }
    uint64_t v9 = v8;
    specialized TextBoxView._applyScaleToView(scale:view:)(a2);
  }
LABEL_10:
  swift_bridgeObjectRelease();
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = type metadata accessor for CRKeyPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v59) = a2;
  uint64_t v17 = *(int *)(v12 + 48);
  v56[0] = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v56[1] = v3;
  uint64_t v18 = a1 + v56[0];
  uint64_t v61 = *(void *)(v13 + 72);
  uint64_t v58 = a1;
  swift_bridgeObjectRetain();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v18, (uint64_t)v15, &demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
  uint64_t v57 = v8;
  uint64_t v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v62 = v7;
  uint64_t v63 = v19;
  v19((unint64_t)v10, v15, v7);
  uint64_t v60 = v17;
  __n128 v20 = *(void **)&v15[v17];
  CGPoint v64 = a3;
  uint64_t v21 = *a3;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  uint64_t v24 = *(void *)(v21 + 16);
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_24;
  }
  char v27 = v22;
  if (*(void *)(v21 + 24) >= v26)
  {
    if (v59)
    {
      if (v22) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v27) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v34 = (void *)*v64;
    *(void *)(*v64 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    uint64_t v35 = v34[6];
    uint64_t v59 = *(void *)(v57 + 72);
    uint64_t v36 = v62;
    v63(v35 + v59 * v23, v10, v62);
    *(void *)(v34[7] + 8 * v23) = v20;
    uint64_t v37 = v34[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v34[2] = v39;
    uint64_t v40 = v16 - 1;
    if (v16 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v41 = v58 + v61 + v56[0];
    while (1)
    {
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v41, (uint64_t)v15, &demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
      v63((unint64_t)v10, v15, v36);
      __n128 v20 = *(void **)&v15[v60];
      unint64_t v42 = (void *)*v64;
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
      uint64_t v45 = v42[2];
      BOOL v46 = (v43 & 1) == 0;
      uint64_t v47 = v45 + v46;
      if (__OFADD__(v45, v46)) {
        break;
      }
      char v48 = v43;
      if (v42[3] < v47)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, 1);
        unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
        if ((v48 & 1) != (v50 & 1)) {
          goto LABEL_26;
        }
        unint64_t v44 = v49;
      }
      if (v48) {
        goto LABEL_10;
      }
      id v51 = (void *)*v64;
      *(void *)(*v64 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      uint64_t v36 = v62;
      v63(v51[6] + v59 * v44, v10, v62);
      *(void *)(v51[7] + 8 * v44) = v20;
      uint64_t v52 = v51[2];
      BOOL v38 = __OFADD__(v52, 1);
      uint64_t v53 = v52 + 1;
      if (v38) {
        goto LABEL_25;
      }
      _OWORD v51[2] = v53;
      v41 += v61;
      if (!--v40) {
        goto LABEL_23;
      }
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v59 & 1);
  unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    unint64_t v23 = v28;
    if ((v27 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v30 = (void *)swift_allocError();
    swift_willThrow();
    id v67 = v30;
    id v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    char v32 = swift_dynamicCast();
    uint64_t v33 = v62;
    if ((v32 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v33);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  uint64_t v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v54._object = (void *)0x800000020C853D00;
  v54._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v54);
  _print_unlocked<A, B>(_:_:)();
  v55._uint64_t countAndFlagsBits = 39;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized static FormFillingView.fontThatFits(frame:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82D60]), sel_initWithFrame_, a1, a2, a3, a4);
  if (one-time initialization token for textBoxTextContainerInset != -1) {
    swift_once();
  }
  objc_msgSend(v8, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_26ACC4578, unk_26ACC4580);
  if (one-time initialization token for formFieldFont != -1) {
    swift_once();
  }
  objc_msgSend(v8, sel_setFont_, static UIConstants.formFieldFont);
  uint64_t v9 = (void *)MEMORY[0x21054D080](32, 0xE100000000000000);
  objc_msgSend(v8, sel_setText_, v9);

  v41.origin.CGFloat x = a1;
  v41.origin.CGFloat y = a2;
  v41.size.CGFloat width = a3;
  v41.size.CGFloat height = a4;
  double Width = CGRectGetWidth(v41);
  objc_msgSend(v8, sel_sizeThatFits_, Width, 1.79769313e308);
  double v12 = v11;
  CGFloat v13 = v11 + v11;
  v42.origin.CGFloat x = a1;
  v42.origin.CGFloat y = a2;
  v42.size.CGFloat width = a3;
  v42.size.CGFloat height = a4;
  if (CGRectGetHeight(v42) >= v13)
  {
    (id)static UIConstants.formFieldFont;

    return;
  }
  id v14 = objc_msgSend(v8, sel_font);
  v43.origin.CGFloat x = a1;
  v43.origin.CGFloat y = a2;
  v43.size.CGFloat width = a3;
  v43.size.CGFloat height = a4;
  double Height = CGRectGetHeight(v43);
  double v40 = Width;
  objc_msgSend(v8, sel_sizeThatFits_, Width, 1.79769313e308);
  double v17 = v16;
  v44.origin.CGFloat x = a1;
  v44.origin.CGFloat y = a2;
  v44.size.CGFloat width = a3;
  v44.size.CGFloat height = a4;
  double v18 = CGRectGetHeight(v44);
  if (Height >= v12)
  {
    if (v17 < v18)
    {
      uint64_t v19 = v14;
      while (v19)
      {
        objc_msgSend(v19, sel_pointSize);
        double v30 = v29;
        v46.origin.CGFloat x = a1;
        v46.origin.CGFloat y = a2;
        v46.size.CGFloat width = a3;
        v46.size.CGFloat height = a4;
        if (v30 > CGRectGetHeight(v46))
        {
          id v14 = v19;
          goto LABEL_26;
        }
        id v14 = objc_msgSend(v8, sel_font);

        id v31 = objc_msgSend(v8, sel_font);
        if (!v31) {
          goto LABEL_33;
        }
        char v32 = v31;
        id v33 = objc_msgSend(v8, sel_font);
        if (!v33) {
          goto LABEL_34;
        }
        uint64_t v34 = v33;
        objc_msgSend(v33, sel_pointSize);
        double v36 = v35;

        id v37 = objc_msgSend(v32, sel_fontWithSize_, v36 + 1.0);
        objc_msgSend(v8, sel_setFont_, v37);

        objc_msgSend(v8, sel_sizeThatFits_, v40, 1.79769313e308);
        double v39 = v38;
        v47.origin.CGFloat x = a1;
        v47.origin.CGFloat y = a2;
        v47.size.CGFloat width = a3;
        v47.size.CGFloat height = a4;
        uint64_t v19 = v14;
        if (v39 >= CGRectGetHeight(v47)) {
          goto LABEL_26;
        }
      }
      goto LABEL_30;
    }
LABEL_26:
    objc_msgSend(v8, sel_setFont_, v14);
  }
  else if (v18 < v17)
  {
    uint64_t v19 = v14;
    while (v19)
    {
      objc_msgSend(v19, sel_pointSize);
      if (v20 <= 4.0) {
        goto LABEL_28;
      }
      id v21 = objc_msgSend(v8, sel_font);
      if (!v21) {
        goto LABEL_31;
      }
      char v22 = v21;
      id v23 = objc_msgSend(v8, sel_font);
      if (!v23) {
        goto LABEL_32;
      }
      uint64_t v24 = v23;
      objc_msgSend(v23, sel_pointSize);
      double v26 = v25;

      id v14 = objc_msgSend(v22, sel_fontWithSize_, v26 + -1.0);
      objc_msgSend(v8, sel_setFont_, v14);
      objc_msgSend(v8, sel_sizeThatFits_, v40, 1.79769313e308);
      double v28 = v27;
      v45.origin.CGFloat x = a1;
      v45.origin.CGFloat y = a2;
      v45.size.CGFloat width = a3;
      v45.size.CGFloat height = a4;
      uint64_t v19 = v14;
      if (CGRectGetHeight(v45) >= v28) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:

    __break(1u);
LABEL_32:

    __break(1u);
LABEL_33:

    __break(1u);
LABEL_34:

    __break(1u);
    goto LABEL_35;
  }
LABEL_27:
  if (v14)
  {
LABEL_28:

    return;
  }
LABEL_35:
  __break(1u);
}

void specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(void *a1, void *a2, void (*a3)(unsigned char *, unsigned char *, uint64_t), id a4, uint64_t a5, char a6, unsigned __int8 *a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16)
{
  id v135 = a3;
  id v136 = a2;
  id v132 = a1;
  uint64_t v25 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v25 - 8);
  BOOL v127 = &v114[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v130 = *(void *)(v27 - 8);
  uint64_t v131 = v27;
  MEMORY[0x270FA5388](v27);
  uint64_t v128 = &v114[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v29);
  id v129 = &v114[-v30];
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v31 - 8);
  id v125 = &v114[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v33);
  id v124 = &v114[-v34];
  MEMORY[0x270FA5388](v35);
  id v123 = &v114[-v36];
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v37 - 8);
  char v120 = &v114[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x270FA5388](v39 - 8);
  uint64_t v134 = &v114[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v122 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v122);
  unint64_t v121 = &v114[-((v41 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v42);
  uint64_t v126 = &v114[-v43];
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v138 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  CGRect v46 = &v114[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v47);
  Class v139 = &v114[-v48];
  MEMORY[0x270FA5388](v49);
  double v140 = &v114[-v51];
  uint64_t v141 = v50;
  uint64_t v137 = *a7;
  if ((unint64_t)(a8 - 1) > 0x7FFFFFFFFFFFFFFDLL)
  {
    id v57 = a4;
    id v58 = (id)*MEMORY[0x263F814F0];
    double v59 = 0.0;
  }
  else
  {
    uint64_t v52 = a5;
    if (a4)
    {
      id v53 = a4;
      objc_msgSend(v53, sel_pointSize);
      double v55 = v54;
      double v56 = (void *)MEMORY[0x21054D080](0x6F6C6E654DLL, 0xE500000000000000);
      a4 = objc_msgSend(self, sel_fontWithName_size_, v56, v55);
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, UIFont?)>);
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C832C20;
    uint64_t v61 = (void *)*MEMORY[0x263F814F0];
    *(void *)(inited + 32) = *MEMORY[0x263F814F0];
    *(void *)(inited + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = a4;
    id v62 = a4;
    id v58 = v61;
    unint64_t v63 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    uint64_t v64 = MEMORY[0x21054D230](32, 0xE100000000000000, a8);
    uint64_t v65 = (void *)MEMORY[0x21054D080](v64);
    swift_bridgeObjectRelease();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v63);
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedStringKey(0);
    _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v65, sel_sizeWithAttributes_, isa);
    double v68 = v67;

    double v59 = (a11 - v68) / (double)a8;
    uint64_t v44 = v141;
    a5 = v52;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t v69 = swift_initStackObject();
  *(_OWORD *)(v69 + 16) = xmmword_20C837A90;
  *(void *)(v69 + 32) = v58;
  *(void *)(v69 + 64) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  id v70 = v58;
  if (a4) {
    id v71 = a4;
  }
  else {
    specialized static FormFillingView.fontThatFits(frame:)(a9, a10, a11, a12);
  }
  *(void *)(v69 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v71;
  uint64_t v72 = (void *)*MEMORY[0x263F81540];
  *(void *)(v69 + 72) = *MEMORY[0x263F81540];
  if (a6) {
    a5 = 0;
  }
  id v73 = objc_allocWithZone(MEMORY[0x263F81650]);
  id v74 = v72;
  id v119 = a4;
  id v75 = objc_msgSend(v73, sel_init);
  objc_msgSend(v75, sel_setAlignment_, a5);
  uint64_t v76 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
  *(void *)(v69 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v75;
  char v77 = (void *)*MEMORY[0x263F81510];
  *(void *)(v69 + 104) = v76;
  *(void *)(v69 + 112) = v77;
  *(void *)(v69 + 144) = MEMORY[0x263F8EF38];
  *(double *)(v69 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v59;
  id v78 = v77;
  unint64_t v79 = specialized Dictionary.init(dictionaryLiteral:)(v69);
  if (v135) {
    id v80 = v136;
  }
  else {
    id v80 = 0;
  }
  if (v135) {
    unint64_t v81 = (unint64_t)v135;
  }
  else {
    unint64_t v81 = 0xE000000000000000;
  }
  id v82 = objc_allocWithZone(MEMORY[0x263F086A0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v83 = (void *)MEMORY[0x21054D080](v80, v81);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  Class v84 = Dictionary._bridgeToObjectiveC()().super.isa;
  unint64_t v116 = v79;
  swift_bridgeObjectRelease();
  id v85 = objc_msgSend(v82, sel_initWithString_attributes_, v83, v84);

  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  id v136 = v85;
  CRAttributedString.init(_:)();
  uint64_t v86 = v138;
  uint64_t v87 = v139;
  id v135 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v138 + 32);
  v135(v139, v46, v44);
  uint64_t v88 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v86 + 16);
  v88(v46, v87, v44);
  uint64_t v89 = CRAttributedString.count.getter();
  uint64_t v90 = *(void (**)(unsigned char *, uint64_t))(v86 + 8);
  v90(v46, v44);
  uint64_t v117 = v90;
  uint64_t v118 = v86 + 8;
  uint64_t v133 = v88;
  if (v89 < 1)
  {

    id v94 = 0;
  }
  else
  {
    v88(v46, v87, v44);
    uint64_t v91 = CRAttributedString.count.getter();
    v90(v46, v44);
    uint64_t v92 = swift_allocObject();
    *(void *)(v92 + 16) = 0x3FF0000000000000;
    *(void *)(v92 + 24) = v87;
    uint64_t v93 = swift_allocObject();
    id v94 = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
    *(void *)(v93 + 16) = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
    *(void *)(v93 + 24) = v92;
    unint64_t v146 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t v147 = v93;
    uint64_t v142 = MEMORY[0x263EF8330];
    uint64_t v143 = 1107296256;
    id v144 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    id v145 = &block_descriptor_34;
    uint64_t v95 = _Block_copy(&v142);
    swift_retain();
    swift_release();
    id v96 = v136;
    objc_msgSend(v136, sel_enumerateAttributesInRange_options_usingBlock_, 0, v91, 0, v95);

    _Block_release(v95);
    LOBYTE(v95) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v95)
    {
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v44 = v141;
  }
  v135(v140, v139, v44);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v94);
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  id v97 = v134;
  TaggedValue_9.init(_:)();
  memset(v150, 0, 32);
  uint64_t v98 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (!v98)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  long long v99 = v98;
  CGColorRef v100 = CGColorCreate(v98, v150);

  if (v100)
  {
    LODWORD(v135) = a16;
    int v115 = a15;
    LODWORD(v139) = a14;
    LODWORD(v136) = a13;
    uint64_t v142 = (uint64_t)v100;
    v149[0] = 0;
    uint64_t v101 = (uint64_t)v120;
    uint64_t v102 = v141;
    v133(v120, v140, v141);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v138 + 56))(v101, 0, 1, v102);
    uint64_t v148 = qword_26C14D1B8;
    uint64_t v103 = v126;
    Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v97, &v142, v149, v101, &v148, (uint64_t)v126, a9, a10, a11, a12, 5.0);
    uint64_t v142 = v137;
    LOBYTE(v143) = 0;
    ShapeSecondaryProperties.textContentType.setter(&v142);
    uint64_t v104 = (uint64_t)v123;
    CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v116, 0);
    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v104, 0, 1, v105);
    uint64_t v106 = v124;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v104, (uint64_t)v124, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v106, (uint64_t)v125, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v106, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v104, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined init with copy of Shape((uint64_t)v103, (uint64_t)v121);
    static CRKeyPath.unique.getter();
    _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    uint64_t v107 = v129;
    Capsule<>.init(_:id:)();
    uint64_t v108 = v130;
    uint64_t v109 = v131;
    uint64_t v110 = v128;
    (*(void (**)(char *, unsigned char *, uint64_t))(v130 + 16))(v128, v107, v131);
    LOBYTE(v101) = v137 == 50;
    objc_allocWithZone((Class)type metadata accessor for ShapeView());
    id v111 = v132;
    id v112 = v132;
    uint64_t v113 = specialized ShapeView.init(frame:canvasElement:canvas:parentCanvasElement:showsSignaturePopover:analytics_inputSource:analytics_documentType:)(v110, v111, v101, v115, (char)v135);

    (*(void (**)(unsigned char *, uint64_t))(v108 + 8))(v107, v109);
    outlined destroy of Shape((uint64_t)v103);
    v117(v140, v141);
    *((unsigned char *)v113 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDetectedFormField) = v136 & 1;
    *((unsigned char *)v113 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_startsNewAutofillContext) = v139 & 1;
    return;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_20C4C520C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C4C521C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v36 = MEMORY[0x263F8EE78];
  int64_t v8 = a4 >> 1;
  if (a4 >> 1 == a3) {
    return result;
  }
  uint64_t v9 = a3;
  uint64_t v10 = (uint64_t *)(a5 + OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields);
  uint64_t v33 = a5 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas;
  swift_unknownObjectRetain();
  swift_beginAccess();
  uint64_t v32 = v8;
  while (1)
  {
    if (v9 >= v8) {
      goto LABEL_44;
    }
    double v11 = *(void **)(a2 + 8 * v9);
    uint64_t v12 = *v10;
    CGFloat v13 = (void *)MEMORY[0x210550400](v33);
    id v14 = v13;
    if (v13)
    {
      uint64_t v15 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x2F8))();
      id v16 = v11;
      swift_bridgeObjectRetain();

      id v14 = objc_msgSend(v15, sel_effectiveUserInterfaceLayoutDirection);
      LOBYTE(v14) = v14 == 0;
      if (v12 < 0) {
        goto LABEL_37;
      }
    }
    else
    {
      id v17 = v11;
      swift_bridgeObjectRetain();
      if (v12 < 0) {
        goto LABEL_37;
      }
    }
    if ((v12 & 0x4000000000000000) == 0)
    {
      uint64_t v18 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
LABEL_37:
    unint64_t v31 = swift_bridgeObjectRetain();
    uint64_t v18 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v31);
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v35 = v18;
    specialized MutableCollection<>.sort(by:)(&v35, (char)v14);
    if (v6) {
      goto LABEL_46;
    }
    uint64_t v6 = 0;
    swift_bridgeObjectRelease();
    uint64_t v19 = v35;
    if (v35 < 0 || (v35 & 0x4000000000000000) != 0) {
      break;
    }
    uint64_t v20 = *(void *)(v35 + 16);
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_16;
    }
LABEL_3:

    swift_release_n();
LABEL_4:
    if (++v9 == v8)
    {
      swift_unknownObjectRelease();
      return v36;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  if (!v20) {
    goto LABEL_3;
  }
LABEL_16:
  if ((v19 & 0xC000000000000001) != 0) {
    id v21 = (id)MEMORY[0x21054E050](0, v19);
  }
  else {
    id v21 = *(id *)(v19 + 32);
  }
  char v22 = v21;
  type metadata accessor for AnyCanvasElementView();
  char v23 = static NSObject.== infix(_:_:)();

  if (v23)
  {
LABEL_19:
    swift_release_n();
    type metadata accessor for ShapeView();
    if (swift_dynamicCastClass())
    {
      MEMORY[0x21054D330]();
      uint64_t v6 = 0;
      int64_t v8 = v32;
      if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_4;
    }

    goto LABEL_36;
  }
  if (v20 == 1)
  {
LABEL_35:

    swift_release_n();
LABEL_36:
    uint64_t v6 = 0;
    int64_t v8 = v32;
    goto LABEL_4;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
    uint64_t v24 = 1;
    while (1)
    {
      MEMORY[0x21054E050](v24, v19);
      uint64_t v25 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        break;
      }
      char v26 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v26) {
        goto LABEL_19;
      }
      ++v24;
      if (v25 == v20) {
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v27 = 5;
  while (1)
  {
    uint64_t v28 = v27 - 3;
    if (__OFADD__(v27 - 4, 1)) {
      break;
    }
    id v29 = *(id *)(v19 + 8 * v27);
    char v30 = static NSObject.== infix(_:_:)();

    if (v30) {
      goto LABEL_19;
    }
    ++v27;
    if (v28 == v20) {
      goto LABEL_35;
    }
  }
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, void *a5, char a6)
{
  uint64_t v6 = __dst;
  int64_t v8 = a2;
  int64_t v10 = a2 - __src;
  int64_t v11 = (a2 - __src) / 40;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v91 = __src;
  uint64_t v90 = __dst;
  if (v11 >= v13)
  {
    if (v12 < -39) {
      goto LABEL_58;
    }
    if (__dst != a2 || &a2[40 * v13] <= __dst) {
      memmove(__dst, a2, 40 * v13);
    }
    uint64_t v47 = &v6[40 * v13];
    uint64_t v89 = v47;
    uint64_t v91 = v8;
    if (__src >= v8 || v12 < 40)
    {
LABEL_57:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v91, (const void **)&v90, &v89);
      return 1;
    }
    unint64_t v48 = a3 - 40;
    while (1)
    {
      outlined init with copy of AnyHashable((uint64_t)(v47 - 40), (uint64_t)v88);
      uint64_t v51 = v8 - 40;
      outlined init with copy of AnyHashable((uint64_t)(v8 - 40), (uint64_t)v87);
      uint64_t v52 = MEMORY[0x263F8DB68];
      uint64_t v86 = MEMORY[0x263F8DB68];
      v85[0] = swift_allocObject();
      outlined init with copy of AnyHashable((uint64_t)v88, v85[0] + 16);
      FormFillingView.frameForFormElement(element:)((uint64_t)v85);
      CGFloat v54 = v53;
      CGFloat v56 = v55;
      CGFloat v58 = v57;
      CGFloat v60 = v59;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      uint64_t v86 = v52;
      v85[0] = swift_allocObject();
      outlined init with copy of AnyHashable((uint64_t)v87, v85[0] + 16);
      FormFillingView.frameForFormElement(element:)((uint64_t)v85);
      CGFloat v62 = v61;
      CGFloat v64 = v63;
      CGFloat v66 = v65;
      CGFloat v68 = v67;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      rectCGFloat a = v54;
      v98.origin.CGFloat x = v54;
      CGFloat v69 = v56;
      v98.origin.CGFloat y = v56;
      CGFloat v70 = v58;
      v98.size.CGFloat width = v58;
      CGFloat v71 = v60;
      v98.size.CGFloat height = v60;
      double MinY = CGRectGetMinY(v98);
      v99.origin.CGFloat x = v62;
      v99.origin.CGFloat y = v64;
      v99.size.CGFloat width = v66;
      v99.size.CGFloat height = v68;
      if (MinY == CGRectGetMinY(v99))
      {
        v100.origin.CGFloat x = recta;
        v100.origin.CGFloat y = v69;
        v100.size.CGFloat width = v70;
        v100.size.CGFloat height = v71;
        double MinX = CGRectGetMinX(v100);
        v101.origin.CGFloat x = v62;
        v101.origin.CGFloat y = v64;
        v101.size.CGFloat width = v66;
        v101.size.CGFloat height = v68;
        double v74 = CGRectGetMinX(v101);
        if ((a6 & 1) == 0)
        {
          BOOL v75 = v74 < MinX;
          goto LABEL_45;
        }
      }
      else
      {
        v102.origin.CGFloat x = recta;
        v102.origin.CGFloat y = v69;
        v102.size.CGFloat width = v70;
        v102.size.CGFloat height = v71;
        double MinX = CGRectGetMinY(v102);
        v103.origin.CGFloat x = v62;
        v103.origin.CGFloat y = v64;
        v103.size.CGFloat width = v66;
        v103.size.CGFloat height = v68;
        double v74 = CGRectGetMinY(v103);
      }
      BOOL v75 = MinX < v74;
LABEL_45:
      int v76 = v75;
      char v77 = (char *)(v48 + 40);
      outlined destroy of AnyHashable((uint64_t)v87);
      outlined destroy of AnyHashable((uint64_t)v88);
      if (v76)
      {
        if (v77 != v8 || v48 >= (unint64_t)v8)
        {
          long long v49 = *(_OWORD *)v51;
          long long v50 = *(_OWORD *)(v8 - 24);
          *(void *)(v48 + 32) = *((void *)v8 - 1);
          *(_OWORD *)unint64_t v48 = v49;
          *(_OWORD *)(v48 + 16) = v50;
        }
        v91 -= 40;
        uint64_t v47 = v89;
        if (v89 <= v6) {
          goto LABEL_57;
        }
      }
      else
      {
        id v78 = v89;
        uint64_t v47 = v89 - 40;
        v89 -= 40;
        if (v77 < v78 || v48 >= (unint64_t)v78 || v77 != v78)
        {
          long long v79 = *(_OWORD *)v47;
          long long v80 = *(_OWORD *)(v78 - 24);
          *(void *)(v48 + 32) = *((void *)v78 - 1);
          *(_OWORD *)unint64_t v48 = v79;
          *(_OWORD *)(v48 + 16) = v80;
        }
        uint64_t v51 = v8;
        if (v47 <= v6) {
          goto LABEL_57;
        }
      }
      v48 -= 40;
      int64_t v8 = v51;
      if (v51 <= __src) {
        goto LABEL_57;
      }
    }
  }
  if (v10 >= -39)
  {
    if (__dst != __src || &__src[40 * v11] <= __dst) {
      memmove(__dst, __src, 40 * v11);
    }
    unint64_t v14 = (unint64_t)&v6[40 * v11];
    uint64_t v89 = (char *)v14;
    if ((unint64_t)v8 < a3 && v10 >= 40)
    {
      uint64_t v15 = MEMORY[0x263F8DB68];
      while (1)
      {
        outlined init with copy of AnyHashable((uint64_t)v8, (uint64_t)v88);
        outlined init with copy of AnyHashable((uint64_t)v6, (uint64_t)v87);
        uint64_t v86 = v15;
        v85[0] = swift_allocObject();
        outlined init with copy of AnyHashable((uint64_t)v88, v85[0] + 16);
        FormFillingView.frameForFormElement(element:)((uint64_t)v85);
        CGFloat v17 = v16;
        CGFloat v19 = v18;
        CGFloat v21 = v20;
        CGFloat v23 = v22;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
        uint64_t v86 = v15;
        v85[0] = swift_allocObject();
        outlined init with copy of AnyHashable((uint64_t)v87, v85[0] + 16);
        FormFillingView.frameForFormElement(element:)((uint64_t)v85);
        CGFloat v25 = v24;
        CGFloat v27 = v26;
        CGFloat v29 = v28;
        CGFloat v31 = v30;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
        CGFloat rect = v17;
        v92.origin.CGFloat x = v17;
        CGFloat v32 = v19;
        v92.origin.CGFloat y = v19;
        CGFloat v33 = v21;
        v92.size.CGFloat width = v21;
        CGFloat v34 = v23;
        v92.size.CGFloat height = v23;
        double v35 = CGRectGetMinY(v92);
        v93.origin.CGFloat x = v25;
        v93.origin.CGFloat y = v27;
        v93.size.CGFloat width = v29;
        v93.size.CGFloat height = v31;
        if (v35 != CGRectGetMinY(v93)) {
          break;
        }
        v94.origin.CGFloat x = rect;
        v94.origin.CGFloat y = v32;
        v94.size.CGFloat width = v33;
        v94.size.CGFloat height = v34;
        double v36 = CGRectGetMinX(v94);
        v95.origin.CGFloat x = v25;
        v95.origin.CGFloat y = v27;
        v95.size.CGFloat width = v29;
        v95.size.CGFloat height = v31;
        double v37 = CGRectGetMinX(v95);
        if (a6) {
          goto LABEL_13;
        }
        BOOL v38 = v37 < v36;
LABEL_14:
        int v39 = v38;
        outlined destroy of AnyHashable((uint64_t)v87);
        outlined destroy of AnyHashable((uint64_t)v88);
        uint64_t v40 = v91;
        if (v39)
        {
          unint64_t v41 = (unint64_t)(v8 + 40);
          if (v91 >= v8 && (unint64_t)v91 < v41 && v91 == v8)
          {
            uint64_t v40 = v8;
          }
          else
          {
            long long v42 = *(_OWORD *)v8;
            long long v43 = *((_OWORD *)v8 + 1);
            *((void *)v91 + 4) = *((void *)v8 + 4);
            _OWORD *v40 = v42;
            v40[1] = v43;
          }
        }
        else
        {
          uint64_t v44 = v90 + 40;
          if (v91 != v90 || v91 >= v44)
          {
            long long v45 = *(_OWORD *)v90;
            long long v46 = *((_OWORD *)v90 + 1);
            *((void *)v91 + 4) = *((void *)v90 + 4);
            _OWORD *v40 = v45;
            v40[1] = v46;
          }
          uint64_t v90 = v44;
          unint64_t v41 = (unint64_t)v8;
        }
        uint64_t v91 = (char *)v40 + 40;
        uint64_t v6 = v90;
        if ((unint64_t)v90 < v14)
        {
          int64_t v8 = (char *)v41;
          if (v41 < a3) {
            continue;
          }
        }
        goto LABEL_57;
      }
      v96.origin.CGFloat x = rect;
      v96.origin.CGFloat y = v32;
      v96.size.CGFloat width = v33;
      v96.size.CGFloat height = v34;
      double v36 = CGRectGetMinY(v96);
      v97.origin.CGFloat x = v25;
      v97.origin.CGFloat y = v27;
      v97.size.CGFloat width = v29;
      v97.size.CGFloat height = v31;
      double v37 = CGRectGetMinY(v97);
LABEL_13:
      BOOL v38 = v36 < v37;
      goto LABEL_14;
    }
    goto LABEL_57;
  }
LABEL_58:

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(char *result, char *a2, char *a3, void *a4, void *a5, char a6)
{
  id v85 = result;
  if (a3 == a2) {
    return result;
  }
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v8 = MEMORY[0x263F8DB68];
  uint64_t v9 = 40 * (void)a3;
  int64_t v10 = &unk_26C1582E8;
  int64_t v11 = &selRef_magicPaperViewControllerImageGenerationEvent_;
LABEL_5:
  uint64_t v12 = v85;
  uint64_t v86 = v9;
  uint64_t v88 = v7;
  while (1)
  {
    uint64_t v13 = *v6 + v9;
    outlined init with copy of AnyHashable(v13, (uint64_t)v96);
    outlined init with copy of AnyHashable(v13 - 40, (uint64_t)v95);
    uint64_t v94 = v8;
    v93[0] = swift_allocObject();
    outlined init with copy of AnyHashable((uint64_t)v96, v93[0] + 16);
    outlined init with copy of Any((uint64_t)v93, (uint64_t)v92);
    type metadata accessor for CanvasElementPDFAnnotation();
    if (!swift_dynamicCast()) {
      goto LABEL_12;
    }
    unint64_t v14 = v10;
    id v15 = v97;
    id v16 = [v97 v11[405]];
    if (!v16)
    {

      int64_t v10 = v14;
      uint64_t v6 = a4;
      uint64_t v7 = v88;
LABEL_12:
      outlined init with copy of Any((uint64_t)v93, (uint64_t)v92);
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCast())
      {
        id v29 = v97;
        objc_msgSend(v97, sel_frame);
        CGFloat v31 = v30;
        CGFloat v33 = v32;
        CGFloat v35 = v34;
        CGFloat v37 = v36;
      }
      else
      {
        CGFloat v35 = 0.0;
        CGFloat v37 = 0.0;
        CGFloat v31 = 0.0;
        CGFloat v33 = 0.0;
      }
      goto LABEL_17;
    }
    CGFloat v17 = v16;
    id v18 = [v15 v11[405]];
    if (v18)
    {
      CGFloat v19 = v18;
      uint64_t result = (char *)objc_msgSend(v18, sel_view);
      if (!result) {
        goto LABEL_41;
      }
      double v20 = result;
      objc_msgSend(v15, sel_bounds);
      objc_msgSend(v20, sel_convertRect_fromPage_, v19);
      double v22 = v21;
      double v24 = v23;
      double v26 = v25;
      double v28 = v27;

      uint64_t v8 = MEMORY[0x263F8DB68];
    }
    else
    {
      double v22 = 0.0;
      double v24 = 0.0;
      double v26 = 0.0;
      double v28 = 0.0;
    }
    id v38 = objc_msgSend(v17, sel_view);
    objc_msgSend(a5, sel_convertRect_fromView_, v38, v22, v24, v26, v28);
    CGFloat v31 = v39;
    CGFloat v33 = v40;
    CGFloat v35 = v41;
    CGFloat v37 = v42;

    int64_t v10 = v14;
    uint64_t v6 = a4;
    uint64_t v7 = v88;
    int64_t v11 = &selRef_magicPaperViewControllerImageGenerationEvent_;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
    uint64_t v94 = v8;
    v93[0] = swift_allocObject();
    outlined init with copy of AnyHashable((uint64_t)v95, v93[0] + 16);
    outlined init with copy of Any((uint64_t)v93, (uint64_t)v92);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_23;
    }
    long long v43 = v6;
    uint64_t v44 = v7;
    id v45 = v97;
    id v46 = [v97 v11[405]];
    if (!v46)
    {

      uint64_t v6 = v43;
      int64_t v10 = &unk_26C1582E8;
LABEL_23:
      outlined init with copy of Any((uint64_t)v93, (uint64_t)v92);
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCast())
      {
        id v59 = v97;
        objc_msgSend(v97, sel_frame);
        CGFloat v61 = v60;
        CGFloat v63 = v62;
        CGFloat rect = v64;
        CGFloat v66 = v65;
      }
      else
      {
        CGFloat rect = 0.0;
        CGFloat v66 = 0.0;
        CGFloat v61 = 0.0;
        CGFloat v63 = 0.0;
      }
      goto LABEL_28;
    }
    uint64_t v47 = v46;
    id v48 = [v45 v11[405]];
    if (v48)
    {
      long long v49 = v48;
      uint64_t result = (char *)objc_msgSend(v48, sel_view);
      if (!result) {
        goto LABEL_42;
      }
      long long v50 = result;
      objc_msgSend(v45, sel_bounds);
      objc_msgSend(v50, sel_convertRect_fromPage_, v49);
      double v52 = v51;
      double v54 = v53;
      double v56 = v55;
      double v58 = v57;

      uint64_t v8 = MEMORY[0x263F8DB68];
    }
    else
    {
      double v52 = 0.0;
      double v54 = 0.0;
      double v56 = 0.0;
      double v58 = 0.0;
    }
    id v67 = objc_msgSend(v47, sel_view);
    objc_msgSend(a5, sel_convertRect_fromView_, v67, v52, v54, v56, v58);
    CGFloat v61 = v68;
    CGFloat v63 = v69;
    CGFloat rect = v70;
    CGFloat v66 = v71;

    int64_t v11 = &selRef_magicPaperViewControllerImageGenerationEvent_;
    uint64_t v7 = v44;
    uint64_t v6 = v43;
    int64_t v10 = &unk_26C1582E8;
LABEL_28:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
    v98.origin.CGFloat x = v31;
    v98.origin.CGFloat y = v33;
    v98.size.CGFloat width = v35;
    v98.size.CGFloat height = v37;
    CGFloat v72 = v37;
    CGFloat v73 = v35;
    double MinY = CGRectGetMinY(v98);
    v99.origin.CGFloat x = v61;
    v99.origin.CGFloat y = v63;
    v99.size.CGFloat width = rect;
    v99.size.CGFloat height = v66;
    if (MinY == CGRectGetMinY(v99))
    {
      v100.origin.CGFloat x = v31;
      v100.origin.CGFloat y = v33;
      v100.size.CGFloat width = v73;
      v100.size.CGFloat height = v72;
      double MinX = CGRectGetMinX(v100);
      v101.origin.CGFloat x = v61;
      v101.origin.CGFloat y = v63;
      v101.size.CGFloat width = rect;
      v101.size.CGFloat height = v66;
      double v76 = CGRectGetMinX(v101);
      if ((a6 & 1) == 0)
      {
        BOOL v77 = v76 < MinX;
        goto LABEL_33;
      }
    }
    else
    {
      v102.origin.CGFloat x = v31;
      v102.origin.CGFloat y = v33;
      v102.size.CGFloat width = v73;
      v102.size.CGFloat height = v72;
      double MinX = CGRectGetMinY(v102);
      v103.origin.CGFloat x = v61;
      v103.origin.CGFloat y = v63;
      v103.size.CGFloat width = rect;
      v103.size.CGFloat height = v66;
      double v76 = CGRectGetMinY(v103);
    }
    BOOL v77 = MinX < v76;
LABEL_33:
    int v78 = v77;
    outlined destroy of AnyHashable((uint64_t)v95);
    uint64_t result = (char *)outlined destroy of AnyHashable((uint64_t)v96);
    if (!v78)
    {
LABEL_4:
      ++v7;
      uint64_t v9 = v86 + 40;
      if (v7 == a2) {
        return result;
      }
      goto LABEL_5;
    }
    if (!*v6) {
      break;
    }
    uint64_t v79 = *v6 + v9;
    uint64_t v80 = *(void *)(v79 + 32);
    long long v82 = *(_OWORD *)v79;
    long long v81 = *(_OWORD *)(v79 + 16);
    long long v83 = *(_OWORD *)(v79 - 24);
    *(_OWORD *)uint64_t v79 = *(_OWORD *)(v79 - 40);
    *(_OWORD *)(v79 + 16) = v83;
    *(void *)(v79 + 32) = *(void *)(v79 - 8);
    *(_OWORD *)(v79 - 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v82;
    *(_OWORD *)(v79 - 24) = v81;
    *(void *)(v79 - 8) = v80;
    v9 -= 40;
    if (v7 == ++v12) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(char **a1, void *a2, char a3)
{
  Swift::Int v4 = (Swift::Int)a1[1];
  uint64_t v5 = a2;
  Swift::Int v6 = _minimumMergeRunLength(_:)(v4);
  if (v6 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_202;
    }
    if (v4)
    {
      id v10 = (id)v5;
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, (char *)v4, (char *)1, a1, v10, a3 & 1);
    }
    else
    {
    }
    goto LABEL_180;
  }
  if (v4 >= 0) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_214;
  }
  v275 = (void *)v5;
  uint64_t v276 = v3;
  Swift::Int v260 = v6;
  if (v4 < 2)
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v259 = MEMORY[0x263F8EE78];
    if (v4 == 1) {
      goto LABEL_12;
    }
    unint64_t v16 = *(void *)(MEMORY[0x263F8EE78] + 16);
    id v15 = a1;
LABEL_167:
    if (v16 >= 2)
    {
      v249 = *v15;
      __srcCGFloat b = *v15;
      do
      {
        unint64_t v250 = v16 - 2;
        if (v16 < 2) {
          goto LABEL_197;
        }
        if (!v249) {
          goto LABEL_211;
        }
        v274 = v11;
        long long v251 = v11 + 32;
        uint64_t v5 = *(void *)&v11[16 * v250 + 32];
        uint64_t v252 = *(void *)&v11[16 * v16 + 24];
        long long v253 = &v249[40 * v5];
        long long v254 = &v249[40 * *(void *)&v251[16 * v16 - 16]];
        unint64_t v255 = (unint64_t)&v249[40 * v252];
        id v256 = v275;
        specialized _merge<A>(low:mid:high:buffer:by:)(v253, v254, v255, __dst, v256, a3 & 1);
        if (v276) {
          goto LABEL_179;
        }

        if (v252 < v5) {
          goto LABEL_198;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v274 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v274);
        }
        if (v250 >= *((void *)v274 + 2)) {
          goto LABEL_199;
        }
        v257 = &v274[16 * v250 + 32];
        *(void *)v257 = v5;
        *((void *)v257 + 1) = v252;
        unint64_t v258 = *((void *)v274 + 2);
        if (v16 > v258) {
          goto LABEL_200;
        }
        int64_t v11 = v274;
        memmove(&v274[16 * v16 + 16], &v274[16 * v16 + 32], 16 * (v258 - v16));
        *((void *)v274 + 2) = v258 - 1;
        unint64_t v16 = v258 - 1;
        v249 = __srcb;
      }
      while (v258 > 2);
    }
    swift_bridgeObjectRelease();
    *(void *)(v259 + 16) = 0;
    uint64_t v5 = (uint64_t)v275;

    swift_bridgeObjectRelease();
LABEL_180:

    return;
  }
  uint64_t v8 = v7 >> 1;
  uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v9 + 16) = v8;
  uint64_t v259 = v9;
  __dst = (char *)(v9 + 32);
LABEL_12:
  Swift::Int v12 = 0;
  int64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v13 = MEMORY[0x263F8DB68];
  unint64_t v14 = &selRef_magicPaperViewControllerImageGenerationEvent_;
  id v15 = a1;
LABEL_15:
  Swift::Int v17 = v12;
  Swift::Int v18 = v4;
  Swift::Int v19 = v12 + 1;
  Swift::Int rect_24 = v18;
  Swift::Int v265 = v12;
  if (v12 + 1 >= v18) {
    goto LABEL_71;
  }
  double v20 = *v15;
  Swift::Int v21 = v12;
  outlined init with copy of AnyHashable((uint64_t)&(*v15)[40 * v19], (uint64_t)v287);
  rect_16 = v20;
  outlined init with copy of AnyHashable((uint64_t)&v20[40 * v21], (uint64_t)v286);
  uint64_t v285 = v13;
  v284[0] = swift_allocObject();
  outlined init with copy of AnyHashable((uint64_t)v287, v284[0] + 16);
  FormFillingView.frameForFormElement(element:)((uint64_t)v284);
  CGFloat v23 = v22;
  CGFloat v25 = v24;
  CGFloat v27 = v26;
  CGFloat v29 = v28;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
  uint64_t v285 = v13;
  v284[0] = swift_allocObject();
  outlined init with copy of AnyHashable((uint64_t)v286, v284[0] + 16);
  FormFillingView.frameForFormElement(element:)((uint64_t)v284);
  CGFloat v31 = v30;
  CGFloat v33 = v32;
  CGFloat v35 = v34;
  CGFloat v37 = v36;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
  CGFloat rect = v23;
  v289.origin.CGFloat x = v23;
  CGFloat v38 = v25;
  v289.origin.CGFloat y = v25;
  CGFloat v39 = v27;
  v289.size.CGFloat width = v27;
  CGFloat v40 = v29;
  v289.size.CGFloat height = v29;
  double MinY = CGRectGetMinY(v289);
  v290.origin.CGFloat x = v31;
  v290.origin.CGFloat y = v33;
  v290.size.CGFloat width = v35;
  v290.size.CGFloat height = v37;
  if (MinY != CGRectGetMinY(v290))
  {
    v293.origin.CGFloat x = rect;
    v293.origin.CGFloat y = v38;
    v293.size.CGFloat width = v39;
    v293.size.CGFloat height = v40;
    double MinX = CGRectGetMinY(v293);
    v294.origin.CGFloat x = v31;
    v294.origin.CGFloat y = v33;
    v294.size.CGFloat width = v35;
    v294.size.CGFloat height = v37;
    double v43 = CGRectGetMinY(v294);
    goto LABEL_20;
  }
  v291.origin.CGFloat x = rect;
  v291.origin.CGFloat y = v38;
  v291.size.CGFloat width = v39;
  v291.size.CGFloat height = v40;
  double MinX = CGRectGetMinX(v291);
  v292.origin.CGFloat x = v31;
  v292.origin.CGFloat y = v33;
  v292.size.CGFloat width = v35;
  v292.size.CGFloat height = v37;
  double v43 = CGRectGetMinX(v292);
  if (a3)
  {
LABEL_20:
    BOOL v44 = MinX < v43;
    goto LABEL_21;
  }
  BOOL v44 = v43 < MinX;
LABEL_21:
  int v45 = v44;
  int v271 = v45;
  id v15 = a1;
  outlined destroy of AnyHashable((uint64_t)v286);
  outlined destroy of AnyHashable((uint64_t)v287);
  Swift::Int v17 = v265;
  Swift::Int v19 = v265 + 2;
  if (v265 + 2 >= rect_24) {
    goto LABEL_61;
  }
  Swift::Int v268 = v265 + 2;
  Swift::Int v19 = rect_24;
  uint64_t v46 = (uint64_t)&v20[40 * v265 + 40];
  while (1)
  {
    outlined init with copy of AnyHashable(v46 + 40, (uint64_t)v287);
    outlined init with copy of AnyHashable(v46, (uint64_t)v286);
    uint64_t v285 = v13;
    v284[0] = swift_allocObject();
    outlined init with copy of AnyHashable((uint64_t)v287, v284[0] + 16);
    outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
    type metadata accessor for CanvasElementPDFAnnotation();
    if (!swift_dynamicCast()) {
      goto LABEL_32;
    }
    uint64_t v47 = v14;
    id v48 = v288;
    id v49 = [v288 (SEL)v47 + 3608];
    if (!v49)
    {

      uint64_t v13 = MEMORY[0x263F8DB68];
      unint64_t v14 = v47;
LABEL_32:
      outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCast())
      {
        id v63 = v288;
        objc_msgSend(v288, sel_frame);
        CGFloat v65 = v64;
        CGFloat v67 = v66;
        CGFloat v69 = v68;
        CGFloat v71 = v70;
      }
      else
      {
        CGFloat v69 = 0.0;
        CGFloat v71 = 0.0;
        CGFloat v65 = 0.0;
        CGFloat v67 = 0.0;
      }
      goto LABEL_37;
    }
    long long v50 = v49;
    id v51 = [v48 (SEL)v47 + 3608];
    if (v51)
    {
      double v52 = v51;
      id v53 = objc_msgSend(v51, sel_view);
      if (!v53) {
        goto LABEL_212;
      }
      double v54 = v53;
      objc_msgSend(v48, sel_bounds);
      objc_msgSend(v54, sel_convertRect_fromPage_, v52);
      double v56 = v55;
      double v58 = v57;
      double v60 = v59;
      double v62 = v61;

      id v15 = a1;
    }
    else
    {
      double v56 = 0.0;
      double v58 = 0.0;
      double v60 = 0.0;
      double v62 = 0.0;
    }
    id v72 = objc_msgSend(v50, sel_view);
    objc_msgSend((id)v5, sel_convertRect_fromView_, v72, v56, v58, v60, v62);
    CGFloat v65 = v73;
    CGFloat v67 = v74;
    CGFloat v69 = v75;
    CGFloat v71 = v76;

    uint64_t v13 = MEMORY[0x263F8DB68];
    unint64_t v14 = &selRef_magicPaperViewControllerImageGenerationEvent_;
LABEL_37:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
    uint64_t v285 = v13;
    v284[0] = swift_allocObject();
    outlined init with copy of AnyHashable((uint64_t)v286, v284[0] + 16);
    outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_43;
    }
    id v77 = v288;
    id v78 = [v288 v14[405]];
    if (!v78)
    {

      uint64_t v13 = MEMORY[0x263F8DB68];
LABEL_43:
      outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCast())
      {
        id v92 = v288;
        objc_msgSend(v288, sel_frame);
        CGFloat v94 = v93;
        CGFloat v96 = v95;
        __srCGFloat c = v97;
        CGFloat v99 = v98;
      }
      else
      {
        __srCGFloat c = 0;
        CGFloat v99 = 0.0;
        CGFloat v94 = 0.0;
        CGFloat v96 = 0.0;
      }
      goto LABEL_48;
    }
    uint64_t v79 = v78;
    id v80 = [v77 v14[405]];
    if (v80)
    {
      long long v81 = v80;
      id v82 = objc_msgSend(v80, sel_view);
      if (!v82) {
        goto LABEL_213;
      }
      long long v83 = v82;
      objc_msgSend(v77, sel_bounds);
      objc_msgSend(v83, sel_convertRect_fromPage_, v81);
      double v85 = v84;
      double v87 = v86;
      double v89 = v88;
      double v91 = v90;

      id v15 = a1;
    }
    else
    {
      double v85 = 0.0;
      double v87 = 0.0;
      double v89 = 0.0;
      double v91 = 0.0;
    }
    id v100 = objc_msgSend(v79, sel_view);
    objc_msgSend((id)v5, sel_convertRect_fromView_, v100, v85, v87, v89, v91);
    CGFloat v94 = v101;
    CGFloat v96 = v102;
    __srCGFloat c = v103;
    CGFloat v99 = v104;

    uint64_t v13 = MEMORY[0x263F8DB68];
LABEL_48:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
    v295.origin.CGFloat x = v65;
    v295.origin.CGFloat y = v67;
    v295.size.CGFloat width = v69;
    v295.size.CGFloat height = v71;
    CGFloat v105 = v71;
    CGFloat v106 = v69;
    double v107 = CGRectGetMinY(v295);
    v296.origin.CGFloat x = v94;
    v296.origin.CGFloat y = v96;
    *(void *)&v296.size.CGFloat width = __src;
    v296.size.CGFloat height = v99;
    if (v107 == CGRectGetMinY(v296))
    {
      v297.origin.CGFloat x = v65;
      v297.origin.CGFloat y = v67;
      v297.size.CGFloat width = v106;
      v297.size.CGFloat height = v105;
      double v108 = CGRectGetMinX(v297);
      v298.origin.CGFloat x = v94;
      v298.origin.CGFloat y = v96;
      *(void *)&v298.size.CGFloat width = __src;
      v298.size.CGFloat height = v99;
      double v109 = CGRectGetMinX(v298);
      if ((a3 & 1) == 0)
      {
        BOOL v110 = v109 < v108;
        goto LABEL_53;
      }
    }
    else
    {
      v299.origin.CGFloat x = v65;
      v299.origin.CGFloat y = v67;
      v299.size.CGFloat width = v106;
      v299.size.CGFloat height = v105;
      double v108 = CGRectGetMinY(v299);
      v300.origin.CGFloat x = v94;
      v300.origin.CGFloat y = v96;
      *(void *)&v300.size.CGFloat width = __src;
      v300.size.CGFloat height = v99;
      double v109 = CGRectGetMinY(v300);
    }
    BOOL v110 = v108 < v109;
LABEL_53:
    int v111 = v110;
    outlined destroy of AnyHashable((uint64_t)v286);
    outlined destroy of AnyHashable((uint64_t)v287);
    if (v271 != v111) {
      break;
    }
    v46 += 40;
    if (rect_24 == ++v268) {
      goto LABEL_60;
    }
  }
  Swift::Int v19 = v268;
LABEL_60:
  Swift::Int v17 = v265;
LABEL_61:
  if (v271)
  {
    if (v19 < v17) {
      goto LABEL_203;
    }
    if (v17 < v19)
    {
      uint64_t v112 = (uint64_t)&rect_16[40 * v19 - 40];
      uint64_t v113 = &rect_16[40 * v17];
      Swift::Int v114 = v19;
      do
      {
        if (v17 != --v114)
        {
          if (!rect_16) {
            goto LABEL_210;
          }
          long long v115 = *(_OWORD *)v113;
          long long v116 = *((_OWORD *)v113 + 1);
          uint64_t v117 = *((void *)v113 + 4);
          uint64_t v118 = *(void *)(v112 + 32);
          long long v119 = *(_OWORD *)(v112 + 16);
          *(_OWORD *)uint64_t v113 = *(_OWORD *)v112;
          *((_OWORD *)v113 + 1) = v119;
          *((void *)v113 + 4) = v118;
          *(void *)(v112 + 32) = v117;
          *(_OWORD *)uint64_t v112 = v115;
          *(_OWORD *)(v112 + 16) = v116;
        }
        ++v17;
        v112 -= 40;
        v113 += 40;
      }
      while (v17 < v114);
      Swift::Int v17 = v265;
    }
  }
LABEL_71:
  if (v19 >= rect_24) {
    goto LABEL_117;
  }
  if (__OFSUB__(v19, v17)) {
    goto LABEL_201;
  }
  if (v19 - v17 >= v260) {
    goto LABEL_117;
  }
  if (__OFADD__(v17, v260)) {
    goto LABEL_204;
  }
  Swift::Int v120 = rect_24;
  if (v17 + v260 < rect_24) {
    Swift::Int v120 = v17 + v260;
  }
  if (v120 >= v17)
  {
    if (v19 == v120) {
      goto LABEL_117;
    }
    v272 = v11;
    uint64_t v121 = 40 * v19;
    rect_24CGFloat a = v120;
LABEL_81:
    Swift::Int v122 = v17;
    uint64_t v269 = v121;
    while (2)
    {
      uint64_t v123 = (uint64_t)&(*v15)[v121];
      outlined init with copy of AnyHashable(v123, (uint64_t)v287);
      outlined init with copy of AnyHashable(v123 - 40, (uint64_t)v286);
      uint64_t v285 = v13;
      v284[0] = swift_allocObject();
      outlined init with copy of AnyHashable((uint64_t)v287, v284[0] + 16);
      outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
      type metadata accessor for CanvasElementPDFAnnotation();
      if (swift_dynamicCast())
      {
        id v124 = v288;
        id v125 = objc_msgSend(v288, sel_page);
        if (v125)
        {
          uint64_t v126 = v125;
          id v127 = objc_msgSend(v124, sel_page);
          if (v127)
          {
            uint64_t v128 = v127;
            id v129 = objc_msgSend(v127, sel_view);
            if (!v129) {
              goto LABEL_208;
            }
            uint64_t v130 = v129;
            objc_msgSend(v124, sel_bounds);
            objc_msgSend(v130, sel_convertRect_fromPage_, v128);
            double v132 = v131;
            double v134 = v133;
            double v136 = v135;
            double v138 = v137;

            id v15 = a1;
          }
          else
          {
            double v132 = 0.0;
            double v134 = 0.0;
            double v136 = 0.0;
            double v138 = 0.0;
          }
          id v148 = objc_msgSend(v126, sel_view);
          objc_msgSend((id)v5, sel_convertRect_fromView_, v148, v132, v134, v136, v138);
          CGFloat v141 = v149;
          CGFloat v143 = v150;
          CGFloat v145 = v151;
          CGFloat v147 = v152;

          uint64_t v13 = MEMORY[0x263F8DB68];
LABEL_93:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
          uint64_t v285 = v13;
          v284[0] = swift_allocObject();
          outlined init with copy of AnyHashable((uint64_t)v286, v284[0] + 16);
          outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
          if (swift_dynamicCast())
          {
            id v153 = v288;
            id v154 = objc_msgSend(v288, sel_page);
            if (v154)
            {
              uint64_t v155 = v154;
              id v156 = objc_msgSend(v153, sel_page);
              if (v156)
              {
                id v157 = v156;
                id v158 = objc_msgSend(v156, sel_view);
                if (!v158) {
                  goto LABEL_207;
                }
                uint64_t v159 = v158;
                objc_msgSend(v153, sel_bounds);
                objc_msgSend(v159, sel_convertRect_fromPage_, v157);
                double v161 = v160;
                double v163 = v162;
                double v165 = v164;
                double v167 = v166;

                id v15 = a1;
              }
              else
              {
                double v161 = 0.0;
                double v163 = 0.0;
                double v165 = 0.0;
                double v167 = 0.0;
              }
              id v176 = objc_msgSend(v155, sel_view);
              objc_msgSend((id)v5, sel_convertRect_fromView_, v176, v161, v163, v165, v167);
              CGFloat v170 = v177;
              CGFloat v172 = v178;
              __srcCGFloat a = v179;
              CGFloat v175 = v180;

LABEL_104:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
              v301.origin.CGFloat x = v141;
              v301.origin.CGFloat y = v143;
              v301.size.CGFloat width = v145;
              v301.size.CGFloat height = v147;
              CGFloat v181 = v147;
              CGFloat v182 = v145;
              double v183 = CGRectGetMinY(v301);
              v302.origin.CGFloat x = v170;
              v302.origin.CGFloat y = v172;
              *(void *)&v302.size.CGFloat width = __srca;
              v302.size.CGFloat height = v175;
              if (v183 != CGRectGetMinY(v302))
              {
                v305.origin.CGFloat x = v141;
                v305.origin.CGFloat y = v143;
                v305.size.CGFloat width = v182;
                v305.size.CGFloat height = v181;
                double v184 = CGRectGetMinY(v305);
                v306.origin.CGFloat x = v170;
                v306.origin.CGFloat y = v172;
                *(void *)&v306.size.CGFloat width = __srca;
                v306.size.CGFloat height = v175;
                double v185 = CGRectGetMinY(v306);
LABEL_108:
                BOOL v186 = v184 < v185;
                goto LABEL_109;
              }
              v303.origin.CGFloat x = v141;
              v303.origin.CGFloat y = v143;
              v303.size.CGFloat width = v182;
              v303.size.CGFloat height = v181;
              double v184 = CGRectGetMinX(v303);
              v304.origin.CGFloat x = v170;
              v304.origin.CGFloat y = v172;
              *(void *)&v304.size.CGFloat width = __srca;
              v304.size.CGFloat height = v175;
              double v185 = CGRectGetMinX(v304);
              if (a3) {
                goto LABEL_108;
              }
              BOOL v186 = v185 < v184;
LABEL_109:
              int v187 = v186;
              outlined destroy of AnyHashable((uint64_t)v286);
              outlined destroy of AnyHashable((uint64_t)v287);
              if (v187)
              {
                if (!*v15) {
                  goto LABEL_206;
                }
                uint64_t v188 = (uint64_t)&(*v15)[v121];
                uint64_t v189 = *(void *)(v188 + 32);
                long long v191 = *(_OWORD *)v188;
                long long v190 = *(_OWORD *)(v188 + 16);
                long long v192 = *(_OWORD *)(v188 - 24);
                *(_OWORD *)uint64_t v188 = *(_OWORD *)(v188 - 40);
                *(_OWORD *)(v188 + 16) = v192;
                *(void *)(v188 + 32) = *(void *)(v188 - 8);
                *(_OWORD *)(v188 - 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v191;
                *(_OWORD *)(v188 - 24) = v190;
                *(void *)(v188 - 8) = v189;
                v121 -= 40;
                if (v19 != ++v122) {
                  continue;
                }
              }
              ++v19;
              uint64_t v121 = v269 + 40;
              Swift::Int v17 = v265;
              if (v19 != rect_24a) {
                goto LABEL_81;
              }
              Swift::Int v19 = rect_24a;
              int64_t v11 = v272;
              unint64_t v14 = &selRef_magicPaperViewControllerImageGenerationEvent_;
LABEL_117:
              if (v19 < v17) {
                goto LABEL_196;
              }
              Swift::Int v270 = v19;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
              }
              unint64_t v194 = *((void *)v11 + 2);
              unint64_t v193 = *((void *)v11 + 3);
              unint64_t v16 = v194 + 1;
              Swift::Int v195 = v265;
              if (v194 >= v193 >> 1)
              {
                long long v248 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v193 > 1), v194 + 1, 1, v11);
                Swift::Int v195 = v265;
                int64_t v11 = v248;
              }
              *((void *)v11 + 2) = v16;
              uint64_t v196 = v11 + 32;
              id v197 = &v11[16 * v194 + 32];
              *(void *)id v197 = v195;
              *((void *)v197 + 1) = v270;
              if (!v194)
              {
                unint64_t v16 = 1;
LABEL_14:
                Swift::Int v4 = (Swift::Int)v15[1];
                Swift::Int v12 = v270;
                if (v270 >= v4) {
                  goto LABEL_167;
                }
                goto LABEL_15;
              }
              v273 = v11;
              v266 = v11 + 32;
              while (2)
              {
                unint64_t v198 = v16 - 1;
                if (v16 >= 4)
                {
                  uint64_t v203 = &v196[16 * v16];
                  uint64_t v204 = *((void *)v203 - 8);
                  uint64_t v205 = *((void *)v203 - 7);
                  BOOL v209 = __OFSUB__(v205, v204);
                  uint64_t v206 = v205 - v204;
                  if (v209) {
                    goto LABEL_185;
                  }
                  uint64_t v208 = *((void *)v203 - 6);
                  uint64_t v207 = *((void *)v203 - 5);
                  BOOL v209 = __OFSUB__(v207, v208);
                  uint64_t v201 = v207 - v208;
                  char v202 = v209;
                  if (v209) {
                    goto LABEL_186;
                  }
                  unint64_t v210 = v16 - 2;
                  uint64_t v211 = &v196[16 * v16 - 32];
                  uint64_t v213 = *(void *)v211;
                  uint64_t v212 = *((void *)v211 + 1);
                  BOOL v209 = __OFSUB__(v212, v213);
                  uint64_t v214 = v212 - v213;
                  if (v209) {
                    goto LABEL_188;
                  }
                  BOOL v209 = __OFADD__(v201, v214);
                  uint64_t v215 = v201 + v214;
                  if (v209) {
                    goto LABEL_191;
                  }
                  if (v215 >= v206)
                  {
                    v233 = &v196[16 * v198];
                    uint64_t v235 = *(void *)v233;
                    uint64_t v234 = *((void *)v233 + 1);
                    BOOL v209 = __OFSUB__(v234, v235);
                    uint64_t v236 = v234 - v235;
                    if (v209) {
                      goto LABEL_195;
                    }
                    BOOL v226 = v201 < v236;
                  }
                  else
                  {
LABEL_137:
                    if (v202) {
                      goto LABEL_187;
                    }
                    unint64_t v210 = v16 - 2;
                    CGPoint v216 = &v196[16 * v16 - 32];
                    uint64_t v218 = *(void *)v216;
                    uint64_t v217 = *((void *)v216 + 1);
                    BOOL v219 = __OFSUB__(v217, v218);
                    uint64_t v220 = v217 - v218;
                    char v221 = v219;
                    if (v219) {
                      goto LABEL_190;
                    }
                    int64_t v222 = &v196[16 * v198];
                    uint64_t v224 = *(void *)v222;
                    uint64_t v223 = *((void *)v222 + 1);
                    BOOL v209 = __OFSUB__(v223, v224);
                    uint64_t v225 = v223 - v224;
                    if (v209) {
                      goto LABEL_193;
                    }
                    if (__OFADD__(v220, v225)) {
                      goto LABEL_194;
                    }
                    if (v220 + v225 < v201) {
                      goto LABEL_149;
                    }
                    BOOL v226 = v201 < v225;
                  }
                  if (v226) {
                    unint64_t v198 = v210;
                  }
                }
                else
                {
                  if (v16 == 3)
                  {
                    uint64_t v200 = *((void *)v11 + 4);
                    uint64_t v199 = *((void *)v11 + 5);
                    BOOL v209 = __OFSUB__(v199, v200);
                    uint64_t v201 = v199 - v200;
                    char v202 = v209;
                    goto LABEL_137;
                  }
                  uint64_t v227 = *((void *)v11 + 4);
                  uint64_t v228 = *((void *)v11 + 5);
                  BOOL v209 = __OFSUB__(v228, v227);
                  uint64_t v220 = v228 - v227;
                  char v221 = v209;
LABEL_149:
                  if (v221) {
                    goto LABEL_189;
                  }
                  uint64_t v229 = &v196[16 * v198];
                  uint64_t v231 = *(void *)v229;
                  uint64_t v230 = *((void *)v229 + 1);
                  BOOL v209 = __OFSUB__(v230, v231);
                  uint64_t v232 = v230 - v231;
                  if (v209) {
                    goto LABEL_192;
                  }
                  if (v232 < v220) {
                    goto LABEL_14;
                  }
                }
                uint64_t v5 = v198 - 1;
                if (v198 - 1 >= v16)
                {
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
LABEL_185:
                  __break(1u);
LABEL_186:
                  __break(1u);
LABEL_187:
                  __break(1u);
LABEL_188:
                  __break(1u);
LABEL_189:
                  __break(1u);
LABEL_190:
                  __break(1u);
LABEL_191:
                  __break(1u);
LABEL_192:
                  __break(1u);
LABEL_193:
                  __break(1u);
LABEL_194:
                  __break(1u);
LABEL_195:
                  __break(1u);
LABEL_196:
                  __break(1u);
LABEL_197:
                  __break(1u);
LABEL_198:
                  __break(1u);
LABEL_199:
                  __break(1u);
LABEL_200:
                  __break(1u);
LABEL_201:
                  __break(1u);
LABEL_202:
                  __break(1u);
LABEL_203:
                  __break(1u);
LABEL_204:
                  __break(1u);
                  goto LABEL_205;
                }
                unint64_t v237 = *v15;
                if (!*v15) {
                  goto LABEL_209;
                }
                v238 = v196;
                v239 = &v196[16 * v5];
                uint64_t v240 = *(void *)v239;
                unint64_t v241 = v198;
                unint64_t v242 = &v238[16 * v198];
                uint64_t v243 = *((void *)v242 + 1);
                __srcCGFloat c = &v237[40 * *(void *)v239];
                uint64_t v244 = &v237[40 * *(void *)v242];
                unint64_t v245 = (unint64_t)&v237[40 * v243];
                id v246 = v275;
                specialized _merge<A>(low:mid:high:buffer:by:)(__srcc, v244, v245, __dst, v246, a3 & 1);
                if (v276)
                {
LABEL_179:
                  swift_bridgeObjectRelease();
                  uint64_t v5 = (uint64_t)v275;

                  *(void *)(v259 + 16) = 0;
                  swift_bridgeObjectRelease();
                  goto LABEL_180;
                }

                uint64_t v13 = MEMORY[0x263F8DB68];
                if (v243 < v240) {
                  goto LABEL_182;
                }
                if (v241 > *((void *)v273 + 2)) {
                  goto LABEL_183;
                }
                *(void *)v239 = v240;
                uint64_t v196 = v266;
                *(void *)&v266[16 * v5 + 8] = v243;
                unint64_t v247 = *((void *)v273 + 2);
                if (v241 >= v247) {
                  goto LABEL_184;
                }
                int64_t v11 = v273;
                uint64_t v276 = 0;
                unint64_t v16 = v247 - 1;
                memmove(v242, v242 + 16, 16 * (v247 - 1 - v241));
                *((void *)v273 + 2) = v247 - 1;
                uint64_t v5 = (uint64_t)v275;
                id v15 = a1;
                unint64_t v14 = &selRef_magicPaperViewControllerImageGenerationEvent_;
                if (v247 <= 2) {
                  goto LABEL_14;
                }
                continue;
              }
            }
          }
          outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
          type metadata accessor for AnyCanvasElementView();
          if (swift_dynamicCast())
          {
            id v168 = v288;
            objc_msgSend(v288, sel_frame);
            CGFloat v170 = v169;
            CGFloat v172 = v171;
            __srcCGFloat a = v173;
            CGFloat v175 = v174;
          }
          else
          {
            __srcCGFloat a = 0;
            CGFloat v175 = 0.0;
            CGFloat v170 = 0.0;
            CGFloat v172 = 0.0;
          }
          goto LABEL_104;
        }

        uint64_t v13 = MEMORY[0x263F8DB68];
      }
      break;
    }
    outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
    type metadata accessor for AnyCanvasElementView();
    if (swift_dynamicCast())
    {
      id v139 = v288;
      objc_msgSend(v288, sel_frame);
      CGFloat v141 = v140;
      CGFloat v143 = v142;
      CGFloat v145 = v144;
      CGFloat v147 = v146;
    }
    else
    {
      CGFloat v145 = 0.0;
      CGFloat v147 = 0.0;
      CGFloat v141 = 0.0;
      CGFloat v143 = 0.0;
    }
    goto LABEL_93;
  }
LABEL_205:
  __break(1u);
LABEL_206:

  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:

  __break(1u);
LABEL_210:

  __break(1u);
LABEL_211:

  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1, void *a2, char a3)
{
  uint64_t v5 = *a1;
  id v6 = a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  }
  uint64_t v7 = *(char **)(v5 + 16);
  v9[0] = (char *)(v5 + 32);
  v9[1] = v7;
  id v8 = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v9, v8, a3 & 1);

  *a1 = v5;
}

void specialized FormFillingView.init(coder:)()
{
  uint64_t v1 = v0;
  swift_unknownObjectWeakInit();
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields] = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_formFieldGroups] = v2;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets] = v2;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_doubleTapGesture] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_editMenuInteraction] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcFormRegions] = v2;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis] = 0;
  id v3 = objc_msgSend(self, sel_preferredInsertionOrder);
  type metadata accessor for AFTextContentType(0);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = 0;
    uint64_t v7 = v2;
    do
    {
      id v8 = *(id *)(v4 + 8 * v6 + 32);
      FormContentType.init(_:)((__C::AFTextContentType)v8);
      id v9 = (id)specialized FormContentType.uiTextContentType.getter();

      unint64_t v11 = *(void *)(v7 + 16);
      unint64_t v10 = *(void *)(v7 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      ++v6;
      *(void *)(v7 + 16) = v11 + 1;
      *(void *)(v7 + 8 * v11 + 32) = v9;
    }
    while (v5 != v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit15FormFillingView_preferredTextContentTypes] = v7;
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  type metadata accessor for FormPageAnalytics();
  swift_allocObject();
  *(void *)&v1[v12] = FormPageAnalytics.init()();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit15FormFillingView_signatureFieldsSigned] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t specialized BidirectionalCollection.suffix(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v4) {
    uint64_t result = 15;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_12;
  }
  return String.subscript.getter();
}

uint64_t sub_20C4C790C()
{
  return 24;
}

__n128 sub_20C4C7918(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C4C7934()
{
  return 24;
}

__n128 sub_20C4C7940(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t outlined assign with take of FormAutofillDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FormAutofillDelegate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C4C79C4()
{
  return 24;
}

__n128 sub_20C4C79D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(uint64_t a1)
{
  return specialized closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(a1, *(void *)(v1 + 16));
}

PaperKit::FormContentType_optional sub_20C4C7A00@<W0>(unsigned char *a1@<X8>)
{
  result.value = Shape.textContentType.getter(&v3).value;
  *a1 = v3;
  return result;
}

uint64_t sub_20C4C7A3C(unsigned __int8 *a1)
{
  uint64_t v2 = *a1;
  char v3 = 0;
  type metadata accessor for Shape();
  return ShapeSecondaryProperties.textContentType.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type AnyHashable? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyHashable?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?);
  }
  return result;
}

uint64_t sub_20C4C7AF4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #1 in FormFillingView.focusNextField(from:direction:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_addControl);
}

uint64_t _sSo21NSAttributedStringKeyaABSHSCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C4C7B84()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return MEMORY[0x270FA0238](v0, 56, 7);
}

UIMenu specialized FormFillingView.editMenuInteraction(_:menuFor:suggestedActions:)()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  swift__string._object = (void *)0x800000020C857AA0;
  v0._uint64_t countAndFlagsBits = 0x41207463656C6553;
  v0._object = (void *)0xEA00000000006C6CLL;
  v1.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v1.value._object = (void *)0xEB00000000656C62;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  swift__string._uint64_t countAndFlagsBits = 0xD000000000000016;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v0, v1, paperKitBundle, v2, swift__string);
  MEMORY[0x21054D080](0xD000000000000018, 0x800000020C857AC0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_20C835790;
  *(void *)(v4 + 32) = v3;
  UIMenuElementSize preferredElementSize = v4;
  specialized Array._endMutation()();
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v8.value.super.Class isa = 0;
  v8.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v5, (Swift::String_optional)0, v8, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0);
}

uint64_t sub_20C4C7DB8()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in FormFillingView.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  closure #1 in FormFillingView.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1);
}

char *SignatureStrokeWidthControl.strokeWidthPreview.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl____lazy_storage___strokeWidthPreview;
  Swift::String v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl____lazy_storage___strokeWidthPreview);
  if (v2)
  {
    uint64_t v3 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl____lazy_storage___strokeWidthPreview);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_width);
    id v6 = objc_allocWithZone((Class)type metadata accessor for SignatureStrokeWidthPreview());
    uint64_t v7 = SignatureStrokeWidthPreview.init(width:)(v5);
    UIImage_optional v8 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v7;
    uint64_t v3 = v7;

    Swift::String v2 = 0;
  }
  id v9 = v2;
  return v3;
}

char *SignatureStrokeWidthControl.init(isHorizontal:width:unit:)(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_valueLabel;
  id v11 = objc_allocWithZone(MEMORY[0x263F828E0]);
  uint64_t v12 = v4;
  *(void *)&v4[v10] = objc_msgSend(v11, sel_init);
  *(void *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl____lazy_storage___strokeWidthPreview] = 0;
  *(void *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewLargeWidth] = 0x4057800000000000;
  *(void *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewShortWidth] = 0x4036000000000000;
  *(void *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton] = 0;
  *(void *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_width] = a2;
  uint64_t v13 = (uint64_t *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_unit];
  *uint64_t v13 = a3;
  v13[1] = (uint64_t)a4;
  swift_bridgeObjectRetain();

  v95.receiver = v12;
  v95.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v95, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v15 = objc_allocWithZone(MEMORY[0x263F82E00]);
  unint64_t v16 = (char *)v14;
  id v17 = objc_msgSend(v15, sel_init);
  objc_msgSend(v17, sel_setUserInteractionEnabled_, 0);
  objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  Swift::Int v18 = *(void **)&v16[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton];
  if (v18)
  {
    Swift::Int v19 = *(char **)&v16[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton];
  }
  else
  {
    Swift::Int v19 = v16;
    Swift::Int v18 = 0;
  }
  id v20 = v18;
  objc_msgSend(v19, sel_addSubview_, v17);

  if (a1) {
    double v21 = 18.0;
  }
  else {
    double v21 = 12.0;
  }
  if (a1) {
    double v22 = 20.0;
  }
  else {
    double v22 = 15.0;
  }
  CGFloat v23 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_20C8344C0;
  id v25 = objc_msgSend(v17, sel_topAnchor);
  char v91 = a1;
  id v26 = objc_msgSend(v16, sel_topAnchor);
  id v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_constant_, v26, 0.0);

  *(void *)(v24 + 32) = v27;
  id v28 = objc_msgSend(v17, sel_leadingAnchor);
  id v29 = objc_msgSend(v16, sel_leadingAnchor);
  id v30 = objc_msgSend(v28, sel_constraintEqualToAnchor_constant_, v29, v21);

  *(void *)(v24 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v30;
  id v31 = objc_msgSend(v17, sel_bottomAnchor);
  id v32 = objc_msgSend(v16, sel_bottomAnchor);
  id v33 = objc_msgSend(v31, sel_constraintEqualToAnchor_constant_, v32, -0.0);

  *(void *)(v24 + 48) = v33;
  id v34 = objc_msgSend(v17, sel_trailingAnchor);
  id v35 = objc_msgSend(v16, sel_trailingAnchor);
  id v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_constant_, v35, -v22);

  *(void *)(v24 + 56) = v36;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v92 = v23;
  objc_msgSend(v23, sel_activateConstraints_, isa);

  uint64_t v38 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_valueLabel;
  id v39 = *(id *)&v16[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_valueLabel];
  uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v94 = v40;
  v41._uint64_t countAndFlagsBits = 32;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  v42._uint64_t countAndFlagsBits = a3;
  v42._object = a4;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  double v43 = (void *)MEMORY[0x21054D080](v93, v94);
  swift_bridgeObjectRelease();
  objc_msgSend(v39, sel_setText_, v43);

  BOOL v44 = *(void **)&v16[v38];
  uint64_t v45 = *MEMORY[0x263F835F0];
  double v46 = *MEMORY[0x263F81840];
  uint64_t v47 = (void *)*MEMORY[0x263F83470];
  id v48 = self;
  id v49 = v44;
  id v50 = v47;
  id v51 = objc_msgSend(v48, sel_traitCollectionWithPreferredContentSizeCategory_, v50);
  uint64_t result = (char *)objc_msgSend(self, sel__preferredFontForTextStyle_weight_, v45, v46);
  if (result)
  {
    id v53 = result;
    id v54 = objc_msgSend(result, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v51);

    objc_msgSend(v49, sel_setFont_, v54);
    double v55 = *(void **)&v16[v38];
    objc_msgSend(v55, sel_setNumberOfLines_, 1);
    objc_msgSend(v55, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v17, sel_addSubview_, v55);
    double v56 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    objc_msgSend(v56, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

    double v57 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    objc_msgSend(v17, sel_addSubview_, v57);

    uint64_t v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_20C832BD0;
    id v59 = objc_msgSend(*(id *)&v16[v38], sel_topAnchor);
    id v60 = objc_msgSend(v17, sel_topAnchor);
    id v61 = objc_msgSend(v59, sel_constraintEqualToAnchor_, v60);

    *(void *)(v58 + 32) = v61;
    id v62 = objc_msgSend(*(id *)&v16[v38], sel_leadingAnchor);
    id v63 = objc_msgSend(v17, sel_leadingAnchor);
    id v64 = objc_msgSend(v62, (SEL)&off_2640D62E8 + 6, v63);

    *(void *)(v58 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v64;
    id v65 = objc_msgSend(*(id *)&v16[v38], sel_bottomAnchor);
    id v66 = objc_msgSend(v17, sel_bottomAnchor);
    id v67 = objc_msgSend(v65, (SEL)&off_2640D62E8 + 6, v66);

    *(void *)(v58 + 48) = v67;
    id v68 = objc_msgSend(*(id *)&v16[v38], sel_trailingAnchor);
    CGFloat v69 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    id v70 = objc_msgSend(v69, sel_leadingAnchor);

    double v71 = 6.0;
    if (v91)
    {
      double v71 = 10.0;
      id v72 = &OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewLargeWidth;
    }
    else
    {
      id v72 = &OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewShortWidth;
    }
    id v73 = objc_msgSend(v68, sel_constraintLessThanOrEqualToAnchor_constant_, v70, v71);

    *(void *)(v58 + 56) = v73;
    double v74 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    id v75 = objc_msgSend(v74, sel_topAnchor);

    id v76 = objc_msgSend(v17, sel_topAnchor);
    id v77 = objc_msgSend(v75, sel_constraintEqualToAnchor_, v76);

    *(void *)(v58 + 64) = v77;
    id v78 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    id v79 = objc_msgSend(v78, sel_bottomAnchor);

    id v80 = objc_msgSend(v17, sel_bottomAnchor);
    id v81 = objc_msgSend(v79, sel_constraintEqualToAnchor_, v80);

    *(void *)(v58 + 72) = v81;
    id v82 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    id v83 = objc_msgSend(v82, sel_trailingAnchor);

    id v84 = objc_msgSend(v17, sel_trailingAnchor);
    id v85 = objc_msgSend(v83, sel_constraintEqualToAnchor_, v84);

    *(void *)(v58 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v85;
    double v86 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    id v87 = objc_msgSend(v86, sel_widthAnchor);

    id v88 = objc_msgSend(v87, sel_constraintEqualToConstant_, *(double *)&v16[*v72]);
    *(void *)(v58 + 88) = v88;
    specialized Array._endMutation()();
    Class v89 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v92, sel_activateConstraints_, v89);

    id v90 = objc_msgSend(v16, sel_layer);
    objc_msgSend(v90, sel_setCornerCurve_, *MEMORY[0x263F15A20]);

    SignatureStrokeWidthControl.updateUI()();
    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void SignatureStrokeWidthControl.updateUI()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  Swift::String v2 = ObjectType;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton];
  if (v3)
  {
    v25.receiver = v0;
    v25.super_class = ObjectType;
    id v4 = v3;
    objc_msgSend(v4, sel_setEnabled_, objc_msgSendSuper2(&v25, sel_isEnabled));
  }
  v24.receiver = v0;
  v24.super_class = v2;
  if (objc_msgSendSuper2(&v24, sel_isEnabled))
  {
    v17.receiver = v0;
    v17.super_class = v2;
    uint64_t v5 = &selRef_systemBlueColor;
    if ((objc_msgSendSuper2(&v17, sel_isSelected) & 1) == 0)
    {
      v16.receiver = v0;
      v16.super_class = v2;
      if (!objc_msgSendSuper2(&v16, sel_isHighlighted)) {
        uint64_t v5 = &selRef_tertiarySystemFillColor;
      }
    }
  }
  else
  {
    uint64_t v5 = &selRef_quaternarySystemFillColor;
  }
  id v6 = [self *v5];
  objc_msgSend(v0, sel_setBackgroundColor_, v6);

  uint64_t v7 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_valueLabel];
  v23.receiver = v0;
  v23.super_class = v2;
  if (objc_msgSendSuper2(&v23, sel_isEnabled))
  {
    v19.receiver = v0;
    v19.super_class = v2;
    UIImage_optional v8 = &selRef_systemBackgroundColor;
    if ((objc_msgSendSuper2(&v19, sel_isSelected) & 1) == 0)
    {
      v18.receiver = v0;
      v18.super_class = v2;
      if (!objc_msgSendSuper2(&v18, sel_isHighlighted)) {
        UIImage_optional v8 = &selRef_secondaryLabelColor;
      }
    }
  }
  else
  {
    UIImage_optional v8 = &selRef_tertiaryLabelColor;
  }
  id v9 = [self *v8];
  objc_msgSend(v7, sel_setTextColor_, v9);

  uint64_t v10 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
  v22.receiver = v0;
  v22.super_class = v2;
  if (objc_msgSendSuper2(&v22, sel_isEnabled))
  {
    v21.receiver = v0;
    v21.super_class = v2;
    id v11 = &selRef_systemBackgroundColor;
    if ((objc_msgSendSuper2(&v21, sel_isSelected) & 1) == 0)
    {
      v20.receiver = v0;
      v20.super_class = v2;
      if (!objc_msgSendSuper2(&v20, sel_isHighlighted)) {
        id v11 = &selRef_labelColor;
      }
    }
  }
  else
  {
    id v11 = &selRef_tertiaryLabelColor;
  }
  id v12 = [self *v11];
  uint64_t v13 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor;
  id v14 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor];
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor] = v12;
  id v15 = v12;

  objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview], sel_setBackgroundColor_, *(void *)&v10[v13]);
}

Swift::Void __swiftcall SignatureStrokeWidthControl.layoutSubviews()()
{
  v5.receiver = v0;
  v5.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v5, sel_layoutSubviews);
  objc_msgSend(v0, sel_bounds);
  double v1 = CGRectGetHeight(v6) * 0.5;
  id v2 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v2, sel_setCornerRadius_, v1);

  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton];
  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_layer);
    objc_msgSend(v4, sel_setCornerRadius_, v1);
  }
}

void @objc SignatureStrokeWidthControl.isSelected.setter(void *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  v8.receiver = a1;
  v8.super_class = (Class)swift_getObjectType();
  CGRect v6 = *a4;
  id v7 = v8.receiver;
  objc_msgSendSuper2(&v8, v6, a3);
  SignatureStrokeWidthControl.updateUI()();
}

uint64_t type metadata accessor for SignatureStrokeWidthControl()
{
  return self;
}

void specialized SignatureStrokeWidthControl.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_valueLabel;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl____lazy_storage___strokeWidthPreview] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewLargeWidth] = 0x4057800000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewShortWidth] = 0x4036000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *SignatureStrokeWidthPreview.init(width:)(uint64_t a1)
{
  id v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview;
  id v6 = objc_allocWithZone(MEMORY[0x263F82E00]);
  id v7 = v2;
  *(void *)&v2[v5] = objc_msgSend(v6, sel_init);
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeHeight] = 0x3FF0000000000000;
  objc_super v8 = &v7[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview____lazy_storage___strokePreviewHeightConstant];
  *(void *)objc_super v8 = 0;
  v8[8] = 1;
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor;
  *(void *)&v7[v9] = objc_msgSend(self, sel_labelColor);
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_width] = a1;

  v29.receiver = v7;
  v29.super_class = ObjectType;
  uint64_t v10 = (char *)objc_msgSendSuper2(&v29, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview;
  id v12 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview];
  uint64_t v13 = v10;
  objc_msgSend(v13, sel_addSubview_, v12);
  objc_msgSend(v12, sel_setClipsToBounds_, 1);
  objc_msgSend(v12, sel_setUserInteractionEnabled_, 0);
  objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v14 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_20C8344C0;
  id v16 = objc_msgSend(v12, sel_centerXAnchor);
  id v17 = objc_msgSend(v13, sel_centerXAnchor);
  id v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

  *(void *)(v15 + 32) = v18;
  id v19 = objc_msgSend(*(id *)&v10[v11], sel_centerYAnchor);
  id v20 = objc_msgSend(v13, sel_centerYAnchor);
  id v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v20);

  *(void *)(v15 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v21;
  id v22 = objc_msgSend(*(id *)&v10[v11], sel_widthAnchor);
  id v23 = objc_msgSend(v13, sel_widthAnchor);
  id v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_, v23);

  *(void *)(v15 + 48) = v24;
  id v25 = objc_msgSend(*(id *)&v10[v11], sel_heightAnchor);
  id v26 = objc_msgSend(v25, sel_constraintEqualToConstant_, SignatureStrokeWidthPreview.strokePreviewHeightConstant.getter());

  *(void *)(v15 + 56) = v26;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, isa);

  objc_msgSend(*(id *)&v10[v11], sel_setBackgroundColor_, *(void *)&v13[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor]);
  return v13;
}

double SignatureStrokeWidthPreview.strokePreviewHeightConstant.getter()
{
  uint64_t v1 = (unsigned char *)(v0
               + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview____lazy_storage___strokePreviewHeightConstant);
  if ((*(unsigned char *)(v0
                 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview____lazy_storage___strokePreviewHeightConstant
                 + 8) & 1) == 0)
    return *(double *)v1;
  double result = *(double *)(v0 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeHeight)
         * (double)*(uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_width);
  *(double *)uint64_t v1 = result;
  v1[8] = 0;
  return result;
}

uint64_t type metadata accessor for SignatureStrokeWidthPreview()
{
  return self;
}

void specialized SignatureStrokeWidthPreview.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeHeight] = 0x3FF0000000000000;
  id v2 = &v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview____lazy_storage___strokePreviewHeightConstant];
  *(void *)id v2 = 0;
  v2[8] = 1;
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor;
  *(void *)&v0[v3] = objc_msgSend(self, sel_labelColor);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t getEnumTagSinglePayload for PDFAnnotationElementLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C4C9524);
}

uint64_t sub_20C4C9524(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PDFAnnotationElementLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C4C95A4);
}

uint64_t sub_20C4C95A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PDFAnnotationElementLayout()
{
  uint64_t result = type metadata singleton initialization cache for PDFAnnotationElementLayout;
  if (!type metadata singleton initialization cache for PDFAnnotationElementLayout) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Shape and conformance Shape()
{
  unint64_t result = lazy protocol witness table cache variable for type Shape and conformance Shape;
  if (!lazy protocol witness table cache variable for type Shape and conformance Shape)
  {
    type metadata accessor for Shape();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape);
  }
  return result;
}

unint64_t one-time initialization function for shared()
{
  type metadata accessor for PasswordManager();
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 24) = result;
  static PasswordManager.shareCGFloat d = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  type metadata accessor for ImageThumbnailManager();
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncCache<Data, CGImageRef>);
  uint64_t v1 = swift_allocObject();
  swift_defaultActor_initialize();
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v1 + 112) = result;
  *(void *)(v1 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = 10;
  *(void *)(v0 + 112) = v1;
  static ImageThumbnailManager.shareCGFloat d = v0;
  return result;
}

uint64_t closure #1 in PasswordManager.password(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = CRAsset.digest.getter();
  unint64_t v6 = v5;
  swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(v7 + 16) && (uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6), (v9 & 1) != 0))
  {
    uint64_t v10 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v8);
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  outlined consume of Data._Representation(v4, v6);
  *a2 = v12;
  a2[1] = v11;
  return swift_endAccess();
}

uint64_t closure #1 in PasswordManager.add(password:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = CRAsset.digest.getter();
  unint64_t v9 = v8;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, a4, v7, v9, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 24) = v12;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v7, v9);
  return swift_endAccess();
}

uint64_t closure #1 in PasswordManager.clear(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = (uint64_t *)(a1 + 24);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  LOBYTE(a3) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (a3)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v7;
    uint64_t v16 = *v7;
    uint64_t *v7 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v13 = v16;
    }
    outlined consume of Data._Representation(*(void *)(*(void *)(v13 + 48) + 16 * v8), *(void *)(*(void *)(v13 + 48) + 16 * v8 + 8));
    id v14 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v8);
    uint64_t v10 = *v14;
    uint64_t v11 = v14[1];
    specialized _NativeDictionary._delete(at:)(v8, v13);
    uint64_t *v7 = v13;
    swift_bridgeObjectRelease();
  }
  *a4 = v10;
  a4[1] = v11;
  return swift_endAccess();
}

uint64_t PasswordManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PasswordManager()
{
  return self;
}

uint64_t ValueSlider.currentValue.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue + 8) != 1) {
    return *(void *)v1;
  }
  uint64_t result = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue);
  *(void *)uint64_t v1 = result;
  v1[8] = 0;
  return result;
}

char *ValueSlider.init(minValue:maxValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView;
  id v8 = objc_allocWithZone(MEMORY[0x263F82E00]);
  char v9 = v3;
  *(void *)&v3[v7] = objc_msgSend(v8, sel_init);
  uint64_t v10 = OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView;
  *(void *)&v9[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit11ValueSlider_slider;
  *(void *)&v9[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BD8]), sel_init);
  uint64_t v12 = OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackView;
  *(void *)&v9[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackViewSpacing] = 0x4020000000000000;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit11ValueSlider_minimumContentSizeHeight] = 0x4049000000000000;
  uint64_t v13 = &v9[OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue] = a1;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue] = a2;

  v44.receiver = v9;
  v44.super_class = ObjectType;
  id v14 = (char *)objc_msgSendSuper2(&v44, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v15 = OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackView;
  uint64_t v16 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackView];
  id v17 = v14;
  objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v16, sel_setAxis_, 0);
  objc_msgSend(v16, sel_setAlignment_, 0);
  objc_msgSend(v16, sel_setDistribution_, 0);
  objc_msgSend(v16, sel_setSpacing_, *(double *)&v17[OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackViewSpacing]);
  objc_msgSend(v17, sel_addSubview_, v16);
  id v18 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_20C8344C0;
  id v20 = objc_msgSend(v16, sel_topAnchor);
  id v21 = objc_msgSend(v17, sel_topAnchor);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(void *)(v19 + 32) = v22;
  id v23 = objc_msgSend(*(id *)&v14[v15], sel_leadingAnchor);
  id v24 = objc_msgSend(v17, sel_leadingAnchor);
  id v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(void *)(v19 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v25;
  id v26 = objc_msgSend(*(id *)&v14[v15], sel_bottomAnchor);
  id v27 = objc_msgSend(v17, sel_bottomAnchor);
  id v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

  *(void *)(v19 + 48) = v28;
  id v29 = objc_msgSend(*(id *)&v14[v15], sel_trailingAnchor);
  id v30 = objc_msgSend(v17, sel_trailingAnchor);
  id v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);

  *(void *)(v19 + 56) = v31;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_activateConstraints_, isa);

  objc_msgSend(*(id *)&v14[v15], sel_addArrangedSubview_, *(void *)&v17[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView]);
  uint64_t v33 = OBJC_IVAR____TtC8PaperKit11ValueSlider_slider;
  id v34 = *(void **)&v17[OBJC_IVAR____TtC8PaperKit11ValueSlider_slider];
  *(float *)&double v35 = (float)a1;
  objc_msgSend(v34, sel_setMinimumValue_, v35);
  *(float *)&double v36 = (float)a2;
  objc_msgSend(v34, sel_setMaximumValue_, v36);
  id v37 = v34;
  uint64_t v38 = (void *)MEMORY[0x21054D080](0x696C5365756C6176, 0xEC00000072656464);
  objc_msgSend(v37, sel_setAccessibilityIdentifier_, v38);

  id v39 = *(void **)&v14[v15];
  uint64_t v40 = *(void **)&v17[v33];
  objc_msgSend(v39, sel_addArrangedSubview_, v40);
  objc_msgSend(v39, sel_addArrangedSubview_, *(void *)&v17[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView]);
  objc_msgSend(v40, sel_addTarget_action_forControlEvents_, v17, sel_didChangeSlider, 4096);
  objc_msgSend(v40, sel_addTarget_action_forControlEvents_, v17, sel_didStartChangingSlider, 1);
  objc_msgSend(v40, sel_addTarget_action_forControlEvents_, v17, sel_didFinishChangingSlider, 448);
  *(float *)&double v41 = (float)ValueSlider.currentValue.getter();
  objc_msgSend(v40, sel_setValue_, v41);

  return v17;
}

id ValueSlider.didChangeSlider()()
{
  id result = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_slider], sel_value);
  float v3 = roundf(v2);
  if ((~LODWORD(v3) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 <= -9.2234e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3 >= 9.2234e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v4 = (uint64_t)v3;
  if (*(void *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue] > (uint64_t)v3) {
    uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue];
  }
  if (v4 >= *(void *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue]) {
    uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue];
  }
  unint64_t v5 = &v0[OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue];
  *(void *)unint64_t v5 = v4;
  v5[8] = 0;
  return objc_msgSend(v0, sel_sendActionsForControlEvents_, 4096);
}

uint64_t type metadata accessor for ValueSlider()
{
  return self;
}

void specialized ValueSlider.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit11ValueSlider_slider;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BD8]), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackView;
  *(void *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackViewSpacing] = 0x4020000000000000;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_minimumContentSizeHeight] = 0x4049000000000000;
  unint64_t v5 = &v0[OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue];
  *(void *)unint64_t v5 = 0;
  v5[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t @objc static PKTextAttachmentDrawingViewProvider.drawingViewClassForPaper()()
{
  type metadata accessor for PaperTextAttachmentView();
  return swift_getObjCClassFromMetadata();
}

uint64_t @objc static PKTextAttachmentDrawingViewProvider.inlineDrawingViewClassForPaper()()
{
  type metadata accessor for InlineDrawingTextAttachmentView();
  return swift_getObjCClassFromMetadata();
}

uint64_t @objc static PKTextAttachmentDrawingViewProvider.inlineDrawingTiledViewClassForPaper()()
{
  type metadata accessor for InlineDrawingTiledTextView();
  return swift_getObjCClassFromMetadata();
}

void *GraphLayout.createView<A>(in:canvas:parent:)(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v50 = a5;
  v49[1] = a4;
  double v55 = a3;
  id v53 = a2;
  id v51 = a1;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  id v54 = (char *)v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  double v52 = (char *)v49 - v18;
  double v20 = MEMORY[0x270FA5388](v19);
  id v22 = (char *)v49 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v5, v6, v20);
  uint64_t v23 = type metadata accessor for GraphElement();
  uint64_t v24 = lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<GraphElement> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v56 = v23;
  uint64_t v57 = v24;
  uint64_t v58 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  id v51 = v55;
  id v25 = v53;
  id v50 = v53;
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat x = v59.origin.x;
  CGFloat y = v59.origin.y;
  CGFloat width = v59.size.width;
  CGFloat height = v59.size.height;
  double MinX = CGRectGetMinX(v59);
  v60.origin.CGFloat x = x;
  v60.origin.CGFloat y = y;
  v60.size.CGFloat width = width;
  v60.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v60);
  v61.origin.CGFloat x = x;
  v61.origin.CGFloat y = y;
  v61.size.CGFloat width = width;
  v61.size.CGFloat height = height;
  double v32 = CGRectGetWidth(v61);
  v62.origin.CGFloat x = x;
  v62.origin.CGFloat y = y;
  v62.size.CGFloat width = width;
  v62.size.CGFloat height = height;
  double v33 = CGRectGetHeight(v62);
  id v34 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  double v35 = v52;
  v34(v52, v22, v14);
  double v36 = objc_allocWithZone((Class)type metadata accessor for GraphCanvasElementView(0));
  v36[direct field offset for GraphCanvasElementView.didDelayCreatingGraphView] = 0;
  *(void *)&v36[direct field offset for GraphCanvasElementView.$__lazy_storage_$_cachedGraphableExpressionsState] = 0;
  *(void *)&v36[direct field offset for GraphCanvasElementView.graphViewController] = 0;
  id v37 = &v36[direct field offset for GraphCanvasElementView.previousGraphViewSize];
  *(void *)id v37 = 0;
  *((void *)v37 + 1) = 0;
  v37[16] = 1;
  uint64_t v38 = direct field offset for GraphCanvasElementView.expressionIdentifierToId;
  id v39 = v36;
  *(void *)&v36[v38] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);

  uint64_t v40 = (uint64_t)v54;
  double v41 = v35;
  v34(v54, v35, v14);
  id v42 = v50;
  id v43 = v51;
  objc_super v44 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(v40, v25, v55, MinX, MinY, v32, v33);

  uint64_t v45 = v44;
  double v46 = (void *)MEMORY[0x21054D080](0xD000000000000026, 0x800000020C857E50);
  objc_msgSend(v45, sel_setAccessibilityIdentifier_, v46);

  uint64_t v47 = *(void (**)(char *, uint64_t))(v15 + 8);
  v47(v41, v14);

  v47(v22, v14);
  return v45;
}

uint64_t closure #1 in static GraphLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, unint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, void (*a8)(uint64_t), uint64_t a9)
{
  id v54 = a8;
  uint64_t v50 = a1;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v52 = *(void *)(v15 - 8);
  uint64_t v53 = v15;
  MEMORY[0x270FA5388](v15);
  id v49 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphElement>?);
  MEMORY[0x270FA5388](v17 - 8);
  id v51 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for GraphableExpression();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v48 = (uint64_t)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  id v27 = (char *)&v45 - v26;
  double v29 = MEMORY[0x270FA5388](v28);
  id v31 = (char *)&v45 - v30;
  double v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v20 + 56);
  v32((char *)&v45 - v30, 1, 1, v19, v29);
  if (a2 >> 60 != 15)
  {
    double v46 = v32;
    uint64_t v47 = a9;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    outlined copy of Data._Representation(v50, a2);
    JSONDecoder.init()();
    lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
    swift_release();
    outlined consume of Data?(v50, a2);
    ((void (*)(char *, void, uint64_t, uint64_t))v46)(v27, 0, 1, v19);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v27, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
  }
  outlined init with copy of GraphableExpression?((uint64_t)v31, (uint64_t)v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v24, 1, v19) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
    uint64_t v33 = (uint64_t)v51;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, 1, 1, v53);
    v54(v33);
    outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for Capsule<GraphElement>?);
  }
  else
  {
    uint64_t v34 = (uint64_t)v24;
    uint64_t v35 = v48;
    outlined init with take of GraphableExpression(v34, v48);
    double v36 = specialized static GraphElement.defaultVisibleRange.getter();
    memset(v56, 0, sizeof(v56));
    char v57 = 1;
    unsigned __int8 v55 = 9;
    id v37 = v49;
    static GraphLayout.create(_:visibleRange:canvasFrame:frame:rotation:anchor:offset:)(v35, (uint64_t)v56, &v55, 0, 0, 1, v36, v38, v39, v40, a3, a4, a5, a6, 0.0);
    uint64_t v41 = (uint64_t)v51;
    uint64_t v42 = v52;
    uint64_t v43 = v53;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v51, v37, v53);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v41, 0, 1, v43);
    v54(v41);
    outlined destroy of StocksKitCurrencyCache.Provider?(v41, &demangling cache variable for type metadata for Capsule<GraphElement>?);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v37, v43);
    outlined destroy of GraphableExpression(v35, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
}

uint64_t outlined init with copy of GraphableExpression?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static GraphLayout.create(_:visibleRange:canvasFrame:frame:rotation:anchor:offset:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8, double a9, double a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14, double a15)
{
  CGFloat v51 = a13;
  CGFloat v52 = a14;
  CGFloat v50 = a12;
  uint64_t v53 = a1;
  uint64_t v27 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v28 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v50 - v32;
  int v34 = *a3;
  if (one-time initialization token for defaultGraphSize != -1) {
    swift_once();
  }
  long long v35 = static UIConstants.defaultGraphSize;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a2, (uint64_t)v55, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  double y = 0.0;
  if (v56)
  {
    double v37 = *(double *)&v35 * -0.5 + 384.0;
    double v39 = *((double *)&v35 + 1);
    double v38 = *(double *)&v35;
    double v40 = 0.0;
  }
  else
  {
    double v37 = *(double *)v55;
    double v40 = *(double *)&v55[1];
    double v38 = *(double *)&v55[2];
    double v39 = *(double *)&v55[3];
  }
  double x = 0.0;
  if ((~*(void *)&v37 & 0x7FF0000000000000) != 0)
  {
    double y = (*(void *)&v40 & 0x7FF0000000000000) == 0x7FF0000000000000 ? 0.0 : v40;
    if ((*(void *)&v40 & 0x7FF0000000000000) != 0x7FF0000000000000) {
      double x = v37;
    }
  }
  double v42 = v38;
  if ((*(void *)&v39 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    double v38 = *(double *)&v35;
    double v39 = *((double *)&v35 + 1);
  }
  if ((~*(void *)&v42 & 0x7FF0000000000000) != 0) {
    double width = v38;
  }
  else {
    double width = *(double *)&v35;
  }
  if ((~*(void *)&v42 & 0x7FF0000000000000) != 0) {
    double height = v39;
  }
  else {
    double height = *((double *)&v35 + 1);
  }
  if (v34 != 9)
  {
    LOBYTE(v54) = v34;
    v57.origin.double x = a11;
    v57.origin.double y = v50;
    v57.size.double width = v51;
    v57.size.double height = v52;
    __C::CGRect v58 = CGRect.position(in:anchor:)(v57, (PaperKit::LayoutAnchor)&v54);
    double x = v58.origin.x;
    double y = v58.origin.y;
    double width = v58.size.width;
    double height = v58.size.height;
  }
  double v45 = *(double *)&a4;
  double v46 = *(double *)&a5;
  if (a6) {
    double v46 = -0.0;
  }
  double v47 = v46 + y;
  if (a6) {
    double v45 = -0.0;
  }
  GraphElement.init(frame:visibleRange:rotation:)((uint64_t)v33, v45 + x, v47, width, height, a7, a8, a9, a10, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  if (v54 != a15)
  {
    double v54 = a15;
    CRRegister.wrappedValue.setter();
  }
  outlined init with copy of GraphElement((uint64_t)v33, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for GraphElement);
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  uint64_t v48 = Capsule<>.init(_:id:)();
  MEMORY[0x270FA5388](v48);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  Capsule.callAsFunction<A>(_:)();
  return outlined destroy of GraphableExpression((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for GraphElement);
}

uint64_t closure #1 in static GraphLayout.create(_:visibleRange:canvasFrame:frame:rotation:anchor:offset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for GraphableExpression();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of GraphElement(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
  uint64_t v13 = type metadata accessor for CRKeyPath();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 1, 1, v13);
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (void (*)(uint64_t))type metadata accessor for GraphableExpression);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  swift_getKeyPath();
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  uint64_t v14 = (void (*)(unsigned char *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  CROrderedSet.append(_:)();
  v14(v16, 0);
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
}

id protocol witness for static Layout.canHandle(itemProvider:) in conformance GraphLayout(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x21054D080](0xD000000000000018, 0x800000020C8520C0);
  id v3 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v2);

  return v3;
}

uint64_t partial apply for closure #1 in static GraphLayout.create(_:visibleRange:canvasFrame:frame:rotation:anchor:offset:)(uint64_t a1)
{
  return closure #1 in static GraphLayout.create(_:visibleRange:canvasFrame:frame:rotation:anchor:offset:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined destroy of GraphableExpression(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GraphLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C4CB69C);
}

uint64_t sub_20C4CB69C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for GraphLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C4CB71C);
}

uint64_t sub_20C4CB71C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for GraphLayout()
{
  uint64_t result = type metadata singleton initialization cache for GraphLayout;
  if (!type metadata singleton initialization cache for GraphLayout) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t associated type witness table accessor for LayoutItemProvider.Model : CRDT in GraphLayout()
{
  return lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in GraphLayout()
{
  return &protocol witness table for GraphElement;
}

unint64_t lazy protocol witness table accessor for type Ref<GraphElement> and conformance Ref<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Ref<GraphElement> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<GraphElement> and conformance Ref<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<GraphElement> and conformance Ref<A>);
  }
  return result;
}

uint64_t sub_20C4CB890()
{
  return 24;
}

__n128 sub_20C4CB89C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void ToolPickerController.handleSqueezeInteractionDidChangePaletteViewVisibilityNotification(_:)()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  if (!MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate)) {
    return;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v0, ObjectType, v2);
  swift_unknownObjectRelease();
  if (!v4) {
    return;
  }
  id v5 = objc_msgSend(self, sel__existingInteractionForWindowScene_, v4);
  if (!v5) {
    goto LABEL_10;
  }
  id v9 = v5;
  if (objc_msgSend(v5, sel__paletteViewVisible))
  {
    if (MEMORY[0x210550400](v1))
    {
      uint64_t v6 = *(void *)(v1 + 8);
      uint64_t v7 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v0, v7, v6);

      swift_unknownObjectRelease();
    }
    else
    {
    }
LABEL_10:
    uint64_t v8 = v4;
    goto LABEL_11;
  }

  uint64_t v8 = v9;
LABEL_11:
}

void ToolPickerController.toolPickerWillShowNotification(_:)()
{
  uint64_t v1 = v0;
  Notification.object.getter();
  if (v8)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPicker);
    if (swift_dynamicCast())
    {
      id v2 = objc_msgSend(v6, sel__annotationDelegate);
      swift_unknownObjectRelease();
      if (v2
        || (uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate,
            !MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate)))
      {
      }
      else
      {
        uint64_t v4 = *(void *)(v3 + 8);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, id, uint64_t, uint64_t))(v4 + 16))(v1, v6, ObjectType, v4);

        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v7);
  }
}

void ToolPickerController.toolPickerDidShowNotification(_:)()
{
  uint64_t v1 = v0;
  Notification.object.getter();
  if (v8)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPicker);
    if (swift_dynamicCast())
    {
      id v2 = objc_msgSend(v6, sel__annotationDelegate);
      swift_unknownObjectRelease();
      if (v2
        || (uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate,
            !MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate)))
      {
      }
      else
      {
        uint64_t v4 = *(void *)(v3 + 8);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, id, uint64_t, uint64_t))(v4 + 24))(v1, v6, ObjectType, v4);

        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v7);
  }
}

uint64_t @objc ToolPickerController.toolPickerWillShowNotification(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = type metadata accessor for Notification();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = a1;
  a4(v9);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

char *ToolPickerController.shapeButtonListViewController.getter()
{
  return ToolPickerController.textToolListViewController.getter(&OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___shapeButtonListViewController, (void (*)(void))type metadata accessor for ShapeListViewController, &OBJC_IVAR____TtC8PaperKit23ShapeListViewController_delegate, (uint64_t)&protocol witness table for ToolPickerController);
}

void closure #1 in ToolPickerController.makeSignaturesViewController(rootViewController:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    uint64_t v6 = v4 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
    uint64_t v7 = MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate);
    uint64_t v8 = *(void *)(v6 + 8);

    if (v7)
    {
      uint64_t ObjectType = swift_getObjectType();
      ToolPickerControllerDelegate.addNewSignatureItem(_:)(a1, ObjectType, v8);
      swift_unknownObjectRelease();
    }
  }
}

void closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddStickerWithEvent:)(uint64_t a1, uint64_t a2, void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v13 = a1 + 16;
  swift_beginAccess();
  uint64_t v14 = MEMORY[0x210550400](v13);
  if (v14)
  {
    uint64_t v15 = (char *)v14;
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83108]), sel_init);
    uint64_t v17 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC];
    *(void *)&v15[OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC] = v16;
    id v18 = v16;

    objc_msgSend(v18, sel_setDelegate_, v15);
    id v19 = objc_msgSend(v18, sel_view);
    if (v19)
    {
      uint64_t v20 = v19;
      objc_msgSend(v19, sel_setUserInteractionEnabled_, 0);

      objc_msgSend(v18, sel_setSourceView_, a2);
      objc_msgSend(v18, sel_setSourceRect_, a4, a5, a6, a7);
      objc_msgSend(a3, sel_presentViewController_animated_completion_, v18, 1, 0);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:)(void *a1, void *a2, uint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  swift_unknownObjectRetain();
  specialized SignatureManager.showSignatures(_:_:_:_:)(a1, a2, (uint64_t)partial apply for closure #1 in closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:), v16, a5, a6, a7, a8);
  return swift_release();
}

void closure #1 in ToolPickerController.textToolListViewController(_:didSelectDescriptionWithEvent:)()
{
}

Swift::Void __swiftcall ToolPickerController.showImageDescriptionViewController()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  if (MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0, ObjectType, v2);
    if (v4)
    {
      id v19 = (id)v4;
      uint64_t v5 = OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC;
      if (*(void *)(v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC))
      {
        swift_unknownObjectRelease();
        uint64_t v6 = v19;
      }
      else
      {
        id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F22188]), sel_initWithContentSnapshot_, 0);
        uint64_t v8 = *(void **)(v0 + v5);
        *(void *)(v0 + v5) = v7;
        id v9 = v7;

        uint64_t v10 = one-time initialization token for paperKitBundle;
        id v20 = v9;
        if (v10 != -1) {
          swift_once();
        }
        v22._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
        v22._object = (void *)0x800000020C857F50;
        v11._object = (void *)0x800000020C852EE0;
        v11._uint64_t countAndFlagsBits = 0xD000000000000011;
        v12.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
        v12.value._object = (void *)0xEB00000000656C62;
        v13._uint64_t countAndFlagsBits = 0;
        v13._object = (void *)0xE000000000000000;
        uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v22)._countAndFlagsBits;
        uint64_t v15 = (void *)MEMORY[0x21054D080](countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v20, sel_setTitle_, v15);

        objc_msgSend(v20, sel_setModalPresentationStyle_, 2);
        objc_msgSend(v20, sel_setModalInPresentation_, 0);
        objc_msgSend(v20, sel_setDelegate_, v0);
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 128))(ObjectType, v2);
        if (v17)
        {
          id v18 = (void *)MEMORY[0x21054D080](v16);
          swift_bridgeObjectRelease();
        }
        else
        {
          id v18 = 0;
        }
        objc_msgSend(v20, sel_setImageDescription_, v18);

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8))(v0, 1, ObjectType, v2);
        objc_msgSend(v19, sel_presentViewController_animated_completion_, v20, 1, 0);
        swift_unknownObjectRelease();

        uint64_t v6 = v20;
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddGraphWithEvent:)(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  uint64_t result = MEMORY[0x210550400](a1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 64))(11, ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

void closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddShapeWithEvent:)(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, char a5, void *a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v28 = ToolPickerController.shapeButtonListViewController.getter();
  objc_msgSend(v28, sel_setModalPresentationStyle_, 7);

  uint64_t v29 = ToolPickerController.shapeButtonListViewController.getter();
  id v30 = objc_msgSend(v29, sel_popoverPresentationController);

  if (v30)
  {
    objc_msgSend(v30, sel_setDelegate_, a1);
  }
  uint64_t v31 = ToolPickerController.shapeButtonListViewController.getter();
  id v32 = objc_msgSend(v31, sel_popoverPresentationController);

  objc_msgSend(v32, sel_setSourceView_, a2);
  uint64_t v33 = ToolPickerController.shapeButtonListViewController.getter();
  id v34 = objc_msgSend(v33, sel_popoverPresentationController);

  objc_msgSend(v34, sel_setSourceRect_, a7, a8, a9, a10);
  long long v35 = ToolPickerController.shapeButtonListViewController.getter();
  id v36 = objc_msgSend(v35, sel_popoverPresentationController);

  if (v36)
  {
    if (isa)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
    }
    objc_msgSend(v36, sel_setPassthroughViews_, isa);
  }
  double v37 = ToolPickerController.shapeButtonListViewController.getter();
  id v38 = objc_msgSend(v37, sel_popoverPresentationController);

  objc_msgSend(v38, sel_setPopoverLayoutMargins_, a11, a12, a13, a14);
  if ((a5 & 1) == 0)
  {
    double v39 = ToolPickerController.shapeButtonListViewController.getter();
    id v40 = objc_msgSend(v39, sel_popoverPresentationController);

    objc_msgSend(v40, sel_setPermittedArrowDirections_, a4);
  }
  uint64_t v41 = ToolPickerController.shapeButtonListViewController.getter();
  unsigned __int8 v42 = objc_msgSend(v41, sel_isBeingPresented);

  if ((v42 & 1) == 0)
  {
    uint64_t v43 = ToolPickerController.shapeButtonListViewController.getter();
    unsigned __int8 v44 = objc_msgSend(v43, sel_isBeingDismissed);

    if ((v44 & 1) == 0)
    {
      double v45 = ToolPickerController.shapeButtonListViewController.getter();
      objc_msgSend(a6, sel_presentViewController_animated_completion_, v45, 1, 0);
    }
  }
}

Swift::Void __swiftcall ToolPickerController.stickerPickerViewControllerDidDismiss()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC);
  *(void *)(v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC) = 0;

  uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  if (MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
  {
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    id v5 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0, ObjectType, v3);
    swift_unknownObjectRelease();
    if (v5)
    {
      objc_msgSend(v5, sel_becomeFirstResponder);
    }
  }
}

id ToolPickerController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ToolPickerController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void ToolPickerController.imageDescriptionViewControllerDidSave(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC);
  if (v3)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for AXSSImageDescriptionViewController);
    id v5 = a1;
    id v6 = v3;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if (a1)
    {
      uint64_t v7 = v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
      if (MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
      {
        uint64_t v8 = *(void *)(v7 + 8);
        id v9 = objc_msgSend(v5, sel_imageDescription);
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v13 = v12;
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v13 = 0;
        }
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 136))(v11, v13, ObjectType, v8);
        swift_unknownObjectRelease();
      }
      ToolPickerController._dissmissImageDescriptionViewController()();
    }
  }
}

Swift::Void __swiftcall ToolPickerController._dissmissImageDescriptionViewController()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  if (MEMORY[0x210550400](v2))
  {
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    id v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, ObjectType, v3);
    swift_unknownObjectRelease();
    if (v5)
    {
      uint64_t v6 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = v5;
      v11[4] = closure #1 in ToolPickerController._dissmissImageDescriptionViewController()partial apply;
      void v11[5] = v7;
      v11[0] = MEMORY[0x263EF8330];
      v11[1] = 1107296256;
      v11[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v11[3] = &block_descriptor_92_0;
      uint64_t v8 = _Block_copy(v11);
      id v9 = v5;
      swift_release();
      objc_msgSend(v9, sel_dismissViewControllerAnimated_completion_, 1, v8);
      _Block_release(v8);
      uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC);
      *(void *)(v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC) = 0;
    }
  }
}

void ToolPickerController.imageDescriptionViewControllerDidCancel(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC);
  if (v4)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for AXSSImageDescriptionViewController);
    id v6 = a1;
    id v7 = v4;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if (a1)
    {
      uint64_t v8 = v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
      if (MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
      {
        uint64_t v9 = *(void *)(v8 + 8);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v2, ObjectType, v9);
        swift_unknownObjectRelease();
        if (v11)
        {
          uint64_t v12 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v13 = swift_allocObject();
          *(void *)(v13 + 16) = v12;
          *(void *)(v13 + 24) = v11;
          CGFloat v17[4] = partial apply for closure #1 in ToolPickerController._dissmissImageDescriptionViewController();
          v17[5] = v13;
          v17[0] = MEMORY[0x263EF8330];
          v17[1] = 1107296256;
          id v17[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          v17[3] = &block_descriptor_84_0;
          uint64_t v14 = _Block_copy(v17);
          id v15 = v11;
          swift_release();
          objc_msgSend(v15, sel_dismissViewControllerAnimated_completion_, 1, v14);
          _Block_release(v14);
          uint64_t v16 = *(void **)(v2 + v3);
          *(void *)(v2 + v3) = 0;
        }
      }
    }
  }
}

void ToolPickerController.imageDescriptionViewControllerDidDismiss(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC);
  if (v4)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for AXSSImageDescriptionViewController);
    id v6 = a1;
    id v7 = v4;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if (a1)
    {
      uint64_t v8 = *(void **)(v2 + v3);
      *(void *)(v2 + v3) = 0;

      uint64_t v9 = v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
      if (MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
      {
        uint64_t v10 = *(void *)(v9 + 8);
        uint64_t ObjectType = swift_getObjectType();
        id v14 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v2, ObjectType, v10);
        swift_unknownObjectRelease();
        if (v14)
        {
          if (MEMORY[0x210550400](v9))
          {
            uint64_t v12 = *(void *)(v9 + 8);
            uint64_t v13 = swift_getObjectType();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 8))(v2, 0, v13, v12);
            swift_unknownObjectRelease();
          }
          objc_msgSend(v14, sel_becomeFirstResponder);
        }
      }
    }
  }
}

void closure #1 in ToolPickerController._dissmissImageDescriptionViewController()(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    uint64_t v6 = v4 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
    if (MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
    {
      uint64_t v7 = *(void *)(v6 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 8))(v5, 0, ObjectType, v7);
      swift_unknownObjectRelease();
    }
    objc_msgSend(a2, sel_becomeFirstResponder);
  }
}

void specialized ToolPickerController.toolPickerDidHideNotification(_:)()
{
  Notification.object.getter();
  if (v3)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPicker);
    if (swift_dynamicCast())
    {
      id v0 = objc_msgSend(v1, sel__annotationDelegate);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v2);
  }
}

void specialized ToolPickerController.textToolListViewController(_:didSelectAddStickerWithEvent:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  if (MEMORY[0x210550400](v4))
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, ObjectType, v5);
    swift_unknownObjectRelease();
    if (v7)
    {
      objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC), sel_dismissCard);
      id v8 = objc_msgSend(a1, sel_popoverPresentationController);
      id v9 = objc_msgSend(v8, sel_sourceView);

      id v10 = objc_msgSend(a1, sel_popoverPresentationController);
      if (v10)
      {
        uint64_t v11 = v10;
        objc_msgSend(v10, sel_sourceRect);
        uint64_t v13 = v12;
        uint64_t v15 = v14;
        uint64_t v17 = v16;
        uint64_t v19 = v18;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v19 = 0;
        uint64_t v13 = 0;
        uint64_t v15 = 0;
      }
      id v20 = objc_msgSend(a1, sel_presentingViewController);
      if (!v20) {
        id v20 = v7;
      }
      uint64_t v21 = swift_allocObject();
      swift_unknownObjectWeakInit();
      Swift::String v22 = (void *)swift_allocObject();
      void v22[2] = v21;
      v22[3] = v9;
      v22[4] = v13;
      v22[5] = v15;
      v22[6] = v17;
      v22[7] = v19;
      v22[8] = v20;
      v26[4] = partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddStickerWithEvent:);
      v26[5] = v22;
      v26[0] = MEMORY[0x263EF8330];
      v26[1] = 1107296256;
      void v26[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      void v26[3] = &block_descriptor_35;
      uint64_t v23 = _Block_copy(v26);
      id v24 = v9;
      id v25 = v20;
      swift_release();
      objc_msgSend(a1, sel_dismissViewControllerAnimated_completion_, 1, v23);
      _Block_release(v23);
    }
  }
}

uint64_t sub_20C4CD6C4()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C4CD6FC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

void partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddStickerWithEvent:)()
{
  closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddStickerWithEvent:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 64), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56));
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_35()
{
  return swift_release();
}

void specialized ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:)(void *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  uint64_t v4 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 56))(v1, ObjectType, v6);
    if (v8)
    {
      id v9 = (void *)v8;
      id v10 = objc_msgSend(a1, sel_popoverPresentationController);
      id v11 = objc_msgSend(v10, sel_sourceView);

      id v12 = objc_msgSend(a1, sel_popoverPresentationController);
      if (v12)
      {
        uint64_t v13 = v12;
        objc_msgSend(v12, sel_sourceRect);
        uint64_t v15 = v14;
        uint64_t v17 = v16;
        uint64_t v19 = v18;
        uint64_t v21 = v20;

        if (v11)
        {
LABEL_5:
          Swift::String v22 = (void *)swift_allocObject();
          void v22[2] = v9;
          v22[3] = v11;
          v22[4] = v15;
          v22[5] = v17;
          v22[6] = v19;
          v22[7] = v21;
          v22[8] = v5;
          v22[9] = v6;
          v26[4] = partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:);
          v26[5] = v22;
          v26[0] = MEMORY[0x263EF8330];
          v26[1] = 1107296256;
          void v26[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          void v26[3] = &block_descriptor_74;
          uint64_t v23 = _Block_copy(v26);
          id v24 = v9;
          id v25 = v11;
          swift_unknownObjectRetain();
          swift_release();
          objc_msgSend(a1, sel_dismissViewControllerAnimated_completion_, 0, v23);
          _Block_release(v23);
          swift_unknownObjectRelease();

          return;
        }
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v21 = 0;
        uint64_t v15 = 0;
        uint64_t v17 = 0;
        if (v11) {
          goto LABEL_5;
        }
      }
    }
    swift_unknownObjectRelease();
  }
}

uint64_t specialized ToolPickerController.textToolListViewController(_:didSelectOpacityWithEvent:)(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate];
  uint64_t result = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate]);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *((void *)v3 + 1);
    uint64_t v7 = (void *)swift_allocObject();
    v7[2] = v5;
    v7[3] = v6;
    v7[4] = v1;
    void v10[4] = partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectOpacityWithEvent:);
    v10[5] = v7;
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1107296256;
    _OWORD v10[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v10[3] = &block_descriptor_62;
    uint64_t v8 = _Block_copy(v10);
    swift_unknownObjectRetain();
    id v9 = v1;
    swift_release();
    objc_msgSend(a1, sel_dismissViewControllerAnimated_completion_, 1, v8);
    _Block_release(v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_20C4CDACC()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectOpacityWithEvent:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 120))(v2, ObjectType, v1);
}

void specialized ToolPickerController.textToolListViewController(_:didSelectAddShapeWithEvent:)(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate];
  if (MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate]))
  {
    uint64_t v4 = *((void *)v3 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v1, ObjectType, v4);
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      id v8 = objc_msgSend(a1, sel_popoverPresentationController);
      id v9 = objc_msgSend(v8, sel_sourceView);

      id v10 = objc_msgSend(a1, sel_popoverPresentationController);
      if (v10)
      {
        id v11 = v10;
        objc_msgSend(v10, sel_sourceRect);
        uint64_t v13 = v12;
        uint64_t v15 = v14;
        uint64_t v17 = v16;
        uint64_t v19 = v18;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v19 = 0;
        uint64_t v13 = 0;
        uint64_t v15 = 0;
      }
      id v20 = objc_msgSend(a1, sel_popoverPresentationController);
      uint64_t v21 = v20;
      if (v20)
      {
        id v22 = objc_msgSend(v20, sel_passthroughViews);

        if (v22)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
          uint64_t v21 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {
          uint64_t v21 = 0;
        }
      }
      id v23 = objc_msgSend(a1, sel_popoverPresentationController);
      if (v23)
      {
        id v24 = v23;
        objc_msgSend(v23, sel_popoverLayoutMargins);
        uint64_t v26 = v25;
        uint64_t v28 = v27;
        uint64_t v30 = v29;
        uint64_t v32 = v31;
      }
      else
      {
        uint64_t v26 = *MEMORY[0x263F834E8];
        uint64_t v28 = *(void *)(MEMORY[0x263F834E8] + 8);
        uint64_t v30 = *(void *)(MEMORY[0x263F834E8] + 16);
        uint64_t v32 = *(void *)(MEMORY[0x263F834E8] + 24);
      }
      id v33 = objc_msgSend(a1, sel_popoverPresentationController);
      id v34 = v33;
      if (v33)
      {
        id v35 = objc_msgSend(v33, sel_permittedArrowDirections);
      }
      else
      {
        id v35 = 0;
      }
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = v1;
      *(void *)(v36 + 24) = v9;
      *(void *)(v36 + 32) = v13;
      *(void *)(v36 + 4CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v15;
      *(void *)(v36 + 48) = v17;
      *(void *)(v36 + 56) = v19;
      *(void *)(v36 + 64) = v21;
      *(void *)(v36 + 72) = v26;
      *(void *)(v36 + 8CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v28;
      *(void *)(v36 + 88) = v30;
      *(void *)(v36 + 96) = v32;
      *(void *)(v36 + 104) = v35;
      *(unsigned char *)(v36 + 112) = v34 == 0;
      *(void *)(v36 + 12CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0) = v7;
      v41[4] = partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddShapeWithEvent:);
      v41[5] = v36;
      v41[0] = MEMORY[0x263EF8330];
      v41[1] = 1107296256;
      void v41[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v41[3] = &block_descriptor_68;
      double v37 = _Block_copy(v41);
      id v38 = v1;
      id v39 = v9;
      id v40 = v7;
      swift_release();
      objc_msgSend(a1, sel_dismissViewControllerAnimated_completion_, 1, v37);
      _Block_release(v37);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_20C4CDED0()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 128, 7);
}

void partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddShapeWithEvent:)()
{
  closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddShapeWithEvent:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(Class *)(v0 + 64), *(void *)(v0 + 104), *(unsigned char *)(v0 + 112), *(void **)(v0 + 120), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96));
}

uint64_t sub_20C4CDF48()
{
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:)()
{
  return closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 64), *(void *)(v0 + 72), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48), *(CGFloat *)(v0 + 56));
}

uint64_t sub_20C4CDFA4()
{
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  ToolPickerControllerDelegate.addNewSignatureItem(_:)(a1, ObjectType, v3);
}

void partial apply for closure #1 in ToolPickerController._dissmissImageDescriptionViewController()()
{
  closure #1 in ToolPickerController._dissmissImageDescriptionViewController()(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t objectdestroy_80Tm()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C4CE074()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t CRTextStorage.merge(string:)(char *a1)
{
  CGFloat v143 = a1;
  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  double v136 = *(char **)(v140 - 8);
  MEMORY[0x270FA5388](v140);
  id v139 = (char *)&v108 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v135 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v112 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  int v111 = (char *)&v108 - v9;
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  double v142 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v119 - 8);
  MEMORY[0x270FA5388](v119);
  uint64_t v118 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  unint64_t v133 = *(void *)(v144 - 8);
  MEMORY[0x270FA5388](v144);
  double v138 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v117 = (char *)&v108 - v13;
  MEMORY[0x270FA5388](v14);
  double v137 = (char *)&v108 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.ObservableDifference?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  BOOL v110 = (char *)&v108 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v128 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v123 = (char *)&v108 - v25;
  MEMORY[0x270FA5388](v26);
  Swift::Int v120 = (char *)&v108 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v108 - v29;
  MEMORY[0x270FA5388](v31);
  id v33 = (char *)&v108 - v32;
  Swift::Int v122 = v1;
  id v34 = &v1[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
  swift_beginAccess();
  id v35 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v35(v33, v34, v21);
  swift_beginAccess();
  CRAttributedString.merge(_:)();
  swift_endAccess();
  uint64_t v130 = v22 + 16;
  double v131 = v34;
  id v129 = v35;
  v35(v30, v34, v21);
  uint64_t v36 = (uint64_t)v110;
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>();
  double v109 = v33;
  CRType.observableDifference(from:)();
  double v37 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v134 = v21;
  uint64_t v121 = v22 + 8;
  double v132 = v37;
  v37(v30, v21);
  outlined init with copy of CRAttributedString<TextAttributeScope>.ObservableDifference?(v36, (uint64_t)v18);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.ObservableDifference);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v18, 1, v38) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.ObservableDifference?);
    goto LABEL_43;
  }
  uint64_t v40 = CRAttributedString.ObservableDifference.edits.getter();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v38);
  uint64_t v41 = v40;
  if (!*(void *)(v40 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_43:
    uint64_t v100 = 0;
LABEL_44:
    CGFloat v106 = v109;
    outlined destroy of StocksKitCurrencyCache.Provider?(v36, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.ObservableDifference?);
    v132(v106, v134);
    return v100;
  }
  objc_msgSend(v122, sel_beginEditing);
  unint64_t v42 = *(void *)(v40 + 16);
  if (!v42) {
    goto LABEL_59;
  }
  uint64_t v126 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString;
  uint64_t v116 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode;
  id v127 = (uint64_t *)(v40 + 32);
  long long v115 = (void (**)(char *, uint64_t))(v142 + 1);
  Swift::Int v114 = (void (**)(char *, char *, uint64_t))(v133 + 32);
  CGFloat v141 = (void (**)(char *, char *, uint64_t))(v135 + 32);
  double v142 = (unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48);
  uint64_t v43 = (void (**)(char *, uint64_t))(v136 + 8);
  unsigned __int8 v44 = (void (**)(char *, uint64_t))(v135 + 8);
  uint64_t v113 = (void (**)(char *, uint64_t))(v133 + 8);
  swift_bridgeObjectRetain();
  unint64_t v45 = 0;
  uint64_t v135 = MEMORY[0x263F8EE58] + 8;
  double v46 = v122;
  uint64_t v47 = v121;
  uint64_t v48 = v128;
  uint64_t v125 = v41;
  unint64_t v124 = v42;
  do
  {
    if (v45 >= *(void *)(v41 + 16)) {
      goto LABEL_47;
    }
    unint64_t v133 = v45;
    CGFloat v51 = (char **)&v127[4 * v45];
    CGFloat v52 = *v51;
    uint64_t v53 = v51[1];
    if ((_BYTE)v51[3])
    {
      objc_msgSend(v46, sel_edited_range_changeInLength_, 1, v52, v53, 0);
      v129(v48, v131, v134);
      double v54 = &v53[(void)v52];
      if (__OFADD__(v52, v53)) {
        goto LABEL_48;
      }
      if ((uint64_t)v54 < (uint64_t)v52) {
        goto LABEL_50;
      }
      if (v52 != v54)
      {
        unsigned __int8 v55 = *(void **)&v46[v126];
        LODWORD(v136) = v46[v116];
        CGFloat v143 = v55;
        char v56 = v118;
        __C::CGRect v57 = v128;
        CRAttributedString.subscript.getter();
        __C::CGRect v58 = v117;
        uint64_t v59 = v119;
        CRAttributedString.Substring.runs.getter();
        (*v115)(v56, v59);
        CGRect v60 = v138;
        (*v114)(v138, v58, v144);
        CGRect v61 = v112;
        CRAttributedString.Runs.next()();
        CGRect v62 = *v142;
        if ((*v142)(v61, 1, v3) != 1)
        {
          id v63 = *v141;
          while (1)
          {
            v63(v5, v61, v3);
            id v64 = v139;
            CRAttributedString.Runs.Run.attributes.getter();
            CRAttributedString.Attributes<>.nsAttributes(darkMode:)((char)v136);
            (*v43)(v64, v140);
            type metadata accessor for NSAttributedStringKey(0);
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
            v65.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            uint64_t v66 = CRAttributedString.Runs.Run.range.getter();
            uint64_t v67 = CRAttributedString.Runs.Run.range.getter();
            if (__OFSUB__(v68, v67)) {
              break;
            }
            objc_msgSend(v143, sel_setAttributes_range_, v65.super.isa, v66, v68 - v67);

            (*v44)(v5, v3);
            CGFloat v69 = v138;
            CRAttributedString.Runs.next()();
            if (v62(v61, 1, v3) == 1)
            {
              id v49 = v69;
              id v70 = &v146;
              goto LABEL_31;
            }
          }
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        goto LABEL_6;
      }
    }
    else
    {
      double v71 = v51[2];
      objc_msgSend(v46, sel_edited_range_changeInLength_, 2, v52, v53, v71);
      id v72 = v46;
      id v73 = &v71[(void)v53];
      if (__OFADD__(v53, v71)) {
        goto LABEL_49;
      }
      CGFloat v143 = v53;
      double v74 = *(void **)&v72[v126];
      id v75 = v120;
      uint64_t v76 = v47;
      uint64_t v77 = v134;
      v129(v120, v131, v134);
      double v136 = v74;
      id v78 = (void *)CRAttributedString.attributedString.getter();
      uint64_t v79 = v77;
      uint64_t v47 = v76;
      v132(v75, v79);
      id v80 = objc_msgSend(v78, sel_string);

      if (!v80) {
        goto LABEL_58;
      }
      id v81 = objc_msgSend(v80, sel_substringWithRange_, v52, v73);

      id v82 = v143;
      if (!v81)
      {
        uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v81 = (id)MEMORY[0x21054D080](v83);
        swift_bridgeObjectRelease();
      }
      id v84 = v136;
      objc_msgSend(v136, sel_replaceCharactersInRange_withString_, v52, v82, v81);

      uint64_t v48 = v123;
      v129(v123, v131, v134);
      id v85 = &v73[(void)v52];
      if (__OFADD__(v52, v73)) {
        goto LABEL_51;
      }
      if ((uint64_t)v85 < (uint64_t)v52) {
        goto LABEL_52;
      }
      double v46 = v122;
      if (v52 != v85)
      {
        double v86 = *(void **)&v122[v126];
        LODWORD(v136) = v122[v116];
        CGFloat v143 = v86;
        id v87 = v118;
        __C::CGRect v57 = v123;
        CRAttributedString.subscript.getter();
        id v88 = v117;
        uint64_t v89 = v119;
        CRAttributedString.Substring.runs.getter();
        (*v115)(v87, v89);
        CGRect v60 = v137;
        (*v114)(v137, v88, v144);
        id v90 = v111;
        CRAttributedString.Runs.next()();
        char v91 = *v142;
        if ((*v142)(v90, 1, v3) != 1)
        {
          id v92 = *v141;
          while (1)
          {
            v92(v5, v90, v3);
            uint64_t v93 = v139;
            CRAttributedString.Runs.Run.attributes.getter();
            CRAttributedString.Attributes<>.nsAttributes(darkMode:)((char)v136);
            (*v43)(v93, v140);
            type metadata accessor for NSAttributedStringKey(0);
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
            v94.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            uint64_t v95 = CRAttributedString.Runs.Run.range.getter();
            uint64_t v96 = CRAttributedString.Runs.Run.range.getter();
            if (__OFSUB__(v97, v96)) {
              goto LABEL_46;
            }
            objc_msgSend(v143, sel_setAttributes_range_, v94.super.isa, v95, v97 - v96);

            (*v44)(v5, v3);
            double v98 = v137;
            CRAttributedString.Runs.next()();
            if (v91(v90, 1, v3) == 1)
            {
              id v49 = v98;
              id v70 = &v145;
LABEL_31:
              uint64_t v48 = (char *)*(v70 - 32);
              double v46 = v122;
              goto LABEL_7;
            }
          }
        }
LABEL_6:
        id v49 = v60;
        uint64_t v48 = v57;
LABEL_7:
        (*v113)(v49, v144);

        uint64_t v47 = v121;
      }
    }
    unint64_t v45 = v133 + 1;
    v132(v48, v134);
    unint64_t v50 = v124;
    uint64_t v48 = v128;
    uint64_t v41 = v125;
  }
  while (v45 != v124);
  swift_bridgeObjectRelease();
  objc_msgSend(v46, sel_endEditing);
  unint64_t v99 = *(void *)(v41 + 16);
  if (!v99) {
    goto LABEL_53;
  }
  if (v50 > v99)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v100 = *v127;
  uint64_t v101 = *(void *)(v41 + 40);
  double v102 = (uint64_t *)(v41 + 32 * v50);
  uint64_t v103 = *v102;
  uint64_t v104 = v102[1];
  swift_bridgeObjectRelease();
  uint64_t v105 = v100 + v101;
  if (__OFADD__(v100, v101))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (__OFADD__(v103, v104))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v105 <= v103 + v104) {
    uint64_t v105 = v103 + v104;
  }
  if (v100 >= v103) {
    uint64_t v100 = v103;
  }
  if (!__OFSUB__(v105, v100))
  {
    uint64_t v36 = (uint64_t)v110;
    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_59:
  objc_msgSend(v122, sel_endEditing);
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

id CRTextStorage.init(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v2[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode] = 0;
  v2[OBJC_IVAR____TtC8PaperKit13CRTextStorage_isFixingAttributes] = 0;
  uint64_t v5 = &v2[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  uint64_t v8 = v2;
  id v9 = specialized static CRTextStorage.viewAttributedString(from:darkMode:)(a1, 0);
  *(void *)&v8[OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString] = v9;
  id v10 = v9;
  objc_msgSend(v10, sel_fixAttributesInRange_, 0, objc_msgSend(v10, sel_length));

  v13.receiver = v8;
  v13.super_class = ObjectType;
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v11;
}

id CRTextStorage.init()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode] = 0;
  v1[OBJC_IVAR____TtC8PaperKit13CRTextStorage_isFixingAttributes] = 0;
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  uint64_t v7 = v1;
  CRAttributedString.init()();
  uint64_t v8 = &v7[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v7[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString], v6, v3);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v8, v3);
  id v9 = specialized static CRTextStorage.viewAttributedString(from:darkMode:)((uint64_t)v6, 0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(void *)&v7[OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString] = v9;

  v12.receiver = v7;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_init);
}

Swift::Void __swiftcall CRTextStorage.replaceCharacters(in:with:)(__C::_NSRange in, Swift::String with)
{
  unint64_t object = (unint64_t)with._object;
  uint64_t countAndFlagsBits = with._countAndFlagsBits;
  Swift::Int length = in.length;
  Swift::Int location = in.location;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFADD__(location, length))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (location + length < location)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v33 = v15;
  id v34 = v10;
  uint64_t v35 = v13;
  uint64_t v36 = v12;
  uint64_t v37 = v8;
  uint64_t v16 = v2;
  uint64_t v17 = &v2[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
  swift_beginAccess();
  CRAttributedString.replaceSubrange(_:with:)();
  swift_endAccess();
  uint64_t v18 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString;
  id v19 = *(id *)&v2[OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString];
  uint64_t v20 = MEMORY[0x21054D080](countAndFlagsBits, object);
  Swift::Int v21 = length;
  uint64_t v22 = (void *)v20;
  Swift::Int v38 = v21;
  objc_msgSend(v19, sel_replaceCharactersInRange_withString_, location);

  uint64_t v23 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0) {
    uint64_t v23 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v23)
  {
    uint64_t v24 = *(void **)&v2[v18];
    uint64_t v25 = v37;
    uint64_t v26 = v34;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v17, v7);
    id v27 = v24;
    uint64_t v28 = v33;
    CRAttributedString.attributes(at:effectiveRange:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v7);
    CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v16[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode]);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v36);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v30 = String.UTF16View.count.getter();
    swift_bridgeObjectRelease();
    objc_msgSend(v27, sel_setAttributes_range_, isa, location, v30);
  }
  swift_bridgeObjectRetain();
  uint64_t v31 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  if (!__OFSUB__(v31, v38))
  {
    objc_msgSend(v16, sel_edited_range_changeInLength_, 2, location, v38, v31 - v38);
    return;
  }
LABEL_11:
  __break(1u);
}

Swift::Void __swiftcall CRTextStorage.setAttributes(_:range:)(Swift::OpaquePointer_optional _, __C::_NSRange range)
{
  uint64_t v3 = v2;
  Swift::Int location = range.location;
  uint64_t v5 = *(void *)&_.is_nil;
  unint64_t rawValue = _.value._rawValue;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString];
  if (rawValue)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    id v11 = v10;
    v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    id v13 = v10;
    v12.super.Class isa = 0;
  }
  objc_msgSend(v10, sel_setAttributes_range_, v12.super.isa, v5, location);

  if ((v3[OBJC_IVAR____TtC8PaperKit13CRTextStorage_isFixingAttributes] & 1) == 0)
  {
    if (rawValue) {
      unint64_t v14 = (unint64_t)rawValue;
    }
    else {
      unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    char v15 = v3[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode];
    swift_bridgeObjectRetain();
    CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v14, v15);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 0, 1, v16);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    CRAttributedString.setAttributes(_:range:)();
    swift_endAccess();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  }
  objc_msgSend(v3, sel_edited_range_changeInLength_, 1, v5, location, 0);
}

id CRTextStorage.updateAttribute<A>(in:newValue:keypath:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, unsigned int (**a5)(char *, uint64_t, uint64_t), void *a6)
{
  id v73 = a5;
  id v74 = a6;
  double v71 = a3;
  uint64_t v72 = a4;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v68 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  CGFloat v69 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  id v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  unint64_t v67 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  unsigned __int8 v55 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v18 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  double v54 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  id v75 = (char *)&v47 - v21;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v22 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  __C::CGRect v57 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSDictionary v65 = v6;
  uint64_t v24 = &v6[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
  swift_beginAccess();
  id v64 = v24;
  uint64_t v25 = CRAttributedString<>.updateAttribute<A>(in:newValue:keypath:)(a1, a2, v71, v72, v73, (uint64_t)v74);
  id result = (id)swift_endAccess();
  uint64_t v63 = v25[2];
  if (!v63) {
    return (id)swift_bridgeObjectRelease();
  }
  uint64_t v53 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString;
  uint64_t v52 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode;
  CGRect v61 = (uint64_t (**)(char *, char *, uint64_t))(v22 + 16);
  CGRect v62 = v25 + 4;
  CGFloat v51 = (void (**)(char *, uint64_t))(v67 + 8);
  unint64_t v50 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  id v73 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  double v71 = (void (*)(char *))(v11 + 32);
  id v27 = (void (**)(char *, uint64_t))(v68 + 8);
  uint64_t v28 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v48 = (void (**)(char *, uint64_t))(v18 + 8);
  CGRect v60 = (void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v68 = MEMORY[0x263F8EE58] + 8;
  uint64_t v29 = v58;
  uint64_t v30 = v57;
  unint64_t v31 = 0;
  id v49 = v25;
  while (v31 < v25[2])
  {
    unint64_t v67 = v31;
    id v33 = &v62[2 * v31];
    uint64_t v32 = *v33;
    uint64_t v34 = v33[1];
    id result = (id)(*v61)(v30, v64, v29);
    uint64_t v66 = v34;
    BOOL v35 = __OFADD__(v32, v34);
    uint64_t v36 = v32 + v34;
    if (v35) {
      goto LABEL_17;
    }
    if (v36 < v32) {
      goto LABEL_18;
    }
    if (v32 != v36)
    {
      uint64_t v37 = *(void **)&v65[v53];
      LODWORD(v72) = v65[v52];
      id v74 = v37;
      Swift::Int v38 = v55;
      uint64_t v59 = v32;
      CRAttributedString.subscript.getter();
      uint64_t v39 = v54;
      uint64_t v40 = v56;
      CRAttributedString.Substring.runs.getter();
      (*v51)(v38, v40);
      (*v50)(v75, v39, v76);
      CRAttributedString.Runs.next()();
      uint64_t v41 = *v73;
      if ((*v73)(v16, 1, v10) != 1)
      {
        unint64_t v42 = *(void (**)(char *, char *, uint64_t))v71;
        while (1)
        {
          v42(v13, v16, v10);
          uint64_t v43 = v69;
          CRAttributedString.Runs.Run.attributes.getter();
          CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v72);
          (*v27)(v43, v70);
          type metadata accessor for NSAttributedStringKey(0);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
          v44.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          uint64_t v45 = CRAttributedString.Runs.Run.range.getter();
          id result = (id)CRAttributedString.Runs.Run.range.getter();
          if (__OFSUB__(v46, result)) {
            break;
          }
          objc_msgSend(v74, sel_setAttributes_range_, v44.super.isa, v45, v46 - (void)result);

          (*v28)(v13, v10);
          CRAttributedString.Runs.next()();
          if (v41(v16, 1, v10) == 1) {
            goto LABEL_3;
          }
        }
        __break(1u);
        break;
      }
LABEL_3:
      (*v48)(v75, v76);

      uint64_t v29 = v58;
      uint64_t v30 = v57;
      uint64_t v25 = v49;
      uint64_t v32 = v59;
    }
    unint64_t v31 = v67 + 1;
    (*v60)(v30, v29);
    id result = objc_msgSend(v65, sel_edited_range_changeInLength_, 1, v32, v66, 0);
    if (v31 == v63) {
      return (id)swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void @objc CRTextStorage.init(fileURL:options:documentAttributes:)()
{
  uint64_t v0 = type metadata accessor for URL();
  MEMORY[0x270FA5388](v0 - 8);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ObjC metadata update function for CRTextStorage()
{
  return type metadata accessor for CRTextStorage();
}

uint64_t type metadata accessor for CRTextStorage()
{
  uint64_t result = type metadata singleton initialization cache for CRTextStorage;
  if (!type metadata singleton initialization cache for CRTextStorage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for CRTextStorage()
{
  type metadata accessor for CRAttributedString<TextAttributeScope>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for CRAttributedString<TextAttributeScope>()
{
  if (!lazy cache variable for type metadata for CRAttributedString<TextAttributeScope>)
  {
    lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
    unint64_t v0 = type metadata accessor for CRAttributedString();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    }
  }
}

id specialized static CRTextStorage.viewAttributedString(from:darkMode:)(uint64_t a1, int a2)
{
  int v22 = a2;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  uint64_t v21 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v14 = (void *)CRAttributedString.attributedString.getter();
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, v14);

  CRAttributedString.runs.getter();
  uint64_t v29 = v13;
  uint64_t v30 = v11;
  CRAttributedString.Runs.next()();
  uint64_t v15 = v5;
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v26 = v5 + 48;
  if (v25(v10, 1, v4) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v21 + 8))(v29, v30);
    return v28;
  }
  else
  {
    uint64_t v16 = (void (**)(char *, uint64_t))(v24 + 8);
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v24 = v15 + 32;
    v22 &= 1u;
    while (1)
    {
      v23(v7, v10, v4);
      CRAttributedString.Runs.Run.attributes.getter();
      CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v22);
      (*v16)(v3, v27);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
      v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v18 = CRAttributedString.Runs.Run.range.getter();
      id result = (id)CRAttributedString.Runs.Run.range.getter();
      if (__OFSUB__(v20, result)) {
        break;
      }
      objc_msgSend(v28, sel_setAttributes_range_, v17.super.isa, v18, v20 - (void)result);

      (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v4);
      CRAttributedString.Runs.next()();
      if (v25(v10, 1, v4) == 1) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

void specialized static CRTextStorage.setAttributes(from:into:range:darkMode:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v39 = a5;
  uint64_t v43 = a1;
  id v44 = a2;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v38 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  uint64_t v41 = *(void *)(v15 - 8);
  uint64_t v42 = v15;
  MEMORY[0x270FA5388](v15);
  NSDictionary v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v37 - v23;
  if (a3 != a4)
  {
    uint64_t v37 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    CRAttributedString.subscript.getter();
    uint64_t v25 = v42;
    CRAttributedString.Substring.runs.getter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v25);
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v24, v20, v18);
    uint64_t v43 = v18;
    CRAttributedString.Runs.next()();
    uint64_t v41 = *(void *)(v9 + 48);
    uint64_t v42 = v9 + 48;
    uint64_t v26 = v24;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v41)(v14, 1, v8) == 1)
    {
LABEL_6:
      (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v43);
    }
    else
    {
      id v28 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      uint64_t v27 = v9 + 32;
      uint64_t v40 = v28;
      uint64_t v29 = (void (**)(char *, uint64_t))(v38 + 8);
      uint64_t v30 = (void (**)(char *, uint64_t))(v27 - 24);
      v39 &= 1u;
      uint64_t v38 = MEMORY[0x263F8EE58] + 8;
      while (1)
      {
        uint64_t v31 = v27;
        v40(v11, v14, v8);
        uint64_t v32 = v45;
        CRAttributedString.Runs.Run.attributes.getter();
        CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v39);
        (*v29)(v32, v46);
        type metadata accessor for NSAttributedStringKey(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
        v33.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v34 = CRAttributedString.Runs.Run.range.getter();
        uint64_t v35 = CRAttributedString.Runs.Run.range.getter();
        if (__OFSUB__(v36, v35)) {
          break;
        }
        objc_msgSend(v44, sel_setAttributes_range_, v33.super.isa, v34, v36 - v35);

        (*v30)(v11, v8);
        CRAttributedString.Runs.next()();
        uint64_t v27 = v31;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v41)(v14, 1, v8) == 1) {
          goto LABEL_6;
        }
      }
      __break(1u);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>;
  if (!lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>);
  }
  return result;
}

uint64_t outlined init with copy of CRAttributedString<TextAttributeScope>.ObservableDifference?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.ObservableDifference?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of LinkItem.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LinkItem.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of LinkItem.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of LinkItem.targetURL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LinkItem.title.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LinkItem.subtitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of LinkItem.icon.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of LinkItem.dataRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LinkItem.loadPreviewIfNeeded()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of LinkItemDelegate.linkItemDidUpdatePreview(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

id _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit17FormAnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit17fgh4OSo8i36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5j100OIegnrzr_TR03_s8a5Kit13cd35C13sendEventLazy3key7payloadyAA0cD4e10O_SDyAHSo8f31CGyXAtFSDySSAJGSgycfU_Q24_AJtAH_X5XEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return (id)v2;
  }
  uint64_t v30 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v30;
  id result = (id)specialized Dictionary.startIndex.getter(a1);
  uint64_t v6 = (uint64_t)result;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 64;
  int64_t v24 = v1;
  int v25 = v5;
  uint64_t v26 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v27 = v7;
    uint64_t v12 = *(void **)(*(void *)(a1 + 56) + 8 * v6);
    unint64_t v13 = FormAnalyticsKeys.rawValue.getter(*(unsigned char *)(*(void *)(a1 + 48) + v6));
    uint64_t v28 = v14;
    unint64_t v29 = v13;
    unint64_t v16 = *(void *)(v30 + 16);
    unint64_t v15 = *(void *)(v30 + 24);
    id result = v12;
    id v17 = result;
    if (v16 >= v15 >> 1) {
      id result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
    }
    *(void *)(v30 + 16) = v16 + 1;
    uint64_t v18 = (void *)(v30 + 24 * v16);
    v18[4] = v29;
    v18[5] = v28;
    v18[6] = v17;
    int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = a1 + 64;
    uint64_t v19 = *(void *)(v26 + 8 * v11);
    if ((v19 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v25;
    if (*(_DWORD *)(a1 + 36) != v25) {
      goto LABEL_27;
    }
    unint64_t v20 = v19 & (-2 << (v6 & 0x3F));
    if (v20)
    {
      int64_t v9 = __clz(__rbit64(v20)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v24;
    }
    else
    {
      unint64_t v21 = v11 + 1;
      unint64_t v22 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v24;
      if (v11 + 1 < v22)
      {
        unint64_t v23 = *(void *)(v26 + 8 * v21);
        if (v23)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        else
        {
          while (v22 - 2 != v11)
          {
            unint64_t v23 = *(void *)(a1 + 80 + 8 * v11++);
            if (v23)
            {
              unint64_t v21 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v27 + 1;
    uint64_t v6 = v9;
    if (v27 + 1 == v10) {
      return (id)v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t FormAnalyticsKeys.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000036;
  switch(a1)
  {
    case 1:
    case 37:
      unint64_t result = 0x746E656D75636F64;
      break;
    case 2:
      unint64_t result = 0x6F74636576666470;
      break;
    case 3:
      unint64_t result = 0x616D746962666470;
      break;
    case 4:
      unint64_t result = 0x6567646977666470;
      break;
    case 5:
      unint64_t result = 0x6567616D69;
      break;
    case 6:
      unint64_t result = 1685221239;
      break;
    case 7:
      unint64_t result = 0x7365676170;
      break;
    case 8:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 10:
      unint64_t result = 0x6154656C62756F64;
      break;
    case 11:
      unint64_t result = 0x7474754273756C70;
      break;
    case 12:
      unint64_t result = 0x657474656C6170;
      break;
    case 13:
    case 20:
    case 22:
    case 43:
    case 55:
      unint64_t result = 0xD000000000000017;
      break;
    case 14:
      unint64_t result = 0x6C6C69666F747561;
      break;
    case 15:
      unint64_t result = 0x796C6C61756E616DLL;
      break;
    case 16:
      unint64_t result = 0x742077656E206F6ELL;
      break;
    case 17:
      unint64_t result = 0x74786574206F6ELL;
      break;
    case 18:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 19:
      unint64_t result = 0xD000000000000016;
      break;
    case 21:
      unint64_t result = 0xD000000000000012;
      break;
    case 23:
      unint64_t result = 0x6974616D6F747561;
      break;
    case 24:
      unint64_t result = 0x746963696C707865;
      break;
    case 25:
      unint64_t result = 1701736302;
      break;
    case 26:
      unint64_t result = 0xD000000000000023;
      break;
    case 27:
      unint64_t result = 0x74656C6544646964;
      break;
    case 28:
      unint64_t result = 0xD000000000000015;
      break;
    case 29:
      unint64_t result = 0xD000000000000018;
      break;
    case 30:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 31:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 32:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 33:
      unint64_t result = 0x6574614C6E61656DLL;
      break;
    case 34:
      unint64_t result = 0x6E6574614C78616DLL;
      break;
    case 35:
      unint64_t result = 0x5479636E6574616CLL;
      break;
    case 36:
      unint64_t result = 0xD000000000000031;
      break;
    case 38:
    case 39:
    case 40:
      unint64_t result = 0x657079546D726F66;
      break;
    case 41:
      unint64_t result = 0xD000000000000018;
      break;
    case 42:
      unint64_t result = 0xD000000000000013;
      break;
    case 44:
      unint64_t result = 0xD000000000000022;
      break;
    case 45:
      unint64_t result = 0xD000000000000022;
      break;
    case 46:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 47:
      unint64_t result = 0xD000000000000020;
      break;
    case 48:
      unint64_t result = 0xD000000000000022;
      break;
    case 49:
      unint64_t result = 0xD000000000000025;
      break;
    case 50:
      unint64_t result = 0xD000000000000025;
      break;
    case 51:
      unint64_t result = 0xD000000000000022;
      break;
    case 52:
      unint64_t result = 0xD000000000000010;
      break;
    case 53:
      unint64_t result = 0x4674696445646964;
      break;
    case 54:
      unint64_t result = 0xD000000000000018;
      break;
    case 56:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 57:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 58:
      unint64_t result = 0xD000000000000028;
      break;
    case 59:
      unint64_t result = 0xD000000000000029;
      break;
    case 60:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 61:
      unint64_t result = 0xD000000000000016;
      break;
    case 62:
      unint64_t result = 0xD000000000000013;
      break;
    case 63:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 64:
      unint64_t result = 0xD000000000000029;
      break;
    case 65:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 66:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 67:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 68:
      unint64_t result = 0x746553746F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FormAnalyticsKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = FormAnalyticsKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == FormAnalyticsKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FormAnalyticsKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  FormAnalyticsKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FormAnalyticsKeys()
{
  FormAnalyticsKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FormAnalyticsKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  FormAnalyticsKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FormAnalyticsKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized FormAnalyticsKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FormAnalyticsKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = FormAnalyticsKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}