unint64_t MagicPaperUsageAutoRefineEvent.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result;

  result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      result = 0x79636E6574616CLL;
      break;
    case 2:
      result = 0x656C61636F6CLL;
      break;
    case 3:
      result = 0x6874616D5F6D756ELL;
      break;
    case 4:
    case 9:
      result = 0xD000000000000012;
      break;
    case 5:
      result = 0x747865745F6D756ELL;
      break;
    case 6:
      result = 0xD000000000000010;
      break;
    case 7:
      result = 0x6F7274735F6D756ELL;
      break;
    case 8:
      result = 0xD000000000000011;
      break;
    case 10:
      result = 0xD000000000000015;
      break;
    case 11:
      result = 0xD000000000000013;
      break;
    case 12:
      result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t MagicPaperUsageAutoRefineEvent.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x79636E6574616CLL;
      break;
    case 2:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 3:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 4:
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    case 11:
      unint64_t result = 0xD000000000000013;
      break;
    case 12:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MagicPaperUsageAutoRefineEvent.CodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = MagicPaperUsageAutoRefineEvent.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == MagicPaperUsageAutoRefineEvent.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MagicPaperUsageAutoRefineEvent.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MagicPaperUsageAutoRefineEvent.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MagicPaperUsageAutoRefineEvent.CodingKeys()
{
  MagicPaperUsageAutoRefineEvent.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MagicPaperUsageAutoRefineEvent.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MagicPaperUsageAutoRefineEvent.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MagicPaperUsageAutoRefineEvent.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageAutoRefineEvent.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MagicPaperUsageAutoRefineEvent.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MagicPaperUsageAutoRefineEvent.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance MagicPaperUsageAutoRefineEvent.CodingKeys()
{
  return MagicPaperUsageAutoRefineEvent.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance MagicPaperUsageAutoRefineEvent.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageAutoRefineEvent.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MagicPaperUsageAutoRefineEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MagicPaperUsageAutoRefineEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Void __swiftcall MagicPaperUsageAutoRefineEvent.finalize()()
{
  if ((*(unsigned char *)(v0 + 112) & 1) == 0)
  {
    uint64_t v1 = v0;
    unint64_t v2 = (void *)MEMORY[0x210550400](v0 + 120);
    id v3 = objc_msgSend(self, sel_activePencil);
    unsigned __int8 v4 = objc_msgSend(v3, sel_isConnected);

    *(unsigned char *)uint64_t v1 = v4;
    static Locale.preferredLanguages.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v5 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 8) = v5;
    *(void *)(v1 + 16) = v7;
    if (v2)
    {
      char v8 = v2;
      specialized MagicPaperUsageAnalyticsEvent.countGroups(in:)(v8);
    }
    uint64_t v9 = *(void *)(v1 + 32);
    if (v9)
    {
      uint64_t v10 = *(void *)(v1 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v1 + 8) = v10;
      *(void *)(v1 + 16) = v9;
    }
    *(unsigned char *)(v1 + 112) = 1;
  }
}

uint64_t MagicPaperUsageAutoRefineEvent.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MagicPaperUsageAutoRefineEvent.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[5] = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[4] = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[3] = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent.CodingKeys and conformance MagicPaperUsageAutoRefineEvent.CodingKeys);
  }
  return result;
}

unint64_t protocol witness for static AnalyticsEvent.eventName.getter in conformance MagicPaperUsageAutoRefineEvent()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for AnalyticsEvent.isFinalized.getter in conformance MagicPaperUsageAutoRefineEvent()
{
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MagicPaperUsageAutoRefineEvent(void *a1)
{
  return MagicPaperUsageAutoRefineEvent.encode(to:)(a1);
}

unsigned char *storeEnumTagSinglePayload for MagicPaperUsageAutoRefineEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C6CE4C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageAutoRefineEvent.CodingKeys()
{
  return &type metadata for MagicPaperUsageAutoRefineEvent.CodingKeys;
}

uint64_t destroy for MagicPaperUsageAutoRefineEvent()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for MagicPaperUsageAutoRefineEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 68) = *(void *)(a2 + 68);
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for MagicPaperUsageAutoRefineEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for MagicPaperUsageAutoRefineEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 68) = *(void *)(a2 + 68);
  long long v3 = *(_OWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for MagicPaperUsageAutoRefineEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 68) = *(void *)(a2 + 68);
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for MagicPaperUsageAutoRefineEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MagicPaperUsageAutoRefineEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageAutoRefineEvent()
{
  return &type metadata for MagicPaperUsageAutoRefineEvent;
}

unint64_t instantiation function for generic protocol witness table for MagicPaperUsageAutoRefineEvent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MagicPaperUsageAutoRefineEvent and conformance MagicPaperUsageAutoRefineEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type MagicPaperUsageAutoRefineEvent and conformance MagicPaperUsageAutoRefineEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageAutoRefineEvent and conformance MagicPaperUsageAutoRefineEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent and conformance MagicPaperUsageAutoRefineEvent;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent and conformance MagicPaperUsageAutoRefineEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent and conformance MagicPaperUsageAutoRefineEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent and conformance MagicPaperUsageAutoRefineEvent;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent and conformance MagicPaperUsageAutoRefineEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageAutoRefineEvent and conformance MagicPaperUsageAutoRefineEvent);
  }
  return result;
}

unint64_t specialized MagicPaperUsageAutoRefineEvent.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MagicPaperUsageAutoRefineEvent.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xD) {
    return 13;
  }
  else {
    return v3;
  }
}

uint64_t closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[2] = type metadata accessor for MainActor();
  v6[3] = static MainActor.shared.getter();
  uint64_t ObjectType = swift_getObjectType();
  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)(a4 + 32)
                                                                                   + **(int **)(a4 + 32));
  v13 = (void *)swift_task_alloc();
  v6[4] = v13;
  void *v13 = v6;
  v13[1] = closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:);
  v14.n128_f64[0] = a1;
  v15.n128_f64[0] = a2;
  return v17(a5, a6, ObjectType, a4, v14, v15);
}

uint64_t closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:), v3, v2);
}

uint64_t closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

Swift::Void __swiftcall CanvasCollaborationStateView.CollaborationCursor.position(for:)(CGAffineTransform *a1)
{
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  id v59 = v2;
  unint64_t v7 = v1;
  CGFloat b = a1->b;
  CGFloat a = a1->a;
  CGFloat d = a1->d;
  CGFloat c = a1->c;
  CGFloat ty = a1->ty;
  CGFloat tx = a1->tx;
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v65, 0.0);
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    double v52 = v65.tx;
    double v10 = *(double *)(v6 + 32);
    CGFloat v9 = *(double *)(v6 + 40);
    CGFloat v11 = *(double *)(v6 + 48);
    if (v7 >> 62) {
      goto LABEL_16;
    }
    uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12)
    {
      while (1)
      {
        unint64_t v50 = v5;
        unint64_t v5 = 0;
        v6 += 72;
        --v8;
        float64x2_t v51 = (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL);
        while ((v7 & 0xC000000000000001) != 0)
        {
          id v13 = (id)MEMORY[0x21054E050](v5, v7);
LABEL_9:
          __n128 v14 = v13;
          CGAffineTransformMakeRotation(&v65, v52 + v10);
          CGFloat v15 = v65.a;
          CGFloat v16 = v65.b;
          CGFloat v17 = v65.c;
          CGFloat v18 = v65.d;
          CGFloat v20 = v65.tx;
          CGFloat v19 = v65.ty;
          v65.CGFloat a = a;
          v65.CGFloat b = b;
          v65.CGFloat c = c;
          v65.CGFloat d = d;
          v65.CGFloat tx = tx;
          v65.CGFloat ty = ty;
          v66.x = v9;
          v66.y = v11;
          CGPoint v21 = CGPointApplyAffineTransform(v66, &v65);
          id v22 = objc_msgSend(v59, sel_window);
          if (v22)
          {
            v23 = v22;
            id v24 = objc_msgSend(v22, sel_screen);

            objc_msgSend(v24, sel_scale);
            double v60 = v25;

            double v26 = v60;
          }
          else
          {
            double v26 = 1.0;
          }
          float64x2_t v27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v26, 0);
          float64x2_t v28 = vmulq_n_f64((float64x2_t)v21, v26);
          float64x2_t v29 = vrndmq_f64(v28);
          objc_msgSend(v14, sel_setPosition_, vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v28, v29), v51), (int8x16_t)vrndpq_f64(v28), (int8x16_t)v29), v27));
          v65.CGFloat a = v15;
          v65.CGFloat b = v16;
          v65.CGFloat c = v17;
          v65.CGFloat d = v18;
          v65.CGFloat tx = v20;
          v65.CGFloat ty = v19;
          objc_msgSend(v14, sel_setAffineTransform_, &v65);

          if (v8 != v5)
          {
            CGFloat v9 = *(double *)(v6 - 8);
            CGFloat v11 = *(double *)v6;
            double v10 = *(double *)(v6 - 16);
            ++v5;
            v6 += 24;
            if (v12 != v5) {
              continue;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v5 = v50;
          goto LABEL_18;
        }
        if (v5 < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          break;
        }
        __break(1u);
LABEL_16:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        if (!v12) {
          goto LABEL_17;
        }
      }
      id v13 = *(id *)(v7 + 8 * v5 + 32);
      goto LABEL_9;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_18:
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v65, 0.0);
  CGAffineTransformMakeRotation(&v65, v65.tx);
  int64_t v30 = *(void *)(v5 + 16);
  uint64_t v31 = MEMORY[0x263F8EE78];
  if (v30)
  {
    long long v62 = *(_OWORD *)&v65.c;
    long long v63 = *(_OWORD *)&v65.a;
    long long v61 = *(_OWORD *)&v65.tx;
    uint64_t v64 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
    uint64_t v31 = v64;
    v32 = (CGFloat *)(v5 + 40);
    do
    {
      CGFloat v33 = *(v32 - 1);
      CGFloat v34 = *v32;
      *(_OWORD *)&v65.CGFloat a = v63;
      *(_OWORD *)&v65.CGFloat c = v62;
      *(_OWORD *)&v65.CGFloat tx = v61;
      v67.x = v33;
      v67.y = v34;
      CGPoint v35 = CGPointApplyAffineTransform(v67, &v65);
      unint64_t v37 = *(void *)(v64 + 16);
      unint64_t v36 = *(void *)(v64 + 24);
      if (v37 >= v36 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
      }
      *(void *)(v64 + 16) = v37 + 1;
      v38 = (CGPoint *)(v64 + 32 * v37);
      v38[2].x = v33;
      v38[2].y = v34;
      v38[3] = v35;
      v32 += 2;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
  }
  uint64_t v39 = *(void *)(v31 + 16);
  if (v39)
  {
    double v40 = *(double *)(v31 + 32);
    double v41 = *(double *)(v31 + 40);
    uint64_t v42 = v39 - 1;
    if (v42)
    {
      double v43 = *(double *)(v31 + 56);
      v44 = (double *)(v31 + 88);
      do
      {
        double v45 = *(v44 - 3);
        double v46 = *(v44 - 2);
        double v47 = *v44;
        v44 += 4;
        double v48 = v47;
        if (v47 < v43)
        {
          double v40 = v45;
          double v41 = v46;
          double v43 = v48;
        }
        --v42;
      }
      while (v42);
    }
    swift_bridgeObjectRelease();
    v65.CGFloat a = a;
    v65.CGFloat b = b;
    v65.CGFloat c = c;
    v65.CGFloat d = d;
    v65.CGFloat tx = tx;
    v65.CGFloat ty = ty;
    v68.x = v40;
    v68.y = v41;
    CGPoint v49 = CGPointApplyAffineTransform(v68, &v65);
    CanvasCollaborationAvatarView.frameAnchorPoint.setter(v49.x, v49.y + -12.0);
  }
  else
  {
    swift_bridgeObjectRelease();
    __break(1u);
  }
}

void __swiftcall CanvasCollaborationStateView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  isCGFloat a = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  id v7 = objc_msgSend(v3, sel_subviews);
  type metadata accessor for UIView();
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62) {
    goto LABEL_16;
  }
  unint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    do
    {
      while (__OFSUB__(v9--, 1))
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        swift_bridgeObjectRetain();
        unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v9) {
          goto LABEL_11;
        }
      }
      if ((v8 & 0xC000000000000001) != 0)
      {
        id v11 = (id)MEMORY[0x21054E050](v9, v8);
        goto LABEL_9;
      }
      if ((v9 & 0x8000000000000000) != 0) {
        goto LABEL_14;
      }
      if (v9 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_15;
      }
      id v11 = *(id *)(v8 + 32 + 8 * v9);
LABEL_9:
      uint64_t v12 = v11;
      objc_msgSend(v11, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
      id v13 = objc_msgSend(v12, sel_hitTest_withEvent_, isa);
    }
    while (!v13 && v9);
  }
LABEL_11:
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CanvasCollaborationStateView.removeAllHandles()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor)?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v40 - v5;
  id v7 = (unint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit28CanvasCollaborationStateView_selectionCursors);
  swift_beginAccess();
  unint64_t v8 = *v7;
  double v10 = (void *)(*v7 + 64);
  uint64_t v9 = *v10;
  uint64_t v42 = v7;
  double v43 = v10;
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v9;
  int64_t v44 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v45 = v8;
  int64_t v41 = v44 - 1;
  swift_bridgeObjectRetain();
  double v47 = v3;
  int64_t v48 = 0;
  double v46 = v6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v48 << 6);
LABEL_7:
      unint64_t v17 = v45;
      uint64_t v18 = *(void *)(v45 + 48);
      uint64_t v19 = type metadata accessor for UUID();
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v3, v18 + *(void *)(*(void *)(v19 - 8) + 72) * v16, v19);
      CGFloat v20 = (void *)(*(void *)(v17 + 56) + 32 * v16);
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
      id v22 = &v3[*(int *)(v21 + 48)];
      v23 = (void *)v20[1];
      uint64_t v24 = v20[2];
      uint64_t v25 = v20[3];
      *(void *)id v22 = *v20;
      *((void *)v22 + 1) = v23;
      *((void *)v22 + 2) = v24;
      *((void *)v22 + 3) = v25;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v3, 0, 1, v21);
      swift_bridgeObjectRetain();
      id v26 = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    int64_t v27 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      goto LABEL_39;
    }
    if (v27 < v44)
    {
      unint64_t v28 = v43[v27];
      if (v28) {
        goto LABEL_11;
      }
      int64_t v29 = v48 + 2;
      ++v48;
      if (v27 + 1 < v44)
      {
        unint64_t v28 = v43[v29];
        if (v28) {
          goto LABEL_14;
        }
        int64_t v48 = v27 + 1;
        if (v27 + 2 < v44)
        {
          unint64_t v28 = v43[v27 + 2];
          if (v28)
          {
            v27 += 2;
            goto LABEL_11;
          }
          int64_t v29 = v27 + 3;
          int64_t v48 = v27 + 2;
          if (v27 + 3 < v44) {
            break;
          }
        }
      }
    }
LABEL_25:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v3, 1, 1, v30);
    unint64_t v13 = 0;
LABEL_26:
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v3, (uint64_t)v6, &demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor)?);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v6, 1, v31) == 1)
    {
      swift_release();
      unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      *uint64_t v42 = v39;
      swift_bridgeObjectRelease();
      return;
    }
    v32 = &v6[*(int *)(v31 + 48)];
    uint64_t v33 = *(void *)v32;
    CGFloat v34 = (void *)*((void *)v32 + 1);
    if (*(void *)v32 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      if (!v35) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v35 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v35) {
        goto LABEL_4;
      }
    }
    if (v35 < 1)
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    for (uint64_t i = 0; i != v35; ++i)
    {
      if ((v33 & 0xC000000000000001) != 0) {
        id v37 = (id)MEMORY[0x21054E050](i, v33);
      }
      else {
        id v37 = *(id *)(v33 + 8 * i + 32);
      }
      v38 = v37;
      objc_msgSend(v37, sel_removeFromSuperlayer);
    }
LABEL_4:
    swift_bridgeObjectRelease();
    objc_msgSend(v34, sel_removeFromSuperview);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v14 = type metadata accessor for UUID();
    uint64_t v6 = v46;
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v46, v14);
    uint64_t v3 = v47;
  }
  unint64_t v28 = v43[v29];
  if (v28)
  {
LABEL_14:
    int64_t v27 = v29;
LABEL_11:
    unint64_t v13 = (v28 - 1) & v28;
    unint64_t v16 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v48 = v27;
    goto LABEL_7;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v44)
    {
      int64_t v48 = v41;
      goto LABEL_25;
    }
    unint64_t v28 = v43[v27];
    ++v29;
    if (v28) {
      goto LABEL_11;
    }
  }
LABEL_40:
  __break(1u);
}

Swift::Void __swiftcall CanvasCollaborationStateView.removeOldHandles()()
{
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  uint64_t v1 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  v89 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<CanvasState>);
  uint64_t v3 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  v87 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v92 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor)?);
  MEMORY[0x270FA5388](v8 - 8);
  double v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v68 - v13;
  uint64_t v15 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit28CanvasCollaborationStateView_canvas, v12);
  if (!v15) {
    return;
  }
  unint64_t v16 = (char *)v15;
  uint64_t v17 = v15 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  swift_beginAccess();
  if (!MEMORY[0x210550400](v17))
  {

    return;
  }
  uint64_t v18 = *(void *)(v17 + 8);
  uint64_t v19 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit28CanvasCollaborationStateView_selectionCursors);
  swift_beginAccess();
  uint64_t v20 = *v19;
  uint64_t v21 = *(void *)(*v19 + 64);
  uint64_t v71 = *v19 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v97 = v23 & v21;
  id v70 = v16;
  uint64_t v24 = &v16[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasState];
  uint64_t v77 = v20;
  swift_bridgeObjectRetain();
  v86 = v24;
  swift_beginAccess();
  int64_t v93 = 0;
  uint64_t v76 = v92 + 16;
  v85 = (void (**)(char *, char *, uint64_t))(v92 + 32);
  v84 = (void (**)(char *, char *, uint64_t))(v3 + 16);
  v83 = (void (**)(char *, uint64_t))(v3 + 8);
  v82 = (void (**)(char *, uint64_t))(v1 + 8);
  uint64_t v74 = v18;
  uint64_t v73 = v18 + 40;
  uint64_t v25 = v19;
  v94 = (void (**)(char *, uint64_t))(v92 + 8);
  int64_t v72 = (unint64_t)(v22 + 63) >> 6;
  int64_t v69 = v72 - 1;
  uint64_t v79 = v5;
  v78 = v7;
  v81 = v10;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v97)
    {
      unint64_t v28 = __clz(__rbit64(v97));
      v97 &= v97 - 1;
      unint64_t v29 = v28 | (v93 << 6);
LABEL_11:
      uint64_t v30 = v77;
      (*(void (**)(char *, unint64_t, uint64_t))(v92 + 16))(v10, *(void *)(v77 + 48) + *(void *)(v92 + 72) * v29, v5);
      uint64_t v31 = (uint64_t *)(*(void *)(v30 + 56) + 32 * v29);
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
      uint64_t v33 = &v10[*(int *)(v32 + 48)];
      uint64_t v34 = *v31;
      uint64_t v35 = (void *)v31[1];
      uint64_t v36 = v31[2];
      uint64_t v37 = v31[3];
      *(void *)uint64_t v33 = v34;
      *((void *)v33 + 1) = v35;
      *((void *)v33 + 2) = v36;
      *((void *)v33 + 3) = v37;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v10, 0, 1, v32);
      swift_bridgeObjectRetain();
      id v38 = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    int64_t v39 = v93 + 1;
    if (__OFADD__(v93, 1)) {
      goto LABEL_53;
    }
    if (v39 < v72)
    {
      unint64_t v40 = *(void *)(v71 + 8 * v39);
      if (v40) {
        goto LABEL_15;
      }
      int64_t v41 = v93 + 2;
      ++v93;
      if (v39 + 1 < v72)
      {
        unint64_t v40 = *(void *)(v71 + 8 * v41);
        if (v40) {
          goto LABEL_18;
        }
        int64_t v93 = v39 + 1;
        if (v39 + 2 < v72)
        {
          unint64_t v40 = *(void *)(v71 + 8 * (v39 + 2));
          if (v40)
          {
            v39 += 2;
            goto LABEL_15;
          }
          int64_t v41 = v39 + 3;
          int64_t v93 = v39 + 2;
          if (v39 + 3 < v72) {
            break;
          }
        }
      }
    }
LABEL_29:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v10, 1, 1, v42);
    unint64_t v97 = 0;
LABEL_30:
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor)?);
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: CanvasCollaborationStateView.CollaborationCursor));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v14, 1, v43) == 1)
    {

      swift_unknownObjectRelease();
      swift_release();
      return;
    }
    int64_t v44 = &v14[*(int *)(v43 + 48)];
    unint64_t v45 = v14;
    unint64_t v47 = *(void *)v44;
    double v46 = (void *)*((void *)v44 + 1);
    uint64_t v48 = *((void *)v44 + 2);
    uint64_t v95 = *((void *)v44 + 3);
    uint64_t v96 = v48;
    (*v85)(v7, v45, v5);
    CGPoint v49 = v87;
    uint64_t v50 = v88;
    (*v84)(v87, v86, v88);
    swift_getKeyPath();
    lazy protocol witness table accessor for type CanvasState and conformance CanvasState(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
    float64x2_t v51 = v89;
    Capsule<>.subscript.getter();
    swift_release();
    (*v83)(v49, v50);
    uint64_t v52 = v90;
    CRDictionary.subscript.getter();
    (*v82)(v51, v52);
    uint64_t v53 = v101;
    if (v101)
    {
      v91 = v46;
      v54 = v25;
      uint64_t v56 = v99;
      uint64_t v55 = v100;
      if (*(void *)(v102 + 16) || *(void *)(v103 + 16))
      {
        uint64_t ObjectType = swift_getObjectType();
        swift_bridgeObjectRetain();
        outlined consume of TimestampedSelection?(v56, v55, v53);
        char v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 40))(v55, v53, ObjectType);
        swift_bridgeObjectRelease();
        uint64_t v5 = v79;
        id v7 = v78;
        uint64_t v25 = v54;
        double v46 = v91;
        if (v58)
        {
          (*v94)(v78, v79);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
      }
      else
      {
        outlined consume of TimestampedSelection?(v99, v100, v101);
        uint64_t v5 = v79;
        id v7 = v78;
        uint64_t v25 = v54;
        double v46 = v91;
      }
    }
    if (v47 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      if (v59)
      {
LABEL_39:
        if (v59 < 1)
        {
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        for (uint64_t j = 0; j != v59; ++j)
        {
          if ((v47 & 0xC000000000000001) != 0) {
            id v61 = (id)MEMORY[0x21054E050](j, v47);
          }
          else {
            id v61 = *(id *)(v47 + 8 * j + 32);
          }
          long long v62 = v61;
          objc_msgSend(v61, sel_removeFromSuperlayer);
        }
      }
    }
    else
    {
      uint64_t v59 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v59) {
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    objc_msgSend(v46, sel_removeFromSuperview);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    char v65 = v64;
    swift_bridgeObjectRelease();
    if (v65)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = *v25;
      uint64_t v98 = *v25;
      *uint64_t v25 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v67 = v98;
      }
      (*(void (**)(unint64_t, uint64_t))(v92 + 8))(*(void *)(v67 + 48) + *(void *)(v92 + 72) * v63, v5);
      uint64_t v26 = v98;
      int64_t v27 = *(void **)(*(void *)(v98 + 56) + 32 * v63 + 8);
      specialized _NativeDictionary._delete(at:)(v63, v98);
      *uint64_t v25 = v26;
      uint64_t v5 = v79;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v7 = v78;
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    (*v94)(v7, v5);
LABEL_8:
    double v10 = v81;
  }
  unint64_t v40 = *(void *)(v71 + 8 * v41);
  if (v40)
  {
LABEL_18:
    int64_t v39 = v41;
LABEL_15:
    unint64_t v97 = (v40 - 1) & v40;
    unint64_t v29 = __clz(__rbit64(v40)) + (v39 << 6);
    int64_t v93 = v39;
    goto LABEL_11;
  }
  while (1)
  {
    int64_t v39 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v39 >= v72)
    {
      int64_t v93 = v69;
      goto LABEL_29;
    }
    unint64_t v40 = *(void *)(v71 + 8 * v39);
    ++v41;
    if (v40) {
      goto LABEL_15;
    }
  }
LABEL_54:
  __break(1u);
}

Swift::Void __swiftcall CanvasCollaborationStateView.layoutSubviews()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v161 = v1;
  uint64_t v162 = v2;
  MEMORY[0x270FA5388](v1);
  v164 = (char *)v135 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v140 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  v160 = (char *)v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v166 = (uint64_t)v135 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v157 = (uint64_t)v135 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: TimestampedSelection)?);
  MEMORY[0x270FA5388](v10 - 8);
  v150 = (char *)v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v141 = (char *)v135 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v135 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<CanvasState>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>.Iterator);
  uint64_t v136 = *(void *)(v149 - 8);
  MEMORY[0x270FA5388](v149);
  v154 = (char *)v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (objc_class *)type metadata accessor for CanvasCollaborationStateView();
  v171.receiver = v0;
  v171.super_class = v23;
  objc_msgSendSuper2(&v171, sel_layoutSubviews);
  v139 = v0;
  uint64_t v24 = MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit28CanvasCollaborationStateView_canvas]);
  if (!v24) {
    goto LABEL_55;
  }
  uint64_t v25 = (char *)v24;
  uint64_t v167 = v15;
  uint64_t v26 = (unsigned char *)(v24 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  if (*v26 != 1
    || (int64_t v27 = &v25[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource],
        swift_beginAccess(),
        (uint64_t v138 = MEMORY[0x210550400](v27)) == 0))
  {

LABEL_55:
    CanvasCollaborationStateView.removeAllHandles()();
    return;
  }
  uint64_t v137 = *((void *)v27 + 1);
  unint64_t v28 = self;
  objc_msgSend(v28, sel_begin);
  v135[0] = v28;
  objc_msgSend(v28, sel_setDisableActions_, 1);
  unint64_t v29 = &v25[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasState];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v29, v18);
  swift_getKeyPath();
  lazy protocol witness table accessor for type CanvasState and conformance CanvasState(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  CRDictionary.makeIterator()();
  (*(void (**)(char *, uint64_t))(v167 + 8))(v17, v14);
  v142 = (CGFloat *)&v139[OBJC_IVAR____TtC8PaperKit28CanvasCollaborationStateView_selectionCursors];
  swift_beginAccess();
  uint64_t v30 = (uint64_t)v141;
  uint64_t v144 = 0;
  v145 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v140 + 32);
  uint64_t v167 = v140 + 8;
  v135[1] = (id)(v137 + 40);
  uint64_t v158 = v162 + 32;
  v159 = (void (**)(uint64_t, uint64_t, uint64_t))(v140 + 16);
  uint64_t v31 = (void *)MEMORY[0x263F8EED0];
  uint64_t v32 = v149;
  v156 = v25;
  while (1)
  {
    while (1)
    {
      uint64_t v39 = (uint64_t)v150;
      CRDictionary.Iterator.next()();
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v39, v30, &demangling cache variable for type metadata for (key: UUID, value: TimestampedSelection)?);
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: TimestampedSelection));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v30, 1, v40) == 1)
      {
        (*(void (**)(char *, uint64_t))(v136 + 8))(v154, v32);
        CanvasCollaborationStateView.removeOldHandles()();
        objc_msgSend(v135[0], sel_commit);

        swift_unknownObjectRelease();
        return;
      }
      int64_t v41 = (void *)(v30 + *(int *)(v40 + 48));
      uint64_t v42 = v41[2];
      uint64_t v147 = v41[1];
      uint64_t v43 = v41[3];
      uint64_t v44 = v41[4];
      uint64_t v45 = v157;
      uint64_t v46 = (*v145)(v157, v30, v4);
      uint64_t v47 = v166;
      (*(void (**)(uint64_t))((*v31 & *v156) + 0x3E0))(v46);
      lazy protocol witness table accessor for type CanvasState and conformance CanvasState((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v49 = v47;
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))v167;
      (*(void (**)(uint64_t, uint64_t))v167)(v49, v4);
      if (v48)
      {
        v50(v45, v4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      uint64_t v155 = v44;
      uint64_t v146 = v42;
      uint64_t v51 = v43;
      if (*(void *)(v43 + 16)) {
        break;
      }
      if (*(void *)(v155 + 16)) {
        break;
      }
      uint64_t ObjectType = swift_getObjectType();
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 40))(v147, v146, ObjectType) & 1) == 0) {
        break;
      }
      v50(v157, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_11:
      swift_bridgeObjectRelease();
      uint64_t v31 = (void *)MEMORY[0x263F8EED0];
      uint64_t v32 = v149;
    }
    uint64_t v53 = v50;
    uint64_t v54 = *(void *)v142;
    uint64_t v55 = v157;
    if (*(void *)(*(void *)v142 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
      if (v57)
      {
        char v58 = (unint64_t *)(*(void *)(v54 + 56) + 32 * v56);
        uint64_t v59 = (void *)v58[1];
        unint64_t v60 = v58[2];
        unint64_t v61 = v58[3];
        unint64_t v148 = *v58;
        swift_bridgeObjectRetain();
        v153 = v59;
        id v62 = v59;
        unint64_t v152 = v60;
        swift_bridgeObjectRetain();
        unint64_t v151 = v61;
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v148 = 0;
        unint64_t v152 = 0;
        v153 = 0;
        unint64_t v151 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v148 = 0;
      unint64_t v152 = 0;
      v153 = 0;
      unint64_t v151 = 0;
    }
    uint64_t v143 = v51;
    v165 = v53;
    uint64_t v63 = v155;
    int64_t v64 = *(void *)(v155 + 16);
    if (v64)
    {
      *(void *)&v170.CGFloat a = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64, 0);
      uint64_t v65 = v63 + ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80));
      id v163 = *(id *)(v140 + 72);
      CGPoint v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v140 + 16);
      do
      {
        uint64_t v67 = v166;
        v66(v166, v65, v4);
        v66((uint64_t)v160, v67, v4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
        WeakRef.init(id:)();
        v165(v67, v4);
        CGFloat a = v170.a;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&a + 16) + 1, 1);
          CGFloat a = v170.a;
        }
        unint64_t v70 = *(void *)(*(void *)&a + 16);
        unint64_t v69 = *(void *)(*(void *)&a + 24);
        if (v70 >= v69 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
          CGFloat a = v170.a;
        }
        *(void *)(*(void *)&a + 16) = v70 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v162 + 32))(*(void *)&a+ ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80))+ *(void *)(v162 + 72) * v70, v164, v161);
        v65 += (uint64_t)v163;
        --v64;
      }
      while (v64);
      uint64_t v63 = v155;
      swift_bridgeObjectRelease();
    }
    else
    {
      CGFloat a = MEMORY[0x263F8EE78];
    }
    v170.CGFloat a = a;
    id v71 = v156;
    uint64_t v31 = (void *)MEMORY[0x263F8EED0];
    int64_t v72 = *(double (**)(CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v156) + 0x3D8);
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    uint64_t v74 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], &demangling cache variable for type metadata for [WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    CGFloat v75 = v72(&v170, v73, v74);
    CGFloat v77 = v76;
    CGFloat v79 = v78;
    CGFloat v81 = v80;
    swift_bridgeObjectRelease();
    v82 = v71;
    uint64_t v83 = swift_bridgeObjectRetain();
    uint64_t v84 = v144;
    unint64_t v85 = specialized Sequence.compactMap<A>(_:)(v83, v82);
    uint64_t v144 = v84;
    swift_bridgeObjectRelease();

    specialized static CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace(for:strokeBounds:rotateSingleElements:multiSelectionRotation:)(v85, *(void *)(v63 + 16) == 0, &v172, v75, v77, v79, v81, 0.0);
    long long v86 = v172;
    CGFloat v87 = v173;
    CGFloat v88 = v174;
    CGFloat v89 = v175;
    CGFloat v90 = v176;
    swift_bridgeObjectRelease();
    *(_OWORD *)&v170.CGFloat a = v86;
    v170.CGFloat c = v87;
    v170.CGFloat d = v88;
    v170.CGFloat tx = v89;
    v170.CGFloat ty = v90;
    if (CGAffineTransformIsIdentity(&v170)) {
      break;
    }
    uint64_t v98 = (void *)(*(uint64_t (**)(void))((*v31 & *v82) + 0x308))();
    double v99 = 1.0;
    double v100 = 1.0;
    uint64_t v101 = v146;
    if (v98)
    {
      uint64_t v102 = v98;
      objc_msgSend(v98, sel_zoomScale);
      double v100 = v103;
    }
    (*(void (**)(void *__return_ptr))((*v31 & *v82) + 0x5D0))(v177);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v177, (uint64_t)&v178, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
    uint64_t v104 = v157;
    if ((v180 & 1) == 0) {
      double v99 = sqrt(v178 * v178 + v179 * v179);
    }
    CGAffineTransformMakeScale(&v170, v100 * v99, v100 * v99);
    long long v105 = *(_OWORD *)&v170.a;
    long long v106 = *(_OWORD *)&v170.c;
    long long v107 = *(_OWORD *)&v170.tx;
    *(_OWORD *)&v170.CGFloat a = v86;
    v170.CGFloat c = v87;
    v170.CGFloat d = v88;
    v170.CGFloat tx = v89;
    v170.CGFloat ty = v90;
    *(_OWORD *)&v169.CGFloat a = v105;
    *(_OWORD *)&v169.CGFloat c = v106;
    *(_OWORD *)&v169.CGFloat tx = v107;
    CGAffineTransformConcat(&v168, &v170, &v169);
    forCGFloat a = v168;
    uint64_t v108 = v148;
    if (v148)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v109 = v108;
      v110 = v153;
      id v163 = v153;
      id v111 = v153;
      uint64_t v112 = v104;
      v113 = v165;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v114 = v138;
      swift_unknownObjectRetain();
      id v163 = v139;
      uint64_t v109 = specialized CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(v147, v101, v163, v114, v137);
      v116 = v115;
      uint64_t v147 = v117;
      uint64_t v119 = v118;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v159)(v166, v104, v4);
      v120 = v142;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      id v121 = v116;
      uint64_t v122 = v147;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v169.CGFloat a = *v120;
      CGFloat *v120 = -0.0;
      uint64_t v124 = v122;
      uint64_t v125 = v166;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v109, (uint64_t)v121, v124, v119, v166, isUniquelyReferenced_nonNull_native);
      CGFloat *v120 = v169.a;
      uint64_t v126 = v157;
      swift_bridgeObjectRelease();
      v113 = v165;
      v165(v125, v4);
      swift_endAccess();
      specialized CanvasCollaborationStateView.CollaborationCursor.add(to:)(v163, v109, (uint64_t)v121);
      swift_bridgeObjectRetain();
      id v163 = v121;
      id v127 = v121;
      uint64_t v112 = v126;
      id v111 = v127;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v110 = v153;
    }
    outlined copy of CanvasCollaborationStateView.CollaborationCursor?(v108, v110);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    id v128 = v111;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CanvasCollaborationStateView.CollaborationCursor.position(for:)(&fora);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v113(v112, v4);
    uint64_t v37 = v109;
    id v38 = v163;
LABEL_7:
    outlined consume of CanvasCollaborationStateView.CollaborationCursor?(v37, v38);
    uint64_t v30 = (uint64_t)v141;
    uint64_t v32 = v149;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v91 = v142;
  unint64_t v92 = v148;
  if (!v148)
  {
LABEL_51:
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v130 = specialized __RawDictionaryStorage.find<A>(_:)(v157);
    char v132 = v131;
    swift_bridgeObjectRelease();
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    if (v132)
    {
      char v133 = swift_isUniquelyReferenced_nonNull_native();
      CGFloat v134 = *v91;
      v169.CGFloat a = *v91;
      CGFloat *v91 = -0.0;
      if ((v133 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        CGFloat v134 = v169.a;
      }
      v165(*(void *)(*(void *)&v134 + 48) + *(void *)(v140 + 72) * v130, v4);
      CGFloat v33 = v169.a;
      uint64_t v34 = (uint64_t *)(*(void *)(*(void *)&v169.a + 56) + 32 * v130);
      uint64_t v35 = *v34;
      uint64_t v36 = (void *)v34[1];
      specialized _NativeDictionary._delete(at:)(v130, *(uint64_t *)&v169.a);
      CGFloat *v91 = v33;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    outlined consume of CanvasCollaborationStateView.CollaborationCursor?(v35, v36);
    v165(v157, v4);
    uint64_t v37 = v148;
    id v38 = v153;
    goto LABEL_7;
  }
  if (!(v148 >> 62))
  {
    uint64_t v93 = *(void *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined copy of CanvasCollaborationStateView.CollaborationCursor?(v148, v153);
    swift_bridgeObjectRetain();
    v94 = &selRef_strokeUUID;
    if (v93) {
      goto LABEL_35;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    v129 = v153;
    objc_msgSend(v153, sel_removeFromSuperview);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v31 = (void *)MEMORY[0x263F8EED0];
    goto LABEL_51;
  }
  outlined copy of CanvasCollaborationStateView.CollaborationCursor?(v148, v153);
  swift_bridgeObjectRetain();
  uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
  v94 = &selRef_strokeUUID;
  if (!v93) {
    goto LABEL_50;
  }
LABEL_35:
  if (v93 >= 1)
  {
    for (uint64_t i = 0; i != v93; ++i)
    {
      if ((v92 & 0xC000000000000001) != 0) {
        id v96 = (id)MEMORY[0x21054E050](i, v92);
      }
      else {
        id v96 = *(id *)(v92 + 8 * i + 32);
      }
      unint64_t v97 = v96;
      [v96 v94[339]];
    }
    goto LABEL_50;
  }
  __break(1u);
}

id CanvasCollaborationStateView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasCollaborationStateView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasCollaborationStateView()
{
  return self;
}

uint64_t destroy for CanvasCollaborationStateView.CollaborationCursor(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CanvasCollaborationStateView.CollaborationCursor(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  id v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CanvasCollaborationStateView.CollaborationCursor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CanvasCollaborationStateView.CollaborationCursor(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasCollaborationStateView.CollaborationCursor(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasCollaborationStateView.CollaborationCursor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasCollaborationStateView.CollaborationCursor()
{
  return &type metadata for CanvasCollaborationStateView.CollaborationCursor;
}

uint64_t outlined consume of TimestampedSelection?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CanvasState and conformance CanvasState(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So7CALayerCs5NeverOTg50149_s8PaperKit28CanvasCollaborationStateViewC0D6CursorV3for17boundingSuperview28participantDetailsDataSourceAESS_So6UIViewCAA011ParticipantlmN0_ptcfcSo7D8CSiXEfU_So10CGColorRefaTf1cn_nTf4ng_n(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = MEMORY[0x263F8EE78];
  if (!v3) {
    return result;
  }
  uint64_t v10 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if (a2 < v4 || v3 < 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  do
  {
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F15908]), sel_init);
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
    objc_msgSend(v8, sel_setFrame_, -6.0, -6.0, 4.0, 10.0);
    objc_msgSend(v9, sel_setFrame_, -6.0, -6.0, 10.0, 4.0);
    objc_msgSend(v7, sel_addSublayer_, v8);
    objc_msgSend(v7, sel_addSublayer_, v9);
    objc_msgSend(v7, sel_setAnchorPoint_, 0.0, 0.0);
    objc_msgSend(v9, sel_setBackgroundColor_, a3);
    objc_msgSend(v8, sel_setBackgroundColor_, a3);
    objc_msgSend(v9, sel_setAllowsEdgeAntialiasing_, 1);
    objc_msgSend(v8, sel_setAllowsEdgeAntialiasing_, 1);

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    --v3;
  }
  while (v3);
  return v10;
}

uint64_t outlined copy of CanvasCollaborationStateView.CollaborationCursor?(uint64_t result, void *a2)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    id v3 = a2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of CanvasCollaborationStateView.CollaborationCursor?(uint64_t result, void *a2)
{
  if (result)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CGFloat, CGPoint)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_20C8352C0;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 48) = 0;
  *(void *)(v9 + 32) = 0;
  *(_OWORD *)(v9 + 56) = xmmword_20C846C10;
  *(_OWORD *)(v9 + 72) = xmmword_20C846C20;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v9 + 88) = _Q0;
  *(_OWORD *)(v9 + 104) = xmmword_20C846C30;
  *(void *)(v9 + 120) = 0x3FF0000000000000;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(a1, a2, ObjectType, a5);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(a1, a2, ObjectType, a5);
  uint64_t v18 = v17;
  id v19 = v16;
  uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So7CALayerCs5NeverOTg50149_s8PaperKit28CanvasCollaborationStateViewC0D6CursorV3for17boundingSuperview28participantDetailsDataSourceAESS_So6UIViewCAA011ParticipantlmN0_ptcfcSo7D8CSiXEfU_So10CGColorRefaTf1cn_nTf4ng_n(0, 4, (uint64_t)v19);

  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v19);
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a4;
  v22[3] = a5;
  v22[4] = a1;
  v22[5] = a2;
  id v23 = objc_allocWithZone((Class)type metadata accessor for CanvasCollaborationAvatarView());
  CanvasCollaborationAvatarView.init(name:color:boundingSuperview:fetchImage:)(v25, v18, v21, a3, (uint64_t)&async function pointer to partial apply for closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:), (uint64_t)v22);

  return v20;
}

id specialized CanvasCollaborationStateView.CollaborationCursor.add(to:)(void *a1, unint64_t a2, uint64_t a3)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = (uint64_t)result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_10;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = 0;
  do
  {
    if ((a2 & 0xC000000000000001) != 0) {
      id v9 = (id)MEMORY[0x21054E050](v8, a2);
    }
    else {
      id v9 = *(id *)(a2 + 8 * v8 + 32);
    }
    uint64_t v10 = v9;
    ++v8;
    id v11 = objc_msgSend(a1, sel_layer);
    objc_msgSend(v11, sel_addSublayer_, v10);
  }
  while (v6 != v8);
LABEL_10:
  swift_bridgeObjectRelease();
  return objc_msgSend(a1, sel_addSubview_, a3);
}

uint64_t sub_20C6D2238()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(double a1, double a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return closure #2 in CanvasCollaborationStateView.CollaborationCursor.init(for:boundingSuperview:participantDetailsDataSource:)(a1, a2, v6, v7, v9, v8);
}

id EmptyLinkView.init()()
{
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for EmptyLinkView();
  id v1 = objc_msgSendSuper2(&v7, sel_init);
  uint64_t v2 = self;
  id v3 = v1;
  id v4 = objc_msgSend(v2, sel_systemFillColor);
  objc_msgSend(v3, sel_setBackgroundColor_, v4);

  id v5 = objc_msgSend(v3, sel_layer);
  if (one-time initialization token for resizeCornerRadius != -1) {
    swift_once();
  }
  objc_msgSend(v5, sel_setCornerRadius_, *(double *)&static UIConstants.resizeCornerRadius);

  return v3;
}

id EmptyLinkView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EmptyLinkView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for EmptyLinkView()
{
  return self;
}

void SignatureStyleEditingController.updateUI()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  unint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v62 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v56 = (char *)&v51 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v55 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v0;
  uint64_t v58 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_signatureStyleEditingView);
  unint64_t v10 = SignatureStyleEditingView.strokeWidthControls.getter();
  unint64_t v11 = v10;
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v13 = &selRef_magicPaperViewControllerImageGenerationEvent_;
    if (v12) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v13 = &selRef_magicPaperViewControllerImageGenerationEvent_;
    if (v12)
    {
LABEL_3:
      if (v12 < 1) {
        goto LABEL_42;
      }
      uint64_t v14 = 0;
      do
      {
        if ((v11 & 0xC000000000000001) != 0) {
          id v15 = (id)MEMORY[0x21054E050](v14, v11);
        }
        else {
          id v15 = *(id *)(v11 + 8 * v14 + 32);
        }
        uint64_t v16 = v15;
        ++v14;
        objc_msgSend(v15, sel_setEnabled_, 0);
        objc_msgSend(v16, sel_setSelected_, 0);
      }
      while (v12 != v14);
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v1 = v57 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_controller;
  uint64_t v17 = MEMORY[0x210550400](v57 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_controller);
  if (!v17) {
    goto LABEL_45;
  }
  uint64_t v18 = (void *)v17;
  uint64_t v19 = v17 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x210550400](v17 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {

    goto LABEL_45;
  }
  uint64_t v20 = *(void *)(v19 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(ObjectType, v20);

  swift_unknownObjectRelease();
  if (!v22) {
    goto LABEL_45;
  }
  AnyCanvas.selectedSignatureElements.getter();
  unint64_t v2 = v23;

  if (v2 >> 62) {
    goto LABEL_43;
  }
  uint64_t v24 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v24) {
    goto LABEL_44;
  }
  do
  {
    uint64_t v52 = v1;
    uint64_t v25 = 0;
    unint64_t v60 = v2 & 0xC000000000000001;
    unint64_t v54 = v2 + 32;
    CGPoint v66 = (void (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v67 = (void (**)(uint64_t, char *, uint64_t))(v4 + 16);
    unint64_t v4 = (unint64_t)v55;
    uint64_t v1 = (uint64_t)v56;
    unint64_t v53 = v2;
    uint64_t v59 = v24;
    while (1)
    {
      id v27 = v60 ? (id)MEMORY[0x21054E050](v25, v2) : *(id *)(v54 + 8 * v25);
      id v68 = v27;
      BOOL v28 = __OFADD__(v25, 1);
      uint64_t v29 = v25 + 1;
      if (v28) {
        break;
      }
      uint64_t v61 = v29;
      uint64_t v65 = type metadata accessor for SignatureView();
      uint64_t v30 = (void *)swift_dynamicCastClassUnconditional();
      uint64_t v31 = (char *)v30 + *(void *)((*MEMORY[0x263F8EED0] & *v30) + 0x380);
      swift_beginAccess();
      int64_t v64 = *v67;
      v64(v1, v31, v3);
      swift_getKeyPath();
      unint64_t v63 = lazy protocol witness table accessor for type Signature and conformance Signature();
      Capsule<>.subscript.getter();
      swift_release();
      uint64_t v32 = *v66;
      (*v66)(v1, v3);
      CGFloat v33 = v69;
      if (!v69)
      {
        uint64_t v26 = type metadata accessor for PKDrawing();
        (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v4, 1, 1, v26);
LABEL_17:
        outlined destroy of PKDrawing?(v4);
        goto LABEL_18;
      }
      outlined init with copy of PKDrawing?((uint64_t)v69 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, v4);

      uint64_t v34 = type metadata accessor for PKDrawing();
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v4, 1, v34) == 1)goto LABEL_17; {
      outlined destroy of PKDrawing?(v4);
      }
      unint64_t v35 = SignatureStyleEditingView.strokeWidthControls.getter();
      unint64_t v2 = v35;
      if (v35 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
        if (v36)
        {
LABEL_27:
          unint64_t v4 = v2 & 0xC000000000000001;
          uint64_t v1 = 4;
          uint64_t v37 = 0;
          if ((v2 & 0xC000000000000001) != 0)
          {
LABEL_28:
            id v38 = (id)MEMORY[0x21054E050](v37, v2);
            goto LABEL_30;
          }
          while (1)
          {
            id v38 = *(id *)(v2 + 8 * v1);
LABEL_30:
            uint64_t v39 = v38;
            uint64_t v13 = (char **)(v37 + 1);
            if (__OFADD__(v37, 1)) {
              break;
            }
            objc_msgSend(v38, sel_setEnabled_, 1);
            uint64_t v40 = (char *)swift_dynamicCastClassUnconditional();
            int64_t v41 = v62;
            v64((uint64_t)v62, &v40[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v40) + 0x380)], v3);
            swift_getKeyPath();
            Capsule<>.subscript.getter();
            swift_release();
            v32((uint64_t)v41, v3);
            if ((v70 & 1) == 0) {
              objc_msgSend(v39, sel_setSelected_, v69 == objc_msgSend(v39, sel_width));
            }

            if (v13 == (char **)v36) {
              goto LABEL_37;
            }
            uint64_t v37 = ++v1 - 4;
            if (v4) {
              goto LABEL_28;
            }
          }
          __break(1u);
          break;
        }
      }
      else
      {
        uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v36) {
          goto LABEL_27;
        }
      }
LABEL_37:
      swift_bridgeObjectRelease_n();
      uint64_t v13 = &selRef_magicPaperViewControllerImageGenerationEvent_;
      unint64_t v4 = (unint64_t)v55;
      uint64_t v1 = (uint64_t)v56;
      unint64_t v2 = v53;
LABEL_18:
      uint64_t v25 = v61;

      if (v25 == v59)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v1 = v52;
        goto LABEL_45;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  }
  while (v24);
LABEL_44:
  swift_bridgeObjectRelease_n();
LABEL_45:
  uint64_t v42 = *(void **)(v58 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_colorSwatch);
  if (v42)
  {
    uint64_t v43 = (void *)MEMORY[0x210550400](v1);
    uint64_t v44 = v42;
    if (!v43
      || (uint64_t v45 = CanvasElementController.selectedSignatureColors()(), v43, !v45)
      || (id v46 = (id)specialized Collection.first.getter(v45), swift_bridgeObjectRelease(), !v46))
    {
      id v46 = objc_msgSend(self, sel_blackColor);
    }
    uint64_t v47 = *(void **)&v44[OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor];
    *(void *)&v44[OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor] = v46;
    id v48 = v46;

    ColorSwatch.updateUI()();
    uint64_t v49 = *(unsigned __int8 *)(v57 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_isColorPickerPresented);
    uint64_t v50 = (objc_class *)type metadata accessor for ColorSwatch();
    v71.receiver = v44;
    v71.super_class = v50;
    objc_msgSendSuper2(&v71, v13[324], v49);
    ColorSwatch.updateUI()();
  }
}

uint64_t SignatureStyleEditingController.canvasUserInterfaceStyle.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_controller);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    {
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t ObjectType = swift_getObjectType();
      id v7 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);

      swift_unknownObjectRelease();
      if (v7)
      {
LABEL_8:
        id v10 = objc_msgSend(v7, sel_traitCollection);
        id v11 = objc_msgSend(v10, sel_userInterfaceStyle);

        return (uint64_t)v11;
      }
    }
    else
    {
    }
  }
  id v8 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_signatureStyleEditingView), sel_window);
  if (v8)
  {
    uint64_t v9 = v8;
    id v7 = objc_msgSend(v8, sel_rootViewController);

    if (v7) {
      goto LABEL_8;
    }
  }
  return 1;
}

void SignatureStyleEditingController.didTapColorSwatch(sender:)(uint64_t a1)
{
  id v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_signatureStyleEditingView), sel_window);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_rootViewController);

    if (v5)
    {
      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825E0]), sel_init);
      objc_msgSend(v15, sel_setModalPresentationStyle_, 7);
      uint64_t v6 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor);
      if (v6)
      {
        id v7 = v6;
        SignatureStyleEditingController.canvasUserInterfaceStyle.getter();
        id v8 = (void *)static PKInkingTool.convertColor(_:from:to:)();
        objc_msgSend(v15, sel_setSelectedColor_, v8);
      }
      id v9 = objc_msgSend(v15, sel_popoverPresentationController);
      if (v9)
      {
        id v10 = v9;
        objc_msgSend(v9, sel_setSourceView_, a1);
      }
      id v11 = objc_msgSend(v15, sel_popoverPresentationController);
      if (v11)
      {
        uint64_t v12 = v11;
        objc_msgSend(v11, sel_setDelegate_, v1);
      }
      id v13 = objc_msgSend(v15, sel_popoverPresentationController);
      if (v13)
      {
        uint64_t v14 = v13;
        objc_msgSend(v13, sel__setIgnoresKeyboardNotifications_, 1);
      }
      objc_msgSend(v15, sel__setShouldUseDarkGridInDarkMode_, 1);
      objc_msgSend(v15, sel_setDelegate_, v1);
      objc_msgSend(v5, sel_presentViewController_animated_completion_, v15, 1, 0);
      *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_isColorPickerPresented) = 1;
      SignatureStyleEditingController.updateUI()();
    }
  }
}

uint64_t type metadata accessor for SignatureStyleEditingController()
{
  return self;
}

void specialized SignatureStyleEditingController.colorPickerViewController(_:didSelect:continuously:)(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    SignatureStyleEditingController.canvasUserInterfaceStyle.getter();
    id v3 = (void *)static PKInkingTool.convertColor(_:from:to:)();
    uint64_t v4 = MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit31SignatureStyleEditingController_controller);
    if (v4)
    {
      id v5 = (unsigned char *)v4;
      uint64_t v6 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      if (MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
      {
        uint64_t v7 = *(void *)(v6 + 8);
        uint64_t ObjectType = swift_getObjectType();
        id v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
        id v10 = v3;
        id v11 = (void *)v9(ObjectType, v7);
        swift_unknownObjectRelease();
        if (v11)
        {
          uint64_t v12 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
          v5[OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle] = 1;
          uint64_t v13 = *(void *)((char *)v11 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
          if (!v13)
          {
            __break(1u);
            return;
          }
          (*(void (**)(void *__return_ptr, void, void, void, void))((*MEMORY[0x263F8EED0] & *v11)
                                                                                       + 0x440))(v18, *(void *)(v13 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(void *)(v13 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(void *)(v13 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v13 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
          uint64_t v14 = v19;
          uint64_t v15 = v20;
          __swift_project_boxed_opaque_existential_1(v18, v19);
          id v16 = v10;
          Color.init(cgColor:)((CGColor *)objc_msgSend(v16, sel_CGColor), &v17);

          (*(void (**)(CGColor **, uint64_t, uint64_t))(v15 + 112))(&v17, v14, v15);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
          v5[v12] = 0;
        }
        else
        {
        }
      }
      else
      {
      }
    }
    SignatureStyleEditingController.updateUI()();
  }
}

uint64_t type metadata completion function for ContainerCanvasElementView()
{
  return swift_initClassMetadata2();
}

void *protocol witness for AnyContainerCanvasElementView.drawingView.getter in conformance ContainerCanvasElementView<A>()
{
  uint64_t v0 = (void *)specialized ContainerCanvasElementView.drawingView.getter();
  id v1 = v0;
  return v0;
}

uint64_t protocol witness for AnyContainerCanvasElementView.updateUI() in conformance ContainerCanvasElementView<A>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x488))();
}

void *protocol witness for AnyContainerCanvasElementView.formFillingView.getter in conformance ContainerCanvasElementView<A>()
{
  uint64_t v0 = (void *)specialized ContainerCanvasElementView.formFillingView.getter();
  id v1 = v0;
  return v0;
}

Swift::Void __swiftcall ContainerCanvasElementView.endLiveEdit(undoable:discard:)(Swift::Bool undoable, Swift::Bool discard)
{
  if (ContainerCanvasElementView.isInLiveEdit.getter())
  {
    CanvasElementView.endLiveEdit(undoable:discard:)(undoable, discard);
    ContainerCanvasElementView.transformDrawing()();
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.screenScaleDidChange()()
{
  unint64_t v0 = ContainerCanvasElementView.subelementViews.getter();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_10;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (void *)MEMORY[0x21054E050](v3, v1);
      }
      else {
        id v5 = *(id *)(v1 + 8 * v3 + 32);
      }
      uint64_t v6 = v5;
      ++v3;
      (*(void (**)(void))((*v4 & *v5) + 0x270))();
    }
    while (v2 != v3);
    goto LABEL_10;
  }
  __break(1u);
}

unint64_t ContainerCanvasElementView.didZoom(in:)(uint64_t a1)
{
  unint64_t result = ContainerCanvasElementView.subelementViews.getter();
  unint64_t v3 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = (void *)MEMORY[0x263F8EED0];
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      uint64_t v7 = (void *)MEMORY[0x21054E050](v5, v3);
    }
    else {
      uint64_t v7 = *(id *)(v3 + 8 * v5 + 32);
    }
    id v8 = v7;
    ++v5;
    (*(void (**)(uint64_t))((*v6 & *v7) + 0x280))(a1);
  }
  while (v4 != v5);
LABEL_10:
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ContainerCanvasElementView.didBeginDrawing()()
{
  uint64_t v1 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v3)
    {
      __break(1u);
      return;
    }
    uint64_t v4 = (uint64_t *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    if (*(void *)(v5 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v7 = 1;
    }
    else
    {
      uint64_t v8 = *(void *)(v6 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v7 = v8 != 0;
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  id v9 = (void *)MEMORY[0x263F8EED0];
  *((unsigned char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4E8)) = v7;
  id v10 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v10)
  {
    id v11 = v10;
    (*(void (**)())((*v9 & *v10) + 0x5D8))();
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.updateUI()()
{
  CanvasElementView.updateUI()();
  ContainerCanvasElementView.updateDrawing()();
  ContainerCanvasElementView.updateSubelements()();
  ContainerCanvasElementView.updateFormFillingView()();
}

void ContainerCanvasElementView.drawingDidChange(newDrawing:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void (*)(char *, uint64_t))(*MEMORY[0x263F8EED0] & *v1);
  uint64_t v52 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v56 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  unint64_t v53 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *((void *)v4 + 150);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v55 = *((void *)v4 + 149);
  uint64_t v51 = v14;
  uint64_t v57 = type metadata accessor for Capsule();
  uint64_t v15 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v45 - v17;
  if (*((unsigned char *)v2 + *((void *)v4 + 159))) {
    return;
  }
  uint64_t v47 = v8;
  uint64_t v48 = v6;
  uint64_t v49 = v5;
  uint64_t v50 = v18;
  uint64_t v20 = CanvasElementView.canvasElement.getter((uint64_t)&v45 - v17);
  MEMORY[0x270FA5388](v20);
  *(&v45 - 4) = v55;
  *(&v45 - 3) = v13;
  uint64_t v21 = a1;
  uint64_t v22 = *((void *)v52 + 151);
  *(&v45 - 2) = v22;
  swift_getKeyPath();
  uint64_t v23 = v57;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v24 = v23;
  uint64_t v25 = v21;
  uint64_t v52 = *(void (**)(char *, uint64_t))(v15 + 8);
  v52(v19, v24);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v12, 1, v26);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  BOOL v28 = v53;
  uint64_t v29 = v21;
  uint64_t v30 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v53, v29, v54);
  if (v27 == 1)
  {
    uint64_t v46 = v22;
    swift_getKeyPath();
    _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    uint64_t v31 = v47;
    Capsule<>.subscript.getter();
    swift_release();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    uint64_t v32 = v28;
    uint64_t v33 = v49;
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v35 = v58[0];
    uint64_t v34 = v58[1];
    (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v33);
    uint64_t v36 = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v32, v30);
    uint64_t v37 = v50;
    if (v34 != v35)
    {
      MEMORY[0x270FA5388](v36);
      uint64_t v38 = v46;
      *(&v45 - 4) = v13;
      *(&v45 - 3) = v38;
      *(&v45 - 2) = v25;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      goto LABEL_7;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v28, v30);
    uint64_t v37 = v50;
  }
  swift_beginAccess();
  type metadata accessor for PKDrawingStruct();
  _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule.merge<A>(_:)();
LABEL_7:
  swift_endAccess();
  uint64_t v39 = MEMORY[0x210550400]((char *)v2 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v39)
  {
    uint64_t v40 = (void *)v39;
    uint64_t v41 = v39 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
    swift_beginAccess();
    if (MEMORY[0x210550400](v41))
    {
      uint64_t v42 = *(void *)(v41 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t))(v42 + 16))(v40, ObjectType, v42);
      swift_unknownObjectRelease();
    }
    CanvasElementView.canvasElement.getter(v37);
    LOBYTE(v58[0]) = 4;
    AnyCanvas.merge<A>(_:from:)(v37, (unsigned __int8 *)v58, v55, v51);
    uint64_t v44 = ((uint64_t (*)(uint64_t, uint64_t))v52)(v37, v57);
    (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v40) + 0x318))(v44);
  }
}

void ContainerCanvasElementView.canvas.getter()
{
}

double ContainerCanvasElementView.modelBounds.getter()
{
  uint64_t v1 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v2 = v1[149];
  uint64_t v3 = v1[150];
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v9 - v6;
  CanvasElementView.canvasElement.getter((uint64_t)v9 - v6);
  v9[0] = v2;
  v9[1] = v3;
  v9[2] = v1[151];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return *(double *)&v9[4];
}

BOOL ContainerCanvasElementView.isInLiveEdit.getter()
{
  if (CanvasElementView.isInLiveEdit.getter()) {
    return 1;
  }
  uint64_t v2 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4C0));
  return v2 && *(void *)(v2 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink) != 0;
}

unint64_t ContainerCanvasElementView.didScroll(in:)(uint64_t a1)
{
  unint64_t result = ContainerCanvasElementView.subelementViews.getter();
  unint64_t v3 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = (void *)MEMORY[0x263F8EED0];
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      uint64_t v7 = (void *)MEMORY[0x21054E050](v5, v3);
    }
    else {
      uint64_t v7 = *(id *)(v3 + 8 * v5 + 32);
    }
    uint64_t v8 = v7;
    ++v5;
    (*(void (**)(uint64_t))((*v6 & *v7) + 0x278))(a1);
  }
  while (v4 != v5);
LABEL_10:
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ContainerCanvasElementView.updateFrame()()
{
  uint64_t v1 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v2 = v1[149];
  uint64_t v3 = v1[150];
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v11[-v7];
  uint64_t v9 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v6);
  if (v9)
  {

    CanvasElementView.updateFrame()();
  }
  else
  {
    uint64_t v10 = CanvasElementView.canvasElement.getter((uint64_t)v8);
    MEMORY[0x270FA5388](v10);
    *(void *)&v11[-32] = v2;
    *(void *)&v11[-24] = v3;
    *(void *)&v11[-16] = v1[151];
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
    objc_msgSend(v0, sel_setFrame_, 0.0, 0.0, v12, v13);
  }
}

unint64_t ContainerCanvasElementView.pencilKitAttachmentViews()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IndexSet();
  uint64_t v46 = *(void *)(v2 - 8);
  uint64_t v47 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v45 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  MEMORY[0x270FA5388](v4);
  double v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = *(void **)&v0[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x4C0)];
  unint64_t v12 = MEMORY[0x263F8EE78];
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_20C835790;
    *(void *)(v13 + 32) = v11;
    unint64_t v51 = v13;
    id v14 = v11;
    specialized Array._endMutation()();
    unint64_t v15 = v51;
  }
  else
  {
    unint64_t v15 = MEMORY[0x263F8EE78];
  }
  unint64_t v51 = v15;
  uint64_t v16 = (uint64_t)v1;
  uint64_t v17 = ContainerCanvasElementView.subelementViews.getter();
  uint64_t v18 = v17;
  unint64_t v50 = v12;
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0) {
      uint64_t v16 = v17;
    }
    else {
      uint64_t v16 = v17 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19) {
      goto LABEL_6;
    }
LABEL_17:
    swift_bridgeObjectRelease_n();
    unint64_t v24 = MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  uint64_t v19 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v19) {
    goto LABEL_17;
  }
LABEL_6:
  if (v19 < 1) {
    goto LABEL_40;
  }
  uint64_t v20 = 0;
  do
  {
    if ((v18 & 0xC000000000000001) != 0) {
      uint64_t v21 = (void *)MEMORY[0x21054E050](v20, v18);
    }
    else {
      uint64_t v21 = *(id *)(v18 + 8 * v20 + 32);
    }
    uint64_t v22 = v21;
    ++v20;
    unint64_t v23 = (*(uint64_t (**)(void))((*v10 & *v21) + 0x298))();

    specialized Array.append<A>(contentsOf:)(v23);
  }
  while (v19 != v20);
  swift_bridgeObjectRelease_n();
  unint64_t v24 = v50;
LABEL_18:
  specialized Array.append<A>(contentsOf:)(v24);
  uint64_t v25 = (void *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement]);
  if (v25)
  {
  }
  else
  {
    uint64_t v26 = (void *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
    if (v26)
    {
      int v27 = v26;
      (*(void (**)(void))((*v10 & *v26) + 0x300))();

      uint64_t v29 = v48;
      uint64_t v28 = v49;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v9, v6, v49);
      uint64_t v30 = ContainerCanvasElementView.unorderedSubelementViews.getter();
      if (*(void *)(v30 + 16) && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v32 & 1) != 0))
      {
        uint64_t v1 = (char *)*(id *)(*(void *)(v30 + 56) + 8 * v31);
        swift_bridgeObjectRelease();
        uint64_t v16 = v51;
        if (v51 >> 62) {
          goto LABEL_41;
        }
        uint64_t v33 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v34 = v1;
        swift_bridgeObjectRetain();
        for (; v33; uint64_t v33 = _CocoaArrayWrapper.endIndex.getter())
        {
          uint64_t v35 = 0;
          while (1)
          {
            id v36 = (v16 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x21054E050](v35, v16)
                : *(id *)(v16 + 8 * v35 + 32);
            uint64_t v37 = v36;
            type metadata accessor for CanvasElementDrawingView();
            uint64_t v38 = swift_dynamicCastClass();
            if (v38)
            {
              uint64_t v39 = (char *)MEMORY[0x210550400](v38 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);

              if (v39)
              {

                if (v39 == v1)
                {
                  swift_bridgeObjectRelease();

                  uint64_t v42 = v45;
                  IndexSet.init(integer:)();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKAttachmentView]);
                  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [PKAttachmentView] and conformance [A], &demangling cache variable for type metadata for [PKAttachmentView]);
                  MutableCollection.move(fromOffsets:toOffset:)();

                  (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v47);
                  (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v49);
                  return v51;
                }
              }
            }
            else
            {
            }
            uint64_t v40 = v35 + 1;
            if (__OFADD__(v35, 1)) {
              break;
            }
            ++v35;
            if (v40 == v33) {
              goto LABEL_36;
            }
          }
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          uint64_t v43 = v1;
          swift_bridgeObjectRetain();
        }
LABEL_36:
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v49);
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
      }
    }
  }
  return v51;
}

void __swiftcall ContainerCanvasElementView.boundsTransform()(CGAffineTransform *__return_ptr retstr)
{
  uint64_t v3 = (void *)(*MEMORY[0x263F8EED0] & *v1);
  uint64_t v4 = v3[149];
  uint64_t v5 = v3[150];
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v8);
  if (v11)
  {

    CanvasElementView.modelFrame.getter();
    double v13 = v12;
    uint64_t v14 = CanvasElementView.canvasElement.getter((uint64_t)v10);
    MEMORY[0x270FA5388](v14);
    *((void *)&v23 - 4) = v4;
    *((void *)&v23 - 3) = v5;
    *((void *)&v23 - 2) = v3[151];
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    CGAffineTransformMakeScale(&v23, v13 / v23.c, v13 / v23.c);
  }
  else
  {
    v24.origin.CGFloat x = ContainerCanvasElementView.modelBounds.getter();
    CGFloat x = v24.origin.x;
    CGFloat y = v24.origin.y;
    CGFloat width = v24.size.width;
    CGFloat height = v24.size.height;
    CGFloat v19 = -CGRectGetMinX(v24);
    v25.origin.CGFloat x = x;
    v25.origin.CGFloat y = y;
    v25.size.CGFloat width = width;
    v25.size.CGFloat height = height;
    CGFloat MinY = CGRectGetMinY(v25);
    CGAffineTransformMakeTranslation(&v23, v19, -MinY);
  }
  long long v21 = *(_OWORD *)&v23.c;
  long long v22 = *(_OWORD *)&v23.tx;
  *(_OWORD *)&retstr->CGFloat a = *(_OWORD *)&v23.a;
  *(_OWORD *)&retstr->CGFloat c = v21;
  *(_OWORD *)&retstr->CGFloat tx = v22;
}

Swift::Void __swiftcall ContainerCanvasElementView.drawingSelectionDidChange()()
{
  uint64_t v1 = type metadata accessor for PKDrawing();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = (id)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v3);
  if (!v6)
  {
    uint64_t v7 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (!v7) {
      return;
    }
    double v8 = (void *)MEMORY[0x263F8EED0];
    uint64_t v9 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x320);
    id v22 = v7;
    uint64_t v10 = v9();
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      double v12 = *(void **)((char *)v0 + *(void *)((*v8 & *v0) + 0x4C0));
      if (v12)
      {
        id v13 = objc_msgSend(v12, sel_drawing);
        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

        PKDrawing._bridgeToObjectiveC()(v14);
        uint64_t v16 = v15;
        id v17 = objc_msgSend(v15, sel_uuid);

        (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
        id v18 = objc_msgSend(v11, sel_selectedStrokeIdsForAttachment_, v17);
        type metadata accessor for UUID();
        _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        MEMORY[0x270FA5388](v20);
        *(&v21 - 2) = v19;
        AnyCanvas.updateCanvasState(_:)();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
    }
    id v6 = v22;
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.updateGestures()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  CanvasElementView.updateGestures()();
  double v3 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (void *)(*(uint64_t (**)(void))((*v2 & *v3) + 0x320))();

    if (v5)
    {
      id v6 = objc_msgSend(v5, sel_canvasView);

      if (v6)
      {
        id v7 = objc_msgSend(v6, sel_drawingGestureRecognizer);

        id v22 = objc_msgSend(v7, sel_view);
        if (v22)
        {
          double v8 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
          if (v8 && (v8, (AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
            || *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x4E0)))
          {
          }
          else
          {
            CGAffineTransform v23 = v1;
            id v9 = objc_allocWithZone(MEMORY[0x263F82CB0]);
            type metadata accessor for ContainerCanvasElementView();
            id v10 = objc_msgSend(v9, sel_initWithTarget_action_, _bridgeAnythingToObjectiveC<A>(_:)(), sel_rootTapped_);
            swift_unknownObjectRelease();
            uint64_t v11 = *(void *)((*v2 & *v1) + 0x4E0);
            double v12 = *(void **)((char *)v1 + v11);
            *(void *)((char *)v1 + v11) = v10;

            uint64_t v13 = *v2 & *v1;
            uint64_t v14 = *(void **)((char *)v1 + *(void *)(v13 + 0x4E0));
            if (v14)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              uint64_t v15 = swift_allocObject();
              *(_OWORD *)(v15 + 16) = xmmword_20C835790;
              id v16 = v14;
              *(NSNumber *)(v15 + 32) = Int._bridgeToObjectiveC()();
              CGAffineTransform v23 = (void *)v15;
              specialized Array._endMutation()();
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
              isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              objc_msgSend(v16, sel_setAllowedTouchTypes_, isa);

              uint64_t v13 = *v2 & *v1;
            }
            id v18 = *(void **)((char *)v1 + *(void *)(v13 + 1248));
            if (v18)
            {
              uint64_t v19 = one-time initialization token for selectionAllowableMovementForFingerDrawingTap;
              id v20 = v18;
              if (v19 != -1) {
                swift_once();
              }
              objc_msgSend(v20, sel_setAllowableMovement_, *(double *)&static UIConstants.selectionAllowableMovementForFingerDrawingTap, v22, v23);

              uint64_t v13 = *v2 & *v1;
            }
            uint64_t v21 = *(void **)((char *)v1 + *(void *)(v13 + 1248));
            if (v21)
            {
              objc_msgSend(v21, sel_setDelegate_, v1);
              uint64_t v13 = *v2 & *v1;
            }
            if (*(void *)((char *)v1 + *(void *)(v13 + 1248)))
            {
              objc_msgSend(v22, sel_addGestureRecognizer_);
            }
            else
            {
              __break(1u);
            }
          }
        }
      }
    }
  }
}

uint64_t ContainerCanvasElementView.drawingView.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4C0)) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t ContainerCanvasElementView.subelementsContainerView.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4C8)) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t ContainerCanvasElementView.formFillingView.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4D0)) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t ContainerCanvasElementView.subelementViews.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  double v3 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4C8));
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!v3) {
    goto LABEL_19;
  }
  id v5 = objc_msgSend(v3, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = v4;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v7 = result;
    if (result) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_4:
      if (v7 < 1)
      {
        __break(1u);
        return result;
      }
      for (uint64_t i = 0; i != v7; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0) {
          id v10 = (id)MEMORY[0x21054E050](i, v6);
        }
        else {
          id v10 = *(id *)(v6 + 8 * i + 32);
        }
        uint64_t v11 = v10;
        type metadata accessor for AnyCanvasElementView();
        if (swift_dynamicCastClass())
        {
          MEMORY[0x21054D330]();
          if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v4 = v15;
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = MEMORY[0x263F8EE78];
LABEL_18:
  swift_bridgeObjectRelease();
LABEL_19:
  double v12 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v12
    && (uint64_t v13 = v12,
        (*(void (**)(uint64_t *__return_ptr))((*v2 & *v12) + 0x2C8))(&v15),
        v13,
        v15 == 1))
  {
    unint64_t v14 = ContainerCanvasElementView.transientFormFields.getter();
  }
  else
  {
    unint64_t v14 = MEMORY[0x263F8EE78];
  }
  uint64_t v15 = v4;
  specialized Array.append<A>(contentsOf:)(v14);
  return v15;
}

unint64_t ContainerCanvasElementView.subelementViewsForHitTesting.getter()
{
  unint64_t result = ContainerCanvasElementView.subelementViews.getter();
  unint64_t v1 = result;
  unint64_t v8 = MEMORY[0x263F8EE78];
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    unint64_t v7 = MEMORY[0x263F8EE78];
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    goto LABEL_14;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v5 = (void *)MEMORY[0x21054E050](v3, v1);
    }
    else {
      id v5 = *(id *)(v1 + 8 * v3 + 32);
    }
    unint64_t v6 = v5;
    if ((*(uint64_t (**)(void))((*v4 & *v5) + 0x218))())
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v3;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease();
  unint64_t v7 = v8;
LABEL_15:
  return specialized Sequence.reversed()(v7);
}

uint64_t ContainerCanvasElementView.unorderedSubelementViews.getter()
{
  unint64_t v1 = (void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4D8));
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  unint64_t v3 = ContainerCanvasElementView.unorderedTransientSubelementViews.getter();
  return specialized Dictionary.merging(_:uniquingKeysWith:)(v3, v2);
}

uint64_t ContainerCanvasElementView.rootTapGestureRecognizer.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4E0)) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t ContainerCanvasElementView.selectionExistedAtStartOfTap.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4E8));
}

uint64_t ContainerCanvasElementView.selectionExistedAtStartOfTap.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4E8)) = result;
  return result;
}

unint64_t ContainerCanvasElementView.selectedSubelementViews.getter()
{
  unint64_t result = ContainerCanvasElementView.subelementViews.getter();
  unint64_t v1 = result;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!(result >> 62))
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_14;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)MEMORY[0x263F8EED0];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (void *)MEMORY[0x21054E050](v3, v1);
      }
      else {
        id v5 = *(id *)(v1 + 8 * v3 + 32);
      }
      unint64_t v6 = v5;
      if ((*(uint64_t (**)(void))((*v4 & *v5) + 0x228))())
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      ++v3;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

Swift::Void __swiftcall ContainerCanvasElementView.createSubelementsContainerViewIfNeeded()()
{
  unint64_t v1 = (void *)MEMORY[0x263F8EED0];
  if (!*(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4C8)))
  {
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v2, sel_setFrame_);
    objc_msgSend(v2, sel_setClipsToBounds_, 1);
    objc_msgSend(v2, sel_setUserInteractionEnabled_, 0);
    if (*(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x4C0))) {
      objc_msgSend(v0, sel_insertSubview_belowSubview_, v2);
    }
    else {
      objc_msgSend(v0, sel_addSubview_, v2);
    }
    uint64_t v3 = *(void *)((*v1 & *v0) + 0x4C8);
    uint64_t v4 = *(void **)((char *)v0 + v3);
    *(void *)((char *)v0 + v3) = v2;
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.updateSubelements()()
{
  unint64_t v1 = v0;
  uint64_t v2 = *MEMORY[0x263F8EED0] & *v0;
  uint64_t v208 = v2;
  uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
  MEMORY[0x270FA5388](v174);
  double v173 = (char *)&v167 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v185 = (char *)&v167 - v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>);
  uint64_t v178 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  v183 = (char *)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  v177 = (char *)&v167 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v196 = (uint64_t)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = (void (**)(void, void))type metadata accessor for CRKeyPath();
  uint64_t v211 = (uint64_t)*(v209 - 1);
  MEMORY[0x270FA5388](v209);
  v207 = (char *)&v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v210 = (char *)&v167 - v14;
  MEMORY[0x270FA5388](v15);
  v182 = (char *)&v167 - v16;
  MEMORY[0x270FA5388](v17);
  v188 = (char *)&v167 - v18;
  uint64_t v187 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v189 = *(void *)(v187 - 8);
  MEMORY[0x270FA5388](v187);
  double v176 = (char *)&v167 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v20 - 8);
  v205 = (char *)&v167 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v184 = *(void *)(v179 - 8);
  MEMORY[0x270FA5388](v179);
  CGAffineTransform v23 = (char *)&v167 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v2 + 1192);
  uint64_t v25 = *(void *)(v2 + 1200);
  uint64_t v195 = *(void *)(v25 + 16);
  uint64_t v26 = type metadata accessor for Capsule();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v167 - v28;
  int64_t v206 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  uint64_t v175 = *(void *)(v206 - 8);
  double v30 = MEMORY[0x270FA5388](v206);
  char v32 = (char *)&v167 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v30);
  if (!v33) {
    return;
  }
  uint64_t v34 = (char *)v33;
  uint64_t v181 = v6;
  uint64_t v35 = v25;
  id v36 = self;
  objc_msgSend(v36, sel_begin);
  id v172 = v36;
  objc_msgSend(v36, sel_setAnimationDuration_, 0.0);
  uint64_t v37 = ContainerCanvasElementView.unorderedSubelementViews.getter();
  uint64_t v216 = specialized Set.init<A>(_:)(v37);
  uint64_t v38 = CanvasElementView.canvasElement.getter((uint64_t)v29);
  MEMORY[0x270FA5388](v38);
  uint64_t v203 = v24;
  *(&v167 - 4) = v24;
  *(&v167 - 3) = v35;
  uint64_t v168 = *(void *)(v208 + 1208);
  *(&v167 - 2) = v168;
  swift_getKeyPath();
  uint64_t v170 = v35;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v204 = v29;
  uint64_t v199 = v26;
  uint64_t v198 = v27 + 8;
  v197 = v39;
  v39((uint64_t)v29, v26);
  uint64_t v40 = v179;
  CROrderedSet.makeIterator()();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v184 + 8);
  v184 += 8;
  CGAffineTransform v169 = v41;
  v41(v23, v40);
  uint64_t v42 = (void *)MEMORY[0x263F8EED0];
  v194 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4D8));
  id v186 = v34;
  v200 = &v34[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasViewController];
  v201 = v32;
  uint64_t v43 = v205;
  CROrderedSet.Iterator.next()();
  uint64_t v44 = v189;
  uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48);
  uint64_t v46 = v187;
  uint64_t v193 = v189 + 48;
  v192 = v45;
  unsigned int v47 = v45(v43, 1, v187);
  v202 = v1;
  objc_super v171 = v23;
  uint64_t v48 = v207;
  uint64_t v49 = v42;
  uint64_t v50 = (uint64_t)v188;
  unint64_t v51 = v176;
  uint64_t v52 = v209;
  if (v47 != 1)
  {
    unint64_t v97 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    uint64_t v96 = v44 + 32;
    v191 = v97;
    uint64_t v208 = v211 + 8;
    v190 = (void (**)(char *, uint64_t))(v96 - 24);
    char v180 = (void (**)(char *, char *, void (**)(void, void)))(v211 + 16);
    uint64_t v189 = v96;
    v97(v176, v43, v46);
    while (1)
    {
      MEMORY[0x21054BEC0](v46);
      uint64_t v100 = v196;
      specialized Set._Variant.remove(_:)(v50, v196);
      outlined destroy of StocksKitCurrencyCache.Provider?(v100, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      if (*(void *)(ContainerCanvasElementView.unorderedSubelementViews.getter() + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v50);
        char v102 = v101;
        swift_bridgeObjectRelease();
        if (v102)
        {
          uint64_t v103 = ContainerCanvasElementView.unorderedSubelementViews.getter();
          if (!*(void *)(v103 + 16)) {
            goto LABEL_108;
          }
          unint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
          if ((v105 & 1) == 0) {
            goto LABEL_108;
          }
          long long v106 = *(id *)(*(void *)(v103 + 56) + 8 * v104);
          swift_bridgeObjectRelease();
          uint64_t v107 = (uint64_t)v204;
          CanvasElementView.canvasElement.getter((uint64_t)v204);
          (*(void (**)(uint64_t, uint64_t, uint64_t))((*v49 & *v106) + 0x130))(v107, v203, v195);

          v197(v107, v199);
          uint64_t v52 = v209;
          (*(void (**)(uint64_t, void))v208)(v50, v209);
          (*v190)(v51, v46);
          uint64_t v48 = v207;
          goto LABEL_57;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ContainerCanvasElementView.createSubelementsContainerViewIfNeeded()();
      SharedTagged_9<>.layout()(&v212);
      uint64_t v108 = v213;
      uint64_t v109 = v214;
      __swift_project_boxed_opaque_existential_1(&v212, v213);
      uint64_t v110 = (uint64_t)v204;
      CanvasElementView.canvasElement.getter((uint64_t)v204);
      id v111 = *(uint64_t (**)(uint64_t, id, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 8);
      id v112 = v186;
      v113 = v51;
      uint64_t v114 = v1;
      id v115 = v186;
      v116 = (void *)v111(v110, v112, v114, v203, v195, v108, v109);

      v197(v110, v199);
      if (!v116)
      {
        uint64_t v98 = v209;
        uint64_t v50 = (uint64_t)v188;
        (*(void (**)(char *, void))v208)(v188, v209);
        uint64_t v46 = v187;
        (*v190)(v113, v187);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v212);
        uint64_t v49 = (void *)MEMORY[0x263F8EED0];
        unint64_t v1 = v114;
        uint64_t v48 = v207;
        unint64_t v51 = v113;
        uint64_t v52 = v98;
LABEL_57:
        double v99 = v205;
        goto LABEL_58;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v212);
      swift_unknownObjectWeakAssign();
      uint64_t v117 = (uint64_t)v182;
      uint64_t v50 = (uint64_t)v188;
      uint64_t v118 = v209;
      (*v180)(v182, v188, v209);
      uint64_t v119 = v194;
      swift_beginAccess();
      v120 = v116;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v215 = *v119;
      *uint64_t v119 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v120, v117, isUniquelyReferenced_nonNull_native);
      *uint64_t v119 = v215;
      swift_bridgeObjectRelease();
      uint64_t v122 = *(void (**)(uint64_t, void))v208;
      (*(void (**)(uint64_t, void))v208)(v117, v118);
      swift_endAccess();
      uint64_t v123 = MEMORY[0x210550400](v200);
      unint64_t v1 = v114;
      unint64_t v51 = v113;
      double v99 = v205;
      if (v123)
      {
        uint64_t v124 = (void *)v123;
        uint64_t v125 = (void *)MEMORY[0x263F8EED0];
        uint64_t v126 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v120) + 0x360))();
        if (v126)
        {
          id v127 = (void *)v126;
          objc_msgSend(v124, sel_addChildViewController_, v126);
          id v128 = *(void **)((char *)v202 + *(void *)((*v125 & *v202) + 0x4C8));
          uint64_t v49 = v125;
          if (v128) {
            objc_msgSend(v128, sel_addSubview_, v120);
          }
          objc_msgSend(v127, sel_didMoveToParentViewController_, v124);

          uint64_t v52 = v209;
          v122(v50, v209);
          uint64_t v46 = v187;
          (*v190)(v51, v187);
          unint64_t v1 = v202;
          uint64_t v48 = v207;
          goto LABEL_58;
        }

        unint64_t v1 = v202;
      }
      uint64_t v49 = (void *)MEMORY[0x263F8EED0];
      v129 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4C8));
      uint64_t v48 = v207;
      if (v129) {
        objc_msgSend(v129, sel_addSubview_, v120);
      }

      uint64_t v52 = v209;
      v122(v50, v209);
      uint64_t v46 = v187;
      (*v190)(v51, v187);
LABEL_58:
      CROrderedSet.Iterator.next()();
      if (v192(v99, 1, v46) == 1) {
        break;
      }
      v191(v51, v99, v46);
    }
  }
  (*(void (**)(char *, int64_t))(v175 + 8))(v201, v206);
  unint64_t v53 = v216;
  uint64_t v54 = *(void *)(v216 + 56);
  v205 = (char *)(v216 + 56);
  uint64_t v55 = 1 << *(unsigned char *)(v216 + 32);
  uint64_t v56 = -1;
  if (v55 < 64) {
    uint64_t v56 = ~(-1 << v55);
  }
  unint64_t v57 = v56 & v54;
  int64_t v206 = (unint64_t)(v55 + 63) >> 6;
  uint64_t v208 = v211 + 32;
  v209 = (void (**)(void, void))(v211 + 16);
  uint64_t v58 = (void (**)(char *, void))(v211 + 8);
  swift_bridgeObjectRetain();
  int64_t v59 = 0;
  while (1)
  {
    if (v57)
    {
      unint64_t v60 = __clz(__rbit64(v57));
      v57 &= v57 - 1;
      unint64_t v61 = v60 | (v59 << 6);
      goto LABEL_23;
    }
    int64_t v62 = v59 + 1;
    if (__OFADD__(v59, 1))
    {
      __break(1u);
      goto LABEL_105;
    }
    if (v62 >= v206) {
      goto LABEL_40;
    }
    unint64_t v63 = *(void *)&v205[8 * v62];
    ++v59;
    if (!v63)
    {
      int64_t v59 = v62 + 1;
      if (v62 + 1 >= v206) {
        goto LABEL_40;
      }
      unint64_t v63 = *(void *)&v205[8 * v59];
      if (!v63)
      {
        int64_t v59 = v62 + 2;
        if (v62 + 2 >= v206) {
          goto LABEL_40;
        }
        unint64_t v63 = *(void *)&v205[8 * v59];
        if (!v63) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v57 = (v63 - 1) & v63;
    unint64_t v61 = __clz(__rbit64(v63)) + (v59 << 6);
LABEL_23:
    CGPoint v66 = v210;
    uint64_t v65 = v211;
    uint64_t v67 = *(void *)(v211 + 72);
    (*(void (**)(char *, unint64_t, void (**)(void, void)))(v211 + 16))(v210, *(void *)(v53 + 48) + v67 * v61, v52);
    (*(void (**)(char *, char *, void (**)(void, void)))(v65 + 32))(v48, v66, v52);
    uint64_t v68 = ContainerCanvasElementView.unorderedSubelementViews.getter();
    if (*(void *)(v68 + 16) && (unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v48), (v70 & 1) != 0))
    {
      id v71 = *(id *)(*(void *)(v68 + 56) + 8 * v69);
      swift_bridgeObjectRelease();
      id v72 = objc_msgSend(v71, sel_superview);
      id v73 = *(id *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4C8));
      if (v72)
      {
        id v74 = v72;

        if (v73) {
          BOOL v75 = v74 == v73;
        }
        else {
          BOOL v75 = 0;
        }
        if (v75) {
          goto LABEL_35;
        }
LABEL_33:
        double v76 = v207;
        (*v58)(v207, v52);

        uint64_t v48 = v76;
        unint64_t v1 = v202;
      }
      else
      {
        if (v73) {
          goto LABEL_33;
        }
        id v77 = 0;
LABEL_35:
        swift_beginAccess();
        swift_bridgeObjectRetain();
        unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v207);
        char v80 = v79;
        swift_bridgeObjectRelease();
        if (v80)
        {
          CGFloat v81 = v194;
          int v82 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v83 = *v81;
          uint64_t v215 = *v81;
          uint64_t *v81 = 0x8000000000000000;
          if (!v82)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v83 = v215;
          }
          (*v58)((char *)(*(void *)(v83 + 48) + v78 * v67), v52);
          uint64_t v84 = v215;
          unint64_t v85 = *(void **)(*(void *)(v215 + 56) + 8 * v78);
          specialized _NativeDictionary._delete(at:)(v78, v215);
          uint64_t *v81 = v84;

          swift_bridgeObjectRelease();
        }
        swift_endAccess();

        uint64_t v48 = v207;
        (*v58)(v207, v52);
        unint64_t v1 = v202;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*v58)(v48, v52);
    }
  }
  int64_t v64 = v62 + 3;
  if (v64 < v206)
  {
    unint64_t v63 = *(void *)&v205[8 * v64];
    if (!v63)
    {
      while (1)
      {
        int64_t v59 = v64 + 1;
        if (__OFADD__(v64, 1)) {
          break;
        }
        if (v59 >= v206) {
          goto LABEL_40;
        }
        unint64_t v63 = *(void *)&v205[8 * v59];
        ++v64;
        if (v63) {
          goto LABEL_22;
        }
      }
LABEL_105:
      __break(1u);
LABEL_106:
      swift_bridgeObjectRetain();
      uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
      goto LABEL_43;
    }
    int64_t v59 = v64;
    goto LABEL_22;
  }
LABEL_40:
  swift_release();
  long long v86 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4C8));
  if (!v86)
  {
    swift_bridgeObjectRelease();
LABEL_82:
    objc_msgSend(v172, sel_commit);

    return;
  }
  v207 = v86;
  id v87 = objc_msgSend(v207, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v212 = MEMORY[0x263F8EE78];
  if (v53 >> 62) {
    goto LABEL_106;
  }
  uint64_t v88 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_43:
  uint64_t v89 = (uint64_t)v185;
  uint64_t v90 = v179;
  uint64_t v92 = v203;
  uint64_t v91 = (uint64_t)v204;
  if (!v88)
  {
    swift_bridgeObjectRelease();
    uint64_t v211 = MEMORY[0x263F8EE78];
    goto LABEL_79;
  }
  if (v88 >= 1)
  {
    uint64_t v93 = 0;
    uint64_t v92 = v203;
    do
    {
      if ((v53 & 0xC000000000000001) != 0) {
        id v94 = (id)MEMORY[0x21054E050](v93, v53);
      }
      else {
        id v94 = *(id *)(v53 + 8 * v93 + 32);
      }
      uint64_t v95 = v94;
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCastClass())
      {
        MEMORY[0x21054D330]();
        if (*(void *)((v212 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v212 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
      ++v93;
      uint64_t v91 = (uint64_t)v204;
    }
    while (v88 != v93);
    swift_bridgeObjectRelease();
    uint64_t v211 = v212;
    uint64_t v90 = v179;
LABEL_79:
    swift_bridgeObjectRelease();
    unint64_t v130 = v202;
    uint64_t v131 = CanvasElementView.canvasElement.getter(v91);
    MEMORY[0x270FA5388](v131);
    uint64_t v132 = v170;
    *(&v167 - 4) = v92;
    *(&v167 - 3) = v132;
    *(&v167 - 2) = v168;
    swift_getKeyPath();
    char v133 = v171;
    uint64_t v134 = v199;
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v135 = ((uint64_t (*)(uint64_t, uint64_t))v197)(v91, v134);
    MEMORY[0x270FA5388](v135);
    *(&v167 - 2) = (uint64_t)v130;
    uint64_t v136 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #2 in ContainerCanvasElementView.updateSubelements(), (uint64_t)(&v167 - 4));
    v169(v133, v90);
    swift_bridgeObjectRelease();
    uint64_t v212 = v136;
    uint64_t v215 = v211;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCanvasElementView]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [AnyCanvasElementView] and conformance [A], &demangling cache variable for type metadata for [AnyCanvasElementView]);
    _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_1(&lazy protocol witness table cache variable for type AnyCanvasElementView and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AnyCanvasElementView);
    uint64_t v137 = v177;
    BidirectionalCollection<>.difference<A>(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v138 = (uint64_t)v173;
    uint64_t v139 = v181;
    v210 = *(char **)(v178 + 16);
    uint64_t v211 = v178 + 16;
    ((void (*)(char *, char *, uint64_t))v210)(v173, v137, v181);
    uint64_t v140 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CollectionDifference<AnyCanvasElementView> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>);
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v141 = v174;
    *(void *)(v138 + *(int *)(v174 + 36)) = v212;
    outlined init with take of IndexingIterator<CollectionDifference<AnyCanvasElementView>>(v138, v89);
    v142 = (uint64_t *)(v89 + *(int *)(v141 + 36));
    uint64_t v143 = *v142;
    dispatch thunk of Collection.endIndex.getter();
    BOOL v75 = v143 == v212;
    uint64_t v144 = v139;
    if (!v75)
    {
      uint64_t v208 = v140;
      v209 = (void (**)(void, void))(v178 + 8);
      while (1)
      {
        uint64_t v147 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v150 = *v148;
        uint64_t v149 = (void *)v148[1];
        uint64_t v151 = *((unsigned __int8 *)v148 + 25);
        outlined copy of CollectionDifference<PDFPage>.Change(*v148, v149, v148[2], *((unsigned __int8 *)v148 + 24), v151);
        v147(&v212, 0);
        unint64_t v152 = v183;
        ((void (*)(char *, uint64_t, uint64_t))v210)(v183, v89, v144);
        dispatch thunk of Collection.formIndex(after:)();
        (*v209)(v152, v144);
        uint64_t v153 = MEMORY[0x210550400](v200);
        id v154 = (id)v153;
        if (v151 == 1) {
          break;
        }
        if (v153)
        {
          uint64_t v161 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v149) + 0x360);
          uint64_t v162 = v149;
          uint64_t v163 = v161();
          if (v163)
          {
            v164 = (void *)v163;
            objc_msgSend(v154, sel_addChildViewController_, v163);
            objc_msgSend(v207, sel_insertSubview_atIndex_, v162, v150);
            id v165 = v154;
            objc_msgSend(v164, sel_didMoveToParentViewController_, v165);
            outlined consume of CollectionDifference<PDFPage>.Change();
            outlined consume of CollectionDifference<PDFPage>.Change();

            uint64_t v144 = v181;
            goto LABEL_88;
          }

          uint64_t v144 = v181;
        }
        else
        {
          uint64_t v166 = v149;
        }
        objc_msgSend(v207, sel_insertSubview_atIndex_, v149, v150);
        outlined consume of CollectionDifference<PDFPage>.Change();
LABEL_87:
        outlined consume of CollectionDifference<PDFPage>.Change();
LABEL_88:
        uint64_t v89 = (uint64_t)v185;
        uint64_t v146 = *v142;
        dispatch thunk of Collection.endIndex.getter();
        if (v146 == v212) {
          goto LABEL_81;
        }
      }
      if (v153)
      {
        uint64_t v155 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v149) + 0x360);
        v156 = v149;
        uint64_t v157 = (void *)v155();
        if (v157)
        {
          uint64_t v158 = v157;
          objc_msgSend(v157, sel_willMoveToParentViewController_, 0);
          objc_msgSend(v156, sel_removeFromSuperview);
          id v159 = objc_msgSend(v158, sel_parentViewController);
          uint64_t v144 = v181;
          if (v159 && (id v160 = v159, v159, v160 == v154)) {
            objc_msgSend(v154, sel_removeChildViewController_, v158);
          }
          else {
            objc_msgSend(v158, sel_removeFromParentViewController);
          }

          goto LABEL_86;
        }

        uint64_t v144 = v181;
      }
      else
      {
        v145 = v149;
      }
      objc_msgSend(v149, sel_removeFromSuperview);
LABEL_86:
      outlined consume of CollectionDifference<PDFPage>.Change();
      goto LABEL_87;
    }
LABEL_81:

    outlined destroy of StocksKitCurrencyCache.Provider?(v89, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v177, v144);
    goto LABEL_82;
  }
  __break(1u);
LABEL_108:
  swift_bridgeObjectRelease();
  __break(1u);
}

Swift::Void __swiftcall ContainerCanvasElementView.updateFormFillingView()()
{
  unint64_t v1 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4D0));
  if (v1)
  {
    id v2 = v1;
    FormFillingView.updateUI()();
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.createFormFillingViewIfNeeded()()
{
  uint64_t v1 = MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v1)
  {
    id v15 = (id)v1;
    id v2 = (void *)MEMORY[0x263F8EED0];
    if (!*(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4D0)))
    {
      objc_msgSend(v0, sel_bounds);
      double v4 = v3;
      double v6 = v5;
      double v8 = v7;
      double v10 = v9;
      id v11 = objc_allocWithZone((Class)type metadata accessor for FormFillingView());
      FormFillingView.init(frame:canvas:)(v15, v4, v6, v8, v10);
      uint64_t v12 = *(void *)((*v2 & *v0) + 0x4D0);
      uint64_t v13 = *(void **)((char *)v0 + v12);
      *(void *)((char *)v0 + v12) = v14;

      if (!*(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0x4D0)))
      {
        __break(1u);
        return;
      }
      objc_msgSend(v0, sel_addSubview_);
    }
    ContainerCanvasElementView.updateFormFillingView()();
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.rootTapped(_:)(UITapGestureRecognizer *a1)
{
  id v2 = v1;
  double v4 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v4)
  {
    double v5 = (void *)MEMORY[0x263F8EED0];
    CGAffineTransform v23 = v4;
    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & *v4) + 0x2C8))(&v24);
    if (!(_BYTE)v24) {
      goto LABEL_11;
    }
    double v6 = *(uint64_t (**)(void))((*v5 & *v23) + 0x2F8);
    double v7 = (void *)v6();
    [(UITapGestureRecognizer *)a1 locationInView:v7];
    double v9 = v8;
    double v11 = v10;

    uint64_t v12 = (void *)v6();
    id v13 = objc_msgSend(v12, sel_hitTest_withEvent_, 0, v9, v11);

    if (v13)
    {
      type metadata accessor for AnyCanvasElementView();
      id v14 = v13;
      id v15 = (void *)swift_dynamicCastClass();
      id v16 = v14;
      if (v15)
      {
LABEL_9:

        id v14 = v16;
        [(UITapGestureRecognizer *)a1 locationInView:v15];
        (*(void (**)(id, void, BOOL, double, double))((*v15 & *v5) + 0x1C8))([(UITapGestureRecognizer *)a1 modifierFlags], 0, (*((unsigned char *)v2 + *(void *)((*v5 & *v2) + 0x4E8)) & 1) == 0, v19, v20);

        uint64_t v21 = v14;
      }
      else
      {
        id v16 = v14;
        while (1)
        {
          id v17 = objc_msgSend(v16, sel_superview);

          if (!v17) {
            break;
          }
          id v16 = v17;
          uint64_t v18 = swift_dynamicCastClass();
          if (v18)
          {
            id v15 = (void *)v18;
            goto LABEL_9;
          }
        }
        uint64_t v21 = v23;
      }

      uint64_t v22 = v14;
    }
    else
    {
LABEL_11:
      uint64_t v22 = v23;
    }
  }
}

uint64_t ContainerCanvasElementView.isUpdatingDrawing.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4F8));
}

uint64_t ContainerCanvasElementView.isUpdatingDrawing.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4F8)) = result;
  return result;
}

Swift::Void __swiftcall ContainerCanvasElementView.transformDrawing()()
{
  uint64_t v1 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  id v2 = v1;
  uint64_t v3 = v1[149];
  uint64_t v4 = v1[150];
  uint64_t v5 = type metadata accessor for Capsule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v8 = (char *)&v55 - v7;
  double v9 = *(void **)((char *)v0 + v1[152]);
  if (!v9) {
    return;
  }
  id v56 = v9;
  objc_msgSend(v56, sel_frame);
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  objc_msgSend(v0, sel_bounds);
  v63.origin.CGFloat x = v18;
  v63.origin.CGFloat y = v19;
  v63.size.CGFloat width = v20;
  v63.size.double height = v21;
  v60.origin.CGFloat x = v11;
  v60.origin.CGFloat y = v13;
  v60.size.CGFloat width = v15;
  v60.size.double height = v17;
  if (!CGRectEqualToRect(v60, v63))
  {
    v58.double a = 1.0;
    v58.double b = 0.0;
    v58.CGFloat c = 0.0;
    v58.CGFloat d = 1.0;
    v58.CGFloat tx = 0.0;
    v58.CGFloat ty = 0.0;
    objc_msgSend(v56, sel_setTransform_, &v58);
    isdouble a = (Class)v56;
    objc_msgSend(v0, sel_bounds);
    -[objc_class setFrame:](isa, sel_setFrame_);

    uint64_t v24 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (v24)
    {

      uint64_t v25 = CanvasElementView.canvasElement.getter((uint64_t)v8);
      MEMORY[0x270FA5388](v25);
      *(&v55 - 4) = v3;
      *(&v55 - 3) = v4;
      uint64_t v54 = v2[151];
      swift_getKeyPath();
      uint64_t v26 = isa;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      CGAffineTransformMakeRotation(&v58, aBlock.a);
      [(objc_class *)v26 setTransform:&v58];
    }
    resize #1 <A>() in ContainerCanvasElementView.transformDrawing()(isa, &v58.a);
    double a = v58.a;
    double b = v58.b;
    CGFloat c = v58.c;
    CGFloat d = v58.d;
    CGFloat tx = v58.tx;
    CGFloat ty = v58.ty;
    double v33 = sqrt(a * a + b * b);
    if (ContainerCanvasElementView.isInLiveEdit.getter())
    {
      BOOL v34 = v33 < 0.5;
    }
    else
    {
      objc_msgSend(v0, sel_bounds);
      aBlock.double a = a;
      aBlock.double b = b;
      aBlock.CGFloat c = c;
      aBlock.CGFloat d = d;
      aBlock.CGFloat tx = tx;
      aBlock.CGFloat ty = ty;
      CGRect v62 = CGRectApplyAffineTransform(v61, &aBlock);
      CGFloat x = v62.origin.x;
      CGFloat y = v62.origin.y;
      CGFloat width = v62.size.width;
      double height = v62.size.height;
      objc_msgSend(v0, sel_bounds);
      if (!CGRect.almostEqual(_:threshold:)(v39, v40, v41, v42, 0.5, x, y, width, height)) {
        goto LABEL_20;
      }
      BOOL v34 = v33 < 0.5;
    }
    if (!v34 && v33 <= 2.0)
    {
      if (ContainerCanvasElementView.isInLiveEdit.getter()) {
        goto LABEL_24;
      }
      uint64_t v44 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
      if (!v44) {
        goto LABEL_24;
      }
      uint64_t v45 = v44;
      uint64_t v46 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v44) + 0x320))();

      objc_msgSend(v46, sel_updateTilesForVisibleRect);
      goto LABEL_23;
    }
LABEL_20:
    unsigned int v47 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (!v47) {
      goto LABEL_24;
    }
    uint64_t v48 = v47;
    uint64_t v46 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v47) + 0x320))();

    if (!v46) {
      goto LABEL_24;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_20C835790;
    *(void *)(v49 + 32) = isa;
    *(void *)&aBlock.double a = v49;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
    uint64_t v50 = isa;
    isdouble a = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = v50;
    *(void *)&aBlock.CGFloat tx = partial apply for closure #1 in ContainerCanvasElementView.transformDrawing();
    *(void *)&aBlock.CGFloat ty = v51;
    *(void *)&aBlock.double a = MEMORY[0x263EF8330];
    *(void *)&aBlock.double b = 1107296256;
    *(void *)&aBlock.CGFloat c = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *(void *)&aBlock.CGFloat d = &block_descriptor_15;
    uint64_t v52 = _Block_copy(&aBlock);
    unint64_t v53 = v50;
    swift_release();
    objc_msgSend(v46, sel_resizeTiles_completion_, isa, v52);

    _Block_release(v52);
LABEL_23:

LABEL_24:
    return;
  }
  id v22 = v56;
}

Swift::Void __swiftcall ContainerCanvasElementView.updateDrawing()()
{
  uint64_t v1 = v0;
  id v2 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v181 = *(void *)(v183 - 8);
  MEMORY[0x270FA5388](v183);
  v156 = (char *)&v150 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v180 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v162 = (char *)&v150 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v161);
  uint64_t v164 = (uint64_t)&v150 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v175 = *(void *)(v176 - 8);
  MEMORY[0x270FA5388](v176);
  uint64_t v157 = (char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v174 = (char *)&v150 - v9;
  uint64_t v179 = type metadata accessor for PKDrawing();
  uint64_t v171 = *(void *)(v179 - 8);
  MEMORY[0x270FA5388](v179);
  uint64_t v170 = (char *)&v150 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v158 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v150 - v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v163 = (char *)&v150 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v165 = (uint64_t)&v150 - v16;
  MEMORY[0x270FA5388](v17);
  v177 = (uint64_t *)((char *)&v150 - v18);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v155 = *(void (***)(char *, void, uint64_t))(v19 - 8);
  MEMORY[0x270FA5388](v19);
  id v154 = (char *)&v150 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v169);
  uint64_t v168 = (char *)&v150 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2[149];
  uint64_t v23 = v2[150];
  uint64_t v172 = *(void *)(v23 + 16);
  uint64_t v24 = type metadata accessor for Capsule();
  uint64_t v185 = *(void *)(v24 - 8);
  uint64_t v186 = v24;
  MEMORY[0x270FA5388](v24);
  uint64_t v167 = (uint64_t)&v150 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v160 = (uint64_t)&v150 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v182 = (uint64_t)&v150 - v29;
  MEMORY[0x270FA5388](v30);
  char v32 = (char *)&v150 - v31;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v166 = (char *)&v150 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  id v159 = (char *)&v150 - v36;
  MEMORY[0x270FA5388](v37);
  CGFloat v39 = (char *)&v150 - v38;
  BOOL v40 = 1;
  *((unsigned char *)v0 + v2[159]) = 1;
  char v41 = AnyCanvasElementView.isEditingCanvasElement.getter();
  uint64_t v184 = v23;
  if ((v41 & 1) == 0)
  {
    uint64_t v152 = v19;
    uint64_t v42 = CanvasElementView.canvasElement.getter((uint64_t)v32);
    MEMORY[0x270FA5388](v42);
    *(&v150 - 4) = v22;
    *(&v150 - 3) = v23;
    double v173 = v2;
    *(&v150 - 2) = v2[151];
    swift_getKeyPath();
    uint64_t v43 = v186;
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v44 = v22;
    uint64_t v45 = *(void (**)(char *, uint64_t))(v185 + 8);
    v45(v32, v43);
    uint64_t v46 = v181;
    uint64_t v47 = v183;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v181 + 48))(v39, 1, v183) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v39, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      BOOL v40 = 0;
      uint64_t v22 = v44;
    }
    else
    {
      uint64_t v48 = v182;
      uint64_t v151 = v1;
      uint64_t v49 = v44;
      CanvasElementView.canvasElement.getter(v182);
      uint64_t v153 = v4;
      uint64_t v50 = v168;
      Ref.subscript.getter();
      v45((char *)v48, v43);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v39, v47);
      uint64_t v51 = v155;
      uint64_t v52 = v154;
      uint64_t v53 = v152;
      ((void (**)(char *, char *, uint64_t))v155)[2](v154, &v50[*(int *)(v169 + 20)], v152);
      uint64_t v54 = (uint64_t)v50;
      uint64_t v4 = v153;
      outlined destroy of PKDrawingStruct(v54);
      uint64_t v55 = CROrderedSet.count.getter();
      ((void (*)(char *, uint64_t))v51[1])(v52, v53);
      BOOL v40 = v55 > 0;
      uint64_t v22 = v49;
      uint64_t v1 = v151;
    }
    uint64_t v23 = v184;
    id v2 = v173;
  }
  id v56 = (void *)MEMORY[0x263F8EED0];
  unint64_t v57 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4C0));
  uint64_t v59 = v185;
  uint64_t v58 = v186;
  if (v57)
  {
    CGRect v60 = v57;
    CGRect v61 = v60;
    if (v40)
    {
      id v62 = objc_msgSend(v60, sel_drawing);
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      type metadata accessor for PKDrawingCoherence(0);
      int v63 = swift_dynamicCast();
      uint64_t v178 = v22;
      uint64_t v153 = v4;
      uint64_t v155 = v61;
      if (v63)
      {
        int64_t v64 = v2;
        uint64_t v65 = (void *)v189;
        uint64_t v66 = v189 + OBJC_IVAR___PKDrawingCoherence_model;
        swift_beginAccess();
        uint64_t v67 = v175;
        uint64_t v68 = v174;
        uint64_t v69 = v176;
        (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v174, v66, v176);

        id v2 = v64;
        _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
        char v70 = (void (*)(void, void))v177;
        Capsule<>.rootID.getter();
        id v71 = v68;
        uint64_t v59 = v185;
        uint64_t v72 = v69;
        uint64_t v22 = v178;
        (*(void (**)(char *, uint64_t))(v67 + 8))(v71, v72);
        id v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 + 56);
        id v74 = v70;
        uint64_t v75 = 0;
      }
      else
      {
        id v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 + 56);
        id v74 = (void (*)(void, void))v177;
        uint64_t v75 = 1;
      }
      uint64_t v158 = v73;
      v73((uint64_t)v74, v75, 1, v4);
      uint64_t v76 = v160;
      uint64_t v77 = CanvasElementView.canvasElement.getter(v160);
      MEMORY[0x270FA5388](v77);
      uint64_t v78 = v184;
      *(&v150 - 4) = v22;
      *(&v150 - 3) = v78;
      double v173 = v2;
      *(&v150 - 2) = v2[151];
      swift_getKeyPath();
      uint64_t v79 = (uint64_t)v159;
      uint64_t v80 = v186;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v76, v80);
      uint64_t v81 = v181;
      uint64_t v82 = v183;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48))(v79, 1, v183) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v79, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
        uint64_t v83 = 1;
        uint64_t v84 = v164;
        uint64_t v85 = v165;
      }
      else
      {
        uint64_t v85 = v165;
        Ref.id.getter();
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v82);
        uint64_t v83 = 0;
        uint64_t v84 = v164;
      }
      uint64_t v86 = v180;
      uint64_t v87 = v153;
      v158(v85, v83, 1, v153);
      uint64_t v88 = v84 + *(int *)(v161 + 48);
      uint64_t v89 = (void (*)(void, void))v177;
      outlined init with copy of CRKeyPath?((uint64_t)v177, v84);
      outlined init with copy of CRKeyPath?(v85, v88);
      uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
      if (v90(v84, 1, v87) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v85, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        int v91 = v90(v88, 1, v87);
        uint64_t v22 = v178;
        uint64_t v23 = v184;
        id v2 = v173;
        CGRect v61 = v155;
        if (v91 == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v84, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          uint64_t v58 = v186;
LABEL_22:

          id v56 = (void *)MEMORY[0x263F8EED0];
          goto LABEL_23;
        }
        goto LABEL_19;
      }
      outlined init with copy of CRKeyPath?(v84, (uint64_t)v163);
      int v92 = v90(v88, 1, v87);
      uint64_t v23 = v184;
      CGRect v61 = v155;
      if (v92 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v165, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v177, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        (*(void (**)(char *, uint64_t))(v180 + 8))(v163, v87);
        uint64_t v22 = v178;
        id v2 = v173;
LABEL_19:
        outlined destroy of StocksKitCurrencyCache.Provider?(v84, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
        uint64_t v58 = v186;
        goto LABEL_21;
      }
      uint64_t v93 = v180;
      uint64_t v94 = v87;
      uint64_t v95 = v162;
      (*(void (**)(char *, uint64_t, uint64_t))(v180 + 32))(v162, v88, v94);
      _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v97 = *(void (**)(char *, uint64_t))(v93 + 8);
      v97(v95, v94);
      outlined destroy of StocksKitCurrencyCache.Provider?(v165, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v177, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v97(v163, v94);
      outlined destroy of StocksKitCurrencyCache.Provider?(v164, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      uint64_t v22 = v178;
      id v2 = v173;
      uint64_t v58 = v186;
      if (v96) {
        goto LABEL_22;
      }
    }
LABEL_21:
    objc_msgSend(v61, sel_removeFromSuperview);
    uint64_t v98 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4C0);
    double v99 = *(void (***)(char *, void, uint64_t))((char *)v1 + v98);
    *(void *)((char *)v1 + v98) = 0;

    CGRect v61 = v99;
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v100 = *(void **)((char *)v1 + *(void *)((*v56 & *v1) + 0x4C0));
  if (v100) {
    BOOL v101 = 0;
  }
  else {
    BOOL v101 = v40;
  }
  if (v101)
  {
    uint64_t v102 = v167;
    uint64_t v103 = CanvasElementView.canvasElement.getter(v167);
    MEMORY[0x270FA5388](v103);
    uint64_t v178 = v22;
    *(&v150 - 4) = v22;
    *(&v150 - 3) = v23;
    double v173 = (void *)v2[151];
    *(&v150 - 2) = (uint64_t)v173;
    swift_getKeyPath();
    uint64_t v104 = (uint64_t)v166;
    Capsule<>.subscript.getter();
    swift_release();
    v177 = *(uint64_t **)(v59 + 8);
    ((void (*)(uint64_t, uint64_t))v177)(v102, v58);
    uint64_t v105 = v181;
    uint64_t v106 = v58;
    uint64_t v107 = v183;
    int v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v181 + 48))(v104, 1, v183);
    uint64_t v109 = v182;
    uint64_t v110 = v59 + 8;
    if (v108 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v104, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      long long v111 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
      long long v189 = *MEMORY[0x263F001A0];
      long long v190 = v111;
      type metadata accessor for CGRect(0);
      _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
      id v112 = v168;
      CRRegister.init(wrappedValue:)();
      uint64_t v113 = v169;
      uint64_t v114 = v106;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v185 = v110;
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      CROrderedSet.init()();
      *(void *)&v112[*(int *)(v113 + 24)] = MEMORY[0x263F8EE80];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>);
      uint64_t v115 = swift_allocObject();
      *(_OWORD *)(v115 + 16) = xmmword_20C835740;
      CanvasElementView.canvasElement.getter(v109);
      Capsule<>.rootID.getter();
      ((void (*)(uint64_t, uint64_t))v177)(v109, v114);
      CRKeyPath.init(_:)();
      *(void *)&long long v189 = v115;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A], &demangling cache variable for type metadata for [CRKeyPath]);
      CRKeyPath.init<A>(_:)();
      _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
      v116 = v174;
      Capsule<>.init(_:id:)();
      uint64_t v117 = v175;
      uint64_t v118 = *(void (**)(char *, char *, uint64_t))(v175 + 16);
      uint64_t v119 = v157;
      uint64_t v120 = v176;
      v118(v157, v116, v176);
      id v121 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      uint64_t v122 = (char *)objc_allocWithZone(v121);
      v118(&v122[OBJC_IVAR___PKDrawingCoherence_model], v119, v120);
      v188.receiver = v122;
      v188.super_class = v121;
      id v123 = objc_msgSendSuper2(&v188, sel_init);
      uint64_t v124 = *(void (**)(char *, uint64_t))(v117 + 8);
      v124(v119, v120);
      uint64_t v125 = v186;
      v124(v116, v120);
      uint64_t v109 = v182;
    }
    else
    {
      v129 = v156;
      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 32))(v156, v104, v107);
      uint64_t v130 = v105;
      CanvasElementView.canvasElement.getter(v109);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      uint64_t v131 = v174;
      Capsule.encapsulate<A>(_:)();
      ((void (*)(uint64_t, uint64_t))v177)(v109, v106);
      uint64_t v132 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      id v133 = objc_allocWithZone(v132);
      uint64_t v134 = v175;
      uint64_t v135 = v176;
      (*(void (**)(uint64_t, char *, uint64_t))(v175 + 16))((uint64_t)v133 + OBJC_IVAR___PKDrawingCoherence_model, v131, v176);
      v187.receiver = v133;
      v187.super_class = v132;
      id v123 = objc_msgSendSuper2(&v187, sel_init);
      (*(void (**)(char *, uint64_t))(v134 + 8))(v131, v135);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v183);
      uint64_t v125 = v186;
    }
    uint64_t v136 = CanvasElementView.canvasElement.getter(v109);
    MEMORY[0x270FA5388](v136);
    uint64_t v137 = v184;
    *(&v150 - 4) = v178;
    *(&v150 - 3) = v137;
    *(&v150 - 2) = (uint64_t)v173;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    ((void (*)(uint64_t, uint64_t))v177)(v109, v125);
    long long v138 = v190;
    id v139 = v123;
    uint64_t v140 = v170;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    id v141 = objc_allocWithZone((Class)type metadata accessor for CanvasElementDrawingView());
    PKDrawing._bridgeToObjectiveC()(v142);
    uint64_t v144 = v143;
    id v145 = objc_msgSend(v141, sel_initWithFrame_drawing_, v143, 0.0, 0.0, v138);

    (*(void (**)(char *, uint64_t))(v171 + 8))(v140, v179);
    objc_msgSend(v145, sel_setUserInteractionEnabled_, 0);
    swift_unknownObjectWeakAssign();
    objc_msgSend(v1, sel_addSubview_, v145);
    id v56 = (void *)MEMORY[0x263F8EED0];
    uint64_t v146 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4C0);
    uint64_t v147 = *(void **)((char *)v1 + v146);
    *(void *)((char *)v1 + v146) = v145;
  }
  else
  {
    uint64_t v126 = v182;
    if (!v100) {
      goto LABEL_36;
    }
    CanvasElementView.canvasElement.getter(v182);
    id v127 = v100;
    char v128 = CanvasElementDrawingView.merge<A>(_:)();

    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v126, v58);
    if ((v128 & 1) == 0) {
      goto LABEL_36;
    }
  }
  unint64_t v148 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v148)
  {
    uint64_t v149 = v148;
    (*(void (**)(void))((*v56 & *v148) + 0x578))();
  }
LABEL_36:
  *((unsigned char *)v1 + *(void *)((*v56 & *v1) + 0x4F8)) = 0;
}

void @objc ContainerCanvasElementView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized ContainerCanvasElementView.init(coder:)();
}

uint64_t ContainerCanvasElementView.alwaysUseMaxResolutionImage.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x4F0)) = result;
  return result;
}

void __swiftcall ContainerCanvasElementView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  isdouble a = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  uint64_t v7 = (void *)MEMORY[0x263F8EED0];
  uint64_t v8 = (void *)MEMORY[0x210550400]((char *)v3 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, *(void *)&with.is_nil);
  if (v8)
  {
  }
  else
  {
    uint64_t v9 = *(void **)((char *)v3 + *(void *)((*v7 & *v3) + 0x4D0));
    if (v9)
    {
      id v10 = v9;
      if ((objc_msgSend(v10, sel_isHidden) & 1) == 0)
      {
        objc_msgSend(v10, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
        objc_msgSend(v10, sel_hitTest_withEvent_, isa);

        return;
      }
    }
    unint64_t v11 = ContainerCanvasElementView.subelementViewsForHitTesting.getter();
    unint64_t v12 = v11;
    if (v11 >> 62) {
      goto LABEL_20;
    }
    for (uint64_t i = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v14 = 4;
      while (1)
      {
        id v15 = (v12 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x21054E050](v14 - 4, v12)
            : *(id *)(v12 + 8 * v14);
        uint64_t v16 = v15;
        uint64_t v17 = v14 - 3;
        if (__OFADD__(v14 - 4, 1)) {
          break;
        }
        if (objc_msgSend(v15, sel_isHidden))
        {
        }
        else
        {
          objc_msgSend(v16, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
          id v18 = objc_msgSend(v16, sel_hitTest_withEvent_, isa);

          if (v18)
          {
            swift_bridgeObjectRelease();
            return;
          }
        }
        ++v14;
        if (v17 == i) {
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_20:
      ;
    }
LABEL_21:
    swift_bridgeObjectRelease();
  }
  v19.receiver = v3;
  v19.super_class = (Class)type metadata accessor for ContainerCanvasElementView();
  -[UIView_optional hitTest:withEvent:](&v19, sel_hitTest_withEvent_, isa, x, y);
}

id @objc ContainerCanvasElementView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.isdouble a = (Class)a5;
  ContainerCanvasElementView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  uint64_t v13 = v12;

  return v13;
}

Swift::Void __swiftcall ContainerCanvasElementView.layoutSubviews()()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  v13.receiver = v0;
  v13.super_class = (Class)type metadata accessor for ContainerCanvasElementView();
  objc_msgSendSuper2(&v13, sel_layoutSubviews);
  uint64_t v2 = *v1 & *v0;
  id v3 = *(void **)((char *)v0 + *(void *)(v2 + 0x4C8));
  if (v3)
  {
    id v4 = v3;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v4, sel_setFrame_);

    uint64_t v2 = *v1 & *v0;
  }
  uint64_t v5 = *(void **)((char *)v0 + *(void *)(v2 + 1232));
  if (v5)
  {
    id v6 = v5;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v6, sel_setFrame_);
  }
  ContainerCanvasElementView.transformDrawing()();
  unint64_t v7 = ContainerCanvasElementView.subelementViews.getter();
  unint64_t v8 = v7;
  if (!(v7 >> 62))
  {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_7;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  if (!v9) {
    goto LABEL_14;
  }
LABEL_7:
  if (v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if ((v8 & 0xC000000000000001) != 0) {
        unint64_t v11 = (void *)MEMORY[0x21054E050](i, v8);
      }
      else {
        unint64_t v11 = *(id *)(v8 + 8 * i + 32);
      }
      unint64_t v12 = v11;
      (*(void (**)(void))((*v1 & *v11) + 0x288))();
    }
    goto LABEL_14;
  }
  __break(1u);
}

void @objc ContainerCanvasElementView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  ContainerCanvasElementView.layoutSubviews()();
}

uint64_t closure #2 in ContainerCanvasElementView.updateSubelements()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  MEMORY[0x21054BEC0](v6);
  uint64_t v7 = ContainerCanvasElementView.unorderedSubelementViews.getter();
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5), (v9 & 1) != 0))
  {
    id v10 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
    id v11 = v10;
  }
  else
  {
    id v10 = 0;
  }
  swift_bridgeObjectRelease();
  *a1 = v10;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void @objc ContainerCanvasElementView.rootTapped(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a1;
  ContainerCanvasElementView.rootTapped(_:)(v4);
}

Swift::Bool __swiftcall ContainerCanvasElementView.gestureRecognizerShouldBegin(_:)(UIGestureRecognizer *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  id v5 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  (*(void (**)(uint64_t *__return_ptr))((*v4 & *v5) + 0x2C8))(&v25);
  if (!(_BYTE)v25) {
    goto LABEL_14;
  }
  uint64_t v7 = *(void **)((char *)v1 + *(void *)((*v4 & *v1) + 0x4E0));
  if (!v7
    || (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), id v8 = v7, v9 = a1, v10 = static NSObject.== infix(_:_:)(), v9, v8, (v10 & 1) == 0))
  {
    v24.receiver = v2;
    v24.super_class = (Class)type metadata accessor for ContainerCanvasElementView();
    unsigned __int8 v22 = [(UIGestureRecognizer *)&v24 gestureRecognizerShouldBegin:a1];

    return v22;
  }
  id v11 = (void *)(*(uint64_t (**)(void))((*v4 & *v6) + 0x320))();
  if (!v11
    || (unint64_t v12 = v11, v13 = objc_msgSend(v11, sel_allowsFingerDrawing), v12, (v13 & 1) == 0))
  {
LABEL_14:

    return 0;
  }
  [(UIGestureRecognizer *)v9 locationInView:v2];
  id v14 = objc_msgSend(v2, sel_hitTest_withEvent_, 0);
  if (!v14)
  {
    id v16 = v6;
LABEL_20:

    return *((unsigned char *)v2 + *(void *)((*v4 & *v2) + 0x4E8));
  }
  id v15 = v14;
  type metadata accessor for AnyCanvasElementView();
  id v16 = v15;
  id v17 = v16;
  if (!swift_dynamicCastClass())
  {
    id v17 = v16;
    while (1)
    {
      id v18 = objc_msgSend(v17, sel_superview);

      if (!v18) {
        break;
      }
      id v17 = v18;
      if (swift_dynamicCastClass()) {
        goto LABEL_12;
      }
    }

    goto LABEL_20;
  }
LABEL_12:

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  id v19 = v17;
  uint64_t v20 = v2;
  char v21 = static NSObject.== infix(_:_:)();

  if (v21) {
    return *((unsigned char *)v2 + *(void *)((*v4 & *v2) + 0x4E8));
  }
  return 1;
}

uint64_t @objc ContainerCanvasElementView.gestureRecognizerShouldBegin(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a1;
  LOBYTE(a1) = ContainerCanvasElementView.gestureRecognizerShouldBegin(_:)(v4);

  return a1 & 1;
}

uint64_t closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  uint64_t v5 = *a1;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v7 - 8);
  char v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PKDrawingStruct();
  _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule.Ref.import<A>(_:)();
  uint64_t v14 = *(void *)(v5 + *MEMORY[0x263F33088]);
  uint64_t v15 = a3;
  uint64_t v16 = v13;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  Capsule<>.rootID.getter();
  Ref.init(id:)();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #1 in ContainerCanvasElementView.drawingSelectionDidChange()(void *a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  size_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)(a2);
  swift_bridgeObjectRelease();
  static Date.timeIntervalSinceReferenceDate.getter();
  *a1 = v5;
  uint64_t result = swift_bridgeObjectRelease();
  a1[4] = v4;
  return result;
}

void key path getter for CanvasElement.rotation : <A>A(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(void))(*(void *)(*(void *)(a2 + a1 - 8) + 8) + 32))(*(void *)(a2 + a1 - 24));
}

uint64_t key path setter for CanvasElement.rotation : <A>A(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double))(*(void *)(*(void *)(a4 + a3 - 8) + 8) + 40))(*(void *)(a4 + a3 - 24), *(void *)(*(void *)(a4 + a3 - 8) + 8), *a1);
}

double resize #1 <A>() in ContainerCanvasElementView.transformDrawing()@<D0>(void *a1@<X0>, CGFloat *a2@<X8>)
{
  objc_msgSend(a1, sel_drawingTransform);
  long long v31 = *(_OWORD *)&t1.m13;
  long long v32 = *(_OWORD *)&t1.m11;
  CGFloat m21 = t1.m21;
  CGFloat m22 = t1.m22;
  objc_msgSend(a1, sel_tileDrawingTransform);
  CGAffineTransformInvert(&t2, (CGAffineTransform *)&t1);
  *(_OWORD *)&t1.CGFloat m11 = v32;
  *(_OWORD *)&t1.CGFloat m13 = v31;
  t1.CGFloat m21 = m21;
  t1.CGFloat m22 = m22;
  CGAffineTransformConcat(&v34, (CGAffineTransform *)&t1, &t2);
  CGFloat a = v34.a;
  CGFloat b = v34.b;
  CGFloat v27 = v34.b;
  CGFloat v28 = v34.a;
  *(CGFloat *)&long long v32 = v34.c;
  CGFloat tx = v34.tx;
  *(CGFloat *)&long long v31 = v34.d;
  double ty = v34.ty;
  objc_msgSend(a1, sel_bounds);
  CGFloat MidX = CGRectGetMidX(v36);
  objc_msgSend(a1, sel_bounds);
  CGFloat MidY = CGRectGetMidY(v37);
  CGAffineTransformMakeTranslation((CGAffineTransform *)&t1, MidX, MidY);
  CGFloat m11 = t1.m11;
  CGFloat m12 = t1.m12;
  CGFloat m13 = t1.m13;
  CGFloat m14 = t1.m14;
  CGFloat v14 = t1.m21;
  CGFloat v15 = t1.m22;
  t2.CGFloat a = a;
  t2.CGFloat b = b;
  *(void *)&t2.CGFloat c = v32;
  *(void *)&t2.CGFloat d = v31;
  t2.CGFloat tx = tx;
  t2.double ty = ty;
  CGAffineTransformConcat(&v34, (CGAffineTransform *)&t1, &t2);
  long long v23 = *(_OWORD *)&v34.c;
  long long v25 = *(_OWORD *)&v34.a;
  CGFloat v16 = v34.tx;
  CGFloat v17 = v34.ty;
  t1.CGFloat m11 = m11;
  t1.CGFloat m12 = m12;
  t1.CGFloat m13 = m13;
  t1.CGFloat m14 = m14;
  t1.CGFloat m21 = v14;
  t1.CGFloat m22 = v15;
  CGAffineTransformInvert(&t2, (CGAffineTransform *)&t1);
  *(_OWORD *)&t1.CGFloat m11 = v25;
  *(_OWORD *)&t1.CGFloat m13 = v23;
  t1.CGFloat m21 = v16;
  t1.CGFloat m22 = v17;
  CGAffineTransformConcat(&v34, (CGAffineTransform *)&t1, &t2);
  long long v24 = *(_OWORD *)&v34.c;
  long long v26 = *(_OWORD *)&v34.a;
  CGFloat v18 = v34.tx;
  CGFloat v19 = v34.ty;
  id v20 = objc_msgSend(a1, sel_tileContainerView);
  id v21 = objc_msgSend(v20, sel_layer);

  *(_OWORD *)&t2.CGFloat a = v26;
  *(_OWORD *)&t2.CGFloat c = v24;
  t2.CGFloat tx = v18;
  t2.double ty = v19;
  CATransform3DMakeAffineTransform(&t1, &t2);
  objc_msgSend(v21, sel_setSublayerTransform_, &t1);

  *a2 = v28;
  a2[1] = v27;
  *((void *)a2 + 2) = v32;
  *((void *)a2 + 3) = v31;
  a2[4] = tx;
  double result = ty;
  a2[5] = ty;
  return result;
}

void closure #1 in ContainerCanvasElementView.transformDrawing()(char a1, void *a2)
{
  if (a1)
  {
    id v2 = objc_msgSend(a2, sel_tileContainerView, resize #1 <A>() in ContainerCanvasElementView.transformDrawing()(a2, v9));
    id v3 = objc_msgSend(v2, sel_layer);

    long long v4 = *(_OWORD *)(MEMORY[0x263F15740] + 16);
    v8[0] = *MEMORY[0x263F15740];
    v8[1] = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x263F15740] + 48);
    v8[2] = *(_OWORD *)(MEMORY[0x263F15740] + 32);
    v8[3] = v5;
    long long v6 = *(_OWORD *)(MEMORY[0x263F15740] + 80);
    v8[4] = *(_OWORD *)(MEMORY[0x263F15740] + 64);
    v8[5] = v6;
    long long v7 = *(_OWORD *)(MEMORY[0x263F15740] + 112);
    v8[6] = *(_OWORD *)(MEMORY[0x263F15740] + 96);
    v8[7] = v7;
    objc_msgSend(v3, sel_setSublayerTransform_, v8);
  }
}

void ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(uint64_t a1, uint64_t a2, void *a3)
{
  long long v4 = v3;
  uint64_t v8 = (void *)(*MEMORY[0x263F8EED0] & *v3);
  uint64_t v9 = v8[149];
  uint64_t v10 = v8[150];
  uint64_t v11 = v8[151];
  v16.receiver = v4;
  v16.super_class = (Class)type metadata accessor for ContainerCanvasElementView();
  objc_msgSendSuper2(&v16, sel_contextMenuInteraction_willPerformPreviewActionForMenuWithConfiguration_animator_, a1, a2, a3);
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v9;
  v13[3] = v10;
  v13[4] = v11;
  v13[5] = v12;
  v15[4] = partial apply for closure #1 in ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:);
  v15[5] = v13;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v15[3] = &block_descriptor_56;
  CGFloat v14 = _Block_copy(v15);
  swift_release();
  objc_msgSend(a3, sel_addAnimations_, v14);
  _Block_release(v14);
}

void closure #1 in ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  if (v6)
  {
    long long v7 = (void *)v6;
    uint64_t v8 = (void *)MEMORY[0x210550400](v6 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);

    if (v8)
    {
      swift_beginAccess();
      uint64_t v9 = MEMORY[0x210550400](v5);
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v8) + 0x638))(v9, a4);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void @objc ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  swift_unknownObjectRetain();
  id v10 = a1;
  ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)((uint64_t)v8, (uint64_t)v9, a5);

  swift_unknownObjectRelease();
}

void ContainerCanvasElementView.__ivar_destroyer()
{
  id v1 = (void *)MEMORY[0x263F8EED0];

  swift_bridgeObjectRelease();
  id v2 = *(void **)((char *)v0 + *(void *)((*v1 & *v0) + 0x4E0));
}

id ContainerCanvasElementView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContainerCanvasElementView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc ContainerCanvasElementView.__ivar_destroyer(void *a1)
{
  objc_super v2 = (void *)MEMORY[0x263F8EED0];

  swift_bridgeObjectRelease();
  id v3 = *(void **)((char *)a1 + *(void *)((*v2 & *a1) + 0x4E0));
}

uint64_t type metadata accessor for ContainerCanvasElementView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized ContainerCanvasElementView.drawingView.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4C0));
}

uint64_t specialized ContainerCanvasElementView.subelementsContainerView.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4C8));
}

uint64_t specialized ContainerCanvasElementView.formFillingView.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4D0));
}

uint64_t sub_20C6DB064()
{
  return 24;
}

__n128 sub_20C6DB070(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)(uint64_t *a1)
{
  return closure #1 in ContainerCanvasElementView.drawingDidChange(newDrawing:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_20C6DB0A4()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C6DB0DC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)()
{
  closure #1 in ContainerCanvasElementView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(v0[5], v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper_56(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_56()
{
  return swift_release();
}

uint64_t specialized ContainerCanvasElementView.canvas.setter()
{
  swift_unknownObjectWeakAssign();
  id v1 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x488);
  return v1();
}

void specialized ContainerCanvasElementView.init(coder:)()
{
  id v1 = (void *)MEMORY[0x263F8EED0];
  *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x4C0)) = 0;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x4C8)) = 0;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x4D0)) = 0;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x4D8)) = MEMORY[0x263F8EE80];
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x4E0)) = 0;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x4E8)) = 0;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x4F0)) = 0;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x4F8)) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_20C6DB330()
{
  return 24;
}

__n128 sub_20C6DB33C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C6DB350()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_20C6DB388(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(void))(*(void *)(*(void *)(a2 + a1 - 8) + 8) + 32))(*(void *)(a2 + a1 - 24));
}

uint64_t sub_20C6DB3D8(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, double))(*(void *)(*(void *)(a4 + a3 - 8) + 8) + 40))(*(void *)(a4 + a3 - 24), *(void *)(*(void *)(a4 + a3 - 8) + 8), *a1);
}

uint64_t sub_20C6DB428()
{
  return 24;
}

__n128 sub_20C6DB434(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C6DB450()
{
  return 24;
}

__n128 sub_20C6DB45C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #2 in ContainerCanvasElementView.updateSubelements()@<X0>(void *a1@<X8>)
{
  return closure #2 in ContainerCanvasElementView.updateSubelements()(a1);
}

uint64_t outlined init with take of IndexingIterator<CollectionDifference<AnyCanvasElementView>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s8PaperKit15PKDrawingStructVAC9Coherence6CRTypeAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.drawingSelectionDidChange()(void *a1)
{
  return closure #1 in ContainerCanvasElementView.drawingSelectionDidChange()(a1, *(void *)(v1 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> ()) -> ()(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(void (**)(void (*)(uint64_t), uint64_t))(a1 + 32);
  id v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (), v4);
  swift_release();
  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

id PKPaperTextViewLinkingController.addLinkClient.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController____lazy_storage___addLinkClient;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController____lazy_storage___addLinkClient);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController____lazy_storage___addLinkClient);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F7C200]), sel_init);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t PKPaperTextViewLinkingController.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

uint64_t PKPaperTextViewLinkingController.delegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*PKPaperTextViewLinkingController.delegate.modify(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v5);
  return PKPaperTextViewLinkingController.delegate.modify;
}

void PKPaperTextViewLinkingController.delegate.modify(void **a1, char a2)
{
  id v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

char *PKPaperTextViewLinkingController.__allocating_init(textView:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SynapseLinkingEngine()), sel_init);
  uint64_t v5 = specialized PKPaperTextViewLinkingController.init(textView:linkingEngine:)(a1, v4, (char *)objc_allocWithZone(v1));
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

char *PKPaperTextViewLinkingController.init(textView:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SynapseLinkingEngine()), sel_init);
  id v4 = specialized PKPaperTextViewLinkingController.init(textView:linkingEngine:)(a1, v3, (char *)objc_allocWithZone(ObjectType));
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

UIMenu PKPaperTextViewLinkingController.linkItemsMenu.getter()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  UIMenuElementSize v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_20C835790;
  UIMenuElementSize v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = (UIMenuElementSize)partial apply for closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (UIMenuElementSize)thunk for @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> ()) -> ();
  aBlock[3] = (UIMenuElementSize)&block_descriptor_57;
  uint64_t v2 = _Block_copy(aBlock);
  id v3 = self;
  swift_retain();
  id v4 = objc_msgSend(v3, sel_elementWithProvider_, v2);
  _Block_release(v2);
  swift_release();
  swift_release();
  *(void *)(v0 + 32) = v4;
  aBlock[0] = v0;
  specialized Array._endMutation()();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v9.value.super.isCGFloat a = 0;
  v9.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v5, (Swift::String_optional)0, v9, 0, 0xFFFFFFFFFFFFFFFFLL, aBlock[0], v7);
}

uint64_t closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v5);
  if (result)
  {
    Swift::OpaquePointer v7 = (char *)result;
    uint64_t v8 = result + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
    swift_beginAccess();
    UIImage_optional v9 = (void *)MEMORY[0x210550400](v8);
    if (v9)
    {
      id v10 = v9;
      if (objc_msgSend(v9, sel_respondsToSelector_, sel_linkingControllerLinksMenuExcludedUserActivities_))
      {
        id v11 = objc_msgSend(v10, sel_linkingControllerLinksMenuExcludedUserActivities_, v7);
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
        uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        swift_unknownObjectRelease();

LABEL_7:
        uint64_t v12 = (void *)swift_allocObject();
        v12[2] = v7;
        v12[3] = a1;
        v12[4] = a2;
        uint64_t v13 = *(void *)&v7[OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_linkingEngine + 8];
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v15 = swift_allocObject();
        *(void *)(v15 + 16) = partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter;
        *(void *)(v15 + 24) = v12;
        objc_super v16 = *(void (**)(void, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v13 + 32);
        CGFloat v17 = v7;
        swift_retain();
        swift_retain();
        v16(0, 1, v18, closure #1 in PKPaperTextViewLinkingController.fetchLinkableItems(excluding:completion:)partial apply, v15, ObjectType, v13);

        swift_bridgeObjectRelease();
        swift_release();
        return swift_release();
      }
      swift_unknownObjectRelease();
    }
    uint64_t v18 = MEMORY[0x263F8EE78];
    goto LABEL_7;
  }
  return result;
}

uint64_t closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  UIImage_optional v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v13 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v14;
  v15[3] = a1;
  v15[4] = v18;
  v15[5] = a4;
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_59_1;
  objc_super v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v12, v9, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v19);
}

void closure #1 in closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = (void *)MEMORY[0x210550400](v5);
  if (v6)
  {
    id v7 = v6;
    unint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8PaperKit8LinkItem_pG_So016UICustomViewMenuB0Cs5NeverOTg503_s8d16Kit32PKPaperTexti25LinkingControllerC18buildfj59Items33_35037C7173BEC9E8EC270B903D7A81233forSaySo13UIMenub10CGSayAA0I4G33_pG_tFSo08UICustomejU0CAaJ_pXEfU_AF0noipQ0CTf1cn_nTf4ng_n(a2, v7);

    if (v8 >> 62)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
      UIMenuElementSize preferredElementSize = _bridgeCocoaArray<A>(_:)();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
      UIMenuElementSize preferredElementSize = v8;
    }
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_20C835790;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    v18.value.super.isCGFloat a = 0;
    v18.is_nil = 0;
    *(UIMenu *)(v10 + 32) = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v11, (Swift::String_optional)0, v18, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, aBlock[0]);
    aBlock[0]._rawValue = (void *)v10;
    specialized Array._endMutation()();
    a3(v10);
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    swift_retain();
    uint64_t v14 = (void *)MEMORY[0x21054D080](0xD000000000000028, 0x800000020C84E2D0);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = partial apply for implicit closure #1 in Analytics.recordDidPresentAddLinkMenu(linksCount:);
    v15[3] = v13;
    aBlock[4]._rawValue = partial apply for closure #1 in Analytics.sendEventLazy(key:payload:);
    aBlock[5]._rawValue = v15;
    aBlock[0]._rawValue = (void *)MEMORY[0x263EF8330];
    aBlock[1]._rawValue = (void *)1107296256;
    aBlock[2]._rawValue = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3]._rawValue = &block_descriptor_68_1;
    objc_super v16 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v16);

    swift_release();
    swift_release();
  }
}

uint64_t PKPaperTextViewLinkingController.fetchLinkableItems(excluding:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_linkingEngine + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  uint64_t v10 = *(void (**)(void, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v7 + 32);
  swift_retain();
  v10(0, 1, a1, partial apply for closure #1 in PKPaperTextViewLinkingController.fetchLinkableItems(excluding:completion:), v9, ObjectType, v7);
  return swift_release();
}

char *closure #1 in closure #1 in PKPaperTextViewLinkingController.buildLinkMenuItems(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_allocWithZone((Class)type metadata accessor for LinkMenuItemView());
  uint64_t v5 = swift_unknownObjectRetain();
  id v6 = LinkMenuItemView.init(linkItem:)(v5, a3);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v8 = *(void (**)(id, _UNKNOWN **, uint64_t, uint64_t))(a3 + 16);
  uint64_t v9 = (char *)v6;
  v8(v6, &protocol witness table for LinkMenuItemView, ObjectType, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 72))(ObjectType, a3);
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView_delegate + 8] = &protocol witness table for PKPaperTextViewLinkingController;
  swift_unknownObjectWeakAssign();
  return v9;
}

uint64_t PKPaperTextViewLinkingController.fetchLinkableItems(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_linkingEngine + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  unint64_t v8 = *(void (**)(void, uint64_t, void, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v5 + 32);
  swift_retain();
  v8(0, 1, MEMORY[0x263F8EE78], closure #1 in PKPaperTextViewLinkingController.fetchLinkableItems(excluding:completion:)partial apply, v7, ObjectType, v5);
  return swift_release();
}

void PKPaperTextViewLinkingController.insertSynapseLink(_:)(void *a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for SynapseLinkItem());
  id v3 = SynapseLinkItem.init(synapseItem:)(a1);
  specialized PKPaperTextViewLinkingController.insertLink(_:completion:)(v3, 0, 0);
}

void PKPaperTextViewLinkingController.insertSynapseLink(_:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)type metadata accessor for SynapseLinkItem());
  id v7 = SynapseLinkItem.init(synapseItem:)(a1);
  specialized PKPaperTextViewLinkingController.insertLink(_:completion:)(v7, a2, a3);
}

uint64_t PKPaperTextViewLinkingController.paperViewCanvas.getter()
{
  UIMenuElementSize v1 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_textView);
  if (v1)
  {
    id v2 = v1;
    uint64_t v12 = 0;
    id v3 = objc_msgSend(v1, sel_textStorage);
    id v4 = objc_msgSend(v3, sel_length);

    MEMORY[0x270FA5388](v5);
    v11[2] = &v12;
    UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(0, (uint64_t)v4, 1, 2, (uint64_t)partial apply for closure #1 in PKPaperTextViewLinkingController.paperViewCanvas.getter, (uint64_t)v11);

    return v12;
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_20C2D7000, v8, v9, "Text view backpointer is nil", v10, 2u);
      MEMORY[0x210550270](v10, -1, -1);
    }

    return 0;
  }
}

void PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)()
{
  type metadata accessor for SynapseLinkItem();
  uint64_t v0 = swift_dynamicCastClass();
  if (v0)
  {
    UIMenuElementSize v1 = (void *)v0;
    id v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem);
    swift_unknownObjectRetain();
    id v3 = objc_msgSend(v2, sel_userActivity);
    if (v3)
    {
      id v4 = v3;
      id v5 = PKPaperTextViewLinkingController.addLinkClient.getter();
      uint64_t v6 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = v1;
      v9[4] = partial apply for closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:);
      void v9[5] = v7;
      v9[0] = MEMORY[0x263EF8330];
      v9[1] = 1107296256;
      v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIImage?) -> ();
      v9[3] = &block_descriptor_18;
      unint64_t v8 = _Block_copy(v9);
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v5, sel_userWillAddLinkWithActivity_completion_, v4, v8);
      swift_unknownObjectRelease();
      _Block_release(v8);
    }
    else
    {
      PKPaperTextViewLinkingController.insertLinkItem(_:)(v1);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  os_log_type_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](a2 + 16);
  if (result)
  {
    uint64_t v15 = (void *)result;
    uint64_t v30 = v10;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    if (a1)
    {
      id v16 = a1;
      CGFloat v17 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v15;
      *(void *)(v18 + 24) = v16;
      uint64_t v35 = partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:);
      uint64_t v36 = v18;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v32 = 1107296256;
      uint64_t v33 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      CGAffineTransform v34 = &block_descriptor_30_1;
      uint64_t v19 = _Block_copy(&aBlock);
      uint64_t v29 = v11;
      uint64_t v20 = v7;
      id v21 = v19;
      id v22 = v15;
      id v23 = v16;
      swift_release();
      static DispatchQoS.unspecified.getter();
      uint64_t aBlock = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x21054DA10](0, v13, v9, v21);
      long long v24 = v21;
      uint64_t v7 = v20;
      uint64_t v11 = v29;
      _Block_release(v24);
    }
    else
    {
      CGFloat v17 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v15;
      *(void *)(v25 + 24) = a3;
      uint64_t v35 = partial apply for closure #2 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:);
      uint64_t v36 = v25;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v32 = 1107296256;
      uint64_t v33 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      CGAffineTransform v34 = &block_descriptor_24_0;
      long long v26 = _Block_copy(&aBlock);
      id v23 = v15;
      id v27 = a3;
      swift_release();
      static DispatchQoS.unspecified.getter();
      uint64_t aBlock = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x21054DA10](0, v13, v9, v26);
      _Block_release(v26);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v30);
  }
  return result;
}

void closure #1 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(uint64_t a1, void *a2)
{
  id v3 = objc_allocWithZone((Class)type metadata accessor for SynapseLinkItem());
  id v4 = SynapseLinkItem.init(synapseItem:)(a2);
  PKPaperTextViewLinkingController.insertLinkItem(_:)(v4);
}

void PKPaperTextViewLinkingController.insertLinkItem(_:)(void *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
  swift_beginAccess();
  id v4 = (void *)MEMORY[0x210550400](v3);
  if (!v4) {
    goto LABEL_6;
  }
  id v5 = v4;
  if ((objc_msgSend(v4, sel_respondsToSelector_, sel_linkingController_shouldAddSynapseLinkItem_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  unsigned int v6 = objc_msgSend(v5, sel_linkingController_shouldAddSynapseLinkItem_, v1, a1);
  swift_unknownObjectRelease();
  if (v6)
  {
LABEL_6:
    specialized PKPaperTextViewLinkingController.insertLink(_:completion:)(a1, 0, 0);
    uint64_t v7 = (void *)MEMORY[0x21054D080](0xD000000000000020, 0x800000020C84E290);
    aBlock[4] = specialized closure #1 in Analytics.sendEventLazy(key:payload:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = &block_descriptor_36;
    uint64_t v8 = _Block_copy(aBlock);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v8);
  }
}

void closure #2 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
  swift_beginAccess();
  id v5 = (void *)MEMORY[0x210550400](v4);
  if (!v5) {
    goto LABEL_6;
  }
  unsigned int v6 = v5;
  if ((objc_msgSend(v5, sel_respondsToSelector_, sel_linkingController_shouldAddSynapseLinkItem_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  unsigned __int8 v7 = objc_msgSend(v6, sel_linkingController_shouldAddSynapseLinkItem_, a1, a2);
  swift_unknownObjectRelease();
  if (v7)
  {
LABEL_6:
    specialized PKPaperTextViewLinkingController.insertLink(_:completion:)(a2, 0, 0);
    uint64_t v8 = (void *)MEMORY[0x21054D080](0xD000000000000020, 0x800000020C84E290);
    aBlock[4] = specialized closure #1 in Analytics.sendEventLazy(key:payload:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = &block_descriptor_33;
    os_log_type_t v9 = _Block_copy(aBlock);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v9);
  }
}

uint64_t PKPaperTextViewLinkingController.synapseLinkItems.getter()
{
  uint64_t v1 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_textView);
  if (v1)
  {
    id v2 = v1;
    uint64_t v12 = MEMORY[0x263F8EE78];
    id v3 = objc_msgSend(v1, sel_textStorage);
    id v4 = objc_msgSend(v3, sel_length);

    MEMORY[0x270FA5388](v5);
    v11[2] = &v12;
    UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(0, (uint64_t)v4, 1, 0, (uint64_t)partial apply for closure #1 in PKPaperTextViewLinkingController.synapseLinkItems.getter, (uint64_t)v11);

    return v12;
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_20C2D7000, v8, v9, "Text view backpointer is nil", v10, 2u);
      MEMORY[0x210550270](v10, -1, -1);
    }

    return MEMORY[0x263F8EE78];
  }
}

uint64_t closure #1 in PKPaperTextViewLinkingController.synapseLinkItems.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + direct field offset for Canvas.paperView)
      + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(a1 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  unint64_t v12 = Capsule<>.links.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (!(v12 >> 62))
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    unint64_t v25 = MEMORY[0x263F8EE78];
    return specialized Array.append<A>(contentsOf:)(v25);
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_11;
  }
LABEL_3:
  unint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v13 & 0x8000000000000000) == 0)
  {
    v26[1] = a5;
    uint64_t v15 = self;
    uint64_t v16 = 0;
    uint64_t v17 = *MEMORY[0x263F7C250];
    do
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v18 = (id)MEMORY[0x21054E050](v16, v12);
      }
      else {
        id v18 = *(id *)(v12 + 8 * v16 + 32);
      }
      uint64_t v19 = v18;
      ++v16;
      uint64_t v20 = (objc_class *)type metadata accessor for SynapseLinkItem();
      id v21 = (char *)objc_allocWithZone(v20);
      *(void *)&v21[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate + 8] = 0;
      swift_unknownObjectWeakInit();
      *(void *)&v21[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem] = v19;
      v27.receiver = v21;
      v27.super_class = v20;
      id v22 = v19;
      id v23 = objc_msgSendSuper2(&v27, sel_init);
      id v24 = objc_msgSend(v15, sel_defaultCenter);
      objc_msgSend(v24, sel_addObserver_selector_name_object_, v23, sel_linkPreviewDidFinishLoadingWithNotification_, v17, v22);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v13 != v16);
    unint64_t v25 = v28;
    swift_bridgeObjectRelease();
    return specialized Array.append<A>(contentsOf:)(v25);
  }
  __break(1u);
  return result;
}

id PKPaperTextViewLinkingController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void PKPaperTextViewLinkingController.init()()
{
}

id PKPaperTextViewLinkingController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *specialized PKPaperTextViewLinkingController.init(textView:linkingEngine:)(void *a1, void *a2, char *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&a3[OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController____lazy_storage___addLinkClient] = 0;
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_analytics;
  type metadata accessor for Analytics();
  uint64_t v8 = a3;
  *(void *)&a3[v7] = swift_initStaticObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  uint64_t v9 = &v8[OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_linkingEngine];
  *(void *)uint64_t v9 = a2;
  *((void *)v9 + 1) = &protocol witness table for SynapseLinkingEngine;
  id v10 = a2;

  v17.receiver = v8;
  v17.super_class = ObjectType;
  uint64_t v11 = (char *)objc_msgSendSuper2(&v17, sel_init);
  uint64_t v12 = *(void *)&v11[OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_linkingEngine + 8];
  uint64_t v13 = swift_getObjectType();
  uint64_t v14 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v12 + 16);
  uint64_t v15 = v11;
  swift_unknownObjectRetain();
  v14(v11, &protocol witness table for PKPaperTextViewLinkingController, v13, v12);
  swift_unknownObjectRelease();

  return v15;
}

uint64_t sub_20C6DD938()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(uint64_t a1, uint64_t a2)
{
  return closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(a1, a2, v2);
}

uint64_t block_copy_helper_57(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_57()
{
  return swift_release();
}

uint64_t sub_20C6DD990()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in PKPaperTextViewLinkingController.fetchLinkableItems(excluding:completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void specialized PKPaperTextViewLinkingController.insertLink(_:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)PKPaperTextViewLinkingController.paperViewCanvas.getter();
  if (v5)
  {
    uint64_t v14 = v5;
    specialized static LinkLayout.addLinkItem(_:in:completion:)((uint64_t)a1, v5, a2, a3);
    unsigned int v6 = v14;
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    swift_unknownObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)id v10 = 136315138;
      uint64_t v16 = v11;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinkItem);
      uint64_t v12 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v8, v9, "Unable to insert link %s because there isn't a paper canvas on the textView", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v11, -1, -1);
      MEMORY[0x210550270](v10, -1, -1);

      return;
    }

    unsigned int v6 = a1;
  }
}

uint64_t partial apply for closure #1 in PKPaperTextViewLinkingController.synapseLinkItems.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in PKPaperTextViewLinkingController.synapseLinkItems.getter(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t sub_20C6DDC24@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC8PaperKit32PKPaperTextViewLinkingController_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v3);
  *a2 = result;
  return result;
}

uint64_t sub_20C6DDC7C()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for PKPaperTextViewLinkingController()
{
  return self;
}

uint64_t method lookup function for PKPaperTextViewLinkingController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PKPaperTextViewLinkingController);
}

uint64_t sub_20C6DDD10()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(void *a1)
{
  return closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_20C6DDD58()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #2 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)()
{
  closure #2 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

void partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)()
{
  closure #1 in closure #1 in PKPaperTextViewLinkingController.linkMenuItemViewDidReceiveTap(_:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t specialized static LinkLayout.addLinkItem(_:in:completion:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v38 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v41 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  CGRect v37 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = SynapseLinkItem.dataRepresentation.getter();
  unint64_t v18 = v17;
  objc_msgSend(a2, sel_frame);
  memset(v43, 0, sizeof(v43));
  char v44 = 0;
  LOBYTE(aBlock[0]) = 9;
  static LinkLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)(v16, v18, (uint64_t)v43, (unsigned __int8 *)aBlock, 0.0, 0.0, 1, (uint64_t)v15, v19, v20, v21, v22, 0.0);
  outlined consume of Data._Representation(v16, v18);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v23 = (void *)static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
  unint64_t v24 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v25 + v24, v12, v9);
  long long v26 = (uint64_t *)(v25 + ((v11 + v24 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v28 = v35;
  uint64_t v27 = v36;
  *long long v26 = v35;
  v26[1] = v27;
  aBlock[4] = partial apply for closure #1 in static LinkLayout.addLinkItem(_:in:completion:);
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_42_1;
  uint64_t v29 = _Block_copy(aBlock);
  id v30 = a2;
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v28);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v32 = v37;
  uint64_t v31 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x21054DA10](0, v8, v32, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v31);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t sub_20C6DE228()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + v5)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, v5 + 16, v3 | 7);
}

uint64_t partial apply for closure #1 in static LinkLayout.addLinkItem(_:in:completion:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in static LinkLayout.addLinkItem(_:in:completion:)(v3, v0 + v2, v4);
}

void partial apply for closure #1 in PKPaperTextViewLinkingController.paperViewCanvas.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = *(void ***)(v4 + 16);
  uint64_t v7 = MEMORY[0x210550400](*(void *)(a1 + direct field offset for Canvas.paperView)+ OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  uint64_t v8 = *v6;
  *uint64_t v6 = (void *)v7;

  *a4 = 1;
}

uint64_t sub_20C6DE404()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t sub_20C6DE444()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(uint64_t a1)
{
  return closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_20C6DE490()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter()
{
  closure #1 in closure #1 in closure #1 in PKPaperTextViewLinkingController.linkItemsMenu.getter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8PaperKit8LinkItem_pG_So016UICustomViewMenuB0Cs5NeverOTg503_s8d16Kit32PKPaperTexti25LinkingControllerC18buildfj59Items33_35037C7173BEC9E8EC270B903D7A8123LL3forSaySo13UIMenub10CGSayAA0I4G33_pG_tFSo08UICustomejU0CAaJ_pXEfU_AF0noipQ0CTf1cn_nTf4ng_n(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v6 = (long long *)(a1 + 32);
    uint64_t v7 = self;
    do
    {
      uint64_t v8 = swift_allocObject();
      long long v9 = *v6++;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = a2;
      aBlock[4] = partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.buildLinkMenuItems(for:);
      aBlock[5] = v8;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewController) -> (@owned UIViewController);
      aBlock[3] = &block_descriptor_74_0;
      uint64_t v10 = _Block_copy(aBlock);
      swift_unknownObjectRetain_n();
      id v11 = a2;
      id v12 = objc_msgSend(v7, sel_elementWithViewProvider_, v10);
      _Block_release(v10);
      swift_unknownObjectRelease();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v3;
    }
    while (v3);
    return v14;
  }
  return result;
}

uint64_t sub_20C6DE694()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

unint64_t partial apply for implicit closure #1 in Analytics.recordDidPresentAddLinkMenu(linksCount:)()
{
  return implicit closure #1 in Analytics.recordDidPresentAddLinkMenu(linksCount:)();
}

uint64_t sub_20C6DE6AC()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

char *partial apply for closure #1 in closure #1 in PKPaperTextViewLinkingController.buildLinkMenuItems(for:)(uint64_t a1)
{
  return closure #1 in closure #1 in PKPaperTextViewLinkingController.buildLinkMenuItems(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t KeyPathWrapper.isEqual(_:)(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x270FA5388](v34);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v7 - 8);
  long long v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v30 - v11;
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v30 - v15;
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v17((char *)&v30 - v15, v1 + OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path, v2, v14);
  unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v18(v16, 0, 1, v2);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v33, (uint64_t)v36, &demangling cache variable for type metadata for Any?);
  uint64_t v32 = v9;
  if (v37)
  {
    type metadata accessor for KeyPathWrapper();
    if (swift_dynamicCast())
    {
      CGFloat v19 = v35;
      ((void (*)(char *, char *, uint64_t))v17)(v12, &v35[OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path], v2);

      uint64_t v20 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v20 = 1;
LABEL_6:
  v18(v12, v20, 1, v2);
  uint64_t v21 = (uint64_t)&v6[*(int *)(v34 + 48)];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v16, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, v21, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  CGFloat v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v22((uint64_t)v6, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    int v23 = v22(v21, 1, v2);
    if (v23 == 1) {
      unint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
    }
    else {
      unint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    uint64_t v26 = (uint64_t)v32;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v6, (uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    if (v22(v21, 1, v2) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v26, v2);
      char v25 = 0;
      unint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    else
    {
      uint64_t v27 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v31, v21, v2);
      lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28(v27, v2);
      unint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v28((char *)v26, v2);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, v24);
  return v25 & 1;
}

id KeyPathWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KeyPathWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for KeyPathWrapper()
{
  return type metadata accessor for KeyPathWrapper();
}

uint64_t type metadata accessor for KeyPathWrapper()
{
  uint64_t result = type metadata singleton initialization cache for KeyPathWrapper;
  if (!type metadata singleton initialization cache for KeyPathWrapper) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id one-time initialization function for shared()
{
  type metadata accessor for GraphCanvasElementRenderedImageCache();
  uint64_t v0 = swift_allocObject();
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF8E0]), sel_init);
  *(void *)(v0 + 16) = v1;
  id result = objc_msgSend(v1, sel_setCountLimit_, 12);
  static GraphCanvasElementRenderedImageCache.shareCGFloat d = v0;
  return result;
}

uint64_t type metadata accessor for GraphCanvasElementRenderedImageCache()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CRKeyPath();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double UnknownCanvasElement.frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t UnknownCanvasElement.frame.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t UnknownCanvasElement.thumbnail.getter()
{
  return UnknownCanvasElement.thumbnail.getter(MEMORY[0x263F32C30]);
}

uint64_t type metadata accessor for UnknownCanvasElement()
{
  uint64_t result = type metadata singleton initialization cache for UnknownCanvasElement;
  if (!type metadata singleton initialization cache for UnknownCanvasElement) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t key path getter for UnknownCanvasElement.thumbnail : UnknownCanvasElement()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for UnknownCanvasElement.thumbnail : UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAsset?);
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAsset?);
}

uint64_t UnknownCanvasElement.thumbnail.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for CRAsset?);
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAsset?);
}

uint64_t UnknownCanvasElement.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v11 - v6;
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  memset(v11, 0, sizeof(v11));
  CRRegister.init(wrappedValue:)();
  uint64_t v8 = type metadata accessor for UnknownCanvasElement();
  *(void *)&v11[0] = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v9 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAsset?);
  *(void *)&v11[0] = 0;
  uint64_t result = CRRegister.init(wrappedValue:)();
  *(void *)(a1 + *(int *)(v8 + 32)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t (*UnknownCanvasElement.frame.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownCanvasElement.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for UnknownCanvasElement.$frame : UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t UnknownCanvasElement.$frame.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*UnknownCanvasElement.$frame.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double UnknownCanvasElement.rotation.getter()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for UnknownCanvasElement.rotation : UnknownCanvasElement@<D0>(double *a1@<X8>)
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for UnknownCanvasElement.rotation : UnknownCanvasElement()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t UnknownCanvasElement.rotation.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*UnknownCanvasElement.rotation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownCanvasElement.$rotation.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for UnknownCanvasElement.$rotation : UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t UnknownCanvasElement.$rotation.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*UnknownCanvasElement.$rotation.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for UnknownCanvasElement() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*UnknownCanvasElement.thumbnail.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownCanvasElement.$thumbnail.getter()
{
  return UnknownCanvasElement.thumbnail.getter(MEMORY[0x263F32C38]);
}

uint64_t UnknownCanvasElement.thumbnail.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for UnknownCanvasElement();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return a1(v2);
}

uint64_t key path setter for UnknownCanvasElement.$thumbnail : UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t UnknownCanvasElement.$thumbnail.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*UnknownCanvasElement.$thumbnail.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for UnknownCanvasElement() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t UnknownCanvasElement.minAppVersion.getter()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for UnknownCanvasElement.minAppVersion : UnknownCanvasElement@<X0>(void *a1@<X8>)
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for UnknownCanvasElement.minAppVersion : UnknownCanvasElement()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t UnknownCanvasElement.minAppVersion.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*UnknownCanvasElement.minAppVersion.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t UnknownCanvasElement.$minAppVersion.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for UnknownCanvasElement.$minAppVersion : UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t UnknownCanvasElement.$minAppVersion.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for UnknownCanvasElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*UnknownCanvasElement.$minAppVersion.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for UnknownCanvasElement() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t UnknownCanvasElement.additionalFields.getter()
{
  type metadata accessor for UnknownCanvasElement();
  return swift_bridgeObjectRetain();
}

uint64_t UnknownCanvasElement.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for UnknownCanvasElement() + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*UnknownCanvasElement.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static UnknownCanvasElement.fields.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_2676CEAC0;
  uint64_t v4 = qword_2676CEAC8;
  uint64_t v3 = unk_2676CEAD0;
  uint64_t v5 = qword_2676CEAD8;
  uint64_t v6 = qword_2676CEAE0;
  uint64_t v7 = qword_2676CEAE8;
  uint64_t v8 = qword_2676CEAF0;
  uint64_t v10 = qword_2676CEAF8;
  uint64_t v9 = *(void *)byte_2676CEB00;
  uint64_t v11 = qword_2676CEB08;
  uint64_t v12 = qword_2676CEB10;
  *a1 = static UnknownCanvasElement.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance UnknownCanvasElement()
{
  return CRStruct_4.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance UnknownCanvasElement()
{
  return CRStruct_4.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F170F0](a1, v2);
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance UnknownCanvasElement()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  CRRegister.wrappedValue.getter();
  uint64_t result = v1;
  if (v1 < -32768)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (v1 >= 0x8000) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t UnknownCanvasElement.minAppFormatVersion.getter()
{
  type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  CRRegister.wrappedValue.getter();
  uint64_t result = v1;
  if (v1 < -32768)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (v1 >= 0x8000) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for static CRStruct_Base_4.fields.getter in conformance UnknownCanvasElement@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_2676CEAC0;
  uint64_t v4 = qword_2676CEAC8;
  uint64_t v3 = unk_2676CEAD0;
  uint64_t v5 = qword_2676CEAD8;
  uint64_t v6 = qword_2676CEAE0;
  uint64_t v7 = qword_2676CEAE8;
  uint64_t v8 = qword_2676CEAF0;
  uint64_t v10 = qword_2676CEAF8;
  uint64_t v9 = *(void *)byte_2676CEB00;
  uint64_t v11 = qword_2676CEB08;
  uint64_t v12 = qword_2676CEB10;
  *a1 = static UnknownCanvasElement.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17160](a1, v2);
}

uint64_t protocol witness for CRDT.context.getter in conformance UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17100](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17128](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17158](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17130](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17150](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17138](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17118](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17110](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F170F8](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F170E0](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance UnknownCanvasElement()
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return CRStruct_4.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F170E8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  return MEMORY[0x270F17140](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance UnknownCanvasElement()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance UnknownCanvasElement()
{
  return CRDT.init(serializedData:)();
}

void UnknownCanvasElement.shared(_:)()
{
}

uint64_t UnknownCanvasElement.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized UnknownCanvasElement.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized UnknownCanvasElement.render<A>(in:id:capsule:options:));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v14(a1, a2, a4, a5, a6);
}

uint64_t specialized CanvasElement.renderThumbnail(in:)(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  v2[13] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CRAsset();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized CanvasElement.renderThumbnail(in:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized CanvasElement.renderThumbnail(in:), 0, 0);
}

uint64_t specialized CanvasElement.renderThumbnail(in:)()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  *(void *)(v0 + 136) = type metadata accessor for UnknownCanvasElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 104), &demangling cache variable for type metadata for CRAsset?);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 88);
    (*(void (**)(void, void, void))(*(void *)(v0 + 120) + 32))(*(void *)(v0 + 128), *(void *)(v0 + 104), *(void *)(v0 + 112));
    *(void *)(v0 + 144) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    uint64_t v7 = specialized CanvasElement.maxDimensionInPixels(_:in:)(v6, *(double *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v8;
    *uint64_t v8 = v0;
    v8[1] = specialized CanvasElement.renderThumbnail(in:);
    return CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(v7, 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = *(void **)(v0 + 160);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v3 = v1;
    CRRegister.wrappedValue.getter();
    uint64_t v4 = *(double *)(v0 + 48);
    uint64_t v5 = *(double *)(v0 + 56);
    uint64_t v6 = *(double *)(v0 + 64);
    uint64_t v7 = *(double *)(v0 + 72);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    specialized CanvasElement.renderImage(_:frame:rotation:cornerRadius:in:)(v3, 0, 1, v2, v4, v5, v6, v7, *(double *)(v0 + 80));
  }
  (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

void UnknownCanvasElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v82 = a8;
  uint64_t v81 = a7;
  uint64_t v80 = a5;
  uint64_t v79 = a4;
  uint64_t v70 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v69 = *a1;
  double v18 = *(double *)(a6 + 8);
  double v78 = *(double *)a6;
  double v77 = *(double *)(a6 + 16);
  double v76 = *(double *)(a6 + 24);
  uint64_t v75 = *(void *)(a6 + 32);
  uint64_t v74 = *(void *)(a6 + 40);
  uint64_t v73 = *(void *)(a6 + 48);
  uint64_t v72 = *(void *)(a6 + 56);
  uint64_t v71 = *(void *)(a6 + 64);
  int v19 = *(unsigned __int8 *)(a6 + 74);
  int v20 = *(unsigned __int16 *)(a6 + 72);
  type metadata accessor for CanvasElementPDFAnnotation();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21) {
    return;
  }
  CGFloat v22 = (char *)v21;
  if (*(void *)&v18 == 1 || (int v23 = v20 | (v19 << 16), (v23 & 0x100) == 0))
  {
    *(unsigned char *)(v21 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 0;
    return;
  }
  double v24 = v18;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v70, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  uint64_t v25 = v15;
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  id v68 = a3;
  if (v26 == 1)
  {
    id v27 = a3;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    uint64_t v28 = v81;
    uint64_t v29 = v82;
    uint64_t v30 = v80;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    unint64_t v31 = v69;
    uint64_t v32 = (void *)v69;
    uint64_t v33 = a3;
    uint64_t v29 = v82;
    uint64_t v30 = v80;
    if (v69 >> 62)
    {
      if (v69 >> 62 != 1)
      {
        uint64_t v38 = *(void (**)(char *, uint64_t))(v25 + 8);
        id v39 = v33;
        v38(v17, v14);
        uint64_t v28 = v81;
        goto LABEL_12;
      }
      uint64_t v32 = (void *)(v69 & 0x3FFFFFFFFFFFFFFFLL);
    }
    id v34 = v33;
    outlined copy of PaperDocument.PDFDocumentUse(v31);
    uint64_t v35 = type metadata accessor for UnknownCanvasElement();
    uint64_t v36 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
    uint64_t v37 = v35;
    uint64_t v28 = v81;
    specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(v32, (uint64_t)v17, 1, v30, v37, v81, v36, (uint64_t)&protocol witness table for UnknownCanvasElement, v29);
    outlined consume of PaperDocument.PDFDocumentUse(v69);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v14);
  }
LABEL_12:
  double v84 = v78;
  double v85 = v24;
  double v86 = v77;
  double v87 = v76;
  uint64_t v88 = v75;
  uint64_t v89 = v74;
  uint64_t v90 = v73;
  uint64_t v91 = v72;
  uint64_t v92 = v71;
  __int16 v93 = v23;
  char v94 = BYTE2(v23);
  uint64_t v40 = type metadata accessor for UnknownCanvasElement();
  CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(v79, v83, v30, (uint64_t)&v84, v28, v40, v29, (uint64_t)&protocol witness table for UnknownCanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double v41 = v84;
  double v42 = v85;
  double v44 = v86;
  double Height = v87;
  id v45 = objc_msgSend(v22, sel_page);
  if (v45)
  {
    uint64_t v46 = v45;
    objc_msgSend(v45, sel_boundsForBox_, 0);
    double v48 = v47;
    double v50 = v49;

    v95.origin.double x = v41;
    v95.origin.double y = v42;
    v95.size.CGFloat width = v44;
    v95.size.double height = Height;
    CGFloat MinX = CGRectGetMinX(v95);
    v96.origin.double x = v41;
    v96.origin.double y = v42;
    v96.size.CGFloat width = v44;
    v96.size.double height = Height;
    double v52 = v50 + v48 + v48 - CGRectGetMaxY(v96);
    v97.origin.double x = v41;
    v97.origin.double y = v42;
    v97.size.CGFloat width = v44;
    v97.size.double height = Height;
    CGFloat Width = CGRectGetWidth(v97);
    v98.origin.double x = v41;
    v98.origin.double y = v42;
    v98.size.CGFloat width = v44;
    v98.size.double height = Height;
    double Height = CGRectGetHeight(v98);
    double v44 = Width;
    double v41 = MinX;
    double v42 = v52;
  }
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;
  id v57 = v68;
  uint64_t v58 = (void *)MEMORY[0x21054D080](v54, v56);
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setType_, v58);

  uint64_t v59 = self;
  id v60 = v57;
  id v61 = objc_msgSend(v59, sel_redColor);
  objc_msgSend(v22, sel_setColor_, v61);

  objc_msgSend(v22, sel_setBounds_, v41, v42, v44, Height);
  id v62 = objc_msgSend(v22, sel_createAKAnnotation);
  if (v62)
  {
    int v63 = v62;
    self;
    uint64_t v64 = swift_dynamicCastObjCClass();
    if (v64)
    {
      uint64_t v65 = (void *)v64;
      id v66 = v60;
      objc_msgSend(v65, sel_drawingBounds);
      objc_msgSend(v22, sel_setBounds_);

      int v63 = *(void **)&v22[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation];
      *(void *)&v22[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = v65;
    }
  }
  v22[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
}

uint64_t protocol witness for CanvasElement.thumbnail.getter in conformance UnknownCanvasElement()
{
  return CRRegister.wrappedValue.getter();
}

void protocol witness for CanvasElement.shared(_:) in conformance UnknownCanvasElement()
{
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance UnknownCanvasElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized UnknownCanvasElement.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized UnknownCanvasElement.render<A>(in:id:capsule:options:));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v14(a1, a2, a4, a5, a6);
}

uint64_t specialized UnknownCanvasElement.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 392) = a1;
  *(void *)(v4 + 400) = a2;
  uint64_t v5 = *(void *)(a3 + 64);
  *(void *)(v4 + 408) = v3;
  *(void *)(v4 + 416) = v5;
  *(unsigned char *)(v4 + 432) = *(unsigned char *)(a3 + 73);
  return MEMORY[0x270FA2498](specialized UnknownCanvasElement.render<A>(in:id:capsule:options:), 0, 0);
}

uint64_t specialized UnknownCanvasElement.render<A>(in:id:capsule:options:)()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void **)(v0 + 416);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 400);
    id v3 = v1;
    id v4 = objc_msgSend(v3, sel_annotations);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = swift_task_alloc();
    *(void *)(v6 + 16) = v2;
    uint64_t v7 = specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:), v6, v5);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    if (v7)
    {
      if (objc_msgSend(v7, sel_hasAppearanceStream))
      {
        uint64_t v8 = *(CGContext **)(v0 + 392);
        CGContextSaveGState(v8);
        objc_msgSend(v3, sel_boundsForBox_, 0);
        CGFloat x = v41.origin.x;
        CGFloat y = v41.origin.y;
        CGFloat width = v41.size.width;
        CGFloat height = v41.size.height;
        double MinY = CGRectGetMinY(v41);
        v42.origin.CGFloat x = x;
        v42.origin.CGFloat y = y;
        v42.size.CGFloat width = width;
        v42.size.CGFloat height = height;
        CGFloat MaxY = CGRectGetMaxY(v42);
        *(void *)(v0 + 136) = 0x3FF0000000000000;
        *(void *)(v0 + 144) = 0;
        *(void *)(v0 + 152) = 0;
        *(void *)(v0 + 160) = 0x3FF0000000000000;
        *(void *)(v0 + 168) = 0;
        *(void *)(v0 + 176) = 0;
        *(void *)(v0 + 96) = 0;
        *(void *)(v0 + 104) = 0;
        *(void *)(v0 + 88) = 0x3FF0000000000000;
        *(_OWORD *)(v0 + 112) = xmmword_20C8340F0;
        *(double *)(v0 + 128) = MinY + MaxY;
        CGAffineTransformConcat(&v38, (CGAffineTransform *)(v0 + 136), (CGAffineTransform *)(v0 + 88));
        long long v15 = *(_OWORD *)&v38.c;
        long long v16 = *(_OWORD *)&v38.tx;
        *(_OWORD *)(v0 + 232) = *(_OWORD *)&v38.a;
        *(_OWORD *)(v0 + 248) = v15;
        *(_OWORD *)(v0 + 264) = v16;
        CGContextConcatCTM(v8, (CGAffineTransform *)(v0 + 232));
        objc_msgSend(v3, sel_transformForBox_, 1);
        long long v17 = *(_OWORD *)&v38.c;
        long long v18 = *(_OWORD *)&v38.tx;
        *(_OWORD *)(v0 + 280) = *(_OWORD *)&v38.a;
        *(_OWORD *)(v0 + 296) = v17;
        *(_OWORD *)(v0 + 312) = v18;
        CGAffineTransformInvert(&v38, (CGAffineTransform *)(v0 + 280));
        long long v19 = *(_OWORD *)&v38.c;
        long long v20 = *(_OWORD *)&v38.tx;
        *(_OWORD *)(v0 + 184) = *(_OWORD *)&v38.a;
        *(_OWORD *)(v0 + 200) = v19;
        *(_OWORD *)(v0 + 216) = v20;
        CGContextConcatCTM(v8, (CGAffineTransform *)(v0 + 184));
        objc_msgSend(v7, sel_drawWithBox_inContext_, 1, v8);
        CGContextRestoreGState(v8);

        if (*(unsigned char *)(v0 + 432))
        {
          uint64_t v21 = *(CGContext **)(v0 + 392);
          CGContextSetRGBFillColor(v21, 1.0, 0.0, 0.0, 0.2);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
          CGFloat v22 = (_OWORD *)swift_allocObject();
          v22[1] = xmmword_20C832C20;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
          CRRegister.wrappedValue.getter();
          long long v23 = *(_OWORD *)(v0 + 376);
          v22[2] = *(_OWORD *)(v0 + 360);
          v22[3] = v23;
          CGContextRef.fill(_:)((Swift::OpaquePointer)v22);
          swift_bridgeObjectRelease();
          UIGraphicsPushContext(v21);
          id v24 = objc_msgSend(self, sel_systemFontOfSize_, 30.0);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
          initeCGFloat d = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_20C832C20;
          int v26 = (void *)*MEMORY[0x263F814F0];
          *(void *)(inited + 32) = *MEMORY[0x263F814F0];
          *(void *)(inited + 64) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
          *(void *)(inited + 40) = v24;
          id v27 = v26;
          id v28 = v24;
          specialized Dictionary.init(dictionaryLiteral:)(inited);
          id v29 = objc_allocWithZone(MEMORY[0x263F086A0]);
          uint64_t v30 = (void *)MEMORY[0x21054D080](0x6E776F6E6B6E55, 0xE700000000000000);
          type metadata accessor for NSAttributedStringKey(0);
          _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
          isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v32 = objc_msgSend(v29, sel_initWithString_attributes_, v30, isa);

          CRRegister.wrappedValue.getter();
          objc_msgSend(v32, sel_drawInRect_, *(double *)(v0 + 328), *(double *)(v0 + 336), *(double *)(v0 + 344), *(double *)(v0 + 352));
          UIGraphicsPopContext();
        }
        uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
        return v33();
      }

      id v3 = v7;
    }
  }
  uint64_t v37 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CanvasElement.renderThumbnail(in:)
                                        + async function pointer to specialized CanvasElement.renderThumbnail(in:));
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v35;
  *uint64_t v35 = v0;
  v35[1] = specialized UnknownCanvasElement.render<A>(in:id:capsule:options:);
  uint64_t v36 = *(void *)(v0 + 392);
  return v37(v36);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized UnknownCanvasElement.render<A>(in:id:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  CGContext *v1;
  _OWORD *v2;
  long long v3;
  id v4;
  uint64_t inited;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  Class isa;
  id v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  if (*(unsigned char *)(v0 + 432) == 1)
  {
    uint64_t v1 = *(CGContext **)(v0 + 392);
    CGContextSetRGBFillColor(v1, 1.0, 0.0, 0.0, 0.2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    uint64_t v2 = (_OWORD *)swift_allocObject();
    v2[1] = xmmword_20C832C20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    id v3 = *(_OWORD *)(v0 + 376);
    v2[2] = *(_OWORD *)(v0 + 360);
    v2[3] = v3;
    CGContextRef.fill(_:)((Swift::OpaquePointer)v2);
    swift_bridgeObjectRelease();
    UIGraphicsPushContext(v1);
    id v4 = objc_msgSend(self, sel_systemFontOfSize_, 30.0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C832C20;
    uint64_t v6 = (void *)*MEMORY[0x263F814F0];
    *(void *)(inited + 32) = *MEMORY[0x263F814F0];
    *(void *)(inited + 64) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    *(void *)(inited + 40) = v4;
    uint64_t v7 = v6;
    uint64_t v8 = v4;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    uint64_t v9 = objc_allocWithZone(MEMORY[0x263F086A0]);
    uint64_t v10 = (void *)MEMORY[0x21054D080](0x6E776F6E6B6E55, 0xE700000000000000);
    type metadata accessor for NSAttributedStringKey(0);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v12 = objc_msgSend(v9, sel_initWithString_attributes_, v10, isa);

    CRRegister.wrappedValue.getter();
    objc_msgSend(v12, sel_drawInRect_, *(double *)(v0 + 328), *(double *)(v0 + 336), *(double *)(v0 + 344), *(double *)(v0 + 352));
    UIGraphicsPopContext();
  }
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t base witness table accessor for CRStruct_Base_4 in UnknownCanvasElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
}

uint64_t base witness table accessor for CRStruct_Base in UnknownCanvasElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
}

uint64_t associated type witness table accessor for CRStruct_Base_4.Type_4 : CRDT in UnknownCanvasElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Int> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
}

uint64_t base witness table accessor for CRDT in UnknownCanvasElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
}

uint64_t base witness table accessor for CRMergeable in UnknownCanvasElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
}

uint64_t base witness table accessor for CRType in UnknownCanvasElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in UnknownCanvasElement()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_4<UnknownCanvasElement> and conformance CRStructMergeableDelta_4<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_4<UnknownCanvasElement>);
}

uint64_t base witness table accessor for CRCodable in UnknownCanvasElement()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_9(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
}

uint64_t sub_20C6E2DA4()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C6E2DE8()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C6E2E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_8Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C6E2E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_8Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_8Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for UnknownCanvasElement();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return a4(v5);
}

uint64_t sub_20C6E2ED4()
{
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for UnknownCanvasElement(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[7];
    long long v17 = (char *)a1 + v16;
    long long v18 = (char *)a2 + v16;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UnknownCanvasElement(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnknownCanvasElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnknownCanvasElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for UnknownCanvasElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for UnknownCanvasElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnknownCanvasElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C6E3814);
}

uint64_t sub_20C6E3814(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_10:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_9:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_10;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_9;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_9;
  }
  unint64_t v17 = *(void *)(a1 + a3[8]);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for UnknownCanvasElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C6E39E4);
}

uint64_t sub_20C6E39E4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(void *)(a1 + a4[8]) = (a2 - 1);
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = a4[7];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for UnknownCanvasElement()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<CRAsset?>();
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<Int>();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<Int>()
{
  if (!lazy cache variable for type metadata for CRRegister<Int>)
  {
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Int>);
    }
  }
}

void __swiftcall CanvasElementContainerView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  isCGFloat a = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  id v7 = objc_msgSend(v3, sel_subviews);
  type metadata accessor for UIView();
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62) {
    goto LABEL_18;
  }
  unint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    while (__OFSUB__(v9--, 1))
    {
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
      unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v9) {
        goto LABEL_19;
      }
    }
    if ((v8 & 0xC000000000000001) != 0)
    {
      id v11 = (id)MEMORY[0x21054E050](v9, v8);
      goto LABEL_12;
    }
    if ((v9 & 0x8000000000000000) != 0) {
      goto LABEL_16;
    }
    if (v9 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_17;
    }
    id v11 = *(id *)(v8 + 32 + 8 * v9);
LABEL_12:
    uint64_t v12 = v11;
    if (objc_msgSend(v11, sel_isHidden))
    {
    }
    else
    {
      objc_msgSend(v12, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
      id v13 = objc_msgSend(v12, sel_hitTest_withEvent_, isa);

      if (v13)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
LABEL_19:
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_bounds);
  v15.double x = x;
  v15.double y = y;
  if (CGRectContainsPoint(v16, v15)) {
    id v14 = v3;
  }
}

id CanvasElementContainerView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementContainerView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasElementContainerView()
{
  return self;
}

PaperKit::CanvasContentMode_optional __swiftcall CanvasContentMode.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (PaperKit::CanvasContentMode_optional)rawValue;
}

uint64_t CanvasContentMode.rawValue.getter()
{
  return *v0;
}

unint64_t lazy protocol witness table accessor for type CanvasContentMode and conformance CanvasContentMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasContentMode and conformance CanvasContentMode;
  if (!lazy protocol witness table cache variable for type CanvasContentMode and conformance CanvasContentMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasContentMode and conformance CanvasContentMode);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CanvasContentMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C6E41DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasContentMode()
{
  return &type metadata for CanvasContentMode;
}

Swift::Void __swiftcall FormPlusButtonView.setConstraintsBasedOn(_:)(UIView *a1)
{
  char v2 = v1;
  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  unsigned int v4 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20C8344D0;
  id v6 = objc_msgSend(v2, sel_trailingAnchor);
  id v7 = [(UIView *)a1 trailingAnchor];
  id v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v7, -25.0);

  *(void *)(v5 + 32) = v8;
  id v9 = objc_msgSend(v2, sel_bottomAnchor);
  uint64_t v10 = [(UIView *)a1 safeAreaLayoutGuide];
  id v11 = [(UILayoutGuide *)v10 bottomAnchor];

  id v12 = objc_msgSend(v9, sel_constraintEqualToAnchor_constant_, v11, -25.0);
  *(void *)(v5 + 40) = v12;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_activateConstraints_, isa);
}

void FormPlusButtonView.setMenuWithActions(addTextBoxHandler:addSignatureHandler:)()
{
  uint64_t v1 = v0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  isCGFloat a = paperKitBundle.super.isa;
  v22._countAndFlagsBits = 0xD000000000000025;
  v22._object = (void *)0x800000020C85DA70;
  v3._object = (void *)0x800000020C85DA50;
  v3._countAndFlagsBits = 0xD000000000000011;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v22);
  swift_retain();
  id v6 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v23._countAndFlagsBits = 0xD000000000000026;
  v23._object = (void *)0x800000020C85DAA0;
  v7._countAndFlagsBits = 0x6E67695320646441;
  v7._object = (void *)0xED00006572757461;
  v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v8.value._object = (void *)0xEB00000000656C62;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)isa, v9, v23);
  swift_retain();
  uint64_t v10 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  v11._countAndFlagsBits = 0xD000000000000014;
  v24._countAndFlagsBits = 0xD000000000000039;
  v24._object = (void *)0x800000020C85DAF0;
  v11._object = (void *)0x800000020C85DAD0;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)isa, v13, v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_20C8344D0;
  *(void *)(v15 + 32) = v6;
  *(void *)(v15 + 40) = v10;
  UIMenuElementSize preferredElementSize = v15;
  specialized Array._endMutation()();
  id v16 = v6;
  id v18 = v10;
  v21.value.super.isCGFloat a = 0;
  v21.is_nil = 0;
  Class v17 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v14, (Swift::String_optional)0, v21, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0).super.super.isa;
  objc_msgSend(v1, sel_setMenu_, v17);

  objc_msgSend(v1, sel_setShowsMenuAsPrimaryAction_, 1);
}

id FormPlusButtonView.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v30 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v12 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  Swift::String v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  id v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UIButton.Configuration();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  Swift::String v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31.receiver = v4;
  v31.super_class = ObjectType;
  id v23 = objc_msgSendSuper2(&v31, sel_initWithFrame_, a1, a2, a3, a4);
  static UIButton.Configuration.filled()();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x263F821F0], v15);
  UIButton.Configuration.buttonSize.setter();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x263F821B8], v29);
  UIButton.Configuration.cornerStyle.setter();
  Swift::String v24 = (void *)MEMORY[0x21054D080](1937075312, 0xE400000000000000);
  id v25 = objc_msgSend(self, sel_systemImageNamed_, v24);

  UIButton.Configuration.image.setter();
  id v26 = objc_msgSend(self, sel_configurationWithScale_, 2);
  UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  id v27 = v30;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v30, v22, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v27, 0, 1, v19);
  UIButton.configuration.setter();

  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  return v23;
}

uint64_t type metadata accessor for FormPlusButtonView()
{
  return self;
}

uint64_t specialized CanvasElementResizeView.dragInteraction(_:previewForLifting:session:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (!v5) {
    return 0;
  }
  id v6 = (void *)v5;
  Swift::String v7 = (unint64_t *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
  if (v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation + 16]) {
    goto LABEL_3;
  }
  unint64_t v11 = *v7;
  unint64_t v10 = v7[1];
  if ((objc_msgSend(v2, sel_isHidden) & 1) == 0)
  {
    v12.value.super.isCGFloat a = 0;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v13, (CGPoint)__PAIR128__(v10, v11), v12);
    if (v41.value.super.isa)
    {
      isCGFloat a = v41.value.super.isa;

      return 0;
    }
    ResizeView.hitTestChrome(_:with:)(v42, (CGPoint)__PAIR128__(v10, v11), v41);
    id v45 = v44;

    if (v45)
    {
LABEL_3:

      return 0;
    }
  }
  Swift::String v14 = &v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v15 = v2;
  uint64_t v16 = swift_bridgeObjectRetain();
  unint64_t v17 = specialized Sequence.compactMap<A>(_:)(v16, (uint64_t)v15);
  swift_bridgeObjectRelease();

  if ((v17 & 0x8000000000000000) != 0 || (v17 & 0x4000000000000000) != 0)
  {
    uint64_t v18 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = v17 & 0xFFFFFFFFFFFFFF8;
  }
  BOOL v19 = v18 < 0 || (v18 & 0x4000000000000000) != 0;
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v50 != 1)
    {
LABEL_16:
      uint64_t v20 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView];
      objc_msgSend(v20, sel_bounds);
      objc_msgSend(v6, sel_convertRect_fromCoordinateSpace_, v20);
      v51[0] = v21;
      v51[1] = v22;
      v51[2] = v23;
      v51[3] = v24;
      char v52 = 0;
      uint64_t v25 = (*(uint64_t (**)(uint64_t, void *))((*MEMORY[0x263F8EED0] & *v6) + 0x678))(v18, v51);
      swift_release();
      uint64_t v26 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage;
      id v27 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage];
      *(void *)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage] = v25;

      id v28 = *(void **)&v15[v26];
      if (v28)
      {
        id v29 = v28;
        objc_msgSend(v20, sel_bounds);
        objc_msgSend(v15, sel_convertRect_fromCoordinateSpace_, v20);
        double x = v53.origin.x;
        double y = v53.origin.y;
        double width = v53.size.width;
        double height = v53.size.height;
        double MidX = CGRectGetMidX(v53);
        v54.origin.double x = x;
        v54.origin.double y = y;
        v54.size.double width = width;
        v54.size.double height = height;
        id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F826F0]), sel_initWithContainer_center_, v15, MidX, CGRectGetMidY(v54));
        id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F826E0]), sel_init);
        uint64_t v37 = self;
        id v38 = v36;
        id v39 = objc_msgSend(v37, sel_clearColor);
        objc_msgSend(v38, sel_setBackgroundColor_, v39);

        id v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v29);
        objc_msgSend(v40, sel_setFrame_, x, y, width, height);
        objc_msgSend(v40, sel__setContinuousCornerRadius_, 13.0);
        id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB8]), sel_initWithView_parameters_target_, v40, v38, v35);

        return (uint64_t)v8;
      }
      goto LABEL_3;
    }
  }
  else if (*(void *)(v18 + 16) != 1)
  {
    goto LABEL_16;
  }
  if (*(void *)(*((void *)v14 + 1) + 16)) {
    goto LABEL_16;
  }
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v46 = *(void *)(v18 + 16);
  }
  if (v46)
  {
    if ((v18 & 0xC000000000000001) != 0)
    {
      double v47 = (void *)MEMORY[0x21054E050](0, v18);
      goto LABEL_29;
    }
    if (*(void *)(v18 + 16))
    {
      double v47 = *(id *)(v18 + 32);
LABEL_29:
      double v48 = v47;
      swift_release();
      uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v48) + 0x338))(a1, a2);

      return v49;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized CanvasElementResizeView.dragInteraction(_:itemsForBeginning:)(void *a1)
{
  char v2 = v1;
  objc_msgSend(a1, sel_locationInView_, v2);
  Swift::String_optional v4 = &v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
  *(void *)Swift::String_optional v4 = v5;
  *((void *)v4 + 1) = v6;
  v4[16] = 0;
  Swift::String v7 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v7)
  {
    id v8 = v7;
    id v39 = a1;
    Swift::String v9 = &v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    uint64_t v10 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    uint64_t v11 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
    uint64_t v12 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
    uint64_t v13 = v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
    Swift::String v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v7) + 0x640);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = (void *)v14(v10, v11, v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15)
    {
      id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F826C8]), sel_initWithItemProvider_, v15);
      uint64_t v17 = *(void *)v9;
      uint64_t v18 = *((void *)v9 + 1);
      uint64_t v38 = *((void *)v9 + 2);
      char v37 = v9[24];
      if (v4[16])
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v19 = 0;
        uint64_t v20 = v39;
LABEL_14:
        v41[0] = v17;
        v41[1] = v18;
        v41[2] = v38;
        char v42 = v37;
        uint64_t v43 = v19;
        swift_unknownObjectWeakInit();
        outlined init with copy of CanvasDragInformation((uint64_t)v41, (uint64_t)v40);
        uint64_t v33 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        outlined destroy of CanvasDragInformation((uint64_t)v41);
        objc_msgSend(v16, sel_setLocalObject_, v33);
        swift_unknownObjectRelease();
        objc_msgSend(v20, sel_setLocalContext_, v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = xmmword_20C835790;
        *(void *)(v34 + 32) = v16;
        v41[0] = v34;
        specialized Array._endMutation()();
        uint64_t v21 = v41[0];

        return v21;
      }
      unint64_t v23 = *(void *)v4;
      unint64_t v22 = *((void *)v4 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v20 = v39;
      if ((objc_msgSend(v2, sel_isHidden) & 1) == 0)
      {
        v24.value.super.isCGFloat a = 0;
        CanvasElementResizeView.hitTestMiniMenu(_:with:)(v25, (CGPoint)__PAIR128__(v22, v23), v24);
        if (v29.value.super.isa)
        {

          uint64_t v19 = 0;
          goto LABEL_14;
        }
        ResizeView.hitTestChrome(_:with:)(v30, (CGPoint)__PAIR128__(v22, v23), v29);
        id v32 = v31;

        uint64_t v19 = 0;
        if (v32) {
          goto LABEL_14;
        }
      }
      uint64_t v26 = v2;
      uint64_t v27 = swift_bridgeObjectRetain();
      unint64_t v28 = specialized Sequence.compactMap<A>(_:)(v27, (uint64_t)v26);
      swift_bridgeObjectRelease();

      if ((v28 & 0x8000000000000000) != 0 || (v28 & 0x4000000000000000) != 0)
      {
        id v36 = specialized _copyCollectionToContiguousArray<A>(_:)(v28);
        swift_bridgeObjectRelease();
        uint64_t v19 = (uint64_t)v36;
      }
      else
      {
        uint64_t v19 = v28 & 0xFFFFFFFFFFFFFF8;
      }
      goto LABEL_14;
    }
  }
  return MEMORY[0x263F8EE78];
}

void specialized CanvasElementResizeView.dragInteraction(_:sessionWillBegin:)()
{
  uint64_t v1 = v0;
  char v2 = &v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
  Swift::String v3 = (double *)&unk_20C833000;
  if ((v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation + 16] & 1) == 0)
  {
    unint64_t v5 = *(void *)v2;
    unint64_t v4 = *((void *)v2 + 1);
    if (objc_msgSend(v0, sel_isHidden)) {
      goto LABEL_3;
    }
    v6.value.super.isCGFloat a = 0;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v7, (CGPoint)__PAIR128__(v4, v5), v6);
    if (v22.value.super.isa)
    {

      goto LABEL_28;
    }
    ResizeView.hitTestChrome(_:with:)(v23, (CGPoint)__PAIR128__(v4, v5), v22);
    uint64_t v25 = v24;

    if (!v25)
    {
LABEL_3:
      id v8 = v1;
      uint64_t v9 = swift_bridgeObjectRetain();
      unint64_t v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);
      swift_bridgeObjectRelease();

      if ((v10 & 0x8000000000000000) != 0 || (v10 & 0x4000000000000000) != 0) {
        goto LABEL_25;
      }
      uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8;
LABEL_6:
      if ((v11 & 0x4000000000000000) != 0)
      {
        while (1)
        {
          swift_bridgeObjectRetain();
          uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
          if (!v12) {
            break;
          }
LABEL_8:
          uint64_t v33 = v1;
          uint64_t v13 = 4;
          double v14 = v3[21];
          uint64_t v15 = 0;
          if ((v11 & 0xC000000000000001) != 0)
          {
LABEL_9:
            id v16 = (id)MEMORY[0x21054E050](v15, v11);
            goto LABEL_11;
          }
          while (1)
          {
            id v16 = *(id *)(v11 + 8 * v13);
LABEL_11:
            unint64_t v10 = (unint64_t)v16;
            uint64_t v17 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              break;
            }
            id v18 = objc_msgSend(v16, sel_setAlpha_, v14);
            uint64_t v19 = OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging;
            *(unsigned char *)(v10 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging) = 1;
            uint64_t v20 = (*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *(void *)v10) + 0x88))(v18);
            if (v20)
            {
              Swift::String v3 = (double *)v20;
              uint64_t v1 = *(void **)(v20 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
              uint64_t v21 = v1;

              if (!v1) {
                goto LABEL_41;
              }
              v21[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = *(unsigned char *)(v10 + v19);
              objc_msgSend(v21, sel_setHidden_);

              if (v17 == v12)
              {
LABEL_21:
                swift_release_n();
                uint64_t v1 = v33;
                Swift::String v3 = (double *)&unk_20C833000;
                goto LABEL_28;
              }
            }
            else
            {

              if (v17 == v12) {
                goto LABEL_21;
              }
            }
            uint64_t v15 = ++v13 - 4;
            if ((v11 & 0xC000000000000001) != 0) {
              goto LABEL_9;
            }
          }
          __break(1u);
LABEL_25:
          uint64_t v11 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v10);
          swift_bridgeObjectRelease();
          if ((v11 & 0x8000000000000000) == 0) {
            goto LABEL_6;
          }
        }
      }
      else
      {
        uint64_t v12 = *(void *)(v11 + 16);
        swift_bridgeObjectRetain();
        if (v12) {
          goto LABEL_8;
        }
      }
      swift_release_n();
    }
  }
LABEL_28:
  objc_msgSend(v1, sel_setAlpha_, v3[21], v33);
  *((unsigned char *)v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement) = 1;
  objc_msgSend(v1, sel_setHidden_, 1);
  id v26 = objc_msgSend(v1, sel_gestureRecognizers);
  if (!v26) {
    return;
  }
  uint64_t v27 = v26;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v28 >> 62))
  {
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v29) {
      goto LABEL_31;
    }
LABEL_38:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  if (!v29) {
    goto LABEL_38;
  }
LABEL_31:
  if (v29 >= 1)
  {
    for (uint64_t i = 0; i != v29; ++i)
    {
      if ((v28 & 0xC000000000000001) != 0) {
        id v31 = (id)MEMORY[0x21054E050](i, v28);
      }
      else {
        id v31 = *(id *)(v28 + 8 * i + 32);
      }
      id v32 = v31;
      objc_msgSend(v31, sel_setEnabled_, 0);
    }
    goto LABEL_38;
  }
  __break(1u);
LABEL_41:
  __break(1u);
}

void specialized CanvasElementResizeView.dragInteraction(_:previewForCancelling:withDefault:)(void *a1)
{
  Swift::String v3 = (unint64_t *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
  if (v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation + 16]) {
    goto LABEL_24;
  }
  unint64_t v5 = *v3;
  unint64_t v4 = v3[1];
  if ((objc_msgSend(v1, sel_isHidden) & 1) == 0)
  {
    v6.value.super.isCGFloat a = 0;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v7, (CGPoint)__PAIR128__(v4, v5), v6);
    if (v24.value.super.isa)
    {
    }
    else
    {
      ResizeView.hitTestChrome(_:with:)(v25, (CGPoint)__PAIR128__(v4, v5), v24);
      uint64_t v27 = v26;

      if (!v27) {
        goto LABEL_3;
      }
    }
LABEL_24:
    a1;
    return;
  }
LABEL_3:
  id v8 = v1;
  uint64_t v9 = swift_bridgeObjectRetain();
  unint64_t v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);
  swift_bridgeObjectRelease();

  if ((v10 & 0x8000000000000000) != 0 || (v10 & 0x4000000000000000) != 0)
  {
    uint64_t v11 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v10);
    swift_bridgeObjectRelease();
    if (v11 < 0) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8;
  }
  if ((v11 & 0x4000000000000000) == 0)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      if (v12 >= 2) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
    goto LABEL_23;
  }
LABEL_16:
  swift_retain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v28)
  {
LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v29 >= 2)
  {
LABEL_9:
    uint64_t v13 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage];
    if (v13)
    {
      id v14 = v13;
      swift_release();
      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v14);
      objc_msgSend(v8, sel_frame);
      CGFloat v17 = v16;
      CGFloat v19 = v18;
      CGFloat v21 = v20;
      CGFloat v23 = v22;

LABEL_22:
      v38.origin.double x = v17;
      v38.origin.double y = v19;
      v38.size.double width = v21;
      v38.size.double height = v23;
      double MidX = CGRectGetMidX(v38);
      v39.origin.double x = v17;
      v39.origin.double y = v19;
      v39.size.double width = v21;
      v39.size.double height = v23;
      id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F826F0]), sel_initWithContainer_center_, v8, MidX, CGRectGetMidY(v39));
      id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82AD0]), sel_init);
      objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB8]), sel_initWithView_parameters_target_, v15, v37, v36);

      return;
    }
  }
LABEL_18:
  if ((v11 & 0xC000000000000001) != 0)
  {
    id v30 = (id)MEMORY[0x21054E050](0, v11);
    goto LABEL_21;
  }
  if (*(void *)(v11 + 16))
  {
    id v30 = *(id *)(v11 + 32);
LABEL_21:
    id v15 = v30;
    swift_release();
    objc_msgSend(v15, sel_frame);
    CGFloat v17 = v31;
    CGFloat v19 = v32;
    CGFloat v21 = v33;
    CGFloat v23 = v34;
    goto LABEL_22;
  }
  __break(1u);
}

void specialized CanvasElementResizeView.dragInteraction(_:session:didEndWith:)(void *a1, unint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v6 = MEMORY[0x210550400](&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  id v8 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62) {
    goto LABEL_29;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    long long v41 = 0u;
    long long v42 = 0u;
LABEL_31:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v41, &demangling cache variable for type metadata for Any?);
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
LABEL_32:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v43, (uint64_t *)&demangling cache variable for type metadata for CanvasDragInformation?);
    return;
  }
  while ((v9 & 0xC000000000000001) != 0)
  {
    id v11 = (id)MEMORY[0x21054E050](0, v9);
LABEL_7:
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v12, sel_localObject);

    if (v13)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v40, 0, sizeof(v40));
    }
    outlined init with take of Any?((uint64_t)v40, (uint64_t)&v41);
    if (!*((void *)&v42 + 1)) {
      goto LABEL_31;
    }
    if ((swift_dynamicCast() & 1) == 0)
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v43 = 0u;
      goto LABEL_32;
    }
    if (!(void)v43) {
      goto LABEL_32;
    }
    outlined init with take of CanvasDragInformation(&v43, (uint64_t)v46);
    uint64_t v10 = v48;
    if (!v48) {
      goto LABEL_38;
    }
    CGRect v38 = v3;
    uint64_t v39 = v7;
    unint64_t v37 = a2;
    if (v48 >> 62) {
      goto LABEL_36;
    }
    uint64_t v14 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v14) {
      goto LABEL_37;
    }
LABEL_16:
    Swift::String v3 = (char *)(v10 & 0xC000000000000001);
    uint64_t v7 = 4;
    uint64_t v15 = 0;
    if ((v10 & 0xC000000000000001) != 0)
    {
LABEL_17:
      double v16 = (id *)MEMORY[0x21054E050](v15, v10);
      goto LABEL_19;
    }
    while (1)
    {
      double v16 = (id *)*(id *)(v10 + 8 * v7);
LABEL_19:
      unint64_t v9 = (unint64_t)v16;
      uint64_t v17 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        break;
      }
      id v18 = objc_msgSend(v16, sel_setAlpha_, 1.0);
      uint64_t v19 = OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging;
      *(unsigned char *)(v9 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging) = 0;
      uint64_t v20 = (*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *(void *)v9) + 0x88))(v18);
      if (v20)
      {
        CGFloat v21 = (void *)v20;
        a2 = *(void *)(v20 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
        double v22 = (id)a2;

        if (!a2) {
          goto LABEL_53;
        }
        v22[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = *(unsigned char *)(v9 + v19);
        objc_msgSend(v22, sel_setHidden_);

        if (v17 == v14) {
          goto LABEL_37;
        }
      }
      else
      {

        if (v17 == v14) {
          goto LABEL_37;
        }
      }
      uint64_t v15 = ++v7 - 4;
      if (v3) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_30;
    }
  }
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v9 + 32);
    goto LABEL_7;
  }
  __break(1u);
LABEL_36:
  swift_bridgeObjectRetain_n();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  if (v14) {
    goto LABEL_16;
  }
LABEL_37:
  swift_bridgeObjectRelease_n();
  Swift::String v3 = v38;
  uint64_t v7 = v39;
  a2 = v37;
LABEL_38:
  if ((a2 | 2) != 2)
  {
    uint64_t v23 = v46[0];
    uint64_t v24 = v46[1];
    uint64_t v25 = v46[2];
    uint64_t v26 = v47;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *(void *)v7) + 0x4A8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27(v23, v24, v25, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v3, sel_setAlpha_, 1.0);
  id v28 = objc_msgSend(v3, sel_gestureRecognizers);
  if (!v28) {
    goto LABEL_51;
  }
  uint64_t v29 = v28;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  unint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    if (!v31) {
      goto LABEL_50;
    }
LABEL_43:
    if (v31 >= 1)
    {
      for (uint64_t i = 0; i != v31; ++i)
      {
        if ((v30 & 0xC000000000000001) != 0) {
          id v33 = (id)MEMORY[0x21054E050](i, v30);
        }
        else {
          id v33 = *(id *)(v30 + 8 * i + 32);
        }
        double v34 = v33;
        objc_msgSend(v33, sel_setEnabled_, 1);
      }
      goto LABEL_50;
    }
    __break(1u);
LABEL_53:
    __break(1u);
  }
  else
  {
    uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v31) {
      goto LABEL_43;
    }
LABEL_50:
    swift_bridgeObjectRelease_n();
LABEL_51:
    v3[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = 0;
    objc_msgSend(v3, sel_setHidden_, 0);
    id v35 = &v3[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
    *(void *)id v35 = 0;
    *((void *)v35 + 1) = 0;
    v35[16] = 1;
    id v36 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage];
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage] = 0;

    outlined destroy of CanvasDragInformation((uint64_t)v46);
  }
}

uint64_t outlined init with take of CanvasDragInformation(long long *a1, uint64_t a2)
{
  long long v3 = *a1;
  *(_OWORD *)(a2 + 9) = *(long long *)((char *)a1 + 9);
  *(_OWORD *)a2 = v3;
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  swift_unknownObjectWeakTakeInit();
  return a2;
}

uint64_t outlined destroy of CanvasDragInformation(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of CanvasDragInformation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t destroy for CanvasDragInformation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for CanvasDragInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for CanvasDragInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for CanvasDragInformation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for CanvasDragInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasDragInformation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasDragInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasDragInformation()
{
  return &type metadata for CanvasDragInformation;
}

uint64_t dispatch thunk of PaperDocumentOverlayViewProvider.paperDocumentView(_:overlayViewFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of PaperDocumentOverlayViewProvider.paperDocumentView(_:willDisplayOverlayView:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of PaperDocumentOverlayViewProvider.paperDocumentView(_:willEndDisplayingOverlayView:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> specialized _finalizeUninitializedArray<A>(_:)()
{
}

id *specialized Zip2Sequence.Iterator.next()@<X0>(unint64_t *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 56) == 1) {
    goto LABEL_15;
  }
  if ((*(unsigned char *)(v1 + 32) & 1) == 0)
  {
    unint64_t v3 = *(void *)v1;
    unint64_t v4 = *(void *)(v1 + 8);
    if (*(void *)v1 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v4 == v5) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v4 == v5)
      {
LABEL_13:
        *(unsigned char *)(v1 + 32) = 1;
        goto LABEL_14;
      }
    }
    if ((v3 & 0xC000000000000001) == 0)
    {
      if ((v4 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v4 < *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t result = (id *)*(id *)(v3 + 8 * v4 + 32);
        goto LABEL_9;
      }
      __break(1u);
      goto LABEL_24;
    }
    uint64_t result = (id *)MEMORY[0x21054E050](v4, v3);
LABEL_9:
    unint64_t v3 = (unint64_t)result;
    if (!__OFADD__(v4, 1))
    {
      *(void *)(v1 + 8) = v4 + 1;
      unint64_t v5 = *(void *)(v1 + 16);
      unint64_t v4 = *(void *)(v1 + 24);
      if (!(v5 >> 62))
      {
        if (v4 == *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_12:

          goto LABEL_13;
        }
LABEL_26:
        if ((v5 & 0xC000000000000001) == 0)
        {
          if ((v4 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v4 < *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t result = (id *)*(id *)(v5 + 8 * v4 + 32);
            goto LABEL_30;
          }
          __break(1u);
          goto LABEL_38;
        }
        uint64_t result = (id *)MEMORY[0x21054E050](v4, v5);
LABEL_30:
        id v13 = result;
        if (!__OFADD__(v4, 1))
        {
          *(void *)(v1 + 24) = v4 + 1;
          uint64_t v15 = *(void *)(v1 + 40);
          unint64_t v14 = *(void *)(v1 + 48);
          unint64_t v16 = *(void *)(v15 + 16);
          if (v14 == v16)
          {

            goto LABEL_14;
          }
          if (v14 < v16)
          {
            uint64_t v17 = type metadata accessor for PKDrawing();
            uint64_t v18 = *(void *)(v17 - 8);
            unint64_t v19 = v14 + 1;
            unint64_t v20 = v15
                + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
                + *(void *)(v18 + 72) * v14;
            *(void *)(v1 + 48) = v19;
            uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing));
            double v22 = (char *)a1 + *(int *)(v21 + 48);
            *a1 = v3;
            a1[1] = (unint64_t)v13;
            (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v22, v20, v17);
            id v8 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
            uint64_t v10 = a1;
            uint64_t v11 = 0;
            uint64_t v9 = v21;
            goto LABEL_16;
          }
LABEL_39:
          __break(1u);
          return result;
        }
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
LABEL_25:
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = (id *)swift_bridgeObjectRelease();
      if (v4 == v12) {
        goto LABEL_12;
      }
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_14:
  *(unsigned char *)(v1 + 56) = 1;
LABEL_15:
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing));
  id v8 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  uint64_t v9 = v7;
  uint64_t v10 = a1;
  uint64_t v11 = 1;
LABEL_16:
  return (id *)v8(v10, v11, 1, v9);
}

id HandwritingReflowView.isInReflowMode.didset(id result)
{
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode;
  if (v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode] != (result & 1))
  {
    unint64_t v3 = v1;
    unint64_t v4 = (void *)MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
    if (v4)
    {
      unint64_t v5 = v4;
      uint64_t v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x320))();

      if (v6)
      {
        objc_msgSend(v6, sel_setSelectionHidden_, v3[v2]);
      }
    }
    id v7 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_layer);
    if (v3[v2] == 1)
    {
      id v8 = objc_msgSend(v3, sel_window);
      uint64_t v9 = v8;
      if (!v8 || (id v10 = objc_msgSend(v8, sel_tintColor)) == 0)
      {
        if (one-time initialization token for resizeHandleColor != -1) {
          swift_once();
        }
        id v10 = (id)static UIConstants.resizeHandleColor;
      }

      id v11 = objc_msgSend(v10, sel_CGColor);
    }
    else
    {
      if (one-time initialization token for handwritingReflowNonActiveBorderColor != -1) {
        swift_once();
      }
      id v11 = objc_msgSend((id)static UIConstants.handwritingReflowNonActiveBorderColor, sel_CGColor);
    }
    objc_msgSend(v7, sel_setBorderColor_, v11);

    return objc_msgSend(v3, sel_setNeedsLayout);
  }
  return result;
}

Swift::Void __swiftcall HandwritingReflowView.updateForNewSelection()()
{
  objc_msgSend(v0, sel_setNeedsLayout);
  uint64_t v1 = (void *)v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode];
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode] = 0;
  HandwritingReflowView.isInReflowMode.didset(v1);
  uint64_t v2 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox;
  unint64_t v3 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
  if (v3)
  {
    unint64_t v4 = (void *)MEMORY[0x210550400](&v3[OBJC_IVAR____TtC8PaperKit14ReflowTextView_wrapperView]);
    unint64_t v5 = v3;
    objc_msgSend(v4, sel_removeFromSuperview);

    objc_msgSend(v5, sel_removeFromSuperview);
    uint64_t v6 = *(void **)&v0[v2];
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)&v0[v2] = 0;

  uint64_t v7 = MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v7)
  {
    id v8 = (void *)v7;
    uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v9)
    {
      __break(1u);
      return;
    }
    id v10 = (uint64_t *)(v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    if (*(void *)(v12 + 16)) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v13 = *(void *)(v11 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v13) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v11 = MEMORY[0x263F8EE88];
  if (!*(void *)(MEMORY[0x263F8EE88] + 16)) {
    goto LABEL_9;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI] = 1;
  HandwritingReflowView.startReflowForSelection(completion:)(0, 0);
}

char *HandwritingReflowView.init(frame:canvas:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  swift_getObjectType();
  id v10 = &v5[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace];
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)id v10 = 0u;
  v10[48] = 1;
  uint64_t v11 = &v5[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace];
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  v11[48] = 1;
  uint64_t v12 = &v5[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds];
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox] = 0;
  uint64_t v13 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret;
  type metadata accessor for ReflowCursor();
  id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v15 = v5;
  *(void *)&v5[v13] = objc_msgSend(v14, sel_init);
  v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] = 0;
  v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace] = 0;
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_editMenuInteraction] = 0;
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_currentReflowingStrokes] = 0;
  v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode] = 1;
  v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI] = 1;
  v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing] = 0;
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_endDrawContinuations] = MEMORY[0x263F8EE78];
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_startLongPressTask] = 0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_20C83B680;
  uint64_t v17 = (objc_class *)type metadata accessor for CanvasElementResizeHandle();
  id v18 = objc_allocWithZone(v17);
  *(void *)(v16 + 32) = CanvasElementResizeHandle.init(_:category:enabled:)(3, 0, 1);
  id v19 = objc_allocWithZone(v17);
  *(void *)(v16 + 40) = CanvasElementResizeHandle.init(_:category:enabled:)(4, 1, 1);
  id v20 = objc_allocWithZone(v17);
  *(void *)(v16 + 48) = CanvasElementResizeHandle.init(_:category:enabled:)(7, 0, 1);
  uint64_t v21 = objc_allocWithZone(v17);
  v21[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] = 3;
  v21[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category] = 0;
  v21[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled] = 0;
  double v22 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
  uint64_t v23 = objc_allocWithZone(v22);
  *(void *)&v23[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
  v23[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakInit();
  *(void *)&v23[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
  *(void *)&v23[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
  v55.receiver = v23;
  v55.super_class = v22;
  uint64_t v24 = v21;
  uint64_t v25 = objc_msgSendSuper2(&v55, sel_initWithTarget_action_, 0, 0);
  v25[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakAssign();
  *(void *)&v24[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer] = v25;

  if (one-time initialization token for resizeHandleSize != -1) {
    swift_once();
  }
  v54.receiver = v24;
  v54.super_class = v17;
  *(void *)(v16 + 56) = objc_msgSendSuper2(&v54, sel_initWithFrame_, 0.0, 0.0, *(double *)&static UIConstants.resizeHandleSize, *(double *)&static UIConstants.resizeHandleSize, a1);
  uint64_t v26 = objc_allocWithZone(v17);
  v26[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] = 4;
  v26[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category] = 1;
  v26[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled] = 0;
  uint64_t v27 = objc_allocWithZone(v22);
  *(void *)&v27[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
  v27[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakInit();
  *(void *)&v27[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
  *(void *)&v27[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
  v53.receiver = v27;
  v53.super_class = v22;
  id v28 = v26;
  uint64_t v29 = objc_msgSendSuper2(&v53, sel_initWithTarget_action_, 0, 0);
  v29[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakAssign();
  *(void *)&v28[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer] = v29;

  v52.receiver = v28;
  v52.super_class = v17;
  *(void *)(v16 + 64) = objc_msgSendSuper2(&v52, sel_initWithFrame_, 0.0, 0.0, *(double *)&static UIConstants.resizeHandleSize, *(double *)&static UIConstants.resizeHandleSize);
  unint64_t v30 = objc_allocWithZone(v17);
  v30[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] = 7;
  v30[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category] = 0;
  v30[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled] = 0;
  uint64_t v31 = objc_allocWithZone(v22);
  *(void *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
  v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakInit();
  *(void *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
  *(void *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
  v51.receiver = v31;
  v51.super_class = v22;
  double v32 = v30;
  id v33 = objc_msgSendSuper2(&v51, sel_initWithTarget_action_, 0, 0);
  v33[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakAssign();
  *(void *)&v32[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer] = v33;

  v50.receiver = v32;
  v50.super_class = v17;
  *(void *)(v16 + 72) = objc_msgSendSuper2(&v50, sel_initWithFrame_, 0.0, 0.0, *(double *)&static UIConstants.resizeHandleSize, *(double *)&static UIConstants.resizeHandleSize);
  specialized Array._endMutation()();
  id v34 = v49;
  ResizeView.init(frame:canvas:resizeHandles:)(v34, v16, a2, a3, a4, a5);
  id v36 = v35;
  id v37 = objc_allocWithZone(MEMORY[0x263F82718]);
  CGRect v38 = v36;
  id v39 = objc_msgSend(v37, sel_initWithDelegate_, v38);
  objc_msgSend(v38, sel_addInteraction_, v39);
  id v40 = *(void **)&v38[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_editMenuInteraction];
  *(void *)&v38[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_editMenuInteraction] = v39;
  id v41 = v39;

  id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v38, &sel_tap);
  objc_msgSend(v38, sel_addGestureRecognizer_, v42);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_20C832C20;
  uint64_t v44 = type metadata accessor for UITraitUserInterfaceStyle();
  uint64_t v45 = MEMORY[0x263F81EF0];
  *(void *)(v43 + 32) = v44;
  *(void *)(v43 + 40) = v45;
  uint64_t v46 = v38;
  UIView.registerForTraitChanges<A>(_:handler:)();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return v46;
}

Swift::Void __swiftcall HandwritingReflowView.didMoveToWindow()()
{
  uint64_t v1 = v0;
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for HandwritingReflowView();
  objc_msgSendSuper2(&v12, sel_didMoveToWindow);
  uint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  unint64_t v3 = (void *)MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  unint64_t v4 = (void *)MEMORY[0x263F8EED0];
  if (v3)
  {
    unint64_t v5 = v3;
    uint64_t v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x320))();

    if (v6)
    {
      id v7 = objc_msgSend(v6, sel_pencilLongPressGestureRecognizer);

      objc_msgSend(v7, sel_addTarget_action_, v1, sel_longPress_);
    }
  }
  id v8 = (void *)MEMORY[0x210550400](v2);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = (void *)(*(uint64_t (**)(void))((*v4 & *v8) + 0x320))();

    if (v10)
    {
      id v11 = objc_msgSend(v10, sel_simultaneousDrawingGestureRecognizer);

      objc_msgSend(v11, sel_addTarget_action_, v1, sel_drawingContinuation_);
    }
  }
}

uint64_t HandwritingReflowView.canDrag.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode);
}

uint64_t closure #1 in HandwritingReflowView.endOfDrawing()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  id v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing) != 1) {
    return CheckedContinuation.resume(returning:)();
  }
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  uint64_t v9 = (unint64_t *)(a2 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_endDrawContinuations);
  swift_beginAccess();
  unint64_t v10 = *v9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v9 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  unint64_t v13 = *(void *)(v10 + 16);
  unint64_t v12 = *(void *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  *(void *)(v10 + 16) = v13 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v13, v8, v4);
  return swift_endAccess();
}

Swift::Void __swiftcall HandwritingReflowView.adjustCaret(_:)(CGPoint a1)
{
  uint64_t v2 = *(char **)&v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
  if (v2)
  {
    unint64_t v3 = v1;
    double y = a1.y;
    double x = a1.x;
    double v6 = *(double **)&v2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    swift_beginAccess();
    uint64_t v7 = *((void *)v6 + 20);
    if (v7)
    {
      double v9 = v6[22];
      double v8 = v6[23];
      unint64_t v10 = v2;
      swift_retain();
      objc_msgSend(v3, sel_convertPoint_fromCoordinateSpace_, v10, v9, v8);
      uint64_t v13 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace;
      if ((v3[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace] & 1) == 0)
      {
        double v14 = sqrt((x - v11) * (x - v11) + (y - v12) * (y - v12));
        if (one-time initialization token for handwritingReflowInsertSpaceMinDistanceForAdjustment != -1)
        {
          double v29 = v11;
          double v28 = v12;
          swift_once();
          double v12 = v28;
          double v11 = v29;
        }
        if (*(double *)&static UIConstants.handwritingReflowInsertSpaceMinDistanceForAdjustment >= v14)
        {
          if (v3[v13] != 1)
          {
            double x = (v11 + x) * 0.5;
            double v27 = (v12 + y) * 0.5;
            swift_retain();
            objc_msgSend(v10, sel_convertPoint_fromCoordinateSpace_, v3, x, v27, *(void *)&v29);
LABEL_16:
            ReflowLayoutManager.caretRect(for:point:)(v7, v23, v24);
            objc_msgSend(v10, sel_convertRect_toCoordinateSpace_, v3);
            CGRect v33 = CGRectInset(v32, 0.0, -2.0);
            double v25 = v33.origin.y;
            double height = v33.size.height;
            swift_release();
            objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret], sel_setFrame_, x + -2.0, v25, 4.0, height);

            swift_release();
            return;
          }
        }
        else
        {
          v3[v13] = 1;
        }
      }
      objc_msgSend(v10, sel_convertPoint_fromCoordinateSpace_, v3, x, y, *(void *)&v29);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      id v20 = ReflowTextView.spacingAdjustment.modify(v31);
      if (*v19)
      {
        v19[4] = v16;
        v19[5] = v18;
      }
      v20((_OWORD **)v31, 0);
      double v22 = ReflowTextView.spacingAdjustment.modify(v31);
      if (*(void *)v21) {
        *(unsigned char *)(v21 + 57) = 1;
      }
      v22((_OWORD **)v31, 0);
      if (one-time initialization token for handwritingReflowAnimationDuration != -1) {
        swift_once();
      }
      ReflowTextView.startAnimating(endingIn:smoothstep:)(*(Swift::Double *)&static UIConstants.handwritingReflowAnimationDuration, 0);
      swift_retain();
      ReflowLayoutManager.scaleTextToFit()();
      swift_release();
      swift_retain();
      objc_msgSend(v10, sel_convertPoint_fromCoordinateSpace_, v3, x, y, v30);
      goto LABEL_16;
    }
  }
}

Swift::Void __swiftcall HandwritingReflowView.drawingContinuation(_:)(UILongPressGestureRecognizer *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = (char *)[(UILongPressGestureRecognizer *)a1 state];
  if ((unint64_t)(v8 - 3) >= 3)
  {
    if (v8 == (char *)2)
    {
      if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace) & 1) == 0)
      {
        id v19 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                                    + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret), sel_superview));

        if (v19)
        {
          [(UILongPressGestureRecognizer *)a1 locationInView:v1];
          HandwritingReflowView.adjustCaret(_:)((CGPoint)__PAIR128__(v21, v20));
        }
      }
    }
    else if (v8 == (char *)1)
    {
      *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace) = 0;
      *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing) = 1;
      uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
      if (v17)
      {
        uint64_t v18 = *(_OWORD **)(v17 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
        swift_beginAccess();
        v18[11] = 0u;
        v18[12] = 0u;
        *(_OWORD *)((char *)v18 + 203) = 0u;
        v18[10] = 0u;
        swift_release();
      }
    }
  }
  else
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing) = 0;
    double v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_endDrawContinuations);
    swift_beginAccess();
    uint64_t v10 = *v9;
    uint64_t v11 = *(void *)(*v9 + 16);
    if (v11)
    {
      double v22 = v9;
      double v14 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      uint64_t v12 = v4 + 16;
      uint64_t v13 = v14;
      uint64_t v15 = v10 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
      uint64_t v16 = *(void *)(v12 + 56);
      swift_bridgeObjectRetain();
      do
      {
        v13(v7, v15, v3);
        CheckedContinuation.resume(returning:)();
        (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v3);
        v15 += v16;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
      double v9 = v22;
    }
    *double v9 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall HandwritingReflowView.longPress(_:)(UILongPressGestureRecognizer *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for MagicPaperUsageReflowEvent();
  double v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v8);
  if (!v11) {
    return;
  }
  double v78 = v11;
  id v12 = objc_msgSend(v2, sel_superview);
  if (!v12) {
    goto LABEL_4;
  }
  uint64_t v13 = v12;
  unsigned int v14 = objc_msgSend(v12, sel_isHidden);

  if (v14) {
    goto LABEL_4;
  }
  uint64_t v16 = (char *)[(UILongPressGestureRecognizer *)a1 state];
  if ((unint64_t)(v16 - 3) >= 2)
  {
    if (v16 == (char *)2)
    {
      if (v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] == 1)
      {
        [(UILongPressGestureRecognizer *)a1 locationInView:v2];
        HandwritingReflowView.adjustCaret(_:)((CGPoint)__PAIR128__(v34, v33));
      }
    }
    else if (v16 == (char *)1)
    {
      objc_msgSend(v78, sel_bounds);
      CGFloat v18 = v17;
      CGFloat v20 = v19;
      CGFloat v22 = v21;
      CGFloat v24 = v23;
      [(UILongPressGestureRecognizer *)a1 locationInView:v78];
      v93.double x = v25;
      v93.double y = v26;
      v94.origin.double x = v18;
      v94.origin.double y = v20;
      v94.size.double width = v22;
      v94.size.double height = v24;
      if (CGRectContainsPoint(v94, v93))
      {
        [(UILongPressGestureRecognizer *)a1 locationInView:v2];
        double v28 = v27;
        double v30 = v29;
        AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
        *(void *)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_startLongPressTask] = HandwritingReflowView.startInsertSpaceReflow(at:)(v28, v30);

        swift_release();
        v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace] = 0;
        v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] = 1;
        return;
      }
    }
    goto LABEL_4;
  }
  if (v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] != 1)
  {
LABEL_4:
    id v15 = v78;

    return;
  }
  v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] = 0;
  uint64_t v31 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_startLongPressTask;
  if (*(void *)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_startLongPressTask])
  {
    uint64_t v32 = swift_retain();
    MEMORY[0x21054D560](v32, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  *(void *)&v2[v31] = 0;
  swift_release();
  uint64_t v35 = (*MEMORY[0x263F8EED0] & *v78) + 800;
  id v36 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v78) + 0x320);
  id v37 = (void *)v36();
  if (v37)
  {
    CGRect v38 = v37;
    objc_msgSend(v37, sel__pauseHoverPreviewForTimeInterval_, 0.3);
  }
  id v39 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
  if (!v39)
  {
    id v62 = self;
    int v63 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret];
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = v63;
    uint64_t v89 = closure #1 in HandwritingReflowView.hideCaret()partial apply;
    uint64_t v90 = v64;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    double v87 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v88 = (int *)&block_descriptor_217;
    uint64_t v65 = _Block_copy(&aBlock);
    id v66 = v63;
    goto LABEL_47;
  }
  if (v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace] != 1)
  {
    id v67 = v39;
    goto LABEL_44;
  }
  id v40 = v39;
  uint64_t v73 = v36;
  id v41 = (void *)v36();
  LOBYTE(v79) = 0;
  char v85 = 0;
  uint64_t v80 = 0;
  *((void *)&v79 + 1) = 0;
  LOBYTE(v81) = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  double v76 = v40;
  uint64_t v42 = MagicPaperUsageInsertSpaceEvent.calculateInsertedSpace(in:)((uint64_t)v40);

  uint64_t v84 = v42;
  outlined init with take of MagicPaperUsageInsertSpaceEvent((uint64_t)&v79, (uint64_t)&aBlock);
  uint64_t v43 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v45 = *(void *)(v43 + 16);
  unint64_t v44 = *(void *)(v43 + 24);
  int64_t v46 = v45 + 1;
  if (v45 >= v44 >> 1) {
LABEL_41:
  }
    uint64_t v43 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v46, 1, (void *)v43);
  uint64_t v81 = &type metadata for MagicPaperUsageInsertSpaceEvent;
  *(void *)&long long v82 = lazy protocol witness table accessor for type MagicPaperUsageInsertSpaceEvent and conformance MagicPaperUsageInsertSpaceEvent();
  *(void *)&long long v79 = swift_allocObject();
  outlined init with copy of MagicPaperUsageInsertSpaceEvent((uint64_t)&aBlock, v79 + 16);
  *(void *)(v43 + 16) = v46;
  outlined init with take of FindResult(&v79, v43 + 40 * v45 + 32);
  outlined destroy of MagicPaperUsageInsertSpaceEvent((uint64_t)&aBlock);
  uint64_t v47 = *(void *)&v76[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
  swift_beginAccess();
  unint64_t v48 = *(void *)(v47 + 80);
  if (v48 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    if (v49) {
      goto LABEL_24;
    }
LABEL_43:
    swift_bridgeObjectRelease_n();
    goto LABEL_44;
  }
  uint64_t v49 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v49) {
    goto LABEL_43;
  }
LABEL_24:
  uint64_t v72 = v35;
  uint64_t v74 = (void *)v43;
  uint64_t v75 = v39;
  unint64_t v77 = v48;
  unint64_t v45 = v48 & 0xC000000000000001;
  uint64_t v43 = 4;
  while (1)
  {
    int64_t v46 = v49;
    uint64_t v35 = v43 - 4;
    if (v45)
    {
      uint64_t v50 = MEMORY[0x21054E050](v43 - 4, v77);
      id v39 = (void *)(v43 - 3);
      if (__OFADD__(v35, 1)) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v50 = *(void *)(v77 + 8 * v43);
      swift_retain();
      id v39 = (void *)(v43 - 3);
      if (__OFADD__(v35, 1))
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
    }
    type metadata accessor for ReflowWord();
    if (swift_dynamicCastClass()) {
      break;
    }
    swift_release();
LABEL_26:
    ++v43;
    uint64_t v49 = v46;
    if (v39 == (void *)v46)
    {
      swift_bridgeObjectRelease_n();
      id v39 = v75;
      goto LABEL_44;
    }
  }
  BOOL v51 = CGRectEqualToRect(*(CGRect *)(v50 + 16), *(CGRect *)(v50 + 48));
  swift_release();
  if (v51) {
    goto LABEL_26;
  }
  uint64_t v52 = swift_bridgeObjectRelease_n();
  objc_super v53 = (void *)((uint64_t (*)(uint64_t))v73)(v52);
  objc_super v54 = v76;
  Date.init()();
  uint64_t v55 = type metadata accessor for Date();
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56);
  v56(v6, 0, 1, v55);
  *uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((_DWORD *)v10 + 6) = 0;
  uint64_t v57 = (uint64_t)&v10[v7[7]];
  v56((char *)v57, 1, 1, v55);
  *(void *)&v10[v7[9]] = 0;
  *(void *)&v10[v7[10]] = 0;
  *(void *)&v10[v7[11]] = 0;
  *(void *)&v10[v7[12]] = 0;
  *(void *)&v10[v7[13]] = 0;
  *(void *)&v10[v7[14]] = 0;
  v10[v7[15]] = 0;
  v10[v7[16]] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v10[v7[8]] = 2;
  outlined assign with take of Date?((uint64_t)v6, v57);
  swift_unknownObjectWeakAssign();

  swift_unknownObjectWeakAssign();
  uint64_t v58 = v74;
  unint64_t v60 = v74[2];
  unint64_t v59 = v74[3];
  if (v60 >= v59 >> 1) {
    uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v74);
  }
  id v39 = v75;
  uint64_t v88 = v7;
  uint64_t v89 = (uint64_t (*)())_s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0(&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent and conformance MagicPaperUsageReflowEvent, (void (*)(uint64_t))type metadata accessor for MagicPaperUsageReflowEvent);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&aBlock);
  outlined init with copy of MagicPaperUsageReflowEvent((uint64_t)v10, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageReflowEvent);
  v58[2] = v60 + 1;
  outlined init with take of FindResult(&aBlock, (uint64_t)&v58[5 * v60 + 4]);
  outlined destroy of MagicPaperUsageReflowEvent((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageReflowEvent);
LABEL_44:
  if (one-time initialization token for $currentAnalyticsEvents != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  TaskLocal.get()();
  uint64_t v68 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v68);
  uint64_t v91 = aBlock;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnalyticsEvent]);
  swift_task_localValuePush();
  closure #1 in HandwritingReflowView.longPress(_:)(v2, (char *)v39);
  swift_task_localValuePop();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  id v62 = self;
  unint64_t v69 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret];
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = v69;
  uint64_t v89 = closure #1 in HandwritingReflowView.hideCaret()partial apply;
  uint64_t v90 = v70;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  double v87 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v88 = (int *)&block_descriptor_224;
  uint64_t v65 = _Block_copy(&aBlock);
  id v71 = v69;
LABEL_47:
  swift_release();
  objc_msgSend(v62, sel_animateWithDuration_animations_, v65, 0.2);
  _Block_release(v65);
}

void closure #1 in HandwritingReflowView.longPress(_:)(char *a1, char *a2)
{
  if (a1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace])
  {
    uint64_t v4 = *(_OWORD **)&a2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    swift_beginAccess();
    v4[11] = 0u;
    v4[12] = 0u;
    *(_OWORD *)((char *)v4 + 203) = 0u;
    v4[10] = 0u;
    swift_release();
    HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(a2, 1, 0, 0);
    uint64_t v5 = *(void **)&a1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
    *(void *)&a1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox] = 0;
  }
  else
  {
    if (specialized HandwritingReflowView.canPasteAsHandwriting.getter())
    {
      uint64_t v6 = *(void **)&a1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret];
      objc_msgSend(v6, sel_bounds);
      CGFloat x = v14.origin.x;
      CGFloat y = v14.origin.y;
      CGFloat width = v14.size.width;
      CGFloat height = v14.size.height;
      double MidX = CGRectGetMidX(v14);
      v15.origin.CGFloat x = x;
      v15.origin.CGFloat y = y;
      v15.size.CGFloat width = width;
      v15.size.CGFloat height = height;
      objc_msgSend(a1, sel_convertPoint_fromCoordinateSpace_, v6, MidX, CGRectGetMidY(v15));
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIEditMenuConfiguration);
      id v12 = (void *)UIEditMenuConfiguration.init(identifier:sourcePoint:)();
      id v13 = *(id *)&a1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_editMenuInteraction];
      objc_msgSend(v13, sel_presentEditMenuWithConfiguration_, v12, 0, 0, 0, 0, 0);
    }
    HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(a2, 1, 0, 0);
  }
}

uint64_t HandwritingReflowView.showRectangularSelection.getter()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI) == 1
    && *(void *)(v0 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox)
    && !CGRectIsEmpty(*(CGRect *)(v0 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds)))
  {
    uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas;
    uint64_t result = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
    if (!result) {
      goto LABEL_7;
    }
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(void *)(result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v4)
    {
      __break(1u);
      goto LABEL_19;
    }
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    swift_bridgeObjectRetain();

    uint64_t v6 = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    if (!v6)
    {
LABEL_7:
      uint64_t result = MEMORY[0x210550400](v1);
      if (!result) {
        return result;
      }
      uint64_t v7 = (void *)result;
      uint64_t v8 = *(void *)(result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
        swift_bridgeObjectRetain();

        uint64_t v10 = *(void *)(v9 + 16);
        swift_bridgeObjectRelease();
        if (v10)
        {
          uint64_t result = MEMORY[0x210550400](v1);
          if (!result)
          {
            uint64_t v13 = 6;
            return v13 != 6;
          }
          uint64_t v11 = *(void *)(result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
          if (v11)
          {
            uint64_t v12 = v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
            uint64_t v13 = *(void *)(v12 + 16);
            char v14 = *(unsigned char *)(v12 + 24);

            if (v14) {
              return 1;
            }
            return v13 != 6;
          }
          goto LABEL_20;
        }
        return 0;
      }
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      return result;
    }
  }
  return 0;
}

void HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace + 48))
  {
    CGFloat v4 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds);
    CGFloat v5 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds + 8);
    CGFloat v6 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds + 16);
    CGFloat v7 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds + 24);
    if (one-time initialization token for handwritingReflowInset != -1) {
      swift_once();
    }
    v34.origin.CGFloat x = v4;
    v34.origin.CGFloat y = v5;
    v34.size.CGFloat width = v6;
    v34.size.CGFloat height = v7;
    CGRect v35 = CGRectInset(v34, -*(double *)&static UIConstants.handwritingReflowInset, -*(double *)&static UIConstants.handwritingReflowInset);
    specialized static CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace(for:strokeBounds:rotateSingleElements:multiSelectionRotation:)(MEMORY[0x263F8EE78], 1, (long long *)&v30, v35.origin.x, v35.origin.y, v35.size.width, v35.size.height, 0.0);
    double v8 = v30;
    long long v9 = v31;
    double v10 = v32;
    long long v11 = v33;
  }
  else
  {
    long long v11 = *(_OWORD *)(v3 + 32);
    double v10 = *(double *)(v3 + 24);
    long long v9 = *(_OWORD *)(v3 + 8);
    double v12 = *(double *)v3;
    uint64_t v13 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
    if (v13)
    {
      uint64_t v14 = *(void *)&v13[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
      if ((*(unsigned char *)(v14 + 219) & 1) == 0)
      {
        double v15 = *(double *)(v14 + 120);
        double v16 = *(double *)(v14 + 128);
        double v17 = *(double *)(v14 + 136);
        double v18 = *(double *)(v14 + 144);
        long long v24 = v9;
        long long v27 = v11;
        BOOL v19 = CGRect.isFinite.getter(v15, v16, v17, v18);
        long long v9 = v24;
        long long v11 = v27;
        if (v19)
        {
          CGFloat v20 = v13;
          v36.origin.CGFloat x = v15;
          v36.origin.CGFloat y = v16;
          v36.size.CGFloat width = v17;
          v36.size.CGFloat height = v18;
          double MaxY = CGRectGetMaxY(v36);
          if (one-time initialization token for handwritingReflowInset != -1) {
            swift_once();
          }
          double v22 = *(double *)&static UIConstants.handwritingReflowInset;

          double v10 = MaxY + v22 + v22;
          long long v9 = v24;
          long long v11 = v27;
        }
      }
    }
    if (one-time initialization token for handwritingReflowMinimumWidth != -1)
    {
      long long v25 = v9;
      long long v28 = v11;
      swift_once();
      long long v9 = v25;
      long long v11 = v28;
    }
    double v23 = *(double *)&static UIConstants.handwritingReflowMinimumWidth;
    if (one-time initialization token for handwritingReflowInset != -1)
    {
      long long v26 = v9;
      long long v29 = v11;
      swift_once();
      long long v9 = v26;
      long long v11 = v29;
    }
    double v8 = v23
       + *(double *)&static UIConstants.handwritingReflowInset
       + *(double *)&static UIConstants.handwritingReflowInset;
    if (v12 > v8) {
      double v8 = v12;
    }
  }
  *(double *)a1 = v8;
  *(_OWORD *)(a1 + 8) = v9;
  *(double *)(a1 + 24) = v10;
  *(_OWORD *)(a1 + 32) = v11;
}

uint64_t HandwritingReflowView.availableSelectionHandles(for:)()
{
  if ((HandwritingReflowView.showRectangularSelection.getter() & 1) == 0) {
    return MEMORY[0x263F8EE78];
  }
  int v4 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode);
  unint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles);
  if (v4 == 1)
  {
    uint64_t v6 = v5 >> 62;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (result < 0)
      {
        __break(1u);
        goto LABEL_52;
      }
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v27 >= 3)
      {
LABEL_5:
        if ((v5 & 0xC000000000000001) != 0)
        {
          type metadata accessor for CanvasElementResizeHandle();
          _ArrayBuffer._typeCheckSlowPath(_:)(0);
          _ArrayBuffer._typeCheckSlowPath(_:)(1);
          _ArrayBuffer._typeCheckSlowPath(_:)(2);
        }
        if (v6)
        {
          swift_bridgeObjectRetain();
          uint64_t v0 = _CocoaArrayWrapper.subscript.getter();
          uint64_t v2 = v12;
          uint64_t v6 = v13;
          unint64_t v3 = v14;
          swift_bridgeObjectRelease_n();
          if ((v3 & 1) == 0)
          {
LABEL_23:
            uint64_t v15 = v0;
            uint64_t v16 = v2;
            uint64_t v17 = v6;
            unint64_t v18 = v3;
LABEL_31:
            uint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(v15, v16, v17, v18);
LABEL_38:
            swift_unknownObjectRelease();
            return v8;
          }
        }
        else
        {
          uint64_t v0 = v5 & 0xFFFFFFFFFFFFFF8;
          uint64_t v2 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
          unint64_t v3 = 7;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        uint64_t v19 = swift_dynamicCastClass();
        if (!v19)
        {
          swift_unknownObjectRelease();
          uint64_t v19 = MEMORY[0x263F8EE78];
        }
        uint64_t v20 = *(void *)(v19 + 16);
        swift_release();
        if (!__OFSUB__(v3 >> 1, v6))
        {
          if (v20 != (v3 >> 1) - v6)
          {
            swift_unknownObjectRelease();
            goto LABEL_23;
          }
          goto LABEL_36;
        }
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7 >= 3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
    unint64_t v3 = v5 >> 62;
    if (!(v5 >> 62))
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v6 < 3)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      swift_bridgeObjectRetain();
LABEL_13:
      if ((v5 & 0xC000000000000001) != 0 && v6 != 3)
      {
        type metadata accessor for CanvasElementResizeHandle();
        Swift::Int v10 = 3;
        do
        {
          Swift::Int v11 = v10 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v10);
          Swift::Int v10 = v11;
        }
        while (v6 != v11);
      }
      if (v3)
      {
        swift_bridgeObjectRetain();
        uint64_t v0 = _CocoaArrayWrapper.subscript.getter();
        uint64_t v2 = v21;
        unint64_t v3 = v22;
        uint64_t v6 = v23;
        swift_bridgeObjectRelease_n();
        if (v6) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v0 = v5 & 0xFFFFFFFFFFFFFF8;
        uint64_t v2 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
        uint64_t v6 = (2 * v6) | 1;
        unint64_t v3 = 3;
        if (v6)
        {
LABEL_32:
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_unknownObjectRetain_n();
          uint64_t v24 = swift_dynamicCastClass();
          if (!v24)
          {
            swift_unknownObjectRelease();
            uint64_t v24 = MEMORY[0x263F8EE78];
          }
          uint64_t v25 = *(void *)(v24 + 16);
          swift_release();
          if (!__OFSUB__((unint64_t)v6 >> 1, v3))
          {
            if (v25 == ((unint64_t)v6 >> 1) - v3)
            {
LABEL_36:
              uint64_t v8 = swift_dynamicCastClass();
              swift_unknownObjectRelease();
              if (!v8)
              {
                uint64_t v8 = MEMORY[0x263F8EE78];
                goto LABEL_38;
              }
              return v8;
            }
            goto LABEL_50;
          }
LABEL_49:
          __break(1u);
LABEL_50:
          swift_unknownObjectRelease();
        }
      }
      uint64_t v15 = v0;
      uint64_t v16 = v2;
      uint64_t v17 = v3;
      unint64_t v18 = v6;
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 < 3)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 >= 3)
  {
    swift_bridgeObjectRetain();
    uint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v0 < v6)
    {
      __break(1u);
      goto LABEL_47;
    }
    goto LABEL_13;
  }
LABEL_53:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall HandwritingReflowView.checkStrokesAreValid()()
{
  uint64_t v1 = type metadata accessor for PKStroke();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  int v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PKDrawing();
  double v6 = MEMORY[0x270FA5388](v5);
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (!v7) {
    goto LABEL_79;
  }
  uint64_t v8 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v6);
  if (!v8) {
    goto LABEL_79;
  }
  unint64_t v72 = v0;
  uint64_t v68 = v2;
  long long v9 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v8) + 0x2F8);
  id v65 = v8;
  Swift::Int v10 = (void *)v9();
  uint64_t v12 = v11;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  uint64_t v15 = v7;
  uint64_t v16 = (void *)v14(ObjectType, v12);

  if (!v16)
  {

LABEL_78:
LABEL_79:
    LOBYTE(v26) = 1;
    return v26;
  }
  id v62 = v15;
  id v17 = objc_msgSend(v16, sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for PKDrawingCoherence(0);
  if ((swift_dynamicCast() & 1) == 0)
  {

    id v22 = v62;
LABEL_77:

    goto LABEL_78;
  }
  unint64_t v18 = &selRef_strokeUUID;
  id v59 = v76;
  id v60 = v16;
  id v19 = objc_msgSend(v76, sel_strokes);
  uint64_t v20 = (unint64_t *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v73 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v20);
  swift_bridgeObjectRelease();
  unint64_t v21 = *(void *)(v72 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_currentReflowingStrokes);
  if (v21)
  {
    swift_bridgeObjectRetain();
    goto LABEL_44;
  }
  uint64_t v23 = *(void *)&v62[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
  swift_beginAccess();
  unint64_t v24 = *(void *)(v23 + 80);
  unint64_t v75 = MEMORY[0x263F8EE78];
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v25 = v26;
    uint64_t v27 = v68;
    if (v26) {
      goto LABEL_11;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    unint64_t v29 = MEMORY[0x263F8EE78];
    goto LABEL_25;
  }
  uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  LOBYTE(v26) = swift_bridgeObjectRetain_n();
  uint64_t v27 = v68;
  if (!v25) {
    goto LABEL_24;
  }
LABEL_11:
  if (v25 < 1)
  {
LABEL_86:
    __break(1u);
    return v26;
  }
  uint64_t v28 = 0;
  uint64_t v15 = (char *)(v24 & 0xC000000000000001);
  do
  {
    if (v15)
    {
      uint64_t v20 = (unint64_t *)MEMORY[0x21054E050](v28, v24);
    }
    else
    {
      uint64_t v20 = *(unint64_t **)(v24 + 8 * v28 + 32);
      swift_retain();
    }
    type metadata accessor for ReflowWord();
    if (swift_dynamicCastClass())
    {
      uint64_t v20 = &v75;
      MEMORY[0x21054D330]();
      if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      swift_release();
    }
    ++v28;
  }
  while (v25 != v28);
  swift_bridgeObjectRelease();
  unint64_t v29 = v75;
  unint64_t v18 = &selRef_strokeUUID;
LABEL_25:
  swift_bridgeObjectRelease();
  unint64_t v75 = MEMORY[0x263F8EE78];
  if (v29 >> 62) {
    goto LABEL_41;
  }
  uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (uint64_t i = v30; i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v72 = v1;
    int v63 = v4;
    unint64_t v64 = v29;
    uint64_t v31 = 0;
    unint64_t v66 = v29 & 0xC000000000000001;
    unint64_t v61 = v29 + 32;
    uint64_t v32 = v27 + 16;
    while (v66)
    {
      uint64_t v1 = MEMORY[0x21054E050](v31, v29);
      BOOL v34 = __OFADD__(v31++, 1);
      if (v34) {
        goto LABEL_40;
      }
LABEL_35:
      id v35 = [*(id *)(v1 + 280) v18[76]];
      uint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v37 = v36;
      uint64_t v38 = *(void *)(v36 + 16);
      if (v38)
      {
        uint64_t v70 = v1;
        uint64_t v71 = v31;
        unint64_t v74 = MEMORY[0x263F8EE78];
        specialized ContiguousArray.reserveCapacity(_:)();
        unint64_t v39 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        uint64_t v69 = v37;
        uint64_t v15 = (char *)(v37 + v39);
        uint64_t v40 = *(void *)(v27 + 72);
        id v41 = *(void (**)(char *, char *, unint64_t))(v27 + 16);
        uint64_t v42 = v32;
        unint64_t v43 = v72;
        do
        {
          v41(v4, v15, v43);
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
          swift_dynamicCast();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v15 += v40;
          --v38;
        }
        while (v38);
        unint64_t v33 = v74;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v27 = v68;
        unint64_t v18 = &selRef_strokeUUID;
        unint64_t v29 = v64;
        uint64_t v31 = v71;
        uint64_t v32 = v42;
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v33 = MEMORY[0x263F8EE78];
      }
      uint64_t v20 = &v75;
      specialized Array.append<A>(contentsOf:)(v33);
      if (v31 == i)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v21 = v75;
        goto LABEL_43;
      }
    }
    uint64_t v1 = *(void *)(v61 + 8 * v31);
    swift_retain();
    BOOL v34 = __OFADD__(v31++, 1);
    if (!v34) {
      goto LABEL_35;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease_n();
  unint64_t v21 = MEMORY[0x263F8EE78];
LABEL_43:
  swift_bridgeObjectRelease();
LABEL_44:
  unint64_t v44 = v73;
  if (v21 >> 62) {
    goto LABEL_75;
  }
  uint64_t v45 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v45)
  {
LABEL_76:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    id v22 = v60;
    goto LABEL_77;
  }
  while (1)
  {
    unint64_t v72 = v21 & 0xC000000000000001;
    if ((v21 & 0xC000000000000001) == 0) {
      break;
    }
LABEL_81:
    int64_t v46 = (char *)MEMORY[0x21054E050](0, v21);
LABEL_49:
    uint64_t v15 = v46;
    uint64_t v20 = (unint64_t *)v62;
    if (v44 >> 62) {
      goto LABEL_83;
    }
    uint64_t v47 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v47) {
      goto LABEL_73;
    }
LABEL_51:
    uint64_t v20 = (unint64_t *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    unint64_t v48 = v44 & 0xC000000000000001;
    uint64_t v69 = v21 + 32;
    uint64_t v70 = v21 & 0xFFFFFFFFFFFFFF8;
    unint64_t v49 = 1;
    uint64_t v71 = v45;
    if ((v44 & 0xC000000000000001) != 0)
    {
LABEL_52:
      id v50 = (id)MEMORY[0x21054E050](0, v44);
      goto LABEL_54;
    }
    while (1)
    {
      id v50 = *(id *)(v44 + 32);
LABEL_54:
      BOOL v51 = v50;
      char v52 = static NSObject.== infix(_:_:)();

      if ((v52 & 1) == 0) {
        break;
      }
LABEL_55:

      unint64_t v44 = v73;
      LOBYTE(v26) = swift_bridgeObjectRelease();
      uint64_t v45 = v71;
      if (v49 == v71) {
        goto LABEL_76;
      }
      if (v72)
      {
        objc_super v53 = (char *)MEMORY[0x21054E050](v49, v21);
      }
      else
      {
        if (v49 >= *(void *)(v70 + 16))
        {
          __break(1u);
          goto LABEL_86;
        }
        objc_super v53 = (char *)*(id *)(v69 + 8 * v49);
      }
      uint64_t v15 = v53;
      BOOL v34 = __OFADD__(v49++, 1);
      if (v34)
      {
        __break(1u);
        goto LABEL_81;
      }
      swift_bridgeObjectRetain();
      if (v48) {
        goto LABEL_52;
      }
    }
    if (v47 == 1)
    {
LABEL_72:
      uint64_t v20 = (unint64_t *)v62;
      goto LABEL_73;
    }
    uint64_t v54 = 5;
    while (1)
    {
      uint64_t v55 = v48 ? (id *)MEMORY[0x21054E050](v54 - 4, v73) : (id *)*(id *)(v73 + 8 * v54);
      unint64_t v44 = (unint64_t)v55;
      uint64_t v56 = v54 - 3;
      if (__OFADD__(v54 - 4, 1)) {
        break;
      }
      char v57 = static NSObject.== infix(_:_:)();

      if (v57) {
        goto LABEL_55;
      }
      ++v54;
      if (v56 == v47) {
        goto LABEL_72;
      }
    }
    __break(1u);
LABEL_75:
    swift_bridgeObjectRetain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v45) {
      goto LABEL_76;
    }
  }
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    int64_t v46 = (char *)*(id *)(v21 + 32);
    goto LABEL_49;
  }
  __break(1u);
LABEL_83:
  swift_bridgeObjectRetain();
  uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
  if (v47) {
    goto LABEL_51;
  }
LABEL_73:
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease();
  LOBYTE(v26) = 0;
  return v26;
}

void specialized HandwritingReflowView.updateCurrentReflowingStrokes<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PKDrawing();
  double v5 = MEMORY[0x270FA5388](v4);
  double v6 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v5);
  if (v6)
  {
    uint64_t v15 = v6;
    uint64_t v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x2F8))();
    uint64_t v9 = v8;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);

    if (v11)
    {
      id v12 = objc_msgSend(v11, sel_drawing);
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      type metadata accessor for PKDrawingCoherence(0);
      if (swift_dynamicCast())
      {
        id v13 = v16;
        uint64_t v14 = specialized Sequence.compactMap<A>(_:)(a1, (uint64_t)v13);

        *(void *)(v2 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_currentReflowingStrokes) = v14;
        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall HandwritingReflowView.layoutSubviews()()
{
  uint64_t v1 = v0;
  if (v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI] == 1)
  {
    uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
    if (v2)
    {
      id v3 = v2;
      id v4 = objc_msgSend(v3, sel_superview);
      if (v4)
      {
        double v5 = v4;
        if (*(void *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle])
        {
          if (one-time initialization token for handwritingReflowAnimationDuration != -1) {
            swift_once();
          }
          ReflowTextView.startAnimating(endingIn:smoothstep:)(*(Swift::Double *)&static UIConstants.handwritingReflowAnimationDuration, 0);
          objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_frame);
          objc_msgSend(v5, sel_convertRect_fromCoordinateSpace_, v1);
          if (one-time initialization token for handwritingReflowInset != -1)
          {
            uint64_t v12 = v8;
            uint64_t v13 = v6;
            uint64_t v10 = v9;
            uint64_t v11 = v7;
            swift_once();
            uint64_t v9 = v10;
            uint64_t v7 = v11;
            uint64_t v8 = v12;
            uint64_t v6 = v13;
          }
          CGRect v15 = CGRectInset(*(CGRect *)&v6, *(CGFloat *)&static UIConstants.handwritingReflowInset, *(CGFloat *)&static UIConstants.handwritingReflowInset);
          objc_msgSend(v3, sel_setFrame_, v15.origin.x, v15.origin.y, v15.size.width, v15.size.height);

          goto LABEL_15;
        }
      }
      else
      {
        double v5 = v3;
      }
    }
  }
  if (!HandwritingReflowView.checkStrokesAreValid()()) {
    HandwritingReflowView.updateForNewSelection()();
  }
LABEL_15:
  if (!*(void *)&v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox])
  {
    *(void *)&v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_currentReflowingStrokes] = 0;
    swift_bridgeObjectRelease();
  }
  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for HandwritingReflowView();
  objc_msgSendSuper2(&v14, sel_layoutSubviews);
}

uint64_t HandwritingReflowView.showCaret(_:location:textPosition:linesAffected:caretRect:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v12 = v11;
  LOBYTE(v13) = a5;
  Swift::Int v23 = (Swift::Int)a1;
  uint64_t v24 = *(void *)&a1[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
  uint64_t v115 = (uint64_t *)(v24 + 80);
  uint64_t result = swift_beginAccess();
  unint64_t v26 = *(void *)(v24 + 80);
  if (v26 >> 62) {
    goto LABEL_90;
  }
  if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return result;
  }
LABEL_3:
  objc_msgSend((id)v23, sel_convertPoint_fromCoordinateSpace_, v12, a6, a7);
  uint64_t v28 = v27;
  double v30 = v29;
  uint64_t v31 = *(void *)(a2 + OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index);
  uint64_t v32 = *v115;
  if (!((unint64_t)*v115 >> 62))
  {
    uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    Swift::Int v34 = v33 - 1;
    if (!__OFSUB__(v33, 1)) {
      goto LABEL_5;
    }
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  swift_bridgeObjectRetain();
  uint64_t v104 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  Swift::Int v34 = v104 - 1;
  if (__OFSUB__(v104, 1)) {
    goto LABEL_94;
  }
LABEL_5:
  uint64_t v114 = (void *)v23;
  if (v34 >= v31) {
    Swift::Int v34 = v31;
  }
  if (v31 >= 0) {
    Swift::Int v23 = v34;
  }
  else {
    Swift::Int v23 = 0;
  }
  uint64_t v32 = *v115;
  if ((*v115 & 0xC000000000000001) != 0)
  {
LABEL_95:
    swift_bridgeObjectRetain();
    uint64_t v31 = MEMORY[0x21054E050](v23, v32);
    swift_bridgeObjectRelease();
    unsigned int v35 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity);
    type metadata accessor for ReflowWord();
    if (swift_dynamicCastClass()) {
      goto LABEL_73;
    }
    if (v23 < 0)
    {
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    goto LABEL_14;
  }
  if (v23 < 0) {
    goto LABEL_98;
  }
  if ((unint64_t)v23 >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_99;
  }
  uint64_t v31 = *(void *)(v32 + 8 * v23 + 32);
  unsigned int v35 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity);
  type metadata accessor for ReflowWord();
  uint64_t v36 = swift_dynamicCastClass();
  swift_retain();
  if (v36) {
    goto LABEL_73;
  }
LABEL_14:
  unsigned int v105 = v35;
  uint64_t v110 = v12;
  uint64_t v112 = v31;
  uint64_t v108 = v24;
  char v37 = 0;
  char v38 = v13 & 1;
  uint64_t v13 = (char *)(v23 + 1);
  do
  {
    uint64_t v39 = *v115;
    unint64_t v40 = (unint64_t)*v115 >> 62;
    char v106 = v37;
    if (v40)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v41 < v23) {
        goto LABEL_107;
      }
      swift_bridgeObjectRetain();
      uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v68 < v23) {
        goto LABEL_108;
      }
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v31 < v41) {
        goto LABEL_104;
      }
    }
    else
    {
      uint64_t v41 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v41 < v23) {
        goto LABEL_103;
      }
      uint64_t result = swift_bridgeObjectRetain();
    }
    if ((v39 & 0xC000000000000001) != 0 && v23 != v41)
    {
      if (v23 >= v41)
      {
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
        return result;
      }
      type metadata accessor for ReflowElement();
      Swift::Int v43 = v23;
      do
      {
        Swift::Int v44 = v43 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v43);
        Swift::Int v43 = v44;
      }
      while (v41 != v44);
    }
    if (v40)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = (char *)_CocoaArrayWrapper.subscript.getter();
      uint64_t v45 = v48;
      Swift::Int v47 = v49;
      unint64_t v46 = v50;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v12 = (char *)(v39 & 0xFFFFFFFFFFFFFF8);
      uint64_t v45 = (v39 & 0xFFFFFFFFFFFFFF8) + 32;
      unint64_t v46 = (2 * v41) | 1;
      Swift::Int v47 = v23;
    }
    int64_t v51 = v46 >> 1;
    a2 = (v46 >> 1) - v47;
    if (a2)
    {
      if (v47 > v51) {
        int64_t v51 = v47;
      }
      uint64_t v24 = v51 - v47;
      id v59 = (uint64_t *)(v45 + 8 * v47);
      while (1)
      {
        if (!v24) {
          goto LABEL_89;
        }
        uint64_t v52 = *v59;
        type metadata accessor for ReflowWord();
        if (swift_dynamicCastClass())
        {
          if (v38) {
            break;
          }
          uint64_t v60 = *(void *)(v52 + 120);
          if (v60 >= a3 && a4 >= v60) {
            break;
          }
        }
        --v24;
        ++v59;
        if (!--a2) {
          goto LABEL_29;
        }
      }
      unsigned int v35 = 0;
LABEL_72:
      swift_retain();
      swift_unknownObjectRelease();
      swift_release();
      uint64_t v31 = v52;
      uint64_t v24 = v108;
      uint64_t v12 = v110;
      goto LABEL_73;
    }
LABEL_29:
    swift_unknownObjectRelease();
    uint64_t v52 = *v115;
    unint64_t v53 = (unint64_t)*v115 >> 62;
    if (v53)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (result < 0) {
        goto LABEL_109;
      }
      swift_bridgeObjectRetain();
      uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v69 <= v23)
      {
LABEL_69:
        __break(1u);
LABEL_70:
        unsigned int v35 = 1;
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v54 = *(void *)((*v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v54 <= v23) {
        goto LABEL_69;
      }
    }
    if ((v52 & 0xC000000000000001) != 0)
    {
      type metadata accessor for ReflowElement();
      Swift::Int v55 = 0;
      do
      {
        Swift::Int v56 = v55 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v55);
        Swift::Int v55 = v56;
      }
      while (v13 != (char *)v56);
    }
    if (v53)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      uint64_t v57 = v62;
      uint64_t v24 = v63;
      unint64_t v58 = v64;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v57 = (v52 & 0xFFFFFFFFFFFFFF8) + 32;
      unint64_t v58 = (2 * (v23 + 1)) | 1;
    }
    uint64_t v12 = (char *)(v58 >> 1);
    a2 = (uint64_t)v12;
    if (v12 != (char *)v24)
    {
      while (!__OFSUB__(a2--, 1))
      {
        if (a2 < v24 || a2 >= (uint64_t)v12) {
          goto LABEL_88;
        }
        uint64_t v52 = *(void *)(v57 + 8 * a2);
        type metadata accessor for ReflowWord();
        if (swift_dynamicCastClass())
        {
          if (v38) {
            goto LABEL_70;
          }
          uint64_t v66 = *(void *)(v52 + 120);
          if (v66 >= a3 && a4 >= v66) {
            goto LABEL_70;
          }
        }
        if (a2 == v24) {
          goto LABEL_50;
        }
      }
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      swift_bridgeObjectRetain();
      uint64_t v103 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v103) {
        return result;
      }
      goto LABEL_3;
    }
LABEL_50:
    swift_unknownObjectRelease();
    a3 = 0;
    a4 = 0;
    char v37 = 1;
    char v38 = 1;
    uint64_t v31 = v112;
  }
  while ((v106 & 1) == 0);
  while (1)
  {
    uint64_t v24 = v108;
    uint64_t v12 = v110;
    unsigned int v35 = v105;
LABEL_73:
    double v70 = round(*(double *)(v31 + 80));
    if ((~*(void *)&v70 & 0x7FF0000000000000) == 0)
    {
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }
    if (v70 <= -9.22337204e18) {
      goto LABEL_101;
    }
    if (v70 < 9.22337204e18) {
      break;
    }
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
  }
  unint64_t v71 = (uint64_t)v70;
  if (((uint64_t)v70 & 0x8000000000000000) == 0)
  {
    swift_beginAccess();
    uint64_t v72 = *(void *)(v24 + 96);
    if (*(void *)(v72 + 16) > v71)
    {
      uint64_t v73 = v72 + 168 * v71;
      long long v74 = *(_OWORD *)(v73 + 32);
      long long v75 = *(_OWORD *)(v73 + 64);
      v118[1] = *(_OWORD *)(v73 + 48);
      v118[2] = v75;
      v118[0] = v74;
      long long v76 = *(_OWORD *)(v73 + 80);
      long long v77 = *(_OWORD *)(v73 + 96);
      long long v78 = *(_OWORD *)(v73 + 128);
      long long v119 = *(_OWORD *)(v73 + 112);
      long long v120 = v78;
      v118[3] = v76;
      v118[4] = v77;
      long long v79 = *(_OWORD *)(v73 + 144);
      long long v80 = *(_OWORD *)(v73 + 160);
      long long v81 = *(_OWORD *)(v73 + 176);
      uint64_t v124 = *(void *)(v73 + 192);
      long long v122 = v80;
      long long v123 = v81;
      long long v121 = v79;
      double v109 = *(double *)&v78;
      double v111 = *(double *)&v119;
      outlined retain of ReflowTextLine((uint64_t)v118);
      id v82 = ReflowTextLine.textSize.getter();
      uint64_t v83 = v28;
      double v84 = v30;
      double v85 = a11;
      double v86 = *(double *)&v121;
      uint64_t v116 = v83;
      double v113 = a6;
      double v87 = a7;
      double v88 = a8;
      double v89 = a9;
      double v90 = a10;
      double v91 = *(double *)&v122;
      objc_msgSend(v82, sel_xHeight);
      double v107 = v92;
      outlined release of ReflowTextLine((uint64_t)v118);
      if (v86 > v91) {
        double v91 = v86;
      }
      objc_msgSend(v82, sel_xHeight);
      double v94 = v93;

      if (v84 <= v91 + v94 * 0.5)
      {
        double v95 = v111;
        if (v109 < v111) {
          double v95 = v109;
        }
        if (v95 + v107 * -0.5 <= v84)
        {
          CGRect v96 = *(void **)&v12[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
          *(void *)&v12[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox] = v114;
          id v97 = v114;

          CGRect v98 = *(void **)&v12[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret];
          objc_msgSend(v98, sel_setAlpha_, 1.0);
          objc_msgSend(v98, sel_setFrame_, v113, v87, 0.0, 0.0);
          objc_msgSend(v12, sel_addSubview_, v98);
          swift_beginAccess();
          *(void *)(v24 + 160) = v31;
          *(void *)(v24 + 168) = v35;
          *(void *)(v24 + 176) = v116;
          *(double *)(v24 + 184) = v84;
          *(void *)(v24 + 192) = v116;
          *(double *)(v24 + 200) = v84;
          *(void *)(v24 + 208) = 0;
          *(unsigned char *)(v24 + 218) = 1;
          *(_WORD *)(v24 + 216) = 1;
          swift_retain();
          swift_release();
          double v99 = self;
          uint64_t v100 = (double *)swift_allocObject();
          *((void *)v100 + 2) = v12;
          v100[3] = v88;
          v100[4] = v89;
          v100[5] = v90;
          v100[6] = v85;
          aBlock[4] = partial apply for closure #3 in HandwritingReflowView.showCaret(_:location:textPosition:linesAffected:caretRect:);
          aBlock[5] = v100;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          aBlock[3] = &block_descriptor_210;
          BOOL v101 = _Block_copy(aBlock);
          uint64_t v102 = v12;
          swift_release();
          objc_msgSend(v99, sel_animateWithDuration_animations_, v101, 0.2);
          _Block_release(v101);
        }
      }
    }
  }
  return swift_release();
}

uint64_t HandwritingReflowView.startInsertSpaceReflow(at:)(double a1, double a2)
{
  id v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  double v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v7);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v10;
  uint64_t v12 = (void *)MEMORY[0x263F8EED0];
  uint64_t v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v10) + 0x2F8))();
  uint64_t v15 = v14;
  uint64_t ObjectType = swift_getObjectType();
  id v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(ObjectType, v15);

  if (!v17)
  {

    return 0;
  }
  v3[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI] = 0;
  id v18 = objc_msgSend(v11, sel_convertPoint_fromCoordinateSpace_, v3, a1, a2);
  double v20 = v19;
  double v22 = v21;
  (*(void (**)(void *__return_ptr, id))((*v12 & *v11) + 0x5D0))(v35, v18);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v35, (uint64_t)&v36, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  double v23 = 1.0;
  if ((v38 & 1) == 0) {
    double v23 = sqrt(v36 * v36 + v37 * v37);
  }
  double v24 = v20 / v23;
  double v25 = v22 / v23;
  uint64_t v26 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v9, 1, 1, v26);
  type metadata accessor for MainActor();
  id v27 = v17;
  uint64_t v28 = v11;
  double v29 = v3;
  uint64_t v30 = static MainActor.shared.getter();
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = MEMORY[0x263F8F500];
  *(void *)(v31 + 16) = v30;
  *(void *)(v31 + 24) = v32;
  *(double *)(v31 + 32) = v24;
  *(double *)(v31 + 40) = v25;
  *(void *)(v31 + 48) = v27;
  *(void *)(v31 + 56) = v28;
  *(void *)(v31 + 64) = v29;
  *(double *)(v31 + 72) = a1;
  *(double *)(v31 + 80) = a2;
  uint64_t v33 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:), v31);

  return v33;
}

uint64_t closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(double *)(v10 + 208) = a3;
  *(double *)(v10 + 216) = a4;
  *(void *)(v10 + 192) = a9;
  *(void *)(v10 + 200) = a10;
  *(void *)(v10 + 224) = type metadata accessor for MainActor();
  *(void *)(v10 + 232) = static MainActor.shared.getter();
  id v17 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:)
                                                                 + async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v10 + 240) = v14;
  *uint64_t v14 = v10;
  v14[1] = closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:);
  uint64_t v15 = MEMORY[0x263F8EE78];
  return v17(v15, a8, a1, a2);
}

uint64_t closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:)(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  v2[31] = a1;
  swift_task_dealloc();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[32] = v4;
  v2[33] = v3;
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:), v4, v3);
}

uint64_t closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:)()
{
  uint64_t v1 = (char *)v0[31];
  if (!v1)
  {
LABEL_4:
    swift_release();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  if (static Task<>.isCancelled.getter())
  {

    goto LABEL_4;
  }
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager;
  v0[34] = OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager;
  uint64_t v5 = *(void *)&v1[v4];
  *(unsigned char *)(v5 + 219) = 0;
  swift_beginAccess();
  if (*(void *)(*(void *)(v5 + 88) + 16) == 1)
  {
    uint64_t v6 = (void *)v0[24];
    id v7 = objc_msgSend(v1, sel_frame);
    uint64_t v8 = (void *)MEMORY[0x263F8EED0];
    uint64_t v9 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v6) + 0x2F8))(v7);
    CGFloat v10 = (*(double (**)(void))((*v8 & *v9) + 0x138))();
    CGFloat v12 = v11;
    CGFloat v14 = v13;
    CGFloat v16 = v15;

    v22.origin.CGFloat x = v10;
    v22.origin.CGFloat y = v12;
    v22.size.CGFloat width = v14;
    v22.size.CGFloat height = v16;
    CGRectGetMaxX(v22);
    objc_msgSend(v1, sel_frame);
    CGRectGetMinX(v23);
    objc_msgSend(v1, sel_frame);
    objc_msgSend(v1, sel_setFrame_);
  }
  uint64_t v17 = v0[25];
  uint64_t v18 = *(void **)(v17 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  *(void *)(v17 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox) = v0[31];
  v1;

  double v19 = (void *)swift_task_alloc();
  v0[35] = v19;
  *double v19 = v0;
  v19[1] = closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:);
  uint64_t v20 = v0[24];
  return ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(v20, 0, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 264);
  uint64_t v3 = *(void *)(v1 + 256);
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:), v3, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::OpaquePointer v5;
  Swift::OpaquePointer v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  swift_release();
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = *(void **)(v0 + 248);
    goto LABEL_7;
  }
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v3 + v2);
  swift_beginAccess();
  v5._rawValue = *(void **)(v4 + 80);
  swift_beginAccess();
  v6._rawValue = *(void **)(v4 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ReflowLayoutManager.layoutText(contents:lines:)(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v7 = *(void *)(v3 + v2);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 80);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    CGFloat v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void **)(v0 + 248);
    if (!v12) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v1 = *(void **)(v0 + 248);
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
  }
  ReflowTextView.caretRect(for:in:)(*(void *)(v0 + 200), v0 + 56, *(double *)(v0 + 208));
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v0 + 56, v0 + 16, &demangling cache variable for type metadata for (ReflowLayoutManager.TextPosition, CGRect)?);
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 248);
  if (v9)
  {
    HandwritingReflowView.showCaret(_:location:textPosition:linesAffected:caretRect:)(*(char **)(v0 + 248), v9, 0, 0, 1, *(double *)(v0 + 208), *(double *)(v0 + 216), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
    outlined release of NSNumber?((id *)(v0 + 56));
  }
LABEL_7:

  CGFloat v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

void HandwritingReflowView.startReflowForSelection(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PKDrawing();
  MEMORY[0x270FA5388](v9);
  CGFloat v10 = &v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  double v11 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v11)
  {
    CGFloat v12 = (void *)MEMORY[0x263F8EED0];
    double v13 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x2F8);
    unint64_t v53 = v11;
    CGFloat v14 = (void *)v13();
    uint64_t v16 = v15;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(ObjectType, v16);

    if (v18)
    {
      id v19 = objc_msgSend(v18, sel_drawing);
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      type metadata accessor for PKDrawingCoherence(0);
      if ((swift_dynamicCast() & 1) == 0)
      {

        return;
      }
      uint64_t v20 = v54;
      uint64_t v21 = MEMORY[0x210550400](v10);
      uint64_t v51 = a1;
      uint64_t v52 = v20;
      if (v21)
      {
        CGRect v22 = (void *)v21;
        uint64_t v23 = *(void *)(v21 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
        if (!v23)
        {
          __break(1u);
          goto LABEL_19;
        }
        uint64_t v24 = a2;
        double v25 = *(void **)(v23 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v24 = a2;
        double v25 = (void *)MEMORY[0x263F8EE88];
      }
      uint64_t v54 = v25;
      id v27 = *(double (**)(void **, uint64_t, uint64_t))((*v12 & *v53) + 0x3D8);
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      uint64_t v29 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>, (uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      double v30 = v27(&v54, v28, v29);
      uint64_t v32 = v31;
      uint64_t v34 = v33;
      uint64_t v36 = v35;
      swift_bridgeObjectRelease();
      uint64_t v37 = MEMORY[0x210550400](v10);
      if (!v37)
      {
        uint64_t v42 = MEMORY[0x263F8EE88];
        uint64_t v41 = v24;
        uint64_t v43 = v51;
        unint64_t v40 = v52;
        goto LABEL_16;
      }
      char v38 = (void *)v37;
      uint64_t v39 = *(void *)(v37 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      unint64_t v40 = v52;
      if (v39)
      {
        uint64_t v41 = v24;
        uint64_t v42 = *(void *)(v39 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();

        uint64_t v43 = v51;
LABEL_16:
        unint64_t v44 = specialized CanvasMembers.leafStrokes(in:)((uint64_t)v40, v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v45 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v8, 1, 1, v45);
        type metadata accessor for MainActor();
        id v46 = v18;
        id v47 = v3;
        outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v43);
        uint64_t v48 = static MainActor.shared.getter();
        Swift::Int v49 = (double *)swift_allocObject();
        uint64_t v50 = MEMORY[0x263F8F500];
        *((void *)v49 + 2) = v48;
        *((void *)v49 + 3) = v50;
        v49[4] = v30;
        *((void *)v49 + 5) = v32;
        *((void *)v49 + 6) = v34;
        *((void *)v49 + 7) = v36;
        *((void *)v49 + 8) = v44;
        *((void *)v49 + 9) = v46;
        *((void *)v49 + 10) = v47;
        *((void *)v49 + 11) = v43;
        *((void *)v49 + 12) = v41;
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.startReflowForSelection(completion:), (uint64_t)v49);

        swift_release();
        return;
      }
LABEL_19:
      __break(1u);
      return;
    }
    id v26 = v53;
  }
}

uint64_t closure #1 in HandwritingReflowView.startReflowForSelection(completion:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v10[7] = a9;
  v10[8] = a10;
  v10[5] = a7;
  v10[6] = a8;
  uint64_t v15 = type metadata accessor for PKStroke();
  v10[9] = v15;
  v10[10] = *(void *)(v15 - 8);
  v10[11] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for UUID();
  v10[12] = v16;
  v10[13] = *(void *)(v16 - 8);
  v10[14] = swift_task_alloc();
  v10[15] = type metadata accessor for MainActor();
  v10[16] = static MainActor.shared.getter();
  id v19 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:)
                                                                 + async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:));
  uint64_t v17 = (void *)swift_task_alloc();
  v10[17] = v17;
  *uint64_t v17 = v10;
  v17[1] = closure #1 in HandwritingReflowView.startReflowForSelection(completion:);
  return v19(a6, a7, a1, a2);
}

uint64_t closure #1 in HandwritingReflowView.startReflowForSelection(completion:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.startReflowForSelection(completion:), v3, v2);
}

uint64_t closure #1 in HandwritingReflowView.startReflowForSelection(completion:)()
{
  uint64_t v1 = v0[18];
  swift_release();
  if (v1)
  {
    uint64_t v36 = OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager;
    uint64_t v37 = (char *)v0[18];
    uint64_t v2 = *(void *)&v37[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    swift_beginAccess();
    unint64_t v3 = *(void *)(v2 + 80);
    uint64_t v4 = MEMORY[0x263F8EE78];
    if (v3 >> 62) {
      goto LABEL_24;
    }
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v6 = 0;
      uint64_t v38 = v0[10];
      uint64_t v7 = v0[13];
      unint64_t v42 = v3 & 0xC000000000000001;
      uint64_t v39 = v5;
      unint64_t v40 = v3;
      while (v42)
      {
        MEMORY[0x21054E050](v6, v3);
        BOOL v9 = __OFADD__(v6++, 1);
        if (v9) {
          goto LABEL_23;
        }
LABEL_13:
        type metadata accessor for ReflowWord();
        uint64_t v10 = swift_dynamicCastClass();
        if (v10)
        {
          id v11 = objc_msgSend(*(id *)(v10 + 280), sel_strokes);
          uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          int64_t v13 = *(void *)(v12 + 16);
          if (v13)
          {
            uint64_t v41 = v6;
            uint64_t v45 = v4;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
            unint64_t v14 = v12 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
            uint64_t v44 = *(void *)(v38 + 72);
            uint64_t v43 = *(void (**)(uint64_t, unint64_t, uint64_t))(v38 + 16);
            uint64_t v8 = v4;
            do
            {
              uint64_t v15 = v0[11];
              uint64_t v16 = v0[9];
              v43(v15, v14, v16);
              isCGFloat a = PKStroke._bridgeToObjectiveC()().super.isa;
              id v18 = [(objc_class *)isa _strokeUUID];

              static UUID._unconditionallyBridgeFromObjectiveC(_:)();
              (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v15, v16);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
                uint64_t v8 = v45;
              }
              unint64_t v20 = *(void *)(v8 + 16);
              unint64_t v19 = *(void *)(v8 + 24);
              if (v20 >= v19 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
                uint64_t v8 = v45;
              }
              uint64_t v21 = v0[14];
              uint64_t v22 = v0[12];
              *(void *)(v8 + 16) = v20 + 1;
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v8+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v20, v21, v22);
              uint64_t v45 = v8;
              v14 += v44;
              --v13;
            }
            while (v13);
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v5 = v39;
            unint64_t v3 = v40;
            uint64_t v4 = MEMORY[0x263F8EE78];
            uint64_t v6 = v41;
            goto LABEL_7;
          }
          swift_bridgeObjectRelease();
        }
        swift_release();
        uint64_t v8 = v4;
LABEL_7:
        specialized Array.append<A>(contentsOf:)(v8);
        if (v6 == v5) {
          goto LABEL_25;
        }
      }
      swift_retain();
      BOOL v9 = __OFADD__(v6++, 1);
      if (!v9) {
        goto LABEL_13;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      swift_bridgeObjectRetain_n();
    }
LABEL_25:
    swift_bridgeObjectRelease_n();
    uint64_t v23 = v0[18];
    uint64_t v24 = (char *)v0[6];
    uint64_t v25 = v0[7];
    id v26 = (void *)v0[5];
    Class v27 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v26, sel_setReflowingStrokeIds_, v27);

    uint64_t v28 = *(void *)&v37[v36];
    uint64_t v29 = &v24[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds];
    long long v30 = *(_OWORD *)(v28 + 64);
    *(_OWORD *)uint64_t v29 = *(_OWORD *)(v28 + 48);
    *((_OWORD *)v29 + 1) = v30;
    uint64_t v31 = *(void **)&v24[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
    *(void *)&v24[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox] = v23;
    uint64_t v32 = v37;

    id v33 = objc_msgSend(v24, sel_setNeedsLayout);
    if (v25) {
      ((void (*)(id))v0[7])(v33);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = (uint64_t (*)(void))v0[1];
  return v34();
}

void HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for PKDrawing();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  int64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v50 - v16;
  id v18 = (void *)MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v15);
  if (!v18) {
    return;
  }
  uint64_t v53 = v10;
  unint64_t v19 = (void *)MEMORY[0x263F8EED0];
  unint64_t v20 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v18) + 0x320);
  Swift::Int v55 = v18;
  uint64_t v21 = (void *)v20();
  if (v21)
  {
    id v54 = v21;
    uint64_t v51 = a3;
    uint64_t v52 = a4;
    uint64_t v22 = (void *)(*(uint64_t (**)(void))((*v19 & *v55) + 0x2F8))();
    uint64_t v24 = v23;
    uint64_t ObjectType = swift_getObjectType();
    id v26 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(ObjectType, v24);

    if (v26)
    {
      id v27 = objc_msgSend(v26, sel_drawing);

      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v11;
      uint64_t v29 = v53;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v13, v53);
      long long v30 = a1;
      *((unsigned char *)a1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationEnabled) = 0;
      if (a2)
      {
        uint64_t v31 = ReflowLayoutManager.strokeTransforms()();
        (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v55) + 0x5C0))();
        objc_msgSend(a1, sel_frame);
        uint64_t v32 = (void *)(v5 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds);
        void *v32 = v33;
        v32[1] = v34;
        v32[2] = v35;
        v32[3] = v36;
        specialized HandwritingReflowView.updateCurrentReflowingStrokes<A>(_:)(v31);
        swift_bridgeObjectRelease();
      }
      uint64_t v37 = v5 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace;
      *(_OWORD *)(v37 + 16) = 0u;
      *(_OWORD *)(v37 + 32) = 0u;
      *(_OWORD *)uint64_t v37 = 0u;
      *(unsigned char *)(v37 + 48) = 1;
      uint64_t v38 = v5 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace;
      *(_OWORD *)uint64_t v38 = 0u;
      *(_OWORD *)(v38 + 16) = 0u;
      *(_OWORD *)(v38 + 32) = 0u;
      *(unsigned char *)(v38 + 48) = 1;
      type metadata accessor for PKStroke();
      isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
      PKDrawing._bridgeToObjectiveC()(v40);
      unint64_t v42 = v41;
      uint64_t v43 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v44 = (void *)swift_allocObject();
      v44[2] = a1;
      v44[3] = v43;
      uint64_t v46 = v51;
      uint64_t v45 = v52;
      v44[4] = v51;
      v44[5] = v45;
      aBlock[4] = partial apply for closure #1 in HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:);
      aBlock[5] = v44;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_186;
      id v47 = _Block_copy(aBlock);
      id v48 = v30;
      outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v46);
      swift_release();
      objc_msgSend(v54, sel__setAdditionalStrokes_inDrawing_completion_, isa, v42, v47);

      _Block_release(v47);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v29);
      return;
    }

    id v49 = v54;
  }
  else
  {
    id v49 = v55;
  }
}

void closure #1 in HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(char *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = a2 + 16;
  uint64_t v6 = (void *)MEMORY[0x210550400](&a1[OBJC_IVAR____TtC8PaperKit14ReflowTextView_wrapperView]);
  objc_msgSend(v6, sel_removeFromSuperview);

  objc_msgSend(a1, sel_removeFromSuperview);
  a1[OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationEnabled] = 1;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v5);
  if (v7)
  {
    uint64_t v8 = (char *)v7;
    BOOL v9 = self;
    uint64_t v10 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret];
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v10;
    aBlock[4] = closure #1 in HandwritingReflowView.hideCaret()partial apply;
    aBlock[5] = v11;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_193;
    uint64_t v12 = _Block_copy(aBlock);
    id v13 = v10;
    swift_release();
    objc_msgSend(v9, sel_animateWithDuration_animations_, v12, 0.2);
    _Block_release(v12);
  }
  if (a3) {
    a3();
  }
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 312) = v16;
  *(void *)(v8 + 320) = v17;
  *(_OWORD *)(v8 + 296) = v15;
  *(void *)(v8 + 280) = a7;
  *(void *)(v8 + 288) = a8;
  *(void *)(v8 + 264) = a5;
  *(void *)(v8 + 272) = a6;
  *(void *)(v8 + 256) = a4;
  type metadata accessor for UUID();
  *(void *)(v8 + 328) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PKStroke();
  *(void *)(v8 + 336) = v9;
  *(void *)(v8 + 344) = *(void *)(v9 - 8);
  *(void *)(v8 + 352) = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  *(void *)(v8 + 360) = v10;
  *(void *)(v8 + 368) = *(void *)(v10 - 8);
  *(void *)(v8 + 376) = swift_task_alloc();
  *(void *)(v8 + 384) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v8 + 392) = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 400) = v12;
  *(void *)(v8 + 408) = v11;
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), v12, v11);
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = *(void *)(v0[32] + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  int64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  int64_t v60 = v3;
  uint64_t v61 = v2;
  if (v3)
  {
    uint64_t v5 = (unsigned __int8 *)v0[46];
    uint64_t v6 = v0[43];
    uint64_t v71 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v6 += 16;
    uint64_t v8 = v1 + ((*(unsigned __int8 *)(v6 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 64));
    uint64_t v64 = *(void *)(v6 + 56);
    uint64_t v66 = v7;
    uint64_t v68 = v5;
    uint64_t v62 = (void (**)(uint64_t, uint64_t))(v6 - 8);
    uint64_t v4 = v71;
    do
    {
      uint64_t v9 = v0[44];
      uint64_t v10 = v0[42];
      v66(v9, v8, v10);
      isCGFloat a = PKStroke._bridgeToObjectiveC()().super.isa;
      id v12 = [(objc_class *)isa _strokeUUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      WeakRef.init(id:)();
      (*v62)(v9, v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
        uint64_t v4 = v71;
      }
      unint64_t v14 = *(void *)(v4 + 16);
      unint64_t v13 = *(void *)(v4 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v4 = v71;
      }
      uint64_t v15 = v0[48];
      uint64_t v16 = v0[45];
      *(void *)(v4 + 16) = v14 + 1;
      (*((void (**)(unint64_t, uint64_t, uint64_t))v68 + 4))(v4 + ((v68[80] + 32) & ~(unint64_t)v68[80]) + *((void *)v68 + 9) * v14, v15, v16);
      v8 += v64;
      --v3;
    }
    while (v3);
    uint64_t v2 = v61;
  }
  unint64_t v17 = specialized Set.init<A>(_:)(v4);
  swift_bridgeObjectRelease();
  unint64_t v18 = ReflowLayoutManager.reflowWords(for:)(v17);
  swift_bridgeObjectRelease();
  if (!(v18 >> 62))
  {
    if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_11;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  unint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_24;
  }
LABEL_11:
  if ((v18 & 0xC000000000000001) != 0)
  {
    uint64_t v19 = MEMORY[0x21054E050](0, v18);
  }
  else
  {
    if (!*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v19 = *(void *)(v18 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  unint64_t v20 = *(void *)(v2 + 80);
  swift_bridgeObjectRetain();
  uint64_t v21 = specialized Collection<>.firstIndex(of:)(v19, v20);
  char v23 = v22;
  uint64_t v24 = swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
  {
    BOOL v25 = v21 < 1;
    unint64_t v17 = v21 - 1;
    if (!v25)
    {
      unint64_t v18 = *(void *)(v2 + 80);
      if ((v18 & 0xC000000000000001) == 0)
      {
        if (v17 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return MEMORY[0x270FA23F0](v24);
        }
        uint64_t v26 = *(void *)(v18 + 8 * v17 + 32);
        swift_retain();
        goto LABEL_19;
      }
LABEL_37:
      swift_bridgeObjectRetain();
      uint64_t v26 = MEMORY[0x21054E050](v17, v18);
      swift_bridgeObjectRelease();
LABEL_19:
      swift_beginAccess();
      *(void *)(v61 + 160) = v26;
      *(void *)(v61 + 168) = 1;
      *(_OWORD *)(v61 + 176) = 0u;
      *(_OWORD *)(v61 + 192) = 0u;
      *(void *)(v61 + 208) = 0;
      *(unsigned char *)(v61 + 218) = 0;
      *(_WORD *)(v61 + 216) = 1;
      swift_retain();
      swift_release();
      uint64_t v28 = ReflowLayoutManager.spacingAdjustment.modify();
      if (*(void *)v27)
      {
        *(void *)(v27 + 48) = *(void *)(v26 + 120);
        *(unsigned char *)(v27 + 56) = 0;
      }
      ((void (*)(void *, void))v28)(v0 + 15, 0);
      swift_release();
    }
  }
  swift_release();
LABEL_25:
  uint64_t v29 = MEMORY[0x263F8EE78];
  if (v60)
  {
    long long v30 = (unsigned __int8 *)v0[46];
    uint64_t v31 = v0[43];
    uint64_t v32 = v0[33];
    uint64_t v72 = MEMORY[0x263F8EE78];
    int64_t v33 = v60;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60, 0);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
    v31 += 16;
    uint64_t v35 = v32 + ((*(unsigned __int8 *)(v31 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 64));
    uint64_t v65 = *(void *)(v31 + 56);
    id v67 = v34;
    uint64_t v69 = v30;
    uint64_t v63 = (void (**)(uint64_t, uint64_t))(v31 - 8);
    uint64_t v29 = v72;
    do
    {
      uint64_t v36 = v0[44];
      uint64_t v37 = v0[42];
      v67(v36, v35, v37);
      Class v38 = PKStroke._bridgeToObjectiveC()().super.isa;
      id v39 = [(objc_class *)v38 _strokeUUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      WeakRef.init(id:)();
      (*v63)(v36, v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1);
        uint64_t v29 = v72;
      }
      unint64_t v41 = *(void *)(v29 + 16);
      unint64_t v40 = *(void *)(v29 + 24);
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        uint64_t v29 = v72;
      }
      uint64_t v42 = v0[47];
      uint64_t v43 = v0[45];
      *(void *)(v29 + 16) = v41 + 1;
      (*((void (**)(unint64_t, uint64_t, uint64_t))v69 + 4))(v29 + ((v69[80] + 32) & ~(unint64_t)v69[80]) + *((void *)v69 + 9) * v41, v42, v43);
      v35 += v65;
      --v33;
    }
    while (v33);
  }
  uint64_t v44 = v0[36];
  id v70 = (id)v0[37];
  unint64_t v45 = v0[35];
  uint64_t v46 = (unint64_t *)specialized Set.init<A>(_:)(v29);
  swift_bridgeObjectRelease();
  uint64_t v47 = ReflowLayoutManager.copy()();
  ReflowLayoutManager.replaceStrokes(_:with:)(v46, v45);
  id v49 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(unsigned char *)(v47 + 219) = 0;
  swift_beginAccess();
  v50._rawValue = *(void **)(v47 + 80);
  swift_beginAccess();
  v51._rawValue = *(void **)(v47 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ReflowLayoutManager.layoutText(contents:lines:)(v50, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v52 = ReflowLayoutManager.strokeTransforms()();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5095_s8PaperKit21HandwritingReflowViewC19transformsReplacing_4with11animatingTo13reflowTextboxSay06d3B08f39VGShy9Coherence7WeakRefVyAL10CRRegistery18AL14SharedTagged_2y25AA0T6StrokeVGGGG_SayAA0D7B25CGAkA0d4TextE0CtFA2JXEfU_SDy9Coherence0X0VyAM10CRRegisterVyAM14SharedTagged_2Vy0iE012TaggedStrokeVGGGSo17CGAffineTransformVGTf1cn_nTf4ng_n(v44, v52);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  Class v53 = Array._bridgeToObjectiveC()().super.isa;
  v0[52] = v53;
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  v0[53] = v54;
  swift_bridgeObjectRelease();
  PKDrawing._bridgeToObjectiveC()(v55);
  uint64_t v57 = v56;
  v0[54] = v56;
  v0[2] = v0;
  v0[3] = closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:);
  uint64_t v58 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
  v0[13] = &block_descriptor_128;
  v0[14] = v58;
  objc_msgSend(v70, sel_setupRefineAnimationFrom_to_inDrawing_completionHandler_, v53, v54, v57);
  uint64_t v24 = (uint64_t)(v0 + 2);
  return MEMORY[0x270FA23F0](v24);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 408);
  uint64_t v2 = *(void *)(*(void *)v0 + 400);
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 424);
  uint64_t v2 = *(void **)(v0 + 432);
  int64_t v3 = *(void **)(v0 + 296);

  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 440) = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = 0x3FE0000000000000;
  uint64_t v5 = v3;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:);
  uint64_t v7 = *(void *)(v0 + 320);
  return ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(v7, (uint64_t)partial apply for closure #3 in closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 408);
  int64_t v3 = *(void *)(v1 + 400);
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), v3, v2);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = (void *)v0[37];
  uint64_t v2 = swift_allocObject();
  v0[57] = v2;
  *(void *)(v2 + 16) = v1;
  int64_t v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[58] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:);
  uint64_t v5 = v0[40];
  uint64_t v6 = v0[35];
  uint64_t v7 = v0[32];
  uint64_t v8 = v0[33];
  return HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:)(v8, v6, v7, v5, 0, (uint64_t)partial apply for closure #4 in closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), v2, 0.5);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 408);
  int64_t v3 = *(void *)(v1 + 400);
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for PKDrawing();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  double v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)MEMORY[0x210550400](&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v13);
  if (v16)
  {
    unint64_t v17 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v16) + 0x320);
    id v34 = v16;
    uint64_t v18 = v17();
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      uint64_t v20 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v15, 1, 1, v20);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v8);
      type metadata accessor for MainActor();
      swift_bridgeObjectRetain();
      id v33 = v4;
      id v32 = a2;
      id v31 = v19;
      uint64_t v21 = a1;
      id v22 = v34;
      uint64_t v23 = static MainActor.shared.getter();
      unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      unint64_t v25 = (v10 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v26 = (char *)swift_allocObject();
      uint64_t v27 = MEMORY[0x263F8F500];
      *((void *)v26 + 2) = v23;
      *((void *)v26 + 3) = v27;
      id v28 = v33;
      *((void *)v26 + 4) = v21;
      *((void *)v26 + 5) = v28;
      uint64_t v29 = v31;
      *((void *)v26 + 6) = v32;
      *((void *)v26 + 7) = v29;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v26[v24], v11, v8);
      *(void *)&v26[v25] = v22;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:), (uint64_t)v26);

      swift_release();
    }
    else
    {
      id v30 = v34;
    }
  }
}

uint64_t closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[26] = a8;
  v8[27] = v13;
  v8[24] = a6;
  v8[25] = a7;
  v8[22] = a4;
  v8[23] = a5;
  type metadata accessor for MainActor();
  v8[28] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[29] = v10;
  v8[30] = v9;
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:), v10, v9);
}

uint64_t closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)()
{
  unint64_t v1 = v0[22];
  uint64_t v24 = MEMORY[0x263F8EE78];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = v3;
    if (v3) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v3 = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_14;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return MEMORY[0x270FA23F0](v3);
  }
  uint64_t v4 = 0;
  uint64_t v5 = MEMORY[0x263F8EE78];
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      MEMORY[0x21054E050](v4, v0[22]);
    }
    else {
      swift_retain();
    }
    type metadata accessor for ReflowWord();
    uint64_t v8 = swift_dynamicCastClass();
    if (v8)
    {
      id v6 = objc_msgSend(*(id *)(v8 + 280), sel_strokes);
      type metadata accessor for PKStroke();
      uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v7 = v5;
    }
    swift_release();
    ++v4;
    specialized Array.append<A>(contentsOf:)(v7);
  }
  while (v2 != v4);
  swift_bridgeObjectRelease();
  uint64_t v9 = v24;
LABEL_15:
  v0[31] = v9;
  unint64_t v10 = v0[22];
  uint64_t v11 = ReflowLayoutManager.copy()();
  ReflowLayoutManager.replaceStrokes(_:with:)(MEMORY[0x263F8EE88], v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(unsigned char *)(v11 + 219) = 0;
  swift_beginAccess();
  v14._rawValue = *(void **)(v11 + 80);
  swift_beginAccess();
  v15._rawValue = *(void **)(v11 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ReflowLayoutManager.layoutText(contents:lines:)(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = ReflowLayoutManager.strokeTransforms()();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5095_s8PaperKit21HandwritingReflowViewC19transformsReplacing_4with11animatingTo13reflowTextboxSay06d3B08f39VGShy9Coherence7WeakRefVyAL10CRRegistery18AL14SharedTagged_2y25AA0T6StrokeVGGGG_SayAA0D7B25CGAkA0d4TextE0CtFA2JXEfU_SDy9Coherence0X0VyAM10CRRegisterVyAM14SharedTagged_2Vy0iE012TaggedStrokeVGGGSo17CGAffineTransformVGTf1cn_nTf4ng_n(v9, v16);
  swift_release();
  swift_bridgeObjectRelease();
  if (one-time initialization token for handwritingReflowPasteAnimationDuration != -1) {
    swift_once();
  }
  unint64_t v17 = (void *)v0[25];
  v0[32] = static UIConstants.handwritingReflowPasteAnimationDuration;
  type metadata accessor for PKStroke();
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  v0[33] = isa;
  swift_bridgeObjectRelease();
  PKDrawing._bridgeToObjectiveC()(v19);
  uint64_t v21 = v20;
  v0[34] = v20;
  v0[2] = v0;
  v0[3] = closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:);
  uint64_t v22 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
  v0[13] = &block_descriptor_171;
  v0[14] = v22;
  objc_msgSend(v17, sel_setupStrokeInAnimationTo_inDrawing_completionHandler_, isa, v21, v0 + 10);
  uint64_t v3 = (uint64_t)(v0 + 2);
  return MEMORY[0x270FA23F0](v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  unint64_t v1 = *(void *)(*(void *)v0 + 240);
  uint64_t v2 = *(void *)(*(void *)v0 + 232);
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  unint64_t v1 = *(void **)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = *(void **)(v0 + 200);

  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 280) = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = v3;
  id v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v6;
  *id v6 = v0;
  v6[1] = closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:);
  uint64_t v7 = *(void *)(v0 + 216);
  return ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(v7, (uint64_t)partial apply for closure #2 in closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:), v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  unint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 240);
  uint64_t v3 = *(void *)(v1 + 232);
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:), v3, v2);
}

{
  double *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  unint64_t v1 = (void *)*((void *)v0 + 25);
  uint64_t v2 = swift_allocObject();
  *((void *)v0 + 37) = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *((void *)v0 + 38) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:);
  uint64_t v5 = v0[32];
  id v6 = *((void *)v0 + 31);
  uint64_t v7 = *((void *)v0 + 27);
  uint64_t v8 = *((void *)v0 + 24);
  uint64_t v9 = *((void *)v0 + 22);
  return HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:)(v6, v9, v8, v7, 0, (uint64_t)partial apply for closure #3 in closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:), v2, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  unint64_t v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 240);
  uint64_t v3 = *(void *)(v1 + 232);
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:), v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void one-time initialization function for autoCloseAfterScratchToDelete()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  unint64_t v1 = (void *)MEMORY[0x21054D080](0xD00000000000002ELL, 0x800000020C85DD30);
  unsigned __int8 v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  static HandwritingReflowView.autoCloseAfterScratchToDelete = v2;
}

uint64_t closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v53 = a8;
  uint64_t v52 = a7;
  uint64_t v51 = a6;
  uint64_t v50 = a5;
  uint64_t v49 = a4;
  uint64_t v54 = a1;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = (int *)type metadata accessor for MagicPaperUsageReflowEvent();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v55 = a2;
  uint64_t v20 = *(void *)&a2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
  swift_beginAccess();
  unint64_t v21 = *(void *)(v20 + 80);
  if (v21 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain_n();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    if (v22) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease_n();
    goto LABEL_20;
  }
  uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v22) {
    goto LABEL_19;
  }
LABEL_3:
  id v48 = v16;
  uint64_t v23 = 4;
  while (1)
  {
    uint64_t v24 = v23 - 4;
    if ((v21 & 0xC000000000000001) != 0)
    {
      uint64_t v25 = MEMORY[0x21054E050](v23 - 4, v21);
      uint64_t v16 = (char *)(v23 - 3);
      if (__OFADD__(v24, 1)) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v25 = *(void *)(v21 + 8 * v23);
      swift_retain();
      uint64_t v16 = (char *)(v23 - 3);
      if (__OFADD__(v24, 1))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    type metadata accessor for ReflowWord();
    if (swift_dynamicCastClass()) {
      break;
    }
    swift_release();
LABEL_5:
    ++v23;
    if (v16 == (char *)v22) {
      goto LABEL_19;
    }
  }
  BOOL v26 = CGRectEqualToRect(*(CGRect *)(v25 + 16), *(CGRect *)(v25 + 48));
  swift_release();
  if (v26) {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for $currentAnalyticsEvents != -1) {
    swift_once();
  }
  TaskLocal.get()();
  uint64_t v27 = *(void *)(v56 + 16);
  if (v27)
  {
    uint64_t v28 = v56 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of FindResult(v28, (uint64_t)v60);
      outlined init with copy of FindResult((uint64_t)v60, (uint64_t)v59);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnalyticsEvent);
      if (swift_dynamicCast()) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
      v28 += 40;
      if (!--v27) {
        goto LABEL_19;
      }
    }
    outlined destroy of MagicPaperUsageScratchToDeleteEvent((uint64_t)&v56);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    uint64_t v36 = swift_bridgeObjectRelease_n();
    uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a3) + 0x320))(v36);
    uint64_t v38 = (uint64_t)v48;
    Date.init()();
    uint64_t v39 = type metadata accessor for Date();
    unint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56);
    v40(v38, 0, 1, v39);
    *uint64_t v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = 0;
    *((_DWORD *)v19 + 6) = 0;
    uint64_t v41 = (uint64_t)&v19[v17[7]];
    v40(v41, 1, 1, v39);
    *(void *)&v19[v17[9]] = 0;
    *(void *)&v19[v17[10]] = 0;
    *(void *)&v19[v17[11]] = 0;
    *(void *)&v19[v17[12]] = 0;
    *(void *)&v19[v17[13]] = 0;
    *(void *)&v19[v17[14]] = 0;
    v19[v17[15]] = 0;
    v19[v17[16]] = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    v19[v17[8]] = 1;
    id v42 = v55;
    outlined assign with take of Date?(v38, v41);
    swift_unknownObjectWeakAssign();

    swift_unknownObjectWeakAssign();
    uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v45 = v43[2];
    unint64_t v44 = v43[3];
    if (v45 >= v44 >> 1) {
      uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v43);
    }
    uint64_t v57 = v17;
    uint64_t v58 = _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0(&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent and conformance MagicPaperUsageReflowEvent, (void (*)(uint64_t))type metadata accessor for MagicPaperUsageReflowEvent);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v56);
    outlined init with copy of MagicPaperUsageReflowEvent((uint64_t)v19, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageReflowEvent);
    _OWORD v43[2] = v45 + 1;
    outlined init with take of FindResult(&v56, (uint64_t)&v43[5 * v45 + 4]);
    outlined destroy of MagicPaperUsageReflowEvent((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageReflowEvent);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_20:
  if (one-time initialization token for $currentAnalyticsEvents != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  TaskLocal.get()();
  uint64_t v29 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v29);
  v60[0] = v56;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnalyticsEvent]);
  uint64_t v30 = swift_task_localValuePush();
  v31.n128_f64[0] = MEMORY[0x270FA5388](v30);
  uint64_t v32 = (uint64_t)v55;
  *(&v47 - 12) = v49;
  *(&v47 - 11) = v32;
  uint64_t v33 = v50;
  *(&v47 - 10) = (uint64_t)a3;
  *(&v47 - 9) = v33;
  uint64_t v34 = v52;
  *(&v47 - 8) = v51;
  *(&v47 - 7) = v34;
  *(&v47 - 6) = v53;
  *((unsigned char *)&v47 - 40) = a9 & 1;
  *((unsigned char *)&v47 - 39) = a10 & 1;
  *(&v47 - 4) = a11;
  *(&v47 - 3) = a12;
  *(&v47 - 2) = v54;
  (*(void (**)(uint64_t, void, uint64_t (*)(), __n128))((*MEMORY[0x263F8EED0] & *a3) + 0x478))(1, 0, partial apply for closure #1 in closure #2 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:), v31);
  swift_task_localValuePop();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t closure #1 in closure #2 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v16 = a11;
  uint64_t v39 = a12;
  uint64_t v41 = a10;
  int v34 = a9;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v17 = *(void *)(v40 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  double v19 = MEMORY[0x270FA5388](v40);
  uint64_t v20 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x210550400](a1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v19);
  uint64_t v22 = (void *)MEMORY[0x263F8EED0];
  if (v21)
  {
    uint64_t v23 = (void *)v21;
    uint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v25 = Array<A>.strokeRefs.getter(v24);
    uint64_t v33 = a11;
    uint64_t v26 = v25;
    uint64_t v20 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v22 = (void *)MEMORY[0x263F8EED0];
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t, uint64_t, void))((*v22 & *v23) + 0x4A8))(MEMORY[0x263F8EE88], v26, 6, 0);
    uint64_t v16 = v33;
    swift_bridgeObjectRelease();
  }
  *(void *)&a2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_nonReflowableStrokesToRemove] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))((*v22 & *a3) + 0x4C8))(v35, *(void *)&a2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))((*v22 & *a3) + 0x4A8))(v36, v37, v38, a8 & 1);
  uint64_t v27 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v39, v40);
  unint64_t v28 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v29 = swift_allocObject();
  uint64_t v30 = v41;
  *(void *)(v29 + 16) = v41;
  *(void *)(v29 + 24) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v29 + v28, v20, v27);
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v30);
  HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(a2, v34 & 1, (uint64_t)partial apply for closure #1 in closure #1 in closure #2 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:), v29);
  return swift_release();
}

uint64_t Array<A>.strokeRefs.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v28 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for PKStroke();
  uint64_t v4 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  id v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v7 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v29 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v12 = v4 + 16;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v24 = *(void *)(v12 + 56);
    uint64_t v25 = v13;
    v22[2] = v7 + 32;
    uint64_t v23 = (void (**)(char *, uint64_t))(v12 - 8);
    v22[1] = v12;
    uint64_t v15 = v27;
    do
    {
      v25(v6, v14, v15);
      isCGFloat a = PKStroke._bridgeToObjectiveC()().super.isa;
      id v17 = [(objc_class *)isa _strokeUUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      WeakRef.init(id:)();
      (*v23)(v6, v15);
      uint64_t v11 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v29;
      }
      unint64_t v19 = *(void *)(v11 + 16);
      unint64_t v18 = *(void *)(v11 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v11 = v29;
      }
      *(void *)(v11 + 16) = v19 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v19, v9, v26);
      v14 += v24;
      --v10;
    }
    while (v10);
  }
  uint64_t v20 = specialized Set.init<A>(_:)(v11);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t closure #1 in closure #1 in closure #2 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(void (*a1)(void))
{
  if (a1) {
    a1();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return CheckedContinuation.resume(returning:)();
}

BOOL HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v42 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v50 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for PKStroke();
  uint64_t v12 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v15 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  id v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = MEMORY[0x263F8EE78];
  if (v18)
  {
    uint64_t v38 = a3;
    uint64_t v39 = v9;
    uint64_t v40 = a2;
    uint64_t v51 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v20 = v12 + 16;
    uint64_t v22 = a1 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
    uint64_t v45 = *(void *)(v20 + 56);
    uint64_t v46 = v21;
    uint64_t v43 = v15 + 32;
    unint64_t v44 = (void (**)(char *, uint64_t))(v20 - 8);
    uint64_t v47 = v20;
    uint64_t v23 = v49;
    do
    {
      v46(v14, v22, v23);
      isCGFloat a = PKStroke._bridgeToObjectiveC()().super.isa;
      id v25 = [(objc_class *)isa _strokeUUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      WeakRef.init(id:)();
      (*v44)(v14, v23);
      uint64_t v19 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
        uint64_t v19 = v51;
      }
      unint64_t v27 = *(void *)(v19 + 16);
      unint64_t v26 = *(void *)(v19 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        uint64_t v19 = v51;
      }
      *(void *)(v19 + 16) = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v19+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v27, v17, v48);
      v22 += v45;
      --v18;
    }
    while (v18);
    uint64_t v9 = v39;
    a2 = v40;
    a3 = v38;
  }
  uint64_t v28 = specialized Set.init<A>(_:)(v19);
  swift_bridgeObjectRelease();
  BOOL v29 = ReflowLayoutManager.canReplaceStrokesAtomically(_:)(v28);
  if (v29)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v9, 1, 1, v30);
    type metadata accessor for MainActor();
    id v31 = v41;
    id v32 = a3;
    id v33 = v42;
    swift_bridgeObjectRetain();
    uint64_t v34 = static MainActor.shared.getter();
    uint64_t v35 = (void *)swift_allocObject();
    uint64_t v36 = MEMORY[0x263F8F500];
    v35[2] = v34;
    v35[3] = v36;
    v35[4] = v31;
    v35[5] = v32;
    v35[6] = v33;
    void v35[7] = a2;
    v35[8] = v28;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:), (uint64_t)v35);
    swift_release();
  }
  return !v29;
}

uint64_t closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v8[7] = type metadata accessor for MainActor();
  _OWORD v8[8] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[9] = v10;
  v8[10] = v9;
  return MEMORY[0x270FA2498](closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:), v10, v9);
}

uint64_t closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:)()
{
  swift_bridgeObjectRetain();
  v0[11] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[12] = v2;
  v0[13] = v1;
  return MEMORY[0x270FA2498](closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  long long v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v10 = *(_OWORD *)(v0 + 24);
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 112) = v4;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 120) = v5;
  *(_OWORD *)(v5 + 16) = v10;
  *(void *)(v5 + 32) = v3;
  *(void *)(v5 + 40) = v2;
  *(void *)(v5 + 48) = MEMORY[0x263F8EE88];
  *(void *)(v5 + 56) = v1;
  *(void *)(v5 + 64) = 6;
  *(_WORD *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = 0;
  id v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v6;
  *id v6 = v0;
  uint64_t v7 = MEMORY[0x263F8EE60];
  v6[1] = closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:);
  uint64_t v8 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA2318](v6, v4, v8, 0xD000000000000049, 0x800000020C85DCE0, partial apply for closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:), v5, v7 + 8);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return MEMORY[0x270FA2498](closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  return MEMORY[0x270FA2498](closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:), v1, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, double a8)
{
  *(void *)(v9 + 184) = a7;
  *(void *)(v9 + 192) = v8;
  *(void *)(v9 + 176) = a6;
  *(unsigned char *)(v9 + 472) = a5;
  *(double *)(v9 + 168) = a8;
  *(void *)(v9 + 152) = a3;
  *(void *)(v9 + 160) = a4;
  *(void *)(v9 + 136) = a1;
  *(void *)(v9 + 144) = a2;
  type metadata accessor for UUID();
  *(void *)(v9 + 200) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for PKStroke();
  *(void *)(v9 + 208) = v10;
  *(void *)(v9 + 216) = *(void *)(v10 - 8);
  *(void *)(v9 + 224) = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  *(void *)(v9 + 232) = v11;
  *(void *)(v9 + 240) = *(void *)(v11 - 8);
  *(void *)(v9 + 248) = swift_task_alloc();
  *(void *)(v9 + 256) = type metadata accessor for MainActor();
  *(void *)(v9 + 264) = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 272) = v13;
  *(void *)(v9 + 280) = v12;
  return MEMORY[0x270FA2498](HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:), v13, v12);
}

uint64_t HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:)()
{
  uint64_t v1 = v0;
  unint64_t v2 = *(void *)(v0 + 144);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 288) = v3;
    if (v3)
    {
LABEL_8:
      unint64_t v71 = v2;
      uint64_t v72 = v3;
      uint64_t v6 = *(void *)(v1 + 136);
      uint64_t v7 = *(void *)(*(void *)(v1 + 152) + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
      *(void *)(v1 + 296) = v7;
      *(unsigned char *)(v7 + 219) = 0;
      swift_beginAccess();
      v8._rawValue = *(void **)(v7 + 80);
      swift_beginAccess();
      v9._rawValue = *(void **)(v7 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ReflowLayoutManager.layoutText(contents:lines:)(v8, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v10 = *(void *)(v6 + 16);
      uint64_t v11 = MEMORY[0x263F8EE78];
      if (v10)
      {
        uint64_t v12 = *(void *)(v1 + 240);
        uint64_t v13 = *(void *)(v1 + 216);
        uint64_t v14 = *(void *)(v1 + 136);
        uint64_t v78 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
        uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
        v13 += 16;
        uint64_t v16 = v14 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
        uint64_t v74 = *(void *)(v13 + 56);
        long long v75 = v15;
        uint64_t v77 = v12;
        uint64_t v73 = (void (**)(uint64_t, uint64_t))(v13 - 8);
        uint64_t v11 = v78;
        do
        {
          uint64_t v17 = *(void *)(v1 + 224);
          uint64_t v18 = *(void *)(v1 + 208);
          uint64_t v19 = v1;
          v75(v17, v16, v18);
          isCGFloat a = PKStroke._bridgeToObjectiveC()().super.isa;
          id v21 = [(objc_class *)isa _strokeUUID];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
          lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
          WeakRef.init(id:)();
          (*v73)(v17, v18);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
            uint64_t v11 = v78;
          }
          unint64_t v23 = *(void *)(v11 + 16);
          unint64_t v22 = *(void *)(v11 + 24);
          uint64_t v1 = v19;
          if (v23 >= v22 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
            uint64_t v11 = v78;
          }
          uint64_t v24 = *(void *)(v19 + 248);
          uint64_t v25 = *(void *)(v19 + 232);
          *(void *)(v11 + 16) = v23 + 1;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v77 + 32))(v11+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(void *)(v77 + 72) * v23, v24, v25);
          v16 += v74;
          --v10;
        }
        while (v10);
      }
      unint64_t v26 = *(void *)(v1 + 144);
      unint64_t v27 = (unint64_t *)specialized Set.init<A>(_:)(v11);
      swift_bridgeObjectRelease();
      uint64_t v28 = ReflowLayoutManager.replaceStrokes(_:with:)(v27, v26);
      unint64_t v30 = v29;
      *(void *)(v1 + 304) = v28;
      *(void *)(v1 + 312) = v31;
      uint64_t v76 = v31;
      if (v29 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v32 = v33;
        if (!v33) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v32 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v33 = swift_bridgeObjectRetain();
        if (!v32) {
          goto LABEL_24;
        }
      }
      if (v32 < 1)
      {
        __break(1u);
        goto LABEL_61;
      }
      uint64_t v36 = 0;
      do
      {
        if ((v30 & 0xC000000000000001) != 0)
        {
          uint64_t v37 = MEMORY[0x21054E050](v36, v30);
        }
        else
        {
          uint64_t v37 = *(void *)(v30 + 8 * v36 + 32);
          swift_retain();
        }
        ++v36;
        uint64_t v38 = (void *)(*(uint64_t (**)(void))(*(void *)v37 + 304))();
        objc_msgSend(v38, sel_removeFromSuperlayer);

        swift_release();
      }
      while (v32 != v36);
LABEL_24:
      int v39 = *(unsigned __int8 *)(v1 + 472);
      uint64_t v33 = swift_bridgeObjectRelease();
      if (v72 && v39)
      {
        if (v72 < 1)
        {
LABEL_62:
          __break(1u);
          return MEMORY[0x270FA2498](v33, v34, v35);
        }
        uint64_t v40 = v1;
        uint64_t v41 = *(void *)(v1 + 144) + 32;
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v72; ++i)
        {
          if ((v71 & 0xC000000000000001) != 0)
          {
            uint64_t v43 = MEMORY[0x21054E050](i, *(void *)(v40 + 144));
          }
          else
          {
            uint64_t v43 = *(void *)(v41 + 8 * i);
            swift_retain();
          }
          uint64_t v44 = (*(uint64_t (**)(void))(*(void *)v43 + 304))();
          if (v44)
          {
            uint64_t v45 = (void *)v44;
            id v46 = objc_msgSend(*(id *)(v40 + 152), sel_layer);
            objc_msgSend(v46, sel_addSublayer_, v45);

            if (one-time initialization token for showDebugUI != -1) {
              swift_once();
            }
            if (static ReflowTextView.showDebugUI == 1) {
              objc_msgSend(v45, sel_setBorderWidth_, 1.0);
            }
          }
          swift_release();
        }
        uint64_t v1 = v40;
        uint64_t v33 = swift_bridgeObjectRelease();
      }
      if (!v32)
      {
        uint64_t v48 = 0;
LABEL_53:
        uint64_t v52 = *(void *)(v1 + 192);
        swift_bridgeObjectRelease();
        uint64_t v53 = swift_bridgeObjectRelease();
        if (*(unsigned char *)(v52 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing))
        {
          uint64_t v54 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **(void **)(v1 + 160)) + 0x320))(v53);
          if (v54)
          {
            id v55 = v54;
            id v56 = objc_msgSend(v54, sel_simultaneousDrawingGestureRecognizer);

            if (v56)
            {
              uint64_t v57 = *(void *)(v1 + 192);
              uint64_t v58 = *(char **)(v1 + 152);
              objc_msgSend(v56, sel_locationInView_, v57);
              double v60 = v59;
              double v62 = v61;
              ReflowTextView.caretRect(for:lines:in:)(0, v48, v57);
              HandwritingReflowView.showCaret(_:location:textPosition:linesAffected:caretRect:)(v58, v76, 0, v48, 0, v60, v62, v63, v64, v65, v66);
            }
          }
        }
        uint64_t v67 = *(void *)(v1 + 192);
        uint64_t v68 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace;
        *(void *)(v1 + 320) = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace;
        *(unsigned char *)(v67 + v68) = 0;
        *(void *)(v1 + 328) = static MainActor.shared.getter();
        uint64_t v69 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v35 = v70;
        *(void *)(v1 + 336) = v69;
        *(void *)(v1 + 344) = v70;
        uint64_t v33 = (uint64_t)HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:);
        uint64_t v34 = v69;
        return MEMORY[0x270FA2498](v33, v34, v35);
      }
      if (v32 >= 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        do
        {
          if ((v30 & 0xC000000000000001) != 0) {
            uint64_t v49 = MEMORY[0x21054E050](v47, v30);
          }
          else {
            uint64_t v49 = swift_retain();
          }
          uint64_t v50 = *(void *)(v49 + 120);
          swift_release();
          if (v50 <= v48) {
            uint64_t v51 = v48;
          }
          else {
            uint64_t v51 = v50;
          }
          if (v50 >= 0) {
            uint64_t v48 = v51;
          }
          ++v47;
        }
        while (v32 != v47);
        swift_bridgeObjectRelease();
        goto LABEL_53;
      }
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    *(void *)(v1 + 288) = v3;
    if (v3) {
      goto LABEL_8;
    }
  }
  if (!HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:)(*(void *)(v1 + 136), MEMORY[0x263F8EE78], *(void **)(v1 + 152), *(void **)(v1 + 160)))goto LABEL_8; {
  swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v1 + 8);
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[24];
  unint64_t v2 = static MainActor.shared.getter();
  v0[44] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[45] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[46] = v4;
  *uint64_t v4 = v0;
  v4[1] = HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:);
  uint64_t v5 = MEMORY[0x263F8EE60] + 8;
  uint64_t v6 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA2318](v4, v2, v6, 0x617244664F646E65, 0xEE002928676E6977, partial apply for closure #1 in HandwritingReflowView.endOfDrawing(), v3, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  unint64_t v2 = *(void *)(v1 + 344);
  uint64_t v3 = *(void *)(v1 + 336);
  return MEMORY[0x270FA2498](HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  unint64_t v2 = *(void *)(v0 + 280);
  return MEMORY[0x270FA2498](HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  Swift::Double v8;
  void *v9;
  void *v10;
  Swift::OpaquePointer v11;
  Swift::OpaquePointer v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v1 = v0[24];
  unint64_t v2 = *(unsigned char *)(v1 + v0[40]);
  if (v2)
  {
LABEL_2:
    *((unsigned char *)v0 + 473) = v2;
    v0[53] = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
    v0[54] = v3;
    v0[55] = v4;
    uint64_t v6 = HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:);
    goto LABEL_9;
  }
  if (!v0[36])
  {
    if (one-time initialization token for autoCloseAfterScratchToDelete != -1) {
      swift_once();
    }
    if (static HandwritingReflowView.autoCloseAfterScratchToDelete != 1) {
      goto LABEL_2;
    }
    uint64_t v1 = v0[24];
  }
  uint64_t v7 = v0[37];
  Swift::OpaquePointer v8 = *((double *)v0 + 21);
  Swift::OpaquePointer v9 = (void *)v0[20];
  ReflowTextView.startAnimating(endingIn:smoothstep:)(v8, 1);
  int64_t v10 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v9) + 0x320))();
  objc_msgSend(v10, sel__pauseHoverPreviewForTimeInterval_, v8);

  swift_beginAccess();
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 203) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  swift_release();
  v11._rawValue = *(void **)(v7 + 80);
  v12._rawValue = *(void **)(v7 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ReflowLayoutManager.layoutText(contents:lines:)(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = self;
  uint64_t v14 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  v0[6] = partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
  v0[7] = v15;
  v0[2] = MEMORY[0x263EF8330];
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v0[5] = &block_descriptor_154;
  uint64_t v16 = _Block_copy(v0 + 2);
  uint64_t v17 = v14;
  swift_release();
  objc_msgSend(v13, sel_animateWithDuration_animations_, v16, 0.2);
  _Block_release(v16);
  v0[47] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v5 = v18;
  v0[48] = v3;
  v0[49] = v18;
  uint64_t v6 = HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:);
LABEL_9:
  return MEMORY[0x270FA2498](v6, v3, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[19];
  unint64_t v2 = static MainActor.shared.getter();
  v0[50] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[51] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[52] = v4;
  *uint64_t v4 = v0;
  uint64_t v5 = MEMORY[0x263F8EE60];
  v4[1] = HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:);
  uint64_t v6 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA2318](v4, v2, v6, 0xD000000000000010, 0x800000020C85DCC0, partial apply for closure #1 in ReflowTextView.endOfAnimation(), v3, v5 + 8);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  unint64_t v2 = *(void *)(v1 + 392);
  uint64_t v3 = *(void *)(v1 + 384);
  return MEMORY[0x270FA2498](HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  unint64_t v2 = *(void *)(v0 + 280);
  return MEMORY[0x270FA2498](HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:), v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(unsigned char *)(v0 + 473) = 1;
  *(void *)(v0 + 424) = static MainActor.shared.getter();
  unint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v0 + 432) = v2;
  *(void *)(v0 + 440) = v1;
  return MEMORY[0x270FA2498](HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:), v2, v1);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  long long v14;
  uint64_t v15;

  uint64_t v1 = *(unsigned char *)(v0 + 473);
  unint64_t v2 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v14 = *(_OWORD *)(v0 + 152);
  uint64_t v7 = static MainActor.shared.getter();
  *(void *)(v0 + 448) = v7;
  Swift::OpaquePointer v8 = swift_task_alloc();
  *(void *)(v0 + 456) = v8;
  *(_OWORD *)(v8 + 16) = v14;
  Swift::OpaquePointer v9 = MEMORY[0x263F8EE88];
  *(void *)(v8 + 32) = v3;
  *(void *)(v8 + 40) = v6;
  *(void *)(v8 + 48) = v9;
  *(void *)(v8 + 56) = v2;
  *(void *)(v8 + 64) = 6;
  *(unsigned char *)(v8 + 72) = 0;
  *(unsigned char *)(v8 + 73) = v1;
  *(void *)(v8 + 80) = v5;
  *(void *)(v8 + 88) = v4;
  int64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v10;
  *int64_t v10 = v0;
  uint64_t v11 = MEMORY[0x263F8EE60];
  v10[1] = HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:);
  uint64_t v12 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA2318](v10, v7, v12, 0xD000000000000049, 0x800000020C85DCE0, partial apply for closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:), v8, v11 + 8);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  unint64_t v2 = *(void *)(v1 + 440);
  uint64_t v3 = *(void *)(v1 + 432);
  return MEMORY[0x270FA2498](HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 272);
  unint64_t v2 = *(void *)(v0 + 280);
  return MEMORY[0x270FA2498](HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:), v1, v2);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[39];
  unint64_t v2 = v0[24];
  swift_release();
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  *(void *)(v2 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox) = 0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  uint64_t v5 = v4;
  int v51 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PKDrawing();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v49 - v18;
  uint64_t v20 = MEMORY[0x210550400](&v5[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v17);
  if (v20)
  {
    id v21 = (void *)v20;
    uint64_t v49 = v13;
    uint64_t v50 = a2;
    uint64_t v22 = *(void *)&a4[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    id v23 = (id)swift_beginAccess();
    if (*(void *)(*(void *)(v22 + 88) + 16) == 1)
    {
      id v24 = objc_msgSend(a4, sel_frame);
      uint64_t v25 = (void *)MEMORY[0x263F8EED0];
      unint64_t v26 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v21) + 0x2F8))(v24);
      CGFloat v27 = (*(double (**)(void))((*v25 & *v26) + 0x138))();
      CGFloat v29 = v28;
      CGFloat v31 = v30;
      CGFloat v33 = v32;

      v52.origin.CGFloat x = v27;
      v52.origin.CGFloat y = v29;
      v52.size.CGFloat width = v31;
      v52.size.CGFloat height = v33;
      CGRectGetMaxX(v52);
      objc_msgSend(a4, sel_frame);
      CGRectGetMinX(v53);
      objc_msgSend(a4, sel_frame);
      id v23 = objc_msgSend(a4, sel_setFrame_);
    }
    if (!*(void *)(a1 + 16)
      && (v51 & 1) != 0
      && (uint64_t v34 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v21) + 0x2F8))(v23),
          uint64_t v36 = v35,
          uint64_t ObjectType = swift_getObjectType(),
          uint64_t v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(ObjectType, v36),
          v34,
          v38))
    {
      id v39 = objc_msgSend(v38, sel_drawing);

      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v49;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v19, v15, v12);
      HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)(v50, a4, (uint64_t)v19);

      (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v12);
    }
    else
    {
      uint64_t v41 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v11, 1, 1, v41);
      type metadata accessor for MainActor();
      id v42 = a4;
      uint64_t v43 = v21;
      uint64_t v44 = v5;
      swift_bridgeObjectRetain();
      uint64_t v45 = v50;
      swift_bridgeObjectRetain();
      uint64_t v46 = static MainActor.shared.getter();
      uint64_t v47 = (void *)swift_allocObject();
      uint64_t v48 = MEMORY[0x263F8F500];
      v47[2] = v46;
      v47[3] = v48;
      v47[4] = v42;
      v47[5] = v43;
      v47[6] = v44;
      v47[7] = a1;
      v47[8] = v45;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:), (uint64_t)v47);
      swift_release();
    }
  }
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v8[7] = type metadata accessor for MainActor();
  _OWORD v8[8] = static MainActor.shared.getter();
  uint64_t v10 = (void *)swift_task_alloc();
  v8[9] = v10;
  *uint64_t v10 = v8;
  v10[1] = closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:);
  return ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(a5, 0, 0);
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)()
{
  uint64_t v1 = (void *)*v0;
  unint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[10] = v3;
  *uint64_t v3 = v2;
  v3[1] = closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:);
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[5];
  return HandwritingReflowView.replaceStrokesAfterAddingTextbox(_:with:reflowTextbox:in:duration:showNewElements:hasShownStrokes:)(v7, v4, v6, v5, 1, 0, 0, 0.3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:), v1, v0);
}

Swift::Void __swiftcall HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)(Swift::OpaquePointer _, Swift::OpaquePointer nonReflowableStrokes, Swift::OpaquePointer with, Swift::Bool strokeIn)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  double v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (v13)
  {
    double v32 = v13;
    HandwritingReflowView.accumulateNonReflowableStrokesToRemove(_:nonReflowableStrokes:in:)((uint64_t)_._rawValue, (uint64_t)nonReflowableStrokes._rawValue, (uint64_t)v32);
    HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)((uint64_t)_._rawValue, (uint64_t)with._rawValue, strokeIn, v32);
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v10);
    if (!v15) {
      return;
    }
    uint64_t v16 = v15;
    double v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v15) + 0x2F8))();
    uint64_t v19 = v18;

    uint64_t ObjectType = swift_getObjectType();
    double v32 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(ObjectType, v19);

    if (!v32) {
      return;
    }
    if (*((void *)_._rawValue + 2))
    {
      type metadata accessor for PKStroke();
      PKStroke.renderBounds.getter();
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      uint64_t v25 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v12, 1, 1, v25);
      uint64_t v26 = swift_allocObject();
      swift_unknownObjectWeakInit();
      type metadata accessor for MainActor();
      swift_bridgeObjectRetain();
      swift_retain();
      CGFloat v27 = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v28 = static MainActor.shared.getter();
      uint64_t v29 = swift_allocObject();
      uint64_t v30 = MEMORY[0x263F8F500];
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = v30;
      *(void *)(v29 + 32) = v26;
      *(void *)(v29 + 40) = v22;
      *(void *)(v29 + 48) = v24;
      *(Swift::OpaquePointer *)(v29 + 56) = _;
      *(void *)(v29 + 64) = v27;
      *(Swift::OpaquePointer *)(v29 + 72) = nonReflowableStrokes;
      *(Swift::OpaquePointer *)(v29 + 80) = with;
      *(unsigned char *)(v29 + 88) = strokeIn;
      swift_release();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:), v29);

      swift_release();
      return;
    }
  }
  uint64_t v14 = v32;
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(unsigned char *)(v10 + 192) = v15;
  *(void *)(v10 + 128) = a9;
  *(void *)(v10 + 136) = a10;
  *(void *)(v10 + 112) = a7;
  *(void *)(v10 + 120) = a8;
  *(double *)(v10 + 96) = a1;
  *(double *)(v10 + 104) = a2;
  *(void *)(v10 + 88) = a6;
  type metadata accessor for MainActor();
  *(void *)(v10 + 144) = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v10 + 152) = v12;
  *(void *)(v10 + 160) = v11;
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:), v12, v11);
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)()
{
  uint64_t v1 = *((void *)v0 + 11) + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  *((void *)v0 + 21) = v2;
  if (v2)
  {
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:)
                                                                   + async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:));
    uint64_t v3 = (void *)swift_task_alloc();
    *((void *)v0 + 22) = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:);
    uint64_t v5 = *((void *)v0 + 14);
    uint64_t v4 = *((void *)v0 + 15);
    double v6 = v0[12];
    double v7 = v0[13];
    return v10(v5, v4, v6, v7);
  }
  else
  {
    swift_release();
    uint64_t v9 = (uint64_t (*)(void))*((void *)v0 + 1);
    return v9();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::OpaquePointer v8;
  Swift::OpaquePointer v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  uint64_t v1 = *(void *)(v0 + 184);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(char **)(v0 + 184);
    uint64_t v3 = *(char **)(v0 + 168);
    uint64_t v4 = *(unsigned __int8 *)(v0 + 192);
    uint64_t v5 = *(void *)(v0 + 136);
    double v6 = *(void *)(v0 + 112);
    HandwritingReflowView.accumulateNonReflowableStrokesToRemove(_:nonReflowableStrokes:in:)(v6, *(void *)(v0 + 128), (uint64_t)v2);
    double v7 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    *(unsigned char *)(v7 + 219) = 0;
    swift_beginAccess();
    v8._rawValue = *(void **)(v7 + 80);
    swift_beginAccess();
    v9._rawValue = *(void **)(v7 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ReflowLayoutManager.layoutText(contents:lines:)(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(v6, v5, v4, v2);
  }
  else
  {
    uint64_t v10 = MEMORY[0x210550400](*(void *)(v0 + 168) + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
    uint64_t v2 = *(char **)(v0 + 168);
    if (!v10) {
      goto LABEL_6;
    }
    uint64_t v3 = (char *)v10;
    uint64_t v11 = Array<A>.strokeRefs.getter(*(void *)(v0 + 112));
    (*(void (**)(void, uint64_t, uint64_t, void))((*MEMORY[0x263F8EED0] & *(void *)v3) + 0x4A8))(MEMORY[0x263F8EE88], v11, 6, 0);
    swift_bridgeObjectRelease();
  }

  uint64_t v2 = v3;
LABEL_6:

  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = *(void *)(v2 + 152);
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:), v4, v3);
}

uint64_t HandwritingReflowView.replaceStrokes(_:with:reflowTextbox:animateRefinement:)(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  uint64_t v5 = v4;
  int v70 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v67 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CHReflowableTextToken, PKDrawing));
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (void **)((char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = a3;
  uint64_t v15 = *(void *)&a3[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
  uint64_t v71 = a1;
  uint64_t v72 = v15;
  id v75 = ReflowLayoutManager.textSize(for:)(a1);
  uint64_t v16 = (void *)MEMORY[0x263F8EE78];
  uint64_t v85 = MEMORY[0x263F8EE78];
  uint64_t v86 = MEMORY[0x263F8EE78];
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17)
  {
    uint64_t v69 = v5;
    uint64_t v77 = (char *)v14 + *(int *)(v11 + 48);
    uint64_t v18 = a2 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v76 = *(void *)(v12 + 72);
    uint64_t v68 = a2;
    swift_bridgeObjectRetain();
    uint64_t v74 = v14;
    do
    {
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v18, (uint64_t)v14, &demangling cache variable for type metadata for (CHReflowableTextToken, PKDrawing));
      uint64_t v20 = *v14;
      uint64_t v21 = v77;
      PKDrawing._bridgeToObjectiveC()(v22);
      uint64_t v19 = v23;
      uint64_t v24 = type metadata accessor for PKDrawing();
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v21, v24);
      type metadata accessor for PKDrawingCoherence(0);
      uint64_t v25 = (void *)swift_dynamicCastClass();
      if (v25)
      {
        uint64_t v26 = v25;
        objc_msgSend(v25, sel_set_canvasBounds_, 0.0, 0.0, 0.0, 0.0);
        CGFloat v27 = self;
        id v28 = objc_msgSend(v20, sel_textSize);
        objc_msgSend(v20, sel_bounds);
        id v29 = objc_msgSend(v27, sel_scaledSize_scale_, v28, CGRectGetHeight(v87));

        id v78 = v29;
        objc_msgSend(v29, sel_scaleToMatchSize_, v75);
        CGFloat v31 = v30;
        type metadata accessor for ReflowWord();
        swift_allocObject();
        id v32 = v20;
        uint64_t v79 = v19;
        id v33 = v19;
        ReflowWord.init(reflowableTextToken:drawing:scale:image:)(v32, v26, 0, v31);
        uint64_t v34 = swift_retain();
        MEMORY[0x21054D330](v34);
        if (*(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_allocObject();
        id v35 = v32;
        id v36 = v33;
        ReflowWord.init(reflowableTextToken:drawing:scale:image:)(v35, v26, 0, 1.0);
        uint64_t v37 = swift_retain();
        MEMORY[0x21054D330](v37);
        if (*(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
        swift_release();

        uint64_t v14 = v74;
        uint64_t v19 = v79;
      }

      v18 += v76;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    uint64_t v5 = v69;
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
  }
  double v84 = v16;
  uint64_t v38 = v72;
  swift_beginAccess();
  unint64_t v39 = *(void *)(v38 + 80);
  if (v39 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain_n();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    if (v40) {
      goto LABEL_13;
    }
LABEL_31:
    swift_bridgeObjectRelease_n();
    goto LABEL_32;
  }
  uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v40) {
    goto LABEL_31;
  }
LABEL_13:
  uint64_t v41 = 4;
  while (1)
  {
    uint64_t v42 = v41 - 4;
    if ((v39 & 0xC000000000000001) != 0)
    {
      uint64_t v43 = MEMORY[0x21054E050](v41 - 4, v39);
      uint64_t v44 = v41 - 3;
      if (__OFADD__(v42, 1)) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v43 = *(void *)(v39 + 8 * v41);
      swift_retain();
      uint64_t v44 = v41 - 3;
      if (__OFADD__(v42, 1))
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
    type metadata accessor for ReflowWord();
    if (swift_dynamicCastClass()) {
      break;
    }
    swift_release();
LABEL_15:
    ++v41;
    if (v44 == v40) {
      goto LABEL_31;
    }
  }
  BOOL v45 = CGRectEqualToRect(*(CGRect *)(v43 + 16), *(CGRect *)(v43 + 48));
  swift_release();
  if (v45) {
    goto LABEL_15;
  }
  swift_bridgeObjectRelease_n();
  uint64_t v46 = (void *)MEMORY[0x210550400](v5 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v48 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v46) + 0x320))();
  }
  else
  {
    uint64_t v48 = 0;
  }
  uint64_t v49 = (uint64_t)v67;
  Date.init()();
  uint64_t v50 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 0, 1, v50);
  uint64_t v81 = type metadata accessor for MagicPaperUsageReflowEvent();
  uint64_t v82 = _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0(&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent and conformance MagicPaperUsageReflowEvent, (void (*)(uint64_t))type metadata accessor for MagicPaperUsageReflowEvent);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v80);
  CGRect v52 = v73;
  CGRect v53 = v73;
  MagicPaperUsageReflowEvent.init(invocationPath:in:reflowTextView:startDate:)(4, v48, v52, v49, (uint64_t)boxed_opaque_existential_1);
  uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  double v84 = v54;
  unint64_t v56 = v54[2];
  unint64_t v55 = v54[3];
  if (v56 >= v55 >> 1) {
    double v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v54);
  }
  uint64_t v57 = v81;
  uint64_t v58 = v82;
  uint64_t v59 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v80, v81);
  double v60 = MEMORY[0x270FA5388](v59);
  double v62 = (char *)&v66 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v63 + 16))(v62, v60);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, (uint64_t)v62, (uint64_t *)&v84, v57, v58);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
LABEL_32:
  if (one-time initialization token for $currentAnalyticsEvents != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  TaskLocal.get()();
  uint64_t v64 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v64);
  uint64_t v83 = v80[0];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnalyticsEvent]);
  swift_task_localValuePush();
  closure #1 in HandwritingReflowView.replaceStrokes(_:with:reflowTextbox:animateRefinement:)(v70 & 1, v5, v71, &v86, &v85, v73);
  swift_task_localValuePop();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:reflowTextbox:animateRefinement:)(char a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  uint64_t v44 = a3;
  BOOL v45 = a6;
  uint64_t v11 = type metadata accessor for PKDrawing();
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v43 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v38 - v16;
  if ((a1 & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v18 = (void *)MEMORY[0x210550400](a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v15);
  if (!v18
    || (uint64_t v19 = v18,
        uint64_t v20 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v18) + 0x2F8))(),
        uint64_t v22 = v21,
        v19,
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(ObjectType, v22),
        v20,
        !v24))
  {
LABEL_16:
    uint64_t v35 = *a4;
    if ((unint64_t)*a4 >> 62)
    {
      type metadata accessor for ReflowElement();
      swift_bridgeObjectRetain();
      uint64_t v36 = _bridgeCocoaArray<A>(_:)();
    }
    else
    {
      swift_bridgeObjectRetain_n();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for ReflowElement();
      uint64_t v36 = v35;
    }
    swift_bridgeObjectRelease();
    HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(v44, v36, 0, v45);
    return swift_bridgeObjectRelease();
  }
  id v25 = objc_msgSend(v24, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v17, v13, v43);
  uint64_t v26 = *a4;
  if ((unint64_t)*a4 >> 62)
  {
    type metadata accessor for ReflowElement();
    swift_bridgeObjectRetain();
    uint64_t v41 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for ReflowElement();
    uint64_t v41 = v26;
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = *a5;
  if ((unint64_t)*a5 >> 62)
  {
    type metadata accessor for ReflowElement();
    swift_bridgeObjectRetain();
    uint64_t v40 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for ReflowElement();
    uint64_t v40 = v27;
  }
  swift_bridgeObjectRelease();
  unint64_t v28 = *a4;
  uint64_t v46 = MEMORY[0x263F8EE78];
  if (v28 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v29 = result;
    if (result) {
      goto LABEL_10;
    }
LABEL_24:
    swift_bridgeObjectRelease_n();
    uint64_t v37 = MEMORY[0x263F8EE78];
LABEL_25:
    specialized HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(v44, v41, v45, v44, v37, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v17, v43);
  }
  uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  if (!v29) {
    goto LABEL_24;
  }
LABEL_10:
  uint64_t v38 = a2;
  uint64_t v39 = v6;
  if (v29 >= 1)
  {
    uint64_t v31 = 0;
    do
    {
      if ((v28 & 0xC000000000000001) != 0)
      {
        uint64_t v32 = MEMORY[0x21054E050](v31, v28);
      }
      else
      {
        uint64_t v32 = *(void *)(v28 + 8 * v31 + 32);
        swift_retain();
      }
      ++v31;
      id v33 = objc_msgSend(*(id *)(v32 + 280), sel_strokes, v38, v39, v40, v41);
      type metadata accessor for PKStroke();
      uint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_release();
      specialized Array.append<A>(contentsOf:)(v34);
    }
    while (v29 != v31);
    swift_bridgeObjectRelease_n();
    uint64_t v37 = v46;
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(Swift::OpaquePointer _, Swift::OpaquePointer with, Swift::Bool animateRefinement)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  double v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (v11)
  {
    double v30 = v11;
    HandwritingReflowView.replaceStrokes(_:with:reflowTextbox:animateRefinement:)((uint64_t)_._rawValue, (uint64_t)with._rawValue, v30, animateRefinement);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v8);
    if (!v13) {
      return;
    }
    uint64_t v14 = v13;
    double v15 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x2F8))();
    uint64_t v17 = v16;

    uint64_t ObjectType = swift_getObjectType();
    double v30 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(ObjectType, v17);

    if (!v30) {
      return;
    }
    if (*((void *)_._rawValue + 2))
    {
      type metadata accessor for PKStroke();
      PKStroke.renderBounds.getter();
      uint64_t v20 = v19;
      uint64_t v22 = v21;
      uint64_t v23 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v10, 1, 1, v23);
      uint64_t v24 = swift_allocObject();
      swift_unknownObjectWeakInit();
      type metadata accessor for MainActor();
      swift_bridgeObjectRetain();
      swift_retain();
      id v25 = v30;
      swift_bridgeObjectRetain();
      uint64_t v26 = static MainActor.shared.getter();
      uint64_t v27 = swift_allocObject();
      uint64_t v28 = MEMORY[0x263F8F500];
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = v28;
      *(void *)(v27 + 32) = v24;
      *(void *)(v27 + 40) = v20;
      *(void *)(v27 + 48) = v22;
      *(Swift::OpaquePointer *)(v27 + 56) = _;
      *(void *)(v27 + 64) = v25;
      *(Swift::OpaquePointer *)(v27 + 72) = with;
      *(unsigned char *)(v27 + 80) = animateRefinement;
      swift_release();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:), v27);

      swift_release();
      return;
    }
  }
  uint64_t v12 = v30;
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(unsigned char *)(v10 + 184) = a10;
  *(void *)(v10 + 120) = a8;
  *(void *)(v10 + 128) = a9;
  *(void *)(v10 + 112) = a7;
  *(double *)(v10 + 96) = a1;
  *(double *)(v10 + 104) = a2;
  *(void *)(v10 + 88) = a6;
  type metadata accessor for MainActor();
  *(void *)(v10 + 136) = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v10 + 144) = v12;
  *(void *)(v10 + 152) = v11;
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:), v12, v11);
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)()
{
  uint64_t v1 = *((void *)v0 + 11) + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  *((void *)v0 + 20) = v2;
  if (v2)
  {
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:)
                                                                   + async function pointer to specialized static ReflowTextView.reflowTextView(at:strokes:in:));
    uint64_t v3 = (void *)swift_task_alloc();
    *((void *)v0 + 21) = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:);
    uint64_t v5 = *((void *)v0 + 14);
    uint64_t v4 = *((void *)v0 + 15);
    double v6 = v0[12];
    double v7 = v0[13];
    return v10(v5, v4, v6, v7);
  }
  else
  {
    swift_release();
    uint64_t v9 = (uint64_t (*)(void))*((void *)v0 + 1);
    return v9();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::OpaquePointer v8;
  Swift::OpaquePointer v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 176);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(char **)(v0 + 176);
    uint64_t v3 = *(void **)(v0 + 160);
    uint64_t v4 = *(unsigned __int8 *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 128);
    double v6 = *(void *)(v0 + 112);
    double v7 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    swift_beginAccess();
    v8._rawValue = *(void **)(v7 + 80);
    swift_beginAccess();
    v9._rawValue = *(void **)(v7 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ReflowLayoutManager.layoutText(contents:lines:)(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    HandwritingReflowView.replaceStrokes(_:with:reflowTextbox:animateRefinement:)(v6, v5, v2, v4);
  }
  else
  {
    uint64_t v3 = *(void **)(v0 + 160);
  }

  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(void *)(v2 + 144);
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:), v4, v3);
}

uint64_t HandwritingReflowView.accumulateNonReflowableStrokesToRemove(_:nonReflowableStrokes:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PKDrawing();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v43 = a2;
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = Array<A>.strokeRefs.getter(v17);
  swift_bridgeObjectRelease();
  uint64_t v19 = Array<A>.strokeRefs.getter(a1);
  uint64_t v20 = specialized _NativeSet.intersection(_:)(v19, v18, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
  swift_bridgeObjectRelease();
  uint64_t v21 = Array<A>.strokeRefs.getter(a1);
  if (*(void *)(v20 + 16) <= *(void *)(v21 + 16) >> 3)
  {
    uint64_t v42 = (char *)v21;
    specialized Set._subtract<A>(_:)(v20);
    swift_release();
    uint64_t v22 = (uint64_t)v42;
  }
  else
  {
    uint64_t v22 = specialized _NativeSet.subtracting<A>(_:)(v20, v21);
    swift_release();
  }
  uint64_t v23 = (void *)MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (!v23) {
    goto LABEL_8;
  }
  uint64_t v24 = v23;
  id v25 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v23) + 0x2F8))();
  uint64_t v27 = v26;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 16))(ObjectType, v27);

  if (!v29) {
    goto LABEL_8;
  }
  id v30 = objc_msgSend(v29, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v13, v10);
  type metadata accessor for PKDrawingCoherence(0);
  if (swift_dynamicCast())
  {
    uint64_t v31 = v42;
    uint64_t v32 = &v42[OBJC_IVAR___PKDrawingCoherence_model];
    swift_beginAccess();
    uint64_t v34 = v39;
    uint64_t v33 = v40;
    uint64_t v35 = v41;
    uint64_t v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 16))(v39, v32, v41);
    MEMORY[0x270FA5388](v36);
    *(&v39 - 2) = v34;
    swift_bridgeObjectRetain();
    uint64_t v37 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in CanvasMembers.strokeArray(in:), (uint64_t)(&v39 - 4), v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v37);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v43 + 16)) {
    *(void *)(a3 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_nonReflowableStrokesToRemove) = v43;
  }
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall HandwritingReflowView.beginTransform()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  double v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 1;
  uint64_t v6 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  uint64_t v7 = MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v3);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    AnyCanvas.isResizingChanged()();
  }
  HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter((uint64_t)v33);
  uint64_t v9 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace];
  long long v10 = v33[1];
  *(_OWORD *)uint64_t v9 = v33[0];
  *((_OWORD *)v9 + 1) = v10;
  *((_OWORD *)v9 + 2) = v33[2];
  HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter((uint64_t)v34);
  long long v29 = v34[1];
  long long v30 = v34[0];
  CGFloat v11 = v35;
  CGFloat v12 = v36;
  ResizeView.modelToViewTransform.getter((long long *)&v37);
  *(_OWORD *)&t1.CGFloat a = v30;
  *(_OWORD *)&t1.CGFloat c = v29;
  t1.CGFloat tx = v11;
  t1.double ty = v12;
  CGAffineTransform v32 = v37;
  CGAffineTransformConcat(&v31, &t1, &v32);
  long long v13 = *(_OWORD *)&v31.c;
  long long v14 = *(_OWORD *)&v31.tx;
  uint64_t v15 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled];
  *(_OWORD *)uint64_t v15 = *(_OWORD *)&v31.a;
  *((_OWORD *)v15 + 1) = v13;
  *((_OWORD *)v15 + 2) = v14;
  uint64_t v16 = MEMORY[0x210550400](v6);
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter((uint64_t)&t1);
    uint64_t v18 = &v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace];
    long long v19 = *(_OWORD *)&t1.c;
    *(_OWORD *)uint64_t v18 = *(_OWORD *)&t1.a;
    *((_OWORD *)v18 + 1) = v19;
    *((_OWORD *)v18 + 2) = *(_OWORD *)&t1.tx;
    v18[48] = 0;
    unint64_t v20 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle];
    if (v20 < 2 || *(unsigned char *)(v20 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_category) == 1)
    {
      uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
      if (v21)
      {
        char v22 = 1;
LABEL_10:
        *(unsigned char *)(*(void *)(v21 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager) + 219) = v22;
      }
    }
    else
    {
      uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
      if (v21)
      {
        char v22 = 0;
        goto LABEL_10;
      }
    }
    uint64_t v23 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v5, 1, 1, v23);
    type metadata accessor for MainActor();
    uint64_t v24 = v1;
    id v25 = v17;
    uint64_t v26 = static MainActor.shared.getter();
    uint64_t v27 = (void *)swift_allocObject();
    uint64_t v28 = MEMORY[0x263F8F500];
    v27[2] = v26;
    v27[3] = v28;
    v27[4] = v24;
    v27[5] = v25;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.beginTransform(), (uint64_t)v27);

    swift_release();
  }
}

uint64_t closure #1 in HandwritingReflowView.beginTransform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[6] = v7;
  v5[7] = v6;
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.beginTransform(), v7, v6);
}

uint64_t closure #1 in HandwritingReflowView.beginTransform()()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 24) + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  *(void *)(v0 + 64) = v1;
  if (v1)
  {
    v1;
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in HandwritingReflowView.beginTransform();
    uint64_t v3 = *(void *)(v0 + 32);
    return ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(v3, 0, 0);
  }
  else
  {
    swift_release();
    **(unsigned char **)(v0 + 16) = *(void *)(v0 + 64) == 0;
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 64);
  swift_task_dealloc();

  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 48);
  return MEMORY[0x270FA2498](closure #1 in HandwritingReflowView.beginTransform(), v4, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 64) == 0;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall HandwritingReflowView.updateTransform(with:)(CGAffineTransform *with)
{
  long long v2 = *(_OWORD *)&with->a;
  long long v3 = *(_OWORD *)&with->c;
  long long v4 = *(_OWORD *)&with->tx;
  uint64_t v5 = &v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace];
  if (v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace + 48])
  {
    uint64_t v5 = v18;
    long long v13 = *(_OWORD *)&with->c;
    long long v14 = *(_OWORD *)&with->a;
    long long v12 = *(_OWORD *)&with->tx;
    HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter((uint64_t)v18);
    long long v4 = v12;
    long long v3 = v13;
    long long v2 = v14;
    long long v6 = v19;
    long long v7 = v20;
    CGFloat v8 = v21;
  }
  else
  {
    CGFloat v8 = *((double *)v5 + 5);
    long long v7 = *(_OWORD *)(v5 + 24);
    long long v6 = *(_OWORD *)(v5 + 8);
  }
  t1.CGFloat a = *(CGFloat *)v5;
  *(_OWORD *)&t1.CGFloat b = v6;
  *(_OWORD *)&t1.CGFloat d = v7;
  t1.double ty = v8;
  *(_OWORD *)&t2.CGFloat a = v2;
  *(_OWORD *)&t2.CGFloat c = v3;
  *(_OWORD *)&t2.CGFloat tx = v4;
  CGAffineTransformConcat(&v15, &t1, &t2);
  long long v9 = *(_OWORD *)&v15.c;
  long long v10 = *(_OWORD *)&v15.tx;
  CGFloat v11 = &v1[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace];
  *(_OWORD *)CGFloat v11 = *(_OWORD *)&v15.a;
  *((_OWORD *)v11 + 1) = v9;
  *((_OWORD *)v11 + 2) = v10;
  v11[48] = 0;
  objc_msgSend(v1, sel_setNeedsLayout);
}

Swift::Void __swiftcall HandwritingReflowView.endTransform(cancel:)(Swift::Bool cancel)
{
  long long v2 = v1;
  v25[11] = *MEMORY[0x263EF8340];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = (int *)type metadata accessor for MagicPaperUsageReflowEvent();
  MEMORY[0x270FA5388](v6);
  CGFloat v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v9 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle];
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
  outlined consume of ResizeView.ActiveHandle(v9);
  v1[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
  long long v10 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  uint64_t v11 = MEMORY[0x210550400](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v11)
  {
    long long v12 = (void *)v11;
    AnyCanvas.isResizingChanged()();
  }
  objc_msgSend(v2, sel_setNeedsLayout);
  long long v13 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox];
  if (v13)
  {
    long long v14 = (void *)MEMORY[0x210550400](v10);
    if (v14)
    {
      CGAffineTransform v15 = v14;
      uint64_t v16 = (void *)(*(uint64_t (**)(void *))((*MEMORY[0x263F8EED0] & *v14) + 0x320))(v13);
    }
    else
    {
      id v17 = v13;
      uint64_t v16 = 0;
    }
    id v18 = v13;
    Date.init()();
    uint64_t v19 = type metadata accessor for Date();
    long long v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
    v20(v5, 0, 1, v19);
    *CGFloat v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *((_DWORD *)v8 + 6) = 0;
    uint64_t v21 = (uint64_t)&v8[v6[7]];
    v20((char *)v21, 1, 1, v19);
    *(void *)&v8[v6[9]] = 0;
    *(void *)&v8[v6[10]] = 0;
    *(void *)&v8[v6[11]] = 0;
    *(void *)&v8[v6[12]] = 0;
    *(void *)&v8[v6[13]] = 0;
    *(void *)&v8[v6[14]] = 0;
    v8[v6[15]] = 0;
    v8[v6[16]] = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    v8[v6[8]] = 0;
    outlined assign with take of Date?((uint64_t)v5, v21);
    swift_unknownObjectWeakAssign();

    swift_unknownObjectWeakAssign();
    if (one-time initialization token for $currentAnalyticsEvents != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnalyticsEvent>);
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C832C20;
    *(void *)(inited + 56) = v6;
    *(void *)(inited + 64) = _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0(&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent and conformance MagicPaperUsageReflowEvent, (void (*)(uint64_t))type metadata accessor for MagicPaperUsageReflowEvent);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    outlined init with copy of MagicPaperUsageReflowEvent((uint64_t)v8, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageReflowEvent);
    TaskLocal.get()();
    uint64_t v24 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v24);
    v25[0] = v25[1];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnalyticsEvent]);
    swift_task_localValuePush();
    HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(v18, 1, 0, 0);
    swift_task_localValuePop();
    swift_bridgeObjectRelease();

    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnalyticsEvent);
    swift_arrayDestroy();
    outlined destroy of MagicPaperUsageReflowEvent((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageReflowEvent);
  }
}

void __swiftcall HandwritingReflowView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  isCGFloat a = with.value.super.isa;
  CGFloat y = _.y;
  CGFloat x = _.x;
  if ((objc_msgSend(v3, sel_isHidden) & 1) == 0)
  {
    v7.value.super.isCGFloat a = isa;
    ResizeView.hitTestChrome(_:with:)(v8, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v7);
    if (!v9 && (HandwritingReflowView.showRectangularSelection.getter() & 1) != 0)
    {
      if (one-time initialization token for handwritingReflowFrameHitTestOutset != -1) {
        swift_once();
      }
      CGFloat v10 = *(double *)&static UIConstants.handwritingReflowFrameHitTestOutset;
      CGFloat v11 = -*(double *)&static UIConstants.handwritingReflowFrameHitTestOutset;
      long long v12 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView];
      objc_msgSend(v12, sel_frame);
      CGRect v17 = CGRectInset(v16, v11, v11);
      v14.CGFloat x = x;
      v14.CGFloat y = y;
      if (CGRectContainsPoint(v17, v14))
      {
        objc_msgSend(v12, sel_frame);
        CGRect v19 = CGRectInset(v18, v10, v10);
        v15.CGFloat x = x;
        v15.CGFloat y = y;
        if (!CGRectContainsPoint(v19, v15)) {
          long long v13 = v3;
        }
      }
    }
  }
}

Swift::Void __swiftcall HandwritingReflowView.pasteElements(_:)(Swift::OpaquePointer a1)
{
  v23[15] = *MEMORY[0x263EF8340];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = (int *)type metadata accessor for MagicPaperUsageReflowEvent();
  MEMORY[0x270FA5388](v6);
  CGFloat v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v22) {
      return;
    }
  }
  else if (!*(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  uint64_t v9 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (v9)
  {
    uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    swift_beginAccess();
    if (*(void *)(v10 + 160))
    {
      CGFloat v11 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
      v23[0] = v1;
      if (v11)
      {
        long long v12 = v11;
        long long v13 = (void *)(*(uint64_t (**)(char *))((*MEMORY[0x263F8EED0] & *v11) + 0x320))(v9);
      }
      else
      {
        CGPoint v14 = v9;
        long long v13 = 0;
      }
      CGPoint v15 = v9;
      Date.init()();
      uint64_t v16 = type metadata accessor for Date();
      CGRect v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
      v17(v5, 0, 1, v16);
      *CGFloat v8 = 0;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *((_DWORD *)v8 + 6) = 0;
      uint64_t v18 = (uint64_t)&v8[v6[7]];
      v17((char *)v18, 1, 1, v16);
      *(void *)&v8[v6[9]] = 0;
      *(void *)&v8[v6[10]] = 0;
      *(void *)&v8[v6[11]] = 0;
      *(void *)&v8[v6[12]] = 0;
      *(void *)&v8[v6[13]] = 0;
      *(void *)&v8[v6[14]] = 0;
      v8[v6[15]] = 0;
      v8[v6[16]] = 0;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      v8[v6[8]] = 3;
      outlined assign with take of Date?((uint64_t)v5, v18);
      swift_unknownObjectWeakAssign();

      swift_unknownObjectWeakAssign();
      if (one-time initialization token for $currentAnalyticsEvents != -1) {
        swift_once();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnalyticsEvent>);
      initeCGFloat d = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20C832C20;
      *(void *)(inited + 56) = v6;
      *(void *)(inited + 64) = _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0(&lazy protocol witness table cache variable for type MagicPaperUsageReflowEvent and conformance MagicPaperUsageReflowEvent, (void (*)(uint64_t))type metadata accessor for MagicPaperUsageReflowEvent);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      outlined init with copy of MagicPaperUsageReflowEvent((uint64_t)v8, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageReflowEvent);
      TaskLocal.get()();
      uint64_t v21 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v21);
      v23[1] = v23[2];
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnalyticsEvent]);
      swift_task_localValuePush();
      HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)(MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], a1, 1);
      swift_task_localValuePop();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      outlined destroy of MagicPaperUsageReflowEvent((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageReflowEvent);
    }
  }
}

uint64_t closure #1 in static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, PKDrawing *a4@<X8>)
{
  PKDrawing._bridgeToObjectiveC()(a4);
  CGFloat v8 = v7;
  type metadata accessor for PKDrawingCoherence(0);
  uint64_t v9 = (void *)swift_dynamicCastClass();
  if (v9
    && (uint64_t v10 = v9,
        id v11 = objc_msgSend(v9, sel_strokes),
        type metadata accessor for PKStroke(),
        uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v11,
        uint64_t v13 = *(void *)(v12 + 16),
        swift_bridgeObjectRelease(),
        v13))
  {
    CGPoint v14 = self;
    id v15 = objc_msgSend(a2, sel_textSize);
    objc_msgSend(a2, sel_bounds);
    id v16 = objc_msgSend(v14, sel_scaledSize_scale_, v15, CGRectGetHeight(v25));

    objc_msgSend(v16, sel_scaleToMatchSize_, a3);
    CGFloat v18 = v17;
    type metadata accessor for ReflowWord();
    swift_allocObject();
    id v19 = a2;
    id v20 = v8;
    uint64_t v21 = ReflowWord.init(reflowableTextToken:drawing:scale:image:)(v19, v10, 0, v18);
    *(unsigned char *)(v21 + 312) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_NSRange, ReflowWord)>);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_20C832C20;
    *(void *)(v22 + 32) = objc_msgSend(a1, sel_rangeValue);
    *(void *)(v22 + 40) = v23;
    *(void *)(v22 + 48) = v21;

    CGFloat v8 = v16;
  }
  else
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
  }

  return v22;
}

Swift::Void __swiftcall HandwritingReflowView.paste()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v0 - 8);
  double v88 = (char *)&v83 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  double v91 = (uint64_t *)((char *)&v83 - v3);
  uint64_t v95 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v95 - 8);
  MEMORY[0x270FA5388](v95);
  double v90 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = v5;
  MEMORY[0x270FA5388](v6);
  CGRect v96 = (char *)&v83 - v7;
  Date.init()();
  CGFloat v8 = self;
  uint64_t v9 = &selRef_allowsFingerDrawing;
  id v10 = objc_msgSend(v8, sel_generalPasteboard);
  id v11 = objc_msgSend(v10, sel_items);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    double v92 = v8;
    uint64_t v93 = v4;
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    id v15 = (void *)MEMORY[0x263F8EE78];
    long long v97 = xmmword_20C8352B0;
    do
    {
      uint64_t v17 = *(void *)(v12 + 8 * v14 + 32);
      uint64_t v18 = *(void *)(v17 + 16);
      swift_bridgeObjectRetain();
      if (!v18
        || (uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001DLL, 0x800000020C85DCA0),
            (v20 & 1) == 0)
        || (outlined init with copy of Any(*(void *)(v17 + 56) + 32 * v19, (uint64_t)aBlock),
            (swift_dynamicCast() & 1) == 0))
      {
        long long v99 = v97;
      }
      swift_bridgeObjectRelease();
      uint64_t v21 = *((void *)&v99 + 1);
      if (*((void *)&v99 + 1) >> 60 != 15)
      {
        uint64_t v22 = v99;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        }
        unint64_t v24 = v15[2];
        unint64_t v23 = v15[3];
        if (v24 >= v23 >> 1) {
          id v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v15);
        }
        v15[2] = v24 + 1;
        id v16 = &v15[2 * v24];
        v16[4] = v22;
        v16[5] = v21;
      }
      ++v14;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease();
    uint64_t v4 = v93;
    CGFloat v8 = v92;
    uint64_t v9 = &selRef_allowsFingerDrawing;
  }
  else
  {
    id v15 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  if (v15[2])
  {
    uint64_t v25 = v15[4];
    unint64_t v26 = v15[5];
    outlined copy of Data._Representation(v25, v26);
    swift_bridgeObjectRelease();
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReflowEnum]);
    lazy protocol witness table accessor for type [ReflowEnum] and conformance <A> [A]();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v77 = specialized static ReflowEnum.untypeArray(_:)(aBlock[0]);
    swift_bridgeObjectRelease();
    HandwritingReflowView.pasteElements(_:)((Swift::OpaquePointer)v77);
    swift_release();
    outlined consume of Data._Representation(v25, v26);
    swift_bridgeObjectRelease();
LABEL_30:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v96, v95);
    return;
  }
  swift_bridgeObjectRelease();
  id v27 = [v8 v9[505]];
  id v28 = objc_msgSend(v27, sel_string);

  if (!v28) {
    goto LABEL_30;
  }
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;
  uint64_t v32 = v94;
  uint64_t v33 = *(char **)(v94 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (!v33)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v96, v95);

LABEL_33:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v34 = v29;
  uint64_t v35 = v4;
  uint64_t v36 = *(void *)&v33[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
  swift_beginAccess();
  uint64_t v37 = *(void *)(v36 + 160);
  if (!v37)
  {
    id v78 = *(void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v79 = v33;
    v78(v96, v95);

    goto LABEL_33;
  }
  double v38 = *(double *)(v36 + 176);
  double v39 = *(double *)(v36 + 184);
  uint64_t v40 = (void *)MEMORY[0x210550400](v32 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (!v40)
  {
    long long v80 = *(void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v81 = v33;
    swift_retain();
    v80(v96, v95);

    swift_bridgeObjectRelease();
    swift_release();

    return;
  }
  uint64_t v93 = v34;
  uint64_t v41 = (void *)MEMORY[0x263F8EED0];
  uint64_t v42 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v40) + 0x2F8);
  *(void *)&long long v97 = v40;
  uint64_t v43 = (void *)v42();
  uint64_t v44 = *(uint64_t (**)(uint64_t))((*v41 & *v43) + 0x298);
  BOOL v45 = v33;
  uint64_t v46 = swift_retain();
  unint64_t v47 = v44(v46);

  if (!(v47 >> 62))
  {
    if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_24;
    }
LABEL_36:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v96, v95);

    swift_bridgeObjectRelease();
    swift_release();

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v82) {
    goto LABEL_36;
  }
LABEL_24:
  if ((v47 & 0xC000000000000001) != 0)
  {
    id v48 = (id)MEMORY[0x21054E050](0, v47);
  }
  else
  {
    if (!*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v48 = *(id *)(v47 + 32);
  }
  id v85 = v48;
  uint64_t v87 = v31;
  swift_bridgeObjectRelease();
  swift_retain();
  swift_retain();
  uint64_t v49 = v91;
  uint64_t v50 = (void *)ReflowLayoutManager.textSize(for:)(v91, v37);
  uint64_t v83 = v37;
  swift_release();
  swift_release();
  uint64_t v86 = v45;
  objc_msgSend(v45, sel_frame);
  double v52 = v38 + v51;
  double v54 = v39 + v53;
  double v84 = v50;
  objc_msgSend(v50, sel_xHeight);
  double v56 = v55;
  uint64_t v57 = v88;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v49, (uint64_t)v88, &demangling cache variable for type metadata for PKDrawing?);
  uint64_t v58 = type metadata accessor for PKDrawing();
  uint64_t v59 = *(void *)(v58 - 8);
  int v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58);
  double v92 = 0;
  if (v60 != 1)
  {
    PKDrawing._bridgeToObjectiveC()((PKDrawing *)&v100);
    double v92 = v61;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v58);
  }
  double v88 = (char *)objc_msgSend(self, sel_blackColor);
  uint64_t v62 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v63 = v90;
  uint64_t v64 = v95;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v90, v96, v95);
  unint64_t v65 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v66 = (v89 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v67 = (char *)swift_allocObject();
  uint64_t v68 = v87;
  *((void *)v67 + 2) = v93;
  *((void *)v67 + 3) = v68;
  uint64_t v69 = v84;
  int v70 = (void *)v97;
  *((void *)v67 + 4) = v84;
  *((void *)v67 + 5) = v70;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v67[v65], v63, v64);
  *(void *)&v67[v66] = v62;
  aBlock[4] = (uint64_t)partial apply for closure #2 in HandwritingReflowView.paste();
  aBlock[5] = (uint64_t)v67;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [NSValue], @guaranteed [CHReflowableTextToken], @guaranteed [PKDrawing]) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_58;
  uint64_t v71 = _Block_copy(aBlock);
  id v72 = v69;
  id v73 = v70;
  swift_release();
  id v74 = v85;
  id v75 = v92;
  uint64_t v76 = v88;
  objc_msgSend(v85, sel_convertTextToHandwriting_bounds_suggestedHeight_suggestedDrawing_inkColor_completion_, v28, v92, v88, v71, v52, v54, 0.0, 0.0, v56);
  _Block_release(v71);

  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v91, &demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v96, v64);
}

uint64_t closure #2 in HandwritingReflowView.paste()(unint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (uint64_t)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent();
  MEMORY[0x270FA5388](v67);
  uint64_t v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for PKDrawing();
  uint64_t v63 = *(void *)(v62 - 8);
  double v22 = MEMORY[0x270FA5388](v62);
  uint64_t v61 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = a5;
  int v70 = a4;
  unint64_t v24 = (void *)MEMORY[0x21054D080](a4, a5, v22);
  unint64_t v25 = a2;
  uint64_t v71 = a3;
  unint64_t v26 = (unint64_t)specialized static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(v24, a1, a2, a3, a6);

  if (a1 >> 62) {
    goto LABEL_41;
  }
  uint64_t v27 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    id v68 = (id)v26;
    uint64_t v66 = v19;
    unint64_t v65 = a8;
    uint64_t v64 = a7;
    if (v27)
    {
      if (v27 < 1) {
        __break(1u);
      }
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v28 = 0;
        a8 = (void *)MEMORY[0x263F8EE78];
        uint64_t v19 = 1;
        do
        {
          MEMORY[0x21054E050](v28, a1);
          long long v73 = 0uLL;
          char v74 = 1;
          static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)();
          swift_unknownObjectRelease();
          if ((v74 & 1) == 0)
          {
            long long v72 = v73;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              a8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a8[2] + 1, 1, a8);
            }
            unint64_t v26 = a8[2];
            unint64_t v29 = a8[3];
            if (v26 >= v29 >> 1) {
              a8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v26 + 1, 1, a8);
            }
            a8[2] = v26 + 1;
            *(_OWORD *)&a8[2 * v26 + 4] = v72;
          }
          ++v28;
        }
        while (v27 != v28);
      }
      else
      {
        uint64_t v31 = 0;
        a8 = (void *)MEMORY[0x263F8EE78];
        uint64_t v19 = 1;
        do
        {
          uint64_t v32 = *(void **)(a1 + 8 * v31 + 32);
          long long v73 = 0uLL;
          char v74 = 1;
          id v33 = v32;
          static _NSRange._conditionallyBridgeFromObjectiveC(_:result:)();

          if ((v74 & 1) == 0)
          {
            long long v72 = v73;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              a8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a8[2] + 1, 1, a8);
            }
            unint64_t v26 = a8[2];
            unint64_t v34 = a8[3];
            if (v26 >= v34 >> 1) {
              a8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v26 + 1, 1, a8);
            }
            a8[2] = v26 + 1;
            *(_OWORD *)&a8[2 * v26 + 4] = v72;
          }
          ++v31;
        }
        while (v27 != v31);
      }
      swift_bridgeObjectRelease();
      uint64_t v30 = a8[2];
      if (v30)
      {
LABEL_25:
        a7 = 0;
        uint64_t v35 = a8 + 5;
        while (1)
        {
          uint64_t v36 = *v35;
          v35 += 2;
          BOOL v37 = __OFADD__(a7, v36);
          a7 = (void *)((char *)a7 + v36);
          if (v37) {
            break;
          }
          if (!--v30) {
            goto LABEL_28;
          }
        }
        __break(1u);
        goto LABEL_40;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      a8 = (void *)MEMORY[0x263F8EE78];
      uint64_t v30 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (v30) {
        goto LABEL_25;
      }
    }
    a7 = 0;
LABEL_28:
    swift_bridgeObjectRelease();
    uint64_t v38 = v25;
    if (v25 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v39 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v40 = String.count.getter();
    uint64_t v41 = v40 - (void)a7;
    if (__OFSUB__(v40, a7))
    {
      __break(1u);
LABEL_44:
      swift_once();
      goto LABEL_38;
    }
    uint64_t v69 = v39;
    int v70 = v21;
    uint64_t v42 = v71;
    a1 = *(void *)(v71 + 16);
    if (!a1) {
      break;
    }
    uint64_t v60 = v41;
    *(void *)&long long v72 = *(void *)(v63 + 16);
    unint64_t v43 = v71 + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80));
    uint64_t v19 = *(void *)(v63 + 72);
    a8 = v61;
    a2 = v63 + 16;
    unint64_t v26 = v63 + 8;
    swift_bridgeObjectRetain();
    uint64_t v44 = 0;
    uint64_t v45 = v62;
    while (1)
    {
      ((void (*)(void *, unint64_t, uint64_t))v72)(a8, v43, v45);
      unint64_t v25 = v45;
      uint64_t v21 = *(char **)(PKDrawing.strokes.getter() + 16);
      swift_bridgeObjectRelease();
      BOOL v37 = __OFADD__(v44, v21);
      v44 += (uint64_t)v21;
      if (v37) {
        break;
      }
      (*(void (**)(void *, unint64_t))v26)(a8, v25);
      v43 += v19;
      --a1;
      uint64_t v45 = v25;
      if (!a1)
      {
        uint64_t v42 = swift_bridgeObjectRelease();
        uint64_t v41 = v60;
        goto LABEL_37;
      }
    }
LABEL_40:
    __break(1u);
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  }
  uint64_t v44 = 0;
LABEL_37:
  uint64_t v71 = v41 & ~(v41 >> 63);
  *(void *)&long long v72 = a9;
  uint64_t v46 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v64) + 0x320))(v42);
  uint64_t v47 = type metadata accessor for Date();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = v66;
  (*(void (**)(uint64_t, void *, uint64_t))(v48 + 16))(v66, v65, v47);
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  v50(v49, 0, 1, v47);
  uint64_t v38 = (uint64_t)v70;
  *int v70 = 0;
  *(unsigned char *)(v38 + 25) = 0;
  *(void *)(v38 + 8) = 0;
  *(void *)(v38 + 16) = 0;
  *(_OWORD *)(v38 + 60) = 0u;
  *(_OWORD *)(v38 + 76) = 0u;
  *(_DWORD *)(v38 + 92) = 0;
  *(_OWORD *)(v38 + 28) = 0u;
  *(_OWORD *)(v38 + 44) = 0u;
  a2 = v67;
  uint64_t v51 = v38 + *(int *)(v67 + 68);
  v50(v51, 1, 1, v47);
  *(unsigned char *)(v38 + *(int *)(a2 + 72)) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v38 + 24) = 1;
  outlined assign with take of Date?(v49, v51);
  *(void *)(v38 + 32) = v44;
  uint64_t v52 = v69;
  *(void *)(v38 + 72) = a7;
  *(void *)(v38 + 80) = v52;
  *(void *)(v38 + 88) = v71;
  swift_unknownObjectWeakAssign();

  if (one-time initialization token for $currentAnalyticsEvents != -1) {
    goto LABEL_44;
  }
LABEL_38:
  uint64_t v53 = $currentAnalyticsEvents;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnalyticsEvent>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 64) = _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent, (void (*)(uint64_t))type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  outlined init with copy of MagicPaperUsageReflowEvent(v38, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent);
  uint64_t v56 = v72;
  swift_retain();
  uint64_t v57 = v68;
  swift_bridgeObjectRetain();
  v58._rawValue = v57;
  specialized TaskLocal.appendingValues<A, B>(_:operation:file:line:)(inited, v53, v56, v58);
  swift_release();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnalyticsEvent);
  swift_arrayDestroy();
  outlined destroy of MagicPaperUsageReflowEvent(v38, (uint64_t (*)(void))type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent);
  return swift_bridgeObjectRelease();
}

void closure #1 in HandwritingReflowView.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    HandwritingReflowView.paste()();
  }
}

uint64_t HandwritingReflowView.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

id HandwritingReflowView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandwritingReflowView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for HandwritingReflowView()
{
  return self;
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = (2 * a2) | 1;
  return result;
}

uint64_t specialized Array._checkIndex(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  if (!(a2 >> 62))
  {
    if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= result) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 < v2) {
    goto LABEL_6;
  }
LABEL_3:
  if (v2 < 0) {
LABEL_7:
  }
    __break(1u);
  return result;
}

Swift::Int specialized _ArrayBuffer.subscript.getter(Swift::Int result, Swift::Int a2, unint64_t a3)
{
  Swift::Int v5 = result;
  if ((a3 & 0xC000000000000001) == 0) {
    goto LABEL_7;
  }
  if (a2 < result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (result == a2)
  {
LABEL_7:
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.subscript.getter();
      swift_bridgeObjectRelease();
      return v7;
    }
    if ((a2 & 0x8000000000000000) == 0)
    {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      return v7;
    }
    __break(1u);
    goto LABEL_13;
  }
  if (result < a2)
  {
    type metadata accessor for ReflowElement();
    uint64_t result = v5;
    do
    {
      Swift::Int v6 = result + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(result);
      uint64_t result = v6;
    }
    while (a2 != v6);
    goto LABEL_7;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.intersection(_:)(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a2 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a3((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a2, v5);
    swift_release();
  }
  else
  {
    id v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = a3((char *)v10, v7, a2, v5);
    swift_release();
    MEMORY[0x210550270](v10, -1, -1);
  }
  return v9;
}

void specialized closure #1 in _NativeSet.intersection(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a2;
  uint64_t v69 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v66 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v66 - v12;
  v17.n128_f64[0] = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v66 - v15;
  unint64_t v19 = *(void *)(a3 + 16);
  unint64_t v20 = *(void *)(a4 + 16);
  uint64_t v81 = v7 + 16;
  uint64_t v78 = a3;
  uint64_t v79 = a4;
  uint64_t v76 = v7;
  if (v20 >= v19)
  {
    uint64_t v73 = 0;
    int64_t v43 = 0;
    uint64_t v44 = *(void *)(a3 + 56);
    int64_t v68 = a3 + 56;
    uint64_t v45 = 1 << *(unsigned char *)(a3 + 32);
    if (v45 < 64) {
      uint64_t v46 = ~(-1 << v45);
    }
    else {
      uint64_t v46 = -1;
    }
    unint64_t v47 = v46 & v44;
    int64_t v70 = (unint64_t)(v45 + 63) >> 6;
    uint64_t v77 = a4 + 56;
    uint64_t v48 = (void (**)(char *, uint64_t))(v7 + 8);
    long long v80 = v16;
    if ((v46 & v44) != 0) {
      goto LABEL_39;
    }
LABEL_40:
    int64_t v50 = v43 + 1;
    if (!__OFADD__(v43, 1))
    {
      if (v50 < v70)
      {
        unint64_t v51 = *(void *)(v68 + 8 * v50);
        int64_t v52 = v43 + 1;
        if (!v51)
        {
          int64_t v52 = v43 + 2;
          if (v43 + 2 >= v70) {
            goto LABEL_62;
          }
          unint64_t v51 = *(void *)(v68 + 8 * v52);
          if (!v51)
          {
            int64_t v52 = v43 + 3;
            if (v43 + 3 >= v70) {
              goto LABEL_62;
            }
            unint64_t v51 = *(void *)(v68 + 8 * v52);
            if (!v51)
            {
              uint64_t v53 = v43 + 4;
              if (v43 + 4 >= v70) {
                goto LABEL_62;
              }
              unint64_t v51 = *(void *)(v68 + 8 * v53);
              if (!v51)
              {
                while (1)
                {
                  int64_t v52 = v53 + 1;
                  if (__OFADD__(v53, 1)) {
                    goto LABEL_68;
                  }
                  if (v52 >= v70) {
                    goto LABEL_62;
                  }
                  unint64_t v51 = *(void *)(v68 + 8 * v52);
                  ++v53;
                  if (v51) {
                    goto LABEL_53;
                  }
                }
              }
              int64_t v52 = v43 + 4;
            }
          }
        }
LABEL_53:
        uint64_t v74 = (v51 - 1) & v51;
        int64_t v75 = v52;
        for (unint64_t i = __clz(__rbit64(v51)) + (v52 << 6); ; unint64_t i = __clz(__rbit64(v47)) | (v43 << 6))
        {
          uint64_t v54 = *(void *)(a3 + 48);
          uint64_t v55 = *(void *)(v7 + 72);
          unint64_t v72 = i;
          uint64_t v56 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
          v56(v80, v54 + v55 * i, v6, v17);
          _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
          uint64_t v57 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v58 = -1 << *(unsigned char *)(a4 + 32);
          unint64_t v59 = v57 & ~v58;
          if ((*(void *)(v77 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59))
          {
            uint64_t v71 = (char *)((unint64_t)v48 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
            uint64_t v60 = ~v58;
            while (1)
            {
              ((void (*)(char *, unint64_t, uint64_t))v56)(v10, *(void *)(v79 + 48) + v59 * v55, v6);
              _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
              char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v62 = *v48;
              (*v48)(v10, v6);
              if (v61) {
                break;
              }
              unint64_t v59 = (v59 + 1) & v60;
              if (((*(void *)(v77 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
              {
                a3 = v78;
                a4 = v79;
                int64_t v43 = v75;
                uint64_t v7 = v76;
                uint64_t v63 = v80;
                unint64_t v47 = v74;
                goto LABEL_60;
              }
            }
            v62(v80, v6);
            *(unint64_t *)((char *)v69 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
            unint64_t v47 = v74;
            BOOL v28 = __OFADD__(v73++, 1);
            a3 = v78;
            a4 = v79;
            int64_t v43 = v75;
            uint64_t v7 = v76;
            if (v28) {
              goto LABEL_66;
            }
            if (!v74) {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v62 = *v48;
            a3 = v78;
            int64_t v43 = v75;
            uint64_t v7 = v76;
            uint64_t v63 = v80;
            unint64_t v47 = v74;
LABEL_60:
            v62(v63, v6);
            if (!v47) {
              goto LABEL_40;
            }
          }
LABEL_39:
          uint64_t v74 = (v47 - 1) & v47;
          int64_t v75 = v43;
        }
      }
      goto LABEL_62;
    }
  }
  else
  {
    int64_t v21 = 0;
    uint64_t v22 = *(void *)(a4 + 56);
    uint64_t v67 = a4 + 56;
    uint64_t v23 = 1 << *(unsigned char *)(a4 + 32);
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    else {
      uint64_t v24 = -1;
    }
    unint64_t v25 = v24 & v22;
    int64_t v68 = (unint64_t)(v23 + 63) >> 6;
    unint64_t v72 = v7 + 32;
    uint64_t v73 = 0;
    uint64_t v77 = a3 + 56;
    long long v80 = (char *)(v7 + 8);
    uint64_t v71 = (char *)&v66 - v15;
    if ((v24 & v22) != 0) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v30 = v21 + 1;
    if (!__OFADD__(v21, 1))
    {
      if (v30 < v68)
      {
        unint64_t v31 = *(void *)(v67 + 8 * v30);
        int64_t v32 = v21 + 1;
        if (v31) {
          goto LABEL_23;
        }
        int64_t v32 = v21 + 2;
        if (v21 + 2 >= v68) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(v67 + 8 * v32);
        if (v31) {
          goto LABEL_23;
        }
        int64_t v32 = v21 + 3;
        if (v21 + 3 >= v68) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(v67 + 8 * v32);
        if (v31)
        {
LABEL_23:
          uint64_t v74 = (v31 - 1) & v31;
          int64_t v75 = v32;
          for (unint64_t j = __clz(__rbit64(v31)) + (v32 << 6); ; unint64_t j = __clz(__rbit64(v25)) | (v21 << 6))
          {
            uint64_t v34 = *(void *)(v7 + 72);
            uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
            v35(v18, *(void *)(a4 + 48) + v34 * j, v6, v17);
            (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v18, v6);
            _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
            uint64_t v36 = v13;
            uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v38 = -1 << *(unsigned char *)(a3 + 32);
            unint64_t v39 = v37 & ~v38;
            if ((*(void *)(v77 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39))
            {
              int64_t v70 = (unint64_t)v80 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
              uint64_t v40 = ~v38;
              while (1)
              {
                ((void (*)(char *, unint64_t, uint64_t))v35)(v10, *(void *)(v78 + 48) + v39 * v34, v6);
                _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
                char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v42 = *(void (**)(char *, uint64_t))v80;
                (*(void (**)(char *, uint64_t))v80)(v10, v6);
                if (v41) {
                  break;
                }
                unint64_t v39 = (v39 + 1) & v40;
                if (((*(void *)(v77 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
                {
                  a3 = v78;
                  int64_t v21 = v75;
                  uint64_t v7 = v76;
                  uint64_t v13 = v36;
                  uint64_t v18 = v71;
                  goto LABEL_30;
                }
              }
              v42(v36, v6);
              uint64_t v26 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
              uint64_t v27 = 1 << v39;
              uint64_t v13 = v36;
              *(unint64_t *)((char *)v69 + v26) |= v27;
              unint64_t v25 = v74;
              BOOL v28 = __OFADD__(v73++, 1);
              a3 = v78;
              a4 = v79;
              int64_t v21 = v75;
              uint64_t v7 = v76;
              uint64_t v18 = v71;
              if (v28) {
                goto LABEL_65;
              }
              if (!v74) {
                goto LABEL_10;
              }
            }
            else
            {
              uint64_t v42 = *(void (**)(char *, uint64_t))v80;
              int64_t v21 = v75;
              uint64_t v7 = v76;
              uint64_t v13 = v36;
              uint64_t v18 = v71;
LABEL_30:
              unint64_t v25 = v74;
              v42(v13, v6);
              a4 = v79;
              if (!v25) {
                goto LABEL_10;
              }
            }
LABEL_9:
            uint64_t v74 = (v25 - 1) & v25;
            int64_t v75 = v21;
          }
        }
        uint64_t v33 = v21 + 4;
        if (v21 + 4 < v68)
        {
          unint64_t v31 = *(void *)(v67 + 8 * v33);
          if (v31)
          {
            int64_t v32 = v21 + 4;
            goto LABEL_23;
          }
          while (1)
          {
            int64_t v32 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_67;
            }
            if (v32 >= v68) {
              break;
            }
            unint64_t v31 = *(void *)(v67 + 8 * v32);
            ++v33;
            if (v31) {
              goto LABEL_23;
            }
          }
        }
      }
LABEL_62:
      uint64_t v64 = v66;
      uint64_t v65 = v73;
      swift_retain();
      specialized _NativeSet.extractSubset(using:count:)(v69, v64, v65, a3);
      return;
    }
    __break(1u);
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t j;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t, __n128);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void (**v48)(char *, uint64_t);
  unint64_t i;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, unint64_t, uint64_t, __n128);
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  unint64_t *v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;

  uint64_t v66 = a2;
  uint64_t v69 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v66 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v66 - v12;
  v17.n128_f64[0] = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v66 - v15;
  unint64_t v19 = *(void *)(a3 + 16);
  unint64_t v20 = *(void *)(a4 + 16);
  uint64_t v81 = v7 + 16;
  uint64_t v78 = a3;
  uint64_t v79 = a4;
  uint64_t v76 = v7;
  if (v20 >= v19)
  {
    uint64_t v73 = 0;
    int64_t v43 = 0;
    uint64_t v44 = *(void *)(a3 + 56);
    int64_t v68 = a3 + 56;
    uint64_t v45 = 1 << *(unsigned char *)(a3 + 32);
    if (v45 < 64) {
      uint64_t v46 = ~(-1 << v45);
    }
    else {
      uint64_t v46 = -1;
    }
    unint64_t v47 = v46 & v44;
    int64_t v70 = (unint64_t)(v45 + 63) >> 6;
    uint64_t v77 = a4 + 56;
    uint64_t v48 = (void (**)(char *, uint64_t))(v7 + 8);
    long long v80 = v16;
    if ((v46 & v44) != 0) {
      goto LABEL_39;
    }
LABEL_40:
    int64_t v50 = v43 + 1;
    if (!__OFADD__(v43, 1))
    {
      if (v50 < v70)
      {
        unint64_t v51 = *(void *)(v68 + 8 * v50);
        int64_t v52 = v43 + 1;
        if (!v51)
        {
          int64_t v52 = v43 + 2;
          if (v43 + 2 >= v70) {
            goto LABEL_62;
          }
          unint64_t v51 = *(void *)(v68 + 8 * v52);
          if (!v51)
          {
            int64_t v52 = v43 + 3;
            if (v43 + 3 >= v70) {
              goto LABEL_62;
            }
            unint64_t v51 = *(void *)(v68 + 8 * v52);
            if (!v51)
            {
              uint64_t v53 = v43 + 4;
              if (v43 + 4 >= v70) {
                goto LABEL_62;
              }
              unint64_t v51 = *(void *)(v68 + 8 * v53);
              if (!v51)
              {
                while (1)
                {
                  int64_t v52 = v53 + 1;
                  if (__OFADD__(v53, 1)) {
                    goto LABEL_68;
                  }
                  if (v52 >= v70) {
                    goto LABEL_62;
                  }
                  unint64_t v51 = *(void *)(v68 + 8 * v52);
                  ++v53;
                  if (v51) {
                    goto LABEL_53;
                  }
                }
              }
              int64_t v52 = v43 + 4;
            }
          }
        }
LABEL_53:
        uint64_t v74 = (v51 - 1) & v51;
        int64_t v75 = v52;
        for (unint64_t i = __clz(__rbit64(v51)) + (v52 << 6); ; unint64_t i = __clz(__rbit64(v47)) | (v43 << 6))
        {
          uint64_t v54 = *(void *)(a3 + 48);
          uint64_t v55 = *(void *)(v7 + 72);
          unint64_t v72 = i;
          uint64_t v56 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
          v56(v80, v54 + v55 * i, v6, v17);
          lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
          uint64_t v57 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v58 = -1 << *(unsigned char *)(a4 + 32);
          unint64_t v59 = v57 & ~v58;
          if ((*(void *)(v77 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59))
          {
            uint64_t v71 = (unint64_t)v48 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
            uint64_t v60 = ~v58;
            while (1)
            {
              ((void (*)(char *, unint64_t, uint64_t))v56)(v10, *(void *)(v79 + 48) + v59 * v55, v6);
              lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
              char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v62 = *v48;
              (*v48)(v10, v6);
              if (v61) {
                break;
              }
              unint64_t v59 = (v59 + 1) & v60;
              if (((*(void *)(v77 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
              {
                a3 = v78;
                a4 = v79;
                int64_t v43 = v75;
                uint64_t v7 = v76;
                uint64_t v63 = v80;
                unint64_t v47 = v74;
                goto LABEL_60;
              }
            }
            v62(v80, v6);
            *(unint64_t *)((char *)v69 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
            unint64_t v47 = v74;
            BOOL v28 = __OFADD__(v73++, 1);
            a3 = v78;
            a4 = v79;
            int64_t v43 = v75;
            uint64_t v7 = v76;
            if (v28) {
              goto LABEL_66;
            }
            if (!v74) {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v62 = *v48;
            a3 = v78;
            int64_t v43 = v75;
            uint64_t v7 = v76;
            uint64_t v63 = v80;
            unint64_t v47 = v74;
LABEL_60:
            v62(v63, v6);
            if (!v47) {
              goto LABEL_40;
            }
          }
LABEL_39:
          uint64_t v74 = (v47 - 1) & v47;
          int64_t v75 = v43;
        }
      }
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v73 = 0;
    int64_t v21 = 0;
    uint64_t v22 = *(void *)(a4 + 56);
    uint64_t v67 = a4 + 56;
    uint64_t v23 = 1 << *(unsigned char *)(a4 + 32);
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    else {
      uint64_t v24 = -1;
    }
    unint64_t v25 = v24 & v22;
    int64_t v68 = (unint64_t)(v23 + 63) >> 6;
    uint64_t v71 = v7 + 32;
    unint64_t v72 = (unint64_t)&v66 - v15;
    uint64_t v77 = a3 + 56;
    long long v80 = (char *)(v7 + 8);
    if ((v24 & v22) != 0) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v30 = v21 + 1;
    if (!__OFADD__(v21, 1))
    {
      if (v30 < v68)
      {
        unint64_t v31 = *(void *)(v67 + 8 * v30);
        int64_t v32 = v21 + 1;
        if (v31) {
          goto LABEL_23;
        }
        int64_t v32 = v21 + 2;
        if (v21 + 2 >= v68) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(v67 + 8 * v32);
        if (v31) {
          goto LABEL_23;
        }
        int64_t v32 = v21 + 3;
        if (v21 + 3 >= v68) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(v67 + 8 * v32);
        if (v31)
        {
LABEL_23:
          uint64_t v74 = (v31 - 1) & v31;
          int64_t v75 = v32;
          for (unint64_t j = __clz(__rbit64(v31)) + (v32 << 6); ; unint64_t j = __clz(__rbit64(v25)) | (v21 << 6))
          {
            uint64_t v34 = *(void *)(v7 + 72);
            uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
            v35(v18, *(void *)(v79 + 48) + v34 * j, v6, v17);
            (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v18, v6);
            lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
            uint64_t v36 = v13;
            uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v38 = -1 << *(unsigned char *)(a3 + 32);
            unint64_t v39 = v37 & ~v38;
            if ((*(void *)(v77 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39))
            {
              int64_t v70 = (unint64_t)v80 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
              uint64_t v40 = ~v38;
              while (1)
              {
                ((void (*)(char *, unint64_t, uint64_t))v35)(v10, *(void *)(v78 + 48) + v39 * v34, v6);
                lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
                char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v42 = *(void (**)(char *, uint64_t))v80;
                (*(void (**)(char *, uint64_t))v80)(v10, v6);
                if (v41) {
                  break;
                }
                unint64_t v39 = (v39 + 1) & v40;
                if (((*(void *)(v77 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
                {
                  a3 = v78;
                  int64_t v21 = v75;
                  uint64_t v7 = v76;
                  uint64_t v13 = v36;
                  unint64_t v25 = v74;
                  goto LABEL_30;
                }
              }
              v42(v36, v6);
              uint64_t v26 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
              uint64_t v27 = 1 << v39;
              uint64_t v13 = v36;
              *(unint64_t *)((char *)v69 + v26) |= v27;
              uint64_t v18 = (char *)v72;
              BOOL v28 = __OFADD__(v73++, 1);
              a3 = v78;
              int64_t v21 = v75;
              uint64_t v7 = v76;
              unint64_t v25 = v74;
              if (v28) {
                goto LABEL_65;
              }
              if (!v74) {
                goto LABEL_10;
              }
            }
            else
            {
              uint64_t v42 = *(void (**)(char *, uint64_t))v80;
              int64_t v21 = v75;
              uint64_t v7 = v76;
              uint64_t v13 = v36;
              unint64_t v25 = v74;
LABEL_30:
              v42(v13, v6);
              uint64_t v18 = (char *)v72;
              if (!v25) {
                goto LABEL_10;
              }
            }
LABEL_9:
            uint64_t v74 = (v25 - 1) & v25;
            int64_t v75 = v21;
          }
        }
        uint64_t v33 = v21 + 4;
        if (v21 + 4 < v68)
        {
          unint64_t v31 = *(void *)(v67 + 8 * v33);
          if (v31)
          {
            int64_t v32 = v21 + 4;
            goto LABEL_23;
          }
          while (1)
          {
            int64_t v32 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_67;
            }
            if (v32 >= v68) {
              break;
            }
            unint64_t v31 = *(void *)(v67 + 8 * v32);
            ++v33;
            if (v31) {
              goto LABEL_23;
            }
          }
        }
      }
LABEL_62:
      uint64_t v64 = v66;
      uint64_t v65 = v73;
      swift_retain();
      specialized _NativeSet.extractSubset(using:count:)(v69, v64, v65, a3);
      return;
    }
    __break(1u);
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
}

Swift::Int specialized closure #1 in _NativeSet.intersection(_:)(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v43 = (unint64_t *)result;
  uint64_t v6 = 0;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v7 = 0;
    uint64_t v8 = a4 + 56;
    uint64_t v9 = 1 << *(unsigned char *)(a4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(a4 + 56);
    int64_t v45 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        unint64_t v13 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v14 = v13 | (v7 << 6);
      }
      else
      {
        int64_t v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v15 >= v45) {
          goto LABEL_60;
        }
        unint64_t v16 = *(void *)(v8 + 8 * v15);
        ++v7;
        if (!v16)
        {
          int64_t v7 = v15 + 1;
          if (v15 + 1 >= v45) {
            goto LABEL_60;
          }
          unint64_t v16 = *(void *)(v8 + 8 * v7);
          if (!v16)
          {
            int64_t v7 = v15 + 2;
            if (v15 + 2 >= v45) {
              goto LABEL_60;
            }
            unint64_t v16 = *(void *)(v8 + 8 * v7);
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v45)
              {
LABEL_60:
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v43, a2, v6, a3);
              }
              unint64_t v16 = *(void *)(v8 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  int64_t v7 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    break;
                  }
                  if (v7 >= v45) {
                    goto LABEL_60;
                  }
                  unint64_t v16 = *(void *)(v8 + 8 * v7);
                  ++v17;
                  if (v16) {
                    goto LABEL_21;
                  }
                }
LABEL_63:
                __break(1u);
                goto LABEL_64;
              }
              int64_t v7 = v17;
            }
          }
        }
LABEL_21:
        unint64_t v11 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
      }
      Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(a4 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      uint64_t v22 = 1 << v20;
      if (((1 << v20) & *(void *)(v12 + 8 * (v20 >> 6))) != 0)
      {
        uint64_t v23 = *(void *)(a3 + 48);
        if (*(unsigned __int8 *)(v23 + v20) != v18)
        {
          for (unint64_t i = v20 + 1; ; unint64_t i = v25 + 1)
          {
            unint64_t v25 = i & ~v19;
            if (((*(void *)(v12 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
              goto LABEL_6;
            }
            if (*(unsigned __int8 *)(v23 + v25) == v18) {
              break;
            }
          }
          unint64_t v21 = v25 >> 6;
          uint64_t v22 = 1 << v25;
        }
        v43[v21] |= v22;
        BOOL v26 = __OFADD__(v6++, 1);
        if (v26) {
          break;
        }
      }
    }
    __break(1u);
  }
  int64_t v27 = 0;
  uint64_t v44 = a3 + 56;
  uint64_t v28 = 1 << *(unsigned char *)(a3 + 32);
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  else {
    uint64_t v29 = -1;
  }
  unint64_t v30 = v29 & *(void *)(a3 + 56);
  int64_t v46 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v31 = a4 + 56;
  while (v30)
  {
    unint64_t v32 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    unint64_t v33 = v32 | (v27 << 6);
LABEL_52:
    Swift::UInt v37 = *(unsigned __int8 *)(*(void *)(a3 + 48) + v33);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v37);
    uint64_t result = Hasher._finalize()();
    uint64_t v38 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v39 = result & ~v38;
    if ((*(void *)(v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39))
    {
      uint64_t v40 = *(void *)(a4 + 48);
      if (*(unsigned __int8 *)(v40 + v39) == v37)
      {
LABEL_57:
        *(unint64_t *)((char *)v43 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
        BOOL v26 = __OFADD__(v6++, 1);
        if (v26)
        {
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v41 = ~v38;
        while (1)
        {
          unint64_t v39 = (v39 + 1) & v41;
          if (((*(void *)(v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v40 + v39) == v37) {
            goto LABEL_57;
          }
        }
      }
    }
  }
  int64_t v34 = v27 + 1;
  if (__OFADD__(v27, 1)) {
    goto LABEL_62;
  }
  if (v34 >= v46) {
    goto LABEL_60;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v34);
  ++v27;
  if (v35) {
    goto LABEL_51;
  }
  int64_t v27 = v34 + 1;
  if (v34 + 1 >= v46) {
    goto LABEL_60;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v27);
  if (v35) {
    goto LABEL_51;
  }
  int64_t v27 = v34 + 2;
  if (v34 + 2 >= v46) {
    goto LABEL_60;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v27);
  if (v35)
  {
LABEL_51:
    unint64_t v30 = (v35 - 1) & v35;
    unint64_t v33 = __clz(__rbit64(v35)) + (v27 << 6);
    goto LABEL_52;
  }
  int64_t v36 = v34 + 3;
  if (v36 >= v46) {
    goto LABEL_60;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v36);
  if (v35)
  {
    int64_t v27 = v36;
    goto LABEL_51;
  }
  while (1)
  {
    int64_t v27 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v27 >= v46) {
      goto LABEL_60;
    }
    unint64_t v35 = *(void *)(v44 + 8 * v27);
    ++v36;
    if (v35) {
      goto LABEL_51;
    }
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v61 = (char *)&v51 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v62 = a1;
  uint64_t v63 = a1 + 56;
  uint64_t v56 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v57 = v6;
  uint64_t v64 = v14;
  uint64_t v65 = 0;
  unint64_t v66 = v18;
  uint64_t v55 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v59 = v8 + 16;
  uint64_t v60 = (char *)(a2 + 56);
  uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v58 = v8;
  uint64_t v54 = a2;
  uint64_t v52 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  unint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v57;
  v25(v57, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v56)(v26, v27, 1, v7);
    uint64_t v62 = a1;
    uint64_t v63 = v15;
    uint64_t v64 = v14;
    uint64_t v65 = v23;
    unint64_t v66 = v21;
    if ((*v55)(v26, 1, v7) == 1)
    {
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      outlined destroy of StocksKitCurrencyCache.Provider?(v26, &demangling cache variable for type metadata for UUID?);
      return v54;
    }
    (*v53)(v61, v26, v7);
    uint64_t v31 = v54;
    _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v60[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    uint64_t v40 = *v19;
    uint64_t v8 = v58;
LABEL_35:
    v40(v61, v7);
    int64_t v20 = v65;
    unint64_t v18 = v66;
    a1 = v62;
    uint64_t v15 = v63;
    uint64_t v14 = v64;
    uint64_t v52 = v65;
    if (v66) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v52 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v57;
  }
  uint64_t v52 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v58 + 72);
  uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
  while (1)
  {
    v38(v10, *(void *)(v35 + 48) + v37 * v34, v7);
    _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *v19;
    (*v19)(v10, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v60[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v58;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v61, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    memcpy((char *)&v51 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v60, v44);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v51 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v62);
    uint64_t v46 = v45;
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v46;
  }
  else
  {
    uint64_t v48 = (void *)swift_slowAlloc();
    memcpy(v48, v60, v44);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v48, v43, v35, v34, &v62);
    uint64_t v50 = v49;
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    MEMORY[0x210550270](v48, -1, -1);
    return v50;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (**v17)(char *, uint64_t);
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  char v28;
  void (*v29)(char *, uint64_t);
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t isStackAllocationSafe;
  char v35;
  unint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (**v53)(char *, char *, uint64_t);
  unsigned int (**v54)(char *, uint64_t, uint64_t);
  void (**v55)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void v61[7];

  v61[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v60 = (char *)&v43 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  if (-v13 < 64) {
    uint64_t v14 = ~(-1 << -(char)v13);
  }
  else {
    uint64_t v14 = -1;
  }
  uint64_t v15 = v14 & *(void *)(a1 + 56);
  v61[0] = a1;
  v61[1] = a1 + 56;
  unint64_t v47 = a1 + 56;
  uint64_t v46 = ~v13;
  v61[2] = ~v13;
  uint64_t v16 = (unint64_t)(63 - v13) >> 6;
  uint64_t v54 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v55 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v53 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v58 = v8 + 16;
  uint64_t v59 = (char *)(a2 + 56);
  uint64_t v17 = (void (**)(char *, uint64_t))(v8 + 8);
  unint64_t v43 = v16 - 1;
  swift_bridgeObjectRetain();
  unint64_t v18 = 0;
  uint64_t v50 = v16;
  uint64_t v45 = v16 - 6;
  size_t v44 = a1 + 104;
  uint64_t v52 = v8;
  uint64_t v48 = v6;
  uint64_t v49 = a1;
  if (!v15) {
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v56 = (v15 - 1) & v15;
  uint64_t v57 = v18;
  uint64_t v19 = __clz(__rbit64(v15)) | (v18 << 6);
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(void *)(a1 + 48) + *(void *)(v8 + 72) * v19, v7);
  int64_t v20 = 0;
  while (1)
  {
    (*v55)(v6, v20, 1, v7);
    if ((*v54)(v6, 1, v7) == 1)
    {
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      return a2;
    }
    (*v53)(v60, v6, v7);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
    uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v22 = -1 << *(unsigned char *)(a2 + 32);
    int64_t v23 = v21 & ~v22;
    if ((*(void *)&v59[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23)) {
      break;
    }
    unint64_t v29 = *v17;
LABEL_15:
    v29(v60, v7);
    uint64_t v15 = v56;
    unint64_t v18 = v57;
    uint64_t v8 = v52;
    if (v56) {
      goto LABEL_6;
    }
LABEL_16:
    uint64_t v30 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      __break(1u);
    }
    if (v30 >= v50)
    {
      uint64_t v56 = 0;
      uint64_t v57 = v18;
      int64_t v20 = 1;
    }
    else
    {
      uint64_t v31 = *(void *)(v47 + 8 * v30);
      if (v31) {
        goto LABEL_19;
      }
      uint64_t v32 = v18 + 2;
      if ((uint64_t)(v18 + 2) >= v50)
      {
        uint64_t v56 = 0;
        uint64_t v57 = v18 + 1;
        int64_t v20 = 1;
      }
      else
      {
        uint64_t v31 = *(void *)(v47 + 8 * v32);
        if (v31) {
          goto LABEL_23;
        }
        if ((uint64_t)(v18 + 3) >= v50) {
          goto LABEL_36;
        }
        uint64_t v31 = *(void *)(v47 + 8 * (v18 + 3));
        if (v31)
        {
          uint64_t v30 = v18 + 3;
          goto LABEL_19;
        }
        uint64_t v32 = v18 + 4;
        if ((uint64_t)(v18 + 4) >= v50)
        {
          uint64_t v56 = 0;
          uint64_t v57 = v18 + 3;
          int64_t v20 = 1;
        }
        else
        {
          uint64_t v31 = *(void *)(v47 + 8 * v32);
          if (v31)
          {
LABEL_23:
            uint64_t v30 = v32;
LABEL_19:
            uint64_t v56 = (v31 - 1) & v31;
            uint64_t v57 = v30;
            uint64_t v19 = __clz(__rbit64(v31)) + (v30 << 6);
            goto LABEL_7;
          }
          uint64_t v30 = v18 + 5;
          if ((uint64_t)(v18 + 5) >= v50)
          {
LABEL_36:
            uint64_t v56 = 0;
            uint64_t v57 = v32;
            int64_t v20 = 1;
          }
          else
          {
            uint64_t v31 = *(void *)(v47 + 8 * v30);
            if (v31) {
              goto LABEL_19;
            }
            uint64_t v33 = v18;
            while (v45 != v33)
            {
              uint64_t v31 = *(void *)(v44 + 8 * v33++);
              if (v31)
              {
                uint64_t v30 = v33 + 5;
                goto LABEL_19;
              }
            }
            uint64_t v56 = 0;
            int64_t v20 = 1;
            uint64_t v57 = v43;
          }
        }
      }
    }
  }
  uint64_t v51 = (unint64_t)v17 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  unint64_t v24 = a2;
  unint64_t v25 = ~v22;
  uint64_t v26 = *(void *)(v8 + 72);
  uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v27(v10, *(void *)(v24 + 48) + v26 * v23, v7);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
    int64_t v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v29 = *v17;
    (*v17)(v10, v7);
    if (v28) {
      break;
    }
    int64_t v23 = (v23 + 1) & v25;
    if (((*(void *)&v59[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23) & 1) == 0)
    {
      a2 = v24;
      uint64_t v6 = v48;
      a1 = v49;
      goto LABEL_15;
    }
  }
  v61[3] = v57;
  v61[4] = v56;
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v29)(v60, v7);
  uint64_t v35 = *(unsigned char *)(v24 + 32);
  uint64_t v36 = (unint64_t)((1 << v35) + 63) >> 6;
  uint64_t v37 = 8 * v36;
  if ((v35 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    memcpy((char *)&v43 - ((v37 + 15) & 0x3FFFFFFFFFFFFFF0), v59, v37);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v43 - ((v37 + 15) & 0x3FFFFFFFFFFFFFF0)), v36, v24, v23, v61);
    char v39 = v38;
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v39;
  }
  else
  {
    uint64_t v40 = (void *)swift_slowAlloc();
    memcpy(v40, v59, v37);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v40, v36, v24, v23, v61);
    a2 = v41;
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    MEMORY[0x210550270](v40, -1, -1);
  }
  return a2;
}

void specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x270FA5388](v15);
  uint64_t v65 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v54 = a1;
  uint64_t v55 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v63 = v21 + 16;
  uint64_t v64 = a3;
  uint64_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v56 = a5;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v62 = a3 + 56;
  unint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v60 = v21;
  while (2)
  {
    uint64_t v53 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v29 = a5[2];
        int64_t v28 = a5[3];
        unint64_t v30 = a5[4];
        if (v30)
        {
          uint64_t v61 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v28 << 6);
LABEL_7:
          unint64_t v32 = *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31;
          uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v22 + 16);
          uint64_t v34 = v26;
          v33(v11, v32, v12, v16);
          uint64_t v35 = 0;
          goto LABEL_8;
        }
        int64_t v44 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        int64_t v45 = (unint64_t)(v29 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v44);
        if (v46) {
          goto LABEL_17;
        }
        int64_t v49 = v28 + 2;
        if (v28 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v49);
        if (v46) {
          goto LABEL_23;
        }
        if (v28 + 3 >= v45) {
          goto LABEL_36;
        }
        unint64_t v46 = *(void *)(v27 + 8 * (v28 + 3));
        if (v46)
        {
          int64_t v44 = v28 + 3;
          goto LABEL_17;
        }
        int64_t v49 = v28 + 4;
        if (v28 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v27 + 8 * v49);
          if (v46)
          {
LABEL_23:
            int64_t v44 = v49;
LABEL_17:
            uint64_t v61 = (v46 - 1) & v46;
            unint64_t v31 = __clz(__rbit64(v46)) + (v44 << 6);
            int64_t v28 = v44;
            goto LABEL_7;
          }
          int64_t v44 = v28 + 5;
          if (v28 + 5 < v45)
          {
            unint64_t v46 = *(void *)(v27 + 8 * v44);
            if (v46) {
              goto LABEL_17;
            }
            int64_t v44 = v45 - 1;
            int64_t v50 = v28 + 6;
            while (v45 != v50)
            {
              unint64_t v46 = *(void *)(v27 + 8 * v50++);
              if (v46)
              {
                int64_t v44 = v50 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v61 = 0;
            uint64_t v35 = 1;
            int64_t v28 = v44;
            uint64_t v34 = v26;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          int64_t v28 = v49;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        uint64_t v61 = 0;
        uint64_t v35 = 1;
        v28 += 3;
        uint64_t v34 = v26;
LABEL_8:
        (*v59)(v11, v35, 1, v12);
        *a5 = v34;
        a5[1] = v27;
        a5[2] = v29;
        a5[3] = v28;
        a5[4] = v61;
        if ((*v58)(v11, 1, v12) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
          uint64_t v51 = v64;
          swift_retain();
          specialized _NativeSet.extractSubset(using:count:)(v54, v52, v53, v51);
          return;
        }
        (*v57)(v65, v11, v12);
        uint64_t v36 = v64;
        _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
          break;
        }
        unint64_t v25 = *v24;
        uint64_t v22 = v60;
LABEL_4:
        v25(v65, v12);
      }
      uint64_t v61 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v40 = ~v38;
      uint64_t v41 = *(void *)(v60 + 72);
      char v42 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      while (1)
      {
        v42(v14, *(void *)(v64 + 48) + v41 * v39, v12);
        _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v25 = *v24;
        (*v24)(v14, v12);
        if (v43) {
          break;
        }
        unint64_t v39 = (v39 + 1) & v40;
        if (((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        {
          uint64_t v11 = v55;
          a5 = v56;
          uint64_t v22 = v60;
          goto LABEL_4;
        }
      }
      v25(v65, v12);
      uint64_t v47 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v55;
      uint64_t v48 = *(unint64_t *)((char *)v54 + v47);
      *(unint64_t *)((char *)v54 + v47) = v48 & ~(1 << v39);
      a5 = v56;
      uint64_t v22 = v60;
    }
    while ((v48 & (1 << v39)) == 0);
    uint64_t v23 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_43:
      __break(1u);
      return;
    }
    if (v53 != 1) {
      continue;
    }
    break;
  }
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  char v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  char *v51;
  void *v52;
  void (**v53)(char *, char *, uint64_t);
  unsigned int (**v54)(char *, uint64_t, uint64_t);
  void (**v55)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;

  uint64_t v48 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x270FA5388](v15);
  uint64_t v61 = (char *)&v48 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  int64_t v50 = a1;
  uint64_t v51 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v21 = v18 - 1;
  uint64_t v59 = v22 + 16;
  uint64_t v60 = a3;
  uint64_t v54 = (unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v55 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  uint64_t v52 = a5;
  uint64_t v53 = (void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v58 = a3 + 56;
  uint64_t v56 = v22;
  uint64_t v23 = (void (**)(char *, uint64_t))(v22 + 8);
  while (2)
  {
    int64_t v49 = v21;
    do
    {
      while (1)
      {
        unint64_t v25 = *a5;
        uint64_t v26 = a5[1];
        int64_t v28 = a5[2];
        uint64_t v27 = a5[3];
        uint64_t v29 = a5[4];
        if (v29)
        {
          uint64_t v57 = (v29 - 1) & v29;
          unint64_t v30 = __clz(__rbit64(v29)) | (v27 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t, __n128))(v56 + 16))(v11, *(void *)(v25 + 48) + *(void *)(v56 + 72) * v30, v12, v16);
          unint64_t v31 = 0;
          goto LABEL_8;
        }
        uint64_t v40 = v27 + 1;
        if (__OFADD__(v27, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        uint64_t v41 = (unint64_t)(v28 + 64) >> 6;
        if (v40 >= v41)
        {
          uint64_t v57 = 0;
          unint64_t v31 = 1;
          goto LABEL_8;
        }
        char v42 = *(void *)(v26 + 8 * v40);
        if (v42) {
          goto LABEL_17;
        }
        int64_t v45 = v27 + 2;
        if (v27 + 2 >= v41) {
          goto LABEL_35;
        }
        char v42 = *(void *)(v26 + 8 * v45);
        if (v42) {
          goto LABEL_23;
        }
        if (v27 + 3 >= v41) {
          goto LABEL_36;
        }
        char v42 = *(void *)(v26 + 8 * (v27 + 3));
        if (v42)
        {
          uint64_t v40 = v27 + 3;
          goto LABEL_17;
        }
        int64_t v45 = v27 + 4;
        if (v27 + 4 < v41)
        {
          char v42 = *(void *)(v26 + 8 * v45);
          if (v42)
          {
LABEL_23:
            uint64_t v40 = v45;
LABEL_17:
            uint64_t v57 = (v42 - 1) & v42;
            unint64_t v30 = __clz(__rbit64(v42)) + (v40 << 6);
            uint64_t v27 = v40;
            goto LABEL_7;
          }
          uint64_t v40 = v27 + 5;
          if (v27 + 5 < v41)
          {
            char v42 = *(void *)(v26 + 8 * v40);
            if (v42) {
              goto LABEL_17;
            }
            uint64_t v40 = v41 - 1;
            unint64_t v46 = v27 + 6;
            while (v41 != v46)
            {
              char v42 = *(void *)(v26 + 8 * v46++);
              if (v42)
              {
                uint64_t v40 = v46 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v57 = 0;
            unint64_t v31 = 1;
            uint64_t v27 = v40;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v57 = 0;
          unint64_t v31 = 1;
          uint64_t v27 = v45;
          goto LABEL_8;
        }
        uint64_t v57 = 0;
        unint64_t v31 = 1;
        v27 += 3;
LABEL_8:
        (*v55)(v11, v31, 1, v12);
        *a5 = v25;
        a5[1] = v26;
        a5[2] = v28;
        a5[3] = v27;
        a5[4] = v57;
        if ((*v54)(v11, 1, v12) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
          uint64_t v47 = v60;
          swift_retain();
          specialized _NativeSet.extractSubset(using:count:)(v50, v48, v49, v47);
          return;
        }
        (*v53)(v61, v11, v12);
        unint64_t v32 = v60;
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
        uint64_t v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v34 = -1 << *(unsigned char *)(v32 + 32);
        uint64_t v35 = v33 & ~v34;
        if ((*(void *)(v58 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35)) {
          break;
        }
        unint64_t v24 = *v23;
LABEL_4:
        v24(v61, v12);
      }
      uint64_t v57 = (unint64_t)v23 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v36 = ~v34;
      uint64_t v37 = *(void *)(v56 + 72);
      uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
      while (1)
      {
        v38(v14, *(void *)(v60 + 48) + v37 * v35, v12);
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
        unint64_t v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v24 = *v23;
        (*v23)(v14, v12);
        if (v39) {
          break;
        }
        uint64_t v35 = (v35 + 1) & v36;
        if (((*(void *)(v58 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
        {
          uint64_t v11 = v51;
          a5 = v52;
          goto LABEL_4;
        }
      }
      v24(v61, v12);
      char v43 = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v51;
      int64_t v44 = *(unint64_t *)((char *)v50 + v43);
      *(unint64_t *)((char *)v50 + v43) = v44 & ~(1 << v35);
      a5 = v52;
    }
    while ((v44 & (1 << v35)) == 0);
    uint64_t v21 = v49 - 1;
    if (__OFSUB__(v49, 1))
    {
LABEL_43:
      __break(1u);
      return;
    }
    if (v49 != 1) {
      continue;
    }
    break;
  }
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, char *), uint64_t a5)
{
  uint64_t v42 = a5;
  uint64_t v33 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing));
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing)?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (unint64_t *)((char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = a1;
  uint64_t v35 = 0;
  uint64_t v36 = a2;
  uint64_t v37 = 0;
  char v38 = 0;
  uint64_t v39 = a3;
  uint64_t v40 = 0;
  char v41 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Zip2Sequence.Iterator.next()(v14);
  unint64_t v31 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v32 = v9 + 48;
  int v15 = v31(v14, 1, v8);
  __n128 v16 = (void *)MEMORY[0x263F8EE78];
  if (v15 == 1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v16;
  }
  while (1)
  {
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v14, (uint64_t)v11, &demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing));
    uint64_t v18 = v33(*(void *)v11, *((void *)v11 + 1), &v11[*(int *)(v8 + 48)]);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for ((NSValue, CHReflowableTextToken), PKDrawing));
    uint64_t v19 = *(void *)(v18 + 16);
    int64_t v20 = v16[2];
    int64_t v21 = v20 + v19;
    if (__OFADD__(v20, v19)) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v21 <= v16[3] >> 1)
    {
      if (*(void *)(v18 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v20 <= v21) {
        int64_t v23 = v20 + v19;
      }
      else {
        int64_t v23 = v20;
      }
      __n128 v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v23, 1, v16);
      if (*(void *)(v18 + 16))
      {
LABEL_15:
        uint64_t v24 = v16[2];
        if ((v16[3] >> 1) - v24 < v19) {
          goto LABEL_26;
        }
        unint64_t v25 = (unint64_t)&v16[3 * v24 + 4];
        if (v18 + 32 < v25 + 24 * v19 && v25 < v18 + 32 + 24 * v19) {
          goto LABEL_28;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_NSRange, ReflowWord));
        swift_arrayInitWithCopy();
        if (v19)
        {
          uint64_t v27 = v16[2];
          BOOL v28 = __OFADD__(v27, v19);
          uint64_t v29 = v27 + v19;
          if (v28) {
            goto LABEL_27;
          }
          v16[2] = v29;
        }
        goto LABEL_5;
      }
    }
    if (v19) {
      goto LABEL_25;
    }
LABEL_5:
    swift_bridgeObjectRelease();
    specialized Zip2Sequence.Iterator.next()(v14);
    if (v31(v14, 1, v8) == 1) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5095_s8PaperKit21HandwritingReflowViewC19transformsReplacing_4with11animatingTo13reflowTextboxSay06d3B08f39VGShy9Coherence7WeakRefVyAL10CRRegistery18AL14SharedTagged_2y25AA0T6StrokeVGGGG_SayAA0D7B25CGAkA0d4TextE0CtFA2JXEfU_SDy9Coherence0X0VyAM10CRRegisterVyAM14SharedTagged_2Vy0iE012TaggedStrokeVGGGSo17CGAffineTransformVGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v39 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v6 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for PKStroke();
  uint64_t v9 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v12)
  {
    v33[1] = v2;
    uint64_t v45 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    int v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v14 = v9 + 16;
    unint64_t v35 = (*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64);
    uint64_t v36 = v15;
    uint64_t v16 = a1 + v35;
    uint64_t v34 = *(void *)(v14 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v37 = v14;
    uint64_t v18 = (void (**)(unint64_t, char *, uint64_t))(v14 + 16);
    uint64_t v19 = v41;
    while (1)
    {
      v36(v11, v16, v19);
      isCGFloat a = PKStroke._bridgeToObjectiveC()().super.isa;
      id v21 = [(objc_class *)isa _strokeUUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      Ref.init(id:)();
      uint64_t v22 = v40;
      if (!*(void *)(v40 + 16)) {
        break;
      }
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
      uint64_t v24 = *v17;
      if ((v25 & 1) == 0) {
        goto LABEL_7;
      }
      uint64_t v26 = (long long *)(*(void *)(v22 + 56) + 48 * v23);
      long long v27 = v26[1];
      long long v42 = *v26;
      long long v43 = v27;
      long long v44 = v26[2];
      v24(v8, v38);
      PKStroke.transform.setter();
LABEL_8:
      uint64_t v13 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
        uint64_t v13 = v45;
      }
      unint64_t v29 = *(void *)(v13 + 16);
      unint64_t v28 = *(void *)(v13 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        uint64_t v13 = v45;
      }
      *(void *)(v13 + 16) = v29 + 1;
      uint64_t v30 = v34;
      unint64_t v31 = v13 + v35 + v29 * v34;
      uint64_t v19 = v41;
      (*v18)(v31, v11, v41);
      uint64_t v45 = v13;
      v16 += v30;
      if (!--v12) {
        return v13;
      }
    }
    uint64_t v24 = *v17;
LABEL_7:
    v24(v8, v38);
    goto LABEL_8;
  }
  return v13;
}

id specialized static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[2] = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)specialized Sequence.flatMap<A>(_:)(a2, a3, a4, (uint64_t (*)(void, void, char *))partial apply for closure #1 in static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:), (uint64_t)v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v10 = v9[2];
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return (id)MEMORY[0x263F8EE78];
  }
  id result = objc_msgSend(a1, sel_paragraphRangeForRange_, v9[4], v9[5]);
  if (v9[2] < v10) {
    goto LABEL_22;
  }
  unint64_t v13 = v10 - 1;
  if (v13)
  {
    id v14 = result;
    uint64_t v15 = v12;
    id result = (id)swift_bridgeObjectRetain();
    unint64_t v16 = 0;
    uint64_t v17 = v9 + 8;
    while (!__OFADD__(v14, v15))
    {
      if (*(v17 - 1) >= (uint64_t)v14 + v15)
      {
        if (v16 >= v9[2]) {
          goto LABEL_21;
        }
        *(unsigned char *)(*(v17 - 2) + 136) = 1;
        id result = objc_msgSend(a1, sel_paragraphRangeForRange_);
        id v14 = result;
        uint64_t v15 = v18;
      }
      if (v16 == 0x7FFFFFFFFFFFFFFDLL) {
        goto LABEL_20;
      }
      ++v16;
      v17 += 3;
      if (v13 == v16)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
LABEL_12:
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v19 = v9[2];
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = 0;
    uint64_t v21 = 6;
    do
    {
      uint64_t v22 = v9[v21];
      swift_retain();
      unint64_t v23 = specialized closure #2 in static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(v20, v22, (uint64_t)v9);
      swift_release();
      specialized Array.append<A>(contentsOf:)(v23);
      v21 += 3;
      ++v20;
    }
    while (v19 != v20);
    swift_bridgeObjectRelease_n();
    return (id)v25;
  }
  else
  {
    swift_bridgeObjectRelease();
    return (id)MEMORY[0x263F8EE78];
  }
}

uint64_t partial apply for closure #1 in static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)@<X0>(void *a1@<X0>, void *a2@<X1>, PKDrawing *a3@<X8>)
{
  return closure #1 in static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(a1, a2, *(void *)(v3 + 16), a3);
}

void specialized HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  id v42 = a6;
  uint64_t v13 = type metadata accessor for PKDrawing();
  uint64_t v43 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v43 + 64);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  double v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (void *)MEMORY[0x210550400](&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas], v17);
  if (v20)
  {
    uint64_t v40 = a4;
    uint64_t v41 = a5;
    uint64_t v21 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v20) + 0x320);
    long long v44 = v20;
    uint64_t v22 = v21();
    if (v22)
    {
      unint64_t v23 = (void *)v22;
      if (!HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:)(a1, a2, a3, v44))
      {
        uint64_t v25 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v19, 1, 1, v25);
        uint64_t v39 = a1;
        uint64_t v37 = a2;
        (*(void (**)(char *, id, uint64_t))(v43 + 16))((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v42, v13);
        type metadata accessor for MainActor();
        id v42 = a3;
        swift_bridgeObjectRetain();
        uint64_t v38 = v7;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v26 = v23;
        uint64_t v27 = v40;
        swift_bridgeObjectRetain();
        long long v44 = v44;
        uint64_t v28 = static MainActor.shared.getter();
        uint64_t v29 = v43;
        unint64_t v30 = (*(unsigned __int8 *)(v43 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
        unint64_t v31 = (v14 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v32 = (char *)swift_allocObject();
        uint64_t v33 = MEMORY[0x263F8F500];
        *((void *)v32 + 2) = v28;
        *((void *)v32 + 3) = v33;
        uint64_t v34 = v39;
        *((void *)v32 + 4) = v42;
        *((void *)v32 + 5) = v34;
        uint64_t v35 = v37;
        *((void *)v32 + 6) = v38;
        *((void *)v32 + 7) = v35;
        *((void *)v32 + 8) = v41;
        *((void *)v32 + 9) = v26;
        *((void *)v32 + 10) = v27;
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v32[v30], v15, v13);
        uint64_t v36 = v44;
        *(void *)&v32[v31] = v44;
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v19, (uint64_t)&async function pointer to partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:), (uint64_t)v32);

        swift_release();
        return;
      }
    }
    uint64_t v24 = v44;
  }
}

void specialized closure #1 in HandwritingReflowView.init(frame:canvas:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(char **)(a1 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox);
  if (v5)
  {
    uint64_t v6 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
    swift_beginAccess();
    unint64_t v7 = *(void *)(v6 + 80);
    id v27 = v5;
    if (v7 >> 62)
    {
      id v26 = v5;
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v9 = v5;
      swift_bridgeObjectRetain();
      if (v8)
      {
LABEL_4:
        if (v8 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v10 = 0;
        unint64_t v28 = v7 & 0xC000000000000001;
        do
        {
          if (v28) {
            MEMORY[0x21054E050](v10, v7);
          }
          else {
            swift_retain();
          }
          type metadata accessor for ReflowWord();
          uint64_t v11 = swift_dynamicCastClass();
          if (v11)
          {
            uint64_t v12 = v11;
            uint64_t v13 = *(void **)(v11 + 280);
            swift_retain();
            id v14 = v13;
            objc_msgSend(v14, sel__canvasBounds, v27);
            id v15 = objc_msgSend(v14, sel_imageFromRect_scale_);

            uint64_t v16 = *(void **)(v12 + 304);
            *(void *)(v12 + 304) = v15;

            uint64_t v17 = type metadata accessor for TaskPriority();
            uint64_t v18 = *(void *)(v17 - 8);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v4, 1, 1, v17);
            type metadata accessor for MainActor();
            swift_retain();
            uint64_t v19 = static MainActor.shared.getter();
            uint64_t v20 = (void *)swift_allocObject();
            v20[2] = v19;
            v20[3] = MEMORY[0x263F8F500];
            v20[4] = v12;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v4, 1, v17) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for TaskPriority?);
              uint64_t v29 = 0;
            }
            else
            {
              unsigned __int8 v21 = TaskPriority.rawValue.getter();
              (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v17);
              uint64_t v29 = v21;
            }
            if (v20[2])
            {
              swift_getObjectType();
              swift_unknownObjectRetain();
              uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
              uint64_t v24 = v23;
              swift_unknownObjectRelease();
            }
            else
            {
              uint64_t v22 = 0;
              uint64_t v24 = 0;
            }
            uint64_t v25 = swift_allocObject();
            *(void *)(v25 + 16) = &async function pointer to partial apply for closure #1 in ReflowWord.generateImage();
            *(void *)(v25 + 24) = v20;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ()?);
            if (v24 | v22)
            {
              uint64_t v30 = 0;
              uint64_t v31 = 0;
              uint64_t v32 = v22;
              uint64_t v33 = v24;
            }
            swift_task_create();
            swift_release_n();
          }
          ++v10;
          swift_release();
        }
        while (v8 != v10);
      }
    }

    swift_bridgeObjectRelease();
  }
}

void specialized HandwritingReflowView.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_initialCoordinateSpace];
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *(_OWORD *)uint64_t v1 = 0u;
  v1[48] = 1;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_liveCoordinateSpace];
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  v2[48] = 1;
  uint64_t v3 = &v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowStrokeBounds];
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox] = 0;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret;
  type metadata accessor for ReflowCursor();
  *(void *)&v0[v4] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isAdjustingSpace] = 0;
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_didAdjustSpace] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_editMenuInteraction] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_currentReflowingStrokes] = 0;
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isInReflowMode] = 1;
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_showResizeUI] = 1;
  v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_isDrawing] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_endDrawContinuations] = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_startLongPressTask] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized HandwritingReflowView.canPasteAsHandwriting.getter()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_generalPasteboard);
  id v2 = objc_msgSend(v1, sel_pasteboardTypes);

  uint64_t v3 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  LOBYTE(v2) = specialized Sequence<>.contains(_:)(0xD00000000000001DLL, 0x800000020C85DCA0, v3);
  swift_bridgeObjectRelease();
  if (v2) {
    return 1;
  }
  if (CHGetPersonalizedSynthesisSupportState() < 4) {
    return 0;
  }
  id v5 = objc_msgSend(v0, sel_generalPasteboard);
  id v4 = objc_msgSend(v5, sel_hasStrings);

  return (uint64_t)v4;
}

uint64_t specialized closure #2 in static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)(a2 + 136) & 1) != 0 || *(void *)(a3 + 16) - 1 == a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_20C835790;
    *(void *)(v4 + 32) = a2;
    uint64_t v10 = v4;
    specialized Array._endMutation()();
    uint64_t v5 = v10;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_20C8344D0;
    *(void *)(v5 + 32) = a2;
    uint64_t v6 = one-time initialization token for handwritingReflowMinimumSpaceWidth;
    swift_retain();
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v7 = static UIConstants.handwritingReflowMinimumSpaceWidth;
    type metadata accessor for ReflowSpace();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 160) = 1;
    *(unsigned char *)(v8 + 152) = 0;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(void *)(v8 + 96) = 0;
    *(_OWORD *)(v8 + 104) = xmmword_20C835600;
    *(void *)(v8 + 120) = -1;
    *(void *)(v8 + 128) = 0;
    *(unsigned char *)(v8 + 136) = 0;
    *(void *)(v8 + 144) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = v7;
    *(void *)(v8 + 40) = 0x4000000000000000;
    *(void *)(v5 + 40) = v8;
    specialized Array._endMutation()();
  }
  return v5;
}

uint64_t sub_20C6FAF60()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.beginTransform()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.beginTransform()(a1, v4, v5, v7, v6);
}

unint64_t lazy protocol witness table accessor for type [ReflowEnum] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ReflowEnum] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ReflowEnum] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ReflowEnum]);
    lazy protocol witness table accessor for type ReflowEnum and conformance ReflowEnum();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ReflowEnum] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ReflowEnum and conformance ReflowEnum()
{
  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum;
  if (!lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum;
  if (!lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowEnum and conformance ReflowEnum);
  }
  return result;
}

uint64_t sub_20C6FB130()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C6FB168()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #2 in HandwritingReflowView.paste()(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return closure #2 in HandwritingReflowView.paste()(a1, a2, a3, *(unsigned char **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void **)(v3 + 40), (void *)(v3 + v8), *(void *)(v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_58()
{
  return swift_release();
}

uint64_t outlined init with copy of MagicPaperUsageReflowEvent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of MagicPaperUsageReflowEvent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_20C6FB3FC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 81, 7);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  double v7 = *(double *)(v1 + 40);
  double v8 = *(double *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  char v12 = *(unsigned char *)(v1 + 80);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(v7, v8, a1, v4, v5, v6, v9, v10, v11, v12);
}

uint64_t sub_20C6FB548()
{
  uint64_t v1 = type metadata accessor for PKDrawing();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 88) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(uint64_t a1)
{
  type metadata accessor for PKDrawing();
  uint64_t v3 = v1[4];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[2];
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v6 = v1[7];
  uint64_t v7 = v1[8];
  double v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *double v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)(a1, v11, v10, v3, v4, v5, v6, v7);
}

uint64_t sub_20C6FB7C4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id partial apply for closure #3 in closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_startRefineAnimationWithDuration_, *(double *)(v0 + 24));
}

uint64_t sub_20C6FB810()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #4 in closure #1 in HandwritingReflowView.replaceStrokes(_:with:unscaledElements:reflowTextbox:animatingFrom:to:in:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_stopRefineAnimation);
}

uint64_t sub_20C6FB858()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 89, 7);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  double v7 = v1[5];
  double v8 = v1[6];
  uint64_t v9 = *((void *)v1 + 7);
  uint64_t v10 = *((void *)v1 + 8);
  uint64_t v11 = *((void *)v1 + 9);
  uint64_t v12 = *((void *)v1 + 10);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.replaceStrokes(_:nonReflowableStrokes:with:strokeIn:)(v7, v8, a1, v4, v5, v6, v9, v10, v11, v12);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.replaceStrokes(_:with:strokeIn:reflowTextbox:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.endOfDrawing()(uint64_t a1)
{
  return closure #1 in HandwritingReflowView.endOfDrawing()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ReflowTextView.endOfAnimation()(uint64_t a1)
{
  return closure #1 in ReflowTextView.endOfAnimation()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)()
{
  return closure #1 in closure #2 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(*(void *)(v0 + 16), *(char **)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72), *(unsigned char *)(v0 + 73), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96));
}

uint64_t sub_20C6FBAFC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  uint64_t v5 = v3 | 7;
  uint64_t v6 = (v3 + 32) & ~v3;
  uint64_t v7 = v6 + v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);
  return MEMORY[0x270FA0238](v0, v7, v5);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v1 = *(void (**)(void))(v0 + 16);
  return closure #1 in closure #1 in closure #2 in closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(v1);
}

uint64_t objectdestroy_144Tm()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in HandwritingReflowView.replaceStrokesWithoutReflowIfNeeded(_:with:reflowTextbox:in:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(uint64_t a1)
{
  return closure #1 in HandwritingReflowView.finishReplace(reflowTextbox:in:newElements:delete:apply:hasShownStrokes:)(a1, *(char **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72), *(unsigned char *)(v1 + 73), *(void *)(v1 + 80), *(void *)(v1 + 88));
}

uint64_t sub_20C6FBDC4()
{
  uint64_t v1 = type metadata accessor for PKDrawing();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for PKDrawing() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = v1[7];
  uint64_t v11 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.strokeInStrokes(_:reflowTextbox:in:)(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_20C6FC01C()
{
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)()
{
  closure #1 in HandwritingReflowView.applyReflow(_:apply:hasShownStrokes:)(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_20C6FC078()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 88)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 104, 7);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.startReflowForSelection(completion:)(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[4];
  double v7 = v1[5];
  uint64_t v8 = *((void *)v1 + 8);
  uint64_t v9 = *((void *)v1 + 9);
  uint64_t v10 = *((void *)v1 + 10);
  uint64_t v11 = *((void *)v1 + 11);
  uint64_t v12 = *((void *)v1 + 12);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.startReflowForSelection(completion:)(v6, v7, a1, v4, v5, v8, v9, v10, v11, v12);
}

uint64_t sub_20C6FC1DC()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t partial apply for closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:)(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[4];
  double v7 = v1[5];
  uint64_t v8 = *((void *)v1 + 6);
  uint64_t v9 = *((void *)v1 + 7);
  uint64_t v10 = *((void *)v1 + 8);
  double v11 = v1[9];
  double v12 = v1[10];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in HandwritingReflowView.startInsertSpaceReflow(at:)(v6, v7, v11, v12, a1, v4, v5, v8, v9, v10);
}

uint64_t sub_20C6FC324()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

id partial apply for closure #3 in HandwritingReflowView.showCaret(_:location:textPosition:linesAffected:caretRect:)()
{
  return objc_msgSend(*(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_caret), sel_setFrame_, *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t outlined init with take of MagicPaperUsageInsertSpaceEvent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_20C6FC3DC()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 104, 7);
}

uint64_t outlined destroy of MagicPaperUsageInsertSpaceEvent(uint64_t a1)
{
  return a1;
}

UIMenu specialized HandwritingReflowView.editMenuInteraction(_:menuFor:suggestedActions:)()
{
  if (specialized HandwritingReflowView.canPasteAsHandwriting.getter())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    UIMenuElementSize preferredElementSize = swift_allocObject();
    *(_OWORD *)(preferredElementSize + 16) = xmmword_20C835790;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    uint64_t v1 = (void *)*MEMORY[0x263F832F0];
    swift_allocObject();
    swift_unknownObjectWeakInit();
    id v2 = v1;
    v5._rawValue = 0;
    *(void *)(preferredElementSize + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    specialized Array._endMutation()();
  }
  else
  {
    UIMenuElementSize preferredElementSize = MEMORY[0x263F8EE78];
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6.value.super.isCGFloat a = 0;
  v6.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v3, (Swift::String_optional)0, v6, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v5);
}

void partial apply for closure #1 in HandwritingReflowView.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  closure #1 in HandwritingReflowView.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1);
}

uint64_t sub_20C6FC5D4()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_20C6FC614()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _s8PaperKit05MagicA16UsageReflowEventVAcA09AnalyticsF0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t AnyCanvasElementViewController.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

uint64_t AnyCanvasElementViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*AnyCanvasElementViewController.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  Swift::String v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

id AnyCanvasElementViewController.toolPicker.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker);
}

id AnyCanvasElementViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x21054D080]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id AnyCanvasElementViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker;
  id v8 = objc_allocWithZone(MEMORY[0x263F14C08]);
  uint64_t v9 = v3;
  *(void *)&v3[v7] = objc_msgSend(v8, sel_init);

  if (a2)
  {
    uint64_t v10 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  v13.receiver = v9;
  v13.super_class = (Class)type metadata accessor for AnyCanvasElementViewController();
  id v11 = objc_msgSendSuper2(&v13, sel_initWithNibName_bundle_, v10, a3);

  return v11;
}

uint64_t type metadata accessor for AnyCanvasElementViewController()
{
  return self;
}

id AnyCanvasElementViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id AnyCanvasElementViewController.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker;
  id v4 = objc_allocWithZone(MEMORY[0x263F14C08]);
  uint64_t v5 = v1;
  *(void *)&v1[v3] = objc_msgSend(v4, sel_init);

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for AnyCanvasElementViewController();
  id v6 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);

  return v6;
}

id AnyCanvasElementViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnyCanvasElementViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_20C6FCB7C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x60))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_20C6FCBD8(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0x68);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t method lookup function for AnyCanvasElementViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyCanvasElementViewController);
}

uint64_t dispatch thunk of AnyCanvasElementViewController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AnyCanvasElementViewController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of AnyCanvasElementViewController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t CanvasState.init()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  CRDictionary.init()();
  uint64_t result = type metadata accessor for CanvasState();
  *(void *)(a1 + *(int *)(result + 20)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t type metadata accessor for CanvasState()
{
  uint64_t result = type metadata singleton initialization cache for CanvasState;
  if (!type metadata singleton initialization cache for CanvasState) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CanvasState.selections.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t CanvasState.selections.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*CanvasState.selections.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t CanvasState.additionalFields.getter()
{
  type metadata accessor for CanvasState();
  return swift_bridgeObjectRetain();
}

uint64_t CanvasState.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CanvasState() + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*CanvasState.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static CanvasState.fields.getter()
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v0 = static CanvasState.fields;
  swift_bridgeObjectRetain();
  swift_retain();
  return v0;
}

uint64_t protocol witness for static CRStruct_Base_1.fields.getter in conformance CanvasState()
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v0 = static CanvasState.fields;
  swift_bridgeObjectRetain();
  swift_retain();
  return v0;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance CanvasState(uint64_t a1)
{
  uint64_t v2 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16FC8](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance CanvasState()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance CanvasState())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRStruct_Base.init() in conformance CanvasState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  uint64_t result = CRDictionary.init()();
  *(void *)(a2 + *(int *)(a1 + 20)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance CanvasState(uint64_t a1)
{
  uint64_t v2 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16F68](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16F90](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16FC0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16F98](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16FB8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16FA0](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16F80](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16F78](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16F60](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16F48](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance CanvasState()
{
  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return CRStruct_1.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16F50](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance CanvasState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16FA8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance CanvasState()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance CanvasState()
{
  return CRDT.init(serializedData:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CanvasState()
{
  return CRStruct_1.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CanvasState()
{
  return CRStruct_1.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CanvasState(uint64_t a1)
{
  uint64_t v2 = _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  return MEMORY[0x270F16F58](a1, v2);
}

PaperKit::TimestampedSelection::CodingKeys_optional __swiftcall TimestampedSelection.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 4;
  if ((unint64_t)rawValue < 4) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (PaperKit::TimestampedSelection::CodingKeys_optional)rawValue;
}

PaperKit::TimestampedSelection::CodingKeys_optional __swiftcall TimestampedSelection.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x6D617473656D6974 && stringValue._object == (void *)0xE900000000000070;
  if (v3
    || (object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x7069636974726170 && object == (void *)0xEB00000000746E61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 0x6C457361766E6163 && object == (void *)0xEE0073746E656D65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else if (countAndFlagsBits == 0x73656B6F727473 && object == (void *)0xE700000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 3;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 3;
    }
    else {
      char v7 = 4;
    }
  }
  *char v2 = v7;
  return result;
}

PaperKit::TimestampedSelection::CodingKeys_optional __swiftcall TimestampedSelection.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char v2 = 4;
  if ((unint64_t)intValue < 4) {
    char v2 = intValue;
  }
  *uint64_t v1 = v2;
  return (PaperKit::TimestampedSelection::CodingKeys_optional)intValue;
}

void *static TimestampedSelection.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static TimestampedSelection.CodingKeys.allCases.getter;
}

uint64_t TimestampedSelection.CodingKeys.intValue.getter()
{
  return *v0;
}

uint64_t TimestampedSelection.CodingKeys.rawValue.getter()
{
  return *v0;
}

uint64_t TimestampedSelection.CodingKeys.stringValue.getter()
{
  uint64_t result = 0x6D617473656D6974;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7069636974726170;
      break;
    case 2:
      uint64_t result = 0x6C457361766E6163;
      break;
    case 3:
      uint64_t result = 0x73656B6F727473;
      break;
    default:
      return result;
  }
  return result;
}

PaperKit::TimestampedSelection::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TimestampedSelection.CodingKeys(Swift::Int *a1)
{
  return TimestampedSelection.CodingKeys.init(rawValue:)(*a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimestampedSelection.CodingKeys()
{
  uint64_t result = 0x6D617473656D6974;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7069636974726170;
      break;
    case 2:
      uint64_t result = 0x6C457361766E6163;
      break;
    case 3:
      uint64_t result = 0x73656B6F727473;
      break;
    default:
      return result;
  }
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance TimestampedSelection.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance TimestampedSelection.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance TimestampedSelection.CodingKeys(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  unint64_t v5 = lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  return MEMORY[0x270F180C8](a1, a2, v4, v5);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimestampedSelection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimestampedSelection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TimestampedSelection.hash(into:)(uint64_t a1)
{
  Swift::UInt64 v3 = v1[3];
  uint64_t v4 = v1[4];
  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt v6 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    uint64_t v7 = *(void *)(type metadata accessor for CRKeyPath() - 8);
    Swift::UInt64 v8 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    swift_bridgeObjectRetain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v8 += v9;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t TimestampedSelection.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TimestampedSelection.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1[1];
  uint64_t v14 = v1[2];
  uint64_t v15 = v8;
  uint64_t v9 = v1[4];
  uint64_t v13 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = v13;
    LOBYTE(v17) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v17 = v10;
    char v16 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
    lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A](&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A], &lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v9;
    char v16 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
    lazy protocol witness table accessor for type [UUID] and conformance <A> [A](&lazy protocol witness table cache variable for type [UUID] and conformance <A> [A], &lazy protocol witness table cache variable for type UUID and conformance UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int TimestampedSelection.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[3];
  uint64_t v3 = v0[4];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt v5 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = *(void *)(type metadata accessor for CRKeyPath() - 8);
    Swift::UInt64 v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    swift_bridgeObjectRetain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v7 += v8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v10, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t TimestampedSelection.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TimestampedSelection.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.timeIntervalSinceReferenceDate.getter();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    LOBYTE(v20) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    LOBYTE(v20) = 1;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
    char v19 = 2;
    lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A](&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A], &lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = v12;
    uint64_t v15 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
    char v19 = 3;
    lazy protocol witness table accessor for type [UUID] and conformance <A> [A](&lazy protocol witness table cache variable for type [UUID] and conformance <A> [A], &lazy protocol witness table cache variable for type UUID and conformance UUID);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v16 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v10;
    a2[1] = v18;
    a2[2] = v14;
    a2[3] = v15;
    a2[4] = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimestampedSelection@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return TimestampedSelection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimestampedSelection(void *a1)
{
  return TimestampedSelection.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimestampedSelection()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 32);
  v4[9] = *(void *)v0;
  v4[10] = v1;
  long long v5 = *(_OWORD *)(v0 + 16);
  uint64_t v6 = v2;
  Hasher.init(_seed:)();
  TimestampedSelection.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance TimestampedSelection@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  *a1 = v2;
  a1[1] = v4;
  a1[2] = v3;
  a1[3] = v5;
  a1[4] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance TimestampedSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  unint64_t v7 = lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance TimestampedSelection()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance TimestampedSelection()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance TimestampedSelection(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t specialized static TimestampedSelection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  BOOL v6 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v2, v5) & 1) == 0)
  {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v3, v4);
}

unint64_t lazy protocol witness table accessor for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection.CodingKeys and conformance TimestampedSelection.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CRKeyPath] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CRKeyPath]);
    _s10Foundation4UUIDVACSHAAWlTm_1(a2, MEMORY[0x263F330F8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [UUID] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UUID]);
    _s10Foundation4UUIDVACSHAAWlTm_1(a2, MEMORY[0x263F07508]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CRStruct_Base_1 in CanvasState()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
}

uint64_t base witness table accessor for CRStruct_Base in CanvasState()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
}

uint64_t associated type witness table accessor for CRStruct_Base_1.Type_1 : CRDT in CanvasState()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRDictionary<UUID, TimestampedSelection> and conformance CRDictionary<A, B>, &demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
}

uint64_t base witness table accessor for CRDT in CanvasState()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
}

uint64_t base witness table accessor for CRMergeable in CanvasState()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
}

uint64_t base witness table accessor for CRType in CanvasState()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in CanvasState()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_1<CanvasState> and conformance CRStructMergeableDelta_1<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_1<CanvasState>);
}

uint64_t base witness table accessor for CRCodable in CanvasState()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TimestampedSelection.CodingKeys()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [TimestampedSelection.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [TimestampedSelection.CodingKeys]);
}

uint64_t *initializeBufferWithCopyOfBuffer for CanvasState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CanvasState(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C6FF7C4);
}

uint64_t sub_20C6FF7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CanvasState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C6FF89C);
}

uint64_t sub_20C6FF89C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for CanvasState()
{
  type metadata accessor for CRDictionary<UUID, TimestampedSelection>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for CRDictionary<UUID, TimestampedSelection>()
{
  if (!lazy cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>)
  {
    type metadata accessor for UUID();
    _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
    lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
    unint64_t v0 = type metadata accessor for CRDictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
    }
  }
}

uint64_t destroy for TimestampedSelection()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TimestampedSelection(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TimestampedSelection(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TimestampedSelection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimestampedSelection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimestampedSelection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TimestampedSelection()
{
  return &type metadata for TimestampedSelection;
}

unsigned char *storeEnumTagSinglePayload for TimestampedSelection.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C6FFDB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TimestampedSelection.CodingKeys()
{
  return &type metadata for TimestampedSelection.CodingKeys;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized ToolPickerControllerDelegate.addNewCanvasElement(_:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v174 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v164 = *(void *)(v161 - 8);
  uint64_t v4 = *(void *)(v164 + 64);
  MEMORY[0x270FA5388](v161);
  uint64_t v158 = (char *)v154 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v163 = (char *)v154 - v6;
  uint64_t v7 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v166 = (char *)v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v165 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v165 + 64);
  MEMORY[0x270FA5388](v9);
  id v11 = (char *)v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v154 - v13;
  uint64_t v15 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v154 - v19;
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v172 = *(void *)(v173 - 8);
  MEMORY[0x270FA5388](v173);
  uint64_t v22 = (char *)v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v167 = (char *)v154 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v168 = (char *)v154 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v160 = (char *)v154 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v170 = (uint64_t)v154 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v162 = (char *)v154 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v169 = (char *)v154 - v34;
  uint64_t v35 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v35);
  double v39 = MEMORY[0x270FA5388](v36);
  uint64_t v171 = (uint64_t)v154 - v40;
  switch(a1)
  {
    case 1:
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      id v42 = v169;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v179 = 0;
      uint64_t v43 = v170;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56))(v170, 1, 1, v173);
      uint64_t v178 = 0;
      uint64_t v44 = v171;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v42, (uint64_t *)&aBlock, &v179, v43, &v178, v171, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultEllipseShapeSize != -1) {
        swift_once();
      }
      uint64_t v47 = &static UIConstants.defaultEllipseShapeSize;
      goto LABEL_38;
    case 2:
      uint64_t v48 = 3;
      goto LABEL_22;
    case 3:
      if (one-time initialization token for defaultLine != -1) {
        swift_once();
      }
      long long aBlock = static UIConstants.defaultLine;
      long long v176 = *(_OWORD *)algn_2676E9690;
      long long v177 = xmmword_2676E96A0;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      int64_t v49 = v169;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v179 = 0;
      uint64_t v50 = v170;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56))(v170, 1, 1, v173);
      uint64_t v178 = 0;
      uint64_t v44 = v171;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v49, (uint64_t *)&aBlock, &v179, v50, &v178, v171, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultLineShapeSize != -1) {
        swift_once();
      }
      uint64_t v47 = &static UIConstants.defaultLineShapeSize;
      goto LABEL_38;
    case 4:
      long long aBlock = xmmword_20C847AF0;
      *(void *)&long long v176 = 0x3FD0000000000000;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v51 = v169;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v179 = 0;
      uint64_t v52 = v170;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56))(v170, 1, 1, v173);
      uint64_t v178 = 0;
      uint64_t v44 = v171;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v51, (uint64_t *)&aBlock, &v179, v52, &v178, v171, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultChatBubbleShapeSize != -1) {
        swift_once();
      }
      uint64_t v47 = &static UIConstants.defaultChatBubbleShapeSize;
      goto LABEL_38;
    case 5:
      if (one-time initialization token for defaultRoundedRect != -1) {
        swift_once();
      }
      *(void *)&long long aBlock = static UIConstants.defaultRoundedRect;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v41 = v169;
      TaggedValue_9.init(_:)();
      goto LABEL_18;
    case 6:
      uint64_t v48 = 6;
LABEL_22:
      *(void *)&long long aBlock = v48;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v54 = v169;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v179 = 0;
      uint64_t v55 = v170;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56))(v170, 1, 1, v173);
      uint64_t v178 = 0;
      uint64_t v44 = v171;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v54, (uint64_t *)&aBlock, &v179, v55, &v178, v171, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultRegularPolygonShapeSize != -1) {
        swift_once();
      }
      uint64_t v47 = &static UIConstants.defaultRegularPolygonShapeSize;
      goto LABEL_38;
    case 7:
      if (one-time initialization token for defaultStar != -1) {
        swift_once();
      }
      long long aBlock = static UIConstants.defaultStar;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v56 = v169;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v179 = 0;
      uint64_t v57 = v170;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56))(v170, 1, 1, v173);
      uint64_t v178 = 0;
      uint64_t v44 = v171;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v56, (uint64_t *)&aBlock, &v179, v57, &v178, v171, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultStarShapeSize != -1) {
        swift_once();
      }
      uint64_t v47 = &static UIConstants.defaultStarShapeSize;
      goto LABEL_38;
    case 8:
      if (one-time initialization token for defaultLine != -1) {
        swift_once();
      }
      long long aBlock = static UIConstants.defaultLine;
      long long v176 = *(_OWORD *)algn_2676E9690;
      long long v177 = xmmword_2676E96A0;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v58 = v169;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v179 = 0;
      uint64_t v59 = v170;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56))(v170, 1, 1, v173);
      uint64_t v178 = 0;
      uint64_t v60 = v171;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v58, (uint64_t *)&aBlock, &v179, v59, &v178, v171, 0.0, 0.0, 0.0, 0.0, 5.0);
      *(void *)&long long aBlock = 1;
      BYTE8(aBlock) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
      CRRegister.wrappedValue.setter();
      if (one-time initialization token for defaultLineShapeSize != -1) {
        swift_once();
      }
      v62.f64[0] = *((float64_t *)&static UIConstants.defaultLineShapeSize + 1);
      v61.n128_u64[0] = static UIConstants.defaultLineShapeSize;
      specialized ToolPickerControllerDelegate.addLine(_:size:)(v60, v61, v62);
      uint64_t v63 = type metadata accessor for Shape;
      uint64_t v64 = v60;
      return _s8PaperKit12GraphElementVWOhTm_0(v64, (uint64_t (*)(void))v63);
    case 9:
      long long aBlock = xmmword_20C847AE0;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v65 = v169;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v179 = 0;
      uint64_t v66 = v170;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56))(v170, 1, 1, v173);
      uint64_t v178 = 0;
      uint64_t v44 = v171;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v65, (uint64_t *)&aBlock, &v179, v66, &v178, v171, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultArrowShapeSize != -1) {
        swift_once();
      }
      uint64_t v47 = &static UIConstants.defaultArrowShapeSize;
      goto LABEL_38;
    case 10:
      uint64_t v169 = v37;
      uint64_t v170 = v38;
      uint64_t v68 = v174 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      double v69 = 0.0;
      double v70 = -0.5;
      if (MEMORY[0x210550400](v174 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate, v39))
      {
        uint64_t v71 = *(void *)(v68 + 8);
        uint64_t v72 = swift_getObjectType();
        uint64_t v73 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v71 + 16))(v72, v71);
        uint64_t v74 = swift_unknownObjectRelease();
        double v75 = -0.5;
        uint64_t v76 = v167;
        if (v73)
        {
          double v77 = (*(double (**)(uint64_t, double, double))((*MEMORY[0x263F8EED0] & *v73) + 0x6D0))(v74, 1.0, 1.0);
          double v79 = v78;
          double v69 = v80;

          double v70 = v77 + -0.5;
          double v75 = v79 + -0.5;
        }
      }
      else
      {
        double v75 = -0.5;
        uint64_t v76 = v167;
      }
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v181._object = (void *)0x800000020C85DDC0;
      v93._uint64_t countAndFlagsBits = 1954047316;
      v93._object = (void *)0xE400000000000000;
      v94.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v94.value._object = (void *)0xEB00000000656C62;
      v95._uint64_t countAndFlagsBits = 0;
      v95._object = (void *)0xE000000000000000;
      v181._uint64_t countAndFlagsBits = 0xD000000000000024;
      Swift::String v96 = NSLocalizedString(_:tableName:bundle:value:comment:)(v93, v94, paperKitBundle, v95, v181);
      uint64_t countAndFlagsBits = v96._countAndFlagsBits;
      if (one-time initialization token for defaultTextBoxAttributes != -1) {
        swift_once();
      }
      uint64_t v98 = MEMORY[0x210550400](v68);
      uint64_t v156 = v68;
      if (v98)
      {
        uint64_t v165 = v96._countAndFlagsBits;
        uint64_t v99 = *(void *)(v68 + 8);
        uint64_t v100 = swift_getObjectType();
        BOOL v101 = *(uint64_t (**)(uint64_t, uint64_t))(v99 + 16);
        swift_bridgeObjectRetain();
        uint64_t v102 = (void *)v101(v100, v99);
        uint64_t v103 = swift_unknownObjectRelease();
        double v104 = 1.0;
        if (v102)
        {
          (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v102) + 0x278))(v103);
          uint64_t v76 = v167;
          uint64_t countAndFlagsBits = v165;
          if (v105) {
            double v104 = AnyCanvas.scaleFactorForNewElements.getter();
          }
        }
        else
        {
          uint64_t v76 = v167;
          uint64_t countAndFlagsBits = v165;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        double v104 = 1.0;
      }
      id v115 = objc_allocWithZone(MEMORY[0x263F086A0]);
      uint64_t v116 = (void *)MEMORY[0x21054D080](countAndFlagsBits, v96._object);
      swift_bridgeObjectRelease();
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v118 = objc_msgSend(v115, sel_initWithString_attributes_, v116, isa);

      lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
      id v119 = v118;
      CRAttributedString.init(_:)();
      uint64_t v120 = v172;
      long long v121 = *(void (**)(char *, char *, uint64_t))(v172 + 32);
      uint64_t v122 = v173;
      uint64_t v165 = v172 + 32;
      uint64_t v157 = v121;
      v121(v76, v22, v173);
      long long v123 = *(void (**)(char *, char *, uint64_t))(v120 + 16);
      v123(v22, v76, v122);
      uint64_t v124 = CRAttributedString.count.getter();
      uint64_t v125 = *(void (**)(char *, uint64_t))(v120 + 8);
      v125(v22, v122);
      v154[1] = v120 + 8;
      v154[0] = v125;
      uint64_t v155 = v123;
      if (v124 <= 0)
      {

        v129 = 0;
      }
      else
      {
        v123(v22, v76, v122);
        uint64_t v126 = CRAttributedString.count.getter();
        v125(v22, v122);
        uint64_t v127 = swift_allocObject();
        *(double *)(v127 + 16) = v104;
        *(void *)(v127 + 24) = v76;
        uint64_t v128 = swift_allocObject();
        v129 = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
        *(void *)(v128 + 16) = partial apply for closure #1 in CRAttributedString<>.init(nsAttributedString:scale:);
        *(void *)(v128 + 24) = v127;
        *(void *)&long long v177 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        *((void *)&v177 + 1) = v128;
        *(void *)&long long aBlock = MEMORY[0x263EF8330];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v176 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        *((void *)&v176 + 1) = &block_descriptor_59;
        uint64_t v130 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v119, sel_enumerateAttributesInRange_options_usingBlock_, 0, v126, 0, v130);

        _Block_release(v130);
        char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation)
        {
          __break(1u);
          goto LABEL_83;
        }
        uint64_t v122 = v173;
        uint64_t v76 = v167;
      }
      v157(v168, v76, v122);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v129);
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v132 = v162;
      TaggedValue_9.init(_:)();
      memset(v180, 0, sizeof(v180));
      id v133 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
      if (!v133)
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      uint64_t v134 = v133;
      CGColorRef v135 = CGColorCreate(v133, (const CGFloat *)v180);

      uint64_t v136 = v164;
      uint64_t v137 = v163;
      uint64_t v138 = v156;
      if (!v135)
      {
LABEL_84:
        __break(1u);
        JUMPOUT(0x20C701F64);
      }
      *(void *)&long long aBlock = v135;
      uint64_t v179 = 0;
      uint64_t v139 = (uint64_t)v160;
      uint64_t v140 = v173;
      v155(v160, v168, v173);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v172 + 56))(v139, 0, 1, v140);
      uint64_t v141 = unk_26C14DAB0;
      if ((unk_26C14DAB0 & ~qword_26C14DAA8) == 0) {
        uint64_t v141 = 0;
      }
      uint64_t v178 = v141 | qword_26C14DAA8;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v132, (uint64_t *)&aBlock, &v179, v139, &v178, v170, v70, v75, 1.0, 1.0, 5.0);
      *(void *)&long long aBlock = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.wrappedValue.setter();
      CRRegister.value.getter();
      if (vabdd_f64(*(double *)&aBlock, v69) > 0.01)
      {
        *(double *)&long long aBlock = v69;
        CRRegister.value.setter();
      }
      _s8PaperKit12GraphElementVWOcTm_0(v170, v171, (uint64_t (*)(void))type metadata accessor for Shape);
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
      Capsule<>.init(_:id:)();
      uint64_t v142 = MEMORY[0x210550400](v138);
      uint64_t v143 = v161;
      uint64_t v144 = (uint64_t (*)(char *, uint64_t))v154[0];
      if (v142)
      {
        uint64_t v145 = *(void *)(v138 + 8);
        uint64_t v146 = swift_getObjectType();
        uint64_t v147 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v145 + 16))(v146, v145);
        swift_unknownObjectRelease();
        if (v147)
        {
          AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
          unint64_t v148 = v158;
          (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v158, v137, v143);
          unint64_t v149 = (*(unsigned __int8 *)(v136 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80);
          uint64_t v150 = swift_allocObject();
          (*(void (**)(unint64_t, char *, uint64_t))(v136 + 32))(v150 + v149, v148, v143);
          *(void *)(v150 + ((v4 + v149 + 7) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
          uint64_t v140 = v173;
          CanvasElementController.visibleCanvasInsertIfNeeded(completion:)((uint64_t (*)(void *))partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:), v150);
          swift_release();
        }
      }
      uint64_t v151 = (void *)CanvasElementController.recentlyAddedCanvasElement.getter();
      if (v151)
      {
        uint64_t v152 = v151;
        uint64_t v153 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v151) + 0x2D0))();

        if (v153)
        {
          *(unsigned char *)(*(void *)&v153[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics] + 17) = 12;
          swift_retain();
          FormTextFieldAnalytics.recordEvent()();

          swift_release();
        }
      }
      (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v143);
      _s8PaperKit12GraphElementVWOhTm_0(v170, (uint64_t (*)(void))type metadata accessor for Shape);
      return v144(v168, v140);
    case 11:
      if (one-time initialization token for defaultGraphSize != -1) {
        swift_once();
      }
      long long v81 = static UIConstants.defaultGraphSize;
      uint64_t v82 = v174 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      double v83 = 0.0;
      if (MEMORY[0x210550400](v174 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
      {
        uint64_t v173 = v82;
        uint64_t v84 = *(void *)(v82 + 8);
        uint64_t v85 = swift_getObjectType();
        uint64_t v86 = *(uint64_t (**)(uint64_t, uint64_t))(v84 + 16);
        uint64_t v87 = v84;
        uint64_t v82 = v173;
        double v88 = (void *)v86(v85, v87);
        uint64_t v89 = swift_unknownObjectRelease();
        double v90 = 0.0;
        uint64_t v91 = v165;
        if (v88)
        {
          double v83 = (*(double (**)(uint64_t, double, double))((*MEMORY[0x263F8EED0] & *v88) + 0x6D0))(v89, *(double *)&v81, *((double *)&v81 + 1));
          double v90 = v92;
        }
      }
      else
      {
        double v90 = 0.0;
        uint64_t v91 = v165;
      }
      double v106 = specialized static GraphElement.defaultVisibleRange.getter();
      GraphElement.init(frame:visibleRange:rotation:)((uint64_t)v20, v83 - *(double *)&v81 * 0.5, v90 - *((double *)&v81 + 1) * 0.5, *(double *)&v81, *((double *)&v81 + 1), v106, v107, v108, v109, 0);
      _s8PaperKit12GraphElementVWOcTm_0((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for GraphElement);
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
      Capsule<>.init(_:id:)();
      if (MEMORY[0x210550400](v82))
      {
        uint64_t v110 = *(void *)(v82 + 8);
        uint64_t v111 = swift_getObjectType();
        uint64_t v112 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v110 + 16))(v111, v110);
        swift_unknownObjectRelease();
        if (v112)
        {
          AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
          (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v11, v14, v9);
          unint64_t v113 = (*(unsigned __int8 *)(v91 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
          uint64_t v114 = swift_allocObject();
          (*(void (**)(unint64_t, char *, uint64_t))(v91 + 32))(v114 + v113, v11, v9);
          *(void *)(v114 + ((v10 + v113 + 7) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
          CanvasElementController.visibleCanvasInsertIfNeeded(completion:)((uint64_t (*)(void *))partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:), v114);
          swift_release();
        }
      }
      (*(void (**)(char *, uint64_t))(v91 + 8))(v14, v9);
      uint64_t v63 = type metadata accessor for GraphElement;
      uint64_t v64 = (uint64_t)v20;
      return _s8PaperKit12GraphElementVWOhTm_0(v64, (uint64_t (*)(void))v63);
    default:
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v41 = v169;
      TaggedValue_9.init(_:)();
LABEL_18:
      *(void *)&long long aBlock = 0;
      uint64_t v179 = 0;
      uint64_t v53 = v170;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56))(v170, 1, 1, v173);
      uint64_t v178 = 0;
      uint64_t v44 = v171;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v41, (uint64_t *)&aBlock, &v179, v53, &v178, v171, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultRectangleShapeSize != -1) {
        swift_once();
      }
      uint64_t v47 = &static UIConstants.defaultRectangleShapeSize;
LABEL_38:
      v45.f64[0] = *(float64_t *)v47;
      v46.n128_u64[0] = *((void *)v47 + 1);
      specialized ToolPickerControllerDelegate.addShape(_:size:)(v44, v45, v46);
      uint64_t v63 = type metadata accessor for Shape;
      uint64_t v64 = v44;
      return _s8PaperKit12GraphElementVWOhTm_0(v64, (uint64_t (*)(void))v63);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  long long *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)();
  uint64_t v60;
  char *v61;
  uint64_t v62;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  Swift::String v69;
  Swift::String_optional v70;
  Swift::String v71;
  Swift::String v72;
  id v73;
  void *v74;
  Class isa;
  id v76;
  uint64_t (*v77)();
  void (*v78)(char *, char *, uint64_t (*)());
  uint64_t (*v79)();
  void (*v80)(char *, char *, uint64_t (*)());
  uint64_t v81;
  void (*v82)(char *, uint64_t (*)());
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)();
  void *v87;
  id v88;
  long long v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  CGColorSpace *v104;
  CGColorSpace *v105;
  CGColorRef v106;
  double v107;
  double v108;
  uint64_t (*v109)();
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void v119[2];
  void (*v120)(char *, char *, uint64_t (*)());
  char *v121;
  void (*v122)(char *, char *, uint64_t (*)());
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)();
  uint64_t (*v142)();
  long long aBlock;
  long long v144;
  long long v145;
  uint64_t v146;
  uint64_t v147;
  _OWORD v148[2];
  Swift::String v149;

  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v125 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126);
  uint64_t v124 = (char *)v119 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v130);
  uint64_t v128 = (uint64_t)v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v129 = (char *)v119 - v5;
  id v133 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v133);
  uint64_t v132 = (char *)v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  CGColorRef v135 = *(void *)(v136 - 8);
  MEMORY[0x270FA5388](v136);
  uint64_t v134 = (char *)v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v131 = (char *)v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v127 = *(id *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v119 - v17;
  uint64_t v142 = (uint64_t (*)())__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v141 = (uint64_t (*)())*((void *)v142 - 1);
  MEMORY[0x270FA5388](v142);
  uint64_t v20 = (char *)v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)v119 - v22;
  MEMORY[0x270FA5388](v24);
  uint64_t v137 = (char *)v119 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)v119 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v139 = (uint64_t)v119 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v33 = (char *)v119 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v138 = (char *)v119 - v35;
  uint64_t v36 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v36);
  MEMORY[0x270FA5388](v37);
  uint64_t v140 = (uint64_t)v119 - v40;
  switch(a1)
  {
    case 1:
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      id v42 = v138;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v147 = 0;
      uint64_t v43 = v139;
      (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)()))v141 + 7))(v139, 1, 1, v142);
      uint64_t v146 = 0;
      uint64_t v44 = v140;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v42, (uint64_t *)&aBlock, &v147, v43, &v146, v140, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultEllipseShapeSize != -1) {
        swift_once();
      }
      float64x2_t v45 = &static UIConstants.defaultEllipseShapeSize;
      goto LABEL_38;
    case 2:
      __n128 v46 = 3;
      goto LABEL_22;
    case 3:
      if (one-time initialization token for defaultLine != -1) {
        swift_once();
      }
      long long aBlock = static UIConstants.defaultLine;
      uint64_t v144 = *(_OWORD *)algn_2676E9690;
      uint64_t v145 = xmmword_2676E96A0;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v47 = v138;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v147 = 0;
      uint64_t v48 = v139;
      (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)()))v141 + 7))(v139, 1, 1, v142);
      uint64_t v146 = 0;
      uint64_t v44 = v140;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v47, (uint64_t *)&aBlock, &v147, v48, &v146, v140, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultLineShapeSize != -1) {
        swift_once();
      }
      float64x2_t v45 = &static UIConstants.defaultLineShapeSize;
      goto LABEL_38;
    case 4:
      long long aBlock = xmmword_20C847AF0;
      *(void *)&uint64_t v144 = 0x3FD0000000000000;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      int64_t v49 = v138;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v147 = 0;
      uint64_t v50 = v139;
      (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)()))v141 + 7))(v139, 1, 1, v142);
      uint64_t v146 = 0;
      uint64_t v44 = v140;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v49, (uint64_t *)&aBlock, &v147, v50, &v146, v140, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultChatBubbleShapeSize != -1) {
        swift_once();
      }
      float64x2_t v45 = &static UIConstants.defaultChatBubbleShapeSize;
      goto LABEL_38;
    case 5:
      if (one-time initialization token for defaultRoundedRect != -1) {
        swift_once();
      }
      *(void *)&long long aBlock = static UIConstants.defaultRoundedRect;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v41 = v138;
      TaggedValue_9.init(_:)();
      goto LABEL_18;
    case 6:
      __n128 v46 = 6;
LABEL_22:
      *(void *)&long long aBlock = v46;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v52 = v138;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v147 = 0;
      uint64_t v53 = v139;
      (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)()))v141 + 7))(v139, 1, 1, v142);
      uint64_t v146 = 0;
      uint64_t v44 = v140;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v52, (uint64_t *)&aBlock, &v147, v53, &v146, v140, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultRegularPolygonShapeSize != -1) {
        swift_once();
      }
      float64x2_t v45 = &static UIConstants.defaultRegularPolygonShapeSize;
      goto LABEL_38;
    case 7:
      if (one-time initialization token for defaultStar != -1) {
        swift_once();
      }
      long long aBlock = static UIConstants.defaultStar;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v54 = v138;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v147 = 0;
      uint64_t v55 = v139;
      (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)()))v141 + 7))(v139, 1, 1, v142);
      uint64_t v146 = 0;
      uint64_t v44 = v140;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v54, (uint64_t *)&aBlock, &v147, v55, &v146, v140, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultStarShapeSize != -1) {
        swift_once();
      }
      float64x2_t v45 = &static UIConstants.defaultStarShapeSize;
      goto LABEL_38;
    case 8:
      if (one-time initialization token for defaultLine != -1) {
        swift_once();
      }
      long long aBlock = static UIConstants.defaultLine;
      uint64_t v144 = *(_OWORD *)algn_2676E9690;
      uint64_t v145 = xmmword_2676E96A0;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v56 = v138;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v147 = 0;
      uint64_t v57 = v139;
      (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)()))v141 + 7))(v139, 1, 1, v142);
      uint64_t v146 = 0;
      uint64_t v58 = v140;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v56, (uint64_t *)&aBlock, &v147, v57, &v146, v140, 0.0, 0.0, 0.0, 0.0, 5.0);
      *(void *)&long long aBlock = 1;
      BYTE8(aBlock) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
      CRRegister.wrappedValue.setter();
      if (one-time initialization token for defaultLineShapeSize != -1) {
        swift_once();
      }
      specialized ToolPickerControllerDelegate.addLine(_:size:)(v58, *(double *)&static UIConstants.defaultLineShapeSize, *((CGFloat *)&static UIConstants.defaultLineShapeSize + 1));
      uint64_t v59 = type metadata accessor for Shape;
      uint64_t v60 = v58;
      return _s8PaperKit12GraphElementVWOhTm_0(v60, (uint64_t (*)(void))v59);
    case 9:
      long long aBlock = xmmword_20C847AE0;
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      __n128 v61 = v138;
      TaggedValue_9.init(_:)();
      *(void *)&long long aBlock = 0;
      uint64_t v147 = 0;
      float64x2_t v62 = v139;
      (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)()))v141 + 7))(v139, 1, 1, v142);
      uint64_t v146 = 0;
      uint64_t v44 = v140;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v61, (uint64_t *)&aBlock, &v147, v62, &v146, v140, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultArrowShapeSize != -1) {
        swift_once();
      }
      float64x2_t v45 = &static UIConstants.defaultArrowShapeSize;
      goto LABEL_38;
    case 10:
      uint64_t v138 = v38;
      uint64_t v139 = v39;
      uint64_t v64 = InlineDrawingCanvasElementController.suggestedPositionForNewCanvasElement(withSize:)(1.0, 1.0);
      uint64_t v66 = v65;
      uint64_t v68 = v67;
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v149._object = (void *)0x800000020C85DDC0;
      v69._uint64_t countAndFlagsBits = 1954047316;
      v69._object = (void *)0xE400000000000000;
      v70.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v70.value._object = (void *)0xEB00000000656C62;
      v71._uint64_t countAndFlagsBits = 0;
      v71._object = (void *)0xE000000000000000;
      v149._uint64_t countAndFlagsBits = 0xD000000000000024;
      uint64_t v72 = NSLocalizedString(_:tableName:bundle:value:comment:)(v69, v70, paperKitBundle, v71, v149);
      if (one-time initialization token for defaultTextBoxAttributes != -1) {
        swift_once();
      }
      uint64_t v73 = objc_allocWithZone(MEMORY[0x263F086A0]);
      swift_bridgeObjectRetain();
      uint64_t v74 = (void *)MEMORY[0x21054D080](v72._countAndFlagsBits, v72._object);
      swift_bridgeObjectRelease();
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v76 = objc_msgSend(v73, sel_initWithString_attributes_, v74, isa);

      lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
      uint64_t v127 = v76;
      CRAttributedString.init(_:)();
      double v77 = v141;
      double v78 = (void (*)(char *, char *, uint64_t (*)()))*((void *)v141 + 4);
      double v79 = v142;
      long long v123 = (char *)v141 + 32;
      uint64_t v122 = v78;
      v78(v23, v20, v142);
      double v80 = (void (*)(char *, char *, uint64_t (*)()))*((void *)v77 + 2);
      v80(v20, v23, v79);
      long long v81 = CRAttributedString.count.getter();
      uint64_t v82 = (void (*)(char *, uint64_t (*)()))*((void *)v77 + 1);
      v82(v20, v79);
      v119[1] = (char *)v77 + 8;
      v119[0] = v82;
      long long v121 = (char *)v77 + 16;
      uint64_t v120 = v80;
      if (v81 <= 0)
      {

        uint64_t v86 = 0;
      }
      else
      {
        v80(v20, v23, v79);
        double v83 = CRAttributedString.count.getter();
        v82(v20, v79);
        uint64_t v84 = swift_allocObject();
        *(void *)(v84 + 16) = 0x3FF0000000000000;
        *(void *)(v84 + 24) = v23;
        uint64_t v85 = swift_allocObject();
        uint64_t v86 = closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)partial apply;
        *(void *)(v85 + 16) = closure #1 in CRAttributedString<>.init(nsAttributedString:scale:)partial apply;
        *(void *)(v85 + 24) = v84;
        *(void *)&uint64_t v145 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
        *((void *)&v145 + 1) = v85;
        *(void *)&long long aBlock = MEMORY[0x263EF8330];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&uint64_t v144 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        *((void *)&v144 + 1) = &block_descriptor_42_2;
        uint64_t v87 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        double v88 = v127;
        objc_msgSend(v127, sel_enumerateAttributesInRange_options_usingBlock_, 0, v83, 0, v87);

        _Block_release(v87);
        LOBYTE(v88) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (v88)
        {
          __break(1u);
          goto LABEL_59;
        }
        double v79 = v142;
      }
      v122(v137, v23, v79);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v86);
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      TaggedValue_9.init(_:)();
      memset(v148, 0, sizeof(v148));
      double v104 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
      if (!v104)
      {
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      char v105 = v104;
      double v106 = CGColorCreate(v104, (const CGFloat *)v148);

      if (!v106)
      {
LABEL_60:
        __break(1u);
        JUMPOUT(0x20C704320);
      }
      double v107 = v64 + -0.5;
      double v108 = v66 + -0.5;
      *(void *)&long long aBlock = v106;
      uint64_t v147 = 0;
      double v109 = v142;
      v120(v28, v137, v142);
      (*((void (**)(char *, void, uint64_t, uint64_t (*)()))v141 + 7))(v28, 0, 1, v109);
      uint64_t v110 = unk_26C14DB20;
      if ((unk_26C14DB20 & ~qword_26C14DB18) == 0) {
        uint64_t v110 = 0;
      }
      uint64_t v146 = v110 | qword_26C14DB18;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v33, (uint64_t *)&aBlock, &v147, (uint64_t)v28, &v146, v139, v107, v108, 1.0, 1.0, 5.0);
      *(void *)&long long aBlock = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.wrappedValue.setter();
      CRRegister.value.getter();
      if (vabdd_f64(*(double *)&aBlock, v68) > 0.01)
      {
        *(double *)&long long aBlock = v68;
        CRRegister.value.setter();
      }
      uint64_t v141 = type metadata accessor for Shape;
      _s8PaperKit12GraphElementVWOcTm_0(v139, v140, (uint64_t (*)(void))type metadata accessor for Shape);
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
      uint64_t v111 = v124;
      Capsule<>.init(_:id:)();
      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
      long long aBlock = 0u;
      uint64_t v144 = 0u;
      uint64_t v112 = v132;
      CRRegister.init(wrappedValue:)();
      unint64_t v113 = v133;
      long long aBlock = 0u;
      uint64_t v144 = 0u;
      CRRegister.init(wrappedValue:)();
      *(void *)&long long aBlock = 0;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      CRRegister.init(wrappedValue:)();
      uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      id v115 = (uint64_t)v129;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v114 - 8) + 56))(v129, 1, 1, v114);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v115, v128, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v115, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      *(void *)&long long aBlock = 0;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
      lazy protocol witness table accessor for type Color? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      *(void *)&long long aBlock = 0;
      *((void *)&aBlock + 1) = 0xE000000000000000;
      CRRegister.init(wrappedValue:)();
      *(void *)&long long aBlock = 0;
      lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
      CRRegister.init(wrappedValue:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      CROrderedSet.init()();
      *(void *)&v112[*(int *)(v113 + 48)] = MEMORY[0x263F8EE80];
      CRKeyPath.init(_:)();
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      uint64_t v116 = (uint64_t)v134;
      uint64_t v117 = Capsule<>.init(_:id:)();
      MEMORY[0x270FA5388](v117);
      id v118 = v136;
      Capsule.mutate<A>(_:)();
      InlineDrawingCanvasElementController.upgradePaper(_:)(v116);
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v116, v118);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v111, v126);
      _s8PaperKit12GraphElementVWOhTm_0(v139, (uint64_t (*)(void))v141);
      return ((uint64_t (*)(char *, uint64_t (*)()))v119[0])(v137, v109);
    case 11:
      if (one-time initialization token for defaultGraphSize != -1) {
        swift_once();
      }
      uint64_t v89 = static UIConstants.defaultGraphSize;
      double v90 = InlineDrawingCanvasElementController.suggestedPositionForNewCanvasElement(withSize:)(*(double *)&static UIConstants.defaultGraphSize, *((CGFloat *)&static UIConstants.defaultGraphSize + 1))- *(double *)&v89 * 0.5;
      double v92 = v91 - *((double *)&v89 + 1) * 0.5;
      Swift::String v93 = specialized static GraphElement.defaultVisibleRange.getter();
      GraphElement.init(frame:visibleRange:rotation:)((uint64_t)v18, v90, v92, *(double *)&v89, *((double *)&v89 + 1), v93, v94, v95, v96, 0);
      uint64_t v142 = type metadata accessor for GraphElement;
      _s8PaperKit12GraphElementVWOcTm_0((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for GraphElement);
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
      Capsule<>.init(_:id:)();
      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
      long long aBlock = 0u;
      uint64_t v144 = 0u;
      long long v97 = v132;
      CRRegister.init(wrappedValue:)();
      uint64_t v98 = v133;
      long long aBlock = 0u;
      uint64_t v144 = 0u;
      CRRegister.init(wrappedValue:)();
      *(void *)&long long aBlock = 0;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      CRRegister.init(wrappedValue:)();
      uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      uint64_t v100 = (uint64_t)v129;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v129, 1, 1, v99);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v100, v128, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v100, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      *(void *)&long long aBlock = 0;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
      lazy protocol witness table accessor for type Color? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      *(void *)&long long aBlock = 0;
      *((void *)&aBlock + 1) = 0xE000000000000000;
      CRRegister.init(wrappedValue:)();
      *(void *)&long long aBlock = 0;
      lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
      CRRegister.init(wrappedValue:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      CROrderedSet.init()();
      *(void *)&v97[*(int *)(v98 + 48)] = MEMORY[0x263F8EE80];
      CRKeyPath.init(_:)();
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      BOOL v101 = (uint64_t)v134;
      uint64_t v102 = Capsule<>.init(_:id:)();
      MEMORY[0x270FA5388](v102);
      uint64_t v103 = v136;
      Capsule.mutate<A>(_:)();
      InlineDrawingCanvasElementController.upgradePaper(_:)(v101);
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v101, v103);
      (*((void (**)(char *, uint64_t))v127 + 1))(v12, v10);
      uint64_t v60 = (uint64_t)v18;
      uint64_t v59 = v142;
      return _s8PaperKit12GraphElementVWOhTm_0(v60, (uint64_t (*)(void))v59);
    default:
      lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
      lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
      lazy protocol witness table accessor for type Line and conformance Line();
      lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
      lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
      lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
      lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
      lazy protocol witness table accessor for type Star and conformance Star();
      lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
      uint64_t v41 = v138;
      TaggedValue_9.init(_:)();
LABEL_18:
      *(void *)&long long aBlock = 0;
      uint64_t v147 = 0;
      uint64_t v51 = v139;
      (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)()))v141 + 7))(v139, 1, 1, v142);
      uint64_t v146 = 0;
      uint64_t v44 = v140;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v41, (uint64_t *)&aBlock, &v147, v51, &v146, v140, 0.0, 0.0, 0.0, 0.0, 5.0);
      if (one-time initialization token for defaultRectangleShapeSize != -1) {
        swift_once();
      }
      float64x2_t v45 = &static UIConstants.defaultRectangleShapeSize;
LABEL_38:
      specialized ToolPickerControllerDelegate.addShape(_:size:)(v44, *(double *)v45, *((CGFloat *)v45 + 1));
      uint64_t v59 = type metadata accessor for Shape;
      uint64_t v60 = v44;
      return _s8PaperKit12GraphElementVWOhTm_0(v60, (uint64_t (*)(void))v59);
  }
}

void ToolPickerControllerDelegate.addNewSignatureItem(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  MEMORY[0x270FA5388](v11);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v44 - v15;
  if (a1)
  {
    uint64_t v46 = v13;
    uint64_t v47 = v8;
    uint64_t v48 = v14;
    id v17 = a1;
    double v18 = SignatureItem.size.getter();
    double v20 = 400.0 / v18;
    if (400.0 / v18 > 1.0) {
      double v20 = 1.0;
    }
    double v21 = v18 * v20;
    double v22 = v19 * v20;
    double v23 = 72.0 / v22;
    if (72.0 / v22 > 1.0) {
      double v23 = 1.0;
    }
    double v24 = (*(double (**)(uint64_t, uint64_t, double, double))(a3 + 104))(a2, a3, v21 * v23, v22 * v23);
    double v26 = v25;
    double v27 = (*(double (**)(uint64_t, uint64_t))(a3 + 96))(a2, a3);
    double v29 = v28;
    uint64_t v31 = v30;
    type metadata accessor for SignatureManager();
    swift_initStaticObject();
    id v50 = v17;
    uint64_t v32 = SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)((uint64_t)v17, 0, 1, 0, 1, v27, v29);
    uint64_t v49 = a2;
    MEMORY[0x270FA5388](v32);
    *(double *)&v44[-6] = v27 - v24 * 0.5;
    *(double *)&v44[-5] = v29 - v26 * 0.5;
    *(double *)&v44[-4] = v24;
    *(double *)&v44[-3] = v26;
    v44[-2] = v31;
    Capsule.callAsFunction<A>(_:)();
    v44[1] = 0;
    uint64_t v33 = v48;
    float64x2_t v45 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
    v45(v48, v16, v9);
    swift_getKeyPath();
    uint64_t v34 = v16;
    uint64_t v35 = lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v36(v33, v9);
    if (v52 != 1) {
      goto LABEL_12;
    }
    uint64_t v48 = a3;
    uint64_t v37 = v46;
    v44[0] = v34;
    v45(v46, v34, v9);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v36(v37, v9);
    uint64_t v38 = v51;
    if (v51)
    {
      uint64_t v39 = (uint64_t)v47;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v51 + OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing, (uint64_t)v47, &demangling cache variable for type metadata for PKDrawing?);

      uint64_t v40 = type metadata accessor for PKDrawing();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v39, 1, v40) != 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for PKDrawing?);
        uint64_t v34 = (char *)v44[0];
        Capsule.callAsFunction<A>(_:)();
        a3 = v48;
LABEL_12:
        id v42 = *(void (**)(char *, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(a3 + 72);
        uint64_t v43 = type metadata accessor for Signature();
        v42(v34, v43, v35, &protocol witness table for Signature, v49, a3);

        v36((uint64_t)v34, v9);
        return;
      }
    }
    else
    {
      uint64_t v41 = type metadata accessor for PKDrawing();
      uint64_t v39 = (uint64_t)v47;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v47, 1, 1, v41);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for PKDrawing?);
    a3 = v48;
    uint64_t v34 = (char *)v44[0];
    goto LABEL_12;
  }
}

void specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v6 = a1;
    specialized static CanvasElementController.makeCanvasFirstResponder(_:)(v6);
    int v3 = *(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *v6)
                                                                                                + 0x490);
    uint64_t v4 = type metadata accessor for Signature();
    uint64_t v5 = lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
    v3(a2, 1, 0, 0, v4, v5, &protocol witness table for Signature);
  }
}

{
  void (*v3)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t vars8;

  if (a1)
  {
    uint64_t v6 = a1;
    specialized static CanvasElementController.makeCanvasFirstResponder(_:)(v6);
    int v3 = *(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *v6)
                                                                                                + 0x490);
    uint64_t v4 = type metadata accessor for Shape();
    uint64_t v5 = lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    v3(a2, 1, 0, 0, v4, v5, &protocol witness table for Shape);
  }
}

{
  void (*v3)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t vars8;

  if (a1)
  {
    uint64_t v6 = a1;
    specialized static CanvasElementController.makeCanvasFirstResponder(_:)(v6);
    int v3 = *(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x263F8EED0] & *v6)
                                                                                                + 0x490);
    uint64_t v4 = type metadata accessor for GraphElement();
    uint64_t v5 = lazy protocol witness table accessor for type GraphElement and conformance GraphElement(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
    v3(a2, 1, 0, 0, v4, v5, &protocol witness table for GraphElement);
  }
}

void specialized ToolPickerControllerDelegate.addLine(_:size:)(uint64_t a1, __n128 a2, float64x2_t a3)
{
  uint64_t v4 = v3;
  __n128 v68 = a2;
  float64x2_t v69 = a3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v7 = *(void *)(v66 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v66);
  uint64_t v63 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v61 - v10;
  uint64_t v12 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  id v17 = (char *)&v61 - v16;
  _s8PaperKit12GraphElementVWOcTm_0(a1, (uint64_t)&v61 - v16, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v65 = v4;
  uint64_t v18 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  uint64_t v19 = MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate);
  *(void *)&v20.f64[0] = v68.n128_u64[0];
  v20.f64[1] = v69.f64[0];
  float64x2_t v69 = v20;
  uint64_t v67 = v11;
  if (v19)
  {
    uint64_t v21 = *(void *)(v18 + 8);
    uint64_t v22 = swift_getObjectType();
    double v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v22, v21);
    swift_unknownObjectRelease();
    if (v23)
    {
      id v24 = objc_msgSend(v23, sel_window);
      if (v24)
      {
        double v26 = v24;
        id v27 = objc_msgSend(v24, sel_screen);

        objc_msgSend(v27, sel_scale);
        long long v61 = v28;
      }
      else
      {
        *(void *)&long long v25 = 1.0;
        long long v61 = v25;
      }
      uint64_t v11 = v67;
      *(double *)&long long v29 = AnyCanvas.scaleFactorForNewElements.getter();
      long long v62 = v29;

      float64x2_t v30 = vmulq_n_f64(vmulq_n_f64(v69, *(double *)&v62), *(double *)&v61);
      float64x2_t v31 = vrndmq_f64(v30);
      float64x2_t v69 = vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v30, v31), (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL)), (int8x16_t)vrndpq_f64(v30), (int8x16_t)v31), (float64x2_t)vdupq_lane_s64(v61, 0));
    }
    else
    {
      uint64_t v11 = v67;
    }
  }
  uint64_t v32 = MEMORY[0x210550400](v18);
  float64x2_t v33 = 0uLL;
  double v34 = 0.0;
  if (v32)
  {
    uint64_t v35 = *(void *)(v18 + 8);
    uint64_t v36 = swift_getObjectType();
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 16);
    uint64_t v38 = v35;
    uint64_t v11 = v67;
    uint64_t v39 = (void *)v37(v36, v38);
    uint64_t v40 = swift_unknownObjectRelease();
    float64x2_t v33 = 0uLL;
    if (v39)
    {
      *(double *)&long long v41 = (*(double (**)(uint64_t, float64x2_t, float64_t, __n128))((*MEMORY[0x263F8EED0] & *v39)
                                                                                          + 0x6D0))(v40, v69, v69.f64[1], (__n128)0);
      long long v61 = v41;
      long long v62 = v42;
      double v34 = v43;

      *(void *)&v33.f64[0] = v61;
      *(void *)&v33.f64[1] = v62;
    }
  }
  double v44 = v69.f64[0] / v68.n128_f64[0];
  __asm { FMOV            V0.2D, #-0.5 }
  float64x2_t v71 = vaddq_f64(v33, vmulq_f64(v69, _Q0));
  float64x2_t v72 = v69;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(v71.f64[0], v34) > 0.01)
  {
    v71.f64[0] = v34;
    CRRegister.value.setter();
  }
  CRRegister.wrappedValue.getter();
  v71.f64[0] = fmax(round(v44 * v71.f64[0]), 1.0);
  CRRegister.wrappedValue.setter();
  memset(v70, 0, 24);
  v70[3] = 1.0;
  id v50 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (!v50)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v51 = v50;
  CGColorRef v52 = CGColorCreate(v50, v70);

  if (!v52)
  {
LABEL_20:
    __break(1u);
    return;
  }
  *(void *)&v71.f64[0] = v52;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.setter();
  _s8PaperKit12GraphElementVWOcTm_0((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Shape);
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.init(_:id:)();
  uint64_t v53 = MEMORY[0x210550400](v18);
  uint64_t v54 = v66;
  if (v53)
  {
    uint64_t v55 = *(void *)(v18 + 8);
    uint64_t v56 = swift_getObjectType();
    uint64_t v57 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v55 + 16))(v56, v55);
    swift_unknownObjectRelease();
    if (v57)
    {
      AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
      uint64_t v58 = v63;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v63, v11, v54);
      unint64_t v59 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v60 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v60 + v59, v58, v54);
      *(void *)(v60 + ((v8 + v59 + 7) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
      uint64_t v11 = v67;
      CanvasElementController.visibleCanvasInsertIfNeeded(completion:)((uint64_t (*)(void *))partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:), v60);
      swift_release();
    }
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v54);
  _s8PaperKit12GraphElementVWOhTm_0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Shape);
}

void specialized ToolPickerControllerDelegate.addLine(_:size:)(uint64_t a1, double a2, CGFloat a3)
{
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v38);
  uint64_t v37 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v42 = *(void *)(v14 - 8);
  uint64_t v43 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v40 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v39 = (uint64_t (*)())((char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  id v24 = (char *)&v36 - v23;
  _s8PaperKit12GraphElementVWOcTm_0(a1, (uint64_t)&v36 - v23, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v44 = v3;
  double v25 = InlineDrawingCanvasElementController.suggestedPositionForNewCanvasElement(withSize:)(a2, a3);
  double v27 = v26;
  *(double *)&long long v46 = v25 - a2 * 0.5;
  *((double *)&v46 + 1) = v28 - a3 * 0.5;
  *(double *)&long long v47 = a2;
  *((CGFloat *)&v47 + 1) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(*(double *)&v46, v27) > 0.01)
  {
    *(double *)&long long v46 = v27;
    CRRegister.value.setter();
  }
  CRRegister.wrappedValue.getter();
  *(void *)&long long v46 = fmax(round(a2 / a2 * *(double *)&v46), 1.0);
  CRRegister.wrappedValue.setter();
  memset(v45, 0, 24);
  v45[3] = 1.0;
  long long v29 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (v29)
  {
    float64x2_t v30 = v29;
    CGColorRef v31 = CGColorCreate(v29, v45);

    if (v31)
    {
      *(void *)&long long v46 = v31;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.setter();
      uint64_t v36 = type metadata accessor for Shape;
      _s8PaperKit12GraphElementVWOcTm_0((uint64_t)v24, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Shape);
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
      uint64_t v32 = v39;
      Capsule<>.init(_:id:)();
      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
      long long v46 = 0u;
      long long v47 = 0u;
      CRRegister.init(wrappedValue:)();
      long long v46 = 0u;
      long long v47 = 0u;
      CRRegister.init(wrappedValue:)();
      *(void *)&long long v46 = 0;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      CRRegister.init(wrappedValue:)();
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v10, 1, 1, v33);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, v37, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      *(void *)&long long v46 = 0;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
      lazy protocol witness table accessor for type Color? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      *(void *)&long long v46 = 0;
      *((void *)&v46 + 1) = 0xE000000000000000;
      CRRegister.init(wrappedValue:)();
      *(void *)&long long v46 = 0;
      lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
      CRRegister.init(wrappedValue:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      CROrderedSet.init()();
      *(void *)&v13[*(int *)(v11 + 48)] = MEMORY[0x263F8EE80];
      CRKeyPath.init(_:)();
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      uint64_t v34 = Capsule<>.init(_:id:)();
      MEMORY[0x270FA5388](v34);
      *(&v36 - 2) = v32;
      uint64_t v35 = v43;
      Capsule.mutate<A>(_:)();
      InlineDrawingCanvasElementController.upgradePaper(_:)((uint64_t)v16);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v35);
      (*(void (**)(uint64_t (*)(), uint64_t))(v40 + 8))(v32, v41);
      _s8PaperKit12GraphElementVWOhTm_0((uint64_t)v24, (uint64_t (*)(void))v36);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void specialized ToolPickerControllerDelegate.addShape(_:size:)(uint64_t a1, float64x2_t a2, __n128 a3)
{
  uint64_t v4 = v3;
  __n128 v70 = a3;
  float64x2_t v71 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v7 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v65 = v8;
  uint64_t v66 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v64 - v10;
  uint64_t v12 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v64 - v16;
  _s8PaperKit12GraphElementVWOcTm_0(a1, (uint64_t)&v64 - v16, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v68 = v4;
  uint64_t v18 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  uint64_t v19 = MEMORY[0x210550400](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate);
  v20.f64[0] = v71.f64[0];
  *(void *)&v20.f64[1] = v70.n128_u64[0];
  float64x2_t v71 = v20;
  if (v19)
  {
    uint64_t v21 = *(void *)(v18 + 8);
    uint64_t v22 = swift_getObjectType();
    uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v22, v21);
    swift_unknownObjectRelease();
    if (v23)
    {
      id v24 = objc_msgSend(v23, sel_window);
      if (v24)
      {
        double v26 = v24;
        double v27 = v11;
        id v28 = objc_msgSend(v24, sel_screen);

        objc_msgSend(v28, sel_scale);
        long long v64 = v29;

        uint64_t v11 = v27;
      }
      else
      {
        *(void *)&long long v25 = 1.0;
        long long v64 = v25;
      }
      v30.n128_f64[0] = AnyCanvas.scaleFactorForNewElements.getter();
      __n128 v70 = v30;

      float64x2_t v31 = vmulq_n_f64(vmulq_n_f64(v71, v70.n128_f64[0]), *(double *)&v64);
      float64x2_t v32 = vrndmq_f64(v31);
      float64x2_t v71 = vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v31, v32), (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL)), (int8x16_t)vrndpq_f64(v31), (int8x16_t)v32), (float64x2_t)vdupq_lane_s64(v64, 0));
    }
  }
  uint64_t v33 = MEMORY[0x210550400](v18);
  float64x2_t v34 = 0uLL;
  double v35 = 0.0;
  if (v33)
  {
    uint64_t v36 = v11;
    uint64_t v37 = *(void *)(v18 + 8);
    uint64_t v38 = swift_getObjectType();
    uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 16);
    uint64_t v40 = v37;
    uint64_t v11 = v36;
    uint64_t v41 = (void *)v39(v38, v40);
    uint64_t v42 = swift_unknownObjectRelease();
    float64x2_t v34 = 0uLL;
    if (v41)
    {
      *(double *)&long long v43 = (*(double (**)(uint64_t, float64x2_t, float64_t, __n128))((*MEMORY[0x263F8EED0] & *v41)
                                                                                          + 0x6D0))(v42, v71, v71.f64[1], (__n128)0);
      long long v64 = v43;
      __n128 v70 = v44;
      double v35 = v45;

      *(void *)&v34.f64[0] = v64;
      *(void *)&v34.f64[1] = v70.n128_u64[0];
    }
  }
  __asm { FMOV            V0.2D, #-0.5 }
  float64x2_t v72 = vaddq_f64(v34, vmulq_f64(v71, _Q0));
  float64x2_t v73 = v71;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(v72.f64[0], v35) > 0.01)
  {
    v72.f64[0] = v35;
    CRRegister.value.setter();
  }
  uint64_t v51 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (!v51)
  {
    __break(1u);
    goto LABEL_19;
  }
  CGColorRef v52 = v51;
  CGColorRef v53 = CGColorCreate(v51, dbl_26C14DA68);

  if (!v53)
  {
LABEL_19:
    __break(1u);
    return;
  }
  *(void *)&v72.f64[0] = v53;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.setter();
  _s8PaperKit12GraphElementVWOcTm_0((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Shape);
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.init(_:id:)();
  uint64_t v54 = MEMORY[0x210550400](v18);
  uint64_t v55 = v69;
  if (v54)
  {
    uint64_t v56 = *(void *)(v18 + 8);
    uint64_t v57 = swift_getObjectType();
    uint64_t v58 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v56 + 16))(v57, v56);
    swift_unknownObjectRelease();
    if (v58)
    {
      AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
      unint64_t v59 = v66;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v66, v11, v55);
      unint64_t v60 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      long long v61 = v11;
      unint64_t v62 = (v65 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v63 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v63 + v60, v59, v55);
      *(void *)(v63 + v62) = ObjectType;
      uint64_t v11 = v61;
      CanvasElementController.visibleCanvasInsertIfNeeded(completion:)((uint64_t (*)(void *))partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:), v63);
      swift_release();
    }
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v55);
  _s8PaperKit12GraphElementVWOhTm_0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Shape);
}

void specialized ToolPickerControllerDelegate.addShape(_:size:)(uint64_t a1, double a2, CGFloat a3)
{
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v39);
  uint64_t v38 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v43 = *(void *)(v14 - 8);
  uint64_t v44 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v41 = *(void *)(v18 - 8);
  uint64_t v42 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v40 = (uint64_t (*)())((char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  long long v25 = (char *)&v37 - v24;
  _s8PaperKit12GraphElementVWOcTm_0(a1, (uint64_t)&v37 - v24, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v45 = v3;
  double v26 = InlineDrawingCanvasElementController.suggestedPositionForNewCanvasElement(withSize:)(a2, a3);
  double v28 = v27;
  *(double *)&long long v46 = v26 - a2 * 0.5;
  *((double *)&v46 + 1) = v29 - a3 * 0.5;
  *(double *)&long long v47 = a2;
  *((CGFloat *)&v47 + 1) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(*(double *)&v46, v28) > 0.01)
  {
    *(double *)&long long v46 = v28;
    CRRegister.value.setter();
  }
  __n128 v30 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F00238]);
  if (v30)
  {
    float64x2_t v31 = v30;
    CGColorRef v32 = CGColorCreate(v30, dbl_26C14DAD8);

    if (v32)
    {
      *(void *)&long long v46 = v32;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.setter();
      uint64_t v37 = type metadata accessor for Shape;
      _s8PaperKit12GraphElementVWOcTm_0((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Shape);
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
      uint64_t v33 = v40;
      Capsule<>.init(_:id:)();
      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
      long long v46 = 0u;
      long long v47 = 0u;
      CRRegister.init(wrappedValue:)();
      long long v46 = 0u;
      long long v47 = 0u;
      CRRegister.init(wrappedValue:)();
      *(void *)&long long v46 = 0;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      CRRegister.init(wrappedValue:)();
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v10, 1, 1, v34);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, v38, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      *(void *)&long long v46 = 0;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
      lazy protocol witness table accessor for type Color? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      *(void *)&long long v46 = 0;
      *((void *)&v46 + 1) = 0xE000000000000000;
      CRRegister.init(wrappedValue:)();
      *(void *)&long long v46 = 0;
      lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
      CRRegister.init(wrappedValue:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      CROrderedSet.init()();
      *(void *)&v13[*(int *)(v11 + 48)] = MEMORY[0x263F8EE80];
      CRKeyPath.init(_:)();
      lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      uint64_t v35 = Capsule<>.init(_:id:)();
      MEMORY[0x270FA5388](v35);
      *(&v37 - 2) = v33;
      uint64_t v36 = v44;
      Capsule.mutate<A>(_:)();
      InlineDrawingCanvasElementController.upgradePaper(_:)((uint64_t)v16);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v36);
      (*(void (**)(uint64_t (*)(), uint64_t))(v41 + 8))(v33, v42);
      _s8PaperKit12GraphElementVWOhTm_0((uint64_t)v25, (uint64_t (*)(void))v37);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t closure #1 in ToolPickerControllerDelegate.addNewSignatureItem(_:)()
{
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #2 in ToolPickerControllerDelegate.addNewSignatureItem(_:)()
{
  return Capsule.Ref<>.subscript.setter();
}

uint64_t specialized closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a1;
  uint64_t v34 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  CGColorRef v32 = (char *)&KeyPath - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&KeyPath - v6;
  uint64_t v8 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v8);
  __n128 v30 = (char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v33 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v11 = (char *)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v35 = (char *)&KeyPath - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&KeyPath - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Shape>);
  uint64_t v36 = *(void *)(v31 - 8);
  double v18 = MEMORY[0x270FA5388](v31);
  uint64_t v20 = (char *)&KeyPath - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, a2, v14, v18);
  lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  swift_retain();
  Ref.init<A>(_:_:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = (uint64_t)v30;
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v38) = 5;
  uint64_t v22 = v34;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v32, v7, v34);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v22);
  _s8PaperKit12GraphElementVWOhTm_0(v21, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v23 = v42;
  SharedTagged_9.tag.getter();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v33 + 8);
  v24(v11, v23);
  uint64_t v40 = v38;
  char v41 = v39;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<Shape> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<Shape>);
  uint64_t v25 = v31;
  Reference.identity.getter();
  double v26 = v35;
  SharedTagged_9.init(_:id:)();
  lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  double v27 = (void (*)(uint64_t *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  v24(v26, v42);
  v27(&v38, 0);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v20, v25);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  void (*v27)(uint64_t *, void);
  uint64_t KeyPath;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  uint64_t v37 = a1;
  uint64_t v34 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  CGColorRef v32 = (char *)&KeyPath - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&KeyPath - v6;
  uint64_t v8 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v8);
  __n128 v30 = (char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v33 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v11 = (char *)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v35 = (char *)&KeyPath - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&KeyPath - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  uint64_t v36 = *(void *)(v31 - 8);
  double v18 = MEMORY[0x270FA5388](v31);
  uint64_t v20 = (char *)&KeyPath - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, a2, v14, v18);
  lazy protocol witness table accessor for type GraphElement and conformance GraphElement(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  swift_retain();
  Ref.init<A>(_:_:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = (uint64_t)v30;
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v38) = 2;
  uint64_t v22 = v34;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v32, v7, v34);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v22);
  _s8PaperKit12GraphElementVWOhTm_0(v21, (uint64_t (*)(void))type metadata accessor for GraphElement);
  uint64_t v23 = v42;
  SharedTagged_9.tag.getter();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v33 + 8);
  v24(v11, v23);
  uint64_t v40 = v38;
  char v41 = v39;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<GraphElement> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  uint64_t v25 = v31;
  Reference.identity.getter();
  double v26 = v35;
  SharedTagged_9.init(_:id:)();
  lazy protocol witness table accessor for type GraphElement and conformance GraphElement((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  double v27 = (void (*)(uint64_t *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  v24(v26, v42);
  v27(&v38, 0);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v20, v25);
}

uint64_t sub_20C7074EC()
{
  return objectdestroyTm_8((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
}

uint64_t partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>, (uint64_t (*)(uint64_t, unint64_t, uint64_t))specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:));
}

{
  return partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(a1, &demangling cache variable for type metadata for Capsule<Shape>, (uint64_t (*)(uint64_t, unint64_t, uint64_t))specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:));
}

uint64_t _s8PaperKit12GraphElementVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s8PaperKit12GraphElementVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_20C7075E0()
{
  return objectdestroyTm_8(&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t partial apply for specialized closure #1 in CanvasElementController.addCanvasElement<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a3(a1, v3 + v6, v7);
}

uint64_t sub_20C7076BC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7076CC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_59(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_59()
{
  return swift_release();
}

uint64_t sub_20C7076F4()
{
  return objectdestroyTm_8(&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t sub_20C707700()
{
  return objectdestroyTm_8(&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t objectdestroyTm_8(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = ((*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return MEMORY[0x270FA0238](v1, v7, v6);
}

uint64_t lazy protocol witness table accessor for type GraphElement and conformance GraphElement(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)(uint64_t a1)
{
  return specialized closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)(a1, *(void *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_20C707844()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C707854()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)specialized partial apply(uint64_t a1)
{
  return partial apply for specialized closure #1 in InlineDrawingCanvasElementController.addCanvasElement<A>(_:)(a1);
}

uint64_t type metadata completion function for AnyObjectWeakRef()
{
  return swift_initClassMetadata2();
}

void CanvasGenerationTool.magicGenerativeState.setter(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState;
  uint64_t v5 = v1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState];
  LOBYTE(v42[0]) = v1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState];
  LOBYTE(v41) = v3;
  if ((specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)((unsigned __int8 *)v42, (char *)&v41) & 1) == 0)
  {
    lazy protocol witness table accessor for type MagicGenerativePlaygroundState.TransitionError and conformance MagicGenerativePlaygroundState.TransitionError();
    uint64_t v21 = (void *)swift_allocError();
    char v22 = v5;
    unsigned char *v23 = v5;
    v23[1] = v3;
    swift_willThrow();
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)generativeLogger);
    uint64_t v25 = v1;
    id v26 = v21;
    double v27 = v25;
    id v28 = v21;
    double v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v42[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v33 = CanvasGenerationTool.nameAndPointerDescription.getter();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v35 = Error.localizedDescription.getter();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v29, v30, "%s: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v32, -1, -1);
      MEMORY[0x210550270](v31, -1, -1);
    }
    else
    {
    }
    v42[0] = 0;
    v42[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(60);
    v37._object = (void *)0x800000020C85E180;
    v37._uint64_t countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v37);
    LOBYTE(v41) = v22;
    _print_unlocked<A, B>(_:_:)();
    v38._uint64_t countAndFlagsBits = 0x74617473206F7420;
    v38._object = (void *)0xEB00000000203A65;
    String.append(_:)(v38);
    LOBYTE(v41) = v3;
    _print_unlocked<A, B>(_:_:)();
    v39._uint64_t countAndFlagsBits = 0xD000000000000014;
    v39._object = (void *)0x800000020C85E1A0;
    String.append(_:)(v39);
    uint64_t v41 = (uint64_t)v21;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x20C7080D4);
  }
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)generativeLogger);
  unint64_t v7 = v1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v40 = v5;
    unint64_t v10 = 0xED000064657A696CLL;
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v42[0] = v11;
    *(_DWORD *)uint64_t v5 = 136315650;
    uint64_t v12 = CanvasGenerationTool.nameAndPointerDescription.getter();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t v14 = 0x616974696E696E75;
    unint64_t v15 = 0xED000064657A696CLL;
    switch(v40)
    {
      case 1:
        uint64_t v14 = 0x696C616974696E69;
        unint64_t v15 = 0xEB0000000064657ALL;
        break;
      case 2:
        uint64_t v14 = 0x656C6553646E6177;
        unint64_t v15 = 0xED00006E6F697463;
        break;
      case 3:
        uint64_t v17 = "composingFromEmptyState";
        goto LABEL_16;
      case 4:
        uint64_t v14 = 0xD000000000000016;
        uint64_t v16 = "composingWandSelection";
        goto LABEL_14;
      case 5:
        uint64_t v14 = 0xD000000000000018;
        uint64_t v16 = "composingProvidedContext";
        goto LABEL_14;
      case 6:
        uint64_t v17 = "composingProvidedRecipe";
LABEL_16:
        unint64_t v15 = (unint64_t)(v17 - 32) | 0x8000000000000000;
        uint64_t v14 = 0xD000000000000017;
        break;
      case 7:
        uint64_t v14 = 0xD000000000000011;
        uint64_t v16 = "cancelledOrFailed";
        goto LABEL_14;
      case 8:
        uint64_t v14 = 0x65746172656E6567;
        unint64_t v15 = 0xE900000000000064;
        break;
      case 9:
        uint64_t v14 = 0xD000000000000010;
        uint64_t v16 = "generationFailed";
LABEL_14:
        unint64_t v15 = (unint64_t)(v16 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    uint64_t v18 = 0x616974696E696E75;
    switch(v3)
    {
      case 1:
        uint64_t v18 = 0x696C616974696E69;
        unint64_t v10 = 0xEB0000000064657ALL;
        break;
      case 2:
        uint64_t v18 = 0x656C6553646E6177;
        unint64_t v10 = 0xED00006E6F697463;
        break;
      case 3:
        uint64_t v20 = "composingFromEmptyState";
        goto LABEL_28;
      case 4:
        uint64_t v18 = 0xD000000000000016;
        uint64_t v19 = "composingWandSelection";
        goto LABEL_26;
      case 5:
        uint64_t v18 = 0xD000000000000018;
        uint64_t v19 = "composingProvidedContext";
        goto LABEL_26;
      case 6:
        uint64_t v20 = "composingProvidedRecipe";
LABEL_28:
        unint64_t v10 = (unint64_t)(v20 - 32) | 0x8000000000000000;
        uint64_t v18 = 0xD000000000000017;
        break;
      case 7:
        uint64_t v18 = 0xD000000000000011;
        uint64_t v19 = "cancelledOrFailed";
        goto LABEL_26;
      case 8:
        uint64_t v18 = 0x65746172656E6567;
        unint64_t v10 = 0xE900000000000064;
        break;
      case 9:
        uint64_t v18 = 0xD000000000000010;
        uint64_t v19 = "generationFailed";
LABEL_26:
        unint64_t v10 = (unint64_t)(v19 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v10, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v8, v9, "%s state transition from '%s' to '%s'", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v11, -1, -1);
    MEMORY[0x210550270](v5, -1, -1);

    LOBYTE(v5) = v40;
  }
  else
  {
  }
  v2[v4] = v3;
  LOBYTE(v42[0]) = v5;
  CanvasGenerationTool.magicGenerativePlaygroundStateDidChange(_:)((PaperKit::MagicGenerativePlaygroundState)v42);
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 6579570;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 6579570;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6E65657267;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1702194274;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6168706C61;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x6E65657267) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1702194274;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x6168706C61) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  char v11;

  uint64_t v2 = 0xED000064657A696CLL;
  unint64_t v3 = 0x616974696E696E75;
  uint64_t v4 = a1;
  uint64_t v5 = 0x616974696E696E75;
  unint64_t v6 = 0xED000064657A696CLL;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x696C616974696E69;
      unint64_t v6 = 0xEB0000000064657ALL;
      break;
    case 2:
      uint64_t v5 = 0x656C6553646E6177;
      unint64_t v6 = 0xED00006E6F697463;
      break;
    case 3:
      char v7 = "composingFromEmptyState";
      goto LABEL_8;
    case 4:
      uint64_t v5 = 0xD000000000000016;
      uint64_t v8 = "composingWandSelection";
      goto LABEL_12;
    case 5:
      uint64_t v5 = 0xD000000000000018;
      uint64_t v8 = "composingProvidedContext";
      goto LABEL_12;
    case 6:
      char v7 = "composingProvidedRecipe";
LABEL_8:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      uint64_t v5 = 0xD000000000000017;
      break;
    case 7:
      uint64_t v5 = 0xD000000000000011;
      uint64_t v8 = "cancelledOrFailed";
      goto LABEL_12;
    case 8:
      uint64_t v5 = 0x65746172656E6567;
      unint64_t v6 = 0xE900000000000064;
      break;
    case 9:
      uint64_t v5 = 0xD000000000000010;
      uint64_t v8 = "generationFailed";
LABEL_12:
      unint64_t v6 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v3 = 0x696C616974696E69;
      uint64_t v2 = 0xEB0000000064657ALL;
      break;
    case 2:
      unint64_t v3 = 0x656C6553646E6177;
      uint64_t v2 = 0xED00006E6F697463;
      break;
    case 3:
      os_log_type_t v9 = "composingFromEmptyState";
      goto LABEL_20;
    case 4:
      unint64_t v3 = 0xD000000000000016;
      unint64_t v10 = "composingWandSelection";
      goto LABEL_24;
    case 5:
      unint64_t v3 = 0xD000000000000018;
      unint64_t v10 = "composingProvidedContext";
      goto LABEL_24;
    case 6:
      os_log_type_t v9 = "composingProvidedRecipe";
LABEL_20:
      uint64_t v2 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000017;
      break;
    case 7:
      unint64_t v3 = 0xD000000000000011;
      unint64_t v10 = "cancelledOrFailed";
      goto LABEL_24;
    case 8:
      unint64_t v3 = 0x65746172656E6567;
      uint64_t v2 = 0xE900000000000064;
      break;
    case 9:
      unint64_t v3 = 0xD000000000000010;
      unint64_t v10 = "generationFailed";
LABEL_24:
      uint64_t v2 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = 1684632949;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1684632949;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0x800000020C84EB50;
      uint64_t v5 = 0xD000000000000010;
      break;
    case 2:
      uint64_t v5 = 0x65646E4974726F73;
      unint64_t v3 = 0xE900000000000078;
      break;
    case 3:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x74616D726F66;
      break;
    case 4:
      uint64_t v5 = 0xD000000000000013;
      unint64_t v3 = 0x800000020C84EB80;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x800000020C84EB50;
      if (v5 == 0xD000000000000010) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE900000000000078;
      if (v5 != 0x65646E4974726F73) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x74616D726F66;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0x800000020C84EB80;
      if (v5 != 0xD000000000000013) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;

  uint64_t v2 = 0xEE00646572696150;
  unint64_t v3 = 0x6C69636E65507369;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6C69636E65507369;
  unint64_t v6 = 0xEE00646572696150;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v5 = 0x656C61636F6CLL;
      break;
    case 2:
      uint64_t v5 = 0x6874616D5F6D756ELL;
      goto LABEL_7;
    case 3:
      unint64_t v6 = 0x800000020C84DFE0;
      uint64_t v5 = 0xD000000000000012;
      break;
    case 4:
      uint64_t v5 = 0x6F7274735F6D756ELL;
      unint64_t v6 = 0xEB0000000073656BLL;
      break;
    case 5:
      uint64_t v5 = 0x747865745F6D756ELL;
LABEL_7:
      unint64_t v6 = 0xEF7370756F72675FLL;
      break;
    case 6:
      uint64_t v5 = 0x6E695F6563617073;
      unint64_t v6 = 0xEE00646574726573;
      break;
    case 7:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1868852853;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v2 = 0xE600000000000000;
      if (v5 == 0x656C61636F6CLL) {
        goto LABEL_23;
      }
      goto LABEL_26;
    case 2:
      char v7 = 0x6874616D5F6D756ELL;
      goto LABEL_19;
    case 3:
      uint64_t v2 = 0x800000020C84DFE0;
      if (v5 != 0xD000000000000012) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 4:
      uint64_t v2 = 0xEB0000000073656BLL;
      if (v5 != 0x6F7274735F6D756ELL) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 5:
      char v7 = 0x747865745F6D756ELL;
LABEL_19:
      uint64_t v2 = 0xEF7370756F72675FLL;
      if (v5 != v7) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 6:
      unint64_t v3 = 0x6E695F6563617073;
      uint64_t v2 = 0xEE00646574726573;
      goto LABEL_22;
    case 7:
      uint64_t v2 = 0xE400000000000000;
      if (v5 != 1868852853) {
        goto LABEL_26;
      }
      goto LABEL_23;
    default:
LABEL_22:
      if (v5 != v3) {
        goto LABEL_26;
      }
LABEL_23:
      if (v6 == v2) {
        uint64_t v8 = 1;
      }
      else {
LABEL_26:
      }
        uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8 & 1;
  }
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x44676E6977617264;
  }
  else {
    uint64_t v3 = 0x676E69727473;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xEB00000000617461;
  }
  if (a2) {
    uint64_t v5 = 0x44676E6977617264;
  }
  else {
    uint64_t v5 = 0x676E69727473;
  }
  if (a2) {
    unint64_t v6 = 0xEB00000000617461;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if (a1) {
    BOOL v2 = 0xEE00657079546E6FLL;
  }
  else {
    BOOL v2 = 0xEA00000000006E6FLL;
  }
  if (a2) {
    uint64_t v3 = 0xEE00657079546E6FLL;
  }
  else {
    uint64_t v3 = 0xEA00000000006E6FLL;
  }
  if (v2 == v3) {
    unint64_t v4 = 1;
  }
  else {
    unint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x800000020C84E320;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x6973736572707865;
    }
    else {
      unint64_t v5 = 0xD000000000000011;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEB00000000736E6FLL;
    }
    else {
      unint64_t v6 = 0x800000020C84E340;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v5 = 0xD000000000000011;
    unint64_t v6 = 0x800000020C84E320;
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (v7 == 1)
  {
    unint64_t v2 = 0x6973736572707865;
    unint64_t v3 = 0xEB00000000736E6FLL;
  }
  else
  {
    unint64_t v3 = 0x800000020C84E340;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend(*(id *)(*(void *)(a1 + 16) + 16), sel_rawValue);
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  id v7 = objc_msgSend(*(id *)(*(void *)(a2 + 16) + 16), sel_rawValue);
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  LOBYTE(v7) = specialized static Data.== infix(_:_:)(v4, v6, v8, v10);
  outlined consume of Data._Representation(v8, v10);
  outlined consume of Data._Representation(v4, v6);
  return v7 & 1;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(BOOL, unint64_t, uint64_t, uint64_t))
{
  uint64_t v42 = a5;
  uint64_t v55 = a4;
  uint64_t v51 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v10 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v45 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v44 = (char *)&v39 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v49 = a1 + 56;
  uint64_t v22 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v50 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v53 = v15 + 32;
  uint64_t v54 = v15 + 16;
  uint64_t v52 = v15 + 8;
  uint64_t v25 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v43 = v10;
  uint64_t v48 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v26 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v28 = 0;
  uint64_t v47 = MEMORY[0x263F8EE78];
  if (!v24) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v29 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  for (unint64_t i = v29 | (v28 << 6); ; unint64_t i = __clz(__rbit64(v32)) + (v28 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v20, *(void *)(v26 + 48) + *(void *)(v15 + 72) * i, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v20, v14);
    v55(v14);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((*v25)(v9, 1, v56) == 1)
    {
      uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, v51);
      if (v24) {
        goto LABEL_4;
      }
    }
    else
    {
      long long v46 = *v48;
      v46(v44, v9, v56);
      v46(v45, v44, v56);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v47 = ((uint64_t (*)(void, uint64_t, uint64_t))v42)(0, *(void *)(v47 + 16) + 1, 1);
      }
      unint64_t v35 = *(void *)(v47 + 16);
      unint64_t v34 = *(void *)(v47 + 24);
      unint64_t v36 = v35 + 1;
      if (v35 >= v34 >> 1)
      {
        unint64_t v40 = *(void *)(v47 + 16);
        unint64_t v41 = v35 + 1;
        uint64_t v38 = v42(v34 > 1, v35 + 1, 1, v47);
        unint64_t v35 = v40;
        unint64_t v36 = v41;
        uint64_t v47 = v38;
      }
      uint64_t v37 = v47;
      *(void *)(v47 + 16) = v36;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v46)(v37+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v35, v45, v56);
      if (v24) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v31 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v31 >= v50) {
      goto LABEL_29;
    }
    unint64_t v32 = *(void *)(v49 + 8 * v31);
    ++v28;
    if (!v32)
    {
      int64_t v28 = v31 + 1;
      if (v31 + 1 >= v50) {
        goto LABEL_29;
      }
      unint64_t v32 = *(void *)(v49 + 8 * v28);
      if (!v32)
      {
        int64_t v28 = v31 + 2;
        if (v31 + 2 >= v50) {
          goto LABEL_29;
        }
        unint64_t v32 = *(void *)(v49 + 8 * v28);
        if (!v32)
        {
          int64_t v28 = v31 + 3;
          if (v31 + 3 >= v50) {
            goto LABEL_29;
          }
          unint64_t v32 = *(void *)(v49 + 8 * v28);
          if (!v32) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v24 = (v32 - 1) & v32;
  }
  int64_t v33 = v31 + 4;
  if (v33 >= v50)
  {
LABEL_29:
    swift_release();
    return v47;
  }
  unint64_t v32 = *(void *)(v49 + 8 * v33);
  if (v32)
  {
    int64_t v28 = v33;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v28 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v28 >= v50) {
      goto LABEL_29;
    }
    unint64_t v32 = *(void *)(v49 + 8 * v28);
    ++v33;
    if (v32) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void AnyObjectWeakRef.hash(into:)()
{
  Hasher._combine(_:)(v0);
}

BOOL static AnyObjectWeakRef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t type metadata accessor for AnyObjectWeakRef()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Int AnyObjectWeakRef.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyObjectWeakRef<A>()
{
  return AnyObjectWeakRef.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance AnyObjectWeakRef<A>()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyObjectWeakRef<A>()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnyObjectWeakRef<A>(uint64_t *a1, uint64_t *a2)
{
  return static AnyObjectWeakRef.== infix(_:_:)(*a1, *a2);
}

double CanvasGenerationTool.generationFrameInCanvas.getter()
{
  if ((v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_knownCanvasGenerationFrame + 32] & 1) == 0) {
    return *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_knownCanvasGenerationFrame];
  }
  uint64_t v1 = (double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
  double x = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
  double y = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 8];
  double width = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 16];
  double height = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 24];
  objc_msgSend(v0, sel_bounds);
  double v7 = v6;
  if (CGRect.isFinite.getter(x, y, width, height))
  {
    double v8 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth];
    if (v8 > 0.0 && v7 > 0.0)
    {
      CGAffineTransformMakeScale(&v27, v7 / v8, v7 / v8);
      v28.origin.double x = x;
      v28.origin.double y = y;
      v28.size.double width = width;
      v28.size.double height = height;
      CGRect v29 = CGRectApplyAffineTransform(v28, &v27);
      double x = v29.origin.x;
      double y = v29.origin.y;
      double width = v29.size.width;
      double height = v29.size.height;
    }
  }
  if (CGRect.isFinite.getter(x, y, width, height)
    && (uint64_t v9 = MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas])) != 0)
  {
    uint64_t v10 = (void *)v9;
    double v11 = *v1;
    double v12 = v1[1];
    double v13 = v1[2];
    double v14 = v1[3];
    objc_msgSend(v0, sel_bounds);
    double v16 = v15;
    if (CGRect.isFinite.getter(v11, v12, v13, v14))
    {
      double v17 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth];
      if (v17 > 0.0 && v16 > 0.0)
      {
        CGAffineTransformMakeScale(&v27, v16 / v17, v16 / v17);
        v30.origin.double x = v11;
        v30.origin.double y = v12;
        v30.size.double width = v13;
        v30.size.double height = v14;
        CGRect v31 = CGRectApplyAffineTransform(v30, &v27);
        double v11 = v31.origin.x;
        double v12 = v31.origin.y;
        double v13 = v31.size.width;
        double v14 = v31.size.height;
      }
    }
    objc_msgSend(v0, sel_convertRect_toCoordinateSpace_, v10, v11, v12, v13, v14);
    double v19 = v18;
  }
  else
  {
    double v19 = *v1;
    double v20 = v1[1];
    double v21 = v1[2];
    double v22 = v1[3];
    objc_msgSend(v0, sel_bounds);
    double v24 = v23;
    if (CGRect.isFinite.getter(v19, v20, v21, v22))
    {
      double v25 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth];
      if (v25 > 0.0 && v24 > 0.0)
      {
        CGAffineTransformMakeScale(&v27, v24 / v25, v24 / v25);
        v32.origin.double x = v19;
        v32.origin.double y = v20;
        v32.size.double width = v21;
        v32.size.double height = v22;
        *(void *)&double v19 = (unint64_t)CGRectApplyAffineTransform(v32, &v27);
      }
    }
  }
  return v19;
}

void CanvasGenerationTool.continuation.didset()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  MEMORY[0x270FA5388](v1 - 8);
  id v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (uint64_t)v0 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v4, (uint64_t)v3, &demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  if (v4 == 1)
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)generativeLogger);
    id v7 = v0;
    double v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v15 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v12 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v14[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v8, v9, "%s continuation is set to nil", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v11, -1, -1);
      MEMORY[0x210550270](v10, -1, -1);
    }
    else
    {
    }
  }
}

char *CanvasGenerationTool.init(canvas:gesture:)(void *a1, void *a2)
{
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_eatTapGestureRecognizer] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_eatPanGestureRecognizer] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_blurView] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath] = 0;
  id v3 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint1];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  uint64_t v4 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint2];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  v4[16] = 1;
  uint64_t v5 = (double *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
  double v6 = *MEMORY[0x263F001A0];
  double v7 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v8 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v9 = *(double *)(MEMORY[0x263F001A0] + 24);
  *uint64_t v5 = *(double *)MEMORY[0x263F001A0];
  v5[1] = v7;
  v5[2] = v8;
  v5[3] = v9;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth] = 0;
  uint64_t v10 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_knownCanvasGenerationFrame];
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v10[32] = 1;
  v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_isScrollable] = 0;
  swift_unknownObjectWeakInit();
  v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvasGenerationToolDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v11 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_cachedMagicFrame];
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[32] = 1;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC] = 0;
  uint64_t v12 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_backgroundViewTopAnchorConstraint] = 0;
  swift_unknownObjectWeakAssign();
  id v14 = objc_allocWithZone(MEMORY[0x263F82B88]);
  uint64_t v15 = v2;
  id v16 = objc_msgSend(v14, sel_init);
  *(void *)&v15[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_containerScrollView] = v16;

  v58.receiver = v15;
  v58.super_class = (Class)type metadata accessor for CanvasGenerationTool();
  id v17 = objc_msgSendSuper2(&v58, sel_initWithFrame_, v6, v7, v8, v9);
  double v18 = self;
  double v19 = (char *)v17;
  id v20 = objc_msgSend(v18, sel_effectWithStyle_, 4);
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E50]), sel_initWithEffect_, v20);
  objc_msgSend(v21, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v19, sel_addSubview_, v21);
  specialized static NSLayoutConstraint.constrain(_:to:)(v21, v19);
  objc_msgSend(v21, sel_setAlpha_, 0.0);
  objc_msgSend(v21, sel_setHidden_, 1);
  double v22 = *(void **)&v19[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_blurView];
  *(void *)&v19[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_blurView] = v21;

  uint64_t v23 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_containerScrollView;
  objc_msgSend(*(id *)&v19[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_containerScrollView], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(*(id *)&v19[v23], sel_setAlwaysBounceVertical_, 0);
  objc_msgSend(*(id *)&v19[v23], sel_setKeyboardDismissMode_, 2);
  objc_msgSend(v19, sel_addSubview_, *(void *)&v19[v23]);
  id v24 = objc_msgSend(*(id *)&v19[v23], sel_bottomAnchor);
  id v25 = objc_msgSend(v19, sel_bottomAnchor);
  id v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

  LODWORD(v27) = 1132068864;
  objc_msgSend(v26, sel_setPriority_, v27);
  CGRect v28 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_20C8344C0;
  id v30 = objc_msgSend(*(id *)&v19[v23], sel_leadingAnchor);
  id v31 = objc_msgSend(v19, sel_leadingAnchor);
  id v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

  *(void *)(v29 + 32) = v32;
  id v33 = objc_msgSend(*(id *)&v19[v23], sel_trailingAnchor);
  id v34 = objc_msgSend(v19, sel_trailingAnchor);
  id v35 = objc_msgSend(v33, sel_constraintEqualToAnchor_, v34);

  *(void *)(v29 + 40) = v35;
  id v36 = objc_msgSend(*(id *)&v19[v23], sel_topAnchor);
  id v37 = objc_msgSend(v19, sel_topAnchor);
  id v38 = objc_msgSend(v36, sel_constraintEqualToAnchor_, v37);

  *(void *)(v29 + 48) = v38;
  *(void *)(v29 + 56) = v26;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  id v39 = v26;
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v28, sel_activateConstraints_, isa);

  id v41 = objc_msgSend(*(id *)&v19[v23], sel_bottomAnchor);
  id v42 = objc_msgSend(v19, sel_keyboardLayoutGuide);
  id v43 = objc_msgSend(v42, sel_topAnchor);

  id v44 = objc_msgSend(v41, sel_constraintLessThanOrEqualToAnchor_, v43);
  objc_msgSend(v44, sel_setActive_, 1);

  objc_msgSend(a2, sel_addTarget_action_, v19, sel_generationTool_);
  objc_msgSend(v19, sel_setUserInteractionEnabled_, 1);
  uint64_t v45 = self;
  id v46 = objc_msgSend(v45, sel_defaultCenter);
  objc_msgSend(v46, sel_addObserver_selector_name_object_, v19, sel_keyboardWillShowNotification_, *MEMORY[0x263F83808], 0);

  id v47 = objc_msgSend(v45, sel_defaultCenter);
  objc_msgSend(v47, sel_addObserver_selector_name_object_, v19, sel_keyboardWillHideNotification_, *MEMORY[0x263F83800], 0);

  id v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB0]), sel_initWithTarget_action_, v19, sel_noOpForGesture_);
  objc_msgSend(v48, sel_setDelegate_, v19);
  uint64_t v49 = *(void **)&v19[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_eatTapGestureRecognizer];
  *(void *)&v19[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_eatTapGestureRecognizer] = v48;
  id v50 = v48;

  objc_msgSend(v19, sel_addGestureRecognizer_, v50);
  objc_msgSend(v50, sel_setEnabled_, 0);
  id v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82A00]), sel_initWithTarget_action_, v19, sel_noOpForGesture_);
  objc_msgSend(v51, sel_setDelegate_, v19);
  uint64_t v52 = *(void **)&v19[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_eatPanGestureRecognizer];
  *(void *)&v19[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_eatPanGestureRecognizer] = v51;
  id v53 = v51;

  objc_msgSend(v19, sel_addGestureRecognizer_, v53);
  id v54 = v53;
  objc_msgSend(v54, sel_setEnabled_, 0);

  return v19;
}

void CanvasGenerationTool.updateScrollViewLayout(_:animationDuration:animationCurveOptions:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)generativeLogger);
  double v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    aBlock[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000020C847C50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000042, 0x800000020C85E490, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v9, v10, "%s - %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v12, -1, -1);
    MEMORY[0x210550270](v11, -1, -1);
  }

  uint64_t v13 = (double *)&v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_cachedMagicFrame];
  if (v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_cachedMagicFrame + 32])
  {
    id v14 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
    if (!v14) {
      goto LABEL_16;
    }
    objc_msgSend(v14, sel_magicViewFullFrame);
    double v16 = v15;
    double v18 = v17;
    double v20 = v19;
    double v22 = v21;
  }
  else
  {
    double v20 = v13[2];
    double v22 = v13[3];
    double v16 = *v13;
    double v18 = v13[1];
  }
  if (!CGRect.isFinite.getter(v16, v18, v20, v22)
    || (uint64_t v23 = (void *)MEMORY[0x210550400](&v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas])) == 0
    || (id v24 = v23,
        id v25 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v23) + 0x308))(),
        v24,
        !v25))
  {
LABEL_16:
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      aBlock[0] = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000020C847C50, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000042, 0x800000020C85E490, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v33, v34, "%s - %s Returning because MagicViewFullFrame is not set up properly.", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v36, -1, -1);
      MEMORY[0x210550270](v35, -1, -1);
    }
    goto LABEL_18;
  }
  double *v13 = v16;
  v13[1] = v18;
  v13[2] = v20;
  v13[3] = v22;
  *((unsigned char *)v13 + 32) = 0;
  id v26 = self;
  uint64_t v27 = swift_allocObject();
  *(double *)(v27 + 16) = a2;
  *(void *)(v27 + 24) = v4;
  *(void *)(v27 + 32) = v25;
  *(double *)(v27 + 40) = v16;
  *(double *)(v27 + 48) = v18;
  *(double *)(v27 + 56) = v20;
  *(double *)(v27 + 64) = v22;
  aBlock[4] = (uint64_t)partial apply for closure #1 in CanvasGenerationTool.updateScrollViewLayout(_:animationDuration:animationCurveOptions:);
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_215;
  CGRect v28 = _Block_copy(aBlock);
  uint64_t v29 = v4;
  id v30 = v25;
  swift_release();
  objc_msgSend(v26, sel_animateWithDuration_delay_options_animations_completion_, a1, v28, 0, a3, 0.0);
  _Block_release(v28);
  id v31 = *(void **)&v29[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_eatTapGestureRecognizer];
  if (v31) {
    objc_msgSend(v31, sel_setEnabled_, 1);
  }
  id v32 = *(void **)&v29[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_eatPanGestureRecognizer];
  if (v32)
  {
    id v33 = v32;
    [v33 setEnabled:1];

LABEL_18:
    return;
  }
}

id closure #1 in CanvasGenerationTool.updateScrollViewLayout(_:animationDuration:animationCurveOptions:)(char *a1, void *a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  uint64_t v14 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_containerScrollView;
  id v15 = *(id *)&a1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_containerScrollView];
  objc_msgSend(a2, sel_adjustedContentInset);
  if (a3 <= 100.0)
  {
    objc_msgSend(v15, sel_setContentInset_);

    objc_msgSend(a2, sel_adjustedContentInset);
    double v27 = v26;
    v36.origin.double x = a4;
    v36.origin.double y = a5;
    v36.size.double width = a6;
    v36.size.double height = a7;
    double MinY = CGRectGetMinY(v36);
    if (one-time initialization token for topPaddingForMagicGenerativeVC != -1) {
      swift_once();
    }
    if (MinY - *(double *)&static UIConstants.topPaddingForMagicGenerativeVC < v27) {
      double v27 = MinY - *(double *)&static UIConstants.topPaddingForMagicGenerativeVC;
    }
    objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_backgroundViewTopAnchorConstraint], sel_setConstant_, -v27);
    id v21 = *(id *)&a1[v14];
    v37.origin.double x = a4;
    v37.origin.double y = a5;
    v37.size.double width = a6;
    v37.size.double height = a7;
    double v29 = CGRectGetMaxY(v37) - v27;
    if (one-time initialization token for bottomPaddingForMagicGenerativeVC != -1) {
      swift_once();
    }
    double v30 = v29 + *(double *)&static UIConstants.bottomPaddingForMagicGenerativeVC;
    objc_msgSend(v21, sel_contentSize);
    objc_msgSend(v21, sel_setContentSize_, v31, v30);
  }
  else
  {
    objc_msgSend(v15, sel_setContentInset_);

    uint64_t v16 = one-time initialization token for bottomPaddingForMagicGenerativeVC;
    id v17 = *(id *)&a1[v14];
    if (v16 != -1) {
      swift_once();
    }
    double v18 = *(double *)&static UIConstants.bottomPaddingForMagicGenerativeVC;
    if (one-time initialization token for topPaddingForMagicGenerativeVC != -1) {
      swift_once();
    }
    objc_msgSend(v17, sel_setContentSize_, a6 + 0.0, v18 + *(double *)&static UIConstants.topPaddingForMagicGenerativeVC + a7);

    double v19 = *(void **)&a1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_backgroundViewTopAnchorConstraint];
    if (v19)
    {
      id v20 = v19;
      v34.origin.double x = a4;
      v34.origin.double y = a5;
      v34.size.double width = a6;
      v34.size.double height = a7;
      objc_msgSend(v20, sel_setConstant_, *(double *)&static UIConstants.topPaddingForMagicGenerativeVC - CGRectGetMinY(v34));
    }
    id v21 = *(id *)&a1[v14];
    objc_msgSend(v21, sel_contentSize);
    double v23 = v22;
    objc_msgSend(*(id *)&a1[v14], sel_bounds);
    double v24 = v23 - CGRectGetHeight(v35);
    objc_msgSend(*(id *)&a1[v14], sel_contentInset);
    objc_msgSend(v21, sel_setContentOffset_, 0.0, v24 + v25 - *(double *)&static UIConstants.bottomPaddingForMagicGenerativeVC);
  }

  return objc_msgSend(a1, sel_layoutIfNeeded);
}

Swift::Void __swiftcall CanvasGenerationTool.prewarm()()
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  uint64_t v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v18 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x286D726177657270, 0xE900000000000029, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v6, -1, -1);
    MEMORY[0x210550270](v5, -1, -1);
  }
  else
  {
  }
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC;
  if (!*(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC])
  {
    id v10 = objc_msgSend(objc_allocWithZone((Class)PPKGPInProcessMagicPaperViewController), sel_initWithTokenProvider_, v2);
    LOBYTE(v18) = 1;
    CanvasGenerationTool.magicGenerativeState.setter((unsigned __int8 *)&v18);
    uint64_t v11 = *(void **)&v2[v9];
    *(void *)&v2[v9] = v10;

    uint64_t v12 = *(void **)&v2[v9];
    if (v12)
    {
      uint64_t v13 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvasGenerationToolDelegate];
      if (MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvasGenerationToolDelegate]))
      {
        uint64_t v14 = *((void *)v13 + 1);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v16 = *(void (**)(char *, id, uint64_t, uint64_t))(v14 + 8);
        id v17 = v12;
        v16(v2, v17, ObjectType, v14);

        swift_unknownObjectRelease();
      }
    }
  }
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 160) = a5;
  *(void *)(v6 + 168) = v5;
  *(unsigned char *)(v6 + 33) = a4;
  *(void *)(v6 + 144) = a2;
  *(void *)(v6 + 152) = a3;
  *(void *)(v6 + 136) = a1;
  *(void *)(v6 + 176) = type metadata accessor for Image();
  *(void *)(v6 + 184) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  *(void *)(v6 + 192) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  *(void *)(v6 + 200) = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  *(void *)(v6 + 208) = v7;
  *(void *)(v6 + 216) = *(void *)(v7 - 8);
  *(void *)(v6 + 224) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  *(void *)(v6 + 232) = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  *(void *)(v6 + 240) = v8;
  *(void *)(v6 + 248) = *(void *)(v8 - 8);
  *(void *)(v6 + 256) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v6 + 264) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v6 + 272) = v10;
  *(void *)(v6 + 280) = v9;
  return MEMORY[0x270FA2498](CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:), v10, v9);
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:)()
{
  uint64_t v125 = v0;
  uint64_t v1 = v0;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v2 = *(void **)(v0 + 168);
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 288) = __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 136);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v117 = v0 + 136;
  if (v7)
  {
    log = v5;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v113 = swift_slowAlloc();
    v124[0] = v113;
    *(_DWORD *)uint64_t v11 = 136315906;
    uint64_t v12 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ELL, 0x800000020C85E420, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 2048;
    uint64_t v14 = *(void *)(v9 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 120) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 32) = 2048;
    uint64_t v15 = *(void *)(v10 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 128) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, log, v6, "%s - %s: (elementMembers = %ld, strokeMembers = %ld)", (uint8_t *)v11, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x210550270](v113, -1, -1);
    MEMORY[0x210550270](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  id v119 = (uint64_t *)(v0 + 88);
  uint64_t v16 = *(void **)(v0 + 160);
  id v17 = &demangling cache variable for type metadata for Image?;
  if (v16)
  {
    id v18 = *(id *)(v0 + 168);
    id v19 = v16;
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    double v23 = *(void **)(v1 + 168);
    if (v22)
    {
      uint64_t v24 = swift_slowAlloc();
      logCGFloat a = (os_log_t)swift_slowAlloc();
      v124[0] = (uint64_t)loga;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v25 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *id v119 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      *(void *)(v1 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ELL, 0x800000020C85E420, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v20, v21, "%s - %s: setting canvas", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](loga, -1, -1);
      uint64_t v27 = v24;
      id v17 = &demangling cache variable for type metadata for Image?;
      MEMORY[0x210550270](v27, -1, -1);
    }
    else
    {
    }
    swift_unknownObjectWeakAssign();
  }
  CGRect v28 = (uint64_t *)(v1 + 48);
  uint64_t v29 = MEMORY[0x210550400](*(void *)(v1 + 168) + v17[489]);
  *(void *)(v1 + 296) = v29;
  if (!v29)
  {
    CGRect v34 = *(void **)(v1 + 168);
    swift_release();
    id v35 = v34;
    CGRect v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    id v39 = *(void **)(v1 + 168);
    if (v38)
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v124[0] = v41;
      *(_DWORD *)uint64_t v40 = 136315394;
      uint64_t v42 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v1 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2080;
      *(void *)(v1 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ELL, 0x800000020C85E420, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v36, v37, "%s - %s returning: canvas is nil", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v41, -1, -1);
      MEMORY[0x210550270](v40, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
    swift_allocError();
    *(_OWORD *)uint64_t v71 = xmmword_20C847BD0;
    *(unsigned char *)(v71 + 16) = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    float64x2_t v72 = *(uint64_t (**)(void))(v1 + 8);
    goto LABEL_42;
  }
  double v30 = (void *)v29;
  uint64_t v31 = *(void *)(v1 + 240);
  uint64_t v32 = *(void *)(v1 + 248);
  uint64_t v33 = *(void *)(v1 + 232);
  CanvasMembers.singleImageSelected()(*(void *)(v1 + 136), *(void *)(v1 + 144), v33);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v1 + 232), &demangling cache variable for type metadata for WeakRef<Image>?);
    goto LABEL_18;
  }
  uint64_t v44 = *(void *)(v1 + 256);
  uint64_t v45 = *(void *)(v1 + 208);
  uint64_t v46 = *(void *)(v1 + 216);
  uint64_t v47 = *(void *)(v1 + 200);
  (*(void (**)(uint64_t, void, void))(*(void *)(v1 + 248) + 32))(v44, *(void *)(v1 + 232), *(void *)(v1 + 240));
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v30) + 0x798))(v44);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v47, 1, v45) == 1)
  {
    uint64_t v48 = *(void *)(v1 + 200);
    (*(void (**)(void, void))(*(void *)(v1 + 248) + 8))(*(void *)(v1 + 256), *(void *)(v1 + 240));
    outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for Capsule<Image>?);
    CGRect v28 = (uint64_t *)(v1 + 48);
LABEL_18:
    if (*(void *)(*(void *)(v1 + 144) + 16) || *(void *)(*(void *)v117 + 16))
    {
      id v49 = *(id *)(v1 + 168);
      id v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      BOOL v52 = os_log_type_enabled(v50, v51);
      id v53 = *(void **)(v1 + 168);
      if (v52)
      {
        id v54 = (uint8_t *)swift_slowAlloc();
        uint64_t v120 = swift_slowAlloc();
        v124[0] = v120;
        *(_DWORD *)id v54 = 136315138;
        uint64_t v55 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(void *)(v1 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20C2D7000, v50, v51, "%s: Initiating magic generative playground from selection.", v54, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x210550270](v120, -1, -1);
        MEMORY[0x210550270](v54, -1, -1);
      }
      else
      {
      }
      unsigned __int8 v57 = *(unsigned char *)(v1 + 33) & 1;
      AnyCanvas.canvasGenerationToolFrameForSelection(_:to:)(*(void *)(v1 + 136), *(void *)(v1 + 144), *(void *)(v1 + 152), v57, *(void *)(v1 + 168));
      double v59 = v58;
      double v61 = v60;
      double v63 = v62;
      double v65 = v64;
      long long v121 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, double, double, double, double))((char *)&async function pointer to specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:) + async function pointer to specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:));
      uint64_t v66 = (void *)swift_task_alloc();
      *(void *)(v1 + 336) = v66;
      *uint64_t v66 = v1;
      v66[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:);
      uint64_t v67 = *(void *)(v1 + 144);
      uint64_t v68 = *(void *)(v1 + 152);
      uint64_t v69 = *(void *)(v1 + 136);
      return v121(v69, v67, v68, v57, v59, v61, v63, v65);
    }
    uint64_t v103 = *(void **)(v1 + 168);
    swift_release();
    id v104 = v103;
    char v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.error.getter();
    BOOL v107 = os_log_type_enabled(v105, v106);
    double v108 = *(void **)(v1 + 168);
    if (v107)
    {
      double v109 = (uint8_t *)swift_slowAlloc();
      uint64_t v123 = swift_slowAlloc();
      v124[0] = v123;
      *(_DWORD *)double v109 = 136315138;
      uint64_t v110 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *CGRect v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v105, v106, "%s : returning (method called with incorrect parameters)", v109, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v123, -1, -1);
      MEMORY[0x210550270](v109, -1, -1);
    }
    else
    {
    }
    goto LABEL_41;
  }
  float64x2_t v73 = *(void **)(v1 + 168);
  (*(void (**)(void, void, void))(*(void *)(v1 + 216) + 32))(*(void *)(v1 + 224), *(void *)(v1 + 200), *(void *)(v1 + 208));
  id v74 = v73;
  double v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.default.getter();
  BOOL v77 = os_log_type_enabled(v75, v76);
  double v78 = *(void **)(v1 + 168);
  if (v77)
  {
    double v79 = (uint8_t *)swift_slowAlloc();
    uint64_t v80 = swift_slowAlloc();
    v124[0] = v80;
    *(_DWORD *)double v79 = 136315138;
    uint64_t v81 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v1 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v75, v76, "%s: Initiating magic generative playground from single image.", v79, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v80, -1, -1);
    MEMORY[0x210550270](v79, -1, -1);
  }
  else
  {
  }
  uint64_t v84 = *(void *)(v1 + 184);
  uint64_t v83 = *(void *)(v1 + 192);
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_3(&lazy protocol witness table cache variable for type Image and conformance Image);
  Capsule<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  _s8PaperKit5ImageVWOhTm_0(v84, (uint64_t (*)(void))type metadata accessor for Image);
  uint64_t v85 = type metadata accessor for CRAssetOrData();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 48))(v83, 1, v85) == 1)
  {
    uint64_t v86 = *(void *)(v1 + 192);
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v86, &demangling cache variable for type metadata for CRAssetOrData?);
    id v87 = *(id *)(v1 + 168);
    double v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.error.getter();
    BOOL v90 = os_log_type_enabled(v88, v89);
    uint64_t v122 = *(void **)(v1 + 296);
    uint64_t v92 = *(void *)(v1 + 248);
    uint64_t v91 = *(void *)(v1 + 256);
    uint64_t v93 = *(void *)(v1 + 240);
    uint64_t v94 = *(void *)(v1 + 216);
    uint64_t v95 = *(void *)(v1 + 224);
    uint64_t v96 = *(void *)(v1 + 208);
    long long v97 = *(void **)(v1 + 168);
    if (v90)
    {
      logCGFloat b = *(os_log_t *)(v1 + 224);
      uint64_t v118 = *(void *)(v1 + 256);
      uint64_t v98 = (uint8_t *)swift_slowAlloc();
      *(void *)type = v93;
      uint64_t v99 = swift_slowAlloc();
      v124[0] = v99;
      *(_DWORD *)uint64_t v98 = 136315138;
      uint64_t v100 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v1 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v88, v89, "%s: returning (image is nil)", v98, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v99, -1, -1);
      MEMORY[0x210550270](v98, -1, -1);

      (*(void (**)(os_log_t, uint64_t))(v94 + 8))(logb, v96);
      (*(void (**)(uint64_t, os_log_type_t *))(v92 + 8))(v118, *(os_log_type_t **)type);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v95, v96);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
    }
LABEL_41:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    float64x2_t v72 = *(uint64_t (**)(void))(v1 + 8);
LABEL_42:
    return v72();
  }
  uint64_t v102 = (void *)swift_task_alloc();
  *(void *)(v1 + 304) = v102;
  *uint64_t v102 = v1;
  v102[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:);
  return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 1, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  void *v7;
  uint64_t v9;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void **)(v2 + 312);

    id v4 = *(void *)(v2 + 272);
    uint64_t v5 = *(void *)(v2 + 280);
    os_log_type_t v6 = CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:);
  }
  else
  {
    BOOL v7 = *(void **)(v2 + 312);

    id v4 = *(void *)(v2 + 272);
    uint64_t v5 = *(void *)(v2 + 280);
    os_log_type_t v6 = CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:);
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = (void *)v0[39];
  uint64_t v2 = (void *)v0[37];
  uint64_t v3 = v0[32];
  id v4 = v0[30];
  uint64_t v5 = v0[31];
  BOOL v7 = v0[27];
  os_log_type_t v6 = v0[28];
  uint64_t v8 = v0[26];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 280);
  id v4 = *(void *)(v2 + 272);
  if (v0) {
    uint64_t v5 = CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:);
  }
  else {
    uint64_t v5 = CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 296);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 296);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = (void *)v0[39];
  uint64_t v2 = (void *)v0[37];
  uint64_t v3 = v0[32];
  id v4 = v0[30];
  uint64_t v5 = v0[31];
  BOOL v7 = v0[27];
  os_log_type_t v6 = v0[28];
  uint64_t v8 = v0[26];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 192);
  *(void *)(*v1 + 312) = a1;
  swift_task_dealloc();
  _s8PaperKit5ImageVWOhTm_0(v3, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  uint64_t v4 = *(void *)(v2 + 280);
  uint64_t v5 = *(void *)(v2 + 272);
  return MEMORY[0x270FA2498](CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:), v5, v4);
}

void CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:)()
{
  uint64_t v62 = v0;
  uint64_t v1 = *(void **)(v0 + 312);
  if (v1)
  {
    uint64_t v2 = *(void **)(*(void *)(v0 + 296) + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v2) {
      goto LABEL_32;
    }
    id v3 = v2;
    uint64_t v4 = swift_bridgeObjectRetain();
    unint64_t v5 = specialized Sequence.compactMap<A>(_:)(v4, (uint64_t)v3);

    swift_bridgeObjectRelease();
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_5:
        if (v6 >= 1)
        {
          uint64_t v7 = 0;
          uint64_t v8 = (void *)MEMORY[0x263F8EE78];
          do
          {
            if ((v5 & 0xC000000000000001) != 0) {
              id v9 = (id)MEMORY[0x21054E050](v7, v5);
            }
            else {
              id v9 = *(id *)(v5 + 8 * v7 + 32);
            }
            uint64_t v10 = v9;
            objc_msgSend(v9, sel_frame);
            uint64_t v12 = v11;
            uint64_t v14 = v13;
            uint64_t v16 = v15;
            uint64_t v18 = v17;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
            }
            unint64_t v20 = v8[2];
            unint64_t v19 = v8[3];
            if (v20 >= v19 >> 1) {
              uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v8);
            }
            ++v7;
            v8[2] = v20 + 1;
            os_log_type_t v21 = &v8[4 * v20];
            v21[4] = v12;
            v21[5] = v14;
            v21[6] = v16;
            v21[7] = v18;
          }
          while (v6 != v7);
          goto LABEL_24;
        }
        __break(1u);
LABEL_32:
        __break(1u);
        return;
      }
    }
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
LABEL_24:
    swift_bridgeObjectRelease_n();
    double x = *MEMORY[0x263F001A0];
    double y = *(double *)(MEMORY[0x263F001A0] + 8);
    double width = *(double *)(MEMORY[0x263F001A0] + 16);
    double height = *(double *)(MEMORY[0x263F001A0] + 24);
    uint64_t v42 = v8[2];
    if (v42)
    {
      swift_bridgeObjectRetain();
      unint64_t v43 = v8 + 7;
      do
      {
        v64.origin.double x = x;
        v64.origin.double y = y;
        v64.size.double width = width;
        v64.size.double height = height;
        CGRect v65 = CGRectUnion(v64, *(CGRect *)(v43 - 3));
        double x = v65.origin.x;
        double y = v65.origin.y;
        double width = v65.size.width;
        double height = v65.size.height;
        v43 += 4;
        --v42;
      }
      while (v42);
      swift_bridgeObjectRelease();
    }
    uint64_t v44 = *(void *)(v0 + 312);
    uint64_t v45 = *(void **)(v0 + 296);
    uint64_t v46 = *(void *)(v0 + 168);
    swift_bridgeObjectRelease();
    objc_msgSend(v45, sel_convertRect_toCoordinateSpace_, v46, x, y, width, height);
    double v48 = v47;
    double v50 = v49;
    double v52 = v51;
    double v54 = v53;
    *(void *)(v0 + 16) = v44;
    *(void *)(v0 + 24) = 0;
    *(unsigned char *)(v0 + 32) = 1;
    id v55 = v1;
    id v56 = v45;
    unsigned __int8 v57 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v57;
    *unsigned __int8 v57 = v0;
    v57[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(for:canvas:);
    CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:)(v0 + 16, 0, (uint64_t)v56, v48, v50, v52, v54);
    return;
  }
  swift_release();
  id v22 = *(id *)(v0 + 168);
  double v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  double v60 = *(void **)(v0 + 296);
  uint64_t v26 = *(void *)(v0 + 248);
  uint64_t v27 = *(void *)(v0 + 256);
  uint64_t v28 = *(void *)(v0 + 240);
  uint64_t v29 = *(void *)(v0 + 216);
  uint64_t v30 = *(void *)(v0 + 224);
  uint64_t v31 = *(void *)(v0 + 208);
  uint64_t v32 = *(void **)(v0 + 168);
  if (v25)
  {
    uint64_t v59 = *(void *)(v0 + 256);
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = v31;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v61 = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v35 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v23, v24, "%s: returning (image is nil)", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v34, -1, -1);
    MEMORY[0x210550270](v33, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v58);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v59, v28);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v37 = *(void (**)(void))(v0 + 8);
  v37();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  *(void *)(v8 + 184) = a3;
  *(void *)(v8 + 192) = v7;
  *(void *)(v8 + 176) = a2;
  *(double *)(v8 + 160) = a6;
  *(double *)(v8 + 168) = a7;
  *(double *)(v8 + 144) = a4;
  *(double *)(v8 + 152) = a5;
  *(_OWORD *)(v8 + 200) = *(_OWORD *)a1;
  *(unsigned char *)(v8 + 33) = *(unsigned char *)(a1 + 16);
  type metadata accessor for MainActor();
  *(void *)(v8 + 216) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 224) = v10;
  *(void *)(v8 + 232) = v9;
  return MEMORY[0x270FA2498](CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:), v10, v9);
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:)()
{
  uint64_t v117 = v0;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = *(void **)(v0 + 208);
  id v3 = *(void **)(v0 + 192);
  char v4 = *(unsigned char *)(v0 + 33);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 240) = __swift_project_value_buffer(v5, (uint64_t)generativeLogger);
  id v6 = v3;
  outlined copy of MagicGenerativePlaygroundContext(v1, v2, v4);
  id v7 = v6;
  outlined copy of MagicGenerativePlaygroundContext(v1, v2, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  int v11 = *(unsigned __int8 *)(v0 + 33);
  if (v10)
  {
    os_log_type_t v111 = v9;
    uint64_t v12 = *(void **)(v0 + 192);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v113 = swift_slowAlloc();
    v116[0] = v113;
    *(_DWORD *)uint64_t v13 = 136315906;
    uint64_t v14 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, 0x800000020C85E3D0, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    unint64_t v16 = 0xE500000000000000;
    uint64_t v17 = 0x6567616D69;
    if (v11 != 1)
    {
      uint64_t v17 = 0x6974616D6F747561;
      unint64_t v16 = 0xE900000000000063;
    }
    if (v11) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 1954047348;
    }
    if (v11) {
      unint64_t v19 = v16;
    }
    else {
      unint64_t v19 = 0xE400000000000000;
    }
    os_log_type_t v21 = *(void **)(v0 + 200);
    unint64_t v20 = *(void **)(v0 + 208);
    char v22 = *(unsigned char *)(v0 + 33);
    *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of MagicGenerativePlaygroundContext(v21, v20, v22);
    outlined consume of MagicGenerativePlaygroundContext(v21, v20, v22);
    *(_WORD *)(v13 + 32) = 2080;
    uint64_t v23 = CGRect.debugDescription.getter();
    *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v8, v111, "%s - %s: (context = %s, bounds = %s)", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x210550270](v113, -1, -1);
    MEMORY[0x210550270](v13, -1, -1);
  }
  else
  {
    BOOL v25 = *(void **)(v0 + 200);
    uint64_t v26 = *(void **)(v0 + 208);
    uint64_t v27 = *(void **)(v0 + 192);

    outlined consume of MagicGenerativePlaygroundContext(v25, v26, v11);
    outlined consume of MagicGenerativePlaygroundContext(v25, v26, v11);
  }
  uint64_t v29 = *(void **)(v0 + 184);
  uint64_t v28 = *(void **)(v0 + 192);
  uint64_t v30 = &demangling cache variable for type metadata for Image?;
  if (v29)
  {
    id v31 = v28;
    id v32 = v29;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    unint64_t v36 = *(void **)(v0 + 192);
    if (v35)
    {
      id v112 = v32;
      uint64_t v37 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v116[0] = (uint64_t)log;
      *(_DWORD *)uint64_t v37 = 136315394;
      uint64_t v38 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2080;
      *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, 0x800000020C85E3D0, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v33, v34, "%s - %s: setting canvas", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      uint64_t v30 = (void *)&demangling cache variable for type metadata for Image?;
      MEMORY[0x210550270](log, -1, -1);
      uint64_t v40 = v37;
      id v32 = v112;
      MEMORY[0x210550270](v40, -1, -1);
    }
    else
    {
    }
    swift_unknownObjectWeakAssign();
  }
  else
  {
    id v41 = v28;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = *(void **)(v0 + 192);
    if (v44)
    {
      uint64_t v46 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      v116[0] = v47;
      *(_DWORD *)uint64_t v46 = 136315394;
      uint64_t v48 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12) = 2080;
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, 0x800000020C85E3D0, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v42, v43, "%s - %s: setting a nil canvas", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy();
      uint64_t v50 = v47;
      uint64_t v30 = (void *)&demangling cache variable for type metadata for Image?;
      MEMORY[0x210550270](v50, -1, -1);
      MEMORY[0x210550270](v46, -1, -1);
    }
    else
    {
    }
  }
  double v51 = (void *)MEMORY[0x210550400](*(void *)(v0 + 192) + v30[489]);
  *(void *)(v0 + 248) = v51;
  if (!v51)
  {
    CGRect v64 = *(void **)(v0 + 192);
    swift_release();
    id v65 = v64;
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    BOOL v68 = os_log_type_enabled(v66, v67);
    uint64_t v69 = *(void **)(v0 + 192);
    if (v68)
    {
      __n128 v70 = (uint8_t *)swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      v116[0] = v71;
      *(_DWORD *)__n128 v70 = 136315138;
      uint64_t v72 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v66, v67, "%s: returning (canvas is nil)", v70, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v71, -1, -1);
      MEMORY[0x210550270](v70, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
    swift_allocError();
    *(_OWORD *)uint64_t v87 = xmmword_20C847BD0;
    *(unsigned char *)(v87 + 16) = 2;
    swift_willThrow();
    double v88 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_60;
  }
  double v52 = v51;
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v51) + 0x520))())
  {
    double v53 = *(void **)(v0 + 192);
    swift_release();
    id v54 = v53;
    id v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v58 = *(void **)(v0 + 192);
    if (v57)
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      v116[0] = v60;
      *(_DWORD *)uint64_t v59 = 136315138;
      uint64_t v61 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v55, v56, "%s AutoRefine is running, cancel magic generative playground.", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v60, -1, -1);
      uint64_t v63 = (uint64_t)v59;
LABEL_58:
      MEMORY[0x210550270](v63, -1, -1);

      goto LABEL_59;
    }

    goto LABEL_42;
  }
  uint64_t v74 = *(void *)(v0 + 192);
  AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
  uint64_t v75 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState;
  unsigned __int8 v115 = *(unsigned char *)(v74 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState);
  LOBYTE(v116[0]) = 1;
  if ((specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)(&v115, (char *)v116) & 1) == 0)
  {
    os_log_type_t v89 = *(void **)(v0 + 192);
    swift_release();
    id v90 = v89;
    id v55 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    BOOL v92 = os_log_type_enabled(v55, v91);
    uint64_t v58 = *(void **)(v0 + 192);
    if (v92)
    {
      uint64_t v93 = swift_slowAlloc();
      uint64_t v114 = swift_slowAlloc();
      v116[0] = v114;
      *(_DWORD *)uint64_t v93 = 136315394;
      uint64_t v94 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v93 + 12) = 2080;
      unint64_t v96 = 0xED000064657A696CLL;
      uint64_t v97 = 0x616974696E696E75;
      switch(*(unsigned char *)(v74 + v75))
      {
        case 1:
          unint64_t v96 = 0xEB0000000064657ALL;
          uint64_t v97 = 0x696C616974696E69;
          break;
        case 2:
          unint64_t v96 = 0xED00006E6F697463;
          uint64_t v97 = 0x656C6553646E6177;
          break;
        case 3:
          uint64_t v97 = 0xD000000000000017;
          double v108 = "composingFromEmptyState";
          goto LABEL_56;
        case 4:
          uint64_t v97 = 0xD000000000000016;
          double v108 = "composingWandSelection";
          goto LABEL_56;
        case 5:
          uint64_t v97 = 0xD000000000000018;
          double v108 = "composingProvidedContext";
          goto LABEL_56;
        case 6:
          uint64_t v97 = 0xD000000000000017;
          double v108 = "composingProvidedRecipe";
          goto LABEL_56;
        case 7:
          uint64_t v97 = 0xD000000000000011;
          double v108 = "cancelledOrFailed";
          goto LABEL_56;
        case 8:
          unint64_t v96 = 0xE900000000000064;
          uint64_t v97 = 0x65746172656E6567;
          break;
        case 9:
          uint64_t v97 = 0xD000000000000010;
          double v108 = "generationFailed";
LABEL_56:
          unint64_t v96 = (unint64_t)(v108 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      double v109 = *(void **)(v0 + 192);
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v96, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v55, v91, "%s Unsupported state transition from %s", (uint8_t *)v93, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v114, -1, -1);
      uint64_t v63 = v93;
      goto LABEL_58;
    }

LABEL_42:
LABEL_59:

    double v88 = *(uint64_t (**)(void))(v0 + 8);
LABEL_60:
    return v88();
  }
  objc_msgSend(*(id *)(v0 + 192), sel_setHidden_, 0);
  if (one-time initialization token for defaultGeneratedImageSize != -1) {
    swift_once();
  }
  unsigned int v76 = *(unsigned __int8 *)(v0 + 33);
  CGFloat v78 = *(double *)(v0 + 160);
  CGFloat v77 = *(double *)(v0 + 168);
  CGFloat v80 = *(double *)(v0 + 144);
  CGFloat v79 = *(double *)(v0 + 152);
  CGSize v81 = (CGSize)static UIConstants.defaultGeneratedImageSize;
  v119.origin.double x = v80;
  v119.origin.double y = v79;
  v119.size.double width = v78;
  v119.size.double height = v77;
  CGFloat MidX = CGRectGetMidX(v119);
  v120.origin.double x = v80;
  v120.origin.double y = v79;
  v120.size.double width = v78;
  v120.size.double height = v77;
  *(double *)&unint64_t v83 = CGRectGetMidY(v120);
  CanvasGenerationTool.allocateGenerationFrame(for:with:)(v81, (CGPoint)__PAIR128__(v83, *(unint64_t *)&MidX));
  if (v76 > 1)
  {
    uint64_t v98 = *(void **)(v0 + 192);
    outlined consume of MagicGenerativePlaygroundContext(*(void **)(v0 + 200), *(id *)(v0 + 208), 2);
    outlined consume of MagicGenerativePlaygroundContext(0, 0, 2);
    id v99 = objc_msgSend(v98, sel_window);
    if (v99)
    {
      uint64_t v100 = v99;
      id v101 = objc_msgSend(v99, sel_firstResponder);
    }
    else
    {
      id v101 = 0;
    }
    uint64_t v102 = *(void *)(v0 + 192) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_lastFirstResponder;
    swift_unknownObjectWeakAssign();

    uint64_t v103 = (void *)MEMORY[0x210550400](v102);
    objc_msgSend(v103, sel_resignFirstResponder);
  }
  else
  {
    uint64_t v84 = *(void **)(v0 + 200);
    uint64_t v85 = *(void **)(v0 + 208);
    char v86 = *(unsigned char *)(v0 + 33);
    outlined copy of MagicGenerativePlaygroundContext(v84, v85, v86);
    outlined consume of MagicGenerativePlaygroundContext(v84, v85, v86);
    outlined consume of MagicGenerativePlaygroundContext(0, 0, 2);
  }
  char v104 = *(unsigned char *)(v0 + 33);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 200);
  *(unsigned char *)(v0 + 32) = v104;
  char v105 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v105;
  *char v105 = v0;
  v105[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:);
  uint64_t v106 = *(void *)(v0 + 176);
  return CanvasGenerationTool.generateImageAndReset(context:invocation:)(v0 + 16, v106);
}

{
  uint64_t v0;
  uint64_t v1;
  NSData *v2;
  NSData *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  void *v18;
  void *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(void);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v27 = v0;
  uint64_t v1 = *(void *)(v0 + 264);
  if (v1)
  {
    uint64_t v2 = UIImagePNGRepresentation(*(UIImage **)(v0 + 264));
    if (v2)
    {
      id v3 = v2;
      char v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      id v6 = v5;

      *(void *)(v0 + 296) = v4;
      *(void *)(v0 + 304) = v6;
      id v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 312) = v7;
      *id v7 = v0;
      v7[1] = CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:);
      uint64_t v8 = *(void *)(v0 + 272);
      os_log_type_t v9 = *(void *)(v0 + 280);
      return CanvasGenerationTool.addCanvasElement(for:with:)(v1, v8, v9, v4, v6);
    }
    int v11 = *(void *)(v0 + 272);
    uint64_t v12 = *(void *)(v0 + 280);
    uint64_t v13 = *(void **)(v0 + 264);
    swift_release();
    outlined consume of ImageWithEncodedRecipe?(v13, v11, v12);
  }
  else
  {
    swift_release();
  }
  uint64_t v14 = *(id *)(v0 + 192);
  unint64_t v15 = Logger.logObject.getter();
  unint64_t v16 = static os_log_type_t.default.getter();
  uint64_t v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void **)(v0 + 248);
  unint64_t v19 = *(void **)(v0 + 192);
  if (v17)
  {
    BOOL v25 = *(void **)(v0 + 248);
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v21 = swift_slowAlloc();
    uint64_t v26 = v21;
    *(_DWORD *)unint64_t v20 = 136315138;
    char v22 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v15, v16, "%s: returning (no image returned)", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v21, -1, -1);
    MEMORY[0x210550270](v20, -1, -1);
  }
  else
  {
  }
  unint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc();
  id v3 = *(void *)(v2 + 232);
  char v4 = *(void *)(v2 + 224);
  if (v0) {
    uint64_t v5 = CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:);
  }
  else {
    uint64_t v5 = CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[37];
  uint64_t v2 = v0[38];
  char v4 = v0[34];
  id v3 = v0[35];
  uint64_t v5 = (void *)v0[33];
  id v6 = (void *)v0[31];
  id v7 = (void *)v0[24];
  swift_release();
  objc_msgSend(v7, sel_setHidden_, 1);
  outlined consume of Data._Representation(v1, v2);
  outlined consume of ImageWithEncodedRecipe?(v5, v4, v3);

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 248);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[37];
  uint64_t v2 = v0[38];
  char v4 = v0[34];
  id v3 = v0[35];
  uint64_t v5 = (void *)v0[33];
  id v6 = (void *)v0[31];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined consume of ImageWithEncodedRecipe?(v5, v4, v3);

  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[33] = a1;
  v5[34] = a2;
  v5[35] = a3;
  v5[36] = v3;
  swift_task_dealloc();
  uint64_t v6 = v5[28];
  uint64_t v7 = v5[29];
  if (v3) {
    uint64_t v8 = CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:);
  }
  else {
    uint64_t v8 = CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:);
  }
  return MEMORY[0x270FA2498](v8, v6, v7);
}

uint64_t CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:)(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for CRKeyPath();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v3[21] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v3[22] = v5;
  v3[23] = *(void *)(v5 - 8);
  v3[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  v3[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  v3[26] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  v3[27] = v6;
  v3[28] = *(void *)(v6 - 8);
  v3[29] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[30] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[31] = v8;
  v3[32] = v7;
  return MEMORY[0x270FA2498](CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:), v8, v7);
}

uint64_t CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:)()
{
  uint64_t v171 = v0;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 264) = __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 136);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v170[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000035, 0x800000020C85E390, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v4, v5, "%s - %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v9, -1, -1);
    MEMORY[0x210550270](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v12 = *(void **)(v0 + 128);
  uint64_t v13 = &demangling cache variable for type metadata for Image?;
  if (v12)
  {
    id v14 = *(id *)(v0 + 136);
    id v15 = v12;
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    unint64_t v19 = *(void **)(v0 + 136);
    if (v18)
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v162 = swift_slowAlloc();
      v170[0] = v162;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v21 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v170);
      uint64_t v13 = &demangling cache variable for type metadata for Image?;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000035, 0x800000020C85E390, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v16, v17, "%s - %s: setting canvas", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v162, -1, -1);
      MEMORY[0x210550270](v20, -1, -1);
    }
    else
    {
    }
    swift_unknownObjectWeakAssign();
  }
  uint64_t v23 = MEMORY[0x210550400](*(void *)(v0 + 136) + v13[489]);
  *(void *)(v0 + 272) = v23;
  if (!v23)
  {
    uint64_t v37 = *(void **)(v0 + 136);
    swift_release();
    id v38 = v37;
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = *(void **)(v0 + 136);
    if (v41)
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      v170[0] = v44;
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v45 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000035, 0x800000020C85E390, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v39, v40, "%s - %s returning: canvas is nil", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v44, -1, -1);
      MEMORY[0x210550270](v43, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
    swift_allocError();
    *(_OWORD *)uint64_t v58 = xmmword_20C847BD0;
    *(unsigned char *)(v58 + 16) = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v59 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_49;
  }
  unint64_t v24 = (void *)v23;
  uint64_t v25 = *(void *)(v0 + 136);
  uint64_t v26 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState;
  unsigned __int8 v169 = *(unsigned char *)(v25 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState);
  LOBYTE(v170[0]) = 1;
  if ((specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)(&v169, (char *)v170) & 1) == 0)
  {
    uint64_t v47 = *(void **)(v0 + 136);
    swift_release();
    id v48 = v47;
    unint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    double v52 = *(void **)(v0 + 136);
    if (v51)
    {
      uint64_t v53 = swift_slowAlloc();
      uint64_t v163 = swift_slowAlloc();
      v170[0] = v163;
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      unint64_t v56 = 0xED000064657A696CLL;
      uint64_t v57 = 0x616974696E696E75;
      switch(*(unsigned char *)(v25 + v26))
      {
        case 1:
          unint64_t v56 = 0xEB0000000064657ALL;
          uint64_t v57 = 0x696C616974696E69;
          break;
        case 2:
          unint64_t v56 = 0xED00006E6F697463;
          uint64_t v57 = 0x656C6553646E6177;
          break;
        case 3:
          uint64_t v57 = 0xD000000000000017;
          char v105 = "composingFromEmptyState";
          goto LABEL_46;
        case 4:
          uint64_t v57 = 0xD000000000000016;
          char v105 = "composingWandSelection";
          goto LABEL_46;
        case 5:
          uint64_t v57 = 0xD000000000000018;
          char v105 = "composingProvidedContext";
          goto LABEL_46;
        case 6:
          uint64_t v57 = 0xD000000000000017;
          char v105 = "composingProvidedRecipe";
          goto LABEL_46;
        case 7:
          uint64_t v57 = 0xD000000000000011;
          char v105 = "cancelledOrFailed";
          goto LABEL_46;
        case 8:
          unint64_t v56 = 0xE900000000000064;
          uint64_t v57 = 0x65746172656E6567;
          break;
        case 9:
          uint64_t v57 = 0xD000000000000010;
          char v105 = "generationFailed";
LABEL_46:
          unint64_t v56 = (unint64_t)(v105 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      uint64_t v106 = *(void **)(v0 + 136);
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v56, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v49, v50, "%s Unsupported state transition from %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v163, -1, -1);
      MEMORY[0x210550270](v53, -1, -1);

      goto LABEL_48;
    }

    goto LABEL_31;
  }
  uint64_t v27 = *(void *)((char *)v24 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v27)
  {
    __break(1u);
    JUMPOUT(0x20C70F818);
  }
  uint64_t v28 = *(void *)(v27 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (*(void *)(v28 + 16) != 1)
  {
    swift_release();
LABEL_28:
    id v61 = *(id *)(v0 + 136);
    unint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    BOOL v64 = os_log_type_enabled(v62, v63);
    double v52 = *(void **)(v0 + 136);
    if (v64)
    {
      id v65 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      v170[0] = v66;
      *(_DWORD *)id v65 = 136315138;
      uint64_t v67 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v62, v63, "%s: returning (no selected image)", v65, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v66, -1, -1);
      MEMORY[0x210550270](v65, -1, -1);

LABEL_48:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v59 = *(uint64_t (**)(void))(v0 + 8);
LABEL_49:
      return v59();
    }

LABEL_31:
    goto LABEL_48;
  }
  uint64_t v29 = *(void *)(v0 + 200);
  specialized Collection.first.getter(v28, v29);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v31 = *(void *)(v30 - 8);
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30);
  uint64_t v34 = *(void *)(v0 + 216);
  uint64_t v33 = *(void *)(v0 + 224);
  uint64_t v35 = *(void *)(v0 + 200);
  uint64_t v36 = *(void *)(v0 + 208);
  if (v32 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 200), (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v36, 1, 1, v34);
LABEL_27:
    uint64_t v60 = *(void *)(v0 + 208);
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v60, &demangling cache variable for type metadata for WeakRef<Image>?);
    goto LABEL_28;
  }
  WeakTagged_9.tagged2.getter();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v35, v30);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v36, 1, v34) == 1) {
    goto LABEL_27;
  }
  uint64_t v69 = *(void *)(v0 + 232);
  uint64_t v70 = *(void *)(v0 + 176);
  uint64_t v71 = *(void *)(v0 + 184);
  uint64_t v72 = *(void *)(v0 + 168);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 224) + 32))(v69, *(void *)(v0 + 208), *(void *)(v0 + 216));
  AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
  unint64_t v73 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v24) + 0x798))(v69);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v72, 1, v70) == 1)
  {
    uint64_t v74 = *(void *)(v0 + 168);
    uint64_t v75 = *(void **)(v0 + 136);
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v74, &demangling cache variable for type metadata for Capsule<Image>?);
    id v76 = v75;
    CGFloat v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    BOOL v79 = os_log_type_enabled(v77, v78);
    uint64_t v81 = *(void *)(v0 + 224);
    uint64_t v80 = *(void *)(v0 + 232);
    uint64_t v82 = *(void *)(v0 + 216);
    unint64_t v83 = *(void **)(v0 + 136);
    if (v79)
    {
      uint64_t v164 = *(void *)(v0 + 232);
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      v170[0] = v85;
      *(_DWORD *)uint64_t v84 = 136315138;
      uint64_t v86 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v77, v78, "%s: returning (selected image does not have an ImageElement)", v84, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v85, -1, -1);
      MEMORY[0x210550270](v84, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v164, v82);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v80, v82);
    }
    goto LABEL_48;
  }
  uint64_t v88 = *(void *)(v0 + 232);
  (*(void (**)(void, void, void))(*(void *)(v0 + 184) + 32))(*(void *)(v0 + 192), *(void *)(v0 + 168), *(void *)(v0 + 176));
  uint64_t v89 = (*(uint64_t (**)(uint64_t))((*v73 & *v24) + 0x7A0))(v88);
  *(void *)(v0 + 280) = v89;
  *(void *)(v0 + 288) = v90;
  if (v90 >> 60 == 15)
  {
    os_log_type_t v91 = *(void **)(v0 + 136);
    swift_release();
    id v92 = v91;
    uint64_t v93 = Logger.logObject.getter();
    os_log_type_t v94 = static os_log_type_t.error.getter();
    BOOL v95 = os_log_type_enabled(v93, v94);
    uint64_t v96 = *(void *)(v0 + 224);
    uint64_t v97 = *(void *)(v0 + 232);
    uint64_t v98 = *(void *)(v0 + 216);
    uint64_t v99 = *(void *)(v0 + 184);
    uint64_t v161 = *(void *)(v0 + 176);
    uint64_t v165 = *(void *)(v0 + 192);
    uint64_t v100 = *(void **)(v0 + 136);
    if (v95)
    {
      os_log_t log = *(os_log_t *)(v0 + 224);
      id v101 = (uint8_t *)swift_slowAlloc();
      uint64_t v157 = v97;
      uint64_t v102 = swift_slowAlloc();
      v170[0] = v102;
      *(_DWORD *)id v101 = 136315138;
      uint64_t v103 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v93, v94, "%s: returning (selected image does not have image generation recipe)", v101, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v102, -1, -1);
      MEMORY[0x210550270](v101, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v165, v161);
      ((void (*)(uint64_t, uint64_t))log[1].isa)(v157, v98);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v165, v161);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v97, v98);
    }
    goto LABEL_48;
  }
  uint64_t v166 = v89;
  unint64_t v167 = v90;
  id v168 = v24;
  double v108 = (void *)(*(uint64_t (**)(void))((*v73 & *v24) + 0x2F8))();
  uint64_t v110 = v109;
  uint64_t ObjectType = swift_getObjectType();
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_3(&lazy protocol witness table cache variable for type Image and conformance Image);
  Capsule<>.rootID.getter();
  uint64_t v112 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 32))(ObjectType, v110);

  if (!*(void *)(v112 + 16)
    || (unint64_t v113 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 160)), (v114 & 1) == 0))
  {
    uint64_t v138 = *(void *)(v0 + 152);
    uint64_t v137 = *(void *)(v0 + 160);
    uint64_t v140 = *(void **)(v0 + 136);
    uint64_t v139 = *(void *)(v0 + 144);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
    swift_release();
    id v141 = v140;
    uint64_t v142 = Logger.logObject.getter();
    os_log_type_t v143 = static os_log_type_t.error.getter();
    BOOL v144 = os_log_type_enabled(v142, v143);
    uint64_t v145 = *(void *)(v0 + 224);
    uint64_t v146 = *(void *)(v0 + 232);
    uint64_t v147 = *(void *)(v0 + 216);
    uint64_t v148 = *(void *)(v0 + 184);
    uint64_t v149 = *(void *)(v0 + 192);
    uint64_t v150 = *(NSObject **)(v0 + 176);
    uint64_t v151 = *(void **)(v0 + 136);
    if (v144)
    {
      uint64_t v158 = *(void *)(v0 + 192);
      logCGFloat a = *(os_log_t *)(v0 + 216);
      uint64_t v152 = (uint8_t *)swift_slowAlloc();
      os_log_t v156 = v150;
      uint64_t v153 = swift_slowAlloc();
      v170[0] = v153;
      *(_DWORD *)uint64_t v152 = 136315138;
      uint64_t v154 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v154, v155, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v142, v143, "%s returning (imageView is nil)", v152, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v153, -1, -1);
      MEMORY[0x210550270](v152, -1, -1);
      outlined consume of Data?(v166, v167);

      (*(void (**)(uint64_t, os_log_t))(v148 + 8))(v158, v156);
      (*(void (**)(uint64_t, os_log_t))(v145 + 8))(v146, loga);
    }
    else
    {
      outlined consume of Data?(v166, v167);

      (*(void (**)(uint64_t, NSObject *))(v148 + 8))(v149, v150);
      (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v146, v147);
    }
    goto LABEL_48;
  }
  uint64_t v116 = *(void *)(v0 + 152);
  uint64_t v115 = *(void *)(v0 + 160);
  uint64_t v117 = *(void **)(v0 + 136);
  uint64_t v118 = *(void *)(v0 + 144);
  CGRect v119 = *(void **)(*(void *)(v112 + 56) + 8 * v113);
  *(void *)(v0 + 296) = v119;
  id v120 = v119;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v115, v118);
  objc_msgSend(v117, sel_setHidden_, 0);
  objc_msgSend(v120, sel_setHidden_, 1);
  objc_msgSend(v120, sel_frame);
  objc_msgSend(v168, sel_convertRect_toCoordinateSpace_, v117);
  CGFloat v122 = v121;
  CGFloat v124 = v123;
  CGFloat v126 = v125;
  CGFloat v128 = v127;
  objc_msgSend(v120, sel_frame);
  unint64_t v130 = v129;
  unint64_t v132 = v131;
  v173.origin.double x = v122;
  v173.origin.double y = v124;
  v173.size.double width = v126;
  v173.size.double height = v128;
  CGFloat MidX = CGRectGetMidX(v173);
  v174.origin.double x = v122;
  v174.origin.double y = v124;
  v174.size.double width = v126;
  v174.size.double height = v128;
  *(double *)&unint64_t v134 = CGRectGetMidY(v174);
  CanvasGenerationTool.allocateGenerationFrame(for:with:)((CGSize)__PAIR128__(v132, v130), (CGPoint)__PAIR128__(v134, *(unint64_t *)&MidX));
  CGColorRef v135 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v135;
  *CGColorRef v135 = v0;
  v135[1] = CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:);
  uint64_t v136 = *(void *)(v0 + 120);
  return CanvasGenerationTool.generateImageAndReset(with:invocation:)(v166, v167, v136);
}

{
  uint64_t v0;
  uint64_t v1;
  UIImage *v2;
  NSData *v3;
  NSData *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  void *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  id v48 = v0;
  uint64_t v1 = *(void *)(v0 + 312);
  swift_release();
  if (!v1)
  {
LABEL_5:
    id v15 = *(id *)(v0 + 136);
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    unint64_t v19 = *(void **)(v0 + 136);
    if (v18)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v47 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      unint64_t v22 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v16, v17, "%s: returning (Image generation has been cancelled or no recipe provided)", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v21, -1, -1);
      MEMORY[0x210550270](v20, -1, -1);
    }
    else
    {
    }
    unint64_t v24 = *(void *)(v0 + 288);
    uint64_t v25 = *(void **)(v0 + 296);
    uint64_t v27 = *(void **)(v0 + 272);
    uint64_t v26 = *(void *)(v0 + 280);
    uint64_t v28 = *(void *)(v0 + 224);
    uint64_t v44 = *(void *)(v0 + 216);
    unint64_t v46 = *(void *)(v0 + 232);
    uint64_t v29 = *(void *)(v0 + 184);
    uint64_t v30 = *(void *)(v0 + 192);
    uint64_t v31 = *(void *)(v0 + 176);
    objc_msgSend(*(id *)(v0 + 136), sel_setHidden_, 1);
    objc_msgSend(v25, sel_setHidden_, 0);
    outlined consume of Data?(v26, v24);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v46, v44);
    goto LABEL_9;
  }
  uint64_t v2 = *(UIImage **)(v0 + 312);
  id v3 = UIImagePNGRepresentation(v2);
  if (!v3)
  {
    outlined consume of ImageWithEncodedRecipe?(*(void **)(v0 + 312), *(void *)(v0 + 320), *(void *)(v0 + 328));
    goto LABEL_5;
  }
  uint64_t v4 = v3;
  os_log_type_t v5 = *(void *)(v0 + 328);
  BOOL v6 = *(void *)(v0 + 320);
  BOOL v41 = *(void *)(v0 + 288);
  uint64_t v7 = *(void **)(v0 + 272);
  unint64_t v39 = *(id *)(v0 + 296);
  os_log_type_t v40 = *(void *)(v0 + 280);
  uint64_t v42 = *(void *)(v0 + 224);
  uint64_t v43 = *(void *)(v0 + 216);
  uint64_t v45 = *(void *)(v0 + 232);
  uint64_t v34 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v37 = *(void **)(v0 + 312);
  id v38 = *(void *)(v0 + 184);
  uint64_t v36 = *(id *)(v0 + 136);
  uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  unint64_t v11 = (void *)swift_task_alloc();
  _OWORD v11[2] = v35;
  v11[3] = v10;
  v11[4] = v7;
  void v11[5] = v2;
  v11[6] = v6;
  v11[7] = v5;
  Capsule.callAsFunction<A>(_:)();
  swift_task_dealloc();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v7) + 0x570);
  uint64_t v13 = type metadata accessor for Image();
  id v14 = _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_3(&lazy protocol witness table cache variable for type Image and conformance Image);
  v12(v34, v13, v14);
  objc_msgSend(v36, sel_setHidden_, 1);
  outlined consume of Data._Representation(v35, v10);
  outlined consume of ImageWithEncodedRecipe?(v37, v6, v5);
  objc_msgSend(v39, sel_setHidden_, 0);
  outlined consume of Data?(v40, v41);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v34, v8);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v45, v43);
LABEL_9:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

{
  void *v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = v0[36];
  uint64_t v2 = (void *)v0[37];
  uint64_t v4 = (void *)v0[34];
  id v3 = v0[35];
  uint64_t v12 = v0[29];
  os_log_type_t v5 = v0[27];
  BOOL v6 = v0[28];
  uint64_t v7 = v0[23];
  uint64_t v8 = v0[24];
  uint64_t v9 = v0[22];
  swift_release();
  objc_msgSend(v2, sel_setHidden_, 0);
  outlined consume of Data?(v3, v1);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v12, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v5 = (void *)*v4;
  BOOL v6 = (void *)*v4;
  v6[39] = a1;
  v6[40] = a2;
  v6[41] = a3;
  v6[42] = v3;
  swift_task_dealloc();
  uint64_t v7 = v5[32];
  uint64_t v8 = v5[31];
  if (v3) {
    uint64_t v9 = CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:);
  }
  else {
    uint64_t v9 = CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:);
  }
  return MEMORY[0x270FA2498](v9, v8, v7);
}

uint64_t closure #1 in CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v22 = a7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  id v15 = (char *)&v21 - v14;
  outlined copy of Data._Representation(a2, a3);
  CRContext.assetManager.getter();
  CRAsset.init(data:assetManager:)();
  uint64_t v16 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 0, 1, v16);
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_3(&lazy protocol witness table cache variable for type Image and conformance Image);
  os_log_type_t v17 = (void (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v15, (uint64_t)v12, &demangling cache variable for type metadata for CRAssetOrData?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for CRAssetOrData?);
  v17(v25, 0);
  unint64_t v18 = v22;
  outlined copy of Data._Representation(a6, v22);
  unint64_t v19 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  uint64_t v23 = a6;
  unint64_t v24 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.setter();
  return v19(v25, 0);
}

id @objc CanvasGenerationTool.magicGenerativeViewForHitTesting.getter(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v3 = *(id *)(a1 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
  if (v3) {
    id v3 = [v3 *a3];
  }
  return v3;
}

uint64_t CanvasGenerationTool.waitForGeneratedImageAndReset()()
{
  v1[24] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  v1[25] = swift_task_alloc();
  v1[26] = type metadata accessor for MainActor();
  v1[27] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[28] = v3;
  v1[29] = v2;
  return MEMORY[0x270FA2498](CanvasGenerationTool.waitForGeneratedImageAndReset(), v3, v2);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  unint64_t v19 = v0;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = type metadata accessor for Logger();
  v0[30] = __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[24];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    os_log_type_t v17 = swift_slowAlloc();
    unint64_t v18 = v17;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000020C85E370, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v4, v5, "%s - %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v17, -1, -1);
    MEMORY[0x210550270](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = v0[24];
  uint64_t v12 = static MainActor.shared.getter();
  v0[31] = v12;
  uint64_t v13 = swift_task_alloc();
  v0[32] = v13;
  *(void *)(v13 + 16) = v11;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[33] = v14;
  *uint64_t v14 = v0;
  v14[1] = CanvasGenerationTool.waitForGeneratedImageAndReset();
  id v15 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA2360](v0 + 14, v12, v15, 0xD00000000000001FLL, 0x800000020C85E370, partial apply for closure #1 in CanvasGenerationTool.waitForGeneratedImageAndReset(), v13, &type metadata for ImageWithEncodedRecipe);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 224);
    uint64_t v4 = *(void *)(v2 + 232);
    uint64_t v5 = CanvasGenerationTool.waitForGeneratedImageAndReset();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 224);
    uint64_t v4 = *(void *)(v2 + 232);
    uint64_t v5 = CanvasGenerationTool.waitForGeneratedImageAndReset();
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  swift_release();
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[25];
  BOOL v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v4 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
  swift_beginAccess();
  outlined assign with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(v5, v7);
  swift_endAccess();
  CanvasGenerationTool.continuation.didset();
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  if (v1)
  {
    uint64_t v8 = self;
    uint64_t v9 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v0[6] = partial apply for closure #2 in CanvasGenerationTool.waitForGeneratedImageAndReset();
    v0[7] = v9;
    v0[2] = MEMORY[0x263EF8330];
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[5] = &block_descriptor_192;
    uint64_t v10 = _Block_copy(v0 + 2);
    swift_release();
    uint64_t v11 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v0[12] = partial apply for closure #3 in CanvasGenerationTool.waitForGeneratedImageAndReset();
    v0[13] = v11;
    v0[8] = MEMORY[0x263EF8330];
    v0[9] = 1107296256;
    v0[10] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v0[11] = &block_descriptor_196;
    uint64_t v12 = _Block_copy(v0 + 8);
    swift_release();
    objc_msgSend(v8, sel_animateWithDuration_delay_options_animations_completion_, 0x10000, v10, v12, 0.5, 0.25);
    _Block_release(v12);
    _Block_release(v10);
  }
  else
  {
    CanvasGenerationTool.resetGenerativeTool()();
  }
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v13(v1, v2, v3);
}

{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void, void, void);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  uint64_t v27 = v0;
  uint64_t v1 = (void *)v0[34];
  uint64_t v2 = (void *)v0[24];
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v3;
  BOOL v6 = v1;
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (void *)v0[34];
    uint64_t v10 = (void *)v0[24];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = v25;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 12) = 2112;
    id v15 = v9;
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[21] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v16;

    _os_log_impl(&dword_20C2D7000, v7, v8, "%s Catch error: %@", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x210550270](v12, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x210550270](v25, -1, -1);
    MEMORY[0x210550270](v11, -1, -1);
  }
  else
  {
    os_log_type_t v17 = (void *)v0[34];
    unint64_t v18 = (void *)v0[24];
  }
  uint64_t v20 = v0[24];
  unint64_t v19 = v0[25];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
  unint64_t v22 = v20 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
  swift_beginAccess();
  outlined assign with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(v19, v22);
  swift_endAccess();
  CanvasGenerationTool.continuation.didset();
  outlined destroy of StocksKitCurrencyCache.Provider?(v19, &demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  CanvasGenerationTool.resetGenerativeTool()();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void, void, void))v0[1];
  return v23(0, 0, 0);
}

uint64_t closure #1 in CanvasGenerationTool.waitForGeneratedImageAndReset()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  MEMORY[0x270FA5388](v4 - 8);
  BOOL v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  uint64_t v9 = a2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
  swift_beginAccess();
  outlined assign with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?((uint64_t)v6, v9);
  swift_endAccess();
  CanvasGenerationTool.continuation.didset();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
}

void closure #2 in CanvasGenerationTool.waitForGeneratedImageAndReset()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
    id v5 = v4;

    if (v4)
    {
      id v6 = objc_msgSend(v5, sel_view);

      if (v6)
      {
        objc_msgSend(v6, sel_setAlpha_, 0.0);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void closure #3 in CanvasGenerationTool.waitForGeneratedImageAndReset()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    CanvasGenerationTool.resetGenerativeTool()();
  }
}

uint64_t CanvasGenerationTool.generateImageAndReset(context:invocation:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v3 + 56) = swift_task_alloc();
  *(_OWORD *)(v3 + 64) = *(_OWORD *)a1;
  *(unsigned char *)(v3 + 144) = *(unsigned char *)(a1 + 16);
  *(void *)(v3 + 80) = type metadata accessor for MainActor();
  *(void *)(v3 + 88) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 96) = v6;
  *(void *)(v3 + 104) = v5;
  return MEMORY[0x270FA2498](CanvasGenerationTool.generateImageAndReset(context:invocation:), v6, v5);
}

uint64_t CanvasGenerationTool.generateImageAndReset(context:invocation:)()
{
  uint64_t v42 = v0;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void **)(v0 + 72);
  uint64_t v3 = *(void **)(v0 + 48);
  char v4 = *(unsigned char *)(v0 + 144);
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)generativeLogger);
  id v6 = v3;
  outlined copy of MagicGenerativePlaygroundContext(v1, v2, v4);
  id v7 = v6;
  outlined copy of MagicGenerativePlaygroundContext(v1, v2, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  int v11 = *(unsigned __int8 *)(v0 + 144);
  if (v10)
  {
    uint64_t v12 = *(void **)(v0 + 48);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    v41[0] = v40;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v14 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000020C85E340, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    unint64_t v16 = 0xE500000000000000;
    uint64_t v17 = 0x6567616D69;
    if (v11 != 1)
    {
      uint64_t v17 = 0x6974616D6F747561;
      unint64_t v16 = 0xE900000000000063;
    }
    if (v11) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 1954047348;
    }
    if (v11) {
      unint64_t v19 = v16;
    }
    else {
      unint64_t v19 = 0xE400000000000000;
    }
    uint64_t v21 = *(void **)(v0 + 64);
    uint64_t v20 = *(void **)(v0 + 72);
    char v22 = *(unsigned char *)(v0 + 144);
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of MagicGenerativePlaygroundContext(v21, v20, v22);
    outlined consume of MagicGenerativePlaygroundContext(v21, v20, v22);
    _os_log_impl(&dword_20C2D7000, v8, v9, "%s - %s: (context = %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v40, -1, -1);
    MEMORY[0x210550270](v13, -1, -1);
  }
  else
  {
    unint64_t v24 = *(void **)(v0 + 64);
    uint64_t v23 = *(void **)(v0 + 72);
    uint64_t v25 = *(void **)(v0 + 48);

    outlined consume of MagicGenerativePlaygroundContext(v24, v23, v11);
    outlined consume of MagicGenerativePlaygroundContext(v24, v23, v11);
  }

  LOBYTE(v41[0]) = 5;
  CanvasGenerationTool.placeMagicGenerativePlayground(for:)((PaperKit::MagicGenerativePlaygroundState)v41);
  if (v26)
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
  else
  {
    uint64_t v29 = *(void **)(v0 + 72);
    uint64_t v30 = *(void *)(v0 + 56);
    uint64_t v31 = *(void **)(v0 + 64);
    uint64_t v32 = *(void *)(v0 + 40);
    char v33 = *(unsigned char *)(v0 + 144);
    uint64_t v34 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v30, 1, 1, v34);
    uint64_t v35 = swift_allocObject();
    swift_unknownObjectWeakInit();
    outlined copy of MagicGenerativePlaygroundContext(v31, v29, v33);
    swift_retain();
    uint64_t v36 = static MainActor.shared.getter();
    uint64_t v37 = swift_allocObject();
    uint64_t v38 = MEMORY[0x263F8F500];
    *(void *)(v37 + 16) = v36;
    *(void *)(v37 + 24) = v38;
    *(void *)(v37 + 32) = v35;
    *(void *)(v37 + 40) = v31;
    *(void *)(v37 + 48) = v29;
    *(unsigned char *)(v37 + 56) = v33;
    *(void *)(v37 + 64) = v32;
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v30, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.generateImageAndReset(context:invocation:), v37);
    swift_release();
    unint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v39;
    *unint64_t v39 = v0;
    v39[1] = CanvasGenerationTool.generateImageAndReset(context:invocation:);
    return CanvasGenerationTool.waitForGeneratedImageAndReset()();
  }
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[17];
  char v4 = v0[15];
  return v1(v4, v2, v3);
}

uint64_t CanvasGenerationTool.generateImageAndReset(context:invocation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[15] = a1;
  v5[16] = a2;
  v5[17] = a3;
  swift_task_dealloc();
  uint64_t v6 = v4[13];
  uint64_t v7 = v4[12];
  return MEMORY[0x270FA2498](CanvasGenerationTool.generateImageAndReset(context:invocation:), v7, v6);
}

uint64_t closure #1 in CanvasGenerationTool.generateImageAndReset(context:invocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 144) = a7;
  *(void *)(v8 + 72) = a6;
  *(void *)(v8 + 80) = a8;
  *(void *)(v8 + 56) = a4;
  *(void *)(v8 + 64) = a5;
  type metadata accessor for MainActor();
  *(void *)(v8 + 88) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 96) = v10;
  *(void *)(v8 + 104) = v9;
  return MEMORY[0x270FA2498](closure #1 in CanvasGenerationTool.generateImageAndReset(context:invocation:), v10, v9);
}

uint64_t closure #1 in CanvasGenerationTool.generateImageAndReset(context:invocation:)()
{
  uint64_t v43 = v0;
  uint64_t v1 = *(void *)(v0 + 56) + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  *(void *)(v0 + 112) = v2;
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    char v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
    *(void *)(v0 + 120) = v4;
    if (v4)
    {
      int v5 = *(unsigned __int8 *)(v0 + 144);
      id v6 = v4;
      id v7 = objc_msgSend(v3, sel_traitCollection);
      id v8 = objc_msgSend(v7, sel_userInterfaceStyle);

      uint64_t v9 = self;
      uint64_t v10 = &selRef_blackColor;
      if (v8 != (id)2) {
        uint64_t v10 = &selRef_whiteColor;
      }
      id v11 = [v9 *v10];
      *(void *)(v0 + 128) = v11;
      objc_msgSend(v6, sel_beginRecipe);
      if (v5)
      {
        if (v5 == 1)
        {
          uint64_t v12 = (CGImage *)*(id *)(v0 + 64);
          double Width = (double)(uint64_t)CGImageGetWidth(v12);
          objc_msgSend(v6, sel_setSourceImageRatio_, Width / (double)(uint64_t)CGImageGetHeight(v12));
          id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v12);
          if (one-time initialization token for imageGenerationParameterResolution != -1) {
            swift_once();
          }
          unint64_t v16 = *(void **)(v0 + 64);
          unint64_t v15 = *(void **)(v0 + 72);
          uint64_t v17 = (void *)UIImage.padAndResizeImageToSquareOfLength(_:fillColor:)(v11, *(double *)&static UIConstants.imageGenerationParameterResolution);

          objc_msgSend(v6, sel_setSourceImage_, v17);
          outlined consume of MagicGenerativePlaygroundContext(v16, v15, 1);
        }
      }
      else
      {
        uint64_t v32 = *(void *)(v0 + 64);
        uint64_t v31 = *(void *)(v0 + 72);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = xmmword_20C832C20;
        *(void *)(v33 + 32) = v32;
        *(void *)(v33 + 40) = v31;
        swift_bridgeObjectRetain();
        isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v6, sel_addConcepts_, isa);
      }
      double v35 = *(double *)&v3[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
      double v36 = *(double *)&v3[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 8];
      double v37 = *(double *)&v3[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 16];
      double v38 = *(double *)&v3[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 24];
      objc_msgSend(v3, sel_bounds);
      CGRect.isFinite.getter(v35, v36, v37, v38);
      unint64_t v39 = (void *)swift_task_alloc();
      *(void *)(v0 + 136) = v39;
      *unint64_t v39 = v0;
      v39[1] = closure #1 in CanvasGenerationTool.generateImageAndReset(context:invocation:);
      return specialized CanvasGenerationTool.addTitleAndSuggestions(at:)();
    }
    swift_release();
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)generativeLogger);
    unint64_t v24 = v3;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v42 = v28;
      uint64_t v29 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v25, v26, "%s returning from the task (magicGenerativeVC is nil)", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v28, -1, -1);
      MEMORY[0x210550270](v27, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    swift_release();
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)generativeLogger);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v42 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000020C847C50, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v19, v20, "%s returning from the task (self is nil)", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v22, -1, -1);
      MEMORY[0x210550270](v21, -1, -1);
    }
  }
  BOOL v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return MEMORY[0x270FA2498](closure #1 in CanvasGenerationTool.generateImageAndReset(context:invocation:), v3, v2);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[15];
  uint64_t v2 = (void *)v0[16];
  uint64_t v3 = (void *)v0[14];
  char v4 = v0[10];
  swift_release();
  objc_msgSend(v1, sel_commitRecipeWithImagesCount_shapesCount_signaturesCount_strokesCount_invocation_, 0, 0, 0, 0, v4);

  int v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t CanvasGenerationTool.generateImageAndReset(with:invocation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[9] = swift_task_alloc();
  v4[10] = type metadata accessor for MainActor();
  void v4[11] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[12] = v6;
  v4[13] = v5;
  return MEMORY[0x270FA2498](CanvasGenerationTool.generateImageAndReset(with:invocation:), v6, v5);
}

{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  char v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[15] = a1;
  v5[16] = a2;
  v5[17] = a3;
  swift_task_dealloc();
  uint64_t v6 = v4[13];
  id v7 = v4[12];
  return MEMORY[0x270FA2498](CanvasGenerationTool.generateImageAndReset(with:invocation:), v7, v6);
}

uint64_t CanvasGenerationTool.generateImageAndReset(with:invocation:)()
{
  uint64_t v40 = v0;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v2 = (void *)v0[8];
  unint64_t v3 = v0[6];
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)generativeLogger);
  id v5 = v2;
  outlined copy of Data._Representation(v1, v3);
  id v6 = v5;
  outlined copy of Data._Representation(v1, v3);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = (void *)v0[8];
  unint64_t v11 = v0[6];
  if (v9)
  {
    unint64_t v38 = v11 >> 62;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v39[0] = v37;
    *(_DWORD *)uint64_t v12 = 136315650;
    uint64_t v13 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x800000020C85E310, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2048;
    switch(v38)
    {
      case 1uLL:
        uint64_t v18 = v0[5];
        outlined consume of Data._Representation(v18, v0[6]);
        LODWORD(v16) = HIDWORD(v18) - v18;
        if (__OFSUB__(HIDWORD(v18), v18))
        {
          __break(1u);
          JUMPOUT(0x20C7123B4);
        }
        uint64_t v16 = (int)v16;
        break;
      case 2uLL:
        uint64_t v19 = v0[5];
        uint64_t v21 = *(void *)(v19 + 16);
        uint64_t v20 = *(void *)(v19 + 24);
        outlined consume of Data._Representation(v19, v0[6]);
        uint64_t v16 = v20 - v21;
        if (__OFSUB__(v20, v21))
        {
          __break(1u);
          goto LABEL_12;
        }
        break;
      case 3uLL:
LABEL_12:
        outlined consume of Data._Representation(v0[5], v0[6]);
        uint64_t v16 = 0;
        break;
      default:
        unint64_t v15 = v0[6];
        outlined consume of Data._Representation(v0[5], v15);
        uint64_t v16 = BYTE6(v15);
        break;
    }
    uint64_t v23 = v0[5];
    unint64_t v22 = v0[6];
    v0[4] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of Data._Representation(v23, v22);
    _os_log_impl(&dword_20C2D7000, v7, v8, "%s - %s: (encodedRecipe.count = %ld", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v37, -1, -1);
    MEMORY[0x210550270](v12, -1, -1);
  }
  else
  {
    uint64_t v17 = v0[5];
    outlined consume of Data._Representation(v17, v11);

    outlined consume of Data._Representation(v17, v11);
  }

  LOBYTE(v39[0]) = 6;
  CanvasGenerationTool.placeMagicGenerativePlayground(for:)((PaperKit::MagicGenerativePlaygroundState)v39);
  uint64_t v24 = v0[9];
  if (v25)
  {
    swift_release();
    swift_task_dealloc();
    os_log_type_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  else
  {
    uint64_t v28 = v0[7];
    uint64_t v30 = v0[5];
    unint64_t v29 = v0[6];
    uint64_t v31 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v24, 1, 1, v31);
    uint64_t v32 = swift_allocObject();
    swift_unknownObjectWeakInit();
    outlined copy of Data._Representation(v30, v29);
    swift_retain();
    uint64_t v33 = static MainActor.shared.getter();
    uint64_t v34 = (void *)swift_allocObject();
    uint64_t v35 = MEMORY[0x263F8F500];
    _OWORD v34[2] = v33;
    v34[3] = v35;
    v34[4] = v32;
    v34[5] = v30;
    v34[6] = v29;
    v34[7] = v28;
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v24, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.generateImageAndReset(with:invocation:), (uint64_t)v34);
    swift_release();
    double v36 = (void *)swift_task_alloc();
    v0[14] = v36;
    *double v36 = v0;
    v36[1] = CanvasGenerationTool.generateImageAndReset(with:invocation:);
    return CanvasGenerationTool.waitForGeneratedImageAndReset()();
  }
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v2 = v0[16];
  unint64_t v3 = v0[17];
  uint64_t v4 = v0[15];
  return v1(v4, v2, v3);
}

uint64_t closure #1 in CanvasGenerationTool.generateImageAndReset(with:invocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  type metadata accessor for MainActor();
  v7[10] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in CanvasGenerationTool.generateImageAndReset(with:invocation:), v9, v8);
}

uint64_t closure #1 in CanvasGenerationTool.generateImageAndReset(with:invocation:)()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0[6];
  uint64_t v2 = v0 + 5;
  swift_release();
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x210550400](v1 + 16);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
    if (v5)
    {
      uint64_t v6 = v0[9];
      id v7 = v5;
      isCGFloat a = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v7, sel_setEncodedRecipe_withInvocation_, isa, v6);
    }
    else
    {
      if (one-time initialization token for generativeLogger != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)generativeLogger);
      id v15 = v4;
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        uint64_t v24 = v19;
        uint64_t v20 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *uint64_t v2 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_20C2D7000, v16, v17, "%s returning from the task (magicGenerativeVC is nil)", v18, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x210550270](v19, -1, -1);
        MEMORY[0x210550270](v18, -1, -1);
      }
      else
      {
      }
    }
  }
  else
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)generativeLogger);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v24 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      *uint64_t v2 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000020C847C50, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20C2D7000, v10, v11, "%s returning from the task (self is nil)", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v13, -1, -1);
      MEMORY[0x210550270](v12, -1, -1);
    }
  }
  unint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t CanvasGenerationTool.generateImageDestructively(for:invocation:)(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  type metadata accessor for MainActor();
  v3[18] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[19] = v5;
  v3[20] = v4;
  return MEMORY[0x270FA2498](CanvasGenerationTool.generateImageDestructively(for:invocation:), v5, v4);
}

{
  uint64_t *v2;
  void *v3;
  void *v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;

  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  uint64_t v16 = *(unsigned char *)(*v2 + 94);
  uint64_t v5 = *(unsigned char *)(*v2 + 89);
  uint64_t v6 = *v2;
  v4[48] = a1;
  v4[49] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)swift_task_alloc();
  v4[50] = v7;
  *uint64_t v7 = v6;
  v7[1] = CanvasGenerationTool.generateImageDestructively(for:invocation:);
  uint64_t v8 = v3[45];
  uint64_t v9 = v3[44];
  uint64_t v10 = v3[43];
  os_log_type_t v11 = v3[24];
  uint64_t v12 = v3[23];
  uint64_t v13 = v3[22];
  return CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(v13, v12, v11, v5 & 1, v10, v9, v8, v16);
}

uint64_t CanvasGenerationTool.generateImageDestructively(for:invocation:)()
{
  uint64_t v38 = v0;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 136);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(void *)&long long v34 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000020C85E2E0, (uint64_t *)&v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v4, v5, "%s - %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v9, -1, -1);
    MEMORY[0x210550270](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v12 = MEMORY[0x210550400](*(void *)(v0 + 136) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  *(void *)(v0 + 168) = v12;
  if (v12)
  {
    uint64_t v13 = *(const CGPath **)(v0 + 120);
    AnyCanvas.updateCanvasAttachmentProvider()();
    BoundingBodouble x = CGPathGetBoundingBox(v13);
    uint64_t v14 = AnyCanvas.elementCanvasMembers(in:)(BoundingBox.origin.x, BoundingBox.origin.y, BoundingBox.size.width, BoundingBox.size.height);
    *(void *)(v0 + 176) = v14;
    *(void *)(v0 + 184) = v15;
    *(void *)(v0 + 192) = v16;
    *(unsigned char *)(v0 + 89) = v17;
    AnyCanvas.textPromptsFromElementCanvasMembers(_:)(v14, v15, v16, v17 & 1, (unint64_t *)&v34);
    *(_OWORD *)(v0 + 200) = v34;
    uint64_t v18 = v36;
    *(void *)(v0 + 216) = v35;
    *(void *)(v0 + 224) = v18;
    *(unsigned char *)(v0 + 90) = v37;
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v19;
    *uint64_t v19 = v0;
    v19[1] = CanvasGenerationTool.generateImageDestructively(for:invocation:);
    uint64_t v20 = *(void *)(v0 + 120);
    return AnyCanvas.textPromptLookupFor(_:)(v0 + 16, v20);
  }
  else
  {
    unint64_t v22 = *(void **)(v0 + 136);
    swift_release();
    id v23 = v22;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void **)(v0 + 136);
    if (v26)
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(void *)&long long v34 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v30 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v24, v25, "%s: returning (canvas is nil)", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v29, -1, -1);
      MEMORY[0x210550270](v28, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
    swift_allocError();
    *(_OWORD *)uint64_t v32 = xmmword_20C847BD0;
    *(unsigned char *)(v32 + 16) = 2;
    swift_willThrow();
    uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
    return v33(0);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  long long v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void **)v0;
  id v3 = *(_OWORD *)(*(void *)v0 + 32);
  *((_OWORD *)v2 + 15) = *((_OWORD *)v2 + 1);
  *((_OWORD *)v2 + 16) = v3;
  v2[34] = v1[6];
  *((unsigned char *)v2 + 91) = *((unsigned char *)v2 + 56);
  *(_OWORD *)(v2 + 35) = *((_OWORD *)v2 + 4);
  v2[37] = v1[10];
  *((unsigned char *)v2 + 92) = *((unsigned char *)v2 + 88);
  swift_task_dealloc();
  uint64_t v4 = v1[20];
  os_log_type_t v5 = v1[19];
  return MEMORY[0x270FA2498](CanvasGenerationTool.generateImageDestructively(for:invocation:), v5, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;

  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 280);
  if (!v1)
  {
    outlined copy of CanvasMembers?(v2);
LABEL_12:
    os_log_type_t v5 = *(void **)(v0 + 200);
    goto LABEL_13;
  }
  id v3 = *(void *)(v1 + 16);
  outlined copy of CanvasMembers?(v2);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  os_log_type_t v5 = *(void **)(v0 + 200);
  uint64_t v35 = v0;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    os_log_type_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  BOOL v6 = 0;
  uint64_t v7 = v5[2];
  uint64_t v8 = 2 * v7;
  do
  {
    uint64_t v9 = v1;
    unint64_t v11 = *(void *)(v1 + v6 * 8 + 32);
    uint64_t v10 = *(void *)(v1 + v6 * 8 + 40);
    uint64_t v12 = v5[3];
    swift_bridgeObjectRetain();
    if (v7 >= v12 >> 1) {
      os_log_type_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v7 + 1, 1, v5);
    }
    v5[2] = v7 + 1;
    uint64_t v13 = &v5[v8 + v6];
    v13[4] = v11;
    v13[5] = v10;
    v6 += 2;
    ++v7;
    --v3;
    uint64_t v1 = v9;
  }
  while (v3);
  swift_bridgeObjectRelease();
  uint64_t v0 = v35;
LABEL_13:
  *(void *)(v0 + 304) = v5;
  uint64_t v14 = *(void *)(v0 + 256);
  outlined consume of CanvasMembers?(*(void *)(v0 + 280));
  if (v14)
  {
    unint64_t v15 = *(void *)(v0 + 280);
    if (v15)
    {
      LOBYTE(v16) = *(unsigned char *)(v0 + 92);
      char v17 = *(void *)(v0 + 288);
      uint64_t v18 = *(void *)(v0 + 256);
      uint64_t v19 = *(void *)(v0 + 264);
      uint64_t v20 = *(unsigned char *)(v0 + 91) & 1;
      unint64_t v21 = v16 & 1;
      swift_bridgeObjectRetain();
      unint64_t v22 = *(void *)(v0 + 296);
      id v23 = *(void *)(v0 + 272);
      goto LABEL_18;
    }
    outlined consume of CanvasMembers?(*(void *)(v0 + 256));
  }
  uint64_t v24 = *(void *)(v0 + 280);
  unint64_t v15 = AnyCanvas.strokeCanvasMembers(for:)(*(void *)(v0 + 120));
  char v17 = v25;
  unint64_t v22 = v26;
  uint64_t v16 = v27 & 1;
  outlined consume of CanvasMembers?(v24);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v18 = v15;
  uint64_t v19 = v17;
  id v23 = v22;
  uint64_t v20 = v16;
  unint64_t v21 = v16;
LABEL_18:
  *(unsigned char *)(v0 + 94) = v20;
  *(void *)(v0 + 360) = v23;
  *(void *)(v0 + 368) = v15;
  *(void *)(v0 + 344) = v18;
  *(void *)(v0 + 352) = v19;
  *(unsigned char *)(v0 + 93) = v16;
  *(void *)(v0 + 328) = v17;
  *(void *)(v0 + 336) = v22;
  *(void *)(v0 + 312) = v17;
  *(void *)(v0 + 320) = v15;
  uint64_t v28 = *(unsigned __int8 *)(v0 + 90);
  uint64_t v29 = *(int **)((*MEMORY[0x263F8EED0] & **(void **)(v0 + 168)) + 0x660);
  uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v29 + *v29);
  swift_bridgeObjectRetain();
  uint64_t v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v30;
  *uint64_t v30 = v0;
  v30[1] = CanvasGenerationTool.generateImageDestructively(for:invocation:);
  unint64_t v31 = *(void *)(v0 + 216);
  uint64_t v32 = *(void *)(v0 + 224);
  uint64_t v33 = *(void *)(v0 + 208);
  return v36(v33, v31, v32, v28, v15, v17, v22, v21);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *(void **)(v0 + 384);
  uint64_t v1 = *(void **)(v0 + 392);
  id v3 = *(void **)(v0 + 168);
  outlined consume of CanvasMembers?(*(void *)(v0 + 320));

  swift_release();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  os_log_type_t v5 = *(unsigned __int8 *)(v0 + 95);
  return v4(v5);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)v0[48];
  uint64_t v1 = (void *)v0[49];
  id v3 = (void *)v0[21];
  outlined consume of CanvasMembers?(v0[40]);

  swift_release();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t CanvasGenerationTool.generateImageDestructively(for:invocation:)(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 408) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 152);
    uint64_t v6 = *(void *)(v4 + 160);
    uint64_t v7 = CanvasGenerationTool.generateImageDestructively(for:invocation:);
  }
  else
  {
    *(unsigned char *)(v4 + 95) = a1 & 1;
    uint64_t v5 = *(void *)(v4 + 152);
    uint64_t v6 = *(void *)(v4 + 160);
    uint64_t v7 = CanvasGenerationTool.generateImageDestructively(for:invocation:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 112) = v16;
  *(void *)(v9 + 120) = v8;
  *(_OWORD *)(v9 + 80) = v14;
  *(_OWORD *)(v9 + 96) = v15;
  *(unsigned char *)(v9 + 257) = a8;
  *(void *)(v9 + 64) = a6;
  *(void *)(v9 + 72) = a7;
  *(unsigned char *)(v9 + 256) = a4;
  *(void *)(v9 + 48) = a3;
  *(void *)(v9 + 56) = a5;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v9 + 128) = swift_task_alloc();
  *(void *)(v9 + 136) = type metadata accessor for MainActor();
  *(void *)(v9 + 144) = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 152) = v11;
  *(void *)(v9 + 160) = v10;
  return MEMORY[0x270FA2498](CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:), v11, v10);
}

uint64_t CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)()
{
  uint64_t v59 = v0;
  uint64_t v1 = MEMORY[0x210550400](*(void *)(v0 + 120) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  *(void *)(v0 + 168) = v1;
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    id v3 = objc_msgSend(*(id *)(v0 + 120), sel_traitCollection);
    id v4 = objc_msgSend(v3, sel_userInterfaceStyle);

    uint64_t v5 = self;
    uint64_t v6 = &selRef_blackColor;
    if (v4 != (id)2) {
      uint64_t v6 = &selRef_whiteColor;
    }
    id v7 = [v5 *v6];
    *(void *)(v0 + 176) = v7;
    uint64_t v8 = v2;
    uint64_t v9 = swift_bridgeObjectRetain();
    unint64_t v10 = specialized Sequence.compactMap<A>(_:)(v9, v8);
    *(void *)(v0 + 184) = v10;
    swift_bridgeObjectRelease();

    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (v11) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v11)
      {
LABEL_6:
        if (v11 >= 1)
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if ((v10 & 0xC000000000000001) != 0) {
              id v13 = (id)MEMORY[0x21054E050](i, v10);
            }
            else {
              id v13 = *(id *)(v10 + 8 * i + 32);
            }
            long long v14 = v13;
            objc_msgSend(v13, sel_setHidden_, 1);
          }
          goto LABEL_20;
        }
        __break(1u);
        goto LABEL_24;
      }
    }
LABEL_20:
    uint64_t v29 = *(void *)(v0 + 128);
    id v48 = *(void **)(v0 + 120);
    uint64_t v49 = v29;
    uint64_t v57 = *(void *)(v0 + 112);
    uint64_t v30 = *(void *)(v0 + 96);
    unint64_t v31 = *(void **)(v0 + 80);
    uint64_t v51 = *(void *)(v0 + 104);
    double v52 = *(void **)(v0 + 88);
    char v56 = *(unsigned char *)(v0 + 257);
    uint64_t v32 = *(void *)(v0 + 64);
    uint64_t v55 = *(void *)(v0 + 72);
    char v54 = *(unsigned char *)(v0 + 256);
    uint64_t v50 = *(void *)(v0 + 56);
    uint64_t v53 = *(void *)(v0 + 48);
    uint64_t v33 = v7;
    uint64_t v34 = *(void *)(v0 + 40);
    uint64_t v46 = *(void *)(v0 + 32);
    swift_bridgeObjectRelease();
    uint64_t v35 = swift_bridgeObjectRetain();
    size_t v36 = specialized _copyCollectionToContiguousArray<A>(_:)(v35);
    swift_bridgeObjectRelease();
    (*(void (**)(size_t))((*MEMORY[0x263F8EED0] & *v8) + 0x510))(v36);
    swift_release();
    uint64_t v37 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v29, 1, 1, v37);
    id v38 = v31;
    uint64_t v47 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v39 = v48;
    swift_bridgeObjectRetain();
    id v40 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v41 = v52;
    uint64_t v42 = static MainActor.shared.getter();
    uint64_t v43 = swift_allocObject();
    uint64_t v44 = MEMORY[0x263F8F500];
    *(void *)(v43 + 16) = v42;
    *(void *)(v43 + 24) = v44;
    *(void *)(v43 + 32) = v39;
    *(void *)(v43 + 40) = v46;
    *(void *)(v43 + 48) = v34;
    *(void *)(v43 + 56) = v53;
    *(unsigned char *)(v43 + 64) = v54 & 1;
    *(void *)(v43 + 72) = v47;
    *(void *)(v43 + 80) = v52;
    *(void *)(v43 + 88) = v31;
    *(void *)(v43 + 96) = v40;
    *(void *)(v43 + 104) = v30;
    *(void *)(v43 + 112) = v51;
    *(void *)(v43 + 120) = v50;
    *(void *)(v43 + 128) = v32;
    *(void *)(v43 + 136) = v55;
    *(unsigned char *)(v43 + 144) = v56 & 1;
    *(void *)(v43 + 152) = v57;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v49, (uint64_t)&async function pointer to partial apply for closure #3 in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:), v43);
    swift_release();
    uint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v45;
    *uint64_t v45 = v0;
    v45[1] = CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:);
    return CanvasGenerationTool.waitForGeneratedImageAndReset()();
  }
  swift_release();
  if (one-time initialization token for generativeLogger != -1) {
LABEL_24:
  }
    swift_once();
  long long v15 = *(void **)(v0 + 120);
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)generativeLogger);
  id v17 = v15;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  unint64_t v21 = *(void **)(v0 + 120);
  if (v20)
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v58 = v23;
    *(_DWORD *)unint64_t v22 = 136315138;
    uint64_t v24 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v18, v19, "%s: returning (canvas is nil)", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v23, -1, -1);
    MEMORY[0x210550270](v22, -1, -1);
  }
  else
  {
  }
  lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
  swift_allocError();
  *(_OWORD *)uint64_t v26 = xmmword_20C847BD0;
  *(unsigned char *)(v26 + 16) = 2;
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27(0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSData *v2;
  NSData *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  void *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v28 = v0;
  uint64_t v1 = *(void *)(v0 + 200);
  if (v1)
  {
    uint64_t v2 = UIImagePNGRepresentation(*(UIImage **)(v0 + 200));
    if (v2)
    {
      id v3 = v2;
      id v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v5;

      *(void *)(v0 + 224) = v4;
      *(void *)(v0 + 232) = v6;
      id v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v7;
      *id v7 = v0;
      v7[1] = CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:);
      uint64_t v8 = *(void *)(v0 + 208);
      uint64_t v9 = *(void *)(v0 + 216);
      return CanvasGenerationTool.addCanvasElement(for:with:)(v1, v8, v9, v4, v6);
    }
    uint64_t v11 = *(void *)(v0 + 208);
    uint64_t v12 = *(void *)(v0 + 216);
    id v13 = *(void **)(v0 + 200);
    swift_release();
    outlined consume of ImageWithEncodedRecipe?(v13, v11, v12);
  }
  else
  {
    swift_release();
  }
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  long long v14 = *(void **)(v0 + 120);
  long long v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)generativeLogger);
  uint64_t v16 = v14;
  id v17 = Logger.logObject.getter();
  uint64_t v18 = static os_log_type_t.error.getter();
  os_log_type_t v19 = os_log_type_enabled(v17, v18);
  BOOL v20 = *(void **)(v0 + 120);
  if (v19)
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    unint64_t v22 = swift_slowAlloc();
    uint64_t v27 = v22;
    *(_DWORD *)unint64_t v21 = 136315138;
    uint64_t v23 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v17, v18, "%s returning (generated image/data is nil)", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v22, -1, -1);
    MEMORY[0x210550270](v21, -1, -1);
  }
  else
  {
  }
  unint64_t v25 = *(void **)(v0 + 176);
  $defer #1 () in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(*(void *)(v0 + 184), *(void **)(v0 + 168));

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26(0);
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 258);
  swift_release();
  if (v1 == 1)
  {
    id v3 = *(void *)(v0 + 64);
    uint64_t v2 = *(void *)(v0 + 72);
    id v4 = *(void *)(v0 + 56);
    uint64_t v5 = *(unsigned char *)(v0 + 257) & 1;
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 168))
                                                                   + 0x4A8);
    v6(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 256) & 1);
    v6(v4, v3, v2, v5);
  }
  id v7 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v9 = *(void **)(v0 + 200);
  uint64_t v11 = *(void **)(v0 + 176);
  unint64_t v10 = *(void *)(v0 + 184);
  uint64_t v12 = *(void **)(v0 + 168);
  outlined consume of Data._Representation(*(void *)(v0 + 224), *(void *)(v0 + 232));
  outlined consume of ImageWithEncodedRecipe?(v9, v7, v8);
  $defer #1 () in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(v10, v12);
  swift_bridgeObjectRelease();

  id v13 = *(unsigned __int8 *)(v0 + 258);
  swift_task_dealloc();
  long long v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v14(v13);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = v0[28];
  uint64_t v2 = v0[29];
  id v4 = v0[26];
  id v3 = v0[27];
  uint64_t v5 = (void *)v0[25];
  id v7 = (void *)v0[22];
  uint64_t v6 = v0[23];
  uint64_t v8 = (void *)v0[21];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  outlined consume of ImageWithEncodedRecipe?(v5, v4, v3);
  $defer #1 () in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(v6, v8);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9(0);
}

uint64_t CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[25] = a1;
  v5[26] = a2;
  v5[27] = a3;
  swift_task_dealloc();
  uint64_t v6 = v4[20];
  uint64_t v7 = v4[19];
  return MEMORY[0x270FA2498](CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:), v7, v6);
}

uint64_t CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(unsigned char *)(v4 + 258) = a1;
  *(void *)(v4 + 248) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 160);
  uint64_t v6 = *(void *)(v3 + 152);
  if (v1) {
    uint64_t v7 = CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:);
  }
  else {
    uint64_t v7 = CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:);
  }
  return MEMORY[0x270FA2498](v7, v6, v5);
}

uint64_t $defer #1 () in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(unint64_t a1, void *a2)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a2) + 0x518))(MEMORY[0x263F8EE78]);
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x21054E050](i, a1);
      }
      else {
        id v7 = *(id *)(a1 + 8 * i + 32);
      }
      uint64_t v8 = v7;
      objc_msgSend(v7, sel_setHidden_, 0);
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 88) = v13;
  *(void *)(v5 + 96) = v14;
  *(_OWORD *)(v5 + 72) = v12;
  *(_OWORD *)(v5 + 56) = v11;
  *(_OWORD *)(v5 + 40) = v10;
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  type metadata accessor for MainActor();
  *(void *)(v5 + 104) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 112) = v7;
  *(void *)(v5 + 120) = v6;
  return MEMORY[0x270FA2498](closure #3 in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:), v7, v6);
}

uint64_t closure #3 in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)()
{
  uint64_t v66 = v0;
  uint64_t v1 = (void **)(v0 + 24);
  uint64_t v2 = *(void **)(*(void *)(v0 + 24) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
  *(void *)(v0 + 128) = v2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + 40);
    id v4 = v2;
    objc_msgSend(v4, sel_beginRecipe);
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = specialized Sequence.compactMap<A>(_:)(v5, &demangling cache variable for type metadata for WeakRef<Image>?, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>, MEMORY[0x263F32D38], (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    swift_bridgeObjectRelease();
    uint64_t v7 = v3;
    uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v6, v7);
    *(void *)(v0 + 136) = 0;

    swift_bridgeObjectRelease();
    uint64_t v9 = v8[2];
    uint64_t v10 = MEMORY[0x263F8EE78];
    if (v9)
    {
      id v64 = v4;
      long long v11 = self;
      swift_bridgeObjectRetain();
      long long v12 = v8 + 5;
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v14 = *(v12 - 1);
        unint64_t v15 = *v12;
        outlined copy of Data._Representation(v14, *v12);
        isCGFloat a = Data._bridgeToObjectiveC()().super.isa;
        id v17 = objc_msgSend(v11, sel_promptsFromRecipeData_, isa);

        if (v17)
        {
          uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          outlined consume of Data._Representation(v14, v15);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          }
          unint64_t v20 = v13[2];
          unint64_t v19 = v13[3];
          if (v20 >= v19 >> 1) {
            uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v13);
          }
          v13[2] = v20 + 1;
          v13[v20 + 4] = v18;
        }
        else
        {
          outlined consume of Data._Representation(v14, v15);
        }
        v12 += 2;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      id v4 = v64;
      uint64_t v10 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    uint64_t v65 = v10;
    uint64_t v32 = v13[2];
    if (v32)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v32; ++i)
      {
        uint64_t v34 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v34);
      }
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v35 = *(void *)(v0 + 48);
    Class v36 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setConcepts_, v36);

    if (v35)
    {
      uint64_t v37 = one-time initialization token for imageGenerationParameterResolution;
      id v38 = *(id *)(v0 + 48);
      if (v37 != -1) {
        swift_once();
      }
      uint64_t v39 = *(void *)(v0 + 56);
      double v40 = *(double *)&static UIConstants.imageGenerationParameterResolution;
      id v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithWhite_alpha_, 0.0, 0.0);
      uint64_t v42 = (void *)UIImage.padAndResizeImageToSquareOfLength(_:fillColor:)(v41, v40);

      uint64_t v43 = (void *)UIImage.alphaMaskForSketch()();
      objc_msgSend(v4, sel_setSketchMask_, v43);
      if (v39)
      {
        uint64_t v44 = *(void **)(v0 + 64);
        id v45 = *(id *)(v0 + 56);
        objc_msgSend(v45, sel_size);
        double v47 = v46;
        objc_msgSend(v45, sel_size);
        double v49 = v47 / v48;
        uint64_t v50 = (void *)UIImage.padAndResizeImageToSquareOfLength(_:fillColor:)(v44, *(double *)&static UIConstants.imageGenerationParameterResolution);
        objc_msgSend(v4, sel_setSourceImage_, v50);
        objc_msgSend(v4, sel_setSourceImageRatio_, v49);
        objc_msgSend(v4, sel_setGenerateCaptionFromImage_, 0);
        objc_msgSend(v4, sel_setSanitizationCategory_, 3);
      }
      else
      {
        objc_msgSend(v4, sel_setSketchImage_, v42);
        objc_msgSend(v4, sel_setSanitizationCategory_, 2);
      }
    }
    else
    {
      uint64_t v51 = *(void **)(v0 + 56);
      if (v51)
      {
        id v52 = v51;
        objc_msgSend(v52, sel_size);
        double v54 = v53;
        objc_msgSend(v52, sel_size);
        double v56 = v54 / v55;
        if (one-time initialization token for imageGenerationParameterResolution != -1) {
          swift_once();
        }
        uint64_t v57 = (void *)UIImage.padAndResizeImageToSquareOfLength(_:fillColor:)(*(void **)(v0 + 64), *(double *)&static UIConstants.imageGenerationParameterResolution);
        objc_msgSend(v4, sel_setSourceImage_, v57);

        objc_msgSend(v4, sel_setSourceImageRatio_, v56);
        objc_msgSend(v4, sel_setGenerateCaptionFromImage_, 1);
        objc_msgSend(v4, sel_setSanitizationCategory_, 1);
      }
      else
      {
        objc_msgSend(v4, sel_setSourceImage_, 0);
        objc_msgSend(v4, sel_setSanitizationCategory_, 0);
      }
    }
    uint64_t v60 = *(void *)(v0 + 72);
    objc_msgSend(v4, sel_setSketchComplexityMeasure_, 1.0);
    if (*(void *)(v60 + 16))
    {
      Class v61 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v4, sel_addConcepts_, v61);
    }
    if (*(void *)(*(void *)(v0 + 80) + 16))
    {
      Class v62 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v4, sel_addSuggestions_, v62);
    }
    objc_msgSend(*(id *)(v0 + 24), sel_frame);
    os_log_type_t v63 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v63;
    *os_log_type_t v63 = v0;
    v63[1] = closure #3 in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:);
    return specialized CanvasGenerationTool.addTitleAndSuggestions(at:)();
  }
  else
  {
    swift_release();
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    unint64_t v21 = *v1;
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)generativeLogger);
    id v23 = v21;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *v1;
    if (v26)
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v65 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v30 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v24, v25, "%s returning (magicGenerativeVC is nil)", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v29, -1, -1);
      MEMORY[0x210550270](v28, -1, -1);
    }
    else
    {
    }
    uint64_t v58 = *(uint64_t (**)(void))(v0 + 8);
    return v58();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 112);
  return MEMORY[0x270FA2498](closure #3 in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:), v3, v2);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[11];
  swift_release();
  id v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized Sequence.compactMap<A>(_:)(v4, &demangling cache variable for type metadata for WeakRef<Image>?, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>, MEMORY[0x263F32D38], (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7, &demangling cache variable for type metadata for WeakRef<Shape>?, &demangling cache variable for type metadata for WeakRef<Shape>, MEMORY[0x263F32D40], (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_bridgeObjectRetain();
  long long v11 = specialized Sequence.compactMap<A>(_:)(v10, &demangling cache variable for type metadata for WeakRef<Signature>?, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Signature>, MEMORY[0x263F32D48], (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  long long v12 = *(void *)(v11 + 16);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_commitRecipeWithImagesCount_shapesCount_signaturesCount_strokesCount_invocation_, v6, v9, v12, *(void *)(v3 + 16), v2);

  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CanvasGenerationTool.placeMagicGenerativePlayground(for:)(PaperKit::MagicGenerativePlaygroundState a1)
{
  uint64_t v3 = v2;
  id v4 = (unsigned __int8 *)a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  double v54 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v4;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)generativeLogger);
  uint64_t v9 = v1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v55 = v2;
    uint64_t v56 = v7;
    uint64_t v12 = 0x616974696E696E75;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(void *)&v58.CGFloat a = v14;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v15 = CanvasGenerationTool.nameAndPointerDescription.getter();
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x800000020C85E290, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    unint64_t v17 = 0xED000064657A696CLL;
    switch(v56)
    {
      case 1:
        uint64_t v12 = 0x696C616974696E69;
        unint64_t v17 = 0xEB0000000064657ALL;
        break;
      case 2:
        uint64_t v12 = 0x656C6553646E6177;
        unint64_t v17 = 0xED00006E6F697463;
        break;
      case 3:
        unint64_t v19 = "composingFromEmptyState";
        goto LABEL_15;
      case 4:
        uint64_t v12 = 0xD000000000000016;
        uint64_t v18 = "composingWandSelection";
        goto LABEL_13;
      case 5:
        uint64_t v12 = 0xD000000000000018;
        uint64_t v18 = "composingProvidedContext";
        goto LABEL_13;
      case 6:
        unint64_t v19 = "composingProvidedRecipe";
LABEL_15:
        unint64_t v17 = (unint64_t)(v19 - 32) | 0x8000000000000000;
        uint64_t v12 = 0xD000000000000017;
        break;
      case 7:
        uint64_t v12 = 0xD000000000000011;
        uint64_t v18 = "cancelledOrFailed";
        goto LABEL_13;
      case 8:
        uint64_t v12 = 0x65746172656E6567;
        unint64_t v17 = 0xE900000000000064;
        break;
      case 9:
        uint64_t v12 = 0xD000000000000010;
        uint64_t v18 = "generationFailed";
LABEL_13:
        unint64_t v17 = (unint64_t)(v18 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v17, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v10, v11, "%s - %s: (state = %s)", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v14, -1, -1);
    MEMORY[0x210550270](v13, -1, -1);

    uint64_t v3 = v55;
    uint64_t v7 = v56;
  }
  else
  {
  }
  *(void *)&v58.CGFloat d = &type metadata for PencilAndPaperFeatureFlags;
  *(void *)&v58.CGFloat tx = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v58.a) = 2;
  char v20 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
  if ((v20 & 1) == 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x20C715DB4);
  }
  uint64_t v21 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC;
  uint64_t v22 = *(void **)&v9[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
  if (!v22)
  {
    id v26 = objc_msgSend(objc_allocWithZone((Class)PPKGPInProcessMagicPaperViewController), sel_initWithTokenProvider_, v9);
    LOBYTE(v58.a) = 1;
    CanvasGenerationTool.magicGenerativeState.setter((unsigned __int8 *)&v58);
    uint64_t v27 = *(void **)&v9[v21];
    *(void *)&v9[v21] = v26;

    uint64_t v28 = *(void **)&v9[v21];
    if (!v28) {
      goto LABEL_28;
    }
    uint64_t v29 = &v9[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvasGenerationToolDelegate];
    if (MEMORY[0x210550400](&v9[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvasGenerationToolDelegate]))
    {
      uint64_t v30 = *((void *)v29 + 1);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v55 = v3;
      uint64_t v32 = v7;
      uint64_t v33 = ObjectType;
      uint64_t v34 = *(void (**)(char *, id, uint64_t, uint64_t))(v30 + 8);
      id v35 = v28;
      uint64_t v36 = v33;
      uint64_t v7 = v32;
      v34(v9, v35, v36, v30);
      swift_unknownObjectRelease();
    }
    uint64_t v22 = *(void **)&v9[v21];
    if (!v22) {
      goto LABEL_28;
    }
  }
  id v23 = v22;
  uint64_t v24 = (UIView *)objc_msgSend(v23, sel_view);
  if (!v24)
  {

LABEL_28:
    lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
    swift_allocError();
    *(_OWORD *)uint64_t v37 = xmmword_20C837390;
    *(unsigned char *)(v37 + 16) = 2;
    swift_willThrow();
    return;
  }
  os_log_type_t v25 = v24;
  LOBYTE(v58.a) = v7;
  CanvasGenerationTool.magicGenerativeState.setter((unsigned __int8 *)&v58);
  objc_msgSend(v23, sel_setDelegate_, v9);
  switch(v7)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_31;
    default:
      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v38)
      {
LABEL_31:
        CanvasGenerationTool.insertMagicGenerationView(_:)(v25);
        double x = *(double *)&v9[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
        double y = *(double *)&v9[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 8];
        double width = *(double *)&v9[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 16];
        double height = *(double *)&v9[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 24];
        objc_msgSend(v9, sel_bounds);
        double v44 = v43;
        if (CGRect.isFinite.getter(x, y, width, height))
        {
          double v45 = *(double *)&v9[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth];
          if (v45 > 0.0 && v44 > 0.0)
          {
            CGAffineTransformMakeScale(&v58, v44 / v45, v44 / v45);
            v59.origin.double x = x;
            v59.origin.double y = y;
            v59.size.double width = width;
            v59.size.double height = height;
            CGRect v60 = CGRectApplyAffineTransform(v59, &v58);
            double x = v60.origin.x;
            double y = v60.origin.y;
            double width = v60.size.width;
            double height = v60.size.height;
          }
        }
        double v46 = (UIView *)objc_msgSend(objc_allocWithZone((Class)PPKGPMagicPaperState), sel_initWithFrame_isEditing_, 0, x, y, width, height);
        objc_msgSend(v23, sel_setState_, v46);
      }
      else
      {
        uint64_t v47 = type metadata accessor for TaskPriority();
        uint64_t v48 = (uint64_t)v54;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v54, 1, 1, v47);
        type metadata accessor for MainActor();
        double v49 = v9;
        id v50 = v23;
        double v46 = v25;
        uint64_t v51 = static MainActor.shared.getter();
        id v52 = (void *)swift_allocObject();
        uint64_t v53 = MEMORY[0x263F8F500];
        v52[2] = v51;
        v52[3] = v53;
        v52[4] = v49;
        v52[5] = v46;
        v52[6] = v50;
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v48, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:), (uint64_t)v52);
        swift_release();
      }

      break;
  }
}

uint64_t closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  type metadata accessor for MainActor();
  v6[11] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:), v8, v7);
}

uint64_t closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:)()
{
  uint64_t v19 = v0;
  uint64_t v2 = *(char **)(v0 + 64);
  uint64_t v1 = *(UIView **)(v0 + 72);
  swift_release();
  CanvasGenerationTool.hideToolPickerIfNeeded()();
  CanvasGenerationTool.insertMagicGenerationView(_:)(v1);
  double x = *(double *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
  double y = *(double *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 8];
  double width = *(double *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 16];
  double height = *(double *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 24];
  objc_msgSend(v2, sel_bounds);
  double v8 = v7;
  if (CGRect.isFinite.getter(x, y, width, height))
  {
    double v9 = *(double *)(*(void *)(v0 + 64)
                   + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth);
    if (v9 > 0.0 && v8 > 0.0)
    {
      CGAffineTransformMakeScale(&v18, v8 / v9, v8 / v9);
      long long v10 = *(_OWORD *)&v18.c;
      long long v11 = *(_OWORD *)&v18.tx;
      *(_OWORD *)(v0 + 16) = *(_OWORD *)&v18.a;
      *(_OWORD *)(v0 + 32) = v10;
      *(_OWORD *)(v0 + 48) = v11;
      double v12 = x;
      *(double *)&long long v10 = y;
      *(double *)&long long v11 = width;
      double v13 = height;
      CGRect v21 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v10 - 8), (CGAffineTransform *)(v0 + 16));
      double x = v21.origin.x;
      double y = v21.origin.y;
      double width = v21.size.width;
      double height = v21.size.height;
    }
  }
  uint64_t v14 = *(void **)(v0 + 80);
  id v15 = objc_msgSend(objc_allocWithZone((Class)PPKGPMagicPaperState), sel_initWithFrame_isEditing_, 1, x, y, width, height);
  objc_msgSend(v14, sel_setState_, v15);

  CanvasGenerationTool.addMagicGenerativeBackgroundView()();
  unint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

Swift::Void __swiftcall CanvasGenerationTool.insertMagicGenerationView(_:)(UIView *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView;
  id v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView];
  if (v4 || (CanvasGenerationTool.addMagicGenerativeBackgroundView()(), (id v4 = *(void **)&v1[v3]) != 0))
  {
    uint64_t v5 = &v1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_cachedMagicFrame];
    *(_OWORD *)uint64_t v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    v5[32] = 1;
    id v11 = v4;
    [(UIView *)a1 setTranslatesAutoresizingMaskIntoConstraints:0];
    LODWORD(v6) = 1148846080;
    [(UIView *)a1 setContentHuggingPriority:1 forAxis:v6];
    LODWORD(v7) = 1148846080;
    [(UIView *)a1 setContentCompressionResistancePriority:1 forAxis:v7];
    uint64_t v8 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_containerScrollView;
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_containerScrollView], sel_addSubview_, a1);
    id v9 = *(id *)&v1[v8];
    objc_msgSend(v1, sel_frame);
    double Width = CGRectGetWidth(v13);
    objc_msgSend(v1, sel_frame);
    objc_msgSend(v9, sel_setContentSize_, Width, CGRectGetHeight(v14));

    specialized static NSLayoutConstraint.constrain(_:to:)(a1, v11);
    objc_msgSend(v1, sel_layoutIfNeeded);
  }
}

Swift::Void __swiftcall CanvasGenerationTool.showBlurEffect(animationDuration:)(Swift::Double animationDuration)
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    double v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t aBlock = v8;
    *(_DWORD *)double v7 = 136315138;
    uint64_t v9 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v5, v6, "%s: show blur effect", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v8, -1, -1);
    MEMORY[0x210550270](v7, -1, -1);
  }
  else
  {
  }
  id v11 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_blurView];
  if (v11)
  {
    id v12 = v11;
    if (objc_msgSend(v12, sel_isHidden))
    {
      CGRect v13 = self;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v12;
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = partial apply for closure #1 in CanvasGenerationTool.showBlurEffect(animationDuration:);
      *(void *)(v15 + 24) = v14;
      os_log_type_t v25 = partial apply for thunk for @callee_guaranteed () -> ();
      uint64_t v26 = v15;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v22 = 1107296256;
      id v23 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v24 = &block_descriptor_147_0;
      unint64_t v16 = _Block_copy(&aBlock);
      id v17 = v12;
      swift_retain();
      swift_release();
      objc_msgSend(v13, sel_performWithoutAnimation_, v16);
      _Block_release(v16);
      LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v16)
      {
        __break(1u);
        return;
      }
      if (animationDuration <= 0.0) {
        animationDuration = 0.5;
      }
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v17;
      os_log_type_t v25 = partial apply for closure #2 in CanvasGenerationTool.showBlurEffect(animationDuration:);
      uint64_t v26 = v18;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v22 = 1107296256;
      id v23 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      uint64_t v24 = &block_descriptor_153_0;
      uint64_t v19 = _Block_copy(&aBlock);
      id v20 = v17;
      swift_release();
      objc_msgSend(v13, sel_animateWithDuration_animations_, v19, animationDuration);
      _Block_release(v19);
      swift_release();
    }
  }
}

Swift::Void __swiftcall CanvasGenerationTool.hideBlurEffect(animationDuration:)(Swift::Double animationDuration)
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    double v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t aBlock = v8;
    *(_DWORD *)double v7 = 136315138;
    uint64_t v9 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v5, v6, "%s: hide blur effect", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v8, -1, -1);
    MEMORY[0x210550270](v7, -1, -1);
  }
  else
  {
  }
  id v11 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_blurView];
  if (v11)
  {
    id v12 = v11;
    if ((objc_msgSend(v12, sel_isHidden) & 1) == 0)
    {
      if (animationDuration <= 0.0) {
        animationDuration = 0.5;
      }
      CGRect v13 = self;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v12;
      uint64_t v24 = partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
      uint64_t v25 = v14;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v21 = 1107296256;
      uint64_t v22 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      id v23 = &block_descriptor_132;
      uint64_t v15 = _Block_copy(&aBlock);
      id v16 = v12;
      swift_release();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v16;
      uint64_t v24 = partial apply for closure #2 in CanvasGenerationTool.hideBlurEffect(animationDuration:);
      uint64_t v25 = v17;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v21 = 1107296256;
      uint64_t v22 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      id v23 = &block_descriptor_138;
      uint64_t v18 = _Block_copy(&aBlock);
      id v19 = v16;
      swift_release();
      objc_msgSend(v13, sel_animateWithDuration_animations_completion_, v15, v18, animationDuration);
      _Block_release(v18);
      _Block_release(v15);
    }
  }
}

Swift::Void __swiftcall CanvasGenerationTool.addMagicGenerativeBackgroundView()()
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v46 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x800000020C85E240, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v6, -1, -1);
    MEMORY[0x210550270](v5, -1, -1);
  }
  else
  {
  }
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView;
  if (*(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView])
  {
    unint64_t v10 = v2;
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      CGRect v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v46 = v14;
      *(_DWORD *)CGRect v13 = 136315138;
      uint64_t v15 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v11, v12, "%s returning (magicGenerativeBackgroundView is NOT nil)", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v14, -1, -1);
      MEMORY[0x210550270](v13, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
    objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v18 = objc_msgSend(self, sel_clearColor);
    objc_msgSend(v17, sel_setBackgroundColor_, v18);

    objc_msgSend(v17, sel_setUserInteractionEnabled_, 1);
    uint64_t v19 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_containerScrollView;
    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_containerScrollView], sel_setContentInset_, *MEMORY[0x263F834E8], *(double *)(MEMORY[0x263F834E8] + 8), *(double *)(MEMORY[0x263F834E8] + 16), *(double *)(MEMORY[0x263F834E8] + 24));
    id v20 = objc_msgSend(v17, sel_topAnchor);
    id v21 = objc_msgSend(*(id *)&v2[v19], sel_contentLayoutGuide);
    id v22 = objc_msgSend(v21, sel_topAnchor);

    id v23 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v22);
    uint64_t v24 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_backgroundViewTopAnchorConstraint;
    uint64_t v25 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_backgroundViewTopAnchorConstraint];
    *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_backgroundViewTopAnchorConstraint] = v23;

    objc_msgSend(*(id *)&v2[v19], sel_addSubview_, v17);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_20C83E2F0;
    id v27 = objc_msgSend(v17, sel_widthAnchor);
    id v28 = objc_msgSend(v2, sel_widthAnchor);
    id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

    *(void *)(v26 + 32) = v29;
    id v30 = objc_msgSend(v17, sel_trailingAnchor);
    id v31 = objc_msgSend(v2, sel_trailingAnchor);
    id v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

    *(void *)(v26 + 40) = v32;
    id v33 = objc_msgSend(v17, sel_heightAnchor);
    objc_msgSend(v2, sel_frame);
    double Height = CGRectGetHeight(v47);
    if (one-time initialization token for bottomPaddingForBackgroundView != -1) {
      swift_once();
    }
    id v35 = objc_msgSend(v33, sel_constraintEqualToConstant_, Height + *(double *)&static UIConstants.bottomPaddingForBackgroundView, v45, v46);

    *(void *)(v26 + 48) = v35;
    uint64_t v36 = *(void **)&v2[v24];
    if (v36)
    {
      uint64_t v37 = self;
      *(void *)(v26 + 56) = v36;
      id v38 = v36;
      id v39 = objc_msgSend(v17, sel_leadingAnchor);
      id v40 = objc_msgSend(*(id *)&v2[v19], sel_contentLayoutGuide);
      id v41 = objc_msgSend(v40, sel_leadingAnchor);

      id v42 = objc_msgSend(v39, sel_constraintEqualToAnchor_, v41);
      *(void *)(v26 + 64) = v42;
      uint64_t v46 = v26;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
      isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v37, sel_activateConstraints_, isa);

      double v44 = *(void **)&v2[v9];
      *(void *)&v2[v9] = v17;
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall CanvasGenerationTool.allocateGenerationFrame(for:with:)(CGSize a1, CGPoint with)
{
  double y = with.y;
  double x = with.x;
  CGFloat width = a1.width;
  CGFloat height = a1.height;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)generativeLogger);
  uint64_t v6 = v2;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(void *)&v70.CGFloat a = v10;
    *(_DWORD *)uint64_t v9 = 136315906;
    uint64_t v11 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v71[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    v71[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x800000020C85E210, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 22) = 2080;
    uint64_t v13 = CGSize.debugDescription.getter();
    v71[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 32) = 2080;
    uint64_t v15 = CGPoint.debugDescription.getter();
    v71[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v7, v8, "%s - %s: (imageSize = %s, preferredCenter = %s", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x210550270](v10, -1, -1);
    MEMORY[0x210550270](v9, -1, -1);
  }
  else
  {
  }
  v17.f64[0] = width;
  if ((*(void *)&width & 0x7FFFFFFFFFFFFFFFLL) != 0 || (*(void *)&height & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if (one-time initialization token for maxGeneratedImageSize != -1)
    {
      swift_once();
      v17.f64[0] = width;
    }
    v17.f64[1] = height;
    float64x2_t v18 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v17, (float64x2_t)static UIConstants.maxGeneratedImageSize), (int8x16_t)static UIConstants.maxGeneratedImageSize, (int8x16_t)v17);
    if (one-time initialization token for minGeneratedImageSize != -1)
    {
      float64x2_t v69 = v18;
      swift_once();
      float64x2_t v18 = v69;
    }
    int8x16_t v19 = vbslq_s8((int8x16_t)vcgeq_f64((float64x2_t)static UIConstants.minGeneratedImageSize, v18), (int8x16_t)static UIConstants.minGeneratedImageSize, (int8x16_t)v18);
  }
  else
  {
    if (one-time initialization token for defaultGeneratedImageSize != -1) {
      swift_once();
    }
    int8x16_t v19 = (int8x16_t)static UIConstants.defaultGeneratedImageSize;
  }
  float64x2_t v67 = (float64x2_t)v19;
  objc_msgSend(v6, sel_bounds);
  CGFloat v24 = v20;
  CGFloat v25 = v21;
  CGFloat v26 = v22;
  CGFloat v27 = v23;
  if (x == 0.0 && y == 0.0)
  {
    double x = CGRectGetMidX(*(CGRect *)&v20);
    v72.origin.double x = v24;
    v72.origin.double y = v25;
    v72.size.CGFloat width = v26;
    v72.size.CGFloat height = v27;
    double y = CGRectGetMidY(v72);
  }
  double v28 = x - 0.5 * v67.f64[0];
  double v29 = 80.0;
  double v64 = v28;
  v73.top = 80.0;
  v73.left = 80.0;
  v73.bottom = 80.0;
  v73.right = 80.0;
  v76.origin.double x = v24;
  v76.origin.double y = v25;
  v76.size.CGFloat width = v26;
  v76.size.CGFloat height = v27;
  __C::CGRect v74 = CGRect.withSafeArea(insets:in:)(v73, v76);
  id v30 = (double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
  *(__C::CGRect *)id v30 = v74;
  objc_msgSend(v6, sel_bounds, *(void *)&v64, y - vmuld_lane_f64(0.5, v67, 1), *(_OWORD *)&v67);
  uint64_t v31 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth] = v32;
  if (v30[1] > 80.0) {
    double v29 = v30[1];
  }
  v30[1] = v29;
  double v33 = v30[3];
  if (one-time initialization token for minimumHeightForMagicGenerativeVC != -1)
  {
    swift_once();
    double v29 = v30[1];
  }
  if (v33 <= *(double *)&static UIConstants.minimumHeightForMagicGenerativeVC) {
    double v33 = *(double *)&static UIConstants.minimumHeightForMagicGenerativeVC;
  }
  v30[3] = v33;
  double v34 = *v30;
  double v35 = v30[2];
  if (CGRect.isFinite.getter(*v30, v29, v35, v33)
    && (uint64_t v36 = MEMORY[0x210550400](&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas])) != 0)
  {
    uint64_t v37 = (void *)v36;
    objc_msgSend(v6, sel_convertRect_toCoordinateSpace_, v36, v34, v29, v35, v33);
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;

    uint64_t v46 = &v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_knownCanvasGenerationFrame];
    *(void *)uint64_t v46 = v39;
    *((void *)v46 + 1) = v41;
    *((void *)v46 + 2) = v43;
    *((void *)v46 + 3) = v45;
    v46[32] = 0;
  }
  else
  {
    CGRect v47 = &v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_knownCanvasGenerationFrame];
    *(_OWORD *)CGRect v47 = 0u;
    *((_OWORD *)v47 + 1) = 0u;
    v47[32] = 1;
  }
  uint64_t v48 = v6;
  double v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v68 = v31;
    uint64_t v51 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    v71[0] = v52;
    *(_DWORD *)uint64_t v51 = 136315394;
    uint64_t v53 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)&v70.CGFloat a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 12) = 2080;
    double v55 = *v30;
    double v56 = v30[1];
    double v57 = v30[2];
    double v58 = v30[3];
    objc_msgSend(v48, sel_bounds);
    double v60 = v59;
    if (CGRect.isFinite.getter(v55, v56, v57, v58))
    {
      double v61 = *(double *)&v6[v68];
      if (v61 > 0.0 && v60 > 0.0)
      {
        CGAffineTransformMakeScale(&v70, v60 / v61, v60 / v61);
        v75.origin.double x = v55;
        v75.origin.double y = v56;
        v75.size.CGFloat width = v57;
        v75.size.CGFloat height = v58;
        CGRectApplyAffineTransform(v75, &v70);
      }
    }
    uint64_t v62 = CGRect.debugDescription.getter();
    *(void *)&v70.CGFloat a = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v49, v50, "%s Calculated generationFrame = %s", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v52, -1, -1);
    MEMORY[0x210550270](v51, -1, -1);
  }
  else
  {
  }
}

uint64_t CanvasGenerationTool.addCanvasElement(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[52] = a5;
  v6[53] = v5;
  v6[50] = a3;
  v6[51] = a4;
  v6[48] = a1;
  v6[49] = a2;
  v6[54] = type metadata accessor for MainActor();
  v6[55] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[56] = v8;
  v6[57] = v7;
  return MEMORY[0x270FA2498](CanvasGenerationTool.addCanvasElement(for:with:), v8, v7);
}

uint64_t CanvasGenerationTool.addCanvasElement(for:with:)()
{
  uint64_t v73 = v0;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 424);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  id v3 = v1;
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 424);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(void *)&v72.CGFloat a = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    *(void *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x800000020C85E1F0, (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v4, v5, "%s - %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v9, -1, -1);
    MEMORY[0x210550270](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v12 = MEMORY[0x210550400](*(void *)(v0 + 424) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  *(void *)(v0 + 464) = v12;
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    double v14 = CanvasGenerationTool.generationFrameInCanvas.getter();
    uint64_t v69 = v15;
    double v70 = v14;
    uint64_t v67 = v17;
    uint64_t v68 = v16;
    float64x2_t v18 = (void *)MEMORY[0x263F8EED0];
    int8x16_t v19 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x2F8))();
    (*(void (**)(void))((*v18 & *v19) + 0x2A0))();
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t v64 = *(void *)(v0 + 136);
    uint64_t v65 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 152);
    uint64_t v63 = *(void *)(v0 + 160);
    uint64_t v66 = *(void *)(v0 + 168);

    (*(void (**)(void))((*v18 & *v13) + 0x5D0))();
    double v22 = *(double *)(v0 + 72);
    double v23 = *(double *)(v0 + 80);
    double v24 = *(double *)(v0 + 88);
    double v25 = *(double *)(v0 + 96);
    double v27 = *(double *)(v0 + 104);
    double v26 = *(double *)(v0 + 112);
    outlined init with take of CGAffineTransform?(v0 + 72, v0 + 16);
    double v28 = 1.0;
    double v29 = 0.0;
    uint64_t v30 = *(void *)(v0 + 424);
    if (*(unsigned char *)(v0 + 64)) {
      double v31 = 0.0;
    }
    else {
      double v31 = v26;
    }
    if (*(unsigned char *)(v0 + 64)) {
      double v32 = 0.0;
    }
    else {
      double v32 = v27;
    }
    if (*(unsigned char *)(v0 + 64)) {
      double v33 = 1.0;
    }
    else {
      double v33 = v25;
    }
    if (*(unsigned char *)(v0 + 64)) {
      double v34 = 0.0;
    }
    else {
      double v34 = v24;
    }
    uint64_t v36 = *(void *)(v0 + 408);
    unint64_t v35 = *(void *)(v0 + 416);
    if ((*(unsigned char *)(v0 + 64) & 1) == 0)
    {
      double v29 = v23;
      double v28 = v22;
    }
    uint64_t v37 = *(void *)(v0 + 400);
    long long v71 = *(_OWORD *)(v0 + 384);
    *(void *)(v0 + 176) = v65;
    *(void *)(v0 + 184) = v64;
    *(void *)(v0 + 192) = v20;
    *(void *)(v0 + 200) = v21;
    *(void *)(v0 + 208) = v63;
    *(double *)(v0 + 224) = v28;
    *(void *)(v0 + 216) = v66;
    *(double *)(v0 + 232) = v29;
    *(double *)(v0 + 240) = v34;
    *(double *)(v0 + 248) = v33;
    *(double *)(v0 + 256) = v32;
    *(double *)(v0 + 264) = v31;
    CGAffineTransformConcat(&v72, (CGAffineTransform *)(v0 + 176), (CGAffineTransform *)(v0 + 224));
    long long v38 = *(_OWORD *)&v72.c;
    long long v39 = *(_OWORD *)&v72.tx;
    *(_OWORD *)(v0 + 272) = *(_OWORD *)&v72.a;
    *(_OWORD *)(v0 + 288) = v38;
    *(_OWORD *)(v0 + 304) = v39;
    CGAffineTransformInvert(&v72, (CGAffineTransform *)(v0 + 272));
    long long v40 = *(_OWORD *)&v72.c;
    long long v41 = *(_OWORD *)&v72.tx;
    *(_OWORD *)(v0 + 320) = *(_OWORD *)&v72.a;
    *(_OWORD *)(v0 + 336) = v40;
    *(_OWORD *)(v0 + 352) = v41;
    *(void *)&long long v40 = v69;
    double v42 = v70;
    uint64_t v43 = v67;
    *(void *)&long long v41 = v68;
    CGRect v75 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v40 - 8), (CGAffineTransform *)(v0 + 320));
    CGFloat x = v75.origin.x;
    CGFloat y = v75.origin.y;
    CGFloat width = v75.size.width;
    CGFloat height = v75.size.height;
    id v48 = objc_allocWithZone(MEMORY[0x263F827E8]);
    outlined copy of Data._Representation(v36, v35);
    isCGFloat a = Data._bridgeToObjectiveC()().super.isa;
    id v50 = objc_msgSend(v48, sel_initWithData_, isa);
    outlined consume of Data._Representation(v36, v35);

    id v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v50);
    *(void *)(v0 + 472) = v51;

    objc_msgSend(v51, sel_setContentMode_, 1);
    id v52 = v51;
    objc_msgSend(v52, sel_setFrame_, CanvasGenerationTool.generationFrameInCanvas.getter());

    objc_msgSend(v52, sel_setAlpha_, 0.0);
    objc_msgSend(v13, sel_addSubview_, v52);
    uint64_t v53 = *(void **)(v30 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_blurView);
    *(void *)(v0 + 480) = v53;
    id v54 = v53;
    uint64_t v55 = static MainActor.shared.getter();
    *(void *)(v0 + 488) = v55;
    uint64_t v56 = swift_task_alloc();
    *(void *)(v0 + 496) = v56;
    *(CGFloat *)(v56 + 16) = x;
    *(CGFloat *)(v56 + 24) = y;
    *(CGFloat *)(v56 + 32) = width;
    *(CGFloat *)(v56 + 40) = height;
    *(void *)(v56 + 48) = v52;
    *(void *)(v56 + 56) = v53;
    *(void *)(v56 + 64) = v13;
    *(void *)(v56 + 72) = v36;
    *(void *)(v56 + 80) = v35;
    *(_OWORD *)(v56 + 88) = v71;
    *(void *)(v56 + 104) = v37;
    *(void *)(v56 + 112) = v30;
    double v57 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v57;
    *double v57 = v0;
    v57[1] = CanvasGenerationTool.addCanvasElement(for:with:);
    uint64_t v58 = MEMORY[0x263F8F500];
    uint64_t v59 = MEMORY[0x263F8D4F8];
    return MEMORY[0x270FA2318](v0 + 65, v55, v58, 0xD00000000000001BLL, 0x800000020C85E1F0, partial apply for closure #1 in CanvasGenerationTool.addCanvasElement(for:with:), v56, v59);
  }
  else
  {
    swift_release();
    lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
    swift_allocError();
    *(_OWORD *)uint64_t v60 = xmmword_20C847BD0;
    *(unsigned char *)(v60 + 16) = 2;
    swift_willThrow();
    double v61 = *(uint64_t (**)(void))(v0 + 8);
    return v61(0);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 456);
  id v3 = *(void *)(v1 + 448);
  return MEMORY[0x270FA2498](CanvasGenerationTool.addCanvasElement(for:with:), v3, v2);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 472);
  uint64_t v2 = *(void **)(v0 + 480);
  id v3 = *(void **)(v0 + 464);
  swift_release();

  os_log_type_t v4 = *(unsigned __int8 *)(v0 + 65);
  os_log_type_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

void closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, unint64_t a6, void *a7, uint64_t a8, double a9, double a10, double a11, double a12, unint64_t a13, void *a14)
{
  uint64_t v53 = a8;
  unint64_t v50 = a6;
  id v51 = a7;
  uint64_t v42 = a5;
  id v43 = a4;
  uint64_t v48 = a1;
  double v49 = a14;
  unint64_t v44 = a13;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  uint64_t v22 = *(void *)(v45 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  MEMORY[0x270FA5388](v45);
  long long v41 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v54 = self;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = a3;
  uint64_t v59 = partial apply for closure #1 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:);
  uint64_t v60 = v24;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v56 = 1107296256;
  uint64_t v46 = &v57;
  double v57 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v58 = &block_descriptor_60;
  id v52 = _Block_copy(&aBlock);
  id v47 = a3;
  id v25 = a2;
  swift_release();
  uint64_t v26 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))((char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v48, v45);
  unint64_t v27 = (*(unsigned __int8 *)(v22 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = a3;
  *(double *)(v28 + 24) = a9;
  *(double *)(v28 + 32) = a10;
  *(double *)(v28 + 40) = a11;
  *(double *)(v28 + 48) = a12;
  *(void *)(v28 + 56) = a5;
  unint64_t v29 = v50;
  *(void *)(v28 + 64) = v50;
  *(void *)(v28 + 72) = a4;
  uint64_t v30 = v51;
  uint64_t v31 = v53;
  *(void *)(v28 + 80) = v51;
  *(void *)(v28 + 88) = v31;
  *(void *)(v28 + 96) = a13;
  double v32 = v49;
  *(void *)(v28 + 104) = v49;
  *(void *)(v28 + 112) = v25;
  (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v28 + v27, v41, v26);
  uint64_t v59 = partial apply for closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:);
  uint64_t v60 = v28;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v56 = 1107296256;
  double v57 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v58 = &block_descriptor_105;
  double v33 = _Block_copy(&aBlock);
  id v34 = v25;
  id v35 = v47;
  outlined copy of Data._Representation(v42, v29);
  id v36 = v43;
  id v37 = v30;
  outlined copy of Data._Representation(v31, v44);
  id v38 = v32;
  swift_release();
  long long v39 = v52;
  objc_msgSend(v54, sel_animateWithDuration_delay_options_animations_completion_, 0x10000, v52, v33, 0.5, 0.25);
  _Block_release(v33);
  _Block_release(v39);
}

uint64_t closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(int a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, double a9, double a10, double a11, double a12, void *a13, void *a14)
{
  uint64_t v64 = a6;
  uint64_t v65 = a7;
  uint64_t v63 = a4;
  int v67 = a1;
  id v69 = a14;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v62 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v25 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v25);
  unint64_t v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v66 = self;
  objc_msgSend(v66, sel_begin);
  if (a2) {
    objc_msgSend(a2, sel_setHidden_, 1);
  }
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v68 = swift_allocBox();
  uint64_t v30 = v29;
  Image.init()((uint64_t)v27);
  static CRKeyPath.unique.getter();
  uint64_t v31 = _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_3(&lazy protocol witness table cache variable for type Image and conformance Image);
  uint64_t v32 = Capsule<>.init(_:id:)();
  MEMORY[0x270FA5388](v32);
  *((double *)&v61 - 10) = a9;
  *((double *)&v61 - 9) = a10;
  *((double *)&v61 - 8) = a11;
  *((double *)&v61 - 7) = a12;
  uint64_t v33 = v63;
  *(&v61 - 6) = a3;
  *(&v61 - 5) = v33;
  uint64_t v34 = v64;
  *(&v61 - 4) = (uint64_t)a5;
  *(&v61 - 3) = v34;
  *(&v61 - 2) = (uint64_t)v65;
  *(&v61 - 1) = a8;
  uint64_t v35 = Capsule.callAsFunction<A>(_:)();
  id v36 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a5) + 0x2F8))(v35);
  uint64_t v38 = v37;
  uint64_t ObjectType = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Capsule<Image>>);
  uint64_t v40 = *(void *)(v28 - 8);
  uint64_t v41 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v65 = a5;
  uint64_t v42 = (v41 + 32) & ~v41;
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_20C832C20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v43 + v42, v30, v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v38 + 80))(v43, v25, v31, &protocol witness table for Image, ObjectType, v38);

  swift_bridgeObjectRelease();
  objc_msgSend(v66, sel_commit);
  if (v67)
  {
    uint64_t v44 = type metadata accessor for TaskPriority();
    uint64_t v45 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v62, 1, 1, v44);
    uint64_t v46 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for MainActor();
    swift_retain();
    id v47 = v69;
    uint64_t v48 = v68;
    swift_retain();
    uint64_t v49 = static MainActor.shared.getter();
    unint64_t v50 = (void *)swift_allocObject();
    uint64_t v51 = MEMORY[0x263F8F500];
    v50[2] = v49;
    v50[3] = v51;
    v50[4] = v46;
    v50[5] = v47;
    v50[6] = v48;
    swift_release();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v45, (uint64_t)&async function pointer to partial apply for closure #2 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:), (uint64_t)v50);
    swift_release();
    LOBYTE(v71) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)generativeLogger);
    id v53 = a13;
    id v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      uint64_t v71 = v57;
      *(_DWORD *)uint64_t v56 = 136315138;
      uint64_t v58 = CanvasGenerationTool.nameAndPointerDescription.getter();
      uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v54, v55, "%s: animation has been cancelled", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v57, -1, -1);
      MEMORY[0x210550270](v56, -1, -1);
    }
    else
    {
    }
    objc_msgSend(v69, sel_removeFromSuperview);
  }
  return swift_release();
}

uint64_t closure #1 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  double v24 = *(double *)&a11;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  double v25 = a1;
  double v26 = a2;
  double v27 = a3;
  double v28 = a4;
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_3(&lazy protocol witness table cache variable for type Image and conformance Image);
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  double v25 = 0.0;
  double v26 = 0.0;
  double v27 = a3;
  double v28 = a4;
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  outlined copy of Data._Representation(a6, a7);
  CRContext.assetManager.getter();
  CRAsset.init(data:assetManager:)();
  uint64_t v21 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  double v25 = *(double *)&a10;
  double v26 = v24;
  outlined copy of Data._Representation(a10, *(unint64_t *)&v24);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #2 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v5[13] = v7;
  v5[14] = *(void *)(v7 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_projectBox();
  v5[17] = type metadata accessor for MainActor();
  v5[18] = static MainActor.shared.getter();
  uint64_t v8 = (void *)swift_task_alloc();
  v5[19] = v8;
  *uint64_t v8 = v5;
  v8[1] = closure #2 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:);
  return MEMORY[0x270FA1FF0](500000000);
}

uint64_t closure #2 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    os_log_type_t v4 = closure #2 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:);
  }
  else {
    os_log_type_t v4 = closure #2 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:);
  }
  return MEMORY[0x270FA2498](v4, v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t ObjectType;
  uint64_t v32;

  uint64_t v1 = *(void *)(v0 + 64);
  swift_release();
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    os_log_type_t v4 = *(void *)(v0 + 120);
    os_log_type_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = objc_msgSend(*(id *)(v0 + 72), sel_removeFromSuperview);
    uint64_t v9 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & *v3) + 0x2F8))(v8);
    unint64_t v11 = v10;
    uint64_t ObjectType = swift_getObjectType();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v5, v6);
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_3(&lazy protocol witness table cache variable for type Image and conformance Image);
    Capsule<>.rootID.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(ObjectType, v11);

    if (*(void *)(v12 + 16)
      && (uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 96)), (v14 & 1) != 0))
    {
      uint64_t v16 = *(void *)(v0 + 88);
      uint64_t v15 = *(void *)(v0 + 96);
      uint64_t v17 = *(void *)(v0 + 80);
      uint64_t v18 = *(id *)(*(void *)(v12 + 56) + 8 * v13);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      uint64_t v19 = v18;
      uint64_t v20 = specialized CanvasMembers.init(_:)(v19);
      uint64_t v22 = v21;
      double v24 = v23;
      LOBYTE(v16) = v25;

      AnyCanvas.selection.setter(v20, v22, v24, v16 & 1);
    }
    else
    {
      double v27 = *(void *)(v0 + 88);
      double v26 = *(void *)(v0 + 96);
      double v28 = *(void *)(v0 + 80);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void CanvasGenerationTool.removeMagicGenerativeBackgroundViewIfNeeded()()
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v22 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002DLL, 0x800000020C85E1C0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v6, -1, -1);
    MEMORY[0x210550270](v5, -1, -1);
  }
  else
  {
  }
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView;
  uint64_t v10 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView];
  if (v10)
  {
    id v11 = v10;
    objc_msgSend(v11, sel_removeFromSuperview);
    uint64_t v12 = *(void **)&v2[v9];
    *(void *)&v2[v9] = 0;

    uint64_t v13 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_lastFirstResponder]);
    if (v13)
    {
      double v14 = v13;
      if (objc_msgSend(v13, sel_canBecomeFirstResponder))
      {
        objc_msgSend(v14, sel_becomeFirstResponder);
        swift_unknownObjectWeakAssign();
      }
    }
    else
    {
    }
  }
  else
  {
    uint64_t v15 = v2;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v22 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v20 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v16, v17, "%s returning (magicGenerativeBackgroundView is nil)", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v19, -1, -1);
      MEMORY[0x210550270](v18, -1, -1);
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall CanvasGenerationTool.resetGenerativeTool()()
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v26 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x800000020C85E130, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v6, -1, -1);
    MEMORY[0x210550270](v5, -1, -1);
  }
  else
  {
  }
  uint64_t v9 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC;
  uint64_t v10 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
  if (v10)
  {
    id v11 = v2;
    id v12 = v10;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v25 = v12;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v26 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v17 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v13, v14, "%s magicGenerativeVC clean up", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v16, -1, -1);
      uint64_t v19 = v15;
      id v12 = v25;
      MEMORY[0x210550270](v19, -1, -1);
    }
    else
    {
    }
    LOBYTE(v26) = 0;
    CanvasGenerationTool.magicGenerativeState.setter((unsigned __int8 *)&v26);
    uint64_t v20 = *(void **)&v2[v9];
    *(void *)&v2[v9] = 0;

    id v21 = objc_msgSend(v12, sel_view);
    objc_msgSend(v21, sel_removeFromSuperview);

    objc_msgSend(v12, sel_removeFromParentViewController);
  }
  CanvasGenerationTool.removeMagicGenerativeBackgroundViewIfNeeded()();
  objc_msgSend(v2, sel_setHidden_, 1);
  uint64_t v22 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath];
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath] = 0;

  uint64_t v23 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
  long long v24 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *(_OWORD *)uint64_t v23 = *MEMORY[0x263F001A0];
  *((_OWORD *)v23 + 1) = v24;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth] = 0;
  CanvasGenerationTool.showToolPickerIfNeeded()();
  CanvasGenerationTool.hideBlurEffect(animationDuration:)(0.0);
}

Swift::Void __swiftcall CanvasGenerationTool.didMoveToWindow()()
{
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for CanvasGenerationTool();
  objc_msgSendSuper2(&v11, sel_didMoveToWindow);
  id v1 = objc_msgSend(v0, sel_window);

  if (!v1)
  {
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
    id v3 = v0;
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v10 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v8 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v4, v5, "%s magicGenerativeVC did move to nil window", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v7, -1, -1);
      MEMORY[0x210550270](v6, -1, -1);
    }
    else
    {
    }
    CanvasGenerationTool.showToolPickerIfNeeded()();
  }
}

void CanvasGenerationTool.updateBlobAnimation()()
{
  CGFloat y = COERCE_DOUBLE(MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_weakScrollView]));
  if (y == 0.0) {
    return;
  }
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
  if (!v2) {
    goto LABEL_5;
  }
  rect1.size.double width = y;
  *(void *)&rect1.origin.CGFloat y = v2;
  if (objc_msgSend(*(id *)&rect1.size.width, sel_isScrollAnimating))
  {
    objc_msgSend(self, sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v0, sel_updateBlobAnimation, 0);
    objc_msgSend(v0, sel_performSelector_withObject_afterDelay_, sel_updateBlobAnimation, 0, 0.5);

    CGFloat y = rect1.origin.y;
LABEL_5:

    return;
  }
  objc_msgSend(*(id *)&rect1.size.width, sel_contentOffset);
  rect1.origin.double x = v3;
  CGFloat v5 = v4;
  objc_msgSend(*(id *)&rect1.size.width, sel_frame);
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  double x = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
  double v11 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 8];
  double width = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 16];
  double height = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 24];
  objc_msgSend(v0, sel_bounds);
  double v15 = v14;
  if (CGRect.isFinite.getter(x, v11, width, height))
  {
    double v16 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth];
    if (v16 > 0.0 && v15 > 0.0)
    {
      CGAffineTransformMakeScale((CGAffineTransform *)&rect1.size.height, v15 / v16, v15 / v16);
      v28.origin.double x = x;
      v28.origin.CGFloat y = v11;
      v28.size.double width = width;
      v28.size.double height = height;
      CGRect v29 = CGRectApplyAffineTransform(v28, (CGAffineTransform *)&rect1.size.height);
      double x = v29.origin.x;
      double v11 = v29.origin.y;
      double width = v29.size.width;
      double height = v29.size.height;
    }
  }
  uint64_t v17 = (void *)MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
  objc_msgSend(*(id *)&rect1.size.width, sel_convertRect_fromView_, v17, x, v11, width, height);
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  CGFloat v25 = v24;

  v30.origin.double x = rect1.origin.x;
  v30.origin.CGFloat y = v5;
  v30.size.double width = v7;
  v30.size.double height = v9;
  v31.origin.double x = v19;
  v31.origin.CGFloat y = v21;
  v31.size.double width = v23;
  v31.size.double height = v25;
  objc_msgSend(*(id *)&rect1.origin.y, sel_setIsAnimating_, CGRectIntersectsRect(v30, v31));
}

Swift::Void __swiftcall CanvasGenerationTool.hideToolPickerIfNeeded()()
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  uint64_t v2 = v0;
  CGFloat v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v15 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x800000020C85E110, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v6, -1, -1);
    MEMORY[0x210550270](v5, -1, -1);
  }
  else
  {
  }
  id v9 = objc_msgSend(v2, sel_window, v14, v15);
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = objc_msgSend(self, sel_activeToolPickerForWindow_, v9);

    if (v11)
    {
      if (objc_msgSend(v11, sel_isVisible))
      {
        id v12 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
        if (v12) {
          objc_msgSend(v12, sel_becomeFirstResponder);
        }
        if ((objc_msgSend(v11, sel_isVisible) & 1) == 0)
        {
          id v13 = objc_msgSend(self, sel_defaultCenter);
          objc_msgSend(v13, sel_addObserver_selector_name_object_, v2, sel_handleToolPickerVisibilityDidChange_, *MEMORY[0x263F14D08], 0);
        }
      }
    }
  }
}

void CanvasGenerationTool.handleToolPickerVisibilityDidChange(_:)()
{
  uint64_t v1 = v0;
  Notification.object.getter();
  if (!v20[3])
  {
    uint64_t v7 = v20;
LABEL_21:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPicker);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  uint64_t v2 = (void *)v21;
  uint64_t v3 = Notification.userInfo.getter();
  if (!v3)
  {
    long long v21 = 0u;
    long long v22 = 0u;
LABEL_20:

    uint64_t v7 = (id *)&v21;
    goto LABEL_21;
  }
  uint64_t v4 = v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v21);
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v20);
  if (!*((void *)&v22 + 1)) {
    goto LABEL_20;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIWindowScene);
  if (swift_dynamicCast())
  {
    id v8 = v20[0];
    id v9 = objc_msgSend(v1, sel_window);
    id v10 = objc_msgSend(v9, sel_windowScene);

    if (v10)
    {
      id v11 = v8;
      char v12 = static NSObject.== infix(_:_:)();

      if (v12)
      {
        id v13 = v2;
        id v14 = objc_msgSend(v1, sel_window);
        if (v14
          && (uint64_t v15 = v14,
              id v16 = objc_msgSend(self, sel_activeToolPickerForWindow_, v14),
              v15,
              v16))
        {
          id v17 = v13;
          char v18 = static NSObject.== infix(_:_:)();

          if (v18)
          {
            if (objc_msgSend(v17, sel_isVisible))
            {
              id v19 = objc_msgSend(self, sel_defaultCenter);
              objc_msgSend(v19, sel_removeObserver_name_object_, v1, *MEMORY[0x263F14D08], 0);
            }
          }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
  }
}

Swift::Void __swiftcall CanvasGenerationTool.showToolPickerIfNeeded()()
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t v9 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x800000020C85E0F0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v3, v4, "%s - %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v6, -1, -1);
    MEMORY[0x210550270](v5, -1, -1);
  }
  else
  {
  }
  if (objc_msgSend(v2, sel_isFirstResponder, v9, v10)) {
    objc_msgSend(v2, sel_resignFirstResponder);
  }
}

uint64_t CanvasGenerationTool.sendFeedback(action:)(uint64_t a1)
{
  v2[45] = a1;
  v2[46] = v1;
  v2[47] = type metadata accessor for FeedbackInput();
  v2[48] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for FBKSInteraction.Content();
  v2[49] = v3;
  v2[50] = *(void *)(v3 - 8);
  v2[51] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  v2[52] = v4;
  v2[53] = *(void *)(v4 - 8);
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FBKSInteraction.StructuredValue();
  v2[56] = v5;
  v2[57] = *(void *)(v5 - 8);
  v2[58] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
  v2[59] = swift_task_alloc();
  v2[60] = type metadata accessor for Image();
  v2[61] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  v2[62] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v2[63] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v2[64] = v6;
  v2[65] = *(void *)(v6 - 8);
  v2[66] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  v2[67] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  v2[68] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  v2[69] = v7;
  v2[70] = *(void *)(v7 - 8);
  v2[71] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[72] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[73] = v9;
  v2[74] = v8;
  return MEMORY[0x270FA2498](CanvasGenerationTool.sendFeedback(action:), v9, v8);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  id v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 496);
  *(void *)(*v1 + 632) = a1;
  swift_task_dealloc();
  _s8PaperKit5ImageVWOhTm_0(v3, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  uint64_t v4 = *(void *)(v2 + 592);
  uint64_t v5 = *(void *)(v2 + 584);
  return MEMORY[0x270FA2498](CanvasGenerationTool.sendFeedback(action:), v5, v4);
}

uint64_t CanvasGenerationTool.sendFeedback(action:)()
{
  uint64_t v110 = v0;
  uint64_t v1 = v0;
  uint64_t result = MEMORY[0x210550400](v0[46] + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  v0[75] = result;
  if (!result)
  {
    swift_release();
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    id v14 = (void *)v0[46];
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)generativeLogger);
    id v16 = v14;
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    double v20 = (void *)v1[46];
    if (v19)
    {
      long long v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v109 = v22;
      *(_DWORD *)long long v21 = 136315138;
      uint64_t v23 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v1[44] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v17, v18, "%s: returning (canvas is nil)", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v22, -1, -1);
      MEMORY[0x210550270](v21, -1, -1);
    }
    else
    {
    }
    goto LABEL_21;
  }
  uint64_t v3 = (void *)result;
  uint64_t v4 = *(void *)(result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v4)
  {
    __break(1u);
    return result;
  }
  uint64_t v106 = v0 + 40;
  uint64_t v5 = *(void *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (*(void *)(v5 + 16) != 1)
  {
    swift_release();
LABEL_15:
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v26 = (void *)v1[46];
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)generativeLogger);
    id v28 = v26;
    CGRect v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = (void *)v1[46];
    if (v31)
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v109 = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v35 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v29, v30, "%s: returning (no selected image)", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v34, -1, -1);
      MEMORY[0x210550270](v33, -1, -1);
    }
    else
    {
    }
LABEL_21:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v37 = (uint64_t (*)(void))v1[1];
    return v37();
  }
  uint64_t v6 = v0[67];
  specialized Collection.first.getter(v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  uint64_t v10 = v0[70];
  uint64_t v11 = v1[69];
  uint64_t v12 = v1[68];
  uint64_t v13 = v1[67];
  if (v9 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v1[67], (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, 1, 1, v11);
LABEL_14:
    uint64_t v25 = v1[68];
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for WeakRef<Image>?);
    goto LABEL_15;
  }
  WeakTagged_9.tagged2.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v11) == 1) {
    goto LABEL_14;
  }
  uint64_t v38 = v1[71];
  uint64_t v39 = v1[65];
  uint64_t v41 = v1[63];
  uint64_t v40 = v1[64];
  (*(void (**)(uint64_t, void, void))(v1[70] + 32))(v38, v1[68], v1[69]);
  uint64_t v42 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x798))(v38);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v41, 1, v40) == 1)
  {
    uint64_t v43 = v1[63];
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v43, &demangling cache variable for type metadata for Capsule<Image>?);
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v44 = (void *)v1[46];
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)generativeLogger);
    id v46 = v44;
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v50 = v1[71];
    uint64_t v51 = v1[70];
    uint64_t v52 = v1[69];
    id v53 = (void *)v1[46];
    if (v49)
    {
      uint64_t v101 = v1[71];
      id v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v109 = v55;
      *(_DWORD *)id v54 = 136315138;
      uint64_t v56 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v1[39] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v47, v48, "%s: returning (selected image does not have an ImageElement)", v54, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v55, -1, -1);
      MEMORY[0x210550270](v54, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v101, v52);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    }
    goto LABEL_21;
  }
  uint64_t v58 = v1[71];
  (*(void (**)(void, void, void))(v1[65] + 32))(v1[66], v1[63], v1[64]);
  v1[76] = (*(uint64_t (**)(uint64_t))((*v42 & *v3) + 0x7A0))(v58);
  v1[77] = v59;
  if (v59 >> 60 == 15)
  {
    swift_release();
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v60 = (void *)v1[46];
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)generativeLogger);
    id v62 = v60;
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    uint64_t v66 = v1[71];
    uint64_t v67 = v1[70];
    uint64_t v68 = v1[69];
    uint64_t v107 = v1[66];
    uint64_t v69 = v1[65];
    uint64_t v103 = v1[64];
    uint64_t v70 = (void *)v1[46];
    if (v65)
    {
      uint64_t v99 = v1[69];
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      typeCGFloat a = v3;
      uint64_t v72 = swift_slowAlloc();
      uint64_t v109 = v72;
      *(_DWORD *)uint64_t v71 = 136315138;
      uint64_t v73 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v1[41] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v63, v64, "%s: returning (selected image does not have image generation recipe)", v71, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v72, -1, -1);
      MEMORY[0x210550270](v71, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v107, v103);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v99);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v107, v103);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    }
    goto LABEL_21;
  }
  uint64_t v76 = v1[61];
  uint64_t v75 = v1[62];
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_3(&lazy protocol witness table cache variable for type Image and conformance Image);
  Capsule<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  _s8PaperKit5ImageVWOhTm_0(v76, (uint64_t (*)(void))type metadata accessor for Image);
  uint64_t v77 = type metadata accessor for CRAssetOrData();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 48))(v75, 1, v77) == 1)
  {
    uint64_t v78 = v1[62];
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v78, &demangling cache variable for type metadata for CRAssetOrData?);
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    BOOL v79 = (void *)v1[46];
    uint64_t v80 = type metadata accessor for Logger();
    __swift_project_value_buffer(v80, (uint64_t)generativeLogger);
    id v81 = v79;
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.error.getter();
    BOOL v83 = os_log_type_enabled(v82, type);
    double v108 = (void *)v1[75];
    uint64_t v84 = v1[71];
    uint64_t v85 = v1[70];
    uint64_t v86 = v1[69];
    uint64_t v87 = v1[66];
    uint64_t v88 = v1[65];
    uint64_t v89 = v1[64];
    unint64_t v90 = (void *)v1[46];
    if (v83)
    {
      uint64_t v102 = v1[66];
      uint64_t v97 = v1[76];
      unint64_t v98 = v1[77];
      uint64_t v100 = v1[64];
      os_log_type_t v91 = (uint8_t *)swift_slowAlloc();
      uint64_t v96 = v82;
      uint64_t v92 = swift_slowAlloc();
      uint64_t v109 = v92;
      *(_DWORD *)os_log_type_t v91 = 136315138;
      uint64_t v93 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v1[43] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v96, type, "%s: returning (image is nil)", v91, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v92, -1, -1);
      MEMORY[0x210550270](v91, -1, -1);
      outlined consume of Data?(v97, v98);

      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v102, v100);
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
    }
    else
    {
      outlined consume of Data?(v1[76], v1[77]);

      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
    }
    goto LABEL_21;
  }
  BOOL v95 = (void *)swift_task_alloc();
  v1[78] = v95;
  *BOOL v95 = v1;
  v95[1] = CanvasGenerationTool.sendFeedback(action:);
  return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 1, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  Class isa;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  UIImage *v22;
  NSData *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  char v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *log;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t);
  uint64_t v98[5];
  uint64_t v99;
  uint64_t v100;

  uint64_t v99 = v0;
  uint64_t v1 = *(void **)(v0 + 632);
  if (!v1)
  {
    swift_release();
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v6 = *(void **)(v0 + 368);
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)generativeLogger);
    uint64_t v8 = v6;
    int v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.error.getter();
    uint64_t v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 568);
    uint64_t v13 = *(void *)(v0 + 560);
    id v14 = *(void *)(v0 + 552);
    uint64_t v15 = *(void *)(v0 + 528);
    id v16 = *(void *)(v0 + 520);
    os_log_type_t v91 = *(void **)(v0 + 600);
    unint64_t v94 = *(void *)(v0 + 512);
    id v17 = *(void **)(v0 + 368);
    if (v11)
    {
      uint64_t v84 = *(void *)(v0 + 608);
      uint64_t v85 = *(void *)(v0 + 616);
      os_log_t log = v9;
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v87 = v14;
      BOOL v19 = swift_slowAlloc();
      v98[0] = v19;
      *(_DWORD *)os_log_type_t v18 = 136315138;
      double v20 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, log, v10, "%s: returning (image is nil)", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v19, -1, -1);
      MEMORY[0x210550270](v18, -1, -1);
      outlined consume of Data?(v84, v85);

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v94);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v87);
    }
    else
    {
      outlined consume of Data?(*(void *)(v0 + 608), *(void *)(v0 + 616));

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v94);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    goto LABEL_28;
  }
  id v2 = self;
  isCGFloat a = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v4 = objc_msgSend(v2, sel_decodeRecipeData_, isa);

  if (v4)
  {
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v22 = (UIImage *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v1);
  uint64_t v23 = UIImagePNGRepresentation(v22);

  if (v23)
  {
    unint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    *(void *)(v0 + 640) = v24;
    *(void *)(v0 + 648) = v26;
    if (v5)
    {
      if (v26 >> 60 != 15)
      {
        uint64_t v92 = (void *)v0;
        uint64_t v27 = v0 + 56;
        *(void *)(v0 + 248) = 0x6369447475706E69;
        *(void *)(v0 + 256) = 0xE900000000000074;
        outlined copy of Data._Representation(v24, v26);
        AnyHashable.init<A>(_:)();
        uint64_t v88 = v0 + 200;
        BOOL v95 = v26;
        if (*(void *)(v5 + 16) && (id v28 = specialized __RawDictionaryStorage.find<A>(_:)(v0 + 96), (v29 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v28, v0 + 200);
        }
        else
        {
          *(_OWORD *)(v0 + 200) = 0u;
          *(_OWORD *)(v0 + 216) = 0u;
        }
        uint64_t v55 = v0 + 16;
        uint64_t v56 = (_OWORD *)(v0 + 136);
        outlined destroy of AnyHashable(v0 + 96);
        *(void *)(v0 + 296) = 0x6D49656372756F73;
        *(void *)(v0 + 304) = 0xEB00000000656761;
        AnyHashable.init<A>(_:)();
        if (*(void *)(v5 + 16) && (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v27), (v58 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v57, (uint64_t)v56);
        }
        else
        {
          *uint64_t v56 = 0u;
          *(_OWORD *)(v0 + 152) = 0u;
        }
        outlined destroy of AnyHashable(v27);
        if (*(void *)(v0 + 160))
        {
          unint64_t v59 = swift_dynamicCast();
          if (v59) {
            uint64_t v60 = *(void *)(v0 + 232);
          }
          else {
            uint64_t v60 = 0;
          }
          if (v59) {
            uint64_t v61 = *(void *)(v0 + 240);
          }
          else {
            uint64_t v61 = 0xF000000000000000;
          }
        }
        else
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v56, &demangling cache variable for type metadata for Any?);
          uint64_t v60 = 0;
          uint64_t v61 = 0xF000000000000000;
        }
        *(void *)(v0 + 664) = v61;
        *(void *)(v0 + 656) = v60;
        *(void *)(v0 + 280) = 0x6D49686374656B73;
        *(void *)(v0 + 288) = 0xEB00000000656761;
        AnyHashable.init<A>(_:)();
        if (*(void *)(v5 + 16) && (id v62 = specialized __RawDictionaryStorage.find<A>(_:)(v55), (v63 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v62, v0 + 168);
        }
        else
        {
          *(_OWORD *)(v0 + 168) = 0u;
          *(_OWORD *)(v0 + 184) = 0u;
        }
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable(v55);
        if (*(void *)(v0 + 192))
        {
          os_log_type_t v64 = swift_dynamicCast();
          if (v64) {
            BOOL v65 = *(void *)(v0 + 264);
          }
          else {
            BOOL v65 = 0;
          }
          if (v64) {
            uint64_t v66 = *(void *)(v0 + 272);
          }
          else {
            uint64_t v66 = 0xF000000000000000;
          }
        }
        else
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 168, &demangling cache variable for type metadata for Any?);
          BOOL v65 = 0;
          uint64_t v66 = 0xF000000000000000;
        }
        v92[85] = v66;
        v92[84] = v65;
        v98[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        v98[0] = swift_allocObject();
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v88, v98[0] + 16, &demangling cache variable for type metadata for Any?);
        FBKSInteraction.StructuredValue.init(_:)();
        static FBKSInteraction.AnnotatedContent.makeDiagnosticsContent(structuredContent:)(v92[58]);
        if (v61 >> 60 == 15)
        {
          if (v66 >> 60 == 15)
          {
            uint64_t v67 = 1;
LABEL_62:
            uint64_t v70 = v92[59];
            uint64_t v71 = v92[54];
            uint64_t v72 = v92[53];
            uint64_t v86 = v92[52];
            uint64_t v73 = v92[50];
            unint64_t v74 = (uint64_t *)v92[51];
            uint64_t v75 = v92[48];
            uint64_t v76 = v92[49];
            uint64_t v89 = v92[47];
            unint64_t v90 = v92[55];
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 56))(v70, v67, 1);
            *unint64_t v74 = v24;
            v74[1] = v95;
            (*(void (**)(uint64_t *, void, uint64_t))(v73 + 104))(v74, *MEMORY[0x263F3C578], v76);
            outlined copy of Data._Representation(v24, v95);
            static FBKSInteraction.AnnotatedContent.makeCreatedImageContent(_:)((uint64_t)v74);
            (*(void (**)(uint64_t *, uint64_t))(v73 + 8))(v74, v76);
            outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v70, v75, &demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
            uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
            v77(v75 + *(int *)(v89 + 20), v71, v86);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FBKSInteraction.AnnotatedContent>);
            uint64_t v78 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
            BOOL v79 = swift_allocObject();
            *(_OWORD *)(v79 + 16) = xmmword_20C832C20;
            v77(v79 + v78, v90, v86);
            *(void *)(v75 + *(int *)(v89 + 24)) = v79;
            if (one-time initialization token for shared != -1) {
              swift_once();
            }
            uint64_t v97 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized FeedbackManager.sendFeedback(action:feedbackInput:)
                                                           + async function pointer to specialized FeedbackManager.sendFeedback(action:feedbackInput:));
            uint64_t v80 = (void *)swift_task_alloc();
            v92[86] = v80;
            *uint64_t v80 = v92;
            v80[1] = CanvasGenerationTool.sendFeedback(action:);
            id v81 = v92[48];
            uint64_t v82 = v92[45];
            return v97(v82, v81);
          }
          outlined copy of Data._Representation(v65, v66);
          static FBKSInteraction.AnnotatedContent.makeOriginalSketchContent(sketchData:)(v65, v66);
          uint64_t v68 = v65;
          uint64_t v69 = v66;
        }
        else
        {
          outlined copy of Data._Representation(v60, v61);
          static FBKSInteraction.AnnotatedContent.makeOriginalImageContent(imageData:)(v60, v61);
          uint64_t v68 = v60;
          uint64_t v69 = v61;
        }
        outlined consume of Data?(v68, v69);
        uint64_t v67 = 0;
        goto LABEL_62;
      }
      goto LABEL_16;
    }
LABEL_23:
    uint64_t v93 = v1;
    swift_release();
    if (one-time initialization token for generativeLogger != -1) {
      swift_once();
    }
    uint64_t v96 = v26;
    uint64_t v41 = v24;
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)generativeLogger);
    uint64_t v43 = Logger.logObject.getter();
    uint64_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl(&dword_20C2D7000, v43, v44, "Recipe data is nil", v45, 2u);
      MEMORY[0x210550270](v45, -1, -1);
    }
    id v46 = *(void **)(v0 + 600);
    id v47 = *(void *)(v0 + 568);
    os_log_type_t v48 = *(void *)(v0 + 560);
    BOOL v49 = *(void *)(v0 + 552);
    uint64_t v50 = *(void *)(v0 + 528);
    uint64_t v51 = *(void *)(v0 + 520);
    uint64_t v52 = *(void *)(v0 + 512);
    outlined consume of Data?(*(void *)(v0 + 608), *(void *)(v0 + 616));

    outlined consume of Data?(v41, v96);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    goto LABEL_28;
  }
  if (!v5)
  {
    unint64_t v24 = 0;
    uint64_t v26 = 0xF000000000000000;
    goto LABEL_23;
  }
LABEL_16:
  swift_release();
  swift_bridgeObjectRelease();
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  os_log_type_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)generativeLogger);
  BOOL v31 = Logger.logObject.getter();
  uint64_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl(&dword_20C2D7000, v31, v32, "Output image data is nil", v33, 2u);
    MEMORY[0x210550270](v33, -1, -1);
  }
  uint64_t v34 = *(void **)(v0 + 600);
  uint64_t v35 = *(void *)(v0 + 568);
  unint64_t v36 = *(void *)(v0 + 560);
  uint64_t v37 = *(void *)(v0 + 552);
  uint64_t v38 = *(void *)(v0 + 528);
  uint64_t v39 = *(void *)(v0 + 520);
  uint64_t v40 = *(void *)(v0 + 512);
  outlined consume of Data?(*(void *)(v0 + 608), *(void *)(v0 + 616));

  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
LABEL_28:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v53 = *(uint64_t (**)(void))(v0 + 8);
  return v53();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  id v2 = *(void *)(v1 + 592);
  uint64_t v3 = *(void *)(v1 + 584);
  return MEMORY[0x270FA2498](CanvasGenerationTool.sendFeedback(action:), v3, v2);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v15 = v0[85];
  id v14 = v0[84];
  id v16 = v0[82];
  id v17 = v0[83];
  uint64_t v1 = v0[81];
  id v2 = v0[80];
  BOOL v19 = (void *)v0[79];
  uint64_t v3 = v0[77];
  uint64_t v4 = v0[76];
  uint64_t v5 = (void *)v0[75];
  id v28 = v0[71];
  uint64_t v26 = v0[70];
  uint64_t v27 = v0[69];
  uint64_t v6 = v0[65];
  unint64_t v24 = v0[64];
  uint64_t v25 = v0[66];
  uint64_t v7 = v0[57];
  uint64_t v22 = v0[58];
  uint64_t v23 = v0[59];
  double v20 = v0[55];
  long long v21 = v0[56];
  uint64_t v8 = v0[53];
  os_log_type_t v18 = v0[54];
  int v9 = v0[52];
  uint64_t v13 = v0[48];
  swift_release();
  outlined consume of Data?(v4, v3);

  outlined consume of Data?(v2, v1);
  outlined consume of Data?(v14, v15);
  outlined consume of Data?(v16, v17);
  outlined consume of Data?(v2, v1);

  _s8PaperKit5ImageVWOhTm_0(v13, (uint64_t (*)(void))type metadata accessor for FeedbackInput);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v18, v9);
  v10(v20, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v22, v21);
  outlined destroy of StocksKitCurrencyCache.Provider?(v23, &demangling cache variable for type metadata for FBKSInteraction.AnnotatedContent?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)(v0 + 25), &demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v25, v24);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

id CanvasGenerationTool.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasGenerationTool();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for CanvasGenerationTool()
{
  return type metadata accessor for CanvasGenerationTool();
}

uint64_t type metadata accessor for CanvasGenerationTool()
{
  uint64_t result = type metadata singleton initialization cache for CanvasGenerationTool;
  if (!type metadata singleton initialization cache for CanvasGenerationTool) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for CanvasGenerationTool()
{
  type metadata accessor for CheckedContinuation<ImageWithEncodedRecipe, Error>?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for CheckedContinuation<ImageWithEncodedRecipe, Error>?()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
    }
  }
}

uint64_t CanvasGenerationTool.authenticate()()
{
  v1[15] = v0;
  type metadata accessor for MainActor();
  v1[16] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[17] = v3;
  v1[18] = v2;
  return MEMORY[0x270FA2498](CanvasGenerationTool.authenticate(), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = MEMORY[0x210550400](*(void *)(v0 + 120) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_tiledTextView);
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    uint64_t v3 = v1 + OBJC_IVAR____TtC8PaperKit13TiledTextView_magicGenerativePlaygroundTokenProvider;
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v3, v0 + 56, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);

    if (*(void *)(v0 + 80))
    {
      outlined init with take of FindResult((long long *)(v0 + 56), v0 + 16);
      uint64_t v4 = *(void *)(v0 + 40);
      uint64_t v5 = *(void *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v4);
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 152) = v6;
      *uint64_t v6 = v0;
      v6[1] = CanvasGenerationTool.authenticate();
      return v10(v4, v5);
    }
  }
  else
  {
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(void *)(v0 + 88) = 0;
  }
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
  swift_allocError();
  *(void *)uint64_t v8 = 0xD000000000000025;
  *(void *)(v8 + 8) = 0x800000020C85E0C0;
  *(unsigned char *)(v8 + 16) = 0;
  swift_willThrow();
  int v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  return v1(v2, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CanvasGenerationTool.authenticate()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  *(void *)(*(void *)v3 + 160) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = v6[17];
    uint64_t v8 = v6[18];
    int v9 = CanvasGenerationTool.authenticate();
  }
  else
  {
    v6[21] = a2;
    v6[22] = a1;
    uint64_t v7 = v6[17];
    uint64_t v8 = v6[18];
    int v9 = CanvasGenerationTool.authenticate();
  }
  return MEMORY[0x270FA2498](v9, v7, v8);
}

uint64_t @objc closure #1 in CanvasGenerationTool.authenticate()(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for MainActor();
  v2[4] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](@objc closure #1 in CanvasGenerationTool.authenticate(), v4, v3);
}

{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (**v13)(void, void, void);
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void **)(*v3 + 24);
  int v9 = *v3;
  swift_task_dealloc();

  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();

    uint64_t v11 = 0;
    uint64_t v12 = (void *)v10;
  }
  else
  {
    uint64_t v11 = MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
    uint64_t v12 = (void *)v11;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 40);
  v13[2](v13, v11, v10);

  _Block_release(v13);
  id v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t @objc closure #1 in CanvasGenerationTool.authenticate()()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = (const void *)v0[2];
  swift_release();
  v0[5] = _Block_copy(v2);
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = @objc closure #1 in CanvasGenerationTool.authenticate();
  return CanvasGenerationTool.authenticate()();
}

Swift::Void __swiftcall CanvasGenerationTool.magicGenerativePlaygroundStateDidChange(_:)(PaperKit::MagicGenerativePlaygroundState a1)
{
  uint64_t v2 = v1;
  char v3 = *(unsigned char *)a1;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState;
  uint64_t v5 = (void *)MEMORY[0x263F8EED0];
  switch(*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    default:
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0 || *(unsigned __int8 *)(v1 + v4) - 3 <= 3)
      {
LABEL_5:
        uint64_t v7 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
        if (v7)
        {
          uint64_t v8 = v7;
          int v9 = (void *)(*(uint64_t (**)(void))((*v5 & *v7) + 0x320))();

          if (v9)
          {
            objc_msgSend(v9, sel_setRulerEnabled_, 0);
          }
        }
      }
      uint64_t v10 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
      if (!v10) {
        return;
      }
      id v19 = v10;
      uint64_t v11 = (*(uint64_t (**)(void))((*v5 & *v10) + 0x320))();
      if (v11)
      {
        id v18 = (id)v11;
        uint64_t v12 = type metadata accessor for TiledTextView();
        uint64_t v13 = swift_dynamicCastClass();

        if (v13)
        {
          uint64_t v14 = v13 + OBJC_IVAR____TtC8PaperKit13TiledTextView_magicGenerativePlaygroundContainerStateObserver;
          swift_beginAccess();
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v14, (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundContainerStateObserver?);
          if (v26)
          {
            outlined init with copy of FindResult((uint64_t)v25, (uint64_t)v22);
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundContainerStateObserver?);
            uint64_t v15 = v23;
            uint64_t v16 = v24;
            __swift_project_boxed_opaque_existential_1(v22, v23);
            v21[3] = v12;
            v21[4] = &protocol witness table for TiledTextView;
            v21[0] = v13;
            char v20 = v3;
            (*(void (**)(void *, char *, uint64_t, uint64_t))(v16 + 8))(v21, &v20, v15, v16);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
          }
          else
          {

            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundContainerStateObserver?);
          }
          return;
        }
        id v17 = v18;
      }
      else
      {
        id v17 = v19;
      }

      return;
  }
}

uint64_t destroy for ImageWithEncodedRecipe(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  return outlined consume of Data._Representation(v2, v3);
}

void *initializeBufferWithCopyOfBuffer for ImageWithEncodedRecipe(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 16);
  id v6 = v3;
  outlined copy of Data._Representation(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t assignWithCopy for ImageWithEncodedRecipe(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v8 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v8, v7);
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  outlined consume of Data._Representation(v9, v10);
  return a1;
}

uint64_t assignWithTake for ImageWithEncodedRecipe(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ImageWithEncodedRecipe()
{
  return &type metadata for ImageWithEncodedRecipe;
}

void protocol witness for MagicGenerativePlaygroundStateObserver.magicGenerativePlaygroundStateDidChange(_:) in conformance CanvasGenerationTool(PaperKit::MagicGenerativePlaygroundState a1)
{
}

uint64_t base witness table accessor for Equatable in AnyObjectWeakRef<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_20C71DDF8()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for @objc closure #1 in CanvasGenerationTool.authenticate()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in CanvasGenerationTool.authenticate()
                                                + async function pointer to @objc closure #1 in CanvasGenerationTool.authenticate());
  return v5(v2, v3);
}

uint64_t sub_20C71DEEC()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>)
                 - 8);
  uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v7 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a2) + 0x7A0);
  uint64_t v8 = *(void *)(v5 + 72);
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  id v18 = v7;
  do
  {
    uint64_t v11 = v7(v6);
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = v11;
      unint64_t v14 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v16 = v9[2];
      unint64_t v15 = v9[3];
      if (v16 >= v15 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v9);
      }
      v9[2] = v16 + 1;
      unint64_t v10 = &v9[2 * v16];
      v10[4] = v13;
      v10[5] = v14;
      uint64_t v7 = v18;
    }
    v6 += v8;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v9;
}

id specialized static CanvasGenerationTool.preload()()
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)generativeLogger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v6 = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000020C847C50, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2864616F6C657270, 0xE900000000000029, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v1, v2, "%s - %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v4, -1, -1);
    MEMORY[0x210550270](v3, -1, -1);
  }

  return objc_msgSend(self, sel_preload);
}

uint64_t _s8PaperKit5ImageVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type MagicGenerativePlaygroundState.TransitionError and conformance MagicGenerativePlaygroundState.TransitionError()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicGenerativePlaygroundState.TransitionError and conformance MagicGenerativePlaygroundState.TransitionError;
  if (!lazy protocol witness table cache variable for type MagicGenerativePlaygroundState.TransitionError and conformance MagicGenerativePlaygroundState.TransitionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicGenerativePlaygroundState.TransitionError and conformance MagicGenerativePlaygroundState.TransitionError);
  }
  return result;
}

void partial apply for closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(uint64_t a1)
{
  closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(a1, *(void **)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void **)(v1 + 88), *(void *)(v1 + 96), *(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(void *)(v1 + 104), *(void **)(v1 + 112));
}

uint64_t sub_20C71E868()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id partial apply for closure #1 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id result = objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, 1.0);
  if (v1)
  {
    return objc_msgSend(v1, sel_setAlpha_, 0.0);
  }
  return result;
}

uint64_t block_copy_helper_60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_60()
{
  return swift_release();
}

uint64_t sub_20C71E91C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 120) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  outlined consume of Data._Representation(*(void *)(v0 + 56), *(void *)(v0 + 64));
  outlined consume of Data._Representation(*(void *)(v0 + 88), *(void *)(v0 + 96));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(int a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  return closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void **)(v1 + 72), *(void *)(v1 + 80), *(void **)(v1 + 88), *(void *)(v1 + 96), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48), *(void **)(v1 + 104), *(void **)(v1 + 112));
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(uint64_t a1)
{
  return closure #1 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(*(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), a1, *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88));
}

uint64_t sub_20C71EADC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C71EB14()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #2 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #2 in closure #2 in closure #1 in CanvasGenerationTool.addCanvasElement(for:with:)(a1, v4, v5, v6, v7);
}

uint64_t sub_20C71EC4C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #2 in CanvasGenerationTool.hideBlurEffect(animationDuration:)(id result)
{
  if (result) {
    return objc_msgSend(*(id *)(v1 + 16), sel_setHidden_, 1);
  }
  return result;
}

id partial apply for closure #1 in CanvasGenerationTool.showBlurEffect(animationDuration:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_setAlpha_, 0.0);
  return objc_msgSend(v1, sel_setHidden_, 0);
}

uint64_t sub_20C71ECF4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id partial apply for closure #2 in CanvasGenerationTool.showBlurEffect(animationDuration:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, 1.0);
}

uint64_t sub_20C71ED18()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasGenerationTool.placeMagicGenerativePlayground(for:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_20C71EE30()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 160, 7);
}

uint64_t partial apply for closure #3 in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(uint64_t a1)
{
  uint64_t v10 = v1[2];
  uint64_t v4 = v1[4];
  uint64_t v8 = v1[3];
  uint64_t v5 = v1[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #3 in CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(a1, v10, v8, v4, v5);
}

void *outlined consume of ImageWithEncodedRecipe?(void *result, uint64_t a2, unint64_t a3)
{
  if (result)
  {

    return (void *)outlined consume of Data._Representation(a2, a3);
  }
  return result;
}

uint64_t specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6, double a7, double a8)
{
  *(void *)(v9 + 264) = v8;
  *(double *)(v9 + 248) = a7;
  *(double *)(v9 + 256) = a8;
  *(double *)(v9 + 232) = a5;
  *(double *)(v9 + 240) = a6;
  *(unsigned char *)(v9 + 89) = a4;
  *(void *)(v9 + 216) = a2;
  *(void *)(v9 + 224) = a3;
  *(void *)(v9 + 208) = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  *(void *)(v9 + 272) = v10;
  *(void *)(v9 + 280) = *(void *)(v10 - 8);
  *(void *)(v9 + 288) = swift_task_alloc();
  *(void *)(v9 + 296) = type metadata accessor for PKDrawing();
  *(void *)(v9 + 304) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v9 + 312) = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 320) = v12;
  *(void *)(v9 + 328) = v11;
  return MEMORY[0x270FA2498](specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:), v12, v11);
}

uint64_t specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:)()
{
  uint64_t v94 = v0;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 264);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)generativeLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 264);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v9 = *(void *)(v0 + 216);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v85 = swift_slowAlloc();
    *(void *)&long long v90 = v85;
    *(_DWORD *)uint64_t v10 = 136316162;
    uint64_t v11 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000037, 0x800000020C85E450, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2048;
    uint64_t v13 = *(void *)(v9 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 184) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 32) = 2048;
    uint64_t v14 = *(void *)(v8 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 192) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 42) = 2080;
    uint64_t v15 = CGRect.debugDescription.getter();
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v4, v5, "%s - %s: (selectedStrokes.count = %ld, selectedElements.count = %ld, bounds = %s", (uint8_t *)v10, 0x34u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v85, -1, -1);
    MEMORY[0x210550270](v10, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  id v17 = (void *)MEMORY[0x210550400](*(void *)(v0 + 264) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas);
  *(void *)(v0 + 336) = v17;
  if (!v17)
  {
    unint64_t v36 = *(void **)(v0 + 264);
    swift_release();
    id v37 = v36;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = *(void **)(v0 + 264);
    if (v40)
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(void *)&long long v90 = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      uint64_t v44 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, (uint64_t *)&v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v38, v39, "%s: returning (canvas is nil)", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v43, -1, -1);
      MEMORY[0x210550270](v42, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
    swift_allocError();
    *(_OWORD *)uint64_t v55 = xmmword_20C847BD0;
    *(unsigned char *)(v55 + 16) = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_45;
  }
  id v18 = v17;
  id v19 = (void *)MEMORY[0x263F8EED0];
  char v20 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v17) + 0x2F8))();
  uint64_t v22 = v21;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(ObjectType, v22);
  *(void *)(v0 + 344) = v24;

  if (!v24)
  {
    swift_release();
LABEL_16:
    id v46 = *(id *)(v0 + 264);
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v50 = *(void **)(v0 + 264);
    if (v49)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(void *)&long long v90 = v52;
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v53 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)&v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v47, v48, "%s: returning (drawing is nil)", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v52, -1, -1);
      MEMORY[0x210550270](v51, -1, -1);
    }
    else
    {
    }
    goto LABEL_44;
  }
  id v25 = objc_msgSend(v24, sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for PKDrawingCoherence(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();

    goto LABEL_16;
  }
  uint64_t v26 = *(char **)(v0 + 120);
  *(void *)(v0 + 352) = v26;
  AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
  if ((*(uint64_t (**)(void))((*v19 & *v18) + 0x520))())
  {
    uint64_t v27 = *(void **)(v0 + 264);
    swift_release();
    id v28 = v27;
    CGRect v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = *(void **)(v0 + 264);
    if (v31)
    {
      uint64_t v86 = v26;
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      *(void *)&long long v90 = v87;
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v34 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, (uint64_t *)&v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v29, v30, "%s AutoRefine is running, cancel magic generative playground.", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v87, -1, -1);
      MEMORY[0x210550270](v33, -1, -1);

LABEL_43:
      goto LABEL_44;
    }

    goto LABEL_31;
  }
  uint64_t v86 = v26;
  uint64_t v57 = *(void *)(v0 + 264);
  uint64_t v58 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState;
  unsigned __int8 v89 = *(unsigned char *)(v57 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState);
  LOBYTE(v90) = 1;
  if ((specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)(&v89, (char *)&v90) & 1) == 0)
  {
    uint64_t v70 = *(void **)(v0 + 264);
    swift_release();
    id v71 = v70;
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    BOOL v74 = os_log_type_enabled(v72, v73);
    uint64_t v75 = *(void **)(v0 + 264);
    if (v74)
    {
      os_log_t log = v72;
      uint64_t v76 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(void *)&long long v90 = v84;
      *(_DWORD *)uint64_t v76 = 136315394;
      uint64_t v77 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, (uint64_t *)&v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v76 + 12) = 2080;
      unint64_t v79 = 0xED000064657A696CLL;
      uint64_t v80 = 0x616974696E696E75;
      switch(*(unsigned char *)(v57 + v58))
      {
        case 1:
          unint64_t v79 = 0xEB0000000064657ALL;
          uint64_t v80 = 0x696C616974696E69;
          break;
        case 2:
          unint64_t v79 = 0xED00006E6F697463;
          uint64_t v80 = 0x656C6553646E6177;
          break;
        case 3:
          id v81 = "composingFromEmptyState";
          goto LABEL_37;
        case 4:
          uint64_t v80 = 0xD000000000000016;
          uint64_t v82 = "composingWandSelection";
          goto LABEL_41;
        case 5:
          uint64_t v80 = 0xD000000000000018;
          uint64_t v82 = "composingProvidedContext";
          goto LABEL_41;
        case 6:
          id v81 = "composingProvidedRecipe";
LABEL_37:
          unint64_t v79 = (unint64_t)(v81 - 32) | 0x8000000000000000;
          uint64_t v80 = 0xD000000000000017;
          break;
        case 7:
          uint64_t v80 = 0xD000000000000011;
          uint64_t v82 = "cancelledOrFailed";
          goto LABEL_41;
        case 8:
          unint64_t v79 = 0xE900000000000064;
          uint64_t v80 = 0x65746172656E6567;
          break;
        case 9:
          uint64_t v80 = 0xD000000000000010;
          uint64_t v82 = "generationFailed";
LABEL_41:
          unint64_t v79 = (unint64_t)(v82 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      BOOL v83 = *(void **)(v0 + 264);
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v79, (uint64_t *)&v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, log, v73, "%s Unsupported state transition from %s", (uint8_t *)v76, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v84, -1, -1);
      MEMORY[0x210550270](v76, -1, -1);

      goto LABEL_43;
    }

LABEL_31:
LABEL_44:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
LABEL_45:
    return v56();
  }
  uint64_t v60 = *(void *)(v0 + 280);
  uint64_t v59 = *(void *)(v0 + 288);
  uint64_t v61 = *(void *)(v0 + 272);
  uint64_t v62 = *(void *)(v0 + 216);
  objc_msgSend(*(id *)(v0 + 264), sel_setHidden_, 0);
  AnyCanvas.updateCanvasAttachmentProvider()();
  uint64_t v63 = swift_bridgeObjectRetain();
  AnyCanvas.textPromptsFromElementCanvasMembers(_:)(v63, MEMORY[0x263F8EE88], 6, 0, (unint64_t *)&v90);
  *(_OWORD *)(v0 + 360) = v90;
  uint64_t v64 = v92;
  *(void *)(v0 + 376) = v91;
  *(void *)(v0 + 384) = v64;
  *(unsigned char *)(v0 + 90) = v93;
  swift_bridgeObjectRelease();
  BOOL v65 = &v86[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v59, v65, v61);
  uint64_t v66 = swift_task_alloc();
  *(void *)(v66 + 16) = v59;
  swift_bridgeObjectRetain();
  uint64_t v67 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in CanvasMembers.strokeArray(in:), v66, v62);
  *(void *)(v0 + 392) = v67;
  *(void *)(v0 + 400) = 0;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
  uint64_t v68 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v68;
  *uint64_t v68 = v0;
  v68[1] = specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:);
  return AnyCanvas.textPromptLookupFor(_:)(v0 + 16, v67);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  *((_OWORD *)v2 + 26) = *((_OWORD *)v2 + 1);
  id v3 = v1[4];
  *((_OWORD *)v2 + 27) = *((_OWORD *)v2 + 4);
  v2[56] = v1[10];
  *((unsigned char *)v2 + 91) = *((unsigned char *)v2 + 88);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  outlined consume of CanvasMembers?(v3);
  uint64_t v4 = v1[41];
  os_log_type_t v5 = v1[40];
  return MEMORY[0x270FA2498](specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:), v5, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double x;
  double y;
  CGFloat width;
  CGFloat height;
  double v21;
  double v22;
  CGFloat v23;
  CGFloat MidY;
  double v25;
  double v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat MidX;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t (*v34)(void);
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v42;
  uint64_t v43;
  uint64_t v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  uint64_t v43 = v0;
  uint64_t v1 = *(void *)(v0 + 416);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    id v3 = *(void **)(v0 + 360);
    if (v2)
    {
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v3 = *(void **)(v0 + 360);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        id v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, *(void **)(v0 + 360));
      }
      os_log_type_t v5 = v3[2];
      BOOL v6 = 2 * v5;
      uint64_t v7 = (uint64_t *)(v1 + 40);
      do
      {
        uint64_t v9 = *(v7 - 1);
        uint64_t v8 = *v7;
        uint64_t v10 = v3[3];
        swift_bridgeObjectRetain();
        if (v5 >= v10 >> 1) {
          id v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v5 + 1, 1, v3);
        }
        v3[2] = v5 + 1;
        uint64_t v11 = &v3[v6];
        v11[4] = v9;
        void v11[5] = v8;
        v6 += 2;
        v7 += 2;
        ++v5;
        --v2;
      }
      while (v2);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = *(void **)(v0 + 360);
  }
  *(void *)(v0 + 456) = v3;
  unint64_t v12 = *(void *)(v0 + 432);
  if (v12)
  {
    uint64_t v13 = *(unsigned char *)(v0 + 91) & 1;
    uint64_t v14 = *(void *)(v0 + 440);
    uint64_t v15 = *(void *)(v0 + 448);
    unint64_t v16 = *(void *)(v0 + 216);
  }
  else
  {
    unint64_t v16 = *(void *)(v0 + 216);
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    unint64_t v12 = MEMORY[0x263F8EE88];
    uint64_t v15 = 6;
    uint64_t v14 = v16;
  }
  *(void *)(v0 + 464) = v12;
  *(void *)(v0 + 472) = v14;
  AnyCanvas.canvasGenerationToolFrameForSelection(_:to:)(*(void *)(v0 + 208), v16, *(void *)(v0 + 224), *(unsigned char *)(v0 + 89) & 1, *(void *)(v0 + 264));
  double x = v45.origin.x;
  CGFloat y = v45.origin.y;
  double width = v45.size.width;
  double height = v45.size.height;
  if (CGRectIsEmpty(v45))
  {
    if (one-time initialization token for defaultGeneratedImageSize != -1) {
      swift_once();
    }
    uint64_t v22 = *((double *)&static UIConstants.defaultGeneratedImageSize + 1);
    *(void *)&uint64_t v21 = static UIConstants.defaultGeneratedImageSize;
    uint64_t v23 = 0.0;
    CGFloat MidY = 0.0;
  }
  else
  {
    v46.origin.double x = x;
    v46.origin.CGFloat y = y;
    v46.size.double width = width;
    v46.size.double height = height;
    id v25 = CGRectGetWidth(v46);
    v47.origin.double x = x;
    v47.origin.CGFloat y = y;
    v47.size.double width = width;
    v47.size.double height = height;
    uint64_t v26 = CGRectGetHeight(v47);
    if (v26 < v25) {
      id v25 = v26;
    }
    v48.origin.double x = x;
    v48.origin.CGFloat y = y;
    v48.size.double width = width;
    v48.size.double height = height;
    uint64_t v27 = x + (CGRectGetWidth(v48) - v25) * 0.5;
    v49.origin.double x = x;
    v49.origin.CGFloat y = y;
    v49.size.double width = width;
    v49.size.double height = height;
    id v28 = y + (CGRectGetHeight(v49) - v25) * 0.5;
    v50.origin.double x = v27;
    v50.origin.CGFloat y = v28;
    v50.size.double width = v25;
    v50.size.double height = v25;
    CGFloat MidX = CGRectGetMidX(v50);
    v51.origin.double x = v27;
    v51.origin.CGFloat y = v28;
    v51.size.double width = v25;
    v51.size.double height = v25;
    CGFloat MidY = CGRectGetMidY(v51);
    uint64_t v21 = v25;
    uint64_t v22 = v25;
    uint64_t v23 = MidX;
  }
  CanvasGenerationTool.allocateGenerationFrame(for:with:)((CGSize)__PAIR128__(*(unint64_t *)&v22, *(unint64_t *)&v21), (CGPoint)__PAIR128__(*(unint64_t *)&MidY, *(unint64_t *)&v23));
  uint64_t v42 = 5;
  CanvasGenerationTool.placeMagicGenerativePlayground(for:)((PaperKit::MagicGenerativePlaygroundState)&v42);
  if (v30)
  {
    uint64_t v32 = *(void **)(v0 + 344);
    BOOL v31 = *(void **)(v0 + 352);
    uint64_t v33 = *(void **)(v0 + 336);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }
  else
  {
    unint64_t v36 = *(unsigned __int8 *)(v0 + 90);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)((*MEMORY[0x263F8EED0] & **(void **)(v0 + 336)) + 0x660) + **(int **)((*MEMORY[0x263F8EED0] & **(void **)(v0 + 336)) + 0x660));
    id v37 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v37;
    *id v37 = v0;
    v37[1] = specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:);
    uint64_t v38 = *(void *)(v0 + 376);
    os_log_type_t v39 = *(void *)(v0 + 384);
    BOOL v40 = *(void *)(v0 + 368);
    return v41(v40, v38, v39, v36, v12, v14, v15, v13);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 512) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v3 = *(void *)(v2 + 328);
  uint64_t v4 = *(void *)(v2 + 320);
  if (v0) {
    os_log_type_t v5 = specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:);
  }
  else {
    os_log_type_t v5 = specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v2 = (void *)v0[61];
  uint64_t v1 = (void *)v0[62];
  uint64_t v4 = (void *)v0[43];
  id v3 = (void *)v0[44];
  os_log_type_t v5 = (void *)v0[42];
  BOOL v6 = (void *)v0[33];
  swift_release();
  objc_msgSend(v6, sel_setHidden_, 1);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void **)(v0 + 488);
  uint64_t v1 = *(void **)(v0 + 496);
  id v3 = *(void **)(v0 + 344);
  uint64_t v4 = *(void **)(v0 + 336);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:)(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[61] = a1;
  v3[62] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_log_type_t v5 = (void *)swift_task_alloc();
  v3[63] = v5;
  *os_log_type_t v5 = v4;
  v5[1] = specialized CanvasGenerationTool.initiateMagicGenerativePlayground(selection:in:canvas:);
  uint64_t v6 = MEMORY[0x263F8EE88];
  uint64_t v7 = MEMORY[0x263F8EE88];
  uint64_t v8 = MEMORY[0x263F8EE88];
  uint64_t v9 = MEMORY[0x263F8EE88];
  return CanvasGenerationTool.generateImageDestructively(elementMembers:strokeMembers:elementsImage:strokesImage:textPrompts:textSuggestions:invocation:)(v7, v6, 6, 0, v8, v9, 6, 0);
}

void specialized CanvasGenerationTool.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_eatTapGestureRecognizer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_eatPanGestureRecognizer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_blurView] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint1];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  v1[16] = 1;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_previousGesturePoint2];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  v2[16] = 1;
  id v3 = &v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
  long long v4 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *id v3 = *MEMORY[0x263F001A0];
  v3[1] = v4;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth] = 0;
  os_log_type_t v5 = &v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_knownCanvasGenerationFrame];
  *(_OWORD *)os_log_type_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_isScrollable] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeBackgroundView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvasGenerationToolDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v6 = &v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_cachedMagicFrame];
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC] = 0;
  uint64_t v7 = &v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_backgroundViewTopAnchorConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized CanvasGenerationTool.addTitleAndSuggestions(at:)()
{
  v1[42] = v0;
  type metadata accessor for MainActor();
  v1[43] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[44] = v3;
  v1[45] = v2;
  return MEMORY[0x270FA2498](specialized CanvasGenerationTool.addTitleAndSuggestions(at:), v3, v2);
}

{
  uint64_t v0;
  id *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t countAndFlagsBits;
  Swift::String_optional v31;
  void *object;
  void *v33;
  uint64_t inited;
  Swift::String_optional v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  BOOL v42;
  id v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t (*v48)(void);
  Swift::String_optional v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  BOOL v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  uint64_t v75 = v0;
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v1 = (id *)(v0 + 336);
  uint64_t v2 = *(void **)(v0 + 336);
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 368) = __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  long long v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.default.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 336);
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    uint64_t v10 = v69;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v9 + 12) = 2080;
    *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x800000020C85E2C0, &v69);
    uint64_t v1 = (id *)(v0 + 336);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20C2D7000, v5, v6, "%s - %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v10, -1, -1);
    MEMORY[0x210550270](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = *(void *)(v0 + 336) + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas;
  uint64_t v14 = MEMORY[0x210550400](v13);
  *(void *)(v0 + 376) = v14;
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    *(void *)(v0 + 272) = v14;
    type metadata accessor for AnyCanvas();
    unint64_t v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitAttachment);
    if (swift_dynamicCast())
    {
      id v17 = *(void *)(v0 + 336);
      outlined init with take of FindResult((long long *)(v0 + 120), v0 + 80);
      id v18 = *(void **)(v17 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
      *(void *)(v0 + 384) = v18;
      if (v18)
      {
        uint64_t v67 = v1;
        id v19 = MEMORY[0x210550400](v13);
        if (v19)
        {
          char v20 = (void *)v19;
          uint64_t v66 = v16;
          uint64_t v21 = v19 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider;
          swift_beginAccess();
          uint64_t v22 = MEMORY[0x210550400](v21);
          uint64_t v23 = *(void *)(v21 + 8);
          uint64_t v24 = v18;

          if (v22)
          {
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v23 + 8))(&v69, v0 + 80, ObjectType, v23);
            swift_unknownObjectRelease();
            uint64_t v26 = v70;
            if (v70)
            {
              BOOL v65 = v69;
              uint64_t v27 = v72;
              uint64_t v64 = v71;
              id v28 = v73;
              CGRect v29 = v74;
              BOOL v31 = String.replaceNewlineTabAndTrim()();
              uint64_t countAndFlagsBits = v31.value._countAndFlagsBits;
              if (v31.value._object)
              {
                object = v31.value._object;
              }
              else
              {
                uint64_t countAndFlagsBits = 0;
                object = (void *)0xE000000000000000;
              }
              uint64_t v33 = (void *)MEMORY[0x21054D080](countAndFlagsBits, object);
              swift_bridgeObjectRelease();
              objc_msgSend(v24, sel_setTitle_, v33);

              *(void *)(v0 + 392) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
              initeCGFloat d = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_20C835740;
              *(void *)(inited + 32) = v64;
              *(void *)(inited + 40) = v27;
              *(void *)(inited + 48) = v28;
              *(void *)(inited + 56) = v29;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined consume of PaperAttachmentTextualContext?(v65, v26);
              swift_bridgeObjectRetain();
              unint64_t v35 = String.replaceNewlineTabAndTrim()();
              swift_bridgeObjectRelease();
              if (v35.value._object)
              {
                unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
                uint64_t v38 = v36[2];
                id v37 = v36[3];
                if (v38 >= v37 >> 1) {
                  unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v36);
                }
                v36[2] = v38 + 1;
                *(Swift::String_optional *)&v36[2 * v38 + 4] = v35;
              }
              else
              {
                unint64_t v36 = (void *)MEMORY[0x263F8EE78];
              }
              swift_bridgeObjectRetain();
              uint64_t v50 = String.replaceNewlineTabAndTrim()();
              swift_bridgeObjectRelease();
              if (v50.value._object)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
                }
                uint64_t v52 = v36[2];
                uint64_t v51 = v36[3];
                if (v52 >= v51 >> 1) {
                  unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v36);
                }
                v36[2] = v52 + 1;
                *(Swift::String_optional *)&v36[2 * v52 + 4] = v50;
              }
              uint64_t v53 = *v67;
              swift_release();
              *(void *)(v0 + 256) = v36;
              AnyCanvas.suggestionsFromOnScreenTextCanvasElements()();
              specialized Array.append<A>(contentsOf:)(v54);
              uint64_t v55 = v53;
              uint64_t v56 = Logger.logObject.getter();
              uint64_t v57 = static os_log_type_t.default.getter();
              uint64_t v58 = os_log_type_enabled(v56, v57);
              uint64_t v59 = *v67;
              if (v58)
              {
                uint64_t v60 = swift_slowAlloc();
                uint64_t v68 = swift_slowAlloc();
                uint64_t v69 = v68;
                *(_DWORD *)uint64_t v60 = 136315394;
                uint64_t v61 = CanvasGenerationTool.nameAndPointerDescription.getter();
                *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v69);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();

                *(_WORD *)(v60 + 12) = 2048;
                swift_beginAccess();
                *(void *)(v0 + 312) = *(void *)(*(void *)(v0 + 256) + 16);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl(&dword_20C2D7000, v56, v57, "%s suggestions count is %ld", (uint8_t *)v60, 0x16u);
                swift_arrayDestroy();
                MEMORY[0x210550270](v68, -1, -1);
                MEMORY[0x210550270](v60, -1, -1);
              }
              else
              {
              }
              uint64_t v63 = (void *)swift_task_alloc();
              *(void *)(v0 + 400) = v63;
              *uint64_t v63 = v0;
              v63[1] = specialized CanvasGenerationTool.addTitleAndSuggestions(at:);
              return AnyCanvas.suggestionsFromOnScreenTextStrokes()();
            }
          }
        }
        else
        {
          uint64_t v24 = v16;
        }
        uint64_t v1 = v67;
        swift_release();

        __swift_destroy_boxed_opaque_existential_1(v0 + 80);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1(v0 + 80);

        swift_release();
      }
    }
    else
    {
      *(_OWORD *)(v0 + 120) = 0u;
      *(_OWORD *)(v0 + 136) = 0u;
      *(void *)(v0 + 152) = 0;
      swift_release();

      outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 120, (uint64_t *)&demangling cache variable for type metadata for PaperKitAttachment?);
    }
  }
  else
  {
    swift_release();
  }
  os_log_type_t v39 = *v1;
  BOOL v40 = Logger.logObject.getter();
  uint64_t v41 = static os_log_type_t.error.getter();
  uint64_t v42 = os_log_type_enabled(v40, v41);
  uint64_t v43 = *v1;
  if (v42)
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    unint64_t v45 = swift_slowAlloc();
    uint64_t v69 = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    id v46 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20C2D7000, v40, v41, "%s returning (paperKitAttachment/magicGenerativeVC/textualContext is nil)", v44, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v45, -1, -1);
    MEMORY[0x210550270](v44, -1, -1);
  }
  else
  {
  }
  os_log_type_t v48 = *(uint64_t (**)(void))(v0 + 8);
  return v48();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  void *v23;
  void *v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  CGRect v29 = v0;
  uint64_t v1 = v0 + 80;
  uint64_t v2 = *(void *)(v0 + 408);
  swift_release();
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 408);
    long long v4 = *(id *)(v0 + 336);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = v4;
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.default.getter();
    uint64_t v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void **)(v0 + 336);
    if (v8)
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      id v28 = v27;
      *(_DWORD *)uint64_t v10 = 136315394;
      uint64_t v11 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v10 + 12) = 2048;
      uint64_t v13 = *(void *)(v3 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 288) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v6, v7, "%s handwritten text length is %ld", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x210550270](v27, -1, -1);
      uint64_t v14 = v10;
      uint64_t v1 = v0 + 80;
      MEMORY[0x210550270](v14, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    specialized Array.append<A>(contentsOf:)(v3);
    swift_endAccess();
  }
  swift_beginAccess();
  uint64_t v15 = *(void *)(v0 + 256);
  if (*(void *)(v15 + 16))
  {
    unint64_t v16 = *(void **)(v0 + 384);
    id v17 = *(void **)(v0 + 376);
    *(void *)(v0 + 264) = v15;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    id v18 = BidirectionalCollection<>.joined(separator:)();
    char v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_20C832C20;
    *(void *)(v21 + 32) = v18;
    *(void *)(v21 + 40) = v20;
    isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_addSuggestions_, isa);

    __swift_destroy_boxed_opaque_existential_1(v1);
  }
  else
  {
    uint64_t v23 = *(void **)(v0 + 376);
    uint64_t v24 = *(void **)(v0 + 384);
    __swift_destroy_boxed_opaque_existential_1(v1);
  }
  swift_bridgeObjectRelease();
  id v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t specialized CanvasGenerationTool.addTitleAndSuggestions(at:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 408) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 360);
  uint64_t v4 = *(void *)(v2 + 352);
  return MEMORY[0x270FA2498](specialized CanvasGenerationTool.addTitleAndSuggestions(at:), v4, v3);
}

uint64_t outlined consume of PaperAttachmentTextualContext?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of CanvasMembers?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_20C721BAC()
{
  swift_unknownObjectRelease();
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 40), *(void *)(v0 + 48));
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.generateImageAndReset(with:invocation:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasGenerationTool.generateImageAndReset(with:invocation:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_20C721CC8()
{
  swift_unknownObjectRelease();
  swift_release();
  outlined consume of MagicGenerativePlaygroundContext(*(void **)(v0 + 40), *(id *)(v0 + 48), *(unsigned char *)(v0 + 56));
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.generateImageAndReset(context:invocation:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(unsigned char *)(v1 + 56);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasGenerationTool.generateImageAndReset(context:invocation:)(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.waitForGeneratedImageAndReset()(uint64_t a1)
{
  return closure #1 in CanvasGenerationTool.waitForGeneratedImageAndReset()(a1, *(void *)(v1 + 16));
}

uint64_t outlined assign with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void partial apply for closure #2 in CanvasGenerationTool.waitForGeneratedImageAndReset()()
{
  closure #2 in CanvasGenerationTool.waitForGeneratedImageAndReset()(v0);
}

void partial apply for closure #3 in CanvasGenerationTool.waitForGeneratedImageAndReset()(uint64_t a1)
{
  closure #3 in CanvasGenerationTool.waitForGeneratedImageAndReset()(a1, v1);
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:)(uint64_t a1)
{
  return closure #1 in CanvasGenerationTool.recreateMagicGenerativePlayground(invocation:canvas:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_3(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Image();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20C721EDC()
{
  return MEMORY[0x270FA0238](v0, 72, 7);
}

id partial apply for closure #1 in CanvasGenerationTool.updateScrollViewLayout(_:animationDuration:animationCurveOptions:)()
{
  return closure #1 in CanvasGenerationTool.updateScrollViewLayout(_:animationDuration:animationCurveOptions:)(*(char **)(v0 + 24), *(void **)(v0 + 32), *(double *)(v0 + 16), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48), *(CGFloat *)(v0 + 56), *(CGFloat *)(v0 + 64));
}

uint64_t outlined copy of CanvasGenerationToolError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for CanvasGenerationToolError(uint64_t a1)
{
  return outlined consume of CanvasGenerationToolError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of CanvasGenerationToolError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CanvasGenerationToolError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CanvasGenerationToolError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CanvasGenerationToolError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CanvasGenerationToolError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CanvasGenerationToolError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CanvasGenerationToolError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CanvasGenerationToolError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasGenerationToolError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasGenerationToolError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CanvasGenerationToolError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for CanvasGenerationToolError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CanvasGenerationToolError()
{
  return &type metadata for CanvasGenerationToolError;
}

void (*ReflowTextView.spacingAdjustment.modify(void *a1))(_OWORD **a1, char a2)
{
  unsigned int v3 = malloc(0x60uLL);
  *a1 = v3;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  v3[11] = v4;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 208);
  char v6 = *(unsigned char *)(v4 + 218);
  __int16 v7 = *(_WORD *)(v4 + 216);
  long long v8 = *(_OWORD *)(v4 + 176);
  long long v9 = *(_OWORD *)(v4 + 192);
  *(_OWORD *)unsigned int v3 = *(_OWORD *)(v4 + 160);
  *((_OWORD *)v3 + 1) = v8;
  *((_OWORD *)v3 + 2) = v9;
  v3[6] = v5;
  *((_WORD *)v3 + 28) = v7;
  *((unsigned char *)v3 + 58) = v6;
  swift_retain();
  return ReflowTextView.spacingAdjustment.modify;
}

void ReflowTextView.spacingAdjustment.modify(_OWORD **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 11);
  uint64_t v4 = *((void *)*a1 + 6);
  char v5 = *((unsigned char *)*a1 + 58);
  __int16 v6 = *((_WORD *)*a1 + 28);
  long long v7 = (*a1)[1];
  long long v8 = (*a1)[2];
  *(_OWORD *)(v3 + 160) = **a1;
  *(_OWORD *)(v3 + 176) = v7;
  *(_OWORD *)(v3 + 192) = v8;
  *(void *)(v3 + 208) = v4;
  *(_WORD *)(v3 + 216) = v6;
  *(unsigned char *)(v3 + 218) = v5;
  if (a2)
  {
    swift_retain();
    swift_release();
  }
  swift_release();
  free(v2);
}

void one-time initialization function for showDebugUI()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v1 = (void *)MEMORY[0x21054D080](0xD00000000000001FLL, 0x800000020C85E700);
  unsigned __int8 v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  static ReflowTextView.showDebugUI = v2;
}

uint64_t closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(unint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_8;
  }
  if (!(a1 >> 62))
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    aBlock[0] = 0;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)aBlock, *(void *)(*(void *)(a4 + 64) + 40), &demangling cache variable for type metadata for ReflowTextView?);
    return swift_continuation_resume();
  }
LABEL_4:
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)(v12 + 16) = MEMORY[0x263F8EE78];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v12 + 16;
  v15[3] = v14 + 16;
  v15[4] = a1;
  v15[5] = a3;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = partial apply for closure #1 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:);
  *(void *)(v16 + 24) = v15;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_76_0;
  id v17 = _Block_copy(aBlock);
  id v18 = a3;
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_performAsCurrentTraitCollection_, v17);
  _Block_release(v17);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v21 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 1, 1, v21);
    type metadata accessor for MainActor();
    swift_retain();
    swift_retain();
    uint64_t v22 = static MainActor.shared.getter();
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = MEMORY[0x263F8F500];
    v23[2] = v22;
    v23[3] = v24;
    v23[4] = v14;
    v23[5] = v12;
    v23[6] = a4;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:), (uint64_t)v23);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(uint64_t *a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v6 = specialized static ReflowLayoutManager.process(lines:in:)(a3, a4);
  uint64_t v8 = v7;
  *a1 = v6;
  swift_bridgeObjectRelease();
  *a2 = v8;
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  uint64_t v7 = type metadata accessor for PKStroke();
  v6[15] = v7;
  v6[16] = *(void *)(v7 - 8);
  v6[17] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[18] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:), v9, v8);
}

uint64_t closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)()
{
  uint64_t v1 = v0[12];
  swift_release();
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  CGFloat x = *MEMORY[0x263F001A0];
  CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v7 = *(void *)(v2 + 16);
  if (v7)
  {
    uint64_t v8 = v0[16];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    uint64_t v9 = v8 + 16;
    char v10 = v11;
    uint64_t v12 = v2 + ((*(unsigned __int8 *)(v9 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 64));
    uint64_t v13 = *(void *)(v9 + 56);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v14 = v0[17];
      uint64_t v15 = v0[15];
      v10(v14, v12, v15);
      PKStroke.renderBounds.getter();
      v30.origin.CGFloat x = v16;
      v30.origin.CGFloat y = v17;
      v30.size.CGFloat width = v18;
      v30.size.CGFloat height = v19;
      v28.origin.CGFloat x = x;
      v28.origin.CGFloat y = y;
      v28.size.CGFloat width = width;
      v28.size.CGFloat height = height;
      CGRect v29 = CGRectUnion(v28, v30);
      CGFloat x = v29.origin.x;
      CGFloat y = v29.origin.y;
      CGFloat width = v29.size.width;
      CGFloat height = v29.size.height;
      (*(void (**)(uint64_t, uint64_t))(v9 - 8))(v14, v15);
      v12 += v13;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = v0[13];
  uint64_t v20 = v0[14];
  uint64_t v22 = v0[12];
  swift_beginAccess();
  uint64_t v23 = *(void *)(v21 + 16);
  swift_beginAccess();
  uint64_t v24 = *(void *)(v22 + 16);
  objc_allocWithZone((Class)type metadata accessor for ReflowTextView());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[11] = ReflowTextView.init(contents:frame:strokesToReflow:)(v23, v24, x, y, width, height);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)(v0 + 11), *(void *)(*(void *)(v20 + 64) + 40), &demangling cache variable for type metadata for ReflowTextView?);
  swift_continuation_resume();
  swift_task_dealloc();
  id v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [CHReflowableTextLine]?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CHReflowableTextLine);
    uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v3(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

char *ReflowTextView.init(contents:frame:strokesToReflow:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  unint64_t v7 = v6;
  uint64_t i = OBJC_IVAR____TtC8PaperKit14ReflowTextView_annotationLayer;
  *(void *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_annotationLayer) = 0;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationEnabled) = 1;
  swift_unknownObjectWeakInit();
  uint64_t v15 = MEMORY[0x263F8EE78];
  *(void *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_nonReflowableStrokesToRemove) = MEMORY[0x263F8EE78];
  *(void *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___weakBackpointer) = 0;
  CGFloat v16 = (char *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime);
  *(void *)CGFloat v16 = 0;
  v16[8] = 1;
  *(void *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationTargetEndTime) = 0;
  *(void *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___displayLink) = 0;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating) = 0;
  *(void *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_endAnimationContinuations) = v15;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationSmoothstep) = 0;
  type metadata accessor for ReflowLayoutManager();
  swift_allocObject();
  uint64_t v17 = (uint64_t)(id)v7;
  uint64_t v18 = ReflowLayoutManager.init(contents:frame:strokesToReflow:)(a1, a2, a3, a4, a5, a6);
  CGFloat v19 = &async function pointer to CanvasGenerationTool.generateImageAndReset(context:invocation:);
  *(void *)(v17 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager) = v18;
  if (one-time initialization token for showDebugUI != -1) {
LABEL_32:
  }
    swift_once();
  uint64_t v20 = (void *)v17;
  if (static ReflowTextView.showDebugUI == 1)
  {
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
    uint64_t v20 = *(void **)(v7 + i);
    *(void *)(v7 + i) = v21;
  }
  uint64_t v22 = (objc_class *)type metadata accessor for ReflowTextView();
  v57.receiver = (id)v17;
  v57.super_class = v22;
  uint64_t v23 = (char *)objc_msgSendSuper2(&v57, sel_initWithFrame_, a3, a4, a5, a6);
  uint64_t v24 = *(void *)&v23[v19[52]];
  swift_beginAccess();
  CGFloat v19 = *(void **)(v24 + 88);
  unint64_t v54 = (void *)v19[2];
  if (v54)
  {
    uint64_t v53 = (char *)(v19 + 4);
    uint64_t v51 = v23;
    id v25 = v23;
    swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    uint64_t v52 = v19;
    while (1)
    {
      uint64_t v26 = &v53[168 * v7];
      long long v27 = *(_OWORD *)v26;
      long long v28 = *((_OWORD *)v26 + 2);
      v55[1] = *((_OWORD *)v26 + 1);
      v55[2] = v28;
      v55[0] = v27;
      long long v29 = *((_OWORD *)v26 + 3);
      long long v30 = *((_OWORD *)v26 + 4);
      long long v31 = *((_OWORD *)v26 + 6);
      v55[5] = *((_OWORD *)v26 + 5);
      v55[6] = v31;
      v55[3] = v29;
      v55[4] = v30;
      long long v32 = *((_OWORD *)v26 + 7);
      long long v33 = *((_OWORD *)v26 + 8);
      long long v34 = *((_OWORD *)v26 + 9);
      uint64_t v56 = *((void *)v26 + 20);
      v55[8] = v33;
      v55[9] = v34;
      v55[7] = v32;
      uint64_t v35 = *(void *)&v55[0];
      if (*(void *)&v55[0] >> 62)
      {
        if (*(uint64_t *)&v55[0] < 0) {
          CGFloat v19 = *(void **)&v55[0];
        }
        else {
          CGFloat v19 = (void *)(*(void *)&v55[0] & 0xFFFFFFFFFFFFFF8);
        }
        outlined retain of ReflowTextLine((uint64_t)v55);
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        if (!v17) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v17 = *(void *)((*(void *)&v55[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        outlined retain of ReflowTextLine((uint64_t)v55);
        swift_bridgeObjectRetain();
        if (!v17) {
          goto LABEL_23;
        }
      }
      if (v17 < 1)
      {
        __break(1u);
        goto LABEL_32;
      }
      for (uint64_t i = 0; i != v17; ++i)
      {
        if ((v35 & 0xC000000000000001) != 0)
        {
          uint64_t v36 = MEMORY[0x21054E050](i, v35);
        }
        else
        {
          uint64_t v36 = *(void *)(v35 + 8 * i + 32);
          swift_retain();
        }
        uint64_t v37 = (*(uint64_t (**)(void))(*(void *)v36 + 304))();
        if (v37)
        {
          uint64_t v38 = (void *)v37;
          id v39 = objc_msgSend(v25, sel_layer);
          objc_msgSend(v39, sel_addSublayer_, v38);

          if (static ReflowTextView.showDebugUI) {
            objc_msgSend(v38, sel_setBorderWidth_, 1.0);
          }
          swift_release();
        }
        else
        {
          swift_release();
        }
      }
LABEL_23:
      ++v7;
      swift_bridgeObjectRelease();
      outlined release of ReflowTextLine((uint64_t)v55);
      if ((void *)v7 == v54) {
        goto LABEL_26;
      }
      CGFloat v19 = v52;
      if (v7 >= v52[2])
      {
        __break(1u);
LABEL_26:
        swift_bridgeObjectRelease();
        uint64_t v23 = v51;
        goto LABEL_28;
      }
    }
  }
  BOOL v40 = v23;
LABEL_28:
  uint64_t v41 = *(void **)&v23[OBJC_IVAR____TtC8PaperKit14ReflowTextView_annotationLayer];
  if (v41)
  {
    id v42 = v41;
    id v43 = objc_msgSend(v23, sel_layer);
    objc_msgSend(v43, sel_addSublayer_, v42);

    id v44 = objc_msgSend(v23, sel_layer);
    unint64_t v45 = v23;
    id v46 = objc_msgSend(self, sel_blueColor);
    id v47 = objc_msgSend(v46, sel_colorWithAlphaComponent_, 0.2);

    id v48 = objc_msgSend(v47, sel_CGColor);
    objc_msgSend(v44, sel_setBorderColor_, v48);

    uint64_t v23 = v45;
    id v49 = objc_msgSend(v45, sel_layer);
    objc_msgSend(v49, sel_setBorderWidth_, 0.5);
  }
  return v23;
}

uint64_t ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for PKStroke();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  void v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  v4[13] = type metadata accessor for MainActor();
  v4[14] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[15] = v7;
  v4[16] = v6;
  return MEMORY[0x270FA2498](ReflowTextView.addToCanvas(_:hasHiddenStrokes:), v7, v6);
}

uint64_t ReflowTextView.addToCanvas(_:hasHiddenStrokes:)()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)(v0 + 24)) + 0x2F8))();
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  *(void *)(v0 + 136) = v6;

  if (v6)
  {
    uint64_t v61 = v6;
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v8 = (void *)(*(uint64_t (**)(void))((*v1 & **(void **)(v0 + 24)) + 0x320))();
    id v9 = objc_msgSend(v8, sel_canvasView);

    objc_msgSend(v9, sel_cancelCurrentStroke);
    uint64_t v10 = *(void *)(*(void *)(v7 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager) + 104);
    int64_t v11 = *(void *)(v10 + 16);
    uint64_t v12 = MEMORY[0x263F8EE78];
    if (v11)
    {
      uint64_t v13 = *(void *)(v0 + 64);
      uint64_t v68 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
      uint64_t v14 = *(void (**)(void, uint64_t, void))(v13 + 16);
      v13 += 16;
      unint64_t v64 = (*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64);
      uint64_t v66 = v14;
      uint64_t v15 = v10 + v64;
      uint64_t v62 = *(void *)(v13 + 56);
      CGFloat v16 = (void (**)(uint64_t, uint64_t))(v13 - 8);
      uint64_t v17 = (void (**)(unint64_t, uint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v66(*(void *)(v0 + 88), v15, *(void *)(v0 + 56));
        isCGFloat a = PKStroke._bridgeToObjectiveC()().super.isa;
        id v19 = [(objc_class *)isa copyForMutation];

        if (!v19) {
          break;
        }
        uint64_t v28 = *(void *)(v0 + 88);
        uint64_t v29 = *(void *)(v0 + 56);
        objc_msgSend(v19, sel__setHidden_, 1);
        id v30 = v19;
        static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

        (*v16)(v28, v29);
        uint64_t v12 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v68 + 16) + 1, 1);
          uint64_t v12 = v68;
        }
        unint64_t v32 = *(void *)(v12 + 16);
        unint64_t v31 = *(void *)(v12 + 24);
        if (v32 >= v31 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
          uint64_t v12 = v68;
        }
        uint64_t v33 = *(void *)(v0 + 96);
        uint64_t v34 = *(void *)(v0 + 56);
        *(void *)(v12 + 16) = v32 + 1;
        (*v17)(v12 + v64 + v32 * v62, v33, v34);
        uint64_t v68 = v12;
        v15 += v62;
        if (!--v11)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_11:
      uint64_t v35 = *(void *)(v0 + 48);
      *(void *)(v0 + 16) = v12;
      uint64_t v36 = *(void *)(v35 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_nonReflowableStrokesToRemove);
      int64_t v37 = *(void *)(v36 + 16);
      uint64_t v38 = MEMORY[0x263F8EE78];
      if (!v37)
      {
LABEL_20:
        uint64_t v54 = *(void *)(v0 + 32);
        uint64_t v53 = *(void *)(v0 + 40);
        uint64_t v55 = *(void *)(v0 + 24);
        specialized Array.append<A>(contentsOf:)(v38);
        uint64_t v56 = static MainActor.shared.getter();
        *(void *)(v0 + 144) = v56;
        objc_super v57 = (void *)swift_task_alloc();
        *(void *)(v0 + 152) = v57;
        v57[2] = v55;
        v57[3] = v0 + 16;
        v57[4] = v61;
        v57[5] = v35;
        v57[6] = v54;
        v57[7] = v53;
        uint64_t v20 = (void *)swift_task_alloc();
        *(void *)(v0 + 160) = v20;
        *uint64_t v20 = v0;
        uint64_t v58 = MEMORY[0x263F8EE60];
        v20[1] = ReflowTextView.addToCanvas(_:hasHiddenStrokes:);
        uint64_t v27 = v58 + 8;
        unint64_t v24 = 0x800000020C85E6B0;
        uint64_t v22 = MEMORY[0x263F8F500];
        id v25 = partial apply for closure #3 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:);
        uint64_t v21 = v56;
        unint64_t v23 = 0xD000000000000020;
        uint64_t v26 = v57;
        return MEMORY[0x270FA2318](v20, v21, v22, v23, v24, v25, v26, v27);
      }
      uint64_t v39 = *(void *)(v0 + 64);
      uint64_t v69 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
      BOOL v40 = *(void (**)(void, uint64_t, void))(v39 + 16);
      v39 += 16;
      unint64_t v65 = (*(unsigned __int8 *)(v39 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 64);
      uint64_t v67 = v40;
      uint64_t v41 = v36 + v65;
      uint64_t v63 = *(void *)(v39 + 56);
      id v42 = (void (**)(uint64_t, uint64_t))(v39 - 8);
      id v43 = (void (**)(unint64_t, uint64_t, uint64_t))(v39 + 16);
      while (1)
      {
        v67(*(void *)(v0 + 72), v41, *(void *)(v0 + 56));
        Class v44 = PKStroke._bridgeToObjectiveC()().super.isa;
        id v45 = [(objc_class *)v44 copyForMutation];

        if (!v45) {
          break;
        }
        uint64_t v46 = *(void *)(v0 + 72);
        uint64_t v47 = *(void *)(v0 + 56);
        objc_msgSend(v45, sel__setHidden_, 1);
        id v48 = v45;
        static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

        (*v42)(v46, v47);
        uint64_t v38 = v69;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v69 + 16) + 1, 1);
          uint64_t v38 = v69;
        }
        unint64_t v50 = *(void *)(v38 + 16);
        unint64_t v49 = *(void *)(v38 + 24);
        if (v50 >= v49 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
          uint64_t v38 = v69;
        }
        uint64_t v51 = *(void *)(v0 + 80);
        uint64_t v52 = *(void *)(v0 + 56);
        *(void *)(v38 + 16) = v50 + 1;
        (*v43)(v38 + v65 + v50 * v63, v51, v52);
        uint64_t v69 = v38;
        v41 += v63;
        if (!--v37)
        {
          swift_bridgeObjectRelease();
          uint64_t v35 = *(void *)(v0 + 48);
          goto LABEL_20;
        }
      }
    }
    __break(1u);
    return MEMORY[0x270FA2318](v20, v21, v22, v23, v24, v25, v26, v27);
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v59 = *(uint64_t (**)(void))(v0 + 8);
  return v59();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 128);
  uint64_t v3 = *(void *)(v1 + 120);
  return MEMORY[0x270FA2498](ReflowTextView.addToCanvas(_:hasHiddenStrokes:), v3, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 136);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void closure #3 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v36 = a1;
  int64_t v37 = a5;
  id v35 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  int64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PKDrawing();
  uint64_t v13 = *(void *)(v12 - 8);
  v14.n128_f64[0] = MEMORY[0x270FA5388](v12);
  CGFloat v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (void *)(*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *a2) + 0x320))(v14);
  if (v17)
  {
    id v34 = v17;
    type metadata accessor for PKStroke();
    swift_bridgeObjectRetain();
    isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v18 = objc_msgSend(v35, sel_drawing);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    PKDrawing._bridgeToObjectiveC()(v19);
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v8);
    unint64_t v22 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    unint64_t v23 = (char *)swift_allocObject();
    unint64_t v24 = v37;
    uint64_t v25 = v38;
    *((void *)v23 + 2) = a2;
    *((void *)v23 + 3) = v24;
    uint64_t v26 = v39;
    *((void *)v23 + 4) = v25;
    *((void *)v23 + 5) = v26;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v23[v22], v11, v8);
    aBlock[4] = partial apply for closure #1 in closure #3 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:);
    aBlock[5] = v23;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_61;
    uint64_t v27 = _Block_copy(aBlock);
    uint64_t v28 = a2;
    id v29 = v24;
    outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v25);
    swift_release();
    Class v31 = isa;
    id v30 = v34;
    objc_msgSend(v34, sel__setAdditionalStrokes_inDrawing_completion_, isa, v21, v27);
    _Block_release(v27);
  }
}

void closure #1 in closure #3 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_initWithFrame_, 0.0, 0.0, 100.0, 100.0);
  id v7 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v7, sel_setAnchorPoint_, 0.0, 0.0);

  (*(void (**)(void *__return_ptr))((*MEMORY[0x263F8EED0] & *a1) + 0x5D0))(v35);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v35, (uint64_t)&v36, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  double v8 = 1.0;
  if ((v38 & 1) == 0) {
    double v8 = sqrt(v36 * v36 + v37 * v37);
  }
  id v9 = objc_msgSend(v6, sel_layer, a4);
  CGAffineTransformMakeScale(&v34, v8, v8);
  objc_msgSend(v9, sel_setAffineTransform_, &v34);

  objc_msgSend(v6, sel_setFrame_, 0.0, 0.0, 100.0, 100.0);
  objc_msgSend(v6, sel_addSubview_, a2);
  objc_msgSend(a1, sel_addSubview_, v6);
  swift_unknownObjectWeakAssign();
  uint64_t v10 = *(void *)(a2 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  swift_beginAccess();
  unint64_t v11 = *(void *)(v10 + 80);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_5:
      if (v12 < 1)
      {
LABEL_44:
        __break(1u);
        return;
      }
      for (uint64_t i = 0; i != v12; ++i)
      {
        if ((v11 & 0xC000000000000001) != 0)
        {
          uint64_t v14 = MEMORY[0x21054E050](i, v11);
        }
        else
        {
          uint64_t v14 = *(void *)(v11 + 8 * i + 32);
          swift_retain();
        }
        if ((~*(void *)(v14 + 48) & 0x7FF0000000000000) != 0)
        {
          BOOL v15 = (~*(void *)(v14 + 56) & 0x7FF0000000000000) == 0
             || (~*(void *)(v14 + 64) & 0x7FF0000000000000) == 0;
          if (!v15 && (*(void *)(v14 + 72) & 0x7FF0000000000000) != 0x7FF0000000000000)
          {
            uint64_t v17 = (void *)(*(uint64_t (**)(void))(*(void *)v14 + 304))();
            if (v17)
            {
              id v18 = v17;
              objc_msgSend(v17, sel_setFrame_, *(double *)(v14 + 48), *(double *)(v14 + 56), *(double *)(v14 + 64), *(double *)(v14 + 72));
            }
          }
        }
        swift_release();
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v19 = *(void *)(v10 + 88);
  swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  uint64_t v21 = 1;
  while (1)
  {
    uint64_t v22 = v20;
    uint64_t v20 = v21;
    unint64_t v23 = *(void *)(v19 + 16);
    if (v22 == v23) {
      break;
    }
    if (v22 >= v23)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    unint64_t v24 = *(void *)(v19 + 32 + 168 * v22);
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      if (!v25) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v25) {
        goto LABEL_23;
      }
    }
    if (v25 < 1) {
      goto LABEL_43;
    }
    double v26 = (double)v22;
    if ((v24 & 0xC000000000000001) != 0)
    {
      for (uint64_t j = 0; j != v25; ++j)
      {
        uint64_t v28 = MEMORY[0x21054E050](j, v24);
        *(double *)(v28 + 128) = v26;
        swift_unknownObjectRelease();
      }
    }
    else
    {
      for (uint64_t k = 0; k != v25; ++k)
      {
        uint64_t v30 = *(void *)(v24 + 8 * k + 32);
        *(double *)(v30 + 128) = v26;
      }
    }
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v21 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      goto LABEL_42;
    }
  }
  uint64_t v31 = swift_bridgeObjectRelease();
  if (a3) {
    a3(v31);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  CheckedContinuation.resume(returning:)();
}

uint64_t ReflowTextView.weakBackpointer.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___weakBackpointer;
  if (*(void *)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___weakBackpointer))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___weakBackpointer);
  }
  else
  {
    type metadata accessor for ReflowTextView.WeakBackpointer();
    uint64_t v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

id ReflowTextView.displayLink.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___displayLink;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___displayLink);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___displayLink);
  }
  else
  {
    uint64_t v4 = ReflowTextView.weakBackpointer.getter();
    id v5 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v4, sel_stepAnimation);
    swift_release();
    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

Swift::Void __swiftcall ReflowTextView.startAnimating(endingIn:smoothstep:)(Swift::Double endingIn, Swift::Bool smoothstep)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating) & 1) == 0)
  {
    id v11 = ReflowTextView.displayLink.getter();
    id v12 = objc_msgSend(self, sel_mainRunLoop);
    objc_msgSend(v11, sel_addToRunLoop_forMode_, v12, *MEMORY[0x263EFF588]);

    *(unsigned char *)(v3 + v10) = 1;
    Date.init()();
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v15 = v3 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime;
    *(void *)uint64_t v15 = v14;
    *(unsigned char *)(v15 + 8) = 0;
  }
  Date.init()();
  Date.timeIntervalSinceReferenceDate.getter();
  double v17 = v16;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(double *)(v3 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationTargetEndTime) = v17 + endingIn;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationSmoothstep) = smoothstep;
}

Swift::Void __swiftcall ReflowTextView.stopAnimating()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v0;
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
  swift_beginAccess();
  unint64_t v6 = *(void *)(v5 + 80);
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_14;
    }
  }
  if (v7 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v8 = 0;
  unint64_t v31 = v6 & 0xC000000000000001;
  uint64_t v9 = v2;
  unint64_t v10 = v6;
  do
  {
    if (v31)
    {
      uint64_t v11 = MEMORY[0x21054E050](v8, v6);
    }
    else
    {
      uint64_t v11 = *(void *)(v6 + 8 * v8 + 32);
      swift_retain();
    }
    id v12 = (uint64_t (**)(void))(*(void *)v11 + 304);
    uint64_t v13 = *v12;
    uint64_t v14 = (void *)(*v12)();
    if (v14)
    {
      uint64_t v15 = v14;
      objc_msgSend(v14, sel_setFrame_, *(double *)(v11 + 48), *(double *)(v11 + 56), *(double *)(v11 + 64), *(double *)(v11 + 72));
    }
    double v16 = (void *)v13();
    if (v16)
    {
      uint64_t v18 = v16;
      LODWORD(v17) = 1.0;
      objc_msgSend(v16, sel_setOpacity_, v17);
    }
    ++v8;
    swift_release();
    uint64_t v2 = v9;
    unint64_t v6 = v10;
  }
  while (v7 != v8);
LABEL_14:
  swift_bridgeObjectRelease();
  uint64_t v19 = v30;
  id v20 = ReflowTextView.displayLink.getter();
  id v21 = objc_msgSend(self, sel_mainRunLoop);
  objc_msgSend(v20, sel_removeFromRunLoop_forMode_, v21, *MEMORY[0x263EFF588]);

  *(unsigned char *)(v19 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating) = 0;
  unint64_t v22 = v19 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_endAnimationContinuations;
  swift_beginAccess();
  uint64_t v23 = *(void *)v22;
  uint64_t v24 = *(void *)(*(void *)v22 + 16);
  if (v24)
  {
    unint64_t v31 = v22;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v26 = v2 + 16;
    uint64_t v25 = v27;
    uint64_t v28 = v23 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
    uint64_t v29 = *(void *)(v26 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v25(v4, v28, v1);
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t))(v26 - 8))(v4, v1);
      v28 += v29;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    unint64_t v22 = v31;
  }
  *(void *)unint64_t v22 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in ReflowTextView.endOfAnimation()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating) != 1) {
    return CheckedContinuation.resume(returning:)();
  }
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  uint64_t v9 = (unint64_t *)(a2 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_endAnimationContinuations);
  swift_beginAccess();
  unint64_t v10 = *v9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v9 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  unint64_t v13 = *(void *)(v10 + 16);
  unint64_t v12 = *(void *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  *(void *)(v10 + 16) = v13 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v13, v8, v4);
  return swift_endAccess();
}

Swift::Void __swiftcall ReflowTextView.stepAnimation()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationEnabled) == 1)
  {
    Date.init()();
    Date.timeIntervalSinceReferenceDate.getter();
    double v7 = v6;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v8 = v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime;
    double v9 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime);
    int v10 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime + 8);
    *(double *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 8) = 0;
    uint64_t v11 = self;
    objc_msgSend(v11, sel_begin);
    objc_msgSend(v11, sel_setDisableActions_, 1);
    double v12 = *(double *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationTargetEndTime);
    if (v12 <= v7)
    {
      ReflowTextView.stopAnimating()();
LABEL_39:
      objc_msgSend(v11, sel_commit);
      return;
    }
    double v13 = v7 - v9;
    double v14 = 0.0;
    if (v10) {
      double v13 = 0.0;
    }
    double v15 = fmin(v13 / (v12 - v7), 1.0);
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationSmoothstep) == 1)
    {
      if (v15 >= 0.0) {
        double v14 = v15;
      }
      double v15 = v14 * (v14 * 3.0) - v14 * (v14 * (v14 + v14));
    }
    double v36 = v11;
    uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
    swift_beginAccess();
    unint64_t v17 = *(void *)(v16 + 80);
    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      if (v18) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v18)
      {
LABEL_11:
        if (v18 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v19 = v16 + 160;
        swift_beginAccess();
        uint64_t v20 = 0;
        double v37 = 0.01;
        do
        {
          if ((v17 & 0xC000000000000001) != 0)
          {
            uint64_t v23 = (double *)MEMORY[0x21054E050](v20, v17);
          }
          else
          {
            uint64_t v23 = *(double **)(v17 + 8 * v20 + 32);
            swift_retain();
          }
          uint64_t v24 = (void *)(*(uint64_t (**)(void))(*(void *)v23 + 304))();
          if (v24)
          {
            uint64_t v25 = v24;
            double v26 = v23[16] + v15 * (v23[10] - v23[16]);
            void v23[16] = v26;
            if (*(void *)v19
              && (*(unsigned char *)(v16 + 217) & 1) != 0
              && vabdd_f64(v26, *(double *)(*(void *)v19 + 80)) < v37)
            {
              objc_msgSend(v24, sel_setFrame_, v23[6], v23[7], v23[8], v23[9]);
            }
            else
            {
              objc_msgSend(v24, sel_frame);
              v39.origin.CGFloat x = 0.0;
              v39.origin.CGFloat y = 0.0;
              v39.size.CGFloat width = 0.0;
              v39.size.CGFloat height = 0.0;
              if (CGRectEqualToRect(v38, v39))
              {
                id v27 = objc_msgSend(v25, sel_setFrame_, v23[6], v23[7], v23[8], v23[9]);
                void v23[16] = v23[10];
              }
              else
              {
                objc_msgSend(v25, sel_frame);
                id v27 = objc_msgSend(v25, sel_setFrame_, (1.0 - v15) * v28 + v15 * v23[6], (1.0 - v15) * v29 + v15 * v23[7], (1.0 - v15) * v30 + v15 * v23[8], (1.0 - v15) * v31 + v15 * v23[9]);
              }
              (*(void (**)(id))(*(void *)v23 + 384))(v27);
              double v32 = v23[16];
              double v33 = vabdd_f64(v32, v23[10]);
              if (v33 < 0.5)
              {
                double v21 = fmin((v33 + -0.2) / -0.2, 1.0);
                if (v21 < 0.0) {
                  double v21 = 0.0;
                }
                double v22 = v21 * (v21 * 3.0) - v21 * (v21 * (v21 + v21));
                *(float *)&double v22 = v22;
              }
              else
              {
                double v34 = fmin((vabdd_f64(v32, round(v32)) + -0.2) / -0.2, 1.0);
                if (v34 < 0.0) {
                  double v34 = 0.0;
                }
                float v35 = v34 * (v34 * 3.0) - v34 * (v34 * (v34 + v34));
                objc_msgSend(v25, sel_opacity);
                if (*(float *)&v22 > v35) {
                  *(float *)&double v22 = v35;
                }
              }
              objc_msgSend(v25, sel_setOpacity_, v22);
            }
          }
          ++v20;
          swift_release();
        }
        while (v18 != v20);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v36;
    goto LABEL_39;
  }
}

void ReflowTextView.caretRect(for:in:)(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  objc_msgSend(v3, sel_convertPoint_fromCoordinateSpace_, a1);
  id v9 = ReflowLayoutManager.closestPosition(to:)(v7, v8);
  id v10 = v9;
  if (v9)
  {
    ReflowLayoutManager.caretRect(for:)((uint64_t)v9);
    objc_msgSend(v3, sel_convertRect_toCoordinateSpace_, a1);
    CGRect v18 = CGRectInset(v17, 0.0, -2.0);
    double v11 = a3 + -2.0;
    __asm { FMOV            V2.2D, #4.0 }
    *(CGFloat *)&_Q2 = v18.origin.y;
  }
  else
  {
    _Q2 = 0uLL;
    double v11 = 0.0;
    v18.size.CGFloat height = 0.0;
  }
  *(void *)a2 = v10;
  *(double *)(a2 + 8) = v11;
  *(_OWORD *)(a2 + 16) = _Q2;
  *(CGFloat *)(a2 + 32) = v18.size.height;
}

void ReflowTextView.caretRect(for:lines:in:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  objc_msgSend(v3, sel_convertPoint_fromCoordinateSpace_);
  double v9 = v8;
  double v11 = v10;
  uint64_t v12 = *(void *)&v3[OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager];
  uint64_t v13 = v12 + 88;
  swift_beginAccess();
  uint64_t v14 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  a2 = *(void *)(v12 + 88);
  unint64_t v15 = *(void *)(a2 + 16);
  if (v15 < a1 || (uint64_t)v15 < v14) {
    goto LABEL_21;
  }
  if (v14 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v19 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a2 + 32, a1, (2 * v14) | 1);
    goto LABEL_13;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v17 = swift_dynamicCastClass();
  if (!v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
  uint64_t v18 = *(void *)(v17 + 16);
  swift_release();
  if (v18 != v14 - a1) {
    goto LABEL_23;
  }
  uint64_t v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v20 = specialized ReflowLayoutManager.closestLine(to:lines:)(v19, v9, v11);
  char v22 = v21;
  swift_release();
  if (v22) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v20;
  }
  if ((v23 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v23 < *(void *)(*(void *)v13 + 16))
  {
    __C::CGRect v24 = ReflowTextLine.caretRect(at:)((CGPoint)__PAIR128__(*(unint64_t *)&v11, *(unint64_t *)&v9));
    objc_msgSend(v4, sel_convertRect_toCoordinateSpace_, a3, v24.origin.x, v24.origin.y, v24.size.width, v24.size.height);
    CGRectInset(v25, 0.0, -2.0);
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall ReflowTextView.lineDebug()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_annotationLayer);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit14ReflowTextView_layoutManager);
    uint64_t v3 = *(void *)(v2 + 112);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    id v4 = v1;
    isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, sel_setSublayers_, isa);

    swift_beginAccess();
    uint64_t v6 = *(void *)(v2 + 96);
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      double v8 = (double)v3 / 100.0;
      double v9 = self;
      swift_bridgeObjectRetain();
      uint64_t v10 = 32;
      do
      {
        long long v11 = *(_OWORD *)(v6 + v10);
        long long v12 = *(_OWORD *)(v6 + v10 + 32);
        v29[1] = *(_OWORD *)(v6 + v10 + 16);
        long long v30 = v12;
        v29[0] = v11;
        long long v13 = *(_OWORD *)(v6 + v10 + 48);
        long long v14 = *(_OWORD *)(v6 + v10 + 64);
        long long v15 = *(_OWORD *)(v6 + v10 + 96);
        long long v33 = *(_OWORD *)(v6 + v10 + 80);
        long long v34 = v15;
        long long v31 = v13;
        long long v32 = v14;
        long long v16 = *(_OWORD *)(v6 + v10 + 112);
        long long v17 = *(_OWORD *)(v6 + v10 + 128);
        long long v18 = *(_OWORD *)(v6 + v10 + 144);
        uint64_t v38 = *(void *)(v6 + v10 + 160);
        long long v36 = v17;
        long long v37 = v18;
        long long v35 = v16;
        double v19 = *((double *)&v30 + 1);
        long long v21 = v31;
        double v20 = *(double *)&v32;
        id v22 = objc_allocWithZone(MEMORY[0x263F15880]);
        outlined retain of ReflowTextLine((uint64_t)v29);
        id v23 = objc_msgSend(v22, sel_init);
        objc_msgSend(v23, sel_setLineWidth_, 2.0);
        id v24 = objc_msgSend(v9, sel_systemMintColor);
        id v25 = objc_msgSend(v24, sel_colorWithAlphaComponent_, 0.2);

        id v26 = objc_msgSend(v25, sel_CGColor);
        objc_msgSend(v23, sel_setStrokeColor_, v26);

        objc_msgSend(v23, sel_setFillColor_, 0);
        CGMutablePathRef v27 = closure #1 in ReflowTextView.lineDebug()((uint64_t)v29, v8);
        objc_msgSend(v23, sel_setPath_, v27);

        objc_msgSend(v4, sel_addSublayer_, v23);
        id v28 = objc_msgSend(v9, sel_systemLightGrayColor);
        addLine #1 (_:color:) in ReflowTextView.lineDebug()(v28, v4, v19, *(double *)&v21, *((double *)&v21 + 1), v20, v8);

        outlined release of ReflowTextLine((uint64_t)v29);
        v10 += 168;
        --v7;
      }
      while (v7);

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
}

CGMutablePathRef closure #1 in ReflowTextView.lineDebug()(uint64_t a1, double a2)
{
  CGMutablePathRef Mutable = CGPathCreateMutable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  uint64_t v4 = swift_allocObject();
  float64x2_t v5 = *(float64x2_t *)(a1 + 56);
  *(_OWORD *)(v4 + 16) = xmmword_20C835740;
  *(float64x2_t *)(v4 + 32) = vaddq_f64(vmulq_n_f64(v5, a2), (float64x2_t)xmmword_20C847ED0);
  float64x2_t v6 = vsubq_f64(v5, *(float64x2_t *)(a1 + 40));
  *(float64x2_t *)(v4 + 48) = vaddq_f64(vmulq_n_f64(vsubq_f64(v5, vmulq_n_f64(vdivq_f64(v6, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(vaddvq_f64(vmulq_f64(v6, v6)))), 0)), *(double *)(a1 + 32))), a2), (float64x2_t)xmmword_20C847ED0);
  transform.CGFloat a = 1.0;
  transform.CGFloat b = 0.0;
  transform.CGFloat c = 0.0;
  transform.CGFloat d = 1.0;
  transform.CGFloat tx = 0.0;
  transform.double ty = 0.0;
  CGMutablePathRef.addLines(between:transform:)((Swift::OpaquePointer)v4, &transform);
  swift_bridgeObjectRelease();
  return Mutable;
}

void addLine #1 (_:color:) in ReflowTextView.lineDebug()(void *a1, void *a2, double a3, double a4, double a5, double a6, double a7)
{
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F15880]), sel_init);
  objc_msgSend(v17, sel_setLineWidth_, 1.0);
  id v14 = objc_msgSend(a1, sel_CGColor);
  objc_msgSend(v17, sel_setStrokeColor_, v14);

  objc_msgSend(v17, sel_setFillColor_, 0);
  CGMutablePathRef Mutable = CGPathCreateMutable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_20C835740;
  *(double *)(v16 + 32) = a3 * a7;
  *(double *)(v16 + 40) = a4 * a7;
  *(double *)(v16 + 48) = a5 * a7;
  *(double *)(v16 + 56) = a6 * a7;
  transform.CGFloat a = 1.0;
  transform.CGFloat b = 0.0;
  transform.CGFloat c = 0.0;
  transform.CGFloat d = 1.0;
  transform.CGFloat tx = 0.0;
  transform.double ty = 0.0;
  CGMutablePathRef.addLines(between:transform:)((Swift::OpaquePointer)v16, &transform);
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setPath_, Mutable);

  objc_msgSend(a2, sel_addSublayer_, v17);
}

id ReflowTextView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReflowTextView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ReflowTextView()
{
  return self;
}

uint64_t type metadata accessor for ReflowTextView.WeakBackpointer()
{
  return self;
}

void partial apply for closure #3 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(uint64_t a1)
{
  closure #3 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_20C72591C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);

  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  uint64_t v5 = v3 | 7;
  uint64_t v6 = (v3 + 48) & ~v3;
  uint64_t v7 = v6 + v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);
  return MEMORY[0x270FA0238](v0, v7, v5);
}

void partial apply for closure #1 in closure #3 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (void (*)(uint64_t))v0[4];
  uint64_t v4 = v0[5];
  closure #1 in closure #3 in ReflowTextView.addToCanvas(_:hasHiddenStrokes:)(v1, v2, v3, v4);
}

uint64_t block_copy_helper_61(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_61()
{
  return swift_release();
}

uint64_t specialized static ReflowTextView.reflowTextView(at:strokes:in:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(void *)(v4 + 200) = a1;
  *(void *)(v4 + 208) = a2;
  *(double *)(v4 + 184) = a3;
  *(double *)(v4 + 192) = a4;
  uint64_t v5 = type metadata accessor for PKDrawing();
  *(void *)(v4 + 216) = v5;
  *(void *)(v4 + 224) = *(void *)(v5 - 8);
  *(void *)(v4 + 232) = swift_task_alloc();
  *(void *)(v4 + 240) = swift_task_alloc();
  *(void *)(v4 + 248) = type metadata accessor for MainActor();
  *(void *)(v4 + 256) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v4 + 264) = v7;
  *(void *)(v4 + 272) = v6;
  return MEMORY[0x270FA2498](specialized static ReflowTextView.reflowTextView(at:strokes:in:), v7, v6);
}

uint64_t specialized static ReflowTextView.reflowTextView(at:strokes:in:)()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v4 = (void *)v0[26];
  uint64_t v5 = v0[27];
  id v6 = objc_msgSend(v4, sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v3, v5);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  uint64_t v7 = (void *)v0[20];
  objc_msgSend(v7, sel_copy);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  v0[35] = v0[21];
  v0[36] = objc_msgSend(v4, sel_traitCollection);
  uint64_t v8 = static MainActor.shared.getter();
  v0[37] = v8;
  if (v8)
  {
    swift_getObjectType();
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  return MEMORY[0x270FA2498](specialized static ReflowTextView.reflowTextView(at:strokes:in:), v9, v11);
}

{
  double *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  uint64_t v7;
  id v8;
  Class isa;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v16;

  uint64_t v1 = v0 + 2;
  uint64_t v2 = (void *)*((void *)v0 + 35);
  uint64_t v3 = (void *)*((void *)v0 + 36);
  uint64_t v4 = (void *)*((void *)v0 + 26);
  id v6 = v0[23];
  uint64_t v5 = v0[24];
  *((void *)v0 + 2) = v0;
  *((void *)v0 + 7) = v0 + 22;
  *((void *)v0 + 3) = specialized static ReflowTextView.reflowTextView(at:strokes:in:);
  uint64_t v7 = swift_continuation_init();
  uint64_t v8 = objc_msgSend(v4, sel_recognitionController);
  type metadata accessor for PKStroke();
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v3;
  v10[3] = v2;
  v10[4] = v7;
  *((void *)v0 + 14) = partial apply for closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:);
  *((void *)v0 + 15) = v10;
  *((void *)v0 + 10) = MEMORY[0x263EF8330];
  *((void *)v0 + 11) = 1107296256;
  *((void *)v0 + 12) = thunk for @escaping @callee_guaranteed (@guaranteed [CHReflowableTextLine]?) -> ();
  *((void *)v0 + 13) = &block_descriptor_61;
  uint64_t v11 = _Block_copy(v0 + 10);
  long long v12 = v3;
  uint64_t v13 = v2;
  swift_release();
  id v14 = objc_msgSend(v8, sel_reflowableLinesInitialStrokes_atLocation_completion_, isa, v11, v6, v5);
  _Block_release(v11);

  return MEMORY[0x270FA23F0](v1);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  *(void *)(*v0 + 304) = *(void *)(*v0 + 176);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 272);
  uint64_t v3 = *(void *)(v1 + 264);
  return MEMORY[0x270FA2498](specialized static ReflowTextView.reflowTextView(at:strokes:in:), v3, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void **)(v0 + 280);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 304);
  return v2(v3);
}

void specialized ReflowTextView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_annotationLayer] = 0;
  v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationEnabled] = 1;
  swift_unknownObjectWeakInit();
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_nonReflowableStrokesToRemove] = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___weakBackpointer] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_lastAnimationTime];
  *(void *)uint64_t v2 = 0;
  v2[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationTargetEndTime] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView____lazy_storage___displayLink] = 0;
  v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_isAnimating] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_endAnimationContinuations] = v1;
  v0[OBJC_IVAR____TtC8PaperKit14ReflowTextView_animationSmoothstep] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_20C7261D4()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(unint64_t a1)
{
  return closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_20C726220()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C726258()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)()
{
  return closure #1 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_20C7262A4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_20C7262B4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #2 in closure #1 in closure #1 in static ReflowTextView.reflowTextView(at:strokes:in:)(a1, v4, v5, v6, v7, v8);
}

void *specialized TiledPaperKitView.endPaperAttachment()()
{
  unint64_t v0 = TiledTextView.paperAttachments.getter();
  unint64_t v1 = v0;
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_7;
    }
  }
  unint64_t v3 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0) {
    uint64_t v4 = (void *)MEMORY[0x21054E050](0, v1);
  }
  else {
    uint64_t v4 = *(id *)(v1 + 32);
  }
  uint64_t v5 = v4;
  uint64_t v6 = (void *)MEMORY[0x263F8EED0];
  if ((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x588))()) {
    goto LABEL_8;
  }

  if (v2 == 1) {
    goto LABEL_7;
  }
  if (v3) {
    uint64_t v8 = (void *)MEMORY[0x21054E050](1, v1);
  }
  else {
    uint64_t v8 = *(id *)(v1 + 40);
  }
  uint64_t v5 = v8;
  if ((*(uint64_t (**)(void))((*v6 & *v8) + 0x588))()) {
    goto LABEL_8;
  }

  if (v2 == 2)
  {
LABEL_7:
    uint64_t v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease_n();
    return v5;
  }
  uint64_t v9 = 6;
  while (1)
  {
    uint64_t result = v3 ? (void *)MEMORY[0x21054E050](v9 - 4, v1) : *(id *)(v1 + 8 * v9);
    uint64_t v5 = result;
    uint64_t v10 = v9 - 3;
    if (__OFADD__(v9 - 4, 1)) {
      break;
    }
    if (((*(uint64_t (**)(void))((*v6 & *result) + 0x588))() & 1) == 0)
    {

      uint64_t v5 = 0;
      ++v9;
      if (v10 != v2) {
        continue;
      }
    }
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t TiledTextView.paperAttachments.getter()
{
  unint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_scrollView);
  if (v2)
  {
    unint64_t v3 = v2;
    self;
    uint64_t v4 = (void *)swift_dynamicCastObjCClass();
    if (v4)
    {
      uint64_t v5 = v4;
      id v6 = objc_msgSend(v4, sel_textContainer);
      id v7 = objc_msgSend(v6, sel_textLayoutManager);

      if (v7)
      {
        unint64_t v23 = MEMORY[0x263F8EE78];
        id v8 = objc_msgSend(v5, sel_textStorage);
        id v9 = objc_msgSend(v8, sel_length);

        MEMORY[0x270FA5388](v10);
        v22[2] = &v23;
        UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(0, (uint64_t)v9, 0, 0, (uint64_t)partial apply for closure #1 in TiledTextView.paperAttachments.getter, (uint64_t)v22);

        return v23;
      }
    }
  }
  id v12 = objc_msgSend(v1, sel_attachmentContainerView);
  unint64_t v11 = MEMORY[0x263F8EE78];
  if (!v12) {
    goto LABEL_24;
  }
  uint64_t v13 = v12;
  id v14 = objc_msgSend(v12, sel_subviews);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v23 = v11;
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v16 = result;
    if (result) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v16)
    {
LABEL_9:
      if (v16 < 1)
      {
        __break(1u);
        return result;
      }
      for (uint64_t i = 0; i != v16; ++i)
      {
        if ((v15 & 0xC000000000000001) != 0) {
          id v19 = (id)MEMORY[0x21054E050](i, v15);
        }
        else {
          id v19 = *(id *)(v15 + 8 * i + 32);
        }
        double v20 = v19;
        type metadata accessor for PaperTextAttachmentView();
        if (swift_dynamicCastClass())
        {
          MEMORY[0x21054D330]();
          if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v11 = v23;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v11 = MEMORY[0x263F8EE78];
LABEL_23:
  swift_bridgeObjectRelease();
LABEL_24:
  if (!(v11 >> 62))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for AnyCanvas();
    swift_bridgeObjectRelease();
    return v11;
  }
  type metadata accessor for AnyCanvas();
  swift_bridgeObjectRetain();
  uint64_t v21 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease_n();
  return v21;
}

uint64_t closure #1 in TiledTextView.paperAttachments.getter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a1;
  MEMORY[0x21054D330]();
  if (*(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

char *TiledTextView.paperAttachmentsIncludingSubAttachments.getter()
{
  uint64_t v31 = TiledTextView.paperAttachments.getter();
  id v1 = objc_msgSend(v0, sel_scrollView);
  unint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    unint64_t v3 = v1;
    self;
    uint64_t v4 = (void *)swift_dynamicCastObjCClass();
    if (v4
      && (uint64_t v5 = v4,
          id v6 = objc_msgSend(v4, sel_textContainer),
          id v7 = objc_msgSend(v6, sel_textLayoutManager),
          v7,
          v6,
          v7))
    {
      unint64_t v38 = v2;
      id v8 = objc_msgSend(v5, sel_textStorage);
      id v9 = objc_msgSend(v8, sel_length);

      MEMORY[0x270FA5388](v10);
      v30[2] = &v38;
      UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:)(0, (uint64_t)v9, 0, 0, (uint64_t)partial apply for closure #1 in TiledTextView.paperDocumentAttachments.getter, (uint64_t)v30);

      unint64_t v11 = v38;
    }
    else
    {

      unint64_t v11 = MEMORY[0x263F8EE78];
    }
  }
  else
  {
    unint64_t v11 = MEMORY[0x263F8EE78];
  }
  unint64_t v39 = v2;
  if (!(v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_9;
    }
LABEL_24:
    swift_bridgeObjectRelease_n();
    unint64_t v29 = MEMORY[0x263F8EE78];
LABEL_25:
    unint64_t v39 = v31;
    specialized Array.append<A>(contentsOf:)(v29);
    return (char *)v39;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  if (!v12) {
    goto LABEL_24;
  }
LABEL_9:
  uint64_t v13 = 0;
  unint64_t v34 = v11;
  unint64_t v35 = v11 & 0xC000000000000001;
  unint64_t v32 = v11 + 32;
  uint64_t v33 = v12;
  while (1)
  {
    if (v35) {
      uint64_t result = (char *)MEMORY[0x21054E050](v13, v11);
    }
    else {
      uint64_t result = (char *)*(id *)(v32 + 8 * v13);
    }
    uint64_t v16 = result;
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    long long v18 = *(char **)&result[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
    if (!v18) {
      break;
    }
    id v19 = &v18[OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments];
    swift_beginAccess();
    uint64_t v20 = *(void *)v19;
    unint64_t v37 = v2;
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      long long v36 = v18;
      swift_bridgeObjectRetain();
      id v22 = (uint64_t *)(v20 + 40);
      do
      {
        id v24 = (void *)*(v22 - 1);
        uint64_t v23 = *v22;
        uint64_t ObjectType = swift_getObjectType();
        id v26 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 104);
        id v27 = v24;
        unint64_t v28 = v26(ObjectType, v23);

        specialized Array.append<A>(contentsOf:)(v28);
        v22 += 2;
        --v21;
      }
      while (v21);

      swift_bridgeObjectRelease();
      unint64_t v14 = v37;
      unint64_t v2 = MEMORY[0x263F8EE78];
      uint64_t v12 = v33;
      unint64_t v11 = v34;
    }
    else
    {

      unint64_t v14 = v2;
    }
    specialized Array.append<A>(contentsOf:)(v14);
    if (v13 == v12)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v29 = v39;
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

void *TiledTextView.createCanvasGenerationToolController()()
{
  id v1 = v0;
  unint64_t v2 = v1;
  while (1)
  {
    id v3 = objc_msgSend(v2, sel_nextResponder);

    if (!v3) {
      return 0;
    }
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();
    if (v4) {
      break;
    }
    self;
    unint64_t v2 = (void *)swift_dynamicCastObjCClass();
    if (!v2)
    {

      return v2;
    }
  }
  uint64_t v5 = v4;
  id v6 = objc_msgSend(v1, sel_generationToolGestureRecognizer);
  id v7 = objc_allocWithZone((Class)type metadata accessor for CanvasGenerationTool());
  id v8 = CanvasGenerationTool.init(canvas:gesture:)(0, v6);
  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v8, sel_setHidden_, 1);
  id v9 = (objc_class *)type metadata accessor for CanvasGenerationToolController();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool] = v8;
  v13.receiver = v10;
  v13.super_class = v9;
  unint64_t v11 = v8;
  unint64_t v2 = objc_msgSendSuper2(&v13, sel_initWithNibName_bundle_, 0, 0);
  objc_msgSend(v2, sel_willMoveToParentViewController_, v5, v13.receiver, v13.super_class);
  objc_msgSend(v1, sel_addSubview_, v11);
  specialized static NSLayoutConstraint.constrain(_:to:)(v11, v1);
  objc_msgSend(v2, sel_didMoveToParentViewController_, v5);

  return v2;
}

id TiledTextView.imageWandTipController.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit13TiledTextView____lazy_storage___imageWandTipController;
  unint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit13TiledTextView____lazy_storage___imageWandTipController);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit13TiledTextView____lazy_storage___imageWandTipController);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ImageWandTipController()), sel_init);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    unint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id TiledTextView.canvasGenerationToolOverlayController.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit13TiledTextView____lazy_storage___canvasGenerationToolOverlayController;
  unint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit13TiledTextView____lazy_storage___canvasGenerationToolOverlayController];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit13TiledTextView____lazy_storage___canvasGenerationToolOverlayController];
  }
  else
  {
    id v4 = (objc_class *)type metadata accessor for CanvasGenerationToolOverlayController();
    uint64_t v5 = (char *)objc_allocWithZone(v4);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    *(void *)&v5[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController] = 0;
    *(void *)&v5[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController____lazy_storage___imageGenerationController] = 0;
    v11.receiver = v5;
    v11.super_class = v4;
    id v6 = v0;
    id v7 = objc_msgSendSuper2(&v11, sel_init);
    swift_unknownObjectWeakAssign();
    swift_unknownObjectWeakAssign();

    id v8 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v7;
    id v3 = v7;

    unint64_t v2 = 0;
  }
  id v9 = v2;
  return v3;
}

void TiledTextView.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  double v12 = MEMORY[0x270FA5388](v11 - 8);
  unint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = *(void **)a1;
  uint64_t v16 = *(void **)(a1 + 8);
  char v17 = *(unsigned char *)(a1 + 16);
  id v18 = objc_msgSend(v5, sel_window, v12);
  if (!v18
    || (id v19 = v18,
        id v20 = objc_msgSend(self, sel_sharedInstance),
        unsigned __int8 v21 = objc_msgSend(v20, sel_presentGreymatterAvailabilityAlertControllerInWindow_, v19),
        v20,
        v19,
        (v21 & 1) == 0))
  {
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v14, 1, 1, v22);
    type metadata accessor for MainActor();
    id v23 = v5;
    outlined copy of MagicGenerativePlaygroundContext(v15, v16, v17);
    uint64_t v24 = static MainActor.shared.getter();
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = MEMORY[0x263F8F500];
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = v26;
    *(void *)(v25 + 32) = v23;
    *(void *)(v25 + 40) = v15;
    *(void *)(v25 + 48) = v16;
    *(unsigned char *)(v25 + 56) = v17;
    *(double *)(v25 + 64) = a2;
    *(double *)(v25 + 72) = a3;
    *(double *)(v25 + 80) = a4;
    *(double *)(v25 + 88) = a5;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in TiledTextView.initiateMagicGenerativePlayground(context:in:), v25);
    swift_release();
  }
}

uint64_t closure #1 in TiledTextView.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  *(double *)(v11 + 88) = a4;
  *(double *)(v11 + 96) = a5;
  *(double *)(v11 + 72) = a2;
  *(double *)(v11 + 80) = a3;
  *(unsigned char *)(v11 + 33) = a11;
  *(void *)(v11 + 56) = a9;
  *(void *)(v11 + 64) = a10;
  *(void *)(v11 + 40) = a1;
  *(void *)(v11 + 48) = a8;
  type metadata accessor for MainActor();
  *(void *)(v11 + 104) = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v11 + 112) = v13;
  *(void *)(v11 + 120) = v12;
  return MEMORY[0x270FA2498](closure #1 in TiledTextView.initiateMagicGenerativePlayground(context:in:), v13, v12);
}

uint64_t closure #1 in TiledTextView.initiateMagicGenerativePlayground(context:in:)()
{
  uint64_t v1 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
  unint64_t v2 = v1;
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
  if (v3)
  {
    char v4 = *(unsigned char *)(v0 + 33);
    uint64_t v5 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool);
    *(void *)(v0 + 128) = v5;
    v5;
    long long v13 = *(_OWORD *)(v0 + 56);

    *(_OWORD *)(v0 + 16) = v13;
    *(unsigned char *)(v0 + 32) = v4;
    id v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v6;
    *id v6 = v0;
    v6[1] = closure #1 in TiledTextView.initiateMagicGenerativePlayground(context:in:);
    double v7 = *(double *)(v0 + 88);
    double v8 = *(double *)(v0 + 96);
    double v9 = *(double *)(v0 + 72);
    double v10 = *(double *)(v0 + 80);
    return CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:invocation:canvas:)(v0 + 16, 0, 0, v9, v10, v7, v8);
  }
  else
  {

    swift_release();
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  unint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void **)(v2 + 128);

    char v4 = *(void *)(v2 + 112);
    uint64_t v5 = *(void *)(v2 + 120);
    id v6 = closure #1 in TiledTextView.initiateMagicGenerativePlayground(context:in:);
  }
  else
  {

    char v4 = *(void *)(v2 + 112);
    uint64_t v5 = *(void *)(v2 + 120);
    id v6 = closure #1 in TiledTextView.initiateMagicGenerativePlayground(context:in:);
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  **(unsigned char **)(v0 + 40) = 0;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  **(unsigned char **)(v0 + 40) = 1;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void __swiftcall TiledTextView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  isCGFloat a = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  if (!with.value.super.isa || [(objc_class *)with.value.super.isa type] != (id)11)
  {
LABEL_7:
    uint64_t v12 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
    uint64_t v13 = *(void *)&v12[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
    if (v13)
    {
      uint64_t v14 = (char *)objc_retain(*(id *)(v13
                                      + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool));

      if ((objc_msgSend(v14, sel_isHidden) & 1) == 0)
      {
        objc_msgSend(v14, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
        objc_msgSend(v14, sel_hitTest_withEvent_, isa);

        return;
      }
      uint64_t v12 = v14;
    }

    v15.receiver = v3;
    v15.super_class = (Class)type metadata accessor for TiledTextView();
    -[UIView_optional hitTest:withEvent:](&v15, sel_hitTest_withEvent_, isa, x, y);
    return;
  }
  double v7 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
  double v8 = v7;
  uint64_t v9 = *(void *)&v7[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
  if (!v9)
  {

    goto LABEL_7;
  }
  id v10 = *(id *)(v9 + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool);

  unsigned __int8 v11 = objc_msgSend(v10, sel_isHidden);
  if (v11) {
    goto LABEL_7;
  }
}

id TiledTextView.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_currentPaperView + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit13TiledTextView_paperLinedPaper] = 0;
  uint64_t v3 = OBJC_IVAR____TtC8PaperKit13TiledTextView_canvasElementController;
  id v4 = objc_allocWithZone((Class)type metadata accessor for CanvasElementController());
  uint64_t v5 = v1;
  *(void *)&v1[v3] = objc_msgSend(v4, sel_init);
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit13TiledTextView_selectionInteractionDelegate] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit13TiledTextView____lazy_storage___imageWandTipController] = 0;
  *(void *)&v5[OBJC_IVAR____TtC8PaperKit13TiledTextView____lazy_storage___canvasGenerationToolOverlayController] = 0;
  id v6 = &v5[OBJC_IVAR____TtC8PaperKit13TiledTextView_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)id v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((void *)v6 + 4) = 0;
  double v7 = &v5[OBJC_IVAR____TtC8PaperKit13TiledTextView_magicGenerativePlaygroundContainerStateObserver];
  *(_OWORD *)double v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((void *)v7 + 4) = 0;

  v10.receiver = v5;
  v10.super_class = (Class)type metadata accessor for TiledTextView();
  id v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

id TiledTextView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TiledTextView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for TiledPaperKitView.currentPaperView.getter in conformance TiledTextView()
{
  return MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit13TiledTextView_currentPaperView);
}

void protocol witness for TiledPaperKitView.currentPaperView.setter in conformance TiledTextView(void *a1, uint64_t a2)
{
  *(void *)(v2 + OBJC_IVAR____TtC8PaperKit13TiledTextView_currentPaperView + 8) = a2;
  swift_unknownObjectWeakAssign();
}

id protocol witness for TiledPaperKitView.canvasElementController.getter in conformance TiledTextView()
{
  return *(id *)(v0 + OBJC_IVAR____TtC8PaperKit13TiledTextView_canvasElementController);
}

void *protocol witness for CanvasElementControllerDelegate.canvasElementControllerCanvasForInsertion.getter in conformance TiledTextView()
{
  uint64_t result = specialized TiledPaperKitView.mostVisibleAttachment()();
  if (!result)
  {
    uint64_t result = specialized TiledPaperKitView.endPaperAttachment()();
    if (!result)
    {
      return (void *)specialized TiledPaperKitView.visibleStandInPaperAttachmentView()();
    }
  }
  return result;
}

void TiledTextView.magicGenerativePlaygroundContainerState.getter(char *a1@<X8>)
{
  uint64_t v2 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
  uint64_t v3 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
  if (v3)
  {
    id v4 = (char *)*(id *)(v3 + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool);

    char v5 = v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState];
    uint64_t v2 = v4;
  }
  else
  {
    char v5 = 10;
  }

  *a1 = v5;
}

id TiledTextView.magicGenerativePlaygroundUndoManager.getter()
{
  uint64_t v0 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
  if (v1) {
    id v2 = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool);
  }
  else {
    id v2 = 0;
  }

  id v3 = objc_msgSend(v2, sel_undoManager);
  return v3;
}

void protocol witness for MagicGenerativePlaygroundContainer.initiateMagicGenerativePlayground(context:in:) in conformance TiledTextView(uint64_t a1, double a2, double a3, double a4, double a5)
{
}

uint64_t protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.getter in conformance TiledTextView@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.getter in conformance TiledTextView(&OBJC_IVAR____TtC8PaperKit13TiledTextView_magicGenerativePlaygroundTokenProvider, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?, a1);
}

uint64_t protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.setter in conformance TiledTextView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.setter in conformance TiledTextView(a1, a2, a3, &OBJC_IVAR____TtC8PaperKit13TiledTextView_magicGenerativePlaygroundTokenProvider, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
}

uint64_t (*protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.modify in conformance TiledTextView())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundContainerStateObserver.getter in conformance TiledTextView@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.getter in conformance TiledTextView(&OBJC_IVAR____TtC8PaperKit13TiledTextView_magicGenerativePlaygroundContainerStateObserver, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundContainerStateObserver?, a1);
}

uint64_t protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.getter in conformance TiledTextView@<X0>(void *a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v6, a3, a2);
}

uint64_t protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundContainerStateObserver.setter in conformance TiledTextView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.setter in conformance TiledTextView(a1, a2, a3, &OBJC_IVAR____TtC8PaperKit13TiledTextView_magicGenerativePlaygroundContainerStateObserver, (uint64_t *)&demangling cache variable for type metadata for MagicGenerativePlaygroundContainerStateObserver?);
}

uint64_t protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.setter in conformance TiledTextView(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v8 = *v5 + *a4;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v8, a5);
  return swift_endAccess();
}

uint64_t (*protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundContainerStateObserver.modify in conformance TiledTextView())()
{
  return CanvasElementRenderer.tintColor.modify;
}

void protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundContainerState.getter in conformance TiledTextView(char *a1@<X8>)
{
}

id protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundUndoManager.getter in conformance TiledTextView()
{
  return TiledTextView.magicGenerativePlaygroundUndoManager.getter();
}

uint64_t specialized AnalyticsEvent.caEventPayload.getter()
{
  uint64_t v0 = type metadata accessor for AnalyticsEventEncoder();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v1 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v2);
  *(unsigned char *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9A0]), sel_init);
  v7[3] = v0;
  v7[4] = lazy protocol witness table accessor for type AnalyticsEventEncoder and conformance AnalyticsEventEncoder();
  v7[0] = v1;
  swift_retain();
  MagicPaperUsageAutoRefineEvent.encode(to:)(v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  unint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = ~(v3 >> 1) & 0x4000000000000000 | v3;
  id v5 = (id)v3;
  swift_release();
  return v4;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void v7[5];

  uint64_t v0 = type metadata accessor for AnalyticsEventEncoder();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v1 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v2);
  *(unsigned char *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9A0]), sel_init);
  v7[3] = v0;
  v7[4] = lazy protocol witness table accessor for type AnalyticsEventEncoder and conformance AnalyticsEventEncoder();
  v7[0] = v1;
  swift_retain();
  MagicPaperUsageProofreadingEvent.encode(to:)(v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  unint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = ~(v3 >> 1) & 0x4000000000000000 | v3;
  id v5 = (id)v3;
  swift_release();
  return v4;
}

uint64_t sub_20C728438()
{
  swift_unknownObjectRelease();

  outlined consume of MagicGenerativePlaygroundContext(*(void **)(v0 + 40), *(id *)(v0 + 48), *(unsigned char *)(v0 + 56));
  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t partial apply for closure #1 in TiledTextView.initiateMagicGenerativePlayground(context:in:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  double v9 = *(double *)(v1 + 64);
  double v10 = *(double *)(v1 + 72);
  double v11 = *(double *)(v1 + 80);
  double v12 = *(double *)(v1 + 88);
  char v13 = *(unsigned char *)(v1 + 56);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in TiledTextView.initiateMagicGenerativePlayground(context:in:)(a1, v9, v10, v11, v12, v4, v5, v6, v7, v8, v13);
}

uint64_t partial apply for closure #1 in TiledTextView.paperAttachments.getter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in TiledTextView.paperAttachments.getter(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t specialized TiledTextView._canvasView(_:didCompleteRefinementEntry:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v40[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v8 = MEMORY[0x270FA5388](v7);
  double v10 = &v40[-v9];
  objc_msgSend(a1, sel_duration, v8);
  double v12 = v11;
  id v13 = objc_msgSend(a1, sel_refinedStrokes);
  type metadata accessor for PKStroke();
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = *(void *)(v14 + 16);
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(a1, sel_originalStrokes);
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease();
  id v19 = objc_msgSend(a1, sel_refinedWordCount);
  objc_msgSend(a1, sel_tokenDeviation);
  double v21 = v20;
  objc_msgSend(a1, sel_tokenTranslation);
  double v23 = v22;
  id v24 = objc_msgSend(a1, sel_locale);
  if (v24)
  {
    uint64_t v25 = v24;
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v26 = type metadata accessor for Locale();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v6, 0, 1, v26);
  }
  else
  {
    uint64_t v26 = type metadata accessor for Locale();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v6, 1, 1, v26);
  }
  uint64_t v27 = v15 - v18;
  outlined init with take of Locale?((uint64_t)v6, (uint64_t)v10);
  type metadata accessor for Locale();
  uint64_t v28 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v10, 1, v26) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v29 = Locale.identifier.getter();
    uint64_t v30 = v31;
    (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v10, v26);
  }
  char v34 = objc_msgSend(a1, sel_isAutoRefined) ^ 1;
  v40[0] = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  char v52 = 0;
  swift_unknownObjectWeakInit();
  float v35 = v12 * 1000.0;
  float v43 = v35;
  char v46 = v34;
  uint64_t v44 = v27;
  id v45 = v19;
  float v32 = v21;
  float v48 = v32;
  float v33 = v23;
  float v49 = v33;
  id v36 = v2;
  unsigned __int8 v47 = objc_msgSend(v36, sel_isAutoRefineEnabled);
  swift_unknownObjectWeakAssign();

  swift_bridgeObjectRelease();
  *(void *)&long long v42 = v29;
  *((void *)&v42 + 1) = v30;
  if ((v52 & 1) == 0) {
    MagicPaperUsageAutoRefineEvent.finalize()();
  }
  unint64_t v37 = (void *)MEMORY[0x21054D080](0xD000000000000024, 0x800000020C84F860);
  if (specialized AnalyticsEvent.caEventPayload.getter())
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v38.super.isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v38.super.isCGFloat a = 0;
  }
  AnalyticsSendEvent();

  return outlined destroy of MagicPaperUsageAutoRefineEvent((uint64_t)v40);
}

uint64_t type metadata completion function for SecureHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t SecureHostingController.__allocating_init(rootView:)(uint64_t a1)
{
  uint64_t v3 = specialized SecureHostingController.__allocating_init(rootView:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + class metadata base offset for SecureHostingController)
                                              - 8)
                                  + 8))(a1);
  return v3;
}

uint64_t @objc SecureHostingController._canShowWhileLocked()()
{
  return 1;
}

void *SecureHostingController.__allocating_init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return SecureHostingController.init(coder:rootView:)(a1, a2);
}

void *SecureHostingController.init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((*MEMORY[0x263F8EED0] & *v2) + class metadata base offset for SecureHostingController);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v12 - v7, v6);
  double v8 = (void *)UIHostingController.init(coder:rootView:)();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  id v10 = v8;
  v9(a2, v4);
  if (v8) {

  }
  return v8;
}

id SecureHostingController.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id @objc SecureHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return SecureHostingController.init(coder:)(a3);
}

uint64_t type metadata accessor for SecureHostingController()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized SecureHostingController.init(rootView:)(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - v2, v1);
  return UIHostingController.init(rootView:)();
}

uint64_t specialized SecureHostingController.__allocating_init(rootView:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return specialized SecureHostingController.init(rootView:)(a1);
}

uint64_t ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 728) = v7;
  *(void *)(v8 + 720) = a7;
  *(void *)(v8 + 712) = a6;
  *(void *)(v8 + 704) = a5;
  *(void *)(v8 + 696) = a4;
  *(void *)(v8 + 688) = a2;
  *(void *)(v8 + 680) = a1;
  uint64_t v10 = type metadata accessor for PKDrawing();
  *(void *)(v8 + 736) = v10;
  *(void *)(v8 + 744) = *(void *)(v10 - 8);
  *(void *)(v8 + 752) = swift_task_alloc();
  *(void *)(v8 + 760) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  *(void *)(v8 + 768) = swift_task_alloc();
  *(void *)(v8 + 776) = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  *(void *)(v8 + 784) = v11;
  *(void *)(v8 + 792) = *(void *)(v11 - 8);
  *(void *)(v8 + 800) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)(v8 + 808) = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  *(void *)(v8 + 816) = v12;
  *(void *)(v8 + 824) = *(void *)(v12 - 8);
  *(void *)(v8 + 832) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for CRKeyPath();
  *(void *)(v8 + 840) = v13;
  *(void *)(v8 + 848) = *(void *)(v13 - 8);
  *(void *)(v8 + 856) = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  *(void *)(v8 + 864) = v14;
  *(void *)(v8 + 872) = *(void *)(v14 - 8);
  *(void *)(v8 + 880) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  *(void *)(v8 + 888) = swift_task_alloc();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  *(void *)(v8 + 896) = v15;
  *(void *)(v8 + 904) = *(void *)(v15 - 8);
  *(void *)(v8 + 912) = swift_task_alloc();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  *(void *)(v8 + 920) = v16;
  *(void *)(v8 + 928) = *(void *)(v16 - 8);
  *(void *)(v8 + 936) = swift_task_alloc();
  long long v17 = a3[3];
  *(_OWORD *)(v8 + 48) = a3[2];
  *(_OWORD *)(v8 + 64) = v17;
  *(_OWORD *)(v8 + 75) = *(_OWORD *)((char *)a3 + 59);
  long long v18 = a3[1];
  *(_OWORD *)(v8 + 16) = *a3;
  *(_OWORD *)(v8 + 32) = v18;
  return MEMORY[0x270FA2498](ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

uint64_t ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)()
{
  uint64_t v135 = v0;
  uint64_t v117 = v0 + 16;
  uint64_t v1 = *(void *)(v0 + 712);
  CGContextSaveGState(*(CGContextRef *)(v0 + 680));
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(unsigned char *)(v0 + 32))
  {
    uint64_t v21 = *(void *)(v0 + 712);
    uint64_t v22 = *(void *)(v0 + 696);
    double v23 = *(CGContext **)(v0 + 680);
    CGFloat v24 = (*(double (**)(uint64_t))(v2 + 32))(v22);
    double v25 = (*(double (**)(uint64_t, uint64_t))(v21 + 40))(v22, v21);
    double v27 = v26;
    CGFloat v131 = v28;
    rectCGFloat a = v29;
    CGAffineTransformMakeRotation(&v134, v24);
    CGFloat a = v134.a;
    CGFloat b = v134.b;
    CGFloat c = v134.c;
    CGFloat d = v134.d;
    CGFloat tx = v134.tx;
    CGFloat ty = v134.ty;
    *(CGFloat *)(v0 + 464) = v134.a;
    *(CGFloat *)(v0 + 472) = b;
    *(CGFloat *)(v0 + 480) = c;
    *(CGFloat *)(v0 + 488) = d;
    *(CGFloat *)(v0 + 496) = tx;
    *(CGFloat *)(v0 + 504) = ty;
    v141.origin.CGFloat x = v25;
    v141.origin.CGFloat y = v27;
    v141.size.CGFloat width = v131;
    v141.size.CGFloat height = recta;
    CGRect v142 = CGRectApplyAffineTransform(v141, (CGAffineTransform *)(v0 + 464));
    CGAffineTransformMakeTranslation(&v134, v25 - v142.origin.x, v27 - v142.origin.y);
    long long v36 = *(_OWORD *)&v134.a;
    long long v37 = *(_OWORD *)&v134.c;
    long long v38 = *(_OWORD *)&v134.tx;
    *(CGFloat *)(v0 + 416) = a;
    *(CGFloat *)(v0 + 424) = b;
    *(CGFloat *)(v0 + 432) = c;
    *(CGFloat *)(v0 + 440) = d;
    *(CGFloat *)(v0 + 448) = tx;
    *(CGFloat *)(v0 + 456) = ty;
    *(_OWORD *)(v0 + 320) = v36;
    *(_OWORD *)(v0 + 336) = v37;
    *(_OWORD *)(v0 + 352) = v38;
    CGAffineTransformConcat(&v134, (CGAffineTransform *)(v0 + 416), (CGAffineTransform *)(v0 + 320));
    long long v39 = *(_OWORD *)&v134.c;
    long long v40 = *(_OWORD *)&v134.tx;
    *(_OWORD *)(v0 + 368) = *(_OWORD *)&v134.a;
    *(_OWORD *)(v0 + 384) = v39;
    *(_OWORD *)(v0 + 400) = v40;
    id v19 = v23;
    uint64_t v20 = (CGAffineTransform *)(v0 + 368);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 712);
    uint64_t v4 = *(void *)(v0 + 696);
    uint64_t v5 = *(CGContext **)(v0 + 680);
    uint64_t v6 = *(void *)(v2 + 8);
    uint64_t v7 = *(double (**)(uint64_t, uint64_t))(v6 + 8);
    v137.origin.CGFloat x = v7(v4, v6);
    double Width = CGRectGetWidth(v137);
    v138.origin.CGFloat x = (*(double (**)(uint64_t, uint64_t))(v3 + 16))(v4, v3);
    CGFloat v9 = CGRectGetWidth(v138);
    CGAffineTransformMakeScale(&v134, Width / v9, Width / v9);
    long long rect = *(_OWORD *)&v134.c;
    long long v130 = *(_OWORD *)&v134.a;
    CGFloat v10 = v134.tx;
    CGFloat v11 = v134.ty;
    v139.origin.CGFloat x = v7(v4, v6);
    CGFloat MinX = CGRectGetMinX(v139);
    v140.origin.CGFloat x = v7(v4, v6);
    CGFloat MinY = CGRectGetMinY(v140);
    CGAffineTransformMakeTranslation(&v134, MinX, MinY);
    long long v14 = *(_OWORD *)&v134.a;
    long long v15 = *(_OWORD *)&v134.c;
    long long v16 = *(_OWORD *)&v134.tx;
    *(_OWORD *)(v0 + 176) = v130;
    *(_OWORD *)(v0 + 192) = rect;
    *(CGFloat *)(v0 + 208) = v10;
    *(CGFloat *)(v0 + 216) = v11;
    *(_OWORD *)(v0 + 224) = v14;
    *(_OWORD *)(v0 + 240) = v15;
    *(_OWORD *)(v0 + 256) = v16;
    CGAffineTransformConcat(&v134, (CGAffineTransform *)(v0 + 176), (CGAffineTransform *)(v0 + 224));
    long long v17 = *(_OWORD *)&v134.c;
    long long v18 = *(_OWORD *)&v134.tx;
    *(_OWORD *)(v0 + 272) = *(_OWORD *)&v134.a;
    *(_OWORD *)(v0 + 288) = v17;
    *(_OWORD *)(v0 + 304) = v18;
    id v19 = v5;
    uint64_t v20 = (CGAffineTransform *)(v0 + 272);
  }
  CGContextConcatCTM(v19, v20);
  uint64_t v41 = *(void *)(v0 + 912);
  uint64_t v42 = *(void *)(v0 + 904);
  uint64_t v119 = *(void *)(v0 + 896);
  uint64_t v122 = *(void *)(v0 + 888);
  uint64_t v43 = *(void *)(v0 + 872);
  uint64_t v132 = *(void *)(v0 + 864);
  uint64_t v44 = *(void *)(v0 + 712);
  uint64_t v116 = *(void *)(v0 + 696);
  ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox((CGContextRef)*(void *)(v0 + 680));
  CGFloat x = ClipBoundingBox.origin.x;
  CGFloat y = ClipBoundingBox.origin.y;
  CGFloat v47 = ClipBoundingBox.size.width;
  CGFloat height = ClipBoundingBox.size.height;
  *(CGRect *)(v0 + 944) = ClipBoundingBox;
  *(unsigned char *)(v0 + 91) = *(unsigned char *)(v0 + 16);
  *(unsigned char *)(v0 + 92) = *(unsigned char *)(v0 + 17);
  *(unsigned char *)(v0 + 93) = *(unsigned char *)(v0 + 18);
  float v49 = *(void **)(v0 + 24);
  *(void *)(v0 + 976) = v49;
  long long v50 = *(void **)(v0 + 80);
  *(void *)(v0 + 984) = v50;
  *(unsigned char *)(v0 + 94) = *(unsigned char *)(v0 + 88);
  *(unsigned char *)(v0 + 95) = *(unsigned char *)(v0 + 89);
  *(unsigned char *)(v0 + 171) = *(unsigned char *)(v0 + 90);
  long long v51 = *(double (**)(uint64_t, uint64_t))(v44 + 16);
  *(void *)(v0 + 992) = v51;
  *(void *)(v0 + 1000) = (v44 + 16) & 0xFFFFFFFFFFFFLL | 0x3EB1000000000000;
  outlined retain of PaperRenderableOptions(v117);
  id v52 = v50;
  id v53 = v49;
  *(double *)(v0 + 1008) = v51(v116, v44);
  *(void *)(v0 + 1016) = v54;
  *(void *)(v0 + 1024) = v55;
  *(void *)(v0 + 1032) = v56;
  (*(void (**)(uint64_t, uint64_t))(v44 + 72))(v116, v44);
  CROrderedSet.makeIterator()();
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v119);
  CROrderedSet.Iterator.next()();
  objc_super v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  *(void *)(v0 + 1040) = v57;
  *(void *)(v0 + 1048) = (v43 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v57(v122, 1, v132) == 1)
  {
LABEL_8:
    unint64_t v79 = *(void **)(v0 + 984);
    uint64_t v80 = *(void **)(v0 + 976);
    uint64_t v81 = *(void *)(v0 + 824);
    uint64_t v82 = *(void *)(v0 + 816);
    uint64_t v83 = *(void *)(v0 + 808);
    uint64_t v84 = *(void *)(v0 + 712);
    uint64_t v85 = *(void *)(v0 + 696);
    (*(void (**)(void, void))(*(void *)(v0 + 928) + 8))(*(void *)(v0 + 936), *(void *)(v0 + 920));

    (*(void (**)(uint64_t, uint64_t))(v84 + 48))(v85, v84);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v83, 1, v82) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 808), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      uint64_t v86 = *(void **)(v0 + 984);
      uint64_t v87 = *(void **)(v0 + 976);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 680));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v88 = *(uint64_t (**)(void))(v0 + 8);
      return v88();
    }
    else
    {
      uint64_t v90 = *(void *)(v0 + 800);
      uint64_t v91 = *(void *)(v0 + 792);
      uint64_t v92 = *(void *)(v0 + 784);
      (*(void (**)(void, void, void))(*(void *)(v0 + 824) + 32))(*(void *)(v0 + 832), *(void *)(v0 + 808), *(void *)(v0 + 816));
      type metadata accessor for Capsule();
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      Capsule.encapsulateTransient<A>(_:)();
      char v93 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      id v94 = objc_allocWithZone(v93);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))((uint64_t)v94 + OBJC_IVAR___PKDrawingCoherence_model, v90, v92);
      *(void *)(v0 + 664) = v94;
      *(void *)(v0 + 672) = v93;
      id v95 = objc_msgSendSuper2((objc_super *)(v0 + 664), sel_init);
      *(void *)(v0 + 1072) = v95;
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
      uint64_t v96 = swift_task_alloc();
      *(void *)(v0 + 1080) = v96;
      *(void *)uint64_t v96 = v0;
      *(void *)(v96 + 8) = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      long long v97 = *(_OWORD *)(v0 + 944);
      long long v98 = *(_OWORD *)(v0 + 960);
      *(void *)(v96 + 96) = *(void *)(v0 + 680);
      *(void *)(v96 + 104) = v117;
      *(_OWORD *)(v96 + 64) = v97;
      *(_OWORD *)(v96 + 80) = v98;
      *(void *)(v96 + 56) = v95;
      return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
    }
  }
  else
  {
    double v123 = (void *)(v0 + 512);
    *(void *)(v0 + 1056) = *(void *)(*(void *)(v0 + 872) + 32);
    *(CGFloat *)(v0 + 632) = x;
    *(CGFloat *)(v0 + 640) = y;
    *(CGFloat *)(v0 + 648) = v47;
    *(CGFloat *)(v0 + 656) = height;
    while (1)
    {
      CGFloat v58 = *(double *)(v0 + 632);
      CGFloat v59 = *(double *)(v0 + 640);
      CGFloat v60 = *(double *)(v0 + 648);
      CGFloat v61 = *(double *)(v0 + 656);
      rectCGFloat b = *(double (**)(uint64_t, uint64_t))(v0 + 992);
      uint64_t v62 = *(void *)(v0 + 712);
      uint64_t v63 = *(void *)(v0 + 696);
      (*(void (**)(void, void, void))(v0 + 1056))(*(void *)(v0 + 880), *(void *)(v0 + 888), *(void *)(v0 + 864));
      SharedTagged_9.subscript.getter();
      uint64_t v64 = *(void *)(v0 + 536);
      uint64_t v65 = *(void *)(v0 + 544);
      __swift_project_boxed_opaque_existential_1(v123, v64);
      *(double *)(v0 + 592) = rectb(v63, v62);
      *(void *)(v0 + 600) = v66;
      *(void *)(v0 + 608) = v67;
      *(void *)(v0 + 616) = v68;
      *(unsigned char *)(v0 + 624) = 0;
      CGFloat v69 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v65 + 112))(v0 + 592, v64, v65);
      CGFloat v71 = v70;
      CGFloat v73 = v72;
      CGFloat v75 = v74;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
      v144.origin.CGFloat x = v69;
      v144.origin.CGFloat y = v71;
      v144.size.CGFloat width = v73;
      v144.size.CGFloat height = v75;
      v145.origin.CGFloat x = v58;
      v145.origin.CGFloat y = v59;
      v145.size.CGFloat width = v60;
      v145.size.CGFloat height = v61;
      if (CGRectIntersectsRect(v144, v145)) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 872) + 8))(*(void *)(v0 + 880), *(void *)(v0 + 864));
      uint64_t v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1040);
      uint64_t v77 = *(void *)(v0 + 888);
      uint64_t v78 = *(void *)(v0 + 864);
      CROrderedSet.Iterator.next()();
      if (v76(v77, 1, v78) == 1) {
        goto LABEL_8;
      }
    }
    uint64_t v99 = *(void *)(v0 + 1032);
    uint64_t v100 = *(void *)(v0 + 1024);
    long long v120 = *(_OWORD *)(v0 + 1008);
    rectCGFloat c = *(unsigned char *)(v0 + 171);
    char v124 = *(unsigned char *)(v0 + 95);
    char v121 = *(unsigned char *)(v0 + 94);
    uint64_t v118 = *(void **)(v0 + 984);
    uint64_t v101 = *(void **)(v0 + 976);
    char v102 = *(unsigned char *)(v0 + 93);
    char v103 = *(unsigned char *)(v0 + 92);
    char v104 = *(unsigned char *)(v0 + 91);
    uint64_t v105 = *(void *)(v0 + 864);
    SharedTagged_9.subscript.getter();
    uint64_t v133 = *(void *)(v0 + 576);
    uint64_t v106 = *(void *)(v0 + 584);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 552), v133);
    MEMORY[0x21054BDF0](v105);
    *(unsigned char *)(v0 + 96) = v104;
    *(unsigned char *)(v0 + 97) = v103;
    *(unsigned char *)(v0 + 98) = v102;
    *(void *)(v0 + 104) = v101;
    *(unsigned char *)(v0 + 112) = 0;
    *(_OWORD *)(v0 + 120) = v120;
    *(void *)(v0 + 136) = v100;
    *(void *)(v0 + 144) = v99;
    *(unsigned char *)(v0 + 152) = 0;
    *(void *)(v0 + 160) = v118;
    *(unsigned char *)(v0 + 168) = v121;
    *(unsigned char *)(v0 + 169) = v124;
    *(unsigned char *)(v0 + 170) = rectc;
    uint64_t v107 = *(void *)(v106 + 8);
    double v125 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v107 + 16) + **(int **)(v107 + 16));
    id v108 = v101;
    id v109 = v118;
    uint64_t v110 = (void *)swift_task_alloc();
    *(void *)(v0 + 1064) = v110;
    void *v110 = v0;
    v110[1] = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    uint64_t v111 = *(void *)(v0 + 856);
    uint64_t v112 = *(void *)(v0 + 720);
    uint64_t v113 = *(void *)(v0 + 704);
    uint64_t v114 = *(void *)(v0 + 688);
    uint64_t v115 = *(void *)(v0 + 680);
    return v125(v115, v111, v114, v0 + 96, v113, v112, v133, v107);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void **)(*(void *)v0 + 984);
  uint64_t v2 = *(void **)(*(void *)v0 + 976);
  uint64_t v3 = *(void *)(*(void *)v0 + 856);
  uint64_t v4 = *(void *)(*(void *)v0 + 848);
  uint64_t v5 = *(void *)(*(void *)v0 + 840);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return MEMORY[0x270FA2498](ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t (*v34)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_class *v39;
  id v40;
  id v41;
  uint64_t v42;
  long long v43;
  long long v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  long long v64;
  char v65;
  void *v66;
  char v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  double (*v69)(uint64_t, uint64_t);
  char v70;
  uint64_t v71;
  CGRect v72;
  CGRect v73;

  (*(void (**)(void, void))(*(void *)(v0 + 872) + 8))(*(void *)(v0 + 880), *(void *)(v0 + 864));
  __swift_destroy_boxed_opaque_existential_1(v0 + 552);
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1040);
  uint64_t v2 = *(void *)(v0 + 888);
  uint64_t v3 = *(void *)(v0 + 864);
  CROrderedSet.Iterator.next()();
  if (v1(v2, 1, v3) == 1)
  {
LABEL_5:
    double v25 = *(void **)(v0 + 984);
    double v26 = *(void **)(v0 + 976);
    double v27 = *(void *)(v0 + 824);
    double v28 = *(void *)(v0 + 816);
    double v29 = *(void *)(v0 + 808);
    uint64_t v30 = *(void *)(v0 + 712);
    uint64_t v31 = *(void *)(v0 + 696);
    (*(void (**)(void, void))(*(void *)(v0 + 928) + 8))(*(void *)(v0 + 936), *(void *)(v0 + 920));

    (*(void (**)(uint64_t, uint64_t))(v30 + 48))(v31, v30);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v29, 1, v28) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 808), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      float v32 = *(void **)(v0 + 984);
      float v33 = *(void **)(v0 + 976);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 680));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v34 = *(uint64_t (**)(void))(v0 + 8);
      return v34();
    }
    else
    {
      long long v36 = *(void *)(v0 + 800);
      long long v37 = *(void *)(v0 + 792);
      long long v38 = *(void *)(v0 + 784);
      (*(void (**)(void, void, void))(*(void *)(v0 + 824) + 32))(*(void *)(v0 + 832), *(void *)(v0 + 808), *(void *)(v0 + 816));
      type metadata accessor for Capsule();
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      Capsule.encapsulateTransient<A>(_:)();
      long long v39 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      long long v40 = objc_allocWithZone(v39);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))((uint64_t)v40 + OBJC_IVAR___PKDrawingCoherence_model, v36, v38);
      *(void *)(v0 + 664) = v40;
      *(void *)(v0 + 672) = v39;
      uint64_t v41 = objc_msgSendSuper2((objc_super *)(v0 + 664), sel_init);
      *(void *)(v0 + 1072) = v41;
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
      uint64_t v42 = swift_task_alloc();
      *(void *)(v0 + 1080) = v42;
      *(void *)uint64_t v42 = v0;
      *(void *)(v42 + 8) = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      uint64_t v43 = *(_OWORD *)(v0 + 944);
      uint64_t v44 = *(_OWORD *)(v0 + 960);
      *(void *)(v42 + 96) = *(void *)(v0 + 680);
      *(void *)(v42 + 104) = v0 + 16;
      *(_OWORD *)(v42 + 64) = v43;
      *(_OWORD *)(v42 + 80) = v44;
      *(void *)(v42 + 56) = v41;
      return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
    }
  }
  else
  {
    uint64_t v66 = (void *)(v0 + 512);
    while (1)
    {
      uint64_t v4 = *(double *)(v0 + 632);
      uint64_t v5 = *(double *)(v0 + 640);
      uint64_t v6 = *(double *)(v0 + 648);
      uint64_t v7 = *(double *)(v0 + 656);
      CGFloat v69 = *(double (**)(uint64_t, uint64_t))(v0 + 992);
      uint64_t v8 = *(void *)(v0 + 712);
      CGFloat v9 = *(void *)(v0 + 696);
      (*(void (**)(void, void, void))(v0 + 1056))(*(void *)(v0 + 880), *(void *)(v0 + 888), *(void *)(v0 + 864));
      SharedTagged_9.subscript.getter();
      CGFloat v10 = *(void *)(v0 + 536);
      CGFloat v11 = *(void *)(v0 + 544);
      __swift_project_boxed_opaque_existential_1(v66, v10);
      *(double *)(v0 + 592) = v69(v9, v8);
      *(void *)(v0 + 600) = v12;
      *(void *)(v0 + 608) = v13;
      *(void *)(v0 + 616) = v14;
      *(unsigned char *)(v0 + 624) = 0;
      long long v15 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v11 + 112))(v0 + 592, v10, v11);
      long long v17 = v16;
      id v19 = v18;
      uint64_t v21 = v20;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
      v72.origin.CGFloat x = v15;
      v72.origin.CGFloat y = v17;
      v72.size.CGFloat width = v19;
      v72.size.CGFloat height = v21;
      v73.origin.CGFloat x = v4;
      v73.origin.CGFloat y = v5;
      v73.size.CGFloat width = v6;
      v73.size.CGFloat height = v7;
      if (CGRectIntersectsRect(v72, v73)) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 872) + 8))(*(void *)(v0 + 880), *(void *)(v0 + 864));
      uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1040);
      double v23 = *(void *)(v0 + 888);
      CGFloat v24 = *(void *)(v0 + 864);
      CROrderedSet.Iterator.next()();
      if (v22(v23, 1, v24) == 1) {
        goto LABEL_5;
      }
    }
    id v45 = *(void *)(v0 + 1032);
    char v46 = *(void *)(v0 + 1024);
    uint64_t v64 = *(_OWORD *)(v0 + 1008);
    double v70 = *(unsigned char *)(v0 + 171);
    uint64_t v67 = *(unsigned char *)(v0 + 95);
    uint64_t v65 = *(unsigned char *)(v0 + 94);
    uint64_t v63 = *(void **)(v0 + 984);
    CGFloat v47 = *(void **)(v0 + 976);
    float v48 = *(unsigned char *)(v0 + 93);
    float v49 = *(unsigned char *)(v0 + 92);
    long long v50 = *(unsigned char *)(v0 + 91);
    long long v51 = *(void *)(v0 + 864);
    SharedTagged_9.subscript.getter();
    id v52 = *(void *)(v0 + 584);
    id v53 = *(void *)(v0 + 576);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 552), v53);
    MEMORY[0x21054BDF0](v51);
    *(unsigned char *)(v0 + 96) = v50;
    *(unsigned char *)(v0 + 97) = v49;
    *(unsigned char *)(v0 + 98) = v48;
    *(void *)(v0 + 104) = v47;
    *(unsigned char *)(v0 + 112) = 0;
    *(_OWORD *)(v0 + 120) = v64;
    *(void *)(v0 + 136) = v46;
    *(void *)(v0 + 144) = v45;
    *(unsigned char *)(v0 + 152) = 0;
    *(void *)(v0 + 160) = v63;
    *(unsigned char *)(v0 + 168) = v65;
    *(unsigned char *)(v0 + 169) = v67;
    *(unsigned char *)(v0 + 170) = v70;
    uint64_t v54 = *(void *)(v52 + 8);
    uint64_t v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 + 16) + **(int **)(v54 + 16));
    uint64_t v55 = v47;
    uint64_t v56 = v63;
    objc_super v57 = (void *)swift_task_alloc();
    *(void *)(v0 + 1064) = v57;
    *objc_super v57 = v0;
    v57[1] = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    CGFloat v58 = *(void *)(v0 + 856);
    CGFloat v59 = *(void *)(v0 + 720);
    CGFloat v60 = *(void *)(v0 + 704);
    CGFloat v61 = *(void *)(v0 + 688);
    uint64_t v62 = *(void *)(v0 + 680);
    return v68(v62, v58, v61, v0 + 96, v60, v59, v53, v54);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[134];
  uint64_t v2 = objc_msgSend(self, sel_sharedCache);
  v0[136] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[137] = v3;
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0 + 2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[138] = v4;
  *uint64_t v4 = v0;
  v4[1] = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  uint64_t v5 = v0[97];
  uint64_t v6 = v0[95];
  return MEMORY[0x270FA2318](v5, 0, 0, 0xD000000000000026, 0x800000020C85CE50, partial apply for closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), v3, v6);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void);
  PKDrawing *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  uint64_t v20;

  uint64_t v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 744);
  uint64_t v3 = *(void *)(v0 + 736);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 776), v1, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = *(void **)(v0 + 1072);
    uint64_t v5 = *(void *)(v0 + 832);
    uint64_t v6 = *(void *)(v0 + 824);
    uint64_t v7 = *(void *)(v0 + 816);
    uint64_t v8 = *(void *)(v0 + 776);
    CGFloat v9 = *(void *)(v0 + 768);

    outlined destroy of StocksKitCurrencyCache.Provider?(v8, &demangling cache variable for type metadata for PKDrawing?);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for PKDrawing?);
    CGFloat v10 = *(void **)(v0 + 984);
    CGFloat v11 = *(void **)(v0 + 976);
    CGContextRestoreGState(*(CGContextRef *)(v0 + 680));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 744) + 32))(*(void *)(v0 + 752), *(void *)(v0 + 768), *(void *)(v0 + 736));
    PKDrawing._bridgeToObjectiveC()(v14);
    long long v16 = v15;
    *(void *)(v0 + 1112) = v15;
    long long v17 = swift_task_alloc();
    *(void *)(v0 + 1120) = v17;
    *(void *)long long v17 = v0;
    *(void *)(v17 + 8) = ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    long long v18 = *(_OWORD *)(v0 + 944);
    id v19 = *(_OWORD *)(v0 + 960);
    *(void *)(v17 + 96) = *(void *)(v0 + 680);
    *(void *)(v17 + 104) = v0 + 16;
    *(_OWORD *)(v17 + 64) = v18;
    *(_OWORD *)(v17 + 80) = v19;
    *(void *)(v17 + 56) = v16;
    return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(*(void *)v0 + 1112);
  swift_task_dealloc();

  return MEMORY[0x270FA2498](ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 1072);
  uint64_t v2 = *(void *)(v0 + 832);
  uint64_t v3 = *(void *)(v0 + 824);
  uint64_t v4 = *(void *)(v0 + 816);
  uint64_t v5 = *(void *)(v0 + 776);
  uint64_t v6 = *(void *)(v0 + 752);
  uint64_t v7 = *(void *)(v0 + 744);
  uint64_t v8 = *(void *)(v0 + 736);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  CGFloat v9 = *(void **)(v0 + 984);
  CGFloat v10 = *(void **)(v0 + 976);
  CGContextRestoreGState(*(CGContextRef *)(v0 + 680));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  CGFloat v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PKDrawing?, Never>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  id v11 = objc_msgSend(a3, sel_uuid, MEMORY[0x270FA5388](v8));
  uint64_t v12 = *(void *)(a4 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed PKDrawing?) -> ();
  aBlock[3] = &block_descriptor_62;
  long long v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_overlayDrawingForDrawingUUID_tintColor_completion_, v11, v12, v15);
  _Block_release(v15);
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PKDrawing?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PKDrawing?, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_20C72B04C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PKDrawing?, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PKDrawing?, Never>);
  return closure #1 in closure #1 in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed PKDrawing?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void (**)(char *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v8 = a2;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = type metadata accessor for PKDrawing();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 0, 1, v9);
  }
  else
  {
    uint64_t v10 = type metadata accessor for PKDrawing();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
    swift_retain();
  }
  v7(v6);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for PKDrawing?);
}

uint64_t block_copy_helper_62(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_62()
{
  return swift_release();
}

uint64_t ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  *(void *)(v12 + 256) = a7;
  *(void *)(v12 + 264) = v11;
  *(void *)(v12 + 240) = a5;
  *(void *)(v12 + 248) = a6;
  *(void *)(v12 + 224) = a2;
  *(void *)(v12 + 232) = a4;
  *(double *)(v12 + 208) = a10;
  *(double *)(v12 + 216) = a11;
  *(double *)(v12 + 192) = a8;
  *(double *)(v12 + 200) = a9;
  uint64_t v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                  - 8);
  *(void *)(v12 + 272) = v16;
  *(void *)(v12 + 280) = *(void *)(v16 + 64);
  *(void *)(v12 + 288) = swift_task_alloc();
  *(void *)(v12 + 296) = swift_task_alloc();
  uint64_t v17 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?)
                  - 8);
  *(void *)(v12 + 304) = v17;
  *(void *)(v12 + 312) = *(void *)(v17 + 64);
  *(void *)(v12 + 320) = swift_task_alloc();
  *(void *)(v12 + 328) = swift_task_alloc();
  type metadata accessor for CRKeyPath();
  *(void *)(v12 + 336) = swift_task_alloc();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>);
  *(void *)(v12 + 344) = v18;
  *(void *)(v12 + 352) = *(void *)(v18 - 8);
  *(void *)(v12 + 360) = swift_task_alloc();
  type metadata accessor for PKDrawingStruct();
  *(void *)(v12 + 368) = swift_task_alloc();
  uint64_t v19 = *(void *)(a4 - 8);
  *(void *)(v12 + 376) = v19;
  *(void *)(v12 + 384) = *(void *)(v19 + 64);
  *(void *)(v12 + 392) = swift_task_alloc();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  *(void *)(v12 + 400) = v20;
  *(void *)(v12 + 408) = *(void *)(v20 - 8);
  *(void *)(v12 + 416) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)(v12 + 424) = swift_task_alloc();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  *(void *)(v12 + 432) = v21;
  *(void *)(v12 + 440) = *(void *)(v21 - 8);
  uint64_t v22 = swift_task_alloc();
  uint64_t v23 = *a1;
  *(void *)(v12 + 448) = v22;
  *(void *)(v12 + 456) = v23;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a3, v12 + 16, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
  return MEMORY[0x270FA2498](ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:), 0, 0);
}

uint64_t ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v1 + 424);
  uint64_t v3 = *(void *)(v1 + 432);
  (*(void (**)(void))(*(void *)(v1 + 248) + 48))(*(void *)(v1 + 232));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v1 + 424), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    uint64_t v92 = 0;
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(v1 + 408);
  uint64_t v6 = *(void *)(v1 + 416);
  uint64_t v7 = *(void *)(v1 + 400);
  uint64_t v8 = *(void *)(v1 + 376);
  uint64_t v86 = *(void *)(v1 + 384);
  uint64_t v84 = *(void *)(v1 + 368);
  uint64_t v75 = *(void *)(v1 + 264);
  uint64_t v77 = *(void *)(v1 + 392);
  uint64_t v89 = *(void *)(v1 + 256);
  uint64_t v9 = *(void *)(v1 + 232);
  uint64_t v81 = *(void *)(v1 + 224);
  uint64_t v11 = *(void *)(v1 + 208);
  uint64_t v10 = *(void *)(v1 + 216);
  long long v74 = *(_OWORD *)(v1 + 192);
  long long v93 = *(_OWORD *)(v1 + 240);
  (*(void (**)(void, void, void))(*(void *)(v1 + 440) + 32))(*(void *)(v1 + 448), *(void *)(v1 + 424), *(void *)(v1 + 432));
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  Capsule.encapsulateTransient<A>(_:)();
  uint64_t v12 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  id v13 = objc_allocWithZone(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))((uint64_t)v13 + OBJC_IVAR___PKDrawingCoherence_model, v6, v7);
  *(void *)(v1 + 176) = v13;
  *(void *)(v1 + 184) = v12;
  id v14 = objc_msgSendSuper2((objc_super *)(v1 + 176), sel_init);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  objc_msgSend(v14, sel_bounds);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  double v22 = v21;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(unsigned char *)(v1 + 168) = 1;
  *(_OWORD *)(v1 + 96) = v74;
  *(void *)(v1 + 112) = v11;
  *(void *)(v1 + 120) = v10;
  *(unsigned char *)(v1 + 128) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v77, v75, v9);
  unint64_t v23 = (*(unsigned __int8 *)(v8 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  CGFloat v24 = (void *)*MEMORY[0x263F14818];
  unint64_t v25 = (v86 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v9;
  *(_OWORD *)(v26 + 24) = v93;
  *(void *)(v26 + 40) = v89;
  *(CGFloat *)(v26 + 48) = v16;
  *(CGFloat *)(v26 + 56) = v18;
  *(CGFloat *)(v26 + 64) = v20;
  *(double *)(v26 + 72) = v22;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v26 + v23, v77, v9);
  *(void *)(v26 + v25) = v14;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v1 + 16, v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8), (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
  id v27 = objc_allocWithZone((Class)type metadata accessor for CanvasElementPDFAnnotation());
  id v28 = v24;
  id v87 = v14;
  outlined retain of PaperRenderableOptions?(v1 + 16);
  id v29 = specialized CanvasElementPDFAnnotation.init(bounds:forType:containerBounds:mediaBox:render:)((uint64_t)v28, v1 + 136, v1 + 96, (uint64_t)partial apply for closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:), v26, v16, v18, v20, v22);
  swift_release();

  id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14730]), sel_init);
  objc_msgSend(v30, sel_setLineWidth_, 0.0);
  uint64_t v88 = v30;
  objc_msgSend(v29, sel_setBorder_, v30);
  uint64_t v31 = self;
  id v32 = v29;
  id v33 = objc_msgSend(v31, sel_clearColor);
  objc_msgSend(v32, sel_setColor_, v33);

  char v34 = (char *)v32;
  id v35 = objc_msgSend(v31, sel_clearColor);
  objc_msgSend(v34, sel_setInteriorColor_, v35);

  objc_msgSend(v34, sel_setReadOnly_, 1);
  objc_msgSend(v34, sel_setLocked_, 1);
  objc_msgSend(v34, sel_setContentsLocked_, 1);
  Ref.subscript.getter();
  uint64_t v36 = PKDrawingStruct.requiredContentVersion<A>(in:)(v81, v93, v89);
  outlined destroy of PKDrawingStruct(v84);
  if (v36 == 1)
  {
    id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F24BF0]), sel_init);
    if (v37)
    {
      long long v39 = v37;
      double v40 = *(double *)(v1 + 216);
      double v90 = *(double *)(v1 + 208);
      double v41 = *(double *)(v1 + 200);
      PKDrawingCoherence.concreteDrawing()(v38);
      uint64_t v43 = v42;
      objc_msgSend(v39, sel_setDrawing_, v42);
      id v44 = v39;
      objc_msgSend(v43, sel_bounds);
      CGFloat x = v95.origin.x;
      CGFloat y = v95.origin.y;
      CGFloat width = v95.size.width;
      CGFloat height = v95.size.height;
      double MinX = CGRectGetMinX(v95);
      v96.origin.CGFloat x = x;
      v96.origin.CGFloat y = y;
      v96.size.CGFloat width = width;
      v96.size.CGFloat height = height;
      double v50 = v40 + v41 + v41 - CGRectGetMaxY(v96);
      v97.origin.CGFloat x = x;
      v97.origin.CGFloat y = y;
      v97.size.CGFloat width = width;
      v97.size.CGFloat height = height;
      double v51 = CGRectGetWidth(v97);
      v98.origin.CGFloat x = x;
      v98.origin.CGFloat y = y;
      v98.size.CGFloat width = width;
      v98.size.CGFloat height = height;
      objc_msgSend(v44, sel_setRectangle_, MinX, v50, v51, CGRectGetHeight(v98));

      objc_msgSend(v44, sel_setDrawingSize_, v90, v40);
      objc_msgSend(v44, sel_setOriginalExifOrientation_, 1);
      id v52 = *(void **)&v34[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation];
      *(void *)&v34[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = v39;
    }
  }
  unint64_t v53 = *(void *)(v1 + 456);
  uint64_t v54 = v53;
  uint64_t v92 = v34;
  if (v53 >> 62)
  {
    if (v53 >> 62 != 1)
    {

      goto LABEL_11;
    }
    uint64_t v54 = v53 & 0x3FFFFFFFFFFFFFFFLL;
  }
  uint64_t v91 = v54;
  uint64_t v55 = *(void *)(v1 + 448);
  uint64_t v57 = *(void *)(v1 + 352);
  uint64_t v56 = *(void *)(v1 + 360);
  uint64_t v58 = *(void *)(v1 + 344);
  uint64_t v59 = *(void *)(v1 + 328);
  uint64_t v60 = *(void *)(v1 + 296);
  uint64_t v79 = *(void *)(v1 + 304);
  uint64_t v76 = *(void *)(v1 + 320);
  uint64_t v78 = *(void *)(v1 + 288);
  uint64_t v83 = *(void *)(v1 + 280);
  uint64_t v80 = *(void *)(v1 + 272);
  uint64_t v82 = *(void *)(v1 + 312);
  uint64_t v61 = *(void *)(v1 + 224);
  long long v72 = *(_OWORD *)(v1 + 248);
  long long v73 = *(_OWORD *)(v1 + 232);
  outlined copy of PaperDocument.PDFDocumentUse(v53);
  static CRKeyPath.unique.getter();
  uint64_t v62 = swift_task_alloc();
  *(_OWORD *)(v62 + 16) = v73;
  *(_OWORD *)(v62 + 32) = v72;
  *(void *)(v62 + 48) = v61;
  *(void *)(v62 + 56) = v55;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v85 = v56;
  Capsule<>.init(id:initClosure:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v59, v56, v58);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v57 + 56))(v59, 0, 1, v58);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v60, 1, 1, v63);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v59, v76, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v60, v78, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  unint64_t v64 = (*(unsigned __int8 *)(v79 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
  unint64_t v65 = (v82 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v66 = (*(unsigned __int8 *)(v80 + 80) + v65 + 8) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
  uint64_t v67 = swift_allocObject();
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v76, v67 + v64, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?);
  *(void *)(v67 + v65) = v91;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v78, v67 + v66, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  *(unsigned char *)(v67 + v66 + v83) = 0;
  *(_OWORD *)(((v66 + v83) & 0xFFFFFFFFFFFFFFF8) + v67 + 8) = xmmword_20C847F90;
  uint64_t v68 = (void (**)(void *))&v34[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  uint64_t v69 = *(void *)&v34[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *uint64_t v68 = partial apply for specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:);
  v68[1] = (void (*)(void *))v67;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v69);

  outlined destroy of StocksKitCurrencyCache.Provider?(v60, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v85, v58);
LABEL_11:
  (*(void (**)(void, void))(*(void *)(v1 + 440) + 8))(*(void *)(v1 + 448), *(void *)(v1 + 432));
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v70 = *(uint64_t (**)(char *))(v1 + 8);
  return v70(v92);
}

void closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(CGContext *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  uint64_t v56 = a8;
  uint64_t v57 = a6;
  uint64_t v22 = *(void *)(a5 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v26 = (char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClipBoundingBoCGFloat x = CGContextGetClipBoundingBox(a1);
  v58.origin.CGFloat x = a9;
  v58.origin.CGFloat y = a10;
  v58.size.CGFloat width = a11;
  v58.size.CGFloat height = a12;
  CGRect v59 = CGRectIntersection(v58, ClipBoundingBox);
  CGFloat x = v59.origin.x;
  CGFloat y = v59.origin.y;
  CGFloat width = v59.size.width;
  CGFloat height = v59.size.height;
  if (!CGRectIsEmpty(v59))
  {
    dispatch_semaphore_t v55 = dispatch_semaphore_create(0);
    uint64_t v31 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v26, 1, 1, v31);
    id v32 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    id v52 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    v32(v52, a2, a5);
    unint64_t v33 = (*(unsigned __int8 *)(v22 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v53 = a4;
    uint64_t v54 = v26;
    unint64_t v34 = (v23 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    id v35 = a3;
    unint64_t v36 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
    double v50 = a1;
    unint64_t v51 = (v36 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v37 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v38 = (v37 + 82) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = 0;
    *(void *)(v39 + 24) = 0;
    uint64_t v40 = v57;
    *(void *)(v39 + 32) = a5;
    *(void *)(v39 + 40) = v40;
    uint64_t v41 = v56;
    *(void *)(v39 + 48) = a7;
    *(void *)(v39 + 56) = v41;
    *(CGFloat *)(v39 + 64) = a9;
    *(CGFloat *)(v39 + 72) = a10;
    *(CGFloat *)(v39 + 80) = a11;
    *(CGFloat *)(v39 + 88) = a12;
    (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v39 + v33, v52, a5);
    *(void *)(v39 + v34) = v35;
    uint64_t v42 = (CGFloat *)(v39 + v36);
    *uint64_t v42 = x;
    v42[1] = y;
    uint64_t v43 = v39 + v37;
    v42[2] = width;
    uint64_t v42[3] = height;
    id v44 = v50;
    *(void *)(v39 + v51) = v50;
    uint64_t v45 = v53;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v53, v43, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
    dispatch_semaphore_t v46 = v55;
    *(void *)(v39 + v38) = v55;
    id v47 = v35;
    float v48 = v44;
    outlined retain of PaperRenderableOptions?(v45);
    float v49 = v46;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v54, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:), v39);
    swift_release();
    OS_dispatch_semaphore.wait()();
  }
}

uint64_t sub_20C72C330()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 80) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  uint64_t v6 = *(void **)(v0 + v5 + 8);
  if (v6 != (void *)1)
  {
  }
  return MEMORY[0x270FA0238](v0, v5 + 75, v2 | 7);
}

void partial apply for closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(CGContext *a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80);
  unint64_t v3 = (*(void *)(*(void *)(*(void *)(v1 + 16) - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(a1, v1 + v2, *(void **)(v1 + v3), v1 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56), *(CGFloat *)(v1 + 64), *(CGFloat *)(v1 + 72));
}

uint64_t closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v16 + 216) = a15;
  *(void *)(v16 + 224) = a16;
  *(void *)(v16 + 208) = a14;
  *(double *)(v16 + 192) = a7;
  *(double *)(v16 + 200) = a8;
  *(double *)(v16 + 176) = a5;
  *(double *)(v16 + 184) = a6;
  *(void *)(v16 + 168) = a13;
  *(double *)(v16 + 152) = a3;
  *(double *)(v16 + 160) = a4;
  *(double *)(v16 + 136) = a1;
  *(double *)(v16 + 144) = a2;
  return MEMORY[0x270FA2498](closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:), 0, 0);
}

uint64_t closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)()
{
  CGFloat v2 = *(double *)(v0 + 152);
  CGFloat v1 = *(double *)(v0 + 160);
  CGFloat v4 = *(double *)(v0 + 136);
  CGFloat v3 = *(double *)(v0 + 144);
  v19.origin.CGFloat x = v4;
  v19.origin.CGFloat y = v3;
  v19.size.CGFloat width = v2;
  v19.size.CGFloat height = v1;
  double Width = CGRectGetWidth(v19);
  v20.origin.CGFloat x = v4;
  v20.origin.CGFloat y = v3;
  v20.size.CGFloat width = v2;
  v20.size.CGFloat height = v1;
  double Height = CGRectGetHeight(v20);
  if (Width > Height) {
    double Height = Width;
  }
  double v7 = Height + Height;
  if (one-time initialization token for maxTextureSize != -1) {
    swift_once();
  }
  double v8 = 2.0;
  if (*(double *)&static UIConstants.maxTextureSize < v7) {
    double v8 = *(double *)&static UIConstants.maxTextureSize / v7 + *(double *)&static UIConstants.maxTextureSize / v7;
  }
  uint64_t v10 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 200);
  long long v16 = *(_OWORD *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 168);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 216), v0 + 16, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
  char v12 = (*(void *)(v0 + 24) != 1) & *(unsigned char *)(v0 + 88);
  *(_OWORD *)(v0 + 96) = v16;
  *(void *)(v0 + 112) = v10;
  *(void *)(v0 + 120) = v9;
  *(unsigned char *)(v0 + 128) = 0;
  double v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, char, double))((char *)&async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:)
                                                                                    + async function pointer to specialized CanvasElement.renderDrawing(_:bounds:scale:in:useSixChannelBlending:darkMode:debug:));
  id v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v13;
  void *v13 = v0;
  v13[1] = closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:);
  uint64_t v14 = *(void *)(v0 + 208);
  return v17(v11, v0 + 96, v14, 1, 0, v12, v8);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OS_dispatch_semaphore.signal()();
  CGFloat v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #2 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v14[0] = a1;
  v14[1] = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Capsule();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  Capsule.encapsulate<A>(_:)();
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct();
  Capsule.Ref.import<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v6, a2, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  return CRRegister.init(_:)();
}

uint64_t specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  *(void *)(v7 + 96) = a2;
  *(void *)(v7 + 104) = a3;
  *(double *)(v7 + 80) = a6;
  *(double *)(v7 + 88) = a7;
  *(double *)(v7 + 64) = a4;
  *(double *)(v7 + 72) = a5;
  *(void *)(v7 + 56) = a1;
  return MEMORY[0x270FA2498](specialized renderDrawingInContext #1 <A><A1>(_:) in ContainerCanvasElement.renderSubelements<A>(in:capsule:options:), 0, 0);
}

uint64_t partial apply for closure #2 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)(a1, *(void *)(v2 + 56), a2);
}

uint64_t sub_20C72D1F8()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6 + 8) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = v0 + v3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>);
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }

  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v0 + v7, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0 + v7, v12);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v7 + v8) & 0xFFFFFFFFFFFFFFF8) + 24, v2 | v6 | 7);
}

uint64_t sub_20C72D5A4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 96) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  uint64_t v8 = *(void **)(v0 + v7 + 8);
  if (v8 != (void *)1)
  {
  }
  unint64_t v9 = (v7 + 82) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v9 + 8;

  return MEMORY[0x270FA0238](v0, v10, v3 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:)()
{
  unint64_t v2 = (*(void *)(*(void *)(*(void *)(v0 + 32) - 8) + 64)
      + ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v0 + v2);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 88);
  long long v16 = *(_OWORD *)(v0 + v3);
  long long v17 = *(_OWORD *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + v4);
  uint64_t v10 = *(void *)(v0 + v3 + 16);
  uint64_t v11 = *(void *)(v0 + v3 + 24);
  uint64_t v12 = v0 + v5;
  uint64_t v13 = *(void *)(v0 + ((v5 + 82) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = swift_task_alloc();
  *(void *)(v1 + 16) = v14;
  *(void *)uint64_t v14 = v1;
  *(void *)(v14 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(void *)(v14 + 216) = v12;
  *(void *)(v14 + 224) = v13;
  *(void *)(v14 + 208) = v9;
  *(void *)(v14 + 192) = v10;
  *(void *)(v14 + 200) = v11;
  *(_OWORD *)(v14 + 176) = v16;
  *(void *)(v14 + 168) = v6;
  *(void *)(v14 + 152) = v7;
  *(void *)(v14 + 160) = v8;
  *(_OWORD *)(v14 + 136) = v17;
  return MEMORY[0x270FA2498](closure #1 in closure #1 in ContainerCanvasElement.drawingAnnotation<A>(use:mediaBox:capsule:options:), 0, 0);
}

unint64_t MagicPaperUsageProofreadingEvent.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 8:
      unint64_t result = 0xD000000000000025;
      break;
    case 9:
      unint64_t result = 0xD000000000000020;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t MagicPaperUsageProofreadingEvent.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 8:
      unint64_t result = 0xD000000000000025;
      break;
    case 9:
      unint64_t result = 0xD000000000000020;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MagicPaperUsageProofreadingEvent.ProofreadingType()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MagicPaperUsageProofreadingEvent.CodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = MagicPaperUsageProofreadingEvent.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == MagicPaperUsageProofreadingEvent.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MagicPaperUsageProofreadingEvent.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MagicPaperUsageProofreadingEvent.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MagicPaperUsageProofreadingEvent.CodingKeys()
{
  MagicPaperUsageProofreadingEvent.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MagicPaperUsageProofreadingEvent.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MagicPaperUsageProofreadingEvent.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MagicPaperUsageProofreadingEvent.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageProofreadingEvent.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MagicPaperUsageProofreadingEvent.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MagicPaperUsageProofreadingEvent.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance MagicPaperUsageProofreadingEvent.CodingKeys()
{
  return MagicPaperUsageProofreadingEvent.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance MagicPaperUsageProofreadingEvent.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageProofreadingEvent.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MagicPaperUsageProofreadingEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MagicPaperUsageProofreadingEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Void __swiftcall MagicPaperUsageProofreadingEvent.finalize()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v23 - v10;
  if ((*(unsigned char *)(v1 + 72) & 1) == 0)
  {
    uint64_t v12 = type metadata accessor for MagicPaperUsageProofreadingEvent();
    outlined init with copy of Date?(v1 + *(int *)(v12 + 68), (uint64_t)v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of Date?((uint64_t)v4);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
      Date.init()();
      Date.timeIntervalSince(_:)();
      double v14 = v13;
      double v15 = *(void (**)(char *, uint64_t))(v6 + 8);
      v15(v8, v5);
      *(float *)&double v14 = v14;
      v15(v11, v5);
      *(float *)(v1 + 68) = *(float *)&v14 * 1000.0;
    }
    long long v16 = (void *)MEMORY[0x210550400](v1 + 80);
    id v17 = objc_msgSend(self, sel_activePencil);
    unsigned __int8 v18 = objc_msgSend(v17, sel_isConnected);

    *(unsigned char *)(v1 + 1) = v18;
    v23[1] = static Locale.preferredLanguages.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 8) = v19;
    *(void *)(v1 + 16) = v21;
    if (v16)
    {
      uint64_t v22 = v16;
      specialized MagicPaperUsageAnalyticsEvent.countGroups(in:)(v22);
    }
    *(unsigned char *)(v1 + 72) = 1;
  }
}

uint64_t MagicPaperUsageProofreadingEvent.undoEvent()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MagicPaperUsageProofreadingEvent();
  v5.n128_f64[0] = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + 65))
  {
    char v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
    return v8(a1, 1, 1, v3, v5);
  }
  else
  {
    uint64_t v16 = v4;
    outlined init with copy of MagicPaperUsageProofreadingEvent(v1, (uint64_t)v7);
    uint64_t v10 = (uint64_t)&v7[*(int *)(v3 + 68)];
    outlined destroy of Date?(v10);
    uint64_t v11 = type metadata accessor for Date();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    v7[72] = 0;
    v7[65] = 1;
    uint64_t v12 = *(void *)(v1 + 56);
    BOOL v13 = __OFSUB__(0, v12);
    uint64_t v14 = -v12;
    if (v13)
    {
      __break(1u);
    }
    else
    {
      *((void *)v7 + 7) = v14;
      outlined init with copy of MagicPaperUsageProofreadingEvent((uint64_t)v7, a1);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v3);
      return outlined destroy of MagicPaperUsageProofreadingEvent((uint64_t)v7);
    }
  }
  return result;
}

uint64_t MagicPaperUsageProofreadingEvent.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MagicPaperUsageProofreadingEvent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v10[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[8] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[7] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[6] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[5] = *v3;
    v10[4] = 10;
    lazy protocol witness table accessor for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t protocol witness for static AnalyticsEvent.eventName.getter in conformance MagicPaperUsageProofreadingEvent()
{
  return 0xD000000000000026;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.CodingKeys and conformance MagicPaperUsageProofreadingEvent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent.ProofreadingType and conformance MagicPaperUsageProofreadingEvent.ProofreadingType);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MagicPaperUsageProofreadingEvent(void *a1)
{
  return MagicPaperUsageProofreadingEvent.encode(to:)(a1);
}

uint64_t type metadata accessor for MagicPaperUsageProofreadingEvent()
{
  uint64_t result = type metadata singleton initialization cache for MagicPaperUsageProofreadingEvent;
  if (!type metadata singleton initialization cache for MagicPaperUsageProofreadingEvent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MagicPaperUsageProofreadingEvent.ProofreadingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C72E788);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageProofreadingEvent.ProofreadingType()
{
  return &type metadata for MagicPaperUsageProofreadingEvent.ProofreadingType;
}

unsigned char *storeEnumTagSinglePayload for MagicPaperUsageProofreadingEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C72E88CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageProofreadingEvent.CodingKeys()
{
  return &type metadata for MagicPaperUsageProofreadingEvent.CodingKeys;
}

unsigned char *initializeBufferWithCopyOfBuffer for MagicPaperUsageProofreadingEvent(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)unsigned int v4 = *a2;
    unsigned int v4 = (unsigned char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    uint64_t v7 = a2[2];
    *((void *)v4 + 1) = a2[1];
    *((void *)v4 + 2) = v7;
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 3);
    long long v8 = *(_OWORD *)(a2 + 5);
    *((void *)v4 + 7) = a2[7];
    *((_WORD *)v4 + 32) = *((_WORD *)a2 + 32);
    *((_DWORD *)v4 + 17) = *((_DWORD *)a2 + 17);
    v4[72] = *((unsigned char *)a2 + 72);
    *(_OWORD *)(v4 + 40) = v8;
    swift_bridgeObjectRetain();
    swift_unknownObjectWeakCopyInit();
    uint64_t v9 = *(int *)(a3 + 68);
    uint64_t v10 = &v4[v9];
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return v4;
}

uint64_t destroy for MagicPaperUsageProofreadingEvent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  uint64_t v4 = a1 + *(int *)(a2 + 68);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for MagicPaperUsageProofreadingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  uint64_t v8 = *(int *)(a3 + 68);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for MagicPaperUsageProofreadingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_unknownObjectWeakCopyAssign();
  uint64_t v6 = *(int *)(a3 + 68);
  long long v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for MagicPaperUsageProofreadingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = v6;
  swift_unknownObjectWeakTakeInit();
  uint64_t v7 = *(int *)(a3 + 68);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for MagicPaperUsageProofreadingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  int v7 = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v7;
  swift_unknownObjectWeakTakeAssign();
  uint64_t v8 = *(int *)(a3 + 68);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for MagicPaperUsageProofreadingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C72F228);
}

uint64_t sub_20C72F228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 68);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for MagicPaperUsageProofreadingEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C72F2FC);
}

uint64_t sub_20C72F2FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 16) = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 68);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for MagicPaperUsageProofreadingEvent()
{
  type metadata accessor for Date?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t instantiation function for generic protocol witness table for MagicPaperUsageProofreadingEvent(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type MagicPaperUsageProofreadingEvent and conformance MagicPaperUsageProofreadingEvent(&lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent and conformance MagicPaperUsageProofreadingEvent);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type MagicPaperUsageProofreadingEvent and conformance MagicPaperUsageProofreadingEvent(&lazy protocol witness table cache variable for type MagicPaperUsageProofreadingEvent and conformance MagicPaperUsageProofreadingEvent);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type MagicPaperUsageProofreadingEvent and conformance MagicPaperUsageProofreadingEvent(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for MagicPaperUsageProofreadingEvent();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of MagicPaperUsageProofreadingEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPaperUsageProofreadingEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t specialized MagicPaperUsageProofreadingEvent.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MagicPaperUsageProofreadingEvent.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return 11;
  }
  else {
    return v3;
  }
}

uint64_t Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>, double a11@<D4>)
{
  uint64_t v110 = a4;
  long long v120 = a1;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v111 = (char *)v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v109 = *(void *)(v108 - 8);
  MEMORY[0x270FA5388](v108);
  v70[0] = (char *)v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for ShapeSecondaryProperties() - 8;
  MEMORY[0x270FA5388](v89);
  uint64_t v107 = (char *)v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v104 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  char v103 = (char *)v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v101 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  uint64_t v100 = (char *)v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  uint64_t v98 = *(void *)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  CGRect v97 = (char *)v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v95 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v94 = (char *)v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v121);
  uint64_t v118 = (uint64_t)v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v117 = (char *)v70 - v30;
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v119);
  uint64_t v114 = (uint64_t)v70 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v113 = (char *)v70 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v122 = *(void *)(v34 - 8);
  uint64_t v123 = v34;
  MEMORY[0x270FA5388](v34);
  long long v93 = (char *)v70 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  uint64_t v112 = (char *)v70 - v37;
  uint64_t v91 = *a2;
  uint64_t v92 = *a3;
  uint64_t v106 = *a5;
  type metadata accessor for CGRect(0);
  uint64_t v87 = v38;
  uint64_t v86 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v124 = 0u;
  long long v125 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v39 = (int *)type metadata accessor for Shape();
  *(void *)&long long v124 = 0;
  unint64_t v116 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(_:)();
  uint64_t v90 = a6 + v39[6];
  *(void *)&long long v124 = 0;
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  uint64_t v84 = _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color and conformance Color);
  CRRegister.init(wrappedValue:)();
  uint64_t v88 = a6 + v39[7];
  *(void *)&long long v124 = 0;
  CRRegister.init(wrappedValue:)();
  uint64_t v83 = a6 + v39[8];
  *(void *)&long long v124 = 0x4014000000000000;
  CRRegister.init(wrappedValue:)();
  uint64_t v115 = a6 + v39[9];
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  uint64_t v40 = v112;
  TaggedValue_9.init(_:)();
  uint64_t v41 = v122;
  uint64_t v81 = *(void (**)(char *, char *, uint64_t))(v122 + 16);
  uint64_t v42 = v123;
  v81(v93, v40, v123);
  uint64_t v80 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape> and conformance TaggedValue_9<A, B, C, D, E, F, G, H, I>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  CRRegister.init(wrappedValue:)();
  uint64_t v43 = *(char **)(v41 + 8);
  uint64_t v122 = v41 + 8;
  long long v93 = v43;
  ((void (*)(char *, uint64_t))v43)(v40, v42);
  *(void *)&long long v124 = 0x3FF0000000000000;
  CRRegister.init(wrappedValue:)();
  uint64_t v44 = a6;
  *(void *)&long long v124 = 0;
  BYTE8(v124) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<LineEnd>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRExtensible<LineEnd> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<LineEnd>);
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v124 = 0;
  BYTE8(v124) = 0;
  CRRegister.init(wrappedValue:)();
  uint64_t v45 = a6 + v39[13];
  unint64_t v79 = lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  uint64_t v46 = v89;
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v47 = *(void *)(v73 - 8);
  uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  uint64_t v78 = v47 + 56;
  uint64_t v48 = (uint64_t)v113;
  v77(v113, 1, 1, v73);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v48, v114, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  unint64_t v76 = lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  uint64_t v49 = v45 + *(int *)(v46 + 32);
  *(void *)&long long v124 = 0;
  unint64_t v75 = lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  uint64_t v82 = v49;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v124 = 0;
  unint64_t v74 = lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  uint64_t v51 = *(void *)(v50 - 8);
  CGFloat v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
  uint64_t v72 = v51 + 56;
  uint64_t v52 = (uint64_t)v117;
  v71(v117, 1, 1, v50);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v52, v118, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  CGFloat v70[4] = lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v52, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  long long v124 = 0u;
  long long v125 = 0u;
  v70[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shadow?);
  _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(&lazy protocol witness table cache variable for type Shadow? and conformance <A> A?, &demangling cache variable for type metadata for Shadow?, (void (*)(void))lazy protocol witness table accessor for type Shadow and conformance Shadow);
  CRRegister.init(wrappedValue:)();
  long long v125 = 0u;
  long long v126 = 0u;
  long long v124 = 0u;
  v70[2] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeAuxiliaryInfo?);
  v70[1] = _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo? and conformance <A> A?, &demangling cache variable for type metadata for ShapeAuxiliaryInfo?, (void (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  CRRegister.init(wrappedValue:)();
  uint64_t v53 = MEMORY[0x263F8EE80];
  *(void *)(v45 + *(int *)(v46 + 52)) = MEMORY[0x263F8EE80];
  *(void *)(v44 + v39[14]) = v53;
  *(double *)&long long v124 = a7;
  *((double *)&v124 + 1) = a8;
  *(double *)&long long v125 = a9;
  *((double *)&v125 + 1) = a10;
  uint64_t v54 = v94;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v95 + 40))(v44, v54, v96);
  v81(v112, v120, v123);
  dispatch_semaphore_t v55 = v97;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 40))(v115, v55, v99);
  *(double *)&long long v124 = a11;
  uint64_t v56 = v100;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v101 + 40))(v83, v56, v102);
  *(void *)&long long v124 = v91;
  uint64_t v57 = v103;
  CRRegister.init(_:)();
  CGRect v58 = *(void (**)(uint64_t, char *, uint64_t))(v104 + 40);
  uint64_t v59 = v105;
  v58(v88, v57, v105);
  *(void *)&long long v124 = v92;
  CRRegister.init(_:)();
  v58(v90, v57, v59);
  uint64_t v60 = (uint64_t)v107;
  CRAttributedString.init(_:)();
  uint64_t v61 = (uint64_t)v113;
  v77(v113, 1, 1, v73);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v61, v114, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v61, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  *(void *)&long long v124 = 0;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v124 = 0;
  CRRegister.init(wrappedValue:)();
  uint64_t v62 = (uint64_t)v117;
  uint64_t v63 = v50;
  uint64_t v64 = v108;
  v71(v117, 1, 1, v63);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v62, v118, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  uint64_t v65 = v110;
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  long long v124 = 0u;
  long long v125 = 0u;
  CRRegister.init(wrappedValue:)();
  long long v125 = 0u;
  long long v126 = 0u;
  long long v124 = 0u;
  uint64_t v66 = v109;
  CRRegister.init(wrappedValue:)();
  *(void *)(v60 + *(int *)(v46 + 52)) = MEMORY[0x263F8EE80];
  uint64_t v67 = (uint64_t)v111;
  outlined assign with take of ShapeSecondaryProperties(v60, v45);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v65, v67, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v67, 1, v64) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v67, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  }
  else
  {
    uint64_t v68 = v70[0];
    (*(void (**)(void, uint64_t, uint64_t))(v66 + 32))(v70[0], v67, v64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 40))(v45, v68, v64);
  }
  *(void *)&long long v124 = v106;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?(v65, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  return ((uint64_t (*)(char *, uint64_t))v93)(v120, v123);
}

uint64_t Shape.rotation.setter(double a1)
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t result = CRRegister.value.getter();
  if (vabdd_f64(v3, a1) > 0.01) {
    return CRRegister.value.setter();
  }
  return result;
}

uint64_t Shape.strokeColor.getter()
{
  return CRRegister.wrappedValue.getter();
}

double Shape.strokeWidth.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Shape.fillColor.getter()
{
  return CRRegister.wrappedValue.getter();
}

double Shape.opacity.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Shape.type.getter()
{
  return Shape.type.getter(MEMORY[0x263F32C30]);
}

uint64_t Shape.startLineEnd.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t Shape.endLineEnd.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t Shape.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v35);
  uint64_t v34 = (uint64_t)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v33 = (char *)v25 - v4;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v32);
  uint64_t v31 = (uint64_t)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v30 = (char *)v25 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v27 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v26 = (char *)v25 - v11;
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v36 = 0u;
  long long v37 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v12 = (int *)type metadata accessor for Shape();
  *(void *)&long long v36 = 0;
  v25[1] = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(_:)();
  *(void *)&long long v36 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color and conformance Color);
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v36 = 0;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v36 = 0x4014000000000000;
  CRRegister.init(wrappedValue:)();
  v25[0] = a1 + v12[9];
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  int v13 = v26;
  TaggedValue_9.init(_:)();
  uint64_t v14 = v28;
  uint64_t v15 = v29;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v27, v13, v29);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape> and conformance TaggedValue_9<A, B, C, D, E, F, G, H, I>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  CRRegister.init(wrappedValue:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v15);
  *(void *)&long long v36 = 0x3FF0000000000000;
  CRRegister.init(wrappedValue:)();
  uint64_t v16 = a1;
  *(void *)&long long v36 = 0;
  BYTE8(v36) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<LineEnd>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRExtensible<LineEnd> and conformance CRExtensible<A>, &demangling cache variable for type metadata for CRExtensible<LineEnd>);
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v36 = 0;
  BYTE8(v36) = 0;
  CRRegister.init(wrappedValue:)();
  uint64_t v17 = a1 + v12[13];
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  uint64_t v18 = type metadata accessor for ShapeSecondaryProperties();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  uint64_t v20 = (uint64_t)v30;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v30, 1, 1, v19);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v20, v31, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v20, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  *(void *)&long long v36 = 0;
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v36 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  uint64_t v22 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v33, 1, 1, v21);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v22, v34, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v22, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  long long v36 = 0u;
  long long v37 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shadow?);
  _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(&lazy protocol witness table cache variable for type Shadow? and conformance <A> A?, &demangling cache variable for type metadata for Shadow?, (void (*)(void))lazy protocol witness table accessor for type Shadow and conformance Shadow);
  CRRegister.init(wrappedValue:)();
  long long v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeAuxiliaryInfo?);
  _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo? and conformance <A> A?, &demangling cache variable for type metadata for ShapeAuxiliaryInfo?, (void (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  uint64_t result = CRRegister.init(wrappedValue:)();
  uint64_t v24 = MEMORY[0x263F8EE80];
  *(void *)(v17 + *(int *)(v18 + 44)) = MEMORY[0x263F8EE80];
  *(void *)(v16 + v12[14]) = v24;
  return result;
}

uint64_t Shape.frame.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.strokeColor.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.strokeWidth.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.fillColor.setter()
{
  return CRRegister.wrappedValue.setter();
}

void Dictionary<>.scaleBy(_:)(double a1)
{
  if (a1 != 1.0 && a1 != 0.0)
  {
    uint64_t v3 = *v1;
    if (*(void *)(v3 + 16))
    {
      id v4 = (id)*MEMORY[0x263F814F0];
      uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4);
      if (v6)
      {
        outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v12);

        if (*((void *)&v13 + 1))
        {
          uint64_t v7 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
          if (swift_dynamicCast())
          {
            id v8 = v4;
            objc_msgSend(v11, sel_pointSize);
            id v10 = objc_msgSend(v11, sel_fontWithSize_, v9 * a1);
            *((void *)&v13 + 1) = v7;
            *(void *)&long long v12 = v10;
            specialized Dictionary.subscript.setter((uint64_t)&v12, v8);
          }
          return;
        }
      }
      else
      {
        long long v12 = 0u;
        long long v13 = 0u;
      }
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v12, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t Shape.emptyStringAttributes.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v2 - 8);
  id v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for Shape();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

double Shape.frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Shape.startLineEnd.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.endLineEnd.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.type.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

Swift::Void __swiftcall Shape.apply(_:)(CGAffineTransform *a1)
{
  double a = a1->a;
  double b = a1->b;
  long long v8 = *(_OWORD *)&a1->c;
  CGFloat tx = a1->tx;
  CGFloat ty = a1->ty;
  specialized CanvasElement.coordinateSpace.getter(&v11);
  CGAffineTransform t1 = v11;
  t2.double a = a;
  t2.double b = b;
  *(_OWORD *)&t2.CGFloat c = v8;
  t2.CGFloat tx = tx;
  t2.CGFloat ty = ty;
  CGAffineTransformConcat(&v9, &t1, &t2);
  CGAffineTransform t1 = v9;
  specialized CanvasElement.coordinateSpace.setter();
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v6 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
  *uint64_t v7 = sqrt(a * a + b * b) * *v7;
  v6(&t2, 0);
  CRAttributedString<>.apply(_:)(&a1->a);
}

uint64_t (*Shape.frame.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

double Shape.rotation.getter()
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  return v1;
}

uint64_t Shape.flags.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t Shape.flags.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t key path getter for Shape.type : Shape()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for Shape.type : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  CGAffineTransform v9 = (char *)&v12 - v8;
  id v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

double key path getter for Shape.opacity : Shape@<D0>(double *a1@<X8>)
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.opacity : Shape()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.opacity.setter()
{
  return CRRegister.wrappedValue.setter();
}

double key path getter for Shape.strokeWidth : Shape@<D0>(double *a1@<X8>)
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.strokeWidth : Shape()
{
  return CRRegister.wrappedValue.setter();
}

BOOL Shape.supportsStrokeColor.getter()
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  return v1 == 0;
}

uint64_t key path getter for Shape.strokeColor : Shape@<X0>(void *a1@<X8>)
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.strokeColor : Shape(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for Shape();
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t key path getter for Shape.startLineEnd : Shape@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for Shape.startLineEnd : Shape()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t key path getter for Shape.endLineEnd : Shape@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for Shape.endLineEnd : Shape()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t key path getter for Shape.flags : Shape@<X0>(void *a1@<X8>)
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.flags : Shape()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Shape.pathAndLineEnds(in:scale:)@<X0>(CGAffineTransform *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.getter();
  CGPathRef v15 = TaggedValue_9<>.path(in:)(a1);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v16 = v15;
  CGPathRef.endPoints.getter();
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;
  double v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  id v25 = v56;

  _s8PaperKit5ShapeVWOcTm_0(v4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Shape);
  if (v25)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    double v26 = *(double *)&v56;
    outlined destroy of Shape((uint64_t)v10);
    double v27 = 0.0;
    if (v26 > 0.0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
      CRRegister.wrappedValue.getter();
      if (v57 == 1)
      {
        CRRegister.wrappedValue.getter();
        double v28 = *(double *)&v56;
        int v29 = 1;
      }
      else
      {
        int v29 = v56;
        if (!(_BYTE)v56)
        {

          double v33 = 0.0;
          goto LABEL_20;
        }
        CRRegister.wrappedValue.getter();
        double v28 = *(double *)&v56;
        if (v29 == 7)
        {
          double v30 = 0.25;
          if (*(double *)&v56 < 1.0) {
            goto LABEL_6;
          }
          goto LABEL_15;
        }
        if (v29 == 8)
        {
          double v34 = *(double *)&v56 * 5.0;
          double v35 = 0.5;
LABEL_19:
          CRRegister.wrappedValue.getter();
          double v33 = (v34 - v35 * *(double *)&v56) * a3;
          v58.size.CGFloat width = v33 + v33;
          double v36 = (v33 + v33) * 0.5;
          v58.origin.CGFloat x = v18 - v36;
          v58.origin.CGFloat y = v20 - v36;
          v58.size.CGFloat height = v33 + v33;
          long long v37 = CGPathCreateWithEllipseInRect(v58, 0);
          CGPathRef v38 = CGPathRef.lineSubtractingFromStart(_:)(v37);

          uint64_t v16 = v38;
LABEL_20:
          CRRegister.wrappedValue.getter();
          if (v57 == 1)
          {
            CRRegister.wrappedValue.getter();
            double v39 = *(double *)&v56;
            int v40 = 1;
          }
          else
          {
            int v40 = v56;
            if (!(_BYTE)v56)
            {
              double v27 = 0.0;
              goto LABEL_36;
            }
            CRRegister.wrappedValue.getter();
            double v39 = *(double *)&v56;
            if (v40 == 7)
            {
              double v41 = 0.25;
              if (*(double *)&v56 < 1.0) {
                goto LABEL_23;
              }
              goto LABEL_30;
            }
            if (v40 == 8)
            {
              double v43 = *(double *)&v56 * 5.0;
              double v44 = 0.5;
LABEL_34:
              CRRegister.wrappedValue.getter();
              double v27 = (v43 - v44 * *(double *)&v56) * a3;
              v59.size.CGFloat width = v27 + v27;
              double v45 = (v27 + v27) * 0.5;
              v59.origin.CGFloat x = v22 - v45;
              v59.origin.CGFloat y = v24 - v45;
              v59.size.CGFloat height = v27 + v27;
              uint64_t v46 = CGPathCreateWithEllipseInRect(v59, 0);
              CGPathRef v32 = CGPathRef.lineSubtractingFromEnd(_:)(v46);

              goto LABEL_35;
            }
          }
          double v41 = 1.0;
          if (v39 < 1.0)
          {
LABEL_23:
            double v42 = v39 * 6.0;
            goto LABEL_31;
          }
LABEL_30:
          double v42 = v39 * 3.6 + 2.4;
LABEL_31:
          double v43 = v42 * v41;
          if (v40 == 2) {
            double v44 = 2.73606798;
          }
          else {
            double v44 = 0.5;
          }
          goto LABEL_34;
        }
      }
      double v30 = 1.0;
      if (v28 < 1.0)
      {
LABEL_6:
        double v31 = v28 * 6.0;
        goto LABEL_16;
      }
LABEL_15:
      double v31 = v28 * 3.6 + 2.4;
LABEL_16:
      double v34 = v31 * v30;
      if (v29 == 2) {
        double v35 = 2.73606798;
      }
      else {
        double v35 = 0.5;
      }
      goto LABEL_19;
    }
  }
  else
  {
    outlined destroy of Shape((uint64_t)v10);
    double v27 = 0.0;
  }
  CGPathRef v32 = v16;
  double v33 = 0.0;
LABEL_35:

  uint64_t v16 = v32;
LABEL_36:
  uint64_t result = CGPathIsEmpty(v16);
  if (result)
  {
    double v48 = sqrt((v22 - v18) * (v22 - v18) + (v24 - v20) * (v24 - v20));
    double v49 = (v22 - v18) / v48;
    double v50 = (v24 - v20) / v48;
    double v51 = v18 + v49 * v33;
    double v52 = v20 + v50 * v33;
    double v53 = v50 * v27;
    double v54 = v22 - v49 * v27;
    double v55 = v24 - v53;
  }
  else
  {
    uint64_t result = CGPathRef.endPoints.getter();
  }
  *(void *)a2 = v16;
  *(double *)(a2 + 8) = v18;
  *(double *)(a2 + 16) = v20;
  *(double *)(a2 + 24) = v22;
  *(double *)(a2 + 32) = v24;
  *(double *)(a2 + 40) = v51;
  *(double *)(a2 + 48) = v52;
  *(double *)(a2 + 56) = v54;
  *(double *)(a2 + 64) = v55;
  return result;
}

uint64_t key path getter for Shape.fillColor : Shape@<X0>(void *a1@<X8>)
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.fillColor : Shape(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for Shape();
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

BOOL Shape.supportsFill.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged3.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  int v9 = v13;
  _s8PaperKit5ShapeVWOcTm_0(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Shape);
  if (v9 == 1)
  {
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    CRRegister.wrappedValue.getter();
    BOOL v10 = v12[1] == 0;
    outlined destroy of Shape((uint64_t)v4);
  }
  else
  {
    outlined destroy of Shape((uint64_t)v4);
    return 0;
  }
  return v10;
}

double key path getter for Shape.rotation : Shape@<D0>(double *a1@<X8>)
{
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.rotation : Shape(double *a1)
{
  double v1 = *a1;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t result = CRRegister.value.getter();
  if (vabdd_f64(v3, v1) > 0.01) {
    return CRRegister.value.setter();
  }
  return result;
}

uint64_t Shape.emptyStringAttributes.getter()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for Shape.emptyStringAttributes : Shape()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for Shape.emptyStringAttributes : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v12 - v6;
  MEMORY[0x270FA5388](v8);
  BOOL v10 = (char *)&v12 - v9;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v12 - v9, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for Shape();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

BOOL Shape.supportsLineEnds.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = &v5[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged3.getter();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  return (v5[56] & 1) == 0;
}

uint64_t Shape.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$frame : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  BOOL v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Shape.$frame.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Shape.$frame.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t (*Shape.fillColor.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$fillColor.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$fillColor : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  BOOL v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Shape.$fillColor.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$fillColor.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.strokeColor.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$strokeColor.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$strokeColor : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  BOOL v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Shape.$strokeColor.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$strokeColor.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.strokeWidth.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$strokeWidth.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$strokeWidth : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  BOOL v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Shape.$strokeWidth.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$strokeWidth.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.type.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$type.getter()
{
  return Shape.type.getter(MEMORY[0x263F32C38]);
}

uint64_t Shape.type.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for Shape();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  return a1(v2);
}

uint64_t key path setter for Shape.$type : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  BOOL v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Shape.$type.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$type.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.opacity.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$opacity.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$opacity : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  BOOL v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Shape.$opacity.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$opacity.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.startLineEnd.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$startLineEnd.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$startLineEnd : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  BOOL v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Shape.$startLineEnd.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$startLineEnd.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 44);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Shape.endLineEnd.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Shape.$endLineEnd.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Shape.$endLineEnd : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  BOOL v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Shape.$endLineEnd.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Shape();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Shape.$endLineEnd.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 48);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Shape.secondaryProperties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Shape();
  return _s8PaperKit5ShapeVWOcTm_0(v1 + *(int *)(v3 + 52), a1, (uint64_t (*)(void))type metadata accessor for ShapeSecondaryProperties);
}

uint64_t Shape.secondaryProperties.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Shape() + 52);
  return outlined assign with take of ShapeSecondaryProperties(a1, v3);
}

double (*Shape.secondaryProperties.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t Shape.additionalFields.getter()
{
  type metadata accessor for Shape();
  return swift_bridgeObjectRetain();
}

uint64_t Shape.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Shape() + 56);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*Shape.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

double static Shape.fields.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  *(_OWORD *)double v31 = *(_OWORD *)&qword_26ACB2A68;
  *(_OWORD *)&v31[16] = *(_OWORD *)&qword_26ACB2A78;
  long long v32 = xmmword_26ACB2A88;
  long long v28 = xmmword_26ACB2A28;
  *(_OWORD *)int v29 = *(_OWORD *)&qword_26ACB2A38;
  *(_OWORD *)&v29[16] = xmmword_26ACB2A48;
  long long v30 = *(_OWORD *)&qword_26ACB2A58;
  *(_OWORD *)&v25[16] = xmmword_26ACB29E8;
  long long v26 = *(_OWORD *)&qword_26ACB29F8;
  *(_OWORD *)double v27 = *(_OWORD *)&qword_26ACB2A08;
  *(_OWORD *)&v27[16] = *(_OWORD *)&qword_26ACB2A18;
  *(_OWORD *)double v23 = static Shape.fields;
  *(_OWORD *)&void v23[16] = *(_OWORD *)&qword_26ACB29B8;
  long long v24 = xmmword_26ACB29C8;
  *(_OWORD *)id v25 = *(_OWORD *)&qword_26ACB29D8;
  uint64_t v2 = static Shape.fields;
  uint64_t v3 = unk_26ACB29C0;
  uint64_t v4 = qword_26ACB29D8;
  uint64_t v5 = *((void *)&xmmword_26ACB29E8 + 1);
  uint64_t v6 = qword_26ACB2A08;
  uint64_t v7 = unk_26ACB2A20;
  uint64_t v8 = qword_26ACB2A38;
  uint64_t v9 = *((void *)&xmmword_26ACB2A48 + 1);
  uint64_t v10 = qword_26ACB2A68;
  uint64_t v22 = unk_26ACB2A80;
  long long v12 = *(_OWORD *)&v23[8];
  long long v13 = xmmword_26ACB29C8;
  long long v14 = *(_OWORD *)&v25[8];
  long long v15 = *(_OWORD *)&qword_26ACB29F8;
  long long v16 = *(_OWORD *)&v27[8];
  long long v17 = xmmword_26ACB2A28;
  long long v18 = *(_OWORD *)&v29[8];
  long long v19 = *(_OWORD *)&qword_26ACB2A58;
  long long v20 = *(_OWORD *)&v31[8];
  long long v21 = xmmword_26ACB2A88;
  outlined retain of ((String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGFloat>>), (String, WritableKeyPath<Image, CRRegister<CRAssetOrData?>>), (String, WritableKeyPath<Image, CRRegister<String?>>), (String, WritableKeyPath<Image, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<Image, CRRegister<Data?>>), (String, WritableKeyPath<Image, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>>))((uint64_t)v23);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(void *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(void *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(void *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(void *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 200) = v20;
  *(void *)(a1 + 216) = v22;
  double result = *(double *)&v21;
  *(_OWORD *)(a1 + 224) = v21;
  return result;
}

uint64_t Shape.minAppFormatVersion.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Shape();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + *(int *)(v5 + 52), v1);
  uint64_t v6 = (void *)CRAttributedString.attributedString.getter();
  id v7 = objc_msgSend(v6, sel_string);

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (v8) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v10 == 0xE000000000000000;
  }
  if (v11)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return 2;
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    if (v12) {
      return 2;
    }
    else {
      return 4;
    }
  }
}

void (*Shape.flags.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  *((_DWORD *)v3 + 8) = *(_DWORD *)(type metadata accessor for Shape() + 52);
  *((_DWORD *)v3 + 9) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 28);
  v3[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  return Shape.flags.modify;
}

void Shape.flags.modify(void **a1)
{
  uint64_t v1 = *a1;
  (*a1)[1] = **a1;
  CRRegister.wrappedValue.setter();
  free(v1);
}

void (*Shape.emptyStringAttributes.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  size_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?)
                             - 8)
                 + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v3[3] = malloc(v4);
  v3[4] = malloc(v4);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Shape() + 52);
  *((_DWORD *)v3 + 13) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 20);
  v3[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.getter();
  return Shape.emptyStringAttributes.modify;
}

void Shape.emptyStringAttributes.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[3];
  uint64_t v5 = (*a1)[2];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((*a1)[4], v4, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v4, v5, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  uint64_t v6 = (void *)v3[4];
  id v7 = (void *)v3[2];
  uint64_t v8 = (void *)v3[3];
  uint64_t v9 = (void *)v3[1];
  if (a2)
  {
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v3[2], v3[1], &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  }
  else
  {
    CRRegister.wrappedValue.setter();
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  free(v6);
  free(v8);
  free(v7);
  free(v9);
  free(v3);
}

void (*Shape.rotation.modify(void *a1))(double **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  *((_DWORD *)v3 + 8) = *(_DWORD *)(type metadata accessor for Shape() + 20);
  v3[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  return Shape.rotation.modify;
}

void Shape.rotation.modify(double **a1)
{
  uint64_t v1 = *a1;
  double v2 = **a1;
  CRRegister.value.getter();
  if (vabdd_f64(v1[1], v2) > 0.01)
  {
    v1[1] = v2;
    CRRegister.value.setter();
  }
  free(v1);
}

uint64_t type metadata accessor for Shape()
{
  uint64_t result = type metadata singleton initialization cache for Shape;
  if (!type metadata singleton initialization cache for Shape) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Attributes and conformance CRAttributedString<A>.Attributes, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?);
  }
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Shape()
{
  return CRStruct_10_Final.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Shape()
{
  return CRStruct_10_Final.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Shape(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F179A0](a1, v2);
}

double protocol witness for static CRStruct_Base_10.fields.getter in conformance Shape@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  *(_OWORD *)double v31 = *(_OWORD *)&qword_26ACB2A68;
  *(_OWORD *)&v31[16] = *(_OWORD *)&qword_26ACB2A78;
  long long v32 = xmmword_26ACB2A88;
  long long v28 = xmmword_26ACB2A28;
  *(_OWORD *)int v29 = *(_OWORD *)&qword_26ACB2A38;
  *(_OWORD *)&v29[16] = xmmword_26ACB2A48;
  long long v30 = *(_OWORD *)&qword_26ACB2A58;
  *(_OWORD *)&v25[16] = xmmword_26ACB29E8;
  long long v26 = *(_OWORD *)&qword_26ACB29F8;
  *(_OWORD *)double v27 = *(_OWORD *)&qword_26ACB2A08;
  *(_OWORD *)&v27[16] = *(_OWORD *)&qword_26ACB2A18;
  *(_OWORD *)double v23 = static Shape.fields;
  *(_OWORD *)&void v23[16] = *(_OWORD *)&qword_26ACB29B8;
  long long v24 = xmmword_26ACB29C8;
  *(_OWORD *)id v25 = *(_OWORD *)&qword_26ACB29D8;
  uint64_t v2 = static Shape.fields;
  uint64_t v3 = unk_26ACB29C0;
  uint64_t v4 = qword_26ACB29D8;
  uint64_t v5 = *((void *)&xmmword_26ACB29E8 + 1);
  uint64_t v6 = qword_26ACB2A08;
  uint64_t v7 = unk_26ACB2A20;
  uint64_t v8 = qword_26ACB2A38;
  uint64_t v9 = *((void *)&xmmword_26ACB2A48 + 1);
  uint64_t v10 = qword_26ACB2A68;
  uint64_t v22 = unk_26ACB2A80;
  long long v12 = *(_OWORD *)&v23[8];
  long long v13 = xmmword_26ACB29C8;
  long long v14 = *(_OWORD *)&v25[8];
  long long v15 = *(_OWORD *)&qword_26ACB29F8;
  long long v16 = *(_OWORD *)&v27[8];
  long long v17 = xmmword_26ACB2A28;
  long long v18 = *(_OWORD *)&v29[8];
  long long v19 = *(_OWORD *)&qword_26ACB2A58;
  long long v20 = *(_OWORD *)&v31[8];
  long long v21 = xmmword_26ACB2A88;
  outlined retain of ((String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGFloat>>), (String, WritableKeyPath<Image, CRRegister<CRAssetOrData?>>), (String, WritableKeyPath<Image, CRRegister<String?>>), (String, WritableKeyPath<Image, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<Image, CRRegister<Data?>>), (String, WritableKeyPath<Image, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>>))((uint64_t)v23);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(void *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(void *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(void *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(void *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 200) = v20;
  *(void *)(a1 + 216) = v22;
  double result = *(double *)&v21;
  *(_OWORD *)(a1 + 224) = v21;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance Shape(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F17A10](a1, v2);
}

uint64_t protocol witness for CRDT.context.getter in conformance Shape(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F179B0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F179D8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F17A08](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance Shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F179E0](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F17A00](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F179E8](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F179C8](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F179C0](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F179A8](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F17990](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance Shape()
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return CRStruct_10_Final.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F17998](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return MEMORY[0x270F179F0](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance Shape()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance Shape()
{
  return CRDT.init(serializedData:)();
}

uint64_t Shape.shared(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  double v3 = MEMORY[0x270FA5388](v2);
  v7[15] = 5;
  (*(void (**)(unsigned char *, uint64_t, double))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t Shape.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRAsset();
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t Shape.indexableTextContent<A>(in:)()
{
  return specialized Shape.indexableTextContent<A>(in:)();
}

uint64_t Shape.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Shape.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Shape.render<A>(in:id:capsule:options:));
  long long v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *long long v12 = v6;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v14(a1, a2, a4, a5, a6);
}

double closure #1 in Shape.renderSync<A>(in:id:capsule:options:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v3 = *a1;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3 * v5;
  *a2 = v3 * v5;
  return result;
}

__C::CGRect __swiftcall Shape.renderFrame(in:)(__C::CGRect_optional *in)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v3 - 8);
  double v5 = (char *)&height - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  if (LOBYTE(t1.a))
  {
    double v6 = specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(v1, (uint64_t)in);
    double v8 = v7;
    double v10 = v9;
    double v12 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.value.getter();
    CGFloat a = t1.a;
    double v84 = v6 - v10 * 0.0;
    double v83 = v8 - v12 * 0.0;
    v93.origin.CGFloat x = v6;
    v93.origin.CGFloat y = v8;
    v93.size.CGFloat width = v10;
    CGFloat v81 = v10;
    v93.size.CGFloat height = v12;
    CGFloat v82 = v12;
    double MidX = CGRectGetMidX(v93);
    v94.origin.CGFloat x = v6;
    v94.origin.CGFloat y = v8;
    v94.size.CGFloat width = v10;
    v94.size.CGFloat height = v12;
    double MidY = CGRectGetMidY(v94);
    CGAffineTransformMakeRotation(&t1, a);
    long long v80 = *(_OWORD *)&t1.a;
    long long v79 = *(_OWORD *)&t1.c;
    CGFloat v16 = -MidY;
    CGFloat tx = t1.tx;
    CGFloat ty = t1.ty;
    CGAffineTransformMakeTranslation(&t1, -MidX, v16);
    CGFloat v19 = t1.a;
    CGFloat b = t1.b;
    CGFloat c = t1.c;
    CGFloat d = t1.d;
    CGFloat v23 = t1.tx;
    CGFloat v24 = t1.ty;
    *(_OWORD *)&t2.CGFloat a = v80;
    *(_OWORD *)&t2.CGFloat c = v79;
    t2.CGFloat tx = tx;
    t2.CGFloat ty = ty;
    CGAffineTransformConcat(&v91, &t1, &t2);
    long long v80 = *(_OWORD *)&v91.a;
    long long v79 = *(_OWORD *)&v91.c;
    CGFloat v25 = v91.tx;
    CGFloat v26 = v91.ty;
    t1.CGFloat a = v19;
    t1.CGFloat b = b;
    t1.CGFloat c = c;
    t1.CGFloat d = d;
    t1.CGFloat tx = v23;
    t1.CGFloat ty = v24;
    CGAffineTransformInvert(&t2, &t1);
    *(_OWORD *)&t1.CGFloat a = v80;
    *(_OWORD *)&t1.CGFloat c = v79;
    t1.CGFloat tx = v25;
    t1.CGFloat ty = v26;
    CGAffineTransformConcat(&v91, &t1, &t2);
    t1.CGFloat a = v81;
    t1.CGFloat c = 0.0;
    t1.CGFloat b = 0.0;
    t1.CGFloat d = v82;
    t1.CGFloat tx = v84;
    t1.CGFloat ty = v83;
    CGAffineTransform t2 = v91;
    CGAffineTransformConcat(&v91, &t1, &t2);
    CGAffineTransform t1 = v91;
    v95.origin.CGFloat x = 0.0;
    v95.origin.CGFloat y = 0.0;
    v95.size.CGFloat width = 1.0;
    v95.size.CGFloat height = 1.0;
    CGRect v96 = CGRectApplyAffineTransform(v95, &t1);
    CGFloat x = v96.origin.x;
    CGFloat y = v96.origin.y;
    CGFloat width = v96.size.width;
    CGFloat height = v96.size.height;
  }
  else
  {
    CGFloat x = *MEMORY[0x263F001A0];
    CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
    CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
    CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double v27 = t1.a;
  double v28 = t1.b;
  double v29 = t1.c;
  double v30 = t1.d;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  CGFloat v31 = t1.a;
  double v84 = v27 - v29 * 0.0;
  double v83 = v28 - v30 * 0.0;
  v97.origin.CGFloat x = v27;
  v97.origin.CGFloat y = v28;
  v97.size.CGFloat width = v29;
  CGFloat v81 = v29;
  v97.size.CGFloat height = v30;
  CGFloat v82 = v30;
  double v32 = CGRectGetMidX(v97);
  v98.origin.CGFloat x = v27;
  v98.origin.CGFloat y = v28;
  v98.size.CGFloat width = v29;
  v98.size.CGFloat height = v30;
  double v33 = CGRectGetMidY(v98);
  CGAffineTransformMakeRotation(&t1, v31);
  long long v80 = *(_OWORD *)&t1.a;
  long long v79 = *(_OWORD *)&t1.c;
  CGFloat v34 = -v33;
  CGFloat v35 = t1.tx;
  CGFloat v36 = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -v32, v34);
  CGFloat v37 = t1.a;
  CGFloat v38 = t1.b;
  CGFloat v39 = t1.c;
  CGFloat v40 = t1.d;
  CGFloat v41 = t1.tx;
  CGFloat v42 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v80;
  *(_OWORD *)&t2.CGFloat c = v79;
  t2.CGFloat tx = v35;
  t2.CGFloat ty = v36;
  CGAffineTransformConcat(&v91, &t1, &t2);
  long long v80 = *(_OWORD *)&v91.a;
  long long v79 = *(_OWORD *)&v91.c;
  CGFloat v43 = v91.tx;
  CGFloat v44 = v91.ty;
  t1.CGFloat a = v37;
  t1.CGFloat b = v38;
  t1.CGFloat c = v39;
  t1.CGFloat d = v40;
  t1.CGFloat tx = v41;
  t1.CGFloat ty = v42;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v80;
  *(_OWORD *)&t1.CGFloat c = v79;
  t1.CGFloat tx = v43;
  t1.CGFloat ty = v44;
  CGAffineTransformConcat(&v91, &t1, &t2);
  t1.CGFloat a = v81;
  t1.CGFloat c = 0.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat d = v82;
  t1.CGFloat tx = v84;
  t1.CGFloat ty = v83;
  CGAffineTransform t2 = v91;
  CGAffineTransformConcat(&v91, &t1, &t2);
  CGAffineTransform t2 = v91;
  Shape.pathAndLineEnds(in:scale:)(&t2, (uint64_t)&t1, 1.0);
  CGFloat v45 = t1.a;
  CGFloat v46 = t1.b;
  CGFloat v47 = t1.c;
  double v84 = t1.d;
  double v83 = t1.tx;
  double v48 = t1.ty;
  double v49 = v88;
  CGFloat v82 = v89;
  CGFloat v81 = v90;
  CRRegister.wrappedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.getter();
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  uint64_t v51 = *(void *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v5, 1, v50) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  }
  else
  {
    TaggedValue_2.tagged1.getter();
    if (*(void *)&t1.b) {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v5, v50);
  }
  if (one-time initialization token for defaultMiterLimit != -1) {
    swift_once();
  }
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.CGFloat ty = 0.0;
  t1.CGFloat tx = 0.0;
  double v52 = (const CGPath *)CGPathRef.copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:)();
  PathBoundingBoCGFloat x = CGPathGetPathBoundingBox(v52);
  CGFloat v53 = PathBoundingBox.origin.x;
  CGFloat v54 = PathBoundingBox.origin.y;
  CGFloat v55 = PathBoundingBox.size.width;
  CGFloat v56 = PathBoundingBox.size.height;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  CRRegister.wrappedValue.getter();
  if (LOBYTE(v91.b))
  {
    char a_low = 1;
  }
  else
  {
    char a_low = LOBYTE(v91.a);
    if (!LOBYTE(v91.a)) {
      goto LABEL_16;
    }
  }
  char v86 = a_low;
  CRRegister.wrappedValue.getter();
  CGRect v58 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v46, v47, v48, v49, v85);
  if (v58)
  {
    CGRect v59 = v58;
    CGRect v107 = CGPathGetPathBoundingBox(v58);
    v100.origin.CGFloat x = v53;
    v100.origin.CGFloat y = v54;
    v100.size.CGFloat width = v55;
    v100.size.CGFloat height = v56;
    CGRect v101 = CGRectUnion(v100, v107);
    CGFloat v53 = v101.origin.x;
    CGFloat v54 = v101.origin.y;
    CGFloat v55 = v101.size.width;
    CGFloat v56 = v101.size.height;
  }
LABEL_16:
  CGFloat v60 = x;
  CGFloat v61 = y;
  CGFloat v62 = width;
  CGFloat v63 = height;
  CRRegister.wrappedValue.getter();
  if (LOBYTE(v91.b))
  {
    char v64 = 1;
  }
  else
  {
    char v64 = LOBYTE(v91.a);
    if (!LOBYTE(v91.a)) {
      goto LABEL_21;
    }
  }
  char v86 = v64;
  CRRegister.wrappedValue.getter();
  uint64_t v65 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v84, v83, v82, v81, v85);
  if (v65)
  {
    uint64_t v66 = v65;
    CGRect v108 = CGPathGetPathBoundingBox(v65);
    v102.origin.CGFloat x = v53;
    v102.origin.CGFloat y = v54;
    v102.size.CGFloat width = v55;
    v102.size.CGFloat height = v56;
    CGRect v103 = CGRectUnion(v102, v108);
    CGFloat v53 = v103.origin.x;
    CGFloat v54 = v103.origin.y;
    CGFloat v55 = v103.size.width;
    CGFloat v56 = v103.size.height;
  }
LABEL_21:
  v104.origin.CGFloat x = v53;
  v104.origin.CGFloat y = v54;
  v104.size.CGFloat width = v55;
  v104.size.CGFloat height = v56;
  v109.origin.CGFloat x = v60;
  v109.origin.CGFloat y = v61;
  v109.size.CGFloat width = v62;
  v109.size.CGFloat height = v63;
  CGRect v105 = CGRectUnion(v104, v109);
  CGFloat v67 = v105.origin.x;
  CGFloat v68 = v105.origin.y;
  CGFloat v69 = v105.size.width;
  CGFloat v70 = v105.size.height;

  double v71 = v67;
  double v72 = v68;
  double v73 = v69;
  double v74 = v70;
  result.size.CGFloat height = v74;
  result.size.CGFloat width = v73;
  result.origin.CGFloat y = v72;
  result.origin.CGFloat x = v71;
  return result;
}

void Shape.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3, __C::CGRect_optional *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v213 = a8;
  uint64_t v215 = a7;
  uint64_t v214 = a5;
  uint64_t v220 = a2;
  v225 = a4;
  outlined init with take of CGRect?((uint64_t)a4, (uint64_t)v238);
  double v191 = v239;
  uint64_t v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v199 = *(void *)(v216 - 8);
  MEMORY[0x270FA5388](v216);
  v210 = (char *)&v186 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v14 - 8);
  v192 = (char *)&v186 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  uint64_t v195 = *(void *)(v197 - 8);
  MEMORY[0x270FA5388](v197);
  v194 = (char *)&v186 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v222 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>));
  uint64_t v212 = *(void *)(*(void *)&v222 - 8);
  MEMORY[0x270FA5388](*(void *)&v222);
  uint64_t v198 = (char *)&v186 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v196 = (char *)&v186 - v19;
  uint64_t v20 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v20);
  long long v190 = (char *)&v186 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  CGFloat v24 = (char *)&v186 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v209 = (uint64_t)&v186 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v27 - 8);
  double v29 = (char *)&v186 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  double v32 = (char *)&v186 - v31;
  uint64_t v221 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v224 = *(unsigned int (***)(void, void, void))(v221 - 8);
  MEMORY[0x270FA5388](v221);
  CGFloat v34 = (char *)&v186 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v219 = (uint64_t)&v186 - v36;
  uint64_t v218 = type metadata accessor for Date();
  uint64_t v217 = *(void *)(v218 - 8);
  MEMORY[0x270FA5388](v218);
  CGFloat v38 = (char *)&v186 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v211 = *a1;
  double v39 = *(double *)a6;
  CGFloat v208 = *(double *)(a6 + 8);
  CGFloat v207 = *(double *)(a6 + 16);
  CGFloat v206 = *(double *)(a6 + 24);
  double v205 = *(double *)(a6 + 32);
  double v204 = *(double *)(a6 + 40);
  uint64_t v203 = *(void *)(a6 + 48);
  uint64_t v202 = *(void *)(a6 + 56);
  uint64_t v201 = *(void *)(a6 + 64);
  int v200 = *(unsigned __int8 *)(a6 + 74);
  int v40 = *(unsigned __int16 *)(a6 + 72);
  type metadata accessor for CanvasElementPDFAnnotation();
  v227 = (unsigned char *)swift_dynamicCastClass();
  if (!v227) {
    return;
  }
  int v187 = v40;
  CGFloat v188 = v39;
  uint64_t v186 = v24;
  uint64_t v226 = v20;
  uint64_t v41 = v9;
  uint64_t v42 = v9 + *(int *)(v20 + 52);
  uint64_t v189 = type metadata accessor for ShapeSecondaryProperties();
  uint64_t v43 = v42;
  uint64_t v44 = v42 + *(int *)(v189 + 28);
  id v45 = a3;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  uint64_t v223 = v44;
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(v230.origin.x) & 0x20) != 0)
  {
    CGFloat v47 = v227;
    if ((LOBYTE(v230.origin.x) & 0x40) != 0)
    {
      v227[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 1;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v220, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      uint64_t v51 = v224;
      uint64_t v52 = v221;
      if (((unsigned int (**)(char *, uint64_t, uint64_t))v224)[6](v29, 1, v221) == 1)
      {

        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
        return;
      }
      ((unsigned int (**)(char *, char *, uint64_t))v51)[4](v34, v29, v52);
      unint64_t v78 = v211;
      long long v79 = (void *)v211;
      if (v211 >> 62)
      {
        if (v211 >> 62 != 1)
        {
          ((void (*)(char *, uint64_t))v51[1])(v34, v52);

          return;
        }
        unint64_t v78 = v211;
        long long v79 = (void *)(v211 & 0x3FFFFFFFFFFFFFFFLL);
      }
      outlined copy of PaperDocument.PDFDocumentUse(v78);
      uint64_t v80 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
      specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(v79, (uint64_t)v34, 0, v214, v226, v215, v80, (uint64_t)&protocol witness table for Shape, v213);
      outlined consume of PaperDocument.PDFDocumentUse(v78);

      ((void (*)(char *, uint64_t))v51[1])(v34, v52);
      return;
    }
  }
  else
  {
    CGFloat v47 = v227;
  }
  v47[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  Shape.setAKAnnotation(on:in:)((uint64_t)v47, (uint64_t)v225);
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(v230.origin.x) & 0x40) == 0)
  {
    double v48 = *(void **)&v47[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation];
    if (v48)
    {
      id v49 = v45;
      id v50 = v48;
      objc_msgSend(v50, sel_drawingBounds);
      objc_msgSend(v47, sel_setBounds_);
    }
    else
    {
      __C::CGRect v242 = Shape.renderFrame(in:)(v225);
      CGFloat x = v242.origin.x;
      double y = v242.origin.y;
      CGFloat width = v242.size.width;
      CGFloat height = v242.size.height;
      id v57 = objc_msgSend(v47, sel_page);
      if (v57)
      {
        CGRect v58 = v57;
        objc_msgSend(v57, sel_boundsForBox_, 0);
        double v60 = v59;
        double v62 = v61;

        v243.origin.CGFloat x = x;
        v243.origin.double y = y;
        v243.size.CGFloat width = width;
        v243.size.CGFloat height = height;
        CGFloat MinX = CGRectGetMinX(v243);
        v244.origin.CGFloat x = x;
        v244.origin.double y = y;
        v244.size.CGFloat width = width;
        v244.size.CGFloat height = height;
        double v64 = v62 + v60 + v60 - CGRectGetMaxY(v244);
        v245.origin.CGFloat x = x;
        v245.origin.double y = y;
        v245.size.CGFloat width = width;
        v245.size.CGFloat height = height;
        CGFloat v65 = CGRectGetWidth(v245);
        v246.origin.CGFloat x = x;
        v246.origin.double y = y;
        v246.size.CGFloat width = width;
        v246.size.CGFloat height = height;
        CGFloat height = CGRectGetHeight(v246);
        CGFloat width = v65;
        CGFloat x = MinX;
        double y = v64;
      }
      id v66 = v45;
      v247.origin.CGFloat x = x;
      v247.origin.double y = y;
      v247.size.CGFloat width = width;
      v247.size.CGFloat height = height;
      CGRect v248 = CGRectIntegral(v247);
      objc_msgSend(v47, sel_setBounds_, v248.origin.x, v248.origin.y, v248.size.width, v248.size.height);
    }
  }
  uint64_t v193 = v46;
  id v67 = v45;
  Date.init()();
  isCGFloat a = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v217 + 8))(v38, v218);
  objc_msgSend(v47, sel_setModificationDate_, isa);

  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v220, (uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  CGFloat v69 = v224;
  uint64_t v70 = v221;
  if (((unsigned int (**)(char *, uint64_t, uint64_t))v224)[6](v32, 1, v221) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    uint64_t v71 = v216;
    uint64_t v72 = v41;
    uint64_t v73 = v226;
    goto LABEL_25;
  }
  ((unsigned int (**)(uint64_t, char *, uint64_t))v69)[4](v219, v32, v70);
  unint64_t v74 = v211;
  unint64_t v75 = (void *)v211;
  uint64_t v71 = v216;
  uint64_t v72 = v41;
  uint64_t v73 = v226;
  if (!(v211 >> 62)) {
    goto LABEL_19;
  }
  if (v211 >> 62 == 1)
  {
    unint64_t v75 = (void *)(v211 & 0x3FFFFFFFFFFFFFFFLL);
LABEL_19:
    outlined copy of PaperDocument.PDFDocumentUse(v211);
    uint64_t v76 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    uint64_t v77 = v219;
    specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(v75, v219, 1, v214, v73, v215, v76, (uint64_t)&protocol witness table for Shape, v213);
    outlined consume of PaperDocument.PDFDocumentUse(v74);
    ((void (*)(uint64_t, uint64_t))v224[1])(v77, v70);
    goto LABEL_25;
  }
  ((void (*)(uint64_t, uint64_t))v224[1])(v219, v70);
LABEL_25:
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(v230.origin.x) & 0x20) != 0)
  {

    return;
  }
  int v81 = v187 | (v200 << 16);
  id v82 = v67;
  double v83 = (void *)CRAttributedString.attributedString.getter();
  id v84 = objc_msgSend(v83, sel_string);

  uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v87 = v86;

  if (!v85 && v87 == 0xE000000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v88 = v209;
    _s8PaperKit5ShapeVWOcTm_0(v72, v209, (uint64_t (*)(void))type metadata accessor for Shape);
LABEL_31:
    outlined destroy of Shape(v88);
    goto LABEL_32;
  }
  char v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v88 = v209;
  _s8PaperKit5ShapeVWOcTm_0(v72, v209, (uint64_t (*)(void))type metadata accessor for Shape);
  if (v89) {
    goto LABEL_31;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  CGFloat v94 = v230.origin.x;
  outlined destroy of Shape(v88);
  if (v94 == 0.0)
  {
LABEL_32:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    CGFloat v90 = v196;
    CRRegister.wrappedValue.getter();
    CGAffineTransform v91 = v194;
    TaggedValue_9.taggedEnum.getter();
    int v92 = (*(uint64_t (**)(char *, uint64_t))(v195 + 88))(v91, v197);
    if (v92 != *MEMORY[0x263F32DC0])
    {
      if (v92 == *MEMORY[0x263F32DC8])
      {
        CGRect v93 = (id *)MEMORY[0x263F147D8];
        goto LABEL_40;
      }
      if (v92 == *MEMORY[0x263F32DD0])
      {
        CGRect v93 = (id *)MEMORY[0x263F147F8];
        goto LABEL_40;
      }
      if (v92 != *MEMORY[0x263F32DE8])
      {
        uint64_t v149 = *(void (**)(char *, uint64_t))(v195 + 8);
        id v98 = (id)*MEMORY[0x263F14818];
        v149(v194, v197);
        CGFloat v90 = v196;
        goto LABEL_41;
      }
    }
    CGRect v93 = (id *)MEMORY[0x263F14810];
LABEL_40:
    id v98 = *v93;
LABEL_41:
    (*(void (**)(char *, double))(v212 + 8))(v90, COERCE_DOUBLE(*(void *)&v222));
    uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v97 = v99;

    goto LABEL_42;
  }
  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v97 = v96;
LABEL_42:
  CGRect v100 = (void *)MEMORY[0x21054D080](v95, v97);
  swift_bridgeObjectRelease();
  objc_msgSend(v47, sel_setType_, v100);

  v230.origin.CGFloat x = v188;
  v230.origin.double y = v208;
  v230.size.CGFloat width = v207;
  v230.size.CGFloat height = v206;
  double v231 = v205;
  double v232 = v204;
  uint64_t v233 = v203;
  uint64_t v234 = v202;
  uint64_t v235 = v201;
  char v237 = BYTE2(v81);
  __int16 v236 = v81;
  CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)((uint64_t)v225, v72, v214, (uint64_t)&v230, v215, v73, v213, (uint64_t)&protocol witness table for Shape);
  id v101 = v82;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  CGFloat v102 = v230.origin.x;
  if (*(void *)&v230.origin.x)
  {
    id v103 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&v230.origin.x);
  }
  else
  {
    id v103 = 0;
  }
  id v104 = v227;
  objc_msgSend(v227, sel_setInteriorColor_, v103);
  v224 = (unsigned int (**)(void, void, void))v101;

  CRRegister.wrappedValue.getter();
  CGFloat v105 = v230.origin.x;
  if (*(void *)&v230.origin.x)
  {
    id v106 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&v230.origin.x);

    objc_msgSend(v104, sel_setColor_, v106);
    id v107 = objc_msgSend(v104, sel_border);
    if (!v107) {
      id v107 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14730]), sel_init);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    objc_msgSend(v107, sel_setLineWidth_, v230.origin.x);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
    uint64_t v108 = (uint64_t)v192;
    CRRegister.wrappedValue.getter();
    uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
    uint64_t v110 = *(void *)(v109 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v108, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
      CGFloat v111 = 0.0;
    }
    else
    {
      TaggedValue_2.tagged1.getter();
      CGFloat v111 = v230.origin.y;
      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v108, v109);
      if (v111 != 0.0)
      {
        specialized _arrayForceCast<A, B>(_:)(*(uint64_t *)&v111);
        swift_bridgeObjectRelease();
        CGFloat v111 = *(double *)&Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v112 = v199;
    objc_msgSend(v107, sel_setDashPattern_, *(void *)&v111);

    id v104 = v227;
    objc_msgSend(v227, sel_setBorder_, v107);
  }
  else
  {
    objc_msgSend(v104, sel_removeValueForAnnotationKey_, *MEMORY[0x263F14780]);
    objc_msgSend(v104, sel_setBorder_, 0);
    uint64_t v112 = v199;
  }
  uint64_t v113 = v210;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  Class v114 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  uint64_t v115 = (void *)MEMORY[0x21054D080](4277039, 0xE300000000000000);
  objc_msgSend(v104, sel_setValue_forAnnotationKey_, v114, v115);

  (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v113, v43, v71);
  unint64_t v116 = (void *)CRAttributedString.attributedString.getter();
  id v117 = objc_msgSend(v116, sel_string);

  uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v120 = v119;

  if (v118 || v120 != 0xE000000000000000)
  {
    char v121 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v121 & 1) == 0)
    {
      uint64_t v135 = v224;
      uint64_t v136 = (void *)CRAttributedString.attributedString.getter();
      id v137 = objc_msgSend(v136, sel_string);

      if (!v137)
      {
        uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v137 = (id)MEMORY[0x21054D080](v138);
        swift_bridgeObjectRelease();
      }
      objc_msgSend(v227, sel_setContents_, v137);

      CGRect v139 = (void *)CRAttributedString.attributedString.getter();
      CGRect v140 = (void *)CRAttributedString.attributedString.getter();
      CGRect v141 = (char *)objc_msgSend(v140, sel_length);

      if (__OFSUB__(v141, 1))
      {
        __break(1u);
        JUMPOUT(0x20C738ED8);
      }
      id v142 = objc_msgSend(v139, sel_attributesAtIndex_effectiveRange_, v141 - 1, 0);

      type metadata accessor for NSAttributedStringKey(0);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      uint64_t v143 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v143 + 16))
      {
        CGRect v144 = (void *)*MEMORY[0x263F814F0];
        CGRect v145 = v135;
        id v146 = v144;
        uint64_t v147 = specialized __RawDictionaryStorage.find<A>(_:)(v146);
        uint64_t v113 = v210;
        if (v148) {
          outlined init with copy of Any(*(void *)(v143 + 56) + 32 * v147, (uint64_t)&v230);
        }
        else {
          memset(&v230, 0, sizeof(v230));
        }
      }
      else
      {
        memset(&v230, 0, sizeof(v230));
        uint64_t v150 = v135;
        uint64_t v113 = v210;
      }
      if (*(void *)&v230.size.height)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
        if (swift_dynamicCast()) {
          CGFloat v151 = v240.origin.x;
        }
        else {
          CGFloat v151 = 0.0;
        }
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v230, &demangling cache variable for type metadata for Any?);
        CGFloat v151 = 0.0;
      }
      objc_msgSend(v227, sel_setFont_, *(void *)&v151);

      if (*(void *)(v143 + 16))
      {
        uint64_t v152 = (void *)*MEMORY[0x263F81500];
        uint64_t v153 = v135;
        id v154 = v152;
        uint64_t v155 = specialized __RawDictionaryStorage.find<A>(_:)(v154);
        if (v156) {
          outlined init with copy of Any(*(void *)(v143 + 56) + 32 * v155, (uint64_t)&v230);
        }
        else {
          memset(&v230, 0, sizeof(v230));
        }
      }
      else
      {
        memset(&v230, 0, sizeof(v230));
        uint64_t v157 = v135;
      }
      if (*(void *)&v230.size.height)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        if (swift_dynamicCast()) {
          CGFloat v158 = v240.origin.x;
        }
        else {
          CGFloat v158 = 0.0;
        }
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v230, &demangling cache variable for type metadata for Any?);
        CGFloat v158 = 0.0;
      }
      objc_msgSend(v227, sel_setFontColor_, *(void *)&v158);

      if (*(void *)(v143 + 16))
      {
        id v159 = (id)*MEMORY[0x263F81540];
        uint64_t v160 = specialized __RawDictionaryStorage.find<A>(_:)(v159);
        if (v161) {
          outlined init with copy of Any(*(void *)(v143 + 56) + 32 * v160, (uint64_t)&v230);
        }
        else {
          memset(&v230, 0, sizeof(v230));
        }
      }
      else
      {
        memset(&v230, 0, sizeof(v230));
      }
      swift_bridgeObjectRelease();
      if (*(void *)&v230.size.height)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
        if (swift_dynamicCast())
        {
          CGFloat v162 = v240.origin.x;
          uint64_t v163 = v135;
          id v164 = objc_msgSend(*(id *)&v162, sel_alignment);
          objc_msgSend(v227, sel_setAlignment_, v164);
        }
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v230, &demangling cache variable for type metadata for Any?);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  if (v232 == 0.0)
  {
    CGFloat v122 = 0.0;
    char v123 = 0;
  }
  else
  {
    CGFloat v122 = v230.origin.x;
    char v123 = LOBYTE(v230.origin.y) & 1;
    swift_bridgeObjectRelease();
  }
  v230.origin.CGFloat x = v122;
  LOBYTE(v230.origin.y) = v123;
  v240.origin.CGFloat x = 0.0;
  LOBYTE(v240.origin.y) = 0;
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  if ((static CRExtensible.== infix(_:_:)() & 1) == 0)
  {
    Class v124 = Bool._bridgeToObjectiveC()().super.super.isa;
    long long v125 = (void *)MEMORY[0x21054D080](0x46533A4C5041412FLL, 0xE900000000000046);
    objc_msgSend(v227, sel_setValue_forAnnotationKey_, v124, v125);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  long long v126 = v198;
  CRRegister.wrappedValue.getter();
  double v127 = v222;
  TaggedValue_9.tagged3.getter();
  (*(void (**)(char *, double))(v212 + 8))(v126, COERCE_DOUBLE(*(void *)&v127));
  if (v233)
  {
    id v128 = v227;
    id v129 = v224;
  }
  else
  {
    double v222 = v232;
    double v130 = v231;
    double v131 = v230.origin.y;
    double v132 = v230.origin.x;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
    CRRegister.wrappedValue.getter();
    id v129 = v224;
    if (LOBYTE(v230.origin.y))
    {
      uint64_t v133 = 5;
      uint64_t v134 = (uint64_t)v190;
LABEL_110:
      objc_msgSend(v227, sel_setStartLineStyle_, v133);
    }
    else
    {
      uint64_t v133 = 5;
      uint64_t v134 = (uint64_t)v190;
      switch(LOBYTE(v230.origin.x))
      {
        case 1:
        case 2:
        case 8:
          goto LABEL_110;
        case 3:
        case 4:
          uint64_t v133 = 2;
          goto LABEL_110;
        case 5:
        case 6:
          uint64_t v133 = 1;
          goto LABEL_110;
        case 7:
          uint64_t v133 = 0;
          goto LABEL_110;
        default:
          break;
      }
    }
    CRRegister.wrappedValue.getter();
    if (LOBYTE(v230.origin.y))
    {
      uint64_t v165 = 5;
LABEL_117:
      objc_msgSend(v227, sel_setEndLineStyle_, v165);
    }
    else
    {
      uint64_t v165 = 5;
      switch(LOBYTE(v230.origin.x))
      {
        case 1:
        case 2:
        case 8:
          goto LABEL_117;
        case 3:
        case 4:
          uint64_t v165 = 2;
          goto LABEL_117;
        case 5:
        case 6:
          uint64_t v165 = 1;
          goto LABEL_117;
        case 7:
          uint64_t v165 = 0;
          goto LABEL_117;
        default:
          break;
      }
    }
    id v166 = v129;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    CGFloat v168 = v230.origin.y;
    CGFloat v167 = v230.origin.x;
    CGSize size = v230.size;
    double v170 = CGRectGetMinX(v230);
    v249.origin.CGFloat x = v167;
    v249.origin.double y = v168;
    v249.CGSize size = size;
    double v171 = v170 + v132 * CGRectGetWidth(v249);
    v250.origin.CGFloat x = v167;
    v250.origin.double y = v168;
    v250.CGSize size = size;
    double MinY = CGRectGetMinY(v250);
    v251.origin.CGFloat x = v167;
    v251.origin.double y = v168;
    v251.CGSize size = size;
    double v173 = MinY + v131 * CGRectGetHeight(v251);
    uint64_t v174 = (uint64_t)v186;
    _s8PaperKit5ShapeVWOcTm_0(v72, (uint64_t)v186, (uint64_t (*)(void))type metadata accessor for Shape);
    outlined init with take of CGRect?((uint64_t)v225, (uint64_t)&v230);
    if (LOBYTE(v231))
    {
      CRRegister.wrappedValue.getter();
      double v175 = v240.size.height;
      outlined destroy of Shape(v174);
    }
    else
    {
      outlined destroy of Shape(v174);
      double v175 = v191;
    }
    objc_msgSend(v227, sel_setStartPoint_, v171, v175 - v173);

    id v176 = v166;
    CRRegister.wrappedValue.getter();
    CGFloat v177 = v240.origin.x;
    CGFloat v178 = v240.origin.y;
    CGFloat v179 = v240.size.width;
    CGFloat v180 = v240.size.height;
    double v181 = CGRectGetMinX(v240);
    v252.origin.CGFloat x = v177;
    v252.origin.double y = v178;
    v252.size.CGFloat width = v179;
    v252.size.CGFloat height = v180;
    double v182 = v181 + v130 * CGRectGetWidth(v252);
    v253.origin.CGFloat x = v177;
    v253.origin.double y = v178;
    v253.size.CGFloat width = v179;
    v253.size.CGFloat height = v180;
    double v183 = CGRectGetMinY(v253);
    v254.origin.CGFloat x = v177;
    v254.origin.double y = v178;
    v254.size.CGFloat width = v179;
    v254.size.CGFloat height = v180;
    double v184 = v183 + v222 * CGRectGetHeight(v254);
    _s8PaperKit5ShapeVWOcTm_0(v72, v134, (uint64_t (*)(void))type metadata accessor for Shape);
    outlined init with take of CGRect?((uint64_t)v225, (uint64_t)&v240);
    if (v241)
    {
      CRRegister.wrappedValue.getter();
      double v185 = v229;
      outlined destroy of Shape(v134);
    }
    else
    {
      outlined destroy of Shape(v134);
      double v185 = v191;
    }
    id v128 = v227;
    objc_msgSend(v227, sel_setEndPoint_, v182, v185 - v184);
  }
  CRRegister.wrappedValue.getter();
  objc_msgSend(v128, sel_setHidden_, v228 & 1);
  CRRegister.wrappedValue.getter();
  objc_msgSend(v128, sel_setReadOnlyAnnotation_, (v228 >> 1) & 1);
  CRRegister.wrappedValue.getter();
  objc_msgSend(v128, sel_setLocked_, (v228 >> 2) & 1);
  CRRegister.wrappedValue.getter();
  if ((v228 & 0x100) != 0)
  {
    objc_msgSend(v128, sel_setShouldBurnIn_, 1);

    (*(void (**)(char *, uint64_t))(v112 + 8))(v113, v71);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v112 + 8))(v113, v71);
  }
}

void Shape.setAKAnnotation(on:in:)(uint64_t a1, uint64_t a2)
{
  CGFloat v3 = v2;
  uint64_t v140 = *MEMORY[0x263EF8340];
  uint64_t v123 = a2;
  outlined init with take of CGRect?(a2, (uint64_t)v129);
  double v5 = v130;
  double v6 = v131;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v116 = (char *)v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v120 = (char *)v114 - v10;
  uint64_t v11 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v11);
  id v117 = (char *)v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  double v124 = *(double *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v121 = (char *)v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v114 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v114 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)v114 - v22;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v114 - v25;
  id v27 = Shape.akAnnotation(for:)(a1);
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)&v2 + *(int *)(v11 + 52);
    v114[0] = type metadata accessor for ShapeSecondaryProperties();
    uint64_t v30 = *(int *)(v114[0] + 28);
    v114[1] = v29;
    uint64_t v31 = v29 + v30;
    uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    uint64_t v119 = v31;
    CRRegister.wrappedValue.getter();
    if ((LOBYTE(v126.origin.x) & 0x20) != 0 && (LOBYTE(v126.origin.x) & 0x40) != 0) {
      goto LABEL_48;
    }
    self;
    uint64_t v32 = swift_dynamicCastObjCClass();
    uint64_t v115 = a1;
    if (v32)
    {
      uint64_t v33 = (void *)v32;
      id v34 = v28;
      Shape.addAKRectangularShapeAnnotationProperties(to:in:)(v33, v123);
    }
    else
    {
      self;
      uint64_t v35 = swift_dynamicCastObjCClass();
      if (v35)
      {
        uint64_t v36 = (void *)v35;
        id v37 = v28;
        Shape.addAKArrowAnnotationProperties(to:in:)(v36, v123);
      }
      else
      {
        self;
        uint64_t v38 = swift_dynamicCastObjCClass();
        if (!v38)
        {
          self;
          uint64_t v38 = swift_dynamicCastObjCClass();
          if (!v38)
          {
LABEL_13:
            CGFloat v122 = v3;
            self;
            uint64_t v49 = swift_dynamicCastObjCClass();
            if (v49)
            {
              id v50 = (void *)v49;
              id v51 = v28;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
              CRRegister.wrappedValue.getter();
              TaggedValue_9.tagged6.getter();
              (*(void (**)(char *, uint64_t))(*(void *)&v124 + 8))(v26, v13);
              if ((LOBYTE(v126.origin.y) & 1) == 0)
              {
                double x = v126.origin.x;
                CRRegister.wrappedValue.getter();
                if ((LOBYTE(v126.origin.x) & 0x20) == 0)
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
                  CRRegister.wrappedValue.getter();
                  double Width = CGRectGetWidth(v126);
                  CRRegister.wrappedValue.getter();
                  double Height = CGRectGetHeight(v126);
                  if (Height >= Width) {
                    double Height = Width;
                  }
                  objc_msgSend(v50, sel_setCornerRadius_, x * Height);
                }
                goto LABEL_46;
              }
            }
            self;
            uint64_t v52 = swift_dynamicCastObjCClass();
            if (v52)
            {
              CGFloat v53 = (void *)v52;
              id v51 = v28;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
              CRRegister.wrappedValue.getter();
              TaggedValue_9.tagged7.getter();
              (*(void (**)(char *, uint64_t))(*(void *)&v124 + 8))(v23, v13);
              if (LOBYTE(v126.origin.y) != 1)
              {
                CGFloat v85 = v126.origin.x;
                CRRegister.wrappedValue.getter();
                if ((LOBYTE(v126.origin.x) & 0x20) == 0) {
                  objc_msgSend(v53, sel_setPointCount_, *(void *)&v85);
                }
                goto LABEL_46;
              }
            }
            self;
            uint64_t v54 = swift_dynamicCastObjCClass();
            if (v54)
            {
              CGFloat v55 = (void *)v54;
              id v51 = v28;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
              CRRegister.wrappedValue.getter();
              TaggedValue_9.tagged8.getter();
              (*(void (**)(char *, uint64_t))(*(void *)&v124 + 8))(v20, v13);
              if ((LOBYTE(v126.size.width) & 1) == 0)
              {
                double y = v126.origin.y;
                CRRegister.wrappedValue.getter();
                if ((LOBYTE(v126.origin.x) & 0x20) == 0)
                {
                  objc_msgSend(v55, sel_setPointCount_, 5);
                  objc_msgSend(v55, sel_setInnerRadiusFactor_, y);
                }
                goto LABEL_46;
              }
            }
            self;
            uint64_t v56 = swift_dynamicCastObjCClass();
            uint64_t v57 = *(void *)&v122;
            if (!v56) {
              goto LABEL_25;
            }
            CGRect v58 = (void *)v56;
            id v51 = v28;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
            CRRegister.wrappedValue.getter();
            TaggedValue_9.tagged5.getter();
            (*(void (**)(char *, uint64_t))(*(void *)&v124 + 8))(v17, v13);
            if (LOBYTE(v126.size.height))
            {

LABEL_25:
              self;
              uint64_t v59 = swift_dynamicCastObjCClass();
              a1 = v115;
              if (v59)
              {
                double v60 = (void *)v59;
                double v61 = v28;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
                double v62 = v121;
                CRRegister.wrappedValue.getter();
                TaggedValue_9.tagged4.getter();
                (*(void (**)(char *, uint64_t))(*(void *)&v124 + 8))(v62, v13);
                CGFloat v63 = v126.origin.x;
                if (*(void *)&v126.origin.x)
                {
                  double v64 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>));
                  CRRegister.wrappedValue.getter();
                  objc_msgSend(v60, sel_setRectangle_, v126.origin.x, v126.origin.y, v126.size.width, v126.size.height);
                  outlined init with take of CGRect?(v123, (uint64_t)v132);
                  if ((v135 & 1) == 0)
                  {
                    double v65 = v133;
                    double v66 = v134;
                    objc_msgSend(v60, sel_rectangle);
                    CGFloat v67 = v145.origin.x;
                    CGFloat v68 = v145.origin.y;
                    CGFloat v69 = v145.size.width;
                    CGFloat v70 = v145.size.height;
                    double MinX = CGRectGetMinX(v145);
                    v146.origin.double x = v67;
                    v146.origin.double y = v68;
                    v146.size.CGFloat width = v69;
                    v146.size.CGFloat height = v70;
                    double v72 = v66 + v65 + v65 - CGRectGetMaxY(v146);
                    v147.origin.double x = v67;
                    v147.origin.double y = v68;
                    v147.size.CGFloat width = v69;
                    v147.size.CGFloat height = v70;
                    double v73 = CGRectGetWidth(v147);
                    v148.origin.double x = v67;
                    v148.origin.double y = v68;
                    v148.size.CGFloat width = v69;
                    v148.size.CGFloat height = v70;
                    objc_msgSend(v60, sel_setRectangle_, MinX, v72, v73, CGRectGetHeight(v148));
                  }
                  CRRegister.wrappedValue.getter();
                  if ((LOBYTE(v126.origin.x) & 0x20) == 0)
                  {
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
                    CRRegister.value.getter();
                    objc_msgSend(v60, sel_setRotationAngle_, -v126.origin.x);
                    CRRegister.wrappedValue.getter();
                    objc_msgSend(v60, sel_setStrokeWidth_, v126.origin.x);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
                    CRRegister.wrappedValue.getter();
                    CGFloat v74 = v126.origin.x;
                    id v117 = v61;
                    double v124 = v64;
                    if (*(void *)&v126.origin.x)
                    {
                      id v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&v126.origin.x);

                      CRRegister.wrappedValue.getter();
                      CGFloat v74 = COERCE_DOUBLE(objc_msgSend(v75, sel_colorWithAlphaComponent_, v125));
                    }
                    objc_msgSend(v60, sel_setStrokeColor_, *(void *)&v74);

                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
                    uint64_t v76 = v120;
                    CRRegister.wrappedValue.getter();
                    uint64_t v77 = (uint64_t)v76;
                    uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
                    uint64_t v79 = *(void *)(v78 - 8);
                    uint64_t v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
                    if (v80(v77, 1, v78) == 1)
                    {
                      outlined destroy of StocksKitCurrencyCache.Provider?(v77, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
                      BOOL v81 = 0;
                    }
                    else
                    {
                      TaggedValue_2.tagged1.getter();
                      if (*(void *)&v126.origin.y)
                      {
                        uint64_t v101 = *(void *)(*(void *)&v126.origin.y + 16);
                        swift_bridgeObjectRelease();
                        BOOL v81 = v101 != 0;
                      }
                      else
                      {
                        BOOL v81 = 0;
                      }
                      (*(void (**)(char *, uint64_t))(v79 + 8))(v120, v78);
                    }
                    objc_msgSend(v60, sel_setDashed_, v81);
                    uint64_t v102 = (uint64_t)v116;
                    CRRegister.wrappedValue.getter();
                    if (v80(v102, 1, v78) == 1)
                    {
                      outlined destroy of StocksKitCurrencyCache.Provider?(v102, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
                      uint64_t x_low = 0;
                      a1 = v115;
                      id v104 = v117;
                    }
                    else
                    {
                      TaggedValue_2.tagged2.getter();
                      a1 = v115;
                      id v104 = v117;
                      if (LOBYTE(v126.origin.y)) {
                        uint64_t x_low = 0;
                      }
                      else {
                        uint64_t x_low = LOBYTE(v126.origin.x);
                      }
                      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v102, v78);
                    }
                    objc_msgSend(v60, sel_setBrushStyle_, x_low);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
                    CRRegister.wrappedValue.getter();
                    CGFloat v105 = v126.size.height;
                    if (*(void *)&v126.size.height) {

                    }
                    objc_msgSend(v60, sel_setHasShadow_, *(void *)&v105 != 0);
                    id v106 = *(id *)&v63;
                    CRRegister.wrappedValue.getter();
                    double v107 = CGRectGetMinX(v126);
                    CRRegister.wrappedValue.getter();
                    double MaxY = CGRectGetMaxY(v126);
                    CRRegister.wrappedValue.getter();
                    double v109 = CGRectGetWidth(v126);
                    CRRegister.wrappedValue.getter();
                    CGFloat v110 = CGRectGetHeight(v126);
                    v126.origin.double x = v109;
                    v126.size.CGFloat width = 0.0;
                    v126.origin.double y = 0.0;
                    v126.size.CGFloat height = -v110;
                    double v127 = v107 - v109 * 0.0;
                    double v128 = MaxY + v110 * 0.0;
                    uint64_t v111 = MEMORY[0x21054F0D0](v106, &v126);
                    if (!v111)
                    {
                      __break(1u);
                      return;
                    }
                    uint64_t v112 = (void *)v111;
                    id v113 = objc_msgSend(self, sel_bezierPathWithCGPath_, v111);

                    objc_msgSend(v60, sel_setPath_, v113);
                    goto LABEL_48;
                  }
                }
              }
LABEL_48:
              CGRect v100 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation);
              *(void *)(a1 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation) = v28;

              return;
            }
            double v87 = v126.size.width;
            double v88 = v126.origin.y;
            double v89 = v126.origin.x;
            CRRegister.wrappedValue.getter();
            if ((LOBYTE(v126.origin.x) & 0x20) == 0)
            {
              objc_msgSend(v58, sel_setPointyBitBaseWidthAngle_, v87 * 180.0 / 3.14159265 + v87 * 180.0 / 3.14159265);
              id v90 = v51;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
              CRRegister.wrappedValue.getter();
              double v124 = v88;
              CGFloat v91 = v126.origin.x;
              CGFloat v92 = v126.origin.y;
              CGFloat v93 = v126.size.width;
              CGFloat v94 = v126.size.height;
              double v95 = CGRectGetMinX(v126);
              v149.origin.double x = v91;
              v149.origin.double y = v92;
              v149.size.CGFloat width = v93;
              v149.size.CGFloat height = v94;
              double v96 = v95 + v89 * CGRectGetWidth(v149);
              v150.origin.double x = v91;
              v150.origin.double y = v92;
              v150.size.CGFloat width = v93;
              v150.size.CGFloat height = v94;
              double MinY = CGRectGetMinY(v150);
              v151.origin.double x = v91;
              v151.origin.double y = v92;
              v151.size.CGFloat width = v93;
              v151.size.CGFloat height = v94;
              double v98 = MinY + v124 * CGRectGetHeight(v151);
              uint64_t v99 = (uint64_t)v117;
              _s8PaperKit5ShapeVWOcTm_0(v57, (uint64_t)v117, (uint64_t (*)(void))type metadata accessor for Shape);
              outlined init with take of CGRect?(v123, (uint64_t)&v126);
              if (LOBYTE(v127) == 1)
              {
                CRRegister.wrappedValue.getter();
                double v5 = v133;
                double v6 = v134;
              }
              outlined destroy of Shape(v99);
              objc_msgSend(v58, sel_setPointyBitPoint_, v96, v6 + v5 + v5 - v98);

              goto LABEL_47;
            }
LABEL_46:

LABEL_47:
            a1 = v115;
            goto LABEL_48;
          }
        }
        double v39 = (void *)v38;
        id v40 = v28;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.getter();
        objc_msgSend(v39, sel_setRectangle_, v126.origin.x, v126.origin.y, v126.size.width, v126.size.height);
        outlined init with take of CGRect?(v123, (uint64_t)v136);
        if ((v139 & 1) == 0)
        {
          double v41 = v137;
          double v42 = v138;
          objc_msgSend(v39, sel_rectangle);
          CGFloat v43 = v141.origin.x;
          CGFloat v44 = v141.origin.y;
          CGFloat v45 = v141.size.width;
          CGFloat v46 = v141.size.height;
          CGFloat v122 = CGRectGetMinX(v141);
          v142.origin.double x = v43;
          v142.origin.double y = v44;
          v142.size.CGFloat width = v45;
          v142.size.CGFloat height = v46;
          double v47 = v42 + v41 + v41 - CGRectGetMaxY(v142);
          v143.origin.double x = v43;
          v143.origin.double y = v44;
          v143.size.CGFloat width = v45;
          v143.size.CGFloat height = v46;
          double v48 = CGRectGetWidth(v143);
          v144.origin.double x = v43;
          v144.origin.double y = v44;
          v144.size.CGFloat width = v45;
          v144.size.CGFloat height = v46;
          objc_msgSend(v39, sel_setRectangle_, v122, v47, v48, CGRectGetHeight(v144));
        }
      }
    }

    goto LABEL_13;
  }
}

double protocol witness for CanvasElement.rotation.getter in conformance Shape()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  return v1;
}

uint64_t protocol witness for CanvasElement.rotation.setter in conformance Shape(double a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t result = CRRegister.value.getter();
  if (vabdd_f64(v3, a1) > 0.01) {
    return CRRegister.value.setter();
  }
  return result;
}

void (*protocol witness for CanvasElement.rotation.modify in conformance Shape(void *a1))(void *a1)
{
  double v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Shape.rotation.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for CanvasElement.flags.getter in conformance Shape()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for CanvasElement.flags.setter in conformance Shape()
{
  return CRRegister.wrappedValue.setter();
}

void (*protocol witness for CanvasElement.flags.modify in conformance Shape(void *a1, uint64_t a2))(void **a1)
{
  double v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[2] = v2;
  *((_DWORD *)v5 + 8) = *(_DWORD *)(a2 + 52);
  *((_DWORD *)v5 + 9) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 28);
  v5[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  return Shape.flags.modify;
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Shape(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  double v3 = MEMORY[0x270FA5388](v2);
  v7[15] = 5;
  (*(void (**)(unsigned char *, uint64_t, double))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance Shape()
{
  return specialized Shape.indexableTextContent<A>(in:)();
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance Shape(uint64_t a1)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  long long v10 = *(_OWORD *)(a1 + 16);
  CGFloat v4 = *(double *)(a1 + 32);
  CGFloat v5 = *(double *)(a1 + 40);
  specialized CanvasElement.coordinateSpace.getter(&v13);
  CGAffineTransform t1 = v13;
  t2.CGFloat a = v2;
  t2.CGFloat b = v3;
  *(_OWORD *)&t2.CGFloat c = v10;
  t2.CGFloat tx = v4;
  t2.CGFloat ty = v5;
  CGAffineTransformConcat(&v11, &t1, &t2);
  CGAffineTransform t1 = v11;
  specialized CanvasElement.coordinateSpace.setter();
  double v6 = _stdlib_squareRoot(v2 * v2 + v3 * v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v7 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
  *uint64_t v8 = v6 * *v8;
  v7(&t2, 0);
  return CRAttributedString<>.apply(_:)((double *)a1);
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance Shape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Shape.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Shape.render<A>(in:id:capsule:options:));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v14(a1, a2, a4, a5, a6);
}

id Shape.akAnnotation(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v39 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  CGAffineTransform v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *(id *)(a1 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation);
  if (v14)
  {
    self;
    if (swift_dynamicCastObjCClass() || (self, swift_dynamicCastObjCClass()))
    {
      id v15 = v14;
      return v14;
    }
  }
  CGFloat v44 = v6;
  type metadata accessor for ShapeSecondaryProperties();
  id v16 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  if (v45)
  {
    if (v14)
    {
      self;
      uint64_t v17 = swift_dynamicCastObjCClass();

      if (v17) {
        return v14;
      }
    }
    uint64_t v18 = (objc_class *)MEMORY[0x263F24C60];
LABEL_25:
    id v14 = objc_msgSend(objc_allocWithZone(v18), sel_init);

    if (v14) {
      return v14;
    }
    goto LABEL_26;
  }
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged1.getter();
  uint64_t v43 = v11;
  id v40 = *(void (**)(char *, uint64_t))(v11 + 8);
  v40(v13, v10);
  char v19 = (char)v45;
  double v42 = (uint8_t *)v2;
  _s8PaperKit5ShapeVWOcTm_0(v2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Shape);
  if ((v19 & 1) == 0)
  {
    outlined destroy of Shape((uint64_t)v9);
LABEL_22:
    uint64_t v2 = (uint64_t)v42;
    uint64_t v11 = v43;
    if (v14)
    {
      self;
      uint64_t v22 = swift_dynamicCastObjCClass();

      if (v22) {
        return v14;
      }
    }
    uint64_t v18 = (objc_class *)MEMORY[0x263F24C20];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged6.getter();
  v40(v13, v10);
  outlined destroy of Shape((uint64_t)v9);
  if ((v46 & 1) == 0) {
    goto LABEL_22;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged2.getter();
  v40(v13, v10);
  if ((v45 & 1) == 0)
  {
    uint64_t v2 = (uint64_t)v42;
    uint64_t v11 = v43;
    if (v14)
    {
      self;
      uint64_t v33 = swift_dynamicCastObjCClass();

      if (v33) {
        return v14;
      }
    }
    uint64_t v18 = (objc_class *)MEMORY[0x263F24C08];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged7.getter();
  v40(v13, v10);
  if ((v46 & 1) == 0)
  {
    uint64_t v2 = (uint64_t)v42;
    uint64_t v11 = v43;
    if (v14)
    {
      self;
      uint64_t v34 = swift_dynamicCastObjCClass();

      if (v34) {
        return v14;
      }
    }
    uint64_t v18 = (objc_class *)MEMORY[0x263F24C18];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged8.getter();
  v40(v13, v10);
  if ((v47 & 1) == 0)
  {
    uint64_t v2 = (uint64_t)v42;
    uint64_t v11 = v43;
    if (v14)
    {
      self;
      uint64_t v35 = swift_dynamicCastObjCClass();

      if (v35) {
        return v14;
      }
    }
    uint64_t v18 = (objc_class *)MEMORY[0x263F24C48];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged5.getter();
  v40(v13, v10);
  if ((v48 & 1) == 0)
  {
    uint64_t v2 = (uint64_t)v42;
    uint64_t v11 = v43;
    if (v14)
    {
      self;
      uint64_t v36 = swift_dynamicCastObjCClass();

      if (v36) {
        return v14;
      }
    }
    uint64_t v18 = (objc_class *)MEMORY[0x263F24C40];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged3.getter();
  v40(v13, v10);
  if ((v49 & 1) == 0)
  {
    uint64_t v2 = (uint64_t)v42;
    uint64_t v11 = v43;
    if (v14)
    {
      self;
      uint64_t v37 = swift_dynamicCastObjCClass();

      if (v37) {
        return v14;
      }
    }
    uint64_t v18 = (objc_class *)MEMORY[0x263F24BA0];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged9.getter();
  v40(v13, v10);
  if ((v47 & 1) == 0)
  {
    uint64_t v2 = (uint64_t)v42;
    uint64_t v11 = v43;
    if (v14)
    {
      self;
      uint64_t v38 = swift_dynamicCastObjCClass();

      if (v38) {
        return v14;
      }
    }
    uint64_t v18 = (objc_class *)MEMORY[0x263F24BA8];
    goto LABEL_25;
  }
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged4.getter();
  v40(v13, v10);
  id v20 = v45;

  if (v20)
  {
    uint64_t v2 = (uint64_t)v42;
    uint64_t v11 = v43;
    if (v14)
    {
      self;
      uint64_t v21 = swift_dynamicCastObjCClass();

      if (v21) {
        return v14;
      }
    }
    uint64_t v18 = (objc_class *)MEMORY[0x263F24BC8];
    goto LABEL_25;
  }

  uint64_t v2 = (uint64_t)v42;
  uint64_t v11 = v43;
  if (v14) {
    return v14;
  }
LABEL_26:
  uint64_t v43 = v11;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)logger);
  uint64_t v24 = (uint64_t)v44;
  _s8PaperKit5ShapeVWOcTm_0(v2, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    id v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    id v45 = v28;
    *(_DWORD *)id v27 = 136315138;
    double v42 = v27 + 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    CRRegister.wrappedValue.getter();
    uint64_t v29 = TaggedValue_9<>.localizedName.getter();
    unint64_t v31 = v30;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v10);
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Shape(v24);
    _os_log_impl(&dword_20C2D7000, v25, v26, "Did not create AKAnnotation for Shape with shapeType: %s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v28, -1, -1);
    MEMORY[0x210550270](v27, -1, -1);
  }
  else
  {
    outlined destroy of Shape(v24);
  }

  return 0;
}

id Shape.addAKRectangularShapeAnnotationProperties(to:in:)(void *a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  objc_msgSend(a1, sel_setRectangle_, v50, v51, v52, v53);
  outlined init with take of CGRect?(a2, (uint64_t)v56);
  if ((v59 & 1) == 0)
  {
    double v12 = v57;
    double v13 = v58;
    objc_msgSend(a1, sel_rectangle);
    CGFloat x = v60.origin.x;
    CGFloat y = v60.origin.y;
    CGFloat width = v60.size.width;
    CGFloat height = v60.size.height;
    double MinX = CGRectGetMinX(v60);
    v61.origin.CGFloat x = x;
    v61.origin.CGFloat y = y;
    v61.size.CGFloat width = width;
    v61.size.CGFloat height = height;
    double v19 = v13 + v12 + v12 - CGRectGetMaxY(v61);
    v62.origin.CGFloat x = x;
    v62.origin.CGFloat y = y;
    v62.size.CGFloat width = width;
    v62.size.CGFloat height = height;
    double v20 = CGRectGetWidth(v62);
    v63.origin.CGFloat x = x;
    v63.origin.CGFloat y = y;
    v63.size.CGFloat width = width;
    v63.size.CGFloat height = height;
    objc_msgSend(a1, sel_setRectangle_, MinX, v19, v20, CGRectGetHeight(v63));
  }
  uint64_t v21 = type metadata accessor for Shape();
  uint64_t v22 = v2 + *(int *)(v21 + 52);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  id result = (id)CRRegister.wrappedValue.getter();
  if ((LOBYTE(v50) & 0x20) == 0)
  {
    v47[0] = v21;
    v47[1] = v2;
    Shape.addAKShapeAnnotationProperties(to:)(a1);
    objc_msgSend(a1, sel_originalModelBaseScaleFactor);
    double v24 = 1.0;
    if (v25 != 0.0)
    {
      objc_msgSend(a1, sel_originalModelBaseScaleFactor);
      double v24 = 1.0 / v26;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v22, v8);
    id v27 = (void *)CRAttributedString.attributedString.getter();
    id v28 = objc_msgSend(v27, sel_string);

    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    if (v29) {
      BOOL v32 = 0;
    }
    else {
      BOOL v32 = v31 == 0xE000000000000000;
    }
    if (v32)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      id v34 = 0;
    }
    else
    {
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      id v34 = 0;
      if ((v33 & 1) == 0)
      {
        id v35 = CRAttributedString<>.nsAttributedString.getter();
        id v36 = NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(v24);

        id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F816E8]), sel_initWithAttributedString_, v36);
      }
    }
    objc_msgSend(a1, sel_setAnnotationText_, v34);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.getter();
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v7, 1, v37) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      if (one-time initialization token for defaultTextBoxAttributes != -1) {
        swift_once();
      }
      uint64_t v39 = static UIConstants.defaultTextBoxAttributes;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v39 = CRAttributedString.Attributes<>.nsTypeAttributesScaledBy(_:)(v24);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v37);
    }
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v39);
    swift_bridgeObjectRelease();
    isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setTypingAttributes_, isa);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    CRRegister.wrappedValue.getter();
    objc_msgSend(a1, sel_setTextIsFixedWidth_, (LOBYTE(v50) & 1) == 0);
    CRRegister.wrappedValue.getter();
    objc_msgSend(a1, sel_setTextIsFixedHeight_, (LOBYTE(v50) & 2) == 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
    CRRegister.wrappedValue.getter();
    if (v55)
    {
      double v41 = v50;
      char v42 = LOBYTE(v51) & 1;
      swift_bridgeObjectRelease();
    }
    else
    {
      double v41 = 0.0;
      char v42 = 0;
    }
    double v50 = v41;
    LOBYTE(v51) = v42;
    Swift::Int v48 = 0;
    char v49 = 0;
    lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
    objc_msgSend(a1, sel_setIsFormField_, (static CRExtensible.== infix(_:_:)() & 1) == 0);
    CRRegister.wrappedValue.getter();
    if (v55)
    {
      double v43 = v50;
      char v44 = LOBYTE(v51) & 1;
      swift_bridgeObjectRelease();
    }
    else
    {
      double v43 = 0.0;
      char v44 = 0;
    }
    double v50 = v43;
    LOBYTE(v51) = v44;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<FormContentType>);
    CRExtensible.rawValue.getter();
    FormContentType.init(rawValue:)(v48);
    char v45 = LOBYTE(v50);
    if (LOBYTE(v50) == 66) {
      char v45 = 0;
    }
    LOBYTE(v50) = v45;
    objc_msgSend(a1, sel_setFormContentType_, FormContentType.crFormContentType.getter());
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.value.getter();
    objc_msgSend(a1, sel_setRotationAngle_, -v50);
    CRRegister.wrappedValue.getter();
    if (v55)
    {
      uint64_t v46 = v54;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v46 = 0;
    }
    return objc_msgSend(a1, sel_setMaximumNumberOfCharacters_, v46);
  }
  return result;
}

void Shape.addAKArrowAnnotationProperties(to:in:)(void *a1, uint64_t a2)
{
  double v129 = *(double *)&a2;
  outlined init with take of CGRect?(a2, (uint64_t)v140);
  double v125 = v141;
  double v126 = v142;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v4 - 8);
  CGFloat v122 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v120 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  uint64_t v119 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v7);
  *(void *)&CGFloat v124 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v123 = (char *)&v116 - v10;
  MEMORY[0x270FA5388](v11);
  double v13 = (char *)&v116 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  double v20 = (char *)&v116 - v19;
  double v128 = *(double *)&a1;
  Shape.addAKShapeAnnotationProperties(to:)(a1);
  uint64_t v127 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  CRRegister.wrappedValue.getter();
  TaggedValue_9.tagged3.getter();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v15 + 8);
  v21(v20, v14);
  if (v139)
  {
    uint64_t v22 = *(void *)&v129;
    CRRegister.wrappedValue.getter();
    TaggedValue_9.tagged9.getter();
    v21(v17, v14);
    if ((LOBYTE(v136.size.width) & 1) == 0)
    {
      double y = v136.origin.y;
      double x = v136.origin.x;
      self;
      double v25 = v128;
      uint64_t v26 = swift_dynamicCastObjCClass();
      if (v26)
      {
        id v27 = (void *)v26;
        id v28 = *(id *)&v25;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.getter();
        CGFloat v29 = v136.origin.x;
        double v30 = v136.origin.y;
        CGFloat width = v136.size.width;
        CGFloat height = v136.size.height;
        double MinX = CGRectGetMinX(v136);
        v147.origin.double x = v29;
        v147.origin.double y = v30;
        v147.size.CGFloat width = width;
        v147.size.CGFloat height = height;
        double v128 = CGRectGetWidth(v147);
        v148.origin.double x = v29;
        v148.origin.double y = v30;
        v148.size.CGFloat width = width;
        v148.size.CGFloat height = height;
        double MinY = CGRectGetMinY(v148);
        v149.origin.double x = v29;
        v149.origin.double y = v30;
        v149.size.CGFloat width = width;
        v149.size.CGFloat height = height;
        double v35 = MinY + y * CGRectGetHeight(v149);
        outlined init with take of CGRect?(v22, (uint64_t)&v136);
        if (LOBYTE(v137))
        {
          double v129 = v35;
        }
        else
        {
          double v125 = MinX;
          double v106 = v136.origin.y;
          double v126 = x;
          double v107 = v136.size.height;
          v159.origin.double x = v29;
          v159.origin.double y = v30;
          v159.size.CGFloat width = width;
          v159.size.CGFloat height = height;
          CGFloat v124 = CGRectGetMinX(v159);
          double v108 = v107 + v106 + v106;
          v160.origin.double x = v29;
          v160.origin.double y = v30;
          v160.size.CGFloat width = width;
          v160.size.CGFloat height = height;
          double v109 = v108 - CGRectGetMaxY(v160);
          v161.origin.double x = v29;
          v161.origin.double y = v30;
          v161.size.CGFloat width = width;
          v161.size.CGFloat height = height;
          CGFloat v110 = CGRectGetWidth(v161);
          v162.origin.double x = v29;
          v162.origin.double y = v30;
          v162.size.CGFloat width = width;
          v162.size.CGFloat height = height;
          CGFloat height = CGRectGetHeight(v162);
          double v129 = v108 - v35;
          double x = v126;
          CGFloat v29 = v124;
          double v30 = v109;
          CGFloat width = v110;
          double MinX = v125;
        }
        id v111 = v28;
        v163.origin.double x = v29;
        v163.origin.double y = v30;
        v163.size.CGFloat width = width;
        v163.size.CGFloat height = height;
        double v112 = CGRectGetMinX(v163);
        v164.origin.double x = v29;
        v164.origin.double y = v30;
        v164.size.CGFloat width = width;
        v164.size.CGFloat height = height;
        objc_msgSend(v27, sel_setStartPoint_, v112, CGRectGetMidY(v164));

        id v113 = v111;
        v165.origin.double x = v29;
        v165.origin.double y = v30;
        v165.size.CGFloat width = width;
        v165.size.CGFloat height = height;
        double MaxX = CGRectGetMaxX(v165);
        v166.origin.double x = v29;
        v166.origin.double y = v30;
        v166.size.CGFloat width = width;
        v166.size.CGFloat height = height;
        objc_msgSend(v27, sel_setEndPoint_, MaxX, CGRectGetMidY(v166));

        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
        CRRegister.wrappedValue.getter();
        if ((LOBYTE(v145.origin.x) & 0x20) == 0)
        {
          v167.origin.double x = v29;
          v167.origin.double y = v30;
          v167.size.CGFloat width = width;
          v167.size.CGFloat height = height;
          objc_msgSend(v27, sel_setArrowHeadLength_, CGRectGetMaxX(v167) - (MinX + x * v128));
          v168.origin.double x = v29;
          v168.origin.double y = v30;
          v168.size.CGFloat width = width;
          v168.size.CGFloat height = height;
          objc_msgSend(v27, sel_setArrowHeadWidth_, CGRectGetHeight(v168));
          v169.origin.double x = v29;
          v169.origin.double y = v30;
          v169.size.CGFloat width = width;
          v169.size.CGFloat height = height;
          CGRectGetMidX(v169);
          v170.origin.double x = v29;
          v170.origin.double y = v30;
          v170.size.CGFloat width = width;
          v170.size.CGFloat height = height;
          CGFloat MidY = CGRectGetMidY(v170);
          objc_msgSend(v27, sel_setArrowLineWidth_, fabs(v129 - MidY + v129 - MidY));
          objc_msgSend(v27, sel_setArrowHeadStyle_, 2);
        }
      }
    }
  }
  else
  {
    double v118 = v138;
    double v117 = v137;
    CGFloat v116 = v136.size.height;
    double v36 = v136.size.width;
    double v37 = v136.origin.y;
    double v38 = v136.origin.x;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    CGFloat v39 = v136.origin.x;
    CGFloat v40 = v136.origin.y;
    CGFloat v41 = v136.size.width;
    CGFloat v42 = v136.size.height;
    double v43 = CGRectGetMinX(v136);
    v150.origin.double x = v39;
    v150.origin.double y = v40;
    v150.size.CGFloat width = v41;
    v150.size.CGFloat height = v42;
    double v44 = v43 + v38 * CGRectGetWidth(v150);
    v151.origin.double x = v39;
    v151.origin.double y = v40;
    v151.size.CGFloat width = v41;
    v151.size.CGFloat height = v42;
    double v45 = CGRectGetMinY(v151);
    v152.origin.double x = v39;
    v152.origin.double y = v40;
    v152.size.CGFloat width = v41;
    v152.size.CGFloat height = v42;
    double v46 = v45 + v37 * CGRectGetHeight(v152);
    _s8PaperKit5ShapeVWOcTm_0(v2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Shape);
    uint64_t v47 = *(void *)&v129;
    outlined init with take of CGRect?(*(uint64_t *)&v129, (uint64_t)&v136);
    if (LOBYTE(v137))
    {
      CRRegister.wrappedValue.getter();
      double v48 = v145.origin.y;
      double v49 = v145.size.height;
      uint64_t v50 = v127;
      double v51 = v126;
      double v52 = v125;
    }
    else
    {
      double v52 = v125;
      double v48 = v125;
      double v51 = v126;
      double v49 = v126;
      uint64_t v50 = v127;
    }
    uint64_t v53 = *(void *)&v124;
    uint64_t v54 = (uint64_t)v123;
    outlined destroy of Shape((uint64_t)v13);
    double v55 = v128;
    objc_msgSend(*(id *)&v128, sel_setStartPoint_, v44, v49 + v48 + v48 - v46);
    CRRegister.wrappedValue.getter();
    CGFloat v56 = v145.origin.x;
    CGFloat v57 = v145.origin.y;
    CGFloat v58 = v145.size.width;
    CGFloat v59 = v145.size.height;
    double v60 = CGRectGetMinX(v145);
    v153.origin.double x = v56;
    v153.origin.double y = v57;
    v153.size.CGFloat width = v58;
    v153.size.CGFloat height = v59;
    double v61 = v60 + v36 * CGRectGetWidth(v153);
    v154.origin.double x = v56;
    v154.origin.double y = v57;
    v154.size.CGFloat width = v58;
    v154.size.CGFloat height = v59;
    double v62 = CGRectGetMinY(v154);
    v155.origin.double x = v56;
    v155.origin.double y = v57;
    v155.size.CGFloat width = v58;
    v155.size.CGFloat height = v59;
    double v63 = v62 + v116 * CGRectGetHeight(v155);
    _s8PaperKit5ShapeVWOcTm_0(v2, v54, (uint64_t (*)(void))type metadata accessor for Shape);
    outlined init with take of CGRect?(v47, (uint64_t)&v145);
    if (v146)
    {
      CRRegister.wrappedValue.getter();
      double v64 = v143.origin.y;
      double v65 = v143.size.height;
    }
    else
    {
      double v64 = v52;
      double v65 = v51;
    }
    outlined destroy of Shape(v54);
    objc_msgSend(*(id *)&v55, sel_setMidPoint_, v61, v65 + v64 + v64 - v63);
    CRRegister.wrappedValue.getter();
    CGFloat v66 = v143.origin.x;
    CGFloat v67 = v143.origin.y;
    CGFloat v68 = v143.size.width;
    CGFloat v69 = v143.size.height;
    double v70 = CGRectGetMinX(v143);
    v156.origin.double x = v66;
    v156.origin.double y = v67;
    v156.size.CGFloat width = v68;
    v156.size.CGFloat height = v69;
    double v71 = v70 + v117 * CGRectGetWidth(v156);
    v157.origin.double x = v66;
    v157.origin.double y = v67;
    v157.size.CGFloat width = v68;
    v157.size.CGFloat height = v69;
    double v72 = CGRectGetMinY(v157);
    v158.origin.double x = v66;
    v158.origin.double y = v67;
    v158.size.CGFloat width = v68;
    v158.size.CGFloat height = v69;
    double v73 = v72 + v118 * CGRectGetHeight(v158);
    _s8PaperKit5ShapeVWOcTm_0(v2, v53, (uint64_t (*)(void))type metadata accessor for Shape);
    outlined init with take of CGRect?(v47, (uint64_t)&v143);
    if (v144)
    {
      CRRegister.wrappedValue.getter();
      double v74 = v134;
      double v75 = v135;
    }
    else
    {
      double v74 = v52;
      double v75 = v51;
    }
    outlined destroy of Shape(v53);
    objc_msgSend(*(id *)&v55, sel_setEndPoint_, v71, v75 + v74 + v74 - v73);
    uint64_t v76 = v2 + *(int *)(v50 + 52);
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    if ((v133 & 0x20) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
      CRRegister.wrappedValue.getter();
      uint64_t v130 = v133;
      char v131 = LOBYTE(v134);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<LineEnd>);
      CRExtensible.rawValue.getter();
      LineEnd.init(rawValue:)(v132);
      int v77 = v130;
      BOOL v79 = v130 == 9 || v130 == 0;
      CRRegister.wrappedValue.getter();
      uint64_t v130 = v133;
      char v131 = LOBYTE(v134);
      CRExtensible.rawValue.getter();
      LineEnd.init(rawValue:)(v132);
      BOOL v81 = v77 != 9 && v77 != 0;
      uint64_t v82 = 2;
      if (!v79) {
        uint64_t v82 = 3;
      }
      BOOL v84 = v77 != 9 && v77 != 0;
      if (v130 == 9) {
        uint64_t v82 = v84;
      }
      if ((_BYTE)v130) {
        uint64_t v85 = v82;
      }
      else {
        uint64_t v85 = v81;
      }
      objc_msgSend(*(id *)&v55, sel_setArrowHeadStyle_, v85);
      objc_msgSend(*(id *)&v55, sel_originalModelBaseScaleFactor);
      double v86 = 1.0;
      if (v87 != 0.0)
      {
        objc_msgSend(*(id *)&v55, sel_originalModelBaseScaleFactor);
        double v86 = 1.0 / v88;
      }
      uint64_t v89 = v120;
      id v90 = v119;
      uint64_t v91 = v121;
      (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v119, v76, v121);
      CGFloat v92 = (void *)CRAttributedString.attributedString.getter();
      id v93 = objc_msgSend(v92, sel_string);

      uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v96 = v95;

      uint64_t v97 = (uint64_t)v122;
      if (v94 || v96 != 0xE000000000000000)
      {
        char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v91);
        id v98 = 0;
        if ((v99 & 1) == 0)
        {
          id v100 = CRAttributedString<>.nsAttributedString.getter();
          id v101 = NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(v86);

          id v98 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F816E8]), sel_initWithAttributedString_, v101);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v91);
        id v98 = 0;
      }
      objc_msgSend(*(id *)&v55, sel_setAnnotationText_, v98);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
      CRRegister.wrappedValue.getter();
      uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
      uint64_t v103 = *(void *)(v102 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v97, 1, v102) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        if (one-time initialization token for defaultTextBoxAttributes != -1) {
          swift_once();
        }
        uint64_t v104 = static UIConstants.defaultTextBoxAttributes;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v104 = CRAttributedString.Attributes<>.nsTypeAttributesScaledBy(_:)(v86);
        (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v97, v102);
      }
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v104);
      swift_bridgeObjectRelease();
      isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(*(id *)&v55, sel_setTypingAttributes_, isa);
    }
  }
}

void Shape.addAKShapeAnnotationProperties(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v32 - v7;
  uint64_t v9 = v1 + *(int *)(type metadata accessor for Shape() + 52);
  uint64_t v10 = type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  if ((v35 & 0x20) != 0) {
    return;
  }
  v32[1] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  id v11 = v35;
  uint64_t v12 = &selRef_magicPaperViewControllerImageGenerationEvent_;
  if (v35)
  {
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v35);

    CRRegister.wrappedValue.getter();
    if (!v34)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    id v14 = v34;
    uint64_t v15 = CGColorRef.components.getter();

    if (!v15)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (*(void *)(v15 + 16) < 4uLL)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    double v16 = *(double *)(v15 + 56);

    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    id v17 = objc_msgSend(v13, sel_colorWithAlphaComponent_, v16 * v33);

    uint64_t v12 = &selRef_magicPaperViewControllerImageGenerationEvent_;
  }
  else
  {
    id v17 = 0;
  }
  objc_msgSend(a1, sel_setFillColor_, v17);

  CRRegister.wrappedValue.getter();
  id v18 = v35;

  if (v18)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    double v19 = *(double *)&v35;
  }
  else
  {
    double v19 = 0.0;
  }
  objc_msgSend(a1, sel_setStrokeWidth_, v19);
  CRRegister.wrappedValue.getter();
  id v20 = v35;
  if (v35)
  {
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), v12[408], v35);

    CRRegister.wrappedValue.getter();
    if (!v34)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    id v22 = v34;
    uint64_t v23 = CGColorRef.components.getter();

    if (!v23)
    {
LABEL_37:
      __break(1u);
      return;
    }
    if (*(void *)(v23 + 16) >= 4uLL)
    {
      double v24 = *(double *)(v23 + 56);

      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.wrappedValue.getter();
      id v20 = objc_msgSend(v21, sel_colorWithAlphaComponent_, v24 * v33);

      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_16:
  objc_msgSend(a1, sel_setStrokeColor_, v20);

  v32[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.getter();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  uint64_t v26 = *(void *)(v25 - 8);
  id v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v27(v8, 1, v25) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    BOOL v28 = 0;
  }
  else
  {
    TaggedValue_2.tagged1.getter();
    if (v36)
    {
      uint64_t v29 = *(void *)(v36 + 16);
      swift_bridgeObjectRelease();
      BOOL v28 = v29 != 0;
    }
    else
    {
      BOOL v28 = 0;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v25);
  }
  objc_msgSend(a1, sel_setDashed_, v28);
  CRRegister.wrappedValue.getter();
  if (v27(v5, 1, v25) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    uint64_t v30 = 0;
  }
  else
  {
    TaggedValue_2.tagged2.getter();
    if (v36) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = v35;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v25);
  }
  objc_msgSend(a1, sel_setBrushStyle_, v30);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.getter();
  id v31 = v37;
  if (v37) {

  }
  objc_msgSend(a1, sel_setHasShadow_, v31 != 0);
}

id NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(double a1)
{
  if (a1 != 1.0 && a1 != 0.0)
  {
    id v19 = v1;
    objc_msgSend(v1, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
    swift_dynamicCast();
    uint64_t v3 = v26;
    id v4 = objc_msgSend(v1, sel_length);
    uint64_t v5 = *MEMORY[0x263F814F0];
    uint64_t v6 = swift_allocObject();
    *(double *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = v3;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = partial apply for closure #1 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:);
    *(void *)(v7 + 24) = v6;
    double v24 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t v25 = v7;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v21 = 1107296256;
    id v22 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t v23 = &block_descriptor_63;
    uint64_t v8 = _Block_copy(&aBlock);
    id v9 = v3;
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_enumerateAttribute_inRange_options_usingBlock_, v5, 0, v4, 0x100000, v8);
    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v5)
    {
      __break(1u);
    }
    else if (one-time initialization token for originalFont == -1)
    {
      goto LABEL_5;
    }
    swift_once();
LABEL_5:
    uint64_t v10 = (void *)static NSAttributedStringKey.originalFont;
    uint64_t v11 = swift_allocObject();
    *(double *)(v11 + 16) = a1;
    *(void *)(v11 + 24) = v9;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = partial apply for closure #2 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:);
    *(void *)(v12 + 24) = v11;
    double v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    uint64_t v25 = v12;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v21 = 1107296256;
    id v22 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t v23 = &block_descriptor_59_2;
    id v13 = _Block_copy(&aBlock);
    id v14 = v9;
    id v15 = v10;
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_enumerateAttribute_inRange_options_usingBlock_, v15, 0, v4, 0x100000, v13);

    _Block_release(v13);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    id result = (id)swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      objc_msgSend(v14, sel_copy);
      _bridgeAnyObjectToAny(_:)();

      swift_unknownObjectRelease();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSAttributedString);
      swift_dynamicCast();
      id v18 = v26;
      swift_release();
      swift_release();
      return v18;
    }
    return result;
  }
  return v1;
}

uint64_t CRAttributedString.Attributes<>.nsTypeAttributesScaledBy(_:)(double a1)
{
  CRAttributedString.Attributes<>.nsAttributes(darkMode:)(0);
  uint64_t v3 = v2;
  if (!*(void *)(v2 + 16))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    goto LABEL_10;
  }
  id v4 = (void *)*MEMORY[0x263F814F0];
  swift_bridgeObjectRetain();
  id v5 = v4;
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) == 0)
  {
    long long v16 = 0u;
    long long v17 = 0u;

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v6, (uint64_t)&v16);

  swift_bridgeObjectRelease();
  if (!*((void *)&v17 + 1))
  {
LABEL_10:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v16, &demangling cache variable for type metadata for Any?);
    return v3;
  }
  uint64_t v8 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  if (swift_dynamicCast())
  {
    id v9 = *(void **)&v15[0];
    id v10 = v5;
    if (a1 == 1.0 || a1 == 0.0)
    {
      id v12 = *(id *)&v15[0];
    }
    else
    {
      objc_msgSend(*(id *)&v15[0], sel_pointSize);
      id v12 = objc_msgSend(*(id *)&v15[0], sel_fontWithSize_, v11 * a1);
    }
    *((void *)&v17 + 1) = v8;
    *(void *)&long long v16 = v12;
    outlined init with take of Any(&v16, v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v10, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t one-time initialization function for originalFont()
{
  uint64_t result = MEMORY[0x21054D080](0x6E696769724F534ELL, 0xEE00746E6F466C61);
  static NSAttributedStringKey.originalFont = result;
  return result;
}

void closure #1 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, void *a6)
{
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v20, &demangling cache variable for type metadata for Any?);
  if (v21)
  {
    uint64_t v10 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    if (swift_dynamicCast())
    {
      double v11 = v19;
      if (a4 != 1.0 && a4 != 0.0)
      {
        objc_msgSend(v19, sel_pointSize);
        id v13 = objc_msgSend(v19, sel_fontWithSize_, v12 * a4);

        double v11 = v13;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
      initeCGFloat d = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20C832C20;
      id v15 = (void *)*MEMORY[0x263F814F0];
      *(void *)(inited + 64) = v10;
      *(void *)(inited + 32) = v15;
      *(void *)(inited + 40) = v11;
      id v16 = v15;
      id v17 = v11;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      type metadata accessor for NSAttributedStringKey(0);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(a6, sel_addAttributes_range_, isa, a2, a3);
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Any?);
  }
}

void closure #2 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, void *a6)
{
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v20, &demangling cache variable for type metadata for Any?);
  if (v21)
  {
    uint64_t v10 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    if (swift_dynamicCast())
    {
      double v11 = v19;
      if (a4 != 1.0 && a4 != 0.0)
      {
        objc_msgSend(v19, sel_pointSize);
        id v13 = objc_msgSend(v19, sel_fontWithSize_, v12 * a4);

        double v11 = v13;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
      initeCGFloat d = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20C832C20;
      if (one-time initialization token for originalFont != -1) {
        swift_once();
      }
      id v15 = (void *)static NSAttributedStringKey.originalFont;
      *(void *)(inited + 64) = v10;
      *(void *)(inited + 32) = v15;
      *(void *)(inited + 40) = v11;
      id v16 = v15;
      id v17 = v11;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      type metadata accessor for NSAttributedStringKey(0);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(a6, sel_addAttributes_range_, isa, a2, a3);
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Any?);
  }
}

unint64_t lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>> and conformance TaggedValue_2<A, B>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?);
  }
  return result;
}

uint64_t _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Shadow and conformance Shadow()
{
  unint64_t result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shadow and conformance Shadow;
  if (!lazy protocol witness table cache variable for type Shadow and conformance Shadow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow and conformance Shadow);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  }
  return result;
}

uint64_t outlined assign with take of ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShapeSecondaryProperties();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double _stdlib_squareRoot(double a1)
{
  return sqrt(a1);
}

uint64_t _s8PaperKit5ShapeVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t protocol witness for ShapeTextBox.emptyStringAttributes.getter in conformance Shape()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for ShapeTextBox.emptyStringAttributes.setter in conformance Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

double protocol witness for ShapeTextBox.opacity.getter in conformance Shape()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for ShapeTextBox.opacity.setter in conformance Shape()
{
  return CRRegister.wrappedValue.setter();
}

void specialized Shape.renderSync<A>(in:id:capsule:options:)(CGContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v178 = a2;
  uint64_t v187 = 0;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v174 = (char *)&v170 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  double v175 = (char *)&v170 - v10;
  uint64_t v11 = type metadata accessor for CGPathFillRule();
  uint64_t v181 = *(void *)(v11 - 8);
  uint64_t v182 = v11;
  MEMORY[0x270FA5388](v11);
  CGFloat v180 = (char *)&v170 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = (int *)type metadata accessor for Shape();
  MEMORY[0x270FA5388](v13);
  uint64_t v176 = (uint64_t)&v170 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v177 = (uint64_t)&v170 - v16;
  MEMORY[0x270FA5388](v17);
  *(void *)&double v186 = (char *)&v170 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v185 = (uint64_t)&v170 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v170 - v22;
  MEMORY[0x270FA5388](v24);
  double v183 = (char *)&v170 - v25;
  MEMORY[0x270FA5388](v26);
  BOOL v28 = (char *)&v170 - v27;
  LODWORD(v189) = *(unsigned __int8 *)(a3 + 1);
  outlined init with take of CGRect?(a3 + 24, (uint64_t)&in);
  uint64_t v29 = *(void **)(a3 + 64);
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double a = v197.a;
  double b = v197.b;
  double c = v197.c;
  double d = v197.d;
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  CGFloat v34 = v197.a;
  double v193 = b - d * 0.0;
  CGFloat v194 = a - c * 0.0;
  v205.origin.CGFloat x = a;
  v205.origin.CGFloat y = b;
  v205.size.CGFloat width = c;
  CGFloat v191 = c;
  CGFloat v192 = d;
  v205.size.CGFloat height = d;
  double MidX = CGRectGetMidX(v205);
  v206.origin.CGFloat x = a;
  v206.origin.CGFloat y = b;
  v206.size.CGFloat width = c;
  v206.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v206);
  CGAffineTransformMakeRotation(&v197, v34);
  long long v190 = *(_OWORD *)&v197.a;
  long long v188 = *(_OWORD *)&v197.c;
  CGFloat v37 = -MidY;
  CGFloat tx = v197.tx;
  CGFloat ty = v197.ty;
  CGAffineTransformMakeTranslation(&v197, -MidX, v37);
  CGFloat v40 = v197.a;
  CGFloat v41 = v197.b;
  CGFloat v42 = v197.c;
  CGFloat v43 = v197.d;
  CGFloat v44 = v197.tx;
  CGFloat v45 = v197.ty;
  *(_OWORD *)&t2.double a = v190;
  *(_OWORD *)&t2.double c = v188;
  t2.CGFloat tx = tx;
  t2.CGFloat ty = ty;
  CGAffineTransformConcat(&v201, &v197, &t2);
  long long v190 = *(_OWORD *)&v201.a;
  long long v188 = *(_OWORD *)&v201.c;
  CGFloat v46 = v201.tx;
  CGFloat v47 = v201.ty;
  v197.double a = v40;
  v197.double b = v41;
  v197.double c = v42;
  v197.double d = v43;
  v197.CGFloat tx = v44;
  v197.CGFloat ty = v45;
  CGAffineTransformInvert(&t2, &v197);
  *(_OWORD *)&v197.double a = v190;
  *(_OWORD *)&v197.double c = v188;
  v197.CGFloat tx = v46;
  v197.CGFloat ty = v47;
  CGAffineTransformConcat(&v201, &v197, &t2);
  v197.double a = v191;
  v197.double b = 0.0;
  v197.double c = 0.0;
  v197.double d = v192;
  v197.CGFloat tx = v194;
  v197.CGFloat ty = v193;
  CGAffineTransform t2 = v201;
  CGAffineTransformConcat(&v201, &v197, &t2);
  CGAffineTransform t2 = v201;
  CGContextSaveGState(a1);
  *(void *)&double v48 = v4 + v13[13];
  uint64_t v49 = type metadata accessor for ShapeSecondaryProperties();
  CGFloat v194 = v48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  *(void *)&long long v190 = v13;
  double v184 = *(double *)&v23;
  if ((LOBYTE(v197.a) & 0x20) != 0 && v29)
  {
    uint64_t v179 = v4;
    uint64_t v50 = a1;
    double v193 = COERCE_DOUBLE(v29);
    id v51 = objc_msgSend(*(id *)&v193, sel_annotations);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
    unint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    MEMORY[0x270FA5388](v53);
    *((void *)&v170 - 2) = v178;
    uint64_t v54 = v187;
    double v55 = COERCE_DOUBLE(specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:), (uint64_t)(&v170 - 4), v52));
    swift_bridgeObjectRelease();
    if (v55 == 0.0)
    {
      uint64_t v187 = v54;
      a1 = v50;
      uint64_t v4 = v179;
      double v55 = v193;
    }
    else
    {
      a1 = v50;
      if (objc_msgSend(*(id *)&v55, sel_hasAppearanceStream))
      {
        double v56 = v193;
        objc_msgSend(*(id *)&v193, sel_boundsForBox_, 0);
        CGFloat x = v207.origin.x;
        CGFloat y = v207.origin.y;
        CGFloat width = v207.size.width;
        CGFloat height = v207.size.height;
        double MinY = CGRectGetMinY(v207);
        v208.origin.CGFloat x = x;
        v208.origin.CGFloat y = y;
        v208.size.CGFloat width = width;
        v208.size.CGFloat height = height;
        CGFloat MaxY = CGRectGetMaxY(v208);
        v197.double a = 1.0;
        v197.double b = 0.0;
        v197.double c = 0.0;
        v197.double d = 1.0;
        v197.CGFloat tx = 0.0;
        v197.CGFloat ty = 0.0;
        v201.double b = 0.0;
        v201.double c = 0.0;
        v201.double a = 1.0;
        *(_OWORD *)&v201.double d = xmmword_20C8340F0;
        v201.CGFloat ty = MinY + MaxY;
        CGAffineTransformConcat(&v196, &v197, &v201);
        CGAffineTransform v197 = v196;
        CGContextConcatCTM(v50, &v197);
        objc_msgSend(*(id *)&v56, sel_transformForBox_, 1);
        CGAffineTransformInvert(&v201, &v197);
        CGAffineTransform v197 = v201;
        CGContextConcatCTM(v50, &v197);
        CRRegister.wrappedValue.getter();
        if ((LOBYTE(v197.a) & 0x40) == 0)
        {
          objc_msgSend(*(id *)&v55, sel_bounds);
          CGFloat v64 = v63;
          CGFloat v66 = v65;
          CGFloat v68 = v67;
          CGFloat v70 = v69;
          objc_msgSend(*(id *)&v56, sel_boundsForBox_, 0);
          double v72 = v71;
          double v74 = v73;
          v209.origin.CGFloat x = v64;
          v209.origin.CGFloat y = v66;
          v209.size.CGFloat width = v68;
          v209.size.CGFloat height = v70;
          double MinX = CGRectGetMinX(v209);
          v210.origin.CGFloat x = v64;
          v210.origin.CGFloat y = v66;
          v210.size.CGFloat width = v68;
          v210.size.CGFloat height = v70;
          double v76 = v74 + v72 + v72 - CGRectGetMaxY(v210);
          v211.origin.CGFloat x = v64;
          v211.origin.CGFloat y = v66;
          v211.size.CGFloat width = v68;
          v211.size.CGFloat height = v70;
          CGRectGetWidth(v211);
          v212.origin.CGFloat x = v64;
          v212.origin.CGFloat y = v66;
          v212.size.CGFloat width = v68;
          v212.size.CGFloat height = v70;
          CGRectGetHeight(v212);
          CRRegister.wrappedValue.getter();
          double v77 = v197.a - MinX;
          double v78 = v197.b - v76;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
          CRRegister.wrappedValue.getter();
          if (*(void *)&v197.ty)
          {
            double v80 = v197.c;
            double v79 = v197.d;
            swift_bridgeObjectRelease();
          }
          else
          {
            double v79 = 0.0;
            double v80 = 0.0;
          }
          CGContextTranslateCTM(v50, v77 + v80, -(v78 + v79));
        }
        objc_msgSend(*(id *)&v55, sel_drawWithBox_inContext_, 1, v50);
        CGContextRestoreGState(v50);

LABEL_73:
        return;
      }
      uint64_t v187 = v54;

      uint64_t v4 = v179;
    }

    id v13 = (int *)v190;
  }
  uint64_t v81 = (uint64_t)v183;
  Shape.pathAndLineEnds(in:scale:)(&t2, (uint64_t)&v197, 1.0);
  CGFloat v192 = v197.a;
  CGFloat v82 = v197.b;
  CGFloat v83 = v197.d;
  CGFloat v84 = v197.tx;
  double v171 = v197.ty;
  CGFloat v172 = v197.c;
  double v85 = v199;
  double v170 = v198;
  double v86 = v200;
  uint64_t v87 = v4 + v13[11];
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v173 = v87;
  CRRegister.wrappedValue.getter();
  int a_low = LOBYTE(v197.a);
  int b_low = LOBYTE(v197.b);
  _s8PaperKit5ShapeVWOcTm_0(v4, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for Shape);
  if (a_low) {
    BOOL v91 = a_low == 9;
  }
  else {
    BOOL v91 = 1;
  }
  char v92 = v91;
  if (b_low == 1 || (v92 & 1) == 0)
  {
    outlined destroy of Shape((uint64_t)v28);
    int v93 = 1;
  }
  else
  {
    CRRegister.wrappedValue.getter();
    outlined destroy of Shape((uint64_t)v28);
    int v93 = LOBYTE(v197.b) | (LOBYTE(v197.a) != 0);
  }
  *(void *)&CGFloat v191 = v4 + v13[8];
  CRRegister.wrappedValue.getter();
  double v94 = v197.a;
  _s8PaperKit5ShapeVWOcTm_0(v4, v81, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v178 = v88;
  if (v94 <= 0.0)
  {
    outlined destroy of Shape(v81);
    BOOL v95 = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of Shape(v81);
    BOOL v95 = *(void *)&v197.a != 0;
  }
  uint64_t v96 = *(void *)&v184;
  uint64_t v97 = (char *)(v4 + v13[6]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  double v183 = v97;
  CRRegister.wrappedValue.getter();
  CGFloat v98 = v197.a;

  _s8PaperKit5ShapeVWOcTm_0(v4, v96, (uint64_t (*)(void))type metadata accessor for Shape);
  if (!v95 || v98 == 0.0)
  {
    outlined destroy of Shape(v96);
    uint64_t v99 = v185;
    _s8PaperKit5ShapeVWOcTm_0(v4, v185, (uint64_t (*)(void))type metadata accessor for Shape);
LABEL_30:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of Shape(v99);
    LODWORD(v193) = *(void *)&v197.d != 0;

    int v101 = v95 & v93;
    uint64_t v100 = *(void *)&v186;
    _s8PaperKit5ShapeVWOcTm_0(v4, *(uint64_t *)&v186, (uint64_t (*)(void))type metadata accessor for Shape);
    if (v101 != 1) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  CRRegister.wrappedValue.getter();
  double v94 = v197.a;
  outlined destroy of Shape(v96);
  uint64_t v99 = v185;
  _s8PaperKit5ShapeVWOcTm_0(v4, v185, (uint64_t (*)(void))type metadata accessor for Shape);
  if (v94 >= 1.0) {
    goto LABEL_30;
  }
  outlined destroy of Shape(v99);
  uint64_t v100 = *(void *)&v186;
  _s8PaperKit5ShapeVWOcTm_0(v4, *(uint64_t *)&v186, (uint64_t (*)(void))type metadata accessor for Shape);
  LODWORD(v193) = 1;
  if ((v93 & 1) == 0)
  {
LABEL_28:
    LODWORD(v185) = 0;
    goto LABEL_41;
  }
LABEL_31:
  CRRegister.wrappedValue.getter();
  if (!*(void *)&v197.a)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  id v102 = *(id *)&v197.a;
  uint64_t v103 = CGColorRef.components.getter();

  if (!v103)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  if (*(void *)(v103 + 16) < 4uLL)
  {
    __break(1u);
    goto LABEL_104;
  }
  double v104 = *(double *)(v103 + 56);

  swift_bridgeObjectRelease();
  uint64_t v105 = v177;
  _s8PaperKit5ShapeVWOcTm_0(v100, v177, (uint64_t (*)(void))type metadata accessor for Shape);
  if (v104 >= 1.0)
  {
    uint64_t v106 = v176;
    _s8PaperKit5ShapeVWOcTm_0(v105, v176, (uint64_t (*)(void))type metadata accessor for Shape);
    if (LOBYTE(v193))
    {
      LODWORD(v185) = 0;
    }
    else
    {
      CRRegister.wrappedValue.getter();
      uint64_t v106 = v176;
      LODWORD(v185) = v197.a < 1.0;
    }
    outlined destroy of Shape(v106);
  }
  else
  {
    LODWORD(v185) = 1;
  }
  outlined destroy of Shape(v105);
LABEL_41:
  outlined destroy of Shape(v100);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.getter();
  CGFloat v107 = v197.d;
  *(void *)&long long v188 = v49;
  if (*(void *)&v197.d)
  {
    CGFloat v109 = v197.b;
    CGFloat v108 = v197.c;
    CGFloat v110 = v197.a;
    id v111 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&v197.d);
    double v112 = (CGColor *)objc_msgSend(v111, sel_CGColor);

    v204.CGFloat width = v110;
    v204.CGFloat height = v109;
    CGContextSetShadowWithColor(a1, v204, v108, v112);
  }
  CRRegister.wrappedValue.getter();
  CGContextSetAlpha(a1, v197.a);
  if (LODWORD(v193))
  {
    double v186 = v82;
    PathBoundingBoCGFloat x = CGPathGetPathBoundingBox(*(CGPathRef *)&v192);
    double v94 = PathBoundingBox.origin.x;
    CGFloat v45 = PathBoundingBox.origin.y;
    CGFloat v46 = PathBoundingBox.size.width;
    CGFloat v82 = PathBoundingBox.size.height;
    CRRegister.wrappedValue.getter();
    CGFloat v113 = v197.a;

    if (v113 == 0.0)
    {
      double v115 = 1.0;
      goto LABEL_48;
    }
    double v184 = v86;
    double v86 = v85;
    double v85 = v84;
    CGFloat v84 = v83;
    if (one-time initialization token for shapeStrokeMiterLimit == -1)
    {
LABEL_46:
      double v114 = *(double *)&static UIConstants.shapeStrokeMiterLimit;
      CRRegister.wrappedValue.getter();
      double v115 = v114 * v197.a;
      CGFloat v83 = v84;
      CGFloat v84 = v85;
      double v85 = v86;
      double v86 = v184;
LABEL_48:
      CGFloat v116 = -v115;
      v214.origin.CGFloat x = v94;
      v214.origin.CGFloat y = v45;
      v214.size.CGFloat width = v46;
      v214.size.CGFloat height = v82;
      CGRect v215 = CGRectInset(v214, v116, v116);
      CGContextBeginTransparencyLayerWithRect(a1, v215, 0);
      CGFloat v82 = v186;
      goto LABEL_49;
    }
LABEL_104:
    swift_once();
    goto LABEL_46;
  }
LABEL_49:
  CRRegister.wrappedValue.getter();
  CGFloat v117 = v197.a;
  if (*(void *)&v197.a)
  {
    double v118 = *(const CGPath **)&v192;
    if (LOBYTE(v189))
    {
      id v119 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&v197.a);
      uint64_t v120 = (void *)static PKInkingTool.convertColor(_:from:to:)();

      Color.init(cgColor:)((CGColor *)objc_msgSend(v120, sel_CGColor), (CGColor **)&v201);
      CGFloat v121 = v201.a;
      if (!*(void *)&v201.a)
      {
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }

      CGFloat v117 = v121;
    }
    CGContextSetFillColorWithColor(a1, *(CGColorRef *)&v117);
    CGContextAddPath(a1, v118);
    uint64_t v123 = v180;
    uint64_t v122 = v181;
    uint64_t v124 = v182;
    (*(void (**)(char *, void, uint64_t))(v181 + 104))(v180, *MEMORY[0x263F00040], v182);
    CGContextRef.fillPath(using:)();

    (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v124);
  }
  CRRegister.wrappedValue.getter();
  CGFloat v125 = v197.a;
  if (!*(void *)&v197.a)
  {
    double v55 = v192;
    if (!LODWORD(v193)) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  double v55 = v192;
  if (LOBYTE(v189))
  {
    id v126 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&v197.a);
    uint64_t v127 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    Color.init(cgColor:)((CGColor *)objc_msgSend(v127, sel_CGColor), (CGColor **)&v201);
    CGFloat v128 = v201.a;
    if (!*(void *)&v201.a)
    {
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }

    CGFloat v125 = v128;
  }
  CRRegister.wrappedValue.getter();
  if (v197.a <= 0.0)
  {

    if (!LODWORD(v193))
    {
LABEL_69:
      CGContextRestoreGState(a1);
      double v141 = specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(v4, (uint64_t)&in);
      CGFloat v143 = v142;
      CGFloat v145 = v144;
      CGFloat v147 = v146;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      if ((LOBYTE(v197.a) & 2) != 0)
      {
        __C::CGRect v216 = Shape.renderFrame(in:)(&in);
        double v148 = CGRectGetHeight((CGRect)v216);
        v217.origin.CGFloat x = v141;
        v217.origin.CGFloat y = v143;
        v217.size.CGFloat width = v145;
        v217.size.CGFloat height = v147;
        double v149 = v148 - CGRectGetHeight(v217);
        if (v149 > 0.0)
        {
          CGFloat v150 = v149 * 0.5;
          v218.origin.CGFloat x = v141;
          v218.origin.CGFloat y = v143;
          v218.size.CGFloat width = v145;
          v218.size.CGFloat height = v147;
          CGRect v219 = CGRectOffset(v218, 0.0, v150);
          double v141 = v219.origin.x;
          CGFloat v143 = v219.origin.y;
          CGFloat v145 = v219.size.width;
          CGFloat v147 = v219.size.height;
        }
      }
      specialized static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(v4, a1, v141, v143, v145, v147);
      goto LABEL_73;
    }
LABEL_68:
    CGContextEndTransparencyLayer(a1);
    goto LABEL_69;
  }
  double v129 = COERCE_DOUBLE(*(id *)&v125);
  CGFloat v130 = v129;
  if (!v185)
  {
LABEL_65:
    double v186 = v129;
    uint64_t v179 = v4;
    double v134 = v55;
    CGFloat v189 = v130;
    CGContextSetStrokeColorWithColor(a1, *(CGColorRef *)&v130);
    CRRegister.wrappedValue.getter();
    CGContextSetLineWidth(a1, v197.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
    double v135 = v175;
    CRRegister.wrappedValue.getter();
    uint64_t v136 = (uint64_t)v135;
    uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
    uint64_t v138 = *(void *)(v137 - 8);
    char v139 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v138 + 48);
    if (v139(v136, 1, v137) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v136, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
      CGLineCap c_low = kCGLineCapButt;
    }
    else
    {
      TaggedValue_2.tagged1.getter();
      if (*(void *)&v197.b)
      {
        CGLineCap c_low = LODWORD(v197.c);
        swift_bridgeObjectRelease();
      }
      else
      {
        CGLineCap c_low = kCGLineCapButt;
      }
      (*(void (**)(char *, uint64_t))(v138 + 8))(v175, v137);
    }
    CGContextSetLineCap(a1, c_low);
    uint64_t v151 = (uint64_t)v174;
    CRRegister.wrappedValue.getter();
    if (v139(v151, 1, v137) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v151, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
      double v55 = v134;
      uint64_t v4 = v179;
    }
    else
    {
      TaggedValue_2.tagged1.getter();
      uint64_t v152 = *(void *)&v197.b;
      (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v151, v137);
      double v55 = v134;
      uint64_t v4 = v179;
      if (v152)
      {
        if (*(void *)(v152 + 16))
        {
          uint64_t v153 = CRRegister.wrappedValue.getter();
          MEMORY[0x270FA5388](v153);
          *((void *)&v170 - 2) = v4;
          _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12CoreGraphics7CGFloatVG_AHs5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in Shape.renderSync<A>(in:id:capsule:options:), (uint64_t)(&v170 - 4), v152);
          swift_bridgeObjectRelease();
          CGContextRef.setLineDash(phase:lengths:)();
        }
        swift_bridgeObjectRelease();
      }
    }
    CGContextAddPath(a1, *(CGPathRef *)&v55);
    CGContextStrokePath(a1);
    CGColorRef v154 = *(CGColorRef *)&v189;
    CGContextSetFillColorWithColor(a1, *(CGColorRef *)&v189);
    CRRegister.wrappedValue.getter();
    if (LOBYTE(v197.b))
    {
      char v155 = 1;
    }
    else
    {
      char v155 = LOBYTE(v197.a);
      if (!LOBYTE(v197.a)) {
        goto LABEL_91;
      }
    }
    LOBYTE(v196.a) = v155;
    CRRegister.wrappedValue.getter();
    CGRect v156 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v82, v172, v171, v170, v201.a);
    if (v156)
    {
      CGRect v157 = v156;
      CGContextAddPath(a1, v156);
      uint64_t v159 = v181;
      uint64_t v158 = v182;
      double v160 = v55;
      CGRect v161 = v180;
      (*(void (**)(char *, void, uint64_t))(v181 + 104))(v180, *MEMORY[0x263F00038], v182);
      CGContextRef.fillPath(using:)();

      CGRect v162 = v161;
      double v55 = v160;
      CGColorRef v154 = *(CGColorRef *)&v189;
      (*(void (**)(char *, uint64_t))(v159 + 8))(v162, v158);
    }
LABEL_91:
    CRRegister.wrappedValue.getter();
    if (LOBYTE(v197.b))
    {
      char v163 = 1;
    }
    else
    {
      char v163 = LOBYTE(v197.a);
      if (!LOBYTE(v197.a)) {
        goto LABEL_96;
      }
    }
    LOBYTE(v196.a) = v163;
    CRRegister.wrappedValue.getter();
    CGRect v164 = (const CGPath *)LineEnd.path(from:to:strokeWidth:)(v83, v84, v85, v86, v201.a);
    if (v164)
    {
      CGRect v165 = v164;
      CGContextAddPath(a1, v164);
      CGRect v167 = v180;
      uint64_t v166 = v181;
      uint64_t v168 = v182;
      (*(void (**)(char *, void, uint64_t))(v181 + 104))(v180, *MEMORY[0x263F00038], v182);
      CGContextRef.fillPath(using:)();

      CGRect v169 = v167;
      CGColorRef v154 = *(CGColorRef *)&v189;
      (*(void (**)(char *, uint64_t))(v166 + 8))(v169, v168);
    }
LABEL_96:
    if (v185) {
      CGContextEndTransparencyLayer(a1);
    }

    if (!LODWORD(v193)) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  uint64_t v131 = CGColorRef.components.getter();
  if (v131)
  {
    if (*(void *)(v131 + 16) >= 4uLL)
    {
      double v132 = *(double *)(v131 + 56);

      swift_bridgeObjectRelease();
      double v133 = 1.0;
      if ((LOBYTE(v193) & 1) == 0)
      {
        CRRegister.wrappedValue.getter();
        double v133 = v197.a;
      }
      CGContextSetAlpha(a1, v132 * v133);
      v201.double a = v129;
      Color.withAlphaComponent(_:)((CGColorRef *)&v197, 1.0);
      CGFloat v130 = v197.a;
      CGContextBeginTransparencyLayer(a1, 0);
      goto LABEL_65;
    }
    __break(1u);
    goto LABEL_106;
  }
LABEL_110:
  __break(1u);
}

uint64_t specialized Shape.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(unsigned char *)(v6 + 104) = *(unsigned char *)a3;
  *(unsigned char *)(v6 + 105) = *(unsigned char *)(a3 + 1);
  *(unsigned char *)(v6 + 106) = *(unsigned char *)(a3 + 2);
  uint64_t v7 = *(void *)(a3 + 8);
  *(void *)(v6 + 48) = v5;
  *(void *)(v6 + 56) = v7;
  *(unsigned char *)(v6 + 107) = *(unsigned char *)(a3 + 16);
  long long v8 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v6 + 80) = v8;
  *(unsigned char *)(v6 + 108) = *(unsigned char *)(a3 + 56);
  *(void *)(v6 + 96) = *(void *)(a3 + 64);
  *(unsigned char *)(v6 + 109) = *(unsigned char *)(a3 + 72);
  *(unsigned char *)(v6 + 110) = *(unsigned char *)(a3 + 73);
  *(unsigned char *)(v6 + 111) = *(unsigned char *)(a3 + 74);
  return MEMORY[0x270FA2498](specialized Shape.render<A>(in:id:capsule:options:), 0, 0);
}

uint64_t specialized Shape.render<A>(in:id:capsule:options:)()
{
  uint64_t v25 = v0;
  long long v1 = *(_OWORD *)(v0 + 80);
  long long v18 = *(_OWORD *)(v0 + 64);
  char v2 = *(unsigned char *)(v0 + 111);
  char v3 = *(unsigned char *)(v0 + 110);
  char v4 = *(unsigned char *)(v0 + 109);
  uint64_t v5 = *(void *)(v0 + 96);
  char v6 = *(unsigned char *)(v0 + 108);
  char v7 = *(unsigned char *)(v0 + 107);
  char v8 = *(unsigned char *)(v0 + 106);
  char v9 = *(unsigned char *)(v0 + 105);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v11 = *(CGContext **)(v0 + 16);
  uint64_t v12 = *(void *)(v0 + 24);
  v15[0] = *(unsigned char *)(v0 + 104);
  v15[1] = v9;
  _OWORD v15[2] = v8;
  uint64_t v16 = v10;
  char v17 = v7;
  long long v19 = v1;
  char v20 = v6;
  uint64_t v21 = v5;
  char v22 = v4;
  char v23 = v3;
  char v24 = v2;
  specialized Shape.renderSync<A>(in:id:capsule:options:)(v11, v12, (uint64_t)v15);
  id v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t specialized Shape.indexableTextContent<A>(in:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_20C832C20;
  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  long long v1 = (void *)CRAttributedString.attributedString.getter();
  id v2 = objc_msgSend(v1, sel_string);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v5;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v5;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t base witness table accessor for CRStruct_Base_10 in Shape()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
}

uint64_t base witness table accessor for CRStruct_Base in Shape()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_10 : CRDT in Shape()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (void (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_6 : CRDT in Shape()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_8 : CRDT in Shape()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<CRExtensible<LineEnd>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
}

uint64_t base witness table accessor for CRDT in Shape()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
}

uint64_t base witness table accessor for CRMergeable in Shape()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
}

uint64_t base witness table accessor for CRType in Shape()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in Shape()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_10<Shape> and conformance CRStructMergeableDelta_10<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_10<Shape>);
}

uint64_t base witness table accessor for CRCodable in Shape()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_10(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
}

uint64_t sub_20C73F14C()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C73F190()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C73F1EC()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C73F248()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C73F29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_23Tm_0(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C73F2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_23Tm_0(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_23Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for Shape();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  return a4(v5);
}

uint64_t sub_20C73F334()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C73F390()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C73F3EC()
{
  return CRRegister.projectedValue.getter();
}

char *initializeBufferWithCopyOfBuffer for Shape(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v55 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v55 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    char v9 = &a1[v8];
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CGFloat v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    v57(v9, v10, v11);
    uint64_t v12 = a3[6];
    id v13 = &a1[v12];
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    v16(&a1[a3[7]], (char *)a2 + a3[7], v15);
    v57(&a1[a3[8]], (char *)a2 + a3[8], v11);
    uint64_t v17 = a3[9];
    long long v18 = &a1[v17];
    long long v19 = (char *)a2 + v17;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    v57(&a1[a3[10]], (char *)a2 + a3[10], v11);
    uint64_t v21 = a3[11];
    char v22 = &a1[v21];
    char v23 = (char *)a2 + v21;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
    v25(v22, v23, v24);
    v25(&a1[a3[12]], (char *)a2 + a3[12], v24);
    uint64_t v26 = a3[13];
    uint64_t v27 = &a1[v26];
    BOOL v28 = (char *)a2 + v26;
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
    uint64_t v30 = (int *)type metadata accessor for ShapeSecondaryProperties();
    uint64_t v31 = v30[5];
    BOOL v32 = &v27[v31];
    double v33 = &v28[v31];
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
    uint64_t v35 = v30[6];
    uint64_t v36 = &v27[v35];
    CGFloat v37 = &v28[v35];
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
    uint64_t v39 = v30[7];
    CGFloat v40 = &v27[v39];
    CGFloat v41 = &v28[v39];
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v40, v41, v42);
    uint64_t v43 = v30[8];
    CGFloat v44 = &v27[v43];
    CGFloat v45 = &v28[v43];
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
    uint64_t v47 = v30[9];
    double v48 = &v27[v47];
    uint64_t v49 = &v28[v47];
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
    uint64_t v51 = v30[10];
    unint64_t v52 = &v27[v51];
    uint64_t v53 = &v28[v51];
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
    *(void *)&v27[v30[11]] = *(void *)&v28[v30[11]];
    *(void *)&a1[a3[14]] = *(uint64_t *)((char *)a2 + a3[14]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Shape(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(a1 + a2[7], v9);
  v7(a1 + a2[8], v6);
  uint64_t v11 = a1 + a2[9];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  v7(a1 + a2[10], v6);
  uint64_t v13 = a1 + a2[11];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(a1 + a2[12], v14);
  uint64_t v16 = a1 + a2[13];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  long long v18 = (int *)type metadata accessor for ShapeSecondaryProperties();
  uint64_t v19 = v16 + v18[5];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = v16 + v18[6];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  uint64_t v23 = v16 + v18[7];
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  uint64_t v25 = v16 + v18[8];
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
  uint64_t v27 = v16 + v18[9];
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
  uint64_t v29 = v16 + v18[10];
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v29, v30);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Shape(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  double v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v56(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  v56(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  v56(a1 + a3[10], a2 + a3[10], v10);
  uint64_t v20 = a3[11];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = a2;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
  v25(v21, v22, v24);
  v25(a1 + a3[12], a2 + a3[12], v24);
  uint64_t v26 = a3[13];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  uint64_t v30 = (int *)type metadata accessor for ShapeSecondaryProperties();
  uint64_t v31 = v30[5];
  uint64_t v32 = v27 + v31;
  uint64_t v33 = v28 + v31;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  uint64_t v35 = v30[6];
  uint64_t v36 = v27 + v35;
  uint64_t v37 = v28 + v35;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
  uint64_t v39 = v30[7];
  uint64_t v40 = v27 + v39;
  uint64_t v41 = v28 + v39;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(v40, v41, v42);
  uint64_t v43 = v30[8];
  uint64_t v44 = v27 + v43;
  uint64_t v45 = v28 + v43;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
  uint64_t v47 = v30[9];
  uint64_t v48 = v27 + v47;
  uint64_t v49 = v28 + v47;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
  uint64_t v51 = v30[10];
  uint64_t v52 = v27 + v51;
  uint64_t v53 = v28 + v51;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
  *(void *)(v27 + v30[11]) = *(void *)(v28 + v30[11]);
  *(void *)(a1 + a3[14]) = *(void *)(v23 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Shape(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  double v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  v56(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  v56(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  v56(a1 + a3[10], a2 + a3[10], v10);
  uint64_t v20 = a3[11];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = a2;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24);
  v25(v21, v22, v24);
  v25(a1 + a3[12], a2 + a3[12], v24);
  uint64_t v26 = a3[13];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  uint64_t v30 = (int *)type metadata accessor for ShapeSecondaryProperties();
  uint64_t v31 = v30[5];
  uint64_t v32 = v27 + v31;
  uint64_t v33 = v28 + v31;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 24))(v32, v33, v34);
  uint64_t v35 = v30[6];
  uint64_t v36 = v27 + v35;
  uint64_t v37 = v28 + v35;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 24))(v36, v37, v38);
  uint64_t v39 = v30[7];
  uint64_t v40 = v27 + v39;
  uint64_t v41 = v28 + v39;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 24))(v40, v41, v42);
  uint64_t v43 = v30[8];
  uint64_t v44 = v27 + v43;
  uint64_t v45 = v28 + v43;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 24))(v44, v45, v46);
  uint64_t v47 = v30[9];
  uint64_t v48 = v27 + v47;
  uint64_t v49 = v28 + v47;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 24))(v48, v49, v50);
  uint64_t v51 = v30[10];
  uint64_t v52 = v27 + v51;
  uint64_t v53 = v28 + v51;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 24))(v52, v53, v54);
  *(void *)(v27 + v30[11]) = *(void *)(v28 + v30[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[14]) = *(void *)(v23 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Shape(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  double v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v56(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  v56(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  v56(a1 + a3[10], a2 + a3[10], v10);
  uint64_t v20 = a3[11];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = a2;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32);
  v25(v21, v22, v24);
  v25(a1 + a3[12], a2 + a3[12], v24);
  uint64_t v26 = a3[13];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  uint64_t v30 = (int *)type metadata accessor for ShapeSecondaryProperties();
  uint64_t v31 = v30[5];
  uint64_t v32 = v27 + v31;
  uint64_t v33 = v28 + v31;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
  uint64_t v35 = v30[6];
  uint64_t v36 = v27 + v35;
  uint64_t v37 = v28 + v35;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
  uint64_t v39 = v30[7];
  uint64_t v40 = v27 + v39;
  uint64_t v41 = v28 + v39;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 32))(v40, v41, v42);
  uint64_t v43 = v30[8];
  uint64_t v44 = v27 + v43;
  uint64_t v45 = v28 + v43;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 32))(v44, v45, v46);
  uint64_t v47 = v30[9];
  uint64_t v48 = v27 + v47;
  uint64_t v49 = v28 + v47;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
  uint64_t v51 = v30[10];
  uint64_t v52 = v27 + v51;
  uint64_t v53 = v28 + v51;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 32))(v52, v53, v54);
  *(void *)(v27 + v30[11]) = *(void *)(v28 + v30[11]);
  *(void *)(a1 + a3[14]) = *(void *)(v23 + a3[14]);
  return a1;
}

uint64_t assignWithTake for Shape(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  double v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  v56(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  v56(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  v56(a1 + a3[10], a2 + a3[10], v10);
  uint64_t v20 = a3[11];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = a2;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40);
  v25(v21, v22, v24);
  v25(a1 + a3[12], a2 + a3[12], v24);
  uint64_t v26 = a3[13];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  uint64_t v30 = (int *)type metadata accessor for ShapeSecondaryProperties();
  uint64_t v31 = v30[5];
  uint64_t v32 = v27 + v31;
  uint64_t v33 = v28 + v31;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 40))(v32, v33, v34);
  uint64_t v35 = v30[6];
  uint64_t v36 = v27 + v35;
  uint64_t v37 = v28 + v35;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 40))(v36, v37, v38);
  uint64_t v39 = v30[7];
  uint64_t v40 = v27 + v39;
  uint64_t v41 = v28 + v39;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 40))(v40, v41, v42);
  uint64_t v43 = v30[8];
  uint64_t v44 = v27 + v43;
  uint64_t v45 = v28 + v43;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 40))(v44, v45, v46);
  uint64_t v47 = v30[9];
  uint64_t v48 = v27 + v47;
  uint64_t v49 = v28 + v47;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 40))(v48, v49, v50);
  uint64_t v51 = v30[10];
  uint64_t v52 = v27 + v51;
  uint64_t v53 = v28 + v51;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 40))(v52, v53, v54);
  *(void *)(v27 + v30[11]) = *(void *)(v28 + v30[11]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[14]) = *(void *)(v23 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C740F9C);
}

uint64_t sub_20C740F9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_14:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_13:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_14;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_13;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_13;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[11];
    goto LABEL_13;
  }
  uint64_t v17 = type metadata accessor for ShapeSecondaryProperties();
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v12 = *(void *)(v17 - 8);
    uint64_t v13 = a3[13];
    goto LABEL_13;
  }
  unint64_t v19 = *(void *)(a1 + a3[14]);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

uint64_t storeEnumTagSinglePayload for Shape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C741208);
}

uint64_t sub_20C741208(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[9];
        }
        else
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
          if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a3)
          {
            uint64_t v10 = v18;
            uint64_t v14 = *(void *)(v18 - 8);
            uint64_t v15 = a4[11];
          }
          else
          {
            uint64_t result = type metadata accessor for ShapeSecondaryProperties();
            if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
            {
              *(void *)(a1 + a4[14]) = (a2 - 1);
              return result;
            }
            uint64_t v10 = result;
            uint64_t v14 = *(void *)(result - 8);
            uint64_t v15 = a4[13];
          }
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for Shape()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<Color?>();
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<CRExtensible<LineEnd>>(319, &lazy cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape> and conformance TaggedValue_9<A, B, C, D, E, F, G, H, I>);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<CRExtensible<LineEnd>>(319, &lazy cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>, &demangling cache variable for type metadata for CRExtensible<LineEnd>, &lazy protocol witness table cache variable for type CRExtensible<LineEnd> and conformance CRExtensible<A>);
          if (v4 <= 0x3F)
          {
            type metadata accessor for ShapeSecondaryProperties();
            if (v5 <= 0x3F) {
              swift_initStructMetadata();
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<CRExtensible<LineEnd>>(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(a4, a3);
    unint64_t v7 = type metadata accessor for CRRegister();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_20C741700()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #1 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(a1, a2, a3, *(double *)(v4 + 16), a4, *(void **)(v4 + 24));
}

uint64_t sub_20C741744()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_63(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_63()
{
  return swift_release();
}

void partial apply for closure #2 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #2 in NSAttributedString.scaledByOriginalModelBaseScaleFactor(_:)(a1, a2, a3, *(double *)(v4 + 16), a4, *(void **)(v4 + 24));
}

uint64_t sub_20C741778()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id PaperKitExtensionDocumentViewController.__allocating_init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  id v9 = objc_allocWithZone(v4);
  return PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(a1, a2, a3, a4);
}

uint64_t specialized static CRDataStoreBundle.paperBundle(_:sync:at:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x270FA5388](v10 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a2, (uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v12 = type metadata accessor for CRCodableVersion();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_20C835740;
  unint64_t v17 = v16 + v15;
  uint64_t v18 = *(void (**)(unint64_t, void, uint64_t))(v13 + 104);
  v18(v17, *MEMORY[0x263F32EB0], v12);
  v18(v17 + v14, *MEMORY[0x263F32EB8], v12);
  uint64_t v19 = one-time initialization token for allReadableFileFormatVersions;
  id v20 = a1;
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v21 = one-time initialization token for allFileFormatVersions;
  swift_bridgeObjectRetain();
  if (v21 != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<PaperDocument>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  return CRDataStoreBundle.init(_:sync:at:allowedEncodings:allowedAppFormats:writableAppFormats:)();
}

BOOL static PaperKitExtensionDocumentViewController.Layout.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void PaperKitExtensionDocumentViewController.Layout.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PaperKitExtensionDocumentViewController.Layout.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void one-time initialization function for thumbnailHeight()
{
  static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnaildouble Height = 0x4053000000000000;
}

void one-time initialization function for thumbnailOutlineThickness()
{
  static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness = 0x4008000000000000;
}

void one-time initialization function for thumbnailToPDFSpacing()
{
  static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailToPDFSpacing = 0x4024000000000000;
}

void one-time initialization function for interPageSpacing()
{
  static PaperKitExtensionDocumentViewController.InlineMetrics.interPageSpacing = 0x4024000000000000;
}

double one-time initialization function for thumbnailViewHeight()
{
  if (one-time initialization token for thumbnailHeight != -1) {
    swift_once();
  }
  double v0 = *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailHeight;
  if (one-time initialization token for thumbnailOutlineThickness != -1) {
    swift_once();
  }
  double result = v0
         + *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness
         + *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness;
  *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailViewdouble Height = result;
  return result;
}

double one-time initialization function for thumbnailToPDFVerticalSpaceConstraintConstant()
{
  if (one-time initialization token for thumbnailToPDFSpacing != -1) {
    swift_once();
  }
  double v0 = *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailToPDFSpacing;
  if (one-time initialization token for thumbnailOutlineThickness != -1) {
    swift_once();
  }
  double result = v0 - *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness;
  *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailToPDFVerticalSpaceConstraintConstant = v0 - *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness;
  return result;
}

void key path setter for PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets : PaperKitExtensionDocumentViewController(long long *a1, void **a2)
{
  long long v8 = *a1;
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)*a2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets;
  swift_beginAccess();
  *(_OWORD *)uint64_t v5 = v8;
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  id v6 = objc_msgSend(v4, sel_view);
  if (v6)
  {
    uint64_t v7 = v6;
    objc_msgSend(v6, sel_setNeedsLayout);
  }
  else
  {
    __break(1u);
  }
}

double PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets;
  swift_beginAccess();
  return *(double *)v1;
}

void PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.setter(double a1, double a2, double a3, double a4)
{
  id v9 = (double *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  swift_beginAccess();
  *id v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  id v10 = objc_msgSend(v4, sel_view);
  if (v10)
  {
    uint64_t v11 = v10;
    objc_msgSend(v10, sel_setNeedsLayout);
  }
  else
  {
    __break(1u);
  }
}

void (*PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.modify;
}

void PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    id v4 = objc_msgSend(*(id *)(a1 + 24), sel_view);
    if (v4)
    {
      id v5 = v4;
      objc_msgSend(v4, sel_setNeedsLayout);
    }
    else
    {
      __break(1u);
    }
  }
}

id PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v152 = a3;
  uint64_t v153 = a1;
  uint64_t v148 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop>);
  uint64_t v144 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  CGFloat v143 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x270FA5388](v8 - 8);
  double v142 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop>);
  uint64_t v140 = *(void *)(v141 - 8);
  MEMORY[0x270FA5388](v141);
  char v139 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v131 = (char *)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v129);
  uint64_t v14 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v127 = (char *)&v120 - v16;
  uint64_t v130 = type metadata accessor for PaperDocument(0);
  MEMORY[0x270FA5388](v130);
  CGFloat v128 = (char *)&v120 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  FileVersionPolicCGFloat y = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  uint64_t v134 = *(void *)(FileVersionPolicy - 8);
  MEMORY[0x270FA5388](FileVersionPolicy);
  uint64_t v19 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v137 = (char *)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  CGFloat v147 = (char *)&v120 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v136 = (char *)&v120 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v120 - v28;
  uint64_t v30 = type metadata accessor for URL();
  uint64_t v150 = *(void *)(v30 - 8);
  uint64_t v151 = v30;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v120 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = v31;
  MEMORY[0x270FA5388](v33);
  double v149 = (char *)&v120 - v34;
  char v35 = *a4;
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint] = 0;
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController] = 0;
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentSyncManager] = 0;
  uint64_t v36 = v4;
  uint64_t v145 = v6;
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v37 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v37 = MEMORY[0x263F8EE88];
  }
  *(void *)&v36[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentCancellables] = v37;
  *(void *)&v36[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v38 = &v36[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  long long v39 = *(_OWORD *)(MEMORY[0x263F834E8] + 16);
  *(_OWORD *)uint64_t v38 = *MEMORY[0x263F834E8];
  *((_OWORD *)v38 + 1) = v39;
  v36[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible] = 0;
  v36[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors] = 0;
  *(void *)&v36[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v40 = &v36[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource];
  *(void *)uint64_t v40 = 0;
  *((void *)v40 + 1) = 0;
  *(void *)&v36[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();

  uint64_t v41 = (objc_class *)type metadata accessor for PaperKitExtensionDocumentViewController();
  v156.receiver = v36;
  v156.super_class = v41;
  id v42 = objc_msgSendSuper2(&v156, sel_initWithNibName_bundle_, 0, 0);
  if ((v35 & 1) == 0)
  {
    uint64_t v58 = (uint64_t)v149;
    uint64_t v59 = v150;
    double v60 = *(void (**)(char *, uint64_t, uint64_t))(v150 + 16);
    uint64_t v61 = v151;
    v60(v149, v153, v151);
    uint64_t v62 = v148;
    v60(v32, v148, v61);
    uint64_t v63 = v152;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v152, (uint64_t)&v154, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
    id v64 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentInlineView());
    id v65 = v42;
    CGFloat v66 = (char *)PaperDocumentInlineView.init(paperURL:coherenceContextURL:encryptionDelegate:)(v58, (uint64_t)v32, (uint64_t)&v154);
    double v67 = (char *)v65;
    specialized PaperDocumentInlineView.viewControllerForPresentingUI.setter();

    CGFloat v68 = &v66[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate];
    swift_beginAccess();
    *((void *)v68 + 1) = &protocol witness table for PaperKitExtensionDocumentViewController;
    swift_unknownObjectWeakAssign();

    outlined destroy of StocksKitCurrencyCache.Provider?(v63, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
    double v69 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v69(v62, v61);
    v69(v153, v61);
    CGFloat v70 = *(void **)&v67[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView];
    *(void *)&v67[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView] = v66;
LABEL_15:

    return v42;
  }
  uint64_t v123 = v19;
  CGFloat v125 = v14;
  type metadata accessor for CRContext();
  id v121 = v42;
  uint64_t v43 = (char *)v42;
  uint64_t v44 = (void *)MEMORY[0x21054C990](0, v152);
  uint64_t v133 = v21;
  uint64_t v45 = *(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56);
  uint64_t v132 = v20;
  uint64_t v122 = v45;
  v45(v29, 1, 1, v20);
  uint64_t v46 = specialized static CRDataStoreBundle.paperBundle(_:sync:at:)(v44, (uint64_t)v29, v153);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  id v126 = v43;
  *(void *)&v43[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentSyncManager] = v46;
  uint64_t v146 = v46;
  swift_retain();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<PaperDocument>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v47 = type metadata accessor for CRCodableVersion();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(void *)(v48 + 72);
  unint64_t v50 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_20C835740;
  unint64_t v52 = v51 + v50;
  uint64_t v53 = *(void (**)(unint64_t, void, uint64_t))(v48 + 104);
  v53(v51 + v50, *MEMORY[0x263F32EB0], v47);
  v53(v52 + v49, *MEMORY[0x263F32EB8], v47);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  uint64_t v54 = v134;
  uint64_t v55 = v123;
  uint64_t v56 = FileVersionPolicy;
  (*(void (**)(char *, void, uint64_t))(v134 + 104))(v123, *MEMORY[0x263F32FB0], FileVersionPolicy);
  CGFloat v57 = v136;
  id v124 = v44;
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
  swift_bridgeObjectRelease();
  uint64_t v71 = v132;
  v122(v57, 0, 1, v132);
  uint64_t v72 = v133;
  double v73 = v147;
  (*(void (**)(char *, char *, uint64_t))(v133 + 32))(v147, v57, v71);
  uint64_t v74 = (uint64_t)v137;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v137, v73, v71);
  LOBYTE(v154) = 0;
  id v75 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentViewController(0));
  double v76 = (char *)v124;
  CGFloat v128 = (char *)specialized PaperDocumentViewController.init(context:paperDocument:editingMode:)(v76, v74, (unsigned __int8 *)&v154);
  uint64_t v127 = v76;

  uint64_t v154 = CRDataStoreBundle.publisher.getter();
  uint64_t v137 = (char *)self;
  id v155 = objc_msgSend(v137, sel_mainRunLoop);
  FileVersionPolicCGFloat y = type metadata accessor for NSRunLoop.SchedulerOptions();
  uint64_t v77 = *(void *)(FileVersionPolicy - 8);
  uint64_t v134 = *(void *)(v77 + 56);
  uint64_t v136 = (char *)(v77 + 56);
  uint64_t v78 = (uint64_t)v142;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v134)(v142, 1, 1, FileVersionPolicy);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Error>);
  uint64_t v130 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  uint64_t v131 = (char *)MEMORY[0x263EFDCF8];
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Error> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Error>);
  unint64_t v129 = lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  double v79 = v139;
  Publisher.receive<A>(on:options:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v78, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  swift_release();
  uint64_t v80 = swift_allocObject();
  uint64_t v81 = v126;
  swift_unknownObjectWeakInit();
  CGFloat v82 = v149;
  uint64_t v83 = v150;
  uint64_t v84 = v151;
  (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v149, v153, v151);
  unint64_t v85 = (*(unsigned __int8 *)(v83 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
  unint64_t v86 = (v138 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v87 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v83 + 32))(v87 + v85, v82, v84);
  *(void *)(v87 + v86) = v80;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop>);
  uint64_t v88 = v141;
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v89 = v79;
  id v90 = v128;
  (*(void (**)(char *, uint64_t))(v140 + 8))(v89, v88);
  BOOL v91 = v81;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v92 = *(void *)&v90[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_passThroughSubject];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<PassthroughSubject<Capsule<PaperDocument>, Never>>);
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = v92;
  uint64_t v154 = v93;
  swift_retain();
  id v155 = objc_msgSend(v137, sel_mainRunLoop);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v134)(v78, 1, 1, FileVersionPolicy);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  double v94 = v143;
  Publisher.receive<A>(on:options:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v78, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  swift_release();
  uint64_t v95 = swift_allocObject();
  swift_weakInit();
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = v95;
  *(void *)(v96 + 24) = v91;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop>);
  uint64_t v97 = v91;
  uint64_t v98 = v145;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v144 + 8))(v94, v98);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  objc_msgSend(v97, sel_addChildViewController_, v90);
  id result = objc_msgSend(v90, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v100 = result;
  objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 1);

  id result = objc_msgSend(v90, sel_view);
  uint64_t v101 = v148;
  uint64_t v102 = v152;
  id v42 = v121;
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v103 = result;
  objc_msgSend(result, sel_setAutoresizingMask_, 18);

  id result = objc_msgSend(v90, sel_view);
  uint64_t v104 = v153;
  uint64_t v105 = v133;
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v106 = result;
  id result = objc_msgSend(v97, sel_view);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  CGFloat v107 = result;
  objc_msgSend(result, sel_bounds);
  double v109 = v108;
  double v111 = v110;
  double v113 = v112;
  double v115 = v114;

  objc_msgSend(v106, sel_setFrame_, v109, v111, v113, v115);
  id result = objc_msgSend(v97, sel_view);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  CGFloat v116 = result;
  id result = objc_msgSend(v90, sel_view);
  if (result)
  {
    CGFloat v117 = result;
    objc_msgSend(v116, sel_addSubview_, result);

    objc_msgSend(v90, sel_didMoveToParentViewController_, v97);
    swift_release();

    outlined destroy of StocksKitCurrencyCache.Provider?(v102, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
    uint64_t v118 = v151;
    id v119 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
    v119(v101, v151);
    v119(v104, v118);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v147, v132);
    CGFloat v70 = *(void **)&v97[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController];
    *(void *)&v97[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController] = v90;
    goto LABEL_15;
  }
LABEL_23:
  __break(1u);
  return result;
}

void closure #1 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  if (v10)
  {
    uint64_t v11 = a3 + 16;
    id v12 = v10;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)logger);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    id v14 = v10;
    id v15 = v10;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v30 = v11;
      uint64_t v20 = v19;
      v32[0] = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      lazy protocol witness table accessor for type PaperDocument and conformance PaperDocument((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v31 = (uint64_t)v10;
      id v23 = v10;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20C2D7000, v16, v17, "Failed to load PaperDocument file: %s. Error: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      uint64_t v26 = v20;
      uint64_t v11 = v30;
      MEMORY[0x210550270](v26, -1, -1);
      MEMORY[0x210550270](v18, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    swift_beginAccess();
    uint64_t v27 = MEMORY[0x210550400](v11);
    if (v27)
    {
      uint64_t v28 = (void *)v27;
      if (MEMORY[0x210550400](v27 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate))
      {
        specialized ExtensionViewController.documentViewController(_:didFailToLoad:)(v10);

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
    else
    {
    }
  }
}

void closure #2 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x210550400](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    uint64_t v6 = *(char **)(v4 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
    if (v6)
    {
      uint64_t v7 = (void **)&v6[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
      swift_beginAccess();
      uint64_t v8 = *v7;
      if (*v7)
      {
        uint64_t v9 = v6;
        id v10 = v8;
        specialized PaperDocumentView.merge<A>(_:from:page:)(a1, 3u, 0);

        id v5 = v10;
      }
    }
  }
}

uint64_t closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    CRDataStoreBundle.sync(_:finished:)();
    swift_release();
    return swift_release_n();
  }
  return result;
}

void closure #1 in closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x210550400](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    if (MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate))
    {
      specialized ExtensionViewController.documentViewControllerDidSave(_:)();

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.viewDidLoad()()
{
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for PaperKitExtensionDocumentViewController();
  objc_msgSendSuper2(&v8, sel_viewDidLoad);
  id v1 = objc_msgSend(v0, sel_view);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = self;
    id v4 = objc_msgSend(v3, sel_secondarySystemBackgroundColor);
    objc_msgSend(v2, sel_setBackgroundColor_, v4);

    id v5 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView];
    if (v5)
    {
      id v6 = v5;
      id v7 = objc_msgSend(v3, sel_secondarySystemBackgroundColor);
      objc_msgSend(v6, sel_setBackgroundColor_, v7);
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.viewWillLayoutSubviews()()
{
  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for PaperKitExtensionDocumentViewController();
  objc_msgSendSuper2(&v16, sel_viewWillLayoutSubviews);
  id v1 = (double *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  swift_beginAccess();
  double v2 = v1[1];
  double v3 = v1[3];
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView];
  if (v4)
  {
    id v5 = (void *)(v4 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    if (*v5)
    {
      id v6 = (id *)(*v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      id v7 = objc_msgSend(*v6, sel_documentScrollView);
      objc_msgSend(v7, sel_setContentInset_, 0.0, v2, 0.0, v3);
    }
  }
  objc_super v8 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailView];
  if (v8)
  {
    id v9 = v8;
    id v10 = (void *)specialized firstSubview #1 <A>(in:) in PaperKitExtensionDocumentViewController.viewWillLayoutSubviews()(v9);
    if (v10)
    {
      uint64_t v11 = v10;
      id v12 = objc_msgSend(v10, sel_collectionViewLayout);
      self;
      uint64_t v13 = (void *)swift_dynamicCastObjCClass();
      if (v13) {
        objc_msgSend(v13, sel_setSectionInset_, *MEMORY[0x263F834E8], *(double *)(MEMORY[0x263F834E8] + 8), *(double *)(MEMORY[0x263F834E8] + 16), *(double *)(MEMORY[0x263F834E8] + 24));
      }

      uint64_t v14 = one-time initialization token for thumbnailOutlineThickness;
      id v15 = v11;
      if (v14 != -1) {
        swift_once();
      }
      objc_msgSend(v15, sel_setContentInset_, 0.0, v2 - *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness, 0.0, v3 - *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailOutlineThickness);
    }
    else
    {
      id v15 = v9;
    }
  }
}

uint64_t specialized firstSubview #1 <A>(in:) in PaperKitExtensionDocumentViewController.viewWillLayoutSubviews()(void *a1)
{
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = a1;
  }
  else
  {
    id v5 = objc_msgSend(a1, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62) {
      goto LABEL_16;
    }
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v7)
    {
      uint64_t v8 = 4;
      while (1)
      {
        id v9 = (v6 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v8 - 4, v6) : *(id *)(v6 + 8 * v8);
        id v10 = v9;
        uint64_t v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1)) {
          break;
        }
        uint64_t v3 = specialized firstSubview #1 <A>(in:) in PaperKitExtensionDocumentViewController.viewWillLayoutSubviews()(v9);

        if (v3)
        {
          swift_bridgeObjectRelease();
          return v3;
        }
        ++v8;
        if (v11 == v7) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void PaperKitExtensionDocumentViewController.adjustScaleAndInterpageSpacing()()
{
  id v1 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView];
  if (v1)
  {
    uint64_t v2 = &v1[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    if (*(void *)v2)
    {
      uint64_t v3 = (void **)(*(void *)v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
      swift_beginAccess();
      id v4 = *v3;
      if (v4)
      {
        id v5 = v1;
        id v6 = v4;
        id v7 = objc_msgSend(v6, sel_documentScrollView);
        if (v7)
        {
          uint64_t v8 = v7;
          id v9 = (char *)objc_msgSend(v6, sel_documentView);
          if (v9)
          {
            id v10 = v9;
            objc_msgSend(v5, sel_setNeedsLayout);
            objc_msgSend(v5, sel_layoutIfNeeded);
            objc_msgSend(v8, sel_contentOffset);
            double v12 = v11;
            objc_msgSend(v8, sel_contentSize);
            double v14 = v13;
            objc_msgSend(v8, sel_contentOffset);
            double v16 = v15;
            objc_msgSend(v6, sel_scaleFactorForSizeToFit);
            double v18 = v17;
            objc_msgSend(v6, sel_setMinScaleFactor_);
            objc_msgSend(v6, sel_setMaxScaleFactor_, v18);
            objc_msgSend(v6, sel_setScaleFactor_, v18);
            objc_msgSend(v6, sel_layoutDocumentView);
            if (one-time initialization token for interPageSpacing != -1) {
              swift_once();
            }
            double v19 = *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.interPageSpacing;
            id v20 = objc_msgSend(v0, sel_view);
            objc_msgSend(v10, sel_convertRect_fromView_, v20, 0.0, 0.0, v19, v19);
            CGFloat v22 = v21;
            CGFloat v24 = v23;
            CGFloat v26 = v25;
            CGFloat v28 = v27;

            v33.origin.CGFloat x = v22;
            v33.origin.CGFloat y = v24;
            v33.size.CGFloat width = v26;
            v33.size.CGFloat height = v28;
            double Width = CGRectGetWidth(v33);
            objc_msgSend(v6, sel_setPageBreakMargins_, 0.0, Width, 0.0, Width);
            objc_msgSend(v6, sel_setDocumentMargins_, 0.0, -Width, 0.0, -Width);
            if (v16 <= 0.0)
            {
              objc_msgSend(v8, sel_adjustedContentInset);
              double v31 = -v32;
            }
            else
            {
              objc_msgSend(v8, sel_contentSize);
              double v31 = v12 / v14 * v30;
            }
            objc_msgSend(v8, sel_contentOffset);
            objc_msgSend(v8, sel_setContentOffset_, v31);

            id v5 = (char *)v8;
          }
          else
          {
            id v10 = v5;
            id v5 = (char *)v6;
            id v6 = v8;
          }
        }
      }
    }
  }
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.paperDocumentDidSave()()
{
}

uint64_t PaperKitExtensionDocumentViewController.paperDocumentDidFailToLoad(_:)(void *a1)
{
  uint64_t result = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate);
  if (result)
  {
    specialized ExtensionViewController.documentViewController(_:didFailToLoad:)(a1);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.paperDocumentDidScroll()()
{
}

uint64_t PaperKitExtensionDocumentViewController.paperDocumentDidSave()(void (*a1)(void))
{
  uint64_t result = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate);
  if (result)
  {
    a1();
    return swift_unknownObjectRelease();
  }
  return result;
}

void PaperKitExtensionDocumentViewController.paperDocumentDidLoad(dataModel:view:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  id v4 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView];
  if (v4)
  {
    id v6 = (unsigned __int8 *)&a2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
    swift_beginAccess();
    unsigned __int8 v7 = *v6;
    *id v6 = 0;
    v93[0] = v7;
    uint64_t v8 = v4;
    PaperDocumentView.editingMode.didset(v93);
    id v9 = self;
    id v10 = objc_msgSend(v9, sel_clearColor);
    objc_msgSend(a2, sel_setBackgroundColor_, v10);

    type metadata accessor for PaperDocumentThumbnailView();
    double v11 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    id v92 = v8;
    double v12 = (void **)&v8[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    double v13 = *v12;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    id v14 = v13;
    PaperDocumentThumbnailView.documentView.didset();

    uint64_t v15 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
    id v16 = *(id *)&v11[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView];
    id v17 = objc_msgSend(v9, sel_clearColor);
    objc_msgSend(v16, sel_setBackgroundColor_, v17);

    if (one-time initialization token for thumbnailViewHeight != -1) {
      swift_once();
    }
    objc_msgSend(*(id *)&v11[v15], sel_setThumbnailSize_, *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailViewHeight, *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailViewHeight);
    double v18 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailView];
    *(void *)&v3[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailView] = v11;
    double v19 = v11;

    id v20 = (id *)&a2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    if (*v20)
    {
      id v21 = *v20;
      objc_msgSend(v21, sel_enablePageShadows_, 0);
      objc_msgSend(v21, sel_setDisplayDirection_, 1);
      id v22 = objc_msgSend(v9, sel_clearColor);
      objc_msgSend(v21, sel_setBackgroundColor_, v22);

      objc_msgSend(v21, sel_pageBreakMargins);
      objc_msgSend(v21, sel_setPageBreakMargins_, 0.0);
      objc_msgSend(v21, sel_pageBreakMargins);
      objc_msgSend(v21, sel_setPageBreakMargins_);
      objc_msgSend(v21, sel_pageBreakMargins);
      double v24 = -v23;
      objc_msgSend(v21, sel_pageBreakMargins);
      objc_msgSend(v21, sel_setDocumentMargins_, 0.0, v24, 0.0, -v25);
      objc_msgSend(*(id *)&v11[v15], sel_setLayoutMode_, 1);
      id v26 = objc_msgSend(self, sel_defaultCenter);
      double v27 = (void *)MEMORY[0x21054D080](0xD000000000000012, 0x800000020C85E8A0);
      objc_msgSend(v26, sel_postNotificationName_object_, v27, v21);

      id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
      objc_msgSend(v28, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      objc_msgSend(v28, sel_addSubview_, v19);
      objc_msgSend(v28, sel_setClipsToBounds_, 1);
      objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      objc_msgSend(v92, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      id v29 = objc_msgSend(v3, sel_view);
      if (v29)
      {
        double v30 = v29;
        BOOL v91 = v19;
        objc_msgSend(v29, sel_addSubview_, v92);

        id v31 = objc_msgSend(v3, sel_view);
        if (v31)
        {
          double v32 = v31;
          objc_msgSend(v31, sel_addSubview_, v28);

          id v33 = objc_msgSend(v28, sel_heightAnchor);
          id v34 = objc_msgSend(v33, sel_constraintEqualToConstant_, 0.0);

          uint64_t v35 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint;
          uint64_t v36 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint];
          *(void *)&v3[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint] = v34;

          id v37 = objc_msgSend(v28, sel_bottomAnchor);
          id v38 = objc_msgSend(v91, sel_bottomAnchor);
          if (one-time initialization token for thumbnailToPDFVerticalSpaceConstraintConstant != -1) {
            swift_once();
          }
          id v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_constant_, v38, *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailToPDFVerticalSpaceConstraintConstant);

          LODWORD(v40) = 1144750080;
          objc_msgSend(v39, sel_setPriority_, v40);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v41 = swift_allocObject();
          *(_OWORD *)(v41 + 16) = xmmword_20C848710;
          id v42 = objc_msgSend(v3, sel_view);
          if (v42)
          {
            uint64_t v43 = v42;
            id v44 = objc_msgSend(v42, sel_topAnchor);

            id v45 = objc_msgSend(v28, sel_topAnchor);
            id v46 = objc_msgSend(v44, sel_constraintEqualToAnchor_, v45);

            *(void *)(v41 + 32) = v46;
            id v47 = objc_msgSend(v3, sel_view);
            if (v47)
            {
              uint64_t v48 = v47;
              id v49 = objc_msgSend(v47, sel_leadingAnchor);

              id v50 = objc_msgSend(v28, sel_leadingAnchor);
              id v51 = objc_msgSend(v49, sel_constraintEqualToAnchor_, v50);

              *(void *)(v41 + 40) = v51;
              id v52 = objc_msgSend(v3, sel_view);
              if (v52)
              {
                uint64_t v53 = v52;
                id v54 = objc_msgSend(v52, sel_trailingAnchor);

                id v55 = objc_msgSend(v28, sel_trailingAnchor);
                id v56 = objc_msgSend(v54, sel_constraintEqualToAnchor_, v55);

                *(void *)(v41 + 48) = v56;
                id v57 = objc_msgSend(v28, sel_bottomAnchor);
                id v58 = objc_msgSend(v92, sel_topAnchor);
                id v59 = objc_msgSend(v57, sel_constraintEqualToAnchor_, v58);

                *(void *)(v41 + 56) = v59;
                id v60 = objc_msgSend(v3, sel_view);
                if (v60)
                {
                  uint64_t v61 = v60;
                  id v62 = objc_msgSend(v60, sel_leadingAnchor);

                  id v63 = objc_msgSend(v92, sel_leadingAnchor);
                  id v64 = objc_msgSend(v62, sel_constraintEqualToAnchor_, v63);

                  *(void *)(v41 + 64) = v64;
                  id v65 = objc_msgSend(v3, sel_view);
                  if (v65)
                  {
                    CGFloat v66 = v65;
                    id v67 = objc_msgSend(v65, sel_trailingAnchor);

                    id v68 = objc_msgSend(v92, sel_trailingAnchor);
                    id v69 = objc_msgSend(v67, sel_constraintEqualToAnchor_, v68);

                    *(void *)(v41 + 72) = v69;
                    id v70 = objc_msgSend(v3, sel_view);
                    if (v70)
                    {
                      uint64_t v71 = v70;
                      id v72 = objc_msgSend(v70, sel_bottomAnchor);

                      id v73 = objc_msgSend(v92, sel_bottomAnchor);
                      id v74 = objc_msgSend(v72, sel_constraintEqualToAnchor_, v73);

                      *(void *)(v41 + 80) = v74;
                      id v75 = objc_msgSend(v91, sel_heightAnchor);
                      id v76 = objc_msgSend(v75, sel_constraintEqualToConstant_, *(double *)&static PaperKitExtensionDocumentViewController.InlineMetrics.thumbnailViewHeight);

                      *(void *)(v41 + 88) = v76;
                      id v77 = objc_msgSend(v28, sel_leadingAnchor);
                      id v78 = objc_msgSend(v91, sel_leadingAnchor);
                      id v79 = objc_msgSend(v77, sel_constraintEqualToAnchor_, v78);

                      *(void *)(v41 + 96) = v79;
                      id v80 = objc_msgSend(v28, sel_trailingAnchor);
                      id v81 = objc_msgSend(v91, sel_trailingAnchor);
                      id v82 = objc_msgSend(v80, sel_constraintEqualToAnchor_, v81);

                      *(void *)(v41 + 104) = v82;
                      id v83 = objc_msgSend(v28, sel_topAnchor);
                      id v84 = objc_msgSend(v91, sel_topAnchor);
                      id v85 = objc_msgSend(v83, sel_constraintEqualToAnchor_, v84);

                      *(void *)(v41 + 112) = v85;
                      *(void *)(v41 + 120) = v39;
                      unint64_t v86 = *(void **)&v3[v35];
                      if (v86)
                      {
                        uint64_t v87 = self;
                        *(void *)(v41 + 128) = v86;
                        specialized Array._endMutation()();
                        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
                        id v88 = v39;
                        id v89 = v86;
                        isdouble a = Array._bridgeToObjectiveC()().super.isa;
                        swift_bridgeObjectRelease();
                        objc_msgSend(v87, sel_activateConstraints_, isa);

                        return;
                      }
LABEL_27:
                      __break(1u);
                      return;
                    }
LABEL_26:
                    __break(1u);
                    goto LABEL_27;
                  }
LABEL_25:
                  __break(1u);
                  goto LABEL_26;
                }
LABEL_24:
                __break(1u);
                goto LABEL_25;
              }
LABEL_23:
              __break(1u);
              goto LABEL_24;
            }
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
}

void closure #1 in PaperKitExtensionDocumentViewController.thumbnailsVisible.didset(void *a1)
{
  id v1 = objc_msgSend(a1, sel_view);
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v1, sel_layoutIfNeeded);
  }
  else
  {
    __break(1u);
  }
}

uint64_t PaperKitExtensionDocumentViewController.thumbnailsVisible.getter()
{
  id v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible);
  swift_beginAccess();
  return *v1;
}

void PaperKitExtensionDocumentViewController.thumbnailsVisible.setter(char a1)
{
  int v3 = a1 & 1;
  id v4 = &v1[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible];
  swift_beginAccess();
  int v5 = *v4;
  *id v4 = a1;
  if (v5 != v3)
  {
    id v6 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint];
    if (v6) {
      objc_msgSend(v6, sel_setActive_, (a1 & 1) == 0);
    }
    unsigned __int8 v7 = self;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v1;
    aBlock[4] = partial apply for closure #1 in PaperKitExtensionDocumentViewController.thumbnailsVisible.didset;
    aBlock[5] = v8;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_64;
    id v9 = _Block_copy(aBlock);
    id v10 = v1;
    swift_release();
    objc_msgSend(v7, sel_animateWithDuration_animations_, v9, 0.2);
    _Block_release(v9);
  }
}

void (*PaperKitExtensionDocumentViewController.thumbnailsVisible.modify(void *a1))(uint64_t a1, char a2)
{
  int v3 = malloc(0x60uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible;
  v3[9] = v1;
  v3[10] = v4;
  int v5 = (unsigned char *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 88) = *v5;
  return PaperKitExtensionDocumentViewController.thumbnailsVisible.modify;
}

void PaperKitExtensionDocumentViewController.thumbnailsVisible.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  int v3 = *(unsigned __int8 *)(*(void *)a1 + 88);
  if (a2)
  {
    PaperKitExtensionDocumentViewController.thumbnailsVisible.setter(v3);
  }
  else
  {
    uint64_t v5 = v2[9];
    uint64_t v4 = v2[10];
    int v6 = *(unsigned __int8 *)(v5 + v4);
    *(unsigned char *)(v5 + v4) = v3;
    if (v3 != v6)
    {
      unsigned __int8 v7 = (char *)v2[9];
      if (*(void *)&v7[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint])
      {
        objc_msgSend(*(id *)&v7[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint], sel_setActive_, v3 ^ 1u);
        unsigned __int8 v7 = (char *)v2[9];
      }
      uint64_t v8 = self;
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v7;
      v2[4] = closure #1 in PaperKitExtensionDocumentViewController.thumbnailsVisible.didsetpartial apply;
      v2[5] = v9;
      *id v2 = MEMORY[0x263EF8330];
      v2[1] = 1107296256;
      v2[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v2[3] = &block_descriptor_20;
      id v10 = _Block_copy(v2);
      double v11 = v7;
      swift_release();
      objc_msgSend(v8, sel_animateWithDuration_animations_, v10, 0.2);
      _Block_release(v10);
    }
  }
  free(v2);
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.revertAllChanges()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v2)
  {
    int v3 = (id *)(v2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    if (*v3)
    {
      id v4 = *v3;
      PaperDocumentView.revertAllChanges()();
    }
  }
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v5)
  {
    int v6 = (id *)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (*v6)
    {
      id v7 = *v6;
      PaperDocumentView.revertAllChanges()();
    }
  }
}

void PaperKitExtensionDocumentViewController.showParticipantCursors.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v2)
  {
    int v3 = (char *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
    swift_beginAccess();
    char v4 = *v3;
    uint64_t v5 = &v2[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors];
    swift_beginAccess();
    *uint64_t v5 = v4;
    int v6 = (void **)&v2[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    id v7 = (char *)*v6;
    if (*v6)
    {
      uint64_t v8 = &v7[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
      swift_beginAccess();
      *uint64_t v8 = v4;
      uint64_t v9 = v2;
      id v10 = v7;
      PaperDocumentView.showParticipantCursors.didset();
    }
  }
  double v11 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v11)
  {
    double v12 = (char *)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
    swift_beginAccess();
    char v13 = *v12;
    id v14 = &v11[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors];
    swift_beginAccess();
    *id v14 = v13;
    uint64_t v15 = (void **)&v11[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    id v16 = (char *)*v15;
    if (*v15)
    {
      id v17 = &v16[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
      swift_beginAccess();
      *id v17 = v13;
      double v18 = v11;
      double v19 = v16;
      PaperDocumentView.showParticipantCursors.didset();
    }
  }
}

uint64_t PaperKitExtensionDocumentViewController.showParticipantCursors.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void PaperKitExtensionDocumentViewController.showParticipantCursors.setter(char a1)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *int v3 = a1;
  PaperKitExtensionDocumentViewController.showParticipantCursors.didset();
}

uint64_t (*PaperKitExtensionDocumentViewController.showParticipantCursors.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperKitExtensionDocumentViewController.showParticipantCursors.modify;
}

uint64_t PaperKitExtensionDocumentViewController.showParticipantCursors.modify(uint64_t a1, char a2)
{
  return PaperKitExtensionDocumentViewController.showParticipantCursors.modify(a1, a2, (uint64_t (*)(uint64_t))PaperKitExtensionDocumentViewController.showParticipantCursors.didset);
}

void PaperKitExtensionDocumentViewController.liveStreamMessenger.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v2)
  {
    uint64_t v3 = v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger;
    swift_beginAccess();
    uint64_t v4 = MEMORY[0x210550400](v3);
    uint64_t v5 = *(void *)(v3 + 8);
    int v6 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger];
    swift_beginAccess();
    *int v6 = v4;
    v6[1] = v5;
    id v7 = v2;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v8 = (void **)&v7[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    uint64_t v9 = (char *)*v8;
    if (*v8)
    {
      uint64_t v10 = v6[1];
      double v11 = &v9[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger];
      swift_beginAccess();
      *((void *)v11 + 1) = v10;
      swift_unknownObjectWeakAssign();
      double v12 = v9;
      swift_unknownObjectRetain();
      PaperDocumentView.liveStreamMessenger.didset();

      swift_unknownObjectRelease();
      id v7 = v12;
    }

    swift_unknownObjectRelease();
  }
  char v13 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v13)
  {
    uint64_t v14 = v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger;
    swift_beginAccess();
    MEMORY[0x210550400](v14);
    uint64_t v15 = *(void *)(v14 + 8);
    id v16 = &v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger];
    swift_beginAccess();
    *((void *)v16 + 1) = v15;
    swift_unknownObjectWeakAssign();
    id v17 = (void **)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    double v18 = (char *)*v17;
    if (*v17)
    {
      MEMORY[0x210550400](v16);
      uint64_t v19 = *((void *)v16 + 1);
      id v20 = &v18[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger];
      swift_beginAccess();
      *((void *)v20 + 1) = v19;
      swift_unknownObjectWeakAssign();
      id v21 = v13;
      id v22 = v18;
      PaperDocumentView.liveStreamMessenger.didset();

      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
}

uint64_t PaperKitExtensionDocumentViewController.liveStreamMessenger.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger);
}

uint64_t PaperKitExtensionDocumentViewController.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  return PaperKitExtensionDocumentViewController.liveStreamMessenger.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.liveStreamMessenger.didset);
}

void (*PaperKitExtensionDocumentViewController.liveStreamMessenger.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperKitExtensionDocumentViewController.liveStreamMessenger.modify;
}

void PaperKitExtensionDocumentViewController.liveStreamMessenger.modify(uint64_t a1, char a2)
{
}

uint64_t key path setter for PaperKitExtensionDocumentViewController.participantDetailsDataSource : PaperKitExtensionDocumentViewController(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)(*a2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource);
  swift_beginAccess();
  *uint64_t v4 = v2;
  v4[1] = v3;
  swift_unknownObjectRetain_n();
  swift_unknownObjectRelease();
  PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset();
  return swift_unknownObjectRelease();
}

void PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource);
    swift_beginAccess();
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    uint64_t v6 = &v2[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource];
    swift_beginAccess();
    *(void *)uint64_t v6 = v4;
    *((void *)v6 + 1) = v5;
    swift_unknownObjectRetain_n();
    uint64_t v7 = v2;
    swift_unknownObjectRelease();
    uint64_t v8 = (void **)&v7[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    uint64_t v9 = (char *)*v8;
    if (*v8)
    {
      uint64_t v10 = *((void *)v6 + 1);
      double v11 = &v9[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource];
      swift_beginAccess();
      *((void *)v11 + 1) = v10;
      swift_unknownObjectWeakAssign();
      double v12 = v9;
      swift_unknownObjectRetain();
      PaperDocumentView.participantDetailsDataSource.didset();

      swift_unknownObjectRelease();
      uint64_t v7 = v12;
    }

    swift_unknownObjectRelease();
  }
  char v13 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v13)
  {
    uint64_t v14 = v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource;
    swift_beginAccess();
    uint64_t v15 = *(void *)(v14 + 8);
    id v16 = &v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource];
    swift_beginAccess();
    *((void *)v16 + 1) = v15;
    swift_unknownObjectWeakAssign();
    id v17 = (void **)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    double v18 = (char *)*v17;
    if (*v17)
    {
      MEMORY[0x210550400](v16);
      uint64_t v19 = *((void *)v16 + 1);
      id v20 = &v18[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource];
      swift_beginAccess();
      *((void *)v20 + 1) = v19;
      swift_unknownObjectWeakAssign();
      id v21 = v13;
      swift_unknownObjectRetain();
      id v22 = v18;
      PaperDocumentView.participantDetailsDataSource.didset();

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
  }
}

uint64_t PaperKitExtensionDocumentViewController.participantDetailsDataSource.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t PaperKitExtensionDocumentViewController.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset();
  return swift_unknownObjectRelease();
}

uint64_t (*PaperKitExtensionDocumentViewController.participantDetailsDataSource.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperKitExtensionDocumentViewController.participantDetailsDataSource.modify;
}

uint64_t PaperKitExtensionDocumentViewController.participantDetailsDataSource.modify(uint64_t a1, char a2)
{
  return PaperKitExtensionDocumentViewController.showParticipantCursors.modify(a1, a2, (uint64_t (*)(uint64_t))PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset);
}

uint64_t PaperKitExtensionDocumentViewController.showParticipantCursors.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.participantDetailsDidChange()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v2)
  {
    uint64_t v3 = (void **)&v2[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    uint64_t v4 = *v3;
    if (v4)
    {
      uint64_t v5 = v2;
      id v6 = v4;
      PaperDocumentView.participantDetailsDidChange()();
    }
  }
  uint64_t v7 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v7)
  {
    uint64_t v8 = (void **)&v7[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    uint64_t v9 = *v8;
    if (*v8)
    {
      uint64_t v10 = v7;
      id v11 = v9;
      PaperDocumentView.participantDetailsDidChange()();
    }
  }
}

uint64_t key path setter for PaperKitExtensionDocumentViewController.liveStreamMessenger : PaperKitExtensionDocumentViewController(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t))
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *a2 + *a5;
  swift_beginAccess();
  *(void *)(v8 + 8) = v7;
  swift_unknownObjectWeakAssign();
  uint64_t v9 = swift_unknownObjectRetain();
  a6(v9);
  return swift_unknownObjectRelease();
}

void PaperKitExtensionDocumentViewController.textualContextProvider.didset()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v1)
  {
    uint64_t v2 = v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider;
    swift_beginAccess();
    MEMORY[0x210550400](v2);
    uint64_t v3 = *(void *)(v2 + 8);
    uint64_t v4 = v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider;
    swift_beginAccess();
    *(void *)(v4 + 8) = v3;
    swift_unknownObjectWeakAssign();
    uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    uint64_t v6 = *v5;
    if (*v5)
    {
      MEMORY[0x210550400](v4);
      uint64_t v7 = *(void *)(v4 + 8);
      uint64_t v8 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
      swift_beginAccess();
      *(void *)(v8 + 8) = v7;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v9)
  {
    uint64_t v10 = v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider;
    swift_beginAccess();
    MEMORY[0x210550400](v10);
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v12 = v9 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider;
    swift_beginAccess();
    *(void *)(v12 + 8) = v11;
    swift_unknownObjectWeakAssign();
    char v13 = (uint64_t *)(v9 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    uint64_t v14 = *v13;
    if (*v13)
    {
      MEMORY[0x210550400](v12);
      uint64_t v15 = *(void *)(v12 + 8);
      uint64_t v16 = v14 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
      swift_beginAccess();
      *(void *)(v16 + 8) = v15;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
}

uint64_t PaperKitExtensionDocumentViewController.textualContextProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider);
}

uint64_t PaperKitExtensionDocumentViewController.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  return PaperKitExtensionDocumentViewController.liveStreamMessenger.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.textualContextProvider.didset);
}

uint64_t PaperKitExtensionDocumentViewController.liveStreamMessenger.setter(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t))
{
  uint64_t v7 = v4 + *a3;
  swift_beginAccess();
  *(void *)(v7 + 8) = a2;
  uint64_t v8 = swift_unknownObjectWeakAssign();
  a4(v8);
  return swift_unknownObjectRelease();
}

void (*PaperKitExtensionDocumentViewController.textualContextProvider.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x210550400](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperKitExtensionDocumentViewController.textualContextProvider.modify;
}

void PaperKitExtensionDocumentViewController.textualContextProvider.modify(uint64_t a1, char a2)
{
}

void PaperKitExtensionDocumentViewController.liveStreamMessenger.modify(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    uint64_t v6 = swift_unknownObjectRelease();
    a3(v6);
  }
  free(v5);
}

uint64_t PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

void PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.setter(void *a1)
{
}

uint64_t (*PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_viewControllerForPresentingUI;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v5);
  return PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.modify;
}

id PaperKitExtensionDocumentViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x21054D080]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void PaperKitExtensionDocumentViewController.init(nibName:bundle:)()
{
}

id PaperKitExtensionDocumentViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperKitExtensionDocumentViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperKitExtensionDocumentViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.textualContextProvider.didset);
}

void (*protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperKitExtensionDocumentViewController(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider;
  v3[5] = *v1;
  v3[6] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v6);
  uint64_t v8 = *(void *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperKitExtensionDocumentViewController;
}

void protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperKitExtensionDocumentViewController(uint64_t a1, char a2)
{
}

uint64_t protocol witness for PaperKitAttachment.viewControllerForPresentingUI.getter in conformance PaperKitExtensionDocumentViewController()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x210550400](v1);
}

void protocol witness for PaperKitAttachment.viewControllerForPresentingUI.setter in conformance PaperKitExtensionDocumentViewController(void *a1)
{
}

uint64_t (*protocol witness for PaperKitAttachment.viewControllerForPresentingUI.modify in conformance PaperKitExtensionDocumentViewController(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_viewControllerForPresentingUI;
  v3[4] = *v1;
  v3[5] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  v3[3] = MEMORY[0x210550400](v6);
  return PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.modify;
}

void PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v3);
}

uint64_t protocol witness for PaperDocumentInlineViewDelegate.paperDocumentDidSave() in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperDocumentInlineViewDelegate.paperDocumentDidSave() in conformance PaperKitExtensionDocumentViewController(a1, a2, (void (*)(void))specialized ExtensionViewController.documentViewControllerDidSave(_:));
}

uint64_t protocol witness for PaperDocumentInlineViewDelegate.paperDocumentDidScroll() in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperDocumentInlineViewDelegate.paperDocumentDidSave() in conformance PaperKitExtensionDocumentViewController(a1, a2, (void (*)(void))specialized ExtensionViewController.documentViewControllerDidScroll(_:));
}

uint64_t protocol witness for PaperDocumentInlineViewDelegate.paperDocumentDidSave() in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t result = MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate);
  if (result)
  {
    a3();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger);
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperKitExtensionDocumentViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.liveStreamMessenger.didset);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t))
{
  uint64_t v9 = *v6 + *a5;
  swift_beginAccess();
  *(void *)(v9 + 8) = a2;
  uint64_t v10 = swift_unknownObjectWeakAssign();
  a6(v10);
  return swift_unknownObjectRelease();
}

void (*protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperKitExtensionDocumentViewController(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger;
  v3[5] = *v1;
  v3[6] = v5;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x210550400](v6);
  uint64_t v8 = *(void *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperKitExtensionDocumentViewController;
}

void protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperKitExtensionDocumentViewController(uint64_t a1, char a2)
{
}

void protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperKitExtensionDocumentViewController(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    uint64_t v6 = swift_unknownObjectRelease();
    a3(v6);
  }
  free(v5);
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.getter in conformance PaperKitExtensionDocumentViewController()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.setter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(*v2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperKitExtensionDocumentViewController(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = *v1;
  swift_beginAccess();
  return protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperKitExtensionDocumentViewController;
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperKitExtensionDocumentViewController(uint64_t a1, char a2)
{
  return protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperKitExtensionDocumentViewController(a1, a2, (uint64_t (*)(uint64_t))PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset);
}

void protocol witness for PaperKitStreamableAttachment.participantDetailsDidChange() in conformance PaperKitExtensionDocumentViewController()
{
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.getter in conformance PaperKitExtensionDocumentViewController()
{
  uint64_t v1 = (unsigned __int8 *)(*v0
                         + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void protocol witness for PaperKitStreamableAttachment.showParticipantCursors.setter in conformance PaperKitExtensionDocumentViewController(char a1)
{
  uint64_t v3 = (unsigned char *)(*v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *uint64_t v3 = a1;
  PaperKitExtensionDocumentViewController.showParticipantCursors.didset();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperKitExtensionDocumentViewController(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = *v1;
  swift_beginAccess();
  return protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperKitExtensionDocumentViewController;
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperKitExtensionDocumentViewController(uint64_t a1, char a2)
{
  return protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperKitExtensionDocumentViewController(a1, a2, (uint64_t (*)(uint64_t))PaperKitExtensionDocumentViewController.showParticipantCursors.didset);
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperKitExtensionDocumentViewController(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t type metadata accessor for PaperKitExtensionDocumentViewController()
{
  return self;
}

uint64_t sub_20C746D18()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C746D50()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

void partial apply for closure #1 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(a1, v1 + v4, v5);
}

void partial apply for closure #2 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(uint64_t a1)
{
  closure #2 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(a1, v1);
}

uint64_t sub_20C746E98()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C746ED0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)()
{
  return closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)();
}

uint64_t sub_20C746F18()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in PaperKitExtensionDocumentViewController.thumbnailsVisible.didset()
{
  closure #1 in PaperKitExtensionDocumentViewController.thumbnailsVisible.didset(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_64()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type PaperKitExtensionDocumentViewController.Layout and conformance PaperKitExtensionDocumentViewController.Layout()
{
  unint64_t result = lazy protocol witness table cache variable for type PaperKitExtensionDocumentViewController.Layout and conformance PaperKitExtensionDocumentViewController.Layout;
  if (!lazy protocol witness table cache variable for type PaperKitExtensionDocumentViewController.Layout and conformance PaperKitExtensionDocumentViewController.Layout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperKitExtensionDocumentViewController.Layout and conformance PaperKitExtensionDocumentViewController.Layout);
  }
  return result;
}

__n128 sub_20C746FC8@<Q0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets;
  swift_beginAccess();
  __n128 result = *(__n128 *)v3;
  long long v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

uint64_t sub_20C747020@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible, a2);
}

void sub_20C74702C(char *a1)
{
}

uint64_t sub_20C747054@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_14Tm(a1, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors, a2);
}

void sub_20C747060(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(*a2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *uint64_t v3 = v2;
  PaperKitExtensionDocumentViewController.showParticipantCursors.didset();
}

uint64_t sub_20C7470BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger, a2);
}

uint64_t sub_20C7470C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperKitExtensionDocumentViewController.liveStreamMessenger : PaperKitExtensionDocumentViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.liveStreamMessenger.didset);
}

uint64_t sub_20C7470FC@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource);
  swift_beginAccess();
  *a2 = *v3;
  return swift_unknownObjectRetain();
}

uint64_t sub_20C74715C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider, a2);
}

uint64_t sub_20C747168(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperKitExtensionDocumentViewController.liveStreamMessenger : PaperKitExtensionDocumentViewController(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.textualContextProvider.didset);
}

uint64_t sub_20C74719C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_viewControllerForPresentingUI;
  swift_beginAccess();
  uint64_t result = MEMORY[0x210550400](v3);
  *a2 = result;
  return result;
}

uint64_t sub_20C7471F4()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t method lookup function for PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PaperKitExtensionDocumentViewController);
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.__allocating_init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)()
{
  return (*(uint64_t (**)(void))(v0 + 384))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.paperDocumentDidSave()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.paperDocumentDidFailToLoad(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.paperDocumentDidScroll()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.paperDocumentDidLoad(dataModel:view:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.thumbnailsVisible.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.thumbnailsVisible.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.thumbnailsVisible.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.revertAllChanges()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.showParticipantCursors.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.showParticipantCursors.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.showParticipantCursors.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.liveStreamMessenger.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.liveStreamMessenger.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.liveStreamMessenger.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.participantDetailsDataSource.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.participantDetailsDataSource.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.participantDetailsDataSource.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.participantDetailsDidChange()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.textualContextProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.textualContextProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.textualContextProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x248))();
}

unsigned char *storeEnumTagSinglePayload for PaperKitExtensionDocumentViewController.Layout(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C747998);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaperKitExtensionDocumentViewController.Layout()
{
  return &type metadata for PaperKitExtensionDocumentViewController.Layout;
}

void specialized PaperKitExtensionDocumentViewController.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentSyncManager] = 0;
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v1 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v1 = MEMORY[0x263F8EE88];
  }
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentCancellables] = v1;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  char v2 = &v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  long long v3 = *(_OWORD *)(MEMORY[0x263F834E8] + 16);
  *char v2 = *MEMORY[0x263F834E8];
  v2[1] = v3;
  v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible] = 0;
  v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  unsigned int v4 = &v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource];
  *unsigned int v4 = 0;
  v4[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void partial apply for closure #1 in closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)()
{
  closure #1 in closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(v0);
}

Swift::Void __swiftcall PPKPDFIconCollectionViewCell_iOS_Swift.prepareForReuse()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PPKPDFIconCollectionViewCell_iOS_Swift();
  objc_msgSendSuper2(&v2, sel_prepareForReuse);
  uint64_t v1 = OBJC_IVAR___PPKPDFIconCollectionViewCell_iOS_Swift_imageFetch;
  if (*(void *)&v0[OBJC_IVAR___PPKPDFIconCollectionViewCell_iOS_Swift_imageFetch])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v0[v1] = 0;
  swift_release();
}

id PPKPDFIconCollectionViewCell_iOS_Swift.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PPKPDFIconCollectionViewCell_iOS_Swift();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PPKPDFIconCollectionViewCell_iOS_Swift()
{
  return self;
}

Swift::Void __swiftcall FontSizeViewController.viewDidLoad()()
{
  v93.receiver = v0;
  v93.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v93, sel_viewDidLoad);
  uint64_t v1 = *MEMORY[0x263F83610];
  double v2 = *MEMORY[0x263F81828];
  long long v3 = (void *)*MEMORY[0x263F83470];
  unsigned int v4 = self;
  id v5 = v3;
  id v6 = objc_msgSend(v4, sel_traitCollectionWithPreferredContentSizeCategory_, v5);
  id v7 = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, v1, v2);
  if (!v7)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v6);

  if (!v9)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  id v10 = objc_msgSend(self, sel_labelColor);
  id v90 = self;
  id v92 = v9;
  id v11 = objc_msgSend(v90, sel_configurationWithFont_scale_, v9, 2);
  uint64_t v12 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C85EA50);
  id v89 = self;
  id v13 = objc_msgSend(v89, sel_systemImageNamed_withConfiguration_, v12, v11);

  if (!v13)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  id v88 = v13;
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v13);
  BOOL v91 = v10;
  objc_msgSend(v14, sel_setTintColor_, v10);
  objc_msgSend(v14, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v15 = ValueEditingViewController.slider.getter();
  id v16 = *(id *)&v15[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  objc_msgSend(v16, sel_addSubview_, v14);
  id v17 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_20C83B680;
  id v19 = objc_msgSend(v14, sel_centerXAnchor);
  id v20 = ValueEditingViewController.slider.getter();
  id v21 = *(id *)&v20[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  id v22 = objc_msgSend(v21, sel_centerXAnchor);
  id v23 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v22);

  *(void *)(v18 + 32) = v23;
  id v24 = objc_msgSend(v14, sel_centerYAnchor);
  double v25 = ValueEditingViewController.slider.getter();
  id v26 = *(id *)&v25[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  id v27 = objc_msgSend(v26, sel_centerYAnchor);
  id v28 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v27);

  *(void *)(v18 + 40) = v28;
  id v29 = objc_msgSend(v14, sel_topAnchor);
  double v30 = ValueEditingViewController.slider.getter();
  id v31 = *(id *)&v30[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  id v32 = objc_msgSend(v31, sel_topAnchor);
  id v33 = objc_msgSend(v29, sel_constraintGreaterThanOrEqualToAnchor_, v32);

  *(void *)(v18 + 48) = v33;
  id v34 = objc_msgSend(v14, sel_leadingAnchor);
  uint64_t v35 = ValueEditingViewController.slider.getter();
  id v36 = *(id *)&v35[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  id v37 = objc_msgSend(v36, sel_leadingAnchor);
  id v38 = objc_msgSend(v34, sel_constraintEqualToAnchor_constant_, v37, 4.0);

  *(void *)(v18 + 56) = v38;
  id v39 = objc_msgSend(v14, sel_bottomAnchor);
  double v40 = ValueEditingViewController.slider.getter();
  id v41 = *(id *)&v40[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  id v42 = objc_msgSend(v41, sel_bottomAnchor);
  id v43 = objc_msgSend(v39, sel_constraintLessThanOrEqualToAnchor_, v42);

  *(void *)(v18 + 64) = v43;
  id v44 = objc_msgSend(v14, sel_trailingAnchor);
  id v45 = ValueEditingViewController.slider.getter();
  id v46 = *(id *)&v45[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  id v47 = objc_msgSend(v46, sel_trailingAnchor);
  id v48 = objc_msgSend(v44, sel_constraintLessThanOrEqualToAnchor_, v47);

  *(void *)(v18 + 72) = v48;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isdouble a = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_activateConstraints_, isa);

  id v50 = objc_msgSend(v90, sel_configurationWithFont_scale_, v92, 3);
  id v51 = (void *)MEMORY[0x21054D080](0xD000000000000016, 0x800000020C85EA70);
  id v52 = objc_msgSend(v89, sel_systemImageNamed_withConfiguration_, v51, v50);

  if (v52)
  {
    id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v52);
    objc_msgSend(v53, sel_setTintColor_, v91);
    objc_msgSend(v53, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id v54 = ValueEditingViewController.slider.getter();
    id v55 = *(id *)&v54[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    objc_msgSend(v55, sel_addSubview_, v53);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_20C83B680;
    id v57 = objc_msgSend(v53, sel_centerXAnchor);
    id v58 = ValueEditingViewController.slider.getter();
    id v59 = *(id *)&v58[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    id v60 = objc_msgSend(v59, sel_centerXAnchor);
    id v61 = objc_msgSend(v57, sel_constraintEqualToAnchor_, v60);

    *(void *)(v56 + 32) = v61;
    id v62 = objc_msgSend(v53, sel_centerYAnchor);
    id v63 = ValueEditingViewController.slider.getter();
    id v64 = *(id *)&v63[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    id v65 = objc_msgSend(v64, sel_centerYAnchor);
    id v66 = objc_msgSend(v62, sel_constraintEqualToAnchor_, v65);

    *(void *)(v56 + 40) = v66;
    id v67 = objc_msgSend(v53, sel_topAnchor);
    id v68 = ValueEditingViewController.slider.getter();
    id v69 = *(id *)&v68[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    id v70 = objc_msgSend(v69, sel_topAnchor);
    id v71 = objc_msgSend(v67, sel_constraintGreaterThanOrEqualToAnchor_, v70);

    *(void *)(v56 + 48) = v71;
    id v72 = objc_msgSend(v53, sel_leadingAnchor);
    id v73 = ValueEditingViewController.slider.getter();
    id v74 = *(id *)&v73[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    id v75 = objc_msgSend(v74, sel_leadingAnchor);
    id v76 = objc_msgSend(v72, sel_constraintGreaterThanOrEqualToAnchor_, v75);

    *(void *)(v56 + 56) = v76;
    id v77 = objc_msgSend(v53, sel_bottomAnchor);
    id v78 = ValueEditingViewController.slider.getter();
    id v79 = *(id *)&v78[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    id v80 = objc_msgSend(v79, sel_bottomAnchor);
    id v81 = objc_msgSend(v77, sel_constraintLessThanOrEqualToAnchor_, v80);

    *(void *)(v56 + 64) = v81;
    id v82 = objc_msgSend(v53, sel_trailingAnchor);
    id v83 = ValueEditingViewController.slider.getter();
    id v84 = *(id *)&v83[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    id v85 = objc_msgSend(v84, sel_trailingAnchor);
    id v86 = objc_msgSend(v82, sel_constraintEqualToAnchor_constant_, v85, 2.0);

    *(void *)(v56 + 72) = v86;
    specialized Array._endMutation()();
    Class v87 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_activateConstraints_, v87);

    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t type metadata accessor for FontSizeViewController()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ShapeLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C748930);
}

uint64_t sub_20C748930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ShapeLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C7489B0);
}

uint64_t sub_20C7489B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ShapeLayout()
{
  uint64_t result = type metadata singleton initialization cache for ShapeLayout;
  if (!type metadata singleton initialization cache for ShapeLayout) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *ShapeLayout.createView<A>(in:canvas:parent:)(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v37[1] = a4;
  v37[2] = a5;
  id v38 = a1;
  id v39 = a3;
  id v40 = a2;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Shape>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  id v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  id v20 = (char *)v37 - v19;
  (*(void (**)(char *, void, uint64_t, double))(v6 + 16))(v8, v37[0], v5, v18);
  uint64_t v21 = type metadata accessor for Shape();
  unint64_t v22 = lazy protocol witness table accessor for type Shape and conformance Shape();
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<Shape> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v41 = v21;
  unint64_t v42 = v22;
  id v43 = &protocol witness table for Shape;
  swift_getKeyPath();
  id v23 = v39;
  id v38 = v39;
  id v24 = v40;
  id v25 = v40;
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat x = v44.origin.x;
  CGFloat y = v44.origin.y;
  CGFloat width = v44.size.width;
  CGFloat height = v44.size.height;
  double MinX = CGRectGetMinX(v44);
  v45.origin.CGFloat x = x;
  v45.origin.CGFloat y = y;
  v45.size.CGFloat width = width;
  v45.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v45);
  v46.origin.CGFloat x = x;
  v46.origin.CGFloat y = y;
  v46.size.CGFloat width = width;
  v46.size.CGFloat height = height;
  double v32 = CGRectGetWidth(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  double v33 = CGRectGetHeight(v47);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, v13);
  id v34 = objc_allocWithZone((Class)type metadata accessor for ShapeView());
  uint64_t v35 = specialized ShapeView.init(frame:canvasElement:canvas:parentCanvasElement:)(v16, v24, v23, MinX, MinY, v32, v33);

  (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
  return v35;
}

unint64_t lazy protocol witness table accessor for type Ref<Shape> and conformance Ref<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Ref<Shape> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<Shape> and conformance Ref<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<Shape>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<Shape> and conformance Ref<A>);
  }
  return result;
}

uint64_t sub_20C748EA0()
{
  return 24;
}

__n128 sub_20C748EAC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t CRAssetOrData.dataAsset.getter@<X0>(long long *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CRAssetOrData();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (long long *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of CRAssetOrData(v2, (uint64_t)v6);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    long long v8 = *v6;
    long long v9 = v6[1];
  }
  else
  {
    uint64_t result = outlined destroy of CRAssetOrData((uint64_t)v6);
    long long v8 = xmmword_20C8352B0;
    long long v9 = 0uLL;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t type metadata accessor for CRAssetOrData()
{
  uint64_t result = type metadata singleton initialization cache for CRAssetOrData;
  if (!type metadata singleton initialization cache for CRAssetOrData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined destroy of CRAssetOrData(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRAssetOrData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CRDataAsset.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v26[3] = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for SHA256();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SHA256Digest();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined copy of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, MEMORY[0x263F047F8]);
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      unint64_t v23 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      outlined copy of Data._Representation(a1, a2);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32);
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      unint64_t v23 = *(void *)(a1 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v13, v23);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v26, 0, 14);
      goto LABEL_7;
    default:
      v26[0] = a1;
      LOWORD(v26[1]) = a2;
      BYTE2(v26[1]) = BYTE2(a2);
      BYTE3(v26[1]) = BYTE3(a2);
      BYTE4(v26[1]) = BYTE4(a2);
      BYTE5(v26[1]) = BYTE5(a2);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  outlined consume of Data._Representation(a1, a2);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
  uint64_t v14 = v25;
  uint64_t v15 = Digest.makeIterator()();
  uint64_t v17 = specialized _copySequenceToContiguousArray<A>(_:)(v15, v16);
  swift_bridgeObjectRelease();
  uint64_t v18 = specialized Data.init<A>(_:)(v17);
  uint64_t v20 = v19;
  swift_release();
  outlined consume of Data._Representation(a1, a2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v12, v14);
  *a3 = v18;
  a3[1] = v20;
  a3[2] = a1;
  a3[3] = a2;
  return result;
}

uint64_t CRAssetOrData.asset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CRAssetOrData();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CRAssetOrData(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of CRAssetOrData((uint64_t)v6);
    uint64_t v7 = type metadata accessor for CRAsset();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 1, 1, v7);
  }
  else
  {
    uint64_t v9 = type metadata accessor for CRAsset();
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v6, v9);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
  }
}

uint64_t CRDataAsset.digest.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t CRDataAsset.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

double CRDataAsset.init(from:)@<D0>(_OWORD *a1@<X8>)
{
  swift_retain();
  uint64_t v3 = Data.init(from:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    CRDataAsset.init(_:)(v3, v4, (uint64_t *)v7);
    swift_release();
    double result = *(double *)v7;
    long long v6 = v7[1];
    *a1 = v7[0];
    a1[1] = v6;
  }
  return result;
}

uint64_t CRDataAsset.encode(to:)()
{
  return Data.encode(to:)();
}

uint64_t static CRDataAsset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Data.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CRDataAsset(uint64_t a1, uint64_t a2)
{
  return specialized static Data.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance CRDataAsset@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  outlined copy of Data._Representation(v2, v3);
  return outlined copy of Data._Representation(v4, v5);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CRDataAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CRDataAsset and conformance CRDataAsset();
  unint64_t v7 = lazy protocol witness table accessor for type CRDataAsset and conformance CRDataAsset();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

double protocol witness for CRCodable.init(from:) in conformance CRDataAsset@<D0>(_OWORD *a1@<X8>)
{
  swift_retain();
  uint64_t v3 = Data.init(from:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    CRDataAsset.init(_:)(v3, v4, (uint64_t *)v7);
    swift_release();
    double result = *(double *)v7;
    long long v6 = v7[1];
    *a1 = v7[0];
    a1[1] = v6;
  }
  return result;
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CRDataAsset()
{
  return Data.encode(to:)();
}

uint64_t CRDataAsset.debugDescription.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v6, "<CRDataAsset: ");
  outlined copy of Data._Representation(v1, v2);
  v3._uint64_t countAndFlagsBits = Data.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v1, v2);
  v4._uint64_t countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t CRAssetOrData.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CRAssetOrData();
  MEMORY[0x270FA5388](v3);
  unint64_t v5 = (_OWORD *)((char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CRAsset();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  CRAsset.init(from:)();
  if (v1)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CRAsset?);
    swift_retain();
    uint64_t v13 = Data.init(from:)();
    CRDataAsset.init(_:)(v13, v15, (uint64_t *)v18);
    swift_release();
    long long v16 = v18[1];
    *unint64_t v5 = v18[0];
    v5[1] = v16;
    swift_storeEnumTagMultiPayload();
    return outlined init with take of CRAssetOrData((uint64_t)v5, a1);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    swift_release();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v14(v12, v8, v9);
    v14((char *)a1, v12, v9);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t CRAssetOrData.encode(to:)()
{
  uint64_t v1 = type metadata accessor for CRAsset();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CRAssetOrData();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of CRAssetOrData(v0, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = *v7;
    unint64_t v9 = v7[1];
    uint64_t v11 = v7[2];
    unint64_t v10 = v7[3];
    Data.encode(to:)();
    outlined consume of Data._Representation(v8, v9);
    return outlined consume of Data._Representation(v11, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v4, v7, v1);
    CRAsset.encode(to:)();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t CRAssetOrData.visitReferences(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRAssetOrData();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CRAsset();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CRAssetOrData(v1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined destroy of CRAssetOrData((uint64_t)v4);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  CRAsset.visitReferences(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance CRAssetOrData@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CRAssetOrData(v1, a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CRAssetOrData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type CRAssetOrData and conformance CRAssetOrData, (void (*)(uint64_t))type metadata accessor for CRAssetOrData);
  uint64_t v7 = lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type CRAssetOrData and conformance CRAssetOrData, (void (*)(uint64_t))type metadata accessor for CRAssetOrData);
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance CRAssetOrData(uint64_t a1)
{
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CRAsset();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CRAssetOrData(v2, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined destroy of CRAssetOrData((uint64_t)v4);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  CRAsset.visitReferences(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CRAssetOrData@<X0>(uint64_t a1@<X8>)
{
  return CRAssetOrData.init(from:)(a1);
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CRAssetOrData()
{
  return CRAssetOrData.encode(to:)();
}

unint64_t CRAssetOrData.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRAsset();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRAssetOrData();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v20._countAndFlagsBits - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of CRAssetOrData(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = *v8;
    unint64_t v10 = v8[1];
    uint64_t v11 = v8[2];
    unint64_t v12 = v8[3];
    unint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD000000000000015;
    unint64_t v22 = 0x800000020C85EA90;
    v20._uint64_t countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    outlined copy of Data._Representation(v9, v10);
    outlined copy of Data._Representation(v11, v12);
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)&v20, "<CRDataAsset: ");
    HIBYTE(v20._object) = -18;
    outlined copy of Data._Representation(v9, v10);
    v13._uint64_t countAndFlagsBits = Data.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v9, v10);
    v14._uint64_t countAndFlagsBits = 62;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    outlined consume of Data._Representation(v9, v10);
    outlined consume of Data._Representation(v11, v12);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 62;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    outlined consume of Data._Representation(v9, v10);
    outlined consume of Data._Representation(v11, v12);
    return v21;
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
    unint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD000000000000016;
    unint64_t v22 = 0x800000020C85EAB0;
    v17._uint64_t countAndFlagsBits = CRAsset.debugDescription.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 62;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    unint64_t v16 = v21;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v16;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      uint64_t v5 = a2;
      if (a2 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v2)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v6 = result;
      double result = swift_bridgeObjectRetain();
      size_t v4 = 0;
      uint64_t v7 = v3 + 4;
      while (1)
      {
        char v8 = *(unsigned char *)(v6 + v5 + 32);
        if (!v4)
        {
          unint64_t v9 = v3[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_29;
          }
          int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1) {
            uint64_t v11 = 1;
          }
          else {
            uint64_t v11 = v10;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          unint64_t v12 = (void *)swift_allocObject();
          size_t v13 = 2 * _swift_stdlib_malloc_size_0(v12) - 64;
          void v12[2] = v11;
          v12[3] = v13;
          unint64_t v14 = (unint64_t)(v12 + 4);
          size_t v15 = v3[3] >> 1;
          if (v3[2])
          {
            if (v12 != v3 || v14 >= (unint64_t)v3 + v15 + 32) {
              memmove(v12 + 4, v3 + 4, v15);
            }
            v3[2] = 0;
          }
          uint64_t v7 = (unsigned char *)(v14 + v15);
          size_t v4 = (v13 >> 1) - v15;
          double result = swift_release();
          uint64_t v3 = v12;
        }
        BOOL v17 = __OFSUB__(v4--, 1);
        if (v17) {
          break;
        }
        ++v5;
        *v7++ = v8;
        if (v2 == v5)
        {
          double result = swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  size_t v4 = 0;
LABEL_24:
  unint64_t v18 = v3[3];
  if (v18 < 2) {
    return (uint64_t)v3;
  }
  unint64_t v19 = v18 >> 1;
  BOOL v17 = __OFSUB__(v19, v4);
  unint64_t v20 = v19 - v4;
  if (!v17)
  {
    v3[2] = v20;
    return (uint64_t)v3;
  }
LABEL_33:
  __break(1u);
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v68 = a2;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CHReflowableTextToken, PKDrawing));
  unint64_t v3 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v5 = (uint64_t *)((char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  id v61 = (char *)&v57 - v7;
  MEMORY[0x270FA5388](v8);
  id v60 = (char *)&v57 - v9;
  unint64_t v62 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    int64_t v10 = *(void **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    int64_t v10 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_3:
    uint64_t v11 = *(void **)(v68 + 16);
    unint64_t v65 = (unint64_t)v11;
    uint64_t v12 = (uint64_t)((uint64_t)v11 >= (uint64_t)v10 ? v10 : v11);
    unint64_t v59 = v3;
    if (v12 <= 0) {
      break;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CHReflowableTextToken, PKDrawing)>);
    uint64_t v13 = *(void *)(v3 + 72);
    int64_t v10 = (void *)((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v57 = *(unsigned __int8 *)(v3 + 80);
    unint64_t v14 = (void *)swift_allocObject();
    size_t v15 = _swift_stdlib_malloc_size_0(v14);
    if (!v13) {
      goto LABEL_82;
    }
    BOOL v16 = v15 - (void)v10 == 0x8000000000000000 && v13 == -1;
    uint64_t v63 = v13;
    if (v16) {
      goto LABEL_84;
    }
    uint64_t v17 = (uint64_t)(v15 - (void)v10) / v13;
    void v14[2] = v12;
    v14[3] = 2 * v17;
    uint64_t v58 = (uint64_t)v10;
    uint64_t v18 = (uint64_t)v10 + (void)v14;
    uint64_t v19 = v17 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v64 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v62)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    unint64_t v3 = 0;
    unint64_t v66 = a1 & 0xC000000000000001;
    uint64_t v21 = v19 - v12;
    while (v12 != v3)
    {
      if (v20 == v3) {
        goto LABEL_71;
      }
      if (v66)
      {
        id v24 = (id)MEMORY[0x21054E050](v3, a1);
      }
      else
      {
        if (v3 >= *(void *)(v64 + 16)) {
          goto LABEL_76;
        }
        id v24 = *(id *)(a1 + 8 * v3 + 32);
      }
      int64_t v10 = v24;
      if (v65 == v3) {
        goto LABEL_85;
      }
      uint64_t v25 = type metadata accessor for PKDrawing();
      uint64_t v26 = *(void *)(v25 - 8);
      id v27 = *(void (**)(char *, unint64_t, uint64_t))(v26 + 16);
      unint64_t v28 = v68
          + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))
          + *(void *)(v26 + 72) * v3;
      id v29 = (char *)v5 + *(int *)(v67 + 48);
      *uint64_t v5 = v10;
      v27(v29, v28, v25);
      outlined init with take of (CHReflowableTextToken, PKDrawing)((uint64_t)v5, v18);
      v18 += v63;
      if (v12 == ++v3)
      {
        unint64_t v3 = v59;
        uint64_t v23 = v64;
        uint64_t v22 = v57;
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
  }
  if (v12 < 0)
  {
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  unint64_t v14 = (void *)MEMORY[0x263F8EE78];
  uint64_t v21 = *(void *)(MEMORY[0x263F8EE78] + 24) >> 1;
  uint64_t v22 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v58 = (v22 + 32) & ~v22;
  uint64_t v18 = MEMORY[0x263F8EE78] + v58;
  uint64_t v23 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v66 = a1 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_27:
  if (a1 < 0) {
    uint64_t v30 = a1;
  }
  else {
    uint64_t v30 = v23;
  }
  uint64_t v63 = v30;
  uint64_t v64 = v23;
  uint64_t v57 = v22 | 7;
  uint64_t v5 = v60;
  id v31 = v61;
  if (v62)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      int64_t v10 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((void *)v12 == v10) {
        break;
      }
LABEL_34:
      if (v66)
      {
        id v32 = (id)MEMORY[0x21054E050](v12, a1);
      }
      else
      {
        if ((unint64_t)v12 >= *(void *)(v23 + 16)) {
          goto LABEL_72;
        }
        id v32 = *(id *)(a1 + 8 * v12 + 32);
      }
      double v33 = v32;
      if (__OFADD__(v12, 1)) {
        goto LABEL_73;
      }
      if (v65 == v12)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_66;
      }
      if (v12 >= v65) {
        goto LABEL_74;
      }
      uint64_t v34 = type metadata accessor for PKDrawing();
      uint64_t v35 = *(void *)(v34 - 8);
      id v36 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      unint64_t v37 = v68
          + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
          + *(void *)(v35 + 72) * v12;
      id v38 = (char *)v31 + *(int *)(v67 + 48);
      *id v31 = v33;
      v36(v38, v37, v34);
      outlined init with take of (CHReflowableTextToken, PKDrawing)((uint64_t)v31, (uint64_t)v5);
      if (v21)
      {
        id v39 = v14;
        BOOL v40 = __OFSUB__(v21--, 1);
        if (v40) {
          goto LABEL_75;
        }
      }
      else
      {
        unint64_t v41 = v14[3];
        if ((uint64_t)((v41 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_77;
        }
        int64_t v42 = v41 & 0xFFFFFFFFFFFFFFFELL;
        if (v42 <= 1) {
          uint64_t v43 = 1;
        }
        else {
          uint64_t v43 = v42;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CHReflowableTextToken, PKDrawing)>);
        uint64_t v44 = *(void *)(v3 + 72);
        uint64_t v45 = v58;
        id v39 = (void *)swift_allocObject();
        size_t v46 = _swift_stdlib_malloc_size_0(v39);
        if (!v44) {
          goto LABEL_78;
        }
        int64_t v47 = v46 - v45;
        if (v46 - v45 == 0x8000000000000000 && v44 == -1) {
          goto LABEL_79;
        }
        uint64_t v49 = v47 / v44;
        uint64_t v39[2] = v43;
        v39[3] = 2 * (v47 / v44);
        id v50 = (char *)v39 + v45;
        uint64_t v51 = v14[3] >> 1;
        uint64_t v52 = v51 * v44;
        if (v14[2])
        {
          if (v39 < v14 || v50 >= (char *)v14 + v45 + v52)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v39 != v14)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          void v14[2] = 0;
        }
        uint64_t v18 = (uint64_t)&v50[v52];
        uint64_t v53 = (v49 & 0x7FFFFFFFFFFFFFFFLL) - v51;
        swift_release();
        unint64_t v3 = v59;
        uint64_t v5 = v60;
        id v31 = v61;
        BOOL v40 = __OFSUB__(v53, 1);
        uint64_t v21 = v53 - 1;
        if (v40) {
          goto LABEL_75;
        }
      }
      outlined init with take of (CHReflowableTextToken, PKDrawing)((uint64_t)v5, v18);
      v18 += *(void *)(v3 + 72);
      ++v12;
      unint64_t v14 = v39;
      uint64_t v23 = v64;
      if (!v62) {
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    int64_t v10 = *(void **)(v23 + 16);
    if ((void *)v12 != v10) {
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_66:
  unint64_t v54 = v14[3];
  if (v54 >= 2)
  {
    unint64_t v55 = v54 >> 1;
    BOOL v40 = __OFSUB__(v55, v21);
    unint64_t v56 = v55 - v21;
    if (!v40)
    {
      void v14[2] = v56;
      return;
    }
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:

    __break(1u);
  }
}

uint64_t specialized static CRAssetOrData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRAsset();
  uint64_t v35 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v34 - v8;
  uint64_t v10 = type metadata accessor for CRAssetOrData();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  size_t v15 = (char *)&v34 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAssetOrData, CRAssetOrData));
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t *)&v18[*(int *)(v19 + 56)];
  outlined init with copy of CRAssetOrData(a1, (uint64_t)v18);
  outlined init with copy of CRAssetOrData(a2, (uint64_t)v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of CRAssetOrData((uint64_t)v18, (uint64_t)v12);
    uint64_t v21 = *v12;
    unint64_t v22 = v12[1];
    uint64_t v23 = v12[2];
    unint64_t v24 = v12[3];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = *v20;
      unint64_t v26 = v20[1];
      uint64_t v28 = v20[2];
      unint64_t v27 = v20[3];
      char v29 = specialized static Data.== infix(_:_:)(v23, v24, v28, v27);
      outlined consume of Data._Representation(v25, v26);
      outlined consume of Data._Representation(v28, v27);
      outlined consume of Data._Representation(v21, v22);
      outlined consume of Data._Representation(v23, v24);
LABEL_9:
      outlined destroy of CRAssetOrData((uint64_t)v18);
      return v29 & 1;
    }
    outlined consume of Data._Representation(v21, v22);
    outlined consume of Data._Representation(v23, v24);
  }
  else
  {
    outlined init with copy of CRAssetOrData((uint64_t)v18, (uint64_t)v15);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v30 = v35;
      id v31 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v31(v9, v15, v4);
      v31(v6, (char *)v20, v4);
      char v29 = static CRAsset.== infix(_:_:)();
      id v32 = *(void (**)(char *, uint64_t))(v30 + 8);
      v32(v6, v4);
      v32(v9, v4);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v4);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for (CRAssetOrData, CRAssetOrData));
  char v29 = 0;
  return v29 & 1;
}

uint64_t outlined init with take of CRAssetOrData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRAssetOrData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CRDataAsset and conformance CRDataAsset()
{
  unint64_t result = lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset;
  if (!lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset;
  if (!lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset;
  if (!lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset;
  if (!lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset);
  }
  return result;
}

uint64_t base witness table accessor for CRType in CRAssetOrData()
{
  return lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type CRAssetOrData and conformance CRAssetOrData, (void (*)(uint64_t))type metadata accessor for CRAssetOrData);
}

uint64_t base witness table accessor for CRCodable in CRAssetOrData()
{
  return lazy protocol witness table accessor for type SHA256 and conformance SHA256(&lazy protocol witness table cache variable for type CRAssetOrData and conformance CRAssetOrData, (void (*)(uint64_t))type metadata accessor for CRAssetOrData);
}

uint64_t destroy for CRDataAsset(uint64_t *a1)
{
  outlined consume of Data._Representation(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  return outlined consume of Data._Representation(v2, v3);
}

uint64_t *initializeWithCopy for CRDataAsset(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  outlined copy of Data._Representation(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for CRDataAsset(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  outlined copy of Data._Representation(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  outlined consume of Data._Representation(v10, v11);
  return a1;
}

uint64_t *assignWithTake for CRDataAsset(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRDataAsset(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CRDataAsset(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRDataAsset()
{
  return &type metadata for CRDataAsset;
}

uint64_t *initializeBufferWithCopyOfBuffer for CRAssetOrData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = *a2;
      unint64_t v7 = a2[1];
      outlined copy of Data._Representation(*a2, v7);
      *a1 = v6;
      a1[1] = v7;
      uint64_t v9 = a2[2];
      unint64_t v8 = a2[3];
      outlined copy of Data._Representation(v9, v8);
      a1[2] = v9;
      a1[3] = v8;
    }
    else
    {
      uint64_t v11 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CRAssetOrData(uint64_t *a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*a1, a1[1]);
    uint64_t v2 = a1[2];
    unint64_t v3 = a1[3];
    return outlined consume of Data._Representation(v2, v3);
  }
  else
  {
    uint64_t v5 = type metadata accessor for CRAsset();
    uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(a1, v5);
  }
}

uint64_t *initializeWithCopy for CRAssetOrData(uint64_t *a1, uint64_t *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = *a2;
    unint64_t v5 = a2[1];
    outlined copy of Data._Representation(*a2, v5);
    *a1 = v4;
    a1[1] = v5;
    uint64_t v7 = a2[2];
    unint64_t v6 = a2[3];
    outlined copy of Data._Representation(v7, v6);
    a1[2] = v7;
    a1[3] = v6;
  }
  else
  {
    uint64_t v8 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for CRAssetOrData(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of CRAssetOrData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = *a2;
      unint64_t v5 = a2[1];
      outlined copy of Data._Representation(*a2, v5);
      *a1 = v4;
      a1[1] = v5;
      uint64_t v7 = a2[2];
      unint64_t v6 = a2[3];
      outlined copy of Data._Representation(v7, v6);
      a1[2] = v7;
      a1[3] = v6;
    }
    else
    {
      uint64_t v8 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for CRAssetOrData(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for CRAsset();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for CRAssetOrData(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CRAssetOrData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for CRAsset();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for CRAssetOrData()
{
  uint64_t result = type metadata accessor for CRAsset();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t outlined init with take of (CHReflowableTextToken, PKDrawing)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CHReflowableTextToken, PKDrawing));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t LineEnd.path(from:to:strokeWidth:)(CGFloat a1, CGFloat a2, double a3, double a4, double a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v8 = *v5;
  if (v8 == 7)
  {
    double v10 = 0.25;
    if (a5 >= 1.0)
    {
LABEL_7:
      double v11 = a5 * 3.6 + 2.4;
      goto LABEL_8;
    }
LABEL_5:
    double v11 = a5 * 6.0;
LABEL_8:
    double v9 = v11 * v10;
    goto LABEL_9;
  }
  if (v8 != 8)
  {
    double v10 = 1.0;
    if (a5 >= 1.0) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  double v9 = a5 * 5.0;
LABEL_9:
  double v12 = a3 - a1;
  double v13 = a4 - a2;
  double v14 = sqrt(v12 * v12 + v13 * v13);
  specialized CGAffineTransform.init(transformMovingPoints:to:)(v18, 0.0, 0.0, 1.0, 0.0, a1, a2, v12 / v14 * v9 + a1, v13 / v14 * v9 + a2);
  CGPathRef v15 = LineEnd.path.getter();
  uint64_t v16 = MEMORY[0x21054F0D0](v15, v18);

  return v16;
}

PaperKit::LineEnd_optional __swiftcall LineEnd.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 1;
  switch(rawValue)
  {
    case 0:
      char v2 = 0;
      goto LABEL_3;
    case 1:
LABEL_3:
      *unint64_t v1 = v2;
      break;
    case 2:
      *unint64_t v1 = 2;
      break;
    case 3:
      *unint64_t v1 = 3;
      break;
    case 4:
      *unint64_t v1 = 4;
      break;
    case 5:
      *unint64_t v1 = 5;
      break;
    case 6:
      *unint64_t v1 = 6;
      break;
    case 7:
      *unint64_t v1 = 7;
      break;
    default:
      if (rawValue == 90) {
        char v3 = 8;
      }
      else {
        char v3 = 9;
      }
      *unint64_t v1 = v3;
      break;
  }
  return (PaperKit::LineEnd_optional)rawValue;
}

uint64_t LineEnd.rawValue.getter()
{
  return qword_20C848E18[*v0];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LineEnd(char *a1, char *a2)
{
  return qword_20C848E18[*a1] == qword_20C848E18[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LineEnd()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_20C848E18[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LineEnd()
{
  Hasher._combine(_:)(qword_20C848E18[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LineEnd()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_20C848E18[v1]);
  return Hasher._finalize()();
}

PaperKit::LineEnd_optional protocol witness for RawRepresentable.init(rawValue:) in conformance LineEnd(Swift::Int *a1)
{
  return LineEnd.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LineEnd(void *a1@<X8>)
{
  *a1 = qword_20C848E18[*v1];
}

uint64_t protocol witness for Decodable.init(from:) in conformance LineEnd()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LineEnd()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance LineEnd(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  uint64_t v3 = MEMORY[0x263F33170];
  return MEMORY[0x270F180A8](a1, v2, v3);
}

uint64_t protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance LineEnd(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  uint64_t v3 = MEMORY[0x263F33170];
  return MEMORY[0x270F180A0](a1, v2, v3);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance LineEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  unint64_t v7 = lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance LineEnd()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance LineEnd()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance LineEnd(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  unint64_t v3 = lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  uint64_t v4 = MEMORY[0x263F33180];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

unsigned char *storeEnumTagSinglePayload for LineEnd(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C74C1D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LineEnd()
{
  return &type metadata for LineEnd;
}

CGPathRef LineEnd.path.getter()
{
  switch(*v0)
  {
    case 1:
    case 8:
      CGMutablePathRef Mutable = CGPathCreateMutable();
      v13.double a = 1.0;
      v13.double b = 0.0;
      v13.double c = 0.0;
      v13.double d = 1.0;
      v13.CGFloat tx = 0.0;
      v13.CGFloat ty = 0.0;
      CGMutablePathRef.move(to:transform:)((CGPoint)0, &v13);
      CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(-0.5, 1.0), &v13);
      double v2 = 1.0;
      double v3 = 0.5;
      goto LABEL_5;
    case 2:
      CGMutablePathRef Mutable = CGPathCreateMutable();
      v13.double a = 1.0;
      v13.double b = 0.0;
      v13.double c = 0.0;
      v13.double d = 1.0;
      v13.CGFloat tx = 0.0;
      v13.CGFloat ty = 0.0;
      CGMutablePathRef.move(to:transform:)((CGPoint)0, &v13);
      CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(-0.5625, 1.125), &v13);
      CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(0xBFD5B06D1D200914, 0x3FF3C9F25C5BFEDELL), &v13);
      CGMutablePathRef.addLine(to:transform:)((CGPoint)0x3FE1E3779B97F4A7uLL, &v13);
      CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(0x3FD5B06D1D200914, 0x3FF3C9F25C5BFEDELL), &v13);
      double v2 = 1.125;
      double v3 = 0.5625;
LABEL_5:
      CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v3, *(unint64_t *)&v2), &v13);
      CGPathCloseSubpath(Mutable);
      goto LABEL_12;
    case 3:
      uint64_t v4 = 0;
      double v5 = -0.5;
      double v6 = 1.0;
      double v7 = 1.0;
      return CGPathCreateWithEllipseInRect(*(CGRect *)&v4, 0);
    case 4:
      CGMutablePathRef Mutable = CGPathCreateMutable();
      v13.double a = 1.0;
      v13.double b = 0.0;
      v13.double c = 0.0;
      v13.double d = 1.0;
      v13.CGFloat tx = 0.0;
      v13.CGFloat ty = 0.0;
      v15.origin.CGFloat x = 0.0;
      v15.origin.CGFloat y = -0.5;
      v15.size.CGFloat width = 1.0;
      v15.size.CGFloat height = 1.0;
      CGMutablePathRef.addEllipse(in:transform:)(v15, &v13);
      v16.origin.CGFloat x = 0.0;
      v16.origin.CGFloat y = -0.5;
      v16.size.CGFloat width = 1.0;
      v16.size.CGFloat height = 1.0;
      CGRect v17 = CGRectInset(v16, 0.25, 0.25);
      CGMutablePathRef.addEllipse(in:transform:)((__C::CGRect)v17, &v13);
      goto LABEL_12;
    case 5:
      uint64_t v9 = 0;
      double v10 = -0.5;
      double v11 = 1.0;
      double v12 = 1.0;
      goto LABEL_14;
    case 6:
      CGMutablePathRef Mutable = CGPathCreateMutable();
      v13.double a = 1.0;
      v13.double b = 0.0;
      v13.double c = 0.0;
      v13.double d = 1.0;
      v13.CGFloat tx = 0.0;
      v13.CGFloat ty = 0.0;
      v18.origin.CGFloat x = 0.0;
      v18.origin.CGFloat y = -0.5;
      v18.size.CGFloat width = 1.0;
      v18.size.CGFloat height = 1.0;
      CGMutablePathRef.addRect(_:transform:)(v18, &v13);
      v19.origin.CGFloat x = 0.0;
      v19.origin.CGFloat y = -0.5;
      v19.size.CGFloat width = 1.0;
      v19.size.CGFloat height = 1.0;
      CGRect v20 = CGRectInset(v19, 0.25, 0.25);
      CGMutablePathRef.addRect(_:transform:)((__C::CGRect)v20, &v13);
      goto LABEL_12;
    case 7:
      uint64_t v9 = 0;
      double v10 = -2.0;
      double v11 = 1.0;
      double v12 = 4.0;
LABEL_14:
      CGPathRef result = CGPathCreateWithRect(*(CGRect *)&v9, 0);
      break;
    default:
      CGMutablePathRef Mutable = CGPathCreateMutable();
      v13.double a = 1.0;
      v13.double b = 0.0;
      v13.double c = 0.0;
      v13.double d = 1.0;
      v13.CGFloat tx = 0.0;
      v13.CGFloat ty = 0.0;
      CGMutablePathRef.move(to:transform:)((CGPoint)0, &v13);
LABEL_12:
      CGPathRef result = Mutable;
      break;
  }
  return result;
}

uint64_t PKDrawingStruct.init()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  CRRegister.init(wrappedValue:)();
  uint64_t v2 = type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t result = CROrderedSet.init()();
  *(void *)(a1 + *(int *)(v2 + 24)) = MEMORY[0x263F8EE80];
  return result;
}

double PKDrawingStruct.bounds<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  double v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for PKDrawingStruct();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v10, v3 + *(int *)(v11 + 20), v7);
  double v12 = *MEMORY[0x263F001A0];
  double v13 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v14 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v15 = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a1;
  double v16 = specialized Sequence.reduce<A>(_:_:)((void (*)(void *__return_ptr, double *, char *))partial apply for closure #1 in PKDrawingStruct.bounds<A>(in:), (uint64_t)v18, v12, v13, v14, v15);
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  return v16;
}

uint64_t PKDrawingStruct.deleteStrokes<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (char *)type metadata accessor for CRKeyPath();
  uint64_t v12 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in PKDrawingStruct.deleteStrokes<A, B>(_:in:), 0, a3, v7, MEMORY[0x263F8E628], a4, MEMORY[0x263F8E658], v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  uint64_t v10 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A], &demangling cache variable for type metadata for [CRKeyPath]);
  PKDrawingStruct.deleteStrokes<A, B>(_:in:)((uint64_t)&v12, a2, v9, v10);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t AssociatedTypeWitness;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t AssociatedConformanceWitness;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (**v43)(char *, uint64_t, uint64_t);
  void (**v44)(uint64_t, char *, uint64_t);
  void (**v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void (**v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (**v78)(uint64_t, uint64_t);
  uint64_t (**v79)(char *, uint64_t, uint64_t);
  void (*v80)(char *, char *, uint64_t);
  unsigned int (*v81)(char *, uint64_t, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  id v84 = a1;
  id v74 = a2;
  id v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  unint64_t v62 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  id v77 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v67 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v68 = (char *)&v62 - v10;
  MEMORY[0x270FA5388](v11);
  double v13 = (char *)&v62 - v12;
  double v14 = type metadata accessor for CRKeyPath();
  double v15 = *(void *)(v14 - 8);
  id v85 = v14;
  id v86 = v15;
  MEMORY[0x270FA5388](v14);
  id v82 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  unint64_t v66 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  id v73 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  id v72 = (char *)&v62 - v20;
  MEMORY[0x270FA5388](v21);
  id v71 = (uint64_t)&v62 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v62 - v24;
  unint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v29 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v30);
  id v32 = (char *)&v62 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v35 = (char *)&v62 - v34;
  id v36 = swift_allocObject();
  id v76 = v36;
  *(void *)(v36 + 16) = MEMORY[0x263F8EE88];
  Class v87 = v36 + 16;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v84, a3);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v64 = a4;
  uint64_t v63 = a3;
  unint64_t v37 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  id v39 = v35;
  id v84 = v37;
  dispatch thunk of IteratorProtocol.next()();
  BOOL v40 = v85;
  unint64_t v41 = v86 + 48;
  id v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
  if (v81(v28, 1, v85) != 1)
  {
    id v80 = *(void (**)(char *, char *, uint64_t))(v86 + 32);
    v86 += 32;
    id v78 = (void (**)(uint64_t, uint64_t))(v66 + 8);
    id v79 = (uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
    id v69 = (void (**)(char *, char *, uint64_t))(v66 + 16);
    id v70 = v41;
    v80(v82, v28, v40);
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      Ref.init(id:)();
      type metadata accessor for PKDrawingStruct();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      CROrderedSet.remove(_:)();
      id v61 = (*v79)(v13, 1, v17);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      if (v61 == 1)
      {
        unint64_t v54 = v72;
        (*v69)(v72, v25, v17);
        unint64_t v55 = AssociatedConformanceWitness;
        unint64_t v56 = v39;
        uint64_t v57 = v71;
        specialized Set._Variant.insert(_:)(v71, v54);
        uint64_t v58 = *v78;
        unint64_t v59 = v57;
        id v39 = v56;
        AssociatedConformanceWitness = v55;
        (*v78)(v59, v17);
        v58((uint64_t)v25, v17);
      }
      else
      {
        (*v78)((uint64_t)v25, v17);
      }
      dispatch thunk of IteratorProtocol.next()();
      id v60 = v85;
      if (v81(v28, 1, v85) == 1) {
        break;
      }
      v80(v82, v28, v60);
    }
  }
  (*(void (**)(char *, uint64_t))(v65 + 8))(v39, v84);
  if (*(void *)(*(void *)v87 + 16))
  {
    int64_t v42 = v83 + *(int *)(type metadata accessor for PKDrawingStruct() + 20);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    id v86 = v42;
    CROrderedSet.makeIterator()();
    swift_beginAccess();
    uint64_t v43 = (unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
    uint64_t v44 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    uint64_t v45 = (void (**)(uint64_t, uint64_t))(v66 + 8);
    size_t v46 = v64;
    int64_t v47 = v63;
    id v48 = v68;
    uint64_t v49 = (uint64_t)v73;
    do
    {
      CROrderedSet.Iterator.next()();
      if ((*v43)(v48, 1, v17) == 1) {
        break;
      }
      (*v44)(v49, v48, v17);
      if (removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(v49, v76, v74, v47, v46))
      {
        uint64_t v51 = v67;
        CROrderedSet.remove(_:)();
        uint64_t v52 = (uint64_t)v51;
        id v48 = v68;
        outlined destroy of StocksKitCurrencyCache.Provider?(v52, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      }
      id v50 = *(void *)(*(void *)v87 + 16);
      (*v45)(v49, v17);
    }
    while (v50);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v77, v75);
  }
  return swift_release();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  unint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v55 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v53 = (char *)&v40 - v13;
  double v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v51 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  unint64_t v22 = (char *)&v40 - v21;
  MEMORY[0x270FA5388](v23);
  BOOL v40 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v30 = (char *)&v40 - v29;
  Swift::Int v31 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v61 = Array.init()();
  uint64_t v56 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v31);
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  unint64_t v59 = v30;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    double v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*v33)(v22, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v22, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v22, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v22, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v31)
      {
        uint64_t v35 = v54;
        id v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  id v36 = v51;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  unint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    unint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    id v38 = (void (**)(char *, uint64_t))(v35 + 8);
    id v39 = v41;
    unint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

double PKDrawingStruct.canvasBounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t PKDrawingStruct.canvasBounds.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t PKDrawingStruct.requiredContentVersion<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a1;
  uint64_t v32 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v38 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v33 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  double v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.makeIterator()();
  id v39 = v16;
  uint64_t v40 = v14;
  CROrderedSet.Iterator.next()();
  uint64_t v17 = v8;
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v19 = v8 + 48;
  uint64_t v18 = v20;
  uint64_t v21 = 1;
  unint64_t v41 = v13;
  if (v20(v13, 1, v7) != 1)
  {
    unint64_t v22 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v36 = v19;
    unint64_t v37 = v22;
    uint64_t v34 = v4;
    uint64_t v35 = v18;
    uint64_t v24 = v31;
    uint64_t v23 = v32;
    uint64_t v25 = (void (**)(char *, uint64_t))(v38 + 8);
    uint64_t v38 = v17 + 32;
    uint64_t v26 = (void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v21 = 1;
    uint64_t v27 = v41;
    do
    {
      v37(v10, v27, v7);
      Ref.subscript.getter();
      uint64_t v28 = CRRegister<>.requiredContentVersion<A>(in:)(v24, a2, v23);
      (*v25)(v6, v34);
      (*v26)(v10, v7);
      if (v21 <= v28) {
        uint64_t v21 = v28;
      }
      CROrderedSet.Iterator.next()();
      uint64_t v27 = v41;
    }
    while (v35(v41, 1, v7) != 1);
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v40);
  return v21;
}

uint64_t static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(uint64_t a1, CGFloat *a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v99 = a5;
  double v115 = a4;
  int v102 = a3;
  CGFloat v6 = *a2;
  CGFloat v7 = a2[1];
  CGFloat v8 = a2[2];
  CGFloat v9 = a2[3];
  CGFloat v10 = a2[4];
  CGFloat v11 = a2[5];
  id v92 = a2;
  uint64_t v104 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v104);
  BOOL v91 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v13 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  id v90 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v98 = (char *)&v78 - v16;
  uint64_t v17 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v17 - 8);
  id v89 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v97 = (char *)&v78 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  CGFloat v107 = *(void (***)(char *, uint64_t))(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v24 = *(void *)(v101 - 8);
  MEMORY[0x270FA5388](v101);
  double v109 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v31 = (char *)&v78 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  double v111 = (char *)&v78 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  t1.double a = v6;
  t1.double b = v7;
  t1.double c = v8;
  t1.double d = v9;
  t1.double tx = v10;
  t1.double ty = v11;
  uint64_t result = CGAffineTransformIsIdentity(&t1);
  if (!result || (v102 & 1) == 0)
  {
    uint64_t v36 = *(void *)(a1 + 16);
    if (v36)
    {
      uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v37 = v13;
      uint64_t v38 = a1
          + ((*(unsigned __int8 *)(*(void *)(v114 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v114 - 8) + 80));
      uint64_t v39 = a1;
      uint64_t v40 = (unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      uint64_t v113 = *(void *)(*(void *)(v114 - 8) + 72);
      double v112 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
      double v108 = (void (**)(char *, char *, uint64_t))(v24 + 16);
      ++v107;
      uint64_t v106 = (void (**)(char *, uint64_t))(v24 + 8);
      uint64_t v105 = (unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      uint64_t v96 = (void (**)(char *, char *, uint64_t))(v33 + 32);
      uint64_t v100 = (void (**)(char *, uint64_t))(v37 + 8);
      objc_super v93 = (void (**)(char *, uint64_t))(v33 + 8);
      uint64_t v80 = v39;
      swift_bridgeObjectRetain();
      double v81 = 0.001;
      double v79 = 0.1;
      uint64_t v95 = v21;
      uint64_t v41 = v101;
      double v85 = v8;
      double v84 = v9;
      double v83 = v10;
      double v82 = v11;
      double v94 = v23;
      uint64_t v110 = v32;
      while (1)
      {
        WeakRef.subscript.getter();
        if ((*v40)(v28, 1, v41))
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
          (*v112)(v31, 1, 1, v32);
        }
        else
        {
          uint64_t v42 = v109;
          (*v108)(v109, v28, v41);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
          CRRegister.value.getter();
          SharedTagged_2.tagged1.getter();
          (*v107)(v23, v21);
          uint64_t v43 = v42;
          uint64_t v32 = v110;
          (*v106)(v43, v41);
          if ((*v105)(v31, 1, v32) != 1)
          {
            (*v96)(v111, v31, v32);
            uint64_t v44 = v115;
            uint64_t v45 = (void (*)(CGAffineTransform *, void))Ref.subscript.modify();
            PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(v44, v99);
            v45(&t1, 0);
            if (v102)
            {
              uint64_t v46 = (uint64_t)v97;
              Ref.subscript.getter();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
              uint64_t v47 = v98;
              CRRegister.wrappedValue.getter();
              _s8PaperKit15PKDrawingStructVWOhTm_1(v46, type metadata accessor for PKStrokeStruct);
              uint64_t v48 = v103;
              id v88 = (void (*)(char *, uint64_t))Ref.subscript.modify();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
              uint64_t v49 = (void (*)(char *, void))CRRegister.wrappedValue.modify();
              uint64_t v51 = v50;
              long long v52 = v50[1];
              long long v53 = v50[2];
              *(_OWORD *)&t1.double a = *v50;
              *(_OWORD *)&t1.double c = v52;
              *(_OWORD *)&t1.double tx = v53;
              t2.double a = v6;
              t2.double b = v7;
              t2.double c = v8;
              t2.double d = v9;
              t2.double tx = v10;
              t2.double ty = v11;
              CGAffineTransformConcat(&v116, &t1, &t2);
              long long v54 = *(_OWORD *)&v116.c;
              long long v55 = *(_OWORD *)&v116.tx;
              *uint64_t v51 = *(_OWORD *)&v116.a;
              v51[1] = v54;
              v51[2] = v55;
              v49(v118, 0);
              v88(v119, 0);
              uint64_t v56 = v47;
              uint64_t v21 = v95;
              (*v100)(v56, v48);
              (*v93)(v111, v32);
            }
            else
            {
              double v57 = v6;
              uint64_t v58 = (uint64_t)v89;
              Ref.subscript.getter();
              uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
              uint64_t v60 = v90;
              uint64_t v87 = v59;
              CRRegister.wrappedValue.getter();
              _s8PaperKit15PKDrawingStructVWOhTm_1(v58, type metadata accessor for PKStrokeStruct);
              uint64_t v61 = (uint64_t)v91;
              uint64_t v62 = v103;
              Ref.subscript.getter();
              id v88 = *v100;
              v88(v60, v62);
              uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
              CRRegister.wrappedValue.getter();
              double a = t1.a;
              double b = t1.b;
              double c = t1.c;
              double d = t1.d;
              double tx = t1.tx;
              double ty = t1.ty;
              _s8PaperKit15PKDrawingStructVWOhTm_1(v61, type metadata accessor for PKStrokeInheritedProperties);
              id v70 = v92;
              if (vabdd_f64(a, *v92) >= v81
                || vabdd_f64(b, v92[1]) >= v81
                || vabdd_f64(c, v92[2]) >= v81
                || vabdd_f64(d, v92[3]) >= v81
                || vabdd_f64(tx, v92[4]) >= v79
                || vabdd_f64(ty, v92[5]) >= v79)
              {
                uint64_t v86 = v63;
                uint64_t v71 = (uint64_t)v97;
                Ref.subscript.getter();
                id v72 = v98;
                CRRegister.wrappedValue.getter();
                _s8PaperKit15PKDrawingStructVWOhTm_1(v71, type metadata accessor for PKStrokeStruct);
                uint64_t v73 = v103;
                id v74 = (void (*)(CGAffineTransform *, void))Ref.subscript.modify();
                long long v75 = *((_OWORD *)v70 + 2);
                long long v76 = *(_OWORD *)v70;
                *(_OWORD *)&t1.double c = *((_OWORD *)v70 + 1);
                *(_OWORD *)&t1.double tx = v75;
                *(_OWORD *)&t1.double a = v76;
                CRRegister.wrappedValue.setter();
                v74(&t2, 0);
                id v77 = v72;
                uint64_t v32 = v110;
                v88(v77, v73);
              }
              (*v93)(v111, v32);
              CGFloat v6 = v57;
              CGFloat v8 = v85;
              CGFloat v9 = v84;
              CGFloat v10 = v83;
              CGFloat v11 = v82;
              uint64_t v21 = v95;
            }
            uint64_t v23 = v94;
            uint64_t v41 = v101;
            goto LABEL_7;
          }
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
LABEL_7:
        v38 += v113;
        if (!--v36) {
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return result;
}

void (*PKDrawingStruct.canvasBounds.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PKDrawingStruct.$canvasBounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PKDrawingStruct.$canvasBounds : PKDrawingStruct(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  CGFloat v9 = (char *)&v12 - v8;
  CGFloat v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t PKDrawingStruct.$canvasBounds.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*PKDrawingStruct.$canvasBounds.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t PKDrawingStruct.strokes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PKDrawingStruct() + 20);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t PKDrawingStruct.strokes.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PKDrawingStruct() + 20);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

double (*PKDrawingStruct.strokes.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PKDrawingStruct.additionalFields.getter()
{
  type metadata accessor for PKDrawingStruct();
  return swift_bridgeObjectRetain();
}

uint64_t PKDrawingStruct.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PKDrawingStruct() + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*PKDrawingStruct.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static PKDrawingStruct.fields.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26ACB4820;
  uint64_t v4 = qword_26ACB4828;
  uint64_t v3 = unk_26ACB4830;
  uint64_t v5 = qword_26ACB4838;
  uint64_t v6 = qword_26ACB4840;
  *a1 = static PKDrawingStruct.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

void closure #1 in PKDrawingStruct.bounds<A>(in:)(CGFloat *a1@<X0>, void *a2@<X2>, CGRect *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  CGFloat v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat v10 = *a1;
  CGFloat v11 = a1[1];
  CGFloat v12 = a1[2];
  CGFloat v13 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  uint64_t v14 = type metadata accessor for Capsule();
  uint64_t WitnessTable = swift_getWitnessTable();
  double v16 = specialized CRRegister<>.bounds(in:)(a2, (uint64_t)v9, v14, WitnessTable);
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v24.origin.CGFloat x = v10;
  v24.origin.CGFloat y = v11;
  v24.size.CGFloat width = v12;
  v24.size.CGFloat height = v13;
  v25.origin.CGFloat x = v16;
  v25.origin.CGFloat y = v18;
  v25.size.CGFloat width = v20;
  v25.size.CGFloat height = v22;
  *a3 = CGRectUnion(v24, v25);
}

void partial apply for closure #1 in PKDrawingStruct.bounds<A>(in:)(CGFloat *a1@<X0>, CGRect *a2@<X8>)
{
  closure #1 in PKDrawingStruct.bounds<A>(in:)(a1, *(void **)(v2 + 32), a2);
}

uint64_t PKDrawingStruct.visitStrokes<A>(in:_:)(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  CGFloat v20 = a2;
  uint64_t v21 = a3;
  uint64_t v19 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v7 - 8);
  CGFloat v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v18 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  CGFloat v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.makeIterator()();
  uint64_t v22 = v10;
  CGFloat v13 = v12;
  CROrderedSet.Iterator.next()();
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v14(v9, 1, v3) != 1)
  {
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    do
    {
      v15(v6, v9, v3);
      visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)((uint64_t)v6, v19, v20, v21);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CROrderedSet.Iterator.next()();
    }
    while (v14(v9, 1, v3) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v13, v22);
}

uint64_t visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v58 = a4;
  uint64_t v59 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v50 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v52 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v62 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v51 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v63 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v60 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v55 = *(void *)(v13 - 8);
  uint64_t v56 = v13;
  MEMORY[0x270FA5388](v13);
  double v57 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  long long v54 = (char *)&v47 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  CGFloat v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = a2;
  uint64_t v53 = v6;
  uint64_t v28 = a1;
  Ref.subscript.getter();
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v18 + 8);
  v29(v20, v17);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  LODWORD(a2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v23, 1, v30);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  if (a2 == 1)
  {
    uint64_t v31 = v57;
    uint64_t v49 = v25;
    CRRegister.value.getter();
    uint64_t v32 = v60;
    SharedTagged_2.tagged2.getter();
    v29(v20, v17);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v60, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v27, v24);
    }
    else
    {
      uint64_t v47 = v27;
      uint64_t v48 = v24;
      uint64_t v36 = v60;
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v33);
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v54, v31, v56);
      CRSequence.makeIterator()();
      uint64_t v37 = v62;
      CRSequence.Iterator.next()();
      uint64_t v38 = v37;
      uint64_t v39 = v50;
      uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
      uint64_t v41 = v53;
      int v42 = v40(v37, 1, v53);
      uint64_t v43 = v58;
      uint64_t v44 = v59;
      uint64_t v45 = v52;
      if (v42 != 1)
      {
        uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
        do
        {
          v46(v45, v38, v41);
          visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)(v45, v61, v44, v43);
          (*(void (**)(char *, uint64_t))(v39 + 8))(v45, v41);
          CRSequence.Iterator.next()();
          uint64_t v38 = v62;
        }
        while (v40(v62, 1, v41) != 1);
      }
      (*(void (**)(char *, uint64_t))(v51 + 8))(v63, v64);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v56);
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v47, v48);
    }
  }
  else
  {
    v59(v28);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  }
}

uint64_t PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = MEMORY[0x263F8EE78];
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = &v5;
  PKDrawingStruct.visitStrokes<A>(in:_:)(a1, (void (*)(void))partial apply for closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:), (uint64_t)v4);
  return v5;
}

uint64_t closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(uint64_t a1, uint64_t (*a2)(uint64_t, double), uint64_t a3, unint64_t *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = a2(a1, v9);
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
    unint64_t v13 = *a4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, v13);
      *a4 = v13;
    }
    unint64_t v16 = *(void *)(v13 + 16);
    unint64_t v15 = *(void *)(v13 + 24);
    if (v16 >= v15 >> 1)
    {
      unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1, v13);
      *a4 = v13;
    }
    *(void *)(v13 + 16) = v16 + 1;
    return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v16, v11, v7);
  }
  return result;
}

uint64_t closure #1 in PKDrawingStruct.deleteStrokes<A, B>(_:in:)()
{
  return WeakRef.id.getter();
}

uint64_t removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a5;
  uint64_t v44 = a4;
  uint64_t v52 = a3;
  uint64_t v55 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v50 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v47 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (char *)&v42 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v51 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v13 - 8);
  unint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  uint64_t v53 = *(void *)(v20 - 8);
  uint64_t v54 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v48 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v45 = a2;
  if (!*(void *)(*(void *)(a2 + 16) + 16)) {
    return 0;
  }
  uint64_t v43 = v6;
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(v55, (uint64_t)v24);
  swift_endAccess();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v26 = 1;
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  if (v27 == 1)
  {
    uint64_t v28 = v52;
    Ref.subscript.getter();
    CRRegister.value.getter();
    SharedTagged_2.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v30 = v53;
    uint64_t v29 = v54;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v15, 1, v54) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    }
    else
    {
      uint64_t v31 = v48;
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v48, v15, v29);
      uint64_t v32 = v49;
      Ref.subscript.getter();
      uint64_t v33 = v43;
      uint64_t v34 = CRSequence.count.getter();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v50 + 8);
      v35(v32, v33);
      if (v34)
      {
        uint64_t v36 = Ref.subscript.getter();
        MEMORY[0x270FA5388](v36);
        uint64_t v37 = v46;
        uint64_t v38 = v47;
        *(&v42 - 4) = v44;
        *(&v42 - 3) = v37;
        *(&v42 - 2) = v45;
        *(&v42 - 1) = v28;
        CRSequence.filter(_:)();
        v35(v32, v33);
        if (!CRSequence.count.getter())
        {
          v35(v38, v33);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v54);
          return 1;
        }
        uint64_t v39 = v54;
        Ref.subscript.getter();
        char v40 = CRSequence.hasDelta(from:)();
        v35(v32, v33);
        if (v40)
        {
          (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v32, v38, v33);
          swift_retain();
          Ref.subscript.setter();
        }
        v35(v38, v33);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v39);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
      }
    }
    return 0;
  }
  return v26;
}

uint64_t PKDrawingStruct.apply<A>(_:concat:in:)(CGFloat *a1, int a2, void *a3, uint64_t a4)
{
  type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v8 = CROrderedSet.map<A>(_:)();
  static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(v8, a1, a2, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PKDrawingStruct.apply<A>(_:concat:in:)()
{
  uint64_t v0 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v0 - 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.id.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  return WeakRef.init(id:)();
}

uint64_t PKDrawingStruct.append<A>(_:in:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule.Ref.import<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  Capsule<>.root.getter();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, &v6[*(int *)(v4 + 20)], v0);
  _s8PaperKit15PKDrawingStructVWOhTm_1((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.append<A>(contentsOf:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t PKDrawingStruct.allStrokes<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v26 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x263F8EE88];
  uint64_t v27 = MEMORY[0x263F8EE88];
  type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.makeIterator()();
  uint64_t v22 = v14;
  CROrderedSet.Iterator.next()();
  uint64_t v16 = v5;
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v17(v10, 1, v4) != 1)
  {
    uint64_t v20 = v12;
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v24 = a2;
    uint64_t v25 = v11;
    uint64_t v18 = v21;
    do
    {
      v23(v7, v10, v4);
      Ref<>.getAllStrokes<A>(_:in:)((uint64_t)&v27, v26, v24, v18);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v4);
      CROrderedSet.Iterator.next()();
    }
    while (v17(v10, 1, v4) != 1);
    uint64_t v15 = v27;
    uint64_t v11 = v25;
    uint64_t v12 = v20;
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v11);
  return v15;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKDrawingStruct()
{
  return CRStruct_2.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKDrawingStruct()
{
  return CRStruct_2.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKDrawingStruct(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F16FE0](a1, v2);
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PKDrawingStruct(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F17050](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.init() in conformance PKDrawingStruct@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t result = CROrderedSet.init()();
  *(void *)(a2 + *(int *)(a1 + 24)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PKDrawingStruct()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_2<PKDrawingStruct> and conformance CRStructMergeableDelta_2<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_2<PKDrawingStruct>);
}

uint64_t protocol witness for CRDT.context.getter in conformance PKDrawingStruct(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F16FF0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F17018](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F17048](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F17020](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F17040](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F17028](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F17008](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F17000](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F16FE8](a1, a2, a3, v6);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PKDrawingStruct()
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return CRStruct_2.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F16FD8](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return MEMORY[0x270F17030](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PKDrawingStruct()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PKDrawingStruct()
{
  return CRDT.init(serializedData:)();
}

uint64_t sub_20C7513F4()
{
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for PKDrawingStruct(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_20C7517EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_20C751908(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_20C751A20()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  void (*v18)(void, void, void);
  char v19;
  void (*v20)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v22;
  void v24[2];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  swift_bridgeObjectRetain();
  uint64_t v31 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v30 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v26 = v2;
    uint64_t v27 = a1;
    uint64_t v28 = ~v12;
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v29 = *(void *)(v7 + 72);
    uint64_t v15 = (void (**)(char *, uint64_t))(v7 + 8);
    v24[1] = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v25 = v7;
    while (1)
    {
      uint64_t v16 = v10;
      uint64_t v17 = v29 * v13;
      uint64_t v18 = v14;
      v14(v9, *(void *)(v10 + 48) + v29 * v13, v6);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
      unint64_t v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v20 = *v15;
      (*v15)(v9, v6);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v28;
      uint64_t v10 = v16;
      uint64_t v14 = v18;
      if (((*(void *)(v30 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v26;
        a1 = v27;
        uint64_t v7 = v25;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v20(v31, v6);
    v18(v27, *(void *)(*v26 + 48) + v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = v31;
    v14(v9, v31, v6);
    uint64_t v32 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v22, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  void (*v18)(void, void, void);
  char v19;
  void (*v20)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v22;
  void v24[2];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  swift_bridgeObjectRetain();
  uint64_t v31 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v30 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v26 = v2;
    uint64_t v27 = a1;
    uint64_t v28 = ~v12;
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v29 = *(void *)(v7 + 72);
    uint64_t v15 = (void (**)(char *, uint64_t))(v7 + 8);
    v24[1] = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v25 = v7;
    while (1)
    {
      uint64_t v16 = v10;
      uint64_t v17 = v29 * v13;
      uint64_t v18 = v14;
      v14(v9, *(void *)(v10 + 48) + v29 * v13, v6);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
      unint64_t v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v20 = *v15;
      (*v15)(v9, v6);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v28;
      uint64_t v10 = v16;
      uint64_t v14 = v18;
      if (((*(void *)(v30 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v26;
        a1 = v27;
        uint64_t v7 = v25;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v20(v31, v6);
    v18(v27, *(void *)(*v26 + 48) + v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = v31;
    v14(v9, v31, v6);
    uint64_t v32 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v22, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  void (*v18)(void, void, void);
  char v19;
  void (*v20)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v22;
  void v24[2];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  swift_bridgeObjectRetain();
  uint64_t v31 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v30 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v26 = v2;
    uint64_t v27 = a1;
    uint64_t v28 = ~v12;
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v29 = *(void *)(v7 + 72);
    uint64_t v15 = (void (**)(char *, uint64_t))(v7 + 8);
    v24[1] = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v25 = v7;
    while (1)
    {
      uint64_t v16 = v10;
      uint64_t v17 = v29 * v13;
      uint64_t v18 = v14;
      v14(v9, *(void *)(v10 + 48) + v29 * v13, v6);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      unint64_t v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v20 = *v15;
      (*v15)(v9, v6);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v28;
      uint64_t v10 = v16;
      uint64_t v14 = v18;
      if (((*(void *)(v30 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v26;
        a1 = v27;
        uint64_t v7 = v25;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v20(v31, v6);
    v18(v27, *(void *)(*v26 + 48) + v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = v31;
    v14(v9, v31, v6);
    uint64_t v32 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v22, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  void (*v18)(void, void, void);
  char v19;
  void (*v20)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v22;
  void v24[2];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  swift_bridgeObjectRetain();
  uint64_t v31 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v30 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v26 = v2;
    uint64_t v27 = a1;
    uint64_t v28 = ~v12;
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v29 = *(void *)(v7 + 72);
    uint64_t v15 = (void (**)(char *, uint64_t))(v7 + 8);
    v24[1] = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v25 = v7;
    while (1)
    {
      uint64_t v16 = v10;
      uint64_t v17 = v29 * v13;
      uint64_t v18 = v14;
      v14(v9, *(void *)(v10 + 48) + v29 * v13, v6);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      unint64_t v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v20 = *v15;
      (*v15)(v9, v6);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v28;
      uint64_t v10 = v16;
      uint64_t v14 = v18;
      if (((*(void *)(v30 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v26;
        a1 = v27;
        uint64_t v7 = v25;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v20(v31, v6);
    v18(v27, *(void *)(*v26 + 48) + v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = v31;
    v14(v9, v31, v6);
    uint64_t v32 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v22, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CRAsset();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for CalculateExpression();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v17);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for CalculateExpression();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CalculateExpression and conformance CalculateExpression, MEMORY[0x263F2FC68]);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CalculateExpression and conformance CalculateExpression, MEMORY[0x263F2FC68]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      uint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(float *a1, float a2)
{
  uint64_t v3 = v2;
  float v4 = a2;
  uint64_t v6 = *v2;
  if ((LODWORD(a2) & 0x7FFFFFFF) != 0) {
    uint64_t v7 = LODWORD(a2);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = MEMORY[0x21054E790](*(void *)(v6 + 40), v7, 4);
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_11:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v10, isUniquelyReferenced_nonNull_native, v4);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_12;
  }
  uint64_t v11 = *(void *)(v6 + 48);
  float v12 = *(float *)(v11 + 4 * v10);
  if (v12 != v4)
  {
    uint64_t v14 = ~v9;
    do
    {
      unint64_t v10 = (v10 + 1) & v14;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_11;
      }
      float v12 = *(float *)(v11 + 4 * v10);
    }
    while (v12 != v4);
  }
  uint64_t result = 0;
  float v4 = v12;
LABEL_12:
  *a1 = v4;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unsigned char *a1, char a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  int v6 = a2 & 1;
  Hasher._combine(_:)(a2 & 1);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2 & 1, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v10 + v9) != v6)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned char *)(v10 + v9) != (a2 & 1));
  }
  uint64_t result = 0;
  LOBYTE(v6) = *(unsigned char *)(*(void *)(*v2 + 48) + v9);
LABEL_8:
  *a1 = v6;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for CGColorRef(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
  swift_bridgeObjectRetain();
  _CFObject.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    id v9 = *(id *)(*(void *)(v5 + 48) + 8 * v8);
    char v10 = static _CFObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:

      swift_bridgeObjectRelease();
      uint64_t v14 = *(void **)(*(void *)(*v3 + 48) + 8 * v8);
      *a1 = v14;
      id v15 = v14;
      return 0;
    }
    uint64_t v11 = ~v7;
    while (1)
    {
      unint64_t v8 = (v8 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        break;
      }
      id v12 = *(id *)(*(void *)(v5 + 48) + 8 * v8);
      char v13 = static _CFObject.== infix(_:_:)();

      if (v13) {
        goto LABEL_6;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  id v18 = a2;
  specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v18, v8, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v20;
  swift_bridgeObjectRelease();
  *a1 = v18;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  void *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  uint64_t v3 = v2;
  Swift::Int v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    unint64_t v8 = a2;
    id v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for AnyCanvasElementView();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v30 = (void *)v22;
    uint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      uint64_t v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27, &demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
      uint64_t v24 = v30;
    }
    else
    {
      uint64_t v24 = (void *)v22;
      uint64_t v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    *uint64_t v3 = (uint64_t)v24;
  }
  else
  {
    uint64_t v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    id v12 = NSObject._rawHashValue(seed:)(v11);
    char v13 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for AnyCanvasElementView();
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      uint64_t v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        uint64_t v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        uint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        uint64_t v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    unint64_t v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for NSObject, 0x263F8C6D0, &demangling cache variable for type metadata for _SetStorage<NSObject>, (void (*)(uint64_t))specialized _NativeSet.copy());
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for UIColor, 0x263F825C8, &demangling cache variable for type metadata for _SetStorage<UIColor>, (void (*)(uint64_t))specialized _NativeSet.copy());
}

uint64_t specialized Set._Variant.insert(_:)(unsigned char *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v10 = v6;
  uint64_t v13 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v13 < 0) {
      uint64_t v14 = *v6;
    }
    else {
      uint64_t v14 = v13 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v15 = a2;
    uint64_t v16 = __CocoaSet.member(for:)();

    if (v16)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for NSObject(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v41;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v29 = specialized _NativeSet.init(_:capacity:)(v14, result + 1, a5, a3);
    uint64_t v42 = (void *)v29;
    unint64_t v30 = *(void *)(v29 + 16);
    if (*(void *)(v29 + 24) <= v30)
    {
      uint64_t v35 = v30 + 1;
      id v36 = v15;
      specialized _NativeSet.resize(capacity:)(v35, a5);
      uint64_t v31 = v42;
    }
    else
    {
      uint64_t v31 = (void *)v29;
      id v32 = v15;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v15, v31);
    *uint64_t v10 = (uint64_t)v31;
    swift_bridgeObjectRelease();
    *a1 = v15;
  }
  else
  {
    Swift::Int v18 = *(void *)(v13 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v19 = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v21 = v19 & ~v20;
    uint64_t v38 = a4;
    if ((*(void *)(v13 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21))
    {
      type metadata accessor for NSObject(0, a3);
      id v22 = *(id *)(*(void *)(v13 + 48) + 8 * v21);
      char v23 = static NSObject.== infix(_:_:)();

      if (v23)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v27 = *(void **)(*(void *)(*v10 + 48) + 8 * v21);
        *a1 = v27;
        id v28 = v27;
        return 0;
      }
      uint64_t v24 = ~v20;
      while (1)
      {
        unint64_t v21 = (v21 + 1) & v24;
        if (((*(void *)(v13 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          break;
        }
        id v25 = *(id *)(*(void *)(v13 + 48) + 8 * v21);
        char v26 = static NSObject.== infix(_:_:)();

        if (v26) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    id v34 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v38, a6);
    *uint64_t v10 = v43;
    swift_bridgeObjectRelease();
    *a1 = v34;
  }
  return 1;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CalculateExpression>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for CalculateExpression();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CalculateExpression and conformance CalculateExpression, MEMORY[0x263F2FC68]);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCanvasElementView();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v15;
        unint64_t v9 = *(void *)(v15 + 16);
        if (*(void *)(v15 + 24) <= v9)
        {
          specialized _NativeSet.resize(capacity:)(v9 + 1, &demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
          uint64_t v2 = v15;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v10 = 0;
          unint64_t v11 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v12 = v7 == v11;
            if (v7 == v11) {
              unint64_t v7 = 0;
            }
            v10 |= v12;
            uint64_t v13 = *(void *)(v4 + 8 * v7);
          }
          while (v13 == -1);
          unint64_t v8 = __clz(__rbit64(~v13)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v14;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<NSObject>, (unint64_t *)&lazy cache variable for type metadata for NSObject);
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for NSObject(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v6;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    char v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      char v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        char v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        uint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        unint64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          uint64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            uint64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              unint64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                unint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  uint64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        uint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      unint64_t v20 = *v19;
      int64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        char v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0;
          }
          v25 |= v27;
          unint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      char *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  void *v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CalculateExpression>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    char v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        int64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        char v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        uint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          unint64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          uint64_t v15 = v27[v10];
          if (!v15)
          {
            unint64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            uint64_t v15 = v27[v10];
            if (!v15)
            {
              unint64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              uint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  unint64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  uint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v10 = v16;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v15 - 1) & v15;
        int64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for CalculateExpression();
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CalculateExpression and conformance CalculateExpression, MEMORY[0x263F2FC68]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      int64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v21 = 0;
        uint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        uint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Float>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    unint64_t v28 = v1;
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = -1 << v7;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    unint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        int64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        char v14 = v13 | (v5 << 6);
      }
      else
      {
        uint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_36;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_36:
                if (v29 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v27;
                }
                uint64_t v1 = v28;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_42;
                  }
                  if (v5 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v16 - 1) & v16;
        char v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unint64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
      if ((v18 & 0x7FFFFFFF) != 0) {
        int64_t v19 = v18;
      }
      else {
        int64_t v19 = 0;
      }
      uint64_t result = MEMORY[0x21054E790](*(void *)(v4 + 40), v19, 4);
      unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      int64_t v21 = result & ~v20;
      uint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v25 = v22 == v24;
          if (v22 == v24) {
            uint64_t v22 = 0;
          }
          v23 |= v25;
          char v26 = *(void *)(v11 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSTextAlignment>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    unint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        int64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        char v14 = v13 | (v5 << 6);
      }
      else
      {
        uint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                char v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v16 - 1) & v16;
        char v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      int64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      int64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v24 = v21 == v23;
          if (v21 == v23) {
            int64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Bool>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    unint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        int64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        char v14 = v13 | (v5 << 6);
      }
      else
      {
        uint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                char v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v16 - 1) & v16;
        char v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unint64_t v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      int64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      int64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v24 = v21 == v23;
          if (v21 == v23) {
            int64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Color>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v2 + 56);
    uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        char v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        uint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        unint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            unint64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              unint64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v12 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v8 = (v17 - 1) & v17;
        uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      int64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      type metadata accessor for CGColorRef(0);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
      _CFObject.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      int64_t v21 = result & ~v20;
      uint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v25 = v22 == v24;
          if (v22 == v24) {
            uint64_t v22 = 0;
          }
          v23 |= v25;
          char v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        int64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for CRKeyPath();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CRKeyPath>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    char v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      char v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ResizeHandleType>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    unint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        int64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        char v14 = v13 | (v5 << 6);
      }
      else
      {
        uint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                char v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v16 - 1) & v16;
        char v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unint64_t v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      int64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      int64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v24 = v21 == v23;
          if (v21 == v23) {
            int64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    char v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    unint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        int64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        char v14 = v13 | (v5 << 6);
      }
      else
      {
        uint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v16 - 1) & v16;
        char v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      int64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v24 = v21 == v23;
          if (v21 == v23) {
            int64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for CRAsset();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CRAsset>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    char v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      char v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v7 = v5;
  uint64_t v47 = a2;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v51 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v11 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    uint64_t v42 = v5;
    uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 56);
    uint64_t v44 = (void *)(v10 + 56);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v43 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v46 = v8;
    uint64_t v17 = v11 + 56;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    uint64_t v45 = v12;
    unint64_t v20 = v51;
    uint64_t v21 = v52;
    while (1)
    {
      if (v16)
      {
        unint64_t v23 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        int64_t v50 = v19;
        unint64_t v24 = v23 | (v19 << 6);
      }
      else
      {
        int64_t v25 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v25 >= v43) {
          goto LABEL_33;
        }
        unint64_t v26 = v44[v25];
        int64_t v27 = v19 + 1;
        if (!v26)
        {
          int64_t v27 = v19 + 2;
          if (v19 + 2 >= v43) {
            goto LABEL_33;
          }
          unint64_t v26 = v44[v27];
          if (!v26)
          {
            int64_t v27 = v19 + 3;
            if (v19 + 3 >= v43) {
              goto LABEL_33;
            }
            unint64_t v26 = v44[v27];
            if (!v26)
            {
              uint64_t v28 = v19 + 4;
              if (v19 + 4 >= v43)
              {
LABEL_33:
                swift_release();
                uint64_t v7 = v42;
                uint64_t v40 = 1 << *(unsigned char *)(v10 + 32);
                if (v40 > 63) {
                  bzero(v44, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v44 = -1 << v40;
                }
                *(void *)(v10 + 16) = 0;
                break;
              }
              unint64_t v26 = v44[v28];
              if (!v26)
              {
                while (1)
                {
                  int64_t v27 = v28 + 1;
                  if (__OFADD__(v28, 1)) {
                    goto LABEL_39;
                  }
                  if (v27 >= v43) {
                    goto LABEL_33;
                  }
                  unint64_t v26 = v44[v27];
                  ++v28;
                  if (v26) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v27 = v19 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v16 = (v26 - 1) & v26;
        int64_t v50 = v27;
        unint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
      }
      uint64_t v29 = v10;
      uint64_t v30 = *(void *)(v46 + 72);
      unint64_t v31 = *(void *)(v10 + 48) + v30 * v24;
      BOOL v32 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
      v32(v20, v31, v21);
      uint64_t v12 = v45;
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(v48, v47);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v33 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v34 = result & ~v33;
      unint64_t v35 = v34 >> 6;
      if (((-1 << v34) & ~*(void *)(v17 + 8 * (v34 >> 6))) != 0)
      {
        unint64_t v22 = __clz(__rbit64((-1 << v34) & ~*(void *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v36 = 0;
        unint64_t v37 = (unint64_t)(63 - v33) >> 6;
        do
        {
          if (++v35 == v37 && (v36 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v38 = v35 == v37;
          if (v35 == v37) {
            unint64_t v35 = 0;
          }
          v36 |= v38;
          uint64_t v39 = *(void *)(v17 + 8 * v35);
        }
        while (v39 == -1);
        unint64_t v22 = __clz(__rbit64(~v39)) + (v35 << 6);
      }
      *(void *)(v17 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v32)(*(void *)(v12 + 48) + v22 * v30, v51, v52);
      ++*(void *)(v12 + 16);
      uint64_t v10 = v29;
      int64_t v19 = v50;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v7 = v12;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CalculateExpression();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CalculateExpression and conformance CalculateExpression, MEMORY[0x263F2FC68]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    int64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v33 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v30 = v3;
  uint64_t v31 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v13 = v11 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v13, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, &demangling cache variable for type metadata for _SetStorage<SharedTagged_3<TaggedPaperPage>>, (unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, MEMORY[0x263F32E38]);
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v13, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, &demangling cache variable for type metadata for _SetStorage<SharedTagged_3<TaggedPaperPage>>, (unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, MEMORY[0x263F32E38]);
  }
  uint64_t v14 = *v3;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  a2 = v15 & ~v16;
  uint64_t v32 = v14;
  uint64_t v17 = v14 + 56;
  if ((*(void *)(v17 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    int64_t v18 = ~v16;
    uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    int64_t v20 = v21;
    char v22 = *(void *)(v19 + 56);
    do
    {
      v20(v10, *(void *)(v32 + 48) + v22 * a2, v6);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
      uint64_t v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v23) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }
    while (((*(void *)(v17 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v24 = v31;
  char v25 = *v30;
  *(void *)(v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v24 + 32))(*(void *)(v25 + 48) + *(void *)(v24 + 72) * a2, v33, v6, v8);
  BOOL v27 = *(void *)(v25 + 16);
  uint64_t v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (!v28)
  {
    *(void *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  unint64_t v12 = v10 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v12, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x263F32D58]);
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v12, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x263F32D58]);
  }
  uint64_t v13 = *v3;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    int64_t v18 = v7 + 16;
    uint64_t v19 = v20;
    uint64_t v21 = *(void *)(v18 + 56);
    do
    {
      v19(v9, *(void *)(v31 + 48) + v21 * a2, v6);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    int64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v33 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v30 = v3;
  uint64_t v31 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v13 = v11 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v13, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, &demangling cache variable for type metadata for _SetStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, (unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, MEMORY[0x263F32FE0]);
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v13, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, &demangling cache variable for type metadata for _SetStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, (unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, MEMORY[0x263F32FE0]);
  }
  uint64_t v14 = *v3;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  a2 = v15 & ~v16;
  uint64_t v32 = v14;
  uint64_t v17 = v14 + 56;
  if ((*(void *)(v17 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    int64_t v18 = ~v16;
    uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    int64_t v20 = v21;
    char v22 = *(void *)(v19 + 56);
    do
    {
      v20(v10, *(void *)(v32 + 48) + v22 * a2, v6);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
      uint64_t v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v23) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }
    while (((*(void *)(v17 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v24 = v31;
  char v25 = *v30;
  *(void *)(v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v24 + 32))(*(void *)(v25 + 48) + *(void *)(v24 + 72) * a2, v33, v6, v8);
  BOOL v27 = *(void *)(v25 + 16);
  uint64_t v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (!v28)
  {
    *(void *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  unint64_t v12 = v10 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v12, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, MEMORY[0x263F330C0]);
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v12, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, MEMORY[0x263F330C0]);
  }
  uint64_t v13 = *v3;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    int64_t v18 = v7 + 16;
    uint64_t v19 = v20;
    uint64_t v21 = *(void *)(v18 + 56);
    do
    {
      v19(v9, *(void *)(v31 + 48) + v21 * a2, v6);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for CRAsset();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    int64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  type metadata accessor for CalculateExpression();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CalculateExpression and conformance CalculateExpression, MEMORY[0x263F2FC68]);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CalculateExpression and conformance CalculateExpression, MEMORY[0x263F2FC68]);
    do
    {
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  BOOL v13 = *(void *)(v12 + 16);
  uint64_t v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, char a2, float a3)
{
  unint64_t v4 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a2 & 1) != 0) {
    goto LABEL_17;
  }
  if (a2)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_17;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  if ((LODWORD(a3) & 0x7FFFFFFF) != 0) {
    uint64_t v9 = LODWORD(a3);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t result = MEMORY[0x21054E790](*(void *)(*v3 + 40), v9, 4);
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v4 = result & ~v10;
  if ((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v11 = *(void *)(v8 + 48);
    if (*(float *)(v11 + 4 * v4) == a3)
    {
LABEL_16:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        unint64_t v4 = (v4 + 1) & v12;
        if (((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
          break;
        }
        if (*(float *)(v11 + 4 * v4) == a3) {
          goto LABEL_16;
        }
      }
    }
  }
LABEL_17:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (v4 >> 6) + 56) |= 1 << v4;
  *(float *)(*(void *)(v13 + 48) + 4 * v4) = a3;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for NSTextAlignment(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5 & 1);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned char *)(v10 + a2) == (v5 & 1))
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned char *)(v10 + a2) == (v5 & 1)) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5 & 1;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v10 + a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for CGColorRef(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
  _CFObject.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = static _CFObject.== infix(_:_:)();

    if (v13)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = static _CFObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  unint64_t v8 = v6 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v8, &demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8, &demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
  }
  uint64_t v9 = *v3;
  Swift::Int v10 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for AnyCanvasElementView();
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = static NSObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, uint64_t a6, void (*a7)(uint64_t))
{
  unint64_t v11 = *(void *)(*v7 + 16);
  unint64_t v12 = *(void *)(*v7 + 24);
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v13 = v11 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v13, a4);
  }
  else
  {
    if (v12 > v11)
    {
      a7(v13);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v13, a4);
  }
  uint64_t v14 = *v7;
  Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(*v7 + 40));
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  a2 = v15 & ~v16;
  if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for NSObject(0, a5);
    id v17 = *(id *)(*(void *)(v14 + 48) + 8 * a2);
    char v18 = static NSObject.== infix(_:_:)();

    if (v18)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v19 = ~v16;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v20 = *(id *)(*(void *)(v14 + 48) + 8 * a2);
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v22 = *v7;
  *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v22 + 48) + 8 * a2) = a1;
  uint64_t v23 = *(void *)(v22 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v22 + 16) = v25;
  }
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  Swift::UInt v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  unint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  uint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  Swift::UInt v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  char v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      uint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      Swift::Int v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      uint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        uint64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v17 - 1) & v17;
    Swift::Int v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v23 = result & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v27 = v24 == v26;
        if (v24 == v26) {
          uint64_t v24 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    char *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CalculateExpression>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  Swift::UInt v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  uint64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      uint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    Swift::Int v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      Swift::Int v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        Swift::Int v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for CalculateExpression();
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CalculateExpression and conformance CalculateExpression, MEMORY[0x263F2FC68]);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    int64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v21 = 0;
      int64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v23 = v20 == v22;
        if (v20 == v22) {
          int64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      uint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  Swift::Int v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    Swift::Int v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Float>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v27 = v1;
  Swift::UInt v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      uint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    Swift::Int v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v10) {
      goto LABEL_36;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      Swift::UInt v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_36;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        Swift::UInt v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_36;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    if ((v18 & 0x7FFFFFFF) != 0) {
      unint64_t v19 = v18;
    }
    else {
      unint64_t v19 = 0;
    }
    uint64_t result = MEMORY[0x21054E790](*(void *)(v4 + 40), v19, 4);
    int64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    int64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v25 = v22 == v24;
        if (v22 == v24) {
          int64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v11 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_36:
    uint64_t result = swift_release();
    uint64_t v1 = v27;
    goto LABEL_38;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    Swift::UInt v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    Swift::UInt v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_36;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSTextAlignment>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  Swift::UInt v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      uint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    Swift::Int v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      Swift::UInt v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        Swift::UInt v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    int64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v22 = 0;
      uint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    Swift::UInt v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    Swift::UInt v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Bool>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  Swift::UInt v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      uint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    Swift::Int v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      Swift::UInt v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        Swift::UInt v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    int64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v22 = 0;
      uint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    Swift::UInt v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    Swift::UInt v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Color>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  Swift::UInt v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v27 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      uint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      uint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    Swift::Int v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= v27) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= v27) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    unint64_t v18 = *(void **)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for CGColorRef(0);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
    unint64_t v19 = v18;
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    int64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v25 = v22 == v24;
        if (v22 == v24) {
          int64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v19;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v27) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  Swift::UInt v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CRKeyPath>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  unint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  uint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ResizeHandleType>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  Swift::UInt v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      uint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    Swift::Int v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      Swift::UInt v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        Swift::UInt v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    int64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v22 = 0;
      uint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    Swift::UInt v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    Swift::UInt v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  Swift::UInt v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      uint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    Swift::Int v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      Swift::UInt v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        Swift::UInt v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    int64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v22 = 0;
      uint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    Swift::UInt v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    Swift::UInt v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRAsset();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  Swift::UInt v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CRAsset>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  unint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  uint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_11((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v7 = v5;
  uint64_t v44 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v7 = v14;
    return result;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 56);
  uint64_t v39 = v5;
  uint64_t v40 = v12 + 56;
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  int64_t v41 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v42 = v9 + 16;
  uint64_t v19 = v13 + 56;
  uint64_t v43 = v9;
  int64_t v20 = (uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32);
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  while (1)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v26 >= v41) {
      goto LABEL_33;
    }
    unint64_t v27 = *(void *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v41) {
        goto LABEL_33;
      }
      unint64_t v27 = *(void *)(v40 + 8 * v22);
      if (!v27)
      {
        int64_t v22 = v26 + 2;
        if (v26 + 2 >= v41) {
          goto LABEL_33;
        }
        unint64_t v27 = *(void *)(v40 + 8 * v22);
        if (!v27) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v18 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_24:
    uint64_t v29 = v12;
    uint64_t v30 = *(void *)(v12 + 48);
    uint64_t v31 = *(void *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v11, v30 + v31 * v25, v8);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(v45, v44);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v19 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = (*v20)(*(void *)(v14 + 48) + v23 * v31, v11, v8);
    ++*(void *)(v14 + 16);
    uint64_t v12 = v29;
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v7 = v39;
    goto LABEL_35;
  }
  unint64_t v27 = *(void *)(v40 + 8 * v28);
  if (v27)
  {
    int64_t v22 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v22 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v22 >= v41) {
      goto LABEL_33;
    }
    unint64_t v27 = *(void *)(v40 + 8 * v22);
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

BOOL partial apply for closure #1 in removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(uint64_t a1)
{
  return (removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(a1, v1[4], v1[5], v1[2], v1[3]) & 1) == 0;
}

uint64_t partial apply for closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(uint64_t a1)
{
  return closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(a1, *(uint64_t (**)(uint64_t, double))(v1 + 16), *(void *)(v1 + 24), *(unint64_t **)(v1 + 32));
}

uint64_t specialized closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  char v26 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  int64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v6;
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  uint64_t v25 = a1;
  v17(v11, a1, v5, v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  WeakRef.init<A>(_:)();
  LOBYTE(a3) = specialized Set.contains(_:)((uint64_t)v16, a3);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (a3)
  {
    ((void (*)(char *, uint64_t, uint64_t))v17)(v8, v25, v5);
    unint64_t v19 = v26;
    unint64_t v20 = *v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v19 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, v20);
      *unint64_t v19 = v20;
    }
    unint64_t v23 = *(void *)(v20 + 16);
    unint64_t v22 = *(void *)(v20 + 24);
    if (v23 >= v22 >> 1)
    {
      unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v20);
      *unint64_t v19 = v20;
    }
    *(void *)(v20 + 16) = v23 + 1;
    return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v27 + 32))(v20+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v23, v8, v5);
  }
  return result;
}

uint64_t specialized visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)(uint64_t (*a1)(char *, uint64_t, uint64_t), uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v53 = a7;
  uint64_t v64 = a1;
  uint64_t v65 = a6;
  id v69 = a3;
  uint64_t v70 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v58 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  double v57 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v56 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v55 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  uint64_t v67 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v62 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v60 = *(void *)(v16 - 8);
  uint64_t v61 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v54 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v59 = (char *)&v48 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  unint64_t v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v24 - 8);
  char v26 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = a4;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v66 = v9;
  Ref.subscript.getter();
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  v31(v23, v20);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  LODWORD(a4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v26, 1, v32);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  if (a4 == 1)
  {
    uint64_t v51 = a5;
    uint64_t v52 = v28;
    CRRegister.value.getter();
    uint64_t v33 = v62;
    SharedTagged_2.tagged2.getter();
    v31(v23, v20);
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v30, v27);
    }
    else
    {
      uint64_t v49 = v30;
      uint64_t v50 = v27;
      unint64_t v36 = v54;
      uint64_t v37 = v62;
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v34);
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v59, v36, v61);
      CRSequence.makeIterator()();
      uint64_t v38 = v56;
      CRSequence.Iterator.next()();
      uint64_t v39 = v58;
      uint64_t v40 = v66;
      uint64_t v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
      int v41 = v64(v38, 1, v66);
      uint64_t v42 = v63;
      uint64_t v43 = v51;
      uint64_t v44 = v57;
      if (v41 != 1)
      {
        uint64_t v45 = v53 & 1;
        uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
        do
        {
          v46(v44, v38, v40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)(v44, v70, v69, v42, v43, v65, v45);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v39 + 8))(v44, v40);
          CRSequence.Iterator.next()();
          uint64_t v40 = v66;
        }
        while (v64(v38, 1, v66) != 1);
      }
      (*(void (**)(char *, uint64_t))(v55 + 8))(v67, v68);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v61);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v49, v50);
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)((uint64_t)v64, v69, a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  }
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease_n();
}

unint64_t specialized PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  LODWORD(v25) = a6;
  uint64_t v26 = a1;
  uint64_t v27 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v21 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = MEMORY[0x263F8EE78];
  unint64_t v28 = MEMORY[0x263F8EE78];
  type metadata accessor for PKDrawingStruct();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.makeIterator()();
  uint64_t v22 = v15;
  CROrderedSet.Iterator.next()();
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v19(v14, 1, v8) != 1)
  {
    int v24 = v25 & 1;
    unint64_t v23 = *(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), char *, uint64_t))(v9 + 32);
    uint64_t v25 = v9 + 32;
    do
    {
      v23(v11, v14, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)(v11, v26, &v28, a3, a4, v27, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v9 + 8))(v11, v8);
      CROrderedSet.Iterator.next()();
    }
    while (v19(v14, 1, v8) != 1);
    unint64_t v18 = v28;
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t _s8PaperKit15PKDrawingStructVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

BOOL MagicGenerativePlaygroundState.isComposing.getter()
{
  return *v0 - 3 < 4;
}

unint64_t MagicGenerativePlaygroundState.rawValue.getter()
{
  unint64_t result = 0x616974696E696E75;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x696C616974696E69;
      break;
    case 2:
      unint64_t result = 0x656C6553646E6177;
      break;
    case 3:
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0x65746172656E6567;
      break;
    case 9:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t MagicGenerativePlaygroundState.TransitionError.errorDescription.getter()
{
  uint64_t v1 = (void *)0xED000064657A696CLL;
  uint64_t v2 = 0x616974696E696E75;
  uint64_t v3 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = *v0;
  uint64_t v7 = v0[1];
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v8._uint64_t countAndFlagsBits = 0xD000000000000023;
  v8._object = (void *)0x800000020C85EAD0;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v8);
  unint64_t v9 = 0x616974696E696E75;
  unint64_t v10 = 0xED000064657A696CLL;
  switch(v6)
  {
    case 1:
      unint64_t v9 = 0x696C616974696E69;
      unint64_t v10 = 0xEB0000000064657ALL;
      break;
    case 2:
      unint64_t v9 = 0x656C6553646E6177;
      unint64_t v10 = 0xED00006E6F697463;
      break;
    case 3:
      uint64_t v11 = "composingFromEmptyState";
      goto LABEL_8;
    case 4:
      unint64_t v9 = 0xD000000000000016;
      uint64_t v12 = "composingWandSelection";
      goto LABEL_12;
    case 5:
      unint64_t v9 = 0xD000000000000018;
      uint64_t v12 = "composingProvidedContext";
      goto LABEL_12;
    case 6:
      uint64_t v11 = "composingProvidedRecipe";
LABEL_8:
      unint64_t v10 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      unint64_t v9 = 0xD000000000000017;
      break;
    case 7:
      unint64_t v9 = 0xD000000000000011;
      uint64_t v12 = "cancelledOrFailed";
      goto LABEL_12;
    case 8:
      unint64_t v9 = 0x65746172656E6567;
      unint64_t v10 = 0xE900000000000064;
      break;
    case 9:
      unint64_t v9 = 0xD000000000000010;
      uint64_t v12 = "generationFailed";
LABEL_12:
      unint64_t v10 = (unint64_t)(v12 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v13 = v10;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 544175136;
  v14._object = (void *)0xE400000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v14);
  switch(v7)
  {
    case 1:
      uint64_t v2 = 0x696C616974696E69;
      uint64_t v1 = (void *)0xEB0000000064657ALL;
      break;
    case 2:
      uint64_t v2 = 0x656C6553646E6177;
      uint64_t v1 = (void *)0xED00006E6F697463;
      break;
    case 3:
      uint64_t v15 = "composingFromEmptyState";
      goto LABEL_20;
    case 4:
      uint64_t v2 = 0xD000000000000016;
      uint64_t v16 = "composingWandSelection";
      goto LABEL_24;
    case 5:
      uint64_t v2 = 0xD000000000000018;
      uint64_t v16 = "composingProvidedContext";
      goto LABEL_24;
    case 6:
      uint64_t v15 = "composingProvidedRecipe";
LABEL_20:
      uint64_t v1 = (void *)((unint64_t)(v15 - 32) | 0x8000000000000000);
      uint64_t v2 = 0xD000000000000017;
      break;
    case 7:
      uint64_t v2 = 0xD000000000000011;
      uint64_t v16 = "cancelledOrFailed";
      goto LABEL_24;
    case 8:
      uint64_t v2 = 0x65746172656E6567;
      uint64_t v1 = (void *)0xE900000000000064;
      break;
    case 9:
      uint64_t v2 = 0xD000000000000010;
      uint64_t v16 = "generationFailed";
LABEL_24:
      uint64_t v1 = (void *)((unint64_t)(v16 - 32) | 0x8000000000000000);
      break;
    default:
      break;
  }
  v17._uint64_t countAndFlagsBits = v2;
  v17._object = v1;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 46;
  v18._object = (void *)0xE100000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
  String.LocalizationValue.init(stringInterpolation:)();
  static Locale.current.getter();
  return String.init(localized:table:bundle:locale:comment:)();
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance MagicGenerativePlaygroundState.TransitionError()
{
  return MEMORY[0x270EEE930]();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance MagicGenerativePlaygroundState.TransitionError()
{
  return MEMORY[0x270EEE950]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance MagicGenerativePlaygroundState.TransitionError()
{
  return MEMORY[0x270EEE920]();
}

PaperKit::MagicGenerativePlaygroundState_optional __swiftcall MagicGenerativePlaygroundState.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MagicGenerativePlaygroundState.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 10;
  if (v5 < 0xA) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type MagicGenerativePlaygroundState and conformance MagicGenerativePlaygroundState()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicGenerativePlaygroundState and conformance MagicGenerativePlaygroundState;
  if (!lazy protocol witness table cache variable for type MagicGenerativePlaygroundState and conformance MagicGenerativePlaygroundState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicGenerativePlaygroundState and conformance MagicGenerativePlaygroundState);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MagicGenerativePlaygroundState()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MagicGenerativePlaygroundState()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MagicGenerativePlaygroundState()
{
  return Hasher._finalize()();
}

PaperKit::MagicGenerativePlaygroundState_optional protocol witness for RawRepresentable.init(rawValue:) in conformance MagicGenerativePlaygroundState(Swift::String *a1)
{
  return MagicGenerativePlaygroundState.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MagicGenerativePlaygroundState@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MagicGenerativePlaygroundState.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MagicGenerativePlaygroundState(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unsigned char *storeEnumTagSinglePayload for MagicGenerativePlaygroundState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C75D4B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicGenerativePlaygroundState()
{
  return &type metadata for MagicGenerativePlaygroundState;
}

uint64_t dispatch thunk of MagicGenerativePlaygroundStateObserver.magicGenerativePlaygroundStateDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)(unsigned __int8 *a1, char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (specialized == infix<A>(_:_:)(*a1, *a2))
  {
LABEL_2:
    char v4 = 1;
  }
  else
  {
    switch(v2)
    {
      case 1:
        char v4 = 1;
        switch(v3)
        {
          case 2:
            goto LABEL_20;
          default:
            char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v7 & 1) == 0)
            {
              char v4 = 1;
              switch(v3)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 6:
                case 7:
                case 8:
                case 9:
                  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v9 & 1) == 0)
                  {
                    char v4 = 1;
                    switch(v3)
                    {
                      case 0:
                      case 1:
                      case 2:
                      case 4:
                      case 5:
                      case 7:
                      case 8:
                      case 9:
                        goto LABEL_23;
                      case 3:
                        goto LABEL_20;
                      case 6:
                        if (0x800000020C84EDE0 == 0x800000020C84ED80) {
                          goto LABEL_20;
                        }
LABEL_23:
                        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        if ((v11 & 1) == 0)
                        {
                          char v4 = 1;
                          switch(v3)
                          {
                            case 0:
                            case 1:
                            case 2:
                            case 4:
                            case 5:
                            case 7:
                            case 8:
                            case 9:
                              goto LABEL_26;
                            case 3:
                              if (0x800000020C84ED80 == 0x800000020C84EDE0) {
                                goto LABEL_20;
                              }
LABEL_26:
                              char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
                              swift_bridgeObjectRelease();
                              if ((v12 & 1) == 0)
                              {
                                char v4 = 1;
                                switch(v3)
                                {
                                  case 0:
                                  case 1:
                                  case 2:
                                  case 3:
                                  case 4:
                                  case 5:
                                  case 6:
                                  case 8:
                                  case 9:
                                    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    swift_bridgeObjectRelease();
                                    if ((v13 & 1) == 0)
                                    {
                                      char v4 = 1;
                                      switch(v3)
                                      {
                                        case 0:
                                          goto LABEL_20;
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                        case 5:
                                        case 6:
                                        case 7:
                                        case 8:
                                        case 9:
                                          goto LABEL_19;
                                        default:
                                          goto LABEL_30;
                                      }
                                    }
                                    goto LABEL_2;
                                  case 7:
                                    goto LABEL_20;
                                  default:
                                    goto LABEL_30;
                                }
                              }
                              break;
                            case 6:
                              goto LABEL_20;
                            default:
                              goto LABEL_30;
                          }
                        }
                        break;
                      default:
                        goto LABEL_30;
                    }
                  }
                  goto LABEL_2;
                case 5:
                  goto LABEL_20;
                default:
                  goto LABEL_30;
              }
            }
            goto LABEL_2;
        }
      case 2:
        char v4 = 1;
        switch(v3)
        {
          case 4:
            goto LABEL_20;
          default:
            char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v8 & 1) == 0)
            {
              char v4 = 1;
              switch(v3)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                  goto LABEL_19;
                case 7:
                  goto LABEL_20;
                default:
                  goto LABEL_30;
              }
            }
            goto LABEL_2;
        }
      case 3:
      case 4:
      case 5:
      case 6:
        char v4 = 1;
        switch(v3)
        {
          case 8:
            goto LABEL_20;
          default:
            char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v5 & 1) == 0)
            {
              char v4 = 1;
              switch(v3)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v6 & 1) == 0)
                  {
                    switch(v3)
                    {
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 6:
                      case 7:
                      case 8:
                        goto LABEL_19;
                      case 9:
                        goto LABEL_20;
                      default:
                        goto LABEL_30;
                    }
                  }
                  return v4 & 1;
                case 7:
                  goto LABEL_20;
                default:
LABEL_30:
                  JUMPOUT(0);
              }
            }
            goto LABEL_2;
        }
      case 7:
      case 8:
      case 9:
        char v4 = 1;
        switch(v3)
        {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            goto LABEL_19;
          default:
            goto LABEL_20;
        }
      default:
        char v4 = 1;
        switch(v3)
        {
          case 1:
            goto LABEL_20;
          default:
LABEL_19:
            char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
            break;
        }
        break;
    }
LABEL_20:
    swift_bridgeObjectRelease();
  }
  return v4 & 1;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MagicGenerativePlaygroundState.TransitionError(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 65289 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65289 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65289;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65289;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65289;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MagicGenerativePlaygroundState.TransitionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65289 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65289 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 247;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C75E920);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicGenerativePlaygroundState.TransitionError()
{
  return &type metadata for MagicGenerativePlaygroundState.TransitionError;
}

double one-time initialization function for edgeInsets()
{
  double result = 8.0;
  __asm { FMOV            V1.2D, #8.0 }
  *(_OWORD *)&edgeInsets.top = _Q1;
  *(_OWORD *)&edgeInsets.bottom = xmmword_20C8492D0;
  return result;
}

void one-time initialization function for trailingAddLinkImageViewSpacingFromCenterX()
{
  trailingAddLinkImageViewSpacingFromCenterX = 0x403C000000000000;
}

int64x2_t one-time initialization function for linkImageViewSize()
{
  int64x2_t result = vdupq_n_s64(0x4040000000000000uLL);
  linkImageViewSize = (CGSize)result;
  return result;
}

void one-time initialization function for linkImageViewCornerRadius()
{
  linkImageViewCornerRadius = 0x4020000000000000;
}

void one-time initialization function for verticalTextLabelsInteritemSpacing()
{
  verticalTextLabelsInteritemSpacing = 0;
}

void one-time initialization function for leadingTextLabelsSpacing()
{
  leadingTextLabelsSpacing = 0x4028000000000000;
}

void one-time initialization function for trailingTextLabelsSpacing()
{
  trailingTextLabelsSpacing = 0x4020000000000000;
}

id LinkMenuItemView.imageView.getter(uint64_t *a1, Class *a2)
{
  uint64_t v3 = *a1;
  unsigned int v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = objc_msgSend(objc_allocWithZone(*a2), sel_init);
    BOOL v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    unsigned int v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id LinkMenuItemView.init(linkItem:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel] = 0;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  id v6 = &v2[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView_linkItem];
  *(void *)id v6 = a1;
  *((void *)v6 + 1) = a2;
  v99.receiver = v2;
  v99.super_class = ObjectType;
  swift_unknownObjectRetain();
  id v7 = objc_msgSendSuper2(&v99, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v8 = objc_allocWithZone(MEMORY[0x263F82CB0]);
  id v9 = v7;
  id v97 = objc_msgSend(v8, sel_initWithTarget_action_, v9, sel_tapGestureHandler_);
  objc_msgSend(v9, sel_addGestureRecognizer_);
  id v10 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  id v11 = objc_msgSend(v10, sel_layer);

  objc_msgSend(v11, sel_setMasksToBounds_, 1);
  id v12 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  id v13 = objc_msgSend(v12, sel_layer);

  if (one-time initialization token for linkImageViewCornerRadius != -1) {
    swift_once();
  }
  objc_msgSend(v13, sel_setCornerRadius_, *(double *)&linkImageViewCornerRadius);

  id v14 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  objc_msgSend(v14, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v15 = v9;
  id v16 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  objc_msgSend(v15, sel_addSubview_, v16);

  id v98 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_20C83B680;
  id v18 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  id v19 = objc_msgSend(v18, sel_centerYAnchor);

  id v20 = objc_msgSend(v15, sel_centerYAnchor);
  id v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v20);

  *(void *)(v17 + 32) = v21;
  id v22 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  id v23 = objc_msgSend(v22, sel_topAnchor);

  id v24 = objc_msgSend(v15, sel_topAnchor);
  if (one-time initialization token for edgeInsets != -1) {
    swift_once();
  }
  id v25 = objc_msgSend(v23, sel_constraintGreaterThanOrEqualToAnchor_constant_, v24, edgeInsets.top);

  *(void *)(v17 + 40) = v25;
  id v26 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  id v27 = objc_msgSend(v26, sel_leadingAnchor);

  id v28 = objc_msgSend(v15, sel_leadingAnchor);
  id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_constant_, v28, edgeInsets.leading);

  *(void *)(v17 + 48) = v29;
  id v30 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  id v31 = objc_msgSend(v30, sel_bottomAnchor);

  id v32 = objc_msgSend(v15, sel_bottomAnchor);
  id v33 = objc_msgSend(v31, sel_constraintLessThanOrEqualToAnchor_constant_, v32, edgeInsets.bottom);

  *(void *)(v17 + 56) = v33;
  id v34 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  id v35 = objc_msgSend(v34, sel_widthAnchor);

  if (one-time initialization token for linkImageViewSize != -1) {
    swift_once();
  }
  id v36 = objc_msgSend(v35, sel_constraintEqualToConstant_, linkImageViewSize.width);

  *(void *)(v17 + 64) = v36;
  id v37 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  id v38 = objc_msgSend(v37, sel_heightAnchor);

  id v39 = objc_msgSend(v38, sel_constraintEqualToConstant_, linkImageViewSize.height);
  *(void *)(v17 + 72) = v39;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isdouble a = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v98, sel_activateConstraints_, isa);

  id v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  objc_msgSend(v41, sel_setAxis_, 1);
  if (one-time initialization token for verticalTextLabelsInteritemSpacing != -1) {
    swift_once();
  }
  objc_msgSend(v41, sel_setSpacing_, *(double *)&verticalTextLabelsInteritemSpacing);
  objc_msgSend(v41, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v15, sel_addSubview_, v41);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_20C8344C0;
  id v43 = objc_msgSend(v41, sel_centerYAnchor);
  id v44 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  id v45 = objc_msgSend(v44, sel_centerYAnchor);

  id v46 = objc_msgSend(v43, sel_constraintEqualToAnchor_, v45);
  *(void *)(v42 + 32) = v46;
  id v47 = objc_msgSend(v41, sel_leadingAnchor);
  id v48 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  id v49 = objc_msgSend(v48, sel_trailingAnchor);

  if (one-time initialization token for leadingTextLabelsSpacing != -1) {
    swift_once();
  }
  id v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_constant_, v49, *(double *)&leadingTextLabelsSpacing);

  *(void *)(v42 + 40) = v50;
  id v51 = objc_msgSend(v41, sel_topAnchor);
  id v52 = objc_msgSend(v15, sel_topAnchor);
  id v53 = objc_msgSend(v51, sel_constraintGreaterThanOrEqualToAnchor_constant_, v52, edgeInsets.top);

  *(void *)(v42 + 48) = v53;
  id v54 = objc_msgSend(v41, sel_bottomAnchor);
  id v55 = objc_msgSend(v15, sel_bottomAnchor);
  id v56 = objc_msgSend(v54, sel_constraintLessThanOrEqualToAnchor_constant_, v55, edgeInsets.bottom);

  *(void *)(v42 + 56) = v56;
  specialized Array._endMutation()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v98, sel_activateConstraints_, v57);

  id v58 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x263F828E0);
  uint64_t v59 = self;
  id v60 = objc_msgSend(v59, sel_preferredFontForTextStyle_, *MEMORY[0x263F835F0]);
  objc_msgSend(v58, sel_setFont_, v60);

  id v61 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x263F828E0);
  uint64_t v62 = self;
  id v63 = objc_msgSend(v62, sel_labelColor);
  objc_msgSend(v61, sel_setTextColor_, v63);

  id v64 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x263F828E0);
  objc_msgSend(v64, sel_setAdjustsFontForContentSizeCategory_, 1);

  id v65 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x263F828E0);
  objc_msgSend(v65, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v66 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x263F828E0);
  objc_msgSend(v41, sel_addArrangedSubview_, v66);

  id v67 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x263F828E0);
  id v68 = objc_msgSend(v59, sel_preferredFontForTextStyle_, *MEMORY[0x263F835B8]);
  objc_msgSend(v67, sel_setFont_, v68);

  id v69 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x263F828E0);
  id v70 = objc_msgSend(v62, sel_labelColor);
  objc_msgSend(v69, sel_setTextColor_, v70);

  id v71 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x263F828E0);
  objc_msgSend(v71, sel_setAdjustsFontForContentSizeCategory_, 1);

  id v72 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x263F828E0);
  objc_msgSend(v72, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v73 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x263F828E0);
  objc_msgSend(v41, sel_addArrangedSubview_, v73);

  id v74 = objc_msgSend(v59, sel_preferredFontForTextStyle_, *MEMORY[0x263F83570]);
  long long v75 = (void *)UIFont.applyingWeight(_:)(*MEMORY[0x263F81840]);

  if (v75)
  {
    id v76 = objc_msgSend(self, sel_configurationWithFont_, v75);
    id v77 = (void *)MEMORY[0x21054D080](1937075312, 0xE400000000000000);
    id v78 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v77, v76);

    if (v78)
    {
      id v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82828]), sel_initWithImage_, v78);
      id v80 = objc_msgSend(v62, sel_labelColor);
      objc_msgSend(v79, sel_setTintColor_, v80);

      LODWORD(v81) = 1148846080;
      objc_msgSend(v79, sel_setContentHuggingPriority_forAxis_, 0, v81);
      LODWORD(v82) = 1148846080;
      objc_msgSend(v79, sel_setContentHuggingPriority_forAxis_, 1, v82);
      objc_msgSend(v79, (SEL)&selRef_pointerInteraction_regionForRequest_defaultRegion_ + 7, 0);
      objc_msgSend(v15, sel_addSubview_, v79);
      uint64_t v83 = swift_allocObject();
      *(_OWORD *)(v83 + 16) = xmmword_20C837410;
      id v84 = objc_msgSend(v79, sel_centerXAnchor);
      id v85 = objc_msgSend(v15, sel_trailingAnchor);
      if (one-time initialization token for trailingAddLinkImageViewSpacingFromCenterX != -1) {
        swift_once();
      }
      id v86 = objc_msgSend(v84, sel_constraintEqualToAnchor_constant_, v85, -*(double *)&trailingAddLinkImageViewSpacingFromCenterX);

      *(void *)(v83 + 32) = v86;
      id v87 = objc_msgSend(v79, sel_centerYAnchor);
      id v88 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
      id v89 = objc_msgSend(v88, sel_centerYAnchor);

      id v90 = objc_msgSend(v87, sel_constraintEqualToAnchor_, v89);
      *(void *)(v83 + 40) = v90;
      id v91 = objc_msgSend(v79, sel_leadingAnchor);
      id v92 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x263F828E0);
      id v93 = objc_msgSend(v92, sel_trailingAnchor);

      if (one-time initialization token for trailingTextLabelsSpacing != -1) {
        swift_once();
      }
      id v94 = objc_msgSend(v91, sel_constraintEqualToAnchor_constant_, v93, *(double *)&trailingTextLabelsSpacing);

      *(void *)(v83 + 48) = v94;
      specialized Array._endMutation()();
      Class v95 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v98, sel_activateConstraints_, v95);
    }
  }
  LinkMenuItemView.updateUI()();

  swift_unknownObjectRelease();
  return v15;
}

void LinkMenuItemView.updateUI()()
{
  id v1 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x263F82828);
  uint64_t v2 = *(uint64_t (***)(void, void))(v0 + OBJC_IVAR____TtC8PaperKit16LinkMenuItemView_linkItem + 8);
  uint64_t ObjectType = swift_getObjectType();
  unsigned int v4 = (void *)v2[7](ObjectType, v2);
  objc_msgSend(v1, sel_setImage_, v4);

  id v5 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x263F828E0);
  uint64_t v6 = v2[5](ObjectType, v2);
  id v7 = (void *)MEMORY[0x21054D080](v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setText_, v7);

  id v8 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x263F828E0);
  uint64_t v9 = v2[6](ObjectType, v2);
  id v10 = (id)MEMORY[0x21054D080](v9);
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setText_, v10);
}

uint64_t type metadata accessor for LinkMenuItemView()
{
  return self;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSb_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_26C161740, (uint64_t *)&demangling cache variable for type metadata for ()?);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSay8PaperKit0D18DocumentFindResultVG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_26C161FB0, (uint64_t *)&demangling cache variable for type metadata for [PaperDocumentFindResult]);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  return swift_task_create();
}

uint64_t specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(uint64_t a1)
{
  return specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(a1, (unint64_t *)&lazy protocol witness table cache variable for type Capsule<Paper>.Ref and conformance Capsule<A>.Ref, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>.Ref);
}

{
  return specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(a1, &lazy protocol witness table cache variable for type Capsule<PKDrawingStruct>.Ref and conformance Capsule<A>.Ref, &demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref);
}

uint64_t specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  id v49 = a2;
  id v50 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v54 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  id v53 = (char *)&v49 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v49 - v10;
  MEMORY[0x270FA5388](v12);
  id v55 = (char *)&v49 - v13;
  uint64_t v14 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v14 - 8);
  id v51 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v18 = (char *)&v49 - v17;
  MEMORY[0x270FA5388](v19);
  id v21 = (char *)&v49 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  id v52 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  id v27 = (char *)&v49 - v26;
  MEMORY[0x270FA5388](v28);
  id v56 = (char *)&v49 - v29;
  MEMORY[0x270FA5388](v30);
  id v32 = (char *)&v49 - v31;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  uint64_t v58 = v3;
  CRRegister.wrappedValue.getter();
  uint64_t v59 = a1;
  Ref.subscript.getter();
  id v60 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v61 = v23 + 8;
  v60(v32, v22);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  uint64_t v35 = (uint64_t)v55;
  uint64_t v62 = v34;
  CRRegister.wrappedValue.getter();
  _s8PaperKit5ImageVWOhTm_1((uint64_t)v21, type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v57 = v23;
  id v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  int v37 = v36(v35, 1, v22);
  uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?(v35, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  if (v37 != 1)
  {
    CRRegister.wrappedValue.getter();
    v63[0] = v59;
    swift_retain_n();
    id v55 = (char *)v33;
    CRRegister.wrappedValue.getter();
    id v39 = v50;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(v49, v50);
    uint64_t v40 = (void (**)(char *, char *, uint64_t))(v57 + 32);
    for (uint64_t i = v39; ; uint64_t i = v42)
    {
      uint64_t v42 = i;
      __swift_instantiateConcreteTypeFromMangledName(i);
      Ref.subscript.getter();
      CRRegister.wrappedValue.getter();
      _s8PaperKit5ImageVWOhTm_1((uint64_t)v18, type metadata accessor for PKStrokeInheritedProperties);
      if (v36((uint64_t)v11, 1, v22) == 1) {
        break;
      }
      v60(v27, v22);
      (*v40)(v27, v11, v22);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    swift_release();
    Ref.subscript.getter();
    id v43 = v27;
    id v44 = v60;
    v60(v43, v22);
    id v45 = v56;
    Ref.subscript.setter();
    v44(v45, v22);
    id v46 = v52;
    CRRegister.wrappedValue.getter();
    uint64_t v47 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v53, 1, 1, v22);
    id v48 = (void (*)(uint64_t *, void))Ref.subscript.modify();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v47, v54, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    v48(v63, 0);
    return ((uint64_t (*)(char *, uint64_t))v44)(v46, v22);
  }
  return result;
}

void *specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x21054E050](v7 - 4, a3) : *(id *)(a3 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v13 = v8;
      char v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if (v11)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v31 = a3;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
  uint64_t v30 = *(void *)(v35 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v35);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v32 = a2 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v33 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = type metadata accessor for CRKeyPath();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v9, v21 + *(void *)(*(void *)(v22 - 8) + 72) * i, v22);
    uint64_t v23 = *(void **)(*(void *)(a2 + 56) + 8 * i);
    *(void *)&v9[*(int *)(v35 + 48)] = v23;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    id v24 = v23;
    char v25 = v34(v7);
    if (v3)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
      return swift_release();
    }
    if (v25)
    {
      swift_release();
      uint64_t v26 = v31;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v7, v31, &demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v35);
    }
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v15 >= v33) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v32 + 8 * v15);
    if (!v19) {
      break;
    }
LABEL_17:
    unint64_t v13 = (v19 - 1) & v19;
  }
  int64_t v20 = v15 + 1;
  if (v15 + 1 >= v33) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v15 + 2;
  if (v15 + 2 >= v33) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v15 + 3;
  if (v15 + 3 >= v33) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v15 + 4;
  if (v15 + 4 >= v33)
  {
LABEL_28:
    uint64_t v28 = v30;
    uint64_t v27 = v31;
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v27, 1, 1, v35);
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19)
  {
LABEL_16:
    int64_t v15 = v20;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v15 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v15 >= v33) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v32 + 8 * v15);
    ++v20;
    if (v19) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v26 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v28 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v27 = *(void *)(v14 - 8);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v34, v10, v15);
  uint64_t v18 = v28;
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v19 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  int64_t v33 = v17;
  uint64_t v34 = v14;
  uint64_t v29 = v19;
  dispatch thunk of IteratorProtocol.next()();
  int64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v20(v9, 1, v4) == 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v34);
    uint64_t v23 = 1;
    id v24 = v26;
  }
  else
  {
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v21 = (void (**)(char *, uint64_t))(v18 + 8);
    while (1)
    {
      v30(v6, v9, v4);
      char v22 = v31(v6);
      if (v3)
      {
        (*v21)(v6, v4);
        return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v33, v34);
      }
      if (v22) {
        break;
      }
      (*v21)(v6, v4);
      dispatch thunk of IteratorProtocol.next()();
      if (v20(v9, 1, v4) == 1) {
        goto LABEL_6;
      }
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v34);
    id v24 = v26;
    v30(v26, v6, v4);
    uint64_t v23 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v24, v23, 1, v4);
}

void specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v23 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = *(void *)(a3 + 56);
    id v21 = *(id *)(*(void *)(a3 + 48) + 8 * i);
    long long v22 = *(_OWORD *)(v16 + 16 * i);
    int64_t v20 = (void *)v22;
    id v17 = v21;
    id v18 = v20;
    char v19 = a1(&v21);
    if (v3)
    {
      swift_release();

      return;
    }
    if (v19)
    {
LABEL_27:
      swift_release();
      return;
    }

    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v10 >= v23) {
      goto LABEL_27;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v10);
    if (!v14) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v14 - 1) & v14;
  }
  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v23) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v23) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v23) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 >= v23) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_16:
    int64_t v10 = v15;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v23) {
      goto LABEL_27;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  id v17;
  char v18;
  id v19;

  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v11 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    char v19 = *(id *)(*(void *)(a3 + 48) + 8 * i);
    id v17 = v19;
    id v18 = a1(&v19);
    if (v3)
    {
      swift_release();

      return;
    }
    if (v18)
    {
LABEL_27:
      swift_release();
      return;
    }

    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v11 >= v10) {
      goto LABEL_27;
    }
    int64_t v15 = *(void *)(v6 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v15 - 1) & v15;
  }
  uint64_t v16 = v11 + 1;
  if (v11 + 1 >= v10) {
    goto LABEL_27;
  }
  int64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  uint64_t v16 = v11 + 2;
  if (v11 + 2 >= v10) {
    goto LABEL_27;
  }
  int64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  uint64_t v16 = v11 + 3;
  if (v11 + 3 >= v10) {
    goto LABEL_27;
  }
  int64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  uint64_t v16 = v11 + 4;
  if (v11 + 4 >= v10) {
    goto LABEL_27;
  }
  int64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_16:
    unint64_t v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    unint64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_27;
    }
    int64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
}

uint64_t Canvas.editingMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void Canvas.editingMode.setter(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  swift_beginAccess();
  unsigned __int8 v4 = *v3;
  *uint64_t v3 = v2;
  unsigned __int8 v5 = v4;
  Canvas.editingMode.didset(&v5);
}

void (*Canvas.editingMode.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  unsigned __int8 v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = *v4;
  return Canvas.editingMode.modify;
}

void Canvas.editingMode.modify(uint64_t a1, char a2)
{
  unsigned __int8 v2 = *(void **)a1;
  if (a2)
  {
    char v4 = *(unsigned char *)(*(void *)a1 + 32);
    uint64_t v3 = (unsigned __int8 *)&v4;
  }
  else
  {
    char v5 = *(unsigned char *)(*(void *)a1 + 32);
    uint64_t v3 = (unsigned __int8 *)&v5;
  }
  Canvas.editingMode.setter(v3);
  free(v2);
}

uint64_t Canvas.editingContainerElementId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *MEMORY[0x263F8EED0];
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = type metadata accessor for CRKeyPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(v1 + direct field offset for Canvas._editingView);
  if (v12)
  {
    unint64_t v13 = *(void (**)(void))((*v12 & v3) + 0xE0);
    unint64_t v14 = v12;
    v13();

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v11, v8);
  }
  else
  {
    CanvasElementView.canvasElement.getter((uint64_t)v7);
    Capsule<>.rootID.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t Canvas.editingContainerElementId.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView)?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v7 = Canvas.editingView.getter();
  uint64_t v9 = v8;
  id v10 = *(id *)(v1 + direct field offset for Canvas.paperView);
  uint64_t v11 = ContainerCanvasElementView.unorderedSubelementViews.getter();

  uint64_t v29 = a1;
  specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for closure #1 in Canvas.editingContainerElementId.setter, v11, (uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v6, 1, v12) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView)?);
LABEL_11:
    id v17 = 0;
    uint64_t v16 = 0;
    goto LABEL_12;
  }
  unint64_t v13 = *(void **)&v6[*(int *)(v12 + 48)];
  uint64_t v14 = type metadata accessor for CRKeyPath();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v14 - 8) + 8))(v6, v14);
  swift_getObjectType();
  uint64_t v15 = swift_conformsToProtocol2();
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15) {
    id v17 = v13;
  }
  else {
    id v17 = 0;
  }
  if (!v17)
  {

    goto LABEL_11;
  }
LABEL_12:
  id v18 = (void *)(v2 + direct field offset for Canvas._editingView);
  char v19 = *(void **)(v2 + direct field offset for Canvas._editingView);
  *id v18 = v17;
  v18[1] = v16;

  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(ObjectType, v9);
  id v21 = Canvas.editingView.getter();
  uint64_t v23 = v22;
  uint64_t v24 = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v23 + 24))(v24, v23);

  id v25 = Canvas.editingView.getter();
  Canvas.updateScribbleIteractions(for:)(v25);

  uint64_t v26 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a1, v26);
}

void (*Canvas.editingContainerElementId.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for CRKeyPath();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  id v7 = malloc(v6);
  v3[4] = v7;
  Canvas.editingContainerElementId.getter((uint64_t)v7);
  return Canvas.editingContainerElementId.modify;
}

void Canvas.editingContainerElementId.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    Canvas.editingContainerElementId.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    Canvas.editingContainerElementId.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Canvas.canvasStateLiveStreamMessenger.getter()
{
  return MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasStateLiveStreamMessenger);
}

uint64_t Canvas.canvasStateLiveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized Canvas.canvasStateLiveStreamMessenger.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t Canvas.screenScaleOverride.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride;
  swift_beginAccess();
  return *(void *)v1;
}

void Canvas.screenScaleOverride.setter(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride;
  swift_beginAccess();
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2 & 1;
  Canvas.screenScaleOverride.didset();
}

void (*Canvas.screenScaleOverride.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = AnyCanvas.screenScaleOverride.modify();
  return Canvas.screenScaleOverride.modify;
}

void Canvas.screenScaleOverride.modify(void *a1, char a2)
{
  uint64_t v3 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0) {
    Canvas.screenScaleOverride.didset();
  }
  free(v3);
}

id Canvas.editingView.getter()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for Canvas._editingView);
  if (v1)
  {
    id v2 = *(id *)(v0 + direct field offset for Canvas._editingView);
  }
  else
  {
    id v2 = *(id *)(v0 + direct field offset for Canvas.paperView);
    uint64_t v1 = 0;
  }
  id v3 = v1;
  return v2;
}

Swift::Void __swiftcall Canvas.setCanvasStateNeedsLayout()()
{
  uint64_t v0 = AnyCanvas.overlays.getter();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    id v2 = (void **)(v0 + 32);
    do
    {
      id v3 = *v2;
      v2 += 2;
      objc_msgSend(v3, sel_setNeedsLayout);
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
}

id Canvas.overlayBounds.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  id result = (id)swift_beginAccess();
  uint64_t v5 = *v3;
  if (v5)
  {
    id result = objc_msgSend(v5, sel_visibleBoundsForOverlay);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 32) = v5 == 0;
  return result;
}

double Canvas.visibleBounds.getter()
{
  uint64_t v1 = (char *)v0 + direct field offset for Canvas.visibleBoundsOverride;
  swift_beginAccess();
  char v2 = v1[32];
  long long v3 = *((_OWORD *)v1 + 1);
  v26[0] = *(_OWORD *)v1;
  v26[1] = v3;
  char v27 = v2;
  uint64_t v4 = outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v26, (uint64_t)&v28, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  if ((v29 & 1) == 0) {
    return v28;
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0x308))(v4);
  if (v5)
  {
    uint64_t v6 = v5;
    objc_msgSend(v5, sel_zoomScale);
    double v8 = v7;
    objc_msgSend(v6, sel_adjustedContentInset);
    double v9 = 1.0 / v8;
    double v11 = 1.0 / v8 * v10;
    double v13 = v9 * v12;
    objc_msgSend(v6, sel_bounds);
    double v15 = v14;
    double v17 = v16;
    double v19 = v18;
    double v21 = v20;

    return UIEdgeInsetsInsetRect(v15, v17, v19, v21, v11, v13);
  }
  else
  {
    id v23 = Canvas.editingView.getter();
    objc_msgSend(v23, sel_bounds);
    double v22 = v24;
  }
  return v22;
}

Swift::Void __swiftcall Canvas.canvasStateDidChange()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<CanvasState>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + direct field offset for Canvas.multipeerCanvasStateConnection))
  {
    uint64_t v5 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasState;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
    swift_retain();
    CRMulticastSyncManager.sync(_:sendDelta:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

Swift::Void __swiftcall Canvas.canvasSelectionDidChange()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  if (MEMORY[0x210550400](v2))
  {
    uint64_t v3 = *((void *)v2 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
    swift_unknownObjectRelease();
  }
  Canvas.updateToolPickerContextualEditingView()();
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
  if (v5)
  {
    uint64_t v6 = v5;
    if (objc_msgSend(v5, sel_respondsToSelector_, sel__externalElementsSelectionDidChange)) {
      objc_msgSend(v6, sel__externalElementsSelectionDidChange);
    }
  }
  objc_msgSend(v1, sel_setNeedsLayout);
}

double Canvas.strokeBounds<A>(_:)()
{
  uint64_t v0 = type metadata accessor for Capsule();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - v2;
  type metadata accessor for AnyCanvas();
  CanvasElementView.canvasElement.getter((uint64_t)v3);
  double v4 = static AnyCanvas.strokeBounds<A, B>(_:in:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

Swift::Void __swiftcall Canvas.transformStrokes(_:with:concat:)(Swift::OpaquePointer _, CGAffineTransform *with, Swift::Bool concat)
{
  double v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *(void **)((char *)v3 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v6 = v5;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  v7[0] = 3;
  (*(void (**)(char *))((*v4 & *v3) + 0x530))(v7);
}

uint64_t Canvas.align(members:to:)()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = *(void **)((char *)v0 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v3 = v2;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  v5[0] = 3;
  return (*(uint64_t (**)(char *))((*v1 & *v0) + 0x530))(v5);
}

uint64_t Canvas.canvasDescription.getter()
{
  uint64_t v0 = type metadata accessor for Capsule();
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v12 - v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  CanvasElementView.canvasElement.getter((uint64_t)v2);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  int v7 = swift_dynamicCast();
  double v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  if (v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    v8(v5, 0, 1, v6);
    swift_getKeyPath();
    _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v10 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v6);
  }
  else
  {
    v8(v5, 1, 1, v6);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Capsule<Image>?);
    return 0;
  }
  return v10;
}

uint64_t Canvas.canvasDescription.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t Canvas.selectedShapes.getter(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    MEMORY[0x270FA5388](result);
    v5[2] = v1;
    swift_bridgeObjectRetain();
    uint64_t v4 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in Canvas.selectedShapes.getter, (uint64_t)v5, v3);
    swift_bridgeObjectRelease();
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Canvas.formattingState(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  CanvasFormattingProxy.init(canvas:members:)((uint64_t)v5, a1, a2, a3, a4 & 1, (uint64_t)v11);
  a5[3] = type metadata accessor for CanvasFormattingProxy();
  a5[4] = (uint64_t)&protocol witness table for CanvasFormattingProxy<A>;
  uint64_t v7 = swift_allocObject();
  *a5 = v7;
  long long v8 = v11[1];
  *(_OWORD *)(v7 + 16) = v11[0];
  *(_OWORD *)(v7 + 32) = v8;
  *(unsigned char *)(v7 + 48) = v12;
  id v9 = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void Canvas.removeImageBackground(for:)(uint64_t a1)
{
  uint64_t v59 = (void *)(*MEMORY[0x263F8EED0] & *v1);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v59[251];
  uint64_t v57 = v59[252];
  uint64_t v58 = v6;
  uint64_t v7 = type metadata accessor for Capsule();
  uint64_t v54 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v9 = (char *)&v49 - v8;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v62 = *(void *)(v60 - 8);
  uint64_t v10 = *(void *)(v62 + 64);
  MEMORY[0x270FA5388](v60);
  id v56 = (void (**)(char *, uint64_t))((char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  id v55 = (void (**)(char *, uint64_t))((char *)&v49 - v12);
  MEMORY[0x270FA5388](v13);
  uint64_t v61 = (char *)&v49 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v15 - 8);
  double v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x270FA5388](v18 - 8);
  double v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  double v22 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v21 - 8);
  MEMORY[0x270FA5388](v21);
  if (*(void *)(a1 + 16) == 1)
  {
    id v52 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v53 = v5;
    specialized Collection.first.getter(a1, (uint64_t)v17);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v17, 1, v24) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      v22[7](v20, 1, 1, v21);
LABEL_5:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for WeakRef<Image>?);
      return;
    }
    WeakTagged_9.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v24);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v22[6])(v20, 1, v21) == 1) {
      goto LABEL_5;
    }
    ((void (*)(char *, char *, uint64_t))v22[4])(v52, v20, v21);
    CanvasElementView.canvasElement.getter((uint64_t)v9);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<Image> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
    uint64_t v26 = v61;
    Capsule.encapsulate<A>(_:)();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v9, v7);
    uint64_t v27 = (uint64_t)v53;
    static TaskPriority.background.getter();
    uint64_t v51 = type metadata accessor for TaskPriority();
    uint64_t v28 = *(void *)(v51 - 8);
    id v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
    uint64_t v54 = v28 + 56;
    v50(v27, 0, 1, v51);
    uint64_t v29 = v62;
    uint64_t v30 = v55;
    uint64_t v31 = v60;
    (*(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v62 + 16))(v55, v26, v60);
    uint64_t v49 = CRContext.assetManager.getter();
    uint64_t v32 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v33 = v29;
    uint64_t v34 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v29 + 32);
    uint64_t v35 = v56;
    v34((char *)v56, v30, v31);
    uint64_t v36 = *(unsigned __int8 *)(v33 + 80);
    id v55 = (void (**)(char *, uint64_t))v22;
    uint64_t v37 = (v36 + 56) & ~v36;
    unint64_t v38 = (v10 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    id v39 = (void *)swift_allocObject();
    uint64_t v39[2] = 0;
    v39[3] = 0;
    uint64_t v40 = v57;
    v39[4] = v58;
    v39[5] = v40;
    v39[6] = v59[253];
    id v41 = (char *)v39 + v37;
    uint64_t v42 = v31;
    v34(v41, v35, v31);
    *(void *)((char *)v39 + v38) = v32;
    *(void *)((char *)v39 + ((v38 + 15) & 0xFFFFFFFFFFFFFFF8)) = v49;
    uint64_t v43 = (uint64_t)v53;
    uint64_t v44 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5((uint64_t)v53, (uint64_t)&async function pointer to partial apply for closure #1 in Canvas.removeImageBackground(for:), (uint64_t)v39);
    outlined destroy of StocksKitCurrencyCache.Provider?(v43, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v45 = v43;
    v50(v43, 1, 1, v51);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v46 = static MainActor.shared.getter();
    uint64_t v47 = (void *)swift_allocObject();
    uint64_t v48 = MEMORY[0x263F8F500];
    void v47[2] = v46;
    v47[3] = v48;
    v47[4] = v44;
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v45, (uint64_t)&async function pointer to partial apply for closure #2 in Canvas.removeImageBackground(for:), (uint64_t)v47);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v42);
    v55[1](v52, v21);
  }
}

void Canvas.contextualDebug(for:)(uint64_t a1)
{
  uint64_t v34 = type metadata accessor for CRKeyPath();
  uint64_t v2 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v37 = (char *)&v30 - v10;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v30 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v35 = v6 + 32;
  uint64_t v36 = v6 + 16;
  uint64_t v33 = (void (**)(char *, uint64_t))(v2 + 8);
  int64_t v31 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v32 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v38 = a1;
  swift_bridgeObjectRetain();
  int64_t v15 = 0;
  if (v14) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v18 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v18 < v31)
    {
      unint64_t v19 = *(void *)(v30 + 8 * v18);
      ++v15;
      if (v19) {
        goto LABEL_20;
      }
      int64_t v15 = v18 + 1;
      if (v18 + 1 >= v31) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v15);
      if (v19) {
        goto LABEL_20;
      }
      int64_t v15 = v18 + 2;
      if (v18 + 2 >= v31) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v15);
      if (v19)
      {
LABEL_20:
        unint64_t v14 = (v19 - 1) & v19;
        for (unint64_t i = __clz(__rbit64(v19)) + (v15 << 6); ; unint64_t i = v16 | (v15 << 6))
        {
          uint64_t v21 = v37;
          (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v37, *(void *)(v38 + 48) + *(void *)(v6 + 72) * i, v5);
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v21, v5);
          id v22 = Canvas.editingView.getter();
          uint64_t v24 = v23;
          uint64_t ObjectType = swift_getObjectType();
          MEMORY[0x21054B9C0](v5);
          uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 32))(ObjectType, v24);

          if (*(void *)(v26 + 16)
            && (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v28 & 1) != 0))
          {
            id v29 = *(id *)(*(void *)(v26 + 56) + 8 * v27);
            swift_bridgeObjectRelease();
            (*v33)(v4, v34);
            (*v32)(v8, v5);

            if (!v14) {
              goto LABEL_7;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            (*v33)(v4, v34);
            (*v32)(v8, v5);
            if (!v14) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v16 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
        }
      }
      int64_t v20 = v18 + 3;
      if (v20 < v31)
      {
        unint64_t v19 = *(void *)(v30 + 8 * v20);
        if (v19)
        {
          int64_t v15 = v20;
          goto LABEL_20;
        }
        while (1)
        {
          int64_t v15 = v20 + 1;
          if (__OFADD__(v20, 1)) {
            goto LABEL_27;
          }
          if (v15 >= v31) {
            break;
          }
          unint64_t v19 = *(void *)(v30 + 8 * v15);
          ++v20;
          if (v19) {
            goto LABEL_20;
          }
        }
      }
    }
LABEL_25:
    swift_release();
    return;
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t Canvas.addFlags(_:strokeFlags:to:)()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = *(void **)((char *)v0 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v3 = v2;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  v5[0] = 3;
  return (*(uint64_t (**)(char *))((*v1 & *v0) + 0x530))(v5);
}

void Canvas.applyUndo(_:selection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  Canvas.undoable(newChange:persistSelection:action:)(1, a2 != 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.applyUndo(_:selection:));
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AnyCanvas.selection.setter(a2, a3, a4, a5 & 1);
  }
}

void Canvas.registerUndo(_:selection:analyticsEvents:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  int v58 = a5;
  uint64_t v57 = a4;
  uint64_t v56 = a3;
  uint64_t v55 = a2;
  unint64_t v50 = a1;
  uint64_t v53 = *MEMORY[0x263F8EED0] & *v6;
  uint64_t v54 = type metadata accessor for CapsuleUndoAction();
  uint64_t v52 = *(void *)(v54 - 8);
  double v10 = MEMORY[0x270FA5388](a6);
  uint64_t v49 = v11;
  uint64_t v51 = (char *)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)MEMORY[0x263F8EE78];
  id v68 = (void *)MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(a6 + 16);
  uint64_t v59 = v6;
  if (v13)
  {
    uint64_t v14 = v9 + 32;
    v48[1] = v9;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of FindResult(v14, (uint64_t)v65);
      uint64_t v16 = v66;
      uint64_t v15 = v67;
      __swift_project_boxed_opaque_existential_1(v65, v66);
      double v17 = *(void (**)(uint64_t, uint64_t, double))(v15 + 40);
      uint64_t v18 = type metadata accessor for Optional();
      uint64_t v60 = v48;
      uint64_t v19 = *(void *)(v18 - 8);
      double v20 = MEMORY[0x270FA5388](v18);
      id v22 = (char *)v48 - v21;
      v17(v16, v15, v20);
      uint64_t v23 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v16) == 1)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
        uint64_t v63 = 0;
        long long v61 = 0u;
        long long v62 = 0u;
      }
      else
      {
        *((void *)&v62 + 1) = v16;
        uint64_t v63 = v15;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v61);
        (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 32))(boxed_opaque_existential_1, v22, v16);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
      if (*((void *)&v62 + 1))
      {
        outlined init with take of FindResult(&v61, (uint64_t)v64);
        outlined init with take of FindResult(v64, (uint64_t)&v61);
        uint64_t v25 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
          id v68 = v25;
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1) {
          id v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v25);
        }
        uint64_t v28 = *((void *)&v62 + 1);
        uint64_t v29 = v63;
        uint64_t v30 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v61, *((uint64_t *)&v62 + 1));
        double v31 = MEMORY[0x270FA5388](v30);
        uint64_t v33 = (char *)v48 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v34 + 16))(v33, v31);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v33, (uint64_t *)&v68, v28, v29);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v61, (uint64_t *)&demangling cache variable for type metadata for AnalyticsEvent?);
      }
      v14 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v12 = v68;
    uint64_t v7 = v59;
  }
  uint64_t v35 = objc_msgSend(v7, sel_undoManager, v10);
  if (v35)
  {
    uint64_t v36 = v52;
    uint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
    uint64_t v38 = v51;
    uint64_t v60 = v35;
    uint64_t v39 = v54;
    v37(v51, v50, v54);
    unint64_t v40 = (*(unsigned __int8 *)(v36 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    unint64_t v50 = (v40 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v40 + v49 + 39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = (char *)swift_allocObject();
    uint64_t v43 = v53;
    *((void *)v42 + 2) = *(void *)(v53 + 2008);
    *((void *)v42 + 3) = *(void *)(v43 + 2016);
    *((void *)v42 + 4) = *(void *)(v43 + 2024);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v42[v40], v38, v39);
    uint64_t v44 = &v42[v50];
    uint64_t v45 = v55;
    uint64_t v46 = v56;
    *(void *)uint64_t v44 = v55;
    *((void *)v44 + 1) = v46;
    *((void *)v44 + 2) = v57;
    v44[24] = v58;
    *(void *)&v42[v41] = v12;
    outlined copy of CanvasMembers?(v45);
    type metadata accessor for Canvas();
    uint64_t v47 = v60;
    NSUndoManager.registerUndo<A>(withTarget:handler:)();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void Canvas.registerUndo(_:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_msgSend(v2, sel_undoManager);
  if (v5)
  {
    id v7 = v5;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    type metadata accessor for Canvas();
    swift_retain();
    NSUndoManager.registerUndo<A>(withTarget:handler:)();
    swift_release();
  }
}

uint64_t Canvas.undoable(newChange:persistSelection:action:)(char a1, char a2, uint64_t (*a3)(double))
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v8 - 8);
  double v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CapsuleUndoAction();
  uint64_t v42 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v41 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for Capsule();
  uint64_t v13 = *(char **)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v34 - v17;
  if (*((unsigned char *)v4 + direct field offset for Canvas.isInUndoableGroup))
  {
    *((unsigned char *)v4 + direct field offset for Canvas.isUndoableGroupNewChange) = (*((unsigned char *)v4
                                                                                + direct field offset for Canvas.isUndoableGroupNewChange) | a1) & 1;
    return a3(v18);
  }
  *((unsigned char *)v4 + direct field offset for Canvas.isInUndoableGroup) = 1;
  *((unsigned char *)v4 + direct field offset for Canvas.isUndoableGroupNewChange) = a1 & 1;
  uint64_t result = CanvasElementView.canvasElement.getter((uint64_t)&v34 - v17);
  if (a2)
  {
    uint64_t v21 = *(void *)((char *)v4 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v21)
    {
      __break(1u);
      return result;
    }
    uint64_t v22 = v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)(v22 + 8);
    uint64_t v36 = *(void *)(v22 + 16);
    unsigned int v35 = *(unsigned __int8 *)(v22 + 24);
    uint64_t v38 = v23;
    swift_bridgeObjectRetain();
    uint64_t v37 = v24;
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    unsigned int v35 = 0;
  }
  ((void (*)(uint64_t))a3)(result);
  if (one-time initialization token for $currentAnalyticsEvents != -1) {
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v39 = v13;
    uint64_t v40 = v11;
    TaskLocal.get()();
    uint64_t v25 = v45;
    unint64_t v26 = (char *)v45[2];
    if (!v26) {
      break;
    }
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      }
      if ((unint64_t)v13 >= v25[2]) {
        break;
      }
      ++v13;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v25 + v11 + 32, *(void *)((char *)v25 + v11 + 56));
      AnalyticsEvent.send()();
      v11 += 40;
      if (v26 == v13) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_21:
    swift_once();
  }
LABEL_14:
  if (*((unsigned char *)v4 + direct field offset for Canvas.isUndoableGroupNewChange) == 1)
  {
    char v44 = 3;
    (*(void (**)(char *))((*MEMORY[0x263F8EED0] & *v4) + 0x530))(&v44);
  }
  CanvasElementView.canvasElement.getter((uint64_t)v15);
  uint64_t v27 = v43;
  Capsule.actionUndoingDifference(from:)();
  uint64_t v28 = (void (*)(char *, uint64_t))*((void *)v39 + 1);
  v28(v15, v27);
  uint64_t v29 = v42;
  uint64_t v30 = v40;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v10, 1, v40) == 1)
  {
    outlined consume of CanvasMembers?(v38);
    swift_bridgeObjectRelease();
    v28(v19, v27);
    uint64_t result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    double v31 = v41;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v41, v10, v30);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, void, void *))((*MEMORY[0x263F8EED0] & *v4)
                                                                                     + 0x468);
    uint64_t v39 = v19;
    uint64_t v33 = v38;
    uint64_t v34 = (uint64_t (*)(char *, uint64_t))v28;
    v32(v31, v38, v37, v36, v35, v25);
    outlined consume of CanvasMembers?(v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v41, v30);
    uint64_t result = v34(v39, v43);
  }
  *((unsigned char *)v4 + direct field offset for Canvas.isInUndoableGroup) = 0;
  return result;
}

uint64_t Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)(uint64_t a1, int a2, void *a3, int a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v154 = a7;
  int v153 = a4;
  int v152 = a2;
  double v160 = (char *)(*MEMORY[0x263F8EED0] & *v7);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v146 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v147 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v144 = (char *)&v143 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for CRKeyPath();
  uint64_t v157 = *(void *)(v156 - 8);
  MEMORY[0x270FA5388](v156);
  double v149 = (char *)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v145 = (char *)&v143 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v143 - v20;
  uint64_t v155 = a6;
  uint64_t v22 = type metadata accessor for Capsule();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v143 - v24;
  id v151 = self;
  objc_msgSend(v151, sel_begin);
  uint64_t v159 = v23;
  unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v161 = v22;
  v26(v25, a1, v22);
  id v150 = a3;
  if (a3)
  {
    id v27 = v150;
    id v28 = objc_msgSend(v27, sel_itemProvider);
    uint64_t v29 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C853C60);
    unsigned int v30 = objc_msgSend(v28, sel_hasItemConformingToTypeIdentifier_, v29);

    if (v30)
    {
      double v31 = &v158[direct field offset for Canvas.stickerDropPreviewInfoMap];
      swift_beginAccess();
      uint64_t v32 = *(void *)v31;
      if (*(void *)(*(void *)v31 + 16))
      {
        id v27 = v27;
        swift_bridgeObjectRetain();
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v27);
        if (v34)
        {
          uint64_t v35 = *(void *)(v32 + 56) + 40 * v33;
          uint64_t v36 = *(void *)(v35 + 32);
          long long v37 = *(_OWORD *)(v35 + 16);
          v169[0] = *(_OWORD *)v35;
          v169[1] = v37;
          uint64_t v170 = v36;
          swift_bridgeObjectRelease();

          MEMORY[0x270FA5388](v38);
          uint64_t v39 = v160;
          *((_OWORD *)&v143 - 3) = *(_OWORD *)(v160 + 2008);
          uint64_t v40 = v155;
          *(&v143 - 4) = *((void *)v39 + 253);
          *(&v143 - 3) = v40;
          *(&v143 - 2) = (uint64_t)v154;
          *(&v143 - 1) = (uint64_t)v169;
          Capsule.callAsFunction<A>(_:)();

          goto LABEL_8;
        }
        swift_bridgeObjectRelease();
      }
    }
  }
LABEL_8:
  uint64_t v148 = v14;
  id v41 = Canvas.editingView.getter();
  uint64_t v43 = v42;
  swift_getObjectType();
  double v160 = v25;
  uint64_t v44 = v161;
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  uint64_t v45 = static Array._adoptStorage(_:count:)();
  v26(v46, (uint64_t)v160, v44);
  uint64_t v47 = (uint64_t)v160;
  _finalizeUninitializedArray<A>(_:)(v45);
  uint64_t v48 = v155;
  uint64_t v49 = (uint64_t)v154;
  (*(void (**)(void))(v43 + 80))();
  swift_bridgeObjectRelease();

  if (v153) {
    Canvas.harmonizeCanvasElement<A>(_:)(v47, a5, v48, v49);
  }
  id v50 = Canvas.editingView.getter();
  uint64_t v52 = v51;
  uint64_t ObjectType = swift_getObjectType();
  Capsule<>.rootID.getter();
  uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 32))(ObjectType, v52);

  if (*(void *)(v54 + 16) && (unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21), (v56 & 1) != 0))
  {
    id v57 = *(id *)(*(void *)(v54 + 56) + 8 * v55);
    swift_bridgeObjectRelease();
    int v58 = *(void (**)(char *, uint64_t))(v157 + 8);
    uint64_t v59 = v21;
    uint64_t v60 = v156;
    v58(v59, v156);
    if (v150)
    {
      long long v61 = &selRef_isImageAnalysisEnabled;
      id v154 = v150;
      id v62 = objc_msgSend(v154, sel_itemProvider);
      uint64_t v63 = (uint64_t)"roviderReading>\"8@\"NSError\"16";
      id v64 = (void *)MEMORY[0x21054D080](0xD000000000000011, 0x800000020C853C60);
      id v65 = &off_2640D6000;
      unsigned __int8 v66 = objc_msgSend(v62, sel_hasItemConformingToTypeIdentifier_, v64);

      if (v66)
      {
        uint64_t v67 = v145;
        Capsule<>.rootID.getter();
        uint64_t v68 = (uint64_t)v146;
        CRKeyPath.uuid.getter();
        v58(v67, v156);
        uint64_t v69 = v147;
        uint64_t v70 = v148;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v68, 1, v148) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v68, &demangling cache variable for type metadata for UUID?);
        }
        else
        {
          id v73 = v144;
          (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v144, v68, v70);
          objc_msgSend(v57, sel_setIsAccessibilityElement_, 1);
          uint64_t aBlock = 0x2D72656B63697453;
          unint64_t v164 = 0xE800000000000000;
          id v74 = v57;
          v75._uint64_t countAndFlagsBits = UUID.uuidString.getter();
          String.append(_:)(v75);
          swift_bridgeObjectRelease();
          id v76 = (void *)MEMORY[0x21054D080](aBlock, v164);
          swift_bridgeObjectRelease();
          objc_msgSend(v74, sel_setAccessibilityIdentifier_, v76);

          long long v61 = &selRef_isImageAnalysisEnabled;
          id v77 = v73;
          id v65 = &off_2640D6000;
          (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v70);
        }
      }
      id v78 = (SEL *)&selRef_isImageAnalysisEnabled;
      id v79 = v158;
      id v80 = objc_msgSend(v158, sel_window);

      if (v80) {
        goto LABEL_24;
      }
      if (one-time initialization token for logger != -1) {
        goto LABEL_50;
      }
      while (1)
      {
        uint64_t v81 = type metadata accessor for Logger();
        __swift_project_value_buffer(v81, (uint64_t)logger);
        double v82 = Logger.logObject.getter();
        os_log_type_t v83 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v82, v83))
        {
          id v84 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v84 = 0;
          _os_log_impl(&dword_20C2D7000, v82, v83, "Attachment view was removed from its window while loading a dropped item", v84, 2u);
          MEMORY[0x210550270](v84, -1, -1);
        }

        id v79 = v158;
LABEL_24:
        id v85 = [v79 v78[321]];

        id v78 = (SEL *)v79;
        if (v85)
        {
          id v86 = [v154 v61[11]];
          id v87 = (void *)MEMORY[0x21054D080](0xD000000000000011, v63 | 0x8000000000000000);
          unsigned __int8 v88 = objc_msgSend(v86, (SEL)v65[446], v87);

          if ((v88 & 1) == 0)
          {
            id v89 = Canvas.editingView.getter();
            long double v90 = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v89) + 0x140))();

            double v91 = fmod(v90, 6.28318531);
            if (v91 > 3.14159265) {
              double v91 = v91 + -6.28318531;
            }
            if (v91 < -3.14159265) {
              double v91 = v91 + 6.28318531;
            }
            if (fabs(v91) < 0.01)
            {
              id v92 = (char *)v78 + direct field offset for Canvas.delayedPreviewProviders;
              swift_beginAccess();
              uint64_t v93 = *(void *)v92;
              if (*(void *)(*(void *)v92 + 16))
              {
                id v94 = v154;
                swift_bridgeObjectRetain();
                unint64_t v95 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v94);
                if (v96)
                {
                  id v97 = *(void (**)(uint64_t *))(*(void *)(v93 + 56) + 16 * v95);
                  swift_retain();
                  swift_bridgeObjectRelease();

                  id v98 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82AD0]), sel_init);
                  objc_msgSend(v57, sel_bounds);
                  -[SEL convertRect:fromCoordinateSpace:](v78, sel_convertRect_fromCoordinateSpace_, v57);
                  CGFloat v100 = v99;
                  CGFloat v102 = v101;
                  CGFloat v104 = v103;
                  CGFloat v106 = v105;
                  [(SEL *)v78 bounds];
                  v174.origin.double x = v107;
                  v174.origin.double y = v108;
                  v174.size.double width = v109;
                  v174.size.double height = v110;
                  v171.origin.double x = v100;
                  v171.origin.double y = v102;
                  v171.size.double width = v104;
                  v171.size.double height = v106;
                  CGRect v172 = CGRectIntersection(v171, v174);
                  -[SEL convertRect:toCoordinateSpace:](v78, sel_convertRect_toCoordinateSpace_, v57, v172.origin.x, v172.origin.y, v172.size.width, v172.size.height);
                  double x = v173.origin.x;
                  double y = v173.origin.y;
                  double width = v173.size.width;
                  double height = v173.size.height;
                  if (CGRectIsNull(v173))
                  {
                    double width = 0.0;
                    double height = 0.0;
                    double x = 0.0;
                    double y = 0.0;
                  }
                  id v115 = objc_msgSend(self, sel_bezierPathWithRect_, x, y, width, height);
                  objc_msgSend(v98, sel_setVisiblePath_, v115);

                  id v116 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CB8]), sel_initWithView_parameters_, v57, v98);
                  uint64_t aBlock = (uint64_t)v116;
                  v97(&aBlock);

                  swift_release();
                }
                else
                {
                  swift_bridgeObjectRelease();
                }
              }
            }
          }
        }
        if (*((unsigned char *)v78 + direct field offset for Canvas.dropInteractionSessionIsActive) != 1) {
          break;
        }
        uint64_t v63 = self;
        uint64_t v117 = swift_allocObject();
        *(void *)(v117 + 16) = v57;
        long long v61 = (char **)swift_allocObject();
        v61[2] = (char *)partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
        v61[3] = (char *)v117;
        CGRect v167 = partial apply for thunk for @callee_guaranteed () -> ();
        uint64_t v168 = v61;
        uint64_t aBlock = MEMORY[0x263EF8330];
        unint64_t v164 = 1107296256;
        CGRect v165 = thunk for @escaping @callee_guaranteed () -> ();
        uint64_t v166 = &block_descriptor_258_0;
        uint64_t v118 = _Block_copy(&aBlock);
        id v65 = (__objc2_class **)v168;
        id v119 = v57;
        swift_retain();
        swift_release();
        objc_msgSend((id)v63, sel_performWithoutAnimation_, v118);
        _Block_release(v118);
        LOBYTE(v118) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v118 & 1) == 0)
        {
          uint64_t v120 = swift_allocObject();
          *(void *)(v120 + 16) = v119;
          id v121 = (uint64_t *)((char *)v78 + direct field offset for Canvas.dropCompletions);
          swift_beginAccess();
          id v122 = v154;
          id v123 = v119;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v162 = *v121;
          *id v121 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #3 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:), v120, v122, isUniquelyReferenced_nonNull_native);
          *id v121 = v162;
          swift_bridgeObjectRelease();

          swift_endAccess();
          id v72 = partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
          goto LABEL_41;
        }
        __break(1u);
LABEL_50:
        swift_once();
      }

      id v72 = 0;
LABEL_41:
      uint64_t v60 = v156;
      uint64_t v47 = (uint64_t)v160;
    }
    else
    {

      id v72 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    int v58 = *(void (**)(char *, uint64_t))(v157 + 8);
    id v71 = v21;
    uint64_t v60 = v156;
    v58(v71, v156);
    id v72 = 0;
  }
  objc_msgSend(v151, sel_commit);
  if (v152)
  {
    id v125 = Canvas.editingView.getter();
    uint64_t v127 = v126;
    uint64_t v128 = swift_getObjectType();
    uint64_t v129 = (uint64_t)v149;
    Capsule<>.rootID.getter();
    uint64_t v130 = (*(uint64_t (**)(uint64_t, uint64_t))(v127 + 32))(v128, v127);

    if (*(void *)(v130 + 16) && (unint64_t v131 = specialized __RawDictionaryStorage.find<A>(_:)(v129), (v132 & 1) != 0))
    {
      id v133 = *(id *)(*(void *)(v130 + 56) + 8 * v131);
      swift_bridgeObjectRelease();
      v58((char *)v129, v60);
      uint64_t v134 = v133;
      uint64_t v135 = specialized CanvasMembers.init(_:)(v134);
      uint64_t v137 = v136;
      uint64_t v139 = v138;
      char v141 = v140;

      AnyCanvas.selection.setter(v135, v137, v139, v141 & 1);
    }
    else
    {
      swift_bridgeObjectRelease();
      v58((char *)v129, v60);
    }
    uint64_t v47 = (uint64_t)v160;
  }
  (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v47, v161);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v72);
}

Swift::Void __swiftcall Canvas.showOrHideContent(below:)(CGPoint below)
{
  uint64_t v2 = v1;
  v37.double x = below.x;
  v37.double y = below.y;
  id v3 = (void *)MEMORY[0x263F8EED0];
  uint64_t v4 = *MEMORY[0x263F8EED0] & *v1;
  id v5 = Canvas.editingView.getter();
  (*(void (**)(void *__return_ptr))((*v3 & *v5) + 0x2A0))(v41);
  CGFloat v35 = *(double *)&v41[1];
  CGFloat v36 = *(double *)v41;
  CGFloat v6 = *(double *)&v41[4];
  CGFloat v33 = *(double *)&v41[3];
  CGFloat v34 = *(double *)&v41[2];
  CGFloat v7 = *(double *)&v41[5];

  (*(void (**)(void *__return_ptr))((*v3 & *v2) + 0x5D0))(v42);
  CGFloat v9 = *(double *)v42;
  CGFloat v8 = *(double *)&v42[1];
  CGFloat v11 = *(double *)&v42[2];
  CGFloat v10 = *(double *)&v42[3];
  CGFloat v13 = *(double *)&v42[4];
  CGFloat v12 = *(double *)&v42[5];
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v42, (uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  if (v43[48])
  {
    CGFloat v10 = 1.0;
    CGFloat v12 = 0.0;
    CGFloat v13 = 0.0;
    CGFloat v11 = 0.0;
    CGFloat v8 = 0.0;
    CGFloat v9 = 1.0;
  }
  v40.double a = v36;
  v40.double b = v35;
  v40.double c = v34;
  v40.double d = v33;
  v40.double tx = v6;
  v40.double ty = v7;
  v39.double a = v9;
  v39.double b = v8;
  v39.double c = v11;
  v39.double d = v10;
  v39.double tx = v13;
  v39.double ty = v12;
  CGAffineTransformConcat(&v38, &v40, &v39);
  CGAffineTransform v40 = v38;
  CGAffineTransformInvert(&v39, &v40);
  CGAffineTransform v40 = v39;
  CGPoint v14 = CGPointApplyAffineTransform(v37, &v40);
  *(void *)&v37.double y = &v32;
  LOBYTE(v39.a) = 1;
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = *(void *)(v4 + 2024);
  uint64_t v27 = *(void *)(v4 + 2016);
  uint64_t v17 = v27;
  uint64_t v28 = v18;
  double v29 = v16;
  uint64_t v30 = v19;
  double v31 = &v39;
  uint64_t v20 = *(void **)((char *)v2 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v21 = v20;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  *(void *)&v37.double y = v26;
  MEMORY[0x270FA5388](v22);
  *(void *)&v26[-48] = v17;
  *(void *)&v26[-40] = v18;
  *(CGPoint *)&v26[-32] = v14;
  *(void *)&v26[-16] = &v39;
  uint64_t v23 = *(void **)((char *)v2 + direct field offset for Canvas.paperView);
  uint64_t v24 = (void *)MEMORY[0x263F8EED0];
  swift_beginAccess();
  id v25 = v23;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  LOBYTE(v40.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v24 & *v2) + 0x530))(&v40);
}

void Canvas.remove(members:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = a4 & 1;
  id v10 = Canvas.editingView.getter();
  uint64_t v12 = v11;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 88))(a1, a2, a3, v9, ObjectType, v12);

  CGPoint v14 = *(char **)(v5 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v14)
  {
    uint64_t v15 = *(void *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
    int v16 = v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
    uint64_t v18 = *(void *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
    uint64_t v19 = *(void *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    uint64_t v17 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(a1);
    specialized Set._subtract<A>(_:)(a2);
    CanvasElementResizeView.selection.setter(v19, v18, v15, v16);
  }
  else
  {
    __break(1u);
  }
}

uint64_t Canvas.duplicate(members:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = a4 & 1;
  id v8 = Canvas.editingView.getter();
  uint64_t v10 = v9;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(a1, a2, a3, v7, ObjectType, v10);

  return v12;
}

uint64_t Canvas.canConvertToHandwriting(members:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = a4 & 1;
  id v8 = Canvas.editingView.getter();
  uint64_t v10 = v9;
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(a3) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 120))(a1, a2, a3, v7, ObjectType, v10);

  return a3 & 1;
}

void Canvas.convertToHandwriting(members:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = a4 & 1;
  id v11 = Canvas.editingView.getter();
  uint64_t v9 = v8;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 128))(a1, a2, a3, v7, ObjectType, v9);
}

unint64_t Canvas.addWords(_:layout:)(unint64_t result, uint64_t a2)
{
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v3) {
      return result;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  if (a2) {
    uint64_t result = ReflowLayoutManager.strokeTransforms()();
  }
  MEMORY[0x270FA5388](result);
  Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.addWords(_:layout:));
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall Canvas.tapOnCanvas(location:fromPencilKit:allowShowingEditMenu:)(CGPoint location, Swift::Bool fromPencilKit, Swift::Bool allowShowingEditMenu)
{
  uint64_t v4 = v3;
  double y = location.y;
  double x = location.x;
  if (fromPencilKit)
  {
    id v8 = objc_msgSend(v4, sel_hitTest_withEvent_, 0, location.x, location.y);
    if (v8)
    {
      uint64_t v9 = v8;
      type metadata accessor for AnyCanvasElementView();
      id v10 = v9;
      id v11 = (void *)swift_dynamicCastClass();
      id v12 = v10;
      if (v11)
      {
LABEL_8:

        if (v11 != *(void **)((char *)v4 + direct field offset for Canvas.paperView))
        {
          id v36 = v12;
          objc_msgSend(v11, sel_convertPoint_fromCoordinateSpace_, v4, x, y);
          (*(void (**)(void, uint64_t, Swift::Bool))((*MEMORY[0x263F8EED0] & *v11) + 0x1C8))(0, 1, allowShowingEditMenu);

          return;
        }
        id v10 = v12;
      }
      else
      {
        id v12 = v10;
        while (1)
        {
          id v13 = objc_msgSend(v12, sel_superview);

          if (!v13) {
            break;
          }
          id v12 = v13;
          uint64_t v14 = swift_dynamicCastClass();
          if (v14)
          {
            id v11 = (void *)v14;
            goto LABEL_8;
          }
        }
      }
    }
  }
  if (!allowShowingEditMenu) {
    goto LABEL_18;
  }
  uint64_t v15 = *(void *)((char *)v4 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v15)
  {
    __break(1u);
    return;
  }
  int v16 = (void *)(v15 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (*(void *)(*v16 + 16)) {
    goto LABEL_18;
  }
  if (*(void *)(v16[1] + 16)) {
    goto LABEL_18;
  }
  uint64_t v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v4) + 0x320))();
  if (v17)
  {
    uint64_t v18 = v17;
    unsigned __int8 v19 = objc_msgSend(v17, sel__hasSelection);

    if (v19) {
      goto LABEL_18;
    }
  }
  *(void *)&v38.double d = &type metadata for PencilAndPaperFeatureFlags;
  *(void *)&v38.double tx = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v38.a) = 0;
  char v20 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  if ((v20 & 1) == 0)
  {
LABEL_18:
    AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
  }
  else
  {
    if (*(void *)((char *)v4 + direct field offset for Canvas.editMenuInteractionDelegate)
      && (CanvasEditMenuDelegate.editMenuIsPresented.getter() & 1) != 0)
    {
      objc_msgSend(*(id *)((char *)v4 + direct field offset for Canvas.editMenuInteraction), sel_dismissMenu);
      return;
    }
    id v21 = Canvas.editingView.getter();
    uint64_t v23 = v22;
    uint64_t ObjectType = swift_getObjectType();
    id v25 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(ObjectType, v23);

    if (!v25) {
      goto LABEL_32;
    }
    objc_msgSend(v25, sel_convertPoint_fromCoordinateSpace_, v4, x, y);
    CGFloat v27 = v26;
    CGFloat v29 = v28;
    objc_msgSend(v25, sel_drawingTransform);
    CGAffineTransformInvert(&v37, &v38);
    CGAffineTransform v38 = v37;
    v40.double x = v27;
    v40.double y = v29;
    CGPoint v30 = CGPointApplyAffineTransform(v40, &v38);
    uint64_t v31 = *(void *)&v25[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (!v31
      || (uint64_t v32 = *(void **)(v31 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController)) == 0)
    {

LABEL_32:
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIEditMenuConfiguration);
      memset(&v38, 0, 40);
      CGFloat v34 = (void *)UIEditMenuConfiguration.init(identifier:sourcePoint:)();
      id v35 = *(id *)((char *)v4 + direct field offset for Canvas.editMenuInteraction);
      objc_msgSend(v35, sel_presentEditMenuWithConfiguration_, v34);

      return;
    }
    unsigned __int8 v33 = objc_msgSend(v32, sel_handleSingleTapAtDrawingLocation_, v30.x, v30.y);

    if ((v33 & 1) == 0) {
      goto LABEL_32;
    }
  }
}

uint64_t Canvas.editMenuIsPresented.getter()
{
  if (*(void *)(v0 + direct field offset for Canvas.editMenuInteractionDelegate)) {
    return CanvasEditMenuDelegate.editMenuIsPresented.getter() & 1;
  }
  else {
    return 0;
  }
}

void Canvas.tapCanvasElement(_:modifierFlags:)(void *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  unint64_t v127 = a2;
  uint64_t v125 = type metadata accessor for Logger();
  uint64_t v128 = *(void *)(v125 - 8);
  MEMORY[0x270FA5388](v125);
  id v123 = (uint64_t *)((char *)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  id v124 = (char *)&v119 - v9;
  uint64_t v129 = 0;
  uint64_t v10 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v126 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v15 = *(void *)(v14 - 8);
  v16.n128_f64[0] = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v119 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *a1) + 0x220))(v16) & 1) == 0) {
    return;
  }
  if ((a3 & 1) != 0 || (v127 & 0x120000) == 0)
  {
    CGAffineTransform v38 = a1;
    uint64_t v39 = specialized CanvasMembers.init(_:)(v38);
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    char v45 = v44;

    AnyCanvas.selection.setter(v39, v41, v43, v45 & 1);
    goto LABEL_81;
  }
  uint64_t v122 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v19 = *(uint64_t *)((char *)&v3->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  unint64_t v127 = (unint64_t)v3;
  if (!v19)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  char v20 = (uint64_t *)(v19 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  uint64_t v21 = v20[1];
  uint64_t v120 = *v20;
  uint64_t v121 = v21;
  a3 = *(uint64_t **)((*MEMORY[0x263F8EED0] & *a1) + 0xE8);
  uint64_t v4 = ((*MEMORY[0x263F8EED0] & *a1) + 232);
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t))a3)(v22);
  SharedTagged_9.tag.getter();
  uint64_t v134 = v130;
  char v135 = v131;
  MEMORY[0x21054BDF0](v11);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v126 + 8))(v13, v11);
  char v23 = specialized Set.contains(_:)((uint64_t)v18, v120);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = v122;
  id v25 = *(unsigned char **)(v127 + v122);
  if ((v23 & 1) == 0)
  {
    if (!v25)
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    a3 = &OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v46 = *(void *)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    uint64_t v47 = *(void *)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
    uint64_t v4 = *(NSObject **)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
    unsigned __int8 v48 = v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
    uint64_t v130 = v46;
    uint64_t v131 = v47;
    char v132 = v4;
    unsigned __int8 v133 = v48;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v49 = v25;
    CanvasMembers.insert(_:)(a1);
    CanvasElementResizeView.selection.setter(v130, v131, (uint64_t)v132, v133);

    uint64_t v50 = *(void *)(v127 + v24);
    if (!v50)
    {
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    uint64_t v51 = v24;
    uint64_t v52 = v50 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    uint64_t v53 = *(void *)v52;
    uint64_t v54 = *(void *)(v52 + 8);
    unint64_t v55 = *(NSObject **)(v52 + 16);
    char v56 = *(unsigned char *)(v52 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (specialized static Set.== infix(_:_:)(v46, v53))
    {
      char v57 = specialized static Set.== infix(_:_:)(v47, v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v57)
      {
        if (v48)
        {
          if (v56) {
            goto LABEL_60;
          }
        }
        else
        {
          if (v4 == v55) {
            char v98 = v56;
          }
          else {
            char v98 = 1;
          }
          if ((v98 & 1) == 0) {
            goto LABEL_60;
          }
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for miniMenuLogger != -1) {
      swift_once();
    }
    uint64_t v65 = v125;
    uint64_t v66 = __swift_project_value_buffer(v125, (uint64_t)miniMenuLogger);
    a3 = v123;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v128 + 16))(v123, v66, v65);
    unint64_t v67 = v127;
    uint64_t v4 = (id)v127;
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 134217984;
      uint64_t v71 = *(void *)(v67 + v51);
      if (!v71)
      {
LABEL_104:

        __break(1u);
        goto LABEL_105;
      }
      id v72 = v70;
      uint64_t v130 = *(void *)(*(void *)(v71 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_20C2D7000, v68, v69, "Changing selection to have %ld elements", v72, 0xCu);
      MEMORY[0x210550270](v72, -1, -1);
      a3 = v123;
    }
    else
    {

      uint64_t v68 = v4;
    }

    uint64_t v85 = (*(uint64_t (**)(uint64_t *, uint64_t))(v128 + 8))(a3, v65);
    MEMORY[0x270FA5388](v85);
    *(&v119 - 2) = (uint64_t)v4;
    AnyCanvas.updateCanvasState(_:)();
    if ([v4 isFirstResponder]) {
      goto LABEL_73;
    }
    id v86 = *(void **)(v127 + v51);
    if (!v86)
    {
LABEL_106:
      __break(1u);
      return;
    }
    id v87 = v86;
    uint64_t v88 = swift_bridgeObjectRetain();
    unint64_t v89 = specialized Sequence.compactMap<A>(_:)(v88, (uint64_t)v87);

    swift_bridgeObjectRelease();
    if (v89 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v90 = *(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v90) {
      goto LABEL_73;
    }
    double v91 = v4;
    id v92 = [v91 window];
    if (v92)
    {
      uint64_t v93 = v92;
      id v94 = objc_msgSend(self, sel_activeToolPickerForWindow_, v92);
      if (v94)
      {
        unint64_t v95 = v94;
        id v96 = [v94 _visibilityUpdatesEnabled];
        a3 = (uint64_t *)&selRef_allowsFingerDrawing;
        [v95 _setVisibilityUpdatesEnabled:0];
        [v91 becomeFirstResponder];
        [v95 _setVisibilityUpdatesEnabled:v96];

        double v91 = v95;
LABEL_72:

LABEL_73:
        CGFloat v104 = *(Class *)((char *)&v4->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
        if (v104)
        {
          id v105 = v104;
          HandwritingReflowView.updateForNewSelection()();
        }
        Canvas.canvasSelectionDidChange()();
        uint64_t v106 = *(void *)(v127 + v51);
        if (!v106) {
          goto LABEL_102;
        }
        CGFloat v107 = (void *)(v106 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (*(void *)(*v107 + 16) || *(void *)(v107[1] + 16))
        {
          uint64_t v4 = v127;
          goto LABEL_81;
        }
        double v103 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & (uint64_t)v4->isa) + 0x320);
        uint64_t v4 = v127;
        goto LABEL_80;
      }
    }
    [v91 becomeFirstResponder];
    goto LABEL_72;
  }
  if (!v25)
  {
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  a3 = &OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v26 = *(void *)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v27 = *(void *)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  uint64_t v4 = *(NSObject **)&v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  unsigned __int8 v28 = v25[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  uint64_t v130 = v26;
  uint64_t v131 = v27;
  char v132 = v4;
  unsigned __int8 v133 = v28;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  CGFloat v29 = v25;
  CanvasMembers.remove(_:)(a1);
  CanvasElementResizeView.selection.setter(v130, v131, (uint64_t)v132, v133);

  uint64_t v30 = *(void *)(v127 + v24);
  if (!v30)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  uint64_t v31 = v24;
  uint64_t v32 = v30 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v33 = *(void *)v32;
  uint64_t v34 = *(void *)(v32 + 8);
  id v35 = *(NSObject **)(v32 + 16);
  char v36 = *(unsigned char *)(v32 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (specialized static Set.== infix(_:_:)(v26, v33))
  {
    char v37 = specialized static Set.== infix(_:_:)(v27, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v37)
    {
      if (v28)
      {
        if (v36)
        {
LABEL_60:
          uint64_t v4 = v127;
          goto LABEL_81;
        }
      }
      else
      {
        if (v4 == v35) {
          char v97 = v36;
        }
        else {
          char v97 = 1;
        }
        if ((v97 & 1) == 0) {
          goto LABEL_60;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for miniMenuLogger != -1) {
    swift_once();
  }
  uint64_t v58 = v125;
  uint64_t v59 = __swift_project_value_buffer(v125, (uint64_t)miniMenuLogger);
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v124, v59, v58);
  uint64_t v4 = v127;
  a3 = (uint64_t *)(id)v127;
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v60, v61))
  {
    id v62 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v62 = 134217984;
    uint64_t v63 = *(uint64_t *)((char *)&v4->isa + v31);
    if (!v63)
    {
LABEL_103:

      __break(1u);
      goto LABEL_104;
    }
    id v64 = v62;
    uint64_t v130 = *(void *)(*(void *)(v63 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_20C2D7000, v60, v61, "Changing selection to have %ld elements", v64, 0xCu);
    MEMORY[0x210550270](v64, -1, -1);
  }
  else
  {

    uint64_t v60 = a3;
  }

  uint64_t v73 = (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v124, v58);
  MEMORY[0x270FA5388](v73);
  *(&v119 - 2) = (uint64_t)a3;
  AnyCanvas.updateCanvasState(_:)();
  if ((objc_msgSend(a3, sel_isFirstResponder) & 1) == 0)
  {
    id v74 = *(Class *)((char *)&v4->isa + v31);
    if (!v74)
    {
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    id v75 = v74;
    uint64_t v76 = swift_bridgeObjectRetain();
    unint64_t v77 = specialized Sequence.compactMap<A>(_:)(v76, (uint64_t)v75);

    swift_bridgeObjectRelease();
    if (v77 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v78 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v78)
    {
      id v79 = a3;
      id v80 = objc_msgSend(v79, sel_window);
      if (v80)
      {
        uint64_t v81 = v80;
        id v82 = objc_msgSend(self, sel_activeToolPickerForWindow_, v80);
        if (v82)
        {
          os_log_type_t v83 = v82;
          id v84 = objc_msgSend(v82, sel__visibilityUpdatesEnabled);
          objc_msgSend(v83, sel__setVisibilityUpdatesEnabled_, 0);
          objc_msgSend(v79, sel_becomeFirstResponder);
          uint64_t v4 = v127;
          objc_msgSend(v83, sel__setVisibilityUpdatesEnabled_, v84);

          id v79 = (uint64_t *)v83;
LABEL_63:

          goto LABEL_64;
        }
      }
      objc_msgSend(v79, sel_becomeFirstResponder);
      goto LABEL_63;
    }
  }
LABEL_64:
  double v99 = *(void **)((char *)a3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v99)
  {
    id v100 = v99;
    HandwritingReflowView.updateForNewSelection()();
  }
  Canvas.canvasSelectionDidChange()();
  uint64_t v101 = *(uint64_t *)((char *)&v4->isa + v31);
  if (!v101) {
    goto LABEL_101;
  }
  CGFloat v102 = (void *)(v101 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (!*(void *)(*v102 + 16) && !*(void *)(v102[1] + 16))
  {
    double v103 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a3) + 0x320);
LABEL_80:
    CGFloat v108 = (void *)v103();
    objc_msgSend(v108, sel__clearSelectionIfNecessary);
  }
LABEL_81:
  a3 = (uint64_t *)OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  CGFloat v109 = *(Class *)((char *)&v4->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v109)
  {
    __break(1u);
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  id v110 = v109;
  uint64_t v111 = swift_bridgeObjectRetain();
  unint64_t v112 = specialized Sequence.compactMap<A>(_:)(v111, (uint64_t)v110);

  swift_bridgeObjectRelease();
  if (v112 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v113 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v113 = *(void *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v113)
  {
    type metadata accessor for Analytics();
    swift_initStaticObject();
    uint64_t v114 = *(void **)((char *)a3 + (void)v4);
    if (v114)
    {
      id v115 = v114;
      uint64_t v116 = swift_bridgeObjectRetain();
      unint64_t v117 = specialized Sequence.compactMap<A>(_:)(v116, (uint64_t)v115);

      swift_bridgeObjectRelease();
      if (v117 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v118 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v118 = *(void *)((v117 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      Analytics.recordDidMakeSelection(type:contentType:)(0, v118 > 1);
      return;
    }
    goto LABEL_95;
  }
}

Swift::Bool __swiftcall Canvas.validDragDestination(canvasElements:isLasso:)(Swift::OpaquePointer canvasElements, Swift::Bool isLasso)
{
  uint64_t v3 = v2;
  LODWORD(v4) = isLasso;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  unint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)canvasElements._rawValue >> 62) {
    goto LABEL_22;
  }
  uint64_t v10 = *(void *)(((unint64_t)canvasElements._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_23:
    Swift::Bool result = swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v23 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
    uint64_t v24 = *(void *)&v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    if (!v24)
    {
      __break(1u);
      goto LABEL_40;
    }
    id v25 = *(id *)(v24 + OBJC_IVAR____TtC8PaperKit10ResizeView_borderView);
    objc_msgSend(v25, sel_bounds);
    objc_msgSend(v25, sel_convertRect_toCoordinateSpace_, v3);
    CGFloat v27 = v26;
    CGFloat v29 = v28;
    CGFloat v31 = v30;
    CGFloat v33 = v32;

    v54.origin.double x = v27;
    v54.origin.double y = v29;
    v54.size.double width = v31;
    v54.size.double height = v33;
    double MaxX = CGRectGetMaxX(v54);
    objc_msgSend(v3, sel_bounds);
    if (MaxX >= CGRectGetMinX(v55)
      && (v56.origin.double x = v27,
          v56.origin.double y = v29,
          v56.size.double width = v31,
          v56.size.double height = v33,
          double MinX = CGRectGetMinX(v56),
          objc_msgSend(v3, sel_bounds),
          CGRectGetMaxX(v57) >= MinX))
    {
      v58.origin.double x = v27;
      v58.origin.double y = v29;
      v58.size.double width = v31;
      v58.size.double height = v33;
      double MaxY = CGRectGetMaxY(v58);
      objc_msgSend(v3, sel_bounds);
      BOOL v36 = MaxY < CGRectGetMinY(v59);
      if ((v4 & 1) == 0)
      {
LABEL_30:
        CGAffineTransform v38 = *(void **)&v3[v23];
        if (v38)
        {
          id v39 = v38;
          uint64_t v40 = swift_bridgeObjectRetain();
          unint64_t v41 = specialized Sequence.compactMap<A>(_:)(v40, (uint64_t)v39);

          swift_bridgeObjectRelease();
          if ((v41 & 0x8000000000000000) != 0 || (v41 & 0x4000000000000000) != 0)
          {
            unint64_t v42 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v41);
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v42 = v41 & 0xFFFFFFFFFFFFFF8;
          }
          unsigned int v43 = specialized static Array<A>.== infix(_:_:)(v42, (uint64_t)canvasElements._rawValue);
          swift_release();
          return (v43 & v36 & 1) == 0;
        }
LABEL_40:
        __break(1u);
        return result;
      }
    }
    else if ((v4 & 1) == 0)
    {
      BOOL v36 = 1;
      goto LABEL_30;
    }
    return 1;
  }
  while (1)
  {
    int v46 = (int)v4;
    unint64_t v49 = (unint64_t)canvasElements._rawValue & 0xC000000000000001;
    uint64_t v11 = ((unint64_t)canvasElements._rawValue & 0xC000000000000001) != 0
        ? (void *)MEMORY[0x21054E050](0, canvasElements._rawValue)
        : *((id *)canvasElements._rawValue + 4);
    uint64_t v4 = v11;
    uint64_t v12 = (void *)MEMORY[0x263F8EED0];
    if (((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x1E0))() & 1) == 0) {
      break;
    }
    char v45 = v3;
    uint64_t v3 = 0;
    id v13 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v14 = (char *)(v10 - 1);
    unint64_t v7 = v49;
    rawValue = canvasElements._rawValue;
    uint64_t v47 = v14;
    while (1)
    {
      (*(void (**)(void))((*v12 & *v4) + 0xE8))();
      SharedTagged_9.tag.getter();
      uint64_t v15 = (*v13)(v9, v6);
      if ((v51 & 1) != 0 || v50 != 5)
      {
        uint64_t v19 = (*(void *(**)(uint64_t *__return_ptr, uint64_t))((*v12 & *v4) + 0x1A0))(v52, v15);
        (*(void (**)(uint64_t *__return_ptr, void *))((*v12 & *v4) + 0x1A8))(v53, v19);
        char v20 = static CGAffineTransform.== infix(_:_:)();

        if (v20)
        {
LABEL_19:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {
        type metadata accessor for CGPathRef(0);
        __n128 v16 = (void *)(*(uint64_t (**)(void))((*v12 & *v4) + 0x1D0))();
        uint64_t v17 = (void *)(*(uint64_t (**)(void))((*v12 & *v4) + 0x1D8))();
        _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef, type metadata accessor for CGPathRef);
        uint64_t v14 = v47;
        char v18 = static _CFObject.== infix(_:_:)();

        canvasElements._rawValue = rawValue;
        unint64_t v7 = v49;
        if (v18) {
          goto LABEL_19;
        }
      }
      if (v14 == v3)
      {
        Swift::Bool result = swift_bridgeObjectRelease();
        uint64_t v3 = v45;
        LOBYTE(v4) = v46;
        goto LABEL_24;
      }
      uint64_t v21 = v7
          ? (void *)MEMORY[0x21054E050](v3 + 1, canvasElements._rawValue)
          : *((id *)canvasElements._rawValue + (void)v3 + 5);
      uint64_t v4 = v21;
      if (__OFADD__(v3 + 1, 1)) {
        break;
      }
      ++v3;
      if (((*(uint64_t (**)(void))((*v12 & *v21) + 0x1E0))() & 1) == 0) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (!v10) {
      goto LABEL_23;
    }
  }
LABEL_18:
  swift_bridgeObjectRelease();

  return 0;
}

Swift::Void __swiftcall Canvas.hide(weakStrokes:)(Swift::OpaquePointer weakStrokes)
{
  rawValue = weakStrokes._rawValue;
  uint64_t v2 = type metadata accessor for PKDrawing();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v27 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v29 = v1;
  id v15 = Canvas.editingView.getter();
  uint64_t v17 = v16;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(ObjectType, v17);

  if (v19)
  {
    id v20 = objc_msgSend(v19, sel_drawing);

    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
    type metadata accessor for PKDrawingCoherence(0);
    if (swift_dynamicCast())
    {
      uint64_t v21 = v30;
      uint64_t v22 = &v30[OBJC_IVAR___PKDrawingCoherence_model];
      swift_beginAccess();
      uint64_t v23 = v27;
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v11, v22, v9);

      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v14, v11, v9);
      MEMORY[0x270FA5388](v24);
      *(&v26 - 2) = (uint64_t)v14;
      unint64_t v25 = specialized Sequence.compactMap<A>(_:)((void (*)(void))partial apply for closure #1 in Canvas.hide(weakStrokes:), (uint64_t)(&v26 - 4), (uint64_t)rawValue);
      Canvas.hide(strokes:)((Swift::OpaquePointer)v25);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v9);
    }
  }
}

Swift::Void __swiftcall Canvas.hide(strokes:)(Swift::OpaquePointer strokes)
{
  uint64_t v3 = type metadata accessor for PKStroke();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v64 = v3;
  uint64_t v65 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v66 = (char *)&v52 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PKDrawing();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v52 - v16;
  v19.n128_f64[0] = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v52 - v20;
  uint64_t v22 = (void *)(*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v1) + 0x320))(v19);
  if (v22)
  {
    uint64_t v60 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v61 = v22;
    uint64_t v59 = v14;
    id v23 = Canvas.editingView.getter();
    uint64_t v25 = v24;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(ObjectType, v25);

    if (v27)
    {
      id v28 = objc_msgSend(v27, sel_drawing);

      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
      CGRect v57 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      uint64_t v58 = v13 + 32;
      v57(v21, v17, v12);
      int64_t v29 = *((void *)strokes._rawValue + 2);
      uint64_t v30 = MEMORY[0x263F8EE78];
      if (v29)
      {
        uint64_t v53 = v21;
        CGRect v54 = v11;
        uint64_t v55 = v13;
        uint64_t v56 = v12;
        uint64_t v67 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
        uint64_t v31 = v64;
        double v32 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
        unint64_t v62 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
        uint64_t v63 = v32;
        CGFloat v33 = (char *)strokes._rawValue + v62;
        uint64_t v34 = *(void *)(v65 + 72);
        id v35 = (void (**)(char *, uint64_t))(v65 + 8);
        v65 += 16;
        BOOL v36 = (void (**)(unint64_t, char *, uint64_t))(v65 + 16);
        while (1)
        {
          v63(v6, v33, v31);
          isdouble a = PKStroke._bridgeToObjectiveC()().super.isa;
          id v38 = [(objc_class *)isa copyForMutation];

          if (!v38) {
            break;
          }
          objc_msgSend(v38, sel__setHidden_, 1);
          id v39 = v38;
          static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

          (*v35)(v6, v31);
          uint64_t v30 = v67;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1);
            uint64_t v30 = v67;
          }
          unint64_t v41 = *(void *)(v30 + 16);
          unint64_t v40 = *(void *)(v30 + 24);
          if (v41 >= v40 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
            uint64_t v30 = v67;
          }
          *(void *)(v30 + 16) = v41 + 1;
          unint64_t v42 = v30 + v62 + v41 * v34;
          uint64_t v31 = v64;
          (*v36)(v42, v66, v64);
          uint64_t v67 = v30;
          v33 += v34;
          if (!--v29)
          {
            uint64_t v13 = v55;
            uint64_t v12 = v56;
            uint64_t v21 = v53;
            uint64_t v11 = v54;
            goto LABEL_12;
          }
        }
        __break(1u);
      }
      else
      {
LABEL_12:
        uint64_t v43 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v11, 1, 1, v43);
        uint64_t v44 = v60;
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v60, v21, v12);
        type metadata accessor for MainActor();
        id v45 = v61;
        uint64_t v46 = static MainActor.shared.getter();
        uint64_t v47 = v21;
        unint64_t v48 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
        unint64_t v49 = (char *)swift_allocObject();
        uint64_t v50 = MEMORY[0x263F8F500];
        *((void *)v49 + 2) = v46;
        *((void *)v49 + 3) = v50;
        *((void *)v49 + 4) = v45;
        *((void *)v49 + 5) = v30;
        v57(&v49[v48], v44, v12);
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #2 in Canvas.hide(strokes:), (uint64_t)v49);

        swift_release();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v47, v12);
      }
    }
    else
    {
      id v51 = v61;
    }
  }
}

Swift::Bool __swiftcall Canvas.shouldCancelForAutoRefineCompletion()()
{
  id v0 = Canvas.editingView.getter();
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);

  if (!v4) {
    return 1;
  }
  id v5 = objc_msgSend(v4, sel_recognitionController);
  unsigned int v6 = objc_msgSend(v5, sel_respondsToSelector_, sel_shouldCancelForAutoRefineCompletion);

  if (v6)
  {
    id v7 = objc_msgSend(v4, sel_recognitionController);
    unsigned __int8 v8 = objc_msgSend(v7, sel_shouldCancelForAutoRefineCompletion);

    if (v8) {
      return 1;
    }
  }
  else
  {
  }
  return 0;
}

Swift::Void __swiftcall Canvas.startCheckingForOldEraserStrokes()()
{
  uint64_t v4 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v5 = *(void *)((char *)v1 + direct field offset for Canvas.eraserCheckingIndex);
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  id v0 = v1;
  *(void *)((char *)v1 + direct field offset for Canvas.eraserCheckingIndex) = v7;
  uint64_t v3 = &unk_26ACC4000;
  if (*(void *)((char *)v1 + direct field offset for Canvas.removeOldEraserStrokesTimer)) {
    return;
  }
  uint64_t v2 = v4;
  if (one-time initialization token for logger != -1) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_20C2D7000, v9, v10, "Start checking for old eraser strokes", v11, 2u);
    MEMORY[0x210550270](v11, -1, -1);
  }

  uint64_t v12 = self;
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v2 + 2008);
  *(void *)(v14 + 32) = *(void *)(v2 + 2024);
  *(void *)(v14 + 40) = v13;
  v19[4] = partial apply for closure #1 in Canvas.startCheckingForOldEraserStrokes();
  v19[5] = v14;
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  v19[3] = &block_descriptor_244;
  uint64_t v15 = _Block_copy(v19);
  swift_release();
  id v16 = objc_msgSend(v12, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v15, 30.0);
  _Block_release(v15);
  uint64_t v17 = v3[285];
  uint64_t v18 = *(void **)((char *)v0 + v17);
  *(void *)((char *)v0 + v17) = v16;
}

uint64_t Canvas.updateMultipeer<A>(_:)()
{
  if (*(void *)(v0 + direct field offset for Canvas.multipeerConnection))
  {
    swift_retain();
    CRMulticastSyncManager.merge<A>(_:sendDelta:)();
    return swift_release();
  }
  return result;
}

uint64_t Canvas.mergeToSelf<A>(_:from:)()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  id v2 = v1;
  char v3 = Capsule.merge<A>(_:)();
  swift_endAccess();

  return v3 & 1;
}

Swift::Void __swiftcall Canvas.mergeToCanvasElements()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x7D8);
  uint64_t v3 = *(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x7E0) + 16);
  uint64_t v70 = type metadata accessor for Capsule();
  uint64_t v4 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  BOOL v6 = (char *)&v61 - v5;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v7 - 8);
  uint64_t v65 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v63 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  uint64_t v11 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v11)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v12 = *(void *)(v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  MEMORY[0x270FA5388](v8);
  *(&v61 - 2) = (uint64_t)v1;
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized _NativeSet.filter(_:)((uint64_t)partial apply for closure #1 in Canvas.mergeToCanvasElements(), (uint64_t)(&v61 - 4), v12);
  uint64_t v61 = 0;
  uint64_t v14 = *(char **)&v1[v10];
  if (!v14)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v15 = v13;
  uint64_t v66 = v6;
  uint64_t v67 = v3;
  uint64_t v68 = v4;
  uint64_t v69 = v2;
  uint64_t v16 = *(void *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  uint64_t v17 = *(void *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  BOOL v6 = *(char **)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  int v18 = v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  __n128 v19 = v14;
  CanvasElementResizeView.selection.setter(v15, v17, (uint64_t)v6, v18);

  uint64_t v62 = v10;
  uint64_t v20 = *(void *)&v1[v10];
  if (!v20)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v21 = v1;
  uint64_t v22 = v20 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  uint64_t v23 = *(void *)v22;
  uint64_t v24 = *(void *)(v22 + 8);
  uint64_t v25 = *(char **)(v22 + 16);
  char v26 = *(unsigned char *)(v22 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (specialized static Set.== infix(_:_:)(v16, v23))
  {
    char v27 = specialized static Set.== infix(_:_:)(v17, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v28 = v21;
    if (v27)
    {
      if (v18)
      {
        if (v26)
        {
LABEL_38:
          uint64_t v58 = *(void **)&v28[direct field offset for Canvas.paperView];
          uint64_t v59 = (uint64_t)v66;
          CanvasElementView.canvasElement.getter((uint64_t)v66);
          id v60 = v58;
          CanvasElementView.merge<A>(_:)();

          (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v59, v70);
          objc_msgSend(v28, sel_setNeedsLayout);
          return;
        }
      }
      else
      {
        if (v6 == v25) {
          char v52 = v26;
        }
        else {
          char v52 = 1;
        }
        if ((v52 & 1) == 0) {
          goto LABEL_38;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v28 = v1;
  }
  if (one-time initialization token for miniMenuLogger != -1) {
    swift_once();
  }
  uint64_t v29 = v65;
  uint64_t v30 = __swift_project_value_buffer(v65, (uint64_t)miniMenuLogger);
  double v32 = v63;
  uint64_t v31 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v30, v29);
  BOOL v6 = v28;
  CGFloat v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v36 = v62;
  if (v35)
  {
    char v37 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v37 = 134217984;
    uint64_t v38 = *(void *)&v28[v36];
    if (!v38)
    {
LABEL_44:

      __break(1u);
      goto LABEL_45;
    }
    id v39 = v37;
    uint64_t v71 = *(void *)(*(void *)(v38 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_20C2D7000, v33, v34, "Changing selection to have %ld elements", v39, 0xCu);
    MEMORY[0x210550270](v39, -1, -1);
  }
  else
  {
  }
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v32, v29);
  MEMORY[0x270FA5388](v40);
  *(&v61 - 2) = (uint64_t)v6;
  AnyCanvas.updateCanvasState(_:)();
  if (objc_msgSend(v6, sel_isFirstResponder, v61)) {
    goto LABEL_32;
  }
  unint64_t v41 = *(void **)&v28[v36];
  if (v41)
  {
    id v42 = v41;
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v44 = specialized Sequence.compactMap<A>(_:)(v43, (uint64_t)v42);

    swift_bridgeObjectRelease();
    if (v44 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v45 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v45)
    {
LABEL_32:
      uint64_t v53 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
      if (v53)
      {
        id v54 = v53;
        HandwritingReflowView.updateForNewSelection()();
      }
      Canvas.canvasSelectionDidChange()();
      uint64_t v55 = *(void *)&v28[v36];
      if (v55)
      {
        uint64_t v56 = (void *)(v55 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (!*(void *)(*v56 + 16) && !*(void *)(v56[1] + 16))
        {
          CGRect v57 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)v6) + 0x320))();
          objc_msgSend(v57, sel__clearSelectionIfNecessary);
        }
        goto LABEL_38;
      }
      goto LABEL_43;
    }
    uint64_t v46 = v6;
    id v47 = objc_msgSend(v46, sel_window);
    if (v47)
    {
      unint64_t v48 = v47;
      id v49 = objc_msgSend(self, sel_activeToolPickerForWindow_, v47);
      if (v49)
      {
        uint64_t v50 = v49;
        id v51 = objc_msgSend(v49, sel__visibilityUpdatesEnabled);
        objc_msgSend(v50, sel__setVisibilityUpdatesEnabled_, 0);
        objc_msgSend(v46, sel_becomeFirstResponder);
        objc_msgSend(v50, sel__setVisibilityUpdatesEnabled_, v51);

        uint64_t v46 = (char *)v50;
LABEL_31:

        goto LABEL_32;
      }
    }
    objc_msgSend(v46, sel_becomeFirstResponder);
    goto LABEL_31;
  }
LABEL_45:
  __break(1u);
}

Swift::Void __swiftcall Canvas.mergeToFilesAndMultipeer()()
{
  uint64_t v1 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v2 = v1[251];
  uint64_t v3 = v1[252];
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v26 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v30 = (uint64_t)&v25 - v5;
  uint64_t v31 = v6;
  uint64_t v29 = type metadata accessor for AnySubscriber();
  uint64_t v7 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = (void *)((char *)v0 + direct field offset for Canvas.subscriptions);
  swift_beginAccess();
  uint64_t v11 = *v10;
  double v32 = v0;
  uint64_t v12 = v1[253];
  swift_bridgeObjectRetain();
  uint64_t v33 = v2;
  uint64_t v34 = v2;
  uint64_t v35 = v3;
  uint64_t v36 = v12;
  uint64_t v37 = v3;
  uint64_t v13 = type metadata accessor for Canvas.PaperViewCanvasSubscription();
  if (!MEMORY[0x21054D3F0](v11, v13)) {
    goto LABEL_13;
  }
  char v27 = (void (**)(uint64_t, uint64_t))(v26 + 8);
  id v28 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v14 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v15 = 4;
  uint64_t v16 = v29;
  uint64_t v17 = v30;
  while (1)
  {
    uint64_t v18 = v15 - 4;
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!IsNativeType) {
      break;
    }
    uint64_t v20 = *(char **)(v11 + 8 * v15);
    swift_retain();
    uint64_t v21 = v15 - 3;
    if (__OFADD__(v18, 1)) {
      goto LABEL_12;
    }
LABEL_7:
    Swift::Bool v22 = AnyCanvas.isLiveEditing()();
    uint64_t v23 = *(void *)v20;
    if (!v22 || v20[*(void *)(v23 + 136)] == 1)
    {
      (*v28)(v9, &v20[*(void *)(v23 + 120)], v16);
      CanvasElementView.canvasElement.getter(v17);
      dispatch thunk of AnySubscriberBase.receive(_:)();
      swift_release();
      (*v27)(v17, v31);
      (*v14)(v9, v16);
    }
    else
    {
      swift_release();
    }
    ++v15;
    if (v21 == MEMORY[0x21054D3F0](v11, v13)) {
      goto LABEL_13;
    }
  }
  uint64_t v20 = (char *)_ArrayBuffer._getElementSlowPath(_:)();
  uint64_t v21 = v15 - 3;
  if (!__OFADD__(v18, 1)) {
    goto LABEL_7;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  swift_bridgeObjectRelease();
  if (*(void *)((char *)v32 + direct field offset for Canvas.multipeerConnection))
  {
    uint64_t v24 = v30;
    CanvasElementView.canvasElement.getter(v30);
    swift_retain();
    CRMulticastSyncManager.sync(_:sendDelta:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v31);
  }
}

Swift::Void __swiftcall Canvas.mergeToXPC()()
{
  uint64_t v1 = type metadata accessor for Capsule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v6 - v3;
  uint64_t v5 = (void *)(v0 + direct field offset for Canvas.xpcMulticast);
  swift_beginAccess();
  if (*v5)
  {
    CanvasElementView.canvasElement.getter((uint64_t)v4);
    swift_retain();
    CRMulticastSyncManager.sync(_:sendDelta:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t Canvas.mergeUndoable<A>(_:)()
{
  return Canvas.undoable(newChange:persistSelection:action:)(0, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.mergeUndoable<A>(_:));
}

Swift::Void __swiftcall Canvas.updateDrawingTiles()()
{
  uint64_t v1 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320);
  uint64_t v2 = (void *)v1();
  objc_msgSend(v2, sel__layoutSubviews);

  uint64_t v3 = (void *)v1();
  if (v3)
  {
    id v4 = v3;
    objc_msgSend(v3, sel_updateExistingTiles_, 1);
  }
}

Swift::Void __swiftcall Canvas.transformStrokes(_:)(Swift::OpaquePointer a1)
{
}

id Canvas.hitMiniMenuForCanvasElementView(_:location:)()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  id result = objc_msgSend(*(id *)(v0 + direct field offset for Canvas.paperView), sel_convertPoint_toView_, *(void *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView));
  uint64_t v5 = *(void **)(v0 + v1);
  if (v5)
  {
    unint64_t v6 = v3;
    unint64_t v7 = v4;
    id v8 = v5;
    v12.value.super.isdouble a = 0;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v9, (CGPoint)__PAIR128__(v7, v6), v12);
    uint64_t v11 = v10;

    return (id)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Canvas.hitChromeForCanvasElementView(_:location:isStylus:)(double a1, double a2, uint64_t a3, int a4)
{
  return specialized Canvas.hitChromeForCanvasElementView(_:location:isStylus:)(a4, a1, a2);
}

id Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  if (!*(void *)(a1 + 16) && !*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v14 = a1;
  uint64_t v15 = (char *)&v27 - v13;
  uint64_t v31 = (char *)&v27 - v13;
  Canvas.createNewPaper(from:)(v14, a2, a3, a4 & 1, (uint64_t)&v27 - v13);
  id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088E0]), sel_init);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  ObjCClassFromMetadatdouble a = swift_getObjCClassFromMetadata();
  double v32 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v32(v11, v15, v8);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  uint64_t v29 = v17 | 7;
  uint64_t v19 = swift_allocObject();
  id v28 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v28(v19 + v18, v11, v8);
  uint64_t v37 = partial apply for closure #1 in Canvas.itemProvider(for:);
  uint64_t v38 = v19;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v34 = 1107296256;
  char v27 = &v35;
  uint64_t v35 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderWriting?, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  uint64_t v36 = &block_descriptor_223_0;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_release();
  id v21 = v30;
  objc_msgSend(v30, sel_registerObjectOfClass_visibility_loadHandler_, ObjCClassFromMetadata, 0, v20);
  _Block_release(v20);
  Swift::Bool v22 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  uint64_t v23 = v31;
  v32(v11, v31, v8);
  uint64_t v24 = swift_allocObject();
  v28(v24 + v18, v11, v8);
  uint64_t v37 = partial apply for closure #2 in Canvas.itemProvider(for:);
  uint64_t v38 = v24;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v34 = 1107296256;
  uint64_t v35 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @unowned Bool, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  uint64_t v36 = &block_descriptor_229;
  uint64_t v25 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v21, sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_, v22, 0, 0, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v23, v8);
  return v21;
}

uint64_t Canvas.pasteboardRepresentations(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v74 = a4;
  uint64_t v75 = a3;
  uint64_t v7 = *MEMORY[0x263F8EED0] & *v4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  unint64_t v77 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v65 - v15;
  uint64_t v17 = *(void *)(v7 + 2008);
  uint64_t v18 = *(void *)(v7 + 2016);
  uint64_t v76 = v17;
  uint64_t v19 = type metadata accessor for Capsule();
  MEMORY[0x270FA5388](v19);
  uint64_t v81 = (uint64_t)&v65 - v21;
  if (!*(void *)(a1 + 16) && !*(void *)(a2 + 16)) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v69 = v18;
  uint64_t v70 = v11;
  uint64_t v71 = v9;
  uint64_t v72 = v8;
  uint64_t v78 = a2;
  uint64_t v73 = v20;
  uint64_t v22 = MEMORY[0x263F8EE78];
  unint64_t v83 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v23 = v4;
  uint64_t v24 = swift_bridgeObjectRetain();
  unint64_t v25 = specialized Sequence.compactMap<A>(_:)(v24, v23);
  swift_bridgeObjectRelease();
  id v79 = v23;

  unint64_t v26 = v25 >> 62;
  uint64_t v80 = a1;
  if (v25 >> 62) {
    goto LABEL_51;
  }
  uint64_t v27 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v27 == 1) {
    goto LABEL_5;
  }
  do
  {
    while (1)
    {
      do
      {
        do
        {
          uint64_t v68 = v16;
          if (v26)
          {
            swift_bridgeObjectRetain();
            uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
          }
          else
          {
            uint64_t v28 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          uint64_t v67 = v19;
          if (!v28)
          {
LABEL_17:
            swift_bridgeObjectRelease();
            if (v27)
            {
              *(void *)&long long v86 = v22;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 & ~(v27 >> 63), 0);
              if (v27 < 0)
              {
                __break(1u);
LABEL_54:
                uint64_t v46 = (void *)MEMORY[0x21054E050](0, v25);
                goto LABEL_40;
              }
              uint64_t v66 = v12;
              uint64_t v31 = 0;
              uint64_t v32 = v86;
              do
              {
                if ((v25 & 0xC000000000000001) != 0) {
                  uint64_t v33 = (void *)MEMORY[0x21054E050](v31, v25);
                }
                else {
                  uint64_t v33 = *(id *)(v25 + 8 * v31 + 32);
                }
                uint64_t v34 = v33;
                uint64_t v35 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v33) + 0x340))();

                *(void *)&long long v86 = v32;
                unint64_t v37 = *(void *)(v32 + 16);
                unint64_t v36 = *(void *)(v32 + 24);
                if (v37 >= v36 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
                  uint64_t v32 = v86;
                }
                ++v31;
                *(void *)(v32 + 16) = v37 + 1;
                *(void *)(v32 + 8 * v37 + 32) = v35;
              }
              while (v27 != v31);
              swift_bridgeObjectRelease();
              uint64_t v12 = v66;
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v32 = MEMORY[0x263F8EE78];
            }
            unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
            *(void *)&long long v86 = v39;
            uint64_t v40 = *(void *)(v32 + 16);
            uint64_t v19 = v67;
            uint64_t v41 = v78;
            if (v40)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v42 = 0;
              do
              {
                uint64_t v43 = *(void *)(v32 + 8 * v42++ + 32);
                *(void *)&v85[0] = v43;
                closure #3 in Canvas.pasteboardRepresentations(_:)((uint64_t *)&v86, (uint64_t *)v85, &v84);
                swift_bridgeObjectRelease();
                uint64_t v44 = v84;
                *(void *)&long long v86 = v84;
              }
              while (v40 != v42);
              uint64_t v38 = v12;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v38 = v12;
              uint64_t v44 = v39;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v83 = v44;
            uint64_t v16 = v68;
            goto LABEL_43;
          }
          unint64_t v26 = v25 & 0xC000000000000001;
          uint64_t v19 = 4;
          while (1)
          {
            uint64_t v29 = v26 ? (char *)MEMORY[0x21054E050](v19 - 4, v25) : (char *)*(id *)(v25 + 8 * v19);
            uint64_t v16 = v29;
            uint64_t v30 = v19 - 3;
            if (__OFADD__(v19 - 4, 1)) {
              break;
            }
            type metadata accessor for ShapeView();
            if (!swift_dynamicCastClass())
            {
              uint64_t v38 = v12;
              swift_bridgeObjectRelease_n();

              uint64_t v16 = v68;
              uint64_t v19 = v67;
              goto LABEL_42;
            }

            ++v19;
            if (v30 == v28) {
              goto LABEL_17;
            }
          }
          __break(1u);
LABEL_51:
          swift_bridgeObjectRetain();
          uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        while (v27 != 1);
LABEL_5:
        ;
      }
      while (*(void *)(v78 + 16));
      if (v26) {
        break;
      }
      uint64_t v45 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v45) {
        goto LABEL_37;
      }
LABEL_49:
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_49;
    }
LABEL_37:
    if ((v25 & 0xC000000000000001) != 0) {
      goto LABEL_54;
    }
    if (!*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    uint64_t v46 = *(id *)(v25 + 32);
LABEL_40:
    id v47 = v46;
    uint64_t v48 = swift_bridgeObjectRelease();
    uint64_t v49 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v47) + 0x340))(v48);
  }
  while (!v49);
  uint64_t v38 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v83 = v49;
LABEL_42:
  uint64_t v41 = v78;
LABEL_43:
  Canvas.createSubCanvasElement(from:)(v80, v41, v75, v74 & 1, v81);
  uint64_t v50 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v51 = v77;
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  char v52 = v70;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v52, v72);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v53 = *(void (**)(char *, uint64_t))(v38 + 8);
  v53(v51, v82);
  type metadata accessor for CRDataStoreBundle();
  type metadata accessor for CRContext();
  uint64_t v88 = 0;
  long long v86 = 0u;
  long long v87 = 0u;
  id v54 = (void *)MEMORY[0x21054C990](0, &v86);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v86, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  static CRDataStoreBundle.writePaper(_:model:url:)();

  uint64_t v55 = URL.dataRepresentation.getter();
  *((void *)&v87 + 1) = MEMORY[0x263F06F78];
  *(void *)&long long v86 = v55;
  *((void *)&v86 + 1) = v56;
  outlined init with take of Any(&v86, v85);
  uint64_t v57 = v83;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v84 = v57;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0x6C7070612E6D6F63, 0xEF72657061702E65, isUniquelyReferenced_nonNull_native);
  uint64_t v59 = v84;
  swift_bridgeObjectRelease();
  unint64_t v60 = Canvas.pasteboardReflowRepresentations(_:)(v80, v41);
  if (v60)
  {
    uint64_t v61 = v60;
    char v62 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v86 = v59;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v61, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v62, (uint64_t)&v86);
    uint64_t v59 = v86;
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_20C832C20;
  *(void *)(v63 + 32) = v59;
  v53(v16, v82);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v81, v19);
  return v63;
}

unint64_t Canvas.pasteboardReflowRepresentations(_:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16) && !*(void *)(a2 + 16)) {
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v5 && *(void *)(v5 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox))
  {
    swift_retain();
    Swift::Int v6 = ReflowLayoutManager.reflowWords(for:)(a2);
    swift_release();
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    specialized static ReflowEnum.typeArray(_:)(v6);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReflowEnum]);
    lazy protocol witness table accessor for type [ReflowEnum] and conformance <A> [A](&lazy protocol witness table cache variable for type [ReflowEnum] and conformance <A> [A], &demangling cache variable for type metadata for [ReflowEnum], (void (*)(void))lazy protocol witness table accessor for type ReflowEnum and conformance ReflowEnum);
    uint64_t v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    uint64_t v14 = MEMORY[0x263F06F78];
    *(void *)&long long v13 = v7;
    *((void *)&v13 + 1) = v9;
    outlined init with take of Any(&v13, v12);
    outlined copy of Data._Representation(v7, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD00000000000001DLL, 0x800000020C85DCA0, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v7, v9);
    swift_release();
  }
  return v4;
}

uint64_t Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v9 + 50) = a8;
  *(void *)(v9 + 160) = a7;
  *(void *)(v9 + 168) = v8;
  *(void *)(v9 + 144) = a5;
  *(void *)(v9 + 152) = a6;
  *(unsigned char *)(v9 + 49) = a4;
  *(void *)(v9 + 128) = a1;
  *(void *)(v9 + 136) = a3;
  type metadata accessor for Paper();
  *(void *)(v9 + 176) = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  *(void *)(v9 + 184) = v10;
  *(void *)(v9 + 192) = *(void *)(v10 - 8);
  *(void *)(v9 + 200) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v9 + 208) = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 216) = v12;
  *(void *)(v9 + 224) = v11;
  return MEMORY[0x270FA2498](Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:), v12, v11);
}

uint64_t Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:)()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  double v3 = Canvas.canvasElementBounds(_:)(*(void *)(v0 + 128));
  CGFloat v5 = v4;
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  *(void *)(v0 + 120) = v2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>, (uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  double v10 = Canvas.strokeBounds<A>(_:)();
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  swift_bridgeObjectRelease();
  v50.origin.CGFloat x = v3;
  v50.origin.CGFloat y = v5;
  v50.size.CGFloat width = v7;
  v50.size.CGFloat height = v9;
  v52.origin.CGFloat x = v10;
  v52.origin.CGFloat y = v12;
  v52.size.CGFloat width = v14;
  v52.size.CGFloat height = v16;
  CGRect v51 = CGRectUnion(v50, v52);
  CGFloat x = v51.origin.x;
  CGFloat y = v51.origin.y;
  CGFloat width = v51.size.width;
  CGFloat height = v51.size.height;
  *(CGRect *)(v0 + 232) = v51;
  id v21 = objc_msgSend(v1, sel_traitCollection);
  id v22 = objc_msgSend(v21, sel_userInterfaceStyle);
  *(void *)(v0 + 264) = v22;

  if (*(void *)(v2 + 16))
  {
    BOOL v23 = v22 == (id)2;
    Canvas.createNewPaper(from:)(*(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(unsigned char *)(v0 + 50) & 1, *(void *)(v0 + 200));
    id v24 = objc_msgSend(self, sel_mainScreen);
    objc_msgSend(v24, sel_scale);
    uint64_t v26 = v25;

    type metadata accessor for ImageRenderer();
    uint64_t v27 = (CGFloat *)swift_allocObject();
    v27[2] = width;
    v27[3] = height;
    *((void *)v27 + 4) = v26;
    uint64_t v28 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v27);
    *(void *)(v0 + 272) = v28;
    swift_beginAccess();
    *(unsigned char *)(v28 + 72) = 0;
    _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Capsule<>.root.getter();
    *(CGFloat *)(v0 + 16) = x;
    *(CGFloat *)(v0 + 24) = y;
    *(CGFloat *)(v0 + 32) = width;
    *(CGFloat *)(v0 + 40) = height;
    *(unsigned char *)(v0 + 48) = 0;
    uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                        + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v29;
    *uint64_t v29 = v0;
    v29[1] = Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:);
    uint64_t v30 = *(void *)(v0 + 200);
    uint64_t v31 = *(void *)(v0 + 176);
    uint64_t v32 = v0 + 16;
    BOOL v33 = v23;
LABEL_5:
    return v48(v31, v30, v32, v33, 0);
  }
  *(void *)(v0 + 296) = 0;
  uint64_t v34 = *(void *)(v0 + 128);
  if (*(void *)(v34 + 16))
  {
    uint64_t v35 = *(void *)(v0 + 264);
    uint64_t v37 = *(void *)(v0 + 248);
    uint64_t v36 = *(void *)(v0 + 256);
    uint64_t v39 = *(void *)(v0 + 232);
    uint64_t v38 = *(void *)(v0 + 240);
    Canvas.createNewPaper(from:)(v34, *(void *)(v0 + 152), *(void *)(v0 + 136), *(unsigned char *)(v0 + 49) & 1, *(void *)(v0 + 200));
    id v40 = objc_msgSend(self, sel_mainScreen);
    objc_msgSend(v40, sel_scale);
    uint64_t v42 = v41;

    type metadata accessor for ImageRenderer();
    uint64_t v43 = (void *)swift_allocObject();
    _OWORD v43[2] = v37;
    v43[3] = v36;
    v43[4] = v42;
    *(void *)(v0 + 304) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v43);
    _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Capsule<>.root.getter();
    *(void *)(v0 + 56) = v39;
    *(void *)(v0 + 64) = v38;
    *(void *)(v0 + 72) = v37;
    *(void *)(v0 + 80) = v36;
    *(unsigned char *)(v0 + 88) = 0;
    uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                        + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
    uint64_t v44 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v44;
    void *v44 = v0;
    v44[1] = Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:);
    BOOL v33 = v35 == 2;
    uint64_t v30 = *(void *)(v0 + 200);
    uint64_t v31 = *(void *)(v0 + 176);
    uint64_t v32 = v0 + 56;
    goto LABEL_5;
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v46 = *(uint64_t (**)(void, uint64_t))(v0 + 8);
  uint64_t v47 = *(void *)(v0 + 296);
  return v46(0, v47);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v18)(void, uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, char, char);
  uint64_t v21;

  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v1 = *(void *)(v0 + 200);
  double v3 = *(void *)(v0 + 184);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(void *)(v0 + 296) = *(void *)(v0 + 288);
  double v4 = *(void *)(v0 + 128);
  if (*(void *)(v4 + 16))
  {
    CGFloat v5 = *(void *)(v0 + 264);
    CGFloat v7 = *(void *)(v0 + 248);
    double v6 = *(void *)(v0 + 256);
    CGFloat v9 = *(void *)(v0 + 232);
    double v8 = *(void *)(v0 + 240);
    Canvas.createNewPaper(from:)(v4, *(void *)(v0 + 152), *(void *)(v0 + 136), *(unsigned char *)(v0 + 49) & 1, *(void *)(v0 + 200));
    double v10 = objc_msgSend(self, sel_mainScreen);
    objc_msgSend(v10, sel_scale);
    CGFloat v12 = v11;

    type metadata accessor for ImageRenderer();
    double v13 = (void *)swift_allocObject();
    v13[2] = v7;
    v13[3] = v6;
    v13[4] = v12;
    *(void *)(v0 + 304) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v13);
    _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    Capsule<>.root.getter();
    *(void *)(v0 + 56) = v9;
    *(void *)(v0 + 64) = v8;
    *(void *)(v0 + 72) = v7;
    *(void *)(v0 + 80) = v6;
    *(unsigned char *)(v0 + 88) = 0;
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                        + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
    CGFloat v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v14;
    *CGFloat v14 = v0;
    v14[1] = Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:);
    double v15 = *(void *)(v0 + 200);
    CGFloat v16 = *(void *)(v0 + 176);
    return v20(v16, v15, v0 + 56, v5 == 2, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void, uint64_t))(v0 + 8);
    uint64_t v19 = *(void *)(v0 + 296);
    return v18(0, v19);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[23];
  double v3 = v0[24];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  double v4 = v0[40];
  swift_task_dealloc();
  swift_task_dealloc();
  CGFloat v5 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  double v6 = v0[37];
  return v5(v4, v6);
}

uint64_t Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 176);
  *(void *)(*v1 + 288) = a1;
  swift_task_dealloc();
  _s8PaperKit5ImageVWOhTm_1(v3, (uint64_t (*)(void))type metadata accessor for Paper);
  uint64_t v4 = *(void *)(v2 + 224);
  uint64_t v5 = *(void *)(v2 + 216);
  return MEMORY[0x270FA2498](Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:), v5, v4);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 176);
  *(void *)(*v1 + 320) = a1;
  swift_task_dealloc();
  _s8PaperKit5ImageVWOhTm_1(v3, (uint64_t (*)(void))type metadata accessor for Paper);
  uint64_t v4 = *(void *)(v2 + 224);
  uint64_t v5 = *(void *)(v2 + 216);
  return MEMORY[0x270FA2498](Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:), v5, v4);
}

uint64_t Canvas.createNewPaper(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v51 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  CGRect v50 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRKeyPath();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v54 = v10;
  uint64_t v55 = v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v43 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v52);
  double v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v19 = type metadata accessor for Paper();
  MEMORY[0x270FA5388](v19);
  id v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = v5;
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v53 = specialized Sequence.compactMap<A>(_:)(v23, v22);
  uint64_t v45 = 0;
  uint64_t v46 = a1;
  swift_bridgeObjectRelease();
  uint64_t v44 = v22;

  type metadata accessor for CGRect(0);
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v56 = 0u;
  long long v57 = 0u;
  CRRegister.init(wrappedValue:)();
  long long v56 = 0u;
  long long v57 = 0u;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v56 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v18, 1, 1, v24);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v18, (uint64_t)v15, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(void *)&long long v56 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type [ReflowEnum] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color and conformance Color);
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v56 = 0;
  *((void *)&v56 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v56 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  CROrderedSet.init()();
  *(void *)&v21[*(int *)(v19 + 48)] = MEMORY[0x263F8EE80];
  static CRKeyPath.unique.getter();
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  unint64_t v25 = v53;
  Capsule<>.init(_:id:)();
  if (!(v25 >> 62))
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v26) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v29 = MEMORY[0x263F8EE78];
LABEL_14:
    uint64_t v37 = specialized Set.init<A>(_:)(v29);
    uint64_t v38 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v38);
    *(&v42 - 6) = (uint64_t)v44;
    *(&v42 - 5) = v37;
    uint64_t v39 = v47;
    *(&v42 - 4) = v46;
    *(&v42 - 3) = v39;
    *(&v42 - 2) = v48;
    *((unsigned char *)&v42 - 8) = v49 & 1;
    Capsule.callAsFunction<A>(_:)();
    swift_bridgeObjectRelease();
    id v40 = v50;
    Capsule.copy()();
    uint64_t v41 = v51;
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(a5, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(a5, v40, v8);
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v26) {
    goto LABEL_13;
  }
LABEL_3:
  *(void *)&long long v56 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26 & ~(v26 >> 63), 0);
  if ((v26 & 0x8000000000000000) == 0)
  {
    uint64_t v42 = v8;
    uint64_t v52 = a5;
    uint64_t v28 = 0;
    uint64_t v29 = v56;
    unint64_t v30 = v25 & 0xC000000000000001;
    unint64_t v31 = v25;
    uint64_t v32 = v43;
    do
    {
      if (v30) {
        BOOL v33 = (void *)MEMORY[0x21054E050](v28, v25);
      }
      else {
        BOOL v33 = *(id *)(v25 + 8 * v28 + 32);
      }
      uint64_t v34 = v33;
      (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v33) + 0xE0))();

      *(void *)&long long v56 = v29;
      unint64_t v36 = *(void *)(v29 + 16);
      unint64_t v35 = *(void *)(v29 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        uint64_t v29 = v56;
      }
      ++v28;
      *(void *)(v29 + 16) = v36 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v55 + 32))(v29+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v36, v32, v54);
      unint64_t v25 = v31;
    }
    while (v26 != v28);
    swift_bridgeObjectRelease();
    a5 = v52;
    uint64_t v8 = v42;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

double Canvas.canvasElementBounds(_:)(uint64_t a1)
{
  uint64_t v1 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, char *))partial apply for closure #1 in Canvas.canvasElementBounds(_:), (uint64_t)&v9, a1);
  double x = *MEMORY[0x263F001A0];
  CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v6 = *(void *)(v1 + 16);
  if (v6)
  {
    uint64_t v7 = v1 + 56;
    do
    {
      v10.origin.double x = x;
      v10.origin.CGFloat y = y;
      v10.size.CGFloat width = width;
      v10.size.CGFloat height = height;
      CGRect v11 = CGRectUnion(v10, *(CGRect *)(v7 - 24));
      double x = v11.origin.x;
      CGFloat y = v11.origin.y;
      CGFloat width = v11.size.width;
      CGFloat height = v11.size.height;
      v7 += 32;
      --v6;
    }
    while (v6);
  }
  swift_bridgeObjectRelease();
  return x;
}

UIImage_optional __swiftcall Canvas.imageOf(canvasElementViews:in:)(Swift::OpaquePointer canvasElementViews, __C::CGRect_optional *in)
{
  uint64_t v3 = v2;
  unint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized Set.init<A>(_:)(v5);
  swift_bridgeObjectRelease();
  id v7 = Canvas.editingView.getter();
  uint64_t v9 = v8;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(ObjectType, v9);

  unint64_t v12 = specialized _ArrayProtocol.filter(_:)(v11, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12 >> 62)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v13 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v13 = v12;
  }
  swift_bridgeObjectRelease();
  id v40 = 0;
  uint64_t v14 = outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)in, (uint64_t)v41, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  if (v42)
  {
    double v15 = MEMORY[0x270FA5388](v14);
    v36[2] = v3;
    double v19 = specialized Sequence.reduce<A>(_:_:)((void (*)(void *__return_ptr, double *, id *))partial apply for closure #2 in Canvas.imageOf(canvasElementViews:in:), v15, v16, v17, v18, (uint64_t)v36, v13);
    double v21 = v20;
    double v23 = v22;
    *(double *)&long long v38 = v19;
    *((void *)&v38 + 1) = v24;
    v39[0] = v20;
    v39[1] = v22;
  }
  else
  {
    long long v38 = v41[0];
    *(_OWORD *)uint64_t v39 = v41[1];
    unint64_t v25 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0x320))(v14);
    id v26 = objc_msgSend(v25, sel_selectionView);

    id v40 = v26;
    double v23 = v39[1];
    double v21 = v39[0];
  }
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827A0]), sel_initWithSize_, v21, v23);
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = &v40;
  v28[3] = &v38;
  v28[4] = v13;
  v28[5] = v3;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for closure #3 in Canvas.imageOf(canvasElementViews:in:);
  *(void *)(v29 + 24) = v28;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  aBlock[3] = &block_descriptor_203;
  unint64_t v30 = _Block_copy(aBlock);
  unint64_t v31 = v3;
  swift_retain();
  swift_release();
  uint64_t v32 = (objc_class *)objc_msgSend(v27, sel_imageWithActions_, v30);

  _Block_release(v30);
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  BOOL v33 = (objc_class *)swift_release();
  if (v27)
  {
    __break(1u);
  }
  else
  {
    unint64_t v35 = v40;
    swift_release();

    BOOL v33 = v32;
  }
  result.value.super.isdouble a = v33;
  result.is_nil = v34;
  return result;
}

Swift::Void __swiftcall Canvas.updateToolPickerContextualEditingView()()
{
  uint64_t v1 = Canvas.canvasElementController.getter();
  if (v1)
  {
    id v10 = (id)v1;
    CanvasElementController.updateToolPickerContextualEditingView()();
    uint64_t v2 = v10;
  }
  else
  {
    uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
    if (!v3) {
      return;
    }
    id v11 = (id)v3;
    swift_getObjectType();
    uint64_t v4 = swift_conformsToProtocol2();
    BOOL v5 = v4 == 0;
    if (v4) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v2 = v11;
    if (v5) {
      id v7 = 0;
    }
    else {
      id v7 = v11;
    }
    if (v7)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(ObjectType, v6);
      CanvasElementController.updateToolPickerContextualEditingView()();

      uint64_t v2 = (void *)v9;
    }
  }
}

uint64_t Canvas.suggestedPositionForNewCanvasElement(withSize:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x308))();
  if (!result) {
    return result;
  }
  uint64_t v4 = (void *)result;
  BOOL v5 = Canvas.editingView.getter();
  (*(void (**)(void *__return_ptr))((*v2 & *v5) + 0x2A0))(v81);
  CGFloat v74 = *(double *)&v81[1];
  CGFloat v76 = *(double *)v81;
  CGFloat v6 = *(double *)&v81[4];
  CGFloat v71 = *(double *)&v81[3];
  CGFloat v72 = *(double *)&v81[2];
  CGFloat v7 = *(double *)&v81[5];

  (*(void (**)(void *__return_ptr))((*v2 & *v1) + 0x5D0))(v82);
  CGFloat v9 = *(double *)v82;
  CGFloat v8 = *(double *)&v82[1];
  CGFloat v10 = *(double *)&v82[2];
  CGFloat v11 = *(double *)&v82[3];
  CGFloat v12 = *(double *)&v82[4];
  CGFloat v13 = *(double *)&v82[5];
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v82, (uint64_t)v83, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  if (v83[48])
  {
    CGFloat v11 = 1.0;
    CGFloat v13 = 0.0;
    CGFloat v12 = 0.0;
    CGFloat v10 = 0.0;
    CGFloat v8 = 0.0;
    CGFloat v9 = 1.0;
  }
  t1.CGFloat a = v76;
  t1.CGFloat b = v74;
  t1.CGFloat c = v72;
  t1.CGFloat d = v71;
  t1.CGFloat tx = v6;
  t1.CGFloat ty = v7;
  t2.CGFloat a = v9;
  t2.CGFloat b = v8;
  t2.CGFloat c = v10;
  t2.CGFloat d = v11;
  t2.CGFloat tx = v12;
  t2.CGFloat ty = v13;
  CGAffineTransformConcat(&v78, &t1, &t2);
  CGAffineTransform t1 = v78;
  CGAffineTransformInvert(&t2, &t1);
  CGFloat a = t2.a;
  CGFloat b = t2.b;
  CGFloat c = t2.c;
  CGFloat d = t2.d;
  CGFloat ty = t2.ty;
  CGFloat tx = t2.tx;
  Canvas.insertionPosition.getter();
  double v18 = Canvas.editingView.getter();
  double v63 = (*(double (**)(void))((*v2 & *v18) + 0x140))();

  id v19 = Canvas.editingView.getter();
  objc_msgSend(v19, sel_bounds);
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  CGFloat v25 = v24;
  CGFloat v27 = v26;

  CGFloat v73 = a;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  CGFloat v69 = d;
  CGFloat v70 = c;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  v85.origin.CGFloat x = v21;
  v85.origin.CGFloat y = v23;
  v85.size.CGFloat width = v25;
  v85.size.double height = v27;
  CGRect v86 = CGRectApplyAffineTransform(v85, &t1);
  CGFloat y = v86.origin.y;
  CGFloat x = v86.origin.x;
  CGFloat in = v86.size.width;
  double height = v86.size.height;
  if ((*(uint64_t (**)(void))((*v2 & *v1) + 0x588))())
  {
    objc_msgSend(v4, sel_bounds);
    double height = height + CGRectGetHeight(v87);
  }
  v88.origin.CGFloat y = y;
  v88.origin.CGFloat x = x;
  v88.size.CGFloat width = in;
  v88.size.double height = height;
  __C::CGRect v89 = CGRect.closestRect(in:)(v88);
  CGFloat v29 = v89.origin.x;
  CGFloat v30 = v89.origin.y;
  CGFloat width = v89.size.width;
  CGFloat v32 = v89.size.height;
  double MidX = CGRectGetMidX((CGRect)v89);
  v90.origin.CGFloat x = v29;
  v90.origin.CGFloat y = v30;
  v90.size.CGFloat width = width;
  v90.size.double height = v32;
  double MidY = CGRectGetMidY(v90);
  id v35 = Canvas.editingView.getter();
  id v36 = objc_msgSend(v35, sel_effectiveUserInterfaceLayoutDirection);

  id v37 = Canvas.editingView.getter();
  uint64_t v39 = v38;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 56))(ObjectType, v39);

  if (v41 < 0 || (v41 & 0x4000000000000000) != 0)
  {
    unint64_t v62 = swift_bridgeObjectRetain();
    uint64_t v42 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v62);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v42 = v41 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  *(void *)&t1.CGFloat a = v42;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&t1, v36 == 0);
  swift_bridgeObjectRelease();
  CGFloat v43 = t1.a;
  if (one-time initialization token for canvasElementPasteOffset != -1) {
    swift_once();
  }
  double v44 = *(double *)&static UIConstants.canvasElementPasteOffset;
  if ((*(void *)&v43 & 0x8000000000000000) != 0 || (*(void *)&v43 & 0x4000000000000000) != 0)
  {
    swift_retain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    if (v45) {
      goto LABEL_14;
    }
LABEL_31:

    return swift_release_n();
  }
  uint64_t v45 = *(void *)(*(void *)&v43 + 16);
  swift_retain();
  if (!v45) {
    goto LABEL_31;
  }
LABEL_14:
  if (v45 >= 1)
  {
    uint64_t v46 = 0;
    double v47 = -v44;
    if (!v36) {
      double v47 = v44;
    }
    double v64 = v47;
    CGFloat v65 = height;
    do
    {
      if ((*(void *)&v43 & 0xC000000000000001) != 0) {
        id v48 = (id)MEMORY[0x21054E050](v46, *(void *)&v43);
      }
      else {
        id v48 = *(id *)(*(void *)&v43 + 8 * v46 + 32);
      }
      int v49 = v48;
      objc_msgSend(v48, sel_frame, *(void *)&v63, *(void *)&v64);
      CGFloat v50 = v91.origin.x;
      CGFloat v51 = v91.origin.y;
      CGFloat v52 = v91.size.width;
      CGFloat v53 = v91.size.height;
      CGFloat v54 = CGRectGetMidX(v91);
      v92.origin.CGFloat x = v50;
      v92.origin.CGFloat y = v51;
      v92.size.CGFloat width = v52;
      v92.size.double height = v53;
      v84.CGFloat y = CGRectGetMidY(v92);
      t1.CGFloat a = v73;
      t1.CGFloat b = b;
      t1.CGFloat c = v70;
      t1.CGFloat d = v69;
      t1.CGFloat tx = tx;
      t1.CGFloat ty = ty;
      v84.CGFloat x = v54;
      CGPoint v55 = CGPointApplyAffineTransform(v84, &t1);
      double v56 = vabdd_f64(v55.y, MidY);
      if (vabdd_f64(v55.x, MidX) < 1.0 && v56 < 1.0)
      {
        v93.size.double height = v65;
        v93.origin.CGFloat y = y;
        v93.origin.CGFloat x = x;
        v93.size.CGFloat width = in;
        __C::CGRect v94 = CGRect.closestRect(in:)(v93);
        CGFloat v58 = v94.origin.x;
        CGFloat v59 = v94.origin.y;
        CGFloat v60 = v94.size.width;
        CGFloat v61 = v94.size.height;
        double MidX = CGRectGetMidX((CGRect)v94);
        v95.origin.CGFloat x = v58;
        v95.origin.CGFloat y = v59;
        v95.size.CGFloat width = v60;
        v95.size.double height = v61;
        double MidY = CGRectGetMidY(v95);
      }

      ++v46;
    }
    while (v45 != v46);
    goto LABEL_31;
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t Canvas.canvasCalculateSetShouldSolve(_:stroke:flag:undoable:)(int a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v5 = v4;
  int v28 = a4;
  uint64_t v33 = a3;
  int v32 = a1;
  CGFloat v6 = (void *)(*MEMORY[0x263F8EED0] & *v4);
  uint64_t v7 = v6[251];
  uint64_t v31 = v6[252];
  uint64_t v8 = *(void *)(v31 + 16);
  uint64_t v27 = v7;
  uint64_t v26 = v8;
  uint64_t v30 = type metadata accessor for Capsule();
  uint64_t v36 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  CGFloat v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v34 = *(void *)(v12 - 8);
  uint64_t v35 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  double v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  CGFloat v21 = (char *)&v25 - v20;
  isCGFloat a = PKStroke._bridgeToObjectiveC()().super.isa;
  id v22 = [(objc_class *)isa _strokeUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v21, v15);
  CRKeyPath.init(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v23 = v30;
  WeakRef.init(id:)();
  CanvasElementView.canvasElement.getter((uint64_t)v10);
  char v43 = 0;
  uint64_t v37 = v31;
  uint64_t v38 = v6[253];
  uint64_t v39 = v14;
  char v40 = v32;
  uint64_t v41 = v33;
  uint64_t v42 = &v43;
  Capsule.callAsFunction<A>(_:)();
  if (v43 == 1)
  {
    if (v28)
    {
      uint64_t v45 = v27;
      uint64_t v46 = v26;
      double v47 = v5;
      id v48 = v10;
      Canvas.undoable(newChange:persistSelection:action:)(0, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.mergeUndoable<A>(_:));
    }
    else
    {
      v44[0] = 3;
      AnyCanvas.merge<A>(_:from:)((uint64_t)v10, v44, v27, v26);
    }
  }

  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v23);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v14, v35);
}

Swift::Void __swiftcall Canvas.mathAddGraph(forExpression:variable:range:identifier:expressionLocation:addToExisting:)(Swift::String forExpression, Swift::String_optional variable, __C::CGRect range, Swift::String identifier, CGPoint expressionLocation, Swift::Bool addToExisting)
{
  uint64_t v7 = v6;
  LODWORD(v88) = addToExisting;
  uint64_t countAndFlagsBits = identifier._countAndFlagsBits;
  uint64_t v87 = variable.value._countAndFlagsBits;
  object = variable.value._object;
  double y = expressionLocation.y;
  double x = expressionLocation.x;
  CGFloat height = range.size.height;
  CGFloat width = range.size.width;
  CGFloat v13 = range.origin.y;
  CGFloat v14 = range.origin.x;
  uint64_t v85 = forExpression._countAndFlagsBits;
  *(void *)&CGFloat v78 = *MEMORY[0x263F8EED0] & *v6;
  CGFloat v15 = v78;
  uint64_t v16 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v80 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v84);
  uint64_t v79 = (uint64_t)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v82 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v81 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = *(void *)(*(void *)&v15 + 2016);
  uint64_t v20 = type metadata accessor for Capsule();
  uint64_t v75 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  id v22 = (char *)&v75 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphElement>?);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  CGFloat MaxY = *(double *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  int v28 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for GraphableExpression();
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v31 = (char *)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v90 = 0.0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __C::CGRect v89 = v31;
  GraphableExpression.init(expression:identifier:graphableVariable:color:)((uint64_t)object, (uint64_t)v31);
  if ((LOBYTE(v88) & 1) != 0
    && (~*(void *)&x & 0x7FF0000000000000) != 0
    && (~*(void *)&y & 0x7FF0000000000000) != 0)
  {
    CanvasElementView.canvasElement.getter((uint64_t)v22);
    Capsule<>.graphElementClosestTo(_:maxDistance:)(0.0, 1, v20, v76, *(void *)(*(void *)&v78 + 2024), (uint64_t)v25, x, y);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v22, v20);
    double v32 = MaxY;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)&MaxY + 48))(v25, 1, v26) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)&v32 + 32))(v28, v25, v26);
      uint64_t v72 = (uint64_t)v89;
      *(void *)&long long v92 = v7;
      *((void *)&v92 + 1) = v89;
      __C::CGRect v93 = v28;
      Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.undoablyAdd(_:to:));
      (*(void (**)(char *, uint64_t))(*(void *)&v32 + 8))(v28, v26);
      uint64_t v71 = v72;
      goto LABEL_19;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for Ref<GraphElement>?);
  }
  uint64_t v85 = *(void *)&v14;
  uint64_t countAndFlagsBits = *(void *)&v13;
  uint64_t v87 = *(void *)&width;
  CGFloat v88 = height;
  double v33 = Canvas.modelCanvasWidth.getter();
  if (one-time initialization token for defaultGraphSize != -1) {
    swift_once();
  }
  long long v34 = static UIConstants.defaultGraphSize;
  if (v33 * 0.5 <= x) {
    double v35 = 40.0;
  }
  else {
    double v35 = v33 - (*(double *)&static UIConstants.defaultGraphSize + 40.0);
  }
  uint64_t v36 = self;
  id v37 = objc_msgSend(v36, sel_standardUserDefaults);
  uint64_t v38 = (void *)MEMORY[0x21054D080](0xD00000000000001DLL, 0x800000020C85EF10);
  objc_msgSend(v37, sel_doubleForKey_, v38);
  double v40 = v39;

  id v41 = objc_msgSend(v36, sel_standardUserDefaults);
  uint64_t v42 = (void *)MEMORY[0x21054D080](0xD00000000000001DLL, 0x800000020C85EF30);
  objc_msgSend(v41, sel_doubleForKey_, v42);
  double v44 = v43;

  double v45 = v35 + v40;
  double v46 = y + 30.0 + v44;
  double v90 = v35 + v40;
  double v91 = v46;
  long long v92 = v34;
  double v47 = (void *)MEMORY[0x263F8EED0];
  v94.origin.double x = (*(double (**)(void))((*MEMORY[0x263F8EED0] & *v7) + 0x350))();
  CGRect v95 = CGRectInset(v94, 0.0, 30.0);
  CGFloat v48 = v95.origin.x;
  CGFloat v49 = v95.origin.y;
  CGFloat v50 = v95.size.width;
  CGFloat v51 = v95.size.height;
  v95.origin.double x = v45;
  v95.origin.double y = v46;
  CGFloat v78 = *((double *)&v34 + 1);
  v95.CGSize size = (CGSize)v34;
  double MinY = CGRectGetMinY(v95);
  v96.origin.double x = v48;
  v96.origin.double y = v49;
  v96.size.CGFloat width = v50;
  v96.size.CGFloat height = v51;
  CGFloat v53 = CGRectGetMinY(v96);
  uint64_t v54 = v83;
  uint64_t v55 = (uint64_t)v81;
  uint64_t v56 = (uint64_t)v89;
  if (MinY < v53)
  {
    v97.origin.double x = v48;
    v97.origin.double y = v49;
    v97.size.CGFloat width = v50;
    v97.size.CGFloat height = v51;
    double v57 = CGRectGetMinY(v97);
    v98.origin.double x = v45;
    v98.origin.double y = v46;
    *(void *)&v98.size.CGFloat width = v34;
    v98.size.CGFloat height = v78;
    double v58 = v57 - CGRectGetMinY(v98);
    uint64_t v59 = v84;
LABEL_15:
    double v91 = v46 + v58;
    goto LABEL_16;
  }
  v99.origin.double x = v45;
  v99.origin.double y = v46;
  *(void *)&v99.size.CGFloat width = v34;
  v99.size.CGFloat height = v78;
  CGFloat MaxY = CGRectGetMaxY(v99);
  v100.origin.double x = v48;
  v100.origin.double y = v49;
  v100.size.CGFloat width = v50;
  v100.size.CGFloat height = v51;
  CGFloat v60 = CGRectGetMaxY(v100);
  uint64_t v59 = v84;
  if (v60 < MaxY)
  {
    v101.origin.double x = v45;
    v101.origin.double y = v46;
    v101.CGSize size = (CGSize)v34;
    double v61 = CGRectGetMaxY(v101);
    v102.origin.double x = v48;
    v102.origin.double y = v49;
    v102.size.CGFloat width = v50;
    v102.size.CGFloat height = v51;
    double v58 = CGRectGetMaxY(v102) - v61;
    goto LABEL_15;
  }
LABEL_16:
  double v62 = specialized static GraphElement.defaultVisibleRange.getter();
  GraphElement.init(frame:visibleRange:rotation:)(v79, 0.0, 0.0, 0.0, 0.0, v62, v63, v64, v65, 0);
  static CRKeyPath.unique.getter();
  uint64_t v66 = _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  uint64_t v67 = Capsule<>.init(_:id:)();
  MEMORY[0x270FA5388](v67);
  *(&v75 - 8) = (uint64_t)&v90;
  *(_OWORD *)(&v75 - 7) = v34;
  *(&v75 - 5) = v85;
  *(&v75 - 4) = countAndFlagsBits;
  *(&v75 - 3) = v87;
  CGFloat v73 = v88;
  uint64_t v74 = v56;
  uint64_t v68 = Capsule.callAsFunction<A>(_:)();
  CGFloat v69 = (void *)(*(uint64_t (**)(uint64_t))((*v47 & *v7) + 0x320))(v68);
  if (v69)
  {
    CGFloat v70 = v69;
    objc_msgSend(v69, sel__pauseHoverPreviewForTimeInterval_, 1.0);
  }
  static GraphCanvasElementView.isInsertingGraph = 1;
  Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)(v55, 1, 0, 0, v59, v66, &protocol witness table for GraphElement);
  static GraphCanvasElementView.isInsertingGraph = 0;
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v55, v54);
  uint64_t v71 = v56;
LABEL_19:
  _s8PaperKit5ImageVWOhTm_1(v71, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
}

uint64_t Canvas.mathExpressionIdentifiersForExistingGraphNearDrawingLocation(_:newExpression:)(double a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *MEMORY[0x263F8EED0] & *v2;
  uint64_t v7 = type metadata accessor for GraphableExpression();
  MEMORY[0x270FA5388](v7);
  uint64_t v54 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  uint64_t v70 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  double v63 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphableExpression>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v56 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>.Iterator);
  uint64_t v55 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v68 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v61);
  double v57 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = v6;
  uint64_t v15 = *(void *)(v6 + 2016);
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v67 = *(void *)(v6 + 2008);
  uint64_t v65 = v15;
  uint64_t v66 = v16;
  uint64_t v17 = type metadata accessor for Capsule();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v51 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphElement>?);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  double v58 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  CanvasElementView.canvasElement.getter((uint64_t)v20);
  Capsule<>.graphElementClosestTo(_:maxDistance:)(0.0, 1, v17, v65, *(void *)(v64 + 2024), (uint64_t)v23, a1, a2);
  uint64_t v27 = v25;
  int v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v64 = v17;
  uint64_t v65 = v18 + 8;
  v28(v20, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v23, 1, v24) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for Ref<GraphElement>?);
    return 0;
  }
  else
  {
    uint64_t v52 = v27;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v53 = v24;
    v30(v58, v23, v24);
    CanvasElementView.canvasElement.getter((uint64_t)v20);
    uint64_t v31 = v57;
    Ref.subscript.getter();
    double v32 = v56;
    double v62 = v28;
    v28(v20, v64);
    uint64_t v29 = MEMORY[0x263F8EE88];
    uint64_t v72 = MEMORY[0x263F8EE88];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
    double v33 = v68;
    CROrderedSet.makeIterator()();
    uint64_t v34 = v69;
    CROrderedSet.Iterator.next()();
    CGFloat v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
    uint64_t v61 = v70 + 48;
    BOOL v35 = v60(v32, 1, v9) == 1;
    uint64_t v36 = v33;
    uint64_t v37 = (uint64_t)v31;
    uint64_t v38 = v53;
    double v39 = v58;
    if (!v35)
    {
      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
      uint64_t v40 = (uint64_t)v54;
      v70 += 32;
      id v41 = (void (**)(char *, uint64_t))(v70 - 24);
      uint64_t v42 = v63;
      double v43 = v56;
      do
      {
        v59(v42, v43, v9);
        CanvasElementView.canvasElement.getter((uint64_t)v20);
        Ref.subscript.getter();
        v62(v20, v64);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        uint64_t v44 = v7;
        double v45 = v3;
        Swift::Int v47 = v71[0];
        Swift::Int v46 = v71[1];
        _s8PaperKit5ImageVWOhTm_1(v40, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
        Swift::Int v48 = v47;
        uint64_t v3 = v45;
        uint64_t v7 = v44;
        Swift::Int v49 = v46;
        uint64_t v42 = v63;
        specialized Set._Variant.insert(_:)(v71, v48, v49);
        swift_bridgeObjectRelease();
        (*v41)(v42, v9);
        CROrderedSet.Iterator.next()();
      }
      while (v60(v43, 1, v9) != 1);
      uint64_t v29 = v72;
      uint64_t v36 = v68;
      uint64_t v34 = v69;
      uint64_t v37 = (uint64_t)v57;
      double v39 = v58;
      uint64_t v38 = v53;
    }
    (*(void (**)(char *, uint64_t))(v55 + 8))(v36, v34);
    _s8PaperKit5ImageVWOhTm_1(v37, (uint64_t (*)(void))type metadata accessor for GraphElement);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v38);
  }
  return v29;
}

Swift::Void __swiftcall Canvas.calculateDocumentChanged()()
{
  uint64_t v0 = type metadata accessor for GraphElement();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v26 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  BOOL v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = Canvas.editingView.getter();
  uint64_t v8 = v7;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(ObjectType, v8);

  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11) {
      goto LABEL_3;
    }
LABEL_15:
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_15;
  }
LABEL_3:
  if (v11 >= 1)
  {
    uint64_t v12 = 0;
    unint64_t v27 = v10 & 0xC000000000000001;
    uint64_t v24 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v25 = (void (**)(char *, char *, uint64_t))(v3 + 16);
    do
    {
      if (v27) {
        id v15 = (id)MEMORY[0x21054E050](v12, v10);
      }
      else {
        id v15 = *(id *)(v10 + 8 * v12 + 32);
      }
      uint64_t v16 = v15;
      type metadata accessor for GraphCanvasElementView(0);
      uint64_t v17 = swift_dynamicCastClass();
      if (v17)
      {
        uint64_t v18 = (void *)v17;
        id v19 = v16;
        specialized CanvasElementView.updateGestures()();
        specialized CanvasElementView.updateFrame()();
        uint64_t v20 = (void *)MEMORY[0x210550400]((char *)v18 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
        uint64_t v21 = (void *)MEMORY[0x263F8EED0];
        if (v20)
        {
          uint64_t v22 = v20;
          (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v20) + 0x680))();
        }
        uint64_t v13 = (char *)v18 + *(void *)((*v21 & *v18) + 0x380);
        swift_beginAccess();
        (*v25)(v5, v13, v2);
        _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
        uint64_t v14 = (uint64_t)v26;
        Capsule<>.root.getter();
        (*v24)(v5, v2);
        _s8PaperKit5ImageVWOhTm_1(v14, (uint64_t (*)(void))type metadata accessor for GraphElement);
        GraphCanvasElementView.cachedGraphableExpressionsState.getter();
        GraphableExpressionsState.update()();
        swift_release();
        GraphCanvasElementView.updateGraphView()();
      }
      ++v12;
    }
    while (v11 != v12);
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void Canvas.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  double v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = *(void **)a1;
  uint64_t v16 = *(void **)(a1 + 8);
  char v17 = *(unsigned char *)(a1 + 16);
  id v18 = objc_msgSend(v5, sel_window, v12);
  if (!v18
    || (id v19 = v18,
        id v20 = objc_msgSend(self, sel_sharedInstance),
        unsigned __int8 v21 = objc_msgSend(v20, sel_presentGreymatterAvailabilityAlertControllerInWindow_, v19),
        v19,
        v20,
        (v21 & 1) == 0))
  {
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v14, 1, 1, v22);
    type metadata accessor for MainActor();
    id v23 = v5;
    outlined copy of MagicGenerativePlaygroundContext(v15, v16, v17);
    uint64_t v24 = static MainActor.shared.getter();
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = MEMORY[0x263F8F500];
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = v26;
    *(void *)(v25 + 32) = v23;
    *(double *)(v25 + 40) = a2;
    *(double *)(v25 + 48) = a3;
    *(double *)(v25 + 56) = a4;
    *(double *)(v25 + 64) = a5;
    *(void *)(v25 + 72) = v15;
    *(void *)(v25 + 80) = v16;
    *(unsigned char *)(v25 + 88) = v17;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:), v25);
    swift_release();
  }
}

uint64_t Canvas.imageElementFor(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  BOOL v5 = (char *)&v8 - v4;
  CanvasElementView.canvasElement.getter((uint64_t)&v8 - v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<Image> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 0, 1, v6);
}

uint64_t Canvas.encodedRecipeFor(_:)()
{
  uint64_t v0 = type metadata accessor for Capsule();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v10 - v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  CanvasElementView.canvasElement.getter((uint64_t)v3);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v7 = type metadata accessor for Image();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for Image?);
    return 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
    CRRegister.wrappedValue.getter();
    uint64_t v8 = v10;
    _s8PaperKit5ImageVWOhTm_1((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Image);
  }
  return v8;
}

void Canvas.magicGenerativePlaygroundContainerState.getter(char *a1@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x320))();
  if (v3)
  {
    uint64_t v4 = (char *)v3;
    type metadata accessor for TiledTextView();
    if (swift_dynamicCastClass())
    {
      uint64_t v5 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();

      uint64_t v6 = *(void *)&v5[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
      if (!v6)
      {
        char v7 = 10;
        goto LABEL_9;
      }
      uint64_t v4 = (char *)objc_retain(*(id *)(v6
                                     + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool));

      char v7 = v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState];
    }
    else
    {
      char v7 = 10;
    }
    uint64_t v5 = v4;
LABEL_9:

    goto LABEL_10;
  }
  char v7 = 10;
LABEL_10:
  *a1 = v7;
}

id Canvas.magicGenerativePlaygroundUndoManager.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)v1;
  type metadata accessor for TiledTextView();
  if (swift_dynamicCastClass())
  {
    uint64_t v3 = (char *)TiledTextView.canvasGenerationToolOverlayController.getter();
    uint64_t v4 = *(void *)&v3[OBJC_IVAR____TtC8PaperKit37CanvasGenerationToolOverlayController_canvasGenerationToolController];
    if (v4) {
      id v5 = *(id *)(v4 + OBJC_IVAR____TtC8PaperKit30CanvasGenerationToolController_canvasGenerationTool);
    }
    else {
      id v5 = 0;
    }

    id v6 = objc_msgSend(v5, sel_undoManager);
  }
  else
  {

    return 0;
  }
  return v6;
}

uint64_t Canvas.multipeerConnection.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for Canvas.multipeerConnection) = a1;
  return swift_release();
}

uint64_t Canvas.multipeerCanvasStateConnection.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for Canvas.multipeerCanvasStateConnection) = a1;
  return swift_release();
}

uint64_t Canvas.removeOldEraserStrokesTimer.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for Canvas.removeOldEraserStrokesTimer) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t Canvas.liveStreamMessenger.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Canvas.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized Canvas.liveStreamMessenger.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*Canvas.liveStreamMessenger.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return Canvas.liveStreamMessenger.modify;
}

uint64_t Canvas.liveStreamMessenger.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return Canvas.liveStreamMessenger.didset();
  }
  return result;
}

uint64_t Canvas.dataModelIdentifier.getter()
{
  uint64_t v0 = type metadata accessor for Capsule();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - v2;
  CanvasElementView.canvasElement.getter((uint64_t)&v5 - v2);
  Capsule<>.rootID.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t Canvas.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v4 = 3;
  return AnyCanvas.merge<A>(_:from:)(a1, &v4, a2, a3);
}

uint64_t Canvas.updatablePaper.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v14 - v5;
  uint64_t v7 = *(void *)(v2 - 8);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, a1, v3, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v2) == 1)
  {
    double v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v12(a1, v3);
    return ((uint64_t (*)(char *, uint64_t))v12)(v6, v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v6, v2);
    specialized Canvas.updatablePaper2.setter((uint64_t)v11);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v2);
  }
}

void (*Canvas.updatablePaper.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  type metadata accessor for Capsule();
  uint64_t v4 = type metadata accessor for Optional();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  Canvas.updatablePaper.getter();
  return Canvas.updatablePaper.modify;
}

void Canvas.updatablePaper.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    Canvas.updatablePaper.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    Canvas.updatablePaper.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Canvas.updatablePaper2.getter@<X0>(uint64_t a1@<X8>)
{
  return CanvasElementView.canvasElement.getter(a1);
}

uint64_t Canvas.updatablePaper2.setter(uint64_t a1)
{
  specialized Canvas.updatablePaper2.setter(a1);
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

void (*Canvas.updatablePaper2.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = Canvas.rootElement.modify(v3);
  return Canvas.updatablePaper2.modify;
}

void Canvas.updatablePaper2.modify(void *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void (**)(void, void))(*a1 + 40);
  if (a2)
  {
    v3(*a1, 0);
  }
  else
  {
    uint64_t v4 = (void *)v2[4];
    v3(*a1, 0);
    char v5 = 3;
    (*(void (**)(char *))((*MEMORY[0x263F8EED0] & *v4) + 0x530))(&v5);
  }
  free(v2);
}

uint64_t Canvas.childViewControllerCancellable.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for Canvas.childViewControllerCancellable) = a1;
  return swift_release();
}

uint64_t Canvas.paper2.setter(uint64_t a1)
{
  specialized Canvas.rootElement.setter(a1);
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t (*Canvas.rootElement.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void **)(v1 + direct field offset for Canvas.paperView);
  v3[4] = v4;
  id v5 = v4;
  v3[5] = CanvasElementView.canvasElement.modify();
  return Canvas.rootElement.modify;
}

uint64_t Canvas.updatablePaper.getter@<X0>(uint64_t a1@<X8>)
{
  CanvasElementView.canvasElement.getter(a1);
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 0, 1, v2);
}

uint64_t Canvas.paper.setter(uint64_t a1)
{
  specialized Canvas.paper.setter(a1);
  type metadata accessor for Capsule();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

void (*Canvas.paper.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  type metadata accessor for Capsule();
  uint64_t v4 = type metadata accessor for Optional();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  Canvas.updatablePaper.getter();
  return Canvas.paper.modify;
}

void Canvas.paper.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    specialized Canvas.paper.setter((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized Canvas.paper.setter(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

void Canvas.rootElement.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t Canvas.xpcMulticast.getter()
{
  specialized Canvas.xpcMulticast.getter();
  return swift_retain();
}

uint64_t Canvas.xpcMulticast.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for Canvas.xpcMulticast);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*Canvas.xpcMulticast.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

void Canvas._editingView.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + direct field offset for Canvas._editingView);
  uint64_t v4 = *(void **)(v2 + direct field offset for Canvas._editingView);
  *uint64_t v3 = a1;
  v3[1] = a2;
}

uint64_t Canvas._canvasElementController.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for Canvas._canvasElementController) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t Canvas.canvasElementController.getter()
{
  uint64_t v1 = *(void **)((char *)v0 + direct field offset for Canvas._canvasElementController);
  uint64_t v2 = (uint64_t)v1;
  if (!v1)
  {
    uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      swift_getObjectType();
      uint64_t v7 = swift_conformsToProtocol2();
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v7) {
        double v9 = v6;
      }
      else {
        double v9 = 0;
      }
      if (v9)
      {
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 48))(ObjectType, v8);
      }
      else
      {

        uint64_t v2 = 0;
      }
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  id v3 = v1;
  return v2;
}

uint64_t Canvas.dropSessionType.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for Canvas.dropSessionType);
}

uint64_t Canvas.dropSessionType.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for Canvas.dropSessionType) = result;
  return result;
}

uint64_t Canvas.dropInteractionSessionIsActive.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for Canvas.dropInteractionSessionIsActive);
}

uint64_t Canvas.dropInteractionSessionIsActive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for Canvas.dropInteractionSessionIsActive) = result;
  return result;
}

BOOL Canvas.allowsDropInteraction.getter()
{
  void *(*v1)(uint64_t *__return_ptr);
  void *v2;
  uint64_t v4;

  uint64_t v1 = *(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x263F8EED0] & *v0) + 0x2C8);
  uint64_t v2 = v1((uint64_t *)((char *)&v4 + 1));
  if (BYTE1(v4) == 3) {
    return 1;
  }
  ((void (*)(uint64_t *__return_ptr, void *))v1)(&v4, v2);
  return v4 == 2;
}

Swift::Void __swiftcall Canvas.setupBandSelection()()
{
  uint64_t v1 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = MEMORY[0x263F8EE88];
  *(void *)(v2 + 16) = MEMORY[0x263F8EE88];
  *(void *)(v2 + 24) = v3;
  *(void *)(v2 + 32) = 6;
  *(unsigned char *)(v2 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  uint64_t v4 = swift_allocBox();
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for PKDrawing();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  double v9 = (void *)swift_allocObject();
  uint64_t v10 = v1[251];
  v9[2] = v10;
  uint64_t v11 = v1[252];
  v9[3] = v11;
  uint64_t v12 = v1[253];
  v9[4] = v12;
  void v9[5] = v8;
  void v9[6] = v2;
  v9[7] = v4;
  id v13 = objc_allocWithZone(MEMORY[0x263F824A0]);
  id v23 = partial apply for closure #1 in Canvas.setupBandSelection();
  uint64_t v24 = v9;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v20 = 1107296256;
  unsigned __int8 v21 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction) -> ();
  uint64_t v22 = &block_descriptor_173;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  id v15 = objc_msgSend(v13, sel_initWithSelectionHandler_, v14);
  _Block_release(v14);
  swift_release();
  swift_release();
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v17 = (void *)swift_allocObject();
  v17[2] = v10;
  v17[3] = v11;
  v17[4] = v12;
  v17[5] = v16;
  id v23 = partial apply for closure #2 in Canvas.setupBandSelection();
  uint64_t v24 = v17;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v20 = 1107296256;
  unsigned __int8 v21 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction, @unowned CGPoint) -> (@unowned Bool);
  uint64_t v22 = &block_descriptor_180;
  id v18 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v15, sel_setShouldBeginHandler_, v18);
  _Block_release(v18);
  objc_msgSend(v0, sel_addInteraction_, v15);

  swift_release();
  swift_release();
}

double Canvas.insertionPosition.getter()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_window);
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = v2;
  id v4 = Canvas.editingView.getter();
  objc_msgSend(v3, sel_bounds);
  CGFloat x = v59.origin.x;
  CGFloat y = v59.origin.y;
  CGFloat width = v59.size.width;
  CGFloat height = v59.size.height;
  double MidX = CGRectGetMidX(v59);
  v60.origin.CGFloat x = x;
  v60.origin.CGFloat y = y;
  v60.size.CGFloat width = width;
  v60.size.CGFloat height = height;
  objc_msgSend(v4, sel_convertPoint_fromCoordinateSpace_, v3, MidX, CGRectGetMidY(v60));
  CGFloat v49 = v11;
  CGFloat v51 = v10;

  uint64_t v12 = Canvas.editingView.getter();
  id v13 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x263F8EED0] & *v12) + 0x2A0))(v55);
  CGFloat rect = *(double *)&v55[1];
  CGFloat v47 = *(double *)v55;
  CGFloat v14 = *(double *)&v55[4];
  CGFloat v43 = *(double *)&v55[3];
  CGFloat v44 = *(double *)&v55[2];
  CGFloat v15 = *(double *)&v55[5];

  (*(void (**)(void *__return_ptr))((*v13 & *v1) + 0x5D0))(v56);
  CGFloat v17 = *(double *)v56;
  CGFloat v16 = *(double *)&v56[1];
  CGFloat v19 = *(double *)&v56[2];
  CGFloat v18 = *(double *)&v56[3];
  CGFloat v21 = *(double *)&v56[4];
  CGFloat v20 = *(double *)&v56[5];
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v56, (uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  if (v57[48])
  {
    CGFloat v18 = 1.0;
    CGFloat v20 = 0.0;
    CGFloat v21 = 0.0;
    CGFloat v19 = 0.0;
    CGFloat v16 = 0.0;
    CGFloat v17 = 1.0;
  }
  t1.CGFloat a = v47;
  t1.CGFloat b = rect;
  t1.CGFloat c = v44;
  t1.CGFloat d = v43;
  t1.CGFloat tx = v14;
  t1.CGFloat ty = v15;
  t2.CGFloat a = v17;
  t2.CGFloat b = v16;
  t2.CGFloat c = v19;
  t2.CGFloat d = v18;
  t2.CGFloat tx = v21;
  t2.CGFloat ty = v20;
  CGAffineTransformConcat(&v52, &t1, &t2);
  CGAffineTransform t1 = v52;
  CGAffineTransformInvert(&t2, &t1);
  CGFloat a = t2.a;
  CGFloat b = t2.b;
  CGFloat c = t2.c;
  CGFloat d = t2.d;
  CGFloat tx = t2.tx;
  CGFloat ty = t2.ty;
  CGAffineTransform t1 = t2;
  v58.CGFloat y = v49;
  v58.CGFloat x = v51;
  double v28 = CGPointApplyAffineTransform(v58, &t1).x;
  id v29 = Canvas.editingView.getter();
  objc_msgSend(v29, sel_bounds);
  CGFloat v48 = v31;
  CGFloat v50 = v30;
  rectCGFloat a = v32;
  CGFloat v34 = v33;

  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  v61.origin.CGFloat y = v48;
  v61.origin.CGFloat x = v50;
  v61.size.CGFloat width = recta;
  v61.size.CGFloat height = v34;
  CGRect v62 = CGRectApplyAffineTransform(v61, &t1);
  CGFloat v35 = v62.origin.x;
  CGFloat v36 = v62.origin.y;
  CGFloat v37 = v62.size.width;
  CGFloat v38 = v62.size.height;
  double MinX = CGRectGetMinX(v62);
  v63.origin.CGFloat x = v35;
  v63.origin.CGFloat y = v36;
  v63.size.CGFloat width = v37;
  v63.size.CGFloat height = v38;
  double MaxX = CGRectGetMaxX(v63);
  if (MaxX >= v28) {
    double MaxX = v28;
  }
  if (v28 >= MinX) {
    double v41 = MaxX;
  }
  else {
    double v41 = MinX;
  }
  v64.origin.CGFloat x = v35;
  v64.origin.CGFloat y = v36;
  v64.size.CGFloat width = v37;
  v64.size.CGFloat height = v38;
  CGRectGetMinY(v64);
  v65.origin.CGFloat x = v35;
  v65.origin.CGFloat y = v36;
  v65.size.CGFloat width = v37;
  v65.size.CGFloat height = v38;
  CGRectGetMaxY(v65);

  return v41;
}

CGFloat Canvas.modelCanvasWidth.getter()
{
  uint64_t v1 = v0;
  id v2 = Canvas.editingView.getter();
  uint64_t v3 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x263F8EED0] & *v2) + 0x2A0))(v33);
  CGFloat v28 = *(double *)v33;
  CGFloat v25 = *(double *)&v33[2];
  CGFloat v26 = *(double *)&v33[1];
  CGFloat v4 = *(double *)&v33[4];
  CGFloat v24 = *(double *)&v33[3];
  CGFloat v5 = *(double *)&v33[5];

  (*(void (**)(void *__return_ptr))((*v3 & *v1) + 0x5D0))(v34);
  CGFloat v7 = *(double *)v34;
  CGFloat v6 = *(double *)&v34[1];
  CGFloat v8 = *(double *)&v34[2];
  CGFloat v9 = *(double *)&v34[3];
  CGFloat v10 = *(double *)&v34[4];
  CGFloat v11 = *(double *)&v34[5];
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v34, (uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  if (v35[48])
  {
    CGFloat v9 = 1.0;
    CGFloat v11 = 0.0;
    CGFloat v10 = 0.0;
    CGFloat v8 = 0.0;
    CGFloat v6 = 0.0;
    CGFloat v7 = 1.0;
  }
  t1.CGFloat a = v28;
  t1.CGFloat b = v26;
  t1.CGFloat c = v25;
  t1.CGFloat d = v24;
  t1.CGFloat tx = v4;
  t1.CGFloat ty = v5;
  t2.CGFloat a = v7;
  t2.CGFloat b = v6;
  t2.CGFloat c = v8;
  t2.CGFloat d = v9;
  t2.CGFloat tx = v10;
  t2.CGFloat ty = v11;
  CGAffineTransformConcat(&v30, &t1, &t2);
  CGAffineTransform t1 = v30;
  CGAffineTransformInvert(&t2, &t1);
  long long v27 = *(_OWORD *)&t2.c;
  long long v29 = *(_OWORD *)&t2.a;
  CGFloat tx = t2.tx;
  CGFloat ty = t2.ty;
  id v14 = Canvas.editingView.getter();
  objc_msgSend(v14, sel_bounds);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;

  *(_OWORD *)&t1.CGFloat a = v29;
  *(_OWORD *)&t1.CGFloat c = v27;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  v36.origin.CGFloat x = v16;
  v36.origin.CGFloat y = v18;
  v36.size.CGFloat width = v20;
  v36.size.CGFloat height = v22;
  CGRect v37 = CGRectApplyAffineTransform(v36, &t1);
  return v37.size.width;
}

Swift::Bool __swiftcall Canvas.canvasElementOrFormFieldExistsAtPoint(_:)(CGPoint a1)
{
  uint64_t v2 = v1;
  double y = a1.y;
  double x = a1.x;
  id v5 = *(id *)(v1 + direct field offset for Canvas.paperView);
  unint64_t v6 = ContainerCanvasElementView.subelementViews.getter();

  if (v6 >> 62) {
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v8 = 4;
    while (1)
    {
      CGFloat v9 = (v6 & 0xC000000000000001) != 0
         ? (void *)MEMORY[0x21054E050](v8 - 4, v6)
         : *(id *)(v6 + 8 * v8);
      CGFloat v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      double v15 = v9;
      char v12 = closure #1 in Canvas.canvasElementOrFormFieldExistsAtPoint(_:)(&v15, v2, x, y);

      if (v12)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_14;
      }
      ++v8;
      if (v11 == v7) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  id v13 = (id)specialized ContainerCanvasElementView.formFillingView.getter();
  if (v13)
  {
    id v13 = objc_msgSend(v13, sel_hitTest_withEvent_, 0, x, y);
    if (v13)
    {

LABEL_14:
      LOBYTE(v13) = 1;
    }
  }
  return (char)v13;
}

__n128 Canvas.visibleBoundsOverride.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for Canvas.visibleBoundsOverride;
  swift_beginAccess();
  char v4 = *(unsigned char *)(v3 + 32);
  __n128 result = *(__n128 *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v4;
  return result;
}

uint64_t Canvas.visibleBoundsOverride.setter(uint64_t a1)
{
  uint64_t v3 = v1 + direct field offset for Canvas.visibleBoundsOverride;
  swift_beginAccess();
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a1, v3, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t (*Canvas.visibleBoundsOverride.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

void Canvas.selectedTextRange.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v3 - 8);
  id v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v6)
  {
LABEL_26:
    __break(1u);
    return;
  }
  id v7 = v6;
  uint64_t v8 = swift_bridgeObjectRetain();
  unint64_t v9 = specialized Sequence.compactMap<A>(_:)(v8, (uint64_t)v7);

  swift_bridgeObjectRelease();
  v36[1] = v5;
  uint64_t v37 = a1;
  if (v9 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (v10)
    {
LABEL_4:
      uint64_t v11 = 4;
      char v12 = (void *)MEMORY[0x263F8EED0];
      while (1)
      {
        if ((v9 & 0xC000000000000001) != 0) {
          id v13 = (void *)MEMORY[0x21054E050](v11 - 4, v9);
        }
        else {
          id v13 = *(id *)(v9 + 8 * v11);
        }
        id v14 = v13;
        uint64_t v15 = v11 - 3;
        if (__OFADD__(v11 - 4, 1))
        {
          __break(1u);
          goto LABEL_19;
        }
        CGFloat v16 = *(uint64_t (**)(void))((*v12 & *v13) + 0x2D0);
        double v17 = (char *)v16();
        if (v17)
        {
          uint64_t v18 = *(void *)&v17[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];

          if (v18) {
            break;
          }
        }

        ++v11;
        if (v15 == v10) {
          goto LABEL_20;
        }
      }
      uint64_t v19 = swift_bridgeObjectRelease_n();
      uint64_t v20 = ((uint64_t (*)(uint64_t))v16)(v19);
      if (!v20
        || (double v21 = (void *)v20,
            CGFloat v22 = *(void **)(v20 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView),
            id v23 = v22,
            v21,
            !v22))
      {

        goto LABEL_21;
      }
      CGFloat v24 = (char *)objc_msgSend(v23, sel_selectedRange);
      uint64_t v26 = v25;

      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (WeakRef<TextBox>, Range<Int>));
      uint64_t v28 = *(int *)(v27 + 48);
      (*(void (**)(void))((*v12 & *v14) + 0xE0))();
      type metadata accessor for TextBox();
      _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
      uint64_t v29 = v37;
      WeakRef.init(id:)();

      CGAffineTransform v30 = &v24[v26];
      if (__OFADD__(v24, v26))
      {
        __break(1u);
      }
      else if ((uint64_t)v30 >= (uint64_t)v24)
      {
        double v31 = (void *)(v29 + v28);
        *double v31 = v24;
        v31[1] = v30;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v29, 0, 1, v27);
        return;
      }
      __break(1u);
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_4;
    }
  }
LABEL_20:
  swift_bridgeObjectRelease_n();
LABEL_21:
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (WeakRef<TextBox>, Range<Int>));
  double v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);
  uint64_t v34 = v32;
  uint64_t v35 = v37;
  v33(v35, 1, 1, v34);
}

void Canvas.presentSubelement<A>(_:presentationViewController:)(void *a1, void *a2, uint64_t a3)
{
  void (*v12)(void *__return_ptr);
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void aBlock[6];

  uint64_t v35 = a2;
  id v5 = (void *)(*MEMORY[0x263F8EED0] & *v3);
  uint64_t v6 = *(void *)((*a1 & *MEMORY[0x263F8EED0]) + 0x368);
  uint64_t v7 = *(void *)((*a1 & *MEMORY[0x263F8EED0]) + 0x370);
  uint64_t v8 = type metadata accessor for Capsule();
  CGRect v36 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v11 = (char *)&v31 - v10;
  double v31 = v6;
  uint64_t v32 = v7;
  double v33 = a3;
  type metadata accessor for CanvasElementViewController();
  char v12 = (void (*)(void *__return_ptr))v5[89];
  id v13 = *(id *)((char *)v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_context);
  uint64_t v34 = v3;
  v12(aBlock);
  id v14 = v35;
  uint64_t v15 = specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:)(v13, (char *)aBlock, 1, 0);

  CanvasElementView.canvasElement.getter((uint64_t)v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v11, 0, 1, v8);
  specialized CanvasElementViewController.rootElement.setter(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v36);
  objc_msgSend(v15, sel_setModalPresentationStyle_, 3);
  CGFloat v16 = objc_msgSend(v14, sel_view);
  if (v16)
  {
    double v17 = v16;
    uint64_t v18 = objc_msgSend(v16, sel_tintColor);

    if (v18)
    {
      CanvasElementViewController.createNavigationBack(tintColor:)((UIColor)v18);

      uint64_t v19 = (void *)swift_allocObject();
      uint64_t v20 = v5[251];
      v19[2] = v20;
      double v21 = v5[252];
      v19[3] = v21;
      CGFloat v22 = v5[253];
      v19[4] = v22;
      v19[5] = v15;
      aBlock[4] = partial apply for closure #1 in Canvas.presentSubelement<A>(_:presentationViewController:);
      aBlock[5] = v19;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_157;
      id v23 = _Block_copy(aBlock);
      CGFloat v24 = v15;
      swift_release();
      objc_msgSend(v14, sel_presentViewController_animated_completion_, v24, 1, v23);
      _Block_release(v23);
      aBlock[0] = CanvasElementViewController.publisher.getter();
      uint64_t v25 = swift_allocObject();
      uint64_t v26 = v34;
      swift_unknownObjectWeakInit();
      uint64_t v27 = (void *)swift_allocObject();
      uint64_t v28 = v31;
      v27[2] = v20;
      v27[3] = v28;
      v27[4] = v21;
      v27[5] = v22;
      uint64_t v29 = v33;
      v27[6] = v32;
      v27[7] = v29;
      v27[8] = v25;
      type metadata accessor for AnyPublisher();
      swift_getWitnessTable();
      CGAffineTransform v30 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      *(void *)((char *)v26 + direct field offset for Canvas.childViewControllerCancellable) = v30;

      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Void __swiftcall Canvas.selectAll()()
{
  uint64_t v1 = (void *)(*MEMORY[0x263F8EED0] & *v0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v79 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v76 = (char *)v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v75 = (char *)v63 - v4;
  MEMORY[0x270FA5388](v5);
  uint64_t v74 = (char *)v63 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v77 = v7;
  uint64_t v78 = v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v80 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v67 = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v72 = (char *)v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v70 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  uint64_t v15 = (char *)v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v1[252];
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v73 = v1[251];
  uint64_t v18 = v73;
  uint64_t v66 = v17;
  uint64_t v19 = type metadata accessor for Capsule();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v65 = (uint64_t)v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  CGFloat v24 = (char *)v63 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v63 - v26;
  CanvasElementView.canvasElement.getter((uint64_t)v63 - v26);
  uint64_t v87 = v18;
  uint64_t v88 = v16;
  uint64_t v69 = v1[253];
  uint64_t v89 = v69;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  CGRect v64 = v27;
  v28(v27, v19);
  CGRect v86 = v0;
  unint64_t v68 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in Canvas.selectAll(), (uint64_t)v85);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v71);
  CanvasElementView.canvasElement.getter((uint64_t)v24);
  uint64_t v82 = v73;
  uint64_t v83 = v16;
  uint64_t v84 = v69;
  uint64_t v29 = (uint64_t)v72;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGAffineTransform v30 = v24;
  uint64_t v31 = v19;
  uint64_t v32 = v19;
  uint64_t v71 = v20 + 8;
  double v33 = (void (*)(uint64_t, uint64_t))v28;
  v28(v30, v32);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v29, 1, v34) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v29, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    uint64_t v36 = MEMORY[0x263F8EE78];
    uint64_t v37 = v68;
LABEL_17:
    uint64_t v61 = specialized Set.init<A>(_:)(v37);
    swift_bridgeObjectRelease();
    uint64_t v62 = specialized Set.init<A>(_:)(v36);
    swift_bridgeObjectRelease();
    AnyCanvas.selection.setter(v61, v62, 6, 0);
    return;
  }
  uint64_t v38 = (uint64_t)v64;
  CanvasElementView.canvasElement.getter((uint64_t)v64);
  v63[1] = v0;
  uint64_t v39 = (uint64_t)v67;
  uint64_t v40 = v73;
  uint64_t v41 = v66;
  Ref.subscript.getter();
  v33(v38, v31);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v29, v34);
  uint64_t v42 = v65;
  CanvasElementView.canvasElement.getter(v65);
  uint64_t v43 = PKDrawingStruct.allStrokes<A>(in:)(v42, v40, v41);
  v33(v42, v31);
  _s8PaperKit5ImageVWOhTm_1(v39, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
  int64_t v44 = *(void *)(v43 + 16);
  if (!v44)
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = MEMORY[0x263F8EE78];
LABEL_16:
    uint64_t v37 = v68;
    goto LABEL_17;
  }
  uint64_t v90 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44, 0);
  uint64_t v45 = specialized Set.startIndex.getter(v43);
  uint64_t v47 = v46;
  char v49 = v48 & 1;
  uint64_t v73 = v43 + 56;
  uint64_t v50 = v79;
  uint64_t v72 = (char *)(v79 + 16);
  uint64_t v71 = v79 + 32;
  uint64_t v70 = v79 + 8;
  uint64_t v69 = v78 + 32;
  uint64_t v51 = v81;
  while ((v45 & 0x8000000000000000) == 0 && v45 < 1 << *(unsigned char *)(v43 + 32))
  {
    if (((*(void *)(v73 + (((unint64_t)v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
      goto LABEL_19;
    }
    if (*(_DWORD *)(v43 + 36) != v47) {
      goto LABEL_20;
    }
    CGAffineTransform v52 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
    uint64_t v53 = v74;
    v52(v74, *(void *)(v43 + 48) + *(void *)(v50 + 72) * v45, v51);
    uint64_t v54 = v75;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v75, v53, v81);
    v52(v76, (uint64_t)v54, v81);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    WeakRef.init<A>(_:)();
    uint64_t v55 = v54;
    uint64_t v51 = v81;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v55, v81);
    uint64_t v36 = v90;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1);
      uint64_t v36 = v90;
    }
    unint64_t v57 = *(void *)(v36 + 16);
    unint64_t v56 = *(void *)(v36 + 24);
    if (v57 >= v56 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
      uint64_t v36 = v90;
    }
    *(void *)(v36 + 16) = v57 + 1;
    (*(void (**)(unint64_t))(v78 + 32))(v36+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(void *)(v78 + 72) * v57);
    uint64_t v58 = specialized _NativeSet.index(after:)(v45, v47, v49 & 1, v43);
    uint64_t v45 = v58;
    uint64_t v47 = v59;
    char v49 = v60 & 1;
    --v44;
    uint64_t v50 = v79;
    if (!v44)
    {
      outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v58, v59, v60 & 1);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

Swift::Void __swiftcall Canvas._copyAll()()
{
  Canvas.selectAll()();
  objc_msgSend(v0, sel_copy_, 0);
  uint64_t v1 = MEMORY[0x263F8EE88];
  uint64_t v2 = MEMORY[0x263F8EE88];
  AnyCanvas.selection.setter(v1, v2, 6, 0);
}

id Canvas.isRulerActive.getter()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_rulerEnabled);

  return v3;
}

void Canvas.isRulerActive.setter(char a1)
{
  id v3 = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x320))();
  objc_msgSend(v3, sel_setRulerEnabled_, a1 & 1);
}

void (*Canvas.isRulerActive.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = Canvas.isRulerActive.getter() & 1;
  return Canvas.isRulerActive.modify;
}

void Canvas.isRulerActive.modify(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  id v2 = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **(void **)a1) + 0x320))();
  objc_msgSend(v2, sel_setRulerEnabled_, v1);
}

uint64_t Canvas.tool.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PKInk();
  uint64_t v8 = *(void *)(v7 - 8);
  v9.n128_f64[0] = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)(*(uint64_t (**)(__n128))((*MEMORY[0x263F8EED0] & *v1) + 0x320))(v9);
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = [v12 ink];

    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
    PKInk.tool.getter((uint64_t *)v20);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return outlined init with take of FindResult(v20, (uint64_t)a1);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F14A48], v3);
    id v16 = objc_msgSend(self, sel_blackColor);
    PKInk.init(_:color:)();
    uint64_t v17 = type metadata accessor for PKInkingTool();
    uint64_t v18 = MEMORY[0x263F14A50];
    a1[3] = v17;
    a1[4] = v18;
    __swift_allocate_boxed_opaque_existential_1(a1);
    return PKInkingTool.init(ink:width:)();
  }
}

uint64_t Canvas.tool.setter(void *a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for PKInk();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v28[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v28[-1] - v9;
  Canvas.tool.getter(v28);
  uint64_t v11 = v29;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  PKTool.ink.getter(v11, (uint64_t)v10);
  isCGFloat a = PKInk._bridgeToObjectiveC()().super.isa;
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v10, v4);
  uint64_t v14 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  PKTool.ink.getter(v14, (uint64_t)v7);
  Class v15 = PKInk._bridgeToObjectiveC()().super.isa;
  v13(v7, v4);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKInk);
  LOBYTE(v14) = static NSObject.== infix(_:_:)();

  uint64_t v16 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  if ((v14 & 1) == 0)
  {
    uint64_t v17 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x320);
    uint64_t v18 = (*MEMORY[0x263F8EED0] & *v2) + 800;
    uint64_t v19 = ((uint64_t (*)(uint64_t))v17)(v16);
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      uint64_t v27 = v18;
      uint64_t v21 = a1[3];
      __swift_project_boxed_opaque_existential_1(a1, v21);
      PKTool.ink.getter(v21, (uint64_t)v10);
      Class v22 = PKInk._bridgeToObjectiveC()().super.isa;
      v13(v10, v4);
      objc_msgSend(v20, sel_setInk_, v22);
    }
    uint64_t v23 = (void *)v17();
    if (v23)
    {
      CGFloat v24 = v23;
      unsigned int v25 = objc_msgSend(v23, sel_allowsFingerDrawing);

      if (v25) {
        AnyCanvas.selection.setter(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], 6, 0);
      }
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*Canvas.tool.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  Canvas.tool.getter(v3);
  return Canvas.tool.modify;
}

void Canvas.tool.modify(uint64_t *a1, char a2)
{
  id v2 = (void *)*a1;
  if (a2)
  {
    outlined init with copy of FindResult(*a1, (uint64_t)(v2 + 5));
    Canvas.tool.setter(v2 + 5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    Canvas.tool.setter((void *)*a1);
  }
  free(v2);
}

uint64_t Canvas.publisher.getter()
{
  return Canvas.publisher.getter();
}

{
  void *v0;
  id v1;

  uint64_t v1 = v0;
  swift_unknownObjectWeakInit();

  type metadata accessor for Capsule();
  type metadata accessor for Canvas.PaperViewCanvasPublisher();
  swift_getWitnessTable();
  return AnyPublisher.init<A>(_:)();
}

uint64_t Canvas.livePublisher.getter()
{
  return Canvas.publisher.getter();
}

id Canvas.mergeCanvasState(_:)()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<CanvasState>);
  type metadata accessor for CanvasState();
  _s8PaperKit7TextBoxVAC9Coherence4CRDTAAWlTm_0(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (void (*)(uint64_t))type metadata accessor for CanvasState);
  Capsule.merge<A>(_:)();
  swift_endAccess();
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

uint64_t Canvas.isInUndoableGroup.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for Canvas.isInUndoableGroup);
}

uint64_t Canvas.isInUndoableGroup.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for Canvas.isInUndoableGroup) = result;
  return result;
}

uint64_t Canvas.isUndoableGroupNewChange.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for Canvas.isUndoableGroupNewChange);
}

uint64_t Canvas.isUndoableGroupNewChange.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for Canvas.isUndoableGroupNewChange) = result;
  return result;
}

uint64_t Canvas.eraserCheckingIndex.getter()
{
  return *(void *)(v0 + direct field offset for Canvas.eraserCheckingIndex);
}

Swift::Void __swiftcall Canvas.stopCheckingForOldEraserStrokes(index:)(Swift::Int index)
{
  if (*(void *)(v1 + direct field offset for Canvas.eraserCheckingIndex) == index)
  {
    uint64_t v2 = v1;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_20C2D7000, v4, v5, "Stopped checking for old eraser strokes", v6, 2u);
      MEMORY[0x210550270](v6, -1, -1);
    }

    objc_msgSend(*(id *)(v2 + direct field offset for Canvas.removeOldEraserStrokesTimer), sel_invalidate);
    uint64_t v7 = *(void **)(v2 + direct field offset for Canvas.removeOldEraserStrokesTimer);
    *(void *)(v2 + direct field offset for Canvas.removeOldEraserStrokesTimer) = 0;
  }
}

Swift::Void __swiftcall Canvas.removeOldEraserStrokes()()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v8 - v5;
  static Date.now.getter();
  Date.addingTimeInterval(_:)();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v3, v0);
  Canvas.removeEraserStrokesCreatedBefore(_:)((uint64_t)v6);
  v7(v6, v0);
}

uint64_t Canvas.removeEraserStrokesCreatedBefore(_:)(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v2 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v34 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v34 - 8);
  uint64_t v29 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v34);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v5;
  uint64_t v31 = v2;
  uint64_t v30 = *(void *)(v2 + 2008);
  uint64_t v32 = *(void *)(v2 + 2016);
  uint64_t v28 = type metadata accessor for Capsule();
  uint64_t v6 = *(void *)(v28 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v28);
  uint64_t v26 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  CanvasElementView.canvasElement.getter((uint64_t)v10);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v17 = v28;
  v16((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v33, v34);
  unint64_t v18 = (*(unsigned __int8 *)(v6 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v19 = (v7 + *(unsigned __int8 *)(v3 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  uint64_t v21 = v30;
  uint64_t v22 = v31;
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 0;
  uint64_t v23 = v32;
  *((void *)v20 + 4) = v21;
  *((void *)v20 + 5) = v23;
  *((void *)v20 + 6) = *(void *)(v22 + 2024);
  *((void *)v20 + 7) = v15;
  v16(&v20[v18], v26, v17);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(&v20[v19], v27, v34);
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), (uint64_t)v20);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t Canvas.dropSessionFromCurrentCanvas(session:)(void *a1)
{
  swift_getObjectType();
  id v3 = objc_msgSend(a1, sel_localDragSession);
  if (!v3)
  {
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_9:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v11, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  id v4 = objc_msgSend(v3, sel_localContext);
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v10, (uint64_t)&v11, &demangling cache variable for type metadata for Any?);
  if (!*((void *)&v12 + 1)) {
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    char v8 = 0;
    return v8 & 1;
  }
  uint64_t v5 = *(void **)&v10[0];
  type metadata accessor for Canvas();
  id v6 = v1;
  id v7 = v5;
  char v8 = static NSObject.== infix(_:_:)();

  return v8 & 1;
}

void Canvas.dropFrame(session:)(void *a1@<X0>, double *a2@<X8>)
{
  uint64_t v43 = (void *)(*MEMORY[0x263F8EED0] & *v2);
  uint64_t v5 = (void *)v43[251];
  id v6 = (void *)v43[252];
  uint64_t v7 = type metadata accessor for Capsule();
  uint64_t v44 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v41 - v8;
  uint64_t v10 = type metadata accessor for UTType();
  uint64_t v42 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  long long v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = 0.0;
  if (Canvas.dropSessionFromCurrentCanvas(session:)(a1)) {
    goto LABEL_24;
  }
  id v14 = Canvas.editingView.getter();
  objc_msgSend(a1, sel_locationInView_, v14);
  CGFloat v16 = v15;
  CGFloat v18 = v17;

  id v19 = Canvas.editingView.getter();
  AnyCanvasElementView.paperBoundsTransform()(&v47);
  CGAffineTransform v46 = v47;
  CGAffineTransformInvert(&v45, &v46);
  CGAffineTransform v46 = v45;
  v48.double x = v16;
  v48.double y = v18;
  CGPoint v20 = CGPointApplyAffineTransform(v48, &v46);

  id v21 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v22 >> 62))
  {
    if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    double v26 = 0.0;
    double width = 0.0;
    double height = 0.0;
    double v29 = 0.0;
    goto LABEL_25;
  }
LABEL_4:
  if ((v22 & 0xC000000000000001) != 0)
  {
    id v23 = (id)MEMORY[0x21054E050](0, v22);
  }
  else
  {
    if (!*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    id v23 = *(id *)(v22 + 32);
  }
  CGFloat v24 = v23;
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(v24, sel_itemProvider);

  double v26 = 0.0;
  double width = 0.0;
  double height = 0.0;
  double v29 = 0.0;
  if (v25)
  {
    id v41 = v25;
    CGSize v30 = NSItemProvider.preferredSizeForCanvasElement()();
    double width = v30.width;
    double height = v30.height;
    if (v30.width != 0.0 || v30.height != 0.0) {
      goto LABEL_21;
    }
    static UTType.utf8PlainText.getter();
    uint64_t v31 = UTType.identifier.getter();
    uint64_t v33 = v32;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v10);
    uint64_t v34 = (void *)MEMORY[0x21054D080](v31, v33);
    swift_bridgeObjectRelease();
    id v35 = v41;
    LODWORD(v33) = objc_msgSend(v41, sel_hasItemConformingToTypeIdentifier_, v34);

    if (!v33)
    {
      if (specialized static LinkLayout.canHandle(itemProvider:)(v35))
      {
        if (one-time initialization token for linkSize != -1) {
          swift_once();
        }
        uint64_t v38 = (double *)&static UIConstants.linkSize;
      }
      else
      {
        if (one-time initialization token for canvasElementDefaultSize != -1) {
          swift_once();
        }
        uint64_t v38 = (double *)&static UIConstants.canvasElementDefaultSize;
      }
      double width = *v38;
      double height = v38[1];
      goto LABEL_21;
    }
    if (one-time initialization token for textBoxDefaultPointSize == -1)
    {
LABEL_12:
      double height = UnknownCanvasElementView.flags.modify(v36, v37);
      double width = 2.0;
LABEL_21:
      double v13 = v20.x - width * 0.5;
      double v26 = v20.y - height * 0.5;
      uint64_t v39 = CanvasElementView.canvasElement.getter((uint64_t)v9);
      MEMORY[0x270FA5388](v39);
      *(&v41 - 4) = v5;
      *(&v41 - 3) = v6;
      *(&v41 - 2) = (id)v43[253];
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();

      (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v7);
      double v29 = -v46.a;
      goto LABEL_25;
    }
LABEL_28:
    uint64_t v36 = swift_once();
    goto LABEL_12;
  }
LABEL_25:
  *a2 = v13;
  a2[1] = v26;
  a2[2] = width;
  a2[3] = height;
  a2[4] = v29;
}

uint64_t Canvas.isValidDropPoint(dropLocation:)(double a1, double a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x320))();
  if (!v5) {
    return 0;
  }
  id v6 = (void *)v5;
  objc_msgSend(v2, sel_convertPoint_toCoordinateSpace_, v5, a1, a2);
  double v8 = v7;
  double v10 = v9;
  id v11 = objc_msgSend(v6, sel_hitAttachment_);

  if (v11) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = (uint64_t)objc_msgSend(v6, sel_insertAttachmentIfInBlankSpace_, v8, v10);
  }

  return v12;
}

uint64_t Canvas.createSubCanvasElement(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v44 = *MEMORY[0x263F8EED0] & *v5;
  uint64_t v51 = type metadata accessor for CRKeyPath();
  uint64_t v11 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  double v13 = &v38[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v42 = *(void *)(v44 + 2016);
  uint64_t v14 = type metadata accessor for Capsule();
  uint64_t v45 = *(void *)(v14 - 8);
  uint64_t v46 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v43 = &v38[-v15];
  CGFloat v16 = v5;
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = specialized Sequence.compactMap<A>(_:)(v17, v16);
  uint64_t v41 = 0;
  uint64_t v47 = a1;
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();

  CanvasElementView.canvasElement.getter(a5);
  if (!(v19 >> 62))
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v48 = a2;
    uint64_t v49 = a3;
    if (v20) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v23 = MEMORY[0x263F8EE78];
LABEL_14:
    uint64_t v30 = specialized Set.init<A>(_:)(v23);
    uint64_t v31 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v31);
    uint64_t v32 = *(void *)(v44 + 2024);
    *(void *)&v38[-64] = v42;
    *(void *)&v38[-56] = v32;
    uint64_t v34 = v46;
    uint64_t v33 = v47;
    *(void *)&v38[-48] = v30;
    *(void *)&v38[-40] = v33;
    uint64_t v35 = v49;
    *(void *)&v38[-32] = v48;
    *(void *)&v38[-24] = v35;
    v38[-16] = a4 & 1;
    Capsule.callAsFunction<A>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = v43;
    Capsule.copy()();
    uint64_t v37 = v45;
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(a5, v34);
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v37 + 32))(a5, v36, v34);
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  if (!v20) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v52 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t v50 = v20;
    int v39 = a4;
    uint64_t v40 = a5;
    uint64_t v22 = 0;
    uint64_t v23 = v52;
    unint64_t v24 = v19 & 0xC000000000000001;
    unint64_t v25 = v19;
    do
    {
      if (v24) {
        double v26 = (void *)MEMORY[0x21054E050](v22, v19);
      }
      else {
        double v26 = *(id *)(v19 + 8 * v22 + 32);
      }
      uint64_t v27 = v26;
      (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v26) + 0xE0))();

      uint64_t v52 = v23;
      unint64_t v29 = *(void *)(v23 + 16);
      unint64_t v28 = *(void *)(v23 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        uint64_t v23 = v52;
      }
      ++v22;
      *(void *)(v23 + 16) = v29 + 1;
      (*(void (**)(unint64_t, unsigned char *, uint64_t))(v11 + 32))(v23+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v29, v13, v51);
      unint64_t v19 = v25;
    }
    while (v50 != v22);
    swift_bridgeObjectRelease();
    a5 = v40;
    LOBYTE(a4) = v39;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t Canvas.undoablyAdd(_:to:)()
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.undoablyAdd(_:to:));
}

id Canvas.updateScribbleIteractions(for:)(id result)
{
  if (!*(void *)(v1 + direct field offset for Canvas.scribbleInteraction))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = result;
  uint64_t result = objc_msgSend(result, sel_addInteraction_);
  if (!*(void *)(v1 + direct field offset for Canvas.indirectScribbleInteraction))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  return objc_msgSend(v2, sel_addInteraction_);
}